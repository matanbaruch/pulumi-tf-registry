// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AnnotationsMetadata {
    /**
     * The name of the resource.
     */
    name: string;
    /**
     * The namespace of the resource.
     */
    namespace?: string;
}

export interface ApiServiceMetadata {
    /**
     * An unstructured key value map stored with the api_service that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the api_service. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the api_service, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * An opaque value that represents the internal version of this api_service that can be used by clients to determine when api_service has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this api_service. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface ApiServiceSpec {
    /**
     * CABundle is a PEM encoded CA bundle which will be used to validate an API server's serving certificate. If unspecified, system trust roots on the apiserver are used.
     */
    caBundle?: string;
    /**
     * Group is the API group name this server hosts.
     */
    group: string;
    /**
     * GroupPriorityMinimum is the priority this group should have at least. Higher priority means that the group is preferred by clients over lower priority ones. Note that other versions of this group might specify even higher GroupPriorityMininum values such that the whole group gets a higher priority. The primary sort is based on GroupPriorityMinimum, ordered highest number to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object. (v1.bar before v1.foo) We'd recommend something like: *.k8s.io (except extensions) at 18000 and PaaSes (OpenShift, Deis) are recommended to be in the 2000s.
     */
    groupPriorityMinimum: number;
    /**
     * InsecureSkipTLSVerify disables TLS certificate verification when communicating with this server. This is strongly discouraged. You should use the CABundle instead.
     */
    insecureSkipTlsVerify?: boolean;
    /**
     * Service is a reference to the service for this API server. It must communicate on port 443. If the Service is nil, that means the handling for the API groupversion is handled locally on this server. The call will simply delegate to the normal handler chain to be fulfilled.
     */
    service?: outputs.ApiServiceSpecService;
    /**
     * Version is the API version this server hosts. For example, `v1`.
     */
    version: string;
    /**
     * VersionPriority controls the ordering of this API version inside of its group. Must be greater than zero. The primary sort is based on VersionPriority, ordered highest to lowest (20 before 10). Since it's inside of a group, the number can be small, probably in the 10s. In case of equal version priorities, the version string will be used to compute the order inside a group. If the version string is `kube-like`, it will sort above non `kube-like` version strings, which are ordered lexicographically. `Kube-like` versions start with a `v`, then are followed by a number (the major version), then optionally the string `alpha` or `beta` and another number (the minor version). These are sorted first by GA > `beta` > `alpha` (where GA is a version with no suffix such as `beta` or `alpha`), and then by comparing major version, then minor version. An example sorted list of versions: `v10`, `v2`, `v1`, `v11beta2`, `v10beta3`, `v3beta1`, `v12alpha1`, `v11alpha2`, `foo1`, `foo10`.
     */
    versionPriority: number;
}

export interface ApiServiceSpecService {
    /**
     * Name is the name of the service.
     */
    name: string;
    /**
     * Namespace is the namespace of the service.
     */
    namespace: string;
    /**
     * If specified, the port on the service that is hosting the service. Defaults to 443 for backward compatibility. Should be a valid port number (1-65535, inclusive).
     */
    port?: number;
}

export interface ApiServiceV1Metadata {
    /**
     * An unstructured key value map stored with the api_service that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the api_service. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the api_service, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * An opaque value that represents the internal version of this api_service that can be used by clients to determine when api_service has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this api_service. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface ApiServiceV1Spec {
    /**
     * CABundle is a PEM encoded CA bundle which will be used to validate an API server's serving certificate. If unspecified, system trust roots on the apiserver are used.
     */
    caBundle?: string;
    /**
     * Group is the API group name this server hosts.
     */
    group: string;
    /**
     * GroupPriorityMinimum is the priority this group should have at least. Higher priority means that the group is preferred by clients over lower priority ones. Note that other versions of this group might specify even higher GroupPriorityMininum values such that the whole group gets a higher priority. The primary sort is based on GroupPriorityMinimum, ordered highest number to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object. (v1.bar before v1.foo) We'd recommend something like: *.k8s.io (except extensions) at 18000 and PaaSes (OpenShift, Deis) are recommended to be in the 2000s.
     */
    groupPriorityMinimum: number;
    /**
     * InsecureSkipTLSVerify disables TLS certificate verification when communicating with this server. This is strongly discouraged. You should use the CABundle instead.
     */
    insecureSkipTlsVerify?: boolean;
    /**
     * Service is a reference to the service for this API server. It must communicate on port 443. If the Service is nil, that means the handling for the API groupversion is handled locally on this server. The call will simply delegate to the normal handler chain to be fulfilled.
     */
    service?: outputs.ApiServiceV1SpecService;
    /**
     * Version is the API version this server hosts. For example, `v1`.
     */
    version: string;
    /**
     * VersionPriority controls the ordering of this API version inside of its group. Must be greater than zero. The primary sort is based on VersionPriority, ordered highest to lowest (20 before 10). Since it's inside of a group, the number can be small, probably in the 10s. In case of equal version priorities, the version string will be used to compute the order inside a group. If the version string is `kube-like`, it will sort above non `kube-like` version strings, which are ordered lexicographically. `Kube-like` versions start with a `v`, then are followed by a number (the major version), then optionally the string `alpha` or `beta` and another number (the minor version). These are sorted first by GA > `beta` > `alpha` (where GA is a version with no suffix such as `beta` or `alpha`), and then by comparing major version, then minor version. An example sorted list of versions: `v10`, `v2`, `v1`, `v11beta2`, `v10beta3`, `v3beta1`, `v12alpha1`, `v11alpha2`, `foo1`, `foo10`.
     */
    versionPriority: number;
}

export interface ApiServiceV1SpecService {
    /**
     * Name is the name of the service.
     */
    name: string;
    /**
     * Namespace is the namespace of the service.
     */
    namespace: string;
    /**
     * If specified, the port on the service that is hosting the service. Defaults to 443 for backward compatibility. Should be a valid port number (1-65535, inclusive).
     */
    port?: number;
}

export interface CertificateSigningRequestMetadata {
    /**
     * An unstructured key value map stored with the certificate signing request that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the certificate signing request. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the certificate signing request, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * An opaque value that represents the internal version of this certificate signing request that can be used by clients to determine when certificate signing request has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this certificate signing request. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface CertificateSigningRequestSpec {
    /**
     * Base64-encoded PKCS#10 CSR data
     */
    request: string;
    /**
     * Requested signer for the request. It is a qualified name in the form: `scope-hostname.io/name`.If empty, it will be defaulted: 1. If it's a kubelet client certificate, it is assigned `kubernetes.io/kube-apiserver-client-kubelet`.2. If it's a kubelet serving certificate, it is assigned `kubernetes.io/kubelet-serving`.3. Otherwise, it is assigned `kubernetes.io/legacy-unknown`. Distribution of trust for signers happens out of band.You can select on this field using `spec.signerName`.
     */
    signerName?: string;
    /**
     * allowedUsages specifies a set of usage contexts the key will be valid for. See:
     * 	https://tools.ietf.org/html/rfc5280#section-4.2.1.3
     * 	https://tools.ietf.org/html/rfc5280#section-4.2.1.12
     *
     * Valid values are:
     *  "signing",
     *  "digital signature",
     *  "content commitment",
     *  "key encipherment",
     *  "key agreement",
     *  "data encipherment",
     *  "cert sign",
     *  "crl sign",
     *  "encipher only",
     *  "decipher only",
     *  "any",
     *  "server auth",
     *  "client auth",
     *  "code signing",
     *  "email protection",
     *  "s/mime",
     *  "ipsec end system",
     *  "ipsec tunnel",
     *  "ipsec user",
     *  "timestamping",
     *  "ocsp signing",
     *  "microsoft sgc",
     *  "netscape sgc"
     */
    usages?: string[];
}

export interface CertificateSigningRequestTimeouts {
    create?: string;
}

export interface CertificateSigningRequestV1Metadata {
    /**
     * An unstructured key value map stored with the certificate signing request that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the certificate signing request. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the certificate signing request, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * An opaque value that represents the internal version of this certificate signing request that can be used by clients to determine when certificate signing request has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this certificate signing request. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface CertificateSigningRequestV1Spec {
    /**
     * expirationSeconds is the requested duration of validity of the issued certificate. The certificate signer may issue a certificate with a different validity duration so a client must check the delta between the notBefore and and notAfter fields in the issued certificate to determine the actual duration.
     *
     * The v1.22+ in-tree implementations of the well-known Kubernetes signers will honor this field as long as the requested duration is not greater than the maximum duration they will honor per the --cluster-signing-duration CLI flag to the Kubernetes controller manager.
     *
     * Certificate signers may not honor this field for various reasons:
     *
     *   1. Old signer that is unaware of the field (such as the in-tree
     *      implementations prior to v1.22)
     *   2. Signer whose configured maximum is shorter than the requested duration
     *   3. Signer whose configured minimum is longer than the requested duration
     *
     * The minimum valid value for expirationSeconds is 600, i.e. 10 minutes.
     */
    expirationSeconds?: number;
    /**
     * request contains an x509 certificate signing request encoded in a "CERTIFICATE REQUEST" PEM block. When serialized as JSON or YAML, the data is additionally base64-encoded.
     */
    request: string;
    /**
     * signerName indicates the requested signer, and is a qualified name.
     *
     * List/watch requests for CertificateSigningRequests can filter on this field using a "spec.signerName=NAME" fieldSelector.
     *
     * Well-known Kubernetes signers are:
     *  1. "kubernetes.io/kube-apiserver-client": issues client certificates that can be used to authenticate to kube-apiserver.
     *   Requests for this signer are never auto-approved by kube-controller-manager, can be issued by the "csrsigning" controller in kube-controller-manager.
     *  2. "kubernetes.io/kube-apiserver-client-kubelet": issues client certificates that kubelets use to authenticate to kube-apiserver.
     *   Requests for this signer can be auto-approved by the "csrapproving" controller in kube-controller-manager, and can be issued by the "csrsigning" controller in kube-controller-manager.
     *  3. "kubernetes.io/kubelet-serving" issues serving certificates that kubelets use to serve TLS endpoints, which kube-apiserver can connect to securely.
     *   Requests for this signer are never auto-approved by kube-controller-manager, and can be issued by the "csrsigning" controller in kube-controller-manager.
     *
     * More details are available at https://k8s.io/docs/reference/access-authn-authz/certificate-signing-requests/#kubernetes-signers
     *
     * Custom signerNames can also be specified. The signer defines:
     *  1. Trust distribution: how trust (CA bundles) are distributed.
     *  2. Permitted subjects: and behavior when a disallowed subject is requested.
     *  3. Required, permitted, or forbidden x509 extensions in the request (including whether subjectAltNames are allowed, which types, restrictions on allowed values) and behavior when a disallowed extension is requested.
     *  4. Required, permitted, or forbidden key usages / extended key usages.
     *  5. Expiration/certificate lifetime: whether it is fixed by the signer, configurable by the admin.
     *  6. Whether or not requests for CA certificates are allowed.
     */
    signerName: string;
    /**
     * usages specifies a set of key usages requested in the issued certificate.
     *
     * Requests for TLS client certificates typically request: "digital signature", "key encipherment", "client auth".
     *
     * Requests for TLS serving certificates typically request: "key encipherment", "digital signature", "server auth".
     *
     * Valid values are:
     *  "signing", "digital signature", "content commitment",
     *  "key encipherment", "key agreement", "data encipherment",
     *  "cert sign", "crl sign", "encipher only", "decipher only", "any",
     *  "server auth", "client auth",
     *  "code signing", "email protection", "s/mime",
     *  "ipsec end system", "ipsec tunnel", "ipsec user",
     *  "timestamping", "ocsp signing", "microsoft sgc", "netscape sgc"
     */
    usages?: string[];
}

export interface CertificateSigningRequestV1Timeouts {
    create?: string;
}

export interface ClusterRoleAggregationRule {
    /**
     * A list of selectors which will be used to find ClusterRoles and create the rules.
     */
    clusterRoleSelectors?: outputs.ClusterRoleAggregationRuleClusterRoleSelector[];
}

export interface ClusterRoleAggregationRuleClusterRoleSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.ClusterRoleAggregationRuleClusterRoleSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface ClusterRoleAggregationRuleClusterRoleSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ClusterRoleBindingMetadata {
    /**
     * An unstructured key value map stored with the clusterRoleBinding that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the clusterRoleBinding. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the clusterRoleBinding, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * An opaque value that represents the internal version of this clusterRoleBinding that can be used by clients to determine when clusterRoleBinding has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this clusterRoleBinding. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface ClusterRoleBindingRoleRef {
    /**
     * The API group of the user. The only value possible at the moment is `rbac.authorization.k8s.io`.
     */
    apiGroup: string;
    /**
     * The kind of resource.
     */
    kind: string;
    /**
     * The name of the User to bind to.
     */
    name: string;
}

export interface ClusterRoleBindingSubject {
    /**
     * The API group of the subject resource.
     */
    apiGroup: string;
    /**
     * The kind of resource.
     */
    kind: string;
    /**
     * The name of the resource to bind to.
     */
    name: string;
    /**
     * The Namespace of the subject resource.
     */
    namespace?: string;
}

export interface ClusterRoleBindingV1Metadata {
    /**
     * An unstructured key value map stored with the clusterRoleBinding that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the clusterRoleBinding. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the clusterRoleBinding, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * An opaque value that represents the internal version of this clusterRoleBinding that can be used by clients to determine when clusterRoleBinding has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this clusterRoleBinding. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface ClusterRoleBindingV1RoleRef {
    /**
     * The API group of the user. The only value possible at the moment is `rbac.authorization.k8s.io`.
     */
    apiGroup: string;
    /**
     * The kind of resource.
     */
    kind: string;
    /**
     * The name of the User to bind to.
     */
    name: string;
}

export interface ClusterRoleBindingV1Subject {
    /**
     * The API group of the subject resource.
     */
    apiGroup: string;
    /**
     * The kind of resource.
     */
    kind: string;
    /**
     * The name of the resource to bind to.
     */
    name: string;
    /**
     * The Namespace of the subject resource.
     */
    namespace?: string;
}

export interface ClusterRoleMetadata {
    /**
     * An unstructured key value map stored with the clusterRole that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the clusterRole. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the clusterRole, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * An opaque value that represents the internal version of this clusterRole that can be used by clients to determine when clusterRole has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this clusterRole. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface ClusterRoleRule {
    /**
     * APIGroups is the name of the APIGroup that contains the resources. If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.
     */
    apiGroups?: string[];
    /**
     * NonResourceURLs is a set of partial urls that a user should have access to. *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as "pods" or "secrets") or non-resource URL paths (such as "/api"), but not both.
     */
    nonResourceUrls?: string[];
    /**
     * ResourceNames is an optional white list of names that the rule applies to. An empty set means that everything is allowed.
     */
    resourceNames?: string[];
    /**
     * Resources is a list of resources this rule applies to. ResourceAll represents all resources.
     */
    resources?: string[];
    /**
     * Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule. VerbAll represents all kinds.
     */
    verbs: string[];
}

export interface ClusterRoleV1AggregationRule {
    /**
     * A list of selectors which will be used to find ClusterRoles and create the rules.
     */
    clusterRoleSelectors?: outputs.ClusterRoleV1AggregationRuleClusterRoleSelector[];
}

export interface ClusterRoleV1AggregationRuleClusterRoleSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.ClusterRoleV1AggregationRuleClusterRoleSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface ClusterRoleV1AggregationRuleClusterRoleSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ClusterRoleV1Metadata {
    /**
     * An unstructured key value map stored with the clusterRole that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the clusterRole. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the clusterRole, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * An opaque value that represents the internal version of this clusterRole that can be used by clients to determine when clusterRole has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this clusterRole. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface ClusterRoleV1Rule {
    /**
     * APIGroups is the name of the APIGroup that contains the resources. If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.
     */
    apiGroups?: string[];
    /**
     * NonResourceURLs is a set of partial urls that a user should have access to. *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as "pods" or "secrets") or non-resource URL paths (such as "/api"), but not both.
     */
    nonResourceUrls?: string[];
    /**
     * ResourceNames is an optional white list of names that the rule applies to. An empty set means that everything is allowed.
     */
    resourceNames?: string[];
    /**
     * Resources is a list of resources this rule applies to. ResourceAll represents all resources.
     */
    resources?: string[];
    /**
     * Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule. VerbAll represents all kinds.
     */
    verbs: string[];
}

export interface ConfigMapMetadata {
    /**
     * An unstructured key value map stored with the config map that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the config map. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the config map, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the config map must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this config map that can be used by clients to determine when config map has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this config map. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface ConfigMapV1DataMetadata {
    /**
     * The name of the ConfigMap.
     */
    name: string;
    /**
     * The namespace of the ConfigMap.
     */
    namespace?: string;
}

export interface ConfigMapV1Metadata {
    /**
     * An unstructured key value map stored with the config map that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the config map. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the config map, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the config map must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this config map that can be used by clients to determine when config map has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this config map. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface CronJobMetadata {
    /**
     * An unstructured key value map stored with the cronjob that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the cronjob. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the cronjob, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the cronjob must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this cronjob that can be used by clients to determine when cronjob has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this cronjob. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface CronJobSpec {
    /**
     * Specifies how to treat concurrent executions of a Job. Defaults to Allow.
     */
    concurrencyPolicy?: string;
    /**
     * The number of failed finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
     */
    failedJobsHistoryLimit?: number;
    /**
     * Describes the pod that will be created when executing a cron job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
     */
    jobTemplate: outputs.CronJobSpecJobTemplate;
    /**
     * Cron format string, e.g. 0 * * * * or @hourly, as schedule time of its jobs to be created and executed.
     */
    schedule: string;
    /**
     * Optional deadline in seconds for starting the job if it misses scheduled time for any reason. Missed jobs executions will be counted as failed ones.
     */
    startingDeadlineSeconds?: number;
    /**
     * The number of successful finished jobs to retain. Defaults to 3.
     */
    successfulJobsHistoryLimit?: number;
    /**
     * This flag tells the controller to suspend subsequent executions, it does not apply to already started executions. Defaults to false.
     */
    suspend?: boolean;
}

export interface CronJobSpecJobTemplate {
    /**
     * Standard jobTemplateSpec's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
     */
    metadata: outputs.CronJobSpecJobTemplateMetadata;
    /**
     * Specification of the desired behavior of the job
     */
    spec: outputs.CronJobSpecJobTemplateSpec;
}

export interface CronJobSpecJobTemplateMetadata {
    /**
     * An unstructured key value map stored with the jobTemplateSpec that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the jobTemplateSpec. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the jobTemplateSpec, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the jobTemplateSpec must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this jobTemplateSpec that can be used by clients to determine when jobTemplateSpec has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this jobTemplateSpec. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface CronJobSpecJobTemplateSpec {
    /**
     * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
     */
    activeDeadlineSeconds?: number;
    /**
     * Specifies the number of retries before marking this job failed. Defaults to 6
     */
    backoffLimit?: number;
    /**
     * Specifies how Pod completions are tracked. It can be `NonIndexed` (default) or `Indexed`. More info: https://kubernetes.io/docs/concepts/workloads/controllers/job/#completion-mode
     */
    completionMode: string;
    /**
     * Specifies the desired number of successfully finished pods the job should be run with. Setting to nil means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value. Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
     */
    completions?: number;
    /**
     * Controls generation of pod labels and pod selectors. Leave unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template. When true, the user is responsible for picking unique labels and specifying the selector. Failure to pick a unique label may cause this and other jobs to not function correctly. More info: https://git.k8s.io/community/contributors/design-proposals/selector-generation.md
     */
    manualSelector?: boolean;
    /**
     * Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
     */
    parallelism?: number;
    /**
     * Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
     */
    podFailurePolicy?: outputs.CronJobSpecJobTemplateSpecPodFailurePolicy;
    /**
     * A label query over volumes to consider for binding.
     */
    selector?: outputs.CronJobSpecJobTemplateSpecSelector;
    /**
     * Describes the pod that will be created when executing a job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
     */
    template: outputs.CronJobSpecJobTemplateSpecTemplate;
    /**
     * ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes.
     */
    ttlSecondsAfterFinished?: string;
}

export interface CronJobSpecJobTemplateSpecPodFailurePolicy {
    /**
     * A label query over volumes to consider for binding.
     */
    rules: outputs.CronJobSpecJobTemplateSpecPodFailurePolicyRule[];
}

export interface CronJobSpecJobTemplateSpecPodFailurePolicyRule {
    action?: string;
    onExitCodes?: outputs.CronJobSpecJobTemplateSpecPodFailurePolicyRuleOnExitCodes;
    onPodConditions?: outputs.CronJobSpecJobTemplateSpecPodFailurePolicyRuleOnPodCondition[];
}

export interface CronJobSpecJobTemplateSpecPodFailurePolicyRuleOnExitCodes {
    containerName?: string;
    operator?: string;
    values: number[];
}

export interface CronJobSpecJobTemplateSpecPodFailurePolicyRuleOnPodCondition {
    status?: string;
    type?: string;
}

export interface CronJobSpecJobTemplateSpecSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.CronJobSpecJobTemplateSpecSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface CronJobSpecJobTemplateSpecSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface CronJobSpecJobTemplateSpecTemplate {
    /**
     * Standard job's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
     */
    metadata: outputs.CronJobSpecJobTemplateSpecTemplateMetadata;
    /**
     * Spec of the pods owned by the job
     */
    spec?: outputs.CronJobSpecJobTemplateSpecTemplateSpec;
}

export interface CronJobSpecJobTemplateSpecTemplateMetadata {
    /**
     * An unstructured key value map stored with the job that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the job. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the job, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * An opaque value that represents the internal version of this job that can be used by clients to determine when job has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this job. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpec {
    /**
     * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
     */
    activeDeadlineSeconds?: number;
    /**
     * Optional pod scheduling constraints.
     */
    affinity?: outputs.CronJobSpecJobTemplateSpecTemplateSpecAffinity;
    /**
     * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
     */
    automountServiceAccountToken?: boolean;
    /**
     * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/
     */
    containers?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainer[];
    /**
     * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy. Optional: Defaults to empty
     */
    dnsConfig?: outputs.CronJobSpecJobTemplateSpecTemplateSpecDnsConfig;
    /**
     * Set DNS policy for containers within the pod. Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'. Defaults to 'ClusterFirst'. More info: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy
     */
    dnsPolicy?: string;
    /**
     * Enables generating environment variables for service discovery. Defaults to true.
     */
    enableServiceLinks?: boolean;
    /**
     * List of hosts and IPs that will be injected into the pod's hosts file if specified. Optional: Defaults to empty.
     */
    hostAliases?: outputs.CronJobSpecJobTemplateSpecTemplateSpecHostAlias[];
    /**
     * Use the host's ipc namespace. Optional: Defaults to false.
     */
    hostIpc?: boolean;
    /**
     * Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified.
     */
    hostNetwork?: boolean;
    /**
     * Use the host's pid namespace.
     */
    hostPid?: boolean;
    /**
     * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
     */
    hostname: string;
    /**
     * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
     */
    imagePullSecrets?: outputs.CronJobSpecJobTemplateSpecTemplateSpecImagePullSecret[];
    /**
     * List of init containers belonging to the pod. Init containers always run to completion and each must complete successfully before the next is started. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
     */
    initContainers?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainer[];
    /**
     * NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
     */
    nodeName: string;
    /**
     * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.
     */
    nodeSelector?: {[key: string]: string};
    /**
     * Specifies the OS of the containers in the pod.
     */
    os?: outputs.CronJobSpecJobTemplateSpecTemplateSpecOs;
    /**
     * If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
     */
    priorityClassName?: string;
    /**
     * If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md
     */
    readinessGates?: outputs.CronJobSpecJobTemplateSpecTemplateSpecReadinessGate[];
    /**
     * Restart policy for all containers within the pod. One of Always, OnFailure, Never. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy.
     */
    restartPolicy?: string;
    /**
     * RuntimeClassName is a feature for selecting the container runtime configuration. The container runtime configuration is used to run a Pod's containers. More info: https://kubernetes.io/docs/concepts/containers/runtime-class
     */
    runtimeClassName?: string;
    /**
     * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
     */
    schedulerName: string;
    /**
     * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty
     */
    securityContext?: outputs.CronJobSpecJobTemplateSpecTemplateSpecSecurityContext;
    /**
     * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: http://releases.k8s.io/HEAD/docs/design/service_accounts.md.
     */
    serviceAccountName: string;
    /**
     * Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Defaults to false.
     */
    shareProcessNamespace?: boolean;
    /**
     * If specified, the fully qualified Pod hostname will be "...svc.". If not specified, the pod will not have a domainname at all..
     */
    subdomain?: string;
    /**
     * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process.
     */
    terminationGracePeriodSeconds?: number;
    /**
     * If specified, the pod's toleration. Optional: Defaults to empty
     */
    tolerations?: outputs.CronJobSpecJobTemplateSpecTemplateSpecToleration[];
    /**
     * describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints.
     */
    topologySpreadConstraints?: outputs.CronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraint[];
    /**
     * List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
     */
    volumes?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolume[];
}

export interface CronJobSpecJobTemplateSpecTemplateSpecAffinity {
    /**
     * Node affinity scheduling rules for the pod.
     */
    nodeAffinity?: outputs.CronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinity;
    /**
     * Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)
     */
    podAffinity?: outputs.CronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinity;
    /**
     * Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)
     */
    podAntiAffinity?: outputs.CronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinity;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: outputs.CronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a node label update), the system may or may not try to eventually evict the pod from its node.
     */
    requiredDuringSchedulingIgnoredDuringExecution?: outputs.CronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A node selector term, associated with the corresponding weight.
     */
    preference: outputs.CronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
    /**
     * weight is in the range 1-100
     */
    weight: number;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
    /**
     * List of node selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.CronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression[];
    /**
     * A list of node selector requirements by node's fields. The requirements are ANDed.
     */
    matchFields?: outputs.CronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchField[];
}

export interface CronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
     */
    operator?: string;
    /**
     * Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface CronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchField {
    /**
     * The label key that the selector applies to.
     */
    key: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists`, `DoesNotExist`, `Gt`, and `Lt`.
     */
    operator: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface CronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * List of node selector terms. The terms are ORed.
     */
    nodeSelectorTerms?: outputs.CronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm[];
}

export interface CronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm {
    /**
     * List of node selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.CronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression[];
    /**
     * A list of node selector requirements by node's fields. The requirements are ANDed.
     */
    matchFields?: outputs.CronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchField[];
}

export interface CronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
     */
    operator?: string;
    /**
     * Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface CronJobSpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchField {
    /**
     * The label key that the selector applies to.
     */
    key: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists`, `DoesNotExist`, `Gt`, and `Lt`.
     */
    operator: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface CronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: outputs.CronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.
     */
    requiredDuringSchedulingIgnoredDuringExecutions?: outputs.CronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
}

export interface CronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A pod affinity term, associated with the corresponding weight
     */
    podAffinityTerm: outputs.CronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
    /**
     * weight associated with matching the corresponding podAffinityTerm, in the range 1-100
     */
    weight: number;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.CronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.CronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface CronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface CronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.CronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.CronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface CronJobSpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface CronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: outputs.CronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.
     */
    requiredDuringSchedulingIgnoredDuringExecutions?: outputs.CronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
}

export interface CronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A pod affinity term, associated with the corresponding weight
     */
    podAffinityTerm: outputs.CronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
    /**
     * weight associated with matching the corresponding podAffinityTerm, in the range 1-100
     */
    weight: number;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.CronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.CronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface CronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface CronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.CronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.CronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface CronJobSpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainer {
    /**
     * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    args?: string[];
    /**
     * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    commands?: string[];
    /**
     * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
     */
    envFroms?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerEnvFrom[];
    /**
     * List of environment variables to set in the container. Cannot be updated.
     */
    envs?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerEnv[];
    /**
     * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/
     */
    image?: string;
    /**
     * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images
     */
    imagePullPolicy: string;
    /**
     * Actions that the management system should take in response to container lifecycle events
     */
    lifecycle?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerLifecycle;
    /**
     * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    livenessProbe?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbe;
    /**
     * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
     */
    name: string;
    /**
     * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
     */
    ports?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerPort[];
    /**
     * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    readinessProbe?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbe;
    /**
     * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerResources;
    /**
     * Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
     */
    securityContext?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContext;
    /**
     * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     */
    startupProbe?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbe;
    /**
     * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.
     */
    stdin?: boolean;
    /**
     * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.
     */
    stdinOnce?: boolean;
    /**
     * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.
     */
    terminationMessagePath?: string;
    /**
     * Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
     */
    terminationMessagePolicy: string;
    /**
     * Whether this container should allocate a TTY for itself
     */
    tty?: boolean;
    /**
     * Pod volumes to mount into the container's filesystem. Cannot be updated.
     */
    volumeMounts?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerVolumeMount[];
    /**
     * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
     */
    workingDir?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerEnv {
    /**
     * Name of the environment variable. Must be a C_IDENTIFIER
     */
    name: string;
    /**
     * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
     */
    value?: string;
    /**
     * Source for the environment variable's value
     */
    valueFrom?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFrom;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerEnvFrom {
    /**
     * The ConfigMap to select from
     */
    configMapRef?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromConfigMapRef;
    /**
     * An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
     */
    prefix?: string;
    /**
     * The Secret to select from
     */
    secretRef?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromSecretRef;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromConfigMapRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the ConfigMap must be defined
     */
    optional?: boolean;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerEnvFromSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the Secret must be defined
     */
    optional?: boolean;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFrom {
    /**
     * Selects a key of a ConfigMap.
     */
    configMapKeyRef?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromConfigMapKeyRef;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.
     */
    fieldRef?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromFieldRef;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
     */
    resourceFieldRef?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromResourceFieldRef;
    /**
     * Selects a key of a secret in the pod's namespace.
     */
    secretKeyRef?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromSecretKeyRef;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromConfigMapKeyRef {
    /**
     * The key to select.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the ConfigMap or its key must be defined.
     */
    optional?: boolean;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromResourceFieldRef {
    containerName?: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerEnvValueFromSecretKeyRef {
    /**
     * The key of the secret to select from. Must be a valid secret key.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the Secret or its key must be defined.
     */
    optional?: boolean;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerLifecycle {
    /**
     * post_start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    postStarts?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStart[];
    /**
     * pre_stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    preStops?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStop[];
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStart {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartTcpSocket[];
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStop {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopTcpSocket[];
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerLivenessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerPort {
    /**
     * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
     */
    containerPort: number;
    /**
     * What host IP to bind the external port to.
     */
    hostIp?: string;
    /**
     * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
     */
    hostPort?: number;
    /**
     * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
     */
    name?: string;
    /**
     * Protocol for port. Must be UDP or TCP. Defaults to "TCP".
     */
    protocol?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerReadinessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerResources {
    /**
     * Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits: {[key: string]: string};
    /**
     * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
     */
    requests: {[key: string]: string};
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContext {
    /**
     * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
     */
    allowPrivilegeEscalation?: boolean;
    /**
     * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
     */
    capabilities?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextCapabilities;
    /**
     * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
     */
    privileged?: boolean;
    /**
     * Whether this container has a read-only root filesystem. Default is false.
     */
    readOnlyRootFilesystem?: boolean;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsGroup?: string;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: boolean;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUser?: string;
    /**
     * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    seLinuxOptions?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextSeLinuxOptions;
    /**
     * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     */
    seccompProfile?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextSeccompProfile;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextCapabilities {
    /**
     * Added capabilities
     */
    adds?: string[];
    /**
     * Removed capabilities
     */
    drops?: string[];
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: string;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: string;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: string;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerSecurityContextSeccompProfile {
    /**
     * Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
     */
    localhostProfile?: string;
    /**
     * Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
     */
    type?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.CronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerStartupProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecContainerVolumeMount {
    /**
     * Path within the container at which the volume should be mounted. Must not contain ':'.
     */
    mountPath: string;
    /**
     * Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional.
     */
    mountPropagation?: string;
    /**
     * This must match the Name of a Volume.
     */
    name: string;
    /**
     * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
     */
    subPath?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecDnsConfig {
    /**
     * A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
     */
    nameservers?: string[];
    /**
     * A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
     */
    options?: outputs.CronJobSpecJobTemplateSpecTemplateSpecDnsConfigOption[];
    /**
     * A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
     */
    searches?: string[];
}

export interface CronJobSpecJobTemplateSpecTemplateSpecDnsConfigOption {
    /**
     * Name of the option.
     */
    name: string;
    /**
     * Value of the option. Optional: Defaults to empty.
     */
    value?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecHostAlias {
    /**
     * Hostnames for the IP address.
     */
    hostnames: string[];
    /**
     * IP address of the host file entry.
     */
    ip: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecImagePullSecret {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainer {
    /**
     * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    args?: string[];
    /**
     * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    commands?: string[];
    /**
     * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
     */
    envFroms?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFrom[];
    /**
     * List of environment variables to set in the container. Cannot be updated.
     */
    envs?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerEnv[];
    /**
     * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/
     */
    image?: string;
    /**
     * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images
     */
    imagePullPolicy: string;
    /**
     * Actions that the management system should take in response to container lifecycle events
     */
    lifecycle?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecycle;
    /**
     * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    livenessProbe?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbe;
    /**
     * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
     */
    name: string;
    /**
     * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
     */
    ports?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerPort[];
    /**
     * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    readinessProbe?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbe;
    /**
     * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerResources;
    /**
     * Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
     */
    securityContext?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContext;
    /**
     * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     */
    startupProbe?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbe;
    /**
     * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.
     */
    stdin?: boolean;
    /**
     * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.
     */
    stdinOnce?: boolean;
    /**
     * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.
     */
    terminationMessagePath?: string;
    /**
     * Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
     */
    terminationMessagePolicy: string;
    /**
     * Whether this container should allocate a TTY for itself
     */
    tty?: boolean;
    /**
     * Pod volumes to mount into the container's filesystem. Cannot be updated.
     */
    volumeMounts?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerVolumeMount[];
    /**
     * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
     */
    workingDir?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerEnv {
    /**
     * Name of the environment variable. Must be a C_IDENTIFIER
     */
    name: string;
    /**
     * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
     */
    value?: string;
    /**
     * Source for the environment variable's value
     */
    valueFrom?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFrom;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFrom {
    /**
     * The ConfigMap to select from
     */
    configMapRef?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromConfigMapRef;
    /**
     * An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
     */
    prefix?: string;
    /**
     * The Secret to select from
     */
    secretRef?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromSecretRef;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromConfigMapRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the ConfigMap must be defined
     */
    optional?: boolean;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvFromSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the Secret must be defined
     */
    optional?: boolean;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFrom {
    /**
     * Selects a key of a ConfigMap.
     */
    configMapKeyRef?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRef;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.
     */
    fieldRef?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromFieldRef;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
     */
    resourceFieldRef?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromResourceFieldRef;
    /**
     * Selects a key of a secret in the pod's namespace.
     */
    secretKeyRef?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromSecretKeyRef;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRef {
    /**
     * The key to select.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the ConfigMap or its key must be defined.
     */
    optional?: boolean;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromResourceFieldRef {
    containerName?: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromSecretKeyRef {
    /**
     * The key of the secret to select from. Must be a valid secret key.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the Secret or its key must be defined.
     */
    optional?: boolean;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecycle {
    /**
     * post_start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    postStarts?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStart[];
    /**
     * pre_stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    preStops?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStop[];
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStart {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartTcpSocket[];
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStop {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopTcpSocket[];
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerPort {
    /**
     * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
     */
    containerPort: number;
    /**
     * What host IP to bind the external port to.
     */
    hostIp?: string;
    /**
     * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
     */
    hostPort?: number;
    /**
     * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
     */
    name?: string;
    /**
     * Protocol for port. Must be UDP or TCP. Defaults to "TCP".
     */
    protocol?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerResources {
    /**
     * Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits: {[key: string]: string};
    /**
     * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
     */
    requests: {[key: string]: string};
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContext {
    /**
     * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
     */
    allowPrivilegeEscalation?: boolean;
    /**
     * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
     */
    capabilities?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextCapabilities;
    /**
     * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
     */
    privileged?: boolean;
    /**
     * Whether this container has a read-only root filesystem. Default is false.
     */
    readOnlyRootFilesystem?: boolean;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsGroup?: string;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: boolean;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUser?: string;
    /**
     * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    seLinuxOptions?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextSeLinuxOptions;
    /**
     * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     */
    seccompProfile?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextSeccompProfile;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextCapabilities {
    /**
     * Added capabilities
     */
    adds?: string[];
    /**
     * Removed capabilities
     */
    drops?: string[];
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: string;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: string;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: string;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerSecurityContextSeccompProfile {
    /**
     * Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
     */
    localhostProfile?: string;
    /**
     * Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
     */
    type?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.CronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerStartupProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecInitContainerVolumeMount {
    /**
     * Path within the container at which the volume should be mounted. Must not contain ':'.
     */
    mountPath: string;
    /**
     * Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional.
     */
    mountPropagation?: string;
    /**
     * This must match the Name of a Volume.
     */
    name: string;
    /**
     * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
     */
    subPath?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecOs {
    /**
     * Name is the name of the operating system. The currently supported values are linux and windows.
     */
    name: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecReadinessGate {
    /**
     * refers to a condition in the pod's condition list with matching type.
     */
    conditionType: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecSecurityContext {
    /**
     * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- If unset, the Kubelet will not modify the ownership and permissions of any volume.
     */
    fsGroup?: string;
    /**
     * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir.
     */
    fsGroupChangePolicy?: string;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    runAsGroup?: string;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: boolean;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    runAsUser?: string;
    /**
     * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    seLinuxOptions?: outputs.CronJobSpecJobTemplateSpecTemplateSpecSecurityContextSeLinuxOptions;
    /**
     * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     */
    seccompProfile?: outputs.CronJobSpecJobTemplateSpecTemplateSpecSecurityContextSeccompProfile;
    /**
     * A list of groups applied to the first process run in each container, in addition to the container's primary GID. If unspecified, no groups will be added to any container.
     */
    supplementalGroups?: number[];
    /**
     * holds a list of namespaced sysctls used for the pod.
     */
    sysctls?: outputs.CronJobSpecJobTemplateSpecTemplateSpecSecurityContextSysctl[];
    /**
     * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
     */
    windowsOptions?: outputs.CronJobSpecJobTemplateSpecTemplateSpecSecurityContextWindowsOptions;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: string;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: string;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: string;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecSecurityContextSeccompProfile {
    /**
     * Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
     */
    localhostProfile?: string;
    /**
     * Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
     */
    type?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecSecurityContextSysctl {
    /**
     * Name of a property to set.
     */
    name: string;
    /**
     * Value of a property to set.
     */
    value: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecSecurityContextWindowsOptions {
    /**
     * GMSACredentialSpec is where the GMSA admission webhook inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field
     */
    gmsaCredentialSpec?: string;
    /**
     * GMSACredentialSpecName is the name of the GMSA credential spec to use.
     */
    gmsaCredentialSpecName?: string;
    /**
     * HostProcess determines if a container should be run as a 'Host Process' container. Default value is false.
     */
    hostProcess?: boolean;
    /**
     * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUsername?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecToleration {
    /**
     * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
     */
    effect?: string;
    /**
     * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
     */
    key?: string;
    /**
     * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
     */
    operator?: string;
    /**
     * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
     */
    tolerationSeconds?: string;
    /**
     * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
     */
    value?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraint {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.CronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintLabelSelector[];
    /**
     * is a set of pod label keys to select the pods over which spreading will be calculated.
     */
    matchLabelKeys?: string[];
    /**
     * describes the degree to which pods may be unevenly distributed.
     */
    maxSkew?: number;
    /**
     * indicates a minimum number of eligible domains.
     */
    minDomains?: number;
    /**
     * indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew.
     */
    nodeAffinityPolicy?: string;
    /**
     * indicates how we will treat node taints when calculating pod topology spread skew.
     */
    nodeTaintsPolicy?: string;
    /**
     * the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology.
     */
    topologyKey?: string;
    /**
     * indicates how to deal with a pod if it doesn't satisfy the spread constraint.
     */
    whenUnsatisfiable?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.CronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface CronJobSpecJobTemplateSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolume {
    /**
     * Represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    awsElasticBlockStore?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeAwsElasticBlockStore;
    /**
     * Represents an Azure Data Disk mount on the host and bind mount to the pod.
     */
    azureDisk?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeAzureDisk;
    /**
     * Represents an Azure File Service mount on the host and bind mount to the pod.
     */
    azureFile?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeAzureFile;
    /**
     * Represents a Ceph FS mount on the host that shares a pod's lifetime
     */
    cephFs?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeCephFs;
    /**
     * Represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    cinder?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeCinder;
    /**
     * ConfigMap represents a configMap that should populate this volume
     */
    configMap?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeConfigMap;
    /**
     * Represents a CSI Volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
     */
    csi?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeCsi;
    /**
     * DownwardAPI represents downward API about the pod that should populate this volume
     */
    downwardApi?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApi;
    /**
     * EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
     */
    emptyDir?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeEmptyDir;
    /**
     * Represents an ephemeral volume that is handled by a normal storage driver. More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes
     */
    ephemeral?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeral;
    /**
     * Represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
     */
    fc?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeFc;
    /**
     * Represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.
     */
    flexVolume?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeFlexVolume;
    /**
     * Represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
     */
    flocker?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeFlocker;
    /**
     * Represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    gcePersistentDisk?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeGcePersistentDisk;
    /**
     * GitRepo represents a git repository at a particular revision.
     */
    gitRepo?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeGitRepo;
    /**
     * Represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
     */
    glusterfs?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeGlusterfs;
    /**
     * Represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     */
    hostPath?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeHostPath;
    /**
     * Represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
     */
    iscsi?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeIscsi;
    /**
     * Represents a mounted local storage device such as a disk, partition or directory. Local volumes can only be used as a statically created PersistentVolume. Dynamic provisioning is not supported yet. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
     */
    local?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeLocal;
    /**
     * Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    nfs?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeNfs;
    /**
     * The specification of a persistent volume.
     */
    persistentVolumeClaim?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumePersistentVolumeClaim;
    /**
     * Represents a PhotonController persistent disk attached and mounted on kubelets host machine
     */
    photonPersistentDisk?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumePhotonPersistentDisk;
    /**
     * Projected represents a single volume that projects several volume sources into the same directory. More info: https://kubernetes.io/docs/concepts/storage/volumes/#projected
     */
    projecteds?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeProjected[];
    /**
     * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
     */
    quobyte?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeQuobyte;
    /**
     * Represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
     */
    rbd?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeRbd;
    /**
     * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    secret?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeSecret;
    /**
     * Represents a vSphere volume attached and mounted on kubelets host machine
     */
    vsphereVolume?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeVsphereVolume;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeAwsElasticBlockStore {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    fsType?: string;
    /**
     * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
     */
    partition?: number;
    /**
     * Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    readOnly?: boolean;
    /**
     * Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    volumeId: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeAzureDisk {
    /**
     * Host Caching mode: None, Read Only, Read Write.
     */
    cachingMode: string;
    /**
     * The URI the data disk in the blob storage
     */
    dataDiskUri: string;
    /**
     * The Name of the data disk in the blob storage
     */
    diskName: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * The type for the data disk. Expected values: Shared, Dedicated, Managed. Defaults to Shared
     */
    kind: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeAzureFile {
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * The name of secret that contains Azure Storage Account Name and Key
     */
    secretName: string;
    /**
     * The namespace of the secret that contains Azure Storage Account Name and Key. For Kubernetes up to 1.18.x the default is the same as the Pod. For Kubernetes 1.19.x and later the default is "default" namespace.
     */
    secretNamespace?: string;
    /**
     * Share Name
     */
    shareName: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeCephFs {
    /**
     * Monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    monitors: string[];
    /**
     * Used as the mounted root, rather than the full Ceph tree, default is /
     */
    path?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to `false` (read/write). More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    readOnly?: boolean;
    /**
     * The path to key ring for User, default is `/etc/ceph/user.secret`. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    secretFile?: string;
    /**
     * Reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    secretRef?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeCephFsSecretRef;
    /**
     * User is the rados user name, default is admin. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    user?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeCephFsSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeCinder {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    fsType?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write). More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    readOnly?: boolean;
    /**
     * Volume ID used to identify the volume in Cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    volumeId: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeConfigMap {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeConfigMapItem[];
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Optional: Specify whether the ConfigMap or its keys must be defined.
     */
    optional?: boolean;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeConfigMapItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeCsi {
    /**
     * the name of the volume driver to use. More info: https://kubernetes.io/docs/concepts/storage/volumes/#csi
     */
    driver: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * A reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls.
     */
    nodePublishSecretRef?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeCsiNodePublishSecretRef;
    /**
     * Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
     */
    readOnly?: boolean;
    /**
     * Attributes of the volume to publish.
     */
    volumeAttributes?: {[key: string]: string};
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeCsiNodePublishSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApi {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItem[];
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItem {
    /**
     * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
     */
    fieldRef: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemFieldRef;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
     */
    path: string;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
     */
    resourceFieldRef?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemResourceFieldRef;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemResourceFieldRef {
    containerName: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeEmptyDir {
    /**
     * What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be one of ["" "Memory" "HugePages" "HugePages-2Mi" "HugePages-1Gi"]. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
     */
    medium?: string;
    /**
     * Total amount of local storage required for this EmptyDir volume.
     */
    sizeLimit?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeral {
    /**
     * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC.
     */
    volumeClaimTemplate: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplate;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplate {
    /**
     * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
     */
    metadata?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadata;
    /**
     * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
     */
    spec: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpec;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadata {
    /**
     * An unstructured key value map stored with the persistent volume claim that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the persistent volume claim. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpec {
    /**
     * A set of the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
     */
    accessModes: string[];
    /**
     * A list of the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResources;
    /**
     * A label query over volumes to consider for binding.
     */
    selector?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelector;
    /**
     * Name of the storage class requested by the claim
     */
    storageClassName: string;
    /**
     * Defines what type of volume is required by the claim.
     */
    volumeMode: string;
    /**
     * The binding reference to the PersistentVolume backing this claim.
     */
    volumeName: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResources {
    /**
     * Map describing the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits?: {[key: string]: string};
    /**
     * Map describing the minimum amount of compute resources required. If this is omitted for a container, it defaults to `limits` if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    requests?: {[key: string]: string};
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeFc {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * FC target lun number
     */
    lun: number;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * FC target worldwide names (WWNs)
     */
    targetWwNs: string[];
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeFlexVolume {
    /**
     * Driver is the name of the driver to use for this volume.
     */
    driver: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
     */
    fsType?: string;
    /**
     * Extra command options if any.
     */
    options?: {[key: string]: string};
    /**
     * Whether to force the ReadOnly setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * Reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
     */
    secretRef?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeFlexVolumeSecretRef;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeFlexVolumeSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeFlocker {
    /**
     * Name of the dataset stored as metadata > name on the dataset for Flocker should be considered as deprecated
     */
    datasetName?: string;
    /**
     * UUID of the dataset. This is unique identifier of a Flocker dataset
     */
    datasetUuid?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeGcePersistentDisk {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    fsType?: string;
    /**
     * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    partition?: number;
    /**
     * Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    pdName: string;
    /**
     * Whether to force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    readOnly?: boolean;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeGitRepo {
    /**
     * Target directory name. Must not contain or start with '..'. If '.' is supplied, the volume directory will be the git repository. Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
     */
    directory?: string;
    /**
     * Repository URL
     */
    repository?: string;
    /**
     * Commit hash for the specified revision.
     */
    revision?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeGlusterfs {
    /**
     * The endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    endpointsName: string;
    /**
     * The Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    path: string;
    /**
     * Whether to force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    readOnly?: boolean;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeHostPath {
    /**
     * Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     */
    path?: string;
    /**
     * Type for HostPath volume. Allowed values are "" (default), DirectoryOrCreate, Directory, FileOrCreate, File, Socket, CharDevice and BlockDevice
     */
    type?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeIscsi {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
     */
    fsType?: string;
    /**
     * Target iSCSI Qualified Name.
     */
    iqn: string;
    /**
     * iSCSI interface name that uses an iSCSI transport. Defaults to 'default' (tcp).
     */
    iscsiInterface?: string;
    /**
     * iSCSI target lun number.
     */
    lun?: number;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false.
     */
    readOnly?: boolean;
    /**
     * iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
     */
    targetPortal: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeLocal {
    /**
     * Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
     */
    path?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeNfs {
    /**
     * Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    path: string;
    /**
     * Whether to force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    readOnly?: boolean;
    /**
     * Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    server: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumePersistentVolumeClaim {
    /**
     * ClaimName is the name of a PersistentVolumeClaim in the same
     */
    claimName?: string;
    /**
     * Will force the ReadOnly setting in VolumeMounts.
     */
    readOnly?: boolean;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumePhotonPersistentDisk {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * ID that identifies Photon Controller persistent disk
     */
    pdId: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeProjected {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * Source of the volume to project in the directory.
     */
    sources: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSource[];
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSource {
    /**
     * ConfigMap represents a configMap that should populate this volume
     */
    configMaps?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceConfigMap[];
    /**
     * DownwardAPI represents downward API about the pod that should populate this volume
     */
    downwardApi?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApi;
    /**
     * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    secrets?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceSecret[];
    /**
     * A projected service account token volume
     */
    serviceAccountToken?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceServiceAccountToken;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceConfigMap {
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceConfigMapItem[];
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Optional: Specify whether the ConfigMap or it's keys must be defined.
     */
    optional?: boolean;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceConfigMapItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApi {
    /**
     * Represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
     */
    items?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItem[];
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItem {
    /**
     * Selects a field of the pod: only annotations, labels, name and namespace are supported.
     */
    fieldRef?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRef;
    /**
     * Mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
     */
    path: string;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
     */
    resourceFieldRef?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRef;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to 'v1'.
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRef {
    containerName: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceSecret {
    /**
     * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceSecretItem[];
    /**
     * Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    name?: string;
    /**
     * Optional: Specify whether the Secret or it's keys must be defined.
     */
    optional?: boolean;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceSecretItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeProjectedSourceServiceAccountToken {
    /**
     * Audience is the intended audience of the token
     */
    audience?: string;
    /**
     * ExpirationSeconds is the expected duration of validity of the service account token. It defaults to 1 hour and must be at least 10 minutes (600 seconds).
     */
    expirationSeconds?: number;
    /**
     * Path specifies a relative path to the mount point of the projected volume.
     */
    path: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeQuobyte {
    /**
     * Group to map volume access to Default is no group
     */
    group?: string;
    /**
     * Whether to force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
     */
    registry: string;
    /**
     * User to map volume access to Defaults to serivceaccount user
     */
    user?: string;
    /**
     * Volume is a string that references an already created Quobyte volume by name.
     */
    volume: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeRbd {
    /**
     * A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    cephMonitors: string[];
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
     */
    fsType?: string;
    /**
     * Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    keyring: string;
    /**
     * The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    radosUser?: string;
    /**
     * The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    rbdImage: string;
    /**
     * The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it.
     */
    rbdPool?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    readOnly?: boolean;
    /**
     * Name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    secretRef?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeRbdSecretRef;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeRbdSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeSecret {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.CronJobSpecJobTemplateSpecTemplateSpecVolumeSecretItem[];
    /**
     * Optional: Specify whether the Secret or its keys must be defined.
     */
    optional?: boolean;
    /**
     * Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    secretName?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeSecretItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface CronJobSpecJobTemplateSpecTemplateSpecVolumeVsphereVolume {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * Path that identifies vSphere volume vmdk
     */
    volumePath: string;
}

export interface CronJobTimeouts {
    delete?: string;
}

export interface CronJobV1Metadata {
    /**
     * An unstructured key value map stored with the cronjob that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the cronjob. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the cronjob, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the cronjob must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this cronjob that can be used by clients to determine when cronjob has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this cronjob. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface CronJobV1Spec {
    /**
     * Specifies how to treat concurrent executions of a Job. Defaults to Allow.
     */
    concurrencyPolicy?: string;
    /**
     * The number of failed finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
     */
    failedJobsHistoryLimit?: number;
    /**
     * Describes the pod that will be created when executing a cron job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
     */
    jobTemplate: outputs.CronJobV1SpecJobTemplate;
    /**
     * Cron format string, e.g. 0 * * * * or @hourly, as schedule time of its jobs to be created and executed.
     */
    schedule: string;
    /**
     * Optional deadline in seconds for starting the job if it misses scheduled time for any reason. Missed jobs executions will be counted as failed ones.
     */
    startingDeadlineSeconds?: number;
    /**
     * The number of successful finished jobs to retain. Defaults to 3.
     */
    successfulJobsHistoryLimit?: number;
    /**
     * This flag tells the controller to suspend subsequent executions, it does not apply to already started executions. Defaults to false.
     */
    suspend?: boolean;
    /**
     * The time zone for the given schedule. If not specified, this will rely on the time zone of the kube-controller-manager process.
     */
    timezone?: string;
}

export interface CronJobV1SpecJobTemplate {
    /**
     * Standard jobTemplateSpec's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
     */
    metadata: outputs.CronJobV1SpecJobTemplateMetadata;
    /**
     * Specification of the desired behavior of the job
     */
    spec: outputs.CronJobV1SpecJobTemplateSpec;
}

export interface CronJobV1SpecJobTemplateMetadata {
    /**
     * An unstructured key value map stored with the jobTemplateSpec that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the jobTemplateSpec. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the jobTemplateSpec, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the jobTemplateSpec must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this jobTemplateSpec that can be used by clients to determine when jobTemplateSpec has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this jobTemplateSpec. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface CronJobV1SpecJobTemplateSpec {
    /**
     * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
     */
    activeDeadlineSeconds?: number;
    /**
     * Specifies the number of retries before marking this job failed. Defaults to 6
     */
    backoffLimit?: number;
    /**
     * Specifies how Pod completions are tracked. It can be `NonIndexed` (default) or `Indexed`. More info: https://kubernetes.io/docs/concepts/workloads/controllers/job/#completion-mode
     */
    completionMode: string;
    /**
     * Specifies the desired number of successfully finished pods the job should be run with. Setting to nil means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value. Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
     */
    completions?: number;
    /**
     * Controls generation of pod labels and pod selectors. Leave unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template. When true, the user is responsible for picking unique labels and specifying the selector. Failure to pick a unique label may cause this and other jobs to not function correctly. More info: https://git.k8s.io/community/contributors/design-proposals/selector-generation.md
     */
    manualSelector?: boolean;
    /**
     * Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
     */
    parallelism?: number;
    /**
     * Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
     */
    podFailurePolicy?: outputs.CronJobV1SpecJobTemplateSpecPodFailurePolicy;
    /**
     * A label query over volumes to consider for binding.
     */
    selector?: outputs.CronJobV1SpecJobTemplateSpecSelector;
    /**
     * Describes the pod that will be created when executing a job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
     */
    template: outputs.CronJobV1SpecJobTemplateSpecTemplate;
    /**
     * ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes.
     */
    ttlSecondsAfterFinished?: string;
}

export interface CronJobV1SpecJobTemplateSpecPodFailurePolicy {
    /**
     * A label query over volumes to consider for binding.
     */
    rules: outputs.CronJobV1SpecJobTemplateSpecPodFailurePolicyRule[];
}

export interface CronJobV1SpecJobTemplateSpecPodFailurePolicyRule {
    action?: string;
    onExitCodes?: outputs.CronJobV1SpecJobTemplateSpecPodFailurePolicyRuleOnExitCodes;
    onPodConditions?: outputs.CronJobV1SpecJobTemplateSpecPodFailurePolicyRuleOnPodCondition[];
}

export interface CronJobV1SpecJobTemplateSpecPodFailurePolicyRuleOnExitCodes {
    containerName?: string;
    operator?: string;
    values: number[];
}

export interface CronJobV1SpecJobTemplateSpecPodFailurePolicyRuleOnPodCondition {
    status?: string;
    type?: string;
}

export interface CronJobV1SpecJobTemplateSpecSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.CronJobV1SpecJobTemplateSpecSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface CronJobV1SpecJobTemplateSpecSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface CronJobV1SpecJobTemplateSpecTemplate {
    /**
     * Standard job's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
     */
    metadata: outputs.CronJobV1SpecJobTemplateSpecTemplateMetadata;
    /**
     * Spec of the pods owned by the job
     */
    spec?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpec;
}

export interface CronJobV1SpecJobTemplateSpecTemplateMetadata {
    /**
     * An unstructured key value map stored with the job that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the job. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the job, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * An opaque value that represents the internal version of this job that can be used by clients to determine when job has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this job. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpec {
    /**
     * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
     */
    activeDeadlineSeconds?: number;
    /**
     * Optional pod scheduling constraints.
     */
    affinity?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecAffinity;
    /**
     * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
     */
    automountServiceAccountToken?: boolean;
    /**
     * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/
     */
    containers?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainer[];
    /**
     * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy. Optional: Defaults to empty
     */
    dnsConfig?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecDnsConfig;
    /**
     * Set DNS policy for containers within the pod. Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'. Defaults to 'ClusterFirst'. More info: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy
     */
    dnsPolicy?: string;
    /**
     * Enables generating environment variables for service discovery. Defaults to true.
     */
    enableServiceLinks?: boolean;
    /**
     * List of hosts and IPs that will be injected into the pod's hosts file if specified. Optional: Defaults to empty.
     */
    hostAliases?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecHostAlias[];
    /**
     * Use the host's ipc namespace. Optional: Defaults to false.
     */
    hostIpc?: boolean;
    /**
     * Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified.
     */
    hostNetwork?: boolean;
    /**
     * Use the host's pid namespace.
     */
    hostPid?: boolean;
    /**
     * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
     */
    hostname: string;
    /**
     * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
     */
    imagePullSecrets?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecImagePullSecret[];
    /**
     * List of init containers belonging to the pod. Init containers always run to completion and each must complete successfully before the next is started. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
     */
    initContainers?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainer[];
    /**
     * NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
     */
    nodeName: string;
    /**
     * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.
     */
    nodeSelector?: {[key: string]: string};
    /**
     * Specifies the OS of the containers in the pod.
     */
    os?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecOs;
    /**
     * If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
     */
    priorityClassName?: string;
    /**
     * If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md
     */
    readinessGates?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecReadinessGate[];
    /**
     * Restart policy for all containers within the pod. One of Always, OnFailure, Never. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy.
     */
    restartPolicy?: string;
    /**
     * RuntimeClassName is a feature for selecting the container runtime configuration. The container runtime configuration is used to run a Pod's containers. More info: https://kubernetes.io/docs/concepts/containers/runtime-class
     */
    runtimeClassName?: string;
    /**
     * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
     */
    schedulerName: string;
    /**
     * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty
     */
    securityContext?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecSecurityContext;
    /**
     * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: http://releases.k8s.io/HEAD/docs/design/service_accounts.md.
     */
    serviceAccountName: string;
    /**
     * Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Defaults to false.
     */
    shareProcessNamespace?: boolean;
    /**
     * If specified, the fully qualified Pod hostname will be "...svc.". If not specified, the pod will not have a domainname at all..
     */
    subdomain?: string;
    /**
     * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process.
     */
    terminationGracePeriodSeconds?: number;
    /**
     * If specified, the pod's toleration. Optional: Defaults to empty
     */
    tolerations?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecToleration[];
    /**
     * describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints.
     */
    topologySpreadConstraints?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecTopologySpreadConstraint[];
    /**
     * List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
     */
    volumes?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolume[];
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecAffinity {
    /**
     * Node affinity scheduling rules for the pod.
     */
    nodeAffinity?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecAffinityNodeAffinity;
    /**
     * Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)
     */
    podAffinity?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecAffinityPodAffinity;
    /**
     * Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)
     */
    podAntiAffinity?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinity;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecAffinityNodeAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a node label update), the system may or may not try to eventually evict the pod from its node.
     */
    requiredDuringSchedulingIgnoredDuringExecution?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A node selector term, associated with the corresponding weight.
     */
    preference: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
    /**
     * weight is in the range 1-100
     */
    weight: number;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
    /**
     * List of node selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression[];
    /**
     * A list of node selector requirements by node's fields. The requirements are ANDed.
     */
    matchFields?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchField[];
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
     */
    operator?: string;
    /**
     * Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchField {
    /**
     * The label key that the selector applies to.
     */
    key: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists`, `DoesNotExist`, `Gt`, and `Lt`.
     */
    operator: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * List of node selector terms. The terms are ORed.
     */
    nodeSelectorTerms?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm[];
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm {
    /**
     * List of node selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression[];
    /**
     * A list of node selector requirements by node's fields. The requirements are ANDed.
     */
    matchFields?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchField[];
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
     */
    operator?: string;
    /**
     * Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchField {
    /**
     * The label key that the selector applies to.
     */
    key: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists`, `DoesNotExist`, `Gt`, and `Lt`.
     */
    operator: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecAffinityPodAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.
     */
    requiredDuringSchedulingIgnoredDuringExecutions?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A pod affinity term, associated with the corresponding weight
     */
    podAffinityTerm: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
    /**
     * weight associated with matching the corresponding podAffinityTerm, in the range 1-100
     */
    weight: number;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.
     */
    requiredDuringSchedulingIgnoredDuringExecutions?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A pod affinity term, associated with the corresponding weight
     */
    podAffinityTerm: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
    /**
     * weight associated with matching the corresponding podAffinityTerm, in the range 1-100
     */
    weight: number;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainer {
    /**
     * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    args?: string[];
    /**
     * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    commands?: string[];
    /**
     * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
     */
    envFroms?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerEnvFrom[];
    /**
     * List of environment variables to set in the container. Cannot be updated.
     */
    envs?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerEnv[];
    /**
     * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/
     */
    image?: string;
    /**
     * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images
     */
    imagePullPolicy: string;
    /**
     * Actions that the management system should take in response to container lifecycle events
     */
    lifecycle?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerLifecycle;
    /**
     * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    livenessProbe?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerLivenessProbe;
    /**
     * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
     */
    name: string;
    /**
     * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
     */
    ports?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerPort[];
    /**
     * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    readinessProbe?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerReadinessProbe;
    /**
     * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerResources;
    /**
     * Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
     */
    securityContext?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerSecurityContext;
    /**
     * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     */
    startupProbe?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerStartupProbe;
    /**
     * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.
     */
    stdin?: boolean;
    /**
     * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.
     */
    stdinOnce?: boolean;
    /**
     * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.
     */
    terminationMessagePath?: string;
    /**
     * Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
     */
    terminationMessagePolicy: string;
    /**
     * Whether this container should allocate a TTY for itself
     */
    tty?: boolean;
    /**
     * Pod volumes to mount into the container's filesystem. Cannot be updated.
     */
    volumeMounts?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerVolumeMount[];
    /**
     * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
     */
    workingDir?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerEnv {
    /**
     * Name of the environment variable. Must be a C_IDENTIFIER
     */
    name: string;
    /**
     * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
     */
    value?: string;
    /**
     * Source for the environment variable's value
     */
    valueFrom?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerEnvValueFrom;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerEnvFrom {
    /**
     * The ConfigMap to select from
     */
    configMapRef?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerEnvFromConfigMapRef;
    /**
     * An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
     */
    prefix?: string;
    /**
     * The Secret to select from
     */
    secretRef?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerEnvFromSecretRef;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerEnvFromConfigMapRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the ConfigMap must be defined
     */
    optional?: boolean;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerEnvFromSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the Secret must be defined
     */
    optional?: boolean;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerEnvValueFrom {
    /**
     * Selects a key of a ConfigMap.
     */
    configMapKeyRef?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerEnvValueFromConfigMapKeyRef;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.
     */
    fieldRef?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerEnvValueFromFieldRef;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
     */
    resourceFieldRef?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerEnvValueFromResourceFieldRef;
    /**
     * Selects a key of a secret in the pod's namespace.
     */
    secretKeyRef?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerEnvValueFromSecretKeyRef;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerEnvValueFromConfigMapKeyRef {
    /**
     * The key to select.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the ConfigMap or its key must be defined.
     */
    optional?: boolean;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerEnvValueFromFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerEnvValueFromResourceFieldRef {
    containerName?: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerEnvValueFromSecretKeyRef {
    /**
     * The key of the secret to select from. Must be a valid secret key.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the Secret or its key must be defined.
     */
    optional?: boolean;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerLifecycle {
    /**
     * post_start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    postStarts?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerLifecyclePostStart[];
    /**
     * pre_stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    preStops?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerLifecyclePreStop[];
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerLifecyclePostStart {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartTcpSocket[];
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerLifecyclePostStartTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerLifecyclePreStop {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopTcpSocket[];
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerLifecyclePreStopTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerLivenessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerLivenessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerLivenessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerLivenessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerLivenessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerLivenessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerLivenessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerLivenessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerLivenessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerPort {
    /**
     * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
     */
    containerPort: number;
    /**
     * What host IP to bind the external port to.
     */
    hostIp?: string;
    /**
     * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
     */
    hostPort?: number;
    /**
     * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
     */
    name?: string;
    /**
     * Protocol for port. Must be UDP or TCP. Defaults to "TCP".
     */
    protocol?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerReadinessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerReadinessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerReadinessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerReadinessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerReadinessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerReadinessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerReadinessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerReadinessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerReadinessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerResources {
    /**
     * Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits: {[key: string]: string};
    /**
     * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
     */
    requests: {[key: string]: string};
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerSecurityContext {
    /**
     * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
     */
    allowPrivilegeEscalation?: boolean;
    /**
     * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
     */
    capabilities?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerSecurityContextCapabilities;
    /**
     * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
     */
    privileged?: boolean;
    /**
     * Whether this container has a read-only root filesystem. Default is false.
     */
    readOnlyRootFilesystem?: boolean;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsGroup?: string;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: boolean;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUser?: string;
    /**
     * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    seLinuxOptions?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerSecurityContextSeLinuxOptions;
    /**
     * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     */
    seccompProfile?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerSecurityContextSeccompProfile;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerSecurityContextCapabilities {
    /**
     * Added capabilities
     */
    adds?: string[];
    /**
     * Removed capabilities
     */
    drops?: string[];
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: string;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: string;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: string;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerSecurityContextSeccompProfile {
    /**
     * Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
     */
    localhostProfile?: string;
    /**
     * Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
     */
    type?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerStartupProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerStartupProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerStartupProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerStartupProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerStartupProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerStartupProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerStartupProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerStartupProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecContainerStartupProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerStartupProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerStartupProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecContainerVolumeMount {
    /**
     * Path within the container at which the volume should be mounted. Must not contain ':'.
     */
    mountPath: string;
    /**
     * Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional.
     */
    mountPropagation?: string;
    /**
     * This must match the Name of a Volume.
     */
    name: string;
    /**
     * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
     */
    subPath?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecDnsConfig {
    /**
     * A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
     */
    nameservers?: string[];
    /**
     * A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
     */
    options?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecDnsConfigOption[];
    /**
     * A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
     */
    searches?: string[];
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecDnsConfigOption {
    /**
     * Name of the option.
     */
    name: string;
    /**
     * Value of the option. Optional: Defaults to empty.
     */
    value?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecHostAlias {
    /**
     * Hostnames for the IP address.
     */
    hostnames: string[];
    /**
     * IP address of the host file entry.
     */
    ip: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecImagePullSecret {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainer {
    /**
     * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    args?: string[];
    /**
     * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    commands?: string[];
    /**
     * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
     */
    envFroms?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerEnvFrom[];
    /**
     * List of environment variables to set in the container. Cannot be updated.
     */
    envs?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerEnv[];
    /**
     * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/
     */
    image?: string;
    /**
     * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images
     */
    imagePullPolicy: string;
    /**
     * Actions that the management system should take in response to container lifecycle events
     */
    lifecycle?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerLifecycle;
    /**
     * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    livenessProbe?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerLivenessProbe;
    /**
     * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
     */
    name: string;
    /**
     * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
     */
    ports?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerPort[];
    /**
     * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    readinessProbe?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerReadinessProbe;
    /**
     * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerResources;
    /**
     * Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
     */
    securityContext?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerSecurityContext;
    /**
     * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     */
    startupProbe?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerStartupProbe;
    /**
     * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.
     */
    stdin?: boolean;
    /**
     * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.
     */
    stdinOnce?: boolean;
    /**
     * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.
     */
    terminationMessagePath?: string;
    /**
     * Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
     */
    terminationMessagePolicy: string;
    /**
     * Whether this container should allocate a TTY for itself
     */
    tty?: boolean;
    /**
     * Pod volumes to mount into the container's filesystem. Cannot be updated.
     */
    volumeMounts?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerVolumeMount[];
    /**
     * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
     */
    workingDir?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerEnv {
    /**
     * Name of the environment variable. Must be a C_IDENTIFIER
     */
    name: string;
    /**
     * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
     */
    value?: string;
    /**
     * Source for the environment variable's value
     */
    valueFrom?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerEnvValueFrom;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerEnvFrom {
    /**
     * The ConfigMap to select from
     */
    configMapRef?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerEnvFromConfigMapRef;
    /**
     * An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
     */
    prefix?: string;
    /**
     * The Secret to select from
     */
    secretRef?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerEnvFromSecretRef;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerEnvFromConfigMapRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the ConfigMap must be defined
     */
    optional?: boolean;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerEnvFromSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the Secret must be defined
     */
    optional?: boolean;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerEnvValueFrom {
    /**
     * Selects a key of a ConfigMap.
     */
    configMapKeyRef?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRef;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.
     */
    fieldRef?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromFieldRef;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
     */
    resourceFieldRef?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromResourceFieldRef;
    /**
     * Selects a key of a secret in the pod's namespace.
     */
    secretKeyRef?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromSecretKeyRef;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRef {
    /**
     * The key to select.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the ConfigMap or its key must be defined.
     */
    optional?: boolean;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromResourceFieldRef {
    containerName?: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerEnvValueFromSecretKeyRef {
    /**
     * The key of the secret to select from. Must be a valid secret key.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the Secret or its key must be defined.
     */
    optional?: boolean;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerLifecycle {
    /**
     * post_start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    postStarts?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStart[];
    /**
     * pre_stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    preStops?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStop[];
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStart {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartTcpSocket[];
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerLifecyclePostStartTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStop {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopTcpSocket[];
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerLifecyclePreStopTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerLivenessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerLivenessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerPort {
    /**
     * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
     */
    containerPort: number;
    /**
     * What host IP to bind the external port to.
     */
    hostIp?: string;
    /**
     * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
     */
    hostPort?: number;
    /**
     * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
     */
    name?: string;
    /**
     * Protocol for port. Must be UDP or TCP. Defaults to "TCP".
     */
    protocol?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerReadinessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerReadinessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerResources {
    /**
     * Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits: {[key: string]: string};
    /**
     * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
     */
    requests: {[key: string]: string};
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerSecurityContext {
    /**
     * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
     */
    allowPrivilegeEscalation?: boolean;
    /**
     * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
     */
    capabilities?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerSecurityContextCapabilities;
    /**
     * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
     */
    privileged?: boolean;
    /**
     * Whether this container has a read-only root filesystem. Default is false.
     */
    readOnlyRootFilesystem?: boolean;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsGroup?: string;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: boolean;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUser?: string;
    /**
     * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    seLinuxOptions?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerSecurityContextSeLinuxOptions;
    /**
     * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     */
    seccompProfile?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerSecurityContextSeccompProfile;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerSecurityContextCapabilities {
    /**
     * Added capabilities
     */
    adds?: string[];
    /**
     * Removed capabilities
     */
    drops?: string[];
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: string;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: string;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: string;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerSecurityContextSeccompProfile {
    /**
     * Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
     */
    localhostProfile?: string;
    /**
     * Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
     */
    type?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerStartupProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerStartupProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerStartupProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerStartupProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerStartupProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerStartupProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerStartupProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerStartupProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerStartupProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecInitContainerVolumeMount {
    /**
     * Path within the container at which the volume should be mounted. Must not contain ':'.
     */
    mountPath: string;
    /**
     * Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional.
     */
    mountPropagation?: string;
    /**
     * This must match the Name of a Volume.
     */
    name: string;
    /**
     * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
     */
    subPath?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecOs {
    /**
     * Name is the name of the operating system. The currently supported values are linux and windows.
     */
    name: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecReadinessGate {
    /**
     * refers to a condition in the pod's condition list with matching type.
     */
    conditionType: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecSecurityContext {
    /**
     * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- If unset, the Kubelet will not modify the ownership and permissions of any volume.
     */
    fsGroup?: string;
    /**
     * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir.
     */
    fsGroupChangePolicy?: string;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    runAsGroup?: string;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: boolean;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    runAsUser?: string;
    /**
     * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    seLinuxOptions?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecSecurityContextSeLinuxOptions;
    /**
     * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     */
    seccompProfile?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecSecurityContextSeccompProfile;
    /**
     * A list of groups applied to the first process run in each container, in addition to the container's primary GID. If unspecified, no groups will be added to any container.
     */
    supplementalGroups?: number[];
    /**
     * holds a list of namespaced sysctls used for the pod.
     */
    sysctls?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecSecurityContextSysctl[];
    /**
     * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
     */
    windowsOptions?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecSecurityContextWindowsOptions;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: string;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: string;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: string;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecSecurityContextSeccompProfile {
    /**
     * Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
     */
    localhostProfile?: string;
    /**
     * Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
     */
    type?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecSecurityContextSysctl {
    /**
     * Name of a property to set.
     */
    name: string;
    /**
     * Value of a property to set.
     */
    value: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecSecurityContextWindowsOptions {
    /**
     * GMSACredentialSpec is where the GMSA admission webhook inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field
     */
    gmsaCredentialSpec?: string;
    /**
     * GMSACredentialSpecName is the name of the GMSA credential spec to use.
     */
    gmsaCredentialSpecName?: string;
    /**
     * HostProcess determines if a container should be run as a 'Host Process' container. Default value is false.
     */
    hostProcess?: boolean;
    /**
     * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUsername?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecToleration {
    /**
     * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
     */
    effect?: string;
    /**
     * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
     */
    key?: string;
    /**
     * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
     */
    operator?: string;
    /**
     * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
     */
    tolerationSeconds?: string;
    /**
     * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
     */
    value?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecTopologySpreadConstraint {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecTopologySpreadConstraintLabelSelector[];
    /**
     * is a set of pod label keys to select the pods over which spreading will be calculated.
     */
    matchLabelKeys?: string[];
    /**
     * describes the degree to which pods may be unevenly distributed.
     */
    maxSkew?: number;
    /**
     * indicates a minimum number of eligible domains.
     */
    minDomains?: number;
    /**
     * indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew.
     */
    nodeAffinityPolicy?: string;
    /**
     * indicates how we will treat node taints when calculating pod topology spread skew.
     */
    nodeTaintsPolicy?: string;
    /**
     * the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology.
     */
    topologyKey?: string;
    /**
     * indicates how to deal with a pod if it doesn't satisfy the spread constraint.
     */
    whenUnsatisfiable?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecTopologySpreadConstraintLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolume {
    /**
     * Represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    awsElasticBlockStore?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeAwsElasticBlockStore;
    /**
     * Represents an Azure Data Disk mount on the host and bind mount to the pod.
     */
    azureDisk?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeAzureDisk;
    /**
     * Represents an Azure File Service mount on the host and bind mount to the pod.
     */
    azureFile?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeAzureFile;
    /**
     * Represents a Ceph FS mount on the host that shares a pod's lifetime
     */
    cephFs?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeCephFs;
    /**
     * Represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    cinder?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeCinder;
    /**
     * ConfigMap represents a configMap that should populate this volume
     */
    configMap?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeConfigMap;
    /**
     * Represents a CSI Volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
     */
    csi?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeCsi;
    /**
     * DownwardAPI represents downward API about the pod that should populate this volume
     */
    downwardApi?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeDownwardApi;
    /**
     * EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
     */
    emptyDir?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeEmptyDir;
    /**
     * Represents an ephemeral volume that is handled by a normal storage driver. More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes
     */
    ephemeral?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeEphemeral;
    /**
     * Represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
     */
    fc?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeFc;
    /**
     * Represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.
     */
    flexVolume?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeFlexVolume;
    /**
     * Represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
     */
    flocker?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeFlocker;
    /**
     * Represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    gcePersistentDisk?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeGcePersistentDisk;
    /**
     * GitRepo represents a git repository at a particular revision.
     */
    gitRepo?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeGitRepo;
    /**
     * Represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
     */
    glusterfs?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeGlusterfs;
    /**
     * Represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     */
    hostPath?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeHostPath;
    /**
     * Represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
     */
    iscsi?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeIscsi;
    /**
     * Represents a mounted local storage device such as a disk, partition or directory. Local volumes can only be used as a statically created PersistentVolume. Dynamic provisioning is not supported yet. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
     */
    local?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeLocal;
    /**
     * Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    nfs?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeNfs;
    /**
     * The specification of a persistent volume.
     */
    persistentVolumeClaim?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumePersistentVolumeClaim;
    /**
     * Represents a PhotonController persistent disk attached and mounted on kubelets host machine
     */
    photonPersistentDisk?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumePhotonPersistentDisk;
    /**
     * Projected represents a single volume that projects several volume sources into the same directory. More info: https://kubernetes.io/docs/concepts/storage/volumes/#projected
     */
    projecteds?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeProjected[];
    /**
     * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
     */
    quobyte?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeQuobyte;
    /**
     * Represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
     */
    rbd?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeRbd;
    /**
     * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    secret?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeSecret;
    /**
     * Represents a vSphere volume attached and mounted on kubelets host machine
     */
    vsphereVolume?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeVsphereVolume;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeAwsElasticBlockStore {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    fsType?: string;
    /**
     * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
     */
    partition?: number;
    /**
     * Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    readOnly?: boolean;
    /**
     * Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    volumeId: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeAzureDisk {
    /**
     * Host Caching mode: None, Read Only, Read Write.
     */
    cachingMode: string;
    /**
     * The URI the data disk in the blob storage
     */
    dataDiskUri: string;
    /**
     * The Name of the data disk in the blob storage
     */
    diskName: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * The type for the data disk. Expected values: Shared, Dedicated, Managed. Defaults to Shared
     */
    kind: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeAzureFile {
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * The name of secret that contains Azure Storage Account Name and Key
     */
    secretName: string;
    /**
     * The namespace of the secret that contains Azure Storage Account Name and Key. For Kubernetes up to 1.18.x the default is the same as the Pod. For Kubernetes 1.19.x and later the default is "default" namespace.
     */
    secretNamespace?: string;
    /**
     * Share Name
     */
    shareName: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeCephFs {
    /**
     * Monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    monitors: string[];
    /**
     * Used as the mounted root, rather than the full Ceph tree, default is /
     */
    path?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to `false` (read/write). More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    readOnly?: boolean;
    /**
     * The path to key ring for User, default is `/etc/ceph/user.secret`. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    secretFile?: string;
    /**
     * Reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    secretRef?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeCephFsSecretRef;
    /**
     * User is the rados user name, default is admin. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    user?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeCephFsSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeCinder {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    fsType?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write). More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    readOnly?: boolean;
    /**
     * Volume ID used to identify the volume in Cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    volumeId: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeConfigMap {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeConfigMapItem[];
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Optional: Specify whether the ConfigMap or its keys must be defined.
     */
    optional?: boolean;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeConfigMapItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeCsi {
    /**
     * the name of the volume driver to use. More info: https://kubernetes.io/docs/concepts/storage/volumes/#csi
     */
    driver: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * A reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls.
     */
    nodePublishSecretRef?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeCsiNodePublishSecretRef;
    /**
     * Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
     */
    readOnly?: boolean;
    /**
     * Attributes of the volume to publish.
     */
    volumeAttributes?: {[key: string]: string};
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeCsiNodePublishSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeDownwardApi {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeDownwardApiItem[];
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeDownwardApiItem {
    /**
     * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
     */
    fieldRef: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemFieldRef;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
     */
    path: string;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
     */
    resourceFieldRef?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemResourceFieldRef;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeDownwardApiItemResourceFieldRef {
    containerName: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeEmptyDir {
    /**
     * What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be one of ["" "Memory" "HugePages" "HugePages-2Mi" "HugePages-1Gi"]. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
     */
    medium?: string;
    /**
     * Total amount of local storage required for this EmptyDir volume.
     */
    sizeLimit?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeEphemeral {
    /**
     * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC.
     */
    volumeClaimTemplate: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplate;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplate {
    /**
     * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
     */
    metadata?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadata;
    /**
     * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
     */
    spec: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpec;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadata {
    /**
     * An unstructured key value map stored with the persistent volume claim that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the persistent volume claim. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpec {
    /**
     * A set of the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
     */
    accessModes: string[];
    /**
     * A list of the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResources;
    /**
     * A label query over volumes to consider for binding.
     */
    selector?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelector;
    /**
     * Name of the storage class requested by the claim
     */
    storageClassName: string;
    /**
     * Defines what type of volume is required by the claim.
     */
    volumeMode: string;
    /**
     * The binding reference to the PersistentVolume backing this claim.
     */
    volumeName: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResources {
    /**
     * Map describing the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits?: {[key: string]: string};
    /**
     * Map describing the minimum amount of compute resources required. If this is omitted for a container, it defaults to `limits` if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    requests?: {[key: string]: string};
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeFc {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * FC target lun number
     */
    lun: number;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * FC target worldwide names (WWNs)
     */
    targetWwNs: string[];
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeFlexVolume {
    /**
     * Driver is the name of the driver to use for this volume.
     */
    driver: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
     */
    fsType?: string;
    /**
     * Extra command options if any.
     */
    options?: {[key: string]: string};
    /**
     * Whether to force the ReadOnly setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * Reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
     */
    secretRef?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeFlexVolumeSecretRef;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeFlexVolumeSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeFlocker {
    /**
     * Name of the dataset stored as metadata > name on the dataset for Flocker should be considered as deprecated
     */
    datasetName?: string;
    /**
     * UUID of the dataset. This is unique identifier of a Flocker dataset
     */
    datasetUuid?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeGcePersistentDisk {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    fsType?: string;
    /**
     * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    partition?: number;
    /**
     * Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    pdName: string;
    /**
     * Whether to force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    readOnly?: boolean;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeGitRepo {
    /**
     * Target directory name. Must not contain or start with '..'. If '.' is supplied, the volume directory will be the git repository. Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
     */
    directory?: string;
    /**
     * Repository URL
     */
    repository?: string;
    /**
     * Commit hash for the specified revision.
     */
    revision?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeGlusterfs {
    /**
     * The endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    endpointsName: string;
    /**
     * The Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    path: string;
    /**
     * Whether to force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    readOnly?: boolean;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeHostPath {
    /**
     * Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     */
    path?: string;
    /**
     * Type for HostPath volume. Allowed values are "" (default), DirectoryOrCreate, Directory, FileOrCreate, File, Socket, CharDevice and BlockDevice
     */
    type?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeIscsi {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
     */
    fsType?: string;
    /**
     * Target iSCSI Qualified Name.
     */
    iqn: string;
    /**
     * iSCSI interface name that uses an iSCSI transport. Defaults to 'default' (tcp).
     */
    iscsiInterface?: string;
    /**
     * iSCSI target lun number.
     */
    lun?: number;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false.
     */
    readOnly?: boolean;
    /**
     * iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
     */
    targetPortal: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeLocal {
    /**
     * Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
     */
    path?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeNfs {
    /**
     * Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    path: string;
    /**
     * Whether to force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    readOnly?: boolean;
    /**
     * Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    server: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumePersistentVolumeClaim {
    /**
     * ClaimName is the name of a PersistentVolumeClaim in the same
     */
    claimName?: string;
    /**
     * Will force the ReadOnly setting in VolumeMounts.
     */
    readOnly?: boolean;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumePhotonPersistentDisk {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * ID that identifies Photon Controller persistent disk
     */
    pdId: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeProjected {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * Source of the volume to project in the directory.
     */
    sources: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeProjectedSource[];
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeProjectedSource {
    /**
     * ConfigMap represents a configMap that should populate this volume
     */
    configMaps?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeProjectedSourceConfigMap[];
    /**
     * DownwardAPI represents downward API about the pod that should populate this volume
     */
    downwardApi?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApi;
    /**
     * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    secrets?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeProjectedSourceSecret[];
    /**
     * A projected service account token volume
     */
    serviceAccountToken?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeProjectedSourceServiceAccountToken;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeProjectedSourceConfigMap {
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeProjectedSourceConfigMapItem[];
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Optional: Specify whether the ConfigMap or it's keys must be defined.
     */
    optional?: boolean;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeProjectedSourceConfigMapItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApi {
    /**
     * Represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
     */
    items?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItem[];
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItem {
    /**
     * Selects a field of the pod: only annotations, labels, name and namespace are supported.
     */
    fieldRef?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRef;
    /**
     * Mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
     */
    path: string;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
     */
    resourceFieldRef?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRef;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to 'v1'.
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRef {
    containerName: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeProjectedSourceSecret {
    /**
     * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeProjectedSourceSecretItem[];
    /**
     * Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    name?: string;
    /**
     * Optional: Specify whether the Secret or it's keys must be defined.
     */
    optional?: boolean;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeProjectedSourceSecretItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeProjectedSourceServiceAccountToken {
    /**
     * Audience is the intended audience of the token
     */
    audience?: string;
    /**
     * ExpirationSeconds is the expected duration of validity of the service account token. It defaults to 1 hour and must be at least 10 minutes (600 seconds).
     */
    expirationSeconds?: number;
    /**
     * Path specifies a relative path to the mount point of the projected volume.
     */
    path: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeQuobyte {
    /**
     * Group to map volume access to Default is no group
     */
    group?: string;
    /**
     * Whether to force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
     */
    registry: string;
    /**
     * User to map volume access to Defaults to serivceaccount user
     */
    user?: string;
    /**
     * Volume is a string that references an already created Quobyte volume by name.
     */
    volume: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeRbd {
    /**
     * A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    cephMonitors: string[];
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
     */
    fsType?: string;
    /**
     * Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    keyring: string;
    /**
     * The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    radosUser?: string;
    /**
     * The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    rbdImage: string;
    /**
     * The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it.
     */
    rbdPool?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    readOnly?: boolean;
    /**
     * Name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    secretRef?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeRbdSecretRef;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeRbdSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeSecret {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.CronJobV1SpecJobTemplateSpecTemplateSpecVolumeSecretItem[];
    /**
     * Optional: Specify whether the Secret or its keys must be defined.
     */
    optional?: boolean;
    /**
     * Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    secretName?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeSecretItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface CronJobV1SpecJobTemplateSpecTemplateSpecVolumeVsphereVolume {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * Path that identifies vSphere volume vmdk
     */
    volumePath: string;
}

export interface CronJobV1Timeouts {
    delete?: string;
}

export interface CsiDriverMetadata {
    /**
     * An unstructured key value map stored with the csi driver that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the csi driver. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the csi driver, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * An opaque value that represents the internal version of this csi driver that can be used by clients to determine when csi driver has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this csi driver. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface CsiDriverSpec {
    /**
     * Indicates if the CSI volume driver requires an attach operation
     */
    attachRequired: boolean;
    /**
     * Indicates that the CSI volume driver requires additional pod information (like podName, podUID, etc.) during mount operations
     */
    podInfoOnMount?: boolean;
    /**
     * Defines what kind of volumes this CSI volume driver supports
     */
    volumeLifecycleModes?: string[];
}

export interface CsiDriverV1Metadata {
    /**
     * An unstructured key value map stored with the csi driver that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the csi driver. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the csi driver, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * An opaque value that represents the internal version of this csi driver that can be used by clients to determine when csi driver has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this csi driver. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface CsiDriverV1Spec {
    /**
     * Indicates if the CSI volume driver requires an attach operation
     */
    attachRequired: boolean;
    /**
     * Indicates that the CSI volume driver requires additional pod information (like podName, podUID, etc.) during mount operations
     */
    podInfoOnMount?: boolean;
    /**
     * Defines what kind of volumes this CSI volume driver supports
     */
    volumeLifecycleModes?: string[];
}

export interface DaemonSetV1Metadata {
    /**
     * An unstructured key value map stored with the daemonset that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the daemonset. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the daemonset, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the daemonset must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this daemonset that can be used by clients to determine when daemonset has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this daemonset. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface DaemonSetV1Spec {
    /**
     * Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
     */
    minReadySeconds?: number;
    /**
     * The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.
     */
    revisionHistoryLimit?: number;
    /**
     * A label query over pods that are managed by the DaemonSet.
     */
    selector?: outputs.DaemonSetV1SpecSelector;
    /**
     * The deployment strategy used to replace existing pods with new ones.
     */
    strategy?: outputs.DaemonSetV1SpecStrategy;
    /**
     * An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template's node selector (or on every node if no node selector is specified). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/#pod-template
     */
    template: outputs.DaemonSetV1SpecTemplate;
}

export interface DaemonSetV1SpecSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.DaemonSetV1SpecSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface DaemonSetV1SpecSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface DaemonSetV1SpecStrategy {
    /**
     * Rolling update config params. Present only if type = 'RollingUpdate'.
     */
    rollingUpdate?: outputs.DaemonSetV1SpecStrategyRollingUpdate;
    /**
     * Type of deployment. Can be 'RollingUpdate' or 'OnDelete'. Default is RollingUpdate.
     */
    type?: string;
}

export interface DaemonSetV1SpecStrategyRollingUpdate {
    /**
     * The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0. Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.
     */
    maxUnavailable?: string;
}

export interface DaemonSetV1SpecTemplate {
    /**
     * Standard daemon set's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
     */
    metadata: outputs.DaemonSetV1SpecTemplateMetadata;
    /**
     * Spec of the pods owned by the daemon set
     */
    spec?: outputs.DaemonSetV1SpecTemplateSpec;
}

export interface DaemonSetV1SpecTemplateMetadata {
    /**
     * An unstructured key value map stored with the daemon set that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the daemon set. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the daemon set, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the daemon set must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this daemon set that can be used by clients to determine when daemon set has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this daemon set. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface DaemonSetV1SpecTemplateSpec {
    /**
     * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
     */
    activeDeadlineSeconds?: number;
    /**
     * Optional pod scheduling constraints.
     */
    affinity?: outputs.DaemonSetV1SpecTemplateSpecAffinity;
    /**
     * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
     */
    automountServiceAccountToken?: boolean;
    /**
     * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/
     */
    containers?: outputs.DaemonSetV1SpecTemplateSpecContainer[];
    /**
     * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy. Optional: Defaults to empty
     */
    dnsConfig?: outputs.DaemonSetV1SpecTemplateSpecDnsConfig;
    /**
     * Set DNS policy for containers within the pod. Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'. Defaults to 'ClusterFirst'. More info: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy
     */
    dnsPolicy?: string;
    /**
     * Enables generating environment variables for service discovery. Defaults to true.
     */
    enableServiceLinks?: boolean;
    /**
     * List of hosts and IPs that will be injected into the pod's hosts file if specified. Optional: Defaults to empty.
     */
    hostAliases?: outputs.DaemonSetV1SpecTemplateSpecHostAlias[];
    /**
     * Use the host's ipc namespace. Optional: Defaults to false.
     */
    hostIpc?: boolean;
    /**
     * Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified.
     */
    hostNetwork?: boolean;
    /**
     * Use the host's pid namespace.
     */
    hostPid?: boolean;
    /**
     * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
     */
    hostname: string;
    /**
     * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
     */
    imagePullSecrets?: outputs.DaemonSetV1SpecTemplateSpecImagePullSecret[];
    /**
     * List of init containers belonging to the pod. Init containers always run to completion and each must complete successfully before the next is started. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
     */
    initContainers?: outputs.DaemonSetV1SpecTemplateSpecInitContainer[];
    /**
     * NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
     */
    nodeName: string;
    /**
     * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.
     */
    nodeSelector?: {[key: string]: string};
    /**
     * Specifies the OS of the containers in the pod.
     */
    os?: outputs.DaemonSetV1SpecTemplateSpecOs;
    /**
     * If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
     */
    priorityClassName?: string;
    /**
     * If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md
     */
    readinessGates?: outputs.DaemonSetV1SpecTemplateSpecReadinessGate[];
    /**
     * Restart policy for all containers within the pod. One of Always, OnFailure, Never. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy.
     */
    restartPolicy?: string;
    /**
     * RuntimeClassName is a feature for selecting the container runtime configuration. The container runtime configuration is used to run a Pod's containers. More info: https://kubernetes.io/docs/concepts/containers/runtime-class
     */
    runtimeClassName?: string;
    /**
     * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
     */
    schedulerName: string;
    /**
     * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty
     */
    securityContext?: outputs.DaemonSetV1SpecTemplateSpecSecurityContext;
    /**
     * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: http://releases.k8s.io/HEAD/docs/design/service_accounts.md.
     */
    serviceAccountName: string;
    /**
     * Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Defaults to false.
     */
    shareProcessNamespace?: boolean;
    /**
     * If specified, the fully qualified Pod hostname will be "...svc.". If not specified, the pod will not have a domainname at all..
     */
    subdomain?: string;
    /**
     * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process.
     */
    terminationGracePeriodSeconds?: number;
    /**
     * If specified, the pod's toleration. Optional: Defaults to empty
     */
    tolerations?: outputs.DaemonSetV1SpecTemplateSpecToleration[];
    /**
     * describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints.
     */
    topologySpreadConstraints?: outputs.DaemonSetV1SpecTemplateSpecTopologySpreadConstraint[];
    /**
     * List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
     */
    volumes?: outputs.DaemonSetV1SpecTemplateSpecVolume[];
}

export interface DaemonSetV1SpecTemplateSpecAffinity {
    /**
     * Node affinity scheduling rules for the pod.
     */
    nodeAffinity?: outputs.DaemonSetV1SpecTemplateSpecAffinityNodeAffinity;
    /**
     * Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)
     */
    podAffinity?: outputs.DaemonSetV1SpecTemplateSpecAffinityPodAffinity;
    /**
     * Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)
     */
    podAntiAffinity?: outputs.DaemonSetV1SpecTemplateSpecAffinityPodAntiAffinity;
}

export interface DaemonSetV1SpecTemplateSpecAffinityNodeAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: outputs.DaemonSetV1SpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a node label update), the system may or may not try to eventually evict the pod from its node.
     */
    requiredDuringSchedulingIgnoredDuringExecution?: outputs.DaemonSetV1SpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
}

export interface DaemonSetV1SpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A node selector term, associated with the corresponding weight.
     */
    preference: outputs.DaemonSetV1SpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
    /**
     * weight is in the range 1-100
     */
    weight: number;
}

export interface DaemonSetV1SpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
    /**
     * List of node selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.DaemonSetV1SpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression[];
    /**
     * A list of node selector requirements by node's fields. The requirements are ANDed.
     */
    matchFields?: outputs.DaemonSetV1SpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchField[];
}

export interface DaemonSetV1SpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
     */
    operator?: string;
    /**
     * Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface DaemonSetV1SpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchField {
    /**
     * The label key that the selector applies to.
     */
    key: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists`, `DoesNotExist`, `Gt`, and `Lt`.
     */
    operator: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface DaemonSetV1SpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * List of node selector terms. The terms are ORed.
     */
    nodeSelectorTerms?: outputs.DaemonSetV1SpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm[];
}

export interface DaemonSetV1SpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm {
    /**
     * List of node selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.DaemonSetV1SpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression[];
    /**
     * A list of node selector requirements by node's fields. The requirements are ANDed.
     */
    matchFields?: outputs.DaemonSetV1SpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchField[];
}

export interface DaemonSetV1SpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
     */
    operator?: string;
    /**
     * Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface DaemonSetV1SpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchField {
    /**
     * The label key that the selector applies to.
     */
    key: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists`, `DoesNotExist`, `Gt`, and `Lt`.
     */
    operator: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface DaemonSetV1SpecTemplateSpecAffinityPodAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: outputs.DaemonSetV1SpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.
     */
    requiredDuringSchedulingIgnoredDuringExecutions?: outputs.DaemonSetV1SpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
}

export interface DaemonSetV1SpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A pod affinity term, associated with the corresponding weight
     */
    podAffinityTerm: outputs.DaemonSetV1SpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
    /**
     * weight associated with matching the corresponding podAffinityTerm, in the range 1-100
     */
    weight: number;
}

export interface DaemonSetV1SpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.DaemonSetV1SpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface DaemonSetV1SpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.DaemonSetV1SpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface DaemonSetV1SpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface DaemonSetV1SpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.DaemonSetV1SpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface DaemonSetV1SpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.DaemonSetV1SpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface DaemonSetV1SpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface DaemonSetV1SpecTemplateSpecAffinityPodAntiAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: outputs.DaemonSetV1SpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.
     */
    requiredDuringSchedulingIgnoredDuringExecutions?: outputs.DaemonSetV1SpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
}

export interface DaemonSetV1SpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A pod affinity term, associated with the corresponding weight
     */
    podAffinityTerm: outputs.DaemonSetV1SpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
    /**
     * weight associated with matching the corresponding podAffinityTerm, in the range 1-100
     */
    weight: number;
}

export interface DaemonSetV1SpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.DaemonSetV1SpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface DaemonSetV1SpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.DaemonSetV1SpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface DaemonSetV1SpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface DaemonSetV1SpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.DaemonSetV1SpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface DaemonSetV1SpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.DaemonSetV1SpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface DaemonSetV1SpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface DaemonSetV1SpecTemplateSpecContainer {
    /**
     * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    args?: string[];
    /**
     * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    commands?: string[];
    /**
     * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
     */
    envFroms?: outputs.DaemonSetV1SpecTemplateSpecContainerEnvFrom[];
    /**
     * List of environment variables to set in the container. Cannot be updated.
     */
    envs?: outputs.DaemonSetV1SpecTemplateSpecContainerEnv[];
    /**
     * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/
     */
    image?: string;
    /**
     * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images
     */
    imagePullPolicy: string;
    /**
     * Actions that the management system should take in response to container lifecycle events
     */
    lifecycle?: outputs.DaemonSetV1SpecTemplateSpecContainerLifecycle;
    /**
     * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    livenessProbe?: outputs.DaemonSetV1SpecTemplateSpecContainerLivenessProbe;
    /**
     * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
     */
    name: string;
    /**
     * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
     */
    ports?: outputs.DaemonSetV1SpecTemplateSpecContainerPort[];
    /**
     * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    readinessProbe?: outputs.DaemonSetV1SpecTemplateSpecContainerReadinessProbe;
    /**
     * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources?: outputs.DaemonSetV1SpecTemplateSpecContainerResources;
    /**
     * Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
     */
    securityContext?: outputs.DaemonSetV1SpecTemplateSpecContainerSecurityContext;
    /**
     * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     */
    startupProbe?: outputs.DaemonSetV1SpecTemplateSpecContainerStartupProbe;
    /**
     * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.
     */
    stdin?: boolean;
    /**
     * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.
     */
    stdinOnce?: boolean;
    /**
     * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.
     */
    terminationMessagePath?: string;
    /**
     * Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
     */
    terminationMessagePolicy: string;
    /**
     * Whether this container should allocate a TTY for itself
     */
    tty?: boolean;
    /**
     * Pod volumes to mount into the container's filesystem. Cannot be updated.
     */
    volumeMounts?: outputs.DaemonSetV1SpecTemplateSpecContainerVolumeMount[];
    /**
     * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
     */
    workingDir?: string;
}

export interface DaemonSetV1SpecTemplateSpecContainerEnv {
    /**
     * Name of the environment variable. Must be a C_IDENTIFIER
     */
    name: string;
    /**
     * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
     */
    value?: string;
    /**
     * Source for the environment variable's value
     */
    valueFrom?: outputs.DaemonSetV1SpecTemplateSpecContainerEnvValueFrom;
}

export interface DaemonSetV1SpecTemplateSpecContainerEnvFrom {
    /**
     * The ConfigMap to select from
     */
    configMapRef?: outputs.DaemonSetV1SpecTemplateSpecContainerEnvFromConfigMapRef;
    /**
     * An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
     */
    prefix?: string;
    /**
     * The Secret to select from
     */
    secretRef?: outputs.DaemonSetV1SpecTemplateSpecContainerEnvFromSecretRef;
}

export interface DaemonSetV1SpecTemplateSpecContainerEnvFromConfigMapRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the ConfigMap must be defined
     */
    optional?: boolean;
}

export interface DaemonSetV1SpecTemplateSpecContainerEnvFromSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the Secret must be defined
     */
    optional?: boolean;
}

export interface DaemonSetV1SpecTemplateSpecContainerEnvValueFrom {
    /**
     * Selects a key of a ConfigMap.
     */
    configMapKeyRef?: outputs.DaemonSetV1SpecTemplateSpecContainerEnvValueFromConfigMapKeyRef;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.
     */
    fieldRef?: outputs.DaemonSetV1SpecTemplateSpecContainerEnvValueFromFieldRef;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
     */
    resourceFieldRef?: outputs.DaemonSetV1SpecTemplateSpecContainerEnvValueFromResourceFieldRef;
    /**
     * Selects a key of a secret in the pod's namespace.
     */
    secretKeyRef?: outputs.DaemonSetV1SpecTemplateSpecContainerEnvValueFromSecretKeyRef;
}

export interface DaemonSetV1SpecTemplateSpecContainerEnvValueFromConfigMapKeyRef {
    /**
     * The key to select.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the ConfigMap or its key must be defined.
     */
    optional?: boolean;
}

export interface DaemonSetV1SpecTemplateSpecContainerEnvValueFromFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface DaemonSetV1SpecTemplateSpecContainerEnvValueFromResourceFieldRef {
    containerName?: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface DaemonSetV1SpecTemplateSpecContainerEnvValueFromSecretKeyRef {
    /**
     * The key of the secret to select from. Must be a valid secret key.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the Secret or its key must be defined.
     */
    optional?: boolean;
}

export interface DaemonSetV1SpecTemplateSpecContainerLifecycle {
    /**
     * post_start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    postStarts?: outputs.DaemonSetV1SpecTemplateSpecContainerLifecyclePostStart[];
    /**
     * pre_stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    preStops?: outputs.DaemonSetV1SpecTemplateSpecContainerLifecyclePreStop[];
}

export interface DaemonSetV1SpecTemplateSpecContainerLifecyclePostStart {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.DaemonSetV1SpecTemplateSpecContainerLifecyclePostStartExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.DaemonSetV1SpecTemplateSpecContainerLifecyclePostStartHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.DaemonSetV1SpecTemplateSpecContainerLifecyclePostStartTcpSocket[];
}

export interface DaemonSetV1SpecTemplateSpecContainerLifecyclePostStartExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface DaemonSetV1SpecTemplateSpecContainerLifecyclePostStartHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.DaemonSetV1SpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface DaemonSetV1SpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface DaemonSetV1SpecTemplateSpecContainerLifecyclePostStartTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface DaemonSetV1SpecTemplateSpecContainerLifecyclePreStop {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.DaemonSetV1SpecTemplateSpecContainerLifecyclePreStopExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.DaemonSetV1SpecTemplateSpecContainerLifecyclePreStopHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.DaemonSetV1SpecTemplateSpecContainerLifecyclePreStopTcpSocket[];
}

export interface DaemonSetV1SpecTemplateSpecContainerLifecyclePreStopExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface DaemonSetV1SpecTemplateSpecContainerLifecyclePreStopHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.DaemonSetV1SpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface DaemonSetV1SpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface DaemonSetV1SpecTemplateSpecContainerLifecyclePreStopTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface DaemonSetV1SpecTemplateSpecContainerLivenessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.DaemonSetV1SpecTemplateSpecContainerLivenessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.DaemonSetV1SpecTemplateSpecContainerLivenessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.DaemonSetV1SpecTemplateSpecContainerLivenessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.DaemonSetV1SpecTemplateSpecContainerLivenessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface DaemonSetV1SpecTemplateSpecContainerLivenessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface DaemonSetV1SpecTemplateSpecContainerLivenessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface DaemonSetV1SpecTemplateSpecContainerLivenessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.DaemonSetV1SpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface DaemonSetV1SpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface DaemonSetV1SpecTemplateSpecContainerLivenessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface DaemonSetV1SpecTemplateSpecContainerPort {
    /**
     * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
     */
    containerPort: number;
    /**
     * What host IP to bind the external port to.
     */
    hostIp?: string;
    /**
     * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
     */
    hostPort?: number;
    /**
     * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
     */
    name?: string;
    /**
     * Protocol for port. Must be UDP or TCP. Defaults to "TCP".
     */
    protocol?: string;
}

export interface DaemonSetV1SpecTemplateSpecContainerReadinessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.DaemonSetV1SpecTemplateSpecContainerReadinessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.DaemonSetV1SpecTemplateSpecContainerReadinessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.DaemonSetV1SpecTemplateSpecContainerReadinessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.DaemonSetV1SpecTemplateSpecContainerReadinessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface DaemonSetV1SpecTemplateSpecContainerReadinessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface DaemonSetV1SpecTemplateSpecContainerReadinessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface DaemonSetV1SpecTemplateSpecContainerReadinessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.DaemonSetV1SpecTemplateSpecContainerReadinessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface DaemonSetV1SpecTemplateSpecContainerReadinessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface DaemonSetV1SpecTemplateSpecContainerReadinessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface DaemonSetV1SpecTemplateSpecContainerResources {
    /**
     * Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits: {[key: string]: string};
    /**
     * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
     */
    requests: {[key: string]: string};
}

export interface DaemonSetV1SpecTemplateSpecContainerSecurityContext {
    /**
     * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
     */
    allowPrivilegeEscalation?: boolean;
    /**
     * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
     */
    capabilities?: outputs.DaemonSetV1SpecTemplateSpecContainerSecurityContextCapabilities;
    /**
     * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
     */
    privileged?: boolean;
    /**
     * Whether this container has a read-only root filesystem. Default is false.
     */
    readOnlyRootFilesystem?: boolean;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsGroup?: string;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: boolean;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUser?: string;
    /**
     * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    seLinuxOptions?: outputs.DaemonSetV1SpecTemplateSpecContainerSecurityContextSeLinuxOptions;
    /**
     * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     */
    seccompProfile?: outputs.DaemonSetV1SpecTemplateSpecContainerSecurityContextSeccompProfile;
}

export interface DaemonSetV1SpecTemplateSpecContainerSecurityContextCapabilities {
    /**
     * Added capabilities
     */
    adds?: string[];
    /**
     * Removed capabilities
     */
    drops?: string[];
}

export interface DaemonSetV1SpecTemplateSpecContainerSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: string;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: string;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: string;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: string;
}

export interface DaemonSetV1SpecTemplateSpecContainerSecurityContextSeccompProfile {
    /**
     * Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
     */
    localhostProfile?: string;
    /**
     * Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
     */
    type?: string;
}

export interface DaemonSetV1SpecTemplateSpecContainerStartupProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.DaemonSetV1SpecTemplateSpecContainerStartupProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.DaemonSetV1SpecTemplateSpecContainerStartupProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.DaemonSetV1SpecTemplateSpecContainerStartupProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.DaemonSetV1SpecTemplateSpecContainerStartupProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface DaemonSetV1SpecTemplateSpecContainerStartupProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface DaemonSetV1SpecTemplateSpecContainerStartupProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface DaemonSetV1SpecTemplateSpecContainerStartupProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.DaemonSetV1SpecTemplateSpecContainerStartupProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface DaemonSetV1SpecTemplateSpecContainerStartupProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface DaemonSetV1SpecTemplateSpecContainerStartupProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface DaemonSetV1SpecTemplateSpecContainerVolumeMount {
    /**
     * Path within the container at which the volume should be mounted. Must not contain ':'.
     */
    mountPath: string;
    /**
     * Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional.
     */
    mountPropagation?: string;
    /**
     * This must match the Name of a Volume.
     */
    name: string;
    /**
     * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
     */
    subPath?: string;
}

export interface DaemonSetV1SpecTemplateSpecDnsConfig {
    /**
     * A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
     */
    nameservers?: string[];
    /**
     * A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
     */
    options?: outputs.DaemonSetV1SpecTemplateSpecDnsConfigOption[];
    /**
     * A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
     */
    searches?: string[];
}

export interface DaemonSetV1SpecTemplateSpecDnsConfigOption {
    /**
     * Name of the option.
     */
    name: string;
    /**
     * Value of the option. Optional: Defaults to empty.
     */
    value?: string;
}

export interface DaemonSetV1SpecTemplateSpecHostAlias {
    /**
     * Hostnames for the IP address.
     */
    hostnames: string[];
    /**
     * IP address of the host file entry.
     */
    ip: string;
}

export interface DaemonSetV1SpecTemplateSpecImagePullSecret {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
}

export interface DaemonSetV1SpecTemplateSpecInitContainer {
    /**
     * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    args?: string[];
    /**
     * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    commands?: string[];
    /**
     * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
     */
    envFroms?: outputs.DaemonSetV1SpecTemplateSpecInitContainerEnvFrom[];
    /**
     * List of environment variables to set in the container. Cannot be updated.
     */
    envs?: outputs.DaemonSetV1SpecTemplateSpecInitContainerEnv[];
    /**
     * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/
     */
    image?: string;
    /**
     * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images
     */
    imagePullPolicy: string;
    /**
     * Actions that the management system should take in response to container lifecycle events
     */
    lifecycle?: outputs.DaemonSetV1SpecTemplateSpecInitContainerLifecycle;
    /**
     * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    livenessProbe?: outputs.DaemonSetV1SpecTemplateSpecInitContainerLivenessProbe;
    /**
     * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
     */
    name: string;
    /**
     * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
     */
    ports?: outputs.DaemonSetV1SpecTemplateSpecInitContainerPort[];
    /**
     * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    readinessProbe?: outputs.DaemonSetV1SpecTemplateSpecInitContainerReadinessProbe;
    /**
     * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources?: outputs.DaemonSetV1SpecTemplateSpecInitContainerResources;
    /**
     * Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
     */
    securityContext?: outputs.DaemonSetV1SpecTemplateSpecInitContainerSecurityContext;
    /**
     * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     */
    startupProbe?: outputs.DaemonSetV1SpecTemplateSpecInitContainerStartupProbe;
    /**
     * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.
     */
    stdin?: boolean;
    /**
     * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.
     */
    stdinOnce?: boolean;
    /**
     * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.
     */
    terminationMessagePath?: string;
    /**
     * Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
     */
    terminationMessagePolicy: string;
    /**
     * Whether this container should allocate a TTY for itself
     */
    tty?: boolean;
    /**
     * Pod volumes to mount into the container's filesystem. Cannot be updated.
     */
    volumeMounts?: outputs.DaemonSetV1SpecTemplateSpecInitContainerVolumeMount[];
    /**
     * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
     */
    workingDir?: string;
}

export interface DaemonSetV1SpecTemplateSpecInitContainerEnv {
    /**
     * Name of the environment variable. Must be a C_IDENTIFIER
     */
    name: string;
    /**
     * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
     */
    value?: string;
    /**
     * Source for the environment variable's value
     */
    valueFrom?: outputs.DaemonSetV1SpecTemplateSpecInitContainerEnvValueFrom;
}

export interface DaemonSetV1SpecTemplateSpecInitContainerEnvFrom {
    /**
     * The ConfigMap to select from
     */
    configMapRef?: outputs.DaemonSetV1SpecTemplateSpecInitContainerEnvFromConfigMapRef;
    /**
     * An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
     */
    prefix?: string;
    /**
     * The Secret to select from
     */
    secretRef?: outputs.DaemonSetV1SpecTemplateSpecInitContainerEnvFromSecretRef;
}

export interface DaemonSetV1SpecTemplateSpecInitContainerEnvFromConfigMapRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the ConfigMap must be defined
     */
    optional?: boolean;
}

export interface DaemonSetV1SpecTemplateSpecInitContainerEnvFromSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the Secret must be defined
     */
    optional?: boolean;
}

export interface DaemonSetV1SpecTemplateSpecInitContainerEnvValueFrom {
    /**
     * Selects a key of a ConfigMap.
     */
    configMapKeyRef?: outputs.DaemonSetV1SpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRef;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.
     */
    fieldRef?: outputs.DaemonSetV1SpecTemplateSpecInitContainerEnvValueFromFieldRef;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
     */
    resourceFieldRef?: outputs.DaemonSetV1SpecTemplateSpecInitContainerEnvValueFromResourceFieldRef;
    /**
     * Selects a key of a secret in the pod's namespace.
     */
    secretKeyRef?: outputs.DaemonSetV1SpecTemplateSpecInitContainerEnvValueFromSecretKeyRef;
}

export interface DaemonSetV1SpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRef {
    /**
     * The key to select.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the ConfigMap or its key must be defined.
     */
    optional?: boolean;
}

export interface DaemonSetV1SpecTemplateSpecInitContainerEnvValueFromFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface DaemonSetV1SpecTemplateSpecInitContainerEnvValueFromResourceFieldRef {
    containerName?: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface DaemonSetV1SpecTemplateSpecInitContainerEnvValueFromSecretKeyRef {
    /**
     * The key of the secret to select from. Must be a valid secret key.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the Secret or its key must be defined.
     */
    optional?: boolean;
}

export interface DaemonSetV1SpecTemplateSpecInitContainerLifecycle {
    /**
     * post_start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    postStarts?: outputs.DaemonSetV1SpecTemplateSpecInitContainerLifecyclePostStart[];
    /**
     * pre_stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    preStops?: outputs.DaemonSetV1SpecTemplateSpecInitContainerLifecyclePreStop[];
}

export interface DaemonSetV1SpecTemplateSpecInitContainerLifecyclePostStart {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.DaemonSetV1SpecTemplateSpecInitContainerLifecyclePostStartExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.DaemonSetV1SpecTemplateSpecInitContainerLifecyclePostStartHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.DaemonSetV1SpecTemplateSpecInitContainerLifecyclePostStartTcpSocket[];
}

export interface DaemonSetV1SpecTemplateSpecInitContainerLifecyclePostStartExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface DaemonSetV1SpecTemplateSpecInitContainerLifecyclePostStartHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.DaemonSetV1SpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface DaemonSetV1SpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface DaemonSetV1SpecTemplateSpecInitContainerLifecyclePostStartTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface DaemonSetV1SpecTemplateSpecInitContainerLifecyclePreStop {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.DaemonSetV1SpecTemplateSpecInitContainerLifecyclePreStopExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.DaemonSetV1SpecTemplateSpecInitContainerLifecyclePreStopHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.DaemonSetV1SpecTemplateSpecInitContainerLifecyclePreStopTcpSocket[];
}

export interface DaemonSetV1SpecTemplateSpecInitContainerLifecyclePreStopExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface DaemonSetV1SpecTemplateSpecInitContainerLifecyclePreStopHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.DaemonSetV1SpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface DaemonSetV1SpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface DaemonSetV1SpecTemplateSpecInitContainerLifecyclePreStopTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface DaemonSetV1SpecTemplateSpecInitContainerLivenessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.DaemonSetV1SpecTemplateSpecInitContainerLivenessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.DaemonSetV1SpecTemplateSpecInitContainerLivenessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.DaemonSetV1SpecTemplateSpecInitContainerLivenessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.DaemonSetV1SpecTemplateSpecInitContainerLivenessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface DaemonSetV1SpecTemplateSpecInitContainerLivenessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface DaemonSetV1SpecTemplateSpecInitContainerLivenessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface DaemonSetV1SpecTemplateSpecInitContainerLivenessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.DaemonSetV1SpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface DaemonSetV1SpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface DaemonSetV1SpecTemplateSpecInitContainerLivenessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface DaemonSetV1SpecTemplateSpecInitContainerPort {
    /**
     * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
     */
    containerPort: number;
    /**
     * What host IP to bind the external port to.
     */
    hostIp?: string;
    /**
     * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
     */
    hostPort?: number;
    /**
     * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
     */
    name?: string;
    /**
     * Protocol for port. Must be UDP or TCP. Defaults to "TCP".
     */
    protocol?: string;
}

export interface DaemonSetV1SpecTemplateSpecInitContainerReadinessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.DaemonSetV1SpecTemplateSpecInitContainerReadinessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.DaemonSetV1SpecTemplateSpecInitContainerReadinessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.DaemonSetV1SpecTemplateSpecInitContainerReadinessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.DaemonSetV1SpecTemplateSpecInitContainerReadinessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface DaemonSetV1SpecTemplateSpecInitContainerReadinessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface DaemonSetV1SpecTemplateSpecInitContainerReadinessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface DaemonSetV1SpecTemplateSpecInitContainerReadinessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.DaemonSetV1SpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface DaemonSetV1SpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface DaemonSetV1SpecTemplateSpecInitContainerReadinessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface DaemonSetV1SpecTemplateSpecInitContainerResources {
    /**
     * Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits: {[key: string]: string};
    /**
     * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
     */
    requests: {[key: string]: string};
}

export interface DaemonSetV1SpecTemplateSpecInitContainerSecurityContext {
    /**
     * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
     */
    allowPrivilegeEscalation?: boolean;
    /**
     * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
     */
    capabilities?: outputs.DaemonSetV1SpecTemplateSpecInitContainerSecurityContextCapabilities;
    /**
     * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
     */
    privileged?: boolean;
    /**
     * Whether this container has a read-only root filesystem. Default is false.
     */
    readOnlyRootFilesystem?: boolean;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsGroup?: string;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: boolean;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUser?: string;
    /**
     * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    seLinuxOptions?: outputs.DaemonSetV1SpecTemplateSpecInitContainerSecurityContextSeLinuxOptions;
    /**
     * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     */
    seccompProfile?: outputs.DaemonSetV1SpecTemplateSpecInitContainerSecurityContextSeccompProfile;
}

export interface DaemonSetV1SpecTemplateSpecInitContainerSecurityContextCapabilities {
    /**
     * Added capabilities
     */
    adds?: string[];
    /**
     * Removed capabilities
     */
    drops?: string[];
}

export interface DaemonSetV1SpecTemplateSpecInitContainerSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: string;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: string;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: string;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: string;
}

export interface DaemonSetV1SpecTemplateSpecInitContainerSecurityContextSeccompProfile {
    /**
     * Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
     */
    localhostProfile?: string;
    /**
     * Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
     */
    type?: string;
}

export interface DaemonSetV1SpecTemplateSpecInitContainerStartupProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.DaemonSetV1SpecTemplateSpecInitContainerStartupProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.DaemonSetV1SpecTemplateSpecInitContainerStartupProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.DaemonSetV1SpecTemplateSpecInitContainerStartupProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.DaemonSetV1SpecTemplateSpecInitContainerStartupProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface DaemonSetV1SpecTemplateSpecInitContainerStartupProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface DaemonSetV1SpecTemplateSpecInitContainerStartupProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface DaemonSetV1SpecTemplateSpecInitContainerStartupProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.DaemonSetV1SpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface DaemonSetV1SpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface DaemonSetV1SpecTemplateSpecInitContainerStartupProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface DaemonSetV1SpecTemplateSpecInitContainerVolumeMount {
    /**
     * Path within the container at which the volume should be mounted. Must not contain ':'.
     */
    mountPath: string;
    /**
     * Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional.
     */
    mountPropagation?: string;
    /**
     * This must match the Name of a Volume.
     */
    name: string;
    /**
     * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
     */
    subPath?: string;
}

export interface DaemonSetV1SpecTemplateSpecOs {
    /**
     * Name is the name of the operating system. The currently supported values are linux and windows.
     */
    name: string;
}

export interface DaemonSetV1SpecTemplateSpecReadinessGate {
    /**
     * refers to a condition in the pod's condition list with matching type.
     */
    conditionType: string;
}

export interface DaemonSetV1SpecTemplateSpecSecurityContext {
    /**
     * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- If unset, the Kubelet will not modify the ownership and permissions of any volume.
     */
    fsGroup?: string;
    /**
     * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir.
     */
    fsGroupChangePolicy?: string;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    runAsGroup?: string;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: boolean;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    runAsUser?: string;
    /**
     * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    seLinuxOptions?: outputs.DaemonSetV1SpecTemplateSpecSecurityContextSeLinuxOptions;
    /**
     * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     */
    seccompProfile?: outputs.DaemonSetV1SpecTemplateSpecSecurityContextSeccompProfile;
    /**
     * A list of groups applied to the first process run in each container, in addition to the container's primary GID. If unspecified, no groups will be added to any container.
     */
    supplementalGroups?: number[];
    /**
     * holds a list of namespaced sysctls used for the pod.
     */
    sysctls?: outputs.DaemonSetV1SpecTemplateSpecSecurityContextSysctl[];
    /**
     * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
     */
    windowsOptions?: outputs.DaemonSetV1SpecTemplateSpecSecurityContextWindowsOptions;
}

export interface DaemonSetV1SpecTemplateSpecSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: string;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: string;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: string;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: string;
}

export interface DaemonSetV1SpecTemplateSpecSecurityContextSeccompProfile {
    /**
     * Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
     */
    localhostProfile?: string;
    /**
     * Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
     */
    type?: string;
}

export interface DaemonSetV1SpecTemplateSpecSecurityContextSysctl {
    /**
     * Name of a property to set.
     */
    name: string;
    /**
     * Value of a property to set.
     */
    value: string;
}

export interface DaemonSetV1SpecTemplateSpecSecurityContextWindowsOptions {
    /**
     * GMSACredentialSpec is where the GMSA admission webhook inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field
     */
    gmsaCredentialSpec?: string;
    /**
     * GMSACredentialSpecName is the name of the GMSA credential spec to use.
     */
    gmsaCredentialSpecName?: string;
    /**
     * HostProcess determines if a container should be run as a 'Host Process' container. Default value is false.
     */
    hostProcess?: boolean;
    /**
     * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUsername?: string;
}

export interface DaemonSetV1SpecTemplateSpecToleration {
    /**
     * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
     */
    effect?: string;
    /**
     * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
     */
    key?: string;
    /**
     * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
     */
    operator?: string;
    /**
     * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
     */
    tolerationSeconds?: string;
    /**
     * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
     */
    value?: string;
}

export interface DaemonSetV1SpecTemplateSpecTopologySpreadConstraint {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.DaemonSetV1SpecTemplateSpecTopologySpreadConstraintLabelSelector[];
    /**
     * is a set of pod label keys to select the pods over which spreading will be calculated.
     */
    matchLabelKeys?: string[];
    /**
     * describes the degree to which pods may be unevenly distributed.
     */
    maxSkew?: number;
    /**
     * indicates a minimum number of eligible domains.
     */
    minDomains?: number;
    /**
     * indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew.
     */
    nodeAffinityPolicy?: string;
    /**
     * indicates how we will treat node taints when calculating pod topology spread skew.
     */
    nodeTaintsPolicy?: string;
    /**
     * the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology.
     */
    topologyKey?: string;
    /**
     * indicates how to deal with a pod if it doesn't satisfy the spread constraint.
     */
    whenUnsatisfiable?: string;
}

export interface DaemonSetV1SpecTemplateSpecTopologySpreadConstraintLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.DaemonSetV1SpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface DaemonSetV1SpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface DaemonSetV1SpecTemplateSpecVolume {
    /**
     * Represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    awsElasticBlockStore?: outputs.DaemonSetV1SpecTemplateSpecVolumeAwsElasticBlockStore;
    /**
     * Represents an Azure Data Disk mount on the host and bind mount to the pod.
     */
    azureDisk?: outputs.DaemonSetV1SpecTemplateSpecVolumeAzureDisk;
    /**
     * Represents an Azure File Service mount on the host and bind mount to the pod.
     */
    azureFile?: outputs.DaemonSetV1SpecTemplateSpecVolumeAzureFile;
    /**
     * Represents a Ceph FS mount on the host that shares a pod's lifetime
     */
    cephFs?: outputs.DaemonSetV1SpecTemplateSpecVolumeCephFs;
    /**
     * Represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    cinder?: outputs.DaemonSetV1SpecTemplateSpecVolumeCinder;
    /**
     * ConfigMap represents a configMap that should populate this volume
     */
    configMap?: outputs.DaemonSetV1SpecTemplateSpecVolumeConfigMap;
    /**
     * Represents a CSI Volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
     */
    csi?: outputs.DaemonSetV1SpecTemplateSpecVolumeCsi;
    /**
     * DownwardAPI represents downward API about the pod that should populate this volume
     */
    downwardApi?: outputs.DaemonSetV1SpecTemplateSpecVolumeDownwardApi;
    /**
     * EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
     */
    emptyDir?: outputs.DaemonSetV1SpecTemplateSpecVolumeEmptyDir;
    /**
     * Represents an ephemeral volume that is handled by a normal storage driver. More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes
     */
    ephemeral?: outputs.DaemonSetV1SpecTemplateSpecVolumeEphemeral;
    /**
     * Represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
     */
    fc?: outputs.DaemonSetV1SpecTemplateSpecVolumeFc;
    /**
     * Represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.
     */
    flexVolume?: outputs.DaemonSetV1SpecTemplateSpecVolumeFlexVolume;
    /**
     * Represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
     */
    flocker?: outputs.DaemonSetV1SpecTemplateSpecVolumeFlocker;
    /**
     * Represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    gcePersistentDisk?: outputs.DaemonSetV1SpecTemplateSpecVolumeGcePersistentDisk;
    /**
     * GitRepo represents a git repository at a particular revision.
     */
    gitRepo?: outputs.DaemonSetV1SpecTemplateSpecVolumeGitRepo;
    /**
     * Represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
     */
    glusterfs?: outputs.DaemonSetV1SpecTemplateSpecVolumeGlusterfs;
    /**
     * Represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     */
    hostPath?: outputs.DaemonSetV1SpecTemplateSpecVolumeHostPath;
    /**
     * Represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
     */
    iscsi?: outputs.DaemonSetV1SpecTemplateSpecVolumeIscsi;
    /**
     * Represents a mounted local storage device such as a disk, partition or directory. Local volumes can only be used as a statically created PersistentVolume. Dynamic provisioning is not supported yet. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
     */
    local?: outputs.DaemonSetV1SpecTemplateSpecVolumeLocal;
    /**
     * Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    nfs?: outputs.DaemonSetV1SpecTemplateSpecVolumeNfs;
    /**
     * The specification of a persistent volume.
     */
    persistentVolumeClaim?: outputs.DaemonSetV1SpecTemplateSpecVolumePersistentVolumeClaim;
    /**
     * Represents a PhotonController persistent disk attached and mounted on kubelets host machine
     */
    photonPersistentDisk?: outputs.DaemonSetV1SpecTemplateSpecVolumePhotonPersistentDisk;
    /**
     * Projected represents a single volume that projects several volume sources into the same directory. More info: https://kubernetes.io/docs/concepts/storage/volumes/#projected
     */
    projecteds?: outputs.DaemonSetV1SpecTemplateSpecVolumeProjected[];
    /**
     * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
     */
    quobyte?: outputs.DaemonSetV1SpecTemplateSpecVolumeQuobyte;
    /**
     * Represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
     */
    rbd?: outputs.DaemonSetV1SpecTemplateSpecVolumeRbd;
    /**
     * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    secret?: outputs.DaemonSetV1SpecTemplateSpecVolumeSecret;
    /**
     * Represents a vSphere volume attached and mounted on kubelets host machine
     */
    vsphereVolume?: outputs.DaemonSetV1SpecTemplateSpecVolumeVsphereVolume;
}

export interface DaemonSetV1SpecTemplateSpecVolumeAwsElasticBlockStore {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    fsType?: string;
    /**
     * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
     */
    partition?: number;
    /**
     * Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    readOnly?: boolean;
    /**
     * Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    volumeId: string;
}

export interface DaemonSetV1SpecTemplateSpecVolumeAzureDisk {
    /**
     * Host Caching mode: None, Read Only, Read Write.
     */
    cachingMode: string;
    /**
     * The URI the data disk in the blob storage
     */
    dataDiskUri: string;
    /**
     * The Name of the data disk in the blob storage
     */
    diskName: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * The type for the data disk. Expected values: Shared, Dedicated, Managed. Defaults to Shared
     */
    kind: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
}

export interface DaemonSetV1SpecTemplateSpecVolumeAzureFile {
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * The name of secret that contains Azure Storage Account Name and Key
     */
    secretName: string;
    /**
     * The namespace of the secret that contains Azure Storage Account Name and Key. For Kubernetes up to 1.18.x the default is the same as the Pod. For Kubernetes 1.19.x and later the default is "default" namespace.
     */
    secretNamespace?: string;
    /**
     * Share Name
     */
    shareName: string;
}

export interface DaemonSetV1SpecTemplateSpecVolumeCephFs {
    /**
     * Monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    monitors: string[];
    /**
     * Used as the mounted root, rather than the full Ceph tree, default is /
     */
    path?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to `false` (read/write). More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    readOnly?: boolean;
    /**
     * The path to key ring for User, default is `/etc/ceph/user.secret`. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    secretFile?: string;
    /**
     * Reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    secretRef?: outputs.DaemonSetV1SpecTemplateSpecVolumeCephFsSecretRef;
    /**
     * User is the rados user name, default is admin. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    user?: string;
}

export interface DaemonSetV1SpecTemplateSpecVolumeCephFsSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface DaemonSetV1SpecTemplateSpecVolumeCinder {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    fsType?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write). More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    readOnly?: boolean;
    /**
     * Volume ID used to identify the volume in Cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    volumeId: string;
}

export interface DaemonSetV1SpecTemplateSpecVolumeConfigMap {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.DaemonSetV1SpecTemplateSpecVolumeConfigMapItem[];
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Optional: Specify whether the ConfigMap or its keys must be defined.
     */
    optional?: boolean;
}

export interface DaemonSetV1SpecTemplateSpecVolumeConfigMapItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface DaemonSetV1SpecTemplateSpecVolumeCsi {
    /**
     * the name of the volume driver to use. More info: https://kubernetes.io/docs/concepts/storage/volumes/#csi
     */
    driver: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * A reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls.
     */
    nodePublishSecretRef?: outputs.DaemonSetV1SpecTemplateSpecVolumeCsiNodePublishSecretRef;
    /**
     * Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
     */
    readOnly?: boolean;
    /**
     * Attributes of the volume to publish.
     */
    volumeAttributes?: {[key: string]: string};
}

export interface DaemonSetV1SpecTemplateSpecVolumeCsiNodePublishSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
}

export interface DaemonSetV1SpecTemplateSpecVolumeDownwardApi {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.DaemonSetV1SpecTemplateSpecVolumeDownwardApiItem[];
}

export interface DaemonSetV1SpecTemplateSpecVolumeDownwardApiItem {
    /**
     * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
     */
    fieldRef: outputs.DaemonSetV1SpecTemplateSpecVolumeDownwardApiItemFieldRef;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
     */
    path: string;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
     */
    resourceFieldRef?: outputs.DaemonSetV1SpecTemplateSpecVolumeDownwardApiItemResourceFieldRef;
}

export interface DaemonSetV1SpecTemplateSpecVolumeDownwardApiItemFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface DaemonSetV1SpecTemplateSpecVolumeDownwardApiItemResourceFieldRef {
    containerName: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface DaemonSetV1SpecTemplateSpecVolumeEmptyDir {
    /**
     * What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be one of ["" "Memory" "HugePages" "HugePages-2Mi" "HugePages-1Gi"]. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
     */
    medium?: string;
    /**
     * Total amount of local storage required for this EmptyDir volume.
     */
    sizeLimit?: string;
}

export interface DaemonSetV1SpecTemplateSpecVolumeEphemeral {
    /**
     * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC.
     */
    volumeClaimTemplate: outputs.DaemonSetV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplate;
}

export interface DaemonSetV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplate {
    /**
     * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
     */
    metadata?: outputs.DaemonSetV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadata;
    /**
     * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
     */
    spec: outputs.DaemonSetV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpec;
}

export interface DaemonSetV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadata {
    /**
     * An unstructured key value map stored with the persistent volume claim that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the persistent volume claim. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
}

export interface DaemonSetV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpec {
    /**
     * A set of the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
     */
    accessModes: string[];
    /**
     * A list of the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources: outputs.DaemonSetV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResources;
    /**
     * A label query over volumes to consider for binding.
     */
    selector?: outputs.DaemonSetV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelector;
    /**
     * Name of the storage class requested by the claim
     */
    storageClassName: string;
    /**
     * Defines what type of volume is required by the claim.
     */
    volumeMode: string;
    /**
     * The binding reference to the PersistentVolume backing this claim.
     */
    volumeName: string;
}

export interface DaemonSetV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResources {
    /**
     * Map describing the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits?: {[key: string]: string};
    /**
     * Map describing the minimum amount of compute resources required. If this is omitted for a container, it defaults to `limits` if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    requests?: {[key: string]: string};
}

export interface DaemonSetV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.DaemonSetV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface DaemonSetV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface DaemonSetV1SpecTemplateSpecVolumeFc {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * FC target lun number
     */
    lun: number;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * FC target worldwide names (WWNs)
     */
    targetWwNs: string[];
}

export interface DaemonSetV1SpecTemplateSpecVolumeFlexVolume {
    /**
     * Driver is the name of the driver to use for this volume.
     */
    driver: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
     */
    fsType?: string;
    /**
     * Extra command options if any.
     */
    options?: {[key: string]: string};
    /**
     * Whether to force the ReadOnly setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * Reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
     */
    secretRef?: outputs.DaemonSetV1SpecTemplateSpecVolumeFlexVolumeSecretRef;
}

export interface DaemonSetV1SpecTemplateSpecVolumeFlexVolumeSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface DaemonSetV1SpecTemplateSpecVolumeFlocker {
    /**
     * Name of the dataset stored as metadata > name on the dataset for Flocker should be considered as deprecated
     */
    datasetName?: string;
    /**
     * UUID of the dataset. This is unique identifier of a Flocker dataset
     */
    datasetUuid?: string;
}

export interface DaemonSetV1SpecTemplateSpecVolumeGcePersistentDisk {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    fsType?: string;
    /**
     * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    partition?: number;
    /**
     * Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    pdName: string;
    /**
     * Whether to force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    readOnly?: boolean;
}

export interface DaemonSetV1SpecTemplateSpecVolumeGitRepo {
    /**
     * Target directory name. Must not contain or start with '..'. If '.' is supplied, the volume directory will be the git repository. Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
     */
    directory?: string;
    /**
     * Repository URL
     */
    repository?: string;
    /**
     * Commit hash for the specified revision.
     */
    revision?: string;
}

export interface DaemonSetV1SpecTemplateSpecVolumeGlusterfs {
    /**
     * The endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    endpointsName: string;
    /**
     * The Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    path: string;
    /**
     * Whether to force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    readOnly?: boolean;
}

export interface DaemonSetV1SpecTemplateSpecVolumeHostPath {
    /**
     * Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     */
    path?: string;
    /**
     * Type for HostPath volume. Allowed values are "" (default), DirectoryOrCreate, Directory, FileOrCreate, File, Socket, CharDevice and BlockDevice
     */
    type?: string;
}

export interface DaemonSetV1SpecTemplateSpecVolumeIscsi {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
     */
    fsType?: string;
    /**
     * Target iSCSI Qualified Name.
     */
    iqn: string;
    /**
     * iSCSI interface name that uses an iSCSI transport. Defaults to 'default' (tcp).
     */
    iscsiInterface?: string;
    /**
     * iSCSI target lun number.
     */
    lun?: number;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false.
     */
    readOnly?: boolean;
    /**
     * iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
     */
    targetPortal: string;
}

export interface DaemonSetV1SpecTemplateSpecVolumeLocal {
    /**
     * Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
     */
    path?: string;
}

export interface DaemonSetV1SpecTemplateSpecVolumeNfs {
    /**
     * Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    path: string;
    /**
     * Whether to force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    readOnly?: boolean;
    /**
     * Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    server: string;
}

export interface DaemonSetV1SpecTemplateSpecVolumePersistentVolumeClaim {
    /**
     * ClaimName is the name of a PersistentVolumeClaim in the same
     */
    claimName?: string;
    /**
     * Will force the ReadOnly setting in VolumeMounts.
     */
    readOnly?: boolean;
}

export interface DaemonSetV1SpecTemplateSpecVolumePhotonPersistentDisk {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * ID that identifies Photon Controller persistent disk
     */
    pdId: string;
}

export interface DaemonSetV1SpecTemplateSpecVolumeProjected {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * Source of the volume to project in the directory.
     */
    sources: outputs.DaemonSetV1SpecTemplateSpecVolumeProjectedSource[];
}

export interface DaemonSetV1SpecTemplateSpecVolumeProjectedSource {
    /**
     * ConfigMap represents a configMap that should populate this volume
     */
    configMaps?: outputs.DaemonSetV1SpecTemplateSpecVolumeProjectedSourceConfigMap[];
    /**
     * DownwardAPI represents downward API about the pod that should populate this volume
     */
    downwardApi?: outputs.DaemonSetV1SpecTemplateSpecVolumeProjectedSourceDownwardApi;
    /**
     * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    secrets?: outputs.DaemonSetV1SpecTemplateSpecVolumeProjectedSourceSecret[];
    /**
     * A projected service account token volume
     */
    serviceAccountToken?: outputs.DaemonSetV1SpecTemplateSpecVolumeProjectedSourceServiceAccountToken;
}

export interface DaemonSetV1SpecTemplateSpecVolumeProjectedSourceConfigMap {
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.DaemonSetV1SpecTemplateSpecVolumeProjectedSourceConfigMapItem[];
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Optional: Specify whether the ConfigMap or it's keys must be defined.
     */
    optional?: boolean;
}

export interface DaemonSetV1SpecTemplateSpecVolumeProjectedSourceConfigMapItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface DaemonSetV1SpecTemplateSpecVolumeProjectedSourceDownwardApi {
    /**
     * Represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
     */
    items?: outputs.DaemonSetV1SpecTemplateSpecVolumeProjectedSourceDownwardApiItem[];
}

export interface DaemonSetV1SpecTemplateSpecVolumeProjectedSourceDownwardApiItem {
    /**
     * Selects a field of the pod: only annotations, labels, name and namespace are supported.
     */
    fieldRef?: outputs.DaemonSetV1SpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRef;
    /**
     * Mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
     */
    path: string;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
     */
    resourceFieldRef?: outputs.DaemonSetV1SpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRef;
}

export interface DaemonSetV1SpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to 'v1'.
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface DaemonSetV1SpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRef {
    containerName: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface DaemonSetV1SpecTemplateSpecVolumeProjectedSourceSecret {
    /**
     * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.DaemonSetV1SpecTemplateSpecVolumeProjectedSourceSecretItem[];
    /**
     * Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    name?: string;
    /**
     * Optional: Specify whether the Secret or it's keys must be defined.
     */
    optional?: boolean;
}

export interface DaemonSetV1SpecTemplateSpecVolumeProjectedSourceSecretItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface DaemonSetV1SpecTemplateSpecVolumeProjectedSourceServiceAccountToken {
    /**
     * Audience is the intended audience of the token
     */
    audience?: string;
    /**
     * ExpirationSeconds is the expected duration of validity of the service account token. It defaults to 1 hour and must be at least 10 minutes (600 seconds).
     */
    expirationSeconds?: number;
    /**
     * Path specifies a relative path to the mount point of the projected volume.
     */
    path: string;
}

export interface DaemonSetV1SpecTemplateSpecVolumeQuobyte {
    /**
     * Group to map volume access to Default is no group
     */
    group?: string;
    /**
     * Whether to force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
     */
    registry: string;
    /**
     * User to map volume access to Defaults to serivceaccount user
     */
    user?: string;
    /**
     * Volume is a string that references an already created Quobyte volume by name.
     */
    volume: string;
}

export interface DaemonSetV1SpecTemplateSpecVolumeRbd {
    /**
     * A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    cephMonitors: string[];
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
     */
    fsType?: string;
    /**
     * Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    keyring: string;
    /**
     * The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    radosUser?: string;
    /**
     * The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    rbdImage: string;
    /**
     * The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it.
     */
    rbdPool?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    readOnly?: boolean;
    /**
     * Name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    secretRef?: outputs.DaemonSetV1SpecTemplateSpecVolumeRbdSecretRef;
}

export interface DaemonSetV1SpecTemplateSpecVolumeRbdSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface DaemonSetV1SpecTemplateSpecVolumeSecret {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.DaemonSetV1SpecTemplateSpecVolumeSecretItem[];
    /**
     * Optional: Specify whether the Secret or its keys must be defined.
     */
    optional?: boolean;
    /**
     * Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    secretName?: string;
}

export interface DaemonSetV1SpecTemplateSpecVolumeSecretItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface DaemonSetV1SpecTemplateSpecVolumeVsphereVolume {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * Path that identifies vSphere volume vmdk
     */
    volumePath: string;
}

export interface DaemonSetV1Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DaemonsetMetadata {
    /**
     * An unstructured key value map stored with the daemonset that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the daemonset. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the daemonset, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the daemonset must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this daemonset that can be used by clients to determine when daemonset has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this daemonset. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface DaemonsetSpec {
    /**
     * Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
     */
    minReadySeconds?: number;
    /**
     * The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.
     */
    revisionHistoryLimit?: number;
    /**
     * A label query over pods that are managed by the DaemonSet.
     */
    selector?: outputs.DaemonsetSpecSelector;
    /**
     * The deployment strategy used to replace existing pods with new ones.
     */
    strategy?: outputs.DaemonsetSpecStrategy;
    /**
     * An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template's node selector (or on every node if no node selector is specified). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/#pod-template
     */
    template: outputs.DaemonsetSpecTemplate;
}

export interface DaemonsetSpecSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.DaemonsetSpecSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface DaemonsetSpecSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface DaemonsetSpecStrategy {
    /**
     * Rolling update config params. Present only if type = 'RollingUpdate'.
     */
    rollingUpdate?: outputs.DaemonsetSpecStrategyRollingUpdate;
    /**
     * Type of deployment. Can be 'RollingUpdate' or 'OnDelete'. Default is RollingUpdate.
     */
    type?: string;
}

export interface DaemonsetSpecStrategyRollingUpdate {
    /**
     * The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0. Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.
     */
    maxUnavailable?: string;
}

export interface DaemonsetSpecTemplate {
    /**
     * Standard daemon set's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
     */
    metadata: outputs.DaemonsetSpecTemplateMetadata;
    /**
     * Spec of the pods owned by the daemon set
     */
    spec?: outputs.DaemonsetSpecTemplateSpec;
}

export interface DaemonsetSpecTemplateMetadata {
    /**
     * An unstructured key value map stored with the daemon set that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the daemon set. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the daemon set, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the daemon set must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this daemon set that can be used by clients to determine when daemon set has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this daemon set. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface DaemonsetSpecTemplateSpec {
    /**
     * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
     */
    activeDeadlineSeconds?: number;
    /**
     * Optional pod scheduling constraints.
     */
    affinity?: outputs.DaemonsetSpecTemplateSpecAffinity;
    /**
     * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
     */
    automountServiceAccountToken?: boolean;
    /**
     * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/
     */
    containers?: outputs.DaemonsetSpecTemplateSpecContainer[];
    /**
     * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy. Optional: Defaults to empty
     */
    dnsConfig?: outputs.DaemonsetSpecTemplateSpecDnsConfig;
    /**
     * Set DNS policy for containers within the pod. Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'. Defaults to 'ClusterFirst'. More info: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy
     */
    dnsPolicy?: string;
    /**
     * Enables generating environment variables for service discovery. Defaults to true.
     */
    enableServiceLinks?: boolean;
    /**
     * List of hosts and IPs that will be injected into the pod's hosts file if specified. Optional: Defaults to empty.
     */
    hostAliases?: outputs.DaemonsetSpecTemplateSpecHostAlias[];
    /**
     * Use the host's ipc namespace. Optional: Defaults to false.
     */
    hostIpc?: boolean;
    /**
     * Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified.
     */
    hostNetwork?: boolean;
    /**
     * Use the host's pid namespace.
     */
    hostPid?: boolean;
    /**
     * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
     */
    hostname: string;
    /**
     * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
     */
    imagePullSecrets?: outputs.DaemonsetSpecTemplateSpecImagePullSecret[];
    /**
     * List of init containers belonging to the pod. Init containers always run to completion and each must complete successfully before the next is started. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
     */
    initContainers?: outputs.DaemonsetSpecTemplateSpecInitContainer[];
    /**
     * NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
     */
    nodeName: string;
    /**
     * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.
     */
    nodeSelector?: {[key: string]: string};
    /**
     * Specifies the OS of the containers in the pod.
     */
    os?: outputs.DaemonsetSpecTemplateSpecOs;
    /**
     * If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
     */
    priorityClassName?: string;
    /**
     * If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md
     */
    readinessGates?: outputs.DaemonsetSpecTemplateSpecReadinessGate[];
    /**
     * Restart policy for all containers within the pod. One of Always, OnFailure, Never. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy.
     */
    restartPolicy?: string;
    /**
     * RuntimeClassName is a feature for selecting the container runtime configuration. The container runtime configuration is used to run a Pod's containers. More info: https://kubernetes.io/docs/concepts/containers/runtime-class
     */
    runtimeClassName?: string;
    /**
     * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
     */
    schedulerName: string;
    /**
     * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty
     */
    securityContext?: outputs.DaemonsetSpecTemplateSpecSecurityContext;
    /**
     * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: http://releases.k8s.io/HEAD/docs/design/service_accounts.md.
     */
    serviceAccountName: string;
    /**
     * Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Defaults to false.
     */
    shareProcessNamespace?: boolean;
    /**
     * If specified, the fully qualified Pod hostname will be "...svc.". If not specified, the pod will not have a domainname at all..
     */
    subdomain?: string;
    /**
     * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process.
     */
    terminationGracePeriodSeconds?: number;
    /**
     * If specified, the pod's toleration. Optional: Defaults to empty
     */
    tolerations?: outputs.DaemonsetSpecTemplateSpecToleration[];
    /**
     * describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints.
     */
    topologySpreadConstraints?: outputs.DaemonsetSpecTemplateSpecTopologySpreadConstraint[];
    /**
     * List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
     */
    volumes?: outputs.DaemonsetSpecTemplateSpecVolume[];
}

export interface DaemonsetSpecTemplateSpecAffinity {
    /**
     * Node affinity scheduling rules for the pod.
     */
    nodeAffinity?: outputs.DaemonsetSpecTemplateSpecAffinityNodeAffinity;
    /**
     * Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)
     */
    podAffinity?: outputs.DaemonsetSpecTemplateSpecAffinityPodAffinity;
    /**
     * Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)
     */
    podAntiAffinity?: outputs.DaemonsetSpecTemplateSpecAffinityPodAntiAffinity;
}

export interface DaemonsetSpecTemplateSpecAffinityNodeAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: outputs.DaemonsetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a node label update), the system may or may not try to eventually evict the pod from its node.
     */
    requiredDuringSchedulingIgnoredDuringExecution?: outputs.DaemonsetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
}

export interface DaemonsetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A node selector term, associated with the corresponding weight.
     */
    preference: outputs.DaemonsetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
    /**
     * weight is in the range 1-100
     */
    weight: number;
}

export interface DaemonsetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
    /**
     * List of node selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.DaemonsetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression[];
    /**
     * A list of node selector requirements by node's fields. The requirements are ANDed.
     */
    matchFields?: outputs.DaemonsetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchField[];
}

export interface DaemonsetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
     */
    operator?: string;
    /**
     * Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface DaemonsetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchField {
    /**
     * The label key that the selector applies to.
     */
    key: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists`, `DoesNotExist`, `Gt`, and `Lt`.
     */
    operator: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface DaemonsetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * List of node selector terms. The terms are ORed.
     */
    nodeSelectorTerms?: outputs.DaemonsetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm[];
}

export interface DaemonsetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm {
    /**
     * List of node selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.DaemonsetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression[];
    /**
     * A list of node selector requirements by node's fields. The requirements are ANDed.
     */
    matchFields?: outputs.DaemonsetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchField[];
}

export interface DaemonsetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
     */
    operator?: string;
    /**
     * Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface DaemonsetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchField {
    /**
     * The label key that the selector applies to.
     */
    key: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists`, `DoesNotExist`, `Gt`, and `Lt`.
     */
    operator: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface DaemonsetSpecTemplateSpecAffinityPodAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: outputs.DaemonsetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.
     */
    requiredDuringSchedulingIgnoredDuringExecutions?: outputs.DaemonsetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
}

export interface DaemonsetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A pod affinity term, associated with the corresponding weight
     */
    podAffinityTerm: outputs.DaemonsetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
    /**
     * weight associated with matching the corresponding podAffinityTerm, in the range 1-100
     */
    weight: number;
}

export interface DaemonsetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.DaemonsetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface DaemonsetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.DaemonsetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface DaemonsetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface DaemonsetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.DaemonsetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface DaemonsetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.DaemonsetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface DaemonsetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface DaemonsetSpecTemplateSpecAffinityPodAntiAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: outputs.DaemonsetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.
     */
    requiredDuringSchedulingIgnoredDuringExecutions?: outputs.DaemonsetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
}

export interface DaemonsetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A pod affinity term, associated with the corresponding weight
     */
    podAffinityTerm: outputs.DaemonsetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
    /**
     * weight associated with matching the corresponding podAffinityTerm, in the range 1-100
     */
    weight: number;
}

export interface DaemonsetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.DaemonsetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface DaemonsetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.DaemonsetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface DaemonsetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface DaemonsetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.DaemonsetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface DaemonsetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.DaemonsetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface DaemonsetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface DaemonsetSpecTemplateSpecContainer {
    /**
     * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    args?: string[];
    /**
     * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    commands?: string[];
    /**
     * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
     */
    envFroms?: outputs.DaemonsetSpecTemplateSpecContainerEnvFrom[];
    /**
     * List of environment variables to set in the container. Cannot be updated.
     */
    envs?: outputs.DaemonsetSpecTemplateSpecContainerEnv[];
    /**
     * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/
     */
    image?: string;
    /**
     * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images
     */
    imagePullPolicy: string;
    /**
     * Actions that the management system should take in response to container lifecycle events
     */
    lifecycle?: outputs.DaemonsetSpecTemplateSpecContainerLifecycle;
    /**
     * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    livenessProbe?: outputs.DaemonsetSpecTemplateSpecContainerLivenessProbe;
    /**
     * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
     */
    name: string;
    /**
     * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
     */
    ports?: outputs.DaemonsetSpecTemplateSpecContainerPort[];
    /**
     * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    readinessProbe?: outputs.DaemonsetSpecTemplateSpecContainerReadinessProbe;
    /**
     * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources?: outputs.DaemonsetSpecTemplateSpecContainerResources;
    /**
     * Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
     */
    securityContext?: outputs.DaemonsetSpecTemplateSpecContainerSecurityContext;
    /**
     * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     */
    startupProbe?: outputs.DaemonsetSpecTemplateSpecContainerStartupProbe;
    /**
     * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.
     */
    stdin?: boolean;
    /**
     * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.
     */
    stdinOnce?: boolean;
    /**
     * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.
     */
    terminationMessagePath?: string;
    /**
     * Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
     */
    terminationMessagePolicy: string;
    /**
     * Whether this container should allocate a TTY for itself
     */
    tty?: boolean;
    /**
     * Pod volumes to mount into the container's filesystem. Cannot be updated.
     */
    volumeMounts?: outputs.DaemonsetSpecTemplateSpecContainerVolumeMount[];
    /**
     * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
     */
    workingDir?: string;
}

export interface DaemonsetSpecTemplateSpecContainerEnv {
    /**
     * Name of the environment variable. Must be a C_IDENTIFIER
     */
    name: string;
    /**
     * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
     */
    value?: string;
    /**
     * Source for the environment variable's value
     */
    valueFrom?: outputs.DaemonsetSpecTemplateSpecContainerEnvValueFrom;
}

export interface DaemonsetSpecTemplateSpecContainerEnvFrom {
    /**
     * The ConfigMap to select from
     */
    configMapRef?: outputs.DaemonsetSpecTemplateSpecContainerEnvFromConfigMapRef;
    /**
     * An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
     */
    prefix?: string;
    /**
     * The Secret to select from
     */
    secretRef?: outputs.DaemonsetSpecTemplateSpecContainerEnvFromSecretRef;
}

export interface DaemonsetSpecTemplateSpecContainerEnvFromConfigMapRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the ConfigMap must be defined
     */
    optional?: boolean;
}

export interface DaemonsetSpecTemplateSpecContainerEnvFromSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the Secret must be defined
     */
    optional?: boolean;
}

export interface DaemonsetSpecTemplateSpecContainerEnvValueFrom {
    /**
     * Selects a key of a ConfigMap.
     */
    configMapKeyRef?: outputs.DaemonsetSpecTemplateSpecContainerEnvValueFromConfigMapKeyRef;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.
     */
    fieldRef?: outputs.DaemonsetSpecTemplateSpecContainerEnvValueFromFieldRef;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
     */
    resourceFieldRef?: outputs.DaemonsetSpecTemplateSpecContainerEnvValueFromResourceFieldRef;
    /**
     * Selects a key of a secret in the pod's namespace.
     */
    secretKeyRef?: outputs.DaemonsetSpecTemplateSpecContainerEnvValueFromSecretKeyRef;
}

export interface DaemonsetSpecTemplateSpecContainerEnvValueFromConfigMapKeyRef {
    /**
     * The key to select.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the ConfigMap or its key must be defined.
     */
    optional?: boolean;
}

export interface DaemonsetSpecTemplateSpecContainerEnvValueFromFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface DaemonsetSpecTemplateSpecContainerEnvValueFromResourceFieldRef {
    containerName?: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface DaemonsetSpecTemplateSpecContainerEnvValueFromSecretKeyRef {
    /**
     * The key of the secret to select from. Must be a valid secret key.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the Secret or its key must be defined.
     */
    optional?: boolean;
}

export interface DaemonsetSpecTemplateSpecContainerLifecycle {
    /**
     * post_start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    postStarts?: outputs.DaemonsetSpecTemplateSpecContainerLifecyclePostStart[];
    /**
     * pre_stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    preStops?: outputs.DaemonsetSpecTemplateSpecContainerLifecyclePreStop[];
}

export interface DaemonsetSpecTemplateSpecContainerLifecyclePostStart {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.DaemonsetSpecTemplateSpecContainerLifecyclePostStartExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.DaemonsetSpecTemplateSpecContainerLifecyclePostStartHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.DaemonsetSpecTemplateSpecContainerLifecyclePostStartTcpSocket[];
}

export interface DaemonsetSpecTemplateSpecContainerLifecyclePostStartExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface DaemonsetSpecTemplateSpecContainerLifecyclePostStartHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.DaemonsetSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface DaemonsetSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface DaemonsetSpecTemplateSpecContainerLifecyclePostStartTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface DaemonsetSpecTemplateSpecContainerLifecyclePreStop {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.DaemonsetSpecTemplateSpecContainerLifecyclePreStopExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.DaemonsetSpecTemplateSpecContainerLifecyclePreStopHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.DaemonsetSpecTemplateSpecContainerLifecyclePreStopTcpSocket[];
}

export interface DaemonsetSpecTemplateSpecContainerLifecyclePreStopExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface DaemonsetSpecTemplateSpecContainerLifecyclePreStopHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.DaemonsetSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface DaemonsetSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface DaemonsetSpecTemplateSpecContainerLifecyclePreStopTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface DaemonsetSpecTemplateSpecContainerLivenessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.DaemonsetSpecTemplateSpecContainerLivenessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.DaemonsetSpecTemplateSpecContainerLivenessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.DaemonsetSpecTemplateSpecContainerLivenessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.DaemonsetSpecTemplateSpecContainerLivenessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface DaemonsetSpecTemplateSpecContainerLivenessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface DaemonsetSpecTemplateSpecContainerLivenessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface DaemonsetSpecTemplateSpecContainerLivenessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.DaemonsetSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface DaemonsetSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface DaemonsetSpecTemplateSpecContainerLivenessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface DaemonsetSpecTemplateSpecContainerPort {
    /**
     * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
     */
    containerPort: number;
    /**
     * What host IP to bind the external port to.
     */
    hostIp?: string;
    /**
     * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
     */
    hostPort?: number;
    /**
     * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
     */
    name?: string;
    /**
     * Protocol for port. Must be UDP or TCP. Defaults to "TCP".
     */
    protocol?: string;
}

export interface DaemonsetSpecTemplateSpecContainerReadinessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.DaemonsetSpecTemplateSpecContainerReadinessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.DaemonsetSpecTemplateSpecContainerReadinessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.DaemonsetSpecTemplateSpecContainerReadinessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.DaemonsetSpecTemplateSpecContainerReadinessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface DaemonsetSpecTemplateSpecContainerReadinessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface DaemonsetSpecTemplateSpecContainerReadinessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface DaemonsetSpecTemplateSpecContainerReadinessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.DaemonsetSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface DaemonsetSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface DaemonsetSpecTemplateSpecContainerReadinessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface DaemonsetSpecTemplateSpecContainerResources {
    /**
     * Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits: {[key: string]: string};
    /**
     * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
     */
    requests: {[key: string]: string};
}

export interface DaemonsetSpecTemplateSpecContainerSecurityContext {
    /**
     * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
     */
    allowPrivilegeEscalation?: boolean;
    /**
     * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
     */
    capabilities?: outputs.DaemonsetSpecTemplateSpecContainerSecurityContextCapabilities;
    /**
     * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
     */
    privileged?: boolean;
    /**
     * Whether this container has a read-only root filesystem. Default is false.
     */
    readOnlyRootFilesystem?: boolean;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsGroup?: string;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: boolean;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUser?: string;
    /**
     * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    seLinuxOptions?: outputs.DaemonsetSpecTemplateSpecContainerSecurityContextSeLinuxOptions;
    /**
     * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     */
    seccompProfile?: outputs.DaemonsetSpecTemplateSpecContainerSecurityContextSeccompProfile;
}

export interface DaemonsetSpecTemplateSpecContainerSecurityContextCapabilities {
    /**
     * Added capabilities
     */
    adds?: string[];
    /**
     * Removed capabilities
     */
    drops?: string[];
}

export interface DaemonsetSpecTemplateSpecContainerSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: string;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: string;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: string;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: string;
}

export interface DaemonsetSpecTemplateSpecContainerSecurityContextSeccompProfile {
    /**
     * Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
     */
    localhostProfile?: string;
    /**
     * Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
     */
    type?: string;
}

export interface DaemonsetSpecTemplateSpecContainerStartupProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.DaemonsetSpecTemplateSpecContainerStartupProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.DaemonsetSpecTemplateSpecContainerStartupProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.DaemonsetSpecTemplateSpecContainerStartupProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.DaemonsetSpecTemplateSpecContainerStartupProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface DaemonsetSpecTemplateSpecContainerStartupProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface DaemonsetSpecTemplateSpecContainerStartupProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface DaemonsetSpecTemplateSpecContainerStartupProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.DaemonsetSpecTemplateSpecContainerStartupProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface DaemonsetSpecTemplateSpecContainerStartupProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface DaemonsetSpecTemplateSpecContainerStartupProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface DaemonsetSpecTemplateSpecContainerVolumeMount {
    /**
     * Path within the container at which the volume should be mounted. Must not contain ':'.
     */
    mountPath: string;
    /**
     * Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional.
     */
    mountPropagation?: string;
    /**
     * This must match the Name of a Volume.
     */
    name: string;
    /**
     * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
     */
    subPath?: string;
}

export interface DaemonsetSpecTemplateSpecDnsConfig {
    /**
     * A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
     */
    nameservers?: string[];
    /**
     * A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
     */
    options?: outputs.DaemonsetSpecTemplateSpecDnsConfigOption[];
    /**
     * A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
     */
    searches?: string[];
}

export interface DaemonsetSpecTemplateSpecDnsConfigOption {
    /**
     * Name of the option.
     */
    name: string;
    /**
     * Value of the option. Optional: Defaults to empty.
     */
    value?: string;
}

export interface DaemonsetSpecTemplateSpecHostAlias {
    /**
     * Hostnames for the IP address.
     */
    hostnames: string[];
    /**
     * IP address of the host file entry.
     */
    ip: string;
}

export interface DaemonsetSpecTemplateSpecImagePullSecret {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
}

export interface DaemonsetSpecTemplateSpecInitContainer {
    /**
     * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    args?: string[];
    /**
     * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    commands?: string[];
    /**
     * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
     */
    envFroms?: outputs.DaemonsetSpecTemplateSpecInitContainerEnvFrom[];
    /**
     * List of environment variables to set in the container. Cannot be updated.
     */
    envs?: outputs.DaemonsetSpecTemplateSpecInitContainerEnv[];
    /**
     * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/
     */
    image?: string;
    /**
     * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images
     */
    imagePullPolicy: string;
    /**
     * Actions that the management system should take in response to container lifecycle events
     */
    lifecycle?: outputs.DaemonsetSpecTemplateSpecInitContainerLifecycle;
    /**
     * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    livenessProbe?: outputs.DaemonsetSpecTemplateSpecInitContainerLivenessProbe;
    /**
     * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
     */
    name: string;
    /**
     * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
     */
    ports?: outputs.DaemonsetSpecTemplateSpecInitContainerPort[];
    /**
     * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    readinessProbe?: outputs.DaemonsetSpecTemplateSpecInitContainerReadinessProbe;
    /**
     * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources?: outputs.DaemonsetSpecTemplateSpecInitContainerResources;
    /**
     * Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
     */
    securityContext?: outputs.DaemonsetSpecTemplateSpecInitContainerSecurityContext;
    /**
     * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     */
    startupProbe?: outputs.DaemonsetSpecTemplateSpecInitContainerStartupProbe;
    /**
     * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.
     */
    stdin?: boolean;
    /**
     * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.
     */
    stdinOnce?: boolean;
    /**
     * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.
     */
    terminationMessagePath?: string;
    /**
     * Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
     */
    terminationMessagePolicy: string;
    /**
     * Whether this container should allocate a TTY for itself
     */
    tty?: boolean;
    /**
     * Pod volumes to mount into the container's filesystem. Cannot be updated.
     */
    volumeMounts?: outputs.DaemonsetSpecTemplateSpecInitContainerVolumeMount[];
    /**
     * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
     */
    workingDir?: string;
}

export interface DaemonsetSpecTemplateSpecInitContainerEnv {
    /**
     * Name of the environment variable. Must be a C_IDENTIFIER
     */
    name: string;
    /**
     * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
     */
    value?: string;
    /**
     * Source for the environment variable's value
     */
    valueFrom?: outputs.DaemonsetSpecTemplateSpecInitContainerEnvValueFrom;
}

export interface DaemonsetSpecTemplateSpecInitContainerEnvFrom {
    /**
     * The ConfigMap to select from
     */
    configMapRef?: outputs.DaemonsetSpecTemplateSpecInitContainerEnvFromConfigMapRef;
    /**
     * An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
     */
    prefix?: string;
    /**
     * The Secret to select from
     */
    secretRef?: outputs.DaemonsetSpecTemplateSpecInitContainerEnvFromSecretRef;
}

export interface DaemonsetSpecTemplateSpecInitContainerEnvFromConfigMapRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the ConfigMap must be defined
     */
    optional?: boolean;
}

export interface DaemonsetSpecTemplateSpecInitContainerEnvFromSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the Secret must be defined
     */
    optional?: boolean;
}

export interface DaemonsetSpecTemplateSpecInitContainerEnvValueFrom {
    /**
     * Selects a key of a ConfigMap.
     */
    configMapKeyRef?: outputs.DaemonsetSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRef;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.
     */
    fieldRef?: outputs.DaemonsetSpecTemplateSpecInitContainerEnvValueFromFieldRef;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
     */
    resourceFieldRef?: outputs.DaemonsetSpecTemplateSpecInitContainerEnvValueFromResourceFieldRef;
    /**
     * Selects a key of a secret in the pod's namespace.
     */
    secretKeyRef?: outputs.DaemonsetSpecTemplateSpecInitContainerEnvValueFromSecretKeyRef;
}

export interface DaemonsetSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRef {
    /**
     * The key to select.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the ConfigMap or its key must be defined.
     */
    optional?: boolean;
}

export interface DaemonsetSpecTemplateSpecInitContainerEnvValueFromFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface DaemonsetSpecTemplateSpecInitContainerEnvValueFromResourceFieldRef {
    containerName?: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface DaemonsetSpecTemplateSpecInitContainerEnvValueFromSecretKeyRef {
    /**
     * The key of the secret to select from. Must be a valid secret key.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the Secret or its key must be defined.
     */
    optional?: boolean;
}

export interface DaemonsetSpecTemplateSpecInitContainerLifecycle {
    /**
     * post_start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    postStarts?: outputs.DaemonsetSpecTemplateSpecInitContainerLifecyclePostStart[];
    /**
     * pre_stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    preStops?: outputs.DaemonsetSpecTemplateSpecInitContainerLifecyclePreStop[];
}

export interface DaemonsetSpecTemplateSpecInitContainerLifecyclePostStart {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.DaemonsetSpecTemplateSpecInitContainerLifecyclePostStartExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.DaemonsetSpecTemplateSpecInitContainerLifecyclePostStartHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.DaemonsetSpecTemplateSpecInitContainerLifecyclePostStartTcpSocket[];
}

export interface DaemonsetSpecTemplateSpecInitContainerLifecyclePostStartExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface DaemonsetSpecTemplateSpecInitContainerLifecyclePostStartHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.DaemonsetSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface DaemonsetSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface DaemonsetSpecTemplateSpecInitContainerLifecyclePostStartTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface DaemonsetSpecTemplateSpecInitContainerLifecyclePreStop {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.DaemonsetSpecTemplateSpecInitContainerLifecyclePreStopExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.DaemonsetSpecTemplateSpecInitContainerLifecyclePreStopHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.DaemonsetSpecTemplateSpecInitContainerLifecyclePreStopTcpSocket[];
}

export interface DaemonsetSpecTemplateSpecInitContainerLifecyclePreStopExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface DaemonsetSpecTemplateSpecInitContainerLifecyclePreStopHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.DaemonsetSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface DaemonsetSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface DaemonsetSpecTemplateSpecInitContainerLifecyclePreStopTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface DaemonsetSpecTemplateSpecInitContainerLivenessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.DaemonsetSpecTemplateSpecInitContainerLivenessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.DaemonsetSpecTemplateSpecInitContainerLivenessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.DaemonsetSpecTemplateSpecInitContainerLivenessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.DaemonsetSpecTemplateSpecInitContainerLivenessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface DaemonsetSpecTemplateSpecInitContainerLivenessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface DaemonsetSpecTemplateSpecInitContainerLivenessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface DaemonsetSpecTemplateSpecInitContainerLivenessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.DaemonsetSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface DaemonsetSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface DaemonsetSpecTemplateSpecInitContainerLivenessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface DaemonsetSpecTemplateSpecInitContainerPort {
    /**
     * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
     */
    containerPort: number;
    /**
     * What host IP to bind the external port to.
     */
    hostIp?: string;
    /**
     * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
     */
    hostPort?: number;
    /**
     * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
     */
    name?: string;
    /**
     * Protocol for port. Must be UDP or TCP. Defaults to "TCP".
     */
    protocol?: string;
}

export interface DaemonsetSpecTemplateSpecInitContainerReadinessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.DaemonsetSpecTemplateSpecInitContainerReadinessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.DaemonsetSpecTemplateSpecInitContainerReadinessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.DaemonsetSpecTemplateSpecInitContainerReadinessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.DaemonsetSpecTemplateSpecInitContainerReadinessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface DaemonsetSpecTemplateSpecInitContainerReadinessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface DaemonsetSpecTemplateSpecInitContainerReadinessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface DaemonsetSpecTemplateSpecInitContainerReadinessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.DaemonsetSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface DaemonsetSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface DaemonsetSpecTemplateSpecInitContainerReadinessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface DaemonsetSpecTemplateSpecInitContainerResources {
    /**
     * Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits: {[key: string]: string};
    /**
     * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
     */
    requests: {[key: string]: string};
}

export interface DaemonsetSpecTemplateSpecInitContainerSecurityContext {
    /**
     * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
     */
    allowPrivilegeEscalation?: boolean;
    /**
     * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
     */
    capabilities?: outputs.DaemonsetSpecTemplateSpecInitContainerSecurityContextCapabilities;
    /**
     * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
     */
    privileged?: boolean;
    /**
     * Whether this container has a read-only root filesystem. Default is false.
     */
    readOnlyRootFilesystem?: boolean;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsGroup?: string;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: boolean;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUser?: string;
    /**
     * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    seLinuxOptions?: outputs.DaemonsetSpecTemplateSpecInitContainerSecurityContextSeLinuxOptions;
    /**
     * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     */
    seccompProfile?: outputs.DaemonsetSpecTemplateSpecInitContainerSecurityContextSeccompProfile;
}

export interface DaemonsetSpecTemplateSpecInitContainerSecurityContextCapabilities {
    /**
     * Added capabilities
     */
    adds?: string[];
    /**
     * Removed capabilities
     */
    drops?: string[];
}

export interface DaemonsetSpecTemplateSpecInitContainerSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: string;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: string;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: string;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: string;
}

export interface DaemonsetSpecTemplateSpecInitContainerSecurityContextSeccompProfile {
    /**
     * Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
     */
    localhostProfile?: string;
    /**
     * Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
     */
    type?: string;
}

export interface DaemonsetSpecTemplateSpecInitContainerStartupProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.DaemonsetSpecTemplateSpecInitContainerStartupProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.DaemonsetSpecTemplateSpecInitContainerStartupProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.DaemonsetSpecTemplateSpecInitContainerStartupProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.DaemonsetSpecTemplateSpecInitContainerStartupProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface DaemonsetSpecTemplateSpecInitContainerStartupProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface DaemonsetSpecTemplateSpecInitContainerStartupProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface DaemonsetSpecTemplateSpecInitContainerStartupProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.DaemonsetSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface DaemonsetSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface DaemonsetSpecTemplateSpecInitContainerStartupProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface DaemonsetSpecTemplateSpecInitContainerVolumeMount {
    /**
     * Path within the container at which the volume should be mounted. Must not contain ':'.
     */
    mountPath: string;
    /**
     * Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional.
     */
    mountPropagation?: string;
    /**
     * This must match the Name of a Volume.
     */
    name: string;
    /**
     * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
     */
    subPath?: string;
}

export interface DaemonsetSpecTemplateSpecOs {
    /**
     * Name is the name of the operating system. The currently supported values are linux and windows.
     */
    name: string;
}

export interface DaemonsetSpecTemplateSpecReadinessGate {
    /**
     * refers to a condition in the pod's condition list with matching type.
     */
    conditionType: string;
}

export interface DaemonsetSpecTemplateSpecSecurityContext {
    /**
     * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- If unset, the Kubelet will not modify the ownership and permissions of any volume.
     */
    fsGroup?: string;
    /**
     * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir.
     */
    fsGroupChangePolicy?: string;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    runAsGroup?: string;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: boolean;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    runAsUser?: string;
    /**
     * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    seLinuxOptions?: outputs.DaemonsetSpecTemplateSpecSecurityContextSeLinuxOptions;
    /**
     * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     */
    seccompProfile?: outputs.DaemonsetSpecTemplateSpecSecurityContextSeccompProfile;
    /**
     * A list of groups applied to the first process run in each container, in addition to the container's primary GID. If unspecified, no groups will be added to any container.
     */
    supplementalGroups?: number[];
    /**
     * holds a list of namespaced sysctls used for the pod.
     */
    sysctls?: outputs.DaemonsetSpecTemplateSpecSecurityContextSysctl[];
    /**
     * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
     */
    windowsOptions?: outputs.DaemonsetSpecTemplateSpecSecurityContextWindowsOptions;
}

export interface DaemonsetSpecTemplateSpecSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: string;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: string;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: string;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: string;
}

export interface DaemonsetSpecTemplateSpecSecurityContextSeccompProfile {
    /**
     * Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
     */
    localhostProfile?: string;
    /**
     * Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
     */
    type?: string;
}

export interface DaemonsetSpecTemplateSpecSecurityContextSysctl {
    /**
     * Name of a property to set.
     */
    name: string;
    /**
     * Value of a property to set.
     */
    value: string;
}

export interface DaemonsetSpecTemplateSpecSecurityContextWindowsOptions {
    /**
     * GMSACredentialSpec is where the GMSA admission webhook inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field
     */
    gmsaCredentialSpec?: string;
    /**
     * GMSACredentialSpecName is the name of the GMSA credential spec to use.
     */
    gmsaCredentialSpecName?: string;
    /**
     * HostProcess determines if a container should be run as a 'Host Process' container. Default value is false.
     */
    hostProcess?: boolean;
    /**
     * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUsername?: string;
}

export interface DaemonsetSpecTemplateSpecToleration {
    /**
     * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
     */
    effect?: string;
    /**
     * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
     */
    key?: string;
    /**
     * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
     */
    operator?: string;
    /**
     * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
     */
    tolerationSeconds?: string;
    /**
     * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
     */
    value?: string;
}

export interface DaemonsetSpecTemplateSpecTopologySpreadConstraint {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.DaemonsetSpecTemplateSpecTopologySpreadConstraintLabelSelector[];
    /**
     * is a set of pod label keys to select the pods over which spreading will be calculated.
     */
    matchLabelKeys?: string[];
    /**
     * describes the degree to which pods may be unevenly distributed.
     */
    maxSkew?: number;
    /**
     * indicates a minimum number of eligible domains.
     */
    minDomains?: number;
    /**
     * indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew.
     */
    nodeAffinityPolicy?: string;
    /**
     * indicates how we will treat node taints when calculating pod topology spread skew.
     */
    nodeTaintsPolicy?: string;
    /**
     * the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology.
     */
    topologyKey?: string;
    /**
     * indicates how to deal with a pod if it doesn't satisfy the spread constraint.
     */
    whenUnsatisfiable?: string;
}

export interface DaemonsetSpecTemplateSpecTopologySpreadConstraintLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.DaemonsetSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface DaemonsetSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface DaemonsetSpecTemplateSpecVolume {
    /**
     * Represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    awsElasticBlockStore?: outputs.DaemonsetSpecTemplateSpecVolumeAwsElasticBlockStore;
    /**
     * Represents an Azure Data Disk mount on the host and bind mount to the pod.
     */
    azureDisk?: outputs.DaemonsetSpecTemplateSpecVolumeAzureDisk;
    /**
     * Represents an Azure File Service mount on the host and bind mount to the pod.
     */
    azureFile?: outputs.DaemonsetSpecTemplateSpecVolumeAzureFile;
    /**
     * Represents a Ceph FS mount on the host that shares a pod's lifetime
     */
    cephFs?: outputs.DaemonsetSpecTemplateSpecVolumeCephFs;
    /**
     * Represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    cinder?: outputs.DaemonsetSpecTemplateSpecVolumeCinder;
    /**
     * ConfigMap represents a configMap that should populate this volume
     */
    configMap?: outputs.DaemonsetSpecTemplateSpecVolumeConfigMap;
    /**
     * Represents a CSI Volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
     */
    csi?: outputs.DaemonsetSpecTemplateSpecVolumeCsi;
    /**
     * DownwardAPI represents downward API about the pod that should populate this volume
     */
    downwardApi?: outputs.DaemonsetSpecTemplateSpecVolumeDownwardApi;
    /**
     * EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
     */
    emptyDir?: outputs.DaemonsetSpecTemplateSpecVolumeEmptyDir;
    /**
     * Represents an ephemeral volume that is handled by a normal storage driver. More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes
     */
    ephemeral?: outputs.DaemonsetSpecTemplateSpecVolumeEphemeral;
    /**
     * Represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
     */
    fc?: outputs.DaemonsetSpecTemplateSpecVolumeFc;
    /**
     * Represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.
     */
    flexVolume?: outputs.DaemonsetSpecTemplateSpecVolumeFlexVolume;
    /**
     * Represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
     */
    flocker?: outputs.DaemonsetSpecTemplateSpecVolumeFlocker;
    /**
     * Represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    gcePersistentDisk?: outputs.DaemonsetSpecTemplateSpecVolumeGcePersistentDisk;
    /**
     * GitRepo represents a git repository at a particular revision.
     */
    gitRepo?: outputs.DaemonsetSpecTemplateSpecVolumeGitRepo;
    /**
     * Represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
     */
    glusterfs?: outputs.DaemonsetSpecTemplateSpecVolumeGlusterfs;
    /**
     * Represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     */
    hostPath?: outputs.DaemonsetSpecTemplateSpecVolumeHostPath;
    /**
     * Represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
     */
    iscsi?: outputs.DaemonsetSpecTemplateSpecVolumeIscsi;
    /**
     * Represents a mounted local storage device such as a disk, partition or directory. Local volumes can only be used as a statically created PersistentVolume. Dynamic provisioning is not supported yet. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
     */
    local?: outputs.DaemonsetSpecTemplateSpecVolumeLocal;
    /**
     * Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    nfs?: outputs.DaemonsetSpecTemplateSpecVolumeNfs;
    /**
     * The specification of a persistent volume.
     */
    persistentVolumeClaim?: outputs.DaemonsetSpecTemplateSpecVolumePersistentVolumeClaim;
    /**
     * Represents a PhotonController persistent disk attached and mounted on kubelets host machine
     */
    photonPersistentDisk?: outputs.DaemonsetSpecTemplateSpecVolumePhotonPersistentDisk;
    /**
     * Projected represents a single volume that projects several volume sources into the same directory. More info: https://kubernetes.io/docs/concepts/storage/volumes/#projected
     */
    projecteds?: outputs.DaemonsetSpecTemplateSpecVolumeProjected[];
    /**
     * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
     */
    quobyte?: outputs.DaemonsetSpecTemplateSpecVolumeQuobyte;
    /**
     * Represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
     */
    rbd?: outputs.DaemonsetSpecTemplateSpecVolumeRbd;
    /**
     * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    secret?: outputs.DaemonsetSpecTemplateSpecVolumeSecret;
    /**
     * Represents a vSphere volume attached and mounted on kubelets host machine
     */
    vsphereVolume?: outputs.DaemonsetSpecTemplateSpecVolumeVsphereVolume;
}

export interface DaemonsetSpecTemplateSpecVolumeAwsElasticBlockStore {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    fsType?: string;
    /**
     * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
     */
    partition?: number;
    /**
     * Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    readOnly?: boolean;
    /**
     * Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    volumeId: string;
}

export interface DaemonsetSpecTemplateSpecVolumeAzureDisk {
    /**
     * Host Caching mode: None, Read Only, Read Write.
     */
    cachingMode: string;
    /**
     * The URI the data disk in the blob storage
     */
    dataDiskUri: string;
    /**
     * The Name of the data disk in the blob storage
     */
    diskName: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * The type for the data disk. Expected values: Shared, Dedicated, Managed. Defaults to Shared
     */
    kind: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
}

export interface DaemonsetSpecTemplateSpecVolumeAzureFile {
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * The name of secret that contains Azure Storage Account Name and Key
     */
    secretName: string;
    /**
     * The namespace of the secret that contains Azure Storage Account Name and Key. For Kubernetes up to 1.18.x the default is the same as the Pod. For Kubernetes 1.19.x and later the default is "default" namespace.
     */
    secretNamespace?: string;
    /**
     * Share Name
     */
    shareName: string;
}

export interface DaemonsetSpecTemplateSpecVolumeCephFs {
    /**
     * Monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    monitors: string[];
    /**
     * Used as the mounted root, rather than the full Ceph tree, default is /
     */
    path?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to `false` (read/write). More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    readOnly?: boolean;
    /**
     * The path to key ring for User, default is `/etc/ceph/user.secret`. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    secretFile?: string;
    /**
     * Reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    secretRef?: outputs.DaemonsetSpecTemplateSpecVolumeCephFsSecretRef;
    /**
     * User is the rados user name, default is admin. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    user?: string;
}

export interface DaemonsetSpecTemplateSpecVolumeCephFsSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface DaemonsetSpecTemplateSpecVolumeCinder {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    fsType?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write). More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    readOnly?: boolean;
    /**
     * Volume ID used to identify the volume in Cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    volumeId: string;
}

export interface DaemonsetSpecTemplateSpecVolumeConfigMap {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.DaemonsetSpecTemplateSpecVolumeConfigMapItem[];
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Optional: Specify whether the ConfigMap or its keys must be defined.
     */
    optional?: boolean;
}

export interface DaemonsetSpecTemplateSpecVolumeConfigMapItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface DaemonsetSpecTemplateSpecVolumeCsi {
    /**
     * the name of the volume driver to use. More info: https://kubernetes.io/docs/concepts/storage/volumes/#csi
     */
    driver: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * A reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls.
     */
    nodePublishSecretRef?: outputs.DaemonsetSpecTemplateSpecVolumeCsiNodePublishSecretRef;
    /**
     * Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
     */
    readOnly?: boolean;
    /**
     * Attributes of the volume to publish.
     */
    volumeAttributes?: {[key: string]: string};
}

export interface DaemonsetSpecTemplateSpecVolumeCsiNodePublishSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
}

export interface DaemonsetSpecTemplateSpecVolumeDownwardApi {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.DaemonsetSpecTemplateSpecVolumeDownwardApiItem[];
}

export interface DaemonsetSpecTemplateSpecVolumeDownwardApiItem {
    /**
     * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
     */
    fieldRef: outputs.DaemonsetSpecTemplateSpecVolumeDownwardApiItemFieldRef;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
     */
    path: string;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
     */
    resourceFieldRef?: outputs.DaemonsetSpecTemplateSpecVolumeDownwardApiItemResourceFieldRef;
}

export interface DaemonsetSpecTemplateSpecVolumeDownwardApiItemFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface DaemonsetSpecTemplateSpecVolumeDownwardApiItemResourceFieldRef {
    containerName: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface DaemonsetSpecTemplateSpecVolumeEmptyDir {
    /**
     * What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be one of ["" "Memory" "HugePages" "HugePages-2Mi" "HugePages-1Gi"]. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
     */
    medium?: string;
    /**
     * Total amount of local storage required for this EmptyDir volume.
     */
    sizeLimit?: string;
}

export interface DaemonsetSpecTemplateSpecVolumeEphemeral {
    /**
     * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC.
     */
    volumeClaimTemplate: outputs.DaemonsetSpecTemplateSpecVolumeEphemeralVolumeClaimTemplate;
}

export interface DaemonsetSpecTemplateSpecVolumeEphemeralVolumeClaimTemplate {
    /**
     * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
     */
    metadata?: outputs.DaemonsetSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadata;
    /**
     * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
     */
    spec: outputs.DaemonsetSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpec;
}

export interface DaemonsetSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadata {
    /**
     * An unstructured key value map stored with the persistent volume claim that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the persistent volume claim. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
}

export interface DaemonsetSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpec {
    /**
     * A set of the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
     */
    accessModes: string[];
    /**
     * A list of the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources: outputs.DaemonsetSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResources;
    /**
     * A label query over volumes to consider for binding.
     */
    selector?: outputs.DaemonsetSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelector;
    /**
     * Name of the storage class requested by the claim
     */
    storageClassName: string;
    /**
     * Defines what type of volume is required by the claim.
     */
    volumeMode: string;
    /**
     * The binding reference to the PersistentVolume backing this claim.
     */
    volumeName: string;
}

export interface DaemonsetSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResources {
    /**
     * Map describing the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits?: {[key: string]: string};
    /**
     * Map describing the minimum amount of compute resources required. If this is omitted for a container, it defaults to `limits` if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    requests?: {[key: string]: string};
}

export interface DaemonsetSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.DaemonsetSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface DaemonsetSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface DaemonsetSpecTemplateSpecVolumeFc {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * FC target lun number
     */
    lun: number;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * FC target worldwide names (WWNs)
     */
    targetWwNs: string[];
}

export interface DaemonsetSpecTemplateSpecVolumeFlexVolume {
    /**
     * Driver is the name of the driver to use for this volume.
     */
    driver: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
     */
    fsType?: string;
    /**
     * Extra command options if any.
     */
    options?: {[key: string]: string};
    /**
     * Whether to force the ReadOnly setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * Reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
     */
    secretRef?: outputs.DaemonsetSpecTemplateSpecVolumeFlexVolumeSecretRef;
}

export interface DaemonsetSpecTemplateSpecVolumeFlexVolumeSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface DaemonsetSpecTemplateSpecVolumeFlocker {
    /**
     * Name of the dataset stored as metadata > name on the dataset for Flocker should be considered as deprecated
     */
    datasetName?: string;
    /**
     * UUID of the dataset. This is unique identifier of a Flocker dataset
     */
    datasetUuid?: string;
}

export interface DaemonsetSpecTemplateSpecVolumeGcePersistentDisk {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    fsType?: string;
    /**
     * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    partition?: number;
    /**
     * Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    pdName: string;
    /**
     * Whether to force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    readOnly?: boolean;
}

export interface DaemonsetSpecTemplateSpecVolumeGitRepo {
    /**
     * Target directory name. Must not contain or start with '..'. If '.' is supplied, the volume directory will be the git repository. Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
     */
    directory?: string;
    /**
     * Repository URL
     */
    repository?: string;
    /**
     * Commit hash for the specified revision.
     */
    revision?: string;
}

export interface DaemonsetSpecTemplateSpecVolumeGlusterfs {
    /**
     * The endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    endpointsName: string;
    /**
     * The Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    path: string;
    /**
     * Whether to force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    readOnly?: boolean;
}

export interface DaemonsetSpecTemplateSpecVolumeHostPath {
    /**
     * Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     */
    path?: string;
    /**
     * Type for HostPath volume. Allowed values are "" (default), DirectoryOrCreate, Directory, FileOrCreate, File, Socket, CharDevice and BlockDevice
     */
    type?: string;
}

export interface DaemonsetSpecTemplateSpecVolumeIscsi {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
     */
    fsType?: string;
    /**
     * Target iSCSI Qualified Name.
     */
    iqn: string;
    /**
     * iSCSI interface name that uses an iSCSI transport. Defaults to 'default' (tcp).
     */
    iscsiInterface?: string;
    /**
     * iSCSI target lun number.
     */
    lun?: number;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false.
     */
    readOnly?: boolean;
    /**
     * iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
     */
    targetPortal: string;
}

export interface DaemonsetSpecTemplateSpecVolumeLocal {
    /**
     * Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
     */
    path?: string;
}

export interface DaemonsetSpecTemplateSpecVolumeNfs {
    /**
     * Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    path: string;
    /**
     * Whether to force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    readOnly?: boolean;
    /**
     * Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    server: string;
}

export interface DaemonsetSpecTemplateSpecVolumePersistentVolumeClaim {
    /**
     * ClaimName is the name of a PersistentVolumeClaim in the same
     */
    claimName?: string;
    /**
     * Will force the ReadOnly setting in VolumeMounts.
     */
    readOnly?: boolean;
}

export interface DaemonsetSpecTemplateSpecVolumePhotonPersistentDisk {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * ID that identifies Photon Controller persistent disk
     */
    pdId: string;
}

export interface DaemonsetSpecTemplateSpecVolumeProjected {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * Source of the volume to project in the directory.
     */
    sources: outputs.DaemonsetSpecTemplateSpecVolumeProjectedSource[];
}

export interface DaemonsetSpecTemplateSpecVolumeProjectedSource {
    /**
     * ConfigMap represents a configMap that should populate this volume
     */
    configMaps?: outputs.DaemonsetSpecTemplateSpecVolumeProjectedSourceConfigMap[];
    /**
     * DownwardAPI represents downward API about the pod that should populate this volume
     */
    downwardApi?: outputs.DaemonsetSpecTemplateSpecVolumeProjectedSourceDownwardApi;
    /**
     * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    secrets?: outputs.DaemonsetSpecTemplateSpecVolumeProjectedSourceSecret[];
    /**
     * A projected service account token volume
     */
    serviceAccountToken?: outputs.DaemonsetSpecTemplateSpecVolumeProjectedSourceServiceAccountToken;
}

export interface DaemonsetSpecTemplateSpecVolumeProjectedSourceConfigMap {
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.DaemonsetSpecTemplateSpecVolumeProjectedSourceConfigMapItem[];
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Optional: Specify whether the ConfigMap or it's keys must be defined.
     */
    optional?: boolean;
}

export interface DaemonsetSpecTemplateSpecVolumeProjectedSourceConfigMapItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface DaemonsetSpecTemplateSpecVolumeProjectedSourceDownwardApi {
    /**
     * Represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
     */
    items?: outputs.DaemonsetSpecTemplateSpecVolumeProjectedSourceDownwardApiItem[];
}

export interface DaemonsetSpecTemplateSpecVolumeProjectedSourceDownwardApiItem {
    /**
     * Selects a field of the pod: only annotations, labels, name and namespace are supported.
     */
    fieldRef?: outputs.DaemonsetSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRef;
    /**
     * Mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
     */
    path: string;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
     */
    resourceFieldRef?: outputs.DaemonsetSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRef;
}

export interface DaemonsetSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to 'v1'.
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface DaemonsetSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRef {
    containerName: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface DaemonsetSpecTemplateSpecVolumeProjectedSourceSecret {
    /**
     * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.DaemonsetSpecTemplateSpecVolumeProjectedSourceSecretItem[];
    /**
     * Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    name?: string;
    /**
     * Optional: Specify whether the Secret or it's keys must be defined.
     */
    optional?: boolean;
}

export interface DaemonsetSpecTemplateSpecVolumeProjectedSourceSecretItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface DaemonsetSpecTemplateSpecVolumeProjectedSourceServiceAccountToken {
    /**
     * Audience is the intended audience of the token
     */
    audience?: string;
    /**
     * ExpirationSeconds is the expected duration of validity of the service account token. It defaults to 1 hour and must be at least 10 minutes (600 seconds).
     */
    expirationSeconds?: number;
    /**
     * Path specifies a relative path to the mount point of the projected volume.
     */
    path: string;
}

export interface DaemonsetSpecTemplateSpecVolumeQuobyte {
    /**
     * Group to map volume access to Default is no group
     */
    group?: string;
    /**
     * Whether to force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
     */
    registry: string;
    /**
     * User to map volume access to Defaults to serivceaccount user
     */
    user?: string;
    /**
     * Volume is a string that references an already created Quobyte volume by name.
     */
    volume: string;
}

export interface DaemonsetSpecTemplateSpecVolumeRbd {
    /**
     * A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    cephMonitors: string[];
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
     */
    fsType?: string;
    /**
     * Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    keyring: string;
    /**
     * The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    radosUser?: string;
    /**
     * The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    rbdImage: string;
    /**
     * The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it.
     */
    rbdPool?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    readOnly?: boolean;
    /**
     * Name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    secretRef?: outputs.DaemonsetSpecTemplateSpecVolumeRbdSecretRef;
}

export interface DaemonsetSpecTemplateSpecVolumeRbdSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface DaemonsetSpecTemplateSpecVolumeSecret {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.DaemonsetSpecTemplateSpecVolumeSecretItem[];
    /**
     * Optional: Specify whether the Secret or its keys must be defined.
     */
    optional?: boolean;
    /**
     * Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    secretName?: string;
}

export interface DaemonsetSpecTemplateSpecVolumeSecretItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface DaemonsetSpecTemplateSpecVolumeVsphereVolume {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * Path that identifies vSphere volume vmdk
     */
    volumePath: string;
}

export interface DaemonsetTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DefaultServiceAccountImagePullSecret {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
}

export interface DefaultServiceAccountMetadata {
    /**
     * An unstructured key value map stored with the service account that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the service account. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the service account, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Namespace defines the space within which name of the service account must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this service account that can be used by clients to determine when service account has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this service account. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface DefaultServiceAccountSecret {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
}

export interface DefaultServiceAccountTimeouts {
    create?: string;
}

export interface DefaultServiceAccountV1ImagePullSecret {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
}

export interface DefaultServiceAccountV1Metadata {
    /**
     * An unstructured key value map stored with the service account that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the service account. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the service account, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Namespace defines the space within which name of the service account must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this service account that can be used by clients to determine when service account has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this service account. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface DefaultServiceAccountV1Secret {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
}

export interface DefaultServiceAccountV1Timeouts {
    create?: string;
}

export interface DeploymentMetadata {
    /**
     * An unstructured key value map stored with the deployment that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the deployment. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the deployment, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the deployment must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this deployment that can be used by clients to determine when deployment has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this deployment. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface DeploymentSpec {
    /**
     * Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
     */
    minReadySeconds?: number;
    /**
     * Indicates that the deployment is paused.
     */
    paused?: boolean;
    /**
     * The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.
     */
    progressDeadlineSeconds?: number;
    /**
     * Number of desired pods. This is a string to be able to distinguish between explicit zero and not specified.
     */
    replicas: string;
    /**
     * The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.
     */
    revisionHistoryLimit?: number;
    /**
     * A label query over pods that should match the Replicas count.
     */
    selector?: outputs.DeploymentSpecSelector;
    /**
     * The deployment strategy to use to replace existing pods with new ones.
     */
    strategy?: outputs.DeploymentSpecStrategy;
    /**
     * Template describes the pods that will be created.
     */
    template: outputs.DeploymentSpecTemplate;
}

export interface DeploymentSpecSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.DeploymentSpecSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface DeploymentSpecSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface DeploymentSpecStrategy {
    /**
     * Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.
     */
    rollingUpdate?: outputs.DeploymentSpecStrategyRollingUpdate;
    /**
     * Type of deployment. Can be 'Recreate' or 'RollingUpdate'. Default is RollingUpdate.
     */
    type?: string;
}

export interface DeploymentSpecStrategyRollingUpdate {
    /**
     * The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new RC can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new RC can be scaled up further, ensuring that total number of pods running at any time during the update is atmost 130% of desired pods.
     */
    maxSurge?: string;
    /**
     * The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old RC can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old RC can be scaled down further, followed by scaling up the new RC, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.
     */
    maxUnavailable?: string;
}

export interface DeploymentSpecTemplate {
    /**
     * Standard pod's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
     */
    metadata: outputs.DeploymentSpecTemplateMetadata;
    /**
     * Spec defines the specification of the desired behavior of the deployment. More info: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.9/#deployment-v1-apps
     */
    spec: outputs.DeploymentSpecTemplateSpec;
}

export interface DeploymentSpecTemplateMetadata {
    /**
     * An unstructured key value map stored with the pod that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the pod. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the pod, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the pod must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this pod that can be used by clients to determine when pod has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface DeploymentSpecTemplateSpec {
    /**
     * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
     */
    activeDeadlineSeconds?: number;
    /**
     * Optional pod scheduling constraints.
     */
    affinity?: outputs.DeploymentSpecTemplateSpecAffinity;
    /**
     * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
     */
    automountServiceAccountToken?: boolean;
    /**
     * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/
     */
    containers?: outputs.DeploymentSpecTemplateSpecContainer[];
    /**
     * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy. Optional: Defaults to empty
     */
    dnsConfig?: outputs.DeploymentSpecTemplateSpecDnsConfig;
    /**
     * Set DNS policy for containers within the pod. Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'. Defaults to 'ClusterFirst'. More info: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy
     */
    dnsPolicy?: string;
    /**
     * Enables generating environment variables for service discovery. Defaults to true.
     */
    enableServiceLinks?: boolean;
    /**
     * List of hosts and IPs that will be injected into the pod's hosts file if specified. Optional: Defaults to empty.
     */
    hostAliases?: outputs.DeploymentSpecTemplateSpecHostAlias[];
    /**
     * Use the host's ipc namespace. Optional: Defaults to false.
     */
    hostIpc?: boolean;
    /**
     * Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified.
     */
    hostNetwork?: boolean;
    /**
     * Use the host's pid namespace.
     */
    hostPid?: boolean;
    /**
     * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
     */
    hostname: string;
    /**
     * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
     */
    imagePullSecrets?: outputs.DeploymentSpecTemplateSpecImagePullSecret[];
    /**
     * List of init containers belonging to the pod. Init containers always run to completion and each must complete successfully before the next is started. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
     */
    initContainers?: outputs.DeploymentSpecTemplateSpecInitContainer[];
    /**
     * NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
     */
    nodeName: string;
    /**
     * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.
     */
    nodeSelector?: {[key: string]: string};
    /**
     * Specifies the OS of the containers in the pod.
     */
    os?: outputs.DeploymentSpecTemplateSpecOs;
    /**
     * If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
     */
    priorityClassName?: string;
    /**
     * If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md
     */
    readinessGates?: outputs.DeploymentSpecTemplateSpecReadinessGate[];
    /**
     * Restart policy for all containers within the pod. One of Always, OnFailure, Never. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy.
     */
    restartPolicy?: string;
    /**
     * RuntimeClassName is a feature for selecting the container runtime configuration. The container runtime configuration is used to run a Pod's containers. More info: https://kubernetes.io/docs/concepts/containers/runtime-class
     */
    runtimeClassName?: string;
    /**
     * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
     */
    schedulerName: string;
    /**
     * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty
     */
    securityContext?: outputs.DeploymentSpecTemplateSpecSecurityContext;
    /**
     * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: http://releases.k8s.io/HEAD/docs/design/service_accounts.md.
     */
    serviceAccountName: string;
    /**
     * Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Defaults to false.
     */
    shareProcessNamespace?: boolean;
    /**
     * If specified, the fully qualified Pod hostname will be "...svc.". If not specified, the pod will not have a domainname at all..
     */
    subdomain?: string;
    /**
     * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process.
     */
    terminationGracePeriodSeconds?: number;
    /**
     * If specified, the pod's toleration. Optional: Defaults to empty
     */
    tolerations?: outputs.DeploymentSpecTemplateSpecToleration[];
    /**
     * describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints.
     */
    topologySpreadConstraints?: outputs.DeploymentSpecTemplateSpecTopologySpreadConstraint[];
    /**
     * List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
     */
    volumes?: outputs.DeploymentSpecTemplateSpecVolume[];
}

export interface DeploymentSpecTemplateSpecAffinity {
    /**
     * Node affinity scheduling rules for the pod.
     */
    nodeAffinity?: outputs.DeploymentSpecTemplateSpecAffinityNodeAffinity;
    /**
     * Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)
     */
    podAffinity?: outputs.DeploymentSpecTemplateSpecAffinityPodAffinity;
    /**
     * Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)
     */
    podAntiAffinity?: outputs.DeploymentSpecTemplateSpecAffinityPodAntiAffinity;
}

export interface DeploymentSpecTemplateSpecAffinityNodeAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: outputs.DeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a node label update), the system may or may not try to eventually evict the pod from its node.
     */
    requiredDuringSchedulingIgnoredDuringExecution?: outputs.DeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
}

export interface DeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A node selector term, associated with the corresponding weight.
     */
    preference: outputs.DeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
    /**
     * weight is in the range 1-100
     */
    weight: number;
}

export interface DeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
    /**
     * List of node selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.DeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression[];
    /**
     * A list of node selector requirements by node's fields. The requirements are ANDed.
     */
    matchFields?: outputs.DeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchField[];
}

export interface DeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
     */
    operator?: string;
    /**
     * Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface DeploymentSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchField {
    /**
     * The label key that the selector applies to.
     */
    key: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists`, `DoesNotExist`, `Gt`, and `Lt`.
     */
    operator: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface DeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * List of node selector terms. The terms are ORed.
     */
    nodeSelectorTerms?: outputs.DeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm[];
}

export interface DeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm {
    /**
     * List of node selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.DeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression[];
    /**
     * A list of node selector requirements by node's fields. The requirements are ANDed.
     */
    matchFields?: outputs.DeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchField[];
}

export interface DeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
     */
    operator?: string;
    /**
     * Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface DeploymentSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchField {
    /**
     * The label key that the selector applies to.
     */
    key: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists`, `DoesNotExist`, `Gt`, and `Lt`.
     */
    operator: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface DeploymentSpecTemplateSpecAffinityPodAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: outputs.DeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.
     */
    requiredDuringSchedulingIgnoredDuringExecutions?: outputs.DeploymentSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
}

export interface DeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A pod affinity term, associated with the corresponding weight
     */
    podAffinityTerm: outputs.DeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
    /**
     * weight associated with matching the corresponding podAffinityTerm, in the range 1-100
     */
    weight: number;
}

export interface DeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.DeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface DeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.DeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface DeploymentSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface DeploymentSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.DeploymentSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface DeploymentSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.DeploymentSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface DeploymentSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface DeploymentSpecTemplateSpecAffinityPodAntiAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: outputs.DeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.
     */
    requiredDuringSchedulingIgnoredDuringExecutions?: outputs.DeploymentSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
}

export interface DeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A pod affinity term, associated with the corresponding weight
     */
    podAffinityTerm: outputs.DeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
    /**
     * weight associated with matching the corresponding podAffinityTerm, in the range 1-100
     */
    weight: number;
}

export interface DeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.DeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface DeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.DeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface DeploymentSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface DeploymentSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.DeploymentSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface DeploymentSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.DeploymentSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface DeploymentSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface DeploymentSpecTemplateSpecContainer {
    /**
     * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    args?: string[];
    /**
     * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    commands?: string[];
    /**
     * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
     */
    envFroms?: outputs.DeploymentSpecTemplateSpecContainerEnvFrom[];
    /**
     * List of environment variables to set in the container. Cannot be updated.
     */
    envs?: outputs.DeploymentSpecTemplateSpecContainerEnv[];
    /**
     * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/
     */
    image?: string;
    /**
     * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images
     */
    imagePullPolicy: string;
    /**
     * Actions that the management system should take in response to container lifecycle events
     */
    lifecycle?: outputs.DeploymentSpecTemplateSpecContainerLifecycle;
    /**
     * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    livenessProbe?: outputs.DeploymentSpecTemplateSpecContainerLivenessProbe;
    /**
     * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
     */
    name: string;
    /**
     * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
     */
    ports?: outputs.DeploymentSpecTemplateSpecContainerPort[];
    /**
     * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    readinessProbe?: outputs.DeploymentSpecTemplateSpecContainerReadinessProbe;
    /**
     * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources?: outputs.DeploymentSpecTemplateSpecContainerResources;
    /**
     * Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
     */
    securityContext?: outputs.DeploymentSpecTemplateSpecContainerSecurityContext;
    /**
     * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     */
    startupProbe?: outputs.DeploymentSpecTemplateSpecContainerStartupProbe;
    /**
     * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.
     */
    stdin?: boolean;
    /**
     * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.
     */
    stdinOnce?: boolean;
    /**
     * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.
     */
    terminationMessagePath?: string;
    /**
     * Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
     */
    terminationMessagePolicy: string;
    /**
     * Whether this container should allocate a TTY for itself
     */
    tty?: boolean;
    /**
     * Pod volumes to mount into the container's filesystem. Cannot be updated.
     */
    volumeMounts?: outputs.DeploymentSpecTemplateSpecContainerVolumeMount[];
    /**
     * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
     */
    workingDir?: string;
}

export interface DeploymentSpecTemplateSpecContainerEnv {
    /**
     * Name of the environment variable. Must be a C_IDENTIFIER
     */
    name: string;
    /**
     * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
     */
    value?: string;
    /**
     * Source for the environment variable's value
     */
    valueFrom?: outputs.DeploymentSpecTemplateSpecContainerEnvValueFrom;
}

export interface DeploymentSpecTemplateSpecContainerEnvFrom {
    /**
     * The ConfigMap to select from
     */
    configMapRef?: outputs.DeploymentSpecTemplateSpecContainerEnvFromConfigMapRef;
    /**
     * An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
     */
    prefix?: string;
    /**
     * The Secret to select from
     */
    secretRef?: outputs.DeploymentSpecTemplateSpecContainerEnvFromSecretRef;
}

export interface DeploymentSpecTemplateSpecContainerEnvFromConfigMapRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the ConfigMap must be defined
     */
    optional?: boolean;
}

export interface DeploymentSpecTemplateSpecContainerEnvFromSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the Secret must be defined
     */
    optional?: boolean;
}

export interface DeploymentSpecTemplateSpecContainerEnvValueFrom {
    /**
     * Selects a key of a ConfigMap.
     */
    configMapKeyRef?: outputs.DeploymentSpecTemplateSpecContainerEnvValueFromConfigMapKeyRef;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.
     */
    fieldRef?: outputs.DeploymentSpecTemplateSpecContainerEnvValueFromFieldRef;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
     */
    resourceFieldRef?: outputs.DeploymentSpecTemplateSpecContainerEnvValueFromResourceFieldRef;
    /**
     * Selects a key of a secret in the pod's namespace.
     */
    secretKeyRef?: outputs.DeploymentSpecTemplateSpecContainerEnvValueFromSecretKeyRef;
}

export interface DeploymentSpecTemplateSpecContainerEnvValueFromConfigMapKeyRef {
    /**
     * The key to select.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the ConfigMap or its key must be defined.
     */
    optional?: boolean;
}

export interface DeploymentSpecTemplateSpecContainerEnvValueFromFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface DeploymentSpecTemplateSpecContainerEnvValueFromResourceFieldRef {
    containerName?: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface DeploymentSpecTemplateSpecContainerEnvValueFromSecretKeyRef {
    /**
     * The key of the secret to select from. Must be a valid secret key.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the Secret or its key must be defined.
     */
    optional?: boolean;
}

export interface DeploymentSpecTemplateSpecContainerLifecycle {
    /**
     * post_start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    postStarts?: outputs.DeploymentSpecTemplateSpecContainerLifecyclePostStart[];
    /**
     * pre_stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    preStops?: outputs.DeploymentSpecTemplateSpecContainerLifecyclePreStop[];
}

export interface DeploymentSpecTemplateSpecContainerLifecyclePostStart {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.DeploymentSpecTemplateSpecContainerLifecyclePostStartExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.DeploymentSpecTemplateSpecContainerLifecyclePostStartHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.DeploymentSpecTemplateSpecContainerLifecyclePostStartTcpSocket[];
}

export interface DeploymentSpecTemplateSpecContainerLifecyclePostStartExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface DeploymentSpecTemplateSpecContainerLifecyclePostStartHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.DeploymentSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface DeploymentSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface DeploymentSpecTemplateSpecContainerLifecyclePostStartTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface DeploymentSpecTemplateSpecContainerLifecyclePreStop {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.DeploymentSpecTemplateSpecContainerLifecyclePreStopExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.DeploymentSpecTemplateSpecContainerLifecyclePreStopHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.DeploymentSpecTemplateSpecContainerLifecyclePreStopTcpSocket[];
}

export interface DeploymentSpecTemplateSpecContainerLifecyclePreStopExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface DeploymentSpecTemplateSpecContainerLifecyclePreStopHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.DeploymentSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface DeploymentSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface DeploymentSpecTemplateSpecContainerLifecyclePreStopTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface DeploymentSpecTemplateSpecContainerLivenessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.DeploymentSpecTemplateSpecContainerLivenessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.DeploymentSpecTemplateSpecContainerLivenessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.DeploymentSpecTemplateSpecContainerLivenessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.DeploymentSpecTemplateSpecContainerLivenessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface DeploymentSpecTemplateSpecContainerLivenessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface DeploymentSpecTemplateSpecContainerLivenessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface DeploymentSpecTemplateSpecContainerLivenessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.DeploymentSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface DeploymentSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface DeploymentSpecTemplateSpecContainerLivenessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface DeploymentSpecTemplateSpecContainerPort {
    /**
     * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
     */
    containerPort: number;
    /**
     * What host IP to bind the external port to.
     */
    hostIp?: string;
    /**
     * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
     */
    hostPort?: number;
    /**
     * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
     */
    name?: string;
    /**
     * Protocol for port. Must be UDP or TCP. Defaults to "TCP".
     */
    protocol?: string;
}

export interface DeploymentSpecTemplateSpecContainerReadinessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.DeploymentSpecTemplateSpecContainerReadinessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.DeploymentSpecTemplateSpecContainerReadinessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.DeploymentSpecTemplateSpecContainerReadinessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.DeploymentSpecTemplateSpecContainerReadinessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface DeploymentSpecTemplateSpecContainerReadinessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface DeploymentSpecTemplateSpecContainerReadinessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface DeploymentSpecTemplateSpecContainerReadinessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.DeploymentSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface DeploymentSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface DeploymentSpecTemplateSpecContainerReadinessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface DeploymentSpecTemplateSpecContainerResources {
    /**
     * Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits: {[key: string]: string};
    /**
     * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
     */
    requests: {[key: string]: string};
}

export interface DeploymentSpecTemplateSpecContainerSecurityContext {
    /**
     * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
     */
    allowPrivilegeEscalation?: boolean;
    /**
     * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
     */
    capabilities?: outputs.DeploymentSpecTemplateSpecContainerSecurityContextCapabilities;
    /**
     * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
     */
    privileged?: boolean;
    /**
     * Whether this container has a read-only root filesystem. Default is false.
     */
    readOnlyRootFilesystem?: boolean;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsGroup?: string;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: boolean;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUser?: string;
    /**
     * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    seLinuxOptions?: outputs.DeploymentSpecTemplateSpecContainerSecurityContextSeLinuxOptions;
    /**
     * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     */
    seccompProfile?: outputs.DeploymentSpecTemplateSpecContainerSecurityContextSeccompProfile;
}

export interface DeploymentSpecTemplateSpecContainerSecurityContextCapabilities {
    /**
     * Added capabilities
     */
    adds?: string[];
    /**
     * Removed capabilities
     */
    drops?: string[];
}

export interface DeploymentSpecTemplateSpecContainerSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: string;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: string;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: string;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: string;
}

export interface DeploymentSpecTemplateSpecContainerSecurityContextSeccompProfile {
    /**
     * Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
     */
    localhostProfile?: string;
    /**
     * Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
     */
    type?: string;
}

export interface DeploymentSpecTemplateSpecContainerStartupProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.DeploymentSpecTemplateSpecContainerStartupProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.DeploymentSpecTemplateSpecContainerStartupProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.DeploymentSpecTemplateSpecContainerStartupProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.DeploymentSpecTemplateSpecContainerStartupProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface DeploymentSpecTemplateSpecContainerStartupProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface DeploymentSpecTemplateSpecContainerStartupProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface DeploymentSpecTemplateSpecContainerStartupProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.DeploymentSpecTemplateSpecContainerStartupProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface DeploymentSpecTemplateSpecContainerStartupProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface DeploymentSpecTemplateSpecContainerStartupProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface DeploymentSpecTemplateSpecContainerVolumeMount {
    /**
     * Path within the container at which the volume should be mounted. Must not contain ':'.
     */
    mountPath: string;
    /**
     * Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional.
     */
    mountPropagation?: string;
    /**
     * This must match the Name of a Volume.
     */
    name: string;
    /**
     * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
     */
    subPath?: string;
}

export interface DeploymentSpecTemplateSpecDnsConfig {
    /**
     * A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
     */
    nameservers?: string[];
    /**
     * A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
     */
    options?: outputs.DeploymentSpecTemplateSpecDnsConfigOption[];
    /**
     * A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
     */
    searches?: string[];
}

export interface DeploymentSpecTemplateSpecDnsConfigOption {
    /**
     * Name of the option.
     */
    name: string;
    /**
     * Value of the option. Optional: Defaults to empty.
     */
    value?: string;
}

export interface DeploymentSpecTemplateSpecHostAlias {
    /**
     * Hostnames for the IP address.
     */
    hostnames: string[];
    /**
     * IP address of the host file entry.
     */
    ip: string;
}

export interface DeploymentSpecTemplateSpecImagePullSecret {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
}

export interface DeploymentSpecTemplateSpecInitContainer {
    /**
     * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    args?: string[];
    /**
     * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    commands?: string[];
    /**
     * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
     */
    envFroms?: outputs.DeploymentSpecTemplateSpecInitContainerEnvFrom[];
    /**
     * List of environment variables to set in the container. Cannot be updated.
     */
    envs?: outputs.DeploymentSpecTemplateSpecInitContainerEnv[];
    /**
     * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/
     */
    image?: string;
    /**
     * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images
     */
    imagePullPolicy: string;
    /**
     * Actions that the management system should take in response to container lifecycle events
     */
    lifecycle?: outputs.DeploymentSpecTemplateSpecInitContainerLifecycle;
    /**
     * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    livenessProbe?: outputs.DeploymentSpecTemplateSpecInitContainerLivenessProbe;
    /**
     * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
     */
    name: string;
    /**
     * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
     */
    ports?: outputs.DeploymentSpecTemplateSpecInitContainerPort[];
    /**
     * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    readinessProbe?: outputs.DeploymentSpecTemplateSpecInitContainerReadinessProbe;
    /**
     * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources?: outputs.DeploymentSpecTemplateSpecInitContainerResources;
    /**
     * Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
     */
    securityContext?: outputs.DeploymentSpecTemplateSpecInitContainerSecurityContext;
    /**
     * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     */
    startupProbe?: outputs.DeploymentSpecTemplateSpecInitContainerStartupProbe;
    /**
     * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.
     */
    stdin?: boolean;
    /**
     * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.
     */
    stdinOnce?: boolean;
    /**
     * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.
     */
    terminationMessagePath?: string;
    /**
     * Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
     */
    terminationMessagePolicy: string;
    /**
     * Whether this container should allocate a TTY for itself
     */
    tty?: boolean;
    /**
     * Pod volumes to mount into the container's filesystem. Cannot be updated.
     */
    volumeMounts?: outputs.DeploymentSpecTemplateSpecInitContainerVolumeMount[];
    /**
     * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
     */
    workingDir?: string;
}

export interface DeploymentSpecTemplateSpecInitContainerEnv {
    /**
     * Name of the environment variable. Must be a C_IDENTIFIER
     */
    name: string;
    /**
     * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
     */
    value?: string;
    /**
     * Source for the environment variable's value
     */
    valueFrom?: outputs.DeploymentSpecTemplateSpecInitContainerEnvValueFrom;
}

export interface DeploymentSpecTemplateSpecInitContainerEnvFrom {
    /**
     * The ConfigMap to select from
     */
    configMapRef?: outputs.DeploymentSpecTemplateSpecInitContainerEnvFromConfigMapRef;
    /**
     * An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
     */
    prefix?: string;
    /**
     * The Secret to select from
     */
    secretRef?: outputs.DeploymentSpecTemplateSpecInitContainerEnvFromSecretRef;
}

export interface DeploymentSpecTemplateSpecInitContainerEnvFromConfigMapRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the ConfigMap must be defined
     */
    optional?: boolean;
}

export interface DeploymentSpecTemplateSpecInitContainerEnvFromSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the Secret must be defined
     */
    optional?: boolean;
}

export interface DeploymentSpecTemplateSpecInitContainerEnvValueFrom {
    /**
     * Selects a key of a ConfigMap.
     */
    configMapKeyRef?: outputs.DeploymentSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRef;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.
     */
    fieldRef?: outputs.DeploymentSpecTemplateSpecInitContainerEnvValueFromFieldRef;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
     */
    resourceFieldRef?: outputs.DeploymentSpecTemplateSpecInitContainerEnvValueFromResourceFieldRef;
    /**
     * Selects a key of a secret in the pod's namespace.
     */
    secretKeyRef?: outputs.DeploymentSpecTemplateSpecInitContainerEnvValueFromSecretKeyRef;
}

export interface DeploymentSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRef {
    /**
     * The key to select.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the ConfigMap or its key must be defined.
     */
    optional?: boolean;
}

export interface DeploymentSpecTemplateSpecInitContainerEnvValueFromFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface DeploymentSpecTemplateSpecInitContainerEnvValueFromResourceFieldRef {
    containerName?: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface DeploymentSpecTemplateSpecInitContainerEnvValueFromSecretKeyRef {
    /**
     * The key of the secret to select from. Must be a valid secret key.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the Secret or its key must be defined.
     */
    optional?: boolean;
}

export interface DeploymentSpecTemplateSpecInitContainerLifecycle {
    /**
     * post_start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    postStarts?: outputs.DeploymentSpecTemplateSpecInitContainerLifecyclePostStart[];
    /**
     * pre_stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    preStops?: outputs.DeploymentSpecTemplateSpecInitContainerLifecyclePreStop[];
}

export interface DeploymentSpecTemplateSpecInitContainerLifecyclePostStart {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.DeploymentSpecTemplateSpecInitContainerLifecyclePostStartExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.DeploymentSpecTemplateSpecInitContainerLifecyclePostStartHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.DeploymentSpecTemplateSpecInitContainerLifecyclePostStartTcpSocket[];
}

export interface DeploymentSpecTemplateSpecInitContainerLifecyclePostStartExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface DeploymentSpecTemplateSpecInitContainerLifecyclePostStartHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.DeploymentSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface DeploymentSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface DeploymentSpecTemplateSpecInitContainerLifecyclePostStartTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface DeploymentSpecTemplateSpecInitContainerLifecyclePreStop {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.DeploymentSpecTemplateSpecInitContainerLifecyclePreStopExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.DeploymentSpecTemplateSpecInitContainerLifecyclePreStopHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.DeploymentSpecTemplateSpecInitContainerLifecyclePreStopTcpSocket[];
}

export interface DeploymentSpecTemplateSpecInitContainerLifecyclePreStopExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface DeploymentSpecTemplateSpecInitContainerLifecyclePreStopHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.DeploymentSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface DeploymentSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface DeploymentSpecTemplateSpecInitContainerLifecyclePreStopTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface DeploymentSpecTemplateSpecInitContainerLivenessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.DeploymentSpecTemplateSpecInitContainerLivenessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.DeploymentSpecTemplateSpecInitContainerLivenessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.DeploymentSpecTemplateSpecInitContainerLivenessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.DeploymentSpecTemplateSpecInitContainerLivenessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface DeploymentSpecTemplateSpecInitContainerLivenessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface DeploymentSpecTemplateSpecInitContainerLivenessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface DeploymentSpecTemplateSpecInitContainerLivenessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.DeploymentSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface DeploymentSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface DeploymentSpecTemplateSpecInitContainerLivenessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface DeploymentSpecTemplateSpecInitContainerPort {
    /**
     * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
     */
    containerPort: number;
    /**
     * What host IP to bind the external port to.
     */
    hostIp?: string;
    /**
     * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
     */
    hostPort?: number;
    /**
     * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
     */
    name?: string;
    /**
     * Protocol for port. Must be UDP or TCP. Defaults to "TCP".
     */
    protocol?: string;
}

export interface DeploymentSpecTemplateSpecInitContainerReadinessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.DeploymentSpecTemplateSpecInitContainerReadinessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.DeploymentSpecTemplateSpecInitContainerReadinessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.DeploymentSpecTemplateSpecInitContainerReadinessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.DeploymentSpecTemplateSpecInitContainerReadinessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface DeploymentSpecTemplateSpecInitContainerReadinessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface DeploymentSpecTemplateSpecInitContainerReadinessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface DeploymentSpecTemplateSpecInitContainerReadinessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.DeploymentSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface DeploymentSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface DeploymentSpecTemplateSpecInitContainerReadinessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface DeploymentSpecTemplateSpecInitContainerResources {
    /**
     * Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits: {[key: string]: string};
    /**
     * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
     */
    requests: {[key: string]: string};
}

export interface DeploymentSpecTemplateSpecInitContainerSecurityContext {
    /**
     * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
     */
    allowPrivilegeEscalation?: boolean;
    /**
     * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
     */
    capabilities?: outputs.DeploymentSpecTemplateSpecInitContainerSecurityContextCapabilities;
    /**
     * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
     */
    privileged?: boolean;
    /**
     * Whether this container has a read-only root filesystem. Default is false.
     */
    readOnlyRootFilesystem?: boolean;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsGroup?: string;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: boolean;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUser?: string;
    /**
     * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    seLinuxOptions?: outputs.DeploymentSpecTemplateSpecInitContainerSecurityContextSeLinuxOptions;
    /**
     * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     */
    seccompProfile?: outputs.DeploymentSpecTemplateSpecInitContainerSecurityContextSeccompProfile;
}

export interface DeploymentSpecTemplateSpecInitContainerSecurityContextCapabilities {
    /**
     * Added capabilities
     */
    adds?: string[];
    /**
     * Removed capabilities
     */
    drops?: string[];
}

export interface DeploymentSpecTemplateSpecInitContainerSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: string;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: string;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: string;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: string;
}

export interface DeploymentSpecTemplateSpecInitContainerSecurityContextSeccompProfile {
    /**
     * Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
     */
    localhostProfile?: string;
    /**
     * Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
     */
    type?: string;
}

export interface DeploymentSpecTemplateSpecInitContainerStartupProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.DeploymentSpecTemplateSpecInitContainerStartupProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.DeploymentSpecTemplateSpecInitContainerStartupProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.DeploymentSpecTemplateSpecInitContainerStartupProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.DeploymentSpecTemplateSpecInitContainerStartupProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface DeploymentSpecTemplateSpecInitContainerStartupProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface DeploymentSpecTemplateSpecInitContainerStartupProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface DeploymentSpecTemplateSpecInitContainerStartupProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.DeploymentSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface DeploymentSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface DeploymentSpecTemplateSpecInitContainerStartupProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface DeploymentSpecTemplateSpecInitContainerVolumeMount {
    /**
     * Path within the container at which the volume should be mounted. Must not contain ':'.
     */
    mountPath: string;
    /**
     * Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional.
     */
    mountPropagation?: string;
    /**
     * This must match the Name of a Volume.
     */
    name: string;
    /**
     * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
     */
    subPath?: string;
}

export interface DeploymentSpecTemplateSpecOs {
    /**
     * Name is the name of the operating system. The currently supported values are linux and windows.
     */
    name: string;
}

export interface DeploymentSpecTemplateSpecReadinessGate {
    /**
     * refers to a condition in the pod's condition list with matching type.
     */
    conditionType: string;
}

export interface DeploymentSpecTemplateSpecSecurityContext {
    /**
     * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- If unset, the Kubelet will not modify the ownership and permissions of any volume.
     */
    fsGroup?: string;
    /**
     * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir.
     */
    fsGroupChangePolicy?: string;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    runAsGroup?: string;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: boolean;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    runAsUser?: string;
    /**
     * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    seLinuxOptions?: outputs.DeploymentSpecTemplateSpecSecurityContextSeLinuxOptions;
    /**
     * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     */
    seccompProfile?: outputs.DeploymentSpecTemplateSpecSecurityContextSeccompProfile;
    /**
     * A list of groups applied to the first process run in each container, in addition to the container's primary GID. If unspecified, no groups will be added to any container.
     */
    supplementalGroups?: number[];
    /**
     * holds a list of namespaced sysctls used for the pod.
     */
    sysctls?: outputs.DeploymentSpecTemplateSpecSecurityContextSysctl[];
    /**
     * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
     */
    windowsOptions?: outputs.DeploymentSpecTemplateSpecSecurityContextWindowsOptions;
}

export interface DeploymentSpecTemplateSpecSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: string;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: string;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: string;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: string;
}

export interface DeploymentSpecTemplateSpecSecurityContextSeccompProfile {
    /**
     * Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
     */
    localhostProfile?: string;
    /**
     * Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
     */
    type?: string;
}

export interface DeploymentSpecTemplateSpecSecurityContextSysctl {
    /**
     * Name of a property to set.
     */
    name: string;
    /**
     * Value of a property to set.
     */
    value: string;
}

export interface DeploymentSpecTemplateSpecSecurityContextWindowsOptions {
    /**
     * GMSACredentialSpec is where the GMSA admission webhook inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field
     */
    gmsaCredentialSpec?: string;
    /**
     * GMSACredentialSpecName is the name of the GMSA credential spec to use.
     */
    gmsaCredentialSpecName?: string;
    /**
     * HostProcess determines if a container should be run as a 'Host Process' container. Default value is false.
     */
    hostProcess?: boolean;
    /**
     * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUsername?: string;
}

export interface DeploymentSpecTemplateSpecToleration {
    /**
     * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
     */
    effect?: string;
    /**
     * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
     */
    key?: string;
    /**
     * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
     */
    operator?: string;
    /**
     * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
     */
    tolerationSeconds?: string;
    /**
     * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
     */
    value?: string;
}

export interface DeploymentSpecTemplateSpecTopologySpreadConstraint {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.DeploymentSpecTemplateSpecTopologySpreadConstraintLabelSelector[];
    /**
     * is a set of pod label keys to select the pods over which spreading will be calculated.
     */
    matchLabelKeys?: string[];
    /**
     * describes the degree to which pods may be unevenly distributed.
     */
    maxSkew?: number;
    /**
     * indicates a minimum number of eligible domains.
     */
    minDomains?: number;
    /**
     * indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew.
     */
    nodeAffinityPolicy?: string;
    /**
     * indicates how we will treat node taints when calculating pod topology spread skew.
     */
    nodeTaintsPolicy?: string;
    /**
     * the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology.
     */
    topologyKey?: string;
    /**
     * indicates how to deal with a pod if it doesn't satisfy the spread constraint.
     */
    whenUnsatisfiable?: string;
}

export interface DeploymentSpecTemplateSpecTopologySpreadConstraintLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.DeploymentSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface DeploymentSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface DeploymentSpecTemplateSpecVolume {
    /**
     * Represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    awsElasticBlockStore?: outputs.DeploymentSpecTemplateSpecVolumeAwsElasticBlockStore;
    /**
     * Represents an Azure Data Disk mount on the host and bind mount to the pod.
     */
    azureDisk?: outputs.DeploymentSpecTemplateSpecVolumeAzureDisk;
    /**
     * Represents an Azure File Service mount on the host and bind mount to the pod.
     */
    azureFile?: outputs.DeploymentSpecTemplateSpecVolumeAzureFile;
    /**
     * Represents a Ceph FS mount on the host that shares a pod's lifetime
     */
    cephFs?: outputs.DeploymentSpecTemplateSpecVolumeCephFs;
    /**
     * Represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    cinder?: outputs.DeploymentSpecTemplateSpecVolumeCinder;
    /**
     * ConfigMap represents a configMap that should populate this volume
     */
    configMap?: outputs.DeploymentSpecTemplateSpecVolumeConfigMap;
    /**
     * Represents a CSI Volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
     */
    csi?: outputs.DeploymentSpecTemplateSpecVolumeCsi;
    /**
     * DownwardAPI represents downward API about the pod that should populate this volume
     */
    downwardApi?: outputs.DeploymentSpecTemplateSpecVolumeDownwardApi;
    /**
     * EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
     */
    emptyDir?: outputs.DeploymentSpecTemplateSpecVolumeEmptyDir;
    /**
     * Represents an ephemeral volume that is handled by a normal storage driver. More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes
     */
    ephemeral?: outputs.DeploymentSpecTemplateSpecVolumeEphemeral;
    /**
     * Represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
     */
    fc?: outputs.DeploymentSpecTemplateSpecVolumeFc;
    /**
     * Represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.
     */
    flexVolume?: outputs.DeploymentSpecTemplateSpecVolumeFlexVolume;
    /**
     * Represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
     */
    flocker?: outputs.DeploymentSpecTemplateSpecVolumeFlocker;
    /**
     * Represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    gcePersistentDisk?: outputs.DeploymentSpecTemplateSpecVolumeGcePersistentDisk;
    /**
     * GitRepo represents a git repository at a particular revision.
     */
    gitRepo?: outputs.DeploymentSpecTemplateSpecVolumeGitRepo;
    /**
     * Represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
     */
    glusterfs?: outputs.DeploymentSpecTemplateSpecVolumeGlusterfs;
    /**
     * Represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     */
    hostPath?: outputs.DeploymentSpecTemplateSpecVolumeHostPath;
    /**
     * Represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
     */
    iscsi?: outputs.DeploymentSpecTemplateSpecVolumeIscsi;
    /**
     * Represents a mounted local storage device such as a disk, partition or directory. Local volumes can only be used as a statically created PersistentVolume. Dynamic provisioning is not supported yet. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
     */
    local?: outputs.DeploymentSpecTemplateSpecVolumeLocal;
    /**
     * Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    nfs?: outputs.DeploymentSpecTemplateSpecVolumeNfs;
    /**
     * The specification of a persistent volume.
     */
    persistentVolumeClaim?: outputs.DeploymentSpecTemplateSpecVolumePersistentVolumeClaim;
    /**
     * Represents a PhotonController persistent disk attached and mounted on kubelets host machine
     */
    photonPersistentDisk?: outputs.DeploymentSpecTemplateSpecVolumePhotonPersistentDisk;
    /**
     * Projected represents a single volume that projects several volume sources into the same directory. More info: https://kubernetes.io/docs/concepts/storage/volumes/#projected
     */
    projecteds?: outputs.DeploymentSpecTemplateSpecVolumeProjected[];
    /**
     * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
     */
    quobyte?: outputs.DeploymentSpecTemplateSpecVolumeQuobyte;
    /**
     * Represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
     */
    rbd?: outputs.DeploymentSpecTemplateSpecVolumeRbd;
    /**
     * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    secret?: outputs.DeploymentSpecTemplateSpecVolumeSecret;
    /**
     * Represents a vSphere volume attached and mounted on kubelets host machine
     */
    vsphereVolume?: outputs.DeploymentSpecTemplateSpecVolumeVsphereVolume;
}

export interface DeploymentSpecTemplateSpecVolumeAwsElasticBlockStore {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    fsType?: string;
    /**
     * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
     */
    partition?: number;
    /**
     * Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    readOnly?: boolean;
    /**
     * Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    volumeId: string;
}

export interface DeploymentSpecTemplateSpecVolumeAzureDisk {
    /**
     * Host Caching mode: None, Read Only, Read Write.
     */
    cachingMode: string;
    /**
     * The URI the data disk in the blob storage
     */
    dataDiskUri: string;
    /**
     * The Name of the data disk in the blob storage
     */
    diskName: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * The type for the data disk. Expected values: Shared, Dedicated, Managed. Defaults to Shared
     */
    kind: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
}

export interface DeploymentSpecTemplateSpecVolumeAzureFile {
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * The name of secret that contains Azure Storage Account Name and Key
     */
    secretName: string;
    /**
     * The namespace of the secret that contains Azure Storage Account Name and Key. For Kubernetes up to 1.18.x the default is the same as the Pod. For Kubernetes 1.19.x and later the default is "default" namespace.
     */
    secretNamespace?: string;
    /**
     * Share Name
     */
    shareName: string;
}

export interface DeploymentSpecTemplateSpecVolumeCephFs {
    /**
     * Monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    monitors: string[];
    /**
     * Used as the mounted root, rather than the full Ceph tree, default is /
     */
    path?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to `false` (read/write). More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    readOnly?: boolean;
    /**
     * The path to key ring for User, default is `/etc/ceph/user.secret`. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    secretFile?: string;
    /**
     * Reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    secretRef?: outputs.DeploymentSpecTemplateSpecVolumeCephFsSecretRef;
    /**
     * User is the rados user name, default is admin. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    user?: string;
}

export interface DeploymentSpecTemplateSpecVolumeCephFsSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface DeploymentSpecTemplateSpecVolumeCinder {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    fsType?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write). More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    readOnly?: boolean;
    /**
     * Volume ID used to identify the volume in Cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    volumeId: string;
}

export interface DeploymentSpecTemplateSpecVolumeConfigMap {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.DeploymentSpecTemplateSpecVolumeConfigMapItem[];
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Optional: Specify whether the ConfigMap or its keys must be defined.
     */
    optional?: boolean;
}

export interface DeploymentSpecTemplateSpecVolumeConfigMapItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface DeploymentSpecTemplateSpecVolumeCsi {
    /**
     * the name of the volume driver to use. More info: https://kubernetes.io/docs/concepts/storage/volumes/#csi
     */
    driver: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * A reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls.
     */
    nodePublishSecretRef?: outputs.DeploymentSpecTemplateSpecVolumeCsiNodePublishSecretRef;
    /**
     * Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
     */
    readOnly?: boolean;
    /**
     * Attributes of the volume to publish.
     */
    volumeAttributes?: {[key: string]: string};
}

export interface DeploymentSpecTemplateSpecVolumeCsiNodePublishSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
}

export interface DeploymentSpecTemplateSpecVolumeDownwardApi {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.DeploymentSpecTemplateSpecVolumeDownwardApiItem[];
}

export interface DeploymentSpecTemplateSpecVolumeDownwardApiItem {
    /**
     * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
     */
    fieldRef: outputs.DeploymentSpecTemplateSpecVolumeDownwardApiItemFieldRef;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
     */
    path: string;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
     */
    resourceFieldRef?: outputs.DeploymentSpecTemplateSpecVolumeDownwardApiItemResourceFieldRef;
}

export interface DeploymentSpecTemplateSpecVolumeDownwardApiItemFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface DeploymentSpecTemplateSpecVolumeDownwardApiItemResourceFieldRef {
    containerName: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface DeploymentSpecTemplateSpecVolumeEmptyDir {
    /**
     * What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be one of ["" "Memory" "HugePages" "HugePages-2Mi" "HugePages-1Gi"]. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
     */
    medium?: string;
    /**
     * Total amount of local storage required for this EmptyDir volume.
     */
    sizeLimit?: string;
}

export interface DeploymentSpecTemplateSpecVolumeEphemeral {
    /**
     * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC.
     */
    volumeClaimTemplate: outputs.DeploymentSpecTemplateSpecVolumeEphemeralVolumeClaimTemplate;
}

export interface DeploymentSpecTemplateSpecVolumeEphemeralVolumeClaimTemplate {
    /**
     * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
     */
    metadata?: outputs.DeploymentSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadata;
    /**
     * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
     */
    spec: outputs.DeploymentSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpec;
}

export interface DeploymentSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadata {
    /**
     * An unstructured key value map stored with the persistent volume claim that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the persistent volume claim. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
}

export interface DeploymentSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpec {
    /**
     * A set of the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
     */
    accessModes: string[];
    /**
     * A list of the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources: outputs.DeploymentSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResources;
    /**
     * A label query over volumes to consider for binding.
     */
    selector?: outputs.DeploymentSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelector;
    /**
     * Name of the storage class requested by the claim
     */
    storageClassName: string;
    /**
     * Defines what type of volume is required by the claim.
     */
    volumeMode: string;
    /**
     * The binding reference to the PersistentVolume backing this claim.
     */
    volumeName: string;
}

export interface DeploymentSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResources {
    /**
     * Map describing the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits?: {[key: string]: string};
    /**
     * Map describing the minimum amount of compute resources required. If this is omitted for a container, it defaults to `limits` if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    requests?: {[key: string]: string};
}

export interface DeploymentSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.DeploymentSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface DeploymentSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface DeploymentSpecTemplateSpecVolumeFc {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * FC target lun number
     */
    lun: number;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * FC target worldwide names (WWNs)
     */
    targetWwNs: string[];
}

export interface DeploymentSpecTemplateSpecVolumeFlexVolume {
    /**
     * Driver is the name of the driver to use for this volume.
     */
    driver: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
     */
    fsType?: string;
    /**
     * Extra command options if any.
     */
    options?: {[key: string]: string};
    /**
     * Whether to force the ReadOnly setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * Reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
     */
    secretRef?: outputs.DeploymentSpecTemplateSpecVolumeFlexVolumeSecretRef;
}

export interface DeploymentSpecTemplateSpecVolumeFlexVolumeSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface DeploymentSpecTemplateSpecVolumeFlocker {
    /**
     * Name of the dataset stored as metadata > name on the dataset for Flocker should be considered as deprecated
     */
    datasetName?: string;
    /**
     * UUID of the dataset. This is unique identifier of a Flocker dataset
     */
    datasetUuid?: string;
}

export interface DeploymentSpecTemplateSpecVolumeGcePersistentDisk {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    fsType?: string;
    /**
     * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    partition?: number;
    /**
     * Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    pdName: string;
    /**
     * Whether to force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    readOnly?: boolean;
}

export interface DeploymentSpecTemplateSpecVolumeGitRepo {
    /**
     * Target directory name. Must not contain or start with '..'. If '.' is supplied, the volume directory will be the git repository. Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
     */
    directory?: string;
    /**
     * Repository URL
     */
    repository?: string;
    /**
     * Commit hash for the specified revision.
     */
    revision?: string;
}

export interface DeploymentSpecTemplateSpecVolumeGlusterfs {
    /**
     * The endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    endpointsName: string;
    /**
     * The Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    path: string;
    /**
     * Whether to force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    readOnly?: boolean;
}

export interface DeploymentSpecTemplateSpecVolumeHostPath {
    /**
     * Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     */
    path?: string;
    /**
     * Type for HostPath volume. Allowed values are "" (default), DirectoryOrCreate, Directory, FileOrCreate, File, Socket, CharDevice and BlockDevice
     */
    type?: string;
}

export interface DeploymentSpecTemplateSpecVolumeIscsi {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
     */
    fsType?: string;
    /**
     * Target iSCSI Qualified Name.
     */
    iqn: string;
    /**
     * iSCSI interface name that uses an iSCSI transport. Defaults to 'default' (tcp).
     */
    iscsiInterface?: string;
    /**
     * iSCSI target lun number.
     */
    lun?: number;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false.
     */
    readOnly?: boolean;
    /**
     * iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
     */
    targetPortal: string;
}

export interface DeploymentSpecTemplateSpecVolumeLocal {
    /**
     * Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
     */
    path?: string;
}

export interface DeploymentSpecTemplateSpecVolumeNfs {
    /**
     * Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    path: string;
    /**
     * Whether to force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    readOnly?: boolean;
    /**
     * Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    server: string;
}

export interface DeploymentSpecTemplateSpecVolumePersistentVolumeClaim {
    /**
     * ClaimName is the name of a PersistentVolumeClaim in the same
     */
    claimName?: string;
    /**
     * Will force the ReadOnly setting in VolumeMounts.
     */
    readOnly?: boolean;
}

export interface DeploymentSpecTemplateSpecVolumePhotonPersistentDisk {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * ID that identifies Photon Controller persistent disk
     */
    pdId: string;
}

export interface DeploymentSpecTemplateSpecVolumeProjected {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * Source of the volume to project in the directory.
     */
    sources: outputs.DeploymentSpecTemplateSpecVolumeProjectedSource[];
}

export interface DeploymentSpecTemplateSpecVolumeProjectedSource {
    /**
     * ConfigMap represents a configMap that should populate this volume
     */
    configMaps?: outputs.DeploymentSpecTemplateSpecVolumeProjectedSourceConfigMap[];
    /**
     * DownwardAPI represents downward API about the pod that should populate this volume
     */
    downwardApi?: outputs.DeploymentSpecTemplateSpecVolumeProjectedSourceDownwardApi;
    /**
     * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    secrets?: outputs.DeploymentSpecTemplateSpecVolumeProjectedSourceSecret[];
    /**
     * A projected service account token volume
     */
    serviceAccountToken?: outputs.DeploymentSpecTemplateSpecVolumeProjectedSourceServiceAccountToken;
}

export interface DeploymentSpecTemplateSpecVolumeProjectedSourceConfigMap {
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.DeploymentSpecTemplateSpecVolumeProjectedSourceConfigMapItem[];
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Optional: Specify whether the ConfigMap or it's keys must be defined.
     */
    optional?: boolean;
}

export interface DeploymentSpecTemplateSpecVolumeProjectedSourceConfigMapItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface DeploymentSpecTemplateSpecVolumeProjectedSourceDownwardApi {
    /**
     * Represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
     */
    items?: outputs.DeploymentSpecTemplateSpecVolumeProjectedSourceDownwardApiItem[];
}

export interface DeploymentSpecTemplateSpecVolumeProjectedSourceDownwardApiItem {
    /**
     * Selects a field of the pod: only annotations, labels, name and namespace are supported.
     */
    fieldRef?: outputs.DeploymentSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRef;
    /**
     * Mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
     */
    path: string;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
     */
    resourceFieldRef?: outputs.DeploymentSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRef;
}

export interface DeploymentSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to 'v1'.
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface DeploymentSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRef {
    containerName: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface DeploymentSpecTemplateSpecVolumeProjectedSourceSecret {
    /**
     * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.DeploymentSpecTemplateSpecVolumeProjectedSourceSecretItem[];
    /**
     * Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    name?: string;
    /**
     * Optional: Specify whether the Secret or it's keys must be defined.
     */
    optional?: boolean;
}

export interface DeploymentSpecTemplateSpecVolumeProjectedSourceSecretItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface DeploymentSpecTemplateSpecVolumeProjectedSourceServiceAccountToken {
    /**
     * Audience is the intended audience of the token
     */
    audience?: string;
    /**
     * ExpirationSeconds is the expected duration of validity of the service account token. It defaults to 1 hour and must be at least 10 minutes (600 seconds).
     */
    expirationSeconds?: number;
    /**
     * Path specifies a relative path to the mount point of the projected volume.
     */
    path: string;
}

export interface DeploymentSpecTemplateSpecVolumeQuobyte {
    /**
     * Group to map volume access to Default is no group
     */
    group?: string;
    /**
     * Whether to force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
     */
    registry: string;
    /**
     * User to map volume access to Defaults to serivceaccount user
     */
    user?: string;
    /**
     * Volume is a string that references an already created Quobyte volume by name.
     */
    volume: string;
}

export interface DeploymentSpecTemplateSpecVolumeRbd {
    /**
     * A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    cephMonitors: string[];
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
     */
    fsType?: string;
    /**
     * Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    keyring: string;
    /**
     * The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    radosUser?: string;
    /**
     * The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    rbdImage: string;
    /**
     * The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it.
     */
    rbdPool?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    readOnly?: boolean;
    /**
     * Name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    secretRef?: outputs.DeploymentSpecTemplateSpecVolumeRbdSecretRef;
}

export interface DeploymentSpecTemplateSpecVolumeRbdSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface DeploymentSpecTemplateSpecVolumeSecret {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.DeploymentSpecTemplateSpecVolumeSecretItem[];
    /**
     * Optional: Specify whether the Secret or its keys must be defined.
     */
    optional?: boolean;
    /**
     * Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    secretName?: string;
}

export interface DeploymentSpecTemplateSpecVolumeSecretItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface DeploymentSpecTemplateSpecVolumeVsphereVolume {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * Path that identifies vSphere volume vmdk
     */
    volumePath: string;
}

export interface DeploymentTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DeploymentV1Metadata {
    /**
     * An unstructured key value map stored with the deployment that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the deployment. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the deployment, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the deployment must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this deployment that can be used by clients to determine when deployment has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this deployment. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface DeploymentV1Spec {
    /**
     * Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
     */
    minReadySeconds?: number;
    /**
     * Indicates that the deployment is paused.
     */
    paused?: boolean;
    /**
     * The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.
     */
    progressDeadlineSeconds?: number;
    /**
     * Number of desired pods. This is a string to be able to distinguish between explicit zero and not specified.
     */
    replicas: string;
    /**
     * The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.
     */
    revisionHistoryLimit?: number;
    /**
     * A label query over pods that should match the Replicas count.
     */
    selector?: outputs.DeploymentV1SpecSelector;
    /**
     * The deployment strategy to use to replace existing pods with new ones.
     */
    strategy?: outputs.DeploymentV1SpecStrategy;
    /**
     * Template describes the pods that will be created.
     */
    template: outputs.DeploymentV1SpecTemplate;
}

export interface DeploymentV1SpecSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.DeploymentV1SpecSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface DeploymentV1SpecSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface DeploymentV1SpecStrategy {
    /**
     * Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.
     */
    rollingUpdate?: outputs.DeploymentV1SpecStrategyRollingUpdate;
    /**
     * Type of deployment. Can be 'Recreate' or 'RollingUpdate'. Default is RollingUpdate.
     */
    type?: string;
}

export interface DeploymentV1SpecStrategyRollingUpdate {
    /**
     * The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new RC can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new RC can be scaled up further, ensuring that total number of pods running at any time during the update is atmost 130% of desired pods.
     */
    maxSurge?: string;
    /**
     * The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old RC can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old RC can be scaled down further, followed by scaling up the new RC, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.
     */
    maxUnavailable?: string;
}

export interface DeploymentV1SpecTemplate {
    /**
     * Standard pod's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
     */
    metadata: outputs.DeploymentV1SpecTemplateMetadata;
    /**
     * Spec defines the specification of the desired behavior of the deployment. More info: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.9/#deployment-v1-apps
     */
    spec: outputs.DeploymentV1SpecTemplateSpec;
}

export interface DeploymentV1SpecTemplateMetadata {
    /**
     * An unstructured key value map stored with the pod that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the pod. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the pod, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the pod must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this pod that can be used by clients to determine when pod has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface DeploymentV1SpecTemplateSpec {
    /**
     * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
     */
    activeDeadlineSeconds?: number;
    /**
     * Optional pod scheduling constraints.
     */
    affinity?: outputs.DeploymentV1SpecTemplateSpecAffinity;
    /**
     * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
     */
    automountServiceAccountToken?: boolean;
    /**
     * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/
     */
    containers?: outputs.DeploymentV1SpecTemplateSpecContainer[];
    /**
     * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy. Optional: Defaults to empty
     */
    dnsConfig?: outputs.DeploymentV1SpecTemplateSpecDnsConfig;
    /**
     * Set DNS policy for containers within the pod. Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'. Defaults to 'ClusterFirst'. More info: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy
     */
    dnsPolicy?: string;
    /**
     * Enables generating environment variables for service discovery. Defaults to true.
     */
    enableServiceLinks?: boolean;
    /**
     * List of hosts and IPs that will be injected into the pod's hosts file if specified. Optional: Defaults to empty.
     */
    hostAliases?: outputs.DeploymentV1SpecTemplateSpecHostAlias[];
    /**
     * Use the host's ipc namespace. Optional: Defaults to false.
     */
    hostIpc?: boolean;
    /**
     * Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified.
     */
    hostNetwork?: boolean;
    /**
     * Use the host's pid namespace.
     */
    hostPid?: boolean;
    /**
     * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
     */
    hostname: string;
    /**
     * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
     */
    imagePullSecrets?: outputs.DeploymentV1SpecTemplateSpecImagePullSecret[];
    /**
     * List of init containers belonging to the pod. Init containers always run to completion and each must complete successfully before the next is started. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
     */
    initContainers?: outputs.DeploymentV1SpecTemplateSpecInitContainer[];
    /**
     * NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
     */
    nodeName: string;
    /**
     * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.
     */
    nodeSelector?: {[key: string]: string};
    /**
     * Specifies the OS of the containers in the pod.
     */
    os?: outputs.DeploymentV1SpecTemplateSpecOs;
    /**
     * If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
     */
    priorityClassName?: string;
    /**
     * If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md
     */
    readinessGates?: outputs.DeploymentV1SpecTemplateSpecReadinessGate[];
    /**
     * Restart policy for all containers within the pod. One of Always, OnFailure, Never. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy.
     */
    restartPolicy?: string;
    /**
     * RuntimeClassName is a feature for selecting the container runtime configuration. The container runtime configuration is used to run a Pod's containers. More info: https://kubernetes.io/docs/concepts/containers/runtime-class
     */
    runtimeClassName?: string;
    /**
     * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
     */
    schedulerName: string;
    /**
     * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty
     */
    securityContext?: outputs.DeploymentV1SpecTemplateSpecSecurityContext;
    /**
     * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: http://releases.k8s.io/HEAD/docs/design/service_accounts.md.
     */
    serviceAccountName: string;
    /**
     * Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Defaults to false.
     */
    shareProcessNamespace?: boolean;
    /**
     * If specified, the fully qualified Pod hostname will be "...svc.". If not specified, the pod will not have a domainname at all..
     */
    subdomain?: string;
    /**
     * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process.
     */
    terminationGracePeriodSeconds?: number;
    /**
     * If specified, the pod's toleration. Optional: Defaults to empty
     */
    tolerations?: outputs.DeploymentV1SpecTemplateSpecToleration[];
    /**
     * describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints.
     */
    topologySpreadConstraints?: outputs.DeploymentV1SpecTemplateSpecTopologySpreadConstraint[];
    /**
     * List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
     */
    volumes?: outputs.DeploymentV1SpecTemplateSpecVolume[];
}

export interface DeploymentV1SpecTemplateSpecAffinity {
    /**
     * Node affinity scheduling rules for the pod.
     */
    nodeAffinity?: outputs.DeploymentV1SpecTemplateSpecAffinityNodeAffinity;
    /**
     * Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)
     */
    podAffinity?: outputs.DeploymentV1SpecTemplateSpecAffinityPodAffinity;
    /**
     * Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)
     */
    podAntiAffinity?: outputs.DeploymentV1SpecTemplateSpecAffinityPodAntiAffinity;
}

export interface DeploymentV1SpecTemplateSpecAffinityNodeAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: outputs.DeploymentV1SpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a node label update), the system may or may not try to eventually evict the pod from its node.
     */
    requiredDuringSchedulingIgnoredDuringExecution?: outputs.DeploymentV1SpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
}

export interface DeploymentV1SpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A node selector term, associated with the corresponding weight.
     */
    preference: outputs.DeploymentV1SpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
    /**
     * weight is in the range 1-100
     */
    weight: number;
}

export interface DeploymentV1SpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
    /**
     * List of node selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.DeploymentV1SpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression[];
    /**
     * A list of node selector requirements by node's fields. The requirements are ANDed.
     */
    matchFields?: outputs.DeploymentV1SpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchField[];
}

export interface DeploymentV1SpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
     */
    operator?: string;
    /**
     * Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface DeploymentV1SpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchField {
    /**
     * The label key that the selector applies to.
     */
    key: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists`, `DoesNotExist`, `Gt`, and `Lt`.
     */
    operator: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface DeploymentV1SpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * List of node selector terms. The terms are ORed.
     */
    nodeSelectorTerms?: outputs.DeploymentV1SpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm[];
}

export interface DeploymentV1SpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm {
    /**
     * List of node selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.DeploymentV1SpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression[];
    /**
     * A list of node selector requirements by node's fields. The requirements are ANDed.
     */
    matchFields?: outputs.DeploymentV1SpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchField[];
}

export interface DeploymentV1SpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
     */
    operator?: string;
    /**
     * Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface DeploymentV1SpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchField {
    /**
     * The label key that the selector applies to.
     */
    key: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists`, `DoesNotExist`, `Gt`, and `Lt`.
     */
    operator: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface DeploymentV1SpecTemplateSpecAffinityPodAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: outputs.DeploymentV1SpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.
     */
    requiredDuringSchedulingIgnoredDuringExecutions?: outputs.DeploymentV1SpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
}

export interface DeploymentV1SpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A pod affinity term, associated with the corresponding weight
     */
    podAffinityTerm: outputs.DeploymentV1SpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
    /**
     * weight associated with matching the corresponding podAffinityTerm, in the range 1-100
     */
    weight: number;
}

export interface DeploymentV1SpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.DeploymentV1SpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface DeploymentV1SpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.DeploymentV1SpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface DeploymentV1SpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface DeploymentV1SpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.DeploymentV1SpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface DeploymentV1SpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.DeploymentV1SpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface DeploymentV1SpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface DeploymentV1SpecTemplateSpecAffinityPodAntiAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: outputs.DeploymentV1SpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.
     */
    requiredDuringSchedulingIgnoredDuringExecutions?: outputs.DeploymentV1SpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
}

export interface DeploymentV1SpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A pod affinity term, associated with the corresponding weight
     */
    podAffinityTerm: outputs.DeploymentV1SpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
    /**
     * weight associated with matching the corresponding podAffinityTerm, in the range 1-100
     */
    weight: number;
}

export interface DeploymentV1SpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.DeploymentV1SpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface DeploymentV1SpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.DeploymentV1SpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface DeploymentV1SpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface DeploymentV1SpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.DeploymentV1SpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface DeploymentV1SpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.DeploymentV1SpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface DeploymentV1SpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface DeploymentV1SpecTemplateSpecContainer {
    /**
     * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    args?: string[];
    /**
     * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    commands?: string[];
    /**
     * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
     */
    envFroms?: outputs.DeploymentV1SpecTemplateSpecContainerEnvFrom[];
    /**
     * List of environment variables to set in the container. Cannot be updated.
     */
    envs?: outputs.DeploymentV1SpecTemplateSpecContainerEnv[];
    /**
     * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/
     */
    image?: string;
    /**
     * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images
     */
    imagePullPolicy: string;
    /**
     * Actions that the management system should take in response to container lifecycle events
     */
    lifecycle?: outputs.DeploymentV1SpecTemplateSpecContainerLifecycle;
    /**
     * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    livenessProbe?: outputs.DeploymentV1SpecTemplateSpecContainerLivenessProbe;
    /**
     * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
     */
    name: string;
    /**
     * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
     */
    ports?: outputs.DeploymentV1SpecTemplateSpecContainerPort[];
    /**
     * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    readinessProbe?: outputs.DeploymentV1SpecTemplateSpecContainerReadinessProbe;
    /**
     * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources?: outputs.DeploymentV1SpecTemplateSpecContainerResources;
    /**
     * Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
     */
    securityContext?: outputs.DeploymentV1SpecTemplateSpecContainerSecurityContext;
    /**
     * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     */
    startupProbe?: outputs.DeploymentV1SpecTemplateSpecContainerStartupProbe;
    /**
     * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.
     */
    stdin?: boolean;
    /**
     * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.
     */
    stdinOnce?: boolean;
    /**
     * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.
     */
    terminationMessagePath?: string;
    /**
     * Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
     */
    terminationMessagePolicy: string;
    /**
     * Whether this container should allocate a TTY for itself
     */
    tty?: boolean;
    /**
     * Pod volumes to mount into the container's filesystem. Cannot be updated.
     */
    volumeMounts?: outputs.DeploymentV1SpecTemplateSpecContainerVolumeMount[];
    /**
     * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
     */
    workingDir?: string;
}

export interface DeploymentV1SpecTemplateSpecContainerEnv {
    /**
     * Name of the environment variable. Must be a C_IDENTIFIER
     */
    name: string;
    /**
     * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
     */
    value?: string;
    /**
     * Source for the environment variable's value
     */
    valueFrom?: outputs.DeploymentV1SpecTemplateSpecContainerEnvValueFrom;
}

export interface DeploymentV1SpecTemplateSpecContainerEnvFrom {
    /**
     * The ConfigMap to select from
     */
    configMapRef?: outputs.DeploymentV1SpecTemplateSpecContainerEnvFromConfigMapRef;
    /**
     * An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
     */
    prefix?: string;
    /**
     * The Secret to select from
     */
    secretRef?: outputs.DeploymentV1SpecTemplateSpecContainerEnvFromSecretRef;
}

export interface DeploymentV1SpecTemplateSpecContainerEnvFromConfigMapRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the ConfigMap must be defined
     */
    optional?: boolean;
}

export interface DeploymentV1SpecTemplateSpecContainerEnvFromSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the Secret must be defined
     */
    optional?: boolean;
}

export interface DeploymentV1SpecTemplateSpecContainerEnvValueFrom {
    /**
     * Selects a key of a ConfigMap.
     */
    configMapKeyRef?: outputs.DeploymentV1SpecTemplateSpecContainerEnvValueFromConfigMapKeyRef;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.
     */
    fieldRef?: outputs.DeploymentV1SpecTemplateSpecContainerEnvValueFromFieldRef;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
     */
    resourceFieldRef?: outputs.DeploymentV1SpecTemplateSpecContainerEnvValueFromResourceFieldRef;
    /**
     * Selects a key of a secret in the pod's namespace.
     */
    secretKeyRef?: outputs.DeploymentV1SpecTemplateSpecContainerEnvValueFromSecretKeyRef;
}

export interface DeploymentV1SpecTemplateSpecContainerEnvValueFromConfigMapKeyRef {
    /**
     * The key to select.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the ConfigMap or its key must be defined.
     */
    optional?: boolean;
}

export interface DeploymentV1SpecTemplateSpecContainerEnvValueFromFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface DeploymentV1SpecTemplateSpecContainerEnvValueFromResourceFieldRef {
    containerName?: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface DeploymentV1SpecTemplateSpecContainerEnvValueFromSecretKeyRef {
    /**
     * The key of the secret to select from. Must be a valid secret key.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the Secret or its key must be defined.
     */
    optional?: boolean;
}

export interface DeploymentV1SpecTemplateSpecContainerLifecycle {
    /**
     * post_start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    postStarts?: outputs.DeploymentV1SpecTemplateSpecContainerLifecyclePostStart[];
    /**
     * pre_stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    preStops?: outputs.DeploymentV1SpecTemplateSpecContainerLifecyclePreStop[];
}

export interface DeploymentV1SpecTemplateSpecContainerLifecyclePostStart {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.DeploymentV1SpecTemplateSpecContainerLifecyclePostStartExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.DeploymentV1SpecTemplateSpecContainerLifecyclePostStartHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.DeploymentV1SpecTemplateSpecContainerLifecyclePostStartTcpSocket[];
}

export interface DeploymentV1SpecTemplateSpecContainerLifecyclePostStartExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface DeploymentV1SpecTemplateSpecContainerLifecyclePostStartHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.DeploymentV1SpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface DeploymentV1SpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface DeploymentV1SpecTemplateSpecContainerLifecyclePostStartTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface DeploymentV1SpecTemplateSpecContainerLifecyclePreStop {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.DeploymentV1SpecTemplateSpecContainerLifecyclePreStopExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.DeploymentV1SpecTemplateSpecContainerLifecyclePreStopHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.DeploymentV1SpecTemplateSpecContainerLifecyclePreStopTcpSocket[];
}

export interface DeploymentV1SpecTemplateSpecContainerLifecyclePreStopExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface DeploymentV1SpecTemplateSpecContainerLifecyclePreStopHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.DeploymentV1SpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface DeploymentV1SpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface DeploymentV1SpecTemplateSpecContainerLifecyclePreStopTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface DeploymentV1SpecTemplateSpecContainerLivenessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.DeploymentV1SpecTemplateSpecContainerLivenessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.DeploymentV1SpecTemplateSpecContainerLivenessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.DeploymentV1SpecTemplateSpecContainerLivenessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.DeploymentV1SpecTemplateSpecContainerLivenessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface DeploymentV1SpecTemplateSpecContainerLivenessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface DeploymentV1SpecTemplateSpecContainerLivenessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface DeploymentV1SpecTemplateSpecContainerLivenessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.DeploymentV1SpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface DeploymentV1SpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface DeploymentV1SpecTemplateSpecContainerLivenessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface DeploymentV1SpecTemplateSpecContainerPort {
    /**
     * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
     */
    containerPort: number;
    /**
     * What host IP to bind the external port to.
     */
    hostIp?: string;
    /**
     * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
     */
    hostPort?: number;
    /**
     * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
     */
    name?: string;
    /**
     * Protocol for port. Must be UDP or TCP. Defaults to "TCP".
     */
    protocol?: string;
}

export interface DeploymentV1SpecTemplateSpecContainerReadinessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.DeploymentV1SpecTemplateSpecContainerReadinessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.DeploymentV1SpecTemplateSpecContainerReadinessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.DeploymentV1SpecTemplateSpecContainerReadinessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.DeploymentV1SpecTemplateSpecContainerReadinessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface DeploymentV1SpecTemplateSpecContainerReadinessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface DeploymentV1SpecTemplateSpecContainerReadinessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface DeploymentV1SpecTemplateSpecContainerReadinessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.DeploymentV1SpecTemplateSpecContainerReadinessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface DeploymentV1SpecTemplateSpecContainerReadinessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface DeploymentV1SpecTemplateSpecContainerReadinessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface DeploymentV1SpecTemplateSpecContainerResources {
    /**
     * Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits: {[key: string]: string};
    /**
     * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
     */
    requests: {[key: string]: string};
}

export interface DeploymentV1SpecTemplateSpecContainerSecurityContext {
    /**
     * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
     */
    allowPrivilegeEscalation?: boolean;
    /**
     * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
     */
    capabilities?: outputs.DeploymentV1SpecTemplateSpecContainerSecurityContextCapabilities;
    /**
     * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
     */
    privileged?: boolean;
    /**
     * Whether this container has a read-only root filesystem. Default is false.
     */
    readOnlyRootFilesystem?: boolean;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsGroup?: string;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: boolean;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUser?: string;
    /**
     * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    seLinuxOptions?: outputs.DeploymentV1SpecTemplateSpecContainerSecurityContextSeLinuxOptions;
    /**
     * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     */
    seccompProfile?: outputs.DeploymentV1SpecTemplateSpecContainerSecurityContextSeccompProfile;
}

export interface DeploymentV1SpecTemplateSpecContainerSecurityContextCapabilities {
    /**
     * Added capabilities
     */
    adds?: string[];
    /**
     * Removed capabilities
     */
    drops?: string[];
}

export interface DeploymentV1SpecTemplateSpecContainerSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: string;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: string;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: string;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: string;
}

export interface DeploymentV1SpecTemplateSpecContainerSecurityContextSeccompProfile {
    /**
     * Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
     */
    localhostProfile?: string;
    /**
     * Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
     */
    type?: string;
}

export interface DeploymentV1SpecTemplateSpecContainerStartupProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.DeploymentV1SpecTemplateSpecContainerStartupProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.DeploymentV1SpecTemplateSpecContainerStartupProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.DeploymentV1SpecTemplateSpecContainerStartupProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.DeploymentV1SpecTemplateSpecContainerStartupProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface DeploymentV1SpecTemplateSpecContainerStartupProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface DeploymentV1SpecTemplateSpecContainerStartupProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface DeploymentV1SpecTemplateSpecContainerStartupProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.DeploymentV1SpecTemplateSpecContainerStartupProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface DeploymentV1SpecTemplateSpecContainerStartupProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface DeploymentV1SpecTemplateSpecContainerStartupProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface DeploymentV1SpecTemplateSpecContainerVolumeMount {
    /**
     * Path within the container at which the volume should be mounted. Must not contain ':'.
     */
    mountPath: string;
    /**
     * Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional.
     */
    mountPropagation?: string;
    /**
     * This must match the Name of a Volume.
     */
    name: string;
    /**
     * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
     */
    subPath?: string;
}

export interface DeploymentV1SpecTemplateSpecDnsConfig {
    /**
     * A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
     */
    nameservers?: string[];
    /**
     * A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
     */
    options?: outputs.DeploymentV1SpecTemplateSpecDnsConfigOption[];
    /**
     * A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
     */
    searches?: string[];
}

export interface DeploymentV1SpecTemplateSpecDnsConfigOption {
    /**
     * Name of the option.
     */
    name: string;
    /**
     * Value of the option. Optional: Defaults to empty.
     */
    value?: string;
}

export interface DeploymentV1SpecTemplateSpecHostAlias {
    /**
     * Hostnames for the IP address.
     */
    hostnames: string[];
    /**
     * IP address of the host file entry.
     */
    ip: string;
}

export interface DeploymentV1SpecTemplateSpecImagePullSecret {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
}

export interface DeploymentV1SpecTemplateSpecInitContainer {
    /**
     * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    args?: string[];
    /**
     * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    commands?: string[];
    /**
     * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
     */
    envFroms?: outputs.DeploymentV1SpecTemplateSpecInitContainerEnvFrom[];
    /**
     * List of environment variables to set in the container. Cannot be updated.
     */
    envs?: outputs.DeploymentV1SpecTemplateSpecInitContainerEnv[];
    /**
     * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/
     */
    image?: string;
    /**
     * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images
     */
    imagePullPolicy: string;
    /**
     * Actions that the management system should take in response to container lifecycle events
     */
    lifecycle?: outputs.DeploymentV1SpecTemplateSpecInitContainerLifecycle;
    /**
     * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    livenessProbe?: outputs.DeploymentV1SpecTemplateSpecInitContainerLivenessProbe;
    /**
     * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
     */
    name: string;
    /**
     * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
     */
    ports?: outputs.DeploymentV1SpecTemplateSpecInitContainerPort[];
    /**
     * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    readinessProbe?: outputs.DeploymentV1SpecTemplateSpecInitContainerReadinessProbe;
    /**
     * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources?: outputs.DeploymentV1SpecTemplateSpecInitContainerResources;
    /**
     * Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
     */
    securityContext?: outputs.DeploymentV1SpecTemplateSpecInitContainerSecurityContext;
    /**
     * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     */
    startupProbe?: outputs.DeploymentV1SpecTemplateSpecInitContainerStartupProbe;
    /**
     * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.
     */
    stdin?: boolean;
    /**
     * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.
     */
    stdinOnce?: boolean;
    /**
     * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.
     */
    terminationMessagePath?: string;
    /**
     * Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
     */
    terminationMessagePolicy: string;
    /**
     * Whether this container should allocate a TTY for itself
     */
    tty?: boolean;
    /**
     * Pod volumes to mount into the container's filesystem. Cannot be updated.
     */
    volumeMounts?: outputs.DeploymentV1SpecTemplateSpecInitContainerVolumeMount[];
    /**
     * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
     */
    workingDir?: string;
}

export interface DeploymentV1SpecTemplateSpecInitContainerEnv {
    /**
     * Name of the environment variable. Must be a C_IDENTIFIER
     */
    name: string;
    /**
     * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
     */
    value?: string;
    /**
     * Source for the environment variable's value
     */
    valueFrom?: outputs.DeploymentV1SpecTemplateSpecInitContainerEnvValueFrom;
}

export interface DeploymentV1SpecTemplateSpecInitContainerEnvFrom {
    /**
     * The ConfigMap to select from
     */
    configMapRef?: outputs.DeploymentV1SpecTemplateSpecInitContainerEnvFromConfigMapRef;
    /**
     * An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
     */
    prefix?: string;
    /**
     * The Secret to select from
     */
    secretRef?: outputs.DeploymentV1SpecTemplateSpecInitContainerEnvFromSecretRef;
}

export interface DeploymentV1SpecTemplateSpecInitContainerEnvFromConfigMapRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the ConfigMap must be defined
     */
    optional?: boolean;
}

export interface DeploymentV1SpecTemplateSpecInitContainerEnvFromSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the Secret must be defined
     */
    optional?: boolean;
}

export interface DeploymentV1SpecTemplateSpecInitContainerEnvValueFrom {
    /**
     * Selects a key of a ConfigMap.
     */
    configMapKeyRef?: outputs.DeploymentV1SpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRef;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.
     */
    fieldRef?: outputs.DeploymentV1SpecTemplateSpecInitContainerEnvValueFromFieldRef;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
     */
    resourceFieldRef?: outputs.DeploymentV1SpecTemplateSpecInitContainerEnvValueFromResourceFieldRef;
    /**
     * Selects a key of a secret in the pod's namespace.
     */
    secretKeyRef?: outputs.DeploymentV1SpecTemplateSpecInitContainerEnvValueFromSecretKeyRef;
}

export interface DeploymentV1SpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRef {
    /**
     * The key to select.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the ConfigMap or its key must be defined.
     */
    optional?: boolean;
}

export interface DeploymentV1SpecTemplateSpecInitContainerEnvValueFromFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface DeploymentV1SpecTemplateSpecInitContainerEnvValueFromResourceFieldRef {
    containerName?: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface DeploymentV1SpecTemplateSpecInitContainerEnvValueFromSecretKeyRef {
    /**
     * The key of the secret to select from. Must be a valid secret key.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the Secret or its key must be defined.
     */
    optional?: boolean;
}

export interface DeploymentV1SpecTemplateSpecInitContainerLifecycle {
    /**
     * post_start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    postStarts?: outputs.DeploymentV1SpecTemplateSpecInitContainerLifecyclePostStart[];
    /**
     * pre_stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    preStops?: outputs.DeploymentV1SpecTemplateSpecInitContainerLifecyclePreStop[];
}

export interface DeploymentV1SpecTemplateSpecInitContainerLifecyclePostStart {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.DeploymentV1SpecTemplateSpecInitContainerLifecyclePostStartExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.DeploymentV1SpecTemplateSpecInitContainerLifecyclePostStartHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.DeploymentV1SpecTemplateSpecInitContainerLifecyclePostStartTcpSocket[];
}

export interface DeploymentV1SpecTemplateSpecInitContainerLifecyclePostStartExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface DeploymentV1SpecTemplateSpecInitContainerLifecyclePostStartHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.DeploymentV1SpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface DeploymentV1SpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface DeploymentV1SpecTemplateSpecInitContainerLifecyclePostStartTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface DeploymentV1SpecTemplateSpecInitContainerLifecyclePreStop {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.DeploymentV1SpecTemplateSpecInitContainerLifecyclePreStopExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.DeploymentV1SpecTemplateSpecInitContainerLifecyclePreStopHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.DeploymentV1SpecTemplateSpecInitContainerLifecyclePreStopTcpSocket[];
}

export interface DeploymentV1SpecTemplateSpecInitContainerLifecyclePreStopExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface DeploymentV1SpecTemplateSpecInitContainerLifecyclePreStopHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.DeploymentV1SpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface DeploymentV1SpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface DeploymentV1SpecTemplateSpecInitContainerLifecyclePreStopTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface DeploymentV1SpecTemplateSpecInitContainerLivenessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.DeploymentV1SpecTemplateSpecInitContainerLivenessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.DeploymentV1SpecTemplateSpecInitContainerLivenessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.DeploymentV1SpecTemplateSpecInitContainerLivenessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.DeploymentV1SpecTemplateSpecInitContainerLivenessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface DeploymentV1SpecTemplateSpecInitContainerLivenessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface DeploymentV1SpecTemplateSpecInitContainerLivenessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface DeploymentV1SpecTemplateSpecInitContainerLivenessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.DeploymentV1SpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface DeploymentV1SpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface DeploymentV1SpecTemplateSpecInitContainerLivenessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface DeploymentV1SpecTemplateSpecInitContainerPort {
    /**
     * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
     */
    containerPort: number;
    /**
     * What host IP to bind the external port to.
     */
    hostIp?: string;
    /**
     * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
     */
    hostPort?: number;
    /**
     * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
     */
    name?: string;
    /**
     * Protocol for port. Must be UDP or TCP. Defaults to "TCP".
     */
    protocol?: string;
}

export interface DeploymentV1SpecTemplateSpecInitContainerReadinessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.DeploymentV1SpecTemplateSpecInitContainerReadinessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.DeploymentV1SpecTemplateSpecInitContainerReadinessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.DeploymentV1SpecTemplateSpecInitContainerReadinessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.DeploymentV1SpecTemplateSpecInitContainerReadinessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface DeploymentV1SpecTemplateSpecInitContainerReadinessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface DeploymentV1SpecTemplateSpecInitContainerReadinessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface DeploymentV1SpecTemplateSpecInitContainerReadinessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.DeploymentV1SpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface DeploymentV1SpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface DeploymentV1SpecTemplateSpecInitContainerReadinessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface DeploymentV1SpecTemplateSpecInitContainerResources {
    /**
     * Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits: {[key: string]: string};
    /**
     * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
     */
    requests: {[key: string]: string};
}

export interface DeploymentV1SpecTemplateSpecInitContainerSecurityContext {
    /**
     * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
     */
    allowPrivilegeEscalation?: boolean;
    /**
     * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
     */
    capabilities?: outputs.DeploymentV1SpecTemplateSpecInitContainerSecurityContextCapabilities;
    /**
     * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
     */
    privileged?: boolean;
    /**
     * Whether this container has a read-only root filesystem. Default is false.
     */
    readOnlyRootFilesystem?: boolean;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsGroup?: string;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: boolean;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUser?: string;
    /**
     * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    seLinuxOptions?: outputs.DeploymentV1SpecTemplateSpecInitContainerSecurityContextSeLinuxOptions;
    /**
     * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     */
    seccompProfile?: outputs.DeploymentV1SpecTemplateSpecInitContainerSecurityContextSeccompProfile;
}

export interface DeploymentV1SpecTemplateSpecInitContainerSecurityContextCapabilities {
    /**
     * Added capabilities
     */
    adds?: string[];
    /**
     * Removed capabilities
     */
    drops?: string[];
}

export interface DeploymentV1SpecTemplateSpecInitContainerSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: string;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: string;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: string;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: string;
}

export interface DeploymentV1SpecTemplateSpecInitContainerSecurityContextSeccompProfile {
    /**
     * Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
     */
    localhostProfile?: string;
    /**
     * Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
     */
    type?: string;
}

export interface DeploymentV1SpecTemplateSpecInitContainerStartupProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.DeploymentV1SpecTemplateSpecInitContainerStartupProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.DeploymentV1SpecTemplateSpecInitContainerStartupProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.DeploymentV1SpecTemplateSpecInitContainerStartupProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.DeploymentV1SpecTemplateSpecInitContainerStartupProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface DeploymentV1SpecTemplateSpecInitContainerStartupProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface DeploymentV1SpecTemplateSpecInitContainerStartupProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface DeploymentV1SpecTemplateSpecInitContainerStartupProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.DeploymentV1SpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface DeploymentV1SpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface DeploymentV1SpecTemplateSpecInitContainerStartupProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface DeploymentV1SpecTemplateSpecInitContainerVolumeMount {
    /**
     * Path within the container at which the volume should be mounted. Must not contain ':'.
     */
    mountPath: string;
    /**
     * Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional.
     */
    mountPropagation?: string;
    /**
     * This must match the Name of a Volume.
     */
    name: string;
    /**
     * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
     */
    subPath?: string;
}

export interface DeploymentV1SpecTemplateSpecOs {
    /**
     * Name is the name of the operating system. The currently supported values are linux and windows.
     */
    name: string;
}

export interface DeploymentV1SpecTemplateSpecReadinessGate {
    /**
     * refers to a condition in the pod's condition list with matching type.
     */
    conditionType: string;
}

export interface DeploymentV1SpecTemplateSpecSecurityContext {
    /**
     * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- If unset, the Kubelet will not modify the ownership and permissions of any volume.
     */
    fsGroup?: string;
    /**
     * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir.
     */
    fsGroupChangePolicy?: string;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    runAsGroup?: string;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: boolean;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    runAsUser?: string;
    /**
     * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    seLinuxOptions?: outputs.DeploymentV1SpecTemplateSpecSecurityContextSeLinuxOptions;
    /**
     * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     */
    seccompProfile?: outputs.DeploymentV1SpecTemplateSpecSecurityContextSeccompProfile;
    /**
     * A list of groups applied to the first process run in each container, in addition to the container's primary GID. If unspecified, no groups will be added to any container.
     */
    supplementalGroups?: number[];
    /**
     * holds a list of namespaced sysctls used for the pod.
     */
    sysctls?: outputs.DeploymentV1SpecTemplateSpecSecurityContextSysctl[];
    /**
     * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
     */
    windowsOptions?: outputs.DeploymentV1SpecTemplateSpecSecurityContextWindowsOptions;
}

export interface DeploymentV1SpecTemplateSpecSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: string;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: string;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: string;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: string;
}

export interface DeploymentV1SpecTemplateSpecSecurityContextSeccompProfile {
    /**
     * Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
     */
    localhostProfile?: string;
    /**
     * Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
     */
    type?: string;
}

export interface DeploymentV1SpecTemplateSpecSecurityContextSysctl {
    /**
     * Name of a property to set.
     */
    name: string;
    /**
     * Value of a property to set.
     */
    value: string;
}

export interface DeploymentV1SpecTemplateSpecSecurityContextWindowsOptions {
    /**
     * GMSACredentialSpec is where the GMSA admission webhook inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field
     */
    gmsaCredentialSpec?: string;
    /**
     * GMSACredentialSpecName is the name of the GMSA credential spec to use.
     */
    gmsaCredentialSpecName?: string;
    /**
     * HostProcess determines if a container should be run as a 'Host Process' container. Default value is false.
     */
    hostProcess?: boolean;
    /**
     * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUsername?: string;
}

export interface DeploymentV1SpecTemplateSpecToleration {
    /**
     * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
     */
    effect?: string;
    /**
     * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
     */
    key?: string;
    /**
     * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
     */
    operator?: string;
    /**
     * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
     */
    tolerationSeconds?: string;
    /**
     * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
     */
    value?: string;
}

export interface DeploymentV1SpecTemplateSpecTopologySpreadConstraint {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.DeploymentV1SpecTemplateSpecTopologySpreadConstraintLabelSelector[];
    /**
     * is a set of pod label keys to select the pods over which spreading will be calculated.
     */
    matchLabelKeys?: string[];
    /**
     * describes the degree to which pods may be unevenly distributed.
     */
    maxSkew?: number;
    /**
     * indicates a minimum number of eligible domains.
     */
    minDomains?: number;
    /**
     * indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew.
     */
    nodeAffinityPolicy?: string;
    /**
     * indicates how we will treat node taints when calculating pod topology spread skew.
     */
    nodeTaintsPolicy?: string;
    /**
     * the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology.
     */
    topologyKey?: string;
    /**
     * indicates how to deal with a pod if it doesn't satisfy the spread constraint.
     */
    whenUnsatisfiable?: string;
}

export interface DeploymentV1SpecTemplateSpecTopologySpreadConstraintLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.DeploymentV1SpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface DeploymentV1SpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface DeploymentV1SpecTemplateSpecVolume {
    /**
     * Represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    awsElasticBlockStore?: outputs.DeploymentV1SpecTemplateSpecVolumeAwsElasticBlockStore;
    /**
     * Represents an Azure Data Disk mount on the host and bind mount to the pod.
     */
    azureDisk?: outputs.DeploymentV1SpecTemplateSpecVolumeAzureDisk;
    /**
     * Represents an Azure File Service mount on the host and bind mount to the pod.
     */
    azureFile?: outputs.DeploymentV1SpecTemplateSpecVolumeAzureFile;
    /**
     * Represents a Ceph FS mount on the host that shares a pod's lifetime
     */
    cephFs?: outputs.DeploymentV1SpecTemplateSpecVolumeCephFs;
    /**
     * Represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    cinder?: outputs.DeploymentV1SpecTemplateSpecVolumeCinder;
    /**
     * ConfigMap represents a configMap that should populate this volume
     */
    configMap?: outputs.DeploymentV1SpecTemplateSpecVolumeConfigMap;
    /**
     * Represents a CSI Volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
     */
    csi?: outputs.DeploymentV1SpecTemplateSpecVolumeCsi;
    /**
     * DownwardAPI represents downward API about the pod that should populate this volume
     */
    downwardApi?: outputs.DeploymentV1SpecTemplateSpecVolumeDownwardApi;
    /**
     * EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
     */
    emptyDir?: outputs.DeploymentV1SpecTemplateSpecVolumeEmptyDir;
    /**
     * Represents an ephemeral volume that is handled by a normal storage driver. More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes
     */
    ephemeral?: outputs.DeploymentV1SpecTemplateSpecVolumeEphemeral;
    /**
     * Represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
     */
    fc?: outputs.DeploymentV1SpecTemplateSpecVolumeFc;
    /**
     * Represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.
     */
    flexVolume?: outputs.DeploymentV1SpecTemplateSpecVolumeFlexVolume;
    /**
     * Represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
     */
    flocker?: outputs.DeploymentV1SpecTemplateSpecVolumeFlocker;
    /**
     * Represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    gcePersistentDisk?: outputs.DeploymentV1SpecTemplateSpecVolumeGcePersistentDisk;
    /**
     * GitRepo represents a git repository at a particular revision.
     */
    gitRepo?: outputs.DeploymentV1SpecTemplateSpecVolumeGitRepo;
    /**
     * Represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
     */
    glusterfs?: outputs.DeploymentV1SpecTemplateSpecVolumeGlusterfs;
    /**
     * Represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     */
    hostPath?: outputs.DeploymentV1SpecTemplateSpecVolumeHostPath;
    /**
     * Represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
     */
    iscsi?: outputs.DeploymentV1SpecTemplateSpecVolumeIscsi;
    /**
     * Represents a mounted local storage device such as a disk, partition or directory. Local volumes can only be used as a statically created PersistentVolume. Dynamic provisioning is not supported yet. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
     */
    local?: outputs.DeploymentV1SpecTemplateSpecVolumeLocal;
    /**
     * Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    nfs?: outputs.DeploymentV1SpecTemplateSpecVolumeNfs;
    /**
     * The specification of a persistent volume.
     */
    persistentVolumeClaim?: outputs.DeploymentV1SpecTemplateSpecVolumePersistentVolumeClaim;
    /**
     * Represents a PhotonController persistent disk attached and mounted on kubelets host machine
     */
    photonPersistentDisk?: outputs.DeploymentV1SpecTemplateSpecVolumePhotonPersistentDisk;
    /**
     * Projected represents a single volume that projects several volume sources into the same directory. More info: https://kubernetes.io/docs/concepts/storage/volumes/#projected
     */
    projecteds?: outputs.DeploymentV1SpecTemplateSpecVolumeProjected[];
    /**
     * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
     */
    quobyte?: outputs.DeploymentV1SpecTemplateSpecVolumeQuobyte;
    /**
     * Represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
     */
    rbd?: outputs.DeploymentV1SpecTemplateSpecVolumeRbd;
    /**
     * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    secret?: outputs.DeploymentV1SpecTemplateSpecVolumeSecret;
    /**
     * Represents a vSphere volume attached and mounted on kubelets host machine
     */
    vsphereVolume?: outputs.DeploymentV1SpecTemplateSpecVolumeVsphereVolume;
}

export interface DeploymentV1SpecTemplateSpecVolumeAwsElasticBlockStore {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    fsType?: string;
    /**
     * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
     */
    partition?: number;
    /**
     * Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    readOnly?: boolean;
    /**
     * Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    volumeId: string;
}

export interface DeploymentV1SpecTemplateSpecVolumeAzureDisk {
    /**
     * Host Caching mode: None, Read Only, Read Write.
     */
    cachingMode: string;
    /**
     * The URI the data disk in the blob storage
     */
    dataDiskUri: string;
    /**
     * The Name of the data disk in the blob storage
     */
    diskName: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * The type for the data disk. Expected values: Shared, Dedicated, Managed. Defaults to Shared
     */
    kind: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
}

export interface DeploymentV1SpecTemplateSpecVolumeAzureFile {
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * The name of secret that contains Azure Storage Account Name and Key
     */
    secretName: string;
    /**
     * The namespace of the secret that contains Azure Storage Account Name and Key. For Kubernetes up to 1.18.x the default is the same as the Pod. For Kubernetes 1.19.x and later the default is "default" namespace.
     */
    secretNamespace?: string;
    /**
     * Share Name
     */
    shareName: string;
}

export interface DeploymentV1SpecTemplateSpecVolumeCephFs {
    /**
     * Monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    monitors: string[];
    /**
     * Used as the mounted root, rather than the full Ceph tree, default is /
     */
    path?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to `false` (read/write). More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    readOnly?: boolean;
    /**
     * The path to key ring for User, default is `/etc/ceph/user.secret`. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    secretFile?: string;
    /**
     * Reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    secretRef?: outputs.DeploymentV1SpecTemplateSpecVolumeCephFsSecretRef;
    /**
     * User is the rados user name, default is admin. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    user?: string;
}

export interface DeploymentV1SpecTemplateSpecVolumeCephFsSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface DeploymentV1SpecTemplateSpecVolumeCinder {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    fsType?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write). More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    readOnly?: boolean;
    /**
     * Volume ID used to identify the volume in Cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    volumeId: string;
}

export interface DeploymentV1SpecTemplateSpecVolumeConfigMap {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.DeploymentV1SpecTemplateSpecVolumeConfigMapItem[];
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Optional: Specify whether the ConfigMap or its keys must be defined.
     */
    optional?: boolean;
}

export interface DeploymentV1SpecTemplateSpecVolumeConfigMapItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface DeploymentV1SpecTemplateSpecVolumeCsi {
    /**
     * the name of the volume driver to use. More info: https://kubernetes.io/docs/concepts/storage/volumes/#csi
     */
    driver: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * A reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls.
     */
    nodePublishSecretRef?: outputs.DeploymentV1SpecTemplateSpecVolumeCsiNodePublishSecretRef;
    /**
     * Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
     */
    readOnly?: boolean;
    /**
     * Attributes of the volume to publish.
     */
    volumeAttributes?: {[key: string]: string};
}

export interface DeploymentV1SpecTemplateSpecVolumeCsiNodePublishSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
}

export interface DeploymentV1SpecTemplateSpecVolumeDownwardApi {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.DeploymentV1SpecTemplateSpecVolumeDownwardApiItem[];
}

export interface DeploymentV1SpecTemplateSpecVolumeDownwardApiItem {
    /**
     * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
     */
    fieldRef: outputs.DeploymentV1SpecTemplateSpecVolumeDownwardApiItemFieldRef;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
     */
    path: string;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
     */
    resourceFieldRef?: outputs.DeploymentV1SpecTemplateSpecVolumeDownwardApiItemResourceFieldRef;
}

export interface DeploymentV1SpecTemplateSpecVolumeDownwardApiItemFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface DeploymentV1SpecTemplateSpecVolumeDownwardApiItemResourceFieldRef {
    containerName: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface DeploymentV1SpecTemplateSpecVolumeEmptyDir {
    /**
     * What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be one of ["" "Memory" "HugePages" "HugePages-2Mi" "HugePages-1Gi"]. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
     */
    medium?: string;
    /**
     * Total amount of local storage required for this EmptyDir volume.
     */
    sizeLimit?: string;
}

export interface DeploymentV1SpecTemplateSpecVolumeEphemeral {
    /**
     * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC.
     */
    volumeClaimTemplate: outputs.DeploymentV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplate;
}

export interface DeploymentV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplate {
    /**
     * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
     */
    metadata?: outputs.DeploymentV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadata;
    /**
     * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
     */
    spec: outputs.DeploymentV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpec;
}

export interface DeploymentV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadata {
    /**
     * An unstructured key value map stored with the persistent volume claim that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the persistent volume claim. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
}

export interface DeploymentV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpec {
    /**
     * A set of the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
     */
    accessModes: string[];
    /**
     * A list of the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources: outputs.DeploymentV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResources;
    /**
     * A label query over volumes to consider for binding.
     */
    selector?: outputs.DeploymentV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelector;
    /**
     * Name of the storage class requested by the claim
     */
    storageClassName: string;
    /**
     * Defines what type of volume is required by the claim.
     */
    volumeMode: string;
    /**
     * The binding reference to the PersistentVolume backing this claim.
     */
    volumeName: string;
}

export interface DeploymentV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResources {
    /**
     * Map describing the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits?: {[key: string]: string};
    /**
     * Map describing the minimum amount of compute resources required. If this is omitted for a container, it defaults to `limits` if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    requests?: {[key: string]: string};
}

export interface DeploymentV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.DeploymentV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface DeploymentV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface DeploymentV1SpecTemplateSpecVolumeFc {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * FC target lun number
     */
    lun: number;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * FC target worldwide names (WWNs)
     */
    targetWwNs: string[];
}

export interface DeploymentV1SpecTemplateSpecVolumeFlexVolume {
    /**
     * Driver is the name of the driver to use for this volume.
     */
    driver: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
     */
    fsType?: string;
    /**
     * Extra command options if any.
     */
    options?: {[key: string]: string};
    /**
     * Whether to force the ReadOnly setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * Reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
     */
    secretRef?: outputs.DeploymentV1SpecTemplateSpecVolumeFlexVolumeSecretRef;
}

export interface DeploymentV1SpecTemplateSpecVolumeFlexVolumeSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface DeploymentV1SpecTemplateSpecVolumeFlocker {
    /**
     * Name of the dataset stored as metadata > name on the dataset for Flocker should be considered as deprecated
     */
    datasetName?: string;
    /**
     * UUID of the dataset. This is unique identifier of a Flocker dataset
     */
    datasetUuid?: string;
}

export interface DeploymentV1SpecTemplateSpecVolumeGcePersistentDisk {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    fsType?: string;
    /**
     * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    partition?: number;
    /**
     * Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    pdName: string;
    /**
     * Whether to force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    readOnly?: boolean;
}

export interface DeploymentV1SpecTemplateSpecVolumeGitRepo {
    /**
     * Target directory name. Must not contain or start with '..'. If '.' is supplied, the volume directory will be the git repository. Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
     */
    directory?: string;
    /**
     * Repository URL
     */
    repository?: string;
    /**
     * Commit hash for the specified revision.
     */
    revision?: string;
}

export interface DeploymentV1SpecTemplateSpecVolumeGlusterfs {
    /**
     * The endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    endpointsName: string;
    /**
     * The Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    path: string;
    /**
     * Whether to force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    readOnly?: boolean;
}

export interface DeploymentV1SpecTemplateSpecVolumeHostPath {
    /**
     * Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     */
    path?: string;
    /**
     * Type for HostPath volume. Allowed values are "" (default), DirectoryOrCreate, Directory, FileOrCreate, File, Socket, CharDevice and BlockDevice
     */
    type?: string;
}

export interface DeploymentV1SpecTemplateSpecVolumeIscsi {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
     */
    fsType?: string;
    /**
     * Target iSCSI Qualified Name.
     */
    iqn: string;
    /**
     * iSCSI interface name that uses an iSCSI transport. Defaults to 'default' (tcp).
     */
    iscsiInterface?: string;
    /**
     * iSCSI target lun number.
     */
    lun?: number;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false.
     */
    readOnly?: boolean;
    /**
     * iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
     */
    targetPortal: string;
}

export interface DeploymentV1SpecTemplateSpecVolumeLocal {
    /**
     * Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
     */
    path?: string;
}

export interface DeploymentV1SpecTemplateSpecVolumeNfs {
    /**
     * Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    path: string;
    /**
     * Whether to force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    readOnly?: boolean;
    /**
     * Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    server: string;
}

export interface DeploymentV1SpecTemplateSpecVolumePersistentVolumeClaim {
    /**
     * ClaimName is the name of a PersistentVolumeClaim in the same
     */
    claimName?: string;
    /**
     * Will force the ReadOnly setting in VolumeMounts.
     */
    readOnly?: boolean;
}

export interface DeploymentV1SpecTemplateSpecVolumePhotonPersistentDisk {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * ID that identifies Photon Controller persistent disk
     */
    pdId: string;
}

export interface DeploymentV1SpecTemplateSpecVolumeProjected {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * Source of the volume to project in the directory.
     */
    sources: outputs.DeploymentV1SpecTemplateSpecVolumeProjectedSource[];
}

export interface DeploymentV1SpecTemplateSpecVolumeProjectedSource {
    /**
     * ConfigMap represents a configMap that should populate this volume
     */
    configMaps?: outputs.DeploymentV1SpecTemplateSpecVolumeProjectedSourceConfigMap[];
    /**
     * DownwardAPI represents downward API about the pod that should populate this volume
     */
    downwardApi?: outputs.DeploymentV1SpecTemplateSpecVolumeProjectedSourceDownwardApi;
    /**
     * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    secrets?: outputs.DeploymentV1SpecTemplateSpecVolumeProjectedSourceSecret[];
    /**
     * A projected service account token volume
     */
    serviceAccountToken?: outputs.DeploymentV1SpecTemplateSpecVolumeProjectedSourceServiceAccountToken;
}

export interface DeploymentV1SpecTemplateSpecVolumeProjectedSourceConfigMap {
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.DeploymentV1SpecTemplateSpecVolumeProjectedSourceConfigMapItem[];
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Optional: Specify whether the ConfigMap or it's keys must be defined.
     */
    optional?: boolean;
}

export interface DeploymentV1SpecTemplateSpecVolumeProjectedSourceConfigMapItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface DeploymentV1SpecTemplateSpecVolumeProjectedSourceDownwardApi {
    /**
     * Represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
     */
    items?: outputs.DeploymentV1SpecTemplateSpecVolumeProjectedSourceDownwardApiItem[];
}

export interface DeploymentV1SpecTemplateSpecVolumeProjectedSourceDownwardApiItem {
    /**
     * Selects a field of the pod: only annotations, labels, name and namespace are supported.
     */
    fieldRef?: outputs.DeploymentV1SpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRef;
    /**
     * Mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
     */
    path: string;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
     */
    resourceFieldRef?: outputs.DeploymentV1SpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRef;
}

export interface DeploymentV1SpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to 'v1'.
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface DeploymentV1SpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRef {
    containerName: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface DeploymentV1SpecTemplateSpecVolumeProjectedSourceSecret {
    /**
     * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.DeploymentV1SpecTemplateSpecVolumeProjectedSourceSecretItem[];
    /**
     * Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    name?: string;
    /**
     * Optional: Specify whether the Secret or it's keys must be defined.
     */
    optional?: boolean;
}

export interface DeploymentV1SpecTemplateSpecVolumeProjectedSourceSecretItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface DeploymentV1SpecTemplateSpecVolumeProjectedSourceServiceAccountToken {
    /**
     * Audience is the intended audience of the token
     */
    audience?: string;
    /**
     * ExpirationSeconds is the expected duration of validity of the service account token. It defaults to 1 hour and must be at least 10 minutes (600 seconds).
     */
    expirationSeconds?: number;
    /**
     * Path specifies a relative path to the mount point of the projected volume.
     */
    path: string;
}

export interface DeploymentV1SpecTemplateSpecVolumeQuobyte {
    /**
     * Group to map volume access to Default is no group
     */
    group?: string;
    /**
     * Whether to force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
     */
    registry: string;
    /**
     * User to map volume access to Defaults to serivceaccount user
     */
    user?: string;
    /**
     * Volume is a string that references an already created Quobyte volume by name.
     */
    volume: string;
}

export interface DeploymentV1SpecTemplateSpecVolumeRbd {
    /**
     * A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    cephMonitors: string[];
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
     */
    fsType?: string;
    /**
     * Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    keyring: string;
    /**
     * The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    radosUser?: string;
    /**
     * The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    rbdImage: string;
    /**
     * The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it.
     */
    rbdPool?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    readOnly?: boolean;
    /**
     * Name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    secretRef?: outputs.DeploymentV1SpecTemplateSpecVolumeRbdSecretRef;
}

export interface DeploymentV1SpecTemplateSpecVolumeRbdSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface DeploymentV1SpecTemplateSpecVolumeSecret {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.DeploymentV1SpecTemplateSpecVolumeSecretItem[];
    /**
     * Optional: Specify whether the Secret or its keys must be defined.
     */
    optional?: boolean;
    /**
     * Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    secretName?: string;
}

export interface DeploymentV1SpecTemplateSpecVolumeSecretItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface DeploymentV1SpecTemplateSpecVolumeVsphereVolume {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * Path that identifies vSphere volume vmdk
     */
    volumePath: string;
}

export interface DeploymentV1Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface EndpointSliceV1Endpoint {
    /**
     * addresses of this endpoint. The contents of this field are interpreted according to the corresponding EndpointSlice addressType field.
     */
    addresses: string[];
    /**
     * condition contains information about the current status of the endpoint.
     */
    condition?: outputs.EndpointSliceV1EndpointCondition;
    /**
     * hostname of this endpoint. This field may be used by consumers of endpoints to distinguish endpoints from each other.
     */
    hostname?: string;
    /**
     * nodeName represents the name of the Node hosting this endpoint. This can be used to determine endpoints local to a Node.
     */
    nodeName?: string;
    /**
     * targetRef is a reference to a Kubernetes object that represents this endpoint.
     */
    targetRef?: outputs.EndpointSliceV1EndpointTargetRef;
    /**
     * zone is the name of the Zone this endpoint exists in.
     */
    zone?: string;
}

export interface EndpointSliceV1EndpointCondition {
    /**
     * ready indicates that this endpoint is prepared to receive traffic, according to whatever system is managing the endpoint.
     */
    ready?: boolean;
    /**
     * serving is identical to ready except that it is set regardless of the terminating state of endpoints.
     */
    serving?: boolean;
    /**
     * terminating indicates that this endpoint is terminating.
     */
    terminating?: boolean;
}

export interface EndpointSliceV1EndpointTargetRef {
    /**
     * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
     */
    fieldPath?: string;
    /**
     * Name of the referent.
     */
    name: string;
    /**
     * Namespace of the referent.
     */
    namespace?: string;
    /**
     * Specific resourceVersion to which this reference is made, if any.
     */
    resourceVersion?: string;
    /**
     * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
     */
    uid?: string;
}

export interface EndpointSliceV1Metadata {
    /**
     * An unstructured key value map stored with the endpoint_slice that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the endpoint_slice. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the endpoint_slice, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the endpoint_slice must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this endpoint_slice that can be used by clients to determine when endpoint_slice has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this endpoint_slice. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface EndpointSliceV1Port {
    /**
     * The application protocol for this port. This is used as a hint for implementations to offer richer behavior for protocols that they understand.
     */
    appProtocol: string;
    /**
     * name represents the name of this port. All ports in an EndpointSlice must have a unique name.
     */
    name?: string;
    /**
     * port represents the port number of the endpoint.
     */
    port: string;
    /**
     * protocol represents the IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.
     */
    protocol?: string;
}

export interface EndpointsMetadata {
    /**
     * An unstructured key value map stored with the endpoints that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the endpoints. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the endpoints, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the endpoints must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this endpoints that can be used by clients to determine when endpoints has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this endpoints. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface EndpointsSubset {
    /**
     * IP address which offers the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.
     */
    addresses?: outputs.EndpointsSubsetAddress[];
    /**
     * IP address which offers the related ports but is not currently marked as ready because it have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.
     */
    notReadyAddresses?: outputs.EndpointsSubsetNotReadyAddress[];
    /**
     * Port number available on the related IP addresses.
     */
    ports?: outputs.EndpointsSubsetPort[];
}

export interface EndpointsSubsetAddress {
    /**
     * The Hostname of this endpoint.
     */
    hostname?: string;
    /**
     * The IP of this endpoint. May not be loopback (127.0.0.0/8), link-local (169.254.0.0/16), or link-local multicast ((224.0.0.0/24).
     */
    ip: string;
    /**
     * Node hosting this endpoint. This can be used to determine endpoints local to a node.
     */
    nodeName?: string;
}

export interface EndpointsSubsetNotReadyAddress {
    /**
     * The Hostname of this endpoint.
     */
    hostname?: string;
    /**
     * The IP of this endpoint. May not be loopback (127.0.0.0/8), link-local (169.254.0.0/16), or link-local multicast ((224.0.0.0/24).
     */
    ip: string;
    /**
     * Node hosting this endpoint. This can be used to determine endpoints local to a node.
     */
    nodeName?: string;
}

export interface EndpointsSubsetPort {
    /**
     * The name of this port within the endpoint. Must be a DNS_LABEL. Optional if only one Port is defined on this endpoint.
     */
    name?: string;
    /**
     * The port that will be exposed by this endpoint.
     */
    port: number;
    /**
     * The IP protocol for this port. Supports `TCP` and `UDP`. Default is `TCP`.
     */
    protocol?: string;
}

export interface EndpointsV1Metadata {
    /**
     * An unstructured key value map stored with the endpoints that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the endpoints. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the endpoints, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the endpoints must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this endpoints that can be used by clients to determine when endpoints has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this endpoints. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface EndpointsV1Subset {
    /**
     * IP address which offers the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.
     */
    addresses?: outputs.EndpointsV1SubsetAddress[];
    /**
     * IP address which offers the related ports but is not currently marked as ready because it have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.
     */
    notReadyAddresses?: outputs.EndpointsV1SubsetNotReadyAddress[];
    /**
     * Port number available on the related IP addresses.
     */
    ports?: outputs.EndpointsV1SubsetPort[];
}

export interface EndpointsV1SubsetAddress {
    /**
     * The Hostname of this endpoint.
     */
    hostname?: string;
    /**
     * The IP of this endpoint. May not be loopback (127.0.0.0/8), link-local (169.254.0.0/16), or link-local multicast ((224.0.0.0/24).
     */
    ip: string;
    /**
     * Node hosting this endpoint. This can be used to determine endpoints local to a node.
     */
    nodeName?: string;
}

export interface EndpointsV1SubsetNotReadyAddress {
    /**
     * The Hostname of this endpoint.
     */
    hostname?: string;
    /**
     * The IP of this endpoint. May not be loopback (127.0.0.0/8), link-local (169.254.0.0/16), or link-local multicast ((224.0.0.0/24).
     */
    ip: string;
    /**
     * Node hosting this endpoint. This can be used to determine endpoints local to a node.
     */
    nodeName?: string;
}

export interface EndpointsV1SubsetPort {
    /**
     * The name of this port within the endpoint. Must be a DNS_LABEL. Optional if only one Port is defined on this endpoint.
     */
    name?: string;
    /**
     * The port that will be exposed by this endpoint.
     */
    port: number;
    /**
     * The IP protocol for this port. Supports `TCP` and `UDP`. Default is `TCP`.
     */
    protocol?: string;
}

export interface EnvEnv {
    /**
     * Name of the environment variable. Must be a C_IDENTIFIER
     */
    name: string;
    /**
     * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
     */
    value?: string;
    /**
     * Source for the environment variable's value
     */
    valueFrom?: outputs.EnvEnvValueFrom;
}

export interface EnvEnvValueFrom {
    /**
     * Selects a key of a ConfigMap.
     */
    configMapKeyRef?: outputs.EnvEnvValueFromConfigMapKeyRef;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.
     */
    fieldRef?: outputs.EnvEnvValueFromFieldRef;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
     */
    resourceFieldRef?: outputs.EnvEnvValueFromResourceFieldRef;
    /**
     * Selects a key of a secret in the pod's namespace.
     */
    secretKeyRef?: outputs.EnvEnvValueFromSecretKeyRef;
}

export interface EnvEnvValueFromConfigMapKeyRef {
    /**
     * The key to select.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the ConfigMap or its key must be defined.
     */
    optional?: boolean;
}

export interface EnvEnvValueFromFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface EnvEnvValueFromResourceFieldRef {
    containerName?: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface EnvEnvValueFromSecretKeyRef {
    /**
     * The key of the secret to select from. Must be a valid secret key.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the Secret or its key must be defined.
     */
    optional?: boolean;
}

export interface EnvMetadata {
    /**
     * The name of the resource.
     */
    name: string;
    /**
     * The namespace of the resource.
     */
    namespace?: string;
}

export interface GetConfigMapMetadata {
    /**
     * An unstructured key value map stored with the config_map that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the config_map. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the config_map, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the config_map must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this config_map that can be used by clients to determine when config_map has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this config_map. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface GetConfigMapV1Metadata {
    /**
     * An unstructured key value map stored with the config_map that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the config_map. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the config_map, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the config_map must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this config_map that can be used by clients to determine when config_map has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this config_map. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface GetEndpointsV1Metadata {
    /**
     * An unstructured key value map stored with the endpoints that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the endpoints. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the endpoints, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the endpoints must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this endpoints that can be used by clients to determine when endpoints has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this endpoints. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface GetEndpointsV1Subset {
    /**
     * IP address which offers the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.
     */
    addresses?: outputs.GetEndpointsV1SubsetAddress[];
    /**
     * IP address which offers the related ports but is not currently marked as ready because it have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.
     */
    notReadyAddresses?: outputs.GetEndpointsV1SubsetNotReadyAddress[];
    /**
     * Port number available on the related IP addresses.
     */
    ports?: outputs.GetEndpointsV1SubsetPort[];
}

export interface GetEndpointsV1SubsetAddress {
    /**
     * The Hostname of this endpoint.
     */
    hostname?: string;
    /**
     * The IP of this endpoint. May not be loopback (127.0.0.0/8), link-local (169.254.0.0/16), or link-local multicast ((224.0.0.0/24).
     */
    ip: string;
    /**
     * Node hosting this endpoint. This can be used to determine endpoints local to a node.
     */
    nodeName?: string;
}

export interface GetEndpointsV1SubsetNotReadyAddress {
    /**
     * The Hostname of this endpoint.
     */
    hostname?: string;
    /**
     * The IP of this endpoint. May not be loopback (127.0.0.0/8), link-local (169.254.0.0/16), or link-local multicast ((224.0.0.0/24).
     */
    ip: string;
    /**
     * Node hosting this endpoint. This can be used to determine endpoints local to a node.
     */
    nodeName?: string;
}

export interface GetEndpointsV1SubsetPort {
    /**
     * The name of this port within the endpoint. Must be a DNS_LABEL. Optional if only one Port is defined on this endpoint.
     */
    name?: string;
    /**
     * The port that will be exposed by this endpoint.
     */
    port: number;
    /**
     * The IP protocol for this port. Supports `TCP` and `UDP`. Default is `TCP`.
     */
    protocol?: string;
}

export interface GetIngressMetadata {
    /**
     * An unstructured key value map stored with the ingress that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the ingress. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the ingress, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the ingress must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this ingress that can be used by clients to determine when ingress has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this ingress. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface GetIngressSpec {
    backends: outputs.GetIngressSpecBackend[];
    ingressClassName: string;
    rules: outputs.GetIngressSpecRule[];
    tls: outputs.GetIngressSpecTl[];
}

export interface GetIngressSpecBackend {
    serviceName: string;
    servicePort: string;
}

export interface GetIngressSpecRule {
    host: string;
    https: outputs.GetIngressSpecRuleHttp[];
}

export interface GetIngressSpecRuleHttp {
    paths: outputs.GetIngressSpecRuleHttpPath[];
}

export interface GetIngressSpecRuleHttpPath {
    backends: outputs.GetIngressSpecRuleHttpPathBackend[];
    path: string;
}

export interface GetIngressSpecRuleHttpPathBackend {
    serviceName: string;
    servicePort: string;
}

export interface GetIngressSpecTl {
    hosts: string[];
    secretName: string;
}

export interface GetIngressStatus {
    loadBalancers: outputs.GetIngressStatusLoadBalancer[];
}

export interface GetIngressStatusLoadBalancer {
    ingresses: outputs.GetIngressStatusLoadBalancerIngress[];
}

export interface GetIngressStatusLoadBalancerIngress {
    hostname: string;
    ip: string;
}

export interface GetIngressV1Metadata {
    /**
     * An unstructured key value map stored with the ingress that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the ingress. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the ingress, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the ingress must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this ingress that can be used by clients to determine when ingress has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this ingress. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface GetIngressV1Spec {
    defaultBackends: outputs.GetIngressV1SpecDefaultBackend[];
    ingressClassName: string;
    rules: outputs.GetIngressV1SpecRule[];
    tls: outputs.GetIngressV1SpecTl[];
}

export interface GetIngressV1SpecDefaultBackend {
    resources: outputs.GetIngressV1SpecDefaultBackendResource[];
    services: outputs.GetIngressV1SpecDefaultBackendService[];
}

export interface GetIngressV1SpecDefaultBackendResource {
    apiGroup: string;
    kind: string;
    name: string;
}

export interface GetIngressV1SpecDefaultBackendService {
    name: string;
    ports: outputs.GetIngressV1SpecDefaultBackendServicePort[];
}

export interface GetIngressV1SpecDefaultBackendServicePort {
    name: string;
    number: number;
}

export interface GetIngressV1SpecRule {
    host: string;
    https: outputs.GetIngressV1SpecRuleHttp[];
}

export interface GetIngressV1SpecRuleHttp {
    paths: outputs.GetIngressV1SpecRuleHttpPath[];
}

export interface GetIngressV1SpecRuleHttpPath {
    backends: outputs.GetIngressV1SpecRuleHttpPathBackend[];
    path: string;
    pathType: string;
}

export interface GetIngressV1SpecRuleHttpPathBackend {
    resources: outputs.GetIngressV1SpecRuleHttpPathBackendResource[];
    services: outputs.GetIngressV1SpecRuleHttpPathBackendService[];
}

export interface GetIngressV1SpecRuleHttpPathBackendResource {
    apiGroup: string;
    kind: string;
    name: string;
}

export interface GetIngressV1SpecRuleHttpPathBackendService {
    name: string;
    ports: outputs.GetIngressV1SpecRuleHttpPathBackendServicePort[];
}

export interface GetIngressV1SpecRuleHttpPathBackendServicePort {
    name: string;
    number: number;
}

export interface GetIngressV1SpecTl {
    hosts: string[];
    secretName: string;
}

export interface GetIngressV1Status {
    loadBalancers: outputs.GetIngressV1StatusLoadBalancer[];
}

export interface GetIngressV1StatusLoadBalancer {
    ingresses: outputs.GetIngressV1StatusLoadBalancerIngress[];
}

export interface GetIngressV1StatusLoadBalancerIngress {
    hostname: string;
    ip: string;
}

export interface GetMutatingWebhookConfigurationV1Metadata {
    /**
     * An unstructured key value map stored with the mutating webhook configuration that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the mutating webhook configuration. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the mutating webhook configuration, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * An opaque value that represents the internal version of this mutating webhook configuration that can be used by clients to determine when mutating webhook configuration has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this mutating webhook configuration. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface GetMutatingWebhookConfigurationV1Webhook {
    admissionReviewVersions: string[];
    clientConfigs: outputs.GetMutatingWebhookConfigurationV1WebhookClientConfig[];
    failurePolicy: string;
    matchPolicy: string;
    name: string;
    namespaceSelectors: outputs.GetMutatingWebhookConfigurationV1WebhookNamespaceSelector[];
    objectSelectors: outputs.GetMutatingWebhookConfigurationV1WebhookObjectSelector[];
    reinvocationPolicy: string;
    rules: outputs.GetMutatingWebhookConfigurationV1WebhookRule[];
    sideEffects: string;
    timeoutSeconds: number;
}

export interface GetMutatingWebhookConfigurationV1WebhookClientConfig {
    caBundle: string;
    services: outputs.GetMutatingWebhookConfigurationV1WebhookClientConfigService[];
    url: string;
}

export interface GetMutatingWebhookConfigurationV1WebhookClientConfigService {
    name: string;
    namespace: string;
    path: string;
    port: number;
}

export interface GetMutatingWebhookConfigurationV1WebhookNamespaceSelector {
    matchExpressions: outputs.GetMutatingWebhookConfigurationV1WebhookNamespaceSelectorMatchExpression[];
    matchLabels: {[key: string]: string};
}

export interface GetMutatingWebhookConfigurationV1WebhookNamespaceSelectorMatchExpression {
    key: string;
    operator: string;
    values: string[];
}

export interface GetMutatingWebhookConfigurationV1WebhookObjectSelector {
    matchExpressions: outputs.GetMutatingWebhookConfigurationV1WebhookObjectSelectorMatchExpression[];
    matchLabels: {[key: string]: string};
}

export interface GetMutatingWebhookConfigurationV1WebhookObjectSelectorMatchExpression {
    key: string;
    operator: string;
    values: string[];
}

export interface GetMutatingWebhookConfigurationV1WebhookRule {
    apiGroups: string[];
    apiVersions: string[];
    operations: string[];
    resources: string[];
    scope: string;
}

export interface GetNamespaceMetadata {
    /**
     * An unstructured key value map stored with the namespace that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the namespace. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the namespace, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * An opaque value that represents the internal version of this namespace that can be used by clients to determine when namespace has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this namespace. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface GetNamespaceSpec {
    finalizers: string[];
}

export interface GetNamespaceV1Metadata {
    /**
     * An unstructured key value map stored with the namespace that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the namespace. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the namespace, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * An opaque value that represents the internal version of this namespace that can be used by clients to determine when namespace has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this namespace. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface GetNamespaceV1Spec {
    finalizers: string[];
}

export interface GetNodesMetadata {
    /**
     * Select nodes with these labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels: {[key: string]: string};
}

export interface GetNodesNode {
    metadatas: outputs.GetNodesNodeMetadata[];
    specs: outputs.GetNodesNodeSpec[];
    statuses: outputs.GetNodesNodeStatus[];
}

export interface GetNodesNodeMetadata {
    annotations: {[key: string]: string};
    generation: number;
    labels: {[key: string]: string};
    name: string;
    resourceVersion: string;
    uid: string;
}

export interface GetNodesNodeSpec {
    podCidr: string;
    podCidrs: string[];
    providerId: string;
    taints: outputs.GetNodesNodeSpecTaint[];
    unschedulable: boolean;
}

export interface GetNodesNodeSpecTaint {
    effect: string;
    key: string;
    value: string;
}

export interface GetNodesNodeStatus {
    addresses: outputs.GetNodesNodeStatusAddress[];
    allocatable: {[key: string]: string};
    capacity: {[key: string]: string};
    nodeInfos: outputs.GetNodesNodeStatusNodeInfo[];
}

export interface GetNodesNodeStatusAddress {
    address: string;
    type: string;
}

export interface GetNodesNodeStatusNodeInfo {
    architecture: string;
    bootId: string;
    containerRuntimeVersion: string;
    kernelVersion: string;
    kubeProxyVersion: string;
    kubeletVersion: string;
    machineId: string;
    operatingSystem: string;
    osImage: string;
    systemUuid: string;
}

export interface GetPersistentVolumeClaimMetadata {
    /**
     * An unstructured key value map stored with the persistent volume claim that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the persistent volume claim. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the persistent volume claim, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the persistent volume claim must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this persistent volume claim that can be used by clients to determine when persistent volume claim has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this persistent volume claim. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface GetPersistentVolumeClaimSpec {
    /**
     * A set of the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
     */
    accessModes: string[];
    /**
     * A list of the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources: outputs.GetPersistentVolumeClaimSpecResource[];
    /**
     * A label query over volumes to consider for binding.
     */
    selectors?: outputs.GetPersistentVolumeClaimSpecSelector[];
    /**
     * Name of the storage class requested by the claim
     */
    storageClassName: string;
    /**
     * Defines what type of volume is required by the claim.
     */
    volumeMode: string;
    /**
     * The binding reference to the PersistentVolume backing this claim.
     */
    volumeName: string;
}

export interface GetPersistentVolumeClaimSpecResource {
    limits: {[key: string]: string};
    requests: {[key: string]: string};
}

export interface GetPersistentVolumeClaimSpecSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.GetPersistentVolumeClaimSpecSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface GetPersistentVolumeClaimSpecSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface GetPersistentVolumeClaimV1Metadata {
    /**
     * An unstructured key value map stored with the persistent volume claim that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the persistent volume claim. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the persistent volume claim, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the persistent volume claim must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this persistent volume claim that can be used by clients to determine when persistent volume claim has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this persistent volume claim. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface GetPersistentVolumeClaimV1Spec {
    /**
     * A set of the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
     */
    accessModes: string[];
    /**
     * A list of the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources: outputs.GetPersistentVolumeClaimV1SpecResource[];
    /**
     * A label query over volumes to consider for binding.
     */
    selectors?: outputs.GetPersistentVolumeClaimV1SpecSelector[];
    /**
     * Name of the storage class requested by the claim
     */
    storageClassName: string;
    /**
     * Defines what type of volume is required by the claim.
     */
    volumeMode: string;
    /**
     * The binding reference to the PersistentVolume backing this claim.
     */
    volumeName: string;
}

export interface GetPersistentVolumeClaimV1SpecResource {
    limits: {[key: string]: string};
    requests: {[key: string]: string};
}

export interface GetPersistentVolumeClaimV1SpecSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.GetPersistentVolumeClaimV1SpecSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface GetPersistentVolumeClaimV1SpecSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface GetPersistentVolumeV1Metadata {
    /**
     * An unstructured key value map stored with the persistent volume that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the persistent volume. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the persistent volume, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * An opaque value that represents the internal version of this persistent volume that can be used by clients to determine when persistent volume has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this persistent volume. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface GetPersistentVolumeV1Spec {
    /**
     * Contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
     */
    accessModes: string[];
    /**
     * A description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
     */
    capacity: {[key: string]: string};
    /**
     * A reference to the persistent volume claim details for statically managed PVs. More Info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#binding
     */
    claimRef?: outputs.GetPersistentVolumeV1SpecClaimRef;
    /**
     * A list of mount options, e.g. ["ro", "soft"]. Not validated - mount will simply fail if one is invalid.
     */
    mountOptions?: string[];
    /**
     * A description of the persistent volume's node affinity. More info: https://kubernetes.io/docs/concepts/storage/volumes/#local
     */
    nodeAffinity?: outputs.GetPersistentVolumeV1SpecNodeAffinity;
    /**
     * What happens to a persistent volume when released from its claim. Valid options are Retain (default) and Recycle. Recycling must be supported by the volume plugin underlying this persistent volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming
     */
    persistentVolumeReclaimPolicy?: string;
    /**
     * The specification of a persistent volume.
     */
    persistentVolumeSource: outputs.GetPersistentVolumeV1SpecPersistentVolumeSource;
    /**
     * A description of the persistent volume's class. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#class
     */
    storageClassName?: string;
    /**
     * Defines if a volume is intended to be used with a formatted filesystem. or to remain in raw block state.
     */
    volumeMode?: string;
}

export interface GetPersistentVolumeV1SpecClaimRef {
    /**
     * The name of the PersistentVolumeClaim
     */
    name: string;
    /**
     * The namespace of the PersistentVolumeClaim. Uses 'default' namespace if none is specified.
     */
    namespace?: string;
}

export interface GetPersistentVolumeV1SpecNodeAffinity {
    required?: outputs.GetPersistentVolumeV1SpecNodeAffinityRequired;
}

export interface GetPersistentVolumeV1SpecNodeAffinityRequired {
    nodeSelectorTerms: outputs.GetPersistentVolumeV1SpecNodeAffinityRequiredNodeSelectorTerm[];
}

export interface GetPersistentVolumeV1SpecNodeAffinityRequiredNodeSelectorTerm {
    /**
     * A list of node selector requirements by node's labels. The requirements are ANDed.
     */
    matchExpressions?: outputs.GetPersistentVolumeV1SpecNodeAffinityRequiredNodeSelectorTermMatchExpression[];
    /**
     * A list of node selector requirements by node's fields. The requirements are ANDed.
     */
    matchFields?: outputs.GetPersistentVolumeV1SpecNodeAffinityRequiredNodeSelectorTermMatchField[];
}

export interface GetPersistentVolumeV1SpecNodeAffinityRequiredNodeSelectorTermMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists`, `DoesNotExist`, `Gt`, and `Lt`.
     */
    operator: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface GetPersistentVolumeV1SpecNodeAffinityRequiredNodeSelectorTermMatchField {
    /**
     * The label key that the selector applies to.
     */
    key: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists`, `DoesNotExist`, `Gt`, and `Lt`.
     */
    operator: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface GetPersistentVolumeV1SpecPersistentVolumeSource {
    /**
     * Represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    awsElasticBlockStore?: outputs.GetPersistentVolumeV1SpecPersistentVolumeSourceAwsElasticBlockStore;
    /**
     * Represents an Azure Data Disk mount on the host and bind mount to the pod.
     */
    azureDisk?: outputs.GetPersistentVolumeV1SpecPersistentVolumeSourceAzureDisk;
    /**
     * Represents an Azure File Service mount on the host and bind mount to the pod.
     */
    azureFile?: outputs.GetPersistentVolumeV1SpecPersistentVolumeSourceAzureFile;
    /**
     * Represents a Ceph FS mount on the host that shares a pod's lifetime
     */
    cephFs?: outputs.GetPersistentVolumeV1SpecPersistentVolumeSourceCephFs;
    /**
     * Represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    cinder?: outputs.GetPersistentVolumeV1SpecPersistentVolumeSourceCinder;
    /**
     * Represents a CSI Volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
     */
    csi?: outputs.GetPersistentVolumeV1SpecPersistentVolumeSourceCsi;
    /**
     * Represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
     */
    fc?: outputs.GetPersistentVolumeV1SpecPersistentVolumeSourceFc;
    /**
     * Represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.
     */
    flexVolume?: outputs.GetPersistentVolumeV1SpecPersistentVolumeSourceFlexVolume;
    /**
     * Represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
     */
    flocker?: outputs.GetPersistentVolumeV1SpecPersistentVolumeSourceFlocker;
    /**
     * Represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    gcePersistentDisk?: outputs.GetPersistentVolumeV1SpecPersistentVolumeSourceGcePersistentDisk;
    /**
     * Represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
     */
    glusterfs?: outputs.GetPersistentVolumeV1SpecPersistentVolumeSourceGlusterfs;
    /**
     * Represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     */
    hostPath?: outputs.GetPersistentVolumeV1SpecPersistentVolumeSourceHostPath;
    /**
     * Represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
     */
    iscsi?: outputs.GetPersistentVolumeV1SpecPersistentVolumeSourceIscsi;
    /**
     * Represents a mounted local storage device such as a disk, partition or directory. Local volumes can only be used as a statically created PersistentVolume. Dynamic provisioning is not supported yet. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
     */
    local?: outputs.GetPersistentVolumeV1SpecPersistentVolumeSourceLocal;
    /**
     * Represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    nfs?: outputs.GetPersistentVolumeV1SpecPersistentVolumeSourceNfs;
    /**
     * Represents a PhotonController persistent disk attached and mounted on kubelets host machine
     */
    photonPersistentDisk?: outputs.GetPersistentVolumeV1SpecPersistentVolumeSourcePhotonPersistentDisk;
    /**
     * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
     */
    quobyte?: outputs.GetPersistentVolumeV1SpecPersistentVolumeSourceQuobyte;
    /**
     * Represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
     */
    rbd?: outputs.GetPersistentVolumeV1SpecPersistentVolumeSourceRbd;
    /**
     * Represents a vSphere volume attached and mounted on kubelets host machine
     */
    vsphereVolume?: outputs.GetPersistentVolumeV1SpecPersistentVolumeSourceVsphereVolume;
}

export interface GetPersistentVolumeV1SpecPersistentVolumeSourceAwsElasticBlockStore {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    fsType?: string;
    /**
     * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
     */
    partition?: number;
    /**
     * Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    readOnly?: boolean;
    /**
     * Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    volumeId: string;
}

export interface GetPersistentVolumeV1SpecPersistentVolumeSourceAzureDisk {
    /**
     * Host Caching mode: None, Read Only, Read Write.
     */
    cachingMode: string;
    /**
     * The URI the data disk in the blob storage
     */
    dataDiskUri: string;
    /**
     * The Name of the data disk in the blob storage
     */
    diskName: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * The type for the data disk. Expected values: Shared, Dedicated, Managed. Defaults to Shared
     */
    kind: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
}

export interface GetPersistentVolumeV1SpecPersistentVolumeSourceAzureFile {
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * The name of secret that contains Azure Storage Account Name and Key
     */
    secretName: string;
    /**
     * The namespace of the secret that contains Azure Storage Account Name and Key. For Kubernetes up to 1.18.x the default is the same as the Pod. For Kubernetes 1.19.x and later the default is "default" namespace.
     */
    secretNamespace?: string;
    /**
     * Share Name
     */
    shareName: string;
}

export interface GetPersistentVolumeV1SpecPersistentVolumeSourceCephFs {
    /**
     * Monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    monitors: string[];
    /**
     * Used as the mounted root, rather than the full Ceph tree, default is /
     */
    path?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to `false` (read/write). More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    readOnly?: boolean;
    /**
     * The path to key ring for User, default is `/etc/ceph/user.secret`. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    secretFile?: string;
    /**
     * Reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    secretRef?: outputs.GetPersistentVolumeV1SpecPersistentVolumeSourceCephFsSecretRef;
    /**
     * User is the rados user name, default is admin. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    user?: string;
}

export interface GetPersistentVolumeV1SpecPersistentVolumeSourceCephFsSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface GetPersistentVolumeV1SpecPersistentVolumeSourceCinder {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    fsType?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write). More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    readOnly?: boolean;
    /**
     * Volume ID used to identify the volume in Cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    volumeId: string;
}

export interface GetPersistentVolumeV1SpecPersistentVolumeSourceCsi {
    /**
     * A reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerExpandVolume call.
     */
    controllerExpandSecretRef?: outputs.GetPersistentVolumeV1SpecPersistentVolumeSourceCsiControllerExpandSecretRef;
    /**
     * A reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls.
     */
    controllerPublishSecretRef?: outputs.GetPersistentVolumeV1SpecPersistentVolumeSourceCsiControllerPublishSecretRef;
    /**
     * the name of the volume driver to use. More info: https://kubernetes.io/docs/concepts/storage/volumes/#csi
     */
    driver: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * A reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls.
     */
    nodePublishSecretRef?: outputs.GetPersistentVolumeV1SpecPersistentVolumeSourceCsiNodePublishSecretRef;
    /**
     * A reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls.
     */
    nodeStageSecretRef?: outputs.GetPersistentVolumeV1SpecPersistentVolumeSourceCsiNodeStageSecretRef;
    /**
     * Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
     */
    readOnly?: boolean;
    /**
     * Attributes of the volume to publish.
     */
    volumeAttributes?: {[key: string]: string};
    /**
     * A string value that uniquely identifies the volume. More info: https://kubernetes.io/docs/concepts/storage/volumes/#csi
     */
    volumeHandle: string;
}

export interface GetPersistentVolumeV1SpecPersistentVolumeSourceCsiControllerExpandSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface GetPersistentVolumeV1SpecPersistentVolumeSourceCsiControllerPublishSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface GetPersistentVolumeV1SpecPersistentVolumeSourceCsiNodePublishSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface GetPersistentVolumeV1SpecPersistentVolumeSourceCsiNodeStageSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface GetPersistentVolumeV1SpecPersistentVolumeSourceFc {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * FC target lun number
     */
    lun: number;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * FC target worldwide names (WWNs)
     */
    targetWwNs: string[];
}

export interface GetPersistentVolumeV1SpecPersistentVolumeSourceFlexVolume {
    /**
     * Driver is the name of the driver to use for this volume.
     */
    driver: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
     */
    fsType?: string;
    /**
     * Extra command options if any.
     */
    options?: {[key: string]: string};
    /**
     * Whether to force the ReadOnly setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * Reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
     */
    secretRef?: outputs.GetPersistentVolumeV1SpecPersistentVolumeSourceFlexVolumeSecretRef;
}

export interface GetPersistentVolumeV1SpecPersistentVolumeSourceFlexVolumeSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface GetPersistentVolumeV1SpecPersistentVolumeSourceFlocker {
    /**
     * Name of the dataset stored as metadata > name on the dataset for Flocker should be considered as deprecated
     */
    datasetName?: string;
    /**
     * UUID of the dataset. This is unique identifier of a Flocker dataset
     */
    datasetUuid?: string;
}

export interface GetPersistentVolumeV1SpecPersistentVolumeSourceGcePersistentDisk {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    fsType?: string;
    /**
     * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    partition?: number;
    /**
     * Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    pdName: string;
    /**
     * Whether to force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    readOnly?: boolean;
}

export interface GetPersistentVolumeV1SpecPersistentVolumeSourceGlusterfs {
    /**
     * The endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    endpointsName: string;
    /**
     * The Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    path: string;
    /**
     * Whether to force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    readOnly?: boolean;
}

export interface GetPersistentVolumeV1SpecPersistentVolumeSourceHostPath {
    /**
     * Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     */
    path?: string;
    /**
     * Type for HostPath volume. Allowed values are "" (default), DirectoryOrCreate, Directory, FileOrCreate, File, Socket, CharDevice and BlockDevice
     */
    type?: string;
}

export interface GetPersistentVolumeV1SpecPersistentVolumeSourceIscsi {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
     */
    fsType?: string;
    /**
     * Target iSCSI Qualified Name.
     */
    iqn: string;
    /**
     * iSCSI interface name that uses an iSCSI transport. Defaults to 'default' (tcp).
     */
    iscsiInterface?: string;
    /**
     * iSCSI target lun number.
     */
    lun?: number;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false.
     */
    readOnly?: boolean;
    /**
     * iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
     */
    targetPortal: string;
}

export interface GetPersistentVolumeV1SpecPersistentVolumeSourceLocal {
    /**
     * Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
     */
    path?: string;
}

export interface GetPersistentVolumeV1SpecPersistentVolumeSourceNfs {
    /**
     * Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    path: string;
    /**
     * Whether to force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    readOnly?: boolean;
    /**
     * Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    server: string;
}

export interface GetPersistentVolumeV1SpecPersistentVolumeSourcePhotonPersistentDisk {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * ID that identifies Photon Controller persistent disk
     */
    pdId: string;
}

export interface GetPersistentVolumeV1SpecPersistentVolumeSourceQuobyte {
    /**
     * Group to map volume access to Default is no group
     */
    group?: string;
    /**
     * Whether to force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
     */
    registry: string;
    /**
     * User to map volume access to Defaults to serivceaccount user
     */
    user?: string;
    /**
     * Volume is a string that references an already created Quobyte volume by name.
     */
    volume: string;
}

export interface GetPersistentVolumeV1SpecPersistentVolumeSourceRbd {
    /**
     * A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    cephMonitors: string[];
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
     */
    fsType?: string;
    /**
     * Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    keyring: string;
    /**
     * The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    radosUser?: string;
    /**
     * The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    rbdImage: string;
    /**
     * The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it.
     */
    rbdPool?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    readOnly?: boolean;
    /**
     * Name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    secretRef?: outputs.GetPersistentVolumeV1SpecPersistentVolumeSourceRbdSecretRef;
}

export interface GetPersistentVolumeV1SpecPersistentVolumeSourceRbdSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface GetPersistentVolumeV1SpecPersistentVolumeSourceVsphereVolume {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * Path that identifies vSphere volume vmdk
     */
    volumePath: string;
}

export interface GetPodMetadata {
    /**
     * An unstructured key value map stored with the pod that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the pod. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the pod, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the pod must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this pod that can be used by clients to determine when pod has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface GetPodSpec {
    activeDeadlineSeconds: number;
    affinities: outputs.GetPodSpecAffinity[];
    automountServiceAccountToken: boolean;
    containers: outputs.GetPodSpecContainer[];
    dnsConfigs: outputs.GetPodSpecDnsConfig[];
    dnsPolicy: string;
    enableServiceLinks: boolean;
    hostAliases: outputs.GetPodSpecHostAlias[];
    hostIpc: boolean;
    hostNetwork: boolean;
    hostPid: boolean;
    hostname: string;
    imagePullSecrets: outputs.GetPodSpecImagePullSecret[];
    initContainers: outputs.GetPodSpecInitContainer[];
    nodeName: string;
    nodeSelector: {[key: string]: string};
    os: outputs.GetPodSpecO[];
    priorityClassName: string;
    readinessGates: outputs.GetPodSpecReadinessGate[];
    restartPolicy: string;
    runtimeClassName: string;
    schedulerName: string;
    securityContexts: outputs.GetPodSpecSecurityContext[];
    serviceAccountName: string;
    shareProcessNamespace: boolean;
    subdomain: string;
    terminationGracePeriodSeconds: number;
    tolerations: outputs.GetPodSpecToleration[];
    topologySpreadConstraints: outputs.GetPodSpecTopologySpreadConstraint[];
    volumes: outputs.GetPodSpecVolume[];
}

export interface GetPodSpecAffinity {
    nodeAffinities: outputs.GetPodSpecAffinityNodeAffinity[];
    podAffinities: outputs.GetPodSpecAffinityPodAffinity[];
    podAntiAffinities: outputs.GetPodSpecAffinityPodAntiAffinity[];
}

export interface GetPodSpecAffinityNodeAffinity {
    preferredDuringSchedulingIgnoredDuringExecutions: outputs.GetPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    requiredDuringSchedulingIgnoredDuringExecutions: outputs.GetPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
}

export interface GetPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    preferences: outputs.GetPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference[];
    weight: number;
}

export interface GetPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
    matchExpressions: outputs.GetPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression[];
    matchFields: outputs.GetPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchField[];
}

export interface GetPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression {
    key: string;
    operator: string;
    values: string[];
}

export interface GetPodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchField {
    key: string;
    operator: string;
    values: string[];
}

export interface GetPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    nodeSelectorTerms: outputs.GetPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm[];
}

export interface GetPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm {
    matchExpressions: outputs.GetPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression[];
    matchFields: outputs.GetPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchField[];
}

export interface GetPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression {
    key: string;
    operator: string;
    values: string[];
}

export interface GetPodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchField {
    key: string;
    operator: string;
    values: string[];
}

export interface GetPodSpecAffinityPodAffinity {
    preferredDuringSchedulingIgnoredDuringExecutions: outputs.GetPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    requiredDuringSchedulingIgnoredDuringExecutions: outputs.GetPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
}

export interface GetPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    podAffinityTerms: outputs.GetPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm[];
    weight: number;
}

export interface GetPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    labelSelectors: outputs.GetPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector[];
    namespaces: string[];
    topologyKey: string;
}

export interface GetPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    matchExpressions: outputs.GetPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression[];
    matchLabels: {[key: string]: string};
}

export interface GetPodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression {
    key: string;
    operator: string;
    values: string[];
}

export interface GetPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    labelSelectors: outputs.GetPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector[];
    namespaces: string[];
    topologyKey: string;
}

export interface GetPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    matchExpressions: outputs.GetPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression[];
    matchLabels: {[key: string]: string};
}

export interface GetPodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression {
    key: string;
    operator: string;
    values: string[];
}

export interface GetPodSpecAffinityPodAntiAffinity {
    preferredDuringSchedulingIgnoredDuringExecutions: outputs.GetPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    requiredDuringSchedulingIgnoredDuringExecutions: outputs.GetPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
}

export interface GetPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    podAffinityTerms: outputs.GetPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm[];
    weight: number;
}

export interface GetPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    labelSelectors: outputs.GetPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector[];
    namespaces: string[];
    topologyKey: string;
}

export interface GetPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    matchExpressions: outputs.GetPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression[];
    matchLabels: {[key: string]: string};
}

export interface GetPodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression {
    key: string;
    operator: string;
    values: string[];
}

export interface GetPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    labelSelectors: outputs.GetPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector[];
    namespaces: string[];
    topologyKey: string;
}

export interface GetPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    matchExpressions: outputs.GetPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression[];
    matchLabels: {[key: string]: string};
}

export interface GetPodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression {
    key: string;
    operator: string;
    values: string[];
}

export interface GetPodSpecContainer {
    args: string[];
    commands: string[];
    envFroms: outputs.GetPodSpecContainerEnvFrom[];
    envs: outputs.GetPodSpecContainerEnv[];
    image: string;
    imagePullPolicy: string;
    lifecycles: outputs.GetPodSpecContainerLifecycle[];
    livenessProbes: outputs.GetPodSpecContainerLivenessProbe[];
    name: string;
    ports: outputs.GetPodSpecContainerPort[];
    readinessProbes: outputs.GetPodSpecContainerReadinessProbe[];
    resources: outputs.GetPodSpecContainerResource[];
    securityContexts: outputs.GetPodSpecContainerSecurityContext[];
    startupProbes: outputs.GetPodSpecContainerStartupProbe[];
    stdin: boolean;
    stdinOnce: boolean;
    terminationMessagePath: string;
    terminationMessagePolicy: string;
    tty: boolean;
    volumeMounts: outputs.GetPodSpecContainerVolumeMount[];
    workingDir: string;
}

export interface GetPodSpecContainerEnv {
    name: string;
    value: string;
    valueFroms: outputs.GetPodSpecContainerEnvValueFrom[];
}

export interface GetPodSpecContainerEnvFrom {
    configMapReves: outputs.GetPodSpecContainerEnvFromConfigMapRef[];
    prefix: string;
    secretReves: outputs.GetPodSpecContainerEnvFromSecretRef[];
}

export interface GetPodSpecContainerEnvFromConfigMapRef {
    name: string;
    optional: boolean;
}

export interface GetPodSpecContainerEnvFromSecretRef {
    name: string;
    optional: boolean;
}

export interface GetPodSpecContainerEnvValueFrom {
    configMapKeyReves: outputs.GetPodSpecContainerEnvValueFromConfigMapKeyRef[];
    fieldReves: outputs.GetPodSpecContainerEnvValueFromFieldRef[];
    resourceFieldReves: outputs.GetPodSpecContainerEnvValueFromResourceFieldRef[];
    secretKeyReves: outputs.GetPodSpecContainerEnvValueFromSecretKeyRef[];
}

export interface GetPodSpecContainerEnvValueFromConfigMapKeyRef {
    key: string;
    name: string;
    optional: boolean;
}

export interface GetPodSpecContainerEnvValueFromFieldRef {
    apiVersion: string;
    fieldPath: string;
}

export interface GetPodSpecContainerEnvValueFromResourceFieldRef {
    containerName: string;
    divisor: string;
    resource: string;
}

export interface GetPodSpecContainerEnvValueFromSecretKeyRef {
    key: string;
    name: string;
    optional: boolean;
}

export interface GetPodSpecContainerLifecycle {
    postStarts: outputs.GetPodSpecContainerLifecyclePostStart[];
    preStops: outputs.GetPodSpecContainerLifecyclePreStop[];
}

export interface GetPodSpecContainerLifecyclePostStart {
    execs: outputs.GetPodSpecContainerLifecyclePostStartExec[];
    httpGets: outputs.GetPodSpecContainerLifecyclePostStartHttpGet[];
    tcpSockets: outputs.GetPodSpecContainerLifecyclePostStartTcpSocket[];
}

export interface GetPodSpecContainerLifecyclePostStartExec {
    commands: string[];
}

export interface GetPodSpecContainerLifecyclePostStartHttpGet {
    host: string;
    httpHeaders: outputs.GetPodSpecContainerLifecyclePostStartHttpGetHttpHeader[];
    path: string;
    port: string;
    scheme: string;
}

export interface GetPodSpecContainerLifecyclePostStartHttpGetHttpHeader {
    name: string;
    value: string;
}

export interface GetPodSpecContainerLifecyclePostStartTcpSocket {
    port: string;
}

export interface GetPodSpecContainerLifecyclePreStop {
    execs: outputs.GetPodSpecContainerLifecyclePreStopExec[];
    httpGets: outputs.GetPodSpecContainerLifecyclePreStopHttpGet[];
    tcpSockets: outputs.GetPodSpecContainerLifecyclePreStopTcpSocket[];
}

export interface GetPodSpecContainerLifecyclePreStopExec {
    commands: string[];
}

export interface GetPodSpecContainerLifecyclePreStopHttpGet {
    host: string;
    httpHeaders: outputs.GetPodSpecContainerLifecyclePreStopHttpGetHttpHeader[];
    path: string;
    port: string;
    scheme: string;
}

export interface GetPodSpecContainerLifecyclePreStopHttpGetHttpHeader {
    name: string;
    value: string;
}

export interface GetPodSpecContainerLifecyclePreStopTcpSocket {
    port: string;
}

export interface GetPodSpecContainerLivenessProbe {
    execs: outputs.GetPodSpecContainerLivenessProbeExec[];
    failureThreshold: number;
    grpcs: outputs.GetPodSpecContainerLivenessProbeGrpc[];
    httpGets: outputs.GetPodSpecContainerLivenessProbeHttpGet[];
    initialDelaySeconds: number;
    periodSeconds: number;
    successThreshold: number;
    tcpSockets: outputs.GetPodSpecContainerLivenessProbeTcpSocket[];
    timeoutSeconds: number;
}

export interface GetPodSpecContainerLivenessProbeExec {
    commands: string[];
}

export interface GetPodSpecContainerLivenessProbeGrpc {
    port: number;
    service: string;
}

export interface GetPodSpecContainerLivenessProbeHttpGet {
    host: string;
    httpHeaders: outputs.GetPodSpecContainerLivenessProbeHttpGetHttpHeader[];
    path: string;
    port: string;
    scheme: string;
}

export interface GetPodSpecContainerLivenessProbeHttpGetHttpHeader {
    name: string;
    value: string;
}

export interface GetPodSpecContainerLivenessProbeTcpSocket {
    port: string;
}

export interface GetPodSpecContainerPort {
    containerPort: number;
    hostIp: string;
    hostPort: number;
    name: string;
    protocol: string;
}

export interface GetPodSpecContainerReadinessProbe {
    execs: outputs.GetPodSpecContainerReadinessProbeExec[];
    failureThreshold: number;
    grpcs: outputs.GetPodSpecContainerReadinessProbeGrpc[];
    httpGets: outputs.GetPodSpecContainerReadinessProbeHttpGet[];
    initialDelaySeconds: number;
    periodSeconds: number;
    successThreshold: number;
    tcpSockets: outputs.GetPodSpecContainerReadinessProbeTcpSocket[];
    timeoutSeconds: number;
}

export interface GetPodSpecContainerReadinessProbeExec {
    commands: string[];
}

export interface GetPodSpecContainerReadinessProbeGrpc {
    port: number;
    service: string;
}

export interface GetPodSpecContainerReadinessProbeHttpGet {
    host: string;
    httpHeaders: outputs.GetPodSpecContainerReadinessProbeHttpGetHttpHeader[];
    path: string;
    port: string;
    scheme: string;
}

export interface GetPodSpecContainerReadinessProbeHttpGetHttpHeader {
    name: string;
    value: string;
}

export interface GetPodSpecContainerReadinessProbeTcpSocket {
    port: string;
}

export interface GetPodSpecContainerResource {
    limits: {[key: string]: string};
    requests: {[key: string]: string};
}

export interface GetPodSpecContainerSecurityContext {
    allowPrivilegeEscalation: boolean;
    capabilities: outputs.GetPodSpecContainerSecurityContextCapability[];
    privileged: boolean;
    readOnlyRootFilesystem: boolean;
    runAsGroup: string;
    runAsNonRoot: boolean;
    runAsUser: string;
    seLinuxOptions: outputs.GetPodSpecContainerSecurityContextSeLinuxOption[];
    seccompProfiles: outputs.GetPodSpecContainerSecurityContextSeccompProfile[];
}

export interface GetPodSpecContainerSecurityContextCapability {
    adds: string[];
    drops: string[];
}

export interface GetPodSpecContainerSecurityContextSeLinuxOption {
    level: string;
    role: string;
    type: string;
    user: string;
}

export interface GetPodSpecContainerSecurityContextSeccompProfile {
    localhostProfile: string;
    type: string;
}

export interface GetPodSpecContainerStartupProbe {
    execs: outputs.GetPodSpecContainerStartupProbeExec[];
    failureThreshold: number;
    grpcs: outputs.GetPodSpecContainerStartupProbeGrpc[];
    httpGets: outputs.GetPodSpecContainerStartupProbeHttpGet[];
    initialDelaySeconds: number;
    periodSeconds: number;
    successThreshold: number;
    tcpSockets: outputs.GetPodSpecContainerStartupProbeTcpSocket[];
    timeoutSeconds: number;
}

export interface GetPodSpecContainerStartupProbeExec {
    commands: string[];
}

export interface GetPodSpecContainerStartupProbeGrpc {
    port: number;
    service: string;
}

export interface GetPodSpecContainerStartupProbeHttpGet {
    host: string;
    httpHeaders: outputs.GetPodSpecContainerStartupProbeHttpGetHttpHeader[];
    path: string;
    port: string;
    scheme: string;
}

export interface GetPodSpecContainerStartupProbeHttpGetHttpHeader {
    name: string;
    value: string;
}

export interface GetPodSpecContainerStartupProbeTcpSocket {
    port: string;
}

export interface GetPodSpecContainerVolumeMount {
    mountPath: string;
    mountPropagation: string;
    name: string;
    readOnly: boolean;
    subPath: string;
}

export interface GetPodSpecDnsConfig {
    nameservers: string[];
    options: outputs.GetPodSpecDnsConfigOption[];
    searches: string[];
}

export interface GetPodSpecDnsConfigOption {
    name: string;
    value: string;
}

export interface GetPodSpecHostAlias {
    hostnames: string[];
    ip: string;
}

export interface GetPodSpecImagePullSecret {
    name: string;
}

export interface GetPodSpecInitContainer {
    args: string[];
    commands: string[];
    envFroms: outputs.GetPodSpecInitContainerEnvFrom[];
    envs: outputs.GetPodSpecInitContainerEnv[];
    image: string;
    imagePullPolicy: string;
    lifecycles: outputs.GetPodSpecInitContainerLifecycle[];
    livenessProbes: outputs.GetPodSpecInitContainerLivenessProbe[];
    name: string;
    ports: outputs.GetPodSpecInitContainerPort[];
    readinessProbes: outputs.GetPodSpecInitContainerReadinessProbe[];
    resources: outputs.GetPodSpecInitContainerResource[];
    securityContexts: outputs.GetPodSpecInitContainerSecurityContext[];
    startupProbes: outputs.GetPodSpecInitContainerStartupProbe[];
    stdin: boolean;
    stdinOnce: boolean;
    terminationMessagePath: string;
    terminationMessagePolicy: string;
    tty: boolean;
    volumeMounts: outputs.GetPodSpecInitContainerVolumeMount[];
    workingDir: string;
}

export interface GetPodSpecInitContainerEnv {
    name: string;
    value: string;
    valueFroms: outputs.GetPodSpecInitContainerEnvValueFrom[];
}

export interface GetPodSpecInitContainerEnvFrom {
    configMapReves: outputs.GetPodSpecInitContainerEnvFromConfigMapRef[];
    prefix: string;
    secretReves: outputs.GetPodSpecInitContainerEnvFromSecretRef[];
}

export interface GetPodSpecInitContainerEnvFromConfigMapRef {
    name: string;
    optional: boolean;
}

export interface GetPodSpecInitContainerEnvFromSecretRef {
    name: string;
    optional: boolean;
}

export interface GetPodSpecInitContainerEnvValueFrom {
    configMapKeyReves: outputs.GetPodSpecInitContainerEnvValueFromConfigMapKeyRef[];
    fieldReves: outputs.GetPodSpecInitContainerEnvValueFromFieldRef[];
    resourceFieldReves: outputs.GetPodSpecInitContainerEnvValueFromResourceFieldRef[];
    secretKeyReves: outputs.GetPodSpecInitContainerEnvValueFromSecretKeyRef[];
}

export interface GetPodSpecInitContainerEnvValueFromConfigMapKeyRef {
    key: string;
    name: string;
    optional: boolean;
}

export interface GetPodSpecInitContainerEnvValueFromFieldRef {
    apiVersion: string;
    fieldPath: string;
}

export interface GetPodSpecInitContainerEnvValueFromResourceFieldRef {
    containerName: string;
    divisor: string;
    resource: string;
}

export interface GetPodSpecInitContainerEnvValueFromSecretKeyRef {
    key: string;
    name: string;
    optional: boolean;
}

export interface GetPodSpecInitContainerLifecycle {
    postStarts: outputs.GetPodSpecInitContainerLifecyclePostStart[];
    preStops: outputs.GetPodSpecInitContainerLifecyclePreStop[];
}

export interface GetPodSpecInitContainerLifecyclePostStart {
    execs: outputs.GetPodSpecInitContainerLifecyclePostStartExec[];
    httpGets: outputs.GetPodSpecInitContainerLifecyclePostStartHttpGet[];
    tcpSockets: outputs.GetPodSpecInitContainerLifecyclePostStartTcpSocket[];
}

export interface GetPodSpecInitContainerLifecyclePostStartExec {
    commands: string[];
}

export interface GetPodSpecInitContainerLifecyclePostStartHttpGet {
    host: string;
    httpHeaders: outputs.GetPodSpecInitContainerLifecyclePostStartHttpGetHttpHeader[];
    path: string;
    port: string;
    scheme: string;
}

export interface GetPodSpecInitContainerLifecyclePostStartHttpGetHttpHeader {
    name: string;
    value: string;
}

export interface GetPodSpecInitContainerLifecyclePostStartTcpSocket {
    port: string;
}

export interface GetPodSpecInitContainerLifecyclePreStop {
    execs: outputs.GetPodSpecInitContainerLifecyclePreStopExec[];
    httpGets: outputs.GetPodSpecInitContainerLifecyclePreStopHttpGet[];
    tcpSockets: outputs.GetPodSpecInitContainerLifecyclePreStopTcpSocket[];
}

export interface GetPodSpecInitContainerLifecyclePreStopExec {
    commands: string[];
}

export interface GetPodSpecInitContainerLifecyclePreStopHttpGet {
    host: string;
    httpHeaders: outputs.GetPodSpecInitContainerLifecyclePreStopHttpGetHttpHeader[];
    path: string;
    port: string;
    scheme: string;
}

export interface GetPodSpecInitContainerLifecyclePreStopHttpGetHttpHeader {
    name: string;
    value: string;
}

export interface GetPodSpecInitContainerLifecyclePreStopTcpSocket {
    port: string;
}

export interface GetPodSpecInitContainerLivenessProbe {
    execs: outputs.GetPodSpecInitContainerLivenessProbeExec[];
    failureThreshold: number;
    grpcs: outputs.GetPodSpecInitContainerLivenessProbeGrpc[];
    httpGets: outputs.GetPodSpecInitContainerLivenessProbeHttpGet[];
    initialDelaySeconds: number;
    periodSeconds: number;
    successThreshold: number;
    tcpSockets: outputs.GetPodSpecInitContainerLivenessProbeTcpSocket[];
    timeoutSeconds: number;
}

export interface GetPodSpecInitContainerLivenessProbeExec {
    commands: string[];
}

export interface GetPodSpecInitContainerLivenessProbeGrpc {
    port: number;
    service: string;
}

export interface GetPodSpecInitContainerLivenessProbeHttpGet {
    host: string;
    httpHeaders: outputs.GetPodSpecInitContainerLivenessProbeHttpGetHttpHeader[];
    path: string;
    port: string;
    scheme: string;
}

export interface GetPodSpecInitContainerLivenessProbeHttpGetHttpHeader {
    name: string;
    value: string;
}

export interface GetPodSpecInitContainerLivenessProbeTcpSocket {
    port: string;
}

export interface GetPodSpecInitContainerPort {
    containerPort: number;
    hostIp: string;
    hostPort: number;
    name: string;
    protocol: string;
}

export interface GetPodSpecInitContainerReadinessProbe {
    execs: outputs.GetPodSpecInitContainerReadinessProbeExec[];
    failureThreshold: number;
    grpcs: outputs.GetPodSpecInitContainerReadinessProbeGrpc[];
    httpGets: outputs.GetPodSpecInitContainerReadinessProbeHttpGet[];
    initialDelaySeconds: number;
    periodSeconds: number;
    successThreshold: number;
    tcpSockets: outputs.GetPodSpecInitContainerReadinessProbeTcpSocket[];
    timeoutSeconds: number;
}

export interface GetPodSpecInitContainerReadinessProbeExec {
    commands: string[];
}

export interface GetPodSpecInitContainerReadinessProbeGrpc {
    port: number;
    service: string;
}

export interface GetPodSpecInitContainerReadinessProbeHttpGet {
    host: string;
    httpHeaders: outputs.GetPodSpecInitContainerReadinessProbeHttpGetHttpHeader[];
    path: string;
    port: string;
    scheme: string;
}

export interface GetPodSpecInitContainerReadinessProbeHttpGetHttpHeader {
    name: string;
    value: string;
}

export interface GetPodSpecInitContainerReadinessProbeTcpSocket {
    port: string;
}

export interface GetPodSpecInitContainerResource {
    limits: {[key: string]: string};
    requests: {[key: string]: string};
}

export interface GetPodSpecInitContainerSecurityContext {
    allowPrivilegeEscalation: boolean;
    capabilities: outputs.GetPodSpecInitContainerSecurityContextCapability[];
    privileged: boolean;
    readOnlyRootFilesystem: boolean;
    runAsGroup: string;
    runAsNonRoot: boolean;
    runAsUser: string;
    seLinuxOptions: outputs.GetPodSpecInitContainerSecurityContextSeLinuxOption[];
    seccompProfiles: outputs.GetPodSpecInitContainerSecurityContextSeccompProfile[];
}

export interface GetPodSpecInitContainerSecurityContextCapability {
    adds: string[];
    drops: string[];
}

export interface GetPodSpecInitContainerSecurityContextSeLinuxOption {
    level: string;
    role: string;
    type: string;
    user: string;
}

export interface GetPodSpecInitContainerSecurityContextSeccompProfile {
    localhostProfile: string;
    type: string;
}

export interface GetPodSpecInitContainerStartupProbe {
    execs: outputs.GetPodSpecInitContainerStartupProbeExec[];
    failureThreshold: number;
    grpcs: outputs.GetPodSpecInitContainerStartupProbeGrpc[];
    httpGets: outputs.GetPodSpecInitContainerStartupProbeHttpGet[];
    initialDelaySeconds: number;
    periodSeconds: number;
    successThreshold: number;
    tcpSockets: outputs.GetPodSpecInitContainerStartupProbeTcpSocket[];
    timeoutSeconds: number;
}

export interface GetPodSpecInitContainerStartupProbeExec {
    commands: string[];
}

export interface GetPodSpecInitContainerStartupProbeGrpc {
    port: number;
    service: string;
}

export interface GetPodSpecInitContainerStartupProbeHttpGet {
    host: string;
    httpHeaders: outputs.GetPodSpecInitContainerStartupProbeHttpGetHttpHeader[];
    path: string;
    port: string;
    scheme: string;
}

export interface GetPodSpecInitContainerStartupProbeHttpGetHttpHeader {
    name: string;
    value: string;
}

export interface GetPodSpecInitContainerStartupProbeTcpSocket {
    port: string;
}

export interface GetPodSpecInitContainerVolumeMount {
    mountPath: string;
    mountPropagation: string;
    name: string;
    readOnly: boolean;
    subPath: string;
}

export interface GetPodSpecO {
    name: string;
}

export interface GetPodSpecReadinessGate {
    conditionType: string;
}

export interface GetPodSpecSecurityContext {
    fsGroup: string;
    fsGroupChangePolicy: string;
    runAsGroup: string;
    runAsNonRoot: boolean;
    runAsUser: string;
    seLinuxOptions: outputs.GetPodSpecSecurityContextSeLinuxOption[];
    seccompProfiles: outputs.GetPodSpecSecurityContextSeccompProfile[];
    supplementalGroups: number[];
    sysctls: outputs.GetPodSpecSecurityContextSysctl[];
    windowsOptions: outputs.GetPodSpecSecurityContextWindowsOption[];
}

export interface GetPodSpecSecurityContextSeLinuxOption {
    level: string;
    role: string;
    type: string;
    user: string;
}

export interface GetPodSpecSecurityContextSeccompProfile {
    localhostProfile: string;
    type: string;
}

export interface GetPodSpecSecurityContextSysctl {
    name: string;
    value: string;
}

export interface GetPodSpecSecurityContextWindowsOption {
    gmsaCredentialSpec: string;
    gmsaCredentialSpecName: string;
    hostProcess: boolean;
    runAsUsername: string;
}

export interface GetPodSpecToleration {
    effect: string;
    key: string;
    operator: string;
    tolerationSeconds: string;
    value: string;
}

export interface GetPodSpecTopologySpreadConstraint {
    labelSelectors: outputs.GetPodSpecTopologySpreadConstraintLabelSelector[];
    matchLabelKeys: string[];
    maxSkew: number;
    minDomains: number;
    nodeAffinityPolicy: string;
    nodeTaintsPolicy: string;
    topologyKey: string;
    whenUnsatisfiable: string;
}

export interface GetPodSpecTopologySpreadConstraintLabelSelector {
    matchExpressions: outputs.GetPodSpecTopologySpreadConstraintLabelSelectorMatchExpression[];
    matchLabels: {[key: string]: string};
}

export interface GetPodSpecTopologySpreadConstraintLabelSelectorMatchExpression {
    key: string;
    operator: string;
    values: string[];
}

export interface GetPodSpecVolume {
    awsElasticBlockStores: outputs.GetPodSpecVolumeAwsElasticBlockStore[];
    azureDisks: outputs.GetPodSpecVolumeAzureDisk[];
    azureFiles: outputs.GetPodSpecVolumeAzureFile[];
    cephFs: outputs.GetPodSpecVolumeCephF[];
    cinders: outputs.GetPodSpecVolumeCinder[];
    configMaps: outputs.GetPodSpecVolumeConfigMap[];
    csis: outputs.GetPodSpecVolumeCsi[];
    downwardApis: outputs.GetPodSpecVolumeDownwardApi[];
    emptyDirs: outputs.GetPodSpecVolumeEmptyDir[];
    ephemerals: outputs.GetPodSpecVolumeEphemeral[];
    fcs: outputs.GetPodSpecVolumeFc[];
    flexVolumes: outputs.GetPodSpecVolumeFlexVolume[];
    flockers: outputs.GetPodSpecVolumeFlocker[];
    gcePersistentDisks: outputs.GetPodSpecVolumeGcePersistentDisk[];
    gitRepos: outputs.GetPodSpecVolumeGitRepo[];
    glusterfs: outputs.GetPodSpecVolumeGlusterf[];
    hostPaths: outputs.GetPodSpecVolumeHostPath[];
    iscsis: outputs.GetPodSpecVolumeIscsi[];
    locals: outputs.GetPodSpecVolumeLocal[];
    name: string;
    nfs: outputs.GetPodSpecVolumeNf[];
    persistentVolumeClaims: outputs.GetPodSpecVolumePersistentVolumeClaim[];
    photonPersistentDisks: outputs.GetPodSpecVolumePhotonPersistentDisk[];
    projecteds: outputs.GetPodSpecVolumeProjected[];
    quobytes: outputs.GetPodSpecVolumeQuobyte[];
    rbds: outputs.GetPodSpecVolumeRbd[];
    secrets: outputs.GetPodSpecVolumeSecret[];
    vsphereVolumes: outputs.GetPodSpecVolumeVsphereVolume[];
}

export interface GetPodSpecVolumeAwsElasticBlockStore {
    fsType: string;
    partition: number;
    readOnly: boolean;
    volumeId: string;
}

export interface GetPodSpecVolumeAzureDisk {
    cachingMode: string;
    dataDiskUri: string;
    diskName: string;
    fsType: string;
    kind: string;
    readOnly: boolean;
}

export interface GetPodSpecVolumeAzureFile {
    readOnly: boolean;
    secretName: string;
    secretNamespace: string;
    shareName: string;
}

export interface GetPodSpecVolumeCephF {
    monitors: string[];
    path: string;
    readOnly: boolean;
    secretFile: string;
    secretReves: outputs.GetPodSpecVolumeCephFSecretRef[];
    user: string;
}

export interface GetPodSpecVolumeCephFSecretRef {
    name: string;
    namespace: string;
}

export interface GetPodSpecVolumeCinder {
    fsType: string;
    readOnly: boolean;
    volumeId: string;
}

export interface GetPodSpecVolumeConfigMap {
    defaultMode: string;
    items: outputs.GetPodSpecVolumeConfigMapItem[];
    name: string;
    optional: boolean;
}

export interface GetPodSpecVolumeConfigMapItem {
    key: string;
    mode: string;
    path: string;
}

export interface GetPodSpecVolumeCsi {
    driver: string;
    fsType: string;
    nodePublishSecretReves: outputs.GetPodSpecVolumeCsiNodePublishSecretRef[];
    readOnly: boolean;
    volumeAttributes: {[key: string]: string};
}

export interface GetPodSpecVolumeCsiNodePublishSecretRef {
    name: string;
}

export interface GetPodSpecVolumeDownwardApi {
    defaultMode: string;
    items: outputs.GetPodSpecVolumeDownwardApiItem[];
}

export interface GetPodSpecVolumeDownwardApiItem {
    fieldReves: outputs.GetPodSpecVolumeDownwardApiItemFieldRef[];
    mode: string;
    path: string;
    resourceFieldReves: outputs.GetPodSpecVolumeDownwardApiItemResourceFieldRef[];
}

export interface GetPodSpecVolumeDownwardApiItemFieldRef {
    apiVersion: string;
    fieldPath: string;
}

export interface GetPodSpecVolumeDownwardApiItemResourceFieldRef {
    containerName: string;
    divisor: string;
    resource: string;
}

export interface GetPodSpecVolumeEmptyDir {
    medium: string;
    sizeLimit: string;
}

export interface GetPodSpecVolumeEphemeral {
    volumeClaimTemplates: outputs.GetPodSpecVolumeEphemeralVolumeClaimTemplate[];
}

export interface GetPodSpecVolumeEphemeralVolumeClaimTemplate {
    metadatas: outputs.GetPodSpecVolumeEphemeralVolumeClaimTemplateMetadata[];
    specs: outputs.GetPodSpecVolumeEphemeralVolumeClaimTemplateSpec[];
}

export interface GetPodSpecVolumeEphemeralVolumeClaimTemplateMetadata {
    annotations: {[key: string]: string};
    labels: {[key: string]: string};
}

export interface GetPodSpecVolumeEphemeralVolumeClaimTemplateSpec {
    accessModes: string[];
    resources: outputs.GetPodSpecVolumeEphemeralVolumeClaimTemplateSpecResource[];
    selectors: outputs.GetPodSpecVolumeEphemeralVolumeClaimTemplateSpecSelector[];
    storageClassName: string;
    volumeMode: string;
    volumeName: string;
}

export interface GetPodSpecVolumeEphemeralVolumeClaimTemplateSpecResource {
    limits: {[key: string]: string};
    requests: {[key: string]: string};
}

export interface GetPodSpecVolumeEphemeralVolumeClaimTemplateSpecSelector {
    matchExpressions: outputs.GetPodSpecVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpression[];
    matchLabels: {[key: string]: string};
}

export interface GetPodSpecVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpression {
    key: string;
    operator: string;
    values: string[];
}

export interface GetPodSpecVolumeFc {
    fsType: string;
    lun: number;
    readOnly: boolean;
    targetWwNs: string[];
}

export interface GetPodSpecVolumeFlexVolume {
    driver: string;
    fsType: string;
    options: {[key: string]: string};
    readOnly: boolean;
    secretReves: outputs.GetPodSpecVolumeFlexVolumeSecretRef[];
}

export interface GetPodSpecVolumeFlexVolumeSecretRef {
    name: string;
    namespace: string;
}

export interface GetPodSpecVolumeFlocker {
    datasetName: string;
    datasetUuid: string;
}

export interface GetPodSpecVolumeGcePersistentDisk {
    fsType: string;
    partition: number;
    pdName: string;
    readOnly: boolean;
}

export interface GetPodSpecVolumeGitRepo {
    directory: string;
    repository: string;
    revision: string;
}

export interface GetPodSpecVolumeGlusterf {
    endpointsName: string;
    path: string;
    readOnly: boolean;
}

export interface GetPodSpecVolumeHostPath {
    path: string;
    type: string;
}

export interface GetPodSpecVolumeIscsi {
    fsType: string;
    iqn: string;
    iscsiInterface: string;
    lun: number;
    readOnly: boolean;
    targetPortal: string;
}

export interface GetPodSpecVolumeLocal {
    path: string;
}

export interface GetPodSpecVolumeNf {
    path: string;
    readOnly: boolean;
    server: string;
}

export interface GetPodSpecVolumePersistentVolumeClaim {
    claimName: string;
    readOnly: boolean;
}

export interface GetPodSpecVolumePhotonPersistentDisk {
    fsType: string;
    pdId: string;
}

export interface GetPodSpecVolumeProjected {
    defaultMode: string;
    sources: outputs.GetPodSpecVolumeProjectedSource[];
}

export interface GetPodSpecVolumeProjectedSource {
    configMaps: outputs.GetPodSpecVolumeProjectedSourceConfigMap[];
    downwardApis: outputs.GetPodSpecVolumeProjectedSourceDownwardApi[];
    secrets: outputs.GetPodSpecVolumeProjectedSourceSecret[];
    serviceAccountTokens: outputs.GetPodSpecVolumeProjectedSourceServiceAccountToken[];
}

export interface GetPodSpecVolumeProjectedSourceConfigMap {
    items: outputs.GetPodSpecVolumeProjectedSourceConfigMapItem[];
    name: string;
    optional: boolean;
}

export interface GetPodSpecVolumeProjectedSourceConfigMapItem {
    key: string;
    mode: string;
    path: string;
}

export interface GetPodSpecVolumeProjectedSourceDownwardApi {
    items: outputs.GetPodSpecVolumeProjectedSourceDownwardApiItem[];
}

export interface GetPodSpecVolumeProjectedSourceDownwardApiItem {
    fieldReves: outputs.GetPodSpecVolumeProjectedSourceDownwardApiItemFieldRef[];
    mode: string;
    path: string;
    resourceFieldReves: outputs.GetPodSpecVolumeProjectedSourceDownwardApiItemResourceFieldRef[];
}

export interface GetPodSpecVolumeProjectedSourceDownwardApiItemFieldRef {
    apiVersion: string;
    fieldPath: string;
}

export interface GetPodSpecVolumeProjectedSourceDownwardApiItemResourceFieldRef {
    containerName: string;
    divisor: string;
    resource: string;
}

export interface GetPodSpecVolumeProjectedSourceSecret {
    items: outputs.GetPodSpecVolumeProjectedSourceSecretItem[];
    name: string;
    optional: boolean;
}

export interface GetPodSpecVolumeProjectedSourceSecretItem {
    key: string;
    mode: string;
    path: string;
}

export interface GetPodSpecVolumeProjectedSourceServiceAccountToken {
    audience: string;
    expirationSeconds: number;
    path: string;
}

export interface GetPodSpecVolumeQuobyte {
    group: string;
    readOnly: boolean;
    registry: string;
    user: string;
    volume: string;
}

export interface GetPodSpecVolumeRbd {
    cephMonitors: string[];
    fsType: string;
    keyring: string;
    radosUser: string;
    rbdImage: string;
    rbdPool: string;
    readOnly: boolean;
    secretReves: outputs.GetPodSpecVolumeRbdSecretRef[];
}

export interface GetPodSpecVolumeRbdSecretRef {
    name: string;
    namespace: string;
}

export interface GetPodSpecVolumeSecret {
    defaultMode: string;
    items: outputs.GetPodSpecVolumeSecretItem[];
    optional: boolean;
    secretName: string;
}

export interface GetPodSpecVolumeSecretItem {
    key: string;
    mode: string;
    path: string;
}

export interface GetPodSpecVolumeVsphereVolume {
    fsType: string;
    volumePath: string;
}

export interface GetPodV1Metadata {
    /**
     * An unstructured key value map stored with the pod that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the pod. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the pod, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the pod must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this pod that can be used by clients to determine when pod has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface GetPodV1Spec {
    activeDeadlineSeconds: number;
    affinities: outputs.GetPodV1SpecAffinity[];
    automountServiceAccountToken: boolean;
    containers: outputs.GetPodV1SpecContainer[];
    dnsConfigs: outputs.GetPodV1SpecDnsConfig[];
    dnsPolicy: string;
    enableServiceLinks: boolean;
    hostAliases: outputs.GetPodV1SpecHostAlias[];
    hostIpc: boolean;
    hostNetwork: boolean;
    hostPid: boolean;
    hostname: string;
    imagePullSecrets: outputs.GetPodV1SpecImagePullSecret[];
    initContainers: outputs.GetPodV1SpecInitContainer[];
    nodeName: string;
    nodeSelector: {[key: string]: string};
    os: outputs.GetPodV1SpecO[];
    priorityClassName: string;
    readinessGates: outputs.GetPodV1SpecReadinessGate[];
    restartPolicy: string;
    runtimeClassName: string;
    schedulerName: string;
    securityContexts: outputs.GetPodV1SpecSecurityContext[];
    serviceAccountName: string;
    shareProcessNamespace: boolean;
    subdomain: string;
    terminationGracePeriodSeconds: number;
    tolerations: outputs.GetPodV1SpecToleration[];
    topologySpreadConstraints: outputs.GetPodV1SpecTopologySpreadConstraint[];
    volumes: outputs.GetPodV1SpecVolume[];
}

export interface GetPodV1SpecAffinity {
    nodeAffinities: outputs.GetPodV1SpecAffinityNodeAffinity[];
    podAffinities: outputs.GetPodV1SpecAffinityPodAffinity[];
    podAntiAffinities: outputs.GetPodV1SpecAffinityPodAntiAffinity[];
}

export interface GetPodV1SpecAffinityNodeAffinity {
    preferredDuringSchedulingIgnoredDuringExecutions: outputs.GetPodV1SpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    requiredDuringSchedulingIgnoredDuringExecutions: outputs.GetPodV1SpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
}

export interface GetPodV1SpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    preferences: outputs.GetPodV1SpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference[];
    weight: number;
}

export interface GetPodV1SpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
    matchExpressions: outputs.GetPodV1SpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression[];
    matchFields: outputs.GetPodV1SpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchField[];
}

export interface GetPodV1SpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression {
    key: string;
    operator: string;
    values: string[];
}

export interface GetPodV1SpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchField {
    key: string;
    operator: string;
    values: string[];
}

export interface GetPodV1SpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    nodeSelectorTerms: outputs.GetPodV1SpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm[];
}

export interface GetPodV1SpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm {
    matchExpressions: outputs.GetPodV1SpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression[];
    matchFields: outputs.GetPodV1SpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchField[];
}

export interface GetPodV1SpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression {
    key: string;
    operator: string;
    values: string[];
}

export interface GetPodV1SpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchField {
    key: string;
    operator: string;
    values: string[];
}

export interface GetPodV1SpecAffinityPodAffinity {
    preferredDuringSchedulingIgnoredDuringExecutions: outputs.GetPodV1SpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    requiredDuringSchedulingIgnoredDuringExecutions: outputs.GetPodV1SpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
}

export interface GetPodV1SpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    podAffinityTerms: outputs.GetPodV1SpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm[];
    weight: number;
}

export interface GetPodV1SpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    labelSelectors: outputs.GetPodV1SpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector[];
    namespaces: string[];
    topologyKey: string;
}

export interface GetPodV1SpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    matchExpressions: outputs.GetPodV1SpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression[];
    matchLabels: {[key: string]: string};
}

export interface GetPodV1SpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression {
    key: string;
    operator: string;
    values: string[];
}

export interface GetPodV1SpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    labelSelectors: outputs.GetPodV1SpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector[];
    namespaces: string[];
    topologyKey: string;
}

export interface GetPodV1SpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    matchExpressions: outputs.GetPodV1SpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression[];
    matchLabels: {[key: string]: string};
}

export interface GetPodV1SpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression {
    key: string;
    operator: string;
    values: string[];
}

export interface GetPodV1SpecAffinityPodAntiAffinity {
    preferredDuringSchedulingIgnoredDuringExecutions: outputs.GetPodV1SpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    requiredDuringSchedulingIgnoredDuringExecutions: outputs.GetPodV1SpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
}

export interface GetPodV1SpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    podAffinityTerms: outputs.GetPodV1SpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm[];
    weight: number;
}

export interface GetPodV1SpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    labelSelectors: outputs.GetPodV1SpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector[];
    namespaces: string[];
    topologyKey: string;
}

export interface GetPodV1SpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    matchExpressions: outputs.GetPodV1SpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression[];
    matchLabels: {[key: string]: string};
}

export interface GetPodV1SpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression {
    key: string;
    operator: string;
    values: string[];
}

export interface GetPodV1SpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    labelSelectors: outputs.GetPodV1SpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector[];
    namespaces: string[];
    topologyKey: string;
}

export interface GetPodV1SpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    matchExpressions: outputs.GetPodV1SpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression[];
    matchLabels: {[key: string]: string};
}

export interface GetPodV1SpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression {
    key: string;
    operator: string;
    values: string[];
}

export interface GetPodV1SpecContainer {
    args: string[];
    commands: string[];
    envFroms: outputs.GetPodV1SpecContainerEnvFrom[];
    envs: outputs.GetPodV1SpecContainerEnv[];
    image: string;
    imagePullPolicy: string;
    lifecycles: outputs.GetPodV1SpecContainerLifecycle[];
    livenessProbes: outputs.GetPodV1SpecContainerLivenessProbe[];
    name: string;
    ports: outputs.GetPodV1SpecContainerPort[];
    readinessProbes: outputs.GetPodV1SpecContainerReadinessProbe[];
    resources: outputs.GetPodV1SpecContainerResource[];
    securityContexts: outputs.GetPodV1SpecContainerSecurityContext[];
    startupProbes: outputs.GetPodV1SpecContainerStartupProbe[];
    stdin: boolean;
    stdinOnce: boolean;
    terminationMessagePath: string;
    terminationMessagePolicy: string;
    tty: boolean;
    volumeMounts: outputs.GetPodV1SpecContainerVolumeMount[];
    workingDir: string;
}

export interface GetPodV1SpecContainerEnv {
    name: string;
    value: string;
    valueFroms: outputs.GetPodV1SpecContainerEnvValueFrom[];
}

export interface GetPodV1SpecContainerEnvFrom {
    configMapReves: outputs.GetPodV1SpecContainerEnvFromConfigMapRef[];
    prefix: string;
    secretReves: outputs.GetPodV1SpecContainerEnvFromSecretRef[];
}

export interface GetPodV1SpecContainerEnvFromConfigMapRef {
    name: string;
    optional: boolean;
}

export interface GetPodV1SpecContainerEnvFromSecretRef {
    name: string;
    optional: boolean;
}

export interface GetPodV1SpecContainerEnvValueFrom {
    configMapKeyReves: outputs.GetPodV1SpecContainerEnvValueFromConfigMapKeyRef[];
    fieldReves: outputs.GetPodV1SpecContainerEnvValueFromFieldRef[];
    resourceFieldReves: outputs.GetPodV1SpecContainerEnvValueFromResourceFieldRef[];
    secretKeyReves: outputs.GetPodV1SpecContainerEnvValueFromSecretKeyRef[];
}

export interface GetPodV1SpecContainerEnvValueFromConfigMapKeyRef {
    key: string;
    name: string;
    optional: boolean;
}

export interface GetPodV1SpecContainerEnvValueFromFieldRef {
    apiVersion: string;
    fieldPath: string;
}

export interface GetPodV1SpecContainerEnvValueFromResourceFieldRef {
    containerName: string;
    divisor: string;
    resource: string;
}

export interface GetPodV1SpecContainerEnvValueFromSecretKeyRef {
    key: string;
    name: string;
    optional: boolean;
}

export interface GetPodV1SpecContainerLifecycle {
    postStarts: outputs.GetPodV1SpecContainerLifecyclePostStart[];
    preStops: outputs.GetPodV1SpecContainerLifecyclePreStop[];
}

export interface GetPodV1SpecContainerLifecyclePostStart {
    execs: outputs.GetPodV1SpecContainerLifecyclePostStartExec[];
    httpGets: outputs.GetPodV1SpecContainerLifecyclePostStartHttpGet[];
    tcpSockets: outputs.GetPodV1SpecContainerLifecyclePostStartTcpSocket[];
}

export interface GetPodV1SpecContainerLifecyclePostStartExec {
    commands: string[];
}

export interface GetPodV1SpecContainerLifecyclePostStartHttpGet {
    host: string;
    httpHeaders: outputs.GetPodV1SpecContainerLifecyclePostStartHttpGetHttpHeader[];
    path: string;
    port: string;
    scheme: string;
}

export interface GetPodV1SpecContainerLifecyclePostStartHttpGetHttpHeader {
    name: string;
    value: string;
}

export interface GetPodV1SpecContainerLifecyclePostStartTcpSocket {
    port: string;
}

export interface GetPodV1SpecContainerLifecyclePreStop {
    execs: outputs.GetPodV1SpecContainerLifecyclePreStopExec[];
    httpGets: outputs.GetPodV1SpecContainerLifecyclePreStopHttpGet[];
    tcpSockets: outputs.GetPodV1SpecContainerLifecyclePreStopTcpSocket[];
}

export interface GetPodV1SpecContainerLifecyclePreStopExec {
    commands: string[];
}

export interface GetPodV1SpecContainerLifecyclePreStopHttpGet {
    host: string;
    httpHeaders: outputs.GetPodV1SpecContainerLifecyclePreStopHttpGetHttpHeader[];
    path: string;
    port: string;
    scheme: string;
}

export interface GetPodV1SpecContainerLifecyclePreStopHttpGetHttpHeader {
    name: string;
    value: string;
}

export interface GetPodV1SpecContainerLifecyclePreStopTcpSocket {
    port: string;
}

export interface GetPodV1SpecContainerLivenessProbe {
    execs: outputs.GetPodV1SpecContainerLivenessProbeExec[];
    failureThreshold: number;
    grpcs: outputs.GetPodV1SpecContainerLivenessProbeGrpc[];
    httpGets: outputs.GetPodV1SpecContainerLivenessProbeHttpGet[];
    initialDelaySeconds: number;
    periodSeconds: number;
    successThreshold: number;
    tcpSockets: outputs.GetPodV1SpecContainerLivenessProbeTcpSocket[];
    timeoutSeconds: number;
}

export interface GetPodV1SpecContainerLivenessProbeExec {
    commands: string[];
}

export interface GetPodV1SpecContainerLivenessProbeGrpc {
    port: number;
    service: string;
}

export interface GetPodV1SpecContainerLivenessProbeHttpGet {
    host: string;
    httpHeaders: outputs.GetPodV1SpecContainerLivenessProbeHttpGetHttpHeader[];
    path: string;
    port: string;
    scheme: string;
}

export interface GetPodV1SpecContainerLivenessProbeHttpGetHttpHeader {
    name: string;
    value: string;
}

export interface GetPodV1SpecContainerLivenessProbeTcpSocket {
    port: string;
}

export interface GetPodV1SpecContainerPort {
    containerPort: number;
    hostIp: string;
    hostPort: number;
    name: string;
    protocol: string;
}

export interface GetPodV1SpecContainerReadinessProbe {
    execs: outputs.GetPodV1SpecContainerReadinessProbeExec[];
    failureThreshold: number;
    grpcs: outputs.GetPodV1SpecContainerReadinessProbeGrpc[];
    httpGets: outputs.GetPodV1SpecContainerReadinessProbeHttpGet[];
    initialDelaySeconds: number;
    periodSeconds: number;
    successThreshold: number;
    tcpSockets: outputs.GetPodV1SpecContainerReadinessProbeTcpSocket[];
    timeoutSeconds: number;
}

export interface GetPodV1SpecContainerReadinessProbeExec {
    commands: string[];
}

export interface GetPodV1SpecContainerReadinessProbeGrpc {
    port: number;
    service: string;
}

export interface GetPodV1SpecContainerReadinessProbeHttpGet {
    host: string;
    httpHeaders: outputs.GetPodV1SpecContainerReadinessProbeHttpGetHttpHeader[];
    path: string;
    port: string;
    scheme: string;
}

export interface GetPodV1SpecContainerReadinessProbeHttpGetHttpHeader {
    name: string;
    value: string;
}

export interface GetPodV1SpecContainerReadinessProbeTcpSocket {
    port: string;
}

export interface GetPodV1SpecContainerResource {
    limits: {[key: string]: string};
    requests: {[key: string]: string};
}

export interface GetPodV1SpecContainerSecurityContext {
    allowPrivilegeEscalation: boolean;
    capabilities: outputs.GetPodV1SpecContainerSecurityContextCapability[];
    privileged: boolean;
    readOnlyRootFilesystem: boolean;
    runAsGroup: string;
    runAsNonRoot: boolean;
    runAsUser: string;
    seLinuxOptions: outputs.GetPodV1SpecContainerSecurityContextSeLinuxOption[];
    seccompProfiles: outputs.GetPodV1SpecContainerSecurityContextSeccompProfile[];
}

export interface GetPodV1SpecContainerSecurityContextCapability {
    adds: string[];
    drops: string[];
}

export interface GetPodV1SpecContainerSecurityContextSeLinuxOption {
    level: string;
    role: string;
    type: string;
    user: string;
}

export interface GetPodV1SpecContainerSecurityContextSeccompProfile {
    localhostProfile: string;
    type: string;
}

export interface GetPodV1SpecContainerStartupProbe {
    execs: outputs.GetPodV1SpecContainerStartupProbeExec[];
    failureThreshold: number;
    grpcs: outputs.GetPodV1SpecContainerStartupProbeGrpc[];
    httpGets: outputs.GetPodV1SpecContainerStartupProbeHttpGet[];
    initialDelaySeconds: number;
    periodSeconds: number;
    successThreshold: number;
    tcpSockets: outputs.GetPodV1SpecContainerStartupProbeTcpSocket[];
    timeoutSeconds: number;
}

export interface GetPodV1SpecContainerStartupProbeExec {
    commands: string[];
}

export interface GetPodV1SpecContainerStartupProbeGrpc {
    port: number;
    service: string;
}

export interface GetPodV1SpecContainerStartupProbeHttpGet {
    host: string;
    httpHeaders: outputs.GetPodV1SpecContainerStartupProbeHttpGetHttpHeader[];
    path: string;
    port: string;
    scheme: string;
}

export interface GetPodV1SpecContainerStartupProbeHttpGetHttpHeader {
    name: string;
    value: string;
}

export interface GetPodV1SpecContainerStartupProbeTcpSocket {
    port: string;
}

export interface GetPodV1SpecContainerVolumeMount {
    mountPath: string;
    mountPropagation: string;
    name: string;
    readOnly: boolean;
    subPath: string;
}

export interface GetPodV1SpecDnsConfig {
    nameservers: string[];
    options: outputs.GetPodV1SpecDnsConfigOption[];
    searches: string[];
}

export interface GetPodV1SpecDnsConfigOption {
    name: string;
    value: string;
}

export interface GetPodV1SpecHostAlias {
    hostnames: string[];
    ip: string;
}

export interface GetPodV1SpecImagePullSecret {
    name: string;
}

export interface GetPodV1SpecInitContainer {
    args: string[];
    commands: string[];
    envFroms: outputs.GetPodV1SpecInitContainerEnvFrom[];
    envs: outputs.GetPodV1SpecInitContainerEnv[];
    image: string;
    imagePullPolicy: string;
    lifecycles: outputs.GetPodV1SpecInitContainerLifecycle[];
    livenessProbes: outputs.GetPodV1SpecInitContainerLivenessProbe[];
    name: string;
    ports: outputs.GetPodV1SpecInitContainerPort[];
    readinessProbes: outputs.GetPodV1SpecInitContainerReadinessProbe[];
    resources: outputs.GetPodV1SpecInitContainerResource[];
    securityContexts: outputs.GetPodV1SpecInitContainerSecurityContext[];
    startupProbes: outputs.GetPodV1SpecInitContainerStartupProbe[];
    stdin: boolean;
    stdinOnce: boolean;
    terminationMessagePath: string;
    terminationMessagePolicy: string;
    tty: boolean;
    volumeMounts: outputs.GetPodV1SpecInitContainerVolumeMount[];
    workingDir: string;
}

export interface GetPodV1SpecInitContainerEnv {
    name: string;
    value: string;
    valueFroms: outputs.GetPodV1SpecInitContainerEnvValueFrom[];
}

export interface GetPodV1SpecInitContainerEnvFrom {
    configMapReves: outputs.GetPodV1SpecInitContainerEnvFromConfigMapRef[];
    prefix: string;
    secretReves: outputs.GetPodV1SpecInitContainerEnvFromSecretRef[];
}

export interface GetPodV1SpecInitContainerEnvFromConfigMapRef {
    name: string;
    optional: boolean;
}

export interface GetPodV1SpecInitContainerEnvFromSecretRef {
    name: string;
    optional: boolean;
}

export interface GetPodV1SpecInitContainerEnvValueFrom {
    configMapKeyReves: outputs.GetPodV1SpecInitContainerEnvValueFromConfigMapKeyRef[];
    fieldReves: outputs.GetPodV1SpecInitContainerEnvValueFromFieldRef[];
    resourceFieldReves: outputs.GetPodV1SpecInitContainerEnvValueFromResourceFieldRef[];
    secretKeyReves: outputs.GetPodV1SpecInitContainerEnvValueFromSecretKeyRef[];
}

export interface GetPodV1SpecInitContainerEnvValueFromConfigMapKeyRef {
    key: string;
    name: string;
    optional: boolean;
}

export interface GetPodV1SpecInitContainerEnvValueFromFieldRef {
    apiVersion: string;
    fieldPath: string;
}

export interface GetPodV1SpecInitContainerEnvValueFromResourceFieldRef {
    containerName: string;
    divisor: string;
    resource: string;
}

export interface GetPodV1SpecInitContainerEnvValueFromSecretKeyRef {
    key: string;
    name: string;
    optional: boolean;
}

export interface GetPodV1SpecInitContainerLifecycle {
    postStarts: outputs.GetPodV1SpecInitContainerLifecyclePostStart[];
    preStops: outputs.GetPodV1SpecInitContainerLifecyclePreStop[];
}

export interface GetPodV1SpecInitContainerLifecyclePostStart {
    execs: outputs.GetPodV1SpecInitContainerLifecyclePostStartExec[];
    httpGets: outputs.GetPodV1SpecInitContainerLifecyclePostStartHttpGet[];
    tcpSockets: outputs.GetPodV1SpecInitContainerLifecyclePostStartTcpSocket[];
}

export interface GetPodV1SpecInitContainerLifecyclePostStartExec {
    commands: string[];
}

export interface GetPodV1SpecInitContainerLifecyclePostStartHttpGet {
    host: string;
    httpHeaders: outputs.GetPodV1SpecInitContainerLifecyclePostStartHttpGetHttpHeader[];
    path: string;
    port: string;
    scheme: string;
}

export interface GetPodV1SpecInitContainerLifecyclePostStartHttpGetHttpHeader {
    name: string;
    value: string;
}

export interface GetPodV1SpecInitContainerLifecyclePostStartTcpSocket {
    port: string;
}

export interface GetPodV1SpecInitContainerLifecyclePreStop {
    execs: outputs.GetPodV1SpecInitContainerLifecyclePreStopExec[];
    httpGets: outputs.GetPodV1SpecInitContainerLifecyclePreStopHttpGet[];
    tcpSockets: outputs.GetPodV1SpecInitContainerLifecyclePreStopTcpSocket[];
}

export interface GetPodV1SpecInitContainerLifecyclePreStopExec {
    commands: string[];
}

export interface GetPodV1SpecInitContainerLifecyclePreStopHttpGet {
    host: string;
    httpHeaders: outputs.GetPodV1SpecInitContainerLifecyclePreStopHttpGetHttpHeader[];
    path: string;
    port: string;
    scheme: string;
}

export interface GetPodV1SpecInitContainerLifecyclePreStopHttpGetHttpHeader {
    name: string;
    value: string;
}

export interface GetPodV1SpecInitContainerLifecyclePreStopTcpSocket {
    port: string;
}

export interface GetPodV1SpecInitContainerLivenessProbe {
    execs: outputs.GetPodV1SpecInitContainerLivenessProbeExec[];
    failureThreshold: number;
    grpcs: outputs.GetPodV1SpecInitContainerLivenessProbeGrpc[];
    httpGets: outputs.GetPodV1SpecInitContainerLivenessProbeHttpGet[];
    initialDelaySeconds: number;
    periodSeconds: number;
    successThreshold: number;
    tcpSockets: outputs.GetPodV1SpecInitContainerLivenessProbeTcpSocket[];
    timeoutSeconds: number;
}

export interface GetPodV1SpecInitContainerLivenessProbeExec {
    commands: string[];
}

export interface GetPodV1SpecInitContainerLivenessProbeGrpc {
    port: number;
    service: string;
}

export interface GetPodV1SpecInitContainerLivenessProbeHttpGet {
    host: string;
    httpHeaders: outputs.GetPodV1SpecInitContainerLivenessProbeHttpGetHttpHeader[];
    path: string;
    port: string;
    scheme: string;
}

export interface GetPodV1SpecInitContainerLivenessProbeHttpGetHttpHeader {
    name: string;
    value: string;
}

export interface GetPodV1SpecInitContainerLivenessProbeTcpSocket {
    port: string;
}

export interface GetPodV1SpecInitContainerPort {
    containerPort: number;
    hostIp: string;
    hostPort: number;
    name: string;
    protocol: string;
}

export interface GetPodV1SpecInitContainerReadinessProbe {
    execs: outputs.GetPodV1SpecInitContainerReadinessProbeExec[];
    failureThreshold: number;
    grpcs: outputs.GetPodV1SpecInitContainerReadinessProbeGrpc[];
    httpGets: outputs.GetPodV1SpecInitContainerReadinessProbeHttpGet[];
    initialDelaySeconds: number;
    periodSeconds: number;
    successThreshold: number;
    tcpSockets: outputs.GetPodV1SpecInitContainerReadinessProbeTcpSocket[];
    timeoutSeconds: number;
}

export interface GetPodV1SpecInitContainerReadinessProbeExec {
    commands: string[];
}

export interface GetPodV1SpecInitContainerReadinessProbeGrpc {
    port: number;
    service: string;
}

export interface GetPodV1SpecInitContainerReadinessProbeHttpGet {
    host: string;
    httpHeaders: outputs.GetPodV1SpecInitContainerReadinessProbeHttpGetHttpHeader[];
    path: string;
    port: string;
    scheme: string;
}

export interface GetPodV1SpecInitContainerReadinessProbeHttpGetHttpHeader {
    name: string;
    value: string;
}

export interface GetPodV1SpecInitContainerReadinessProbeTcpSocket {
    port: string;
}

export interface GetPodV1SpecInitContainerResource {
    limits: {[key: string]: string};
    requests: {[key: string]: string};
}

export interface GetPodV1SpecInitContainerSecurityContext {
    allowPrivilegeEscalation: boolean;
    capabilities: outputs.GetPodV1SpecInitContainerSecurityContextCapability[];
    privileged: boolean;
    readOnlyRootFilesystem: boolean;
    runAsGroup: string;
    runAsNonRoot: boolean;
    runAsUser: string;
    seLinuxOptions: outputs.GetPodV1SpecInitContainerSecurityContextSeLinuxOption[];
    seccompProfiles: outputs.GetPodV1SpecInitContainerSecurityContextSeccompProfile[];
}

export interface GetPodV1SpecInitContainerSecurityContextCapability {
    adds: string[];
    drops: string[];
}

export interface GetPodV1SpecInitContainerSecurityContextSeLinuxOption {
    level: string;
    role: string;
    type: string;
    user: string;
}

export interface GetPodV1SpecInitContainerSecurityContextSeccompProfile {
    localhostProfile: string;
    type: string;
}

export interface GetPodV1SpecInitContainerStartupProbe {
    execs: outputs.GetPodV1SpecInitContainerStartupProbeExec[];
    failureThreshold: number;
    grpcs: outputs.GetPodV1SpecInitContainerStartupProbeGrpc[];
    httpGets: outputs.GetPodV1SpecInitContainerStartupProbeHttpGet[];
    initialDelaySeconds: number;
    periodSeconds: number;
    successThreshold: number;
    tcpSockets: outputs.GetPodV1SpecInitContainerStartupProbeTcpSocket[];
    timeoutSeconds: number;
}

export interface GetPodV1SpecInitContainerStartupProbeExec {
    commands: string[];
}

export interface GetPodV1SpecInitContainerStartupProbeGrpc {
    port: number;
    service: string;
}

export interface GetPodV1SpecInitContainerStartupProbeHttpGet {
    host: string;
    httpHeaders: outputs.GetPodV1SpecInitContainerStartupProbeHttpGetHttpHeader[];
    path: string;
    port: string;
    scheme: string;
}

export interface GetPodV1SpecInitContainerStartupProbeHttpGetHttpHeader {
    name: string;
    value: string;
}

export interface GetPodV1SpecInitContainerStartupProbeTcpSocket {
    port: string;
}

export interface GetPodV1SpecInitContainerVolumeMount {
    mountPath: string;
    mountPropagation: string;
    name: string;
    readOnly: boolean;
    subPath: string;
}

export interface GetPodV1SpecO {
    name: string;
}

export interface GetPodV1SpecReadinessGate {
    conditionType: string;
}

export interface GetPodV1SpecSecurityContext {
    fsGroup: string;
    fsGroupChangePolicy: string;
    runAsGroup: string;
    runAsNonRoot: boolean;
    runAsUser: string;
    seLinuxOptions: outputs.GetPodV1SpecSecurityContextSeLinuxOption[];
    seccompProfiles: outputs.GetPodV1SpecSecurityContextSeccompProfile[];
    supplementalGroups: number[];
    sysctls: outputs.GetPodV1SpecSecurityContextSysctl[];
    windowsOptions: outputs.GetPodV1SpecSecurityContextWindowsOption[];
}

export interface GetPodV1SpecSecurityContextSeLinuxOption {
    level: string;
    role: string;
    type: string;
    user: string;
}

export interface GetPodV1SpecSecurityContextSeccompProfile {
    localhostProfile: string;
    type: string;
}

export interface GetPodV1SpecSecurityContextSysctl {
    name: string;
    value: string;
}

export interface GetPodV1SpecSecurityContextWindowsOption {
    gmsaCredentialSpec: string;
    gmsaCredentialSpecName: string;
    hostProcess: boolean;
    runAsUsername: string;
}

export interface GetPodV1SpecToleration {
    effect: string;
    key: string;
    operator: string;
    tolerationSeconds: string;
    value: string;
}

export interface GetPodV1SpecTopologySpreadConstraint {
    labelSelectors: outputs.GetPodV1SpecTopologySpreadConstraintLabelSelector[];
    matchLabelKeys: string[];
    maxSkew: number;
    minDomains: number;
    nodeAffinityPolicy: string;
    nodeTaintsPolicy: string;
    topologyKey: string;
    whenUnsatisfiable: string;
}

export interface GetPodV1SpecTopologySpreadConstraintLabelSelector {
    matchExpressions: outputs.GetPodV1SpecTopologySpreadConstraintLabelSelectorMatchExpression[];
    matchLabels: {[key: string]: string};
}

export interface GetPodV1SpecTopologySpreadConstraintLabelSelectorMatchExpression {
    key: string;
    operator: string;
    values: string[];
}

export interface GetPodV1SpecVolume {
    awsElasticBlockStores: outputs.GetPodV1SpecVolumeAwsElasticBlockStore[];
    azureDisks: outputs.GetPodV1SpecVolumeAzureDisk[];
    azureFiles: outputs.GetPodV1SpecVolumeAzureFile[];
    cephFs: outputs.GetPodV1SpecVolumeCephF[];
    cinders: outputs.GetPodV1SpecVolumeCinder[];
    configMaps: outputs.GetPodV1SpecVolumeConfigMap[];
    csis: outputs.GetPodV1SpecVolumeCsi[];
    downwardApis: outputs.GetPodV1SpecVolumeDownwardApi[];
    emptyDirs: outputs.GetPodV1SpecVolumeEmptyDir[];
    ephemerals: outputs.GetPodV1SpecVolumeEphemeral[];
    fcs: outputs.GetPodV1SpecVolumeFc[];
    flexVolumes: outputs.GetPodV1SpecVolumeFlexVolume[];
    flockers: outputs.GetPodV1SpecVolumeFlocker[];
    gcePersistentDisks: outputs.GetPodV1SpecVolumeGcePersistentDisk[];
    gitRepos: outputs.GetPodV1SpecVolumeGitRepo[];
    glusterfs: outputs.GetPodV1SpecVolumeGlusterf[];
    hostPaths: outputs.GetPodV1SpecVolumeHostPath[];
    iscsis: outputs.GetPodV1SpecVolumeIscsi[];
    locals: outputs.GetPodV1SpecVolumeLocal[];
    name: string;
    nfs: outputs.GetPodV1SpecVolumeNf[];
    persistentVolumeClaims: outputs.GetPodV1SpecVolumePersistentVolumeClaim[];
    photonPersistentDisks: outputs.GetPodV1SpecVolumePhotonPersistentDisk[];
    projecteds: outputs.GetPodV1SpecVolumeProjected[];
    quobytes: outputs.GetPodV1SpecVolumeQuobyte[];
    rbds: outputs.GetPodV1SpecVolumeRbd[];
    secrets: outputs.GetPodV1SpecVolumeSecret[];
    vsphereVolumes: outputs.GetPodV1SpecVolumeVsphereVolume[];
}

export interface GetPodV1SpecVolumeAwsElasticBlockStore {
    fsType: string;
    partition: number;
    readOnly: boolean;
    volumeId: string;
}

export interface GetPodV1SpecVolumeAzureDisk {
    cachingMode: string;
    dataDiskUri: string;
    diskName: string;
    fsType: string;
    kind: string;
    readOnly: boolean;
}

export interface GetPodV1SpecVolumeAzureFile {
    readOnly: boolean;
    secretName: string;
    secretNamespace: string;
    shareName: string;
}

export interface GetPodV1SpecVolumeCephF {
    monitors: string[];
    path: string;
    readOnly: boolean;
    secretFile: string;
    secretReves: outputs.GetPodV1SpecVolumeCephFSecretRef[];
    user: string;
}

export interface GetPodV1SpecVolumeCephFSecretRef {
    name: string;
    namespace: string;
}

export interface GetPodV1SpecVolumeCinder {
    fsType: string;
    readOnly: boolean;
    volumeId: string;
}

export interface GetPodV1SpecVolumeConfigMap {
    defaultMode: string;
    items: outputs.GetPodV1SpecVolumeConfigMapItem[];
    name: string;
    optional: boolean;
}

export interface GetPodV1SpecVolumeConfigMapItem {
    key: string;
    mode: string;
    path: string;
}

export interface GetPodV1SpecVolumeCsi {
    driver: string;
    fsType: string;
    nodePublishSecretReves: outputs.GetPodV1SpecVolumeCsiNodePublishSecretRef[];
    readOnly: boolean;
    volumeAttributes: {[key: string]: string};
}

export interface GetPodV1SpecVolumeCsiNodePublishSecretRef {
    name: string;
}

export interface GetPodV1SpecVolumeDownwardApi {
    defaultMode: string;
    items: outputs.GetPodV1SpecVolumeDownwardApiItem[];
}

export interface GetPodV1SpecVolumeDownwardApiItem {
    fieldReves: outputs.GetPodV1SpecVolumeDownwardApiItemFieldRef[];
    mode: string;
    path: string;
    resourceFieldReves: outputs.GetPodV1SpecVolumeDownwardApiItemResourceFieldRef[];
}

export interface GetPodV1SpecVolumeDownwardApiItemFieldRef {
    apiVersion: string;
    fieldPath: string;
}

export interface GetPodV1SpecVolumeDownwardApiItemResourceFieldRef {
    containerName: string;
    divisor: string;
    resource: string;
}

export interface GetPodV1SpecVolumeEmptyDir {
    medium: string;
    sizeLimit: string;
}

export interface GetPodV1SpecVolumeEphemeral {
    volumeClaimTemplates: outputs.GetPodV1SpecVolumeEphemeralVolumeClaimTemplate[];
}

export interface GetPodV1SpecVolumeEphemeralVolumeClaimTemplate {
    metadatas: outputs.GetPodV1SpecVolumeEphemeralVolumeClaimTemplateMetadata[];
    specs: outputs.GetPodV1SpecVolumeEphemeralVolumeClaimTemplateSpec[];
}

export interface GetPodV1SpecVolumeEphemeralVolumeClaimTemplateMetadata {
    annotations: {[key: string]: string};
    labels: {[key: string]: string};
}

export interface GetPodV1SpecVolumeEphemeralVolumeClaimTemplateSpec {
    accessModes: string[];
    resources: outputs.GetPodV1SpecVolumeEphemeralVolumeClaimTemplateSpecResource[];
    selectors: outputs.GetPodV1SpecVolumeEphemeralVolumeClaimTemplateSpecSelector[];
    storageClassName: string;
    volumeMode: string;
    volumeName: string;
}

export interface GetPodV1SpecVolumeEphemeralVolumeClaimTemplateSpecResource {
    limits: {[key: string]: string};
    requests: {[key: string]: string};
}

export interface GetPodV1SpecVolumeEphemeralVolumeClaimTemplateSpecSelector {
    matchExpressions: outputs.GetPodV1SpecVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpression[];
    matchLabels: {[key: string]: string};
}

export interface GetPodV1SpecVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpression {
    key: string;
    operator: string;
    values: string[];
}

export interface GetPodV1SpecVolumeFc {
    fsType: string;
    lun: number;
    readOnly: boolean;
    targetWwNs: string[];
}

export interface GetPodV1SpecVolumeFlexVolume {
    driver: string;
    fsType: string;
    options: {[key: string]: string};
    readOnly: boolean;
    secretReves: outputs.GetPodV1SpecVolumeFlexVolumeSecretRef[];
}

export interface GetPodV1SpecVolumeFlexVolumeSecretRef {
    name: string;
    namespace: string;
}

export interface GetPodV1SpecVolumeFlocker {
    datasetName: string;
    datasetUuid: string;
}

export interface GetPodV1SpecVolumeGcePersistentDisk {
    fsType: string;
    partition: number;
    pdName: string;
    readOnly: boolean;
}

export interface GetPodV1SpecVolumeGitRepo {
    directory: string;
    repository: string;
    revision: string;
}

export interface GetPodV1SpecVolumeGlusterf {
    endpointsName: string;
    path: string;
    readOnly: boolean;
}

export interface GetPodV1SpecVolumeHostPath {
    path: string;
    type: string;
}

export interface GetPodV1SpecVolumeIscsi {
    fsType: string;
    iqn: string;
    iscsiInterface: string;
    lun: number;
    readOnly: boolean;
    targetPortal: string;
}

export interface GetPodV1SpecVolumeLocal {
    path: string;
}

export interface GetPodV1SpecVolumeNf {
    path: string;
    readOnly: boolean;
    server: string;
}

export interface GetPodV1SpecVolumePersistentVolumeClaim {
    claimName: string;
    readOnly: boolean;
}

export interface GetPodV1SpecVolumePhotonPersistentDisk {
    fsType: string;
    pdId: string;
}

export interface GetPodV1SpecVolumeProjected {
    defaultMode: string;
    sources: outputs.GetPodV1SpecVolumeProjectedSource[];
}

export interface GetPodV1SpecVolumeProjectedSource {
    configMaps: outputs.GetPodV1SpecVolumeProjectedSourceConfigMap[];
    downwardApis: outputs.GetPodV1SpecVolumeProjectedSourceDownwardApi[];
    secrets: outputs.GetPodV1SpecVolumeProjectedSourceSecret[];
    serviceAccountTokens: outputs.GetPodV1SpecVolumeProjectedSourceServiceAccountToken[];
}

export interface GetPodV1SpecVolumeProjectedSourceConfigMap {
    items: outputs.GetPodV1SpecVolumeProjectedSourceConfigMapItem[];
    name: string;
    optional: boolean;
}

export interface GetPodV1SpecVolumeProjectedSourceConfigMapItem {
    key: string;
    mode: string;
    path: string;
}

export interface GetPodV1SpecVolumeProjectedSourceDownwardApi {
    items: outputs.GetPodV1SpecVolumeProjectedSourceDownwardApiItem[];
}

export interface GetPodV1SpecVolumeProjectedSourceDownwardApiItem {
    fieldReves: outputs.GetPodV1SpecVolumeProjectedSourceDownwardApiItemFieldRef[];
    mode: string;
    path: string;
    resourceFieldReves: outputs.GetPodV1SpecVolumeProjectedSourceDownwardApiItemResourceFieldRef[];
}

export interface GetPodV1SpecVolumeProjectedSourceDownwardApiItemFieldRef {
    apiVersion: string;
    fieldPath: string;
}

export interface GetPodV1SpecVolumeProjectedSourceDownwardApiItemResourceFieldRef {
    containerName: string;
    divisor: string;
    resource: string;
}

export interface GetPodV1SpecVolumeProjectedSourceSecret {
    items: outputs.GetPodV1SpecVolumeProjectedSourceSecretItem[];
    name: string;
    optional: boolean;
}

export interface GetPodV1SpecVolumeProjectedSourceSecretItem {
    key: string;
    mode: string;
    path: string;
}

export interface GetPodV1SpecVolumeProjectedSourceServiceAccountToken {
    audience: string;
    expirationSeconds: number;
    path: string;
}

export interface GetPodV1SpecVolumeQuobyte {
    group: string;
    readOnly: boolean;
    registry: string;
    user: string;
    volume: string;
}

export interface GetPodV1SpecVolumeRbd {
    cephMonitors: string[];
    fsType: string;
    keyring: string;
    radosUser: string;
    rbdImage: string;
    rbdPool: string;
    readOnly: boolean;
    secretReves: outputs.GetPodV1SpecVolumeRbdSecretRef[];
}

export interface GetPodV1SpecVolumeRbdSecretRef {
    name: string;
    namespace: string;
}

export interface GetPodV1SpecVolumeSecret {
    defaultMode: string;
    items: outputs.GetPodV1SpecVolumeSecretItem[];
    optional: boolean;
    secretName: string;
}

export interface GetPodV1SpecVolumeSecretItem {
    key: string;
    mode: string;
    path: string;
}

export interface GetPodV1SpecVolumeVsphereVolume {
    fsType: string;
    volumePath: string;
}

export interface GetResourceMetadata {
    /**
     * The resource name.
     */
    name: string;
    /**
     * The resource namespace.
     */
    namespace?: string;
}

export interface GetSecretMetadata {
    /**
     * An unstructured key value map stored with the secret that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the secret. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the secret, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the secret must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this secret that can be used by clients to determine when secret has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this secret. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface GetSecretV1Metadata {
    /**
     * An unstructured key value map stored with the secret that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the secret. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the secret, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the secret must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this secret that can be used by clients to determine when secret has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this secret. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface GetServiceAccountImagePullSecret {
    name: string;
}

export interface GetServiceAccountMetadata {
    /**
     * An unstructured key value map stored with the service account that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the service account. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the service account, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the service account must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this service account that can be used by clients to determine when service account has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this service account. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface GetServiceAccountSecret {
    name: string;
}

export interface GetServiceAccountV1ImagePullSecret {
    name: string;
}

export interface GetServiceAccountV1Metadata {
    /**
     * An unstructured key value map stored with the service account that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the service account. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the service account, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the service account must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this service account that can be used by clients to determine when service account has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this service account. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface GetServiceAccountV1Secret {
    name: string;
}

export interface GetServiceMetadata {
    /**
     * An unstructured key value map stored with the service that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the service. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the service, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the service must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this service that can be used by clients to determine when service has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this service. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface GetServiceSpec {
    allocateLoadBalancerNodePorts: boolean;
    clusterIp: string;
    clusterIps: string[];
    externalIps: string[];
    externalName: string;
    externalTrafficPolicy: string;
    healthCheckNodePort: number;
    internalTrafficPolicy: string;
    ipFamilies: string[];
    ipFamilyPolicy: string;
    loadBalancerClass: string;
    loadBalancerIp: string;
    loadBalancerSourceRanges: string[];
    ports: outputs.GetServiceSpecPort[];
    publishNotReadyAddresses: boolean;
    selector: {[key: string]: string};
    sessionAffinity: string;
    sessionAffinityConfigs: outputs.GetServiceSpecSessionAffinityConfig[];
    type: string;
}

export interface GetServiceSpecPort {
    appProtocol: string;
    name: string;
    nodePort: number;
    port: number;
    protocol: string;
    targetPort: string;
}

export interface GetServiceSpecSessionAffinityConfig {
    clientIps: outputs.GetServiceSpecSessionAffinityConfigClientIp[];
}

export interface GetServiceSpecSessionAffinityConfigClientIp {
    timeoutSeconds: number;
}

export interface GetServiceStatus {
    loadBalancers: outputs.GetServiceStatusLoadBalancer[];
}

export interface GetServiceStatusLoadBalancer {
    ingresses: outputs.GetServiceStatusLoadBalancerIngress[];
}

export interface GetServiceStatusLoadBalancerIngress {
    hostname: string;
    ip: string;
}

export interface GetServiceV1Metadata {
    /**
     * An unstructured key value map stored with the service that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the service. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the service, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the service must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this service that can be used by clients to determine when service has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this service. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface GetServiceV1Spec {
    allocateLoadBalancerNodePorts: boolean;
    clusterIp: string;
    clusterIps: string[];
    externalIps: string[];
    externalName: string;
    externalTrafficPolicy: string;
    healthCheckNodePort: number;
    internalTrafficPolicy: string;
    ipFamilies: string[];
    ipFamilyPolicy: string;
    loadBalancerClass: string;
    loadBalancerIp: string;
    loadBalancerSourceRanges: string[];
    ports: outputs.GetServiceV1SpecPort[];
    publishNotReadyAddresses: boolean;
    selector: {[key: string]: string};
    sessionAffinity: string;
    sessionAffinityConfigs: outputs.GetServiceV1SpecSessionAffinityConfig[];
    type: string;
}

export interface GetServiceV1SpecPort {
    appProtocol: string;
    name: string;
    nodePort: number;
    port: number;
    protocol: string;
    targetPort: string;
}

export interface GetServiceV1SpecSessionAffinityConfig {
    clientIps: outputs.GetServiceV1SpecSessionAffinityConfigClientIp[];
}

export interface GetServiceV1SpecSessionAffinityConfigClientIp {
    timeoutSeconds: number;
}

export interface GetServiceV1Status {
    loadBalancers: outputs.GetServiceV1StatusLoadBalancer[];
}

export interface GetServiceV1StatusLoadBalancer {
    ingresses: outputs.GetServiceV1StatusLoadBalancerIngress[];
}

export interface GetServiceV1StatusLoadBalancerIngress {
    hostname: string;
    ip: string;
}

export interface GetStorageClassAllowedTopologies {
    /**
     * A list of topology selector requirements by labels.
     */
    matchLabelExpressions?: outputs.GetStorageClassAllowedTopologiesMatchLabelExpression[];
}

export interface GetStorageClassAllowedTopologiesMatchLabelExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * An array of string values. One value must match the label to be selected.
     */
    values?: string[];
}

export interface GetStorageClassMetadata {
    /**
     * An unstructured key value map stored with the storage class that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the storage class. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the storage class, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * An opaque value that represents the internal version of this storage class that can be used by clients to determine when storage class has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this storage class. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface GetStorageClassV1AllowedTopologies {
    /**
     * A list of topology selector requirements by labels.
     */
    matchLabelExpressions?: outputs.GetStorageClassV1AllowedTopologiesMatchLabelExpression[];
}

export interface GetStorageClassV1AllowedTopologiesMatchLabelExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * An array of string values. One value must match the label to be selected.
     */
    values?: string[];
}

export interface GetStorageClassV1Metadata {
    /**
     * An unstructured key value map stored with the storage class that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the storage class. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the storage class, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * An opaque value that represents the internal version of this storage class that can be used by clients to determine when storage class has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this storage class. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface HorizontalPodAutoscalerMetadata {
    /**
     * An unstructured key value map stored with the horizontal pod autoscaler that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the horizontal pod autoscaler. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the horizontal pod autoscaler, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the horizontal pod autoscaler must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this horizontal pod autoscaler that can be used by clients to determine when horizontal pod autoscaler has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this horizontal pod autoscaler. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface HorizontalPodAutoscalerSpec {
    /**
     * Behavior configures the scaling behavior of the target in both Up and Down directions (`scale_up` and `scale_down` fields respectively).
     */
    behavior?: outputs.HorizontalPodAutoscalerSpecBehavior;
    /**
     * Upper limit for the number of pods that can be set by the autoscaler.
     */
    maxReplicas: number;
    /**
     * The specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used). The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods. Ergo, metrics used must decrease as the pod count is increased, and vice-versa. See the individual metric source types for more information about how each type of metric must respond. If not set, the default metric will be set to 80% average CPU utilization.
     */
    metrics?: outputs.HorizontalPodAutoscalerSpecMetric[];
    /**
     * Lower limit for the number of pods that can be set by the autoscaler, defaults to `1`.
     */
    minReplicas?: number;
    /**
     * Reference to scaled resource. e.g. Replication Controller
     */
    scaleTargetRef: outputs.HorizontalPodAutoscalerSpecScaleTargetRef;
    /**
     * Target average CPU utilization (represented as a percentage of requested CPU) over all the pods. If not specified the default autoscaling policy will be used.
     */
    targetCpuUtilizationPercentage: number;
}

export interface HorizontalPodAutoscalerSpecBehavior {
    /**
     * Scaling policy for scaling Down
     */
    scaleDowns?: outputs.HorizontalPodAutoscalerSpecBehaviorScaleDown[];
    /**
     * Scaling policy for scaling Up
     */
    scaleUps?: outputs.HorizontalPodAutoscalerSpecBehaviorScaleUp[];
}

export interface HorizontalPodAutoscalerSpecBehaviorScaleDown {
    /**
     * List of potential scaling polices which can be used during scaling. At least one policy must be specified, otherwise the scaling rule will be discarded as invalid.
     */
    policies: outputs.HorizontalPodAutoscalerSpecBehaviorScaleDownPolicy[];
    /**
     * Used to specify which policy should be used. If not set, the default value Max is used.
     */
    selectPolicy?: string;
    /**
     * Number of seconds for which past recommendations should be considered while scaling up or scaling down. This value must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
     */
    stabilizationWindowSeconds?: number;
}

export interface HorizontalPodAutoscalerSpecBehaviorScaleDownPolicy {
    /**
     * Period specifies the window of time for which the policy should hold true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).
     */
    periodSeconds: number;
    /**
     * Type is used to specify the scaling policy: Percent or Pods
     */
    type: string;
    /**
     * Value contains the amount of change which is permitted by the policy. It must be greater than zero.
     */
    value: number;
}

export interface HorizontalPodAutoscalerSpecBehaviorScaleUp {
    /**
     * List of potential scaling polices which can be used during scaling. At least one policy must be specified, otherwise the scaling rule will be discarded as invalid.
     */
    policies: outputs.HorizontalPodAutoscalerSpecBehaviorScaleUpPolicy[];
    /**
     * Used to specify which policy should be used. If not set, the default value Max is used.
     */
    selectPolicy?: string;
    /**
     * Number of seconds for which past recommendations should be considered while scaling up or scaling down. This value must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
     */
    stabilizationWindowSeconds?: number;
}

export interface HorizontalPodAutoscalerSpecBehaviorScaleUpPolicy {
    /**
     * Period specifies the window of time for which the policy should hold true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).
     */
    periodSeconds: number;
    /**
     * Type is used to specify the scaling policy: Percent or Pods
     */
    type: string;
    /**
     * Value contains the amount of change which is permitted by the policy. It must be greater than zero.
     */
    value: number;
}

export interface HorizontalPodAutoscalerSpecMetric {
    containerResource?: outputs.HorizontalPodAutoscalerSpecMetricContainerResource;
    external?: outputs.HorizontalPodAutoscalerSpecMetricExternal;
    object?: outputs.HorizontalPodAutoscalerSpecMetricObject;
    pods?: outputs.HorizontalPodAutoscalerSpecMetricPods;
    resource?: outputs.HorizontalPodAutoscalerSpecMetricResource;
    /**
     * type is the type of metric source. It should be one of "ContainerResource", "External", "Object", "Pods" or "Resource", each mapping to a matching field in the object. Note: "ContainerResource" type is available on when the feature-gate HPAContainerMetrics is enabled
     */
    type: string;
}

export interface HorizontalPodAutoscalerSpecMetricContainerResource {
    /**
     * name of the container in the pods of the scaling target
     */
    container: string;
    /**
     * name of the resource in question
     */
    name: string;
    /**
     * target specifies the target value for the given metric
     */
    target?: outputs.HorizontalPodAutoscalerSpecMetricContainerResourceTarget;
}

export interface HorizontalPodAutoscalerSpecMetricContainerResourceTarget {
    /**
     * averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
     */
    averageUtilization?: number;
    /**
     * averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
     */
    averageValue?: string;
    /**
     * type represents whether the metric type is Utilization, Value, or AverageValue
     */
    type: string;
    /**
     * value is the target value of the metric (as a quantity).
     */
    value?: string;
}

export interface HorizontalPodAutoscalerSpecMetricExternal {
    /**
     * metric identifies the target metric by name and selector
     */
    metric: outputs.HorizontalPodAutoscalerSpecMetricExternalMetric;
    /**
     * target specifies the target value for the given metric
     */
    target?: outputs.HorizontalPodAutoscalerSpecMetricExternalTarget;
}

export interface HorizontalPodAutoscalerSpecMetricExternalMetric {
    /**
     * name is the name of the given metric
     */
    name: string;
    /**
     * selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.
     */
    selectors?: outputs.HorizontalPodAutoscalerSpecMetricExternalMetricSelector[];
}

export interface HorizontalPodAutoscalerSpecMetricExternalMetricSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.HorizontalPodAutoscalerSpecMetricExternalMetricSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface HorizontalPodAutoscalerSpecMetricExternalMetricSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface HorizontalPodAutoscalerSpecMetricExternalTarget {
    /**
     * averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
     */
    averageUtilization?: number;
    /**
     * averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
     */
    averageValue?: string;
    /**
     * type represents whether the metric type is Utilization, Value, or AverageValue
     */
    type: string;
    /**
     * value is the target value of the metric (as a quantity).
     */
    value?: string;
}

export interface HorizontalPodAutoscalerSpecMetricObject {
    describedObject: outputs.HorizontalPodAutoscalerSpecMetricObjectDescribedObject;
    /**
     * metric identifies the target metric by name and selector
     */
    metric: outputs.HorizontalPodAutoscalerSpecMetricObjectMetric;
    /**
     * target specifies the target value for the given metric
     */
    target?: outputs.HorizontalPodAutoscalerSpecMetricObjectTarget;
}

export interface HorizontalPodAutoscalerSpecMetricObjectDescribedObject {
    /**
     * API version of the referent
     */
    apiVersion: string;
    /**
     * Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind: string;
    /**
     * Name of the referent; More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
}

export interface HorizontalPodAutoscalerSpecMetricObjectMetric {
    /**
     * name is the name of the given metric
     */
    name: string;
    /**
     * selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.
     */
    selectors?: outputs.HorizontalPodAutoscalerSpecMetricObjectMetricSelector[];
}

export interface HorizontalPodAutoscalerSpecMetricObjectMetricSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.HorizontalPodAutoscalerSpecMetricObjectMetricSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface HorizontalPodAutoscalerSpecMetricObjectMetricSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface HorizontalPodAutoscalerSpecMetricObjectTarget {
    /**
     * averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
     */
    averageUtilization?: number;
    /**
     * averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
     */
    averageValue?: string;
    /**
     * type represents whether the metric type is Utilization, Value, or AverageValue
     */
    type: string;
    /**
     * value is the target value of the metric (as a quantity).
     */
    value?: string;
}

export interface HorizontalPodAutoscalerSpecMetricPods {
    /**
     * metric identifies the target metric by name and selector
     */
    metric: outputs.HorizontalPodAutoscalerSpecMetricPodsMetric;
    /**
     * target specifies the target value for the given metric
     */
    target?: outputs.HorizontalPodAutoscalerSpecMetricPodsTarget;
}

export interface HorizontalPodAutoscalerSpecMetricPodsMetric {
    /**
     * name is the name of the given metric
     */
    name: string;
    /**
     * selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.
     */
    selectors?: outputs.HorizontalPodAutoscalerSpecMetricPodsMetricSelector[];
}

export interface HorizontalPodAutoscalerSpecMetricPodsMetricSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.HorizontalPodAutoscalerSpecMetricPodsMetricSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface HorizontalPodAutoscalerSpecMetricPodsMetricSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface HorizontalPodAutoscalerSpecMetricPodsTarget {
    /**
     * averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
     */
    averageUtilization?: number;
    /**
     * averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
     */
    averageValue?: string;
    /**
     * type represents whether the metric type is Utilization, Value, or AverageValue
     */
    type: string;
    /**
     * value is the target value of the metric (as a quantity).
     */
    value?: string;
}

export interface HorizontalPodAutoscalerSpecMetricResource {
    /**
     * name is the name of the resource in question.
     */
    name: string;
    /**
     * Target specifies the target value for the given metric
     */
    target?: outputs.HorizontalPodAutoscalerSpecMetricResourceTarget;
}

export interface HorizontalPodAutoscalerSpecMetricResourceTarget {
    /**
     * averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
     */
    averageUtilization?: number;
    /**
     * averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
     */
    averageValue?: string;
    /**
     * type represents whether the metric type is Utilization, Value, or AverageValue
     */
    type: string;
    /**
     * value is the target value of the metric (as a quantity).
     */
    value?: string;
}

export interface HorizontalPodAutoscalerSpecScaleTargetRef {
    /**
     * API version of the referent
     */
    apiVersion?: string;
    /**
     * Kind of the referent. e.g. `ReplicationController`. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds
     */
    kind: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
}

export interface HorizontalPodAutoscalerV1Metadata {
    /**
     * An unstructured key value map stored with the horizontal pod autoscaler that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the horizontal pod autoscaler. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the horizontal pod autoscaler, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the horizontal pod autoscaler must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this horizontal pod autoscaler that can be used by clients to determine when horizontal pod autoscaler has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this horizontal pod autoscaler. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface HorizontalPodAutoscalerV1Spec {
    /**
     * Upper limit for the number of pods that can be set by the autoscaler.
     */
    maxReplicas: number;
    /**
     * Lower limit for the number of pods that can be set by the autoscaler, defaults to `1`.
     */
    minReplicas?: number;
    /**
     * Reference to scaled resource. e.g. Replication Controller
     */
    scaleTargetRef: outputs.HorizontalPodAutoscalerV1SpecScaleTargetRef;
    /**
     * Target average CPU utilization (represented as a percentage of requested CPU) over all the pods. If not specified the default autoscaling policy will be used.
     */
    targetCpuUtilizationPercentage: number;
}

export interface HorizontalPodAutoscalerV1SpecScaleTargetRef {
    /**
     * API version of the referent
     */
    apiVersion?: string;
    /**
     * Kind of the referent. e.g. `ReplicationController`. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds
     */
    kind: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
}

export interface HorizontalPodAutoscalerV2Metadata {
    /**
     * An unstructured key value map stored with the horizontal pod autoscaler that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the horizontal pod autoscaler. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the horizontal pod autoscaler, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the horizontal pod autoscaler must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this horizontal pod autoscaler that can be used by clients to determine when horizontal pod autoscaler has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this horizontal pod autoscaler. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface HorizontalPodAutoscalerV2Spec {
    /**
     * Behavior configures the scaling behavior of the target in both Up and Down directions (`scale_up` and `scale_down` fields respectively).
     */
    behavior?: outputs.HorizontalPodAutoscalerV2SpecBehavior;
    /**
     * Upper limit for the number of pods that can be set by the autoscaler.
     */
    maxReplicas: number;
    /**
     * The specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used). The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods. Ergo, metrics used must decrease as the pod count is increased, and vice-versa. See the individual metric source types for more information about how each type of metric must respond. If not set, the default metric will be set to 80% average CPU utilization.
     */
    metrics?: outputs.HorizontalPodAutoscalerV2SpecMetric[];
    /**
     * Lower limit for the number of pods that can be set by the autoscaler, defaults to `1`.
     */
    minReplicas?: number;
    /**
     * Reference to scaled resource. e.g. Replication Controller
     */
    scaleTargetRef: outputs.HorizontalPodAutoscalerV2SpecScaleTargetRef;
    /**
     * Target average CPU utilization (represented as a percentage of requested CPU) over all the pods. If not specified the default autoscaling policy will be used.
     */
    targetCpuUtilizationPercentage: number;
}

export interface HorizontalPodAutoscalerV2SpecBehavior {
    /**
     * Scaling policy for scaling Down
     */
    scaleDowns?: outputs.HorizontalPodAutoscalerV2SpecBehaviorScaleDown[];
    /**
     * Scaling policy for scaling Up
     */
    scaleUps?: outputs.HorizontalPodAutoscalerV2SpecBehaviorScaleUp[];
}

export interface HorizontalPodAutoscalerV2SpecBehaviorScaleDown {
    /**
     * List of potential scaling polices which can be used during scaling. At least one policy must be specified, otherwise the scaling rule will be discarded as invalid.
     */
    policies: outputs.HorizontalPodAutoscalerV2SpecBehaviorScaleDownPolicy[];
    /**
     * Used to specify which policy should be used. If not set, the default value Max is used.
     */
    selectPolicy?: string;
    /**
     * Number of seconds for which past recommendations should be considered while scaling up or scaling down. This value must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
     */
    stabilizationWindowSeconds?: number;
}

export interface HorizontalPodAutoscalerV2SpecBehaviorScaleDownPolicy {
    /**
     * Period specifies the window of time for which the policy should hold true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).
     */
    periodSeconds: number;
    /**
     * Type is used to specify the scaling policy: Percent or Pods
     */
    type: string;
    /**
     * Value contains the amount of change which is permitted by the policy. It must be greater than zero.
     */
    value: number;
}

export interface HorizontalPodAutoscalerV2SpecBehaviorScaleUp {
    /**
     * List of potential scaling polices which can be used during scaling. At least one policy must be specified, otherwise the scaling rule will be discarded as invalid.
     */
    policies: outputs.HorizontalPodAutoscalerV2SpecBehaviorScaleUpPolicy[];
    /**
     * Used to specify which policy should be used. If not set, the default value Max is used.
     */
    selectPolicy?: string;
    /**
     * Number of seconds for which past recommendations should be considered while scaling up or scaling down. This value must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
     */
    stabilizationWindowSeconds?: number;
}

export interface HorizontalPodAutoscalerV2SpecBehaviorScaleUpPolicy {
    /**
     * Period specifies the window of time for which the policy should hold true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).
     */
    periodSeconds: number;
    /**
     * Type is used to specify the scaling policy: Percent or Pods
     */
    type: string;
    /**
     * Value contains the amount of change which is permitted by the policy. It must be greater than zero.
     */
    value: number;
}

export interface HorizontalPodAutoscalerV2SpecMetric {
    containerResource?: outputs.HorizontalPodAutoscalerV2SpecMetricContainerResource;
    external?: outputs.HorizontalPodAutoscalerV2SpecMetricExternal;
    object?: outputs.HorizontalPodAutoscalerV2SpecMetricObject;
    pods?: outputs.HorizontalPodAutoscalerV2SpecMetricPods;
    resource?: outputs.HorizontalPodAutoscalerV2SpecMetricResource;
    /**
     * type is the type of metric source. It should be one of "ContainerResource", "External", "Object", "Pods" or "Resource", each mapping to a matching field in the object. Note: "ContainerResource" type is available on when the feature-gate HPAContainerMetrics is enabled
     */
    type: string;
}

export interface HorizontalPodAutoscalerV2SpecMetricContainerResource {
    /**
     * name of the container in the pods of the scaling target
     */
    container: string;
    /**
     * name of the resource in question
     */
    name: string;
    /**
     * target specifies the target value for the given metric
     */
    target?: outputs.HorizontalPodAutoscalerV2SpecMetricContainerResourceTarget;
}

export interface HorizontalPodAutoscalerV2SpecMetricContainerResourceTarget {
    /**
     * averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
     */
    averageUtilization?: number;
    /**
     * averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
     */
    averageValue?: string;
    /**
     * type represents whether the metric type is Utilization, Value, or AverageValue
     */
    type: string;
    /**
     * value is the target value of the metric (as a quantity).
     */
    value?: string;
}

export interface HorizontalPodAutoscalerV2SpecMetricExternal {
    /**
     * metric identifies the target metric by name and selector
     */
    metric: outputs.HorizontalPodAutoscalerV2SpecMetricExternalMetric;
    /**
     * target specifies the target value for the given metric
     */
    target?: outputs.HorizontalPodAutoscalerV2SpecMetricExternalTarget;
}

export interface HorizontalPodAutoscalerV2SpecMetricExternalMetric {
    /**
     * name is the name of the given metric
     */
    name: string;
    /**
     * selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.
     */
    selectors?: outputs.HorizontalPodAutoscalerV2SpecMetricExternalMetricSelector[];
}

export interface HorizontalPodAutoscalerV2SpecMetricExternalMetricSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.HorizontalPodAutoscalerV2SpecMetricExternalMetricSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface HorizontalPodAutoscalerV2SpecMetricExternalMetricSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface HorizontalPodAutoscalerV2SpecMetricExternalTarget {
    /**
     * averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
     */
    averageUtilization?: number;
    /**
     * averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
     */
    averageValue?: string;
    /**
     * type represents whether the metric type is Utilization, Value, or AverageValue
     */
    type: string;
    /**
     * value is the target value of the metric (as a quantity).
     */
    value?: string;
}

export interface HorizontalPodAutoscalerV2SpecMetricObject {
    describedObject: outputs.HorizontalPodAutoscalerV2SpecMetricObjectDescribedObject;
    /**
     * metric identifies the target metric by name and selector
     */
    metric: outputs.HorizontalPodAutoscalerV2SpecMetricObjectMetric;
    /**
     * target specifies the target value for the given metric
     */
    target?: outputs.HorizontalPodAutoscalerV2SpecMetricObjectTarget;
}

export interface HorizontalPodAutoscalerV2SpecMetricObjectDescribedObject {
    /**
     * API version of the referent
     */
    apiVersion: string;
    /**
     * Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind: string;
    /**
     * Name of the referent; More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
}

export interface HorizontalPodAutoscalerV2SpecMetricObjectMetric {
    /**
     * name is the name of the given metric
     */
    name: string;
    /**
     * selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.
     */
    selectors?: outputs.HorizontalPodAutoscalerV2SpecMetricObjectMetricSelector[];
}

export interface HorizontalPodAutoscalerV2SpecMetricObjectMetricSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.HorizontalPodAutoscalerV2SpecMetricObjectMetricSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface HorizontalPodAutoscalerV2SpecMetricObjectMetricSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface HorizontalPodAutoscalerV2SpecMetricObjectTarget {
    /**
     * averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
     */
    averageUtilization?: number;
    /**
     * averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
     */
    averageValue?: string;
    /**
     * type represents whether the metric type is Utilization, Value, or AverageValue
     */
    type: string;
    /**
     * value is the target value of the metric (as a quantity).
     */
    value?: string;
}

export interface HorizontalPodAutoscalerV2SpecMetricPods {
    /**
     * metric identifies the target metric by name and selector
     */
    metric: outputs.HorizontalPodAutoscalerV2SpecMetricPodsMetric;
    /**
     * target specifies the target value for the given metric
     */
    target?: outputs.HorizontalPodAutoscalerV2SpecMetricPodsTarget;
}

export interface HorizontalPodAutoscalerV2SpecMetricPodsMetric {
    /**
     * name is the name of the given metric
     */
    name: string;
    /**
     * selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.
     */
    selectors?: outputs.HorizontalPodAutoscalerV2SpecMetricPodsMetricSelector[];
}

export interface HorizontalPodAutoscalerV2SpecMetricPodsMetricSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.HorizontalPodAutoscalerV2SpecMetricPodsMetricSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface HorizontalPodAutoscalerV2SpecMetricPodsMetricSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface HorizontalPodAutoscalerV2SpecMetricPodsTarget {
    /**
     * averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
     */
    averageUtilization?: number;
    /**
     * averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
     */
    averageValue?: string;
    /**
     * type represents whether the metric type is Utilization, Value, or AverageValue
     */
    type: string;
    /**
     * value is the target value of the metric (as a quantity).
     */
    value?: string;
}

export interface HorizontalPodAutoscalerV2SpecMetricResource {
    /**
     * name is the name of the resource in question.
     */
    name: string;
    /**
     * Target specifies the target value for the given metric
     */
    target?: outputs.HorizontalPodAutoscalerV2SpecMetricResourceTarget;
}

export interface HorizontalPodAutoscalerV2SpecMetricResourceTarget {
    /**
     * averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
     */
    averageUtilization?: number;
    /**
     * averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
     */
    averageValue?: string;
    /**
     * type represents whether the metric type is Utilization, Value, or AverageValue
     */
    type: string;
    /**
     * value is the target value of the metric (as a quantity).
     */
    value?: string;
}

export interface HorizontalPodAutoscalerV2SpecScaleTargetRef {
    /**
     * API version of the referent
     */
    apiVersion?: string;
    /**
     * Kind of the referent. e.g. `ReplicationController`. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds
     */
    kind: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
}

export interface HorizontalPodAutoscalerV2beta2Metadata {
    /**
     * An unstructured key value map stored with the horizontal pod autoscaler that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the horizontal pod autoscaler. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the horizontal pod autoscaler, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the horizontal pod autoscaler must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this horizontal pod autoscaler that can be used by clients to determine when horizontal pod autoscaler has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this horizontal pod autoscaler. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface HorizontalPodAutoscalerV2beta2Spec {
    /**
     * Behavior configures the scaling behavior of the target in both Up and Down directions (`scale_up` and `scale_down` fields respectively).
     */
    behavior?: outputs.HorizontalPodAutoscalerV2beta2SpecBehavior;
    /**
     * Upper limit for the number of pods that can be set by the autoscaler.
     */
    maxReplicas: number;
    /**
     * The specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used). The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods. Ergo, metrics used must decrease as the pod count is increased, and vice-versa. See the individual metric source types for more information about how each type of metric must respond. If not set, the default metric will be set to 80% average CPU utilization.
     */
    metrics?: outputs.HorizontalPodAutoscalerV2beta2SpecMetric[];
    /**
     * Lower limit for the number of pods that can be set by the autoscaler, defaults to `1`.
     */
    minReplicas?: number;
    /**
     * Reference to scaled resource. e.g. Replication Controller
     */
    scaleTargetRef: outputs.HorizontalPodAutoscalerV2beta2SpecScaleTargetRef;
    /**
     * Target average CPU utilization (represented as a percentage of requested CPU) over all the pods. If not specified the default autoscaling policy will be used.
     */
    targetCpuUtilizationPercentage: number;
}

export interface HorizontalPodAutoscalerV2beta2SpecBehavior {
    /**
     * Scaling policy for scaling Down
     */
    scaleDowns?: outputs.HorizontalPodAutoscalerV2beta2SpecBehaviorScaleDown[];
    /**
     * Scaling policy for scaling Up
     */
    scaleUps?: outputs.HorizontalPodAutoscalerV2beta2SpecBehaviorScaleUp[];
}

export interface HorizontalPodAutoscalerV2beta2SpecBehaviorScaleDown {
    /**
     * List of potential scaling polices which can be used during scaling. At least one policy must be specified, otherwise the scaling rule will be discarded as invalid.
     */
    policies: outputs.HorizontalPodAutoscalerV2beta2SpecBehaviorScaleDownPolicy[];
    /**
     * Used to specify which policy should be used. If not set, the default value Max is used.
     */
    selectPolicy?: string;
    /**
     * Number of seconds for which past recommendations should be considered while scaling up or scaling down. This value must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
     */
    stabilizationWindowSeconds?: number;
}

export interface HorizontalPodAutoscalerV2beta2SpecBehaviorScaleDownPolicy {
    /**
     * Period specifies the window of time for which the policy should hold true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).
     */
    periodSeconds: number;
    /**
     * Type is used to specify the scaling policy: Percent or Pods
     */
    type: string;
    /**
     * Value contains the amount of change which is permitted by the policy. It must be greater than zero.
     */
    value: number;
}

export interface HorizontalPodAutoscalerV2beta2SpecBehaviorScaleUp {
    /**
     * List of potential scaling polices which can be used during scaling. At least one policy must be specified, otherwise the scaling rule will be discarded as invalid.
     */
    policies: outputs.HorizontalPodAutoscalerV2beta2SpecBehaviorScaleUpPolicy[];
    /**
     * Used to specify which policy should be used. If not set, the default value Max is used.
     */
    selectPolicy?: string;
    /**
     * Number of seconds for which past recommendations should be considered while scaling up or scaling down. This value must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
     */
    stabilizationWindowSeconds?: number;
}

export interface HorizontalPodAutoscalerV2beta2SpecBehaviorScaleUpPolicy {
    /**
     * Period specifies the window of time for which the policy should hold true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).
     */
    periodSeconds: number;
    /**
     * Type is used to specify the scaling policy: Percent or Pods
     */
    type: string;
    /**
     * Value contains the amount of change which is permitted by the policy. It must be greater than zero.
     */
    value: number;
}

export interface HorizontalPodAutoscalerV2beta2SpecMetric {
    containerResource?: outputs.HorizontalPodAutoscalerV2beta2SpecMetricContainerResource;
    external?: outputs.HorizontalPodAutoscalerV2beta2SpecMetricExternal;
    object?: outputs.HorizontalPodAutoscalerV2beta2SpecMetricObject;
    pods?: outputs.HorizontalPodAutoscalerV2beta2SpecMetricPods;
    resource?: outputs.HorizontalPodAutoscalerV2beta2SpecMetricResource;
    /**
     * type is the type of metric source. It should be one of "ContainerResource", "External", "Object", "Pods" or "Resource", each mapping to a matching field in the object. Note: "ContainerResource" type is available on when the feature-gate HPAContainerMetrics is enabled
     */
    type: string;
}

export interface HorizontalPodAutoscalerV2beta2SpecMetricContainerResource {
    /**
     * name of the container in the pods of the scaling target
     */
    container: string;
    /**
     * name of the resource in question
     */
    name: string;
    /**
     * target specifies the target value for the given metric
     */
    target?: outputs.HorizontalPodAutoscalerV2beta2SpecMetricContainerResourceTarget;
}

export interface HorizontalPodAutoscalerV2beta2SpecMetricContainerResourceTarget {
    /**
     * averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
     */
    averageUtilization?: number;
    /**
     * averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
     */
    averageValue?: string;
    /**
     * type represents whether the metric type is Utilization, Value, or AverageValue
     */
    type: string;
    /**
     * value is the target value of the metric (as a quantity).
     */
    value?: string;
}

export interface HorizontalPodAutoscalerV2beta2SpecMetricExternal {
    /**
     * metric identifies the target metric by name and selector
     */
    metric: outputs.HorizontalPodAutoscalerV2beta2SpecMetricExternalMetric;
    /**
     * target specifies the target value for the given metric
     */
    target?: outputs.HorizontalPodAutoscalerV2beta2SpecMetricExternalTarget;
}

export interface HorizontalPodAutoscalerV2beta2SpecMetricExternalMetric {
    /**
     * name is the name of the given metric
     */
    name: string;
    /**
     * selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.
     */
    selectors?: outputs.HorizontalPodAutoscalerV2beta2SpecMetricExternalMetricSelector[];
}

export interface HorizontalPodAutoscalerV2beta2SpecMetricExternalMetricSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.HorizontalPodAutoscalerV2beta2SpecMetricExternalMetricSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface HorizontalPodAutoscalerV2beta2SpecMetricExternalMetricSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface HorizontalPodAutoscalerV2beta2SpecMetricExternalTarget {
    /**
     * averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
     */
    averageUtilization?: number;
    /**
     * averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
     */
    averageValue?: string;
    /**
     * type represents whether the metric type is Utilization, Value, or AverageValue
     */
    type: string;
    /**
     * value is the target value of the metric (as a quantity).
     */
    value?: string;
}

export interface HorizontalPodAutoscalerV2beta2SpecMetricObject {
    describedObject: outputs.HorizontalPodAutoscalerV2beta2SpecMetricObjectDescribedObject;
    /**
     * metric identifies the target metric by name and selector
     */
    metric: outputs.HorizontalPodAutoscalerV2beta2SpecMetricObjectMetric;
    /**
     * target specifies the target value for the given metric
     */
    target?: outputs.HorizontalPodAutoscalerV2beta2SpecMetricObjectTarget;
}

export interface HorizontalPodAutoscalerV2beta2SpecMetricObjectDescribedObject {
    /**
     * API version of the referent
     */
    apiVersion: string;
    /**
     * Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind: string;
    /**
     * Name of the referent; More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
}

export interface HorizontalPodAutoscalerV2beta2SpecMetricObjectMetric {
    /**
     * name is the name of the given metric
     */
    name: string;
    /**
     * selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.
     */
    selectors?: outputs.HorizontalPodAutoscalerV2beta2SpecMetricObjectMetricSelector[];
}

export interface HorizontalPodAutoscalerV2beta2SpecMetricObjectMetricSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.HorizontalPodAutoscalerV2beta2SpecMetricObjectMetricSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface HorizontalPodAutoscalerV2beta2SpecMetricObjectMetricSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface HorizontalPodAutoscalerV2beta2SpecMetricObjectTarget {
    /**
     * averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
     */
    averageUtilization?: number;
    /**
     * averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
     */
    averageValue?: string;
    /**
     * type represents whether the metric type is Utilization, Value, or AverageValue
     */
    type: string;
    /**
     * value is the target value of the metric (as a quantity).
     */
    value?: string;
}

export interface HorizontalPodAutoscalerV2beta2SpecMetricPods {
    /**
     * metric identifies the target metric by name and selector
     */
    metric: outputs.HorizontalPodAutoscalerV2beta2SpecMetricPodsMetric;
    /**
     * target specifies the target value for the given metric
     */
    target?: outputs.HorizontalPodAutoscalerV2beta2SpecMetricPodsTarget;
}

export interface HorizontalPodAutoscalerV2beta2SpecMetricPodsMetric {
    /**
     * name is the name of the given metric
     */
    name: string;
    /**
     * selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.
     */
    selectors?: outputs.HorizontalPodAutoscalerV2beta2SpecMetricPodsMetricSelector[];
}

export interface HorizontalPodAutoscalerV2beta2SpecMetricPodsMetricSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.HorizontalPodAutoscalerV2beta2SpecMetricPodsMetricSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface HorizontalPodAutoscalerV2beta2SpecMetricPodsMetricSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface HorizontalPodAutoscalerV2beta2SpecMetricPodsTarget {
    /**
     * averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
     */
    averageUtilization?: number;
    /**
     * averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
     */
    averageValue?: string;
    /**
     * type represents whether the metric type is Utilization, Value, or AverageValue
     */
    type: string;
    /**
     * value is the target value of the metric (as a quantity).
     */
    value?: string;
}

export interface HorizontalPodAutoscalerV2beta2SpecMetricResource {
    /**
     * name is the name of the resource in question.
     */
    name: string;
    /**
     * Target specifies the target value for the given metric
     */
    target?: outputs.HorizontalPodAutoscalerV2beta2SpecMetricResourceTarget;
}

export interface HorizontalPodAutoscalerV2beta2SpecMetricResourceTarget {
    /**
     * averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
     */
    averageUtilization?: number;
    /**
     * averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
     */
    averageValue?: string;
    /**
     * type represents whether the metric type is Utilization, Value, or AverageValue
     */
    type: string;
    /**
     * value is the target value of the metric (as a quantity).
     */
    value?: string;
}

export interface HorizontalPodAutoscalerV2beta2SpecScaleTargetRef {
    /**
     * API version of the referent
     */
    apiVersion?: string;
    /**
     * Kind of the referent. e.g. `ReplicationController`. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds
     */
    kind: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
}

export interface IngressClassMetadata {
    /**
     * An unstructured key value map stored with the ingress_class_v1 that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the ingress_class_v1. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the ingress_class_v1, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * An opaque value that represents the internal version of this ingress_class_v1 that can be used by clients to determine when ingress_class_v1 has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this ingress_class_v1. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface IngressClassSpec {
    /**
     * controller refers to the name of the controller that should handle this class. This allows for different "flavors" that are controlled by the same controller. For example, you may have different parameters for the same implementing controller. This should be specified as a domain-prefixed path no more than 250 characters in length, e.g. "acme.io/ingress-controller". This field is immutable.
     */
    controller?: string;
    parameters?: outputs.IngressClassSpecParameter[];
}

export interface IngressClassSpecParameter {
    /**
     * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
     */
    apiGroup?: string;
    /**
     * Kind is the type of resource being referenced
     */
    kind: string;
    /**
     * Name is the name of resource being referenced
     */
    name: string;
    namespace?: string;
    scope: string;
}

export interface IngressClassV1Metadata {
    /**
     * An unstructured key value map stored with the ingress_class_v1 that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the ingress_class_v1. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the ingress_class_v1, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * An opaque value that represents the internal version of this ingress_class_v1 that can be used by clients to determine when ingress_class_v1 has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this ingress_class_v1. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface IngressClassV1Spec {
    /**
     * controller refers to the name of the controller that should handle this class. This allows for different "flavors" that are controlled by the same controller. For example, you may have different parameters for the same implementing controller. This should be specified as a domain-prefixed path no more than 250 characters in length, e.g. "acme.io/ingress-controller". This field is immutable.
     */
    controller?: string;
    parameters?: outputs.IngressClassV1SpecParameter[];
}

export interface IngressClassV1SpecParameter {
    /**
     * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
     */
    apiGroup?: string;
    /**
     * Kind is the type of resource being referenced
     */
    kind: string;
    /**
     * Name is the name of resource being referenced
     */
    name: string;
    namespace?: string;
    scope: string;
}

export interface IngressMetadata {
    /**
     * An unstructured key value map stored with the ingress that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the ingress. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the ingress, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the ingress must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this ingress that can be used by clients to determine when ingress has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this ingress. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface IngressSpec {
    /**
     * A default backend capable of servicing requests that don't match any rule. At least one of 'backend' or 'rules' must be specified. This field is optional to allow the loadbalancer controller or defaulting logic to specify a global default.
     */
    backend?: outputs.IngressSpecBackend;
    /**
     * ingressClassName is the name of the IngressClass cluster resource. The associated IngressClass defines which controller will implement the resource. This replaces the deprecated `kubernetes.io/ingress.class` annotation. For backwards compatibility, when that annotation is set, it must be given precedence over this field. The controller may emit a warning if the field and annotation have different values. Implementations of this API should ignore Ingresses without a class specified. An IngressClass resource may be marked as default, which can be used to set a default value for this field. For more information, refer to the IngressClass documentation.
     */
    ingressClassName?: string;
    rules?: outputs.IngressSpecRule[];
    /**
     * tls represents the TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
     */
    tls?: outputs.IngressSpecTl[];
}

export interface IngressSpecBackend {
    /**
     * Specifies the name of the referenced service.
     */
    serviceName?: string;
    /**
     * Specifies the port of the referenced service.
     */
    servicePort: string;
}

export interface IngressSpecRule {
    /**
     * host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the "host" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to
     *    the IP in the Spec of the parent Ingress.
     * 2. The `:` delimiter is not respected because ports are not allowed.
     * 	  Currently the port of an Ingress is implicitly :80 for http and
     * 	  :443 for https.
     * Both these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.
     *
     * host can be "precise" which is a domain name without the terminating dot of a network host (e.g. "foo.bar.com") or "wildcard", which is a domain name prefixed with a single wildcard label (e.g. "*.foo.com"). The wildcard character '*' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == "*"). Requests will be matched against the Host field in the following way: 1. If Host is precise, the request matches this rule if the http host header is equal to Host. 2. If Host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule.
     */
    host?: string;
    /**
     * http is a list of http selectors pointing to backends. In the example: http:///? > backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.
     */
    http: outputs.IngressSpecRuleHttp;
}

export interface IngressSpecRuleHttp {
    paths: outputs.IngressSpecRuleHttpPath[];
}

export interface IngressSpecRuleHttpPath {
    /**
     * Backend defines the referenced service endpoint to which the traffic will be forwarded to.
     */
    backend?: outputs.IngressSpecRuleHttpPathBackend;
    /**
     * path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986. Paths must begin with a '/' and must be present when using PathType with value "Exact" or "Prefix".
     */
    path?: string;
}

export interface IngressSpecRuleHttpPathBackend {
    /**
     * Specifies the name of the referenced service.
     */
    serviceName?: string;
    /**
     * Specifies the port of the referenced service.
     */
    servicePort: string;
}

export interface IngressSpecTl {
    /**
     * hosts is a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
     */
    hosts?: string[];
    /**
     * secretName is the name of the secret used to terminate TLS traffic on port 443. Field is left optional to allow TLS routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
     */
    secretName?: string;
}

export interface IngressStatus {
    loadBalancers: outputs.IngressStatusLoadBalancer[];
}

export interface IngressStatusLoadBalancer {
    ingresses: outputs.IngressStatusLoadBalancerIngress[];
}

export interface IngressStatusLoadBalancerIngress {
    hostname: string;
    ip: string;
}

export interface IngressV1Metadata {
    /**
     * An unstructured key value map stored with the ingress that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the ingress. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the ingress, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the ingress must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this ingress that can be used by clients to determine when ingress has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this ingress. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface IngressV1Spec {
    /**
     * A default backend capable of servicing requests that don't match any rule. At least one of 'backend' or 'rules' must be specified. This field is optional to allow the loadbalancer controller or defaulting logic to specify a global default.
     */
    defaultBackend?: outputs.IngressV1SpecDefaultBackend;
    /**
     * ingressClassName is the name of an IngressClass cluster resource. Ingress controller implementations use this field to know whether they should be serving this Ingress resource, by a transitive connection (controller > IngressClass > Ingress resource). Although the `kubernetes.io/ingress.class` annotation (simple constant name) was never formally defined, it was widely supported by Ingress controllers to create a direct binding between Ingress controller and Ingress resources. Newly created Ingress resources should prefer using the field. However, even though the annotation is officially deprecated, for backwards compatibility reasons, ingress controllers should still honor that annotation if present.
     */
    ingressClassName: string;
    rules?: outputs.IngressV1SpecRule[];
    /**
     * tls represents the TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
     */
    tls?: outputs.IngressV1SpecTl[];
}

export interface IngressV1SpecDefaultBackend {
    /**
     * Resource is an ObjectRef to another Kubernetes resource in the namespace of the Ingress object. If resource is specified, a service.Name and service.Port must not be specified.
     */
    resource?: outputs.IngressV1SpecDefaultBackendResource;
    service?: outputs.IngressV1SpecDefaultBackendService;
}

export interface IngressV1SpecDefaultBackendResource {
    /**
     * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
     */
    apiGroup: string;
    /**
     * The kind of resource.
     */
    kind: string;
    /**
     * The name of the User to bind to.
     */
    name: string;
}

export interface IngressV1SpecDefaultBackendService {
    /**
     * Specifies the name of the referenced service.
     */
    name: string;
    /**
     * Specifies the port of the referenced service.
     */
    port: outputs.IngressV1SpecDefaultBackendServicePort;
}

export interface IngressV1SpecDefaultBackendServicePort {
    /**
     * Specifies the name of the port of the referenced service.
     */
    name?: string;
    /**
     * Specifies the numerical port of the referenced service.
     */
    number?: number;
}

export interface IngressV1SpecRule {
    /**
     * host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the "host" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to
     *    the IP in the Spec of the parent Ingress.
     * 2. The `:` delimiter is not respected because ports are not allowed.
     * 	  Currently the port of an Ingress is implicitly :80 for http and
     * 	  :443 for https.
     * Both these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.
     *
     * host can be "precise" which is a domain name without the terminating dot of a network host (e.g. "foo.bar.com") or "wildcard", which is a domain name prefixed with a single wildcard label (e.g. "*.foo.com"). The wildcard character '*' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == "*"). Requests will be matched against the Host field in the following way: 1. If host is precise, the request matches this rule if the http host header is equal to Host. 2. If host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule.
     */
    host?: string;
    /**
     * http is a list of http selectors pointing to backends. In the example: http:///? > backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.
     */
    http?: outputs.IngressV1SpecRuleHttp;
}

export interface IngressV1SpecRuleHttp {
    paths: outputs.IngressV1SpecRuleHttpPath[];
}

export interface IngressV1SpecRuleHttpPath {
    /**
     * Backend defines the referenced service endpoint to which the traffic will be forwarded to.
     */
    backend?: outputs.IngressV1SpecRuleHttpPathBackend;
    /**
     * path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986. Paths must begin with a '/' and must be present when using PathType with value "Exact" or "Prefix".
     */
    path?: string;
    /**
     * pathType determines the interpretation of the path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is
     *   done on a path element by element basis. A path element refers is the
     *   list of labels in the path split by the '/' separator. A request is a
     *   match for path p if every p is an element-wise prefix of p of the
     *   request path. Note that if the last element of the path is a substring
     *   of the last element in request path, it is not a match (e.g. /foo/bar
     *   matches /foo/bar/baz, but does not match /foo/barbaz).
     * * ImplementationSpecific: Interpretation of the Path matching is up to
     *   the IngressClass. Implementations can treat this as a separate PathType
     *   or treat it identically to Prefix or Exact path types.
     * Implementations are required to support all path types.
     */
    pathType?: string;
}

export interface IngressV1SpecRuleHttpPathBackend {
    /**
     * Resource is an ObjectRef to another Kubernetes resource in the namespace of the Ingress object. If resource is specified, a service.Name and service.Port must not be specified.
     */
    resource?: outputs.IngressV1SpecRuleHttpPathBackendResource;
    service?: outputs.IngressV1SpecRuleHttpPathBackendService;
}

export interface IngressV1SpecRuleHttpPathBackendResource {
    /**
     * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
     */
    apiGroup: string;
    /**
     * The kind of resource.
     */
    kind: string;
    /**
     * The name of the User to bind to.
     */
    name: string;
}

export interface IngressV1SpecRuleHttpPathBackendService {
    /**
     * Specifies the name of the referenced service.
     */
    name: string;
    /**
     * Specifies the port of the referenced service.
     */
    port: outputs.IngressV1SpecRuleHttpPathBackendServicePort;
}

export interface IngressV1SpecRuleHttpPathBackendServicePort {
    /**
     * Specifies the name of the port of the referenced service.
     */
    name?: string;
    /**
     * Specifies the numerical port of the referenced service.
     */
    number?: number;
}

export interface IngressV1SpecTl {
    /**
     * hosts is a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
     */
    hosts?: string[];
    /**
     * secretName is the name of the secret used to terminate TLS traffic on port 443. Field is left optional to allow TLS routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the "Host" header is used for routing.
     */
    secretName?: string;
}

export interface IngressV1Status {
    loadBalancers: outputs.IngressV1StatusLoadBalancer[];
}

export interface IngressV1StatusLoadBalancer {
    ingresses: outputs.IngressV1StatusLoadBalancerIngress[];
}

export interface IngressV1StatusLoadBalancerIngress {
    hostname: string;
    ip: string;
}

export interface IngressV1Timeouts {
    create?: string;
    delete?: string;
}

export interface JobMetadata {
    /**
     * An unstructured key value map stored with the job that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the job. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels: {[key: string]: string};
    /**
     * Name of the job, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the job must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this job that can be used by clients to determine when job has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this job. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface JobSpec {
    /**
     * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
     */
    activeDeadlineSeconds?: number;
    /**
     * Specifies the number of retries before marking this job failed. Defaults to 6
     */
    backoffLimit?: number;
    /**
     * Specifies how Pod completions are tracked. It can be `NonIndexed` (default) or `Indexed`. More info: https://kubernetes.io/docs/concepts/workloads/controllers/job/#completion-mode
     */
    completionMode: string;
    /**
     * Specifies the desired number of successfully finished pods the job should be run with. Setting to nil means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value. Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
     */
    completions?: number;
    /**
     * Controls generation of pod labels and pod selectors. Leave unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template. When true, the user is responsible for picking unique labels and specifying the selector. Failure to pick a unique label may cause this and other jobs to not function correctly. More info: https://git.k8s.io/community/contributors/design-proposals/selector-generation.md
     */
    manualSelector?: boolean;
    /**
     * Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
     */
    parallelism?: number;
    /**
     * Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
     */
    podFailurePolicy?: outputs.JobSpecPodFailurePolicy;
    /**
     * A label query over volumes to consider for binding.
     */
    selector?: outputs.JobSpecSelector;
    /**
     * Describes the pod that will be created when executing a job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
     */
    template: outputs.JobSpecTemplate;
    /**
     * ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes.
     */
    ttlSecondsAfterFinished?: string;
}

export interface JobSpecPodFailurePolicy {
    /**
     * A label query over volumes to consider for binding.
     */
    rules: outputs.JobSpecPodFailurePolicyRule[];
}

export interface JobSpecPodFailurePolicyRule {
    action?: string;
    onExitCodes?: outputs.JobSpecPodFailurePolicyRuleOnExitCodes;
    onPodConditions?: outputs.JobSpecPodFailurePolicyRuleOnPodCondition[];
}

export interface JobSpecPodFailurePolicyRuleOnExitCodes {
    containerName?: string;
    operator?: string;
    values: number[];
}

export interface JobSpecPodFailurePolicyRuleOnPodCondition {
    status?: string;
    type?: string;
}

export interface JobSpecSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.JobSpecSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface JobSpecSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface JobSpecTemplate {
    /**
     * Standard job's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
     */
    metadata: outputs.JobSpecTemplateMetadata;
    /**
     * Spec of the pods owned by the job
     */
    spec?: outputs.JobSpecTemplateSpec;
}

export interface JobSpecTemplateMetadata {
    /**
     * An unstructured key value map stored with the job that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the job. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the job, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * An opaque value that represents the internal version of this job that can be used by clients to determine when job has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this job. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface JobSpecTemplateSpec {
    /**
     * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
     */
    activeDeadlineSeconds?: number;
    /**
     * Optional pod scheduling constraints.
     */
    affinity?: outputs.JobSpecTemplateSpecAffinity;
    /**
     * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
     */
    automountServiceAccountToken?: boolean;
    /**
     * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/
     */
    containers?: outputs.JobSpecTemplateSpecContainer[];
    /**
     * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy. Optional: Defaults to empty
     */
    dnsConfig?: outputs.JobSpecTemplateSpecDnsConfig;
    /**
     * Set DNS policy for containers within the pod. Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'. Defaults to 'ClusterFirst'. More info: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy
     */
    dnsPolicy?: string;
    /**
     * Enables generating environment variables for service discovery. Defaults to true.
     */
    enableServiceLinks?: boolean;
    /**
     * List of hosts and IPs that will be injected into the pod's hosts file if specified. Optional: Defaults to empty.
     */
    hostAliases?: outputs.JobSpecTemplateSpecHostAlias[];
    /**
     * Use the host's ipc namespace. Optional: Defaults to false.
     */
    hostIpc?: boolean;
    /**
     * Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified.
     */
    hostNetwork?: boolean;
    /**
     * Use the host's pid namespace.
     */
    hostPid?: boolean;
    /**
     * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
     */
    hostname: string;
    /**
     * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
     */
    imagePullSecrets?: outputs.JobSpecTemplateSpecImagePullSecret[];
    /**
     * List of init containers belonging to the pod. Init containers always run to completion and each must complete successfully before the next is started. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
     */
    initContainers?: outputs.JobSpecTemplateSpecInitContainer[];
    /**
     * NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
     */
    nodeName: string;
    /**
     * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.
     */
    nodeSelector?: {[key: string]: string};
    /**
     * Specifies the OS of the containers in the pod.
     */
    os?: outputs.JobSpecTemplateSpecOs;
    /**
     * If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
     */
    priorityClassName?: string;
    /**
     * If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md
     */
    readinessGates?: outputs.JobSpecTemplateSpecReadinessGate[];
    /**
     * Restart policy for all containers within the pod. One of Always, OnFailure, Never. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy.
     */
    restartPolicy?: string;
    /**
     * RuntimeClassName is a feature for selecting the container runtime configuration. The container runtime configuration is used to run a Pod's containers. More info: https://kubernetes.io/docs/concepts/containers/runtime-class
     */
    runtimeClassName?: string;
    /**
     * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
     */
    schedulerName: string;
    /**
     * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty
     */
    securityContext?: outputs.JobSpecTemplateSpecSecurityContext;
    /**
     * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: http://releases.k8s.io/HEAD/docs/design/service_accounts.md.
     */
    serviceAccountName: string;
    /**
     * Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Defaults to false.
     */
    shareProcessNamespace?: boolean;
    /**
     * If specified, the fully qualified Pod hostname will be "...svc.". If not specified, the pod will not have a domainname at all..
     */
    subdomain?: string;
    /**
     * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process.
     */
    terminationGracePeriodSeconds?: number;
    /**
     * If specified, the pod's toleration. Optional: Defaults to empty
     */
    tolerations?: outputs.JobSpecTemplateSpecToleration[];
    /**
     * describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints.
     */
    topologySpreadConstraints?: outputs.JobSpecTemplateSpecTopologySpreadConstraint[];
    /**
     * List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
     */
    volumes?: outputs.JobSpecTemplateSpecVolume[];
}

export interface JobSpecTemplateSpecAffinity {
    /**
     * Node affinity scheduling rules for the pod.
     */
    nodeAffinity?: outputs.JobSpecTemplateSpecAffinityNodeAffinity;
    /**
     * Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)
     */
    podAffinity?: outputs.JobSpecTemplateSpecAffinityPodAffinity;
    /**
     * Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)
     */
    podAntiAffinity?: outputs.JobSpecTemplateSpecAffinityPodAntiAffinity;
}

export interface JobSpecTemplateSpecAffinityNodeAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: outputs.JobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a node label update), the system may or may not try to eventually evict the pod from its node.
     */
    requiredDuringSchedulingIgnoredDuringExecution?: outputs.JobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
}

export interface JobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A node selector term, associated with the corresponding weight.
     */
    preference: outputs.JobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
    /**
     * weight is in the range 1-100
     */
    weight: number;
}

export interface JobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
    /**
     * List of node selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.JobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression[];
    /**
     * A list of node selector requirements by node's fields. The requirements are ANDed.
     */
    matchFields?: outputs.JobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchField[];
}

export interface JobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
     */
    operator?: string;
    /**
     * Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface JobSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchField {
    /**
     * The label key that the selector applies to.
     */
    key: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists`, `DoesNotExist`, `Gt`, and `Lt`.
     */
    operator: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface JobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * List of node selector terms. The terms are ORed.
     */
    nodeSelectorTerms?: outputs.JobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm[];
}

export interface JobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm {
    /**
     * List of node selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.JobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression[];
    /**
     * A list of node selector requirements by node's fields. The requirements are ANDed.
     */
    matchFields?: outputs.JobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchField[];
}

export interface JobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
     */
    operator?: string;
    /**
     * Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface JobSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchField {
    /**
     * The label key that the selector applies to.
     */
    key: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists`, `DoesNotExist`, `Gt`, and `Lt`.
     */
    operator: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface JobSpecTemplateSpecAffinityPodAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: outputs.JobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.
     */
    requiredDuringSchedulingIgnoredDuringExecutions?: outputs.JobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
}

export interface JobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A pod affinity term, associated with the corresponding weight
     */
    podAffinityTerm: outputs.JobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
    /**
     * weight associated with matching the corresponding podAffinityTerm, in the range 1-100
     */
    weight: number;
}

export interface JobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.JobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface JobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.JobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface JobSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface JobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.JobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface JobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.JobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface JobSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface JobSpecTemplateSpecAffinityPodAntiAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: outputs.JobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.
     */
    requiredDuringSchedulingIgnoredDuringExecutions?: outputs.JobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
}

export interface JobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A pod affinity term, associated with the corresponding weight
     */
    podAffinityTerm: outputs.JobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
    /**
     * weight associated with matching the corresponding podAffinityTerm, in the range 1-100
     */
    weight: number;
}

export interface JobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.JobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface JobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.JobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface JobSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface JobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.JobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface JobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.JobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface JobSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface JobSpecTemplateSpecContainer {
    /**
     * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    args?: string[];
    /**
     * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    commands?: string[];
    /**
     * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
     */
    envFroms?: outputs.JobSpecTemplateSpecContainerEnvFrom[];
    /**
     * List of environment variables to set in the container. Cannot be updated.
     */
    envs?: outputs.JobSpecTemplateSpecContainerEnv[];
    /**
     * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/
     */
    image?: string;
    /**
     * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images
     */
    imagePullPolicy: string;
    /**
     * Actions that the management system should take in response to container lifecycle events
     */
    lifecycle?: outputs.JobSpecTemplateSpecContainerLifecycle;
    /**
     * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    livenessProbe?: outputs.JobSpecTemplateSpecContainerLivenessProbe;
    /**
     * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
     */
    name: string;
    /**
     * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
     */
    ports?: outputs.JobSpecTemplateSpecContainerPort[];
    /**
     * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    readinessProbe?: outputs.JobSpecTemplateSpecContainerReadinessProbe;
    /**
     * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources?: outputs.JobSpecTemplateSpecContainerResources;
    /**
     * Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
     */
    securityContext?: outputs.JobSpecTemplateSpecContainerSecurityContext;
    /**
     * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     */
    startupProbe?: outputs.JobSpecTemplateSpecContainerStartupProbe;
    /**
     * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.
     */
    stdin?: boolean;
    /**
     * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.
     */
    stdinOnce?: boolean;
    /**
     * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.
     */
    terminationMessagePath?: string;
    /**
     * Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
     */
    terminationMessagePolicy: string;
    /**
     * Whether this container should allocate a TTY for itself
     */
    tty?: boolean;
    /**
     * Pod volumes to mount into the container's filesystem. Cannot be updated.
     */
    volumeMounts?: outputs.JobSpecTemplateSpecContainerVolumeMount[];
    /**
     * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
     */
    workingDir?: string;
}

export interface JobSpecTemplateSpecContainerEnv {
    /**
     * Name of the environment variable. Must be a C_IDENTIFIER
     */
    name: string;
    /**
     * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
     */
    value?: string;
    /**
     * Source for the environment variable's value
     */
    valueFrom?: outputs.JobSpecTemplateSpecContainerEnvValueFrom;
}

export interface JobSpecTemplateSpecContainerEnvFrom {
    /**
     * The ConfigMap to select from
     */
    configMapRef?: outputs.JobSpecTemplateSpecContainerEnvFromConfigMapRef;
    /**
     * An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
     */
    prefix?: string;
    /**
     * The Secret to select from
     */
    secretRef?: outputs.JobSpecTemplateSpecContainerEnvFromSecretRef;
}

export interface JobSpecTemplateSpecContainerEnvFromConfigMapRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the ConfigMap must be defined
     */
    optional?: boolean;
}

export interface JobSpecTemplateSpecContainerEnvFromSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the Secret must be defined
     */
    optional?: boolean;
}

export interface JobSpecTemplateSpecContainerEnvValueFrom {
    /**
     * Selects a key of a ConfigMap.
     */
    configMapKeyRef?: outputs.JobSpecTemplateSpecContainerEnvValueFromConfigMapKeyRef;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.
     */
    fieldRef?: outputs.JobSpecTemplateSpecContainerEnvValueFromFieldRef;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
     */
    resourceFieldRef?: outputs.JobSpecTemplateSpecContainerEnvValueFromResourceFieldRef;
    /**
     * Selects a key of a secret in the pod's namespace.
     */
    secretKeyRef?: outputs.JobSpecTemplateSpecContainerEnvValueFromSecretKeyRef;
}

export interface JobSpecTemplateSpecContainerEnvValueFromConfigMapKeyRef {
    /**
     * The key to select.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the ConfigMap or its key must be defined.
     */
    optional?: boolean;
}

export interface JobSpecTemplateSpecContainerEnvValueFromFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface JobSpecTemplateSpecContainerEnvValueFromResourceFieldRef {
    containerName?: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface JobSpecTemplateSpecContainerEnvValueFromSecretKeyRef {
    /**
     * The key of the secret to select from. Must be a valid secret key.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the Secret or its key must be defined.
     */
    optional?: boolean;
}

export interface JobSpecTemplateSpecContainerLifecycle {
    /**
     * post_start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    postStarts?: outputs.JobSpecTemplateSpecContainerLifecyclePostStart[];
    /**
     * pre_stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    preStops?: outputs.JobSpecTemplateSpecContainerLifecyclePreStop[];
}

export interface JobSpecTemplateSpecContainerLifecyclePostStart {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.JobSpecTemplateSpecContainerLifecyclePostStartExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.JobSpecTemplateSpecContainerLifecyclePostStartHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.JobSpecTemplateSpecContainerLifecyclePostStartTcpSocket[];
}

export interface JobSpecTemplateSpecContainerLifecyclePostStartExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface JobSpecTemplateSpecContainerLifecyclePostStartHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.JobSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface JobSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface JobSpecTemplateSpecContainerLifecyclePostStartTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface JobSpecTemplateSpecContainerLifecyclePreStop {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.JobSpecTemplateSpecContainerLifecyclePreStopExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.JobSpecTemplateSpecContainerLifecyclePreStopHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.JobSpecTemplateSpecContainerLifecyclePreStopTcpSocket[];
}

export interface JobSpecTemplateSpecContainerLifecyclePreStopExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface JobSpecTemplateSpecContainerLifecyclePreStopHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.JobSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface JobSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface JobSpecTemplateSpecContainerLifecyclePreStopTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface JobSpecTemplateSpecContainerLivenessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.JobSpecTemplateSpecContainerLivenessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.JobSpecTemplateSpecContainerLivenessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.JobSpecTemplateSpecContainerLivenessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.JobSpecTemplateSpecContainerLivenessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface JobSpecTemplateSpecContainerLivenessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface JobSpecTemplateSpecContainerLivenessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface JobSpecTemplateSpecContainerLivenessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.JobSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface JobSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface JobSpecTemplateSpecContainerLivenessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface JobSpecTemplateSpecContainerPort {
    /**
     * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
     */
    containerPort: number;
    /**
     * What host IP to bind the external port to.
     */
    hostIp?: string;
    /**
     * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
     */
    hostPort?: number;
    /**
     * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
     */
    name?: string;
    /**
     * Protocol for port. Must be UDP or TCP. Defaults to "TCP".
     */
    protocol?: string;
}

export interface JobSpecTemplateSpecContainerReadinessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.JobSpecTemplateSpecContainerReadinessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.JobSpecTemplateSpecContainerReadinessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.JobSpecTemplateSpecContainerReadinessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.JobSpecTemplateSpecContainerReadinessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface JobSpecTemplateSpecContainerReadinessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface JobSpecTemplateSpecContainerReadinessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface JobSpecTemplateSpecContainerReadinessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.JobSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface JobSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface JobSpecTemplateSpecContainerReadinessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface JobSpecTemplateSpecContainerResources {
    /**
     * Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits: {[key: string]: string};
    /**
     * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
     */
    requests: {[key: string]: string};
}

export interface JobSpecTemplateSpecContainerSecurityContext {
    /**
     * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
     */
    allowPrivilegeEscalation?: boolean;
    /**
     * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
     */
    capabilities?: outputs.JobSpecTemplateSpecContainerSecurityContextCapabilities;
    /**
     * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
     */
    privileged?: boolean;
    /**
     * Whether this container has a read-only root filesystem. Default is false.
     */
    readOnlyRootFilesystem?: boolean;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsGroup?: string;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: boolean;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUser?: string;
    /**
     * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    seLinuxOptions?: outputs.JobSpecTemplateSpecContainerSecurityContextSeLinuxOptions;
    /**
     * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     */
    seccompProfile?: outputs.JobSpecTemplateSpecContainerSecurityContextSeccompProfile;
}

export interface JobSpecTemplateSpecContainerSecurityContextCapabilities {
    /**
     * Added capabilities
     */
    adds?: string[];
    /**
     * Removed capabilities
     */
    drops?: string[];
}

export interface JobSpecTemplateSpecContainerSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: string;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: string;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: string;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: string;
}

export interface JobSpecTemplateSpecContainerSecurityContextSeccompProfile {
    /**
     * Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
     */
    localhostProfile?: string;
    /**
     * Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
     */
    type?: string;
}

export interface JobSpecTemplateSpecContainerStartupProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.JobSpecTemplateSpecContainerStartupProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.JobSpecTemplateSpecContainerStartupProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.JobSpecTemplateSpecContainerStartupProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.JobSpecTemplateSpecContainerStartupProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface JobSpecTemplateSpecContainerStartupProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface JobSpecTemplateSpecContainerStartupProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface JobSpecTemplateSpecContainerStartupProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.JobSpecTemplateSpecContainerStartupProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface JobSpecTemplateSpecContainerStartupProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface JobSpecTemplateSpecContainerStartupProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface JobSpecTemplateSpecContainerVolumeMount {
    /**
     * Path within the container at which the volume should be mounted. Must not contain ':'.
     */
    mountPath: string;
    /**
     * Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional.
     */
    mountPropagation?: string;
    /**
     * This must match the Name of a Volume.
     */
    name: string;
    /**
     * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
     */
    subPath?: string;
}

export interface JobSpecTemplateSpecDnsConfig {
    /**
     * A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
     */
    nameservers?: string[];
    /**
     * A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
     */
    options?: outputs.JobSpecTemplateSpecDnsConfigOption[];
    /**
     * A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
     */
    searches?: string[];
}

export interface JobSpecTemplateSpecDnsConfigOption {
    /**
     * Name of the option.
     */
    name: string;
    /**
     * Value of the option. Optional: Defaults to empty.
     */
    value?: string;
}

export interface JobSpecTemplateSpecHostAlias {
    /**
     * Hostnames for the IP address.
     */
    hostnames: string[];
    /**
     * IP address of the host file entry.
     */
    ip: string;
}

export interface JobSpecTemplateSpecImagePullSecret {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
}

export interface JobSpecTemplateSpecInitContainer {
    /**
     * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    args?: string[];
    /**
     * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    commands?: string[];
    /**
     * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
     */
    envFroms?: outputs.JobSpecTemplateSpecInitContainerEnvFrom[];
    /**
     * List of environment variables to set in the container. Cannot be updated.
     */
    envs?: outputs.JobSpecTemplateSpecInitContainerEnv[];
    /**
     * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/
     */
    image?: string;
    /**
     * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images
     */
    imagePullPolicy: string;
    /**
     * Actions that the management system should take in response to container lifecycle events
     */
    lifecycle?: outputs.JobSpecTemplateSpecInitContainerLifecycle;
    /**
     * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    livenessProbe?: outputs.JobSpecTemplateSpecInitContainerLivenessProbe;
    /**
     * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
     */
    name: string;
    /**
     * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
     */
    ports?: outputs.JobSpecTemplateSpecInitContainerPort[];
    /**
     * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    readinessProbe?: outputs.JobSpecTemplateSpecInitContainerReadinessProbe;
    /**
     * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources?: outputs.JobSpecTemplateSpecInitContainerResources;
    /**
     * Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
     */
    securityContext?: outputs.JobSpecTemplateSpecInitContainerSecurityContext;
    /**
     * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     */
    startupProbe?: outputs.JobSpecTemplateSpecInitContainerStartupProbe;
    /**
     * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.
     */
    stdin?: boolean;
    /**
     * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.
     */
    stdinOnce?: boolean;
    /**
     * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.
     */
    terminationMessagePath?: string;
    /**
     * Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
     */
    terminationMessagePolicy: string;
    /**
     * Whether this container should allocate a TTY for itself
     */
    tty?: boolean;
    /**
     * Pod volumes to mount into the container's filesystem. Cannot be updated.
     */
    volumeMounts?: outputs.JobSpecTemplateSpecInitContainerVolumeMount[];
    /**
     * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
     */
    workingDir?: string;
}

export interface JobSpecTemplateSpecInitContainerEnv {
    /**
     * Name of the environment variable. Must be a C_IDENTIFIER
     */
    name: string;
    /**
     * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
     */
    value?: string;
    /**
     * Source for the environment variable's value
     */
    valueFrom?: outputs.JobSpecTemplateSpecInitContainerEnvValueFrom;
}

export interface JobSpecTemplateSpecInitContainerEnvFrom {
    /**
     * The ConfigMap to select from
     */
    configMapRef?: outputs.JobSpecTemplateSpecInitContainerEnvFromConfigMapRef;
    /**
     * An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
     */
    prefix?: string;
    /**
     * The Secret to select from
     */
    secretRef?: outputs.JobSpecTemplateSpecInitContainerEnvFromSecretRef;
}

export interface JobSpecTemplateSpecInitContainerEnvFromConfigMapRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the ConfigMap must be defined
     */
    optional?: boolean;
}

export interface JobSpecTemplateSpecInitContainerEnvFromSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the Secret must be defined
     */
    optional?: boolean;
}

export interface JobSpecTemplateSpecInitContainerEnvValueFrom {
    /**
     * Selects a key of a ConfigMap.
     */
    configMapKeyRef?: outputs.JobSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRef;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.
     */
    fieldRef?: outputs.JobSpecTemplateSpecInitContainerEnvValueFromFieldRef;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
     */
    resourceFieldRef?: outputs.JobSpecTemplateSpecInitContainerEnvValueFromResourceFieldRef;
    /**
     * Selects a key of a secret in the pod's namespace.
     */
    secretKeyRef?: outputs.JobSpecTemplateSpecInitContainerEnvValueFromSecretKeyRef;
}

export interface JobSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRef {
    /**
     * The key to select.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the ConfigMap or its key must be defined.
     */
    optional?: boolean;
}

export interface JobSpecTemplateSpecInitContainerEnvValueFromFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface JobSpecTemplateSpecInitContainerEnvValueFromResourceFieldRef {
    containerName?: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface JobSpecTemplateSpecInitContainerEnvValueFromSecretKeyRef {
    /**
     * The key of the secret to select from. Must be a valid secret key.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the Secret or its key must be defined.
     */
    optional?: boolean;
}

export interface JobSpecTemplateSpecInitContainerLifecycle {
    /**
     * post_start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    postStarts?: outputs.JobSpecTemplateSpecInitContainerLifecyclePostStart[];
    /**
     * pre_stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    preStops?: outputs.JobSpecTemplateSpecInitContainerLifecyclePreStop[];
}

export interface JobSpecTemplateSpecInitContainerLifecyclePostStart {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.JobSpecTemplateSpecInitContainerLifecyclePostStartExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.JobSpecTemplateSpecInitContainerLifecyclePostStartHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.JobSpecTemplateSpecInitContainerLifecyclePostStartTcpSocket[];
}

export interface JobSpecTemplateSpecInitContainerLifecyclePostStartExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface JobSpecTemplateSpecInitContainerLifecyclePostStartHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.JobSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface JobSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface JobSpecTemplateSpecInitContainerLifecyclePostStartTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface JobSpecTemplateSpecInitContainerLifecyclePreStop {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.JobSpecTemplateSpecInitContainerLifecyclePreStopExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.JobSpecTemplateSpecInitContainerLifecyclePreStopHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.JobSpecTemplateSpecInitContainerLifecyclePreStopTcpSocket[];
}

export interface JobSpecTemplateSpecInitContainerLifecyclePreStopExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface JobSpecTemplateSpecInitContainerLifecyclePreStopHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.JobSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface JobSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface JobSpecTemplateSpecInitContainerLifecyclePreStopTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface JobSpecTemplateSpecInitContainerLivenessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.JobSpecTemplateSpecInitContainerLivenessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.JobSpecTemplateSpecInitContainerLivenessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.JobSpecTemplateSpecInitContainerLivenessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.JobSpecTemplateSpecInitContainerLivenessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface JobSpecTemplateSpecInitContainerLivenessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface JobSpecTemplateSpecInitContainerLivenessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface JobSpecTemplateSpecInitContainerLivenessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.JobSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface JobSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface JobSpecTemplateSpecInitContainerLivenessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface JobSpecTemplateSpecInitContainerPort {
    /**
     * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
     */
    containerPort: number;
    /**
     * What host IP to bind the external port to.
     */
    hostIp?: string;
    /**
     * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
     */
    hostPort?: number;
    /**
     * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
     */
    name?: string;
    /**
     * Protocol for port. Must be UDP or TCP. Defaults to "TCP".
     */
    protocol?: string;
}

export interface JobSpecTemplateSpecInitContainerReadinessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.JobSpecTemplateSpecInitContainerReadinessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.JobSpecTemplateSpecInitContainerReadinessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.JobSpecTemplateSpecInitContainerReadinessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.JobSpecTemplateSpecInitContainerReadinessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface JobSpecTemplateSpecInitContainerReadinessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface JobSpecTemplateSpecInitContainerReadinessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface JobSpecTemplateSpecInitContainerReadinessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.JobSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface JobSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface JobSpecTemplateSpecInitContainerReadinessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface JobSpecTemplateSpecInitContainerResources {
    /**
     * Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits: {[key: string]: string};
    /**
     * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
     */
    requests: {[key: string]: string};
}

export interface JobSpecTemplateSpecInitContainerSecurityContext {
    /**
     * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
     */
    allowPrivilegeEscalation?: boolean;
    /**
     * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
     */
    capabilities?: outputs.JobSpecTemplateSpecInitContainerSecurityContextCapabilities;
    /**
     * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
     */
    privileged?: boolean;
    /**
     * Whether this container has a read-only root filesystem. Default is false.
     */
    readOnlyRootFilesystem?: boolean;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsGroup?: string;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: boolean;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUser?: string;
    /**
     * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    seLinuxOptions?: outputs.JobSpecTemplateSpecInitContainerSecurityContextSeLinuxOptions;
    /**
     * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     */
    seccompProfile?: outputs.JobSpecTemplateSpecInitContainerSecurityContextSeccompProfile;
}

export interface JobSpecTemplateSpecInitContainerSecurityContextCapabilities {
    /**
     * Added capabilities
     */
    adds?: string[];
    /**
     * Removed capabilities
     */
    drops?: string[];
}

export interface JobSpecTemplateSpecInitContainerSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: string;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: string;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: string;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: string;
}

export interface JobSpecTemplateSpecInitContainerSecurityContextSeccompProfile {
    /**
     * Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
     */
    localhostProfile?: string;
    /**
     * Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
     */
    type?: string;
}

export interface JobSpecTemplateSpecInitContainerStartupProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.JobSpecTemplateSpecInitContainerStartupProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.JobSpecTemplateSpecInitContainerStartupProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.JobSpecTemplateSpecInitContainerStartupProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.JobSpecTemplateSpecInitContainerStartupProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface JobSpecTemplateSpecInitContainerStartupProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface JobSpecTemplateSpecInitContainerStartupProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface JobSpecTemplateSpecInitContainerStartupProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.JobSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface JobSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface JobSpecTemplateSpecInitContainerStartupProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface JobSpecTemplateSpecInitContainerVolumeMount {
    /**
     * Path within the container at which the volume should be mounted. Must not contain ':'.
     */
    mountPath: string;
    /**
     * Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional.
     */
    mountPropagation?: string;
    /**
     * This must match the Name of a Volume.
     */
    name: string;
    /**
     * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
     */
    subPath?: string;
}

export interface JobSpecTemplateSpecOs {
    /**
     * Name is the name of the operating system. The currently supported values are linux and windows.
     */
    name: string;
}

export interface JobSpecTemplateSpecReadinessGate {
    /**
     * refers to a condition in the pod's condition list with matching type.
     */
    conditionType: string;
}

export interface JobSpecTemplateSpecSecurityContext {
    /**
     * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- If unset, the Kubelet will not modify the ownership and permissions of any volume.
     */
    fsGroup?: string;
    /**
     * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir.
     */
    fsGroupChangePolicy?: string;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    runAsGroup?: string;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: boolean;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    runAsUser?: string;
    /**
     * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    seLinuxOptions?: outputs.JobSpecTemplateSpecSecurityContextSeLinuxOptions;
    /**
     * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     */
    seccompProfile?: outputs.JobSpecTemplateSpecSecurityContextSeccompProfile;
    /**
     * A list of groups applied to the first process run in each container, in addition to the container's primary GID. If unspecified, no groups will be added to any container.
     */
    supplementalGroups?: number[];
    /**
     * holds a list of namespaced sysctls used for the pod.
     */
    sysctls?: outputs.JobSpecTemplateSpecSecurityContextSysctl[];
    /**
     * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
     */
    windowsOptions?: outputs.JobSpecTemplateSpecSecurityContextWindowsOptions;
}

export interface JobSpecTemplateSpecSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: string;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: string;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: string;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: string;
}

export interface JobSpecTemplateSpecSecurityContextSeccompProfile {
    /**
     * Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
     */
    localhostProfile?: string;
    /**
     * Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
     */
    type?: string;
}

export interface JobSpecTemplateSpecSecurityContextSysctl {
    /**
     * Name of a property to set.
     */
    name: string;
    /**
     * Value of a property to set.
     */
    value: string;
}

export interface JobSpecTemplateSpecSecurityContextWindowsOptions {
    /**
     * GMSACredentialSpec is where the GMSA admission webhook inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field
     */
    gmsaCredentialSpec?: string;
    /**
     * GMSACredentialSpecName is the name of the GMSA credential spec to use.
     */
    gmsaCredentialSpecName?: string;
    /**
     * HostProcess determines if a container should be run as a 'Host Process' container. Default value is false.
     */
    hostProcess?: boolean;
    /**
     * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUsername?: string;
}

export interface JobSpecTemplateSpecToleration {
    /**
     * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
     */
    effect?: string;
    /**
     * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
     */
    key?: string;
    /**
     * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
     */
    operator?: string;
    /**
     * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
     */
    tolerationSeconds?: string;
    /**
     * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
     */
    value?: string;
}

export interface JobSpecTemplateSpecTopologySpreadConstraint {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.JobSpecTemplateSpecTopologySpreadConstraintLabelSelector[];
    /**
     * is a set of pod label keys to select the pods over which spreading will be calculated.
     */
    matchLabelKeys?: string[];
    /**
     * describes the degree to which pods may be unevenly distributed.
     */
    maxSkew?: number;
    /**
     * indicates a minimum number of eligible domains.
     */
    minDomains?: number;
    /**
     * indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew.
     */
    nodeAffinityPolicy?: string;
    /**
     * indicates how we will treat node taints when calculating pod topology spread skew.
     */
    nodeTaintsPolicy?: string;
    /**
     * the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology.
     */
    topologyKey?: string;
    /**
     * indicates how to deal with a pod if it doesn't satisfy the spread constraint.
     */
    whenUnsatisfiable?: string;
}

export interface JobSpecTemplateSpecTopologySpreadConstraintLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.JobSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface JobSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface JobSpecTemplateSpecVolume {
    /**
     * Represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    awsElasticBlockStore?: outputs.JobSpecTemplateSpecVolumeAwsElasticBlockStore;
    /**
     * Represents an Azure Data Disk mount on the host and bind mount to the pod.
     */
    azureDisk?: outputs.JobSpecTemplateSpecVolumeAzureDisk;
    /**
     * Represents an Azure File Service mount on the host and bind mount to the pod.
     */
    azureFile?: outputs.JobSpecTemplateSpecVolumeAzureFile;
    /**
     * Represents a Ceph FS mount on the host that shares a pod's lifetime
     */
    cephFs?: outputs.JobSpecTemplateSpecVolumeCephFs;
    /**
     * Represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    cinder?: outputs.JobSpecTemplateSpecVolumeCinder;
    /**
     * ConfigMap represents a configMap that should populate this volume
     */
    configMap?: outputs.JobSpecTemplateSpecVolumeConfigMap;
    /**
     * Represents a CSI Volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
     */
    csi?: outputs.JobSpecTemplateSpecVolumeCsi;
    /**
     * DownwardAPI represents downward API about the pod that should populate this volume
     */
    downwardApi?: outputs.JobSpecTemplateSpecVolumeDownwardApi;
    /**
     * EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
     */
    emptyDir?: outputs.JobSpecTemplateSpecVolumeEmptyDir;
    /**
     * Represents an ephemeral volume that is handled by a normal storage driver. More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes
     */
    ephemeral?: outputs.JobSpecTemplateSpecVolumeEphemeral;
    /**
     * Represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
     */
    fc?: outputs.JobSpecTemplateSpecVolumeFc;
    /**
     * Represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.
     */
    flexVolume?: outputs.JobSpecTemplateSpecVolumeFlexVolume;
    /**
     * Represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
     */
    flocker?: outputs.JobSpecTemplateSpecVolumeFlocker;
    /**
     * Represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    gcePersistentDisk?: outputs.JobSpecTemplateSpecVolumeGcePersistentDisk;
    /**
     * GitRepo represents a git repository at a particular revision.
     */
    gitRepo?: outputs.JobSpecTemplateSpecVolumeGitRepo;
    /**
     * Represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
     */
    glusterfs?: outputs.JobSpecTemplateSpecVolumeGlusterfs;
    /**
     * Represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     */
    hostPath?: outputs.JobSpecTemplateSpecVolumeHostPath;
    /**
     * Represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
     */
    iscsi?: outputs.JobSpecTemplateSpecVolumeIscsi;
    /**
     * Represents a mounted local storage device such as a disk, partition or directory. Local volumes can only be used as a statically created PersistentVolume. Dynamic provisioning is not supported yet. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
     */
    local?: outputs.JobSpecTemplateSpecVolumeLocal;
    /**
     * Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    nfs?: outputs.JobSpecTemplateSpecVolumeNfs;
    /**
     * The specification of a persistent volume.
     */
    persistentVolumeClaim?: outputs.JobSpecTemplateSpecVolumePersistentVolumeClaim;
    /**
     * Represents a PhotonController persistent disk attached and mounted on kubelets host machine
     */
    photonPersistentDisk?: outputs.JobSpecTemplateSpecVolumePhotonPersistentDisk;
    /**
     * Projected represents a single volume that projects several volume sources into the same directory. More info: https://kubernetes.io/docs/concepts/storage/volumes/#projected
     */
    projecteds?: outputs.JobSpecTemplateSpecVolumeProjected[];
    /**
     * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
     */
    quobyte?: outputs.JobSpecTemplateSpecVolumeQuobyte;
    /**
     * Represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
     */
    rbd?: outputs.JobSpecTemplateSpecVolumeRbd;
    /**
     * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    secret?: outputs.JobSpecTemplateSpecVolumeSecret;
    /**
     * Represents a vSphere volume attached and mounted on kubelets host machine
     */
    vsphereVolume?: outputs.JobSpecTemplateSpecVolumeVsphereVolume;
}

export interface JobSpecTemplateSpecVolumeAwsElasticBlockStore {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    fsType?: string;
    /**
     * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
     */
    partition?: number;
    /**
     * Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    readOnly?: boolean;
    /**
     * Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    volumeId: string;
}

export interface JobSpecTemplateSpecVolumeAzureDisk {
    /**
     * Host Caching mode: None, Read Only, Read Write.
     */
    cachingMode: string;
    /**
     * The URI the data disk in the blob storage
     */
    dataDiskUri: string;
    /**
     * The Name of the data disk in the blob storage
     */
    diskName: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * The type for the data disk. Expected values: Shared, Dedicated, Managed. Defaults to Shared
     */
    kind: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
}

export interface JobSpecTemplateSpecVolumeAzureFile {
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * The name of secret that contains Azure Storage Account Name and Key
     */
    secretName: string;
    /**
     * The namespace of the secret that contains Azure Storage Account Name and Key. For Kubernetes up to 1.18.x the default is the same as the Pod. For Kubernetes 1.19.x and later the default is "default" namespace.
     */
    secretNamespace?: string;
    /**
     * Share Name
     */
    shareName: string;
}

export interface JobSpecTemplateSpecVolumeCephFs {
    /**
     * Monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    monitors: string[];
    /**
     * Used as the mounted root, rather than the full Ceph tree, default is /
     */
    path?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to `false` (read/write). More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    readOnly?: boolean;
    /**
     * The path to key ring for User, default is `/etc/ceph/user.secret`. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    secretFile?: string;
    /**
     * Reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    secretRef?: outputs.JobSpecTemplateSpecVolumeCephFsSecretRef;
    /**
     * User is the rados user name, default is admin. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    user?: string;
}

export interface JobSpecTemplateSpecVolumeCephFsSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface JobSpecTemplateSpecVolumeCinder {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    fsType?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write). More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    readOnly?: boolean;
    /**
     * Volume ID used to identify the volume in Cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    volumeId: string;
}

export interface JobSpecTemplateSpecVolumeConfigMap {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.JobSpecTemplateSpecVolumeConfigMapItem[];
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Optional: Specify whether the ConfigMap or its keys must be defined.
     */
    optional?: boolean;
}

export interface JobSpecTemplateSpecVolumeConfigMapItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface JobSpecTemplateSpecVolumeCsi {
    /**
     * the name of the volume driver to use. More info: https://kubernetes.io/docs/concepts/storage/volumes/#csi
     */
    driver: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * A reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls.
     */
    nodePublishSecretRef?: outputs.JobSpecTemplateSpecVolumeCsiNodePublishSecretRef;
    /**
     * Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
     */
    readOnly?: boolean;
    /**
     * Attributes of the volume to publish.
     */
    volumeAttributes?: {[key: string]: string};
}

export interface JobSpecTemplateSpecVolumeCsiNodePublishSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
}

export interface JobSpecTemplateSpecVolumeDownwardApi {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.JobSpecTemplateSpecVolumeDownwardApiItem[];
}

export interface JobSpecTemplateSpecVolumeDownwardApiItem {
    /**
     * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
     */
    fieldRef: outputs.JobSpecTemplateSpecVolumeDownwardApiItemFieldRef;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
     */
    path: string;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
     */
    resourceFieldRef?: outputs.JobSpecTemplateSpecVolumeDownwardApiItemResourceFieldRef;
}

export interface JobSpecTemplateSpecVolumeDownwardApiItemFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface JobSpecTemplateSpecVolumeDownwardApiItemResourceFieldRef {
    containerName: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface JobSpecTemplateSpecVolumeEmptyDir {
    /**
     * What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be one of ["" "Memory" "HugePages" "HugePages-2Mi" "HugePages-1Gi"]. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
     */
    medium?: string;
    /**
     * Total amount of local storage required for this EmptyDir volume.
     */
    sizeLimit?: string;
}

export interface JobSpecTemplateSpecVolumeEphemeral {
    /**
     * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC.
     */
    volumeClaimTemplate: outputs.JobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplate;
}

export interface JobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplate {
    /**
     * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
     */
    metadata?: outputs.JobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadata;
    /**
     * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
     */
    spec: outputs.JobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpec;
}

export interface JobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadata {
    /**
     * An unstructured key value map stored with the persistent volume claim that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the persistent volume claim. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
}

export interface JobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpec {
    /**
     * A set of the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
     */
    accessModes: string[];
    /**
     * A list of the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources: outputs.JobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResources;
    /**
     * A label query over volumes to consider for binding.
     */
    selector?: outputs.JobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelector;
    /**
     * Name of the storage class requested by the claim
     */
    storageClassName: string;
    /**
     * Defines what type of volume is required by the claim.
     */
    volumeMode: string;
    /**
     * The binding reference to the PersistentVolume backing this claim.
     */
    volumeName: string;
}

export interface JobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResources {
    /**
     * Map describing the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits?: {[key: string]: string};
    /**
     * Map describing the minimum amount of compute resources required. If this is omitted for a container, it defaults to `limits` if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    requests?: {[key: string]: string};
}

export interface JobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.JobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface JobSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface JobSpecTemplateSpecVolumeFc {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * FC target lun number
     */
    lun: number;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * FC target worldwide names (WWNs)
     */
    targetWwNs: string[];
}

export interface JobSpecTemplateSpecVolumeFlexVolume {
    /**
     * Driver is the name of the driver to use for this volume.
     */
    driver: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
     */
    fsType?: string;
    /**
     * Extra command options if any.
     */
    options?: {[key: string]: string};
    /**
     * Whether to force the ReadOnly setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * Reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
     */
    secretRef?: outputs.JobSpecTemplateSpecVolumeFlexVolumeSecretRef;
}

export interface JobSpecTemplateSpecVolumeFlexVolumeSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface JobSpecTemplateSpecVolumeFlocker {
    /**
     * Name of the dataset stored as metadata > name on the dataset for Flocker should be considered as deprecated
     */
    datasetName?: string;
    /**
     * UUID of the dataset. This is unique identifier of a Flocker dataset
     */
    datasetUuid?: string;
}

export interface JobSpecTemplateSpecVolumeGcePersistentDisk {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    fsType?: string;
    /**
     * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    partition?: number;
    /**
     * Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    pdName: string;
    /**
     * Whether to force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    readOnly?: boolean;
}

export interface JobSpecTemplateSpecVolumeGitRepo {
    /**
     * Target directory name. Must not contain or start with '..'. If '.' is supplied, the volume directory will be the git repository. Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
     */
    directory?: string;
    /**
     * Repository URL
     */
    repository?: string;
    /**
     * Commit hash for the specified revision.
     */
    revision?: string;
}

export interface JobSpecTemplateSpecVolumeGlusterfs {
    /**
     * The endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    endpointsName: string;
    /**
     * The Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    path: string;
    /**
     * Whether to force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    readOnly?: boolean;
}

export interface JobSpecTemplateSpecVolumeHostPath {
    /**
     * Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     */
    path?: string;
    /**
     * Type for HostPath volume. Allowed values are "" (default), DirectoryOrCreate, Directory, FileOrCreate, File, Socket, CharDevice and BlockDevice
     */
    type?: string;
}

export interface JobSpecTemplateSpecVolumeIscsi {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
     */
    fsType?: string;
    /**
     * Target iSCSI Qualified Name.
     */
    iqn: string;
    /**
     * iSCSI interface name that uses an iSCSI transport. Defaults to 'default' (tcp).
     */
    iscsiInterface?: string;
    /**
     * iSCSI target lun number.
     */
    lun?: number;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false.
     */
    readOnly?: boolean;
    /**
     * iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
     */
    targetPortal: string;
}

export interface JobSpecTemplateSpecVolumeLocal {
    /**
     * Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
     */
    path?: string;
}

export interface JobSpecTemplateSpecVolumeNfs {
    /**
     * Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    path: string;
    /**
     * Whether to force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    readOnly?: boolean;
    /**
     * Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    server: string;
}

export interface JobSpecTemplateSpecVolumePersistentVolumeClaim {
    /**
     * ClaimName is the name of a PersistentVolumeClaim in the same
     */
    claimName?: string;
    /**
     * Will force the ReadOnly setting in VolumeMounts.
     */
    readOnly?: boolean;
}

export interface JobSpecTemplateSpecVolumePhotonPersistentDisk {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * ID that identifies Photon Controller persistent disk
     */
    pdId: string;
}

export interface JobSpecTemplateSpecVolumeProjected {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * Source of the volume to project in the directory.
     */
    sources: outputs.JobSpecTemplateSpecVolumeProjectedSource[];
}

export interface JobSpecTemplateSpecVolumeProjectedSource {
    /**
     * ConfigMap represents a configMap that should populate this volume
     */
    configMaps?: outputs.JobSpecTemplateSpecVolumeProjectedSourceConfigMap[];
    /**
     * DownwardAPI represents downward API about the pod that should populate this volume
     */
    downwardApi?: outputs.JobSpecTemplateSpecVolumeProjectedSourceDownwardApi;
    /**
     * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    secrets?: outputs.JobSpecTemplateSpecVolumeProjectedSourceSecret[];
    /**
     * A projected service account token volume
     */
    serviceAccountToken?: outputs.JobSpecTemplateSpecVolumeProjectedSourceServiceAccountToken;
}

export interface JobSpecTemplateSpecVolumeProjectedSourceConfigMap {
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.JobSpecTemplateSpecVolumeProjectedSourceConfigMapItem[];
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Optional: Specify whether the ConfigMap or it's keys must be defined.
     */
    optional?: boolean;
}

export interface JobSpecTemplateSpecVolumeProjectedSourceConfigMapItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface JobSpecTemplateSpecVolumeProjectedSourceDownwardApi {
    /**
     * Represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
     */
    items?: outputs.JobSpecTemplateSpecVolumeProjectedSourceDownwardApiItem[];
}

export interface JobSpecTemplateSpecVolumeProjectedSourceDownwardApiItem {
    /**
     * Selects a field of the pod: only annotations, labels, name and namespace are supported.
     */
    fieldRef?: outputs.JobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRef;
    /**
     * Mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
     */
    path: string;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
     */
    resourceFieldRef?: outputs.JobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRef;
}

export interface JobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to 'v1'.
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface JobSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRef {
    containerName: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface JobSpecTemplateSpecVolumeProjectedSourceSecret {
    /**
     * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.JobSpecTemplateSpecVolumeProjectedSourceSecretItem[];
    /**
     * Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    name?: string;
    /**
     * Optional: Specify whether the Secret or it's keys must be defined.
     */
    optional?: boolean;
}

export interface JobSpecTemplateSpecVolumeProjectedSourceSecretItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface JobSpecTemplateSpecVolumeProjectedSourceServiceAccountToken {
    /**
     * Audience is the intended audience of the token
     */
    audience?: string;
    /**
     * ExpirationSeconds is the expected duration of validity of the service account token. It defaults to 1 hour and must be at least 10 minutes (600 seconds).
     */
    expirationSeconds?: number;
    /**
     * Path specifies a relative path to the mount point of the projected volume.
     */
    path: string;
}

export interface JobSpecTemplateSpecVolumeQuobyte {
    /**
     * Group to map volume access to Default is no group
     */
    group?: string;
    /**
     * Whether to force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
     */
    registry: string;
    /**
     * User to map volume access to Defaults to serivceaccount user
     */
    user?: string;
    /**
     * Volume is a string that references an already created Quobyte volume by name.
     */
    volume: string;
}

export interface JobSpecTemplateSpecVolumeRbd {
    /**
     * A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    cephMonitors: string[];
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
     */
    fsType?: string;
    /**
     * Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    keyring: string;
    /**
     * The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    radosUser?: string;
    /**
     * The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    rbdImage: string;
    /**
     * The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it.
     */
    rbdPool?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    readOnly?: boolean;
    /**
     * Name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    secretRef?: outputs.JobSpecTemplateSpecVolumeRbdSecretRef;
}

export interface JobSpecTemplateSpecVolumeRbdSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface JobSpecTemplateSpecVolumeSecret {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.JobSpecTemplateSpecVolumeSecretItem[];
    /**
     * Optional: Specify whether the Secret or its keys must be defined.
     */
    optional?: boolean;
    /**
     * Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    secretName?: string;
}

export interface JobSpecTemplateSpecVolumeSecretItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface JobSpecTemplateSpecVolumeVsphereVolume {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * Path that identifies vSphere volume vmdk
     */
    volumePath: string;
}

export interface JobTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface JobV1Metadata {
    /**
     * An unstructured key value map stored with the job that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the job. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels: {[key: string]: string};
    /**
     * Name of the job, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the job must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this job that can be used by clients to determine when job has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this job. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface JobV1Spec {
    /**
     * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
     */
    activeDeadlineSeconds?: number;
    /**
     * Specifies the number of retries before marking this job failed. Defaults to 6
     */
    backoffLimit?: number;
    /**
     * Specifies how Pod completions are tracked. It can be `NonIndexed` (default) or `Indexed`. More info: https://kubernetes.io/docs/concepts/workloads/controllers/job/#completion-mode
     */
    completionMode: string;
    /**
     * Specifies the desired number of successfully finished pods the job should be run with. Setting to nil means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value. Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
     */
    completions?: number;
    /**
     * Controls generation of pod labels and pod selectors. Leave unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template. When true, the user is responsible for picking unique labels and specifying the selector. Failure to pick a unique label may cause this and other jobs to not function correctly. More info: https://git.k8s.io/community/contributors/design-proposals/selector-generation.md
     */
    manualSelector?: boolean;
    /**
     * Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
     */
    parallelism?: number;
    /**
     * Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
     */
    podFailurePolicy?: outputs.JobV1SpecPodFailurePolicy;
    /**
     * A label query over volumes to consider for binding.
     */
    selector?: outputs.JobV1SpecSelector;
    /**
     * Describes the pod that will be created when executing a job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
     */
    template: outputs.JobV1SpecTemplate;
    /**
     * ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes.
     */
    ttlSecondsAfterFinished?: string;
}

export interface JobV1SpecPodFailurePolicy {
    /**
     * A label query over volumes to consider for binding.
     */
    rules: outputs.JobV1SpecPodFailurePolicyRule[];
}

export interface JobV1SpecPodFailurePolicyRule {
    action?: string;
    onExitCodes?: outputs.JobV1SpecPodFailurePolicyRuleOnExitCodes;
    onPodConditions?: outputs.JobV1SpecPodFailurePolicyRuleOnPodCondition[];
}

export interface JobV1SpecPodFailurePolicyRuleOnExitCodes {
    containerName?: string;
    operator?: string;
    values: number[];
}

export interface JobV1SpecPodFailurePolicyRuleOnPodCondition {
    status?: string;
    type?: string;
}

export interface JobV1SpecSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.JobV1SpecSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface JobV1SpecSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface JobV1SpecTemplate {
    /**
     * Standard job's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
     */
    metadata: outputs.JobV1SpecTemplateMetadata;
    /**
     * Spec of the pods owned by the job
     */
    spec?: outputs.JobV1SpecTemplateSpec;
}

export interface JobV1SpecTemplateMetadata {
    /**
     * An unstructured key value map stored with the job that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the job. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the job, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * An opaque value that represents the internal version of this job that can be used by clients to determine when job has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this job. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface JobV1SpecTemplateSpec {
    /**
     * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
     */
    activeDeadlineSeconds?: number;
    /**
     * Optional pod scheduling constraints.
     */
    affinity?: outputs.JobV1SpecTemplateSpecAffinity;
    /**
     * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
     */
    automountServiceAccountToken?: boolean;
    /**
     * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/
     */
    containers?: outputs.JobV1SpecTemplateSpecContainer[];
    /**
     * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy. Optional: Defaults to empty
     */
    dnsConfig?: outputs.JobV1SpecTemplateSpecDnsConfig;
    /**
     * Set DNS policy for containers within the pod. Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'. Defaults to 'ClusterFirst'. More info: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy
     */
    dnsPolicy?: string;
    /**
     * Enables generating environment variables for service discovery. Defaults to true.
     */
    enableServiceLinks?: boolean;
    /**
     * List of hosts and IPs that will be injected into the pod's hosts file if specified. Optional: Defaults to empty.
     */
    hostAliases?: outputs.JobV1SpecTemplateSpecHostAlias[];
    /**
     * Use the host's ipc namespace. Optional: Defaults to false.
     */
    hostIpc?: boolean;
    /**
     * Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified.
     */
    hostNetwork?: boolean;
    /**
     * Use the host's pid namespace.
     */
    hostPid?: boolean;
    /**
     * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
     */
    hostname: string;
    /**
     * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
     */
    imagePullSecrets?: outputs.JobV1SpecTemplateSpecImagePullSecret[];
    /**
     * List of init containers belonging to the pod. Init containers always run to completion and each must complete successfully before the next is started. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
     */
    initContainers?: outputs.JobV1SpecTemplateSpecInitContainer[];
    /**
     * NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
     */
    nodeName: string;
    /**
     * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.
     */
    nodeSelector?: {[key: string]: string};
    /**
     * Specifies the OS of the containers in the pod.
     */
    os?: outputs.JobV1SpecTemplateSpecOs;
    /**
     * If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
     */
    priorityClassName?: string;
    /**
     * If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md
     */
    readinessGates?: outputs.JobV1SpecTemplateSpecReadinessGate[];
    /**
     * Restart policy for all containers within the pod. One of Always, OnFailure, Never. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy.
     */
    restartPolicy?: string;
    /**
     * RuntimeClassName is a feature for selecting the container runtime configuration. The container runtime configuration is used to run a Pod's containers. More info: https://kubernetes.io/docs/concepts/containers/runtime-class
     */
    runtimeClassName?: string;
    /**
     * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
     */
    schedulerName: string;
    /**
     * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty
     */
    securityContext?: outputs.JobV1SpecTemplateSpecSecurityContext;
    /**
     * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: http://releases.k8s.io/HEAD/docs/design/service_accounts.md.
     */
    serviceAccountName: string;
    /**
     * Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Defaults to false.
     */
    shareProcessNamespace?: boolean;
    /**
     * If specified, the fully qualified Pod hostname will be "...svc.". If not specified, the pod will not have a domainname at all..
     */
    subdomain?: string;
    /**
     * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process.
     */
    terminationGracePeriodSeconds?: number;
    /**
     * If specified, the pod's toleration. Optional: Defaults to empty
     */
    tolerations?: outputs.JobV1SpecTemplateSpecToleration[];
    /**
     * describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints.
     */
    topologySpreadConstraints?: outputs.JobV1SpecTemplateSpecTopologySpreadConstraint[];
    /**
     * List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
     */
    volumes?: outputs.JobV1SpecTemplateSpecVolume[];
}

export interface JobV1SpecTemplateSpecAffinity {
    /**
     * Node affinity scheduling rules for the pod.
     */
    nodeAffinity?: outputs.JobV1SpecTemplateSpecAffinityNodeAffinity;
    /**
     * Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)
     */
    podAffinity?: outputs.JobV1SpecTemplateSpecAffinityPodAffinity;
    /**
     * Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)
     */
    podAntiAffinity?: outputs.JobV1SpecTemplateSpecAffinityPodAntiAffinity;
}

export interface JobV1SpecTemplateSpecAffinityNodeAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: outputs.JobV1SpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a node label update), the system may or may not try to eventually evict the pod from its node.
     */
    requiredDuringSchedulingIgnoredDuringExecution?: outputs.JobV1SpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
}

export interface JobV1SpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A node selector term, associated with the corresponding weight.
     */
    preference: outputs.JobV1SpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
    /**
     * weight is in the range 1-100
     */
    weight: number;
}

export interface JobV1SpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
    /**
     * List of node selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.JobV1SpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression[];
    /**
     * A list of node selector requirements by node's fields. The requirements are ANDed.
     */
    matchFields?: outputs.JobV1SpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchField[];
}

export interface JobV1SpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
     */
    operator?: string;
    /**
     * Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface JobV1SpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchField {
    /**
     * The label key that the selector applies to.
     */
    key: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists`, `DoesNotExist`, `Gt`, and `Lt`.
     */
    operator: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface JobV1SpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * List of node selector terms. The terms are ORed.
     */
    nodeSelectorTerms?: outputs.JobV1SpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm[];
}

export interface JobV1SpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm {
    /**
     * List of node selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.JobV1SpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression[];
    /**
     * A list of node selector requirements by node's fields. The requirements are ANDed.
     */
    matchFields?: outputs.JobV1SpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchField[];
}

export interface JobV1SpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
     */
    operator?: string;
    /**
     * Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface JobV1SpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchField {
    /**
     * The label key that the selector applies to.
     */
    key: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists`, `DoesNotExist`, `Gt`, and `Lt`.
     */
    operator: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface JobV1SpecTemplateSpecAffinityPodAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: outputs.JobV1SpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.
     */
    requiredDuringSchedulingIgnoredDuringExecutions?: outputs.JobV1SpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
}

export interface JobV1SpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A pod affinity term, associated with the corresponding weight
     */
    podAffinityTerm: outputs.JobV1SpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
    /**
     * weight associated with matching the corresponding podAffinityTerm, in the range 1-100
     */
    weight: number;
}

export interface JobV1SpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.JobV1SpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface JobV1SpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.JobV1SpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface JobV1SpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface JobV1SpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.JobV1SpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface JobV1SpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.JobV1SpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface JobV1SpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface JobV1SpecTemplateSpecAffinityPodAntiAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: outputs.JobV1SpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.
     */
    requiredDuringSchedulingIgnoredDuringExecutions?: outputs.JobV1SpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
}

export interface JobV1SpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A pod affinity term, associated with the corresponding weight
     */
    podAffinityTerm: outputs.JobV1SpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
    /**
     * weight associated with matching the corresponding podAffinityTerm, in the range 1-100
     */
    weight: number;
}

export interface JobV1SpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.JobV1SpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface JobV1SpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.JobV1SpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface JobV1SpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface JobV1SpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.JobV1SpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface JobV1SpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.JobV1SpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface JobV1SpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface JobV1SpecTemplateSpecContainer {
    /**
     * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    args?: string[];
    /**
     * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    commands?: string[];
    /**
     * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
     */
    envFroms?: outputs.JobV1SpecTemplateSpecContainerEnvFrom[];
    /**
     * List of environment variables to set in the container. Cannot be updated.
     */
    envs?: outputs.JobV1SpecTemplateSpecContainerEnv[];
    /**
     * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/
     */
    image?: string;
    /**
     * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images
     */
    imagePullPolicy: string;
    /**
     * Actions that the management system should take in response to container lifecycle events
     */
    lifecycle?: outputs.JobV1SpecTemplateSpecContainerLifecycle;
    /**
     * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    livenessProbe?: outputs.JobV1SpecTemplateSpecContainerLivenessProbe;
    /**
     * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
     */
    name: string;
    /**
     * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
     */
    ports?: outputs.JobV1SpecTemplateSpecContainerPort[];
    /**
     * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    readinessProbe?: outputs.JobV1SpecTemplateSpecContainerReadinessProbe;
    /**
     * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources?: outputs.JobV1SpecTemplateSpecContainerResources;
    /**
     * Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
     */
    securityContext?: outputs.JobV1SpecTemplateSpecContainerSecurityContext;
    /**
     * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     */
    startupProbe?: outputs.JobV1SpecTemplateSpecContainerStartupProbe;
    /**
     * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.
     */
    stdin?: boolean;
    /**
     * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.
     */
    stdinOnce?: boolean;
    /**
     * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.
     */
    terminationMessagePath?: string;
    /**
     * Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
     */
    terminationMessagePolicy: string;
    /**
     * Whether this container should allocate a TTY for itself
     */
    tty?: boolean;
    /**
     * Pod volumes to mount into the container's filesystem. Cannot be updated.
     */
    volumeMounts?: outputs.JobV1SpecTemplateSpecContainerVolumeMount[];
    /**
     * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
     */
    workingDir?: string;
}

export interface JobV1SpecTemplateSpecContainerEnv {
    /**
     * Name of the environment variable. Must be a C_IDENTIFIER
     */
    name: string;
    /**
     * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
     */
    value?: string;
    /**
     * Source for the environment variable's value
     */
    valueFrom?: outputs.JobV1SpecTemplateSpecContainerEnvValueFrom;
}

export interface JobV1SpecTemplateSpecContainerEnvFrom {
    /**
     * The ConfigMap to select from
     */
    configMapRef?: outputs.JobV1SpecTemplateSpecContainerEnvFromConfigMapRef;
    /**
     * An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
     */
    prefix?: string;
    /**
     * The Secret to select from
     */
    secretRef?: outputs.JobV1SpecTemplateSpecContainerEnvFromSecretRef;
}

export interface JobV1SpecTemplateSpecContainerEnvFromConfigMapRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the ConfigMap must be defined
     */
    optional?: boolean;
}

export interface JobV1SpecTemplateSpecContainerEnvFromSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the Secret must be defined
     */
    optional?: boolean;
}

export interface JobV1SpecTemplateSpecContainerEnvValueFrom {
    /**
     * Selects a key of a ConfigMap.
     */
    configMapKeyRef?: outputs.JobV1SpecTemplateSpecContainerEnvValueFromConfigMapKeyRef;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.
     */
    fieldRef?: outputs.JobV1SpecTemplateSpecContainerEnvValueFromFieldRef;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
     */
    resourceFieldRef?: outputs.JobV1SpecTemplateSpecContainerEnvValueFromResourceFieldRef;
    /**
     * Selects a key of a secret in the pod's namespace.
     */
    secretKeyRef?: outputs.JobV1SpecTemplateSpecContainerEnvValueFromSecretKeyRef;
}

export interface JobV1SpecTemplateSpecContainerEnvValueFromConfigMapKeyRef {
    /**
     * The key to select.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the ConfigMap or its key must be defined.
     */
    optional?: boolean;
}

export interface JobV1SpecTemplateSpecContainerEnvValueFromFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface JobV1SpecTemplateSpecContainerEnvValueFromResourceFieldRef {
    containerName?: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface JobV1SpecTemplateSpecContainerEnvValueFromSecretKeyRef {
    /**
     * The key of the secret to select from. Must be a valid secret key.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the Secret or its key must be defined.
     */
    optional?: boolean;
}

export interface JobV1SpecTemplateSpecContainerLifecycle {
    /**
     * post_start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    postStarts?: outputs.JobV1SpecTemplateSpecContainerLifecyclePostStart[];
    /**
     * pre_stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    preStops?: outputs.JobV1SpecTemplateSpecContainerLifecyclePreStop[];
}

export interface JobV1SpecTemplateSpecContainerLifecyclePostStart {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.JobV1SpecTemplateSpecContainerLifecyclePostStartExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.JobV1SpecTemplateSpecContainerLifecyclePostStartHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.JobV1SpecTemplateSpecContainerLifecyclePostStartTcpSocket[];
}

export interface JobV1SpecTemplateSpecContainerLifecyclePostStartExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface JobV1SpecTemplateSpecContainerLifecyclePostStartHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.JobV1SpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface JobV1SpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface JobV1SpecTemplateSpecContainerLifecyclePostStartTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface JobV1SpecTemplateSpecContainerLifecyclePreStop {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.JobV1SpecTemplateSpecContainerLifecyclePreStopExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.JobV1SpecTemplateSpecContainerLifecyclePreStopHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.JobV1SpecTemplateSpecContainerLifecyclePreStopTcpSocket[];
}

export interface JobV1SpecTemplateSpecContainerLifecyclePreStopExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface JobV1SpecTemplateSpecContainerLifecyclePreStopHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.JobV1SpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface JobV1SpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface JobV1SpecTemplateSpecContainerLifecyclePreStopTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface JobV1SpecTemplateSpecContainerLivenessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.JobV1SpecTemplateSpecContainerLivenessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.JobV1SpecTemplateSpecContainerLivenessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.JobV1SpecTemplateSpecContainerLivenessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.JobV1SpecTemplateSpecContainerLivenessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface JobV1SpecTemplateSpecContainerLivenessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface JobV1SpecTemplateSpecContainerLivenessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface JobV1SpecTemplateSpecContainerLivenessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.JobV1SpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface JobV1SpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface JobV1SpecTemplateSpecContainerLivenessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface JobV1SpecTemplateSpecContainerPort {
    /**
     * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
     */
    containerPort: number;
    /**
     * What host IP to bind the external port to.
     */
    hostIp?: string;
    /**
     * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
     */
    hostPort?: number;
    /**
     * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
     */
    name?: string;
    /**
     * Protocol for port. Must be UDP or TCP. Defaults to "TCP".
     */
    protocol?: string;
}

export interface JobV1SpecTemplateSpecContainerReadinessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.JobV1SpecTemplateSpecContainerReadinessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.JobV1SpecTemplateSpecContainerReadinessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.JobV1SpecTemplateSpecContainerReadinessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.JobV1SpecTemplateSpecContainerReadinessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface JobV1SpecTemplateSpecContainerReadinessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface JobV1SpecTemplateSpecContainerReadinessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface JobV1SpecTemplateSpecContainerReadinessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.JobV1SpecTemplateSpecContainerReadinessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface JobV1SpecTemplateSpecContainerReadinessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface JobV1SpecTemplateSpecContainerReadinessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface JobV1SpecTemplateSpecContainerResources {
    /**
     * Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits: {[key: string]: string};
    /**
     * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
     */
    requests: {[key: string]: string};
}

export interface JobV1SpecTemplateSpecContainerSecurityContext {
    /**
     * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
     */
    allowPrivilegeEscalation?: boolean;
    /**
     * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
     */
    capabilities?: outputs.JobV1SpecTemplateSpecContainerSecurityContextCapabilities;
    /**
     * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
     */
    privileged?: boolean;
    /**
     * Whether this container has a read-only root filesystem. Default is false.
     */
    readOnlyRootFilesystem?: boolean;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsGroup?: string;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: boolean;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUser?: string;
    /**
     * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    seLinuxOptions?: outputs.JobV1SpecTemplateSpecContainerSecurityContextSeLinuxOptions;
    /**
     * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     */
    seccompProfile?: outputs.JobV1SpecTemplateSpecContainerSecurityContextSeccompProfile;
}

export interface JobV1SpecTemplateSpecContainerSecurityContextCapabilities {
    /**
     * Added capabilities
     */
    adds?: string[];
    /**
     * Removed capabilities
     */
    drops?: string[];
}

export interface JobV1SpecTemplateSpecContainerSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: string;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: string;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: string;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: string;
}

export interface JobV1SpecTemplateSpecContainerSecurityContextSeccompProfile {
    /**
     * Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
     */
    localhostProfile?: string;
    /**
     * Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
     */
    type?: string;
}

export interface JobV1SpecTemplateSpecContainerStartupProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.JobV1SpecTemplateSpecContainerStartupProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.JobV1SpecTemplateSpecContainerStartupProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.JobV1SpecTemplateSpecContainerStartupProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.JobV1SpecTemplateSpecContainerStartupProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface JobV1SpecTemplateSpecContainerStartupProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface JobV1SpecTemplateSpecContainerStartupProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface JobV1SpecTemplateSpecContainerStartupProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.JobV1SpecTemplateSpecContainerStartupProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface JobV1SpecTemplateSpecContainerStartupProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface JobV1SpecTemplateSpecContainerStartupProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface JobV1SpecTemplateSpecContainerVolumeMount {
    /**
     * Path within the container at which the volume should be mounted. Must not contain ':'.
     */
    mountPath: string;
    /**
     * Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional.
     */
    mountPropagation?: string;
    /**
     * This must match the Name of a Volume.
     */
    name: string;
    /**
     * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
     */
    subPath?: string;
}

export interface JobV1SpecTemplateSpecDnsConfig {
    /**
     * A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
     */
    nameservers?: string[];
    /**
     * A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
     */
    options?: outputs.JobV1SpecTemplateSpecDnsConfigOption[];
    /**
     * A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
     */
    searches?: string[];
}

export interface JobV1SpecTemplateSpecDnsConfigOption {
    /**
     * Name of the option.
     */
    name: string;
    /**
     * Value of the option. Optional: Defaults to empty.
     */
    value?: string;
}

export interface JobV1SpecTemplateSpecHostAlias {
    /**
     * Hostnames for the IP address.
     */
    hostnames: string[];
    /**
     * IP address of the host file entry.
     */
    ip: string;
}

export interface JobV1SpecTemplateSpecImagePullSecret {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
}

export interface JobV1SpecTemplateSpecInitContainer {
    /**
     * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    args?: string[];
    /**
     * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    commands?: string[];
    /**
     * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
     */
    envFroms?: outputs.JobV1SpecTemplateSpecInitContainerEnvFrom[];
    /**
     * List of environment variables to set in the container. Cannot be updated.
     */
    envs?: outputs.JobV1SpecTemplateSpecInitContainerEnv[];
    /**
     * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/
     */
    image?: string;
    /**
     * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images
     */
    imagePullPolicy: string;
    /**
     * Actions that the management system should take in response to container lifecycle events
     */
    lifecycle?: outputs.JobV1SpecTemplateSpecInitContainerLifecycle;
    /**
     * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    livenessProbe?: outputs.JobV1SpecTemplateSpecInitContainerLivenessProbe;
    /**
     * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
     */
    name: string;
    /**
     * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
     */
    ports?: outputs.JobV1SpecTemplateSpecInitContainerPort[];
    /**
     * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    readinessProbe?: outputs.JobV1SpecTemplateSpecInitContainerReadinessProbe;
    /**
     * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources?: outputs.JobV1SpecTemplateSpecInitContainerResources;
    /**
     * Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
     */
    securityContext?: outputs.JobV1SpecTemplateSpecInitContainerSecurityContext;
    /**
     * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     */
    startupProbe?: outputs.JobV1SpecTemplateSpecInitContainerStartupProbe;
    /**
     * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.
     */
    stdin?: boolean;
    /**
     * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.
     */
    stdinOnce?: boolean;
    /**
     * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.
     */
    terminationMessagePath?: string;
    /**
     * Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
     */
    terminationMessagePolicy: string;
    /**
     * Whether this container should allocate a TTY for itself
     */
    tty?: boolean;
    /**
     * Pod volumes to mount into the container's filesystem. Cannot be updated.
     */
    volumeMounts?: outputs.JobV1SpecTemplateSpecInitContainerVolumeMount[];
    /**
     * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
     */
    workingDir?: string;
}

export interface JobV1SpecTemplateSpecInitContainerEnv {
    /**
     * Name of the environment variable. Must be a C_IDENTIFIER
     */
    name: string;
    /**
     * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
     */
    value?: string;
    /**
     * Source for the environment variable's value
     */
    valueFrom?: outputs.JobV1SpecTemplateSpecInitContainerEnvValueFrom;
}

export interface JobV1SpecTemplateSpecInitContainerEnvFrom {
    /**
     * The ConfigMap to select from
     */
    configMapRef?: outputs.JobV1SpecTemplateSpecInitContainerEnvFromConfigMapRef;
    /**
     * An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
     */
    prefix?: string;
    /**
     * The Secret to select from
     */
    secretRef?: outputs.JobV1SpecTemplateSpecInitContainerEnvFromSecretRef;
}

export interface JobV1SpecTemplateSpecInitContainerEnvFromConfigMapRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the ConfigMap must be defined
     */
    optional?: boolean;
}

export interface JobV1SpecTemplateSpecInitContainerEnvFromSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the Secret must be defined
     */
    optional?: boolean;
}

export interface JobV1SpecTemplateSpecInitContainerEnvValueFrom {
    /**
     * Selects a key of a ConfigMap.
     */
    configMapKeyRef?: outputs.JobV1SpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRef;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.
     */
    fieldRef?: outputs.JobV1SpecTemplateSpecInitContainerEnvValueFromFieldRef;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
     */
    resourceFieldRef?: outputs.JobV1SpecTemplateSpecInitContainerEnvValueFromResourceFieldRef;
    /**
     * Selects a key of a secret in the pod's namespace.
     */
    secretKeyRef?: outputs.JobV1SpecTemplateSpecInitContainerEnvValueFromSecretKeyRef;
}

export interface JobV1SpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRef {
    /**
     * The key to select.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the ConfigMap or its key must be defined.
     */
    optional?: boolean;
}

export interface JobV1SpecTemplateSpecInitContainerEnvValueFromFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface JobV1SpecTemplateSpecInitContainerEnvValueFromResourceFieldRef {
    containerName?: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface JobV1SpecTemplateSpecInitContainerEnvValueFromSecretKeyRef {
    /**
     * The key of the secret to select from. Must be a valid secret key.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the Secret or its key must be defined.
     */
    optional?: boolean;
}

export interface JobV1SpecTemplateSpecInitContainerLifecycle {
    /**
     * post_start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    postStarts?: outputs.JobV1SpecTemplateSpecInitContainerLifecyclePostStart[];
    /**
     * pre_stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    preStops?: outputs.JobV1SpecTemplateSpecInitContainerLifecyclePreStop[];
}

export interface JobV1SpecTemplateSpecInitContainerLifecyclePostStart {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.JobV1SpecTemplateSpecInitContainerLifecyclePostStartExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.JobV1SpecTemplateSpecInitContainerLifecyclePostStartHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.JobV1SpecTemplateSpecInitContainerLifecyclePostStartTcpSocket[];
}

export interface JobV1SpecTemplateSpecInitContainerLifecyclePostStartExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface JobV1SpecTemplateSpecInitContainerLifecyclePostStartHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.JobV1SpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface JobV1SpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface JobV1SpecTemplateSpecInitContainerLifecyclePostStartTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface JobV1SpecTemplateSpecInitContainerLifecyclePreStop {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.JobV1SpecTemplateSpecInitContainerLifecyclePreStopExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.JobV1SpecTemplateSpecInitContainerLifecyclePreStopHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.JobV1SpecTemplateSpecInitContainerLifecyclePreStopTcpSocket[];
}

export interface JobV1SpecTemplateSpecInitContainerLifecyclePreStopExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface JobV1SpecTemplateSpecInitContainerLifecyclePreStopHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.JobV1SpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface JobV1SpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface JobV1SpecTemplateSpecInitContainerLifecyclePreStopTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface JobV1SpecTemplateSpecInitContainerLivenessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.JobV1SpecTemplateSpecInitContainerLivenessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.JobV1SpecTemplateSpecInitContainerLivenessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.JobV1SpecTemplateSpecInitContainerLivenessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.JobV1SpecTemplateSpecInitContainerLivenessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface JobV1SpecTemplateSpecInitContainerLivenessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface JobV1SpecTemplateSpecInitContainerLivenessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface JobV1SpecTemplateSpecInitContainerLivenessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.JobV1SpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface JobV1SpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface JobV1SpecTemplateSpecInitContainerLivenessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface JobV1SpecTemplateSpecInitContainerPort {
    /**
     * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
     */
    containerPort: number;
    /**
     * What host IP to bind the external port to.
     */
    hostIp?: string;
    /**
     * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
     */
    hostPort?: number;
    /**
     * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
     */
    name?: string;
    /**
     * Protocol for port. Must be UDP or TCP. Defaults to "TCP".
     */
    protocol?: string;
}

export interface JobV1SpecTemplateSpecInitContainerReadinessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.JobV1SpecTemplateSpecInitContainerReadinessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.JobV1SpecTemplateSpecInitContainerReadinessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.JobV1SpecTemplateSpecInitContainerReadinessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.JobV1SpecTemplateSpecInitContainerReadinessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface JobV1SpecTemplateSpecInitContainerReadinessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface JobV1SpecTemplateSpecInitContainerReadinessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface JobV1SpecTemplateSpecInitContainerReadinessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.JobV1SpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface JobV1SpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface JobV1SpecTemplateSpecInitContainerReadinessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface JobV1SpecTemplateSpecInitContainerResources {
    /**
     * Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits: {[key: string]: string};
    /**
     * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
     */
    requests: {[key: string]: string};
}

export interface JobV1SpecTemplateSpecInitContainerSecurityContext {
    /**
     * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
     */
    allowPrivilegeEscalation?: boolean;
    /**
     * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
     */
    capabilities?: outputs.JobV1SpecTemplateSpecInitContainerSecurityContextCapabilities;
    /**
     * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
     */
    privileged?: boolean;
    /**
     * Whether this container has a read-only root filesystem. Default is false.
     */
    readOnlyRootFilesystem?: boolean;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsGroup?: string;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: boolean;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUser?: string;
    /**
     * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    seLinuxOptions?: outputs.JobV1SpecTemplateSpecInitContainerSecurityContextSeLinuxOptions;
    /**
     * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     */
    seccompProfile?: outputs.JobV1SpecTemplateSpecInitContainerSecurityContextSeccompProfile;
}

export interface JobV1SpecTemplateSpecInitContainerSecurityContextCapabilities {
    /**
     * Added capabilities
     */
    adds?: string[];
    /**
     * Removed capabilities
     */
    drops?: string[];
}

export interface JobV1SpecTemplateSpecInitContainerSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: string;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: string;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: string;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: string;
}

export interface JobV1SpecTemplateSpecInitContainerSecurityContextSeccompProfile {
    /**
     * Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
     */
    localhostProfile?: string;
    /**
     * Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
     */
    type?: string;
}

export interface JobV1SpecTemplateSpecInitContainerStartupProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.JobV1SpecTemplateSpecInitContainerStartupProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.JobV1SpecTemplateSpecInitContainerStartupProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.JobV1SpecTemplateSpecInitContainerStartupProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.JobV1SpecTemplateSpecInitContainerStartupProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface JobV1SpecTemplateSpecInitContainerStartupProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface JobV1SpecTemplateSpecInitContainerStartupProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface JobV1SpecTemplateSpecInitContainerStartupProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.JobV1SpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface JobV1SpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface JobV1SpecTemplateSpecInitContainerStartupProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface JobV1SpecTemplateSpecInitContainerVolumeMount {
    /**
     * Path within the container at which the volume should be mounted. Must not contain ':'.
     */
    mountPath: string;
    /**
     * Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional.
     */
    mountPropagation?: string;
    /**
     * This must match the Name of a Volume.
     */
    name: string;
    /**
     * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
     */
    subPath?: string;
}

export interface JobV1SpecTemplateSpecOs {
    /**
     * Name is the name of the operating system. The currently supported values are linux and windows.
     */
    name: string;
}

export interface JobV1SpecTemplateSpecReadinessGate {
    /**
     * refers to a condition in the pod's condition list with matching type.
     */
    conditionType: string;
}

export interface JobV1SpecTemplateSpecSecurityContext {
    /**
     * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- If unset, the Kubelet will not modify the ownership and permissions of any volume.
     */
    fsGroup?: string;
    /**
     * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir.
     */
    fsGroupChangePolicy?: string;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    runAsGroup?: string;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: boolean;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    runAsUser?: string;
    /**
     * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    seLinuxOptions?: outputs.JobV1SpecTemplateSpecSecurityContextSeLinuxOptions;
    /**
     * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     */
    seccompProfile?: outputs.JobV1SpecTemplateSpecSecurityContextSeccompProfile;
    /**
     * A list of groups applied to the first process run in each container, in addition to the container's primary GID. If unspecified, no groups will be added to any container.
     */
    supplementalGroups?: number[];
    /**
     * holds a list of namespaced sysctls used for the pod.
     */
    sysctls?: outputs.JobV1SpecTemplateSpecSecurityContextSysctl[];
    /**
     * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
     */
    windowsOptions?: outputs.JobV1SpecTemplateSpecSecurityContextWindowsOptions;
}

export interface JobV1SpecTemplateSpecSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: string;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: string;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: string;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: string;
}

export interface JobV1SpecTemplateSpecSecurityContextSeccompProfile {
    /**
     * Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
     */
    localhostProfile?: string;
    /**
     * Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
     */
    type?: string;
}

export interface JobV1SpecTemplateSpecSecurityContextSysctl {
    /**
     * Name of a property to set.
     */
    name: string;
    /**
     * Value of a property to set.
     */
    value: string;
}

export interface JobV1SpecTemplateSpecSecurityContextWindowsOptions {
    /**
     * GMSACredentialSpec is where the GMSA admission webhook inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field
     */
    gmsaCredentialSpec?: string;
    /**
     * GMSACredentialSpecName is the name of the GMSA credential spec to use.
     */
    gmsaCredentialSpecName?: string;
    /**
     * HostProcess determines if a container should be run as a 'Host Process' container. Default value is false.
     */
    hostProcess?: boolean;
    /**
     * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUsername?: string;
}

export interface JobV1SpecTemplateSpecToleration {
    /**
     * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
     */
    effect?: string;
    /**
     * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
     */
    key?: string;
    /**
     * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
     */
    operator?: string;
    /**
     * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
     */
    tolerationSeconds?: string;
    /**
     * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
     */
    value?: string;
}

export interface JobV1SpecTemplateSpecTopologySpreadConstraint {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.JobV1SpecTemplateSpecTopologySpreadConstraintLabelSelector[];
    /**
     * is a set of pod label keys to select the pods over which spreading will be calculated.
     */
    matchLabelKeys?: string[];
    /**
     * describes the degree to which pods may be unevenly distributed.
     */
    maxSkew?: number;
    /**
     * indicates a minimum number of eligible domains.
     */
    minDomains?: number;
    /**
     * indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew.
     */
    nodeAffinityPolicy?: string;
    /**
     * indicates how we will treat node taints when calculating pod topology spread skew.
     */
    nodeTaintsPolicy?: string;
    /**
     * the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology.
     */
    topologyKey?: string;
    /**
     * indicates how to deal with a pod if it doesn't satisfy the spread constraint.
     */
    whenUnsatisfiable?: string;
}

export interface JobV1SpecTemplateSpecTopologySpreadConstraintLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.JobV1SpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface JobV1SpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface JobV1SpecTemplateSpecVolume {
    /**
     * Represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    awsElasticBlockStore?: outputs.JobV1SpecTemplateSpecVolumeAwsElasticBlockStore;
    /**
     * Represents an Azure Data Disk mount on the host and bind mount to the pod.
     */
    azureDisk?: outputs.JobV1SpecTemplateSpecVolumeAzureDisk;
    /**
     * Represents an Azure File Service mount on the host and bind mount to the pod.
     */
    azureFile?: outputs.JobV1SpecTemplateSpecVolumeAzureFile;
    /**
     * Represents a Ceph FS mount on the host that shares a pod's lifetime
     */
    cephFs?: outputs.JobV1SpecTemplateSpecVolumeCephFs;
    /**
     * Represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    cinder?: outputs.JobV1SpecTemplateSpecVolumeCinder;
    /**
     * ConfigMap represents a configMap that should populate this volume
     */
    configMap?: outputs.JobV1SpecTemplateSpecVolumeConfigMap;
    /**
     * Represents a CSI Volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
     */
    csi?: outputs.JobV1SpecTemplateSpecVolumeCsi;
    /**
     * DownwardAPI represents downward API about the pod that should populate this volume
     */
    downwardApi?: outputs.JobV1SpecTemplateSpecVolumeDownwardApi;
    /**
     * EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
     */
    emptyDir?: outputs.JobV1SpecTemplateSpecVolumeEmptyDir;
    /**
     * Represents an ephemeral volume that is handled by a normal storage driver. More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes
     */
    ephemeral?: outputs.JobV1SpecTemplateSpecVolumeEphemeral;
    /**
     * Represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
     */
    fc?: outputs.JobV1SpecTemplateSpecVolumeFc;
    /**
     * Represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.
     */
    flexVolume?: outputs.JobV1SpecTemplateSpecVolumeFlexVolume;
    /**
     * Represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
     */
    flocker?: outputs.JobV1SpecTemplateSpecVolumeFlocker;
    /**
     * Represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    gcePersistentDisk?: outputs.JobV1SpecTemplateSpecVolumeGcePersistentDisk;
    /**
     * GitRepo represents a git repository at a particular revision.
     */
    gitRepo?: outputs.JobV1SpecTemplateSpecVolumeGitRepo;
    /**
     * Represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
     */
    glusterfs?: outputs.JobV1SpecTemplateSpecVolumeGlusterfs;
    /**
     * Represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     */
    hostPath?: outputs.JobV1SpecTemplateSpecVolumeHostPath;
    /**
     * Represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
     */
    iscsi?: outputs.JobV1SpecTemplateSpecVolumeIscsi;
    /**
     * Represents a mounted local storage device such as a disk, partition or directory. Local volumes can only be used as a statically created PersistentVolume. Dynamic provisioning is not supported yet. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
     */
    local?: outputs.JobV1SpecTemplateSpecVolumeLocal;
    /**
     * Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    nfs?: outputs.JobV1SpecTemplateSpecVolumeNfs;
    /**
     * The specification of a persistent volume.
     */
    persistentVolumeClaim?: outputs.JobV1SpecTemplateSpecVolumePersistentVolumeClaim;
    /**
     * Represents a PhotonController persistent disk attached and mounted on kubelets host machine
     */
    photonPersistentDisk?: outputs.JobV1SpecTemplateSpecVolumePhotonPersistentDisk;
    /**
     * Projected represents a single volume that projects several volume sources into the same directory. More info: https://kubernetes.io/docs/concepts/storage/volumes/#projected
     */
    projecteds?: outputs.JobV1SpecTemplateSpecVolumeProjected[];
    /**
     * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
     */
    quobyte?: outputs.JobV1SpecTemplateSpecVolumeQuobyte;
    /**
     * Represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
     */
    rbd?: outputs.JobV1SpecTemplateSpecVolumeRbd;
    /**
     * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    secret?: outputs.JobV1SpecTemplateSpecVolumeSecret;
    /**
     * Represents a vSphere volume attached and mounted on kubelets host machine
     */
    vsphereVolume?: outputs.JobV1SpecTemplateSpecVolumeVsphereVolume;
}

export interface JobV1SpecTemplateSpecVolumeAwsElasticBlockStore {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    fsType?: string;
    /**
     * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
     */
    partition?: number;
    /**
     * Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    readOnly?: boolean;
    /**
     * Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    volumeId: string;
}

export interface JobV1SpecTemplateSpecVolumeAzureDisk {
    /**
     * Host Caching mode: None, Read Only, Read Write.
     */
    cachingMode: string;
    /**
     * The URI the data disk in the blob storage
     */
    dataDiskUri: string;
    /**
     * The Name of the data disk in the blob storage
     */
    diskName: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * The type for the data disk. Expected values: Shared, Dedicated, Managed. Defaults to Shared
     */
    kind: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
}

export interface JobV1SpecTemplateSpecVolumeAzureFile {
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * The name of secret that contains Azure Storage Account Name and Key
     */
    secretName: string;
    /**
     * The namespace of the secret that contains Azure Storage Account Name and Key. For Kubernetes up to 1.18.x the default is the same as the Pod. For Kubernetes 1.19.x and later the default is "default" namespace.
     */
    secretNamespace?: string;
    /**
     * Share Name
     */
    shareName: string;
}

export interface JobV1SpecTemplateSpecVolumeCephFs {
    /**
     * Monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    monitors: string[];
    /**
     * Used as the mounted root, rather than the full Ceph tree, default is /
     */
    path?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to `false` (read/write). More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    readOnly?: boolean;
    /**
     * The path to key ring for User, default is `/etc/ceph/user.secret`. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    secretFile?: string;
    /**
     * Reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    secretRef?: outputs.JobV1SpecTemplateSpecVolumeCephFsSecretRef;
    /**
     * User is the rados user name, default is admin. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    user?: string;
}

export interface JobV1SpecTemplateSpecVolumeCephFsSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface JobV1SpecTemplateSpecVolumeCinder {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    fsType?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write). More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    readOnly?: boolean;
    /**
     * Volume ID used to identify the volume in Cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    volumeId: string;
}

export interface JobV1SpecTemplateSpecVolumeConfigMap {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.JobV1SpecTemplateSpecVolumeConfigMapItem[];
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Optional: Specify whether the ConfigMap or its keys must be defined.
     */
    optional?: boolean;
}

export interface JobV1SpecTemplateSpecVolumeConfigMapItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface JobV1SpecTemplateSpecVolumeCsi {
    /**
     * the name of the volume driver to use. More info: https://kubernetes.io/docs/concepts/storage/volumes/#csi
     */
    driver: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * A reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls.
     */
    nodePublishSecretRef?: outputs.JobV1SpecTemplateSpecVolumeCsiNodePublishSecretRef;
    /**
     * Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
     */
    readOnly?: boolean;
    /**
     * Attributes of the volume to publish.
     */
    volumeAttributes?: {[key: string]: string};
}

export interface JobV1SpecTemplateSpecVolumeCsiNodePublishSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
}

export interface JobV1SpecTemplateSpecVolumeDownwardApi {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.JobV1SpecTemplateSpecVolumeDownwardApiItem[];
}

export interface JobV1SpecTemplateSpecVolumeDownwardApiItem {
    /**
     * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
     */
    fieldRef: outputs.JobV1SpecTemplateSpecVolumeDownwardApiItemFieldRef;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
     */
    path: string;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
     */
    resourceFieldRef?: outputs.JobV1SpecTemplateSpecVolumeDownwardApiItemResourceFieldRef;
}

export interface JobV1SpecTemplateSpecVolumeDownwardApiItemFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface JobV1SpecTemplateSpecVolumeDownwardApiItemResourceFieldRef {
    containerName: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface JobV1SpecTemplateSpecVolumeEmptyDir {
    /**
     * What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be one of ["" "Memory" "HugePages" "HugePages-2Mi" "HugePages-1Gi"]. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
     */
    medium?: string;
    /**
     * Total amount of local storage required for this EmptyDir volume.
     */
    sizeLimit?: string;
}

export interface JobV1SpecTemplateSpecVolumeEphemeral {
    /**
     * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC.
     */
    volumeClaimTemplate: outputs.JobV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplate;
}

export interface JobV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplate {
    /**
     * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
     */
    metadata?: outputs.JobV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadata;
    /**
     * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
     */
    spec: outputs.JobV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpec;
}

export interface JobV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadata {
    /**
     * An unstructured key value map stored with the persistent volume claim that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the persistent volume claim. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
}

export interface JobV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpec {
    /**
     * A set of the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
     */
    accessModes: string[];
    /**
     * A list of the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources: outputs.JobV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResources;
    /**
     * A label query over volumes to consider for binding.
     */
    selector?: outputs.JobV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelector;
    /**
     * Name of the storage class requested by the claim
     */
    storageClassName: string;
    /**
     * Defines what type of volume is required by the claim.
     */
    volumeMode: string;
    /**
     * The binding reference to the PersistentVolume backing this claim.
     */
    volumeName: string;
}

export interface JobV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResources {
    /**
     * Map describing the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits?: {[key: string]: string};
    /**
     * Map describing the minimum amount of compute resources required. If this is omitted for a container, it defaults to `limits` if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    requests?: {[key: string]: string};
}

export interface JobV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.JobV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface JobV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface JobV1SpecTemplateSpecVolumeFc {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * FC target lun number
     */
    lun: number;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * FC target worldwide names (WWNs)
     */
    targetWwNs: string[];
}

export interface JobV1SpecTemplateSpecVolumeFlexVolume {
    /**
     * Driver is the name of the driver to use for this volume.
     */
    driver: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
     */
    fsType?: string;
    /**
     * Extra command options if any.
     */
    options?: {[key: string]: string};
    /**
     * Whether to force the ReadOnly setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * Reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
     */
    secretRef?: outputs.JobV1SpecTemplateSpecVolumeFlexVolumeSecretRef;
}

export interface JobV1SpecTemplateSpecVolumeFlexVolumeSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface JobV1SpecTemplateSpecVolumeFlocker {
    /**
     * Name of the dataset stored as metadata > name on the dataset for Flocker should be considered as deprecated
     */
    datasetName?: string;
    /**
     * UUID of the dataset. This is unique identifier of a Flocker dataset
     */
    datasetUuid?: string;
}

export interface JobV1SpecTemplateSpecVolumeGcePersistentDisk {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    fsType?: string;
    /**
     * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    partition?: number;
    /**
     * Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    pdName: string;
    /**
     * Whether to force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    readOnly?: boolean;
}

export interface JobV1SpecTemplateSpecVolumeGitRepo {
    /**
     * Target directory name. Must not contain or start with '..'. If '.' is supplied, the volume directory will be the git repository. Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
     */
    directory?: string;
    /**
     * Repository URL
     */
    repository?: string;
    /**
     * Commit hash for the specified revision.
     */
    revision?: string;
}

export interface JobV1SpecTemplateSpecVolumeGlusterfs {
    /**
     * The endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    endpointsName: string;
    /**
     * The Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    path: string;
    /**
     * Whether to force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    readOnly?: boolean;
}

export interface JobV1SpecTemplateSpecVolumeHostPath {
    /**
     * Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     */
    path?: string;
    /**
     * Type for HostPath volume. Allowed values are "" (default), DirectoryOrCreate, Directory, FileOrCreate, File, Socket, CharDevice and BlockDevice
     */
    type?: string;
}

export interface JobV1SpecTemplateSpecVolumeIscsi {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
     */
    fsType?: string;
    /**
     * Target iSCSI Qualified Name.
     */
    iqn: string;
    /**
     * iSCSI interface name that uses an iSCSI transport. Defaults to 'default' (tcp).
     */
    iscsiInterface?: string;
    /**
     * iSCSI target lun number.
     */
    lun?: number;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false.
     */
    readOnly?: boolean;
    /**
     * iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
     */
    targetPortal: string;
}

export interface JobV1SpecTemplateSpecVolumeLocal {
    /**
     * Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
     */
    path?: string;
}

export interface JobV1SpecTemplateSpecVolumeNfs {
    /**
     * Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    path: string;
    /**
     * Whether to force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    readOnly?: boolean;
    /**
     * Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    server: string;
}

export interface JobV1SpecTemplateSpecVolumePersistentVolumeClaim {
    /**
     * ClaimName is the name of a PersistentVolumeClaim in the same
     */
    claimName?: string;
    /**
     * Will force the ReadOnly setting in VolumeMounts.
     */
    readOnly?: boolean;
}

export interface JobV1SpecTemplateSpecVolumePhotonPersistentDisk {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * ID that identifies Photon Controller persistent disk
     */
    pdId: string;
}

export interface JobV1SpecTemplateSpecVolumeProjected {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * Source of the volume to project in the directory.
     */
    sources: outputs.JobV1SpecTemplateSpecVolumeProjectedSource[];
}

export interface JobV1SpecTemplateSpecVolumeProjectedSource {
    /**
     * ConfigMap represents a configMap that should populate this volume
     */
    configMaps?: outputs.JobV1SpecTemplateSpecVolumeProjectedSourceConfigMap[];
    /**
     * DownwardAPI represents downward API about the pod that should populate this volume
     */
    downwardApi?: outputs.JobV1SpecTemplateSpecVolumeProjectedSourceDownwardApi;
    /**
     * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    secrets?: outputs.JobV1SpecTemplateSpecVolumeProjectedSourceSecret[];
    /**
     * A projected service account token volume
     */
    serviceAccountToken?: outputs.JobV1SpecTemplateSpecVolumeProjectedSourceServiceAccountToken;
}

export interface JobV1SpecTemplateSpecVolumeProjectedSourceConfigMap {
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.JobV1SpecTemplateSpecVolumeProjectedSourceConfigMapItem[];
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Optional: Specify whether the ConfigMap or it's keys must be defined.
     */
    optional?: boolean;
}

export interface JobV1SpecTemplateSpecVolumeProjectedSourceConfigMapItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface JobV1SpecTemplateSpecVolumeProjectedSourceDownwardApi {
    /**
     * Represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
     */
    items?: outputs.JobV1SpecTemplateSpecVolumeProjectedSourceDownwardApiItem[];
}

export interface JobV1SpecTemplateSpecVolumeProjectedSourceDownwardApiItem {
    /**
     * Selects a field of the pod: only annotations, labels, name and namespace are supported.
     */
    fieldRef?: outputs.JobV1SpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRef;
    /**
     * Mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
     */
    path: string;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
     */
    resourceFieldRef?: outputs.JobV1SpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRef;
}

export interface JobV1SpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to 'v1'.
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface JobV1SpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRef {
    containerName: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface JobV1SpecTemplateSpecVolumeProjectedSourceSecret {
    /**
     * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.JobV1SpecTemplateSpecVolumeProjectedSourceSecretItem[];
    /**
     * Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    name?: string;
    /**
     * Optional: Specify whether the Secret or it's keys must be defined.
     */
    optional?: boolean;
}

export interface JobV1SpecTemplateSpecVolumeProjectedSourceSecretItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface JobV1SpecTemplateSpecVolumeProjectedSourceServiceAccountToken {
    /**
     * Audience is the intended audience of the token
     */
    audience?: string;
    /**
     * ExpirationSeconds is the expected duration of validity of the service account token. It defaults to 1 hour and must be at least 10 minutes (600 seconds).
     */
    expirationSeconds?: number;
    /**
     * Path specifies a relative path to the mount point of the projected volume.
     */
    path: string;
}

export interface JobV1SpecTemplateSpecVolumeQuobyte {
    /**
     * Group to map volume access to Default is no group
     */
    group?: string;
    /**
     * Whether to force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
     */
    registry: string;
    /**
     * User to map volume access to Defaults to serivceaccount user
     */
    user?: string;
    /**
     * Volume is a string that references an already created Quobyte volume by name.
     */
    volume: string;
}

export interface JobV1SpecTemplateSpecVolumeRbd {
    /**
     * A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    cephMonitors: string[];
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
     */
    fsType?: string;
    /**
     * Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    keyring: string;
    /**
     * The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    radosUser?: string;
    /**
     * The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    rbdImage: string;
    /**
     * The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it.
     */
    rbdPool?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    readOnly?: boolean;
    /**
     * Name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    secretRef?: outputs.JobV1SpecTemplateSpecVolumeRbdSecretRef;
}

export interface JobV1SpecTemplateSpecVolumeRbdSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface JobV1SpecTemplateSpecVolumeSecret {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.JobV1SpecTemplateSpecVolumeSecretItem[];
    /**
     * Optional: Specify whether the Secret or its keys must be defined.
     */
    optional?: boolean;
    /**
     * Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    secretName?: string;
}

export interface JobV1SpecTemplateSpecVolumeSecretItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface JobV1SpecTemplateSpecVolumeVsphereVolume {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * Path that identifies vSphere volume vmdk
     */
    volumePath: string;
}

export interface JobV1Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LabelsMetadata {
    /**
     * The name of the resource.
     */
    name: string;
    /**
     * The namespace of the resource.
     */
    namespace?: string;
}

export interface LimitRangeMetadata {
    /**
     * An unstructured key value map stored with the limit range that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the limit range. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the limit range, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the limit range must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this limit range that can be used by clients to determine when limit range has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this limit range. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface LimitRangeSpec {
    /**
     * Limits is the list of objects that are enforced.
     */
    limits?: outputs.LimitRangeSpecLimit[];
}

export interface LimitRangeSpecLimit {
    /**
     * Default resource requirement limit value by resource name if resource limit is omitted.
     */
    default?: {[key: string]: string};
    /**
     * The default resource requirement request value by resource name if resource request is omitted.
     */
    defaultRequest: {[key: string]: string};
    /**
     * Max usage constraints on this kind by resource name.
     */
    max?: {[key: string]: string};
    /**
     * The named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.
     */
    maxLimitRequestRatio?: {[key: string]: string};
    /**
     * Min usage constraints on this kind by resource name.
     */
    min?: {[key: string]: string};
    /**
     * Type of resource that this limit applies to.
     */
    type?: string;
}

export interface LimitRangeV1Metadata {
    /**
     * An unstructured key value map stored with the limit range that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the limit range. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the limit range, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the limit range must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this limit range that can be used by clients to determine when limit range has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this limit range. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface LimitRangeV1Spec {
    /**
     * Limits is the list of objects that are enforced.
     */
    limits?: outputs.LimitRangeV1SpecLimit[];
}

export interface LimitRangeV1SpecLimit {
    /**
     * Default resource requirement limit value by resource name if resource limit is omitted.
     */
    default?: {[key: string]: string};
    /**
     * The default resource requirement request value by resource name if resource request is omitted.
     */
    defaultRequest: {[key: string]: string};
    /**
     * Max usage constraints on this kind by resource name.
     */
    max?: {[key: string]: string};
    /**
     * The named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.
     */
    maxLimitRequestRatio?: {[key: string]: string};
    /**
     * Min usage constraints on this kind by resource name.
     */
    min?: {[key: string]: string};
    /**
     * Type of resource that this limit applies to.
     */
    type?: string;
}

export interface ManifestFieldManager {
    /**
     * Force changes against conflicts.
     */
    forceConflicts?: boolean;
    /**
     * The name to use for the field manager when creating and updating the resource.
     */
    name?: string;
}

export interface ManifestTimeouts {
    /**
     * Timeout for the create operation.
     */
    create?: string;
    /**
     * Timeout for the delete operation.
     */
    delete?: string;
    /**
     * Timeout for the update operation.
     */
    update?: string;
}

export interface ManifestWait {
    conditions?: outputs.ManifestWaitCondition[];
    /**
     * A map of paths to fields to wait for a specific field value.
     */
    fields?: {[key: string]: string};
    /**
     * Wait for rollout to complete on resources that support `kubectl rollout status`.
     */
    rollout?: boolean;
}

export interface ManifestWaitCondition {
    /**
     * The condition status.
     */
    status?: string;
    /**
     * The type of condition.
     */
    type?: string;
}

export interface ManifestWaitFor {
    fields: {[key: string]: string};
}

export interface MutatingWebhookConfigurationMetadata {
    /**
     * An unstructured key value map stored with the mutating webhook configuration that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the mutating webhook configuration. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the mutating webhook configuration, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * An opaque value that represents the internal version of this mutating webhook configuration that can be used by clients to determine when mutating webhook configuration has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this mutating webhook configuration. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface MutatingWebhookConfigurationV1Metadata {
    /**
     * An unstructured key value map stored with the mutating webhook configuration that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the mutating webhook configuration. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the mutating webhook configuration, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * An opaque value that represents the internal version of this mutating webhook configuration that can be used by clients to determine when mutating webhook configuration has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this mutating webhook configuration. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface MutatingWebhookConfigurationV1Webhook {
    /**
     * AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy.
     */
    admissionReviewVersions?: string[];
    /**
     * ClientConfig defines how to communicate with the hook. Required
     */
    clientConfig: outputs.MutatingWebhookConfigurationV1WebhookClientConfig;
    /**
     * FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Fail.
     */
    failurePolicy?: string;
    /**
     * matchPolicy defines how the "rules" list is used to match incoming requests. Allowed values are "Exact" or "Equivalent".
     *
     * - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.
     *
     * - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.
     *
     * Defaults to "Equivalent"
     */
    matchPolicy?: string;
    /**
     * The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where "imagepolicy" is the name of the webhook, and kubernetes.io is the name of the organization. Required.
     */
    name: string;
    /**
     * NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook.
     *
     * For example, to run the webhook on any objects whose namespace is not associated with "runlevel" of "0" or "1";  you will set the selector as follows: "namespaceSelector": {
     *   "matchExpressions": [
     *     {
     *       "key": "runlevel",
     *       "operator": "NotIn",
     *       "values": [
     *         "0",
     *         "1"
     *       ]
     *     }
     *   ]
     * }
     *
     * If instead you want to only run the webhook on any objects whose namespace is associated with the "environment" of "prod" or "staging"; you will set the selector as follows: "namespaceSelector": {
     *   "matchExpressions": [
     *     {
     *       "key": "environment",
     *       "operator": "In",
     *       "values": [
     *         "prod",
     *         "staging"
     *       ]
     *     }
     *   ]
     * }
     *
     * See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more examples of label selectors.
     *
     * Default to the empty LabelSelector, which matches everything.
     */
    namespaceSelector?: outputs.MutatingWebhookConfigurationV1WebhookNamespaceSelector;
    /**
     * ObjectSelector decides whether to run the webhook based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.
     */
    objectSelector?: outputs.MutatingWebhookConfigurationV1WebhookObjectSelector;
    /**
     * reinvocationPolicy indicates whether this webhook should be called multiple times as part of a single admission evaluation. Allowed values are "Never" and "IfNeeded".
     *
     * Never: the webhook will not be called more than once in a single admission evaluation.
     *
     * IfNeeded: the webhook will be called at least one additional time as part of the admission evaluation if the object being admitted is modified by other admission plugins after the initial webhook call. Webhooks that specify this option *must* be idempotent, able to process objects they previously admitted. Note: * the number of additional invocations is not guaranteed to be exactly one. * if additional invocations result in further modifications to the object, webhooks are not guaranteed to be invoked again. * webhooks that use this option may be reordered to minimize the number of additional invocations. * to validate an object after all mutations are guaranteed complete, use a validating admission webhook instead.
     *
     * Defaults to "Never".
     */
    reinvocationPolicy?: string;
    /**
     * Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.
     */
    rules?: outputs.MutatingWebhookConfigurationV1WebhookRule[];
    /**
     * SideEffects states whether this webhook has side effects. Acceptable values are: None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or Unknown). Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission chain and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some.
     */
    sideEffects?: string;
    /**
     * TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 10 seconds.
     */
    timeoutSeconds?: number;
}

export interface MutatingWebhookConfigurationV1WebhookClientConfig {
    /**
     * `caBundle` is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.
     */
    caBundle?: string;
    /**
     * `service` is a reference to the service for this webhook. Either `service` or `url` must be specified.
     *
     * If the webhook is running within the cluster, then you should use `service`.
     */
    service?: outputs.MutatingWebhookConfigurationV1WebhookClientConfigService;
    /**
     * `url` gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.
     *
     * The `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.
     *
     * Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.
     *
     * The scheme must be "https"; the URL must begin with "https://".
     *
     * A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.
     *
     * Attempting to use a user or basic auth e.g. "user:password@" is not allowed. Fragments ("#...") and query parameters ("?...") are not allowed, either.
     */
    url?: string;
}

export interface MutatingWebhookConfigurationV1WebhookClientConfigService {
    /**
     * `name` is the name of the service. Required
     */
    name: string;
    /**
     * `namespace` is the namespace of the service. Required
     */
    namespace: string;
    /**
     * `path` is an optional URL path which will be sent in any request to this service.
     */
    path?: string;
    /**
     * If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. `port` should be a valid port number (1-65535, inclusive).
     */
    port?: number;
}

export interface MutatingWebhookConfigurationV1WebhookNamespaceSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.MutatingWebhookConfigurationV1WebhookNamespaceSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface MutatingWebhookConfigurationV1WebhookNamespaceSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface MutatingWebhookConfigurationV1WebhookObjectSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.MutatingWebhookConfigurationV1WebhookObjectSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface MutatingWebhookConfigurationV1WebhookObjectSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface MutatingWebhookConfigurationV1WebhookRule {
    apiGroups: string[];
    apiVersions: string[];
    /**
     * Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.
     */
    operations: string[];
    resources: string[];
    scope?: string;
}

export interface MutatingWebhookConfigurationWebhook {
    /**
     * AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy.
     */
    admissionReviewVersions?: string[];
    /**
     * ClientConfig defines how to communicate with the hook. Required
     */
    clientConfig: outputs.MutatingWebhookConfigurationWebhookClientConfig;
    /**
     * FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Fail.
     */
    failurePolicy?: string;
    /**
     * matchPolicy defines how the "rules" list is used to match incoming requests. Allowed values are "Exact" or "Equivalent".
     *
     * - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.
     *
     * - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.
     *
     * Defaults to "Equivalent"
     */
    matchPolicy?: string;
    /**
     * The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where "imagepolicy" is the name of the webhook, and kubernetes.io is the name of the organization. Required.
     */
    name: string;
    /**
     * NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook.
     *
     * For example, to run the webhook on any objects whose namespace is not associated with "runlevel" of "0" or "1";  you will set the selector as follows: "namespaceSelector": {
     *   "matchExpressions": [
     *     {
     *       "key": "runlevel",
     *       "operator": "NotIn",
     *       "values": [
     *         "0",
     *         "1"
     *       ]
     *     }
     *   ]
     * }
     *
     * If instead you want to only run the webhook on any objects whose namespace is associated with the "environment" of "prod" or "staging"; you will set the selector as follows: "namespaceSelector": {
     *   "matchExpressions": [
     *     {
     *       "key": "environment",
     *       "operator": "In",
     *       "values": [
     *         "prod",
     *         "staging"
     *       ]
     *     }
     *   ]
     * }
     *
     * See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more examples of label selectors.
     *
     * Default to the empty LabelSelector, which matches everything.
     */
    namespaceSelector?: outputs.MutatingWebhookConfigurationWebhookNamespaceSelector;
    /**
     * ObjectSelector decides whether to run the webhook based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.
     */
    objectSelector?: outputs.MutatingWebhookConfigurationWebhookObjectSelector;
    /**
     * reinvocationPolicy indicates whether this webhook should be called multiple times as part of a single admission evaluation. Allowed values are "Never" and "IfNeeded".
     *
     * Never: the webhook will not be called more than once in a single admission evaluation.
     *
     * IfNeeded: the webhook will be called at least one additional time as part of the admission evaluation if the object being admitted is modified by other admission plugins after the initial webhook call. Webhooks that specify this option *must* be idempotent, able to process objects they previously admitted. Note: * the number of additional invocations is not guaranteed to be exactly one. * if additional invocations result in further modifications to the object, webhooks are not guaranteed to be invoked again. * webhooks that use this option may be reordered to minimize the number of additional invocations. * to validate an object after all mutations are guaranteed complete, use a validating admission webhook instead.
     *
     * Defaults to "Never".
     */
    reinvocationPolicy?: string;
    /**
     * Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.
     */
    rules?: outputs.MutatingWebhookConfigurationWebhookRule[];
    /**
     * SideEffects states whether this webhook has side effects. Acceptable values are: None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or Unknown). Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission chain and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some.
     */
    sideEffects?: string;
    /**
     * TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 10 seconds.
     */
    timeoutSeconds?: number;
}

export interface MutatingWebhookConfigurationWebhookClientConfig {
    /**
     * `caBundle` is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.
     */
    caBundle?: string;
    /**
     * `service` is a reference to the service for this webhook. Either `service` or `url` must be specified.
     *
     * If the webhook is running within the cluster, then you should use `service`.
     */
    service?: outputs.MutatingWebhookConfigurationWebhookClientConfigService;
    /**
     * `url` gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.
     *
     * The `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.
     *
     * Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.
     *
     * The scheme must be "https"; the URL must begin with "https://".
     *
     * A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.
     *
     * Attempting to use a user or basic auth e.g. "user:password@" is not allowed. Fragments ("#...") and query parameters ("?...") are not allowed, either.
     */
    url?: string;
}

export interface MutatingWebhookConfigurationWebhookClientConfigService {
    /**
     * `name` is the name of the service. Required
     */
    name: string;
    /**
     * `namespace` is the namespace of the service. Required
     */
    namespace: string;
    /**
     * `path` is an optional URL path which will be sent in any request to this service.
     */
    path?: string;
    /**
     * If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. `port` should be a valid port number (1-65535, inclusive).
     */
    port?: number;
}

export interface MutatingWebhookConfigurationWebhookNamespaceSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.MutatingWebhookConfigurationWebhookNamespaceSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface MutatingWebhookConfigurationWebhookNamespaceSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface MutatingWebhookConfigurationWebhookObjectSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.MutatingWebhookConfigurationWebhookObjectSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface MutatingWebhookConfigurationWebhookObjectSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface MutatingWebhookConfigurationWebhookRule {
    apiGroups: string[];
    apiVersions: string[];
    /**
     * Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.
     */
    operations: string[];
    resources: string[];
    scope?: string;
}

export interface NamespaceMetadata {
    /**
     * An unstructured key value map stored with the namespace that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the namespace. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the namespace, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * An opaque value that represents the internal version of this namespace that can be used by clients to determine when namespace has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this namespace. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface NamespaceTimeouts {
    delete?: string;
}

export interface NamespaceV1Metadata {
    /**
     * An unstructured key value map stored with the namespace that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the namespace. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the namespace, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * An opaque value that represents the internal version of this namespace that can be used by clients to determine when namespace has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this namespace. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface NamespaceV1Timeouts {
    delete?: string;
}

export interface NetworkPolicyMetadata {
    /**
     * An unstructured key value map stored with the network policy that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the network policy. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the network policy, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the network policy must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this network policy that can be used by clients to determine when network policy has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this network policy. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface NetworkPolicySpec {
    /**
     * egress is a list of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8
     */
    egresses?: outputs.NetworkPolicySpecEgress[];
    /**
     * ingress is a list of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)
     */
    ingresses?: outputs.NetworkPolicySpecIngress[];
    /**
     * podSelector selects the pods to which this NetworkPolicy object applies. The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods. In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.
     */
    podSelector: outputs.NetworkPolicySpecPodSelector;
    /**
     * policyTypes is a list of rule types that the NetworkPolicy relates to. Valid options are ["Ingress"], ["Egress"], or ["Ingress", "Egress"]. If this field is not specified, it will default based on the existence of ingress or egress rules; policies that contain an egress section are assumed to affect egress, and all policies (whether or not they contain an ingress section) are assumed to affect ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ "Egress" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include "Egress" (since such a policy would not include an egress section and would otherwise default to just [ "Ingress" ]). This field is beta-level in 1.8
     */
    policyTypes: string[];
}

export interface NetworkPolicySpecEgress {
    /**
     * ports is a list of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
     */
    ports?: outputs.NetworkPolicySpecEgressPort[];
    /**
     * to is a list of destinations for outgoing traffic of pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list.
     */
    tos?: outputs.NetworkPolicySpecEgressTo[];
}

export interface NetworkPolicySpecEgressPort {
    /**
     * endPort indicates that the range of ports from port to endPort if set, inclusive, should be allowed by the policy. This field cannot be defined if the port field is not defined or if the port field is defined as a named (string) port. The endPort must be equal or greater than port.
     */
    endPort?: number;
    /**
     * port represents the port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers. If present, only traffic on the specified protocol AND port will be matched.
     */
    port?: string;
    /**
     * protocol represents the protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.
     */
    protocol?: string;
}

export interface NetworkPolicySpecEgressTo {
    /**
     * ipBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be.
     */
    ipBlock?: outputs.NetworkPolicySpecEgressToIpBlock;
    /**
     * namespaceSelector selects namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.
     *
     * If podSelector is also set, then the NetworkPolicyPeer as a whole selects the pods matching podSelector in the namespaces selected by namespaceSelector. Otherwise it selects all pods in the namespaces selected by namespaceSelector.
     */
    namespaceSelector?: outputs.NetworkPolicySpecEgressToNamespaceSelector;
    /**
     * podSelector is a label selector which selects pods. This field follows standard label selector semantics; if present but empty, it selects all pods.
     *
     * If namespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the pods matching podSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the pods matching podSelector in the policy's own namespace.
     */
    podSelector?: outputs.NetworkPolicySpecEgressToPodSelector;
}

export interface NetworkPolicySpecEgressToIpBlock {
    /**
     * cidr is a string representing the IPBlock Valid examples are "192.168.1.0/24" or "2001:db8::/64"
     */
    cidr?: string;
    /**
     * except is a slice of CIDRs that should not be included within an IPBlock Valid examples are "192.168.1.0/24" or "2001:db8::/64" Except values will be rejected if they are outside the cidr range
     */
    excepts?: string[];
}

export interface NetworkPolicySpecEgressToNamespaceSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.NetworkPolicySpecEgressToNamespaceSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface NetworkPolicySpecEgressToNamespaceSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface NetworkPolicySpecEgressToPodSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.NetworkPolicySpecEgressToPodSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface NetworkPolicySpecEgressToPodSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface NetworkPolicySpecIngress {
    /**
     * from is a list of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the from list.
     */
    froms?: outputs.NetworkPolicySpecIngressFrom[];
    /**
     * ports is a list of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
     */
    ports?: outputs.NetworkPolicySpecIngressPort[];
}

export interface NetworkPolicySpecIngressFrom {
    /**
     * ipBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be.
     */
    ipBlock?: outputs.NetworkPolicySpecIngressFromIpBlock;
    /**
     * namespaceSelector selects namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.
     *
     * If podSelector is also set, then the NetworkPolicyPeer as a whole selects the pods matching podSelector in the namespaces selected by namespaceSelector. Otherwise it selects all pods in the namespaces selected by namespaceSelector.
     */
    namespaceSelector?: outputs.NetworkPolicySpecIngressFromNamespaceSelector;
    /**
     * podSelector is a label selector which selects pods. This field follows standard label selector semantics; if present but empty, it selects all pods.
     *
     * If namespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the pods matching podSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the pods matching podSelector in the policy's own namespace.
     */
    podSelector?: outputs.NetworkPolicySpecIngressFromPodSelector;
}

export interface NetworkPolicySpecIngressFromIpBlock {
    /**
     * cidr is a string representing the IPBlock Valid examples are "192.168.1.0/24" or "2001:db8::/64"
     */
    cidr?: string;
    /**
     * except is a slice of CIDRs that should not be included within an IPBlock Valid examples are "192.168.1.0/24" or "2001:db8::/64" Except values will be rejected if they are outside the cidr range
     */
    excepts?: string[];
}

export interface NetworkPolicySpecIngressFromNamespaceSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.NetworkPolicySpecIngressFromNamespaceSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface NetworkPolicySpecIngressFromNamespaceSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface NetworkPolicySpecIngressFromPodSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.NetworkPolicySpecIngressFromPodSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface NetworkPolicySpecIngressFromPodSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface NetworkPolicySpecIngressPort {
    /**
     * endPort indicates that the range of ports from port to endPort if set, inclusive, should be allowed by the policy. This field cannot be defined if the port field is not defined or if the port field is defined as a named (string) port. The endPort must be equal or greater than port.
     */
    endPort?: number;
    /**
     * port represents the port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers. If present, only traffic on the specified protocol AND port will be matched.
     */
    port?: string;
    /**
     * protocol represents the protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.
     */
    protocol?: string;
}

export interface NetworkPolicySpecPodSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.NetworkPolicySpecPodSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface NetworkPolicySpecPodSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface NetworkPolicyV1Metadata {
    /**
     * An unstructured key value map stored with the network policy that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the network policy. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the network policy, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the network policy must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this network policy that can be used by clients to determine when network policy has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this network policy. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface NetworkPolicyV1Spec {
    /**
     * egress is a list of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8
     */
    egresses?: outputs.NetworkPolicyV1SpecEgress[];
    /**
     * ingress is a list of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)
     */
    ingresses?: outputs.NetworkPolicyV1SpecIngress[];
    /**
     * podSelector selects the pods to which this NetworkPolicy object applies. The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods. In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.
     */
    podSelector: outputs.NetworkPolicyV1SpecPodSelector;
    /**
     * policyTypes is a list of rule types that the NetworkPolicy relates to. Valid options are ["Ingress"], ["Egress"], or ["Ingress", "Egress"]. If this field is not specified, it will default based on the existence of ingress or egress rules; policies that contain an egress section are assumed to affect egress, and all policies (whether or not they contain an ingress section) are assumed to affect ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ "Egress" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include "Egress" (since such a policy would not include an egress section and would otherwise default to just [ "Ingress" ]). This field is beta-level in 1.8
     */
    policyTypes: string[];
}

export interface NetworkPolicyV1SpecEgress {
    /**
     * ports is a list of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
     */
    ports?: outputs.NetworkPolicyV1SpecEgressPort[];
    /**
     * to is a list of destinations for outgoing traffic of pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list.
     */
    tos?: outputs.NetworkPolicyV1SpecEgressTo[];
}

export interface NetworkPolicyV1SpecEgressPort {
    /**
     * endPort indicates that the range of ports from port to endPort if set, inclusive, should be allowed by the policy. This field cannot be defined if the port field is not defined or if the port field is defined as a named (string) port. The endPort must be equal or greater than port.
     */
    endPort?: number;
    /**
     * port represents the port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers. If present, only traffic on the specified protocol AND port will be matched.
     */
    port?: string;
    /**
     * protocol represents the protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.
     */
    protocol?: string;
}

export interface NetworkPolicyV1SpecEgressTo {
    /**
     * ipBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be.
     */
    ipBlock?: outputs.NetworkPolicyV1SpecEgressToIpBlock;
    /**
     * namespaceSelector selects namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.
     *
     * If podSelector is also set, then the NetworkPolicyPeer as a whole selects the pods matching podSelector in the namespaces selected by namespaceSelector. Otherwise it selects all pods in the namespaces selected by namespaceSelector.
     */
    namespaceSelector?: outputs.NetworkPolicyV1SpecEgressToNamespaceSelector;
    /**
     * podSelector is a label selector which selects pods. This field follows standard label selector semantics; if present but empty, it selects all pods.
     *
     * If namespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the pods matching podSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the pods matching podSelector in the policy's own namespace.
     */
    podSelector?: outputs.NetworkPolicyV1SpecEgressToPodSelector;
}

export interface NetworkPolicyV1SpecEgressToIpBlock {
    /**
     * cidr is a string representing the IPBlock Valid examples are "192.168.1.0/24" or "2001:db8::/64"
     */
    cidr?: string;
    /**
     * except is a slice of CIDRs that should not be included within an IPBlock Valid examples are "192.168.1.0/24" or "2001:db8::/64" Except values will be rejected if they are outside the cidr range
     */
    excepts?: string[];
}

export interface NetworkPolicyV1SpecEgressToNamespaceSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.NetworkPolicyV1SpecEgressToNamespaceSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface NetworkPolicyV1SpecEgressToNamespaceSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface NetworkPolicyV1SpecEgressToPodSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.NetworkPolicyV1SpecEgressToPodSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface NetworkPolicyV1SpecEgressToPodSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface NetworkPolicyV1SpecIngress {
    /**
     * from is a list of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the from list.
     */
    froms?: outputs.NetworkPolicyV1SpecIngressFrom[];
    /**
     * ports is a list of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
     */
    ports?: outputs.NetworkPolicyV1SpecIngressPort[];
}

export interface NetworkPolicyV1SpecIngressFrom {
    /**
     * ipBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be.
     */
    ipBlock?: outputs.NetworkPolicyV1SpecIngressFromIpBlock;
    /**
     * namespaceSelector selects namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.
     *
     * If podSelector is also set, then the NetworkPolicyPeer as a whole selects the pods matching podSelector in the namespaces selected by namespaceSelector. Otherwise it selects all pods in the namespaces selected by namespaceSelector.
     */
    namespaceSelector?: outputs.NetworkPolicyV1SpecIngressFromNamespaceSelector;
    /**
     * podSelector is a label selector which selects pods. This field follows standard label selector semantics; if present but empty, it selects all pods.
     *
     * If namespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the pods matching podSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the pods matching podSelector in the policy's own namespace.
     */
    podSelector?: outputs.NetworkPolicyV1SpecIngressFromPodSelector;
}

export interface NetworkPolicyV1SpecIngressFromIpBlock {
    /**
     * cidr is a string representing the IPBlock Valid examples are "192.168.1.0/24" or "2001:db8::/64"
     */
    cidr?: string;
    /**
     * except is a slice of CIDRs that should not be included within an IPBlock Valid examples are "192.168.1.0/24" or "2001:db8::/64" Except values will be rejected if they are outside the cidr range
     */
    excepts?: string[];
}

export interface NetworkPolicyV1SpecIngressFromNamespaceSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.NetworkPolicyV1SpecIngressFromNamespaceSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface NetworkPolicyV1SpecIngressFromNamespaceSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface NetworkPolicyV1SpecIngressFromPodSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.NetworkPolicyV1SpecIngressFromPodSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface NetworkPolicyV1SpecIngressFromPodSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface NetworkPolicyV1SpecIngressPort {
    /**
     * endPort indicates that the range of ports from port to endPort if set, inclusive, should be allowed by the policy. This field cannot be defined if the port field is not defined or if the port field is defined as a named (string) port. The endPort must be equal or greater than port.
     */
    endPort?: number;
    /**
     * port represents the port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers. If present, only traffic on the specified protocol AND port will be matched.
     */
    port?: string;
    /**
     * protocol represents the protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.
     */
    protocol?: string;
}

export interface NetworkPolicyV1SpecPodSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.NetworkPolicyV1SpecPodSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface NetworkPolicyV1SpecPodSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface NodeTaintMetadata {
    /**
     * The name of the node
     */
    name: string;
}

export interface NodeTaintTaint {
    /**
     * The taint effect
     */
    effect: string;
    /**
     * The taint key
     */
    key: string;
    /**
     * The taint value
     */
    value: string;
}

export interface PersistentVolumeClaimMetadata {
    /**
     * An unstructured key value map stored with the persistent volume claim that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the persistent volume claim. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the persistent volume claim, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the persistent volume claim must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this persistent volume claim that can be used by clients to determine when persistent volume claim has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this persistent volume claim. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface PersistentVolumeClaimSpec {
    /**
     * A set of the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
     */
    accessModes: string[];
    /**
     * A list of the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources: outputs.PersistentVolumeClaimSpecResources;
    /**
     * A label query over volumes to consider for binding.
     */
    selector?: outputs.PersistentVolumeClaimSpecSelector;
    /**
     * Name of the storage class requested by the claim
     */
    storageClassName: string;
    /**
     * Defines what type of volume is required by the claim.
     */
    volumeMode: string;
    /**
     * The binding reference to the PersistentVolume backing this claim.
     */
    volumeName: string;
}

export interface PersistentVolumeClaimSpecResources {
    /**
     * Map describing the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits?: {[key: string]: string};
    /**
     * Map describing the minimum amount of compute resources required. If this is omitted for a container, it defaults to `limits` if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    requests?: {[key: string]: string};
}

export interface PersistentVolumeClaimSpecSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.PersistentVolumeClaimSpecSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface PersistentVolumeClaimSpecSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface PersistentVolumeClaimTimeouts {
    create?: string;
}

export interface PersistentVolumeClaimV1Metadata {
    /**
     * An unstructured key value map stored with the persistent volume claim that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the persistent volume claim. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the persistent volume claim, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the persistent volume claim must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this persistent volume claim that can be used by clients to determine when persistent volume claim has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this persistent volume claim. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface PersistentVolumeClaimV1Spec {
    /**
     * A set of the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
     */
    accessModes: string[];
    /**
     * A list of the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources: outputs.PersistentVolumeClaimV1SpecResources;
    /**
     * A label query over volumes to consider for binding.
     */
    selector?: outputs.PersistentVolumeClaimV1SpecSelector;
    /**
     * Name of the storage class requested by the claim
     */
    storageClassName: string;
    /**
     * Defines what type of volume is required by the claim.
     */
    volumeMode: string;
    /**
     * The binding reference to the PersistentVolume backing this claim.
     */
    volumeName: string;
}

export interface PersistentVolumeClaimV1SpecResources {
    /**
     * Map describing the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits?: {[key: string]: string};
    /**
     * Map describing the minimum amount of compute resources required. If this is omitted for a container, it defaults to `limits` if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    requests?: {[key: string]: string};
}

export interface PersistentVolumeClaimV1SpecSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.PersistentVolumeClaimV1SpecSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface PersistentVolumeClaimV1SpecSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface PersistentVolumeClaimV1Timeouts {
    create?: string;
}

export interface PersistentVolumeMetadata {
    /**
     * An unstructured key value map stored with the persistent volume that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the persistent volume. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the persistent volume, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * An opaque value that represents the internal version of this persistent volume that can be used by clients to determine when persistent volume has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this persistent volume. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface PersistentVolumeSpec {
    /**
     * Contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
     */
    accessModes: string[];
    /**
     * A description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
     */
    capacity: {[key: string]: string};
    /**
     * A reference to the persistent volume claim details for statically managed PVs. More Info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#binding
     */
    claimRef?: outputs.PersistentVolumeSpecClaimRef;
    /**
     * A list of mount options, e.g. ["ro", "soft"]. Not validated - mount will simply fail if one is invalid.
     */
    mountOptions?: string[];
    /**
     * A description of the persistent volume's node affinity. More info: https://kubernetes.io/docs/concepts/storage/volumes/#local
     */
    nodeAffinity?: outputs.PersistentVolumeSpecNodeAffinity;
    /**
     * What happens to a persistent volume when released from its claim. Valid options are Retain (default) and Recycle. Recycling must be supported by the volume plugin underlying this persistent volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming
     */
    persistentVolumeReclaimPolicy?: string;
    /**
     * The specification of a persistent volume.
     */
    persistentVolumeSource: outputs.PersistentVolumeSpecPersistentVolumeSource;
    /**
     * A description of the persistent volume's class. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#class
     */
    storageClassName?: string;
    /**
     * Defines if a volume is intended to be used with a formatted filesystem. or to remain in raw block state.
     */
    volumeMode?: string;
}

export interface PersistentVolumeSpecClaimRef {
    /**
     * The name of the PersistentVolumeClaim
     */
    name: string;
    /**
     * The namespace of the PersistentVolumeClaim. Uses 'default' namespace if none is specified.
     */
    namespace?: string;
}

export interface PersistentVolumeSpecNodeAffinity {
    required?: outputs.PersistentVolumeSpecNodeAffinityRequired;
}

export interface PersistentVolumeSpecNodeAffinityRequired {
    nodeSelectorTerms: outputs.PersistentVolumeSpecNodeAffinityRequiredNodeSelectorTerm[];
}

export interface PersistentVolumeSpecNodeAffinityRequiredNodeSelectorTerm {
    /**
     * A list of node selector requirements by node's labels. The requirements are ANDed.
     */
    matchExpressions?: outputs.PersistentVolumeSpecNodeAffinityRequiredNodeSelectorTermMatchExpression[];
    /**
     * A list of node selector requirements by node's fields. The requirements are ANDed.
     */
    matchFields?: outputs.PersistentVolumeSpecNodeAffinityRequiredNodeSelectorTermMatchField[];
}

export interface PersistentVolumeSpecNodeAffinityRequiredNodeSelectorTermMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists`, `DoesNotExist`, `Gt`, and `Lt`.
     */
    operator: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface PersistentVolumeSpecNodeAffinityRequiredNodeSelectorTermMatchField {
    /**
     * The label key that the selector applies to.
     */
    key: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists`, `DoesNotExist`, `Gt`, and `Lt`.
     */
    operator: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface PersistentVolumeSpecPersistentVolumeSource {
    /**
     * Represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    awsElasticBlockStore?: outputs.PersistentVolumeSpecPersistentVolumeSourceAwsElasticBlockStore;
    /**
     * Represents an Azure Data Disk mount on the host and bind mount to the pod.
     */
    azureDisk?: outputs.PersistentVolumeSpecPersistentVolumeSourceAzureDisk;
    /**
     * Represents an Azure File Service mount on the host and bind mount to the pod.
     */
    azureFile?: outputs.PersistentVolumeSpecPersistentVolumeSourceAzureFile;
    /**
     * Represents a Ceph FS mount on the host that shares a pod's lifetime
     */
    cephFs?: outputs.PersistentVolumeSpecPersistentVolumeSourceCephFs;
    /**
     * Represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    cinder?: outputs.PersistentVolumeSpecPersistentVolumeSourceCinder;
    /**
     * Represents a CSI Volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
     */
    csi?: outputs.PersistentVolumeSpecPersistentVolumeSourceCsi;
    /**
     * Represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
     */
    fc?: outputs.PersistentVolumeSpecPersistentVolumeSourceFc;
    /**
     * Represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.
     */
    flexVolume?: outputs.PersistentVolumeSpecPersistentVolumeSourceFlexVolume;
    /**
     * Represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
     */
    flocker?: outputs.PersistentVolumeSpecPersistentVolumeSourceFlocker;
    /**
     * Represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    gcePersistentDisk?: outputs.PersistentVolumeSpecPersistentVolumeSourceGcePersistentDisk;
    /**
     * Represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
     */
    glusterfs?: outputs.PersistentVolumeSpecPersistentVolumeSourceGlusterfs;
    /**
     * Represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     */
    hostPath?: outputs.PersistentVolumeSpecPersistentVolumeSourceHostPath;
    /**
     * Represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
     */
    iscsi?: outputs.PersistentVolumeSpecPersistentVolumeSourceIscsi;
    /**
     * Represents a mounted local storage device such as a disk, partition or directory. Local volumes can only be used as a statically created PersistentVolume. Dynamic provisioning is not supported yet. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
     */
    local?: outputs.PersistentVolumeSpecPersistentVolumeSourceLocal;
    /**
     * Represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    nfs?: outputs.PersistentVolumeSpecPersistentVolumeSourceNfs;
    /**
     * Represents a PhotonController persistent disk attached and mounted on kubelets host machine
     */
    photonPersistentDisk?: outputs.PersistentVolumeSpecPersistentVolumeSourcePhotonPersistentDisk;
    /**
     * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
     */
    quobyte?: outputs.PersistentVolumeSpecPersistentVolumeSourceQuobyte;
    /**
     * Represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
     */
    rbd?: outputs.PersistentVolumeSpecPersistentVolumeSourceRbd;
    /**
     * Represents a vSphere volume attached and mounted on kubelets host machine
     */
    vsphereVolume?: outputs.PersistentVolumeSpecPersistentVolumeSourceVsphereVolume;
}

export interface PersistentVolumeSpecPersistentVolumeSourceAwsElasticBlockStore {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    fsType?: string;
    /**
     * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
     */
    partition?: number;
    /**
     * Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    readOnly?: boolean;
    /**
     * Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    volumeId: string;
}

export interface PersistentVolumeSpecPersistentVolumeSourceAzureDisk {
    /**
     * Host Caching mode: None, Read Only, Read Write.
     */
    cachingMode: string;
    /**
     * The URI the data disk in the blob storage
     */
    dataDiskUri: string;
    /**
     * The Name of the data disk in the blob storage
     */
    diskName: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * The type for the data disk. Expected values: Shared, Dedicated, Managed. Defaults to Shared
     */
    kind: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
}

export interface PersistentVolumeSpecPersistentVolumeSourceAzureFile {
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * The name of secret that contains Azure Storage Account Name and Key
     */
    secretName: string;
    /**
     * The namespace of the secret that contains Azure Storage Account Name and Key. For Kubernetes up to 1.18.x the default is the same as the Pod. For Kubernetes 1.19.x and later the default is "default" namespace.
     */
    secretNamespace?: string;
    /**
     * Share Name
     */
    shareName: string;
}

export interface PersistentVolumeSpecPersistentVolumeSourceCephFs {
    /**
     * Monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    monitors: string[];
    /**
     * Used as the mounted root, rather than the full Ceph tree, default is /
     */
    path?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to `false` (read/write). More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    readOnly?: boolean;
    /**
     * The path to key ring for User, default is `/etc/ceph/user.secret`. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    secretFile?: string;
    /**
     * Reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    secretRef?: outputs.PersistentVolumeSpecPersistentVolumeSourceCephFsSecretRef;
    /**
     * User is the rados user name, default is admin. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    user?: string;
}

export interface PersistentVolumeSpecPersistentVolumeSourceCephFsSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface PersistentVolumeSpecPersistentVolumeSourceCinder {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    fsType?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write). More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    readOnly?: boolean;
    /**
     * Volume ID used to identify the volume in Cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    volumeId: string;
}

export interface PersistentVolumeSpecPersistentVolumeSourceCsi {
    /**
     * A reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerExpandVolume call.
     */
    controllerExpandSecretRef?: outputs.PersistentVolumeSpecPersistentVolumeSourceCsiControllerExpandSecretRef;
    /**
     * A reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls.
     */
    controllerPublishSecretRef?: outputs.PersistentVolumeSpecPersistentVolumeSourceCsiControllerPublishSecretRef;
    /**
     * the name of the volume driver to use. More info: https://kubernetes.io/docs/concepts/storage/volumes/#csi
     */
    driver: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * A reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls.
     */
    nodePublishSecretRef?: outputs.PersistentVolumeSpecPersistentVolumeSourceCsiNodePublishSecretRef;
    /**
     * A reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls.
     */
    nodeStageSecretRef?: outputs.PersistentVolumeSpecPersistentVolumeSourceCsiNodeStageSecretRef;
    /**
     * Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
     */
    readOnly?: boolean;
    /**
     * Attributes of the volume to publish.
     */
    volumeAttributes?: {[key: string]: string};
    /**
     * A string value that uniquely identifies the volume. More info: https://kubernetes.io/docs/concepts/storage/volumes/#csi
     */
    volumeHandle: string;
}

export interface PersistentVolumeSpecPersistentVolumeSourceCsiControllerExpandSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface PersistentVolumeSpecPersistentVolumeSourceCsiControllerPublishSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface PersistentVolumeSpecPersistentVolumeSourceCsiNodePublishSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface PersistentVolumeSpecPersistentVolumeSourceCsiNodeStageSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface PersistentVolumeSpecPersistentVolumeSourceFc {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * FC target lun number
     */
    lun: number;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * FC target worldwide names (WWNs)
     */
    targetWwNs: string[];
}

export interface PersistentVolumeSpecPersistentVolumeSourceFlexVolume {
    /**
     * Driver is the name of the driver to use for this volume.
     */
    driver: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
     */
    fsType?: string;
    /**
     * Extra command options if any.
     */
    options?: {[key: string]: string};
    /**
     * Whether to force the ReadOnly setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * Reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
     */
    secretRef?: outputs.PersistentVolumeSpecPersistentVolumeSourceFlexVolumeSecretRef;
}

export interface PersistentVolumeSpecPersistentVolumeSourceFlexVolumeSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface PersistentVolumeSpecPersistentVolumeSourceFlocker {
    /**
     * Name of the dataset stored as metadata > name on the dataset for Flocker should be considered as deprecated
     */
    datasetName?: string;
    /**
     * UUID of the dataset. This is unique identifier of a Flocker dataset
     */
    datasetUuid?: string;
}

export interface PersistentVolumeSpecPersistentVolumeSourceGcePersistentDisk {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    fsType?: string;
    /**
     * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    partition?: number;
    /**
     * Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    pdName: string;
    /**
     * Whether to force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    readOnly?: boolean;
}

export interface PersistentVolumeSpecPersistentVolumeSourceGlusterfs {
    /**
     * The endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    endpointsName: string;
    /**
     * The Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    path: string;
    /**
     * Whether to force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    readOnly?: boolean;
}

export interface PersistentVolumeSpecPersistentVolumeSourceHostPath {
    /**
     * Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     */
    path?: string;
    /**
     * Type for HostPath volume. Allowed values are "" (default), DirectoryOrCreate, Directory, FileOrCreate, File, Socket, CharDevice and BlockDevice
     */
    type?: string;
}

export interface PersistentVolumeSpecPersistentVolumeSourceIscsi {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
     */
    fsType?: string;
    /**
     * Target iSCSI Qualified Name.
     */
    iqn: string;
    /**
     * iSCSI interface name that uses an iSCSI transport. Defaults to 'default' (tcp).
     */
    iscsiInterface?: string;
    /**
     * iSCSI target lun number.
     */
    lun?: number;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false.
     */
    readOnly?: boolean;
    /**
     * iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
     */
    targetPortal: string;
}

export interface PersistentVolumeSpecPersistentVolumeSourceLocal {
    /**
     * Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
     */
    path?: string;
}

export interface PersistentVolumeSpecPersistentVolumeSourceNfs {
    /**
     * Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    path: string;
    /**
     * Whether to force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    readOnly?: boolean;
    /**
     * Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    server: string;
}

export interface PersistentVolumeSpecPersistentVolumeSourcePhotonPersistentDisk {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * ID that identifies Photon Controller persistent disk
     */
    pdId: string;
}

export interface PersistentVolumeSpecPersistentVolumeSourceQuobyte {
    /**
     * Group to map volume access to Default is no group
     */
    group?: string;
    /**
     * Whether to force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
     */
    registry: string;
    /**
     * User to map volume access to Defaults to serivceaccount user
     */
    user?: string;
    /**
     * Volume is a string that references an already created Quobyte volume by name.
     */
    volume: string;
}

export interface PersistentVolumeSpecPersistentVolumeSourceRbd {
    /**
     * A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    cephMonitors: string[];
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
     */
    fsType?: string;
    /**
     * Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    keyring: string;
    /**
     * The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    radosUser?: string;
    /**
     * The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    rbdImage: string;
    /**
     * The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it.
     */
    rbdPool?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    readOnly?: boolean;
    /**
     * Name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    secretRef?: outputs.PersistentVolumeSpecPersistentVolumeSourceRbdSecretRef;
}

export interface PersistentVolumeSpecPersistentVolumeSourceRbdSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface PersistentVolumeSpecPersistentVolumeSourceVsphereVolume {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * Path that identifies vSphere volume vmdk
     */
    volumePath: string;
}

export interface PersistentVolumeTimeouts {
    create?: string;
}

export interface PersistentVolumeV1Metadata {
    /**
     * An unstructured key value map stored with the persistent volume that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the persistent volume. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the persistent volume, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * An opaque value that represents the internal version of this persistent volume that can be used by clients to determine when persistent volume has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this persistent volume. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface PersistentVolumeV1Spec {
    /**
     * Contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
     */
    accessModes: string[];
    /**
     * A description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
     */
    capacity: {[key: string]: string};
    /**
     * A reference to the persistent volume claim details for statically managed PVs. More Info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#binding
     */
    claimRef?: outputs.PersistentVolumeV1SpecClaimRef;
    /**
     * A list of mount options, e.g. ["ro", "soft"]. Not validated - mount will simply fail if one is invalid.
     */
    mountOptions?: string[];
    /**
     * A description of the persistent volume's node affinity. More info: https://kubernetes.io/docs/concepts/storage/volumes/#local
     */
    nodeAffinity?: outputs.PersistentVolumeV1SpecNodeAffinity;
    /**
     * What happens to a persistent volume when released from its claim. Valid options are Retain (default) and Recycle. Recycling must be supported by the volume plugin underlying this persistent volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming
     */
    persistentVolumeReclaimPolicy?: string;
    /**
     * The specification of a persistent volume.
     */
    persistentVolumeSource: outputs.PersistentVolumeV1SpecPersistentVolumeSource;
    /**
     * A description of the persistent volume's class. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#class
     */
    storageClassName?: string;
    /**
     * Defines if a volume is intended to be used with a formatted filesystem. or to remain in raw block state.
     */
    volumeMode?: string;
}

export interface PersistentVolumeV1SpecClaimRef {
    /**
     * The name of the PersistentVolumeClaim
     */
    name: string;
    /**
     * The namespace of the PersistentVolumeClaim. Uses 'default' namespace if none is specified.
     */
    namespace?: string;
}

export interface PersistentVolumeV1SpecNodeAffinity {
    required?: outputs.PersistentVolumeV1SpecNodeAffinityRequired;
}

export interface PersistentVolumeV1SpecNodeAffinityRequired {
    nodeSelectorTerms: outputs.PersistentVolumeV1SpecNodeAffinityRequiredNodeSelectorTerm[];
}

export interface PersistentVolumeV1SpecNodeAffinityRequiredNodeSelectorTerm {
    /**
     * A list of node selector requirements by node's labels. The requirements are ANDed.
     */
    matchExpressions?: outputs.PersistentVolumeV1SpecNodeAffinityRequiredNodeSelectorTermMatchExpression[];
    /**
     * A list of node selector requirements by node's fields. The requirements are ANDed.
     */
    matchFields?: outputs.PersistentVolumeV1SpecNodeAffinityRequiredNodeSelectorTermMatchField[];
}

export interface PersistentVolumeV1SpecNodeAffinityRequiredNodeSelectorTermMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists`, `DoesNotExist`, `Gt`, and `Lt`.
     */
    operator: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface PersistentVolumeV1SpecNodeAffinityRequiredNodeSelectorTermMatchField {
    /**
     * The label key that the selector applies to.
     */
    key: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists`, `DoesNotExist`, `Gt`, and `Lt`.
     */
    operator: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface PersistentVolumeV1SpecPersistentVolumeSource {
    /**
     * Represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    awsElasticBlockStore?: outputs.PersistentVolumeV1SpecPersistentVolumeSourceAwsElasticBlockStore;
    /**
     * Represents an Azure Data Disk mount on the host and bind mount to the pod.
     */
    azureDisk?: outputs.PersistentVolumeV1SpecPersistentVolumeSourceAzureDisk;
    /**
     * Represents an Azure File Service mount on the host and bind mount to the pod.
     */
    azureFile?: outputs.PersistentVolumeV1SpecPersistentVolumeSourceAzureFile;
    /**
     * Represents a Ceph FS mount on the host that shares a pod's lifetime
     */
    cephFs?: outputs.PersistentVolumeV1SpecPersistentVolumeSourceCephFs;
    /**
     * Represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    cinder?: outputs.PersistentVolumeV1SpecPersistentVolumeSourceCinder;
    /**
     * Represents a CSI Volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
     */
    csi?: outputs.PersistentVolumeV1SpecPersistentVolumeSourceCsi;
    /**
     * Represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
     */
    fc?: outputs.PersistentVolumeV1SpecPersistentVolumeSourceFc;
    /**
     * Represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.
     */
    flexVolume?: outputs.PersistentVolumeV1SpecPersistentVolumeSourceFlexVolume;
    /**
     * Represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
     */
    flocker?: outputs.PersistentVolumeV1SpecPersistentVolumeSourceFlocker;
    /**
     * Represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    gcePersistentDisk?: outputs.PersistentVolumeV1SpecPersistentVolumeSourceGcePersistentDisk;
    /**
     * Represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
     */
    glusterfs?: outputs.PersistentVolumeV1SpecPersistentVolumeSourceGlusterfs;
    /**
     * Represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     */
    hostPath?: outputs.PersistentVolumeV1SpecPersistentVolumeSourceHostPath;
    /**
     * Represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
     */
    iscsi?: outputs.PersistentVolumeV1SpecPersistentVolumeSourceIscsi;
    /**
     * Represents a mounted local storage device such as a disk, partition or directory. Local volumes can only be used as a statically created PersistentVolume. Dynamic provisioning is not supported yet. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
     */
    local?: outputs.PersistentVolumeV1SpecPersistentVolumeSourceLocal;
    /**
     * Represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    nfs?: outputs.PersistentVolumeV1SpecPersistentVolumeSourceNfs;
    /**
     * Represents a PhotonController persistent disk attached and mounted on kubelets host machine
     */
    photonPersistentDisk?: outputs.PersistentVolumeV1SpecPersistentVolumeSourcePhotonPersistentDisk;
    /**
     * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
     */
    quobyte?: outputs.PersistentVolumeV1SpecPersistentVolumeSourceQuobyte;
    /**
     * Represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
     */
    rbd?: outputs.PersistentVolumeV1SpecPersistentVolumeSourceRbd;
    /**
     * Represents a vSphere volume attached and mounted on kubelets host machine
     */
    vsphereVolume?: outputs.PersistentVolumeV1SpecPersistentVolumeSourceVsphereVolume;
}

export interface PersistentVolumeV1SpecPersistentVolumeSourceAwsElasticBlockStore {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    fsType?: string;
    /**
     * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
     */
    partition?: number;
    /**
     * Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    readOnly?: boolean;
    /**
     * Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    volumeId: string;
}

export interface PersistentVolumeV1SpecPersistentVolumeSourceAzureDisk {
    /**
     * Host Caching mode: None, Read Only, Read Write.
     */
    cachingMode: string;
    /**
     * The URI the data disk in the blob storage
     */
    dataDiskUri: string;
    /**
     * The Name of the data disk in the blob storage
     */
    diskName: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * The type for the data disk. Expected values: Shared, Dedicated, Managed. Defaults to Shared
     */
    kind: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
}

export interface PersistentVolumeV1SpecPersistentVolumeSourceAzureFile {
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * The name of secret that contains Azure Storage Account Name and Key
     */
    secretName: string;
    /**
     * The namespace of the secret that contains Azure Storage Account Name and Key. For Kubernetes up to 1.18.x the default is the same as the Pod. For Kubernetes 1.19.x and later the default is "default" namespace.
     */
    secretNamespace?: string;
    /**
     * Share Name
     */
    shareName: string;
}

export interface PersistentVolumeV1SpecPersistentVolumeSourceCephFs {
    /**
     * Monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    monitors: string[];
    /**
     * Used as the mounted root, rather than the full Ceph tree, default is /
     */
    path?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to `false` (read/write). More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    readOnly?: boolean;
    /**
     * The path to key ring for User, default is `/etc/ceph/user.secret`. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    secretFile?: string;
    /**
     * Reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    secretRef?: outputs.PersistentVolumeV1SpecPersistentVolumeSourceCephFsSecretRef;
    /**
     * User is the rados user name, default is admin. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    user?: string;
}

export interface PersistentVolumeV1SpecPersistentVolumeSourceCephFsSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface PersistentVolumeV1SpecPersistentVolumeSourceCinder {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    fsType?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write). More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    readOnly?: boolean;
    /**
     * Volume ID used to identify the volume in Cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    volumeId: string;
}

export interface PersistentVolumeV1SpecPersistentVolumeSourceCsi {
    /**
     * A reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerExpandVolume call.
     */
    controllerExpandSecretRef?: outputs.PersistentVolumeV1SpecPersistentVolumeSourceCsiControllerExpandSecretRef;
    /**
     * A reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls.
     */
    controllerPublishSecretRef?: outputs.PersistentVolumeV1SpecPersistentVolumeSourceCsiControllerPublishSecretRef;
    /**
     * the name of the volume driver to use. More info: https://kubernetes.io/docs/concepts/storage/volumes/#csi
     */
    driver: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * A reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls.
     */
    nodePublishSecretRef?: outputs.PersistentVolumeV1SpecPersistentVolumeSourceCsiNodePublishSecretRef;
    /**
     * A reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls.
     */
    nodeStageSecretRef?: outputs.PersistentVolumeV1SpecPersistentVolumeSourceCsiNodeStageSecretRef;
    /**
     * Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
     */
    readOnly?: boolean;
    /**
     * Attributes of the volume to publish.
     */
    volumeAttributes?: {[key: string]: string};
    /**
     * A string value that uniquely identifies the volume. More info: https://kubernetes.io/docs/concepts/storage/volumes/#csi
     */
    volumeHandle: string;
}

export interface PersistentVolumeV1SpecPersistentVolumeSourceCsiControllerExpandSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface PersistentVolumeV1SpecPersistentVolumeSourceCsiControllerPublishSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface PersistentVolumeV1SpecPersistentVolumeSourceCsiNodePublishSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface PersistentVolumeV1SpecPersistentVolumeSourceCsiNodeStageSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface PersistentVolumeV1SpecPersistentVolumeSourceFc {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * FC target lun number
     */
    lun: number;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * FC target worldwide names (WWNs)
     */
    targetWwNs: string[];
}

export interface PersistentVolumeV1SpecPersistentVolumeSourceFlexVolume {
    /**
     * Driver is the name of the driver to use for this volume.
     */
    driver: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
     */
    fsType?: string;
    /**
     * Extra command options if any.
     */
    options?: {[key: string]: string};
    /**
     * Whether to force the ReadOnly setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * Reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
     */
    secretRef?: outputs.PersistentVolumeV1SpecPersistentVolumeSourceFlexVolumeSecretRef;
}

export interface PersistentVolumeV1SpecPersistentVolumeSourceFlexVolumeSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface PersistentVolumeV1SpecPersistentVolumeSourceFlocker {
    /**
     * Name of the dataset stored as metadata > name on the dataset for Flocker should be considered as deprecated
     */
    datasetName?: string;
    /**
     * UUID of the dataset. This is unique identifier of a Flocker dataset
     */
    datasetUuid?: string;
}

export interface PersistentVolumeV1SpecPersistentVolumeSourceGcePersistentDisk {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    fsType?: string;
    /**
     * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    partition?: number;
    /**
     * Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    pdName: string;
    /**
     * Whether to force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    readOnly?: boolean;
}

export interface PersistentVolumeV1SpecPersistentVolumeSourceGlusterfs {
    /**
     * The endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    endpointsName: string;
    /**
     * The Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    path: string;
    /**
     * Whether to force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    readOnly?: boolean;
}

export interface PersistentVolumeV1SpecPersistentVolumeSourceHostPath {
    /**
     * Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     */
    path?: string;
    /**
     * Type for HostPath volume. Allowed values are "" (default), DirectoryOrCreate, Directory, FileOrCreate, File, Socket, CharDevice and BlockDevice
     */
    type?: string;
}

export interface PersistentVolumeV1SpecPersistentVolumeSourceIscsi {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
     */
    fsType?: string;
    /**
     * Target iSCSI Qualified Name.
     */
    iqn: string;
    /**
     * iSCSI interface name that uses an iSCSI transport. Defaults to 'default' (tcp).
     */
    iscsiInterface?: string;
    /**
     * iSCSI target lun number.
     */
    lun?: number;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false.
     */
    readOnly?: boolean;
    /**
     * iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
     */
    targetPortal: string;
}

export interface PersistentVolumeV1SpecPersistentVolumeSourceLocal {
    /**
     * Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
     */
    path?: string;
}

export interface PersistentVolumeV1SpecPersistentVolumeSourceNfs {
    /**
     * Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    path: string;
    /**
     * Whether to force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    readOnly?: boolean;
    /**
     * Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    server: string;
}

export interface PersistentVolumeV1SpecPersistentVolumeSourcePhotonPersistentDisk {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * ID that identifies Photon Controller persistent disk
     */
    pdId: string;
}

export interface PersistentVolumeV1SpecPersistentVolumeSourceQuobyte {
    /**
     * Group to map volume access to Default is no group
     */
    group?: string;
    /**
     * Whether to force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
     */
    registry: string;
    /**
     * User to map volume access to Defaults to serivceaccount user
     */
    user?: string;
    /**
     * Volume is a string that references an already created Quobyte volume by name.
     */
    volume: string;
}

export interface PersistentVolumeV1SpecPersistentVolumeSourceRbd {
    /**
     * A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    cephMonitors: string[];
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
     */
    fsType?: string;
    /**
     * Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    keyring: string;
    /**
     * The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    radosUser?: string;
    /**
     * The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    rbdImage: string;
    /**
     * The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it.
     */
    rbdPool?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    readOnly?: boolean;
    /**
     * Name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    secretRef?: outputs.PersistentVolumeV1SpecPersistentVolumeSourceRbdSecretRef;
}

export interface PersistentVolumeV1SpecPersistentVolumeSourceRbdSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface PersistentVolumeV1SpecPersistentVolumeSourceVsphereVolume {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * Path that identifies vSphere volume vmdk
     */
    volumePath: string;
}

export interface PersistentVolumeV1Timeouts {
    create?: string;
}

export interface PodDisruptionBudgetMetadata {
    /**
     * An unstructured key value map stored with the pod disruption budget that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the pod disruption budget. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the pod disruption budget, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the pod disruption budget must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this pod disruption budget that can be used by clients to determine when pod disruption budget has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this pod disruption budget. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface PodDisruptionBudgetSpec {
    maxUnavailable?: string;
    minAvailable?: string;
    selector: outputs.PodDisruptionBudgetSpecSelector;
}

export interface PodDisruptionBudgetSpecSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.PodDisruptionBudgetSpecSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface PodDisruptionBudgetSpecSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface PodDisruptionBudgetV1Metadata {
    /**
     * An unstructured key value map stored with the pod disruption budget that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the pod disruption budget. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the pod disruption budget, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the pod disruption budget must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this pod disruption budget that can be used by clients to determine when pod disruption budget has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this pod disruption budget. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface PodDisruptionBudgetV1Spec {
    maxUnavailable?: string;
    minAvailable?: string;
    selector: outputs.PodDisruptionBudgetV1SpecSelector;
}

export interface PodDisruptionBudgetV1SpecSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.PodDisruptionBudgetV1SpecSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface PodDisruptionBudgetV1SpecSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface PodMetadata {
    /**
     * An unstructured key value map stored with the pod that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the pod. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the pod, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the pod must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this pod that can be used by clients to determine when pod has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface PodSecurityPolicyMetadata {
    /**
     * An unstructured key value map stored with the podsecuritypolicy that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the podsecuritypolicy. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the podsecuritypolicy, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * An opaque value that represents the internal version of this podsecuritypolicy that can be used by clients to determine when podsecuritypolicy has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this podsecuritypolicy. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface PodSecurityPolicySpec {
    /**
     * allowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to true.
     */
    allowPrivilegeEscalation: boolean;
    /**
     * allowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field may be added at the pod author's discretion. You must not list a capability in both allowedCapabilities and requiredDropCapabilities.
     */
    allowedCapabilities: string[];
    /**
     * allowedFlexVolumes is an allowlist of Flexvolumes.  Empty or nil indicates that all Flexvolumes may be used.  This parameter is effective only when the usage of the Flexvolumes is allowed in the "volumes" field.
     */
    allowedFlexVolumes?: outputs.PodSecurityPolicySpecAllowedFlexVolume[];
    /**
     * allowedHostPaths is an allowlist of host paths. Empty indicates that all host paths may be used.
     */
    allowedHostPaths?: outputs.PodSecurityPolicySpecAllowedHostPath[];
    /**
     * AllowedProcMountTypes is an allowlist of allowed ProcMountTypes. Empty or nil indicates that only the DefaultProcMountType may be used. This requires the ProcMountType feature flag to be enabled.
     */
    allowedProcMountTypes?: string[];
    /**
     * allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe sysctls are allowed. Kubelet has to allowlist all allowed unsafe sysctls explicitly to avoid rejection.
     *
     * Examples: e.g. "foo/*" allows "foo/bar", "foo/baz", etc. e.g. "foo.*" allows "foo.bar", "foo.baz", etc.
     */
    allowedUnsafeSysctls?: string[];
    /**
     * defaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capability in both defaultAddCapabilities and requiredDropCapabilities. Capabilities added here are implicitly allowed, and need not be included in the allowedCapabilities list.
     */
    defaultAddCapabilities?: string[];
    /**
     * defaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its parent process.
     */
    defaultAllowPrivilegeEscalation: boolean;
    /**
     * forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are forbidden.
     *
     * Examples: e.g. "foo/*" forbids "foo/bar", "foo/baz", etc. e.g. "foo.*" forbids "foo.bar", "foo.baz", etc.
     */
    forbiddenSysctls?: string[];
    /**
     * fsGroup is the strategy that will dictate what fs group is used by the SecurityContext.
     */
    fsGroup: outputs.PodSecurityPolicySpecFsGroup;
    /**
     * hostIPC determines if the policy allows the use of HostIPC in the pod spec.
     */
    hostIpc: boolean;
    /**
     * hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
     */
    hostNetwork: boolean;
    /**
     * hostPID determines if the policy allows the use of HostPID in the pod spec.
     */
    hostPid: boolean;
    /**
     * hostPorts determines which host port ranges are allowed to be exposed.
     */
    hostPorts?: outputs.PodSecurityPolicySpecHostPort[];
    /**
     * privileged determines if a pod can request to be run as privileged.
     */
    privileged: boolean;
    /**
     * readOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.
     */
    readOnlyRootFilesystem: boolean;
    /**
     * requiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.
     */
    requiredDropCapabilities: string[];
    /**
     * RunAsGroup is the strategy that will dictate the allowable RunAsGroup values that may be set. If this field is omitted, the pod's RunAsGroup can take any value. This field requires the RunAsGroup feature gate to be enabled.
     */
    runAsGroup?: outputs.PodSecurityPolicySpecRunAsGroup;
    /**
     * runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.
     */
    runAsUser: outputs.PodSecurityPolicySpecRunAsUser;
    /**
     * seLinux is the strategy that will dictate the allowable labels that may be set.
     */
    seLinux?: outputs.PodSecurityPolicySpecSeLinux;
    /**
     * supplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.
     */
    supplementalGroups: outputs.PodSecurityPolicySpecSupplementalGroups;
    /**
     * volumes is an allowlist of volume plugins. Empty indicates that no volumes may be used. To allow all volumes you may use '*'.
     */
    volumes: string[];
}

export interface PodSecurityPolicySpecAllowedFlexVolume {
    /**
     * driver is the name of the Flexvolume driver.
     */
    driver: string;
}

export interface PodSecurityPolicySpecAllowedHostPath {
    /**
     * pathPrefix is the path prefix that the host volume must match. It does not support `*`. Trailing slashes are trimmed when validating the path prefix with a host path.
     *
     * Examples: `/foo` would allow `/foo`, `/foo/` and `/foo/bar` `/foo` would not allow `/food` or `/etc/foo`
     */
    pathPrefix: string;
    /**
     * when set to true, will allow host volumes matching the pathPrefix only if all volume mounts are readOnly.
     */
    readOnly?: boolean;
}

export interface PodSecurityPolicySpecFsGroup {
    /**
     * ranges are the allowed ranges of fs groups.  If you would like to force a single fs group then supply a single range with the same start and end. Required for MustRunAs.
     */
    ranges?: outputs.PodSecurityPolicySpecFsGroupRange[];
    /**
     * rule is the strategy that will dictate what FSGroup is used in the SecurityContext.
     */
    rule: string;
}

export interface PodSecurityPolicySpecFsGroupRange {
    /**
     * max is the end of the range, inclusive.
     */
    max: number;
    /**
     * min is the start of the range, inclusive.
     */
    min: number;
}

export interface PodSecurityPolicySpecHostPort {
    /**
     * max is the end of the range, inclusive.
     */
    max: number;
    /**
     * min is the start of the range, inclusive.
     */
    min: number;
}

export interface PodSecurityPolicySpecRunAsGroup {
    /**
     * ranges are the allowed ranges of gids that may be used. If you would like to force a single gid then supply a single range with the same start and end. Required for MustRunAs.
     */
    ranges?: outputs.PodSecurityPolicySpecRunAsGroupRange[];
    /**
     * rule is the strategy that will dictate the allowable RunAsGroup values that may be set.
     */
    rule: string;
}

export interface PodSecurityPolicySpecRunAsGroupRange {
    /**
     * max is the end of the range, inclusive.
     */
    max: number;
    /**
     * min is the start of the range, inclusive.
     */
    min: number;
}

export interface PodSecurityPolicySpecRunAsUser {
    /**
     * ranges are the allowed ranges of uids that may be used. If you would like to force a single uid then supply a single range with the same start and end. Required for MustRunAs.
     */
    ranges?: outputs.PodSecurityPolicySpecRunAsUserRange[];
    /**
     * rule is the strategy that will dictate the allowable RunAsUser values that may be set.
     */
    rule: string;
}

export interface PodSecurityPolicySpecRunAsUserRange {
    /**
     * max is the end of the range, inclusive.
     */
    max: number;
    /**
     * min is the start of the range, inclusive.
     */
    min: number;
}

export interface PodSecurityPolicySpecSeLinux {
    /**
     * rule is the strategy that will dictate the allowable labels that may be set.
     */
    rule: string;
    /**
     * seLinuxOptions required to run as; required for MustRunAs More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
     */
    seLinuxOptions?: outputs.PodSecurityPolicySpecSeLinuxSeLinuxOption[];
}

export interface PodSecurityPolicySpecSeLinuxSeLinuxOption {
    level: string;
    role: string;
    type: string;
    user: string;
}

export interface PodSecurityPolicySpecSupplementalGroups {
    /**
     * ranges are the allowed ranges of supplemental groups.  If you would like to force a single supplemental group then supply a single range with the same start and end. Required for MustRunAs.
     */
    ranges?: outputs.PodSecurityPolicySpecSupplementalGroupsRange[];
    /**
     * rule is the strategy that will dictate what supplemental groups is used in the SecurityContext.
     */
    rule: string;
}

export interface PodSecurityPolicySpecSupplementalGroupsRange {
    /**
     * max is the end of the range, inclusive.
     */
    max: number;
    /**
     * min is the start of the range, inclusive.
     */
    min: number;
}

export interface PodSecurityPolicyV1beta1Metadata {
    /**
     * An unstructured key value map stored with the podsecuritypolicy that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the podsecuritypolicy. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the podsecuritypolicy, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * An opaque value that represents the internal version of this podsecuritypolicy that can be used by clients to determine when podsecuritypolicy has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this podsecuritypolicy. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface PodSecurityPolicyV1beta1Spec {
    /**
     * allowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to true.
     */
    allowPrivilegeEscalation: boolean;
    /**
     * allowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field may be added at the pod author's discretion. You must not list a capability in both allowedCapabilities and requiredDropCapabilities.
     */
    allowedCapabilities: string[];
    /**
     * allowedFlexVolumes is an allowlist of Flexvolumes.  Empty or nil indicates that all Flexvolumes may be used.  This parameter is effective only when the usage of the Flexvolumes is allowed in the "volumes" field.
     */
    allowedFlexVolumes?: outputs.PodSecurityPolicyV1beta1SpecAllowedFlexVolume[];
    /**
     * allowedHostPaths is an allowlist of host paths. Empty indicates that all host paths may be used.
     */
    allowedHostPaths?: outputs.PodSecurityPolicyV1beta1SpecAllowedHostPath[];
    /**
     * AllowedProcMountTypes is an allowlist of allowed ProcMountTypes. Empty or nil indicates that only the DefaultProcMountType may be used. This requires the ProcMountType feature flag to be enabled.
     */
    allowedProcMountTypes?: string[];
    /**
     * allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe sysctls are allowed. Kubelet has to allowlist all allowed unsafe sysctls explicitly to avoid rejection.
     *
     * Examples: e.g. "foo/*" allows "foo/bar", "foo/baz", etc. e.g. "foo.*" allows "foo.bar", "foo.baz", etc.
     */
    allowedUnsafeSysctls?: string[];
    /**
     * defaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capability in both defaultAddCapabilities and requiredDropCapabilities. Capabilities added here are implicitly allowed, and need not be included in the allowedCapabilities list.
     */
    defaultAddCapabilities?: string[];
    /**
     * defaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its parent process.
     */
    defaultAllowPrivilegeEscalation: boolean;
    /**
     * forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are forbidden.
     *
     * Examples: e.g. "foo/*" forbids "foo/bar", "foo/baz", etc. e.g. "foo.*" forbids "foo.bar", "foo.baz", etc.
     */
    forbiddenSysctls?: string[];
    /**
     * fsGroup is the strategy that will dictate what fs group is used by the SecurityContext.
     */
    fsGroup: outputs.PodSecurityPolicyV1beta1SpecFsGroup;
    /**
     * hostIPC determines if the policy allows the use of HostIPC in the pod spec.
     */
    hostIpc: boolean;
    /**
     * hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
     */
    hostNetwork: boolean;
    /**
     * hostPID determines if the policy allows the use of HostPID in the pod spec.
     */
    hostPid: boolean;
    /**
     * hostPorts determines which host port ranges are allowed to be exposed.
     */
    hostPorts?: outputs.PodSecurityPolicyV1beta1SpecHostPort[];
    /**
     * privileged determines if a pod can request to be run as privileged.
     */
    privileged: boolean;
    /**
     * readOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.
     */
    readOnlyRootFilesystem: boolean;
    /**
     * requiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.
     */
    requiredDropCapabilities: string[];
    /**
     * RunAsGroup is the strategy that will dictate the allowable RunAsGroup values that may be set. If this field is omitted, the pod's RunAsGroup can take any value. This field requires the RunAsGroup feature gate to be enabled.
     */
    runAsGroup?: outputs.PodSecurityPolicyV1beta1SpecRunAsGroup;
    /**
     * runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.
     */
    runAsUser: outputs.PodSecurityPolicyV1beta1SpecRunAsUser;
    /**
     * seLinux is the strategy that will dictate the allowable labels that may be set.
     */
    seLinux?: outputs.PodSecurityPolicyV1beta1SpecSeLinux;
    /**
     * supplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.
     */
    supplementalGroups: outputs.PodSecurityPolicyV1beta1SpecSupplementalGroups;
    /**
     * volumes is an allowlist of volume plugins. Empty indicates that no volumes may be used. To allow all volumes you may use '*'.
     */
    volumes: string[];
}

export interface PodSecurityPolicyV1beta1SpecAllowedFlexVolume {
    /**
     * driver is the name of the Flexvolume driver.
     */
    driver: string;
}

export interface PodSecurityPolicyV1beta1SpecAllowedHostPath {
    /**
     * pathPrefix is the path prefix that the host volume must match. It does not support `*`. Trailing slashes are trimmed when validating the path prefix with a host path.
     *
     * Examples: `/foo` would allow `/foo`, `/foo/` and `/foo/bar` `/foo` would not allow `/food` or `/etc/foo`
     */
    pathPrefix: string;
    /**
     * when set to true, will allow host volumes matching the pathPrefix only if all volume mounts are readOnly.
     */
    readOnly?: boolean;
}

export interface PodSecurityPolicyV1beta1SpecFsGroup {
    /**
     * ranges are the allowed ranges of fs groups.  If you would like to force a single fs group then supply a single range with the same start and end. Required for MustRunAs.
     */
    ranges?: outputs.PodSecurityPolicyV1beta1SpecFsGroupRange[];
    /**
     * rule is the strategy that will dictate what FSGroup is used in the SecurityContext.
     */
    rule: string;
}

export interface PodSecurityPolicyV1beta1SpecFsGroupRange {
    /**
     * max is the end of the range, inclusive.
     */
    max: number;
    /**
     * min is the start of the range, inclusive.
     */
    min: number;
}

export interface PodSecurityPolicyV1beta1SpecHostPort {
    /**
     * max is the end of the range, inclusive.
     */
    max: number;
    /**
     * min is the start of the range, inclusive.
     */
    min: number;
}

export interface PodSecurityPolicyV1beta1SpecRunAsGroup {
    /**
     * ranges are the allowed ranges of gids that may be used. If you would like to force a single gid then supply a single range with the same start and end. Required for MustRunAs.
     */
    ranges?: outputs.PodSecurityPolicyV1beta1SpecRunAsGroupRange[];
    /**
     * rule is the strategy that will dictate the allowable RunAsGroup values that may be set.
     */
    rule: string;
}

export interface PodSecurityPolicyV1beta1SpecRunAsGroupRange {
    /**
     * max is the end of the range, inclusive.
     */
    max: number;
    /**
     * min is the start of the range, inclusive.
     */
    min: number;
}

export interface PodSecurityPolicyV1beta1SpecRunAsUser {
    /**
     * ranges are the allowed ranges of uids that may be used. If you would like to force a single uid then supply a single range with the same start and end. Required for MustRunAs.
     */
    ranges?: outputs.PodSecurityPolicyV1beta1SpecRunAsUserRange[];
    /**
     * rule is the strategy that will dictate the allowable RunAsUser values that may be set.
     */
    rule: string;
}

export interface PodSecurityPolicyV1beta1SpecRunAsUserRange {
    /**
     * max is the end of the range, inclusive.
     */
    max: number;
    /**
     * min is the start of the range, inclusive.
     */
    min: number;
}

export interface PodSecurityPolicyV1beta1SpecSeLinux {
    /**
     * rule is the strategy that will dictate the allowable labels that may be set.
     */
    rule: string;
    /**
     * seLinuxOptions required to run as; required for MustRunAs More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
     */
    seLinuxOptions?: outputs.PodSecurityPolicyV1beta1SpecSeLinuxSeLinuxOption[];
}

export interface PodSecurityPolicyV1beta1SpecSeLinuxSeLinuxOption {
    level: string;
    role: string;
    type: string;
    user: string;
}

export interface PodSecurityPolicyV1beta1SpecSupplementalGroups {
    /**
     * ranges are the allowed ranges of supplemental groups.  If you would like to force a single supplemental group then supply a single range with the same start and end. Required for MustRunAs.
     */
    ranges?: outputs.PodSecurityPolicyV1beta1SpecSupplementalGroupsRange[];
    /**
     * rule is the strategy that will dictate what supplemental groups is used in the SecurityContext.
     */
    rule: string;
}

export interface PodSecurityPolicyV1beta1SpecSupplementalGroupsRange {
    /**
     * max is the end of the range, inclusive.
     */
    max: number;
    /**
     * min is the start of the range, inclusive.
     */
    min: number;
}

export interface PodSpec {
    /**
     * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
     */
    activeDeadlineSeconds?: number;
    /**
     * Optional pod scheduling constraints.
     */
    affinity?: outputs.PodSpecAffinity;
    /**
     * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
     */
    automountServiceAccountToken?: boolean;
    /**
     * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/
     */
    containers?: outputs.PodSpecContainer[];
    /**
     * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy. Optional: Defaults to empty
     */
    dnsConfig?: outputs.PodSpecDnsConfig;
    /**
     * Set DNS policy for containers within the pod. Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'. Defaults to 'ClusterFirst'. More info: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy
     */
    dnsPolicy?: string;
    /**
     * Enables generating environment variables for service discovery. Defaults to true.
     */
    enableServiceLinks?: boolean;
    /**
     * List of hosts and IPs that will be injected into the pod's hosts file if specified. Optional: Defaults to empty.
     */
    hostAliases?: outputs.PodSpecHostAlias[];
    /**
     * Use the host's ipc namespace. Optional: Defaults to false.
     */
    hostIpc?: boolean;
    /**
     * Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified.
     */
    hostNetwork?: boolean;
    /**
     * Use the host's pid namespace.
     */
    hostPid?: boolean;
    /**
     * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
     */
    hostname: string;
    /**
     * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
     */
    imagePullSecrets?: outputs.PodSpecImagePullSecret[];
    /**
     * List of init containers belonging to the pod. Init containers always run to completion and each must complete successfully before the next is started. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
     */
    initContainers?: outputs.PodSpecInitContainer[];
    /**
     * NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
     */
    nodeName: string;
    /**
     * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.
     */
    nodeSelector?: {[key: string]: string};
    /**
     * Specifies the OS of the containers in the pod.
     */
    os?: outputs.PodSpecOs;
    /**
     * If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
     */
    priorityClassName?: string;
    /**
     * If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md
     */
    readinessGates?: outputs.PodSpecReadinessGate[];
    /**
     * Restart policy for all containers within the pod. One of Always, OnFailure, Never. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy.
     */
    restartPolicy?: string;
    /**
     * RuntimeClassName is a feature for selecting the container runtime configuration. The container runtime configuration is used to run a Pod's containers. More info: https://kubernetes.io/docs/concepts/containers/runtime-class
     */
    runtimeClassName?: string;
    /**
     * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
     */
    schedulerName: string;
    /**
     * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty
     */
    securityContext?: outputs.PodSpecSecurityContext;
    /**
     * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: http://releases.k8s.io/HEAD/docs/design/service_accounts.md.
     */
    serviceAccountName: string;
    /**
     * Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Defaults to false.
     */
    shareProcessNamespace?: boolean;
    /**
     * If specified, the fully qualified Pod hostname will be "...svc.". If not specified, the pod will not have a domainname at all..
     */
    subdomain?: string;
    /**
     * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process.
     */
    terminationGracePeriodSeconds?: number;
    /**
     * If specified, the pod's toleration. Optional: Defaults to empty
     */
    tolerations?: outputs.PodSpecToleration[];
    /**
     * describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints.
     */
    topologySpreadConstraints?: outputs.PodSpecTopologySpreadConstraint[];
    /**
     * List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
     */
    volumes?: outputs.PodSpecVolume[];
}

export interface PodSpecAffinity {
    /**
     * Node affinity scheduling rules for the pod.
     */
    nodeAffinity?: outputs.PodSpecAffinityNodeAffinity;
    /**
     * Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)
     */
    podAffinity?: outputs.PodSpecAffinityPodAffinity;
    /**
     * Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)
     */
    podAntiAffinity?: outputs.PodSpecAffinityPodAntiAffinity;
}

export interface PodSpecAffinityNodeAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: outputs.PodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a node label update), the system may or may not try to eventually evict the pod from its node.
     */
    requiredDuringSchedulingIgnoredDuringExecution?: outputs.PodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
}

export interface PodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A node selector term, associated with the corresponding weight.
     */
    preference: outputs.PodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
    /**
     * weight is in the range 1-100
     */
    weight: number;
}

export interface PodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
    /**
     * List of node selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.PodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression[];
    /**
     * A list of node selector requirements by node's fields. The requirements are ANDed.
     */
    matchFields?: outputs.PodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchField[];
}

export interface PodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
     */
    operator?: string;
    /**
     * Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface PodSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchField {
    /**
     * The label key that the selector applies to.
     */
    key: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists`, `DoesNotExist`, `Gt`, and `Lt`.
     */
    operator: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface PodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * List of node selector terms. The terms are ORed.
     */
    nodeSelectorTerms?: outputs.PodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm[];
}

export interface PodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm {
    /**
     * List of node selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.PodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression[];
    /**
     * A list of node selector requirements by node's fields. The requirements are ANDed.
     */
    matchFields?: outputs.PodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchField[];
}

export interface PodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
     */
    operator?: string;
    /**
     * Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface PodSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchField {
    /**
     * The label key that the selector applies to.
     */
    key: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists`, `DoesNotExist`, `Gt`, and `Lt`.
     */
    operator: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface PodSpecAffinityPodAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: outputs.PodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.
     */
    requiredDuringSchedulingIgnoredDuringExecutions?: outputs.PodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
}

export interface PodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A pod affinity term, associated with the corresponding weight
     */
    podAffinityTerm: outputs.PodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
    /**
     * weight associated with matching the corresponding podAffinityTerm, in the range 1-100
     */
    weight: number;
}

export interface PodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.PodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface PodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.PodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface PodSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface PodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.PodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface PodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.PodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface PodSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface PodSpecAffinityPodAntiAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: outputs.PodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.
     */
    requiredDuringSchedulingIgnoredDuringExecutions?: outputs.PodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
}

export interface PodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A pod affinity term, associated with the corresponding weight
     */
    podAffinityTerm: outputs.PodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
    /**
     * weight associated with matching the corresponding podAffinityTerm, in the range 1-100
     */
    weight: number;
}

export interface PodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.PodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface PodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.PodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface PodSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface PodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.PodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface PodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.PodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface PodSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface PodSpecContainer {
    /**
     * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    args?: string[];
    /**
     * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    commands?: string[];
    /**
     * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
     */
    envFroms?: outputs.PodSpecContainerEnvFrom[];
    /**
     * List of environment variables to set in the container. Cannot be updated.
     */
    envs?: outputs.PodSpecContainerEnv[];
    /**
     * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/
     */
    image?: string;
    /**
     * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images
     */
    imagePullPolicy: string;
    /**
     * Actions that the management system should take in response to container lifecycle events
     */
    lifecycle?: outputs.PodSpecContainerLifecycle;
    /**
     * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    livenessProbe?: outputs.PodSpecContainerLivenessProbe;
    /**
     * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
     */
    name: string;
    /**
     * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
     */
    ports?: outputs.PodSpecContainerPort[];
    /**
     * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    readinessProbe?: outputs.PodSpecContainerReadinessProbe;
    /**
     * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources?: outputs.PodSpecContainerResources;
    /**
     * Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
     */
    securityContext?: outputs.PodSpecContainerSecurityContext;
    /**
     * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     */
    startupProbe?: outputs.PodSpecContainerStartupProbe;
    /**
     * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.
     */
    stdin?: boolean;
    /**
     * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.
     */
    stdinOnce?: boolean;
    /**
     * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.
     */
    terminationMessagePath?: string;
    /**
     * Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
     */
    terminationMessagePolicy: string;
    /**
     * Whether this container should allocate a TTY for itself
     */
    tty?: boolean;
    /**
     * Pod volumes to mount into the container's filesystem. Cannot be updated.
     */
    volumeMounts?: outputs.PodSpecContainerVolumeMount[];
    /**
     * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
     */
    workingDir?: string;
}

export interface PodSpecContainerEnv {
    /**
     * Name of the environment variable. Must be a C_IDENTIFIER
     */
    name: string;
    /**
     * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
     */
    value?: string;
    /**
     * Source for the environment variable's value
     */
    valueFrom?: outputs.PodSpecContainerEnvValueFrom;
}

export interface PodSpecContainerEnvFrom {
    /**
     * The ConfigMap to select from
     */
    configMapRef?: outputs.PodSpecContainerEnvFromConfigMapRef;
    /**
     * An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
     */
    prefix?: string;
    /**
     * The Secret to select from
     */
    secretRef?: outputs.PodSpecContainerEnvFromSecretRef;
}

export interface PodSpecContainerEnvFromConfigMapRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the ConfigMap must be defined
     */
    optional?: boolean;
}

export interface PodSpecContainerEnvFromSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the Secret must be defined
     */
    optional?: boolean;
}

export interface PodSpecContainerEnvValueFrom {
    /**
     * Selects a key of a ConfigMap.
     */
    configMapKeyRef?: outputs.PodSpecContainerEnvValueFromConfigMapKeyRef;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.
     */
    fieldRef?: outputs.PodSpecContainerEnvValueFromFieldRef;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
     */
    resourceFieldRef?: outputs.PodSpecContainerEnvValueFromResourceFieldRef;
    /**
     * Selects a key of a secret in the pod's namespace.
     */
    secretKeyRef?: outputs.PodSpecContainerEnvValueFromSecretKeyRef;
}

export interface PodSpecContainerEnvValueFromConfigMapKeyRef {
    /**
     * The key to select.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the ConfigMap or its key must be defined.
     */
    optional?: boolean;
}

export interface PodSpecContainerEnvValueFromFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface PodSpecContainerEnvValueFromResourceFieldRef {
    containerName?: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface PodSpecContainerEnvValueFromSecretKeyRef {
    /**
     * The key of the secret to select from. Must be a valid secret key.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the Secret or its key must be defined.
     */
    optional?: boolean;
}

export interface PodSpecContainerLifecycle {
    /**
     * post_start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    postStarts?: outputs.PodSpecContainerLifecyclePostStart[];
    /**
     * pre_stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    preStops?: outputs.PodSpecContainerLifecyclePreStop[];
}

export interface PodSpecContainerLifecyclePostStart {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.PodSpecContainerLifecyclePostStartExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.PodSpecContainerLifecyclePostStartHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.PodSpecContainerLifecyclePostStartTcpSocket[];
}

export interface PodSpecContainerLifecyclePostStartExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface PodSpecContainerLifecyclePostStartHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.PodSpecContainerLifecyclePostStartHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface PodSpecContainerLifecyclePostStartHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface PodSpecContainerLifecyclePostStartTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface PodSpecContainerLifecyclePreStop {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.PodSpecContainerLifecyclePreStopExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.PodSpecContainerLifecyclePreStopHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.PodSpecContainerLifecyclePreStopTcpSocket[];
}

export interface PodSpecContainerLifecyclePreStopExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface PodSpecContainerLifecyclePreStopHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.PodSpecContainerLifecyclePreStopHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface PodSpecContainerLifecyclePreStopHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface PodSpecContainerLifecyclePreStopTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface PodSpecContainerLivenessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.PodSpecContainerLivenessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.PodSpecContainerLivenessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.PodSpecContainerLivenessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.PodSpecContainerLivenessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface PodSpecContainerLivenessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface PodSpecContainerLivenessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface PodSpecContainerLivenessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.PodSpecContainerLivenessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface PodSpecContainerLivenessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface PodSpecContainerLivenessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface PodSpecContainerPort {
    /**
     * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
     */
    containerPort: number;
    /**
     * What host IP to bind the external port to.
     */
    hostIp?: string;
    /**
     * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
     */
    hostPort?: number;
    /**
     * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
     */
    name?: string;
    /**
     * Protocol for port. Must be UDP or TCP. Defaults to "TCP".
     */
    protocol?: string;
}

export interface PodSpecContainerReadinessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.PodSpecContainerReadinessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.PodSpecContainerReadinessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.PodSpecContainerReadinessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.PodSpecContainerReadinessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface PodSpecContainerReadinessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface PodSpecContainerReadinessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface PodSpecContainerReadinessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.PodSpecContainerReadinessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface PodSpecContainerReadinessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface PodSpecContainerReadinessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface PodSpecContainerResources {
    /**
     * Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits: {[key: string]: string};
    /**
     * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
     */
    requests: {[key: string]: string};
}

export interface PodSpecContainerSecurityContext {
    /**
     * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
     */
    allowPrivilegeEscalation?: boolean;
    /**
     * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
     */
    capabilities?: outputs.PodSpecContainerSecurityContextCapabilities;
    /**
     * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
     */
    privileged?: boolean;
    /**
     * Whether this container has a read-only root filesystem. Default is false.
     */
    readOnlyRootFilesystem?: boolean;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsGroup?: string;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: boolean;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUser?: string;
    /**
     * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    seLinuxOptions?: outputs.PodSpecContainerSecurityContextSeLinuxOptions;
    /**
     * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     */
    seccompProfile?: outputs.PodSpecContainerSecurityContextSeccompProfile;
}

export interface PodSpecContainerSecurityContextCapabilities {
    /**
     * Added capabilities
     */
    adds?: string[];
    /**
     * Removed capabilities
     */
    drops?: string[];
}

export interface PodSpecContainerSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: string;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: string;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: string;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: string;
}

export interface PodSpecContainerSecurityContextSeccompProfile {
    /**
     * Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
     */
    localhostProfile?: string;
    /**
     * Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
     */
    type?: string;
}

export interface PodSpecContainerStartupProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.PodSpecContainerStartupProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.PodSpecContainerStartupProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.PodSpecContainerStartupProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.PodSpecContainerStartupProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface PodSpecContainerStartupProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface PodSpecContainerStartupProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface PodSpecContainerStartupProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.PodSpecContainerStartupProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface PodSpecContainerStartupProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface PodSpecContainerStartupProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface PodSpecContainerVolumeMount {
    /**
     * Path within the container at which the volume should be mounted. Must not contain ':'.
     */
    mountPath: string;
    /**
     * Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional.
     */
    mountPropagation?: string;
    /**
     * This must match the Name of a Volume.
     */
    name: string;
    /**
     * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
     */
    subPath?: string;
}

export interface PodSpecDnsConfig {
    /**
     * A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
     */
    nameservers?: string[];
    /**
     * A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
     */
    options?: outputs.PodSpecDnsConfigOption[];
    /**
     * A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
     */
    searches?: string[];
}

export interface PodSpecDnsConfigOption {
    /**
     * Name of the option.
     */
    name: string;
    /**
     * Value of the option. Optional: Defaults to empty.
     */
    value?: string;
}

export interface PodSpecHostAlias {
    /**
     * Hostnames for the IP address.
     */
    hostnames: string[];
    /**
     * IP address of the host file entry.
     */
    ip: string;
}

export interface PodSpecImagePullSecret {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
}

export interface PodSpecInitContainer {
    /**
     * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    args?: string[];
    /**
     * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    commands?: string[];
    /**
     * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
     */
    envFroms?: outputs.PodSpecInitContainerEnvFrom[];
    /**
     * List of environment variables to set in the container. Cannot be updated.
     */
    envs?: outputs.PodSpecInitContainerEnv[];
    /**
     * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/
     */
    image?: string;
    /**
     * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images
     */
    imagePullPolicy: string;
    /**
     * Actions that the management system should take in response to container lifecycle events
     */
    lifecycle?: outputs.PodSpecInitContainerLifecycle;
    /**
     * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    livenessProbe?: outputs.PodSpecInitContainerLivenessProbe;
    /**
     * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
     */
    name: string;
    /**
     * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
     */
    ports?: outputs.PodSpecInitContainerPort[];
    /**
     * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    readinessProbe?: outputs.PodSpecInitContainerReadinessProbe;
    /**
     * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources?: outputs.PodSpecInitContainerResources;
    /**
     * Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
     */
    securityContext?: outputs.PodSpecInitContainerSecurityContext;
    /**
     * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     */
    startupProbe?: outputs.PodSpecInitContainerStartupProbe;
    /**
     * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.
     */
    stdin?: boolean;
    /**
     * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.
     */
    stdinOnce?: boolean;
    /**
     * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.
     */
    terminationMessagePath?: string;
    /**
     * Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
     */
    terminationMessagePolicy: string;
    /**
     * Whether this container should allocate a TTY for itself
     */
    tty?: boolean;
    /**
     * Pod volumes to mount into the container's filesystem. Cannot be updated.
     */
    volumeMounts?: outputs.PodSpecInitContainerVolumeMount[];
    /**
     * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
     */
    workingDir?: string;
}

export interface PodSpecInitContainerEnv {
    /**
     * Name of the environment variable. Must be a C_IDENTIFIER
     */
    name: string;
    /**
     * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
     */
    value?: string;
    /**
     * Source for the environment variable's value
     */
    valueFrom?: outputs.PodSpecInitContainerEnvValueFrom;
}

export interface PodSpecInitContainerEnvFrom {
    /**
     * The ConfigMap to select from
     */
    configMapRef?: outputs.PodSpecInitContainerEnvFromConfigMapRef;
    /**
     * An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
     */
    prefix?: string;
    /**
     * The Secret to select from
     */
    secretRef?: outputs.PodSpecInitContainerEnvFromSecretRef;
}

export interface PodSpecInitContainerEnvFromConfigMapRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the ConfigMap must be defined
     */
    optional?: boolean;
}

export interface PodSpecInitContainerEnvFromSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the Secret must be defined
     */
    optional?: boolean;
}

export interface PodSpecInitContainerEnvValueFrom {
    /**
     * Selects a key of a ConfigMap.
     */
    configMapKeyRef?: outputs.PodSpecInitContainerEnvValueFromConfigMapKeyRef;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.
     */
    fieldRef?: outputs.PodSpecInitContainerEnvValueFromFieldRef;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
     */
    resourceFieldRef?: outputs.PodSpecInitContainerEnvValueFromResourceFieldRef;
    /**
     * Selects a key of a secret in the pod's namespace.
     */
    secretKeyRef?: outputs.PodSpecInitContainerEnvValueFromSecretKeyRef;
}

export interface PodSpecInitContainerEnvValueFromConfigMapKeyRef {
    /**
     * The key to select.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the ConfigMap or its key must be defined.
     */
    optional?: boolean;
}

export interface PodSpecInitContainerEnvValueFromFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface PodSpecInitContainerEnvValueFromResourceFieldRef {
    containerName?: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface PodSpecInitContainerEnvValueFromSecretKeyRef {
    /**
     * The key of the secret to select from. Must be a valid secret key.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the Secret or its key must be defined.
     */
    optional?: boolean;
}

export interface PodSpecInitContainerLifecycle {
    /**
     * post_start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    postStarts?: outputs.PodSpecInitContainerLifecyclePostStart[];
    /**
     * pre_stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    preStops?: outputs.PodSpecInitContainerLifecyclePreStop[];
}

export interface PodSpecInitContainerLifecyclePostStart {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.PodSpecInitContainerLifecyclePostStartExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.PodSpecInitContainerLifecyclePostStartHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.PodSpecInitContainerLifecyclePostStartTcpSocket[];
}

export interface PodSpecInitContainerLifecyclePostStartExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface PodSpecInitContainerLifecyclePostStartHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.PodSpecInitContainerLifecyclePostStartHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface PodSpecInitContainerLifecyclePostStartHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface PodSpecInitContainerLifecyclePostStartTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface PodSpecInitContainerLifecyclePreStop {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.PodSpecInitContainerLifecyclePreStopExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.PodSpecInitContainerLifecyclePreStopHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.PodSpecInitContainerLifecyclePreStopTcpSocket[];
}

export interface PodSpecInitContainerLifecyclePreStopExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface PodSpecInitContainerLifecyclePreStopHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.PodSpecInitContainerLifecyclePreStopHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface PodSpecInitContainerLifecyclePreStopHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface PodSpecInitContainerLifecyclePreStopTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface PodSpecInitContainerLivenessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.PodSpecInitContainerLivenessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.PodSpecInitContainerLivenessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.PodSpecInitContainerLivenessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.PodSpecInitContainerLivenessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface PodSpecInitContainerLivenessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface PodSpecInitContainerLivenessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface PodSpecInitContainerLivenessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.PodSpecInitContainerLivenessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface PodSpecInitContainerLivenessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface PodSpecInitContainerLivenessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface PodSpecInitContainerPort {
    /**
     * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
     */
    containerPort: number;
    /**
     * What host IP to bind the external port to.
     */
    hostIp?: string;
    /**
     * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
     */
    hostPort?: number;
    /**
     * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
     */
    name?: string;
    /**
     * Protocol for port. Must be UDP or TCP. Defaults to "TCP".
     */
    protocol?: string;
}

export interface PodSpecInitContainerReadinessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.PodSpecInitContainerReadinessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.PodSpecInitContainerReadinessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.PodSpecInitContainerReadinessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.PodSpecInitContainerReadinessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface PodSpecInitContainerReadinessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface PodSpecInitContainerReadinessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface PodSpecInitContainerReadinessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.PodSpecInitContainerReadinessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface PodSpecInitContainerReadinessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface PodSpecInitContainerReadinessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface PodSpecInitContainerResources {
    /**
     * Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits: {[key: string]: string};
    /**
     * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
     */
    requests: {[key: string]: string};
}

export interface PodSpecInitContainerSecurityContext {
    /**
     * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
     */
    allowPrivilegeEscalation?: boolean;
    /**
     * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
     */
    capabilities?: outputs.PodSpecInitContainerSecurityContextCapabilities;
    /**
     * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
     */
    privileged?: boolean;
    /**
     * Whether this container has a read-only root filesystem. Default is false.
     */
    readOnlyRootFilesystem?: boolean;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsGroup?: string;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: boolean;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUser?: string;
    /**
     * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    seLinuxOptions?: outputs.PodSpecInitContainerSecurityContextSeLinuxOptions;
    /**
     * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     */
    seccompProfile?: outputs.PodSpecInitContainerSecurityContextSeccompProfile;
}

export interface PodSpecInitContainerSecurityContextCapabilities {
    /**
     * Added capabilities
     */
    adds?: string[];
    /**
     * Removed capabilities
     */
    drops?: string[];
}

export interface PodSpecInitContainerSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: string;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: string;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: string;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: string;
}

export interface PodSpecInitContainerSecurityContextSeccompProfile {
    /**
     * Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
     */
    localhostProfile?: string;
    /**
     * Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
     */
    type?: string;
}

export interface PodSpecInitContainerStartupProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.PodSpecInitContainerStartupProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.PodSpecInitContainerStartupProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.PodSpecInitContainerStartupProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.PodSpecInitContainerStartupProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface PodSpecInitContainerStartupProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface PodSpecInitContainerStartupProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface PodSpecInitContainerStartupProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.PodSpecInitContainerStartupProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface PodSpecInitContainerStartupProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface PodSpecInitContainerStartupProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface PodSpecInitContainerVolumeMount {
    /**
     * Path within the container at which the volume should be mounted. Must not contain ':'.
     */
    mountPath: string;
    /**
     * Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional.
     */
    mountPropagation?: string;
    /**
     * This must match the Name of a Volume.
     */
    name: string;
    /**
     * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
     */
    subPath?: string;
}

export interface PodSpecOs {
    /**
     * Name is the name of the operating system. The currently supported values are linux and windows.
     */
    name: string;
}

export interface PodSpecReadinessGate {
    /**
     * refers to a condition in the pod's condition list with matching type.
     */
    conditionType: string;
}

export interface PodSpecSecurityContext {
    /**
     * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- If unset, the Kubelet will not modify the ownership and permissions of any volume.
     */
    fsGroup?: string;
    /**
     * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir.
     */
    fsGroupChangePolicy?: string;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    runAsGroup?: string;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: boolean;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    runAsUser?: string;
    /**
     * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    seLinuxOptions?: outputs.PodSpecSecurityContextSeLinuxOptions;
    /**
     * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     */
    seccompProfile?: outputs.PodSpecSecurityContextSeccompProfile;
    /**
     * A list of groups applied to the first process run in each container, in addition to the container's primary GID. If unspecified, no groups will be added to any container.
     */
    supplementalGroups?: number[];
    /**
     * holds a list of namespaced sysctls used for the pod.
     */
    sysctls?: outputs.PodSpecSecurityContextSysctl[];
    /**
     * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
     */
    windowsOptions?: outputs.PodSpecSecurityContextWindowsOptions;
}

export interface PodSpecSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: string;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: string;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: string;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: string;
}

export interface PodSpecSecurityContextSeccompProfile {
    /**
     * Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
     */
    localhostProfile?: string;
    /**
     * Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
     */
    type?: string;
}

export interface PodSpecSecurityContextSysctl {
    /**
     * Name of a property to set.
     */
    name: string;
    /**
     * Value of a property to set.
     */
    value: string;
}

export interface PodSpecSecurityContextWindowsOptions {
    /**
     * GMSACredentialSpec is where the GMSA admission webhook inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field
     */
    gmsaCredentialSpec?: string;
    /**
     * GMSACredentialSpecName is the name of the GMSA credential spec to use.
     */
    gmsaCredentialSpecName?: string;
    /**
     * HostProcess determines if a container should be run as a 'Host Process' container. Default value is false.
     */
    hostProcess?: boolean;
    /**
     * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUsername?: string;
}

export interface PodSpecToleration {
    /**
     * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
     */
    effect?: string;
    /**
     * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
     */
    key?: string;
    /**
     * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
     */
    operator?: string;
    /**
     * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
     */
    tolerationSeconds?: string;
    /**
     * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
     */
    value?: string;
}

export interface PodSpecTopologySpreadConstraint {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.PodSpecTopologySpreadConstraintLabelSelector[];
    /**
     * is a set of pod label keys to select the pods over which spreading will be calculated.
     */
    matchLabelKeys?: string[];
    /**
     * describes the degree to which pods may be unevenly distributed.
     */
    maxSkew?: number;
    /**
     * indicates a minimum number of eligible domains.
     */
    minDomains?: number;
    /**
     * indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew.
     */
    nodeAffinityPolicy?: string;
    /**
     * indicates how we will treat node taints when calculating pod topology spread skew.
     */
    nodeTaintsPolicy?: string;
    /**
     * the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology.
     */
    topologyKey?: string;
    /**
     * indicates how to deal with a pod if it doesn't satisfy the spread constraint.
     */
    whenUnsatisfiable?: string;
}

export interface PodSpecTopologySpreadConstraintLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.PodSpecTopologySpreadConstraintLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface PodSpecTopologySpreadConstraintLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface PodSpecVolume {
    /**
     * Represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    awsElasticBlockStore?: outputs.PodSpecVolumeAwsElasticBlockStore;
    /**
     * Represents an Azure Data Disk mount on the host and bind mount to the pod.
     */
    azureDisk?: outputs.PodSpecVolumeAzureDisk;
    /**
     * Represents an Azure File Service mount on the host and bind mount to the pod.
     */
    azureFile?: outputs.PodSpecVolumeAzureFile;
    /**
     * Represents a Ceph FS mount on the host that shares a pod's lifetime
     */
    cephFs?: outputs.PodSpecVolumeCephFs;
    /**
     * Represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    cinder?: outputs.PodSpecVolumeCinder;
    /**
     * ConfigMap represents a configMap that should populate this volume
     */
    configMap?: outputs.PodSpecVolumeConfigMap;
    /**
     * Represents a CSI Volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
     */
    csi?: outputs.PodSpecVolumeCsi;
    /**
     * DownwardAPI represents downward API about the pod that should populate this volume
     */
    downwardApi?: outputs.PodSpecVolumeDownwardApi;
    /**
     * EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
     */
    emptyDir?: outputs.PodSpecVolumeEmptyDir;
    /**
     * Represents an ephemeral volume that is handled by a normal storage driver. More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes
     */
    ephemeral?: outputs.PodSpecVolumeEphemeral;
    /**
     * Represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
     */
    fc?: outputs.PodSpecVolumeFc;
    /**
     * Represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.
     */
    flexVolume?: outputs.PodSpecVolumeFlexVolume;
    /**
     * Represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
     */
    flocker?: outputs.PodSpecVolumeFlocker;
    /**
     * Represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    gcePersistentDisk?: outputs.PodSpecVolumeGcePersistentDisk;
    /**
     * GitRepo represents a git repository at a particular revision.
     */
    gitRepo?: outputs.PodSpecVolumeGitRepo;
    /**
     * Represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
     */
    glusterfs?: outputs.PodSpecVolumeGlusterfs;
    /**
     * Represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     */
    hostPath?: outputs.PodSpecVolumeHostPath;
    /**
     * Represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
     */
    iscsi?: outputs.PodSpecVolumeIscsi;
    /**
     * Represents a mounted local storage device such as a disk, partition or directory. Local volumes can only be used as a statically created PersistentVolume. Dynamic provisioning is not supported yet. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
     */
    local?: outputs.PodSpecVolumeLocal;
    /**
     * Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    nfs?: outputs.PodSpecVolumeNfs;
    /**
     * The specification of a persistent volume.
     */
    persistentVolumeClaim?: outputs.PodSpecVolumePersistentVolumeClaim;
    /**
     * Represents a PhotonController persistent disk attached and mounted on kubelets host machine
     */
    photonPersistentDisk?: outputs.PodSpecVolumePhotonPersistentDisk;
    /**
     * Projected represents a single volume that projects several volume sources into the same directory. More info: https://kubernetes.io/docs/concepts/storage/volumes/#projected
     */
    projecteds?: outputs.PodSpecVolumeProjected[];
    /**
     * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
     */
    quobyte?: outputs.PodSpecVolumeQuobyte;
    /**
     * Represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
     */
    rbd?: outputs.PodSpecVolumeRbd;
    /**
     * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    secret?: outputs.PodSpecVolumeSecret;
    /**
     * Represents a vSphere volume attached and mounted on kubelets host machine
     */
    vsphereVolume?: outputs.PodSpecVolumeVsphereVolume;
}

export interface PodSpecVolumeAwsElasticBlockStore {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    fsType?: string;
    /**
     * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
     */
    partition?: number;
    /**
     * Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    readOnly?: boolean;
    /**
     * Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    volumeId: string;
}

export interface PodSpecVolumeAzureDisk {
    /**
     * Host Caching mode: None, Read Only, Read Write.
     */
    cachingMode: string;
    /**
     * The URI the data disk in the blob storage
     */
    dataDiskUri: string;
    /**
     * The Name of the data disk in the blob storage
     */
    diskName: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * The type for the data disk. Expected values: Shared, Dedicated, Managed. Defaults to Shared
     */
    kind: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
}

export interface PodSpecVolumeAzureFile {
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * The name of secret that contains Azure Storage Account Name and Key
     */
    secretName: string;
    /**
     * The namespace of the secret that contains Azure Storage Account Name and Key. For Kubernetes up to 1.18.x the default is the same as the Pod. For Kubernetes 1.19.x and later the default is "default" namespace.
     */
    secretNamespace?: string;
    /**
     * Share Name
     */
    shareName: string;
}

export interface PodSpecVolumeCephFs {
    /**
     * Monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    monitors: string[];
    /**
     * Used as the mounted root, rather than the full Ceph tree, default is /
     */
    path?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to `false` (read/write). More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    readOnly?: boolean;
    /**
     * The path to key ring for User, default is `/etc/ceph/user.secret`. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    secretFile?: string;
    /**
     * Reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    secretRef?: outputs.PodSpecVolumeCephFsSecretRef;
    /**
     * User is the rados user name, default is admin. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    user?: string;
}

export interface PodSpecVolumeCephFsSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface PodSpecVolumeCinder {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    fsType?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write). More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    readOnly?: boolean;
    /**
     * Volume ID used to identify the volume in Cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    volumeId: string;
}

export interface PodSpecVolumeConfigMap {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.PodSpecVolumeConfigMapItem[];
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Optional: Specify whether the ConfigMap or its keys must be defined.
     */
    optional?: boolean;
}

export interface PodSpecVolumeConfigMapItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface PodSpecVolumeCsi {
    /**
     * the name of the volume driver to use. More info: https://kubernetes.io/docs/concepts/storage/volumes/#csi
     */
    driver: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * A reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls.
     */
    nodePublishSecretRef?: outputs.PodSpecVolumeCsiNodePublishSecretRef;
    /**
     * Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
     */
    readOnly?: boolean;
    /**
     * Attributes of the volume to publish.
     */
    volumeAttributes?: {[key: string]: string};
}

export interface PodSpecVolumeCsiNodePublishSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
}

export interface PodSpecVolumeDownwardApi {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.PodSpecVolumeDownwardApiItem[];
}

export interface PodSpecVolumeDownwardApiItem {
    /**
     * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
     */
    fieldRef: outputs.PodSpecVolumeDownwardApiItemFieldRef;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
     */
    path: string;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
     */
    resourceFieldRef?: outputs.PodSpecVolumeDownwardApiItemResourceFieldRef;
}

export interface PodSpecVolumeDownwardApiItemFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface PodSpecVolumeDownwardApiItemResourceFieldRef {
    containerName: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface PodSpecVolumeEmptyDir {
    /**
     * What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be one of ["" "Memory" "HugePages" "HugePages-2Mi" "HugePages-1Gi"]. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
     */
    medium?: string;
    /**
     * Total amount of local storage required for this EmptyDir volume.
     */
    sizeLimit?: string;
}

export interface PodSpecVolumeEphemeral {
    /**
     * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC.
     */
    volumeClaimTemplate: outputs.PodSpecVolumeEphemeralVolumeClaimTemplate;
}

export interface PodSpecVolumeEphemeralVolumeClaimTemplate {
    /**
     * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
     */
    metadata?: outputs.PodSpecVolumeEphemeralVolumeClaimTemplateMetadata;
    /**
     * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
     */
    spec: outputs.PodSpecVolumeEphemeralVolumeClaimTemplateSpec;
}

export interface PodSpecVolumeEphemeralVolumeClaimTemplateMetadata {
    /**
     * An unstructured key value map stored with the persistent volume claim that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the persistent volume claim. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
}

export interface PodSpecVolumeEphemeralVolumeClaimTemplateSpec {
    /**
     * A set of the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
     */
    accessModes: string[];
    /**
     * A list of the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources: outputs.PodSpecVolumeEphemeralVolumeClaimTemplateSpecResources;
    /**
     * A label query over volumes to consider for binding.
     */
    selector?: outputs.PodSpecVolumeEphemeralVolumeClaimTemplateSpecSelector;
    /**
     * Name of the storage class requested by the claim
     */
    storageClassName: string;
    /**
     * Defines what type of volume is required by the claim.
     */
    volumeMode: string;
    /**
     * The binding reference to the PersistentVolume backing this claim.
     */
    volumeName: string;
}

export interface PodSpecVolumeEphemeralVolumeClaimTemplateSpecResources {
    /**
     * Map describing the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits?: {[key: string]: string};
    /**
     * Map describing the minimum amount of compute resources required. If this is omitted for a container, it defaults to `limits` if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    requests?: {[key: string]: string};
}

export interface PodSpecVolumeEphemeralVolumeClaimTemplateSpecSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.PodSpecVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface PodSpecVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface PodSpecVolumeFc {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * FC target lun number
     */
    lun: number;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * FC target worldwide names (WWNs)
     */
    targetWwNs: string[];
}

export interface PodSpecVolumeFlexVolume {
    /**
     * Driver is the name of the driver to use for this volume.
     */
    driver: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
     */
    fsType?: string;
    /**
     * Extra command options if any.
     */
    options?: {[key: string]: string};
    /**
     * Whether to force the ReadOnly setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * Reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
     */
    secretRef?: outputs.PodSpecVolumeFlexVolumeSecretRef;
}

export interface PodSpecVolumeFlexVolumeSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface PodSpecVolumeFlocker {
    /**
     * Name of the dataset stored as metadata > name on the dataset for Flocker should be considered as deprecated
     */
    datasetName?: string;
    /**
     * UUID of the dataset. This is unique identifier of a Flocker dataset
     */
    datasetUuid?: string;
}

export interface PodSpecVolumeGcePersistentDisk {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    fsType?: string;
    /**
     * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    partition?: number;
    /**
     * Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    pdName: string;
    /**
     * Whether to force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    readOnly?: boolean;
}

export interface PodSpecVolumeGitRepo {
    /**
     * Target directory name. Must not contain or start with '..'. If '.' is supplied, the volume directory will be the git repository. Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
     */
    directory?: string;
    /**
     * Repository URL
     */
    repository?: string;
    /**
     * Commit hash for the specified revision.
     */
    revision?: string;
}

export interface PodSpecVolumeGlusterfs {
    /**
     * The endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    endpointsName: string;
    /**
     * The Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    path: string;
    /**
     * Whether to force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    readOnly?: boolean;
}

export interface PodSpecVolumeHostPath {
    /**
     * Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     */
    path?: string;
    /**
     * Type for HostPath volume. Allowed values are "" (default), DirectoryOrCreate, Directory, FileOrCreate, File, Socket, CharDevice and BlockDevice
     */
    type?: string;
}

export interface PodSpecVolumeIscsi {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
     */
    fsType?: string;
    /**
     * Target iSCSI Qualified Name.
     */
    iqn: string;
    /**
     * iSCSI interface name that uses an iSCSI transport. Defaults to 'default' (tcp).
     */
    iscsiInterface?: string;
    /**
     * iSCSI target lun number.
     */
    lun?: number;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false.
     */
    readOnly?: boolean;
    /**
     * iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
     */
    targetPortal: string;
}

export interface PodSpecVolumeLocal {
    /**
     * Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
     */
    path?: string;
}

export interface PodSpecVolumeNfs {
    /**
     * Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    path: string;
    /**
     * Whether to force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    readOnly?: boolean;
    /**
     * Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    server: string;
}

export interface PodSpecVolumePersistentVolumeClaim {
    /**
     * ClaimName is the name of a PersistentVolumeClaim in the same
     */
    claimName?: string;
    /**
     * Will force the ReadOnly setting in VolumeMounts.
     */
    readOnly?: boolean;
}

export interface PodSpecVolumePhotonPersistentDisk {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * ID that identifies Photon Controller persistent disk
     */
    pdId: string;
}

export interface PodSpecVolumeProjected {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * Source of the volume to project in the directory.
     */
    sources: outputs.PodSpecVolumeProjectedSource[];
}

export interface PodSpecVolumeProjectedSource {
    /**
     * ConfigMap represents a configMap that should populate this volume
     */
    configMaps?: outputs.PodSpecVolumeProjectedSourceConfigMap[];
    /**
     * DownwardAPI represents downward API about the pod that should populate this volume
     */
    downwardApi?: outputs.PodSpecVolumeProjectedSourceDownwardApi;
    /**
     * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    secrets?: outputs.PodSpecVolumeProjectedSourceSecret[];
    /**
     * A projected service account token volume
     */
    serviceAccountToken?: outputs.PodSpecVolumeProjectedSourceServiceAccountToken;
}

export interface PodSpecVolumeProjectedSourceConfigMap {
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.PodSpecVolumeProjectedSourceConfigMapItem[];
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Optional: Specify whether the ConfigMap or it's keys must be defined.
     */
    optional?: boolean;
}

export interface PodSpecVolumeProjectedSourceConfigMapItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface PodSpecVolumeProjectedSourceDownwardApi {
    /**
     * Represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
     */
    items?: outputs.PodSpecVolumeProjectedSourceDownwardApiItem[];
}

export interface PodSpecVolumeProjectedSourceDownwardApiItem {
    /**
     * Selects a field of the pod: only annotations, labels, name and namespace are supported.
     */
    fieldRef?: outputs.PodSpecVolumeProjectedSourceDownwardApiItemFieldRef;
    /**
     * Mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
     */
    path: string;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
     */
    resourceFieldRef?: outputs.PodSpecVolumeProjectedSourceDownwardApiItemResourceFieldRef;
}

export interface PodSpecVolumeProjectedSourceDownwardApiItemFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to 'v1'.
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface PodSpecVolumeProjectedSourceDownwardApiItemResourceFieldRef {
    containerName: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface PodSpecVolumeProjectedSourceSecret {
    /**
     * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.PodSpecVolumeProjectedSourceSecretItem[];
    /**
     * Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    name?: string;
    /**
     * Optional: Specify whether the Secret or it's keys must be defined.
     */
    optional?: boolean;
}

export interface PodSpecVolumeProjectedSourceSecretItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface PodSpecVolumeProjectedSourceServiceAccountToken {
    /**
     * Audience is the intended audience of the token
     */
    audience?: string;
    /**
     * ExpirationSeconds is the expected duration of validity of the service account token. It defaults to 1 hour and must be at least 10 minutes (600 seconds).
     */
    expirationSeconds?: number;
    /**
     * Path specifies a relative path to the mount point of the projected volume.
     */
    path: string;
}

export interface PodSpecVolumeQuobyte {
    /**
     * Group to map volume access to Default is no group
     */
    group?: string;
    /**
     * Whether to force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
     */
    registry: string;
    /**
     * User to map volume access to Defaults to serivceaccount user
     */
    user?: string;
    /**
     * Volume is a string that references an already created Quobyte volume by name.
     */
    volume: string;
}

export interface PodSpecVolumeRbd {
    /**
     * A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    cephMonitors: string[];
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
     */
    fsType?: string;
    /**
     * Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    keyring: string;
    /**
     * The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    radosUser?: string;
    /**
     * The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    rbdImage: string;
    /**
     * The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it.
     */
    rbdPool?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    readOnly?: boolean;
    /**
     * Name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    secretRef?: outputs.PodSpecVolumeRbdSecretRef;
}

export interface PodSpecVolumeRbdSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface PodSpecVolumeSecret {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.PodSpecVolumeSecretItem[];
    /**
     * Optional: Specify whether the Secret or its keys must be defined.
     */
    optional?: boolean;
    /**
     * Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    secretName?: string;
}

export interface PodSpecVolumeSecretItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface PodSpecVolumeVsphereVolume {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * Path that identifies vSphere volume vmdk
     */
    volumePath: string;
}

export interface PodTimeouts {
    create?: string;
    delete?: string;
}

export interface PodV1Metadata {
    /**
     * An unstructured key value map stored with the pod that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the pod. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the pod, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the pod must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this pod that can be used by clients to determine when pod has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface PodV1Spec {
    /**
     * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
     */
    activeDeadlineSeconds?: number;
    /**
     * Optional pod scheduling constraints.
     */
    affinity?: outputs.PodV1SpecAffinity;
    /**
     * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
     */
    automountServiceAccountToken?: boolean;
    /**
     * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/
     */
    containers?: outputs.PodV1SpecContainer[];
    /**
     * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy. Optional: Defaults to empty
     */
    dnsConfig?: outputs.PodV1SpecDnsConfig;
    /**
     * Set DNS policy for containers within the pod. Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'. Defaults to 'ClusterFirst'. More info: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy
     */
    dnsPolicy?: string;
    /**
     * Enables generating environment variables for service discovery. Defaults to true.
     */
    enableServiceLinks?: boolean;
    /**
     * List of hosts and IPs that will be injected into the pod's hosts file if specified. Optional: Defaults to empty.
     */
    hostAliases?: outputs.PodV1SpecHostAlias[];
    /**
     * Use the host's ipc namespace. Optional: Defaults to false.
     */
    hostIpc?: boolean;
    /**
     * Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified.
     */
    hostNetwork?: boolean;
    /**
     * Use the host's pid namespace.
     */
    hostPid?: boolean;
    /**
     * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
     */
    hostname: string;
    /**
     * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
     */
    imagePullSecrets?: outputs.PodV1SpecImagePullSecret[];
    /**
     * List of init containers belonging to the pod. Init containers always run to completion and each must complete successfully before the next is started. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
     */
    initContainers?: outputs.PodV1SpecInitContainer[];
    /**
     * NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
     */
    nodeName: string;
    /**
     * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.
     */
    nodeSelector?: {[key: string]: string};
    /**
     * Specifies the OS of the containers in the pod.
     */
    os?: outputs.PodV1SpecOs;
    /**
     * If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
     */
    priorityClassName?: string;
    /**
     * If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md
     */
    readinessGates?: outputs.PodV1SpecReadinessGate[];
    /**
     * Restart policy for all containers within the pod. One of Always, OnFailure, Never. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy.
     */
    restartPolicy?: string;
    /**
     * RuntimeClassName is a feature for selecting the container runtime configuration. The container runtime configuration is used to run a Pod's containers. More info: https://kubernetes.io/docs/concepts/containers/runtime-class
     */
    runtimeClassName?: string;
    /**
     * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
     */
    schedulerName: string;
    /**
     * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty
     */
    securityContext?: outputs.PodV1SpecSecurityContext;
    /**
     * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: http://releases.k8s.io/HEAD/docs/design/service_accounts.md.
     */
    serviceAccountName: string;
    /**
     * Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Defaults to false.
     */
    shareProcessNamespace?: boolean;
    /**
     * If specified, the fully qualified Pod hostname will be "...svc.". If not specified, the pod will not have a domainname at all..
     */
    subdomain?: string;
    /**
     * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process.
     */
    terminationGracePeriodSeconds?: number;
    /**
     * If specified, the pod's toleration. Optional: Defaults to empty
     */
    tolerations?: outputs.PodV1SpecToleration[];
    /**
     * describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints.
     */
    topologySpreadConstraints?: outputs.PodV1SpecTopologySpreadConstraint[];
    /**
     * List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
     */
    volumes?: outputs.PodV1SpecVolume[];
}

export interface PodV1SpecAffinity {
    /**
     * Node affinity scheduling rules for the pod.
     */
    nodeAffinity?: outputs.PodV1SpecAffinityNodeAffinity;
    /**
     * Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)
     */
    podAffinity?: outputs.PodV1SpecAffinityPodAffinity;
    /**
     * Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)
     */
    podAntiAffinity?: outputs.PodV1SpecAffinityPodAntiAffinity;
}

export interface PodV1SpecAffinityNodeAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: outputs.PodV1SpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a node label update), the system may or may not try to eventually evict the pod from its node.
     */
    requiredDuringSchedulingIgnoredDuringExecution?: outputs.PodV1SpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
}

export interface PodV1SpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A node selector term, associated with the corresponding weight.
     */
    preference: outputs.PodV1SpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
    /**
     * weight is in the range 1-100
     */
    weight: number;
}

export interface PodV1SpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
    /**
     * List of node selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.PodV1SpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression[];
    /**
     * A list of node selector requirements by node's fields. The requirements are ANDed.
     */
    matchFields?: outputs.PodV1SpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchField[];
}

export interface PodV1SpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
     */
    operator?: string;
    /**
     * Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface PodV1SpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchField {
    /**
     * The label key that the selector applies to.
     */
    key: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists`, `DoesNotExist`, `Gt`, and `Lt`.
     */
    operator: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface PodV1SpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * List of node selector terms. The terms are ORed.
     */
    nodeSelectorTerms?: outputs.PodV1SpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm[];
}

export interface PodV1SpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm {
    /**
     * List of node selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.PodV1SpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression[];
    /**
     * A list of node selector requirements by node's fields. The requirements are ANDed.
     */
    matchFields?: outputs.PodV1SpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchField[];
}

export interface PodV1SpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
     */
    operator?: string;
    /**
     * Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface PodV1SpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchField {
    /**
     * The label key that the selector applies to.
     */
    key: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists`, `DoesNotExist`, `Gt`, and `Lt`.
     */
    operator: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface PodV1SpecAffinityPodAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: outputs.PodV1SpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.
     */
    requiredDuringSchedulingIgnoredDuringExecutions?: outputs.PodV1SpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
}

export interface PodV1SpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A pod affinity term, associated with the corresponding weight
     */
    podAffinityTerm: outputs.PodV1SpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
    /**
     * weight associated with matching the corresponding podAffinityTerm, in the range 1-100
     */
    weight: number;
}

export interface PodV1SpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.PodV1SpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface PodV1SpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.PodV1SpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface PodV1SpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface PodV1SpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.PodV1SpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface PodV1SpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.PodV1SpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface PodV1SpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface PodV1SpecAffinityPodAntiAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: outputs.PodV1SpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.
     */
    requiredDuringSchedulingIgnoredDuringExecutions?: outputs.PodV1SpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
}

export interface PodV1SpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A pod affinity term, associated with the corresponding weight
     */
    podAffinityTerm: outputs.PodV1SpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
    /**
     * weight associated with matching the corresponding podAffinityTerm, in the range 1-100
     */
    weight: number;
}

export interface PodV1SpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.PodV1SpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface PodV1SpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.PodV1SpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface PodV1SpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface PodV1SpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.PodV1SpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface PodV1SpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.PodV1SpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface PodV1SpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface PodV1SpecContainer {
    /**
     * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    args?: string[];
    /**
     * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    commands?: string[];
    /**
     * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
     */
    envFroms?: outputs.PodV1SpecContainerEnvFrom[];
    /**
     * List of environment variables to set in the container. Cannot be updated.
     */
    envs?: outputs.PodV1SpecContainerEnv[];
    /**
     * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/
     */
    image?: string;
    /**
     * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images
     */
    imagePullPolicy: string;
    /**
     * Actions that the management system should take in response to container lifecycle events
     */
    lifecycle?: outputs.PodV1SpecContainerLifecycle;
    /**
     * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    livenessProbe?: outputs.PodV1SpecContainerLivenessProbe;
    /**
     * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
     */
    name: string;
    /**
     * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
     */
    ports?: outputs.PodV1SpecContainerPort[];
    /**
     * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    readinessProbe?: outputs.PodV1SpecContainerReadinessProbe;
    /**
     * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources?: outputs.PodV1SpecContainerResources;
    /**
     * Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
     */
    securityContext?: outputs.PodV1SpecContainerSecurityContext;
    /**
     * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     */
    startupProbe?: outputs.PodV1SpecContainerStartupProbe;
    /**
     * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.
     */
    stdin?: boolean;
    /**
     * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.
     */
    stdinOnce?: boolean;
    /**
     * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.
     */
    terminationMessagePath?: string;
    /**
     * Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
     */
    terminationMessagePolicy: string;
    /**
     * Whether this container should allocate a TTY for itself
     */
    tty?: boolean;
    /**
     * Pod volumes to mount into the container's filesystem. Cannot be updated.
     */
    volumeMounts?: outputs.PodV1SpecContainerVolumeMount[];
    /**
     * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
     */
    workingDir?: string;
}

export interface PodV1SpecContainerEnv {
    /**
     * Name of the environment variable. Must be a C_IDENTIFIER
     */
    name: string;
    /**
     * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
     */
    value?: string;
    /**
     * Source for the environment variable's value
     */
    valueFrom?: outputs.PodV1SpecContainerEnvValueFrom;
}

export interface PodV1SpecContainerEnvFrom {
    /**
     * The ConfigMap to select from
     */
    configMapRef?: outputs.PodV1SpecContainerEnvFromConfigMapRef;
    /**
     * An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
     */
    prefix?: string;
    /**
     * The Secret to select from
     */
    secretRef?: outputs.PodV1SpecContainerEnvFromSecretRef;
}

export interface PodV1SpecContainerEnvFromConfigMapRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the ConfigMap must be defined
     */
    optional?: boolean;
}

export interface PodV1SpecContainerEnvFromSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the Secret must be defined
     */
    optional?: boolean;
}

export interface PodV1SpecContainerEnvValueFrom {
    /**
     * Selects a key of a ConfigMap.
     */
    configMapKeyRef?: outputs.PodV1SpecContainerEnvValueFromConfigMapKeyRef;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.
     */
    fieldRef?: outputs.PodV1SpecContainerEnvValueFromFieldRef;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
     */
    resourceFieldRef?: outputs.PodV1SpecContainerEnvValueFromResourceFieldRef;
    /**
     * Selects a key of a secret in the pod's namespace.
     */
    secretKeyRef?: outputs.PodV1SpecContainerEnvValueFromSecretKeyRef;
}

export interface PodV1SpecContainerEnvValueFromConfigMapKeyRef {
    /**
     * The key to select.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the ConfigMap or its key must be defined.
     */
    optional?: boolean;
}

export interface PodV1SpecContainerEnvValueFromFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface PodV1SpecContainerEnvValueFromResourceFieldRef {
    containerName?: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface PodV1SpecContainerEnvValueFromSecretKeyRef {
    /**
     * The key of the secret to select from. Must be a valid secret key.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the Secret or its key must be defined.
     */
    optional?: boolean;
}

export interface PodV1SpecContainerLifecycle {
    /**
     * post_start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    postStarts?: outputs.PodV1SpecContainerLifecyclePostStart[];
    /**
     * pre_stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    preStops?: outputs.PodV1SpecContainerLifecyclePreStop[];
}

export interface PodV1SpecContainerLifecyclePostStart {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.PodV1SpecContainerLifecyclePostStartExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.PodV1SpecContainerLifecyclePostStartHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.PodV1SpecContainerLifecyclePostStartTcpSocket[];
}

export interface PodV1SpecContainerLifecyclePostStartExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface PodV1SpecContainerLifecyclePostStartHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.PodV1SpecContainerLifecyclePostStartHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface PodV1SpecContainerLifecyclePostStartHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface PodV1SpecContainerLifecyclePostStartTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface PodV1SpecContainerLifecyclePreStop {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.PodV1SpecContainerLifecyclePreStopExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.PodV1SpecContainerLifecyclePreStopHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.PodV1SpecContainerLifecyclePreStopTcpSocket[];
}

export interface PodV1SpecContainerLifecyclePreStopExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface PodV1SpecContainerLifecyclePreStopHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.PodV1SpecContainerLifecyclePreStopHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface PodV1SpecContainerLifecyclePreStopHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface PodV1SpecContainerLifecyclePreStopTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface PodV1SpecContainerLivenessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.PodV1SpecContainerLivenessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.PodV1SpecContainerLivenessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.PodV1SpecContainerLivenessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.PodV1SpecContainerLivenessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface PodV1SpecContainerLivenessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface PodV1SpecContainerLivenessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface PodV1SpecContainerLivenessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.PodV1SpecContainerLivenessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface PodV1SpecContainerLivenessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface PodV1SpecContainerLivenessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface PodV1SpecContainerPort {
    /**
     * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
     */
    containerPort: number;
    /**
     * What host IP to bind the external port to.
     */
    hostIp?: string;
    /**
     * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
     */
    hostPort?: number;
    /**
     * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
     */
    name?: string;
    /**
     * Protocol for port. Must be UDP or TCP. Defaults to "TCP".
     */
    protocol?: string;
}

export interface PodV1SpecContainerReadinessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.PodV1SpecContainerReadinessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.PodV1SpecContainerReadinessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.PodV1SpecContainerReadinessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.PodV1SpecContainerReadinessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface PodV1SpecContainerReadinessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface PodV1SpecContainerReadinessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface PodV1SpecContainerReadinessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.PodV1SpecContainerReadinessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface PodV1SpecContainerReadinessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface PodV1SpecContainerReadinessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface PodV1SpecContainerResources {
    /**
     * Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits: {[key: string]: string};
    /**
     * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
     */
    requests: {[key: string]: string};
}

export interface PodV1SpecContainerSecurityContext {
    /**
     * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
     */
    allowPrivilegeEscalation?: boolean;
    /**
     * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
     */
    capabilities?: outputs.PodV1SpecContainerSecurityContextCapabilities;
    /**
     * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
     */
    privileged?: boolean;
    /**
     * Whether this container has a read-only root filesystem. Default is false.
     */
    readOnlyRootFilesystem?: boolean;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsGroup?: string;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: boolean;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUser?: string;
    /**
     * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    seLinuxOptions?: outputs.PodV1SpecContainerSecurityContextSeLinuxOptions;
    /**
     * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     */
    seccompProfile?: outputs.PodV1SpecContainerSecurityContextSeccompProfile;
}

export interface PodV1SpecContainerSecurityContextCapabilities {
    /**
     * Added capabilities
     */
    adds?: string[];
    /**
     * Removed capabilities
     */
    drops?: string[];
}

export interface PodV1SpecContainerSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: string;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: string;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: string;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: string;
}

export interface PodV1SpecContainerSecurityContextSeccompProfile {
    /**
     * Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
     */
    localhostProfile?: string;
    /**
     * Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
     */
    type?: string;
}

export interface PodV1SpecContainerStartupProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.PodV1SpecContainerStartupProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.PodV1SpecContainerStartupProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.PodV1SpecContainerStartupProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.PodV1SpecContainerStartupProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface PodV1SpecContainerStartupProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface PodV1SpecContainerStartupProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface PodV1SpecContainerStartupProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.PodV1SpecContainerStartupProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface PodV1SpecContainerStartupProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface PodV1SpecContainerStartupProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface PodV1SpecContainerVolumeMount {
    /**
     * Path within the container at which the volume should be mounted. Must not contain ':'.
     */
    mountPath: string;
    /**
     * Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional.
     */
    mountPropagation?: string;
    /**
     * This must match the Name of a Volume.
     */
    name: string;
    /**
     * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
     */
    subPath?: string;
}

export interface PodV1SpecDnsConfig {
    /**
     * A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
     */
    nameservers?: string[];
    /**
     * A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
     */
    options?: outputs.PodV1SpecDnsConfigOption[];
    /**
     * A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
     */
    searches?: string[];
}

export interface PodV1SpecDnsConfigOption {
    /**
     * Name of the option.
     */
    name: string;
    /**
     * Value of the option. Optional: Defaults to empty.
     */
    value?: string;
}

export interface PodV1SpecHostAlias {
    /**
     * Hostnames for the IP address.
     */
    hostnames: string[];
    /**
     * IP address of the host file entry.
     */
    ip: string;
}

export interface PodV1SpecImagePullSecret {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
}

export interface PodV1SpecInitContainer {
    /**
     * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    args?: string[];
    /**
     * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    commands?: string[];
    /**
     * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
     */
    envFroms?: outputs.PodV1SpecInitContainerEnvFrom[];
    /**
     * List of environment variables to set in the container. Cannot be updated.
     */
    envs?: outputs.PodV1SpecInitContainerEnv[];
    /**
     * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/
     */
    image?: string;
    /**
     * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images
     */
    imagePullPolicy: string;
    /**
     * Actions that the management system should take in response to container lifecycle events
     */
    lifecycle?: outputs.PodV1SpecInitContainerLifecycle;
    /**
     * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    livenessProbe?: outputs.PodV1SpecInitContainerLivenessProbe;
    /**
     * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
     */
    name: string;
    /**
     * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
     */
    ports?: outputs.PodV1SpecInitContainerPort[];
    /**
     * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    readinessProbe?: outputs.PodV1SpecInitContainerReadinessProbe;
    /**
     * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources?: outputs.PodV1SpecInitContainerResources;
    /**
     * Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
     */
    securityContext?: outputs.PodV1SpecInitContainerSecurityContext;
    /**
     * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     */
    startupProbe?: outputs.PodV1SpecInitContainerStartupProbe;
    /**
     * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.
     */
    stdin?: boolean;
    /**
     * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.
     */
    stdinOnce?: boolean;
    /**
     * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.
     */
    terminationMessagePath?: string;
    /**
     * Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
     */
    terminationMessagePolicy: string;
    /**
     * Whether this container should allocate a TTY for itself
     */
    tty?: boolean;
    /**
     * Pod volumes to mount into the container's filesystem. Cannot be updated.
     */
    volumeMounts?: outputs.PodV1SpecInitContainerVolumeMount[];
    /**
     * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
     */
    workingDir?: string;
}

export interface PodV1SpecInitContainerEnv {
    /**
     * Name of the environment variable. Must be a C_IDENTIFIER
     */
    name: string;
    /**
     * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
     */
    value?: string;
    /**
     * Source for the environment variable's value
     */
    valueFrom?: outputs.PodV1SpecInitContainerEnvValueFrom;
}

export interface PodV1SpecInitContainerEnvFrom {
    /**
     * The ConfigMap to select from
     */
    configMapRef?: outputs.PodV1SpecInitContainerEnvFromConfigMapRef;
    /**
     * An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
     */
    prefix?: string;
    /**
     * The Secret to select from
     */
    secretRef?: outputs.PodV1SpecInitContainerEnvFromSecretRef;
}

export interface PodV1SpecInitContainerEnvFromConfigMapRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the ConfigMap must be defined
     */
    optional?: boolean;
}

export interface PodV1SpecInitContainerEnvFromSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the Secret must be defined
     */
    optional?: boolean;
}

export interface PodV1SpecInitContainerEnvValueFrom {
    /**
     * Selects a key of a ConfigMap.
     */
    configMapKeyRef?: outputs.PodV1SpecInitContainerEnvValueFromConfigMapKeyRef;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.
     */
    fieldRef?: outputs.PodV1SpecInitContainerEnvValueFromFieldRef;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
     */
    resourceFieldRef?: outputs.PodV1SpecInitContainerEnvValueFromResourceFieldRef;
    /**
     * Selects a key of a secret in the pod's namespace.
     */
    secretKeyRef?: outputs.PodV1SpecInitContainerEnvValueFromSecretKeyRef;
}

export interface PodV1SpecInitContainerEnvValueFromConfigMapKeyRef {
    /**
     * The key to select.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the ConfigMap or its key must be defined.
     */
    optional?: boolean;
}

export interface PodV1SpecInitContainerEnvValueFromFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface PodV1SpecInitContainerEnvValueFromResourceFieldRef {
    containerName?: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface PodV1SpecInitContainerEnvValueFromSecretKeyRef {
    /**
     * The key of the secret to select from. Must be a valid secret key.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the Secret or its key must be defined.
     */
    optional?: boolean;
}

export interface PodV1SpecInitContainerLifecycle {
    /**
     * post_start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    postStarts?: outputs.PodV1SpecInitContainerLifecyclePostStart[];
    /**
     * pre_stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    preStops?: outputs.PodV1SpecInitContainerLifecyclePreStop[];
}

export interface PodV1SpecInitContainerLifecyclePostStart {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.PodV1SpecInitContainerLifecyclePostStartExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.PodV1SpecInitContainerLifecyclePostStartHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.PodV1SpecInitContainerLifecyclePostStartTcpSocket[];
}

export interface PodV1SpecInitContainerLifecyclePostStartExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface PodV1SpecInitContainerLifecyclePostStartHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.PodV1SpecInitContainerLifecyclePostStartHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface PodV1SpecInitContainerLifecyclePostStartHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface PodV1SpecInitContainerLifecyclePostStartTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface PodV1SpecInitContainerLifecyclePreStop {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.PodV1SpecInitContainerLifecyclePreStopExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.PodV1SpecInitContainerLifecyclePreStopHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.PodV1SpecInitContainerLifecyclePreStopTcpSocket[];
}

export interface PodV1SpecInitContainerLifecyclePreStopExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface PodV1SpecInitContainerLifecyclePreStopHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.PodV1SpecInitContainerLifecyclePreStopHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface PodV1SpecInitContainerLifecyclePreStopHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface PodV1SpecInitContainerLifecyclePreStopTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface PodV1SpecInitContainerLivenessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.PodV1SpecInitContainerLivenessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.PodV1SpecInitContainerLivenessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.PodV1SpecInitContainerLivenessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.PodV1SpecInitContainerLivenessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface PodV1SpecInitContainerLivenessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface PodV1SpecInitContainerLivenessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface PodV1SpecInitContainerLivenessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.PodV1SpecInitContainerLivenessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface PodV1SpecInitContainerLivenessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface PodV1SpecInitContainerLivenessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface PodV1SpecInitContainerPort {
    /**
     * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
     */
    containerPort: number;
    /**
     * What host IP to bind the external port to.
     */
    hostIp?: string;
    /**
     * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
     */
    hostPort?: number;
    /**
     * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
     */
    name?: string;
    /**
     * Protocol for port. Must be UDP or TCP. Defaults to "TCP".
     */
    protocol?: string;
}

export interface PodV1SpecInitContainerReadinessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.PodV1SpecInitContainerReadinessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.PodV1SpecInitContainerReadinessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.PodV1SpecInitContainerReadinessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.PodV1SpecInitContainerReadinessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface PodV1SpecInitContainerReadinessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface PodV1SpecInitContainerReadinessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface PodV1SpecInitContainerReadinessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.PodV1SpecInitContainerReadinessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface PodV1SpecInitContainerReadinessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface PodV1SpecInitContainerReadinessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface PodV1SpecInitContainerResources {
    /**
     * Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits: {[key: string]: string};
    /**
     * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
     */
    requests: {[key: string]: string};
}

export interface PodV1SpecInitContainerSecurityContext {
    /**
     * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
     */
    allowPrivilegeEscalation?: boolean;
    /**
     * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
     */
    capabilities?: outputs.PodV1SpecInitContainerSecurityContextCapabilities;
    /**
     * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
     */
    privileged?: boolean;
    /**
     * Whether this container has a read-only root filesystem. Default is false.
     */
    readOnlyRootFilesystem?: boolean;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsGroup?: string;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: boolean;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUser?: string;
    /**
     * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    seLinuxOptions?: outputs.PodV1SpecInitContainerSecurityContextSeLinuxOptions;
    /**
     * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     */
    seccompProfile?: outputs.PodV1SpecInitContainerSecurityContextSeccompProfile;
}

export interface PodV1SpecInitContainerSecurityContextCapabilities {
    /**
     * Added capabilities
     */
    adds?: string[];
    /**
     * Removed capabilities
     */
    drops?: string[];
}

export interface PodV1SpecInitContainerSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: string;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: string;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: string;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: string;
}

export interface PodV1SpecInitContainerSecurityContextSeccompProfile {
    /**
     * Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
     */
    localhostProfile?: string;
    /**
     * Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
     */
    type?: string;
}

export interface PodV1SpecInitContainerStartupProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.PodV1SpecInitContainerStartupProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.PodV1SpecInitContainerStartupProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.PodV1SpecInitContainerStartupProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.PodV1SpecInitContainerStartupProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface PodV1SpecInitContainerStartupProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface PodV1SpecInitContainerStartupProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface PodV1SpecInitContainerStartupProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.PodV1SpecInitContainerStartupProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface PodV1SpecInitContainerStartupProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface PodV1SpecInitContainerStartupProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface PodV1SpecInitContainerVolumeMount {
    /**
     * Path within the container at which the volume should be mounted. Must not contain ':'.
     */
    mountPath: string;
    /**
     * Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional.
     */
    mountPropagation?: string;
    /**
     * This must match the Name of a Volume.
     */
    name: string;
    /**
     * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
     */
    subPath?: string;
}

export interface PodV1SpecOs {
    /**
     * Name is the name of the operating system. The currently supported values are linux and windows.
     */
    name: string;
}

export interface PodV1SpecReadinessGate {
    /**
     * refers to a condition in the pod's condition list with matching type.
     */
    conditionType: string;
}

export interface PodV1SpecSecurityContext {
    /**
     * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- If unset, the Kubelet will not modify the ownership and permissions of any volume.
     */
    fsGroup?: string;
    /**
     * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir.
     */
    fsGroupChangePolicy?: string;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    runAsGroup?: string;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: boolean;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    runAsUser?: string;
    /**
     * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    seLinuxOptions?: outputs.PodV1SpecSecurityContextSeLinuxOptions;
    /**
     * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     */
    seccompProfile?: outputs.PodV1SpecSecurityContextSeccompProfile;
    /**
     * A list of groups applied to the first process run in each container, in addition to the container's primary GID. If unspecified, no groups will be added to any container.
     */
    supplementalGroups?: number[];
    /**
     * holds a list of namespaced sysctls used for the pod.
     */
    sysctls?: outputs.PodV1SpecSecurityContextSysctl[];
    /**
     * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
     */
    windowsOptions?: outputs.PodV1SpecSecurityContextWindowsOptions;
}

export interface PodV1SpecSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: string;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: string;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: string;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: string;
}

export interface PodV1SpecSecurityContextSeccompProfile {
    /**
     * Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
     */
    localhostProfile?: string;
    /**
     * Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
     */
    type?: string;
}

export interface PodV1SpecSecurityContextSysctl {
    /**
     * Name of a property to set.
     */
    name: string;
    /**
     * Value of a property to set.
     */
    value: string;
}

export interface PodV1SpecSecurityContextWindowsOptions {
    /**
     * GMSACredentialSpec is where the GMSA admission webhook inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field
     */
    gmsaCredentialSpec?: string;
    /**
     * GMSACredentialSpecName is the name of the GMSA credential spec to use.
     */
    gmsaCredentialSpecName?: string;
    /**
     * HostProcess determines if a container should be run as a 'Host Process' container. Default value is false.
     */
    hostProcess?: boolean;
    /**
     * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUsername?: string;
}

export interface PodV1SpecToleration {
    /**
     * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
     */
    effect?: string;
    /**
     * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
     */
    key?: string;
    /**
     * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
     */
    operator?: string;
    /**
     * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
     */
    tolerationSeconds?: string;
    /**
     * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
     */
    value?: string;
}

export interface PodV1SpecTopologySpreadConstraint {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.PodV1SpecTopologySpreadConstraintLabelSelector[];
    /**
     * is a set of pod label keys to select the pods over which spreading will be calculated.
     */
    matchLabelKeys?: string[];
    /**
     * describes the degree to which pods may be unevenly distributed.
     */
    maxSkew?: number;
    /**
     * indicates a minimum number of eligible domains.
     */
    minDomains?: number;
    /**
     * indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew.
     */
    nodeAffinityPolicy?: string;
    /**
     * indicates how we will treat node taints when calculating pod topology spread skew.
     */
    nodeTaintsPolicy?: string;
    /**
     * the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology.
     */
    topologyKey?: string;
    /**
     * indicates how to deal with a pod if it doesn't satisfy the spread constraint.
     */
    whenUnsatisfiable?: string;
}

export interface PodV1SpecTopologySpreadConstraintLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.PodV1SpecTopologySpreadConstraintLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface PodV1SpecTopologySpreadConstraintLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface PodV1SpecVolume {
    /**
     * Represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    awsElasticBlockStore?: outputs.PodV1SpecVolumeAwsElasticBlockStore;
    /**
     * Represents an Azure Data Disk mount on the host and bind mount to the pod.
     */
    azureDisk?: outputs.PodV1SpecVolumeAzureDisk;
    /**
     * Represents an Azure File Service mount on the host and bind mount to the pod.
     */
    azureFile?: outputs.PodV1SpecVolumeAzureFile;
    /**
     * Represents a Ceph FS mount on the host that shares a pod's lifetime
     */
    cephFs?: outputs.PodV1SpecVolumeCephFs;
    /**
     * Represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    cinder?: outputs.PodV1SpecVolumeCinder;
    /**
     * ConfigMap represents a configMap that should populate this volume
     */
    configMap?: outputs.PodV1SpecVolumeConfigMap;
    /**
     * Represents a CSI Volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
     */
    csi?: outputs.PodV1SpecVolumeCsi;
    /**
     * DownwardAPI represents downward API about the pod that should populate this volume
     */
    downwardApi?: outputs.PodV1SpecVolumeDownwardApi;
    /**
     * EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
     */
    emptyDir?: outputs.PodV1SpecVolumeEmptyDir;
    /**
     * Represents an ephemeral volume that is handled by a normal storage driver. More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes
     */
    ephemeral?: outputs.PodV1SpecVolumeEphemeral;
    /**
     * Represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
     */
    fc?: outputs.PodV1SpecVolumeFc;
    /**
     * Represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.
     */
    flexVolume?: outputs.PodV1SpecVolumeFlexVolume;
    /**
     * Represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
     */
    flocker?: outputs.PodV1SpecVolumeFlocker;
    /**
     * Represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    gcePersistentDisk?: outputs.PodV1SpecVolumeGcePersistentDisk;
    /**
     * GitRepo represents a git repository at a particular revision.
     */
    gitRepo?: outputs.PodV1SpecVolumeGitRepo;
    /**
     * Represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
     */
    glusterfs?: outputs.PodV1SpecVolumeGlusterfs;
    /**
     * Represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     */
    hostPath?: outputs.PodV1SpecVolumeHostPath;
    /**
     * Represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
     */
    iscsi?: outputs.PodV1SpecVolumeIscsi;
    /**
     * Represents a mounted local storage device such as a disk, partition or directory. Local volumes can only be used as a statically created PersistentVolume. Dynamic provisioning is not supported yet. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
     */
    local?: outputs.PodV1SpecVolumeLocal;
    /**
     * Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    nfs?: outputs.PodV1SpecVolumeNfs;
    /**
     * The specification of a persistent volume.
     */
    persistentVolumeClaim?: outputs.PodV1SpecVolumePersistentVolumeClaim;
    /**
     * Represents a PhotonController persistent disk attached and mounted on kubelets host machine
     */
    photonPersistentDisk?: outputs.PodV1SpecVolumePhotonPersistentDisk;
    /**
     * Projected represents a single volume that projects several volume sources into the same directory. More info: https://kubernetes.io/docs/concepts/storage/volumes/#projected
     */
    projecteds?: outputs.PodV1SpecVolumeProjected[];
    /**
     * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
     */
    quobyte?: outputs.PodV1SpecVolumeQuobyte;
    /**
     * Represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
     */
    rbd?: outputs.PodV1SpecVolumeRbd;
    /**
     * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    secret?: outputs.PodV1SpecVolumeSecret;
    /**
     * Represents a vSphere volume attached and mounted on kubelets host machine
     */
    vsphereVolume?: outputs.PodV1SpecVolumeVsphereVolume;
}

export interface PodV1SpecVolumeAwsElasticBlockStore {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    fsType?: string;
    /**
     * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
     */
    partition?: number;
    /**
     * Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    readOnly?: boolean;
    /**
     * Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    volumeId: string;
}

export interface PodV1SpecVolumeAzureDisk {
    /**
     * Host Caching mode: None, Read Only, Read Write.
     */
    cachingMode: string;
    /**
     * The URI the data disk in the blob storage
     */
    dataDiskUri: string;
    /**
     * The Name of the data disk in the blob storage
     */
    diskName: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * The type for the data disk. Expected values: Shared, Dedicated, Managed. Defaults to Shared
     */
    kind: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
}

export interface PodV1SpecVolumeAzureFile {
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * The name of secret that contains Azure Storage Account Name and Key
     */
    secretName: string;
    /**
     * The namespace of the secret that contains Azure Storage Account Name and Key. For Kubernetes up to 1.18.x the default is the same as the Pod. For Kubernetes 1.19.x and later the default is "default" namespace.
     */
    secretNamespace?: string;
    /**
     * Share Name
     */
    shareName: string;
}

export interface PodV1SpecVolumeCephFs {
    /**
     * Monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    monitors: string[];
    /**
     * Used as the mounted root, rather than the full Ceph tree, default is /
     */
    path?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to `false` (read/write). More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    readOnly?: boolean;
    /**
     * The path to key ring for User, default is `/etc/ceph/user.secret`. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    secretFile?: string;
    /**
     * Reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    secretRef?: outputs.PodV1SpecVolumeCephFsSecretRef;
    /**
     * User is the rados user name, default is admin. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    user?: string;
}

export interface PodV1SpecVolumeCephFsSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface PodV1SpecVolumeCinder {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    fsType?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write). More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    readOnly?: boolean;
    /**
     * Volume ID used to identify the volume in Cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    volumeId: string;
}

export interface PodV1SpecVolumeConfigMap {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.PodV1SpecVolumeConfigMapItem[];
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Optional: Specify whether the ConfigMap or its keys must be defined.
     */
    optional?: boolean;
}

export interface PodV1SpecVolumeConfigMapItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface PodV1SpecVolumeCsi {
    /**
     * the name of the volume driver to use. More info: https://kubernetes.io/docs/concepts/storage/volumes/#csi
     */
    driver: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * A reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls.
     */
    nodePublishSecretRef?: outputs.PodV1SpecVolumeCsiNodePublishSecretRef;
    /**
     * Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
     */
    readOnly?: boolean;
    /**
     * Attributes of the volume to publish.
     */
    volumeAttributes?: {[key: string]: string};
}

export interface PodV1SpecVolumeCsiNodePublishSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
}

export interface PodV1SpecVolumeDownwardApi {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.PodV1SpecVolumeDownwardApiItem[];
}

export interface PodV1SpecVolumeDownwardApiItem {
    /**
     * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
     */
    fieldRef: outputs.PodV1SpecVolumeDownwardApiItemFieldRef;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
     */
    path: string;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
     */
    resourceFieldRef?: outputs.PodV1SpecVolumeDownwardApiItemResourceFieldRef;
}

export interface PodV1SpecVolumeDownwardApiItemFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface PodV1SpecVolumeDownwardApiItemResourceFieldRef {
    containerName: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface PodV1SpecVolumeEmptyDir {
    /**
     * What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be one of ["" "Memory" "HugePages" "HugePages-2Mi" "HugePages-1Gi"]. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
     */
    medium?: string;
    /**
     * Total amount of local storage required for this EmptyDir volume.
     */
    sizeLimit?: string;
}

export interface PodV1SpecVolumeEphemeral {
    /**
     * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC.
     */
    volumeClaimTemplate: outputs.PodV1SpecVolumeEphemeralVolumeClaimTemplate;
}

export interface PodV1SpecVolumeEphemeralVolumeClaimTemplate {
    /**
     * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
     */
    metadata?: outputs.PodV1SpecVolumeEphemeralVolumeClaimTemplateMetadata;
    /**
     * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
     */
    spec: outputs.PodV1SpecVolumeEphemeralVolumeClaimTemplateSpec;
}

export interface PodV1SpecVolumeEphemeralVolumeClaimTemplateMetadata {
    /**
     * An unstructured key value map stored with the persistent volume claim that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the persistent volume claim. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
}

export interface PodV1SpecVolumeEphemeralVolumeClaimTemplateSpec {
    /**
     * A set of the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
     */
    accessModes: string[];
    /**
     * A list of the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources: outputs.PodV1SpecVolumeEphemeralVolumeClaimTemplateSpecResources;
    /**
     * A label query over volumes to consider for binding.
     */
    selector?: outputs.PodV1SpecVolumeEphemeralVolumeClaimTemplateSpecSelector;
    /**
     * Name of the storage class requested by the claim
     */
    storageClassName: string;
    /**
     * Defines what type of volume is required by the claim.
     */
    volumeMode: string;
    /**
     * The binding reference to the PersistentVolume backing this claim.
     */
    volumeName: string;
}

export interface PodV1SpecVolumeEphemeralVolumeClaimTemplateSpecResources {
    /**
     * Map describing the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits?: {[key: string]: string};
    /**
     * Map describing the minimum amount of compute resources required. If this is omitted for a container, it defaults to `limits` if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    requests?: {[key: string]: string};
}

export interface PodV1SpecVolumeEphemeralVolumeClaimTemplateSpecSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.PodV1SpecVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface PodV1SpecVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface PodV1SpecVolumeFc {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * FC target lun number
     */
    lun: number;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * FC target worldwide names (WWNs)
     */
    targetWwNs: string[];
}

export interface PodV1SpecVolumeFlexVolume {
    /**
     * Driver is the name of the driver to use for this volume.
     */
    driver: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
     */
    fsType?: string;
    /**
     * Extra command options if any.
     */
    options?: {[key: string]: string};
    /**
     * Whether to force the ReadOnly setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * Reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
     */
    secretRef?: outputs.PodV1SpecVolumeFlexVolumeSecretRef;
}

export interface PodV1SpecVolumeFlexVolumeSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface PodV1SpecVolumeFlocker {
    /**
     * Name of the dataset stored as metadata > name on the dataset for Flocker should be considered as deprecated
     */
    datasetName?: string;
    /**
     * UUID of the dataset. This is unique identifier of a Flocker dataset
     */
    datasetUuid?: string;
}

export interface PodV1SpecVolumeGcePersistentDisk {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    fsType?: string;
    /**
     * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    partition?: number;
    /**
     * Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    pdName: string;
    /**
     * Whether to force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    readOnly?: boolean;
}

export interface PodV1SpecVolumeGitRepo {
    /**
     * Target directory name. Must not contain or start with '..'. If '.' is supplied, the volume directory will be the git repository. Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
     */
    directory?: string;
    /**
     * Repository URL
     */
    repository?: string;
    /**
     * Commit hash for the specified revision.
     */
    revision?: string;
}

export interface PodV1SpecVolumeGlusterfs {
    /**
     * The endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    endpointsName: string;
    /**
     * The Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    path: string;
    /**
     * Whether to force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    readOnly?: boolean;
}

export interface PodV1SpecVolumeHostPath {
    /**
     * Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     */
    path?: string;
    /**
     * Type for HostPath volume. Allowed values are "" (default), DirectoryOrCreate, Directory, FileOrCreate, File, Socket, CharDevice and BlockDevice
     */
    type?: string;
}

export interface PodV1SpecVolumeIscsi {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
     */
    fsType?: string;
    /**
     * Target iSCSI Qualified Name.
     */
    iqn: string;
    /**
     * iSCSI interface name that uses an iSCSI transport. Defaults to 'default' (tcp).
     */
    iscsiInterface?: string;
    /**
     * iSCSI target lun number.
     */
    lun?: number;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false.
     */
    readOnly?: boolean;
    /**
     * iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
     */
    targetPortal: string;
}

export interface PodV1SpecVolumeLocal {
    /**
     * Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
     */
    path?: string;
}

export interface PodV1SpecVolumeNfs {
    /**
     * Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    path: string;
    /**
     * Whether to force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    readOnly?: boolean;
    /**
     * Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    server: string;
}

export interface PodV1SpecVolumePersistentVolumeClaim {
    /**
     * ClaimName is the name of a PersistentVolumeClaim in the same
     */
    claimName?: string;
    /**
     * Will force the ReadOnly setting in VolumeMounts.
     */
    readOnly?: boolean;
}

export interface PodV1SpecVolumePhotonPersistentDisk {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * ID that identifies Photon Controller persistent disk
     */
    pdId: string;
}

export interface PodV1SpecVolumeProjected {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * Source of the volume to project in the directory.
     */
    sources: outputs.PodV1SpecVolumeProjectedSource[];
}

export interface PodV1SpecVolumeProjectedSource {
    /**
     * ConfigMap represents a configMap that should populate this volume
     */
    configMaps?: outputs.PodV1SpecVolumeProjectedSourceConfigMap[];
    /**
     * DownwardAPI represents downward API about the pod that should populate this volume
     */
    downwardApi?: outputs.PodV1SpecVolumeProjectedSourceDownwardApi;
    /**
     * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    secrets?: outputs.PodV1SpecVolumeProjectedSourceSecret[];
    /**
     * A projected service account token volume
     */
    serviceAccountToken?: outputs.PodV1SpecVolumeProjectedSourceServiceAccountToken;
}

export interface PodV1SpecVolumeProjectedSourceConfigMap {
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.PodV1SpecVolumeProjectedSourceConfigMapItem[];
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Optional: Specify whether the ConfigMap or it's keys must be defined.
     */
    optional?: boolean;
}

export interface PodV1SpecVolumeProjectedSourceConfigMapItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface PodV1SpecVolumeProjectedSourceDownwardApi {
    /**
     * Represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
     */
    items?: outputs.PodV1SpecVolumeProjectedSourceDownwardApiItem[];
}

export interface PodV1SpecVolumeProjectedSourceDownwardApiItem {
    /**
     * Selects a field of the pod: only annotations, labels, name and namespace are supported.
     */
    fieldRef?: outputs.PodV1SpecVolumeProjectedSourceDownwardApiItemFieldRef;
    /**
     * Mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
     */
    path: string;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
     */
    resourceFieldRef?: outputs.PodV1SpecVolumeProjectedSourceDownwardApiItemResourceFieldRef;
}

export interface PodV1SpecVolumeProjectedSourceDownwardApiItemFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to 'v1'.
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface PodV1SpecVolumeProjectedSourceDownwardApiItemResourceFieldRef {
    containerName: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface PodV1SpecVolumeProjectedSourceSecret {
    /**
     * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.PodV1SpecVolumeProjectedSourceSecretItem[];
    /**
     * Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    name?: string;
    /**
     * Optional: Specify whether the Secret or it's keys must be defined.
     */
    optional?: boolean;
}

export interface PodV1SpecVolumeProjectedSourceSecretItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface PodV1SpecVolumeProjectedSourceServiceAccountToken {
    /**
     * Audience is the intended audience of the token
     */
    audience?: string;
    /**
     * ExpirationSeconds is the expected duration of validity of the service account token. It defaults to 1 hour and must be at least 10 minutes (600 seconds).
     */
    expirationSeconds?: number;
    /**
     * Path specifies a relative path to the mount point of the projected volume.
     */
    path: string;
}

export interface PodV1SpecVolumeQuobyte {
    /**
     * Group to map volume access to Default is no group
     */
    group?: string;
    /**
     * Whether to force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
     */
    registry: string;
    /**
     * User to map volume access to Defaults to serivceaccount user
     */
    user?: string;
    /**
     * Volume is a string that references an already created Quobyte volume by name.
     */
    volume: string;
}

export interface PodV1SpecVolumeRbd {
    /**
     * A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    cephMonitors: string[];
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
     */
    fsType?: string;
    /**
     * Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    keyring: string;
    /**
     * The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    radosUser?: string;
    /**
     * The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    rbdImage: string;
    /**
     * The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it.
     */
    rbdPool?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    readOnly?: boolean;
    /**
     * Name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    secretRef?: outputs.PodV1SpecVolumeRbdSecretRef;
}

export interface PodV1SpecVolumeRbdSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface PodV1SpecVolumeSecret {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.PodV1SpecVolumeSecretItem[];
    /**
     * Optional: Specify whether the Secret or its keys must be defined.
     */
    optional?: boolean;
    /**
     * Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    secretName?: string;
}

export interface PodV1SpecVolumeSecretItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface PodV1SpecVolumeVsphereVolume {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * Path that identifies vSphere volume vmdk
     */
    volumePath: string;
}

export interface PodV1Timeouts {
    create?: string;
    delete?: string;
}

export interface PriorityClassMetadata {
    /**
     * An unstructured key value map stored with the priority class that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the priority class. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the priority class, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * An opaque value that represents the internal version of this priority class that can be used by clients to determine when priority class has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this priority class. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface PriorityClassV1Metadata {
    /**
     * An unstructured key value map stored with the priority class that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the priority class. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the priority class, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * An opaque value that represents the internal version of this priority class that can be used by clients to determine when priority class has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this priority class. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface ReplicationControllerMetadata {
    /**
     * An unstructured key value map stored with the replication controller that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the replication controller. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the replication controller, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the replication controller must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this replication controller that can be used by clients to determine when replication controller has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this replication controller. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface ReplicationControllerSpec {
    /**
     * Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
     */
    minReadySeconds?: number;
    /**
     * The number of desired replicas. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
     */
    replicas?: number;
    /**
     * A label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
     */
    selector: {[key: string]: string};
    /**
     * Describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
     */
    template: outputs.ReplicationControllerSpecTemplate;
}

export interface ReplicationControllerSpecTemplate {
    /**
     * Standard replication controller's template's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
     */
    metadata: outputs.ReplicationControllerSpecTemplateMetadata;
    /**
     * Spec of the pods managed by the replication controller
     */
    spec: outputs.ReplicationControllerSpecTemplateSpec;
}

export interface ReplicationControllerSpecTemplateMetadata {
    /**
     * An unstructured key value map stored with the replication controller's template that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the replication controller's template. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the replication controller's template, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the replication controller's template must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this replication controller's template that can be used by clients to determine when replication controller's template has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this replication controller's template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface ReplicationControllerSpecTemplateSpec {
    /**
     * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
     */
    activeDeadlineSeconds: number;
    /**
     * Optional pod scheduling constraints.
     */
    affinity?: outputs.ReplicationControllerSpecTemplateSpecAffinity;
    /**
     * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
     */
    automountServiceAccountToken?: boolean;
    /**
     * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/
     */
    containers?: outputs.ReplicationControllerSpecTemplateSpecContainer[];
    /**
     * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy. Optional: Defaults to empty
     */
    dnsConfig?: outputs.ReplicationControllerSpecTemplateSpecDnsConfig;
    /**
     * Set DNS policy for containers within the pod. Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'. Defaults to 'ClusterFirst'. More info: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy
     */
    dnsPolicy: string;
    /**
     * Enables generating environment variables for service discovery. Defaults to true.
     */
    enableServiceLinks?: boolean;
    /**
     * List of hosts and IPs that will be injected into the pod's hosts file if specified. Optional: Defaults to empty.
     */
    hostAliases?: outputs.ReplicationControllerSpecTemplateSpecHostAlias[];
    /**
     * Use the host's ipc namespace. Optional: Defaults to false.
     */
    hostIpc: boolean;
    /**
     * Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified.
     */
    hostNetwork: boolean;
    /**
     * Use the host's pid namespace.
     */
    hostPid: boolean;
    /**
     * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
     */
    hostname: string;
    /**
     * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
     */
    imagePullSecrets?: outputs.ReplicationControllerSpecTemplateSpecImagePullSecret[];
    /**
     * List of init containers belonging to the pod. Init containers always run to completion and each must complete successfully before the next is started. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
     */
    initContainers?: outputs.ReplicationControllerSpecTemplateSpecInitContainer[];
    /**
     * NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
     */
    nodeName: string;
    /**
     * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.
     */
    nodeSelector: {[key: string]: string};
    /**
     * Specifies the OS of the containers in the pod.
     */
    os?: outputs.ReplicationControllerSpecTemplateSpecOs;
    /**
     * If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
     */
    priorityClassName: string;
    /**
     * If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md
     */
    readinessGates?: outputs.ReplicationControllerSpecTemplateSpecReadinessGate[];
    /**
     * Restart policy for all containers within the pod. One of Always, OnFailure, Never. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy.
     */
    restartPolicy: string;
    /**
     * RuntimeClassName is a feature for selecting the container runtime configuration. The container runtime configuration is used to run a Pod's containers. More info: https://kubernetes.io/docs/concepts/containers/runtime-class
     */
    runtimeClassName: string;
    /**
     * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
     */
    schedulerName: string;
    /**
     * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty
     */
    securityContext?: outputs.ReplicationControllerSpecTemplateSpecSecurityContext;
    /**
     * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: http://releases.k8s.io/HEAD/docs/design/service_accounts.md.
     */
    serviceAccountName: string;
    /**
     * Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Defaults to false.
     */
    shareProcessNamespace?: boolean;
    /**
     * If specified, the fully qualified Pod hostname will be "...svc.". If not specified, the pod will not have a domainname at all..
     */
    subdomain: string;
    /**
     * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process.
     */
    terminationGracePeriodSeconds: number;
    /**
     * If specified, the pod's toleration. Optional: Defaults to empty
     */
    tolerations?: outputs.ReplicationControllerSpecTemplateSpecToleration[];
    /**
     * describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints.
     */
    topologySpreadConstraints?: outputs.ReplicationControllerSpecTemplateSpecTopologySpreadConstraint[];
    /**
     * List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
     */
    volumes?: outputs.ReplicationControllerSpecTemplateSpecVolume[];
}

export interface ReplicationControllerSpecTemplateSpecAffinity {
    /**
     * Node affinity scheduling rules for the pod.
     */
    nodeAffinity?: outputs.ReplicationControllerSpecTemplateSpecAffinityNodeAffinity;
    /**
     * Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)
     */
    podAffinity?: outputs.ReplicationControllerSpecTemplateSpecAffinityPodAffinity;
    /**
     * Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)
     */
    podAntiAffinity?: outputs.ReplicationControllerSpecTemplateSpecAffinityPodAntiAffinity;
}

export interface ReplicationControllerSpecTemplateSpecAffinityNodeAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: outputs.ReplicationControllerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a node label update), the system may or may not try to eventually evict the pod from its node.
     */
    requiredDuringSchedulingIgnoredDuringExecution?: outputs.ReplicationControllerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
}

export interface ReplicationControllerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A node selector term, associated with the corresponding weight.
     */
    preference: outputs.ReplicationControllerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
    /**
     * weight is in the range 1-100
     */
    weight: number;
}

export interface ReplicationControllerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
    /**
     * List of node selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.ReplicationControllerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression[];
    /**
     * A list of node selector requirements by node's fields. The requirements are ANDed.
     */
    matchFields?: outputs.ReplicationControllerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchField[];
}

export interface ReplicationControllerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
     */
    operator?: string;
    /**
     * Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ReplicationControllerSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchField {
    /**
     * The label key that the selector applies to.
     */
    key: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists`, `DoesNotExist`, `Gt`, and `Lt`.
     */
    operator: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ReplicationControllerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * List of node selector terms. The terms are ORed.
     */
    nodeSelectorTerms?: outputs.ReplicationControllerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm[];
}

export interface ReplicationControllerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm {
    /**
     * List of node selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.ReplicationControllerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression[];
    /**
     * A list of node selector requirements by node's fields. The requirements are ANDed.
     */
    matchFields?: outputs.ReplicationControllerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchField[];
}

export interface ReplicationControllerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
     */
    operator?: string;
    /**
     * Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ReplicationControllerSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchField {
    /**
     * The label key that the selector applies to.
     */
    key: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists`, `DoesNotExist`, `Gt`, and `Lt`.
     */
    operator: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ReplicationControllerSpecTemplateSpecAffinityPodAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: outputs.ReplicationControllerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.
     */
    requiredDuringSchedulingIgnoredDuringExecutions?: outputs.ReplicationControllerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
}

export interface ReplicationControllerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A pod affinity term, associated with the corresponding weight
     */
    podAffinityTerm: outputs.ReplicationControllerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
    /**
     * weight associated with matching the corresponding podAffinityTerm, in the range 1-100
     */
    weight: number;
}

export interface ReplicationControllerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.ReplicationControllerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface ReplicationControllerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.ReplicationControllerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface ReplicationControllerSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ReplicationControllerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.ReplicationControllerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface ReplicationControllerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.ReplicationControllerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface ReplicationControllerSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ReplicationControllerSpecTemplateSpecAffinityPodAntiAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: outputs.ReplicationControllerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.
     */
    requiredDuringSchedulingIgnoredDuringExecutions?: outputs.ReplicationControllerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
}

export interface ReplicationControllerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A pod affinity term, associated with the corresponding weight
     */
    podAffinityTerm: outputs.ReplicationControllerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
    /**
     * weight associated with matching the corresponding podAffinityTerm, in the range 1-100
     */
    weight: number;
}

export interface ReplicationControllerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.ReplicationControllerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface ReplicationControllerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.ReplicationControllerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface ReplicationControllerSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ReplicationControllerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.ReplicationControllerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface ReplicationControllerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.ReplicationControllerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface ReplicationControllerSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ReplicationControllerSpecTemplateSpecContainer {
    /**
     * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    args?: string[];
    /**
     * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    commands?: string[];
    /**
     * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
     */
    envFroms?: outputs.ReplicationControllerSpecTemplateSpecContainerEnvFrom[];
    /**
     * List of environment variables to set in the container. Cannot be updated.
     */
    envs?: outputs.ReplicationControllerSpecTemplateSpecContainerEnv[];
    /**
     * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/
     */
    image?: string;
    /**
     * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images
     */
    imagePullPolicy: string;
    /**
     * Actions that the management system should take in response to container lifecycle events
     */
    lifecycle?: outputs.ReplicationControllerSpecTemplateSpecContainerLifecycle;
    /**
     * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    livenessProbe?: outputs.ReplicationControllerSpecTemplateSpecContainerLivenessProbe;
    /**
     * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
     */
    name: string;
    /**
     * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
     */
    ports?: outputs.ReplicationControllerSpecTemplateSpecContainerPort[];
    /**
     * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    readinessProbe?: outputs.ReplicationControllerSpecTemplateSpecContainerReadinessProbe;
    /**
     * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources?: outputs.ReplicationControllerSpecTemplateSpecContainerResources;
    /**
     * Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
     */
    securityContext?: outputs.ReplicationControllerSpecTemplateSpecContainerSecurityContext;
    /**
     * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     */
    startupProbe?: outputs.ReplicationControllerSpecTemplateSpecContainerStartupProbe;
    /**
     * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.
     */
    stdin?: boolean;
    /**
     * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.
     */
    stdinOnce?: boolean;
    /**
     * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.
     */
    terminationMessagePath?: string;
    /**
     * Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
     */
    terminationMessagePolicy: string;
    /**
     * Whether this container should allocate a TTY for itself
     */
    tty?: boolean;
    /**
     * Pod volumes to mount into the container's filesystem. Cannot be updated.
     */
    volumeMounts?: outputs.ReplicationControllerSpecTemplateSpecContainerVolumeMount[];
    /**
     * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
     */
    workingDir?: string;
}

export interface ReplicationControllerSpecTemplateSpecContainerEnv {
    /**
     * Name of the environment variable. Must be a C_IDENTIFIER
     */
    name: string;
    /**
     * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
     */
    value?: string;
    /**
     * Source for the environment variable's value
     */
    valueFrom?: outputs.ReplicationControllerSpecTemplateSpecContainerEnvValueFrom;
}

export interface ReplicationControllerSpecTemplateSpecContainerEnvFrom {
    /**
     * The ConfigMap to select from
     */
    configMapRef?: outputs.ReplicationControllerSpecTemplateSpecContainerEnvFromConfigMapRef;
    /**
     * An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
     */
    prefix?: string;
    /**
     * The Secret to select from
     */
    secretRef?: outputs.ReplicationControllerSpecTemplateSpecContainerEnvFromSecretRef;
}

export interface ReplicationControllerSpecTemplateSpecContainerEnvFromConfigMapRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the ConfigMap must be defined
     */
    optional?: boolean;
}

export interface ReplicationControllerSpecTemplateSpecContainerEnvFromSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the Secret must be defined
     */
    optional?: boolean;
}

export interface ReplicationControllerSpecTemplateSpecContainerEnvValueFrom {
    /**
     * Selects a key of a ConfigMap.
     */
    configMapKeyRef?: outputs.ReplicationControllerSpecTemplateSpecContainerEnvValueFromConfigMapKeyRef;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.
     */
    fieldRef?: outputs.ReplicationControllerSpecTemplateSpecContainerEnvValueFromFieldRef;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
     */
    resourceFieldRef?: outputs.ReplicationControllerSpecTemplateSpecContainerEnvValueFromResourceFieldRef;
    /**
     * Selects a key of a secret in the pod's namespace.
     */
    secretKeyRef?: outputs.ReplicationControllerSpecTemplateSpecContainerEnvValueFromSecretKeyRef;
}

export interface ReplicationControllerSpecTemplateSpecContainerEnvValueFromConfigMapKeyRef {
    /**
     * The key to select.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the ConfigMap or its key must be defined.
     */
    optional?: boolean;
}

export interface ReplicationControllerSpecTemplateSpecContainerEnvValueFromFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface ReplicationControllerSpecTemplateSpecContainerEnvValueFromResourceFieldRef {
    containerName?: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface ReplicationControllerSpecTemplateSpecContainerEnvValueFromSecretKeyRef {
    /**
     * The key of the secret to select from. Must be a valid secret key.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the Secret or its key must be defined.
     */
    optional?: boolean;
}

export interface ReplicationControllerSpecTemplateSpecContainerLifecycle {
    /**
     * post_start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    postStarts?: outputs.ReplicationControllerSpecTemplateSpecContainerLifecyclePostStart[];
    /**
     * pre_stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    preStops?: outputs.ReplicationControllerSpecTemplateSpecContainerLifecyclePreStop[];
}

export interface ReplicationControllerSpecTemplateSpecContainerLifecyclePostStart {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.ReplicationControllerSpecTemplateSpecContainerLifecyclePostStartExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.ReplicationControllerSpecTemplateSpecContainerLifecyclePostStartHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.ReplicationControllerSpecTemplateSpecContainerLifecyclePostStartTcpSocket[];
}

export interface ReplicationControllerSpecTemplateSpecContainerLifecyclePostStartExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface ReplicationControllerSpecTemplateSpecContainerLifecyclePostStartHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.ReplicationControllerSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface ReplicationControllerSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface ReplicationControllerSpecTemplateSpecContainerLifecyclePostStartTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface ReplicationControllerSpecTemplateSpecContainerLifecyclePreStop {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.ReplicationControllerSpecTemplateSpecContainerLifecyclePreStopExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.ReplicationControllerSpecTemplateSpecContainerLifecyclePreStopHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.ReplicationControllerSpecTemplateSpecContainerLifecyclePreStopTcpSocket[];
}

export interface ReplicationControllerSpecTemplateSpecContainerLifecyclePreStopExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface ReplicationControllerSpecTemplateSpecContainerLifecyclePreStopHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.ReplicationControllerSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface ReplicationControllerSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface ReplicationControllerSpecTemplateSpecContainerLifecyclePreStopTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface ReplicationControllerSpecTemplateSpecContainerLivenessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.ReplicationControllerSpecTemplateSpecContainerLivenessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.ReplicationControllerSpecTemplateSpecContainerLivenessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.ReplicationControllerSpecTemplateSpecContainerLivenessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.ReplicationControllerSpecTemplateSpecContainerLivenessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface ReplicationControllerSpecTemplateSpecContainerLivenessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface ReplicationControllerSpecTemplateSpecContainerLivenessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface ReplicationControllerSpecTemplateSpecContainerLivenessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.ReplicationControllerSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface ReplicationControllerSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface ReplicationControllerSpecTemplateSpecContainerLivenessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface ReplicationControllerSpecTemplateSpecContainerPort {
    /**
     * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
     */
    containerPort: number;
    /**
     * What host IP to bind the external port to.
     */
    hostIp?: string;
    /**
     * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
     */
    hostPort?: number;
    /**
     * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
     */
    name?: string;
    /**
     * Protocol for port. Must be UDP or TCP. Defaults to "TCP".
     */
    protocol?: string;
}

export interface ReplicationControllerSpecTemplateSpecContainerReadinessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.ReplicationControllerSpecTemplateSpecContainerReadinessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.ReplicationControllerSpecTemplateSpecContainerReadinessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.ReplicationControllerSpecTemplateSpecContainerReadinessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.ReplicationControllerSpecTemplateSpecContainerReadinessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface ReplicationControllerSpecTemplateSpecContainerReadinessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface ReplicationControllerSpecTemplateSpecContainerReadinessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface ReplicationControllerSpecTemplateSpecContainerReadinessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.ReplicationControllerSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface ReplicationControllerSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface ReplicationControllerSpecTemplateSpecContainerReadinessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface ReplicationControllerSpecTemplateSpecContainerResources {
    /**
     * Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits: {[key: string]: string};
    /**
     * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
     */
    requests: {[key: string]: string};
}

export interface ReplicationControllerSpecTemplateSpecContainerSecurityContext {
    /**
     * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
     */
    allowPrivilegeEscalation?: boolean;
    /**
     * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
     */
    capabilities?: outputs.ReplicationControllerSpecTemplateSpecContainerSecurityContextCapabilities;
    /**
     * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
     */
    privileged?: boolean;
    /**
     * Whether this container has a read-only root filesystem. Default is false.
     */
    readOnlyRootFilesystem?: boolean;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsGroup?: string;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: boolean;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUser?: string;
    /**
     * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    seLinuxOptions?: outputs.ReplicationControllerSpecTemplateSpecContainerSecurityContextSeLinuxOptions;
    /**
     * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     */
    seccompProfile?: outputs.ReplicationControllerSpecTemplateSpecContainerSecurityContextSeccompProfile;
}

export interface ReplicationControllerSpecTemplateSpecContainerSecurityContextCapabilities {
    /**
     * Added capabilities
     */
    adds?: string[];
    /**
     * Removed capabilities
     */
    drops?: string[];
}

export interface ReplicationControllerSpecTemplateSpecContainerSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: string;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: string;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: string;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: string;
}

export interface ReplicationControllerSpecTemplateSpecContainerSecurityContextSeccompProfile {
    /**
     * Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
     */
    localhostProfile?: string;
    /**
     * Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
     */
    type?: string;
}

export interface ReplicationControllerSpecTemplateSpecContainerStartupProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.ReplicationControllerSpecTemplateSpecContainerStartupProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.ReplicationControllerSpecTemplateSpecContainerStartupProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.ReplicationControllerSpecTemplateSpecContainerStartupProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.ReplicationControllerSpecTemplateSpecContainerStartupProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface ReplicationControllerSpecTemplateSpecContainerStartupProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface ReplicationControllerSpecTemplateSpecContainerStartupProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface ReplicationControllerSpecTemplateSpecContainerStartupProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.ReplicationControllerSpecTemplateSpecContainerStartupProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface ReplicationControllerSpecTemplateSpecContainerStartupProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface ReplicationControllerSpecTemplateSpecContainerStartupProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface ReplicationControllerSpecTemplateSpecContainerVolumeMount {
    /**
     * Path within the container at which the volume should be mounted. Must not contain ':'.
     */
    mountPath: string;
    /**
     * Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional.
     */
    mountPropagation?: string;
    /**
     * This must match the Name of a Volume.
     */
    name: string;
    /**
     * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
     */
    subPath?: string;
}

export interface ReplicationControllerSpecTemplateSpecDnsConfig {
    /**
     * A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
     */
    nameservers?: string[];
    /**
     * A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
     */
    options?: outputs.ReplicationControllerSpecTemplateSpecDnsConfigOption[];
    /**
     * A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
     */
    searches?: string[];
}

export interface ReplicationControllerSpecTemplateSpecDnsConfigOption {
    /**
     * Name of the option.
     */
    name: string;
    /**
     * Value of the option. Optional: Defaults to empty.
     */
    value?: string;
}

export interface ReplicationControllerSpecTemplateSpecHostAlias {
    /**
     * Hostnames for the IP address.
     */
    hostnames: string[];
    /**
     * IP address of the host file entry.
     */
    ip: string;
}

export interface ReplicationControllerSpecTemplateSpecImagePullSecret {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
}

export interface ReplicationControllerSpecTemplateSpecInitContainer {
    /**
     * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    args?: string[];
    /**
     * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    commands?: string[];
    /**
     * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
     */
    envFroms?: outputs.ReplicationControllerSpecTemplateSpecInitContainerEnvFrom[];
    /**
     * List of environment variables to set in the container. Cannot be updated.
     */
    envs?: outputs.ReplicationControllerSpecTemplateSpecInitContainerEnv[];
    /**
     * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/
     */
    image?: string;
    /**
     * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images
     */
    imagePullPolicy: string;
    /**
     * Actions that the management system should take in response to container lifecycle events
     */
    lifecycle?: outputs.ReplicationControllerSpecTemplateSpecInitContainerLifecycle;
    /**
     * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    livenessProbe?: outputs.ReplicationControllerSpecTemplateSpecInitContainerLivenessProbe;
    /**
     * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
     */
    name: string;
    /**
     * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
     */
    ports?: outputs.ReplicationControllerSpecTemplateSpecInitContainerPort[];
    /**
     * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    readinessProbe?: outputs.ReplicationControllerSpecTemplateSpecInitContainerReadinessProbe;
    /**
     * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources?: outputs.ReplicationControllerSpecTemplateSpecInitContainerResources;
    /**
     * Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
     */
    securityContext?: outputs.ReplicationControllerSpecTemplateSpecInitContainerSecurityContext;
    /**
     * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     */
    startupProbe?: outputs.ReplicationControllerSpecTemplateSpecInitContainerStartupProbe;
    /**
     * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.
     */
    stdin?: boolean;
    /**
     * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.
     */
    stdinOnce?: boolean;
    /**
     * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.
     */
    terminationMessagePath?: string;
    /**
     * Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
     */
    terminationMessagePolicy: string;
    /**
     * Whether this container should allocate a TTY for itself
     */
    tty?: boolean;
    /**
     * Pod volumes to mount into the container's filesystem. Cannot be updated.
     */
    volumeMounts?: outputs.ReplicationControllerSpecTemplateSpecInitContainerVolumeMount[];
    /**
     * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
     */
    workingDir?: string;
}

export interface ReplicationControllerSpecTemplateSpecInitContainerEnv {
    /**
     * Name of the environment variable. Must be a C_IDENTIFIER
     */
    name: string;
    /**
     * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
     */
    value?: string;
    /**
     * Source for the environment variable's value
     */
    valueFrom?: outputs.ReplicationControllerSpecTemplateSpecInitContainerEnvValueFrom;
}

export interface ReplicationControllerSpecTemplateSpecInitContainerEnvFrom {
    /**
     * The ConfigMap to select from
     */
    configMapRef?: outputs.ReplicationControllerSpecTemplateSpecInitContainerEnvFromConfigMapRef;
    /**
     * An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
     */
    prefix?: string;
    /**
     * The Secret to select from
     */
    secretRef?: outputs.ReplicationControllerSpecTemplateSpecInitContainerEnvFromSecretRef;
}

export interface ReplicationControllerSpecTemplateSpecInitContainerEnvFromConfigMapRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the ConfigMap must be defined
     */
    optional?: boolean;
}

export interface ReplicationControllerSpecTemplateSpecInitContainerEnvFromSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the Secret must be defined
     */
    optional?: boolean;
}

export interface ReplicationControllerSpecTemplateSpecInitContainerEnvValueFrom {
    /**
     * Selects a key of a ConfigMap.
     */
    configMapKeyRef?: outputs.ReplicationControllerSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRef;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.
     */
    fieldRef?: outputs.ReplicationControllerSpecTemplateSpecInitContainerEnvValueFromFieldRef;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
     */
    resourceFieldRef?: outputs.ReplicationControllerSpecTemplateSpecInitContainerEnvValueFromResourceFieldRef;
    /**
     * Selects a key of a secret in the pod's namespace.
     */
    secretKeyRef?: outputs.ReplicationControllerSpecTemplateSpecInitContainerEnvValueFromSecretKeyRef;
}

export interface ReplicationControllerSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRef {
    /**
     * The key to select.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the ConfigMap or its key must be defined.
     */
    optional?: boolean;
}

export interface ReplicationControllerSpecTemplateSpecInitContainerEnvValueFromFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface ReplicationControllerSpecTemplateSpecInitContainerEnvValueFromResourceFieldRef {
    containerName?: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface ReplicationControllerSpecTemplateSpecInitContainerEnvValueFromSecretKeyRef {
    /**
     * The key of the secret to select from. Must be a valid secret key.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the Secret or its key must be defined.
     */
    optional?: boolean;
}

export interface ReplicationControllerSpecTemplateSpecInitContainerLifecycle {
    /**
     * post_start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    postStarts?: outputs.ReplicationControllerSpecTemplateSpecInitContainerLifecyclePostStart[];
    /**
     * pre_stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    preStops?: outputs.ReplicationControllerSpecTemplateSpecInitContainerLifecyclePreStop[];
}

export interface ReplicationControllerSpecTemplateSpecInitContainerLifecyclePostStart {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.ReplicationControllerSpecTemplateSpecInitContainerLifecyclePostStartExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.ReplicationControllerSpecTemplateSpecInitContainerLifecyclePostStartHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.ReplicationControllerSpecTemplateSpecInitContainerLifecyclePostStartTcpSocket[];
}

export interface ReplicationControllerSpecTemplateSpecInitContainerLifecyclePostStartExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface ReplicationControllerSpecTemplateSpecInitContainerLifecyclePostStartHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.ReplicationControllerSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface ReplicationControllerSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface ReplicationControllerSpecTemplateSpecInitContainerLifecyclePostStartTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface ReplicationControllerSpecTemplateSpecInitContainerLifecyclePreStop {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.ReplicationControllerSpecTemplateSpecInitContainerLifecyclePreStopExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.ReplicationControllerSpecTemplateSpecInitContainerLifecyclePreStopHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.ReplicationControllerSpecTemplateSpecInitContainerLifecyclePreStopTcpSocket[];
}

export interface ReplicationControllerSpecTemplateSpecInitContainerLifecyclePreStopExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface ReplicationControllerSpecTemplateSpecInitContainerLifecyclePreStopHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.ReplicationControllerSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface ReplicationControllerSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface ReplicationControllerSpecTemplateSpecInitContainerLifecyclePreStopTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface ReplicationControllerSpecTemplateSpecInitContainerLivenessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.ReplicationControllerSpecTemplateSpecInitContainerLivenessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.ReplicationControllerSpecTemplateSpecInitContainerLivenessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.ReplicationControllerSpecTemplateSpecInitContainerLivenessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.ReplicationControllerSpecTemplateSpecInitContainerLivenessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface ReplicationControllerSpecTemplateSpecInitContainerLivenessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface ReplicationControllerSpecTemplateSpecInitContainerLivenessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface ReplicationControllerSpecTemplateSpecInitContainerLivenessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.ReplicationControllerSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface ReplicationControllerSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface ReplicationControllerSpecTemplateSpecInitContainerLivenessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface ReplicationControllerSpecTemplateSpecInitContainerPort {
    /**
     * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
     */
    containerPort: number;
    /**
     * What host IP to bind the external port to.
     */
    hostIp?: string;
    /**
     * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
     */
    hostPort?: number;
    /**
     * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
     */
    name?: string;
    /**
     * Protocol for port. Must be UDP or TCP. Defaults to "TCP".
     */
    protocol?: string;
}

export interface ReplicationControllerSpecTemplateSpecInitContainerReadinessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.ReplicationControllerSpecTemplateSpecInitContainerReadinessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.ReplicationControllerSpecTemplateSpecInitContainerReadinessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.ReplicationControllerSpecTemplateSpecInitContainerReadinessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.ReplicationControllerSpecTemplateSpecInitContainerReadinessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface ReplicationControllerSpecTemplateSpecInitContainerReadinessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface ReplicationControllerSpecTemplateSpecInitContainerReadinessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface ReplicationControllerSpecTemplateSpecInitContainerReadinessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.ReplicationControllerSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface ReplicationControllerSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface ReplicationControllerSpecTemplateSpecInitContainerReadinessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface ReplicationControllerSpecTemplateSpecInitContainerResources {
    /**
     * Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits: {[key: string]: string};
    /**
     * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
     */
    requests: {[key: string]: string};
}

export interface ReplicationControllerSpecTemplateSpecInitContainerSecurityContext {
    /**
     * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
     */
    allowPrivilegeEscalation?: boolean;
    /**
     * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
     */
    capabilities?: outputs.ReplicationControllerSpecTemplateSpecInitContainerSecurityContextCapabilities;
    /**
     * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
     */
    privileged?: boolean;
    /**
     * Whether this container has a read-only root filesystem. Default is false.
     */
    readOnlyRootFilesystem?: boolean;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsGroup?: string;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: boolean;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUser?: string;
    /**
     * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    seLinuxOptions?: outputs.ReplicationControllerSpecTemplateSpecInitContainerSecurityContextSeLinuxOptions;
    /**
     * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     */
    seccompProfile?: outputs.ReplicationControllerSpecTemplateSpecInitContainerSecurityContextSeccompProfile;
}

export interface ReplicationControllerSpecTemplateSpecInitContainerSecurityContextCapabilities {
    /**
     * Added capabilities
     */
    adds?: string[];
    /**
     * Removed capabilities
     */
    drops?: string[];
}

export interface ReplicationControllerSpecTemplateSpecInitContainerSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: string;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: string;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: string;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: string;
}

export interface ReplicationControllerSpecTemplateSpecInitContainerSecurityContextSeccompProfile {
    /**
     * Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
     */
    localhostProfile?: string;
    /**
     * Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
     */
    type?: string;
}

export interface ReplicationControllerSpecTemplateSpecInitContainerStartupProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.ReplicationControllerSpecTemplateSpecInitContainerStartupProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.ReplicationControllerSpecTemplateSpecInitContainerStartupProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.ReplicationControllerSpecTemplateSpecInitContainerStartupProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.ReplicationControllerSpecTemplateSpecInitContainerStartupProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface ReplicationControllerSpecTemplateSpecInitContainerStartupProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface ReplicationControllerSpecTemplateSpecInitContainerStartupProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface ReplicationControllerSpecTemplateSpecInitContainerStartupProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.ReplicationControllerSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface ReplicationControllerSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface ReplicationControllerSpecTemplateSpecInitContainerStartupProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface ReplicationControllerSpecTemplateSpecInitContainerVolumeMount {
    /**
     * Path within the container at which the volume should be mounted. Must not contain ':'.
     */
    mountPath: string;
    /**
     * Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional.
     */
    mountPropagation?: string;
    /**
     * This must match the Name of a Volume.
     */
    name: string;
    /**
     * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
     */
    subPath?: string;
}

export interface ReplicationControllerSpecTemplateSpecOs {
    /**
     * Name is the name of the operating system. The currently supported values are linux and windows.
     */
    name: string;
}

export interface ReplicationControllerSpecTemplateSpecReadinessGate {
    /**
     * refers to a condition in the pod's condition list with matching type.
     */
    conditionType: string;
}

export interface ReplicationControllerSpecTemplateSpecSecurityContext {
    /**
     * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- If unset, the Kubelet will not modify the ownership and permissions of any volume.
     */
    fsGroup?: string;
    /**
     * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir.
     */
    fsGroupChangePolicy?: string;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    runAsGroup?: string;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: boolean;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    runAsUser?: string;
    /**
     * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    seLinuxOptions?: outputs.ReplicationControllerSpecTemplateSpecSecurityContextSeLinuxOptions;
    /**
     * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     */
    seccompProfile?: outputs.ReplicationControllerSpecTemplateSpecSecurityContextSeccompProfile;
    /**
     * A list of groups applied to the first process run in each container, in addition to the container's primary GID. If unspecified, no groups will be added to any container.
     */
    supplementalGroups?: number[];
    /**
     * holds a list of namespaced sysctls used for the pod.
     */
    sysctls?: outputs.ReplicationControllerSpecTemplateSpecSecurityContextSysctl[];
    /**
     * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
     */
    windowsOptions?: outputs.ReplicationControllerSpecTemplateSpecSecurityContextWindowsOptions;
}

export interface ReplicationControllerSpecTemplateSpecSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: string;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: string;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: string;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: string;
}

export interface ReplicationControllerSpecTemplateSpecSecurityContextSeccompProfile {
    /**
     * Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
     */
    localhostProfile?: string;
    /**
     * Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
     */
    type?: string;
}

export interface ReplicationControllerSpecTemplateSpecSecurityContextSysctl {
    /**
     * Name of a property to set.
     */
    name: string;
    /**
     * Value of a property to set.
     */
    value: string;
}

export interface ReplicationControllerSpecTemplateSpecSecurityContextWindowsOptions {
    /**
     * GMSACredentialSpec is where the GMSA admission webhook inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field
     */
    gmsaCredentialSpec?: string;
    /**
     * GMSACredentialSpecName is the name of the GMSA credential spec to use.
     */
    gmsaCredentialSpecName?: string;
    /**
     * HostProcess determines if a container should be run as a 'Host Process' container. Default value is false.
     */
    hostProcess?: boolean;
    /**
     * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUsername?: string;
}

export interface ReplicationControllerSpecTemplateSpecToleration {
    /**
     * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
     */
    effect?: string;
    /**
     * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
     */
    key?: string;
    /**
     * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
     */
    operator?: string;
    /**
     * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
     */
    tolerationSeconds?: string;
    /**
     * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
     */
    value?: string;
}

export interface ReplicationControllerSpecTemplateSpecTopologySpreadConstraint {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.ReplicationControllerSpecTemplateSpecTopologySpreadConstraintLabelSelector[];
    /**
     * is a set of pod label keys to select the pods over which spreading will be calculated.
     */
    matchLabelKeys?: string[];
    /**
     * describes the degree to which pods may be unevenly distributed.
     */
    maxSkew?: number;
    /**
     * indicates a minimum number of eligible domains.
     */
    minDomains?: number;
    /**
     * indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew.
     */
    nodeAffinityPolicy?: string;
    /**
     * indicates how we will treat node taints when calculating pod topology spread skew.
     */
    nodeTaintsPolicy?: string;
    /**
     * the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology.
     */
    topologyKey?: string;
    /**
     * indicates how to deal with a pod if it doesn't satisfy the spread constraint.
     */
    whenUnsatisfiable?: string;
}

export interface ReplicationControllerSpecTemplateSpecTopologySpreadConstraintLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.ReplicationControllerSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface ReplicationControllerSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ReplicationControllerSpecTemplateSpecVolume {
    /**
     * Represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    awsElasticBlockStore?: outputs.ReplicationControllerSpecTemplateSpecVolumeAwsElasticBlockStore;
    /**
     * Represents an Azure Data Disk mount on the host and bind mount to the pod.
     */
    azureDisk?: outputs.ReplicationControllerSpecTemplateSpecVolumeAzureDisk;
    /**
     * Represents an Azure File Service mount on the host and bind mount to the pod.
     */
    azureFile?: outputs.ReplicationControllerSpecTemplateSpecVolumeAzureFile;
    /**
     * Represents a Ceph FS mount on the host that shares a pod's lifetime
     */
    cephFs?: outputs.ReplicationControllerSpecTemplateSpecVolumeCephFs;
    /**
     * Represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    cinder?: outputs.ReplicationControllerSpecTemplateSpecVolumeCinder;
    /**
     * ConfigMap represents a configMap that should populate this volume
     */
    configMap?: outputs.ReplicationControllerSpecTemplateSpecVolumeConfigMap;
    /**
     * Represents a CSI Volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
     */
    csi?: outputs.ReplicationControllerSpecTemplateSpecVolumeCsi;
    /**
     * DownwardAPI represents downward API about the pod that should populate this volume
     */
    downwardApi?: outputs.ReplicationControllerSpecTemplateSpecVolumeDownwardApi;
    /**
     * EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
     */
    emptyDir?: outputs.ReplicationControllerSpecTemplateSpecVolumeEmptyDir;
    /**
     * Represents an ephemeral volume that is handled by a normal storage driver. More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes
     */
    ephemeral?: outputs.ReplicationControllerSpecTemplateSpecVolumeEphemeral;
    /**
     * Represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
     */
    fc?: outputs.ReplicationControllerSpecTemplateSpecVolumeFc;
    /**
     * Represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.
     */
    flexVolume?: outputs.ReplicationControllerSpecTemplateSpecVolumeFlexVolume;
    /**
     * Represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
     */
    flocker?: outputs.ReplicationControllerSpecTemplateSpecVolumeFlocker;
    /**
     * Represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    gcePersistentDisk?: outputs.ReplicationControllerSpecTemplateSpecVolumeGcePersistentDisk;
    /**
     * GitRepo represents a git repository at a particular revision.
     */
    gitRepo?: outputs.ReplicationControllerSpecTemplateSpecVolumeGitRepo;
    /**
     * Represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
     */
    glusterfs?: outputs.ReplicationControllerSpecTemplateSpecVolumeGlusterfs;
    /**
     * Represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     */
    hostPath?: outputs.ReplicationControllerSpecTemplateSpecVolumeHostPath;
    /**
     * Represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
     */
    iscsi?: outputs.ReplicationControllerSpecTemplateSpecVolumeIscsi;
    /**
     * Represents a mounted local storage device such as a disk, partition or directory. Local volumes can only be used as a statically created PersistentVolume. Dynamic provisioning is not supported yet. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
     */
    local?: outputs.ReplicationControllerSpecTemplateSpecVolumeLocal;
    /**
     * Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    nfs?: outputs.ReplicationControllerSpecTemplateSpecVolumeNfs;
    /**
     * The specification of a persistent volume.
     */
    persistentVolumeClaim?: outputs.ReplicationControllerSpecTemplateSpecVolumePersistentVolumeClaim;
    /**
     * Represents a PhotonController persistent disk attached and mounted on kubelets host machine
     */
    photonPersistentDisk?: outputs.ReplicationControllerSpecTemplateSpecVolumePhotonPersistentDisk;
    /**
     * Projected represents a single volume that projects several volume sources into the same directory. More info: https://kubernetes.io/docs/concepts/storage/volumes/#projected
     */
    projecteds?: outputs.ReplicationControllerSpecTemplateSpecVolumeProjected[];
    /**
     * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
     */
    quobyte?: outputs.ReplicationControllerSpecTemplateSpecVolumeQuobyte;
    /**
     * Represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
     */
    rbd?: outputs.ReplicationControllerSpecTemplateSpecVolumeRbd;
    /**
     * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    secret?: outputs.ReplicationControllerSpecTemplateSpecVolumeSecret;
    /**
     * Represents a vSphere volume attached and mounted on kubelets host machine
     */
    vsphereVolume?: outputs.ReplicationControllerSpecTemplateSpecVolumeVsphereVolume;
}

export interface ReplicationControllerSpecTemplateSpecVolumeAwsElasticBlockStore {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    fsType?: string;
    /**
     * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
     */
    partition?: number;
    /**
     * Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    readOnly?: boolean;
    /**
     * Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    volumeId: string;
}

export interface ReplicationControllerSpecTemplateSpecVolumeAzureDisk {
    /**
     * Host Caching mode: None, Read Only, Read Write.
     */
    cachingMode: string;
    /**
     * The URI the data disk in the blob storage
     */
    dataDiskUri: string;
    /**
     * The Name of the data disk in the blob storage
     */
    diskName: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * The type for the data disk. Expected values: Shared, Dedicated, Managed. Defaults to Shared
     */
    kind: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
}

export interface ReplicationControllerSpecTemplateSpecVolumeAzureFile {
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * The name of secret that contains Azure Storage Account Name and Key
     */
    secretName: string;
    /**
     * The namespace of the secret that contains Azure Storage Account Name and Key. For Kubernetes up to 1.18.x the default is the same as the Pod. For Kubernetes 1.19.x and later the default is "default" namespace.
     */
    secretNamespace?: string;
    /**
     * Share Name
     */
    shareName: string;
}

export interface ReplicationControllerSpecTemplateSpecVolumeCephFs {
    /**
     * Monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    monitors: string[];
    /**
     * Used as the mounted root, rather than the full Ceph tree, default is /
     */
    path?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to `false` (read/write). More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    readOnly?: boolean;
    /**
     * The path to key ring for User, default is `/etc/ceph/user.secret`. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    secretFile?: string;
    /**
     * Reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    secretRef?: outputs.ReplicationControllerSpecTemplateSpecVolumeCephFsSecretRef;
    /**
     * User is the rados user name, default is admin. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    user?: string;
}

export interface ReplicationControllerSpecTemplateSpecVolumeCephFsSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface ReplicationControllerSpecTemplateSpecVolumeCinder {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    fsType?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write). More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    readOnly?: boolean;
    /**
     * Volume ID used to identify the volume in Cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    volumeId: string;
}

export interface ReplicationControllerSpecTemplateSpecVolumeConfigMap {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.ReplicationControllerSpecTemplateSpecVolumeConfigMapItem[];
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Optional: Specify whether the ConfigMap or its keys must be defined.
     */
    optional?: boolean;
}

export interface ReplicationControllerSpecTemplateSpecVolumeConfigMapItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface ReplicationControllerSpecTemplateSpecVolumeCsi {
    /**
     * the name of the volume driver to use. More info: https://kubernetes.io/docs/concepts/storage/volumes/#csi
     */
    driver: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * A reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls.
     */
    nodePublishSecretRef?: outputs.ReplicationControllerSpecTemplateSpecVolumeCsiNodePublishSecretRef;
    /**
     * Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
     */
    readOnly?: boolean;
    /**
     * Attributes of the volume to publish.
     */
    volumeAttributes?: {[key: string]: string};
}

export interface ReplicationControllerSpecTemplateSpecVolumeCsiNodePublishSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
}

export interface ReplicationControllerSpecTemplateSpecVolumeDownwardApi {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.ReplicationControllerSpecTemplateSpecVolumeDownwardApiItem[];
}

export interface ReplicationControllerSpecTemplateSpecVolumeDownwardApiItem {
    /**
     * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
     */
    fieldRef: outputs.ReplicationControllerSpecTemplateSpecVolumeDownwardApiItemFieldRef;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
     */
    path: string;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
     */
    resourceFieldRef?: outputs.ReplicationControllerSpecTemplateSpecVolumeDownwardApiItemResourceFieldRef;
}

export interface ReplicationControllerSpecTemplateSpecVolumeDownwardApiItemFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface ReplicationControllerSpecTemplateSpecVolumeDownwardApiItemResourceFieldRef {
    containerName: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface ReplicationControllerSpecTemplateSpecVolumeEmptyDir {
    /**
     * What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be one of ["" "Memory" "HugePages" "HugePages-2Mi" "HugePages-1Gi"]. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
     */
    medium?: string;
    /**
     * Total amount of local storage required for this EmptyDir volume.
     */
    sizeLimit?: string;
}

export interface ReplicationControllerSpecTemplateSpecVolumeEphemeral {
    /**
     * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC.
     */
    volumeClaimTemplate: outputs.ReplicationControllerSpecTemplateSpecVolumeEphemeralVolumeClaimTemplate;
}

export interface ReplicationControllerSpecTemplateSpecVolumeEphemeralVolumeClaimTemplate {
    /**
     * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
     */
    metadata?: outputs.ReplicationControllerSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadata;
    /**
     * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
     */
    spec: outputs.ReplicationControllerSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpec;
}

export interface ReplicationControllerSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadata {
    /**
     * An unstructured key value map stored with the persistent volume claim that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the persistent volume claim. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
}

export interface ReplicationControllerSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpec {
    /**
     * A set of the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
     */
    accessModes: string[];
    /**
     * A list of the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources: outputs.ReplicationControllerSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResources;
    /**
     * A label query over volumes to consider for binding.
     */
    selector?: outputs.ReplicationControllerSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelector;
    /**
     * Name of the storage class requested by the claim
     */
    storageClassName: string;
    /**
     * Defines what type of volume is required by the claim.
     */
    volumeMode: string;
    /**
     * The binding reference to the PersistentVolume backing this claim.
     */
    volumeName: string;
}

export interface ReplicationControllerSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResources {
    /**
     * Map describing the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits?: {[key: string]: string};
    /**
     * Map describing the minimum amount of compute resources required. If this is omitted for a container, it defaults to `limits` if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    requests?: {[key: string]: string};
}

export interface ReplicationControllerSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.ReplicationControllerSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface ReplicationControllerSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ReplicationControllerSpecTemplateSpecVolumeFc {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * FC target lun number
     */
    lun: number;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * FC target worldwide names (WWNs)
     */
    targetWwNs: string[];
}

export interface ReplicationControllerSpecTemplateSpecVolumeFlexVolume {
    /**
     * Driver is the name of the driver to use for this volume.
     */
    driver: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
     */
    fsType?: string;
    /**
     * Extra command options if any.
     */
    options?: {[key: string]: string};
    /**
     * Whether to force the ReadOnly setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * Reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
     */
    secretRef?: outputs.ReplicationControllerSpecTemplateSpecVolumeFlexVolumeSecretRef;
}

export interface ReplicationControllerSpecTemplateSpecVolumeFlexVolumeSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface ReplicationControllerSpecTemplateSpecVolumeFlocker {
    /**
     * Name of the dataset stored as metadata > name on the dataset for Flocker should be considered as deprecated
     */
    datasetName?: string;
    /**
     * UUID of the dataset. This is unique identifier of a Flocker dataset
     */
    datasetUuid?: string;
}

export interface ReplicationControllerSpecTemplateSpecVolumeGcePersistentDisk {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    fsType?: string;
    /**
     * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    partition?: number;
    /**
     * Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    pdName: string;
    /**
     * Whether to force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    readOnly?: boolean;
}

export interface ReplicationControllerSpecTemplateSpecVolumeGitRepo {
    /**
     * Target directory name. Must not contain or start with '..'. If '.' is supplied, the volume directory will be the git repository. Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
     */
    directory?: string;
    /**
     * Repository URL
     */
    repository?: string;
    /**
     * Commit hash for the specified revision.
     */
    revision?: string;
}

export interface ReplicationControllerSpecTemplateSpecVolumeGlusterfs {
    /**
     * The endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    endpointsName: string;
    /**
     * The Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    path: string;
    /**
     * Whether to force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    readOnly?: boolean;
}

export interface ReplicationControllerSpecTemplateSpecVolumeHostPath {
    /**
     * Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     */
    path?: string;
    /**
     * Type for HostPath volume. Allowed values are "" (default), DirectoryOrCreate, Directory, FileOrCreate, File, Socket, CharDevice and BlockDevice
     */
    type?: string;
}

export interface ReplicationControllerSpecTemplateSpecVolumeIscsi {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
     */
    fsType?: string;
    /**
     * Target iSCSI Qualified Name.
     */
    iqn: string;
    /**
     * iSCSI interface name that uses an iSCSI transport. Defaults to 'default' (tcp).
     */
    iscsiInterface?: string;
    /**
     * iSCSI target lun number.
     */
    lun?: number;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false.
     */
    readOnly?: boolean;
    /**
     * iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
     */
    targetPortal: string;
}

export interface ReplicationControllerSpecTemplateSpecVolumeLocal {
    /**
     * Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
     */
    path?: string;
}

export interface ReplicationControllerSpecTemplateSpecVolumeNfs {
    /**
     * Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    path: string;
    /**
     * Whether to force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    readOnly?: boolean;
    /**
     * Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    server: string;
}

export interface ReplicationControllerSpecTemplateSpecVolumePersistentVolumeClaim {
    /**
     * ClaimName is the name of a PersistentVolumeClaim in the same
     */
    claimName?: string;
    /**
     * Will force the ReadOnly setting in VolumeMounts.
     */
    readOnly?: boolean;
}

export interface ReplicationControllerSpecTemplateSpecVolumePhotonPersistentDisk {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * ID that identifies Photon Controller persistent disk
     */
    pdId: string;
}

export interface ReplicationControllerSpecTemplateSpecVolumeProjected {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * Source of the volume to project in the directory.
     */
    sources: outputs.ReplicationControllerSpecTemplateSpecVolumeProjectedSource[];
}

export interface ReplicationControllerSpecTemplateSpecVolumeProjectedSource {
    /**
     * ConfigMap represents a configMap that should populate this volume
     */
    configMaps?: outputs.ReplicationControllerSpecTemplateSpecVolumeProjectedSourceConfigMap[];
    /**
     * DownwardAPI represents downward API about the pod that should populate this volume
     */
    downwardApi?: outputs.ReplicationControllerSpecTemplateSpecVolumeProjectedSourceDownwardApi;
    /**
     * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    secrets?: outputs.ReplicationControllerSpecTemplateSpecVolumeProjectedSourceSecret[];
    /**
     * A projected service account token volume
     */
    serviceAccountToken?: outputs.ReplicationControllerSpecTemplateSpecVolumeProjectedSourceServiceAccountToken;
}

export interface ReplicationControllerSpecTemplateSpecVolumeProjectedSourceConfigMap {
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.ReplicationControllerSpecTemplateSpecVolumeProjectedSourceConfigMapItem[];
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Optional: Specify whether the ConfigMap or it's keys must be defined.
     */
    optional?: boolean;
}

export interface ReplicationControllerSpecTemplateSpecVolumeProjectedSourceConfigMapItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface ReplicationControllerSpecTemplateSpecVolumeProjectedSourceDownwardApi {
    /**
     * Represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
     */
    items?: outputs.ReplicationControllerSpecTemplateSpecVolumeProjectedSourceDownwardApiItem[];
}

export interface ReplicationControllerSpecTemplateSpecVolumeProjectedSourceDownwardApiItem {
    /**
     * Selects a field of the pod: only annotations, labels, name and namespace are supported.
     */
    fieldRef?: outputs.ReplicationControllerSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRef;
    /**
     * Mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
     */
    path: string;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
     */
    resourceFieldRef?: outputs.ReplicationControllerSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRef;
}

export interface ReplicationControllerSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to 'v1'.
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface ReplicationControllerSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRef {
    containerName: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface ReplicationControllerSpecTemplateSpecVolumeProjectedSourceSecret {
    /**
     * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.ReplicationControllerSpecTemplateSpecVolumeProjectedSourceSecretItem[];
    /**
     * Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    name?: string;
    /**
     * Optional: Specify whether the Secret or it's keys must be defined.
     */
    optional?: boolean;
}

export interface ReplicationControllerSpecTemplateSpecVolumeProjectedSourceSecretItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface ReplicationControllerSpecTemplateSpecVolumeProjectedSourceServiceAccountToken {
    /**
     * Audience is the intended audience of the token
     */
    audience?: string;
    /**
     * ExpirationSeconds is the expected duration of validity of the service account token. It defaults to 1 hour and must be at least 10 minutes (600 seconds).
     */
    expirationSeconds?: number;
    /**
     * Path specifies a relative path to the mount point of the projected volume.
     */
    path: string;
}

export interface ReplicationControllerSpecTemplateSpecVolumeQuobyte {
    /**
     * Group to map volume access to Default is no group
     */
    group?: string;
    /**
     * Whether to force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
     */
    registry: string;
    /**
     * User to map volume access to Defaults to serivceaccount user
     */
    user?: string;
    /**
     * Volume is a string that references an already created Quobyte volume by name.
     */
    volume: string;
}

export interface ReplicationControllerSpecTemplateSpecVolumeRbd {
    /**
     * A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    cephMonitors: string[];
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
     */
    fsType?: string;
    /**
     * Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    keyring: string;
    /**
     * The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    radosUser?: string;
    /**
     * The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    rbdImage: string;
    /**
     * The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it.
     */
    rbdPool?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    readOnly?: boolean;
    /**
     * Name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    secretRef?: outputs.ReplicationControllerSpecTemplateSpecVolumeRbdSecretRef;
}

export interface ReplicationControllerSpecTemplateSpecVolumeRbdSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface ReplicationControllerSpecTemplateSpecVolumeSecret {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.ReplicationControllerSpecTemplateSpecVolumeSecretItem[];
    /**
     * Optional: Specify whether the Secret or its keys must be defined.
     */
    optional?: boolean;
    /**
     * Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    secretName?: string;
}

export interface ReplicationControllerSpecTemplateSpecVolumeSecretItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface ReplicationControllerSpecTemplateSpecVolumeVsphereVolume {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * Path that identifies vSphere volume vmdk
     */
    volumePath: string;
}

export interface ReplicationControllerTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ReplicationControllerV1Metadata {
    /**
     * An unstructured key value map stored with the replication controller that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the replication controller. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the replication controller, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the replication controller must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this replication controller that can be used by clients to determine when replication controller has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this replication controller. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface ReplicationControllerV1Spec {
    /**
     * Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
     */
    minReadySeconds?: number;
    /**
     * The number of desired replicas. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
     */
    replicas?: number;
    /**
     * A label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
     */
    selector: {[key: string]: string};
    /**
     * Describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
     */
    template: outputs.ReplicationControllerV1SpecTemplate;
}

export interface ReplicationControllerV1SpecTemplate {
    /**
     * Standard replication controller's template's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
     */
    metadata: outputs.ReplicationControllerV1SpecTemplateMetadata;
    /**
     * Spec of the pods managed by the replication controller
     */
    spec: outputs.ReplicationControllerV1SpecTemplateSpec;
}

export interface ReplicationControllerV1SpecTemplateMetadata {
    /**
     * An unstructured key value map stored with the replication controller's template that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the replication controller's template. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the replication controller's template, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the replication controller's template must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this replication controller's template that can be used by clients to determine when replication controller's template has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this replication controller's template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface ReplicationControllerV1SpecTemplateSpec {
    /**
     * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
     */
    activeDeadlineSeconds: number;
    /**
     * Optional pod scheduling constraints.
     */
    affinity?: outputs.ReplicationControllerV1SpecTemplateSpecAffinity;
    /**
     * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
     */
    automountServiceAccountToken?: boolean;
    /**
     * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/
     */
    containers?: outputs.ReplicationControllerV1SpecTemplateSpecContainer[];
    /**
     * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy. Optional: Defaults to empty
     */
    dnsConfig?: outputs.ReplicationControllerV1SpecTemplateSpecDnsConfig;
    /**
     * Set DNS policy for containers within the pod. Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'. Defaults to 'ClusterFirst'. More info: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy
     */
    dnsPolicy: string;
    /**
     * Enables generating environment variables for service discovery. Defaults to true.
     */
    enableServiceLinks?: boolean;
    /**
     * List of hosts and IPs that will be injected into the pod's hosts file if specified. Optional: Defaults to empty.
     */
    hostAliases?: outputs.ReplicationControllerV1SpecTemplateSpecHostAlias[];
    /**
     * Use the host's ipc namespace. Optional: Defaults to false.
     */
    hostIpc: boolean;
    /**
     * Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified.
     */
    hostNetwork: boolean;
    /**
     * Use the host's pid namespace.
     */
    hostPid: boolean;
    /**
     * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
     */
    hostname: string;
    /**
     * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
     */
    imagePullSecrets?: outputs.ReplicationControllerV1SpecTemplateSpecImagePullSecret[];
    /**
     * List of init containers belonging to the pod. Init containers always run to completion and each must complete successfully before the next is started. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
     */
    initContainers?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainer[];
    /**
     * NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
     */
    nodeName: string;
    /**
     * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.
     */
    nodeSelector: {[key: string]: string};
    /**
     * Specifies the OS of the containers in the pod.
     */
    os?: outputs.ReplicationControllerV1SpecTemplateSpecOs;
    /**
     * If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
     */
    priorityClassName: string;
    /**
     * If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md
     */
    readinessGates?: outputs.ReplicationControllerV1SpecTemplateSpecReadinessGate[];
    /**
     * Restart policy for all containers within the pod. One of Always, OnFailure, Never. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy.
     */
    restartPolicy: string;
    /**
     * RuntimeClassName is a feature for selecting the container runtime configuration. The container runtime configuration is used to run a Pod's containers. More info: https://kubernetes.io/docs/concepts/containers/runtime-class
     */
    runtimeClassName: string;
    /**
     * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
     */
    schedulerName: string;
    /**
     * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty
     */
    securityContext?: outputs.ReplicationControllerV1SpecTemplateSpecSecurityContext;
    /**
     * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: http://releases.k8s.io/HEAD/docs/design/service_accounts.md.
     */
    serviceAccountName: string;
    /**
     * Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Defaults to false.
     */
    shareProcessNamespace?: boolean;
    /**
     * If specified, the fully qualified Pod hostname will be "...svc.". If not specified, the pod will not have a domainname at all..
     */
    subdomain: string;
    /**
     * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process.
     */
    terminationGracePeriodSeconds: number;
    /**
     * If specified, the pod's toleration. Optional: Defaults to empty
     */
    tolerations?: outputs.ReplicationControllerV1SpecTemplateSpecToleration[];
    /**
     * describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints.
     */
    topologySpreadConstraints?: outputs.ReplicationControllerV1SpecTemplateSpecTopologySpreadConstraint[];
    /**
     * List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
     */
    volumes?: outputs.ReplicationControllerV1SpecTemplateSpecVolume[];
}

export interface ReplicationControllerV1SpecTemplateSpecAffinity {
    /**
     * Node affinity scheduling rules for the pod.
     */
    nodeAffinity?: outputs.ReplicationControllerV1SpecTemplateSpecAffinityNodeAffinity;
    /**
     * Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)
     */
    podAffinity?: outputs.ReplicationControllerV1SpecTemplateSpecAffinityPodAffinity;
    /**
     * Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)
     */
    podAntiAffinity?: outputs.ReplicationControllerV1SpecTemplateSpecAffinityPodAntiAffinity;
}

export interface ReplicationControllerV1SpecTemplateSpecAffinityNodeAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: outputs.ReplicationControllerV1SpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a node label update), the system may or may not try to eventually evict the pod from its node.
     */
    requiredDuringSchedulingIgnoredDuringExecution?: outputs.ReplicationControllerV1SpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
}

export interface ReplicationControllerV1SpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A node selector term, associated with the corresponding weight.
     */
    preference: outputs.ReplicationControllerV1SpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
    /**
     * weight is in the range 1-100
     */
    weight: number;
}

export interface ReplicationControllerV1SpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
    /**
     * List of node selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.ReplicationControllerV1SpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression[];
    /**
     * A list of node selector requirements by node's fields. The requirements are ANDed.
     */
    matchFields?: outputs.ReplicationControllerV1SpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchField[];
}

export interface ReplicationControllerV1SpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
     */
    operator?: string;
    /**
     * Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ReplicationControllerV1SpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchField {
    /**
     * The label key that the selector applies to.
     */
    key: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists`, `DoesNotExist`, `Gt`, and `Lt`.
     */
    operator: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ReplicationControllerV1SpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * List of node selector terms. The terms are ORed.
     */
    nodeSelectorTerms?: outputs.ReplicationControllerV1SpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm[];
}

export interface ReplicationControllerV1SpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm {
    /**
     * List of node selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.ReplicationControllerV1SpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression[];
    /**
     * A list of node selector requirements by node's fields. The requirements are ANDed.
     */
    matchFields?: outputs.ReplicationControllerV1SpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchField[];
}

export interface ReplicationControllerV1SpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
     */
    operator?: string;
    /**
     * Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ReplicationControllerV1SpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchField {
    /**
     * The label key that the selector applies to.
     */
    key: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists`, `DoesNotExist`, `Gt`, and `Lt`.
     */
    operator: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ReplicationControllerV1SpecTemplateSpecAffinityPodAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: outputs.ReplicationControllerV1SpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.
     */
    requiredDuringSchedulingIgnoredDuringExecutions?: outputs.ReplicationControllerV1SpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
}

export interface ReplicationControllerV1SpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A pod affinity term, associated with the corresponding weight
     */
    podAffinityTerm: outputs.ReplicationControllerV1SpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
    /**
     * weight associated with matching the corresponding podAffinityTerm, in the range 1-100
     */
    weight: number;
}

export interface ReplicationControllerV1SpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.ReplicationControllerV1SpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface ReplicationControllerV1SpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.ReplicationControllerV1SpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface ReplicationControllerV1SpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ReplicationControllerV1SpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.ReplicationControllerV1SpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface ReplicationControllerV1SpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.ReplicationControllerV1SpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface ReplicationControllerV1SpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ReplicationControllerV1SpecTemplateSpecAffinityPodAntiAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: outputs.ReplicationControllerV1SpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.
     */
    requiredDuringSchedulingIgnoredDuringExecutions?: outputs.ReplicationControllerV1SpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
}

export interface ReplicationControllerV1SpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A pod affinity term, associated with the corresponding weight
     */
    podAffinityTerm: outputs.ReplicationControllerV1SpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
    /**
     * weight associated with matching the corresponding podAffinityTerm, in the range 1-100
     */
    weight: number;
}

export interface ReplicationControllerV1SpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.ReplicationControllerV1SpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface ReplicationControllerV1SpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.ReplicationControllerV1SpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface ReplicationControllerV1SpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ReplicationControllerV1SpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.ReplicationControllerV1SpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface ReplicationControllerV1SpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.ReplicationControllerV1SpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface ReplicationControllerV1SpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ReplicationControllerV1SpecTemplateSpecContainer {
    /**
     * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    args?: string[];
    /**
     * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    commands?: string[];
    /**
     * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
     */
    envFroms?: outputs.ReplicationControllerV1SpecTemplateSpecContainerEnvFrom[];
    /**
     * List of environment variables to set in the container. Cannot be updated.
     */
    envs?: outputs.ReplicationControllerV1SpecTemplateSpecContainerEnv[];
    /**
     * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/
     */
    image?: string;
    /**
     * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images
     */
    imagePullPolicy: string;
    /**
     * Actions that the management system should take in response to container lifecycle events
     */
    lifecycle?: outputs.ReplicationControllerV1SpecTemplateSpecContainerLifecycle;
    /**
     * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    livenessProbe?: outputs.ReplicationControllerV1SpecTemplateSpecContainerLivenessProbe;
    /**
     * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
     */
    name: string;
    /**
     * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
     */
    ports?: outputs.ReplicationControllerV1SpecTemplateSpecContainerPort[];
    /**
     * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    readinessProbe?: outputs.ReplicationControllerV1SpecTemplateSpecContainerReadinessProbe;
    /**
     * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources?: outputs.ReplicationControllerV1SpecTemplateSpecContainerResources;
    /**
     * Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
     */
    securityContext?: outputs.ReplicationControllerV1SpecTemplateSpecContainerSecurityContext;
    /**
     * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     */
    startupProbe?: outputs.ReplicationControllerV1SpecTemplateSpecContainerStartupProbe;
    /**
     * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.
     */
    stdin?: boolean;
    /**
     * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.
     */
    stdinOnce?: boolean;
    /**
     * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.
     */
    terminationMessagePath?: string;
    /**
     * Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
     */
    terminationMessagePolicy: string;
    /**
     * Whether this container should allocate a TTY for itself
     */
    tty?: boolean;
    /**
     * Pod volumes to mount into the container's filesystem. Cannot be updated.
     */
    volumeMounts?: outputs.ReplicationControllerV1SpecTemplateSpecContainerVolumeMount[];
    /**
     * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
     */
    workingDir?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecContainerEnv {
    /**
     * Name of the environment variable. Must be a C_IDENTIFIER
     */
    name: string;
    /**
     * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
     */
    value?: string;
    /**
     * Source for the environment variable's value
     */
    valueFrom?: outputs.ReplicationControllerV1SpecTemplateSpecContainerEnvValueFrom;
}

export interface ReplicationControllerV1SpecTemplateSpecContainerEnvFrom {
    /**
     * The ConfigMap to select from
     */
    configMapRef?: outputs.ReplicationControllerV1SpecTemplateSpecContainerEnvFromConfigMapRef;
    /**
     * An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
     */
    prefix?: string;
    /**
     * The Secret to select from
     */
    secretRef?: outputs.ReplicationControllerV1SpecTemplateSpecContainerEnvFromSecretRef;
}

export interface ReplicationControllerV1SpecTemplateSpecContainerEnvFromConfigMapRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the ConfigMap must be defined
     */
    optional?: boolean;
}

export interface ReplicationControllerV1SpecTemplateSpecContainerEnvFromSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the Secret must be defined
     */
    optional?: boolean;
}

export interface ReplicationControllerV1SpecTemplateSpecContainerEnvValueFrom {
    /**
     * Selects a key of a ConfigMap.
     */
    configMapKeyRef?: outputs.ReplicationControllerV1SpecTemplateSpecContainerEnvValueFromConfigMapKeyRef;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.
     */
    fieldRef?: outputs.ReplicationControllerV1SpecTemplateSpecContainerEnvValueFromFieldRef;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
     */
    resourceFieldRef?: outputs.ReplicationControllerV1SpecTemplateSpecContainerEnvValueFromResourceFieldRef;
    /**
     * Selects a key of a secret in the pod's namespace.
     */
    secretKeyRef?: outputs.ReplicationControllerV1SpecTemplateSpecContainerEnvValueFromSecretKeyRef;
}

export interface ReplicationControllerV1SpecTemplateSpecContainerEnvValueFromConfigMapKeyRef {
    /**
     * The key to select.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the ConfigMap or its key must be defined.
     */
    optional?: boolean;
}

export interface ReplicationControllerV1SpecTemplateSpecContainerEnvValueFromFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecContainerEnvValueFromResourceFieldRef {
    containerName?: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface ReplicationControllerV1SpecTemplateSpecContainerEnvValueFromSecretKeyRef {
    /**
     * The key of the secret to select from. Must be a valid secret key.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the Secret or its key must be defined.
     */
    optional?: boolean;
}

export interface ReplicationControllerV1SpecTemplateSpecContainerLifecycle {
    /**
     * post_start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    postStarts?: outputs.ReplicationControllerV1SpecTemplateSpecContainerLifecyclePostStart[];
    /**
     * pre_stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    preStops?: outputs.ReplicationControllerV1SpecTemplateSpecContainerLifecyclePreStop[];
}

export interface ReplicationControllerV1SpecTemplateSpecContainerLifecyclePostStart {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.ReplicationControllerV1SpecTemplateSpecContainerLifecyclePostStartExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.ReplicationControllerV1SpecTemplateSpecContainerLifecyclePostStartHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.ReplicationControllerV1SpecTemplateSpecContainerLifecyclePostStartTcpSocket[];
}

export interface ReplicationControllerV1SpecTemplateSpecContainerLifecyclePostStartExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface ReplicationControllerV1SpecTemplateSpecContainerLifecyclePostStartHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.ReplicationControllerV1SpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecContainerLifecyclePostStartTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface ReplicationControllerV1SpecTemplateSpecContainerLifecyclePreStop {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.ReplicationControllerV1SpecTemplateSpecContainerLifecyclePreStopExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.ReplicationControllerV1SpecTemplateSpecContainerLifecyclePreStopHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.ReplicationControllerV1SpecTemplateSpecContainerLifecyclePreStopTcpSocket[];
}

export interface ReplicationControllerV1SpecTemplateSpecContainerLifecyclePreStopExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface ReplicationControllerV1SpecTemplateSpecContainerLifecyclePreStopHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.ReplicationControllerV1SpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecContainerLifecyclePreStopTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface ReplicationControllerV1SpecTemplateSpecContainerLivenessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.ReplicationControllerV1SpecTemplateSpecContainerLivenessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.ReplicationControllerV1SpecTemplateSpecContainerLivenessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.ReplicationControllerV1SpecTemplateSpecContainerLivenessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.ReplicationControllerV1SpecTemplateSpecContainerLivenessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface ReplicationControllerV1SpecTemplateSpecContainerLivenessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface ReplicationControllerV1SpecTemplateSpecContainerLivenessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecContainerLivenessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.ReplicationControllerV1SpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecContainerLivenessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface ReplicationControllerV1SpecTemplateSpecContainerPort {
    /**
     * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
     */
    containerPort: number;
    /**
     * What host IP to bind the external port to.
     */
    hostIp?: string;
    /**
     * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
     */
    hostPort?: number;
    /**
     * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
     */
    name?: string;
    /**
     * Protocol for port. Must be UDP or TCP. Defaults to "TCP".
     */
    protocol?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecContainerReadinessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.ReplicationControllerV1SpecTemplateSpecContainerReadinessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.ReplicationControllerV1SpecTemplateSpecContainerReadinessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.ReplicationControllerV1SpecTemplateSpecContainerReadinessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.ReplicationControllerV1SpecTemplateSpecContainerReadinessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface ReplicationControllerV1SpecTemplateSpecContainerReadinessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface ReplicationControllerV1SpecTemplateSpecContainerReadinessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecContainerReadinessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.ReplicationControllerV1SpecTemplateSpecContainerReadinessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecContainerReadinessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecContainerReadinessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface ReplicationControllerV1SpecTemplateSpecContainerResources {
    /**
     * Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits: {[key: string]: string};
    /**
     * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
     */
    requests: {[key: string]: string};
}

export interface ReplicationControllerV1SpecTemplateSpecContainerSecurityContext {
    /**
     * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
     */
    allowPrivilegeEscalation?: boolean;
    /**
     * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
     */
    capabilities?: outputs.ReplicationControllerV1SpecTemplateSpecContainerSecurityContextCapabilities;
    /**
     * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
     */
    privileged?: boolean;
    /**
     * Whether this container has a read-only root filesystem. Default is false.
     */
    readOnlyRootFilesystem?: boolean;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsGroup?: string;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: boolean;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUser?: string;
    /**
     * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    seLinuxOptions?: outputs.ReplicationControllerV1SpecTemplateSpecContainerSecurityContextSeLinuxOptions;
    /**
     * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     */
    seccompProfile?: outputs.ReplicationControllerV1SpecTemplateSpecContainerSecurityContextSeccompProfile;
}

export interface ReplicationControllerV1SpecTemplateSpecContainerSecurityContextCapabilities {
    /**
     * Added capabilities
     */
    adds?: string[];
    /**
     * Removed capabilities
     */
    drops?: string[];
}

export interface ReplicationControllerV1SpecTemplateSpecContainerSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: string;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: string;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: string;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecContainerSecurityContextSeccompProfile {
    /**
     * Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
     */
    localhostProfile?: string;
    /**
     * Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
     */
    type?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecContainerStartupProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.ReplicationControllerV1SpecTemplateSpecContainerStartupProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.ReplicationControllerV1SpecTemplateSpecContainerStartupProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.ReplicationControllerV1SpecTemplateSpecContainerStartupProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.ReplicationControllerV1SpecTemplateSpecContainerStartupProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface ReplicationControllerV1SpecTemplateSpecContainerStartupProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface ReplicationControllerV1SpecTemplateSpecContainerStartupProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecContainerStartupProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.ReplicationControllerV1SpecTemplateSpecContainerStartupProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecContainerStartupProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecContainerStartupProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface ReplicationControllerV1SpecTemplateSpecContainerVolumeMount {
    /**
     * Path within the container at which the volume should be mounted. Must not contain ':'.
     */
    mountPath: string;
    /**
     * Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional.
     */
    mountPropagation?: string;
    /**
     * This must match the Name of a Volume.
     */
    name: string;
    /**
     * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
     */
    subPath?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecDnsConfig {
    /**
     * A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
     */
    nameservers?: string[];
    /**
     * A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
     */
    options?: outputs.ReplicationControllerV1SpecTemplateSpecDnsConfigOption[];
    /**
     * A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
     */
    searches?: string[];
}

export interface ReplicationControllerV1SpecTemplateSpecDnsConfigOption {
    /**
     * Name of the option.
     */
    name: string;
    /**
     * Value of the option. Optional: Defaults to empty.
     */
    value?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecHostAlias {
    /**
     * Hostnames for the IP address.
     */
    hostnames: string[];
    /**
     * IP address of the host file entry.
     */
    ip: string;
}

export interface ReplicationControllerV1SpecTemplateSpecImagePullSecret {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainer {
    /**
     * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    args?: string[];
    /**
     * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    commands?: string[];
    /**
     * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
     */
    envFroms?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerEnvFrom[];
    /**
     * List of environment variables to set in the container. Cannot be updated.
     */
    envs?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerEnv[];
    /**
     * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/
     */
    image?: string;
    /**
     * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images
     */
    imagePullPolicy: string;
    /**
     * Actions that the management system should take in response to container lifecycle events
     */
    lifecycle?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerLifecycle;
    /**
     * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    livenessProbe?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerLivenessProbe;
    /**
     * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
     */
    name: string;
    /**
     * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
     */
    ports?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerPort[];
    /**
     * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    readinessProbe?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerReadinessProbe;
    /**
     * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerResources;
    /**
     * Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
     */
    securityContext?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerSecurityContext;
    /**
     * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     */
    startupProbe?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerStartupProbe;
    /**
     * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.
     */
    stdin?: boolean;
    /**
     * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.
     */
    stdinOnce?: boolean;
    /**
     * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.
     */
    terminationMessagePath?: string;
    /**
     * Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
     */
    terminationMessagePolicy: string;
    /**
     * Whether this container should allocate a TTY for itself
     */
    tty?: boolean;
    /**
     * Pod volumes to mount into the container's filesystem. Cannot be updated.
     */
    volumeMounts?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerVolumeMount[];
    /**
     * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
     */
    workingDir?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerEnv {
    /**
     * Name of the environment variable. Must be a C_IDENTIFIER
     */
    name: string;
    /**
     * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
     */
    value?: string;
    /**
     * Source for the environment variable's value
     */
    valueFrom?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerEnvValueFrom;
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerEnvFrom {
    /**
     * The ConfigMap to select from
     */
    configMapRef?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerEnvFromConfigMapRef;
    /**
     * An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
     */
    prefix?: string;
    /**
     * The Secret to select from
     */
    secretRef?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerEnvFromSecretRef;
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerEnvFromConfigMapRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the ConfigMap must be defined
     */
    optional?: boolean;
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerEnvFromSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the Secret must be defined
     */
    optional?: boolean;
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerEnvValueFrom {
    /**
     * Selects a key of a ConfigMap.
     */
    configMapKeyRef?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRef;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.
     */
    fieldRef?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerEnvValueFromFieldRef;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
     */
    resourceFieldRef?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerEnvValueFromResourceFieldRef;
    /**
     * Selects a key of a secret in the pod's namespace.
     */
    secretKeyRef?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerEnvValueFromSecretKeyRef;
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRef {
    /**
     * The key to select.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the ConfigMap or its key must be defined.
     */
    optional?: boolean;
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerEnvValueFromFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerEnvValueFromResourceFieldRef {
    containerName?: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerEnvValueFromSecretKeyRef {
    /**
     * The key of the secret to select from. Must be a valid secret key.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the Secret or its key must be defined.
     */
    optional?: boolean;
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerLifecycle {
    /**
     * post_start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    postStarts?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerLifecyclePostStart[];
    /**
     * pre_stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    preStops?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerLifecyclePreStop[];
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerLifecyclePostStart {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerLifecyclePostStartExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerLifecyclePostStartHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerLifecyclePostStartTcpSocket[];
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerLifecyclePostStartExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerLifecyclePostStartHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerLifecyclePostStartTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerLifecyclePreStop {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerLifecyclePreStopExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerLifecyclePreStopHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerLifecyclePreStopTcpSocket[];
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerLifecyclePreStopExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerLifecyclePreStopHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerLifecyclePreStopTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerLivenessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerLivenessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerLivenessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerLivenessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerLivenessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerLivenessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerLivenessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerLivenessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerLivenessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerPort {
    /**
     * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
     */
    containerPort: number;
    /**
     * What host IP to bind the external port to.
     */
    hostIp?: string;
    /**
     * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
     */
    hostPort?: number;
    /**
     * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
     */
    name?: string;
    /**
     * Protocol for port. Must be UDP or TCP. Defaults to "TCP".
     */
    protocol?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerReadinessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerReadinessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerReadinessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerReadinessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerReadinessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerReadinessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerReadinessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerReadinessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerReadinessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerResources {
    /**
     * Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits: {[key: string]: string};
    /**
     * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
     */
    requests: {[key: string]: string};
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerSecurityContext {
    /**
     * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
     */
    allowPrivilegeEscalation?: boolean;
    /**
     * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
     */
    capabilities?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerSecurityContextCapabilities;
    /**
     * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
     */
    privileged?: boolean;
    /**
     * Whether this container has a read-only root filesystem. Default is false.
     */
    readOnlyRootFilesystem?: boolean;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsGroup?: string;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: boolean;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUser?: string;
    /**
     * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    seLinuxOptions?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerSecurityContextSeLinuxOptions;
    /**
     * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     */
    seccompProfile?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerSecurityContextSeccompProfile;
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerSecurityContextCapabilities {
    /**
     * Added capabilities
     */
    adds?: string[];
    /**
     * Removed capabilities
     */
    drops?: string[];
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: string;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: string;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: string;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerSecurityContextSeccompProfile {
    /**
     * Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
     */
    localhostProfile?: string;
    /**
     * Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
     */
    type?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerStartupProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerStartupProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerStartupProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerStartupProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerStartupProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerStartupProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerStartupProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerStartupProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.ReplicationControllerV1SpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerStartupProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface ReplicationControllerV1SpecTemplateSpecInitContainerVolumeMount {
    /**
     * Path within the container at which the volume should be mounted. Must not contain ':'.
     */
    mountPath: string;
    /**
     * Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional.
     */
    mountPropagation?: string;
    /**
     * This must match the Name of a Volume.
     */
    name: string;
    /**
     * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
     */
    subPath?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecOs {
    /**
     * Name is the name of the operating system. The currently supported values are linux and windows.
     */
    name: string;
}

export interface ReplicationControllerV1SpecTemplateSpecReadinessGate {
    /**
     * refers to a condition in the pod's condition list with matching type.
     */
    conditionType: string;
}

export interface ReplicationControllerV1SpecTemplateSpecSecurityContext {
    /**
     * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- If unset, the Kubelet will not modify the ownership and permissions of any volume.
     */
    fsGroup?: string;
    /**
     * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir.
     */
    fsGroupChangePolicy?: string;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    runAsGroup?: string;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: boolean;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    runAsUser?: string;
    /**
     * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    seLinuxOptions?: outputs.ReplicationControllerV1SpecTemplateSpecSecurityContextSeLinuxOptions;
    /**
     * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     */
    seccompProfile?: outputs.ReplicationControllerV1SpecTemplateSpecSecurityContextSeccompProfile;
    /**
     * A list of groups applied to the first process run in each container, in addition to the container's primary GID. If unspecified, no groups will be added to any container.
     */
    supplementalGroups?: number[];
    /**
     * holds a list of namespaced sysctls used for the pod.
     */
    sysctls?: outputs.ReplicationControllerV1SpecTemplateSpecSecurityContextSysctl[];
    /**
     * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
     */
    windowsOptions?: outputs.ReplicationControllerV1SpecTemplateSpecSecurityContextWindowsOptions;
}

export interface ReplicationControllerV1SpecTemplateSpecSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: string;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: string;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: string;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecSecurityContextSeccompProfile {
    /**
     * Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
     */
    localhostProfile?: string;
    /**
     * Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
     */
    type?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecSecurityContextSysctl {
    /**
     * Name of a property to set.
     */
    name: string;
    /**
     * Value of a property to set.
     */
    value: string;
}

export interface ReplicationControllerV1SpecTemplateSpecSecurityContextWindowsOptions {
    /**
     * GMSACredentialSpec is where the GMSA admission webhook inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field
     */
    gmsaCredentialSpec?: string;
    /**
     * GMSACredentialSpecName is the name of the GMSA credential spec to use.
     */
    gmsaCredentialSpecName?: string;
    /**
     * HostProcess determines if a container should be run as a 'Host Process' container. Default value is false.
     */
    hostProcess?: boolean;
    /**
     * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUsername?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecToleration {
    /**
     * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
     */
    effect?: string;
    /**
     * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
     */
    key?: string;
    /**
     * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
     */
    operator?: string;
    /**
     * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
     */
    tolerationSeconds?: string;
    /**
     * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
     */
    value?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecTopologySpreadConstraint {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.ReplicationControllerV1SpecTemplateSpecTopologySpreadConstraintLabelSelector[];
    /**
     * is a set of pod label keys to select the pods over which spreading will be calculated.
     */
    matchLabelKeys?: string[];
    /**
     * describes the degree to which pods may be unevenly distributed.
     */
    maxSkew?: number;
    /**
     * indicates a minimum number of eligible domains.
     */
    minDomains?: number;
    /**
     * indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew.
     */
    nodeAffinityPolicy?: string;
    /**
     * indicates how we will treat node taints when calculating pod topology spread skew.
     */
    nodeTaintsPolicy?: string;
    /**
     * the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology.
     */
    topologyKey?: string;
    /**
     * indicates how to deal with a pod if it doesn't satisfy the spread constraint.
     */
    whenUnsatisfiable?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecTopologySpreadConstraintLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.ReplicationControllerV1SpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface ReplicationControllerV1SpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ReplicationControllerV1SpecTemplateSpecVolume {
    /**
     * Represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    awsElasticBlockStore?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeAwsElasticBlockStore;
    /**
     * Represents an Azure Data Disk mount on the host and bind mount to the pod.
     */
    azureDisk?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeAzureDisk;
    /**
     * Represents an Azure File Service mount on the host and bind mount to the pod.
     */
    azureFile?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeAzureFile;
    /**
     * Represents a Ceph FS mount on the host that shares a pod's lifetime
     */
    cephFs?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeCephFs;
    /**
     * Represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    cinder?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeCinder;
    /**
     * ConfigMap represents a configMap that should populate this volume
     */
    configMap?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeConfigMap;
    /**
     * Represents a CSI Volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
     */
    csi?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeCsi;
    /**
     * DownwardAPI represents downward API about the pod that should populate this volume
     */
    downwardApi?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeDownwardApi;
    /**
     * EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
     */
    emptyDir?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeEmptyDir;
    /**
     * Represents an ephemeral volume that is handled by a normal storage driver. More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes
     */
    ephemeral?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeEphemeral;
    /**
     * Represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
     */
    fc?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeFc;
    /**
     * Represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.
     */
    flexVolume?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeFlexVolume;
    /**
     * Represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
     */
    flocker?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeFlocker;
    /**
     * Represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    gcePersistentDisk?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeGcePersistentDisk;
    /**
     * GitRepo represents a git repository at a particular revision.
     */
    gitRepo?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeGitRepo;
    /**
     * Represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
     */
    glusterfs?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeGlusterfs;
    /**
     * Represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     */
    hostPath?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeHostPath;
    /**
     * Represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
     */
    iscsi?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeIscsi;
    /**
     * Represents a mounted local storage device such as a disk, partition or directory. Local volumes can only be used as a statically created PersistentVolume. Dynamic provisioning is not supported yet. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
     */
    local?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeLocal;
    /**
     * Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    nfs?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeNfs;
    /**
     * The specification of a persistent volume.
     */
    persistentVolumeClaim?: outputs.ReplicationControllerV1SpecTemplateSpecVolumePersistentVolumeClaim;
    /**
     * Represents a PhotonController persistent disk attached and mounted on kubelets host machine
     */
    photonPersistentDisk?: outputs.ReplicationControllerV1SpecTemplateSpecVolumePhotonPersistentDisk;
    /**
     * Projected represents a single volume that projects several volume sources into the same directory. More info: https://kubernetes.io/docs/concepts/storage/volumes/#projected
     */
    projecteds?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeProjected[];
    /**
     * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
     */
    quobyte?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeQuobyte;
    /**
     * Represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
     */
    rbd?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeRbd;
    /**
     * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    secret?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeSecret;
    /**
     * Represents a vSphere volume attached and mounted on kubelets host machine
     */
    vsphereVolume?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeVsphereVolume;
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeAwsElasticBlockStore {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    fsType?: string;
    /**
     * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
     */
    partition?: number;
    /**
     * Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    readOnly?: boolean;
    /**
     * Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    volumeId: string;
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeAzureDisk {
    /**
     * Host Caching mode: None, Read Only, Read Write.
     */
    cachingMode: string;
    /**
     * The URI the data disk in the blob storage
     */
    dataDiskUri: string;
    /**
     * The Name of the data disk in the blob storage
     */
    diskName: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * The type for the data disk. Expected values: Shared, Dedicated, Managed. Defaults to Shared
     */
    kind: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeAzureFile {
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * The name of secret that contains Azure Storage Account Name and Key
     */
    secretName: string;
    /**
     * The namespace of the secret that contains Azure Storage Account Name and Key. For Kubernetes up to 1.18.x the default is the same as the Pod. For Kubernetes 1.19.x and later the default is "default" namespace.
     */
    secretNamespace?: string;
    /**
     * Share Name
     */
    shareName: string;
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeCephFs {
    /**
     * Monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    monitors: string[];
    /**
     * Used as the mounted root, rather than the full Ceph tree, default is /
     */
    path?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to `false` (read/write). More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    readOnly?: boolean;
    /**
     * The path to key ring for User, default is `/etc/ceph/user.secret`. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    secretFile?: string;
    /**
     * Reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    secretRef?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeCephFsSecretRef;
    /**
     * User is the rados user name, default is admin. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    user?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeCephFsSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeCinder {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    fsType?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write). More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    readOnly?: boolean;
    /**
     * Volume ID used to identify the volume in Cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    volumeId: string;
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeConfigMap {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeConfigMapItem[];
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Optional: Specify whether the ConfigMap or its keys must be defined.
     */
    optional?: boolean;
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeConfigMapItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeCsi {
    /**
     * the name of the volume driver to use. More info: https://kubernetes.io/docs/concepts/storage/volumes/#csi
     */
    driver: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * A reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls.
     */
    nodePublishSecretRef?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeCsiNodePublishSecretRef;
    /**
     * Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
     */
    readOnly?: boolean;
    /**
     * Attributes of the volume to publish.
     */
    volumeAttributes?: {[key: string]: string};
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeCsiNodePublishSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeDownwardApi {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeDownwardApiItem[];
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeDownwardApiItem {
    /**
     * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
     */
    fieldRef: outputs.ReplicationControllerV1SpecTemplateSpecVolumeDownwardApiItemFieldRef;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
     */
    path: string;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
     */
    resourceFieldRef?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeDownwardApiItemResourceFieldRef;
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeDownwardApiItemFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeDownwardApiItemResourceFieldRef {
    containerName: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeEmptyDir {
    /**
     * What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be one of ["" "Memory" "HugePages" "HugePages-2Mi" "HugePages-1Gi"]. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
     */
    medium?: string;
    /**
     * Total amount of local storage required for this EmptyDir volume.
     */
    sizeLimit?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeEphemeral {
    /**
     * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC.
     */
    volumeClaimTemplate: outputs.ReplicationControllerV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplate;
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplate {
    /**
     * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
     */
    metadata?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadata;
    /**
     * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
     */
    spec: outputs.ReplicationControllerV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpec;
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadata {
    /**
     * An unstructured key value map stored with the persistent volume claim that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the persistent volume claim. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpec {
    /**
     * A set of the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
     */
    accessModes: string[];
    /**
     * A list of the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources: outputs.ReplicationControllerV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResources;
    /**
     * A label query over volumes to consider for binding.
     */
    selector?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelector;
    /**
     * Name of the storage class requested by the claim
     */
    storageClassName: string;
    /**
     * Defines what type of volume is required by the claim.
     */
    volumeMode: string;
    /**
     * The binding reference to the PersistentVolume backing this claim.
     */
    volumeName: string;
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResources {
    /**
     * Map describing the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits?: {[key: string]: string};
    /**
     * Map describing the minimum amount of compute resources required. If this is omitted for a container, it defaults to `limits` if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    requests?: {[key: string]: string};
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeFc {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * FC target lun number
     */
    lun: number;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * FC target worldwide names (WWNs)
     */
    targetWwNs: string[];
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeFlexVolume {
    /**
     * Driver is the name of the driver to use for this volume.
     */
    driver: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
     */
    fsType?: string;
    /**
     * Extra command options if any.
     */
    options?: {[key: string]: string};
    /**
     * Whether to force the ReadOnly setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * Reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
     */
    secretRef?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeFlexVolumeSecretRef;
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeFlexVolumeSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeFlocker {
    /**
     * Name of the dataset stored as metadata > name on the dataset for Flocker should be considered as deprecated
     */
    datasetName?: string;
    /**
     * UUID of the dataset. This is unique identifier of a Flocker dataset
     */
    datasetUuid?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeGcePersistentDisk {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    fsType?: string;
    /**
     * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    partition?: number;
    /**
     * Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    pdName: string;
    /**
     * Whether to force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    readOnly?: boolean;
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeGitRepo {
    /**
     * Target directory name. Must not contain or start with '..'. If '.' is supplied, the volume directory will be the git repository. Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
     */
    directory?: string;
    /**
     * Repository URL
     */
    repository?: string;
    /**
     * Commit hash for the specified revision.
     */
    revision?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeGlusterfs {
    /**
     * The endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    endpointsName: string;
    /**
     * The Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    path: string;
    /**
     * Whether to force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    readOnly?: boolean;
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeHostPath {
    /**
     * Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     */
    path?: string;
    /**
     * Type for HostPath volume. Allowed values are "" (default), DirectoryOrCreate, Directory, FileOrCreate, File, Socket, CharDevice and BlockDevice
     */
    type?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeIscsi {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
     */
    fsType?: string;
    /**
     * Target iSCSI Qualified Name.
     */
    iqn: string;
    /**
     * iSCSI interface name that uses an iSCSI transport. Defaults to 'default' (tcp).
     */
    iscsiInterface?: string;
    /**
     * iSCSI target lun number.
     */
    lun?: number;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false.
     */
    readOnly?: boolean;
    /**
     * iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
     */
    targetPortal: string;
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeLocal {
    /**
     * Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
     */
    path?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeNfs {
    /**
     * Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    path: string;
    /**
     * Whether to force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    readOnly?: boolean;
    /**
     * Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    server: string;
}

export interface ReplicationControllerV1SpecTemplateSpecVolumePersistentVolumeClaim {
    /**
     * ClaimName is the name of a PersistentVolumeClaim in the same
     */
    claimName?: string;
    /**
     * Will force the ReadOnly setting in VolumeMounts.
     */
    readOnly?: boolean;
}

export interface ReplicationControllerV1SpecTemplateSpecVolumePhotonPersistentDisk {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * ID that identifies Photon Controller persistent disk
     */
    pdId: string;
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeProjected {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * Source of the volume to project in the directory.
     */
    sources: outputs.ReplicationControllerV1SpecTemplateSpecVolumeProjectedSource[];
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeProjectedSource {
    /**
     * ConfigMap represents a configMap that should populate this volume
     */
    configMaps?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeProjectedSourceConfigMap[];
    /**
     * DownwardAPI represents downward API about the pod that should populate this volume
     */
    downwardApi?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeProjectedSourceDownwardApi;
    /**
     * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    secrets?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeProjectedSourceSecret[];
    /**
     * A projected service account token volume
     */
    serviceAccountToken?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeProjectedSourceServiceAccountToken;
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeProjectedSourceConfigMap {
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeProjectedSourceConfigMapItem[];
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Optional: Specify whether the ConfigMap or it's keys must be defined.
     */
    optional?: boolean;
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeProjectedSourceConfigMapItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeProjectedSourceDownwardApi {
    /**
     * Represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
     */
    items?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeProjectedSourceDownwardApiItem[];
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeProjectedSourceDownwardApiItem {
    /**
     * Selects a field of the pod: only annotations, labels, name and namespace are supported.
     */
    fieldRef?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRef;
    /**
     * Mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
     */
    path: string;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
     */
    resourceFieldRef?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRef;
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to 'v1'.
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRef {
    containerName: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeProjectedSourceSecret {
    /**
     * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeProjectedSourceSecretItem[];
    /**
     * Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    name?: string;
    /**
     * Optional: Specify whether the Secret or it's keys must be defined.
     */
    optional?: boolean;
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeProjectedSourceSecretItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeProjectedSourceServiceAccountToken {
    /**
     * Audience is the intended audience of the token
     */
    audience?: string;
    /**
     * ExpirationSeconds is the expected duration of validity of the service account token. It defaults to 1 hour and must be at least 10 minutes (600 seconds).
     */
    expirationSeconds?: number;
    /**
     * Path specifies a relative path to the mount point of the projected volume.
     */
    path: string;
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeQuobyte {
    /**
     * Group to map volume access to Default is no group
     */
    group?: string;
    /**
     * Whether to force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
     */
    registry: string;
    /**
     * User to map volume access to Defaults to serivceaccount user
     */
    user?: string;
    /**
     * Volume is a string that references an already created Quobyte volume by name.
     */
    volume: string;
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeRbd {
    /**
     * A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    cephMonitors: string[];
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
     */
    fsType?: string;
    /**
     * Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    keyring: string;
    /**
     * The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    radosUser?: string;
    /**
     * The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    rbdImage: string;
    /**
     * The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it.
     */
    rbdPool?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    readOnly?: boolean;
    /**
     * Name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    secretRef?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeRbdSecretRef;
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeRbdSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeSecret {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.ReplicationControllerV1SpecTemplateSpecVolumeSecretItem[];
    /**
     * Optional: Specify whether the Secret or its keys must be defined.
     */
    optional?: boolean;
    /**
     * Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    secretName?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeSecretItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface ReplicationControllerV1SpecTemplateSpecVolumeVsphereVolume {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * Path that identifies vSphere volume vmdk
     */
    volumePath: string;
}

export interface ReplicationControllerV1Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ResourceQuotaMetadata {
    /**
     * An unstructured key value map stored with the resource quota that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resource quota. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resource quota, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the resource quota must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this resource quota that can be used by clients to determine when resource quota has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this resource quota. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface ResourceQuotaSpec {
    /**
     * The set of desired hard limits for each named resource. More info: http://releases.k8s.io/HEAD/docs/design/admission_control_resource_quota.md#admissioncontrol-plugin-resourcequota
     */
    hard?: {[key: string]: string};
    /**
     * A collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.
     */
    scopeSelector?: outputs.ResourceQuotaSpecScopeSelector;
    /**
     * A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.
     */
    scopes?: string[];
}

export interface ResourceQuotaSpecScopeSelector {
    /**
     * A list of scope selector requirements by scope of the resources.
     */
    matchExpressions?: outputs.ResourceQuotaSpecScopeSelectorMatchExpression[];
}

export interface ResourceQuotaSpecScopeSelectorMatchExpression {
    /**
     * Represents a scope's relationship to a set of values.
     */
    operator: string;
    /**
     * The name of the scope that the selector applies to.
     */
    scopeName: string;
    /**
     * A list of scope selector requirements by scope of the resources.
     */
    values?: string[];
}

export interface ResourceQuotaTimeouts {
    create?: string;
    update?: string;
}

export interface ResourceQuotaV1Metadata {
    /**
     * An unstructured key value map stored with the resource quota that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resource quota. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resource quota, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the resource quota must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this resource quota that can be used by clients to determine when resource quota has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this resource quota. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface ResourceQuotaV1Spec {
    /**
     * The set of desired hard limits for each named resource. More info: http://releases.k8s.io/HEAD/docs/design/admission_control_resource_quota.md#admissioncontrol-plugin-resourcequota
     */
    hard?: {[key: string]: string};
    /**
     * A collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.
     */
    scopeSelector?: outputs.ResourceQuotaV1SpecScopeSelector;
    /**
     * A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.
     */
    scopes?: string[];
}

export interface ResourceQuotaV1SpecScopeSelector {
    /**
     * A list of scope selector requirements by scope of the resources.
     */
    matchExpressions?: outputs.ResourceQuotaV1SpecScopeSelectorMatchExpression[];
}

export interface ResourceQuotaV1SpecScopeSelectorMatchExpression {
    /**
     * Represents a scope's relationship to a set of values.
     */
    operator: string;
    /**
     * The name of the scope that the selector applies to.
     */
    scopeName: string;
    /**
     * A list of scope selector requirements by scope of the resources.
     */
    values?: string[];
}

export interface ResourceQuotaV1Timeouts {
    create?: string;
    update?: string;
}

export interface RoleBindingMetadata {
    /**
     * An unstructured key value map stored with the roleBinding that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the roleBinding. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the roleBinding, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the roleBinding must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this roleBinding that can be used by clients to determine when roleBinding has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this roleBinding. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface RoleBindingRoleRef {
    /**
     * The API group of the user. The only value possible at the moment is `rbac.authorization.k8s.io`.
     */
    apiGroup: string;
    /**
     * The kind of resource.
     */
    kind: string;
    /**
     * The name of the User to bind to.
     */
    name: string;
}

export interface RoleBindingSubject {
    /**
     * The API group of the subject resource.
     */
    apiGroup: string;
    /**
     * The kind of resource.
     */
    kind: string;
    /**
     * The name of the resource to bind to.
     */
    name: string;
    /**
     * The Namespace of the subject resource.
     */
    namespace?: string;
}

export interface RoleBindingV1Metadata {
    /**
     * An unstructured key value map stored with the roleBinding that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the roleBinding. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the roleBinding, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the roleBinding must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this roleBinding that can be used by clients to determine when roleBinding has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this roleBinding. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface RoleBindingV1RoleRef {
    /**
     * The API group of the user. The only value possible at the moment is `rbac.authorization.k8s.io`.
     */
    apiGroup: string;
    /**
     * The kind of resource.
     */
    kind: string;
    /**
     * The name of the User to bind to.
     */
    name: string;
}

export interface RoleBindingV1Subject {
    /**
     * The API group of the subject resource.
     */
    apiGroup: string;
    /**
     * The kind of resource.
     */
    kind: string;
    /**
     * The name of the resource to bind to.
     */
    name: string;
    /**
     * The Namespace of the subject resource.
     */
    namespace?: string;
}

export interface RoleMetadata {
    /**
     * An unstructured key value map stored with the role that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the role. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the role, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the role must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this role that can be used by clients to determine when role has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this role. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface RoleRule {
    /**
     * Name of the APIGroup that contains the resources
     */
    apiGroups: string[];
    /**
     * White list of names that the rule applies to
     */
    resourceNames?: string[];
    /**
     * List of resources that the rule applies to
     */
    resources: string[];
    /**
     * List of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule
     */
    verbs: string[];
}

export interface RoleV1Metadata {
    /**
     * An unstructured key value map stored with the role that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the role. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the role, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the role must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this role that can be used by clients to determine when role has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this role. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface RoleV1Rule {
    /**
     * Name of the APIGroup that contains the resources
     */
    apiGroups: string[];
    /**
     * White list of names that the rule applies to
     */
    resourceNames?: string[];
    /**
     * List of resources that the rule applies to
     */
    resources: string[];
    /**
     * List of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule
     */
    verbs: string[];
}

export interface RuntimeClassV1Metadata {
    /**
     * An unstructured key value map stored with the runtimeclass that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the runtimeclass. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the runtimeclass, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * An opaque value that represents the internal version of this runtimeclass that can be used by clients to determine when runtimeclass has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this runtimeclass. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface SecretMetadata {
    /**
     * An unstructured key value map stored with the secret that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the secret. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the secret, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the secret must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this secret that can be used by clients to determine when secret has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this secret. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface SecretTimeouts {
    create?: string;
}

export interface SecretV1Metadata {
    /**
     * An unstructured key value map stored with the secret that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the secret. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the secret, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the secret must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this secret that can be used by clients to determine when secret has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this secret. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface SecretV1Timeouts {
    create?: string;
}

export interface ServiceAccountImagePullSecret {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
}

export interface ServiceAccountMetadata {
    /**
     * An unstructured key value map stored with the service account that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the service account. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the service account, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the service account must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this service account that can be used by clients to determine when service account has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this service account. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface ServiceAccountSecret {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
}

export interface ServiceAccountTimeouts {
    create?: string;
}

export interface ServiceAccountV1ImagePullSecret {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
}

export interface ServiceAccountV1Metadata {
    /**
     * An unstructured key value map stored with the service account that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the service account. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the service account, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the service account must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this service account that can be used by clients to determine when service account has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this service account. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface ServiceAccountV1Secret {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
}

export interface ServiceAccountV1Timeouts {
    create?: string;
}

export interface ServiceMetadata {
    /**
     * An unstructured key value map stored with the service that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the service. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the service, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the service must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this service that can be used by clients to determine when service has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this service. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface ServiceSpec {
    /**
     * Defines if `NodePorts` will be automatically allocated for services with type `LoadBalancer`. It may be set to `false` if the cluster load-balancer does not rely on `NodePorts`.  If the caller requests specific `NodePorts` (by specifying a value), those requests will be respected, regardless of this field. This field may only be set for services with type `LoadBalancer`. Default is `true`. More info: https://kubernetes.io/docs/concepts/services-networking/service/#load-balancer-nodeport-allocation
     */
    allocateLoadBalancerNodePorts?: boolean;
    /**
     * The IP address of the service. It is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. `None` can be specified for headless services when proxying is not required. Ignored if type is `ExternalName`. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
     */
    clusterIp: string;
    /**
     * List of IP addresses assigned to this service, and are usually assigned randomly. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise creation of the service will fail. If this field is not specified, it will be initialized from the `clusterIP` field. If this field is specified, clients must ensure that `clusterIPs[0]` and `clusterIP` have the same value. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
     */
    clusterIps: string[];
    /**
     * A list of IP addresses for which nodes in the cluster will also accept traffic for this service. These IPs are not managed by Kubernetes. The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
     */
    externalIps?: string[];
    /**
     * The external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid DNS name and requires `type` to be `ExternalName`.
     */
    externalName?: string;
    /**
     * Denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. `Local` preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. `Cluster` obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading. More info: https://kubernetes.io/docs/tutorials/services/source-ip/
     */
    externalTrafficPolicy: string;
    /**
     * Specifies the Healthcheck NodePort for the service. Only effects when type is set to `LoadBalancer` and external_traffic_policy is set to `Local`.
     */
    healthCheckNodePort: number;
    /**
     * Specifies if the cluster internal traffic should be routed to all endpoints or node-local endpoints only. `Cluster` routes internal traffic to a Service to all endpoints. `Local` routes traffic to node-local endpoints only, traffic is dropped if no node-local endpoints are ready. The default value is `Cluster`.
     */
    internalTrafficPolicy: string;
    /**
     * IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service. This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail. This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service.
     */
    ipFamilies: string[];
    /**
     * IPFamilyPolicy represents the dual-stack-ness requested or required by this Service. If there is no value provided, then this field will be set to SingleStack. Services can be 'SingleStack' (a single IP family), 'PreferDualStack' (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or 'RequireDualStack' (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field.
     */
    ipFamilyPolicy: string;
    /**
     * The class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix. This field can only be set when the Service type is `LoadBalancer`. If not set, the default load balancer implementation is used. This field can only be set when creating or updating a Service to type `LoadBalancer`. More info: https://kubernetes.io/docs/concepts/services-networking/service/#load-balancer-class
     */
    loadBalancerClass?: string;
    /**
     * Only applies to `type = LoadBalancer`. LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying this field when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
     */
    loadBalancerIp?: string;
    /**
     * If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature. More info: http://kubernetes.io/docs/user-guide/services-firewalls
     */
    loadBalancerSourceRanges?: string[];
    /**
     * The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
     */
    ports?: outputs.ServiceSpecPort[];
    /**
     * When set to true, indicates that DNS implementations must publish the `notReadyAddresses` of subsets for the Endpoints associated with the Service. The default value is `false`. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate `SRV` records for its Pods without respect to their readiness for purpose of peer discovery.
     */
    publishNotReadyAddresses?: boolean;
    /**
     * Route service traffic to pods with label keys and values matching this selector. Only applies to types `ClusterIP`, `NodePort`, and `LoadBalancer`. More info: https://kubernetes.io/docs/concepts/services-networking/service/
     */
    selector?: {[key: string]: string};
    /**
     * Used to maintain session affinity. Supports `ClientIP` and `None`. Defaults to `None`. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
     */
    sessionAffinity?: string;
    /**
     * Contains the configurations of session affinity. More info: https://kubernetes.io/docs/concepts/services-networking/service/#proxy-mode-ipvs
     */
    sessionAffinityConfig?: outputs.ServiceSpecSessionAffinityConfig;
    /**
     * Determines how the service is exposed. Defaults to `ClusterIP`. Valid options are `ExternalName`, `ClusterIP`, `NodePort`, and `LoadBalancer`. `ExternalName` maps to the specified `external_name`. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
     */
    type?: string;
}

export interface ServiceSpecPort {
    /**
     * The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.
     */
    appProtocol?: string;
    /**
     * The name of this port within the service. All ports within the service must have unique names. Optional if only one ServicePort is defined on this service.
     */
    name?: string;
    /**
     * The port on each node on which this service is exposed when `type` is `NodePort` or `LoadBalancer`. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the `type` of this service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
     */
    nodePort: number;
    /**
     * The port that will be exposed by this service.
     */
    port: number;
    /**
     * The IP protocol for this port. Supports `TCP` and `UDP`. Default is `TCP`.
     */
    protocol?: string;
    /**
     * Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. This field is ignored for services with `cluster_ip = "None"`. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
     */
    targetPort: string;
}

export interface ServiceSpecSessionAffinityConfig {
    /**
     * Contains the configurations of Client IP based session affinity.
     */
    clientIp?: outputs.ServiceSpecSessionAffinityConfigClientIp;
}

export interface ServiceSpecSessionAffinityConfigClientIp {
    /**
     * Specifies the seconds of `ClientIP` type session sticky time. The value must be > 0 and <= 86400(for 1 day) if `ServiceAffinity` == `ClientIP`.
     */
    timeoutSeconds: number;
}

export interface ServiceStatus {
    loadBalancers: outputs.ServiceStatusLoadBalancer[];
}

export interface ServiceStatusLoadBalancer {
    ingresses: outputs.ServiceStatusLoadBalancerIngress[];
}

export interface ServiceStatusLoadBalancerIngress {
    hostname: string;
    ip: string;
}

export interface ServiceTimeouts {
    create?: string;
}

export interface ServiceV1Metadata {
    /**
     * An unstructured key value map stored with the service that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the service. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the service, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the service must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this service that can be used by clients to determine when service has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this service. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface ServiceV1Spec {
    /**
     * Defines if `NodePorts` will be automatically allocated for services with type `LoadBalancer`. It may be set to `false` if the cluster load-balancer does not rely on `NodePorts`.  If the caller requests specific `NodePorts` (by specifying a value), those requests will be respected, regardless of this field. This field may only be set for services with type `LoadBalancer`. Default is `true`. More info: https://kubernetes.io/docs/concepts/services-networking/service/#load-balancer-nodeport-allocation
     */
    allocateLoadBalancerNodePorts?: boolean;
    /**
     * The IP address of the service. It is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. `None` can be specified for headless services when proxying is not required. Ignored if type is `ExternalName`. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
     */
    clusterIp: string;
    /**
     * List of IP addresses assigned to this service, and are usually assigned randomly. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise creation of the service will fail. If this field is not specified, it will be initialized from the `clusterIP` field. If this field is specified, clients must ensure that `clusterIPs[0]` and `clusterIP` have the same value. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
     */
    clusterIps: string[];
    /**
     * A list of IP addresses for which nodes in the cluster will also accept traffic for this service. These IPs are not managed by Kubernetes. The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
     */
    externalIps?: string[];
    /**
     * The external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid DNS name and requires `type` to be `ExternalName`.
     */
    externalName?: string;
    /**
     * Denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. `Local` preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. `Cluster` obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading. More info: https://kubernetes.io/docs/tutorials/services/source-ip/
     */
    externalTrafficPolicy: string;
    /**
     * Specifies the Healthcheck NodePort for the service. Only effects when type is set to `LoadBalancer` and external_traffic_policy is set to `Local`.
     */
    healthCheckNodePort: number;
    /**
     * Specifies if the cluster internal traffic should be routed to all endpoints or node-local endpoints only. `Cluster` routes internal traffic to a Service to all endpoints. `Local` routes traffic to node-local endpoints only, traffic is dropped if no node-local endpoints are ready. The default value is `Cluster`.
     */
    internalTrafficPolicy: string;
    /**
     * IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service. This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail. This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service.
     */
    ipFamilies: string[];
    /**
     * IPFamilyPolicy represents the dual-stack-ness requested or required by this Service. If there is no value provided, then this field will be set to SingleStack. Services can be 'SingleStack' (a single IP family), 'PreferDualStack' (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or 'RequireDualStack' (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field.
     */
    ipFamilyPolicy: string;
    /**
     * The class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix. This field can only be set when the Service type is `LoadBalancer`. If not set, the default load balancer implementation is used. This field can only be set when creating or updating a Service to type `LoadBalancer`. More info: https://kubernetes.io/docs/concepts/services-networking/service/#load-balancer-class
     */
    loadBalancerClass?: string;
    /**
     * Only applies to `type = LoadBalancer`. LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying this field when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
     */
    loadBalancerIp?: string;
    /**
     * If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature. More info: http://kubernetes.io/docs/user-guide/services-firewalls
     */
    loadBalancerSourceRanges?: string[];
    /**
     * The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
     */
    ports?: outputs.ServiceV1SpecPort[];
    /**
     * When set to true, indicates that DNS implementations must publish the `notReadyAddresses` of subsets for the Endpoints associated with the Service. The default value is `false`. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate `SRV` records for its Pods without respect to their readiness for purpose of peer discovery.
     */
    publishNotReadyAddresses?: boolean;
    /**
     * Route service traffic to pods with label keys and values matching this selector. Only applies to types `ClusterIP`, `NodePort`, and `LoadBalancer`. More info: https://kubernetes.io/docs/concepts/services-networking/service/
     */
    selector?: {[key: string]: string};
    /**
     * Used to maintain session affinity. Supports `ClientIP` and `None`. Defaults to `None`. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
     */
    sessionAffinity?: string;
    /**
     * Contains the configurations of session affinity. More info: https://kubernetes.io/docs/concepts/services-networking/service/#proxy-mode-ipvs
     */
    sessionAffinityConfig?: outputs.ServiceV1SpecSessionAffinityConfig;
    /**
     * Determines how the service is exposed. Defaults to `ClusterIP`. Valid options are `ExternalName`, `ClusterIP`, `NodePort`, and `LoadBalancer`. `ExternalName` maps to the specified `external_name`. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
     */
    type?: string;
}

export interface ServiceV1SpecPort {
    /**
     * The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.
     */
    appProtocol?: string;
    /**
     * The name of this port within the service. All ports within the service must have unique names. Optional if only one ServicePort is defined on this service.
     */
    name?: string;
    /**
     * The port on each node on which this service is exposed when `type` is `NodePort` or `LoadBalancer`. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the `type` of this service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
     */
    nodePort: number;
    /**
     * The port that will be exposed by this service.
     */
    port: number;
    /**
     * The IP protocol for this port. Supports `TCP` and `UDP`. Default is `TCP`.
     */
    protocol?: string;
    /**
     * Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. This field is ignored for services with `cluster_ip = "None"`. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
     */
    targetPort: string;
}

export interface ServiceV1SpecSessionAffinityConfig {
    /**
     * Contains the configurations of Client IP based session affinity.
     */
    clientIp?: outputs.ServiceV1SpecSessionAffinityConfigClientIp;
}

export interface ServiceV1SpecSessionAffinityConfigClientIp {
    /**
     * Specifies the seconds of `ClientIP` type session sticky time. The value must be > 0 and <= 86400(for 1 day) if `ServiceAffinity` == `ClientIP`.
     */
    timeoutSeconds: number;
}

export interface ServiceV1Status {
    loadBalancers: outputs.ServiceV1StatusLoadBalancer[];
}

export interface ServiceV1StatusLoadBalancer {
    ingresses: outputs.ServiceV1StatusLoadBalancerIngress[];
}

export interface ServiceV1StatusLoadBalancerIngress {
    hostname: string;
    ip: string;
}

export interface ServiceV1Timeouts {
    create?: string;
}

export interface StatefulSetMetadata {
    /**
     * An unstructured key value map stored with the stateful set that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the stateful set. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the stateful set, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the stateful set must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this stateful set that can be used by clients to determine when stateful set has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this stateful set. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface StatefulSetSpec {
    /**
     * Minimum number of seconds for which a newly created pod should be ready without any of its container crashing for it to be considered available. Defaults to 0. (pod will be considered available as soon as it is ready)
     */
    minReadySeconds?: number;
    /**
     * The field controls if and how PVCs are deleted during the lifecycle of a StatefulSet.
     */
    persistentVolumeClaimRetentionPolicies?: outputs.StatefulSetSpecPersistentVolumeClaimRetentionPolicy[];
    /**
     * Controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down.
     */
    podManagementPolicy: string;
    /**
     * The desired number of replicas of the given Template, in the sense that they are instantiations of the same Template. Value must be a positive integer.
     */
    replicas: string;
    /**
     * The maximum number of revisions that will be maintained in the StatefulSet's revision history. The default value is 10.
     */
    revisionHistoryLimit: number;
    /**
     * A label query over pods that should match the replica count. It must match the pod template's labels.
     */
    selector: outputs.StatefulSetSpecSelector;
    /**
     * The name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set.
     */
    serviceName: string;
    /**
     * The object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template.
     */
    template: outputs.StatefulSetSpecTemplate;
    /**
     * The strategy that the StatefulSet controller will use to perform updates.
     */
    updateStrategies?: outputs.StatefulSetSpecUpdateStrategy[];
    /**
     * A list of claims that pods are allowed to reference. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template.
     */
    volumeClaimTemplates?: outputs.StatefulSetSpecVolumeClaimTemplate[];
}

export interface StatefulSetSpecPersistentVolumeClaimRetentionPolicy {
    /**
     * This field controls what happens when a Statefulset is deleted. Default is Retain.
     */
    whenDeleted?: string;
    /**
     * This field controls what happens when a Statefulset is scaled. Default is Retain.
     */
    whenScaled?: string;
}

export interface StatefulSetSpecSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.StatefulSetSpecSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface StatefulSetSpecSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface StatefulSetSpecTemplate {
    /**
     * Standard stateful set's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
     */
    metadata: outputs.StatefulSetSpecTemplateMetadata;
    /**
     * Spec of the pods owned by the stateful set
     */
    spec?: outputs.StatefulSetSpecTemplateSpec;
}

export interface StatefulSetSpecTemplateMetadata {
    /**
     * An unstructured key value map stored with the stateful set that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the stateful set. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the stateful set, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the stateful set must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this stateful set that can be used by clients to determine when stateful set has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this stateful set. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface StatefulSetSpecTemplateSpec {
    /**
     * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
     */
    activeDeadlineSeconds?: number;
    /**
     * Optional pod scheduling constraints.
     */
    affinity?: outputs.StatefulSetSpecTemplateSpecAffinity;
    /**
     * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
     */
    automountServiceAccountToken?: boolean;
    /**
     * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/
     */
    containers?: outputs.StatefulSetSpecTemplateSpecContainer[];
    /**
     * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy. Optional: Defaults to empty
     */
    dnsConfig?: outputs.StatefulSetSpecTemplateSpecDnsConfig;
    /**
     * Set DNS policy for containers within the pod. Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'. Defaults to 'ClusterFirst'. More info: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy
     */
    dnsPolicy?: string;
    /**
     * Enables generating environment variables for service discovery. Defaults to true.
     */
    enableServiceLinks?: boolean;
    /**
     * List of hosts and IPs that will be injected into the pod's hosts file if specified. Optional: Defaults to empty.
     */
    hostAliases?: outputs.StatefulSetSpecTemplateSpecHostAlias[];
    /**
     * Use the host's ipc namespace. Optional: Defaults to false.
     */
    hostIpc?: boolean;
    /**
     * Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified.
     */
    hostNetwork?: boolean;
    /**
     * Use the host's pid namespace.
     */
    hostPid?: boolean;
    /**
     * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
     */
    hostname: string;
    /**
     * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
     */
    imagePullSecrets?: outputs.StatefulSetSpecTemplateSpecImagePullSecret[];
    /**
     * List of init containers belonging to the pod. Init containers always run to completion and each must complete successfully before the next is started. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
     */
    initContainers?: outputs.StatefulSetSpecTemplateSpecInitContainer[];
    /**
     * NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
     */
    nodeName: string;
    /**
     * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.
     */
    nodeSelector?: {[key: string]: string};
    /**
     * Specifies the OS of the containers in the pod.
     */
    os?: outputs.StatefulSetSpecTemplateSpecOs;
    /**
     * If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
     */
    priorityClassName?: string;
    /**
     * If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md
     */
    readinessGates?: outputs.StatefulSetSpecTemplateSpecReadinessGate[];
    /**
     * Restart policy for all containers within the pod. One of Always, OnFailure, Never. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy.
     */
    restartPolicy?: string;
    /**
     * RuntimeClassName is a feature for selecting the container runtime configuration. The container runtime configuration is used to run a Pod's containers. More info: https://kubernetes.io/docs/concepts/containers/runtime-class
     */
    runtimeClassName?: string;
    /**
     * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
     */
    schedulerName: string;
    /**
     * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty
     */
    securityContext?: outputs.StatefulSetSpecTemplateSpecSecurityContext;
    /**
     * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: http://releases.k8s.io/HEAD/docs/design/service_accounts.md.
     */
    serviceAccountName: string;
    /**
     * Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Defaults to false.
     */
    shareProcessNamespace?: boolean;
    /**
     * If specified, the fully qualified Pod hostname will be "...svc.". If not specified, the pod will not have a domainname at all..
     */
    subdomain?: string;
    /**
     * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process.
     */
    terminationGracePeriodSeconds?: number;
    /**
     * If specified, the pod's toleration. Optional: Defaults to empty
     */
    tolerations?: outputs.StatefulSetSpecTemplateSpecToleration[];
    /**
     * describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints.
     */
    topologySpreadConstraints?: outputs.StatefulSetSpecTemplateSpecTopologySpreadConstraint[];
    /**
     * List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
     */
    volumes?: outputs.StatefulSetSpecTemplateSpecVolume[];
}

export interface StatefulSetSpecTemplateSpecAffinity {
    /**
     * Node affinity scheduling rules for the pod.
     */
    nodeAffinity?: outputs.StatefulSetSpecTemplateSpecAffinityNodeAffinity;
    /**
     * Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)
     */
    podAffinity?: outputs.StatefulSetSpecTemplateSpecAffinityPodAffinity;
    /**
     * Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)
     */
    podAntiAffinity?: outputs.StatefulSetSpecTemplateSpecAffinityPodAntiAffinity;
}

export interface StatefulSetSpecTemplateSpecAffinityNodeAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: outputs.StatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a node label update), the system may or may not try to eventually evict the pod from its node.
     */
    requiredDuringSchedulingIgnoredDuringExecution?: outputs.StatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
}

export interface StatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A node selector term, associated with the corresponding weight.
     */
    preference: outputs.StatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
    /**
     * weight is in the range 1-100
     */
    weight: number;
}

export interface StatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
    /**
     * List of node selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.StatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression[];
    /**
     * A list of node selector requirements by node's fields. The requirements are ANDed.
     */
    matchFields?: outputs.StatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchField[];
}

export interface StatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
     */
    operator?: string;
    /**
     * Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface StatefulSetSpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchField {
    /**
     * The label key that the selector applies to.
     */
    key: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists`, `DoesNotExist`, `Gt`, and `Lt`.
     */
    operator: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface StatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * List of node selector terms. The terms are ORed.
     */
    nodeSelectorTerms?: outputs.StatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm[];
}

export interface StatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm {
    /**
     * List of node selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.StatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression[];
    /**
     * A list of node selector requirements by node's fields. The requirements are ANDed.
     */
    matchFields?: outputs.StatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchField[];
}

export interface StatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
     */
    operator?: string;
    /**
     * Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface StatefulSetSpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchField {
    /**
     * The label key that the selector applies to.
     */
    key: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists`, `DoesNotExist`, `Gt`, and `Lt`.
     */
    operator: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface StatefulSetSpecTemplateSpecAffinityPodAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: outputs.StatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.
     */
    requiredDuringSchedulingIgnoredDuringExecutions?: outputs.StatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
}

export interface StatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A pod affinity term, associated with the corresponding weight
     */
    podAffinityTerm: outputs.StatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
    /**
     * weight associated with matching the corresponding podAffinityTerm, in the range 1-100
     */
    weight: number;
}

export interface StatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.StatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface StatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.StatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface StatefulSetSpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface StatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.StatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface StatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.StatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface StatefulSetSpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface StatefulSetSpecTemplateSpecAffinityPodAntiAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: outputs.StatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.
     */
    requiredDuringSchedulingIgnoredDuringExecutions?: outputs.StatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
}

export interface StatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A pod affinity term, associated with the corresponding weight
     */
    podAffinityTerm: outputs.StatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
    /**
     * weight associated with matching the corresponding podAffinityTerm, in the range 1-100
     */
    weight: number;
}

export interface StatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.StatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface StatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.StatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface StatefulSetSpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface StatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.StatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface StatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.StatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface StatefulSetSpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface StatefulSetSpecTemplateSpecContainer {
    /**
     * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    args?: string[];
    /**
     * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    commands?: string[];
    /**
     * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
     */
    envFroms?: outputs.StatefulSetSpecTemplateSpecContainerEnvFrom[];
    /**
     * List of environment variables to set in the container. Cannot be updated.
     */
    envs?: outputs.StatefulSetSpecTemplateSpecContainerEnv[];
    /**
     * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/
     */
    image?: string;
    /**
     * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images
     */
    imagePullPolicy: string;
    /**
     * Actions that the management system should take in response to container lifecycle events
     */
    lifecycle?: outputs.StatefulSetSpecTemplateSpecContainerLifecycle;
    /**
     * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    livenessProbe?: outputs.StatefulSetSpecTemplateSpecContainerLivenessProbe;
    /**
     * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
     */
    name: string;
    /**
     * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
     */
    ports?: outputs.StatefulSetSpecTemplateSpecContainerPort[];
    /**
     * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    readinessProbe?: outputs.StatefulSetSpecTemplateSpecContainerReadinessProbe;
    /**
     * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources?: outputs.StatefulSetSpecTemplateSpecContainerResources;
    /**
     * Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
     */
    securityContext?: outputs.StatefulSetSpecTemplateSpecContainerSecurityContext;
    /**
     * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     */
    startupProbe?: outputs.StatefulSetSpecTemplateSpecContainerStartupProbe;
    /**
     * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.
     */
    stdin?: boolean;
    /**
     * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.
     */
    stdinOnce?: boolean;
    /**
     * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.
     */
    terminationMessagePath?: string;
    /**
     * Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
     */
    terminationMessagePolicy: string;
    /**
     * Whether this container should allocate a TTY for itself
     */
    tty?: boolean;
    /**
     * Pod volumes to mount into the container's filesystem. Cannot be updated.
     */
    volumeMounts?: outputs.StatefulSetSpecTemplateSpecContainerVolumeMount[];
    /**
     * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
     */
    workingDir?: string;
}

export interface StatefulSetSpecTemplateSpecContainerEnv {
    /**
     * Name of the environment variable. Must be a C_IDENTIFIER
     */
    name: string;
    /**
     * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
     */
    value?: string;
    /**
     * Source for the environment variable's value
     */
    valueFrom?: outputs.StatefulSetSpecTemplateSpecContainerEnvValueFrom;
}

export interface StatefulSetSpecTemplateSpecContainerEnvFrom {
    /**
     * The ConfigMap to select from
     */
    configMapRef?: outputs.StatefulSetSpecTemplateSpecContainerEnvFromConfigMapRef;
    /**
     * An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
     */
    prefix?: string;
    /**
     * The Secret to select from
     */
    secretRef?: outputs.StatefulSetSpecTemplateSpecContainerEnvFromSecretRef;
}

export interface StatefulSetSpecTemplateSpecContainerEnvFromConfigMapRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the ConfigMap must be defined
     */
    optional?: boolean;
}

export interface StatefulSetSpecTemplateSpecContainerEnvFromSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the Secret must be defined
     */
    optional?: boolean;
}

export interface StatefulSetSpecTemplateSpecContainerEnvValueFrom {
    /**
     * Selects a key of a ConfigMap.
     */
    configMapKeyRef?: outputs.StatefulSetSpecTemplateSpecContainerEnvValueFromConfigMapKeyRef;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.
     */
    fieldRef?: outputs.StatefulSetSpecTemplateSpecContainerEnvValueFromFieldRef;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
     */
    resourceFieldRef?: outputs.StatefulSetSpecTemplateSpecContainerEnvValueFromResourceFieldRef;
    /**
     * Selects a key of a secret in the pod's namespace.
     */
    secretKeyRef?: outputs.StatefulSetSpecTemplateSpecContainerEnvValueFromSecretKeyRef;
}

export interface StatefulSetSpecTemplateSpecContainerEnvValueFromConfigMapKeyRef {
    /**
     * The key to select.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the ConfigMap or its key must be defined.
     */
    optional?: boolean;
}

export interface StatefulSetSpecTemplateSpecContainerEnvValueFromFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface StatefulSetSpecTemplateSpecContainerEnvValueFromResourceFieldRef {
    containerName?: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface StatefulSetSpecTemplateSpecContainerEnvValueFromSecretKeyRef {
    /**
     * The key of the secret to select from. Must be a valid secret key.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the Secret or its key must be defined.
     */
    optional?: boolean;
}

export interface StatefulSetSpecTemplateSpecContainerLifecycle {
    /**
     * post_start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    postStarts?: outputs.StatefulSetSpecTemplateSpecContainerLifecyclePostStart[];
    /**
     * pre_stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    preStops?: outputs.StatefulSetSpecTemplateSpecContainerLifecyclePreStop[];
}

export interface StatefulSetSpecTemplateSpecContainerLifecyclePostStart {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.StatefulSetSpecTemplateSpecContainerLifecyclePostStartExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.StatefulSetSpecTemplateSpecContainerLifecyclePostStartHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.StatefulSetSpecTemplateSpecContainerLifecyclePostStartTcpSocket[];
}

export interface StatefulSetSpecTemplateSpecContainerLifecyclePostStartExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface StatefulSetSpecTemplateSpecContainerLifecyclePostStartHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.StatefulSetSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface StatefulSetSpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface StatefulSetSpecTemplateSpecContainerLifecyclePostStartTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface StatefulSetSpecTemplateSpecContainerLifecyclePreStop {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.StatefulSetSpecTemplateSpecContainerLifecyclePreStopExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.StatefulSetSpecTemplateSpecContainerLifecyclePreStopHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.StatefulSetSpecTemplateSpecContainerLifecyclePreStopTcpSocket[];
}

export interface StatefulSetSpecTemplateSpecContainerLifecyclePreStopExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface StatefulSetSpecTemplateSpecContainerLifecyclePreStopHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.StatefulSetSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface StatefulSetSpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface StatefulSetSpecTemplateSpecContainerLifecyclePreStopTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface StatefulSetSpecTemplateSpecContainerLivenessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.StatefulSetSpecTemplateSpecContainerLivenessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.StatefulSetSpecTemplateSpecContainerLivenessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.StatefulSetSpecTemplateSpecContainerLivenessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.StatefulSetSpecTemplateSpecContainerLivenessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface StatefulSetSpecTemplateSpecContainerLivenessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface StatefulSetSpecTemplateSpecContainerLivenessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface StatefulSetSpecTemplateSpecContainerLivenessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.StatefulSetSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface StatefulSetSpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface StatefulSetSpecTemplateSpecContainerLivenessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface StatefulSetSpecTemplateSpecContainerPort {
    /**
     * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
     */
    containerPort: number;
    /**
     * What host IP to bind the external port to.
     */
    hostIp?: string;
    /**
     * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
     */
    hostPort?: number;
    /**
     * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
     */
    name?: string;
    /**
     * Protocol for port. Must be UDP or TCP. Defaults to "TCP".
     */
    protocol?: string;
}

export interface StatefulSetSpecTemplateSpecContainerReadinessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.StatefulSetSpecTemplateSpecContainerReadinessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.StatefulSetSpecTemplateSpecContainerReadinessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.StatefulSetSpecTemplateSpecContainerReadinessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.StatefulSetSpecTemplateSpecContainerReadinessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface StatefulSetSpecTemplateSpecContainerReadinessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface StatefulSetSpecTemplateSpecContainerReadinessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface StatefulSetSpecTemplateSpecContainerReadinessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.StatefulSetSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface StatefulSetSpecTemplateSpecContainerReadinessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface StatefulSetSpecTemplateSpecContainerReadinessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface StatefulSetSpecTemplateSpecContainerResources {
    /**
     * Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits: {[key: string]: string};
    /**
     * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
     */
    requests: {[key: string]: string};
}

export interface StatefulSetSpecTemplateSpecContainerSecurityContext {
    /**
     * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
     */
    allowPrivilegeEscalation?: boolean;
    /**
     * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
     */
    capabilities?: outputs.StatefulSetSpecTemplateSpecContainerSecurityContextCapabilities;
    /**
     * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
     */
    privileged?: boolean;
    /**
     * Whether this container has a read-only root filesystem. Default is false.
     */
    readOnlyRootFilesystem?: boolean;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsGroup?: string;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: boolean;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUser?: string;
    /**
     * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    seLinuxOptions?: outputs.StatefulSetSpecTemplateSpecContainerSecurityContextSeLinuxOptions;
    /**
     * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     */
    seccompProfile?: outputs.StatefulSetSpecTemplateSpecContainerSecurityContextSeccompProfile;
}

export interface StatefulSetSpecTemplateSpecContainerSecurityContextCapabilities {
    /**
     * Added capabilities
     */
    adds?: string[];
    /**
     * Removed capabilities
     */
    drops?: string[];
}

export interface StatefulSetSpecTemplateSpecContainerSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: string;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: string;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: string;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: string;
}

export interface StatefulSetSpecTemplateSpecContainerSecurityContextSeccompProfile {
    /**
     * Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
     */
    localhostProfile?: string;
    /**
     * Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
     */
    type?: string;
}

export interface StatefulSetSpecTemplateSpecContainerStartupProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.StatefulSetSpecTemplateSpecContainerStartupProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.StatefulSetSpecTemplateSpecContainerStartupProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.StatefulSetSpecTemplateSpecContainerStartupProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.StatefulSetSpecTemplateSpecContainerStartupProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface StatefulSetSpecTemplateSpecContainerStartupProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface StatefulSetSpecTemplateSpecContainerStartupProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface StatefulSetSpecTemplateSpecContainerStartupProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.StatefulSetSpecTemplateSpecContainerStartupProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface StatefulSetSpecTemplateSpecContainerStartupProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface StatefulSetSpecTemplateSpecContainerStartupProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface StatefulSetSpecTemplateSpecContainerVolumeMount {
    /**
     * Path within the container at which the volume should be mounted. Must not contain ':'.
     */
    mountPath: string;
    /**
     * Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional.
     */
    mountPropagation?: string;
    /**
     * This must match the Name of a Volume.
     */
    name: string;
    /**
     * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
     */
    subPath?: string;
}

export interface StatefulSetSpecTemplateSpecDnsConfig {
    /**
     * A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
     */
    nameservers?: string[];
    /**
     * A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
     */
    options?: outputs.StatefulSetSpecTemplateSpecDnsConfigOption[];
    /**
     * A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
     */
    searches?: string[];
}

export interface StatefulSetSpecTemplateSpecDnsConfigOption {
    /**
     * Name of the option.
     */
    name: string;
    /**
     * Value of the option. Optional: Defaults to empty.
     */
    value?: string;
}

export interface StatefulSetSpecTemplateSpecHostAlias {
    /**
     * Hostnames for the IP address.
     */
    hostnames: string[];
    /**
     * IP address of the host file entry.
     */
    ip: string;
}

export interface StatefulSetSpecTemplateSpecImagePullSecret {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
}

export interface StatefulSetSpecTemplateSpecInitContainer {
    /**
     * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    args?: string[];
    /**
     * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    commands?: string[];
    /**
     * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
     */
    envFroms?: outputs.StatefulSetSpecTemplateSpecInitContainerEnvFrom[];
    /**
     * List of environment variables to set in the container. Cannot be updated.
     */
    envs?: outputs.StatefulSetSpecTemplateSpecInitContainerEnv[];
    /**
     * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/
     */
    image?: string;
    /**
     * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images
     */
    imagePullPolicy: string;
    /**
     * Actions that the management system should take in response to container lifecycle events
     */
    lifecycle?: outputs.StatefulSetSpecTemplateSpecInitContainerLifecycle;
    /**
     * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    livenessProbe?: outputs.StatefulSetSpecTemplateSpecInitContainerLivenessProbe;
    /**
     * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
     */
    name: string;
    /**
     * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
     */
    ports?: outputs.StatefulSetSpecTemplateSpecInitContainerPort[];
    /**
     * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    readinessProbe?: outputs.StatefulSetSpecTemplateSpecInitContainerReadinessProbe;
    /**
     * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources?: outputs.StatefulSetSpecTemplateSpecInitContainerResources;
    /**
     * Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
     */
    securityContext?: outputs.StatefulSetSpecTemplateSpecInitContainerSecurityContext;
    /**
     * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     */
    startupProbe?: outputs.StatefulSetSpecTemplateSpecInitContainerStartupProbe;
    /**
     * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.
     */
    stdin?: boolean;
    /**
     * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.
     */
    stdinOnce?: boolean;
    /**
     * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.
     */
    terminationMessagePath?: string;
    /**
     * Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
     */
    terminationMessagePolicy: string;
    /**
     * Whether this container should allocate a TTY for itself
     */
    tty?: boolean;
    /**
     * Pod volumes to mount into the container's filesystem. Cannot be updated.
     */
    volumeMounts?: outputs.StatefulSetSpecTemplateSpecInitContainerVolumeMount[];
    /**
     * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
     */
    workingDir?: string;
}

export interface StatefulSetSpecTemplateSpecInitContainerEnv {
    /**
     * Name of the environment variable. Must be a C_IDENTIFIER
     */
    name: string;
    /**
     * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
     */
    value?: string;
    /**
     * Source for the environment variable's value
     */
    valueFrom?: outputs.StatefulSetSpecTemplateSpecInitContainerEnvValueFrom;
}

export interface StatefulSetSpecTemplateSpecInitContainerEnvFrom {
    /**
     * The ConfigMap to select from
     */
    configMapRef?: outputs.StatefulSetSpecTemplateSpecInitContainerEnvFromConfigMapRef;
    /**
     * An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
     */
    prefix?: string;
    /**
     * The Secret to select from
     */
    secretRef?: outputs.StatefulSetSpecTemplateSpecInitContainerEnvFromSecretRef;
}

export interface StatefulSetSpecTemplateSpecInitContainerEnvFromConfigMapRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the ConfigMap must be defined
     */
    optional?: boolean;
}

export interface StatefulSetSpecTemplateSpecInitContainerEnvFromSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the Secret must be defined
     */
    optional?: boolean;
}

export interface StatefulSetSpecTemplateSpecInitContainerEnvValueFrom {
    /**
     * Selects a key of a ConfigMap.
     */
    configMapKeyRef?: outputs.StatefulSetSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRef;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.
     */
    fieldRef?: outputs.StatefulSetSpecTemplateSpecInitContainerEnvValueFromFieldRef;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
     */
    resourceFieldRef?: outputs.StatefulSetSpecTemplateSpecInitContainerEnvValueFromResourceFieldRef;
    /**
     * Selects a key of a secret in the pod's namespace.
     */
    secretKeyRef?: outputs.StatefulSetSpecTemplateSpecInitContainerEnvValueFromSecretKeyRef;
}

export interface StatefulSetSpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRef {
    /**
     * The key to select.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the ConfigMap or its key must be defined.
     */
    optional?: boolean;
}

export interface StatefulSetSpecTemplateSpecInitContainerEnvValueFromFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface StatefulSetSpecTemplateSpecInitContainerEnvValueFromResourceFieldRef {
    containerName?: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface StatefulSetSpecTemplateSpecInitContainerEnvValueFromSecretKeyRef {
    /**
     * The key of the secret to select from. Must be a valid secret key.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the Secret or its key must be defined.
     */
    optional?: boolean;
}

export interface StatefulSetSpecTemplateSpecInitContainerLifecycle {
    /**
     * post_start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    postStarts?: outputs.StatefulSetSpecTemplateSpecInitContainerLifecyclePostStart[];
    /**
     * pre_stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    preStops?: outputs.StatefulSetSpecTemplateSpecInitContainerLifecyclePreStop[];
}

export interface StatefulSetSpecTemplateSpecInitContainerLifecyclePostStart {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.StatefulSetSpecTemplateSpecInitContainerLifecyclePostStartExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.StatefulSetSpecTemplateSpecInitContainerLifecyclePostStartHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.StatefulSetSpecTemplateSpecInitContainerLifecyclePostStartTcpSocket[];
}

export interface StatefulSetSpecTemplateSpecInitContainerLifecyclePostStartExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface StatefulSetSpecTemplateSpecInitContainerLifecyclePostStartHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.StatefulSetSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface StatefulSetSpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface StatefulSetSpecTemplateSpecInitContainerLifecyclePostStartTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface StatefulSetSpecTemplateSpecInitContainerLifecyclePreStop {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.StatefulSetSpecTemplateSpecInitContainerLifecyclePreStopExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.StatefulSetSpecTemplateSpecInitContainerLifecyclePreStopHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.StatefulSetSpecTemplateSpecInitContainerLifecyclePreStopTcpSocket[];
}

export interface StatefulSetSpecTemplateSpecInitContainerLifecyclePreStopExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface StatefulSetSpecTemplateSpecInitContainerLifecyclePreStopHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.StatefulSetSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface StatefulSetSpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface StatefulSetSpecTemplateSpecInitContainerLifecyclePreStopTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface StatefulSetSpecTemplateSpecInitContainerLivenessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.StatefulSetSpecTemplateSpecInitContainerLivenessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.StatefulSetSpecTemplateSpecInitContainerLivenessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.StatefulSetSpecTemplateSpecInitContainerLivenessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.StatefulSetSpecTemplateSpecInitContainerLivenessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface StatefulSetSpecTemplateSpecInitContainerLivenessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface StatefulSetSpecTemplateSpecInitContainerLivenessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface StatefulSetSpecTemplateSpecInitContainerLivenessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.StatefulSetSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface StatefulSetSpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface StatefulSetSpecTemplateSpecInitContainerLivenessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface StatefulSetSpecTemplateSpecInitContainerPort {
    /**
     * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
     */
    containerPort: number;
    /**
     * What host IP to bind the external port to.
     */
    hostIp?: string;
    /**
     * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
     */
    hostPort?: number;
    /**
     * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
     */
    name?: string;
    /**
     * Protocol for port. Must be UDP or TCP. Defaults to "TCP".
     */
    protocol?: string;
}

export interface StatefulSetSpecTemplateSpecInitContainerReadinessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.StatefulSetSpecTemplateSpecInitContainerReadinessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.StatefulSetSpecTemplateSpecInitContainerReadinessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.StatefulSetSpecTemplateSpecInitContainerReadinessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.StatefulSetSpecTemplateSpecInitContainerReadinessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface StatefulSetSpecTemplateSpecInitContainerReadinessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface StatefulSetSpecTemplateSpecInitContainerReadinessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface StatefulSetSpecTemplateSpecInitContainerReadinessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.StatefulSetSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface StatefulSetSpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface StatefulSetSpecTemplateSpecInitContainerReadinessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface StatefulSetSpecTemplateSpecInitContainerResources {
    /**
     * Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits: {[key: string]: string};
    /**
     * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
     */
    requests: {[key: string]: string};
}

export interface StatefulSetSpecTemplateSpecInitContainerSecurityContext {
    /**
     * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
     */
    allowPrivilegeEscalation?: boolean;
    /**
     * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
     */
    capabilities?: outputs.StatefulSetSpecTemplateSpecInitContainerSecurityContextCapabilities;
    /**
     * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
     */
    privileged?: boolean;
    /**
     * Whether this container has a read-only root filesystem. Default is false.
     */
    readOnlyRootFilesystem?: boolean;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsGroup?: string;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: boolean;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUser?: string;
    /**
     * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    seLinuxOptions?: outputs.StatefulSetSpecTemplateSpecInitContainerSecurityContextSeLinuxOptions;
    /**
     * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     */
    seccompProfile?: outputs.StatefulSetSpecTemplateSpecInitContainerSecurityContextSeccompProfile;
}

export interface StatefulSetSpecTemplateSpecInitContainerSecurityContextCapabilities {
    /**
     * Added capabilities
     */
    adds?: string[];
    /**
     * Removed capabilities
     */
    drops?: string[];
}

export interface StatefulSetSpecTemplateSpecInitContainerSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: string;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: string;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: string;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: string;
}

export interface StatefulSetSpecTemplateSpecInitContainerSecurityContextSeccompProfile {
    /**
     * Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
     */
    localhostProfile?: string;
    /**
     * Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
     */
    type?: string;
}

export interface StatefulSetSpecTemplateSpecInitContainerStartupProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.StatefulSetSpecTemplateSpecInitContainerStartupProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.StatefulSetSpecTemplateSpecInitContainerStartupProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.StatefulSetSpecTemplateSpecInitContainerStartupProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.StatefulSetSpecTemplateSpecInitContainerStartupProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface StatefulSetSpecTemplateSpecInitContainerStartupProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface StatefulSetSpecTemplateSpecInitContainerStartupProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface StatefulSetSpecTemplateSpecInitContainerStartupProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.StatefulSetSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface StatefulSetSpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface StatefulSetSpecTemplateSpecInitContainerStartupProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface StatefulSetSpecTemplateSpecInitContainerVolumeMount {
    /**
     * Path within the container at which the volume should be mounted. Must not contain ':'.
     */
    mountPath: string;
    /**
     * Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional.
     */
    mountPropagation?: string;
    /**
     * This must match the Name of a Volume.
     */
    name: string;
    /**
     * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
     */
    subPath?: string;
}

export interface StatefulSetSpecTemplateSpecOs {
    /**
     * Name is the name of the operating system. The currently supported values are linux and windows.
     */
    name: string;
}

export interface StatefulSetSpecTemplateSpecReadinessGate {
    /**
     * refers to a condition in the pod's condition list with matching type.
     */
    conditionType: string;
}

export interface StatefulSetSpecTemplateSpecSecurityContext {
    /**
     * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- If unset, the Kubelet will not modify the ownership and permissions of any volume.
     */
    fsGroup?: string;
    /**
     * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir.
     */
    fsGroupChangePolicy?: string;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    runAsGroup?: string;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: boolean;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    runAsUser?: string;
    /**
     * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    seLinuxOptions?: outputs.StatefulSetSpecTemplateSpecSecurityContextSeLinuxOptions;
    /**
     * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     */
    seccompProfile?: outputs.StatefulSetSpecTemplateSpecSecurityContextSeccompProfile;
    /**
     * A list of groups applied to the first process run in each container, in addition to the container's primary GID. If unspecified, no groups will be added to any container.
     */
    supplementalGroups?: number[];
    /**
     * holds a list of namespaced sysctls used for the pod.
     */
    sysctls?: outputs.StatefulSetSpecTemplateSpecSecurityContextSysctl[];
    /**
     * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
     */
    windowsOptions?: outputs.StatefulSetSpecTemplateSpecSecurityContextWindowsOptions;
}

export interface StatefulSetSpecTemplateSpecSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: string;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: string;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: string;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: string;
}

export interface StatefulSetSpecTemplateSpecSecurityContextSeccompProfile {
    /**
     * Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
     */
    localhostProfile?: string;
    /**
     * Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
     */
    type?: string;
}

export interface StatefulSetSpecTemplateSpecSecurityContextSysctl {
    /**
     * Name of a property to set.
     */
    name: string;
    /**
     * Value of a property to set.
     */
    value: string;
}

export interface StatefulSetSpecTemplateSpecSecurityContextWindowsOptions {
    /**
     * GMSACredentialSpec is where the GMSA admission webhook inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field
     */
    gmsaCredentialSpec?: string;
    /**
     * GMSACredentialSpecName is the name of the GMSA credential spec to use.
     */
    gmsaCredentialSpecName?: string;
    /**
     * HostProcess determines if a container should be run as a 'Host Process' container. Default value is false.
     */
    hostProcess?: boolean;
    /**
     * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUsername?: string;
}

export interface StatefulSetSpecTemplateSpecToleration {
    /**
     * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
     */
    effect?: string;
    /**
     * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
     */
    key?: string;
    /**
     * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
     */
    operator?: string;
    /**
     * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
     */
    tolerationSeconds?: string;
    /**
     * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
     */
    value?: string;
}

export interface StatefulSetSpecTemplateSpecTopologySpreadConstraint {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.StatefulSetSpecTemplateSpecTopologySpreadConstraintLabelSelector[];
    /**
     * is a set of pod label keys to select the pods over which spreading will be calculated.
     */
    matchLabelKeys?: string[];
    /**
     * describes the degree to which pods may be unevenly distributed.
     */
    maxSkew?: number;
    /**
     * indicates a minimum number of eligible domains.
     */
    minDomains?: number;
    /**
     * indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew.
     */
    nodeAffinityPolicy?: string;
    /**
     * indicates how we will treat node taints when calculating pod topology spread skew.
     */
    nodeTaintsPolicy?: string;
    /**
     * the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology.
     */
    topologyKey?: string;
    /**
     * indicates how to deal with a pod if it doesn't satisfy the spread constraint.
     */
    whenUnsatisfiable?: string;
}

export interface StatefulSetSpecTemplateSpecTopologySpreadConstraintLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.StatefulSetSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface StatefulSetSpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface StatefulSetSpecTemplateSpecVolume {
    /**
     * Represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    awsElasticBlockStore?: outputs.StatefulSetSpecTemplateSpecVolumeAwsElasticBlockStore;
    /**
     * Represents an Azure Data Disk mount on the host and bind mount to the pod.
     */
    azureDisk?: outputs.StatefulSetSpecTemplateSpecVolumeAzureDisk;
    /**
     * Represents an Azure File Service mount on the host and bind mount to the pod.
     */
    azureFile?: outputs.StatefulSetSpecTemplateSpecVolumeAzureFile;
    /**
     * Represents a Ceph FS mount on the host that shares a pod's lifetime
     */
    cephFs?: outputs.StatefulSetSpecTemplateSpecVolumeCephFs;
    /**
     * Represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    cinder?: outputs.StatefulSetSpecTemplateSpecVolumeCinder;
    /**
     * ConfigMap represents a configMap that should populate this volume
     */
    configMap?: outputs.StatefulSetSpecTemplateSpecVolumeConfigMap;
    /**
     * Represents a CSI Volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
     */
    csi?: outputs.StatefulSetSpecTemplateSpecVolumeCsi;
    /**
     * DownwardAPI represents downward API about the pod that should populate this volume
     */
    downwardApi?: outputs.StatefulSetSpecTemplateSpecVolumeDownwardApi;
    /**
     * EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
     */
    emptyDir?: outputs.StatefulSetSpecTemplateSpecVolumeEmptyDir;
    /**
     * Represents an ephemeral volume that is handled by a normal storage driver. More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes
     */
    ephemeral?: outputs.StatefulSetSpecTemplateSpecVolumeEphemeral;
    /**
     * Represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
     */
    fc?: outputs.StatefulSetSpecTemplateSpecVolumeFc;
    /**
     * Represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.
     */
    flexVolume?: outputs.StatefulSetSpecTemplateSpecVolumeFlexVolume;
    /**
     * Represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
     */
    flocker?: outputs.StatefulSetSpecTemplateSpecVolumeFlocker;
    /**
     * Represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    gcePersistentDisk?: outputs.StatefulSetSpecTemplateSpecVolumeGcePersistentDisk;
    /**
     * GitRepo represents a git repository at a particular revision.
     */
    gitRepo?: outputs.StatefulSetSpecTemplateSpecVolumeGitRepo;
    /**
     * Represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
     */
    glusterfs?: outputs.StatefulSetSpecTemplateSpecVolumeGlusterfs;
    /**
     * Represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     */
    hostPath?: outputs.StatefulSetSpecTemplateSpecVolumeHostPath;
    /**
     * Represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
     */
    iscsi?: outputs.StatefulSetSpecTemplateSpecVolumeIscsi;
    /**
     * Represents a mounted local storage device such as a disk, partition or directory. Local volumes can only be used as a statically created PersistentVolume. Dynamic provisioning is not supported yet. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
     */
    local?: outputs.StatefulSetSpecTemplateSpecVolumeLocal;
    /**
     * Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    nfs?: outputs.StatefulSetSpecTemplateSpecVolumeNfs;
    /**
     * The specification of a persistent volume.
     */
    persistentVolumeClaim?: outputs.StatefulSetSpecTemplateSpecVolumePersistentVolumeClaim;
    /**
     * Represents a PhotonController persistent disk attached and mounted on kubelets host machine
     */
    photonPersistentDisk?: outputs.StatefulSetSpecTemplateSpecVolumePhotonPersistentDisk;
    /**
     * Projected represents a single volume that projects several volume sources into the same directory. More info: https://kubernetes.io/docs/concepts/storage/volumes/#projected
     */
    projecteds?: outputs.StatefulSetSpecTemplateSpecVolumeProjected[];
    /**
     * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
     */
    quobyte?: outputs.StatefulSetSpecTemplateSpecVolumeQuobyte;
    /**
     * Represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
     */
    rbd?: outputs.StatefulSetSpecTemplateSpecVolumeRbd;
    /**
     * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    secret?: outputs.StatefulSetSpecTemplateSpecVolumeSecret;
    /**
     * Represents a vSphere volume attached and mounted on kubelets host machine
     */
    vsphereVolume?: outputs.StatefulSetSpecTemplateSpecVolumeVsphereVolume;
}

export interface StatefulSetSpecTemplateSpecVolumeAwsElasticBlockStore {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    fsType?: string;
    /**
     * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
     */
    partition?: number;
    /**
     * Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    readOnly?: boolean;
    /**
     * Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    volumeId: string;
}

export interface StatefulSetSpecTemplateSpecVolumeAzureDisk {
    /**
     * Host Caching mode: None, Read Only, Read Write.
     */
    cachingMode: string;
    /**
     * The URI the data disk in the blob storage
     */
    dataDiskUri: string;
    /**
     * The Name of the data disk in the blob storage
     */
    diskName: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * The type for the data disk. Expected values: Shared, Dedicated, Managed. Defaults to Shared
     */
    kind: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
}

export interface StatefulSetSpecTemplateSpecVolumeAzureFile {
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * The name of secret that contains Azure Storage Account Name and Key
     */
    secretName: string;
    /**
     * The namespace of the secret that contains Azure Storage Account Name and Key. For Kubernetes up to 1.18.x the default is the same as the Pod. For Kubernetes 1.19.x and later the default is "default" namespace.
     */
    secretNamespace?: string;
    /**
     * Share Name
     */
    shareName: string;
}

export interface StatefulSetSpecTemplateSpecVolumeCephFs {
    /**
     * Monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    monitors: string[];
    /**
     * Used as the mounted root, rather than the full Ceph tree, default is /
     */
    path?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to `false` (read/write). More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    readOnly?: boolean;
    /**
     * The path to key ring for User, default is `/etc/ceph/user.secret`. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    secretFile?: string;
    /**
     * Reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    secretRef?: outputs.StatefulSetSpecTemplateSpecVolumeCephFsSecretRef;
    /**
     * User is the rados user name, default is admin. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    user?: string;
}

export interface StatefulSetSpecTemplateSpecVolumeCephFsSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface StatefulSetSpecTemplateSpecVolumeCinder {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    fsType?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write). More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    readOnly?: boolean;
    /**
     * Volume ID used to identify the volume in Cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    volumeId: string;
}

export interface StatefulSetSpecTemplateSpecVolumeConfigMap {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.StatefulSetSpecTemplateSpecVolumeConfigMapItem[];
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Optional: Specify whether the ConfigMap or its keys must be defined.
     */
    optional?: boolean;
}

export interface StatefulSetSpecTemplateSpecVolumeConfigMapItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface StatefulSetSpecTemplateSpecVolumeCsi {
    /**
     * the name of the volume driver to use. More info: https://kubernetes.io/docs/concepts/storage/volumes/#csi
     */
    driver: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * A reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls.
     */
    nodePublishSecretRef?: outputs.StatefulSetSpecTemplateSpecVolumeCsiNodePublishSecretRef;
    /**
     * Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
     */
    readOnly?: boolean;
    /**
     * Attributes of the volume to publish.
     */
    volumeAttributes?: {[key: string]: string};
}

export interface StatefulSetSpecTemplateSpecVolumeCsiNodePublishSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
}

export interface StatefulSetSpecTemplateSpecVolumeDownwardApi {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.StatefulSetSpecTemplateSpecVolumeDownwardApiItem[];
}

export interface StatefulSetSpecTemplateSpecVolumeDownwardApiItem {
    /**
     * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
     */
    fieldRef: outputs.StatefulSetSpecTemplateSpecVolumeDownwardApiItemFieldRef;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
     */
    path: string;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
     */
    resourceFieldRef?: outputs.StatefulSetSpecTemplateSpecVolumeDownwardApiItemResourceFieldRef;
}

export interface StatefulSetSpecTemplateSpecVolumeDownwardApiItemFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface StatefulSetSpecTemplateSpecVolumeDownwardApiItemResourceFieldRef {
    containerName: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface StatefulSetSpecTemplateSpecVolumeEmptyDir {
    /**
     * What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be one of ["" "Memory" "HugePages" "HugePages-2Mi" "HugePages-1Gi"]. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
     */
    medium?: string;
    /**
     * Total amount of local storage required for this EmptyDir volume.
     */
    sizeLimit?: string;
}

export interface StatefulSetSpecTemplateSpecVolumeEphemeral {
    /**
     * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC.
     */
    volumeClaimTemplate: outputs.StatefulSetSpecTemplateSpecVolumeEphemeralVolumeClaimTemplate;
}

export interface StatefulSetSpecTemplateSpecVolumeEphemeralVolumeClaimTemplate {
    /**
     * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
     */
    metadata?: outputs.StatefulSetSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadata;
    /**
     * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
     */
    spec: outputs.StatefulSetSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpec;
}

export interface StatefulSetSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadata {
    /**
     * An unstructured key value map stored with the persistent volume claim that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the persistent volume claim. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
}

export interface StatefulSetSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpec {
    /**
     * A set of the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
     */
    accessModes: string[];
    /**
     * A list of the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources: outputs.StatefulSetSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResources;
    /**
     * A label query over volumes to consider for binding.
     */
    selector?: outputs.StatefulSetSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelector;
    /**
     * Name of the storage class requested by the claim
     */
    storageClassName: string;
    /**
     * Defines what type of volume is required by the claim.
     */
    volumeMode: string;
    /**
     * The binding reference to the PersistentVolume backing this claim.
     */
    volumeName: string;
}

export interface StatefulSetSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResources {
    /**
     * Map describing the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits?: {[key: string]: string};
    /**
     * Map describing the minimum amount of compute resources required. If this is omitted for a container, it defaults to `limits` if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    requests?: {[key: string]: string};
}

export interface StatefulSetSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.StatefulSetSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface StatefulSetSpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface StatefulSetSpecTemplateSpecVolumeFc {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * FC target lun number
     */
    lun: number;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * FC target worldwide names (WWNs)
     */
    targetWwNs: string[];
}

export interface StatefulSetSpecTemplateSpecVolumeFlexVolume {
    /**
     * Driver is the name of the driver to use for this volume.
     */
    driver: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
     */
    fsType?: string;
    /**
     * Extra command options if any.
     */
    options?: {[key: string]: string};
    /**
     * Whether to force the ReadOnly setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * Reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
     */
    secretRef?: outputs.StatefulSetSpecTemplateSpecVolumeFlexVolumeSecretRef;
}

export interface StatefulSetSpecTemplateSpecVolumeFlexVolumeSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface StatefulSetSpecTemplateSpecVolumeFlocker {
    /**
     * Name of the dataset stored as metadata > name on the dataset for Flocker should be considered as deprecated
     */
    datasetName?: string;
    /**
     * UUID of the dataset. This is unique identifier of a Flocker dataset
     */
    datasetUuid?: string;
}

export interface StatefulSetSpecTemplateSpecVolumeGcePersistentDisk {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    fsType?: string;
    /**
     * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    partition?: number;
    /**
     * Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    pdName: string;
    /**
     * Whether to force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    readOnly?: boolean;
}

export interface StatefulSetSpecTemplateSpecVolumeGitRepo {
    /**
     * Target directory name. Must not contain or start with '..'. If '.' is supplied, the volume directory will be the git repository. Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
     */
    directory?: string;
    /**
     * Repository URL
     */
    repository?: string;
    /**
     * Commit hash for the specified revision.
     */
    revision?: string;
}

export interface StatefulSetSpecTemplateSpecVolumeGlusterfs {
    /**
     * The endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    endpointsName: string;
    /**
     * The Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    path: string;
    /**
     * Whether to force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    readOnly?: boolean;
}

export interface StatefulSetSpecTemplateSpecVolumeHostPath {
    /**
     * Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     */
    path?: string;
    /**
     * Type for HostPath volume. Allowed values are "" (default), DirectoryOrCreate, Directory, FileOrCreate, File, Socket, CharDevice and BlockDevice
     */
    type?: string;
}

export interface StatefulSetSpecTemplateSpecVolumeIscsi {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
     */
    fsType?: string;
    /**
     * Target iSCSI Qualified Name.
     */
    iqn: string;
    /**
     * iSCSI interface name that uses an iSCSI transport. Defaults to 'default' (tcp).
     */
    iscsiInterface?: string;
    /**
     * iSCSI target lun number.
     */
    lun?: number;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false.
     */
    readOnly?: boolean;
    /**
     * iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
     */
    targetPortal: string;
}

export interface StatefulSetSpecTemplateSpecVolumeLocal {
    /**
     * Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
     */
    path?: string;
}

export interface StatefulSetSpecTemplateSpecVolumeNfs {
    /**
     * Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    path: string;
    /**
     * Whether to force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    readOnly?: boolean;
    /**
     * Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    server: string;
}

export interface StatefulSetSpecTemplateSpecVolumePersistentVolumeClaim {
    /**
     * ClaimName is the name of a PersistentVolumeClaim in the same
     */
    claimName?: string;
    /**
     * Will force the ReadOnly setting in VolumeMounts.
     */
    readOnly?: boolean;
}

export interface StatefulSetSpecTemplateSpecVolumePhotonPersistentDisk {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * ID that identifies Photon Controller persistent disk
     */
    pdId: string;
}

export interface StatefulSetSpecTemplateSpecVolumeProjected {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * Source of the volume to project in the directory.
     */
    sources: outputs.StatefulSetSpecTemplateSpecVolumeProjectedSource[];
}

export interface StatefulSetSpecTemplateSpecVolumeProjectedSource {
    /**
     * ConfigMap represents a configMap that should populate this volume
     */
    configMaps?: outputs.StatefulSetSpecTemplateSpecVolumeProjectedSourceConfigMap[];
    /**
     * DownwardAPI represents downward API about the pod that should populate this volume
     */
    downwardApi?: outputs.StatefulSetSpecTemplateSpecVolumeProjectedSourceDownwardApi;
    /**
     * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    secrets?: outputs.StatefulSetSpecTemplateSpecVolumeProjectedSourceSecret[];
    /**
     * A projected service account token volume
     */
    serviceAccountToken?: outputs.StatefulSetSpecTemplateSpecVolumeProjectedSourceServiceAccountToken;
}

export interface StatefulSetSpecTemplateSpecVolumeProjectedSourceConfigMap {
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.StatefulSetSpecTemplateSpecVolumeProjectedSourceConfigMapItem[];
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Optional: Specify whether the ConfigMap or it's keys must be defined.
     */
    optional?: boolean;
}

export interface StatefulSetSpecTemplateSpecVolumeProjectedSourceConfigMapItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface StatefulSetSpecTemplateSpecVolumeProjectedSourceDownwardApi {
    /**
     * Represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
     */
    items?: outputs.StatefulSetSpecTemplateSpecVolumeProjectedSourceDownwardApiItem[];
}

export interface StatefulSetSpecTemplateSpecVolumeProjectedSourceDownwardApiItem {
    /**
     * Selects a field of the pod: only annotations, labels, name and namespace are supported.
     */
    fieldRef?: outputs.StatefulSetSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRef;
    /**
     * Mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
     */
    path: string;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
     */
    resourceFieldRef?: outputs.StatefulSetSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRef;
}

export interface StatefulSetSpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to 'v1'.
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface StatefulSetSpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRef {
    containerName: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface StatefulSetSpecTemplateSpecVolumeProjectedSourceSecret {
    /**
     * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.StatefulSetSpecTemplateSpecVolumeProjectedSourceSecretItem[];
    /**
     * Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    name?: string;
    /**
     * Optional: Specify whether the Secret or it's keys must be defined.
     */
    optional?: boolean;
}

export interface StatefulSetSpecTemplateSpecVolumeProjectedSourceSecretItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface StatefulSetSpecTemplateSpecVolumeProjectedSourceServiceAccountToken {
    /**
     * Audience is the intended audience of the token
     */
    audience?: string;
    /**
     * ExpirationSeconds is the expected duration of validity of the service account token. It defaults to 1 hour and must be at least 10 minutes (600 seconds).
     */
    expirationSeconds?: number;
    /**
     * Path specifies a relative path to the mount point of the projected volume.
     */
    path: string;
}

export interface StatefulSetSpecTemplateSpecVolumeQuobyte {
    /**
     * Group to map volume access to Default is no group
     */
    group?: string;
    /**
     * Whether to force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
     */
    registry: string;
    /**
     * User to map volume access to Defaults to serivceaccount user
     */
    user?: string;
    /**
     * Volume is a string that references an already created Quobyte volume by name.
     */
    volume: string;
}

export interface StatefulSetSpecTemplateSpecVolumeRbd {
    /**
     * A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    cephMonitors: string[];
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
     */
    fsType?: string;
    /**
     * Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    keyring: string;
    /**
     * The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    radosUser?: string;
    /**
     * The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    rbdImage: string;
    /**
     * The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it.
     */
    rbdPool?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    readOnly?: boolean;
    /**
     * Name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    secretRef?: outputs.StatefulSetSpecTemplateSpecVolumeRbdSecretRef;
}

export interface StatefulSetSpecTemplateSpecVolumeRbdSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface StatefulSetSpecTemplateSpecVolumeSecret {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.StatefulSetSpecTemplateSpecVolumeSecretItem[];
    /**
     * Optional: Specify whether the Secret or its keys must be defined.
     */
    optional?: boolean;
    /**
     * Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    secretName?: string;
}

export interface StatefulSetSpecTemplateSpecVolumeSecretItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface StatefulSetSpecTemplateSpecVolumeVsphereVolume {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * Path that identifies vSphere volume vmdk
     */
    volumePath: string;
}

export interface StatefulSetSpecUpdateStrategy {
    /**
     * RollingUpdate strategy type for StatefulSet
     */
    rollingUpdates?: outputs.StatefulSetSpecUpdateStrategyRollingUpdate[];
    /**
     * Indicates the type of the StatefulSet update strategy. Default is RollingUpdate
     */
    type?: string;
}

export interface StatefulSetSpecUpdateStrategyRollingUpdate {
    /**
     * Indicates the ordinal at which the StatefulSet should be partitioned. Default value is 0.
     */
    partition?: number;
}

export interface StatefulSetSpecVolumeClaimTemplate {
    /**
     * Standard persistent volume claim's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
     */
    metadata: outputs.StatefulSetSpecVolumeClaimTemplateMetadata;
    /**
     * Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims
     */
    spec: outputs.StatefulSetSpecVolumeClaimTemplateSpec;
}

export interface StatefulSetSpecVolumeClaimTemplateMetadata {
    /**
     * An unstructured key value map stored with the persistent volume claim that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the persistent volume claim. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the persistent volume claim, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the persistent volume claim must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this persistent volume claim that can be used by clients to determine when persistent volume claim has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this persistent volume claim. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface StatefulSetSpecVolumeClaimTemplateSpec {
    /**
     * A set of the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
     */
    accessModes: string[];
    /**
     * A list of the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources: outputs.StatefulSetSpecVolumeClaimTemplateSpecResources;
    /**
     * A label query over volumes to consider for binding.
     */
    selector?: outputs.StatefulSetSpecVolumeClaimTemplateSpecSelector;
    /**
     * Name of the storage class requested by the claim
     */
    storageClassName: string;
    /**
     * Defines what type of volume is required by the claim.
     */
    volumeMode: string;
    /**
     * The binding reference to the PersistentVolume backing this claim.
     */
    volumeName: string;
}

export interface StatefulSetSpecVolumeClaimTemplateSpecResources {
    /**
     * Map describing the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits?: {[key: string]: string};
    /**
     * Map describing the minimum amount of compute resources required. If this is omitted for a container, it defaults to `limits` if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    requests?: {[key: string]: string};
}

export interface StatefulSetSpecVolumeClaimTemplateSpecSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.StatefulSetSpecVolumeClaimTemplateSpecSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface StatefulSetSpecVolumeClaimTemplateSpecSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface StatefulSetTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface StatefulSetV1Metadata {
    /**
     * An unstructured key value map stored with the stateful set that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the stateful set. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the stateful set, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the stateful set must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this stateful set that can be used by clients to determine when stateful set has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this stateful set. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface StatefulSetV1Spec {
    /**
     * Minimum number of seconds for which a newly created pod should be ready without any of its container crashing for it to be considered available. Defaults to 0. (pod will be considered available as soon as it is ready)
     */
    minReadySeconds?: number;
    /**
     * The field controls if and how PVCs are deleted during the lifecycle of a StatefulSet.
     */
    persistentVolumeClaimRetentionPolicies?: outputs.StatefulSetV1SpecPersistentVolumeClaimRetentionPolicy[];
    /**
     * Controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down.
     */
    podManagementPolicy: string;
    /**
     * The desired number of replicas of the given Template, in the sense that they are instantiations of the same Template. Value must be a positive integer.
     */
    replicas: string;
    /**
     * The maximum number of revisions that will be maintained in the StatefulSet's revision history. The default value is 10.
     */
    revisionHistoryLimit: number;
    /**
     * A label query over pods that should match the replica count. It must match the pod template's labels.
     */
    selector: outputs.StatefulSetV1SpecSelector;
    /**
     * The name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set.
     */
    serviceName: string;
    /**
     * The object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template.
     */
    template: outputs.StatefulSetV1SpecTemplate;
    /**
     * The strategy that the StatefulSet controller will use to perform updates.
     */
    updateStrategies?: outputs.StatefulSetV1SpecUpdateStrategy[];
    /**
     * A list of claims that pods are allowed to reference. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template.
     */
    volumeClaimTemplates?: outputs.StatefulSetV1SpecVolumeClaimTemplate[];
}

export interface StatefulSetV1SpecPersistentVolumeClaimRetentionPolicy {
    /**
     * This field controls what happens when a Statefulset is deleted. Default is Retain.
     */
    whenDeleted?: string;
    /**
     * This field controls what happens when a Statefulset is scaled. Default is Retain.
     */
    whenScaled?: string;
}

export interface StatefulSetV1SpecSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.StatefulSetV1SpecSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface StatefulSetV1SpecSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface StatefulSetV1SpecTemplate {
    /**
     * Standard stateful set's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
     */
    metadata: outputs.StatefulSetV1SpecTemplateMetadata;
    /**
     * Spec of the pods owned by the stateful set
     */
    spec?: outputs.StatefulSetV1SpecTemplateSpec;
}

export interface StatefulSetV1SpecTemplateMetadata {
    /**
     * An unstructured key value map stored with the stateful set that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the stateful set. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the stateful set, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the stateful set must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this stateful set that can be used by clients to determine when stateful set has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this stateful set. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface StatefulSetV1SpecTemplateSpec {
    /**
     * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
     */
    activeDeadlineSeconds?: number;
    /**
     * Optional pod scheduling constraints.
     */
    affinity?: outputs.StatefulSetV1SpecTemplateSpecAffinity;
    /**
     * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
     */
    automountServiceAccountToken?: boolean;
    /**
     * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/
     */
    containers?: outputs.StatefulSetV1SpecTemplateSpecContainer[];
    /**
     * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy. Optional: Defaults to empty
     */
    dnsConfig?: outputs.StatefulSetV1SpecTemplateSpecDnsConfig;
    /**
     * Set DNS policy for containers within the pod. Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'. Defaults to 'ClusterFirst'. More info: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy
     */
    dnsPolicy?: string;
    /**
     * Enables generating environment variables for service discovery. Defaults to true.
     */
    enableServiceLinks?: boolean;
    /**
     * List of hosts and IPs that will be injected into the pod's hosts file if specified. Optional: Defaults to empty.
     */
    hostAliases?: outputs.StatefulSetV1SpecTemplateSpecHostAlias[];
    /**
     * Use the host's ipc namespace. Optional: Defaults to false.
     */
    hostIpc?: boolean;
    /**
     * Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified.
     */
    hostNetwork?: boolean;
    /**
     * Use the host's pid namespace.
     */
    hostPid?: boolean;
    /**
     * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
     */
    hostname: string;
    /**
     * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
     */
    imagePullSecrets?: outputs.StatefulSetV1SpecTemplateSpecImagePullSecret[];
    /**
     * List of init containers belonging to the pod. Init containers always run to completion and each must complete successfully before the next is started. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
     */
    initContainers?: outputs.StatefulSetV1SpecTemplateSpecInitContainer[];
    /**
     * NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
     */
    nodeName: string;
    /**
     * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.
     */
    nodeSelector?: {[key: string]: string};
    /**
     * Specifies the OS of the containers in the pod.
     */
    os?: outputs.StatefulSetV1SpecTemplateSpecOs;
    /**
     * If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
     */
    priorityClassName?: string;
    /**
     * If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md
     */
    readinessGates?: outputs.StatefulSetV1SpecTemplateSpecReadinessGate[];
    /**
     * Restart policy for all containers within the pod. One of Always, OnFailure, Never. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy.
     */
    restartPolicy?: string;
    /**
     * RuntimeClassName is a feature for selecting the container runtime configuration. The container runtime configuration is used to run a Pod's containers. More info: https://kubernetes.io/docs/concepts/containers/runtime-class
     */
    runtimeClassName?: string;
    /**
     * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
     */
    schedulerName: string;
    /**
     * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty
     */
    securityContext?: outputs.StatefulSetV1SpecTemplateSpecSecurityContext;
    /**
     * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: http://releases.k8s.io/HEAD/docs/design/service_accounts.md.
     */
    serviceAccountName: string;
    /**
     * Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Defaults to false.
     */
    shareProcessNamespace?: boolean;
    /**
     * If specified, the fully qualified Pod hostname will be "...svc.". If not specified, the pod will not have a domainname at all..
     */
    subdomain?: string;
    /**
     * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process.
     */
    terminationGracePeriodSeconds?: number;
    /**
     * If specified, the pod's toleration. Optional: Defaults to empty
     */
    tolerations?: outputs.StatefulSetV1SpecTemplateSpecToleration[];
    /**
     * describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints.
     */
    topologySpreadConstraints?: outputs.StatefulSetV1SpecTemplateSpecTopologySpreadConstraint[];
    /**
     * List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
     */
    volumes?: outputs.StatefulSetV1SpecTemplateSpecVolume[];
}

export interface StatefulSetV1SpecTemplateSpecAffinity {
    /**
     * Node affinity scheduling rules for the pod.
     */
    nodeAffinity?: outputs.StatefulSetV1SpecTemplateSpecAffinityNodeAffinity;
    /**
     * Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)
     */
    podAffinity?: outputs.StatefulSetV1SpecTemplateSpecAffinityPodAffinity;
    /**
     * Inter-pod topological affinity. rules that specify that certain pods should be placed in the same topological domain (e.g. same node, same rack, same zone, same power domain, etc.)
     */
    podAntiAffinity?: outputs.StatefulSetV1SpecTemplateSpecAffinityPodAntiAffinity;
}

export interface StatefulSetV1SpecTemplateSpecAffinityNodeAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: outputs.StatefulSetV1SpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a node label update), the system may or may not try to eventually evict the pod from its node.
     */
    requiredDuringSchedulingIgnoredDuringExecution?: outputs.StatefulSetV1SpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
}

export interface StatefulSetV1SpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A node selector term, associated with the corresponding weight.
     */
    preference: outputs.StatefulSetV1SpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
    /**
     * weight is in the range 1-100
     */
    weight: number;
}

export interface StatefulSetV1SpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
    /**
     * List of node selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.StatefulSetV1SpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression[];
    /**
     * A list of node selector requirements by node's fields. The requirements are ANDed.
     */
    matchFields?: outputs.StatefulSetV1SpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchField[];
}

export interface StatefulSetV1SpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
     */
    operator?: string;
    /**
     * Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface StatefulSetV1SpecTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchField {
    /**
     * The label key that the selector applies to.
     */
    key: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists`, `DoesNotExist`, `Gt`, and `Lt`.
     */
    operator: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface StatefulSetV1SpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * List of node selector terms. The terms are ORed.
     */
    nodeSelectorTerms?: outputs.StatefulSetV1SpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm[];
}

export interface StatefulSetV1SpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerm {
    /**
     * List of node selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.StatefulSetV1SpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression[];
    /**
     * A list of node selector requirements by node's fields. The requirements are ANDed.
     */
    matchFields?: outputs.StatefulSetV1SpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchField[];
}

export interface StatefulSetV1SpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
     */
    operator?: string;
    /**
     * Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface StatefulSetV1SpecTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermMatchField {
    /**
     * The label key that the selector applies to.
     */
    key: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists`, `DoesNotExist`, `Gt`, and `Lt`.
     */
    operator: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface StatefulSetV1SpecTemplateSpecAffinityPodAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: outputs.StatefulSetV1SpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.
     */
    requiredDuringSchedulingIgnoredDuringExecutions?: outputs.StatefulSetV1SpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
}

export interface StatefulSetV1SpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A pod affinity term, associated with the corresponding weight
     */
    podAffinityTerm: outputs.StatefulSetV1SpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
    /**
     * weight associated with matching the corresponding podAffinityTerm, in the range 1-100
     */
    weight: number;
}

export interface StatefulSetV1SpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.StatefulSetV1SpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface StatefulSetV1SpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.StatefulSetV1SpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface StatefulSetV1SpecTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface StatefulSetV1SpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.StatefulSetV1SpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface StatefulSetV1SpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.StatefulSetV1SpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface StatefulSetV1SpecTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface StatefulSetV1SpecTemplateSpecAffinityPodAntiAffinity {
    /**
     * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, RequiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding 'weight' to the sum if the node matches the corresponding MatchExpressions; the node(s) with the highest sum are the most preferred.
     */
    preferredDuringSchedulingIgnoredDuringExecutions?: outputs.StatefulSetV1SpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
    /**
     * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each PodAffinityTerm are intersected, i.e. all terms must be satisfied.
     */
    requiredDuringSchedulingIgnoredDuringExecutions?: outputs.StatefulSetV1SpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
}

export interface StatefulSetV1SpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
    /**
     * A pod affinity term, associated with the corresponding weight
     */
    podAffinityTerm: outputs.StatefulSetV1SpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
    /**
     * weight associated with matching the corresponding podAffinityTerm, in the range 1-100
     */
    weight: number;
}

export interface StatefulSetV1SpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.StatefulSetV1SpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface StatefulSetV1SpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.StatefulSetV1SpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface StatefulSetV1SpecTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface StatefulSetV1SpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.StatefulSetV1SpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector[];
    /**
     * namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
     */
    namespaces?: string[];
    /**
     * empty topology key is interpreted by the scheduler as 'all topologies'
     */
    topologyKey: string;
}

export interface StatefulSetV1SpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.StatefulSetV1SpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface StatefulSetV1SpecTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface StatefulSetV1SpecTemplateSpecContainer {
    /**
     * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    args?: string[];
    /**
     * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    commands?: string[];
    /**
     * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
     */
    envFroms?: outputs.StatefulSetV1SpecTemplateSpecContainerEnvFrom[];
    /**
     * List of environment variables to set in the container. Cannot be updated.
     */
    envs?: outputs.StatefulSetV1SpecTemplateSpecContainerEnv[];
    /**
     * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/
     */
    image?: string;
    /**
     * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images
     */
    imagePullPolicy: string;
    /**
     * Actions that the management system should take in response to container lifecycle events
     */
    lifecycle?: outputs.StatefulSetV1SpecTemplateSpecContainerLifecycle;
    /**
     * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    livenessProbe?: outputs.StatefulSetV1SpecTemplateSpecContainerLivenessProbe;
    /**
     * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
     */
    name: string;
    /**
     * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
     */
    ports?: outputs.StatefulSetV1SpecTemplateSpecContainerPort[];
    /**
     * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    readinessProbe?: outputs.StatefulSetV1SpecTemplateSpecContainerReadinessProbe;
    /**
     * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources?: outputs.StatefulSetV1SpecTemplateSpecContainerResources;
    /**
     * Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
     */
    securityContext?: outputs.StatefulSetV1SpecTemplateSpecContainerSecurityContext;
    /**
     * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     */
    startupProbe?: outputs.StatefulSetV1SpecTemplateSpecContainerStartupProbe;
    /**
     * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.
     */
    stdin?: boolean;
    /**
     * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.
     */
    stdinOnce?: boolean;
    /**
     * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.
     */
    terminationMessagePath?: string;
    /**
     * Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
     */
    terminationMessagePolicy: string;
    /**
     * Whether this container should allocate a TTY for itself
     */
    tty?: boolean;
    /**
     * Pod volumes to mount into the container's filesystem. Cannot be updated.
     */
    volumeMounts?: outputs.StatefulSetV1SpecTemplateSpecContainerVolumeMount[];
    /**
     * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
     */
    workingDir?: string;
}

export interface StatefulSetV1SpecTemplateSpecContainerEnv {
    /**
     * Name of the environment variable. Must be a C_IDENTIFIER
     */
    name: string;
    /**
     * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
     */
    value?: string;
    /**
     * Source for the environment variable's value
     */
    valueFrom?: outputs.StatefulSetV1SpecTemplateSpecContainerEnvValueFrom;
}

export interface StatefulSetV1SpecTemplateSpecContainerEnvFrom {
    /**
     * The ConfigMap to select from
     */
    configMapRef?: outputs.StatefulSetV1SpecTemplateSpecContainerEnvFromConfigMapRef;
    /**
     * An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
     */
    prefix?: string;
    /**
     * The Secret to select from
     */
    secretRef?: outputs.StatefulSetV1SpecTemplateSpecContainerEnvFromSecretRef;
}

export interface StatefulSetV1SpecTemplateSpecContainerEnvFromConfigMapRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the ConfigMap must be defined
     */
    optional?: boolean;
}

export interface StatefulSetV1SpecTemplateSpecContainerEnvFromSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the Secret must be defined
     */
    optional?: boolean;
}

export interface StatefulSetV1SpecTemplateSpecContainerEnvValueFrom {
    /**
     * Selects a key of a ConfigMap.
     */
    configMapKeyRef?: outputs.StatefulSetV1SpecTemplateSpecContainerEnvValueFromConfigMapKeyRef;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.
     */
    fieldRef?: outputs.StatefulSetV1SpecTemplateSpecContainerEnvValueFromFieldRef;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
     */
    resourceFieldRef?: outputs.StatefulSetV1SpecTemplateSpecContainerEnvValueFromResourceFieldRef;
    /**
     * Selects a key of a secret in the pod's namespace.
     */
    secretKeyRef?: outputs.StatefulSetV1SpecTemplateSpecContainerEnvValueFromSecretKeyRef;
}

export interface StatefulSetV1SpecTemplateSpecContainerEnvValueFromConfigMapKeyRef {
    /**
     * The key to select.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the ConfigMap or its key must be defined.
     */
    optional?: boolean;
}

export interface StatefulSetV1SpecTemplateSpecContainerEnvValueFromFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface StatefulSetV1SpecTemplateSpecContainerEnvValueFromResourceFieldRef {
    containerName?: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface StatefulSetV1SpecTemplateSpecContainerEnvValueFromSecretKeyRef {
    /**
     * The key of the secret to select from. Must be a valid secret key.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the Secret or its key must be defined.
     */
    optional?: boolean;
}

export interface StatefulSetV1SpecTemplateSpecContainerLifecycle {
    /**
     * post_start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    postStarts?: outputs.StatefulSetV1SpecTemplateSpecContainerLifecyclePostStart[];
    /**
     * pre_stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    preStops?: outputs.StatefulSetV1SpecTemplateSpecContainerLifecyclePreStop[];
}

export interface StatefulSetV1SpecTemplateSpecContainerLifecyclePostStart {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.StatefulSetV1SpecTemplateSpecContainerLifecyclePostStartExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.StatefulSetV1SpecTemplateSpecContainerLifecyclePostStartHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.StatefulSetV1SpecTemplateSpecContainerLifecyclePostStartTcpSocket[];
}

export interface StatefulSetV1SpecTemplateSpecContainerLifecyclePostStartExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface StatefulSetV1SpecTemplateSpecContainerLifecyclePostStartHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.StatefulSetV1SpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface StatefulSetV1SpecTemplateSpecContainerLifecyclePostStartHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface StatefulSetV1SpecTemplateSpecContainerLifecyclePostStartTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface StatefulSetV1SpecTemplateSpecContainerLifecyclePreStop {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.StatefulSetV1SpecTemplateSpecContainerLifecyclePreStopExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.StatefulSetV1SpecTemplateSpecContainerLifecyclePreStopHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.StatefulSetV1SpecTemplateSpecContainerLifecyclePreStopTcpSocket[];
}

export interface StatefulSetV1SpecTemplateSpecContainerLifecyclePreStopExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface StatefulSetV1SpecTemplateSpecContainerLifecyclePreStopHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.StatefulSetV1SpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface StatefulSetV1SpecTemplateSpecContainerLifecyclePreStopHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface StatefulSetV1SpecTemplateSpecContainerLifecyclePreStopTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface StatefulSetV1SpecTemplateSpecContainerLivenessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.StatefulSetV1SpecTemplateSpecContainerLivenessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.StatefulSetV1SpecTemplateSpecContainerLivenessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.StatefulSetV1SpecTemplateSpecContainerLivenessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.StatefulSetV1SpecTemplateSpecContainerLivenessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface StatefulSetV1SpecTemplateSpecContainerLivenessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface StatefulSetV1SpecTemplateSpecContainerLivenessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface StatefulSetV1SpecTemplateSpecContainerLivenessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.StatefulSetV1SpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface StatefulSetV1SpecTemplateSpecContainerLivenessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface StatefulSetV1SpecTemplateSpecContainerLivenessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface StatefulSetV1SpecTemplateSpecContainerPort {
    /**
     * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
     */
    containerPort: number;
    /**
     * What host IP to bind the external port to.
     */
    hostIp?: string;
    /**
     * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
     */
    hostPort?: number;
    /**
     * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
     */
    name?: string;
    /**
     * Protocol for port. Must be UDP or TCP. Defaults to "TCP".
     */
    protocol?: string;
}

export interface StatefulSetV1SpecTemplateSpecContainerReadinessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.StatefulSetV1SpecTemplateSpecContainerReadinessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.StatefulSetV1SpecTemplateSpecContainerReadinessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.StatefulSetV1SpecTemplateSpecContainerReadinessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.StatefulSetV1SpecTemplateSpecContainerReadinessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface StatefulSetV1SpecTemplateSpecContainerReadinessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface StatefulSetV1SpecTemplateSpecContainerReadinessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface StatefulSetV1SpecTemplateSpecContainerReadinessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.StatefulSetV1SpecTemplateSpecContainerReadinessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface StatefulSetV1SpecTemplateSpecContainerReadinessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface StatefulSetV1SpecTemplateSpecContainerReadinessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface StatefulSetV1SpecTemplateSpecContainerResources {
    /**
     * Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits: {[key: string]: string};
    /**
     * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
     */
    requests: {[key: string]: string};
}

export interface StatefulSetV1SpecTemplateSpecContainerSecurityContext {
    /**
     * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
     */
    allowPrivilegeEscalation?: boolean;
    /**
     * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
     */
    capabilities?: outputs.StatefulSetV1SpecTemplateSpecContainerSecurityContextCapabilities;
    /**
     * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
     */
    privileged?: boolean;
    /**
     * Whether this container has a read-only root filesystem. Default is false.
     */
    readOnlyRootFilesystem?: boolean;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsGroup?: string;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: boolean;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUser?: string;
    /**
     * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    seLinuxOptions?: outputs.StatefulSetV1SpecTemplateSpecContainerSecurityContextSeLinuxOptions;
    /**
     * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     */
    seccompProfile?: outputs.StatefulSetV1SpecTemplateSpecContainerSecurityContextSeccompProfile;
}

export interface StatefulSetV1SpecTemplateSpecContainerSecurityContextCapabilities {
    /**
     * Added capabilities
     */
    adds?: string[];
    /**
     * Removed capabilities
     */
    drops?: string[];
}

export interface StatefulSetV1SpecTemplateSpecContainerSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: string;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: string;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: string;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: string;
}

export interface StatefulSetV1SpecTemplateSpecContainerSecurityContextSeccompProfile {
    /**
     * Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
     */
    localhostProfile?: string;
    /**
     * Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
     */
    type?: string;
}

export interface StatefulSetV1SpecTemplateSpecContainerStartupProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.StatefulSetV1SpecTemplateSpecContainerStartupProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.StatefulSetV1SpecTemplateSpecContainerStartupProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.StatefulSetV1SpecTemplateSpecContainerStartupProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.StatefulSetV1SpecTemplateSpecContainerStartupProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface StatefulSetV1SpecTemplateSpecContainerStartupProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface StatefulSetV1SpecTemplateSpecContainerStartupProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface StatefulSetV1SpecTemplateSpecContainerStartupProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.StatefulSetV1SpecTemplateSpecContainerStartupProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface StatefulSetV1SpecTemplateSpecContainerStartupProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface StatefulSetV1SpecTemplateSpecContainerStartupProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface StatefulSetV1SpecTemplateSpecContainerVolumeMount {
    /**
     * Path within the container at which the volume should be mounted. Must not contain ':'.
     */
    mountPath: string;
    /**
     * Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional.
     */
    mountPropagation?: string;
    /**
     * This must match the Name of a Volume.
     */
    name: string;
    /**
     * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
     */
    subPath?: string;
}

export interface StatefulSetV1SpecTemplateSpecDnsConfig {
    /**
     * A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
     */
    nameservers?: string[];
    /**
     * A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
     */
    options?: outputs.StatefulSetV1SpecTemplateSpecDnsConfigOption[];
    /**
     * A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
     */
    searches?: string[];
}

export interface StatefulSetV1SpecTemplateSpecDnsConfigOption {
    /**
     * Name of the option.
     */
    name: string;
    /**
     * Value of the option. Optional: Defaults to empty.
     */
    value?: string;
}

export interface StatefulSetV1SpecTemplateSpecHostAlias {
    /**
     * Hostnames for the IP address.
     */
    hostnames: string[];
    /**
     * IP address of the host file entry.
     */
    ip: string;
}

export interface StatefulSetV1SpecTemplateSpecImagePullSecret {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
}

export interface StatefulSetV1SpecTemplateSpecInitContainer {
    /**
     * Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    args?: string[];
    /**
     * Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
     */
    commands?: string[];
    /**
     * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
     */
    envFroms?: outputs.StatefulSetV1SpecTemplateSpecInitContainerEnvFrom[];
    /**
     * List of environment variables to set in the container. Cannot be updated.
     */
    envs?: outputs.StatefulSetV1SpecTemplateSpecInitContainerEnv[];
    /**
     * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images/
     */
    image?: string;
    /**
     * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images/#updating-images
     */
    imagePullPolicy: string;
    /**
     * Actions that the management system should take in response to container lifecycle events
     */
    lifecycle?: outputs.StatefulSetV1SpecTemplateSpecInitContainerLifecycle;
    /**
     * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    livenessProbe?: outputs.StatefulSetV1SpecTemplateSpecInitContainerLivenessProbe;
    /**
     * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
     */
    name: string;
    /**
     * List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
     */
    ports?: outputs.StatefulSetV1SpecTemplateSpecInitContainerPort[];
    /**
     * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    readinessProbe?: outputs.StatefulSetV1SpecTemplateSpecInitContainerReadinessProbe;
    /**
     * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources?: outputs.StatefulSetV1SpecTemplateSpecInitContainerResources;
    /**
     * Security options the pod should run with. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
     */
    securityContext?: outputs.StatefulSetV1SpecTemplateSpecInitContainerSecurityContext;
    /**
     * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     */
    startupProbe?: outputs.StatefulSetV1SpecTemplateSpecInitContainerStartupProbe;
    /**
     * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.
     */
    stdin?: boolean;
    /**
     * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.
     */
    stdinOnce?: boolean;
    /**
     * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.
     */
    terminationMessagePath?: string;
    /**
     * Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
     */
    terminationMessagePolicy: string;
    /**
     * Whether this container should allocate a TTY for itself
     */
    tty?: boolean;
    /**
     * Pod volumes to mount into the container's filesystem. Cannot be updated.
     */
    volumeMounts?: outputs.StatefulSetV1SpecTemplateSpecInitContainerVolumeMount[];
    /**
     * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
     */
    workingDir?: string;
}

export interface StatefulSetV1SpecTemplateSpecInitContainerEnv {
    /**
     * Name of the environment variable. Must be a C_IDENTIFIER
     */
    name: string;
    /**
     * Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
     */
    value?: string;
    /**
     * Source for the environment variable's value
     */
    valueFrom?: outputs.StatefulSetV1SpecTemplateSpecInitContainerEnvValueFrom;
}

export interface StatefulSetV1SpecTemplateSpecInitContainerEnvFrom {
    /**
     * The ConfigMap to select from
     */
    configMapRef?: outputs.StatefulSetV1SpecTemplateSpecInitContainerEnvFromConfigMapRef;
    /**
     * An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
     */
    prefix?: string;
    /**
     * The Secret to select from
     */
    secretRef?: outputs.StatefulSetV1SpecTemplateSpecInitContainerEnvFromSecretRef;
}

export interface StatefulSetV1SpecTemplateSpecInitContainerEnvFromConfigMapRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the ConfigMap must be defined
     */
    optional?: boolean;
}

export interface StatefulSetV1SpecTemplateSpecInitContainerEnvFromSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Specify whether the Secret must be defined
     */
    optional?: boolean;
}

export interface StatefulSetV1SpecTemplateSpecInitContainerEnvValueFrom {
    /**
     * Selects a key of a ConfigMap.
     */
    configMapKeyRef?: outputs.StatefulSetV1SpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRef;
    /**
     * Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP.
     */
    fieldRef?: outputs.StatefulSetV1SpecTemplateSpecInitContainerEnvValueFromFieldRef;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
     */
    resourceFieldRef?: outputs.StatefulSetV1SpecTemplateSpecInitContainerEnvValueFromResourceFieldRef;
    /**
     * Selects a key of a secret in the pod's namespace.
     */
    secretKeyRef?: outputs.StatefulSetV1SpecTemplateSpecInitContainerEnvValueFromSecretKeyRef;
}

export interface StatefulSetV1SpecTemplateSpecInitContainerEnvValueFromConfigMapKeyRef {
    /**
     * The key to select.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the ConfigMap or its key must be defined.
     */
    optional?: boolean;
}

export interface StatefulSetV1SpecTemplateSpecInitContainerEnvValueFromFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface StatefulSetV1SpecTemplateSpecInitContainerEnvValueFromResourceFieldRef {
    containerName?: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface StatefulSetV1SpecTemplateSpecInitContainerEnvValueFromSecretKeyRef {
    /**
     * The key of the secret to select from. Must be a valid secret key.
     */
    key?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Specify whether the Secret or its key must be defined.
     */
    optional?: boolean;
}

export interface StatefulSetV1SpecTemplateSpecInitContainerLifecycle {
    /**
     * post_start is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    postStarts?: outputs.StatefulSetV1SpecTemplateSpecInitContainerLifecyclePostStart[];
    /**
     * pre_stop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
     */
    preStops?: outputs.StatefulSetV1SpecTemplateSpecInitContainerLifecyclePreStop[];
}

export interface StatefulSetV1SpecTemplateSpecInitContainerLifecyclePostStart {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.StatefulSetV1SpecTemplateSpecInitContainerLifecyclePostStartExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.StatefulSetV1SpecTemplateSpecInitContainerLifecyclePostStartHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.StatefulSetV1SpecTemplateSpecInitContainerLifecyclePostStartTcpSocket[];
}

export interface StatefulSetV1SpecTemplateSpecInitContainerLifecyclePostStartExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface StatefulSetV1SpecTemplateSpecInitContainerLifecyclePostStartHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.StatefulSetV1SpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface StatefulSetV1SpecTemplateSpecInitContainerLifecyclePostStartHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface StatefulSetV1SpecTemplateSpecInitContainerLifecyclePostStartTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface StatefulSetV1SpecTemplateSpecInitContainerLifecyclePreStop {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.StatefulSetV1SpecTemplateSpecInitContainerLifecyclePreStopExec;
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.StatefulSetV1SpecTemplateSpecInitContainerLifecyclePreStopHttpGet;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.StatefulSetV1SpecTemplateSpecInitContainerLifecyclePreStopTcpSocket[];
}

export interface StatefulSetV1SpecTemplateSpecInitContainerLifecyclePreStopExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface StatefulSetV1SpecTemplateSpecInitContainerLifecyclePreStopHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.StatefulSetV1SpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface StatefulSetV1SpecTemplateSpecInitContainerLifecyclePreStopHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface StatefulSetV1SpecTemplateSpecInitContainerLifecyclePreStopTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface StatefulSetV1SpecTemplateSpecInitContainerLivenessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.StatefulSetV1SpecTemplateSpecInitContainerLivenessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.StatefulSetV1SpecTemplateSpecInitContainerLivenessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.StatefulSetV1SpecTemplateSpecInitContainerLivenessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.StatefulSetV1SpecTemplateSpecInitContainerLivenessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface StatefulSetV1SpecTemplateSpecInitContainerLivenessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface StatefulSetV1SpecTemplateSpecInitContainerLivenessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface StatefulSetV1SpecTemplateSpecInitContainerLivenessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.StatefulSetV1SpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface StatefulSetV1SpecTemplateSpecInitContainerLivenessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface StatefulSetV1SpecTemplateSpecInitContainerLivenessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface StatefulSetV1SpecTemplateSpecInitContainerPort {
    /**
     * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
     */
    containerPort: number;
    /**
     * What host IP to bind the external port to.
     */
    hostIp?: string;
    /**
     * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
     */
    hostPort?: number;
    /**
     * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
     */
    name?: string;
    /**
     * Protocol for port. Must be UDP or TCP. Defaults to "TCP".
     */
    protocol?: string;
}

export interface StatefulSetV1SpecTemplateSpecInitContainerReadinessProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.StatefulSetV1SpecTemplateSpecInitContainerReadinessProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.StatefulSetV1SpecTemplateSpecInitContainerReadinessProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.StatefulSetV1SpecTemplateSpecInitContainerReadinessProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.StatefulSetV1SpecTemplateSpecInitContainerReadinessProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface StatefulSetV1SpecTemplateSpecInitContainerReadinessProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface StatefulSetV1SpecTemplateSpecInitContainerReadinessProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface StatefulSetV1SpecTemplateSpecInitContainerReadinessProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.StatefulSetV1SpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface StatefulSetV1SpecTemplateSpecInitContainerReadinessProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface StatefulSetV1SpecTemplateSpecInitContainerReadinessProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface StatefulSetV1SpecTemplateSpecInitContainerResources {
    /**
     * Describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits: {[key: string]: string};
    /**
     * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
     */
    requests: {[key: string]: string};
}

export interface StatefulSetV1SpecTemplateSpecInitContainerSecurityContext {
    /**
     * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
     */
    allowPrivilegeEscalation?: boolean;
    /**
     * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
     */
    capabilities?: outputs.StatefulSetV1SpecTemplateSpecInitContainerSecurityContextCapabilities;
    /**
     * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
     */
    privileged?: boolean;
    /**
     * Whether this container has a read-only root filesystem. Default is false.
     */
    readOnlyRootFilesystem?: boolean;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsGroup?: string;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: boolean;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUser?: string;
    /**
     * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    seLinuxOptions?: outputs.StatefulSetV1SpecTemplateSpecInitContainerSecurityContextSeLinuxOptions;
    /**
     * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     */
    seccompProfile?: outputs.StatefulSetV1SpecTemplateSpecInitContainerSecurityContextSeccompProfile;
}

export interface StatefulSetV1SpecTemplateSpecInitContainerSecurityContextCapabilities {
    /**
     * Added capabilities
     */
    adds?: string[];
    /**
     * Removed capabilities
     */
    drops?: string[];
}

export interface StatefulSetV1SpecTemplateSpecInitContainerSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: string;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: string;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: string;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: string;
}

export interface StatefulSetV1SpecTemplateSpecInitContainerSecurityContextSeccompProfile {
    /**
     * Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
     */
    localhostProfile?: string;
    /**
     * Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
     */
    type?: string;
}

export interface StatefulSetV1SpecTemplateSpecInitContainerStartupProbe {
    /**
     * exec specifies the action to take.
     */
    exec?: outputs.StatefulSetV1SpecTemplateSpecInitContainerStartupProbeExec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded.
     */
    failureThreshold?: number;
    /**
     * GRPC specifies an action involving a GRPC port.
     */
    grpcs?: outputs.StatefulSetV1SpecTemplateSpecInitContainerStartupProbeGrpc[];
    /**
     * Specifies the http request to perform.
     */
    httpGet?: outputs.StatefulSetV1SpecTemplateSpecInitContainerStartupProbeHttpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    initialDelaySeconds?: number;
    /**
     * How often (in seconds) to perform the probe
     */
    periodSeconds?: number;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed.
     */
    successThreshold?: number;
    /**
     * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
     */
    tcpSockets?: outputs.StatefulSetV1SpecTemplateSpecInitContainerStartupProbeTcpSocket[];
    /**
     * Number of seconds after which the probe times out. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
     */
    timeoutSeconds?: number;
}

export interface StatefulSetV1SpecTemplateSpecInitContainerStartupProbeExec {
    /**
     * Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
     */
    commands?: string[];
}

export interface StatefulSetV1SpecTemplateSpecInitContainerStartupProbeGrpc {
    /**
     * Number of the port to access on the container. Number must be in the range 1 to 65535.
     */
    port: number;
    /**
     * Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
     */
    service?: string;
}

export interface StatefulSetV1SpecTemplateSpecInitContainerStartupProbeHttpGet {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    host?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    httpHeaders?: outputs.StatefulSetV1SpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeader[];
    /**
     * Path to access on the HTTP server.
     */
    path?: string;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port?: string;
    /**
     * Scheme to use for connecting to the host.
     */
    scheme?: string;
}

export interface StatefulSetV1SpecTemplateSpecInitContainerStartupProbeHttpGetHttpHeader {
    /**
     * The header field name
     */
    name?: string;
    /**
     * The header field value
     */
    value?: string;
}

export interface StatefulSetV1SpecTemplateSpecInitContainerStartupProbeTcpSocket {
    /**
     * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     */
    port: string;
}

export interface StatefulSetV1SpecTemplateSpecInitContainerVolumeMount {
    /**
     * Path within the container at which the volume should be mounted. Must not contain ':'.
     */
    mountPath: string;
    /**
     * Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional.
     */
    mountPropagation?: string;
    /**
     * This must match the Name of a Volume.
     */
    name: string;
    /**
     * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
     */
    subPath?: string;
}

export interface StatefulSetV1SpecTemplateSpecOs {
    /**
     * Name is the name of the operating system. The currently supported values are linux and windows.
     */
    name: string;
}

export interface StatefulSetV1SpecTemplateSpecReadinessGate {
    /**
     * refers to a condition in the pod's condition list with matching type.
     */
    conditionType: string;
}

export interface StatefulSetV1SpecTemplateSpecSecurityContext {
    /**
     * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- If unset, the Kubelet will not modify the ownership and permissions of any volume.
     */
    fsGroup?: string;
    /**
     * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir.
     */
    fsGroupChangePolicy?: string;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    runAsGroup?: string;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsNonRoot?: boolean;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    runAsUser?: string;
    /**
     * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
     */
    seLinuxOptions?: outputs.StatefulSetV1SpecTemplateSpecSecurityContextSeLinuxOptions;
    /**
     * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     */
    seccompProfile?: outputs.StatefulSetV1SpecTemplateSpecSecurityContextSeccompProfile;
    /**
     * A list of groups applied to the first process run in each container, in addition to the container's primary GID. If unspecified, no groups will be added to any container.
     */
    supplementalGroups?: number[];
    /**
     * holds a list of namespaced sysctls used for the pod.
     */
    sysctls?: outputs.StatefulSetV1SpecTemplateSpecSecurityContextSysctl[];
    /**
     * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
     */
    windowsOptions?: outputs.StatefulSetV1SpecTemplateSpecSecurityContextWindowsOptions;
}

export interface StatefulSetV1SpecTemplateSpecSecurityContextSeLinuxOptions {
    /**
     * Level is SELinux level label that applies to the container.
     */
    level?: string;
    /**
     * Role is a SELinux role label that applies to the container.
     */
    role?: string;
    /**
     * Type is a SELinux type label that applies to the container.
     */
    type?: string;
    /**
     * User is a SELinux user label that applies to the container.
     */
    user?: string;
}

export interface StatefulSetV1SpecTemplateSpecSecurityContextSeccompProfile {
    /**
     * Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
     */
    localhostProfile?: string;
    /**
     * Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
     */
    type?: string;
}

export interface StatefulSetV1SpecTemplateSpecSecurityContextSysctl {
    /**
     * Name of a property to set.
     */
    name: string;
    /**
     * Value of a property to set.
     */
    value: string;
}

export interface StatefulSetV1SpecTemplateSpecSecurityContextWindowsOptions {
    /**
     * GMSACredentialSpec is where the GMSA admission webhook inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field
     */
    gmsaCredentialSpec?: string;
    /**
     * GMSACredentialSpecName is the name of the GMSA credential spec to use.
     */
    gmsaCredentialSpecName?: string;
    /**
     * HostProcess determines if a container should be run as a 'Host Process' container. Default value is false.
     */
    hostProcess?: boolean;
    /**
     * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    runAsUsername?: string;
}

export interface StatefulSetV1SpecTemplateSpecToleration {
    /**
     * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
     */
    effect?: string;
    /**
     * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
     */
    key?: string;
    /**
     * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
     */
    operator?: string;
    /**
     * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
     */
    tolerationSeconds?: string;
    /**
     * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
     */
    value?: string;
}

export interface StatefulSetV1SpecTemplateSpecTopologySpreadConstraint {
    /**
     * A label query over a set of resources, in this case pods.
     */
    labelSelectors?: outputs.StatefulSetV1SpecTemplateSpecTopologySpreadConstraintLabelSelector[];
    /**
     * is a set of pod label keys to select the pods over which spreading will be calculated.
     */
    matchLabelKeys?: string[];
    /**
     * describes the degree to which pods may be unevenly distributed.
     */
    maxSkew?: number;
    /**
     * indicates a minimum number of eligible domains.
     */
    minDomains?: number;
    /**
     * indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew.
     */
    nodeAffinityPolicy?: string;
    /**
     * indicates how we will treat node taints when calculating pod topology spread skew.
     */
    nodeTaintsPolicy?: string;
    /**
     * the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology.
     */
    topologyKey?: string;
    /**
     * indicates how to deal with a pod if it doesn't satisfy the spread constraint.
     */
    whenUnsatisfiable?: string;
}

export interface StatefulSetV1SpecTemplateSpecTopologySpreadConstraintLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.StatefulSetV1SpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface StatefulSetV1SpecTemplateSpecTopologySpreadConstraintLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface StatefulSetV1SpecTemplateSpecVolume {
    /**
     * Represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    awsElasticBlockStore?: outputs.StatefulSetV1SpecTemplateSpecVolumeAwsElasticBlockStore;
    /**
     * Represents an Azure Data Disk mount on the host and bind mount to the pod.
     */
    azureDisk?: outputs.StatefulSetV1SpecTemplateSpecVolumeAzureDisk;
    /**
     * Represents an Azure File Service mount on the host and bind mount to the pod.
     */
    azureFile?: outputs.StatefulSetV1SpecTemplateSpecVolumeAzureFile;
    /**
     * Represents a Ceph FS mount on the host that shares a pod's lifetime
     */
    cephFs?: outputs.StatefulSetV1SpecTemplateSpecVolumeCephFs;
    /**
     * Represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    cinder?: outputs.StatefulSetV1SpecTemplateSpecVolumeCinder;
    /**
     * ConfigMap represents a configMap that should populate this volume
     */
    configMap?: outputs.StatefulSetV1SpecTemplateSpecVolumeConfigMap;
    /**
     * Represents a CSI Volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
     */
    csi?: outputs.StatefulSetV1SpecTemplateSpecVolumeCsi;
    /**
     * DownwardAPI represents downward API about the pod that should populate this volume
     */
    downwardApi?: outputs.StatefulSetV1SpecTemplateSpecVolumeDownwardApi;
    /**
     * EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
     */
    emptyDir?: outputs.StatefulSetV1SpecTemplateSpecVolumeEmptyDir;
    /**
     * Represents an ephemeral volume that is handled by a normal storage driver. More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes
     */
    ephemeral?: outputs.StatefulSetV1SpecTemplateSpecVolumeEphemeral;
    /**
     * Represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
     */
    fc?: outputs.StatefulSetV1SpecTemplateSpecVolumeFc;
    /**
     * Represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.
     */
    flexVolume?: outputs.StatefulSetV1SpecTemplateSpecVolumeFlexVolume;
    /**
     * Represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
     */
    flocker?: outputs.StatefulSetV1SpecTemplateSpecVolumeFlocker;
    /**
     * Represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    gcePersistentDisk?: outputs.StatefulSetV1SpecTemplateSpecVolumeGcePersistentDisk;
    /**
     * GitRepo represents a git repository at a particular revision.
     */
    gitRepo?: outputs.StatefulSetV1SpecTemplateSpecVolumeGitRepo;
    /**
     * Represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
     */
    glusterfs?: outputs.StatefulSetV1SpecTemplateSpecVolumeGlusterfs;
    /**
     * Represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     */
    hostPath?: outputs.StatefulSetV1SpecTemplateSpecVolumeHostPath;
    /**
     * Represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
     */
    iscsi?: outputs.StatefulSetV1SpecTemplateSpecVolumeIscsi;
    /**
     * Represents a mounted local storage device such as a disk, partition or directory. Local volumes can only be used as a statically created PersistentVolume. Dynamic provisioning is not supported yet. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
     */
    local?: outputs.StatefulSetV1SpecTemplateSpecVolumeLocal;
    /**
     * Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    nfs?: outputs.StatefulSetV1SpecTemplateSpecVolumeNfs;
    /**
     * The specification of a persistent volume.
     */
    persistentVolumeClaim?: outputs.StatefulSetV1SpecTemplateSpecVolumePersistentVolumeClaim;
    /**
     * Represents a PhotonController persistent disk attached and mounted on kubelets host machine
     */
    photonPersistentDisk?: outputs.StatefulSetV1SpecTemplateSpecVolumePhotonPersistentDisk;
    /**
     * Projected represents a single volume that projects several volume sources into the same directory. More info: https://kubernetes.io/docs/concepts/storage/volumes/#projected
     */
    projecteds?: outputs.StatefulSetV1SpecTemplateSpecVolumeProjected[];
    /**
     * Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
     */
    quobyte?: outputs.StatefulSetV1SpecTemplateSpecVolumeQuobyte;
    /**
     * Represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
     */
    rbd?: outputs.StatefulSetV1SpecTemplateSpecVolumeRbd;
    /**
     * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    secret?: outputs.StatefulSetV1SpecTemplateSpecVolumeSecret;
    /**
     * Represents a vSphere volume attached and mounted on kubelets host machine
     */
    vsphereVolume?: outputs.StatefulSetV1SpecTemplateSpecVolumeVsphereVolume;
}

export interface StatefulSetV1SpecTemplateSpecVolumeAwsElasticBlockStore {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    fsType?: string;
    /**
     * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
     */
    partition?: number;
    /**
     * Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    readOnly?: boolean;
    /**
     * Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     */
    volumeId: string;
}

export interface StatefulSetV1SpecTemplateSpecVolumeAzureDisk {
    /**
     * Host Caching mode: None, Read Only, Read Write.
     */
    cachingMode: string;
    /**
     * The URI the data disk in the blob storage
     */
    dataDiskUri: string;
    /**
     * The Name of the data disk in the blob storage
     */
    diskName: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * The type for the data disk. Expected values: Shared, Dedicated, Managed. Defaults to Shared
     */
    kind: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
}

export interface StatefulSetV1SpecTemplateSpecVolumeAzureFile {
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * The name of secret that contains Azure Storage Account Name and Key
     */
    secretName: string;
    /**
     * The namespace of the secret that contains Azure Storage Account Name and Key. For Kubernetes up to 1.18.x the default is the same as the Pod. For Kubernetes 1.19.x and later the default is "default" namespace.
     */
    secretNamespace?: string;
    /**
     * Share Name
     */
    shareName: string;
}

export interface StatefulSetV1SpecTemplateSpecVolumeCephFs {
    /**
     * Monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    monitors: string[];
    /**
     * Used as the mounted root, rather than the full Ceph tree, default is /
     */
    path?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to `false` (read/write). More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    readOnly?: boolean;
    /**
     * The path to key ring for User, default is `/etc/ceph/user.secret`. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    secretFile?: string;
    /**
     * Reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    secretRef?: outputs.StatefulSetV1SpecTemplateSpecVolumeCephFsSecretRef;
    /**
     * User is the rados user name, default is admin. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     */
    user?: string;
}

export interface StatefulSetV1SpecTemplateSpecVolumeCephFsSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface StatefulSetV1SpecTemplateSpecVolumeCinder {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    fsType?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write). More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    readOnly?: boolean;
    /**
     * Volume ID used to identify the volume in Cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     */
    volumeId: string;
}

export interface StatefulSetV1SpecTemplateSpecVolumeConfigMap {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.StatefulSetV1SpecTemplateSpecVolumeConfigMapItem[];
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Optional: Specify whether the ConfigMap or its keys must be defined.
     */
    optional?: boolean;
}

export interface StatefulSetV1SpecTemplateSpecVolumeConfigMapItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface StatefulSetV1SpecTemplateSpecVolumeCsi {
    /**
     * the name of the volume driver to use. More info: https://kubernetes.io/docs/concepts/storage/volumes/#csi
     */
    driver: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * A reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls.
     */
    nodePublishSecretRef?: outputs.StatefulSetV1SpecTemplateSpecVolumeCsiNodePublishSecretRef;
    /**
     * Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#csi
     */
    readOnly?: boolean;
    /**
     * Attributes of the volume to publish.
     */
    volumeAttributes?: {[key: string]: string};
}

export interface StatefulSetV1SpecTemplateSpecVolumeCsiNodePublishSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
}

export interface StatefulSetV1SpecTemplateSpecVolumeDownwardApi {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.StatefulSetV1SpecTemplateSpecVolumeDownwardApiItem[];
}

export interface StatefulSetV1SpecTemplateSpecVolumeDownwardApiItem {
    /**
     * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
     */
    fieldRef: outputs.StatefulSetV1SpecTemplateSpecVolumeDownwardApiItemFieldRef;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
     */
    path: string;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
     */
    resourceFieldRef?: outputs.StatefulSetV1SpecTemplateSpecVolumeDownwardApiItemResourceFieldRef;
}

export interface StatefulSetV1SpecTemplateSpecVolumeDownwardApiItemFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to "v1".
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface StatefulSetV1SpecTemplateSpecVolumeDownwardApiItemResourceFieldRef {
    containerName: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface StatefulSetV1SpecTemplateSpecVolumeEmptyDir {
    /**
     * What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be one of ["" "Memory" "HugePages" "HugePages-2Mi" "HugePages-1Gi"]. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
     */
    medium?: string;
    /**
     * Total amount of local storage required for this EmptyDir volume.
     */
    sizeLimit?: string;
}

export interface StatefulSetV1SpecTemplateSpecVolumeEphemeral {
    /**
     * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC.
     */
    volumeClaimTemplate: outputs.StatefulSetV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplate;
}

export interface StatefulSetV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplate {
    /**
     * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
     */
    metadata?: outputs.StatefulSetV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadata;
    /**
     * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
     */
    spec: outputs.StatefulSetV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpec;
}

export interface StatefulSetV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateMetadata {
    /**
     * An unstructured key value map stored with the persistent volume claim that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the persistent volume claim. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
}

export interface StatefulSetV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpec {
    /**
     * A set of the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
     */
    accessModes: string[];
    /**
     * A list of the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources: outputs.StatefulSetV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResources;
    /**
     * A label query over volumes to consider for binding.
     */
    selector?: outputs.StatefulSetV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelector;
    /**
     * Name of the storage class requested by the claim
     */
    storageClassName: string;
    /**
     * Defines what type of volume is required by the claim.
     */
    volumeMode: string;
    /**
     * The binding reference to the PersistentVolume backing this claim.
     */
    volumeName: string;
}

export interface StatefulSetV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecResources {
    /**
     * Map describing the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits?: {[key: string]: string};
    /**
     * Map describing the minimum amount of compute resources required. If this is omitted for a container, it defaults to `limits` if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    requests?: {[key: string]: string};
}

export interface StatefulSetV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.StatefulSetV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface StatefulSetV1SpecTemplateSpecVolumeEphemeralVolumeClaimTemplateSpecSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface StatefulSetV1SpecTemplateSpecVolumeFc {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * FC target lun number
     */
    lun: number;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * FC target worldwide names (WWNs)
     */
    targetWwNs: string[];
}

export interface StatefulSetV1SpecTemplateSpecVolumeFlexVolume {
    /**
     * Driver is the name of the driver to use for this volume.
     */
    driver: string;
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
     */
    fsType?: string;
    /**
     * Extra command options if any.
     */
    options?: {[key: string]: string};
    /**
     * Whether to force the ReadOnly setting in VolumeMounts. Defaults to false (read/write).
     */
    readOnly?: boolean;
    /**
     * Reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
     */
    secretRef?: outputs.StatefulSetV1SpecTemplateSpecVolumeFlexVolumeSecretRef;
}

export interface StatefulSetV1SpecTemplateSpecVolumeFlexVolumeSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface StatefulSetV1SpecTemplateSpecVolumeFlocker {
    /**
     * Name of the dataset stored as metadata > name on the dataset for Flocker should be considered as deprecated
     */
    datasetName?: string;
    /**
     * UUID of the dataset. This is unique identifier of a Flocker dataset
     */
    datasetUuid?: string;
}

export interface StatefulSetV1SpecTemplateSpecVolumeGcePersistentDisk {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    fsType?: string;
    /**
     * The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    partition?: number;
    /**
     * Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    pdName: string;
    /**
     * Whether to force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     */
    readOnly?: boolean;
}

export interface StatefulSetV1SpecTemplateSpecVolumeGitRepo {
    /**
     * Target directory name. Must not contain or start with '..'. If '.' is supplied, the volume directory will be the git repository. Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
     */
    directory?: string;
    /**
     * Repository URL
     */
    repository?: string;
    /**
     * Commit hash for the specified revision.
     */
    revision?: string;
}

export interface StatefulSetV1SpecTemplateSpecVolumeGlusterfs {
    /**
     * The endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    endpointsName: string;
    /**
     * The Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    path: string;
    /**
     * Whether to force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
     */
    readOnly?: boolean;
}

export interface StatefulSetV1SpecTemplateSpecVolumeHostPath {
    /**
     * Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     */
    path?: string;
    /**
     * Type for HostPath volume. Allowed values are "" (default), DirectoryOrCreate, Directory, FileOrCreate, File, Socket, CharDevice and BlockDevice
     */
    type?: string;
}

export interface StatefulSetV1SpecTemplateSpecVolumeIscsi {
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
     */
    fsType?: string;
    /**
     * Target iSCSI Qualified Name.
     */
    iqn: string;
    /**
     * iSCSI interface name that uses an iSCSI transport. Defaults to 'default' (tcp).
     */
    iscsiInterface?: string;
    /**
     * iSCSI target lun number.
     */
    lun?: number;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false.
     */
    readOnly?: boolean;
    /**
     * iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
     */
    targetPortal: string;
}

export interface StatefulSetV1SpecTemplateSpecVolumeLocal {
    /**
     * Path of the directory on the host. More info: https://kubernetes.io/docs/concepts/storage/volumes#local
     */
    path?: string;
}

export interface StatefulSetV1SpecTemplateSpecVolumeNfs {
    /**
     * Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    path: string;
    /**
     * Whether to force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    readOnly?: boolean;
    /**
     * Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     */
    server: string;
}

export interface StatefulSetV1SpecTemplateSpecVolumePersistentVolumeClaim {
    /**
     * ClaimName is the name of a PersistentVolumeClaim in the same
     */
    claimName?: string;
    /**
     * Will force the ReadOnly setting in VolumeMounts.
     */
    readOnly?: boolean;
}

export interface StatefulSetV1SpecTemplateSpecVolumePhotonPersistentDisk {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * ID that identifies Photon Controller persistent disk
     */
    pdId: string;
}

export interface StatefulSetV1SpecTemplateSpecVolumeProjected {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * Source of the volume to project in the directory.
     */
    sources: outputs.StatefulSetV1SpecTemplateSpecVolumeProjectedSource[];
}

export interface StatefulSetV1SpecTemplateSpecVolumeProjectedSource {
    /**
     * ConfigMap represents a configMap that should populate this volume
     */
    configMaps?: outputs.StatefulSetV1SpecTemplateSpecVolumeProjectedSourceConfigMap[];
    /**
     * DownwardAPI represents downward API about the pod that should populate this volume
     */
    downwardApi?: outputs.StatefulSetV1SpecTemplateSpecVolumeProjectedSourceDownwardApi;
    /**
     * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    secrets?: outputs.StatefulSetV1SpecTemplateSpecVolumeProjectedSourceSecret[];
    /**
     * A projected service account token volume
     */
    serviceAccountToken?: outputs.StatefulSetV1SpecTemplateSpecVolumeProjectedSourceServiceAccountToken;
}

export interface StatefulSetV1SpecTemplateSpecVolumeProjectedSourceConfigMap {
    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.StatefulSetV1SpecTemplateSpecVolumeProjectedSourceConfigMapItem[];
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Optional: Specify whether the ConfigMap or it's keys must be defined.
     */
    optional?: boolean;
}

export interface StatefulSetV1SpecTemplateSpecVolumeProjectedSourceConfigMapItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface StatefulSetV1SpecTemplateSpecVolumeProjectedSourceDownwardApi {
    /**
     * Represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
     */
    items?: outputs.StatefulSetV1SpecTemplateSpecVolumeProjectedSourceDownwardApiItem[];
}

export interface StatefulSetV1SpecTemplateSpecVolumeProjectedSourceDownwardApiItem {
    /**
     * Selects a field of the pod: only annotations, labels, name and namespace are supported.
     */
    fieldRef?: outputs.StatefulSetV1SpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRef;
    /**
     * Mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
     */
    path: string;
    /**
     * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
     */
    resourceFieldRef?: outputs.StatefulSetV1SpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRef;
}

export interface StatefulSetV1SpecTemplateSpecVolumeProjectedSourceDownwardApiItemFieldRef {
    /**
     * Version of the schema the FieldPath is written in terms of, defaults to 'v1'.
     */
    apiVersion?: string;
    /**
     * Path of the field to select in the specified API version
     */
    fieldPath?: string;
}

export interface StatefulSetV1SpecTemplateSpecVolumeProjectedSourceDownwardApiItemResourceFieldRef {
    containerName: string;
    divisor?: string;
    /**
     * Resource to select
     */
    resource: string;
}

export interface StatefulSetV1SpecTemplateSpecVolumeProjectedSourceSecret {
    /**
     * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.StatefulSetV1SpecTemplateSpecVolumeProjectedSourceSecretItem[];
    /**
     * Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    name?: string;
    /**
     * Optional: Specify whether the Secret or it's keys must be defined.
     */
    optional?: boolean;
}

export interface StatefulSetV1SpecTemplateSpecVolumeProjectedSourceSecretItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface StatefulSetV1SpecTemplateSpecVolumeProjectedSourceServiceAccountToken {
    /**
     * Audience is the intended audience of the token
     */
    audience?: string;
    /**
     * ExpirationSeconds is the expected duration of validity of the service account token. It defaults to 1 hour and must be at least 10 minutes (600 seconds).
     */
    expirationSeconds?: number;
    /**
     * Path specifies a relative path to the mount point of the projected volume.
     */
    path: string;
}

export interface StatefulSetV1SpecTemplateSpecVolumeQuobyte {
    /**
     * Group to map volume access to Default is no group
     */
    group?: string;
    /**
     * Whether to force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
     */
    readOnly?: boolean;
    /**
     * Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
     */
    registry: string;
    /**
     * User to map volume access to Defaults to serivceaccount user
     */
    user?: string;
    /**
     * Volume is a string that references an already created Quobyte volume by name.
     */
    volume: string;
}

export interface StatefulSetV1SpecTemplateSpecVolumeRbd {
    /**
     * A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    cephMonitors: string[];
    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
     */
    fsType?: string;
    /**
     * Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    keyring: string;
    /**
     * The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    radosUser?: string;
    /**
     * The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    rbdImage: string;
    /**
     * The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it.
     */
    rbdPool?: string;
    /**
     * Whether to force the read-only setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    readOnly?: boolean;
    /**
     * Name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
     */
    secretRef?: outputs.StatefulSetV1SpecTemplateSpecVolumeRbdSecretRef;
}

export interface StatefulSetV1SpecTemplateSpecVolumeRbdSecretRef {
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name?: string;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    namespace: string;
}

export interface StatefulSetV1SpecTemplateSpecVolumeSecret {
    /**
     * Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    defaultMode?: string;
    /**
     * If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
     */
    items?: outputs.StatefulSetV1SpecTemplateSpecVolumeSecretItem[];
    /**
     * Optional: Specify whether the Secret or its keys must be defined.
     */
    optional?: boolean;
    /**
     * Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secrets
     */
    secretName?: string;
}

export interface StatefulSetV1SpecTemplateSpecVolumeSecretItem {
    /**
     * The key to project.
     */
    key?: string;
    /**
     * Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    mode?: string;
    /**
     * The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
     */
    path?: string;
}

export interface StatefulSetV1SpecTemplateSpecVolumeVsphereVolume {
    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    fsType?: string;
    /**
     * Path that identifies vSphere volume vmdk
     */
    volumePath: string;
}

export interface StatefulSetV1SpecUpdateStrategy {
    /**
     * RollingUpdate strategy type for StatefulSet
     */
    rollingUpdates?: outputs.StatefulSetV1SpecUpdateStrategyRollingUpdate[];
    /**
     * Indicates the type of the StatefulSet update strategy. Default is RollingUpdate
     */
    type?: string;
}

export interface StatefulSetV1SpecUpdateStrategyRollingUpdate {
    /**
     * Indicates the ordinal at which the StatefulSet should be partitioned. Default value is 0.
     */
    partition?: number;
}

export interface StatefulSetV1SpecVolumeClaimTemplate {
    /**
     * Standard persistent volume claim's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
     */
    metadata: outputs.StatefulSetV1SpecVolumeClaimTemplateMetadata;
    /**
     * Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims
     */
    spec: outputs.StatefulSetV1SpecVolumeClaimTemplateSpec;
}

export interface StatefulSetV1SpecVolumeClaimTemplateMetadata {
    /**
     * An unstructured key value map stored with the persistent volume claim that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the persistent volume claim. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the persistent volume claim, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the persistent volume claim must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this persistent volume claim that can be used by clients to determine when persistent volume claim has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this persistent volume claim. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface StatefulSetV1SpecVolumeClaimTemplateSpec {
    /**
     * A set of the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
     */
    accessModes: string[];
    /**
     * A list of the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     */
    resources: outputs.StatefulSetV1SpecVolumeClaimTemplateSpecResources;
    /**
     * A label query over volumes to consider for binding.
     */
    selector?: outputs.StatefulSetV1SpecVolumeClaimTemplateSpecSelector;
    /**
     * Name of the storage class requested by the claim
     */
    storageClassName: string;
    /**
     * Defines what type of volume is required by the claim.
     */
    volumeMode: string;
    /**
     * The binding reference to the PersistentVolume backing this claim.
     */
    volumeName: string;
}

export interface StatefulSetV1SpecVolumeClaimTemplateSpecResources {
    /**
     * Map describing the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    limits?: {[key: string]: string};
    /**
     * Map describing the minimum amount of compute resources required. If this is omitted for a container, it defaults to `limits` if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    requests?: {[key: string]: string};
}

export interface StatefulSetV1SpecVolumeClaimTemplateSpecSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.StatefulSetV1SpecVolumeClaimTemplateSpecSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface StatefulSetV1SpecVolumeClaimTemplateSpecSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface StatefulSetV1Timeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface StorageClassAllowedTopologies {
    /**
     * A list of topology selector requirements by labels.
     */
    matchLabelExpressions?: outputs.StorageClassAllowedTopologiesMatchLabelExpression[];
}

export interface StorageClassAllowedTopologiesMatchLabelExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * An array of string values. One value must match the label to be selected.
     */
    values?: string[];
}

export interface StorageClassMetadata {
    /**
     * An unstructured key value map stored with the storage class that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the storage class. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the storage class, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * An opaque value that represents the internal version of this storage class that can be used by clients to determine when storage class has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this storage class. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface StorageClassV1AllowedTopologies {
    /**
     * A list of topology selector requirements by labels.
     */
    matchLabelExpressions?: outputs.StorageClassV1AllowedTopologiesMatchLabelExpression[];
}

export interface StorageClassV1AllowedTopologiesMatchLabelExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * An array of string values. One value must match the label to be selected.
     */
    values?: string[];
}

export interface StorageClassV1Metadata {
    /**
     * An unstructured key value map stored with the storage class that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the storage class. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the storage class, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * An opaque value that represents the internal version of this storage class that can be used by clients to determine when storage class has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this storage class. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface TokenRequestV1Metadata {
    /**
     * An unstructured key value map stored with the token request that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the token request. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the token request, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * Namespace defines the space within which name of the token request must be unique.
     */
    namespace?: string;
    /**
     * An opaque value that represents the internal version of this token request that can be used by clients to determine when token request has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this token request. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface TokenRequestV1Spec {
    /**
     * Audiences are the intendend audiences of the token. A recipient of a token must identify themself with an identifier in the list of audiences of the token, and otherwise should reject the token. A token issued for multiple audiences may be used to authenticate against any of the audiences listed but implies a high degree of trust between the target audiences.
     */
    audiences: string[];
    /**
     * BoundObjectRef is a reference to an object that the token will be bound to. The token will only be valid for as long as the bound object exists. NOTE: The API server's TokenReview endpoint will validate the BoundObjectRef, but other audiences may not. Keep ExpirationSeconds small if you want prompt revocation.
     */
    boundObjectRef?: outputs.TokenRequestV1SpecBoundObjectRef;
    /**
     * expiration_seconds is the requested duration of validity of the request. The token issuer may return a token with a different validity duration so a client needs to check the 'expiration' field in a response. The expiration can't be less than 10 minutes.
     */
    expirationSeconds: number;
}

export interface TokenRequestV1SpecBoundObjectRef {
    /**
     * API version of the referent.
     */
    apiVersion?: string;
    /**
     * Kind of the referent. Valid kinds are 'Pod' and 'Secret'.
     */
    kind?: string;
    /**
     * Name of the referent.
     */
    name?: string;
    /**
     * UID of the referent.
     */
    uid?: string;
}

export interface ValidatingWebhookConfigurationMetadata {
    /**
     * An unstructured key value map stored with the validating webhook configuration that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the validating webhook configuration. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the validating webhook configuration, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * An opaque value that represents the internal version of this validating webhook configuration that can be used by clients to determine when validating webhook configuration has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this validating webhook configuration. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface ValidatingWebhookConfigurationV1Metadata {
    /**
     * An unstructured key value map stored with the validating webhook configuration that may be used to store arbitrary metadata. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
     */
    annotations?: {[key: string]: string};
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: string;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the validating webhook configuration. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
     */
    labels?: {[key: string]: string};
    /**
     * Name of the validating webhook configuration, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     */
    name: string;
    /**
     * An opaque value that represents the internal version of this validating webhook configuration that can be used by clients to determine when validating webhook configuration has changed. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this validating webhook configuration. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
     */
    uid: string;
}

export interface ValidatingWebhookConfigurationV1Webhook {
    /**
     * AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy.
     */
    admissionReviewVersions?: string[];
    /**
     * ClientConfig defines how to communicate with the hook. Required
     */
    clientConfig: outputs.ValidatingWebhookConfigurationV1WebhookClientConfig;
    /**
     * FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Fail.
     */
    failurePolicy?: string;
    /**
     * matchPolicy defines how the "rules" list is used to match incoming requests. Allowed values are "Exact" or "Equivalent".
     *
     * - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.
     *
     * - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.
     *
     * Defaults to "Equivalent"
     */
    matchPolicy?: string;
    /**
     * The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where "imagepolicy" is the name of the webhook, and kubernetes.io is the name of the organization. Required.
     */
    name: string;
    /**
     * NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook.
     *
     * For example, to run the webhook on any objects whose namespace is not associated with "runlevel" of "0" or "1";  you will set the selector as follows: "namespaceSelector": {
     *   "matchExpressions": [
     *     {
     *       "key": "runlevel",
     *       "operator": "NotIn",
     *       "values": [
     *         "0",
     *         "1"
     *       ]
     *     }
     *   ]
     * }
     *
     * If instead you want to only run the webhook on any objects whose namespace is associated with the "environment" of "prod" or "staging"; you will set the selector as follows: "namespaceSelector": {
     *   "matchExpressions": [
     *     {
     *       "key": "environment",
     *       "operator": "In",
     *       "values": [
     *         "prod",
     *         "staging"
     *       ]
     *     }
     *   ]
     * }
     *
     * See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels for more examples of label selectors.
     *
     * Default to the empty LabelSelector, which matches everything.
     */
    namespaceSelector?: outputs.ValidatingWebhookConfigurationV1WebhookNamespaceSelector;
    /**
     * ObjectSelector decides whether to run the webhook based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.
     */
    objectSelector?: outputs.ValidatingWebhookConfigurationV1WebhookObjectSelector;
    /**
     * Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.
     */
    rules?: outputs.ValidatingWebhookConfigurationV1WebhookRule[];
    /**
     * SideEffects states whether this webhook has side effects. Acceptable values are: None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or Unknown). Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission chain and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some.
     */
    sideEffects?: string;
    /**
     * TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 10 seconds.
     */
    timeoutSeconds?: number;
}

export interface ValidatingWebhookConfigurationV1WebhookClientConfig {
    /**
     * `caBundle` is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.
     */
    caBundle?: string;
    /**
     * `service` is a reference to the service for this webhook. Either `service` or `url` must be specified.
     *
     * If the webhook is running within the cluster, then you should use `service`.
     */
    service?: outputs.ValidatingWebhookConfigurationV1WebhookClientConfigService;
    /**
     * `url` gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.
     *
     * The `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.
     *
     * Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.
     *
     * The scheme must be "https"; the URL must begin with "https://".
     *
     * A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.
     *
     * Attempting to use a user or basic auth e.g. "user:password@" is not allowed. Fragments ("#...") and query parameters ("?...") are not allowed, either.
     */
    url?: string;
}

export interface ValidatingWebhookConfigurationV1WebhookClientConfigService {
    /**
     * `name` is the name of the service. Required
     */
    name: string;
    /**
     * `namespace` is the namespace of the service. Required
     */
    namespace: string;
    /**
     * `path` is an optional URL path which will be sent in any request to this service.
     */
    path?: string;
    /**
     * If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. `port` should be a valid port number (1-65535, inclusive).
     */
    port?: number;
}

export interface ValidatingWebhookConfigurationV1WebhookNamespaceSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.ValidatingWebhookConfigurationV1WebhookNamespaceSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface ValidatingWebhookConfigurationV1WebhookNamespaceSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ValidatingWebhookConfigurationV1WebhookObjectSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.ValidatingWebhookConfigurationV1WebhookObjectSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface ValidatingWebhookConfigurationV1WebhookObjectSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ValidatingWebhookConfigurationV1WebhookRule {
    apiGroups: string[];
    apiVersions: string[];
    /**
     * Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.
     */
    operations: string[];
    resources: string[];
    scope?: string;
}

export interface ValidatingWebhookConfigurationWebhook {
    /**
     * AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy.
     */
    admissionReviewVersions?: string[];
    /**
     * ClientConfig defines how to communicate with the hook. Required
     */
    clientConfig: outputs.ValidatingWebhookConfigurationWebhookClientConfig;
    /**
     * FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Fail.
     */
    failurePolicy?: string;
    /**
     * matchPolicy defines how the "rules" list is used to match incoming requests. Allowed values are "Exact" or "Equivalent".
     *
     * - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.
     *
     * - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.
     *
     * Defaults to "Equivalent"
     */
    matchPolicy?: string;
    /**
     * The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where "imagepolicy" is the name of the webhook, and kubernetes.io is the name of the organization. Required.
     */
    name: string;
    /**
     * NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook.
     *
     * For example, to run the webhook on any objects whose namespace is not associated with "runlevel" of "0" or "1";  you will set the selector as follows: "namespaceSelector": {
     *   "matchExpressions": [
     *     {
     *       "key": "runlevel",
     *       "operator": "NotIn",
     *       "values": [
     *         "0",
     *         "1"
     *       ]
     *     }
     *   ]
     * }
     *
     * If instead you want to only run the webhook on any objects whose namespace is associated with the "environment" of "prod" or "staging"; you will set the selector as follows: "namespaceSelector": {
     *   "matchExpressions": [
     *     {
     *       "key": "environment",
     *       "operator": "In",
     *       "values": [
     *         "prod",
     *         "staging"
     *       ]
     *     }
     *   ]
     * }
     *
     * See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels for more examples of label selectors.
     *
     * Default to the empty LabelSelector, which matches everything.
     */
    namespaceSelector?: outputs.ValidatingWebhookConfigurationWebhookNamespaceSelector;
    /**
     * ObjectSelector decides whether to run the webhook based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.
     */
    objectSelector?: outputs.ValidatingWebhookConfigurationWebhookObjectSelector;
    /**
     * Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.
     */
    rules?: outputs.ValidatingWebhookConfigurationWebhookRule[];
    /**
     * SideEffects states whether this webhook has side effects. Acceptable values are: None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or Unknown). Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission chain and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some.
     */
    sideEffects?: string;
    /**
     * TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 10 seconds.
     */
    timeoutSeconds?: number;
}

export interface ValidatingWebhookConfigurationWebhookClientConfig {
    /**
     * `caBundle` is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.
     */
    caBundle?: string;
    /**
     * `service` is a reference to the service for this webhook. Either `service` or `url` must be specified.
     *
     * If the webhook is running within the cluster, then you should use `service`.
     */
    service?: outputs.ValidatingWebhookConfigurationWebhookClientConfigService;
    /**
     * `url` gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.
     *
     * The `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.
     *
     * Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.
     *
     * The scheme must be "https"; the URL must begin with "https://".
     *
     * A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.
     *
     * Attempting to use a user or basic auth e.g. "user:password@" is not allowed. Fragments ("#...") and query parameters ("?...") are not allowed, either.
     */
    url?: string;
}

export interface ValidatingWebhookConfigurationWebhookClientConfigService {
    /**
     * `name` is the name of the service. Required
     */
    name: string;
    /**
     * `namespace` is the namespace of the service. Required
     */
    namespace: string;
    /**
     * `path` is an optional URL path which will be sent in any request to this service.
     */
    path?: string;
    /**
     * If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. `port` should be a valid port number (1-65535, inclusive).
     */
    port?: number;
}

export interface ValidatingWebhookConfigurationWebhookNamespaceSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.ValidatingWebhookConfigurationWebhookNamespaceSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface ValidatingWebhookConfigurationWebhookNamespaceSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ValidatingWebhookConfigurationWebhookObjectSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.ValidatingWebhookConfigurationWebhookObjectSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface ValidatingWebhookConfigurationWebhookObjectSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ValidatingWebhookConfigurationWebhookRule {
    apiGroups: string[];
    apiVersions: string[];
    /**
     * Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.
     */
    operations: string[];
    resources: string[];
    scope?: string;
}

export namespace config {
    export interface Execs {
        apiVersion: string;
        args?: string[];
        command: string;
        env?: {[key: string]: string};
    }

    export interface Experiments {
        /**
         * Enable the `kubernetes.Manifest` resource.
         *
         * @deprecated Deprecated
         */
        manifestResource?: boolean;
    }

}
