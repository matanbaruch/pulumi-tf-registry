// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AnnotationsArgs, AnnotationsState } from "./annotations";
export type Annotations = import("./annotations").Annotations;
export const Annotations: typeof import("./annotations").Annotations = null as any;
utilities.lazyLoad(exports, ["Annotations"], () => require("./annotations"));

export { ApiServiceArgs, ApiServiceState } from "./apiService";
export type ApiService = import("./apiService").ApiService;
export const ApiService: typeof import("./apiService").ApiService = null as any;
utilities.lazyLoad(exports, ["ApiService"], () => require("./apiService"));

export { ApiServiceV1Args, ApiServiceV1State } from "./apiServiceV1";
export type ApiServiceV1 = import("./apiServiceV1").ApiServiceV1;
export const ApiServiceV1: typeof import("./apiServiceV1").ApiServiceV1 = null as any;
utilities.lazyLoad(exports, ["ApiServiceV1"], () => require("./apiServiceV1"));

export { CertificateSigningRequestArgs, CertificateSigningRequestState } from "./certificateSigningRequest";
export type CertificateSigningRequest = import("./certificateSigningRequest").CertificateSigningRequest;
export const CertificateSigningRequest: typeof import("./certificateSigningRequest").CertificateSigningRequest = null as any;
utilities.lazyLoad(exports, ["CertificateSigningRequest"], () => require("./certificateSigningRequest"));

export { CertificateSigningRequestV1Args, CertificateSigningRequestV1State } from "./certificateSigningRequestV1";
export type CertificateSigningRequestV1 = import("./certificateSigningRequestV1").CertificateSigningRequestV1;
export const CertificateSigningRequestV1: typeof import("./certificateSigningRequestV1").CertificateSigningRequestV1 = null as any;
utilities.lazyLoad(exports, ["CertificateSigningRequestV1"], () => require("./certificateSigningRequestV1"));

export { ClusterRoleArgs, ClusterRoleState } from "./clusterRole";
export type ClusterRole = import("./clusterRole").ClusterRole;
export const ClusterRole: typeof import("./clusterRole").ClusterRole = null as any;
utilities.lazyLoad(exports, ["ClusterRole"], () => require("./clusterRole"));

export { ClusterRoleBindingArgs, ClusterRoleBindingState } from "./clusterRoleBinding";
export type ClusterRoleBinding = import("./clusterRoleBinding").ClusterRoleBinding;
export const ClusterRoleBinding: typeof import("./clusterRoleBinding").ClusterRoleBinding = null as any;
utilities.lazyLoad(exports, ["ClusterRoleBinding"], () => require("./clusterRoleBinding"));

export { ClusterRoleBindingV1Args, ClusterRoleBindingV1State } from "./clusterRoleBindingV1";
export type ClusterRoleBindingV1 = import("./clusterRoleBindingV1").ClusterRoleBindingV1;
export const ClusterRoleBindingV1: typeof import("./clusterRoleBindingV1").ClusterRoleBindingV1 = null as any;
utilities.lazyLoad(exports, ["ClusterRoleBindingV1"], () => require("./clusterRoleBindingV1"));

export { ClusterRoleV1Args, ClusterRoleV1State } from "./clusterRoleV1";
export type ClusterRoleV1 = import("./clusterRoleV1").ClusterRoleV1;
export const ClusterRoleV1: typeof import("./clusterRoleV1").ClusterRoleV1 = null as any;
utilities.lazyLoad(exports, ["ClusterRoleV1"], () => require("./clusterRoleV1"));

export { ConfigMapArgs, ConfigMapState } from "./configMap";
export type ConfigMap = import("./configMap").ConfigMap;
export const ConfigMap: typeof import("./configMap").ConfigMap = null as any;
utilities.lazyLoad(exports, ["ConfigMap"], () => require("./configMap"));

export { ConfigMapV1Args, ConfigMapV1State } from "./configMapV1";
export type ConfigMapV1 = import("./configMapV1").ConfigMapV1;
export const ConfigMapV1: typeof import("./configMapV1").ConfigMapV1 = null as any;
utilities.lazyLoad(exports, ["ConfigMapV1"], () => require("./configMapV1"));

export { ConfigMapV1DataArgs, ConfigMapV1DataState } from "./configMapV1Data";
export type ConfigMapV1Data = import("./configMapV1Data").ConfigMapV1Data;
export const ConfigMapV1Data: typeof import("./configMapV1Data").ConfigMapV1Data = null as any;
utilities.lazyLoad(exports, ["ConfigMapV1Data"], () => require("./configMapV1Data"));

export { CronJobArgs, CronJobState } from "./cronJob";
export type CronJob = import("./cronJob").CronJob;
export const CronJob: typeof import("./cronJob").CronJob = null as any;
utilities.lazyLoad(exports, ["CronJob"], () => require("./cronJob"));

export { CronJobV1Args, CronJobV1State } from "./cronJobV1";
export type CronJobV1 = import("./cronJobV1").CronJobV1;
export const CronJobV1: typeof import("./cronJobV1").CronJobV1 = null as any;
utilities.lazyLoad(exports, ["CronJobV1"], () => require("./cronJobV1"));

export { CsiDriverArgs, CsiDriverState } from "./csiDriver";
export type CsiDriver = import("./csiDriver").CsiDriver;
export const CsiDriver: typeof import("./csiDriver").CsiDriver = null as any;
utilities.lazyLoad(exports, ["CsiDriver"], () => require("./csiDriver"));

export { CsiDriverV1Args, CsiDriverV1State } from "./csiDriverV1";
export type CsiDriverV1 = import("./csiDriverV1").CsiDriverV1;
export const CsiDriverV1: typeof import("./csiDriverV1").CsiDriverV1 = null as any;
utilities.lazyLoad(exports, ["CsiDriverV1"], () => require("./csiDriverV1"));

export { DaemonSetV1Args, DaemonSetV1State } from "./daemonSetV1";
export type DaemonSetV1 = import("./daemonSetV1").DaemonSetV1;
export const DaemonSetV1: typeof import("./daemonSetV1").DaemonSetV1 = null as any;
utilities.lazyLoad(exports, ["DaemonSetV1"], () => require("./daemonSetV1"));

export { DaemonsetArgs, DaemonsetState } from "./daemonset";
export type Daemonset = import("./daemonset").Daemonset;
export const Daemonset: typeof import("./daemonset").Daemonset = null as any;
utilities.lazyLoad(exports, ["Daemonset"], () => require("./daemonset"));

export { DefaultServiceAccountArgs, DefaultServiceAccountState } from "./defaultServiceAccount";
export type DefaultServiceAccount = import("./defaultServiceAccount").DefaultServiceAccount;
export const DefaultServiceAccount: typeof import("./defaultServiceAccount").DefaultServiceAccount = null as any;
utilities.lazyLoad(exports, ["DefaultServiceAccount"], () => require("./defaultServiceAccount"));

export { DefaultServiceAccountV1Args, DefaultServiceAccountV1State } from "./defaultServiceAccountV1";
export type DefaultServiceAccountV1 = import("./defaultServiceAccountV1").DefaultServiceAccountV1;
export const DefaultServiceAccountV1: typeof import("./defaultServiceAccountV1").DefaultServiceAccountV1 = null as any;
utilities.lazyLoad(exports, ["DefaultServiceAccountV1"], () => require("./defaultServiceAccountV1"));

export { DeploymentArgs, DeploymentState } from "./deployment";
export type Deployment = import("./deployment").Deployment;
export const Deployment: typeof import("./deployment").Deployment = null as any;
utilities.lazyLoad(exports, ["Deployment"], () => require("./deployment"));

export { DeploymentV1Args, DeploymentV1State } from "./deploymentV1";
export type DeploymentV1 = import("./deploymentV1").DeploymentV1;
export const DeploymentV1: typeof import("./deploymentV1").DeploymentV1 = null as any;
utilities.lazyLoad(exports, ["DeploymentV1"], () => require("./deploymentV1"));

export { EndpointSliceV1Args, EndpointSliceV1State } from "./endpointSliceV1";
export type EndpointSliceV1 = import("./endpointSliceV1").EndpointSliceV1;
export const EndpointSliceV1: typeof import("./endpointSliceV1").EndpointSliceV1 = null as any;
utilities.lazyLoad(exports, ["EndpointSliceV1"], () => require("./endpointSliceV1"));

export { EndpointsArgs, EndpointsState } from "./endpoints";
export type Endpoints = import("./endpoints").Endpoints;
export const Endpoints: typeof import("./endpoints").Endpoints = null as any;
utilities.lazyLoad(exports, ["Endpoints"], () => require("./endpoints"));

export { EndpointsV1Args, EndpointsV1State } from "./endpointsV1";
export type EndpointsV1 = import("./endpointsV1").EndpointsV1;
export const EndpointsV1: typeof import("./endpointsV1").EndpointsV1 = null as any;
utilities.lazyLoad(exports, ["EndpointsV1"], () => require("./endpointsV1"));

export { EnvArgs, EnvState } from "./env";
export type Env = import("./env").Env;
export const Env: typeof import("./env").Env = null as any;
utilities.lazyLoad(exports, ["Env"], () => require("./env"));

export { GetAllNamespacesArgs, GetAllNamespacesResult, GetAllNamespacesOutputArgs } from "./getAllNamespaces";
export const getAllNamespaces: typeof import("./getAllNamespaces").getAllNamespaces = null as any;
export const getAllNamespacesOutput: typeof import("./getAllNamespaces").getAllNamespacesOutput = null as any;
utilities.lazyLoad(exports, ["getAllNamespaces","getAllNamespacesOutput"], () => require("./getAllNamespaces"));

export { GetConfigMapArgs, GetConfigMapResult, GetConfigMapOutputArgs } from "./getConfigMap";
export const getConfigMap: typeof import("./getConfigMap").getConfigMap = null as any;
export const getConfigMapOutput: typeof import("./getConfigMap").getConfigMapOutput = null as any;
utilities.lazyLoad(exports, ["getConfigMap","getConfigMapOutput"], () => require("./getConfigMap"));

export { GetConfigMapV1Args, GetConfigMapV1Result, GetConfigMapV1OutputArgs } from "./getConfigMapV1";
export const getConfigMapV1: typeof import("./getConfigMapV1").getConfigMapV1 = null as any;
export const getConfigMapV1Output: typeof import("./getConfigMapV1").getConfigMapV1Output = null as any;
utilities.lazyLoad(exports, ["getConfigMapV1","getConfigMapV1Output"], () => require("./getConfigMapV1"));

export { GetEndpointsV1Args, GetEndpointsV1Result, GetEndpointsV1OutputArgs } from "./getEndpointsV1";
export const getEndpointsV1: typeof import("./getEndpointsV1").getEndpointsV1 = null as any;
export const getEndpointsV1Output: typeof import("./getEndpointsV1").getEndpointsV1Output = null as any;
utilities.lazyLoad(exports, ["getEndpointsV1","getEndpointsV1Output"], () => require("./getEndpointsV1"));

export { GetIngressArgs, GetIngressResult, GetIngressOutputArgs } from "./getIngress";
export const getIngress: typeof import("./getIngress").getIngress = null as any;
export const getIngressOutput: typeof import("./getIngress").getIngressOutput = null as any;
utilities.lazyLoad(exports, ["getIngress","getIngressOutput"], () => require("./getIngress"));

export { GetIngressV1Args, GetIngressV1Result, GetIngressV1OutputArgs } from "./getIngressV1";
export const getIngressV1: typeof import("./getIngressV1").getIngressV1 = null as any;
export const getIngressV1Output: typeof import("./getIngressV1").getIngressV1Output = null as any;
utilities.lazyLoad(exports, ["getIngressV1","getIngressV1Output"], () => require("./getIngressV1"));

export { GetMutatingWebhookConfigurationV1Args, GetMutatingWebhookConfigurationV1Result, GetMutatingWebhookConfigurationV1OutputArgs } from "./getMutatingWebhookConfigurationV1";
export const getMutatingWebhookConfigurationV1: typeof import("./getMutatingWebhookConfigurationV1").getMutatingWebhookConfigurationV1 = null as any;
export const getMutatingWebhookConfigurationV1Output: typeof import("./getMutatingWebhookConfigurationV1").getMutatingWebhookConfigurationV1Output = null as any;
utilities.lazyLoad(exports, ["getMutatingWebhookConfigurationV1","getMutatingWebhookConfigurationV1Output"], () => require("./getMutatingWebhookConfigurationV1"));

export { GetNamespaceArgs, GetNamespaceResult, GetNamespaceOutputArgs } from "./getNamespace";
export const getNamespace: typeof import("./getNamespace").getNamespace = null as any;
export const getNamespaceOutput: typeof import("./getNamespace").getNamespaceOutput = null as any;
utilities.lazyLoad(exports, ["getNamespace","getNamespaceOutput"], () => require("./getNamespace"));

export { GetNamespaceV1Args, GetNamespaceV1Result, GetNamespaceV1OutputArgs } from "./getNamespaceV1";
export const getNamespaceV1: typeof import("./getNamespaceV1").getNamespaceV1 = null as any;
export const getNamespaceV1Output: typeof import("./getNamespaceV1").getNamespaceV1Output = null as any;
utilities.lazyLoad(exports, ["getNamespaceV1","getNamespaceV1Output"], () => require("./getNamespaceV1"));

export { GetNodesArgs, GetNodesResult, GetNodesOutputArgs } from "./getNodes";
export const getNodes: typeof import("./getNodes").getNodes = null as any;
export const getNodesOutput: typeof import("./getNodes").getNodesOutput = null as any;
utilities.lazyLoad(exports, ["getNodes","getNodesOutput"], () => require("./getNodes"));

export { GetPersistentVolumeClaimArgs, GetPersistentVolumeClaimResult, GetPersistentVolumeClaimOutputArgs } from "./getPersistentVolumeClaim";
export const getPersistentVolumeClaim: typeof import("./getPersistentVolumeClaim").getPersistentVolumeClaim = null as any;
export const getPersistentVolumeClaimOutput: typeof import("./getPersistentVolumeClaim").getPersistentVolumeClaimOutput = null as any;
utilities.lazyLoad(exports, ["getPersistentVolumeClaim","getPersistentVolumeClaimOutput"], () => require("./getPersistentVolumeClaim"));

export { GetPersistentVolumeClaimV1Args, GetPersistentVolumeClaimV1Result, GetPersistentVolumeClaimV1OutputArgs } from "./getPersistentVolumeClaimV1";
export const getPersistentVolumeClaimV1: typeof import("./getPersistentVolumeClaimV1").getPersistentVolumeClaimV1 = null as any;
export const getPersistentVolumeClaimV1Output: typeof import("./getPersistentVolumeClaimV1").getPersistentVolumeClaimV1Output = null as any;
utilities.lazyLoad(exports, ["getPersistentVolumeClaimV1","getPersistentVolumeClaimV1Output"], () => require("./getPersistentVolumeClaimV1"));

export { GetPersistentVolumeV1Args, GetPersistentVolumeV1Result, GetPersistentVolumeV1OutputArgs } from "./getPersistentVolumeV1";
export const getPersistentVolumeV1: typeof import("./getPersistentVolumeV1").getPersistentVolumeV1 = null as any;
export const getPersistentVolumeV1Output: typeof import("./getPersistentVolumeV1").getPersistentVolumeV1Output = null as any;
utilities.lazyLoad(exports, ["getPersistentVolumeV1","getPersistentVolumeV1Output"], () => require("./getPersistentVolumeV1"));

export { GetPodArgs, GetPodResult, GetPodOutputArgs } from "./getPod";
export const getPod: typeof import("./getPod").getPod = null as any;
export const getPodOutput: typeof import("./getPod").getPodOutput = null as any;
utilities.lazyLoad(exports, ["getPod","getPodOutput"], () => require("./getPod"));

export { GetPodV1Args, GetPodV1Result, GetPodV1OutputArgs } from "./getPodV1";
export const getPodV1: typeof import("./getPodV1").getPodV1 = null as any;
export const getPodV1Output: typeof import("./getPodV1").getPodV1Output = null as any;
utilities.lazyLoad(exports, ["getPodV1","getPodV1Output"], () => require("./getPodV1"));

export { GetResourceArgs, GetResourceResult, GetResourceOutputArgs } from "./getResource";
export const getResource: typeof import("./getResource").getResource = null as any;
export const getResourceOutput: typeof import("./getResource").getResourceOutput = null as any;
utilities.lazyLoad(exports, ["getResource","getResourceOutput"], () => require("./getResource"));

export { GetResourcesArgs, GetResourcesResult, GetResourcesOutputArgs } from "./getResources";
export const getResources: typeof import("./getResources").getResources = null as any;
export const getResourcesOutput: typeof import("./getResources").getResourcesOutput = null as any;
utilities.lazyLoad(exports, ["getResources","getResourcesOutput"], () => require("./getResources"));

export { GetSecretArgs, GetSecretResult, GetSecretOutputArgs } from "./getSecret";
export const getSecret: typeof import("./getSecret").getSecret = null as any;
export const getSecretOutput: typeof import("./getSecret").getSecretOutput = null as any;
utilities.lazyLoad(exports, ["getSecret","getSecretOutput"], () => require("./getSecret"));

export { GetSecretV1Args, GetSecretV1Result, GetSecretV1OutputArgs } from "./getSecretV1";
export const getSecretV1: typeof import("./getSecretV1").getSecretV1 = null as any;
export const getSecretV1Output: typeof import("./getSecretV1").getSecretV1Output = null as any;
utilities.lazyLoad(exports, ["getSecretV1","getSecretV1Output"], () => require("./getSecretV1"));

export { GetServerVersionArgs, GetServerVersionResult, GetServerVersionOutputArgs } from "./getServerVersion";
export const getServerVersion: typeof import("./getServerVersion").getServerVersion = null as any;
export const getServerVersionOutput: typeof import("./getServerVersion").getServerVersionOutput = null as any;
utilities.lazyLoad(exports, ["getServerVersion","getServerVersionOutput"], () => require("./getServerVersion"));

export { GetServiceArgs, GetServiceResult, GetServiceOutputArgs } from "./getService";
export const getService: typeof import("./getService").getService = null as any;
export const getServiceOutput: typeof import("./getService").getServiceOutput = null as any;
utilities.lazyLoad(exports, ["getService","getServiceOutput"], () => require("./getService"));

export { GetServiceAccountArgs, GetServiceAccountResult, GetServiceAccountOutputArgs } from "./getServiceAccount";
export const getServiceAccount: typeof import("./getServiceAccount").getServiceAccount = null as any;
export const getServiceAccountOutput: typeof import("./getServiceAccount").getServiceAccountOutput = null as any;
utilities.lazyLoad(exports, ["getServiceAccount","getServiceAccountOutput"], () => require("./getServiceAccount"));

export { GetServiceAccountV1Args, GetServiceAccountV1Result, GetServiceAccountV1OutputArgs } from "./getServiceAccountV1";
export const getServiceAccountV1: typeof import("./getServiceAccountV1").getServiceAccountV1 = null as any;
export const getServiceAccountV1Output: typeof import("./getServiceAccountV1").getServiceAccountV1Output = null as any;
utilities.lazyLoad(exports, ["getServiceAccountV1","getServiceAccountV1Output"], () => require("./getServiceAccountV1"));

export { GetServiceV1Args, GetServiceV1Result, GetServiceV1OutputArgs } from "./getServiceV1";
export const getServiceV1: typeof import("./getServiceV1").getServiceV1 = null as any;
export const getServiceV1Output: typeof import("./getServiceV1").getServiceV1Output = null as any;
utilities.lazyLoad(exports, ["getServiceV1","getServiceV1Output"], () => require("./getServiceV1"));

export { GetStorageClassArgs, GetStorageClassResult, GetStorageClassOutputArgs } from "./getStorageClass";
export const getStorageClass: typeof import("./getStorageClass").getStorageClass = null as any;
export const getStorageClassOutput: typeof import("./getStorageClass").getStorageClassOutput = null as any;
utilities.lazyLoad(exports, ["getStorageClass","getStorageClassOutput"], () => require("./getStorageClass"));

export { GetStorageClassV1Args, GetStorageClassV1Result, GetStorageClassV1OutputArgs } from "./getStorageClassV1";
export const getStorageClassV1: typeof import("./getStorageClassV1").getStorageClassV1 = null as any;
export const getStorageClassV1Output: typeof import("./getStorageClassV1").getStorageClassV1Output = null as any;
utilities.lazyLoad(exports, ["getStorageClassV1","getStorageClassV1Output"], () => require("./getStorageClassV1"));

export { HorizontalPodAutoscalerArgs, HorizontalPodAutoscalerState } from "./horizontalPodAutoscaler";
export type HorizontalPodAutoscaler = import("./horizontalPodAutoscaler").HorizontalPodAutoscaler;
export const HorizontalPodAutoscaler: typeof import("./horizontalPodAutoscaler").HorizontalPodAutoscaler = null as any;
utilities.lazyLoad(exports, ["HorizontalPodAutoscaler"], () => require("./horizontalPodAutoscaler"));

export { HorizontalPodAutoscalerV1Args, HorizontalPodAutoscalerV1State } from "./horizontalPodAutoscalerV1";
export type HorizontalPodAutoscalerV1 = import("./horizontalPodAutoscalerV1").HorizontalPodAutoscalerV1;
export const HorizontalPodAutoscalerV1: typeof import("./horizontalPodAutoscalerV1").HorizontalPodAutoscalerV1 = null as any;
utilities.lazyLoad(exports, ["HorizontalPodAutoscalerV1"], () => require("./horizontalPodAutoscalerV1"));

export { HorizontalPodAutoscalerV2Args, HorizontalPodAutoscalerV2State } from "./horizontalPodAutoscalerV2";
export type HorizontalPodAutoscalerV2 = import("./horizontalPodAutoscalerV2").HorizontalPodAutoscalerV2;
export const HorizontalPodAutoscalerV2: typeof import("./horizontalPodAutoscalerV2").HorizontalPodAutoscalerV2 = null as any;
utilities.lazyLoad(exports, ["HorizontalPodAutoscalerV2"], () => require("./horizontalPodAutoscalerV2"));

export { HorizontalPodAutoscalerV2beta2Args, HorizontalPodAutoscalerV2beta2State } from "./horizontalPodAutoscalerV2beta2";
export type HorizontalPodAutoscalerV2beta2 = import("./horizontalPodAutoscalerV2beta2").HorizontalPodAutoscalerV2beta2;
export const HorizontalPodAutoscalerV2beta2: typeof import("./horizontalPodAutoscalerV2beta2").HorizontalPodAutoscalerV2beta2 = null as any;
utilities.lazyLoad(exports, ["HorizontalPodAutoscalerV2beta2"], () => require("./horizontalPodAutoscalerV2beta2"));

export { IngressArgs, IngressState } from "./ingress";
export type Ingress = import("./ingress").Ingress;
export const Ingress: typeof import("./ingress").Ingress = null as any;
utilities.lazyLoad(exports, ["Ingress"], () => require("./ingress"));

export { IngressClassArgs, IngressClassState } from "./ingressClass";
export type IngressClass = import("./ingressClass").IngressClass;
export const IngressClass: typeof import("./ingressClass").IngressClass = null as any;
utilities.lazyLoad(exports, ["IngressClass"], () => require("./ingressClass"));

export { IngressClassV1Args, IngressClassV1State } from "./ingressClassV1";
export type IngressClassV1 = import("./ingressClassV1").IngressClassV1;
export const IngressClassV1: typeof import("./ingressClassV1").IngressClassV1 = null as any;
utilities.lazyLoad(exports, ["IngressClassV1"], () => require("./ingressClassV1"));

export { IngressV1Args, IngressV1State } from "./ingressV1";
export type IngressV1 = import("./ingressV1").IngressV1;
export const IngressV1: typeof import("./ingressV1").IngressV1 = null as any;
utilities.lazyLoad(exports, ["IngressV1"], () => require("./ingressV1"));

export { JobArgs, JobState } from "./job";
export type Job = import("./job").Job;
export const Job: typeof import("./job").Job = null as any;
utilities.lazyLoad(exports, ["Job"], () => require("./job"));

export { JobV1Args, JobV1State } from "./jobV1";
export type JobV1 = import("./jobV1").JobV1;
export const JobV1: typeof import("./jobV1").JobV1 = null as any;
utilities.lazyLoad(exports, ["JobV1"], () => require("./jobV1"));

export { LabelsArgs, LabelsState } from "./labels";
export type Labels = import("./labels").Labels;
export const Labels: typeof import("./labels").Labels = null as any;
utilities.lazyLoad(exports, ["Labels"], () => require("./labels"));

export { LimitRangeArgs, LimitRangeState } from "./limitRange";
export type LimitRange = import("./limitRange").LimitRange;
export const LimitRange: typeof import("./limitRange").LimitRange = null as any;
utilities.lazyLoad(exports, ["LimitRange"], () => require("./limitRange"));

export { LimitRangeV1Args, LimitRangeV1State } from "./limitRangeV1";
export type LimitRangeV1 = import("./limitRangeV1").LimitRangeV1;
export const LimitRangeV1: typeof import("./limitRangeV1").LimitRangeV1 = null as any;
utilities.lazyLoad(exports, ["LimitRangeV1"], () => require("./limitRangeV1"));

export { ManifestArgs, ManifestState } from "./manifest";
export type Manifest = import("./manifest").Manifest;
export const Manifest: typeof import("./manifest").Manifest = null as any;
utilities.lazyLoad(exports, ["Manifest"], () => require("./manifest"));

export { MutatingWebhookConfigurationArgs, MutatingWebhookConfigurationState } from "./mutatingWebhookConfiguration";
export type MutatingWebhookConfiguration = import("./mutatingWebhookConfiguration").MutatingWebhookConfiguration;
export const MutatingWebhookConfiguration: typeof import("./mutatingWebhookConfiguration").MutatingWebhookConfiguration = null as any;
utilities.lazyLoad(exports, ["MutatingWebhookConfiguration"], () => require("./mutatingWebhookConfiguration"));

export { MutatingWebhookConfigurationV1Args, MutatingWebhookConfigurationV1State } from "./mutatingWebhookConfigurationV1";
export type MutatingWebhookConfigurationV1 = import("./mutatingWebhookConfigurationV1").MutatingWebhookConfigurationV1;
export const MutatingWebhookConfigurationV1: typeof import("./mutatingWebhookConfigurationV1").MutatingWebhookConfigurationV1 = null as any;
utilities.lazyLoad(exports, ["MutatingWebhookConfigurationV1"], () => require("./mutatingWebhookConfigurationV1"));

export { NamespaceArgs, NamespaceState } from "./namespace";
export type Namespace = import("./namespace").Namespace;
export const Namespace: typeof import("./namespace").Namespace = null as any;
utilities.lazyLoad(exports, ["Namespace"], () => require("./namespace"));

export { NamespaceV1Args, NamespaceV1State } from "./namespaceV1";
export type NamespaceV1 = import("./namespaceV1").NamespaceV1;
export const NamespaceV1: typeof import("./namespaceV1").NamespaceV1 = null as any;
utilities.lazyLoad(exports, ["NamespaceV1"], () => require("./namespaceV1"));

export { NetworkPolicyArgs, NetworkPolicyState } from "./networkPolicy";
export type NetworkPolicy = import("./networkPolicy").NetworkPolicy;
export const NetworkPolicy: typeof import("./networkPolicy").NetworkPolicy = null as any;
utilities.lazyLoad(exports, ["NetworkPolicy"], () => require("./networkPolicy"));

export { NetworkPolicyV1Args, NetworkPolicyV1State } from "./networkPolicyV1";
export type NetworkPolicyV1 = import("./networkPolicyV1").NetworkPolicyV1;
export const NetworkPolicyV1: typeof import("./networkPolicyV1").NetworkPolicyV1 = null as any;
utilities.lazyLoad(exports, ["NetworkPolicyV1"], () => require("./networkPolicyV1"));

export { NodeTaintArgs, NodeTaintState } from "./nodeTaint";
export type NodeTaint = import("./nodeTaint").NodeTaint;
export const NodeTaint: typeof import("./nodeTaint").NodeTaint = null as any;
utilities.lazyLoad(exports, ["NodeTaint"], () => require("./nodeTaint"));

export { PersistentVolumeArgs, PersistentVolumeState } from "./persistentVolume";
export type PersistentVolume = import("./persistentVolume").PersistentVolume;
export const PersistentVolume: typeof import("./persistentVolume").PersistentVolume = null as any;
utilities.lazyLoad(exports, ["PersistentVolume"], () => require("./persistentVolume"));

export { PersistentVolumeClaimArgs, PersistentVolumeClaimState } from "./persistentVolumeClaim";
export type PersistentVolumeClaim = import("./persistentVolumeClaim").PersistentVolumeClaim;
export const PersistentVolumeClaim: typeof import("./persistentVolumeClaim").PersistentVolumeClaim = null as any;
utilities.lazyLoad(exports, ["PersistentVolumeClaim"], () => require("./persistentVolumeClaim"));

export { PersistentVolumeClaimV1Args, PersistentVolumeClaimV1State } from "./persistentVolumeClaimV1";
export type PersistentVolumeClaimV1 = import("./persistentVolumeClaimV1").PersistentVolumeClaimV1;
export const PersistentVolumeClaimV1: typeof import("./persistentVolumeClaimV1").PersistentVolumeClaimV1 = null as any;
utilities.lazyLoad(exports, ["PersistentVolumeClaimV1"], () => require("./persistentVolumeClaimV1"));

export { PersistentVolumeV1Args, PersistentVolumeV1State } from "./persistentVolumeV1";
export type PersistentVolumeV1 = import("./persistentVolumeV1").PersistentVolumeV1;
export const PersistentVolumeV1: typeof import("./persistentVolumeV1").PersistentVolumeV1 = null as any;
utilities.lazyLoad(exports, ["PersistentVolumeV1"], () => require("./persistentVolumeV1"));

export { PodArgs, PodState } from "./pod";
export type Pod = import("./pod").Pod;
export const Pod: typeof import("./pod").Pod = null as any;
utilities.lazyLoad(exports, ["Pod"], () => require("./pod"));

export { PodDisruptionBudgetArgs, PodDisruptionBudgetState } from "./podDisruptionBudget";
export type PodDisruptionBudget = import("./podDisruptionBudget").PodDisruptionBudget;
export const PodDisruptionBudget: typeof import("./podDisruptionBudget").PodDisruptionBudget = null as any;
utilities.lazyLoad(exports, ["PodDisruptionBudget"], () => require("./podDisruptionBudget"));

export { PodDisruptionBudgetV1Args, PodDisruptionBudgetV1State } from "./podDisruptionBudgetV1";
export type PodDisruptionBudgetV1 = import("./podDisruptionBudgetV1").PodDisruptionBudgetV1;
export const PodDisruptionBudgetV1: typeof import("./podDisruptionBudgetV1").PodDisruptionBudgetV1 = null as any;
utilities.lazyLoad(exports, ["PodDisruptionBudgetV1"], () => require("./podDisruptionBudgetV1"));

export { PodSecurityPolicyArgs, PodSecurityPolicyState } from "./podSecurityPolicy";
export type PodSecurityPolicy = import("./podSecurityPolicy").PodSecurityPolicy;
export const PodSecurityPolicy: typeof import("./podSecurityPolicy").PodSecurityPolicy = null as any;
utilities.lazyLoad(exports, ["PodSecurityPolicy"], () => require("./podSecurityPolicy"));

export { PodSecurityPolicyV1beta1Args, PodSecurityPolicyV1beta1State } from "./podSecurityPolicyV1beta1";
export type PodSecurityPolicyV1beta1 = import("./podSecurityPolicyV1beta1").PodSecurityPolicyV1beta1;
export const PodSecurityPolicyV1beta1: typeof import("./podSecurityPolicyV1beta1").PodSecurityPolicyV1beta1 = null as any;
utilities.lazyLoad(exports, ["PodSecurityPolicyV1beta1"], () => require("./podSecurityPolicyV1beta1"));

export { PodV1Args, PodV1State } from "./podV1";
export type PodV1 = import("./podV1").PodV1;
export const PodV1: typeof import("./podV1").PodV1 = null as any;
utilities.lazyLoad(exports, ["PodV1"], () => require("./podV1"));

export { PriorityClassArgs, PriorityClassState } from "./priorityClass";
export type PriorityClass = import("./priorityClass").PriorityClass;
export const PriorityClass: typeof import("./priorityClass").PriorityClass = null as any;
utilities.lazyLoad(exports, ["PriorityClass"], () => require("./priorityClass"));

export { PriorityClassV1Args, PriorityClassV1State } from "./priorityClassV1";
export type PriorityClassV1 = import("./priorityClassV1").PriorityClassV1;
export const PriorityClassV1: typeof import("./priorityClassV1").PriorityClassV1 = null as any;
utilities.lazyLoad(exports, ["PriorityClassV1"], () => require("./priorityClassV1"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ReplicationControllerArgs, ReplicationControllerState } from "./replicationController";
export type ReplicationController = import("./replicationController").ReplicationController;
export const ReplicationController: typeof import("./replicationController").ReplicationController = null as any;
utilities.lazyLoad(exports, ["ReplicationController"], () => require("./replicationController"));

export { ReplicationControllerV1Args, ReplicationControllerV1State } from "./replicationControllerV1";
export type ReplicationControllerV1 = import("./replicationControllerV1").ReplicationControllerV1;
export const ReplicationControllerV1: typeof import("./replicationControllerV1").ReplicationControllerV1 = null as any;
utilities.lazyLoad(exports, ["ReplicationControllerV1"], () => require("./replicationControllerV1"));

export { ResourceQuotaArgs, ResourceQuotaState } from "./resourceQuota";
export type ResourceQuota = import("./resourceQuota").ResourceQuota;
export const ResourceQuota: typeof import("./resourceQuota").ResourceQuota = null as any;
utilities.lazyLoad(exports, ["ResourceQuota"], () => require("./resourceQuota"));

export { ResourceQuotaV1Args, ResourceQuotaV1State } from "./resourceQuotaV1";
export type ResourceQuotaV1 = import("./resourceQuotaV1").ResourceQuotaV1;
export const ResourceQuotaV1: typeof import("./resourceQuotaV1").ResourceQuotaV1 = null as any;
utilities.lazyLoad(exports, ["ResourceQuotaV1"], () => require("./resourceQuotaV1"));

export { RoleArgs, RoleState } from "./role";
export type Role = import("./role").Role;
export const Role: typeof import("./role").Role = null as any;
utilities.lazyLoad(exports, ["Role"], () => require("./role"));

export { RoleBindingArgs, RoleBindingState } from "./roleBinding";
export type RoleBinding = import("./roleBinding").RoleBinding;
export const RoleBinding: typeof import("./roleBinding").RoleBinding = null as any;
utilities.lazyLoad(exports, ["RoleBinding"], () => require("./roleBinding"));

export { RoleBindingV1Args, RoleBindingV1State } from "./roleBindingV1";
export type RoleBindingV1 = import("./roleBindingV1").RoleBindingV1;
export const RoleBindingV1: typeof import("./roleBindingV1").RoleBindingV1 = null as any;
utilities.lazyLoad(exports, ["RoleBindingV1"], () => require("./roleBindingV1"));

export { RoleV1Args, RoleV1State } from "./roleV1";
export type RoleV1 = import("./roleV1").RoleV1;
export const RoleV1: typeof import("./roleV1").RoleV1 = null as any;
utilities.lazyLoad(exports, ["RoleV1"], () => require("./roleV1"));

export { RuntimeClassV1Args, RuntimeClassV1State } from "./runtimeClassV1";
export type RuntimeClassV1 = import("./runtimeClassV1").RuntimeClassV1;
export const RuntimeClassV1: typeof import("./runtimeClassV1").RuntimeClassV1 = null as any;
utilities.lazyLoad(exports, ["RuntimeClassV1"], () => require("./runtimeClassV1"));

export { SecretArgs, SecretState } from "./secret";
export type Secret = import("./secret").Secret;
export const Secret: typeof import("./secret").Secret = null as any;
utilities.lazyLoad(exports, ["Secret"], () => require("./secret"));

export { SecretV1Args, SecretV1State } from "./secretV1";
export type SecretV1 = import("./secretV1").SecretV1;
export const SecretV1: typeof import("./secretV1").SecretV1 = null as any;
utilities.lazyLoad(exports, ["SecretV1"], () => require("./secretV1"));

export { ServiceArgs, ServiceState } from "./service";
export type Service = import("./service").Service;
export const Service: typeof import("./service").Service = null as any;
utilities.lazyLoad(exports, ["Service"], () => require("./service"));

export { ServiceAccountArgs, ServiceAccountState } from "./serviceAccount";
export type ServiceAccount = import("./serviceAccount").ServiceAccount;
export const ServiceAccount: typeof import("./serviceAccount").ServiceAccount = null as any;
utilities.lazyLoad(exports, ["ServiceAccount"], () => require("./serviceAccount"));

export { ServiceAccountV1Args, ServiceAccountV1State } from "./serviceAccountV1";
export type ServiceAccountV1 = import("./serviceAccountV1").ServiceAccountV1;
export const ServiceAccountV1: typeof import("./serviceAccountV1").ServiceAccountV1 = null as any;
utilities.lazyLoad(exports, ["ServiceAccountV1"], () => require("./serviceAccountV1"));

export { ServiceV1Args, ServiceV1State } from "./serviceV1";
export type ServiceV1 = import("./serviceV1").ServiceV1;
export const ServiceV1: typeof import("./serviceV1").ServiceV1 = null as any;
utilities.lazyLoad(exports, ["ServiceV1"], () => require("./serviceV1"));

export { StatefulSetArgs, StatefulSetState } from "./statefulSet";
export type StatefulSet = import("./statefulSet").StatefulSet;
export const StatefulSet: typeof import("./statefulSet").StatefulSet = null as any;
utilities.lazyLoad(exports, ["StatefulSet"], () => require("./statefulSet"));

export { StatefulSetV1Args, StatefulSetV1State } from "./statefulSetV1";
export type StatefulSetV1 = import("./statefulSetV1").StatefulSetV1;
export const StatefulSetV1: typeof import("./statefulSetV1").StatefulSetV1 = null as any;
utilities.lazyLoad(exports, ["StatefulSetV1"], () => require("./statefulSetV1"));

export { StorageClassArgs, StorageClassState } from "./storageClass";
export type StorageClass = import("./storageClass").StorageClass;
export const StorageClass: typeof import("./storageClass").StorageClass = null as any;
utilities.lazyLoad(exports, ["StorageClass"], () => require("./storageClass"));

export { StorageClassV1Args, StorageClassV1State } from "./storageClassV1";
export type StorageClassV1 = import("./storageClassV1").StorageClassV1;
export const StorageClassV1: typeof import("./storageClassV1").StorageClassV1 = null as any;
utilities.lazyLoad(exports, ["StorageClassV1"], () => require("./storageClassV1"));

export { TokenRequestV1Args, TokenRequestV1State } from "./tokenRequestV1";
export type TokenRequestV1 = import("./tokenRequestV1").TokenRequestV1;
export const TokenRequestV1: typeof import("./tokenRequestV1").TokenRequestV1 = null as any;
utilities.lazyLoad(exports, ["TokenRequestV1"], () => require("./tokenRequestV1"));

export { ValidatingWebhookConfigurationArgs, ValidatingWebhookConfigurationState } from "./validatingWebhookConfiguration";
export type ValidatingWebhookConfiguration = import("./validatingWebhookConfiguration").ValidatingWebhookConfiguration;
export const ValidatingWebhookConfiguration: typeof import("./validatingWebhookConfiguration").ValidatingWebhookConfiguration = null as any;
utilities.lazyLoad(exports, ["ValidatingWebhookConfiguration"], () => require("./validatingWebhookConfiguration"));

export { ValidatingWebhookConfigurationV1Args, ValidatingWebhookConfigurationV1State } from "./validatingWebhookConfigurationV1";
export type ValidatingWebhookConfigurationV1 = import("./validatingWebhookConfigurationV1").ValidatingWebhookConfigurationV1;
export const ValidatingWebhookConfigurationV1: typeof import("./validatingWebhookConfigurationV1").ValidatingWebhookConfigurationV1 = null as any;
utilities.lazyLoad(exports, ["ValidatingWebhookConfigurationV1"], () => require("./validatingWebhookConfigurationV1"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "kubernetes:index/annotations:Annotations":
                return new Annotations(name, <any>undefined, { urn })
            case "kubernetes:index/apiService:ApiService":
                return new ApiService(name, <any>undefined, { urn })
            case "kubernetes:index/apiServiceV1:ApiServiceV1":
                return new ApiServiceV1(name, <any>undefined, { urn })
            case "kubernetes:index/certificateSigningRequest:CertificateSigningRequest":
                return new CertificateSigningRequest(name, <any>undefined, { urn })
            case "kubernetes:index/certificateSigningRequestV1:CertificateSigningRequestV1":
                return new CertificateSigningRequestV1(name, <any>undefined, { urn })
            case "kubernetes:index/clusterRole:ClusterRole":
                return new ClusterRole(name, <any>undefined, { urn })
            case "kubernetes:index/clusterRoleBinding:ClusterRoleBinding":
                return new ClusterRoleBinding(name, <any>undefined, { urn })
            case "kubernetes:index/clusterRoleBindingV1:ClusterRoleBindingV1":
                return new ClusterRoleBindingV1(name, <any>undefined, { urn })
            case "kubernetes:index/clusterRoleV1:ClusterRoleV1":
                return new ClusterRoleV1(name, <any>undefined, { urn })
            case "kubernetes:index/configMap:ConfigMap":
                return new ConfigMap(name, <any>undefined, { urn })
            case "kubernetes:index/configMapV1:ConfigMapV1":
                return new ConfigMapV1(name, <any>undefined, { urn })
            case "kubernetes:index/configMapV1Data:ConfigMapV1Data":
                return new ConfigMapV1Data(name, <any>undefined, { urn })
            case "kubernetes:index/cronJob:CronJob":
                return new CronJob(name, <any>undefined, { urn })
            case "kubernetes:index/cronJobV1:CronJobV1":
                return new CronJobV1(name, <any>undefined, { urn })
            case "kubernetes:index/csiDriver:CsiDriver":
                return new CsiDriver(name, <any>undefined, { urn })
            case "kubernetes:index/csiDriverV1:CsiDriverV1":
                return new CsiDriverV1(name, <any>undefined, { urn })
            case "kubernetes:index/daemonSetV1:DaemonSetV1":
                return new DaemonSetV1(name, <any>undefined, { urn })
            case "kubernetes:index/daemonset:Daemonset":
                return new Daemonset(name, <any>undefined, { urn })
            case "kubernetes:index/defaultServiceAccount:DefaultServiceAccount":
                return new DefaultServiceAccount(name, <any>undefined, { urn })
            case "kubernetes:index/defaultServiceAccountV1:DefaultServiceAccountV1":
                return new DefaultServiceAccountV1(name, <any>undefined, { urn })
            case "kubernetes:index/deployment:Deployment":
                return new Deployment(name, <any>undefined, { urn })
            case "kubernetes:index/deploymentV1:DeploymentV1":
                return new DeploymentV1(name, <any>undefined, { urn })
            case "kubernetes:index/endpointSliceV1:EndpointSliceV1":
                return new EndpointSliceV1(name, <any>undefined, { urn })
            case "kubernetes:index/endpoints:Endpoints":
                return new Endpoints(name, <any>undefined, { urn })
            case "kubernetes:index/endpointsV1:EndpointsV1":
                return new EndpointsV1(name, <any>undefined, { urn })
            case "kubernetes:index/env:Env":
                return new Env(name, <any>undefined, { urn })
            case "kubernetes:index/horizontalPodAutoscaler:HorizontalPodAutoscaler":
                return new HorizontalPodAutoscaler(name, <any>undefined, { urn })
            case "kubernetes:index/horizontalPodAutoscalerV1:HorizontalPodAutoscalerV1":
                return new HorizontalPodAutoscalerV1(name, <any>undefined, { urn })
            case "kubernetes:index/horizontalPodAutoscalerV2:HorizontalPodAutoscalerV2":
                return new HorizontalPodAutoscalerV2(name, <any>undefined, { urn })
            case "kubernetes:index/horizontalPodAutoscalerV2beta2:HorizontalPodAutoscalerV2beta2":
                return new HorizontalPodAutoscalerV2beta2(name, <any>undefined, { urn })
            case "kubernetes:index/ingress:Ingress":
                return new Ingress(name, <any>undefined, { urn })
            case "kubernetes:index/ingressClass:IngressClass":
                return new IngressClass(name, <any>undefined, { urn })
            case "kubernetes:index/ingressClassV1:IngressClassV1":
                return new IngressClassV1(name, <any>undefined, { urn })
            case "kubernetes:index/ingressV1:IngressV1":
                return new IngressV1(name, <any>undefined, { urn })
            case "kubernetes:index/job:Job":
                return new Job(name, <any>undefined, { urn })
            case "kubernetes:index/jobV1:JobV1":
                return new JobV1(name, <any>undefined, { urn })
            case "kubernetes:index/labels:Labels":
                return new Labels(name, <any>undefined, { urn })
            case "kubernetes:index/limitRange:LimitRange":
                return new LimitRange(name, <any>undefined, { urn })
            case "kubernetes:index/limitRangeV1:LimitRangeV1":
                return new LimitRangeV1(name, <any>undefined, { urn })
            case "kubernetes:index/manifest:Manifest":
                return new Manifest(name, <any>undefined, { urn })
            case "kubernetes:index/mutatingWebhookConfiguration:MutatingWebhookConfiguration":
                return new MutatingWebhookConfiguration(name, <any>undefined, { urn })
            case "kubernetes:index/mutatingWebhookConfigurationV1:MutatingWebhookConfigurationV1":
                return new MutatingWebhookConfigurationV1(name, <any>undefined, { urn })
            case "kubernetes:index/namespace:Namespace":
                return new Namespace(name, <any>undefined, { urn })
            case "kubernetes:index/namespaceV1:NamespaceV1":
                return new NamespaceV1(name, <any>undefined, { urn })
            case "kubernetes:index/networkPolicy:NetworkPolicy":
                return new NetworkPolicy(name, <any>undefined, { urn })
            case "kubernetes:index/networkPolicyV1:NetworkPolicyV1":
                return new NetworkPolicyV1(name, <any>undefined, { urn })
            case "kubernetes:index/nodeTaint:NodeTaint":
                return new NodeTaint(name, <any>undefined, { urn })
            case "kubernetes:index/persistentVolume:PersistentVolume":
                return new PersistentVolume(name, <any>undefined, { urn })
            case "kubernetes:index/persistentVolumeClaim:PersistentVolumeClaim":
                return new PersistentVolumeClaim(name, <any>undefined, { urn })
            case "kubernetes:index/persistentVolumeClaimV1:PersistentVolumeClaimV1":
                return new PersistentVolumeClaimV1(name, <any>undefined, { urn })
            case "kubernetes:index/persistentVolumeV1:PersistentVolumeV1":
                return new PersistentVolumeV1(name, <any>undefined, { urn })
            case "kubernetes:index/pod:Pod":
                return new Pod(name, <any>undefined, { urn })
            case "kubernetes:index/podDisruptionBudget:PodDisruptionBudget":
                return new PodDisruptionBudget(name, <any>undefined, { urn })
            case "kubernetes:index/podDisruptionBudgetV1:PodDisruptionBudgetV1":
                return new PodDisruptionBudgetV1(name, <any>undefined, { urn })
            case "kubernetes:index/podSecurityPolicy:PodSecurityPolicy":
                return new PodSecurityPolicy(name, <any>undefined, { urn })
            case "kubernetes:index/podSecurityPolicyV1beta1:PodSecurityPolicyV1beta1":
                return new PodSecurityPolicyV1beta1(name, <any>undefined, { urn })
            case "kubernetes:index/podV1:PodV1":
                return new PodV1(name, <any>undefined, { urn })
            case "kubernetes:index/priorityClass:PriorityClass":
                return new PriorityClass(name, <any>undefined, { urn })
            case "kubernetes:index/priorityClassV1:PriorityClassV1":
                return new PriorityClassV1(name, <any>undefined, { urn })
            case "kubernetes:index/replicationController:ReplicationController":
                return new ReplicationController(name, <any>undefined, { urn })
            case "kubernetes:index/replicationControllerV1:ReplicationControllerV1":
                return new ReplicationControllerV1(name, <any>undefined, { urn })
            case "kubernetes:index/resourceQuota:ResourceQuota":
                return new ResourceQuota(name, <any>undefined, { urn })
            case "kubernetes:index/resourceQuotaV1:ResourceQuotaV1":
                return new ResourceQuotaV1(name, <any>undefined, { urn })
            case "kubernetes:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "kubernetes:index/roleBinding:RoleBinding":
                return new RoleBinding(name, <any>undefined, { urn })
            case "kubernetes:index/roleBindingV1:RoleBindingV1":
                return new RoleBindingV1(name, <any>undefined, { urn })
            case "kubernetes:index/roleV1:RoleV1":
                return new RoleV1(name, <any>undefined, { urn })
            case "kubernetes:index/runtimeClassV1:RuntimeClassV1":
                return new RuntimeClassV1(name, <any>undefined, { urn })
            case "kubernetes:index/secret:Secret":
                return new Secret(name, <any>undefined, { urn })
            case "kubernetes:index/secretV1:SecretV1":
                return new SecretV1(name, <any>undefined, { urn })
            case "kubernetes:index/service:Service":
                return new Service(name, <any>undefined, { urn })
            case "kubernetes:index/serviceAccount:ServiceAccount":
                return new ServiceAccount(name, <any>undefined, { urn })
            case "kubernetes:index/serviceAccountV1:ServiceAccountV1":
                return new ServiceAccountV1(name, <any>undefined, { urn })
            case "kubernetes:index/serviceV1:ServiceV1":
                return new ServiceV1(name, <any>undefined, { urn })
            case "kubernetes:index/statefulSet:StatefulSet":
                return new StatefulSet(name, <any>undefined, { urn })
            case "kubernetes:index/statefulSetV1:StatefulSetV1":
                return new StatefulSetV1(name, <any>undefined, { urn })
            case "kubernetes:index/storageClass:StorageClass":
                return new StorageClass(name, <any>undefined, { urn })
            case "kubernetes:index/storageClassV1:StorageClassV1":
                return new StorageClassV1(name, <any>undefined, { urn })
            case "kubernetes:index/tokenRequestV1:TokenRequestV1":
                return new TokenRequestV1(name, <any>undefined, { urn })
            case "kubernetes:index/validatingWebhookConfiguration:ValidatingWebhookConfiguration":
                return new ValidatingWebhookConfiguration(name, <any>undefined, { urn })
            case "kubernetes:index/validatingWebhookConfigurationV1:ValidatingWebhookConfigurationV1":
                return new ValidatingWebhookConfigurationV1(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("kubernetes", "index/annotations", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/apiService", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/apiServiceV1", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/certificateSigningRequest", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/certificateSigningRequestV1", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/clusterRole", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/clusterRoleBinding", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/clusterRoleBindingV1", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/clusterRoleV1", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/configMap", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/configMapV1", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/configMapV1Data", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/cronJob", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/cronJobV1", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/csiDriver", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/csiDriverV1", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/daemonSetV1", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/daemonset", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/defaultServiceAccount", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/defaultServiceAccountV1", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/deployment", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/deploymentV1", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/endpointSliceV1", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/endpoints", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/endpointsV1", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/env", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/horizontalPodAutoscaler", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/horizontalPodAutoscalerV1", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/horizontalPodAutoscalerV2", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/horizontalPodAutoscalerV2beta2", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/ingress", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/ingressClass", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/ingressClassV1", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/ingressV1", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/job", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/jobV1", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/labels", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/limitRange", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/limitRangeV1", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/manifest", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/mutatingWebhookConfiguration", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/mutatingWebhookConfigurationV1", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/namespace", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/namespaceV1", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/networkPolicy", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/networkPolicyV1", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/nodeTaint", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/persistentVolume", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/persistentVolumeClaim", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/persistentVolumeClaimV1", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/persistentVolumeV1", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/pod", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/podDisruptionBudget", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/podDisruptionBudgetV1", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/podSecurityPolicy", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/podSecurityPolicyV1beta1", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/podV1", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/priorityClass", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/priorityClassV1", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/replicationController", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/replicationControllerV1", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/resourceQuota", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/resourceQuotaV1", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/role", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/roleBinding", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/roleBindingV1", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/roleV1", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/runtimeClassV1", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/secret", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/secretV1", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/service", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/serviceAccount", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/serviceAccountV1", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/serviceV1", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/statefulSet", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/statefulSetV1", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/storageClass", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/storageClassV1", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/tokenRequestV1", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/validatingWebhookConfiguration", _module)
pulumi.runtime.registerResourceModule("kubernetes", "index/validatingWebhookConfigurationV1", _module)
pulumi.runtime.registerResourcePackage("kubernetes", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:kubernetes") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
