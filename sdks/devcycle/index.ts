// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { EnvironmentArgs, EnvironmentState } from "./environment";
export type Environment = import("./environment").Environment;
export const Environment: typeof import("./environment").Environment = null as any;
utilities.lazyLoad(exports, ["Environment"], () => require("./environment"));

export { FeatureArgs, FeatureState } from "./feature";
export type Feature = import("./feature").Feature;
export const Feature: typeof import("./feature").Feature = null as any;
utilities.lazyLoad(exports, ["Feature"], () => require("./feature"));

export { GetEnvironmentArgs, GetEnvironmentResult, GetEnvironmentOutputArgs } from "./getEnvironment";
export const getEnvironment: typeof import("./getEnvironment").getEnvironment = null as any;
export const getEnvironmentOutput: typeof import("./getEnvironment").getEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getEnvironment","getEnvironmentOutput"], () => require("./getEnvironment"));

export { GetEvaluatedVariableBooleanArgs, GetEvaluatedVariableBooleanResult, GetEvaluatedVariableBooleanOutputArgs } from "./getEvaluatedVariableBoolean";
export const getEvaluatedVariableBoolean: typeof import("./getEvaluatedVariableBoolean").getEvaluatedVariableBoolean = null as any;
export const getEvaluatedVariableBooleanOutput: typeof import("./getEvaluatedVariableBoolean").getEvaluatedVariableBooleanOutput = null as any;
utilities.lazyLoad(exports, ["getEvaluatedVariableBoolean","getEvaluatedVariableBooleanOutput"], () => require("./getEvaluatedVariableBoolean"));

export { GetEvaluatedVariableJsonArgs, GetEvaluatedVariableJsonResult, GetEvaluatedVariableJsonOutputArgs } from "./getEvaluatedVariableJson";
export const getEvaluatedVariableJson: typeof import("./getEvaluatedVariableJson").getEvaluatedVariableJson = null as any;
export const getEvaluatedVariableJsonOutput: typeof import("./getEvaluatedVariableJson").getEvaluatedVariableJsonOutput = null as any;
utilities.lazyLoad(exports, ["getEvaluatedVariableJson","getEvaluatedVariableJsonOutput"], () => require("./getEvaluatedVariableJson"));

export { GetEvaluatedVariableNumberArgs, GetEvaluatedVariableNumberResult, GetEvaluatedVariableNumberOutputArgs } from "./getEvaluatedVariableNumber";
export const getEvaluatedVariableNumber: typeof import("./getEvaluatedVariableNumber").getEvaluatedVariableNumber = null as any;
export const getEvaluatedVariableNumberOutput: typeof import("./getEvaluatedVariableNumber").getEvaluatedVariableNumberOutput = null as any;
utilities.lazyLoad(exports, ["getEvaluatedVariableNumber","getEvaluatedVariableNumberOutput"], () => require("./getEvaluatedVariableNumber"));

export { GetEvaluatedVariableStringArgs, GetEvaluatedVariableStringResult, GetEvaluatedVariableStringOutputArgs } from "./getEvaluatedVariableString";
export const getEvaluatedVariableString: typeof import("./getEvaluatedVariableString").getEvaluatedVariableString = null as any;
export const getEvaluatedVariableStringOutput: typeof import("./getEvaluatedVariableString").getEvaluatedVariableStringOutput = null as any;
utilities.lazyLoad(exports, ["getEvaluatedVariableString","getEvaluatedVariableStringOutput"], () => require("./getEvaluatedVariableString"));

export { GetFeatureArgs, GetFeatureResult, GetFeatureOutputArgs } from "./getFeature";
export const getFeature: typeof import("./getFeature").getFeature = null as any;
export const getFeatureOutput: typeof import("./getFeature").getFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getFeature","getFeatureOutput"], () => require("./getFeature"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetVariableArgs, GetVariableResult, GetVariableOutputArgs } from "./getVariable";
export const getVariable: typeof import("./getVariable").getVariable = null as any;
export const getVariableOutput: typeof import("./getVariable").getVariableOutput = null as any;
utilities.lazyLoad(exports, ["getVariable","getVariableOutput"], () => require("./getVariable"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { VariableArgs, VariableState } from "./variable";
export type Variable = import("./variable").Variable;
export const Variable: typeof import("./variable").Variable = null as any;
utilities.lazyLoad(exports, ["Variable"], () => require("./variable"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "devcycle:index/environment:Environment":
                return new Environment(name, <any>undefined, { urn })
            case "devcycle:index/feature:Feature":
                return new Feature(name, <any>undefined, { urn })
            case "devcycle:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "devcycle:index/variable:Variable":
                return new Variable(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("devcycle", "index/environment", _module)
pulumi.runtime.registerResourceModule("devcycle", "index/feature", _module)
pulumi.runtime.registerResourceModule("devcycle", "index/project", _module)
pulumi.runtime.registerResourceModule("devcycle", "index/variable", _module)
pulumi.runtime.registerResourcePackage("devcycle", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:devcycle") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
