// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getFeature(args: GetFeatureArgs, opts?: pulumi.InvokeOptions): Promise<GetFeatureResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("devcycle:index/getFeature:getFeature", {
        "key": args.key,
        "projectKey": args.projectKey,
        "variables": args.variables,
        "variations": args.variations,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getFeature.
 */
export interface GetFeatureArgs {
    key: string;
    projectKey: string;
    variables?: inputs.GetFeatureVariable[];
    variations?: inputs.GetFeatureVariation[];
}

/**
 * A collection of values returned by getFeature.
 */
export interface GetFeatureResult {
    readonly description: string;
    readonly id: string;
    readonly key: string;
    readonly name: string;
    readonly projectId: string;
    readonly projectKey: string;
    readonly type: string;
    readonly variables?: outputs.GetFeatureVariable[];
    readonly variations?: outputs.GetFeatureVariation[];
}
export function getFeatureOutput(args: GetFeatureOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFeatureResult> {
    return pulumi.output(args).apply((a: any) => getFeature(a, opts))
}

/**
 * A collection of arguments for invoking getFeature.
 */
export interface GetFeatureOutputArgs {
    key: pulumi.Input<string>;
    projectKey: pulumi.Input<string>;
    variables?: pulumi.Input<pulumi.Input<inputs.GetFeatureVariableArgs>[]>;
    variations?: pulumi.Input<pulumi.Input<inputs.GetFeatureVariationArgs>[]>;
}
