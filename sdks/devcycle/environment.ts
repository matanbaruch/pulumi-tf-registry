// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Environment extends pulumi.CustomResource {
    /**
     * Get an existing Environment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EnvironmentState, opts?: pulumi.CustomResourceOptions): Environment {
        return new Environment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'devcycle:index/environment:Environment';

    /**
     * Returns true if the given object is an instance of Environment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Environment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Environment.__pulumiType;
    }

    /**
     * Environment Color in Hex with leading #
     */
    public readonly color!: pulumi.Output<string>;
    /**
     * Environment Description
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Environment Key
     */
    public readonly key!: pulumi.Output<string>;
    /**
     * Environment Name
     */
    public readonly name!: pulumi.Output<string>;
    public readonly projectId!: pulumi.Output<string>;
    /**
     * SDK Keys for the environment
     */
    public /*out*/ readonly sdkKeys!: pulumi.Output<string[]>;
    /**
     * Environment Settings
     */
    public readonly settings!: pulumi.Output<outputs.EnvironmentSettings>;
    /**
     * Environment Type
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Environment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EnvironmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EnvironmentArgs | EnvironmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EnvironmentState | undefined;
            resourceInputs["color"] = state ? state.color : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["sdkKeys"] = state ? state.sdkKeys : undefined;
            resourceInputs["settings"] = state ? state.settings : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as EnvironmentArgs | undefined;
            if ((!args || args.color === undefined) && !opts.urn) {
                throw new Error("Missing required property 'color'");
            }
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.settings === undefined) && !opts.urn) {
                throw new Error("Missing required property 'settings'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["color"] = args ? args.color : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["settings"] = args ? args.settings : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["sdkKeys"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Environment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Environment resources.
 */
export interface EnvironmentState {
    /**
     * Environment Color in Hex with leading #
     */
    color?: pulumi.Input<string>;
    /**
     * Environment Description
     */
    description?: pulumi.Input<string>;
    /**
     * Environment Key
     */
    key?: pulumi.Input<string>;
    /**
     * Environment Name
     */
    name?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    /**
     * SDK Keys for the environment
     */
    sdkKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Environment Settings
     */
    settings?: pulumi.Input<inputs.EnvironmentSettings>;
    /**
     * Environment Type
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Environment resource.
 */
export interface EnvironmentArgs {
    /**
     * Environment Color in Hex with leading #
     */
    color: pulumi.Input<string>;
    /**
     * Environment Description
     */
    description: pulumi.Input<string>;
    /**
     * Environment Key
     */
    key: pulumi.Input<string>;
    /**
     * Environment Name
     */
    name?: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
    /**
     * Environment Settings
     */
    settings: pulumi.Input<inputs.EnvironmentSettings>;
    /**
     * Environment Type
     */
    type: pulumi.Input<string>;
}
