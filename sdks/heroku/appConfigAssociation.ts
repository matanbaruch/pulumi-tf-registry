// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AppConfigAssociation extends pulumi.CustomResource {
    /**
     * Get an existing AppConfigAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppConfigAssociationState, opts?: pulumi.CustomResourceOptions): AppConfigAssociation {
        return new AppConfigAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'heroku:index/appConfigAssociation:AppConfigAssociation';

    /**
     * Returns true if the given object is an instance of AppConfigAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppConfigAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppConfigAssociation.__pulumiType;
    }

    public readonly appId!: pulumi.Output<string>;
    public readonly sensitiveVars!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly vars!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a AppConfigAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppConfigAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppConfigAssociationArgs | AppConfigAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppConfigAssociationState | undefined;
            resourceInputs["appId"] = state ? state.appId : undefined;
            resourceInputs["sensitiveVars"] = state ? state.sensitiveVars : undefined;
            resourceInputs["vars"] = state ? state.vars : undefined;
        } else {
            const args = argsOrState as AppConfigAssociationArgs | undefined;
            if ((!args || args.appId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appId'");
            }
            resourceInputs["appId"] = args ? args.appId : undefined;
            resourceInputs["sensitiveVars"] = args?.sensitiveVars ? pulumi.secret(args.sensitiveVars) : undefined;
            resourceInputs["vars"] = args ? args.vars : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["sensitiveVars"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AppConfigAssociation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AppConfigAssociation resources.
 */
export interface AppConfigAssociationState {
    appId?: pulumi.Input<string>;
    sensitiveVars?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vars?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a AppConfigAssociation resource.
 */
export interface AppConfigAssociationArgs {
    appId: pulumi.Input<string>;
    sensitiveVars?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vars?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
