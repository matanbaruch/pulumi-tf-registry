// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AddressObjectTagList {
    resourceType?: pulumi.Input<string>;
    tagKey: pulumi.Input<string>;
    tagValue?: pulumi.Input<string>;
}

export interface CloudAccountInventoryMonitoring {
    refreshInterval?: pulumi.Input<number>;
    regions: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GatewayGatewayGwlbEndpoint {
    availabilityZone?: pulumi.Input<string>;
    endpointId?: pulumi.Input<string>;
    networkInterfaceId?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
}

export interface GatewayGatewayLbIntegration {
    awsgaEndpointGroupArn?: pulumi.Input<string>;
    awsgaResourceArn?: pulumi.Input<string>;
    awsgaResourceFqdn?: pulumi.Input<string>;
    awsgaResourceName?: pulumi.Input<string>;
    gatewayEndpoint?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface GatewayInstanceDetail {
    availabilityZone?: pulumi.Input<string>;
    datapathPrivateIp?: pulumi.Input<string>;
    datapathPublicIp?: pulumi.Input<string>;
    datapathSubnet: pulumi.Input<string>;
    instanceId?: pulumi.Input<string>;
    mgmtPrivateIp?: pulumi.Input<string>;
    mgmtPublicIp?: pulumi.Input<string>;
    mgmtSubnet: pulumi.Input<string>;
    privateSubnet?: pulumi.Input<string>;
}

export interface GatewaySetting {
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface PolicyRulesRule {
    action: pulumi.Input<string>;
    antiMalwareProfile?: pulumi.Input<number>;
    antiVirusProfile?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    destination?: pulumi.Input<number>;
    dlpProfile?: pulumi.Input<number>;
    fqdnFilterProfile?: pulumi.Input<number>;
    fqdnMatchProfile?: pulumi.Input<number>;
    maliciousIpProfile?: pulumi.Input<number>;
    maliciousSrcProfile?: pulumi.Input<number>;
    name: pulumi.Input<string>;
    networkIntrusionProfile?: pulumi.Input<number>;
    packetCaptureEnabled?: pulumi.Input<boolean>;
    priority?: pulumi.Input<number>;
    ruleId?: pulumi.Input<number>;
    sendDenyReset?: pulumi.Input<boolean>;
    service: pulumi.Input<number>;
    source?: pulumi.Input<number>;
    state?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    urlFilter?: pulumi.Input<number>;
    webProtectionProfile?: pulumi.Input<number>;
}

export interface ProfileApplicationThreatEventSuppressor {
    ruleIds: pulumi.Input<pulumi.Input<number>[]>;
    sourceIps: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ProfileApplicationThreatProfileEventFilter {
    numberOfEvents: pulumi.Input<number>;
    time?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
}

export interface ProfileApplicationThreatRuleEventFilter {
    numberOfEvents: pulumi.Input<number>;
    ruleIds: pulumi.Input<pulumi.Input<number>[]>;
    time?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
}

export interface ProfileDecryptionCipherSuiteAndGroup {
    cipherSuite: pulumi.Input<string>;
    cipherSuiteGroup: pulumi.Input<string>;
}

export interface ProfileDlpDlpFilterList {
    action: pulumi.Input<string>;
    count: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    orderId?: pulumi.Input<number>;
    patterns?: pulumi.Input<pulumi.Input<string>[]>;
    staticPatterns?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ProfileFqdnDefaultFqdnFilter {
    certValidation?: pulumi.Input<string>;
    decryptionException?: pulumi.Input<boolean>;
    fqdn?: pulumi.Input<string>;
    policy: pulumi.Input<string>;
}

export interface ProfileFqdnFqdnFilterList {
    certValidation?: pulumi.Input<string>;
    decryptionException?: pulumi.Input<boolean>;
    fqdn?: pulumi.Input<string>;
    fqdnLists?: pulumi.Input<pulumi.Input<string>[]>;
    policy?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    vendorCategoryLists?: pulumi.Input<pulumi.Input<inputs.ProfileFqdnFqdnFilterListVendorCategoryList>[]>;
}

export interface ProfileFqdnFqdnFilterListVendorCategoryList {
    categories: pulumi.Input<pulumi.Input<string>[]>;
    vendor?: pulumi.Input<string>;
}

export interface ProfileFqdnUncategorizedFqdnFilter {
    certValidation?: pulumi.Input<string>;
    decryptionException?: pulumi.Input<boolean>;
    policy?: pulumi.Input<string>;
}

export interface ProfileL7dosRequestLimit {
    burstSize?: pulumi.Input<number>;
    orderId?: pulumi.Input<number>;
    rateLimitedMethods: pulumi.Input<pulumi.Input<string>[]>;
    requestsRateBlock: pulumi.Input<number>;
    targetUri: pulumi.Input<string>;
}

export interface ProfileNetworkIntrusionCategory {
    action?: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface ProfileNetworkIntrusionClass {
    action?: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface ProfileNetworkIntrusionEventSuppressor {
    action?: pulumi.Input<string>;
    gid?: pulumi.Input<number>;
    ruleIds: pulumi.Input<pulumi.Input<number>[]>;
    sourceIps: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ProfileNetworkIntrusionProfileEventFilter {
    numberOfEvents: pulumi.Input<number>;
    time?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
}

export interface ProfileNetworkIntrusionRuleEventFilter {
    numberOfEvents: pulumi.Input<number>;
    ruleIds: pulumi.Input<pulumi.Input<number>[]>;
    time?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
}

export interface ProfileUrlfilterDefaultUrlFilter {
    policy?: pulumi.Input<string>;
    returnStatus?: pulumi.Input<number>;
}

export interface ProfileUrlfilterUncategorizedUrlFilter {
    policy?: pulumi.Input<string>;
    returnStatus?: pulumi.Input<number>;
}

export interface ProfileUrlfilterUrlFilterList {
    filterMethods?: pulumi.Input<pulumi.Input<string>[]>;
    policy: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    returnStatus?: pulumi.Input<number>;
    urlLists?: pulumi.Input<pulumi.Input<string>[]>;
    vendorCategoryLists?: pulumi.Input<pulumi.Input<inputs.ProfileUrlfilterUrlFilterListVendorCategoryList>[]>;
}

export interface ProfileUrlfilterUrlFilterListVendorCategoryList {
    categories: pulumi.Input<pulumi.Input<string>[]>;
    vendor?: pulumi.Input<string>;
}

export interface ServiceObjectPort {
    backendPorts?: pulumi.Input<string>;
    destinationPorts: pulumi.Input<string>;
}
