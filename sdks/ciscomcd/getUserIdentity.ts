// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getUserIdentity(args: GetUserIdentityArgs, opts?: pulumi.InvokeOptions): Promise<GetUserIdentityResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("ciscomcd:index/getUserIdentity:getUserIdentity", {
        "email": args.email,
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getUserIdentity.
 */
export interface GetUserIdentityArgs {
    email: string;
    id?: string;
}

/**
 * A collection of values returned by getUserIdentity.
 */
export interface GetUserIdentityResult {
    readonly apiServerEndpoint: string;
    readonly dashboardServerEndpoint: string;
    readonly email: string;
    readonly id: string;
    readonly tenantName: string;
    readonly userName: string;
}
export function getUserIdentityOutput(args: GetUserIdentityOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetUserIdentityResult> {
    return pulumi.output(args).apply((a: any) => getUserIdentity(a, opts))
}

/**
 * A collection of arguments for invoking getUserIdentity.
 */
export interface GetUserIdentityOutputArgs {
    email: pulumi.Input<string>;
    id?: pulumi.Input<string>;
}
