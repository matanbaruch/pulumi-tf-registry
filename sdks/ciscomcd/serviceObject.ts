// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ServiceObject extends pulumi.CustomResource {
    /**
     * Get an existing ServiceObject resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceObjectState, opts?: pulumi.CustomResourceOptions): ServiceObject {
        return new ServiceObject(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ciscomcd:index/serviceObject:ServiceObject';

    /**
     * Returns true if the given object is an instance of ServiceObject.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceObject {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceObject.__pulumiType;
    }

    public readonly appIds!: pulumi.Output<string[] | undefined>;
    public readonly backendAddressGroup!: pulumi.Output<number | undefined>;
    public readonly clientTlsProfile!: pulumi.Output<number | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly http2Enable!: pulumi.Output<boolean>;
    public readonly l7dosProfile!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly ports!: pulumi.Output<outputs.ServiceObjectPort[] | undefined>;
    public readonly protocol!: pulumi.Output<string | undefined>;
    public /*out*/ readonly serviceId!: pulumi.Output<number>;
    public readonly serviceType!: pulumi.Output<string>;
    public readonly snis!: pulumi.Output<string[] | undefined>;
    public readonly sourceNat!: pulumi.Output<boolean>;
    public readonly tlsProfile!: pulumi.Output<number | undefined>;
    public readonly transportMode!: pulumi.Output<string | undefined>;

    /**
     * Create a ServiceObject resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceObjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceObjectArgs | ServiceObjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceObjectState | undefined;
            resourceInputs["appIds"] = state ? state.appIds : undefined;
            resourceInputs["backendAddressGroup"] = state ? state.backendAddressGroup : undefined;
            resourceInputs["clientTlsProfile"] = state ? state.clientTlsProfile : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["http2Enable"] = state ? state.http2Enable : undefined;
            resourceInputs["l7dosProfile"] = state ? state.l7dosProfile : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ports"] = state ? state.ports : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["serviceId"] = state ? state.serviceId : undefined;
            resourceInputs["serviceType"] = state ? state.serviceType : undefined;
            resourceInputs["snis"] = state ? state.snis : undefined;
            resourceInputs["sourceNat"] = state ? state.sourceNat : undefined;
            resourceInputs["tlsProfile"] = state ? state.tlsProfile : undefined;
            resourceInputs["transportMode"] = state ? state.transportMode : undefined;
        } else {
            const args = argsOrState as ServiceObjectArgs | undefined;
            if ((!args || args.serviceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceType'");
            }
            resourceInputs["appIds"] = args ? args.appIds : undefined;
            resourceInputs["backendAddressGroup"] = args ? args.backendAddressGroup : undefined;
            resourceInputs["clientTlsProfile"] = args ? args.clientTlsProfile : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["http2Enable"] = args ? args.http2Enable : undefined;
            resourceInputs["l7dosProfile"] = args ? args.l7dosProfile : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ports"] = args ? args.ports : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["serviceType"] = args ? args.serviceType : undefined;
            resourceInputs["snis"] = args ? args.snis : undefined;
            resourceInputs["sourceNat"] = args ? args.sourceNat : undefined;
            resourceInputs["tlsProfile"] = args ? args.tlsProfile : undefined;
            resourceInputs["transportMode"] = args ? args.transportMode : undefined;
            resourceInputs["serviceId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceObject.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ServiceObject resources.
 */
export interface ServiceObjectState {
    appIds?: pulumi.Input<pulumi.Input<string>[]>;
    backendAddressGroup?: pulumi.Input<number>;
    clientTlsProfile?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    http2Enable?: pulumi.Input<boolean>;
    l7dosProfile?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    ports?: pulumi.Input<pulumi.Input<inputs.ServiceObjectPort>[]>;
    protocol?: pulumi.Input<string>;
    serviceId?: pulumi.Input<number>;
    serviceType?: pulumi.Input<string>;
    snis?: pulumi.Input<pulumi.Input<string>[]>;
    sourceNat?: pulumi.Input<boolean>;
    tlsProfile?: pulumi.Input<number>;
    transportMode?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceObject resource.
 */
export interface ServiceObjectArgs {
    appIds?: pulumi.Input<pulumi.Input<string>[]>;
    backendAddressGroup?: pulumi.Input<number>;
    clientTlsProfile?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    http2Enable?: pulumi.Input<boolean>;
    l7dosProfile?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    ports?: pulumi.Input<pulumi.Input<inputs.ServiceObjectPort>[]>;
    protocol?: pulumi.Input<string>;
    serviceType: pulumi.Input<string>;
    snis?: pulumi.Input<pulumi.Input<string>[]>;
    sourceNat?: pulumi.Input<boolean>;
    tlsProfile?: pulumi.Input<number>;
    transportMode?: pulumi.Input<string>;
}
