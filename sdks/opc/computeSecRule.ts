// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ComputeSecRule extends pulumi.CustomResource {
    /**
     * Get an existing ComputeSecRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ComputeSecRuleState, opts?: pulumi.CustomResourceOptions): ComputeSecRule {
        return new ComputeSecRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'opc:index/computeSecRule:ComputeSecRule';

    /**
     * Returns true if the given object is an instance of ComputeSecRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ComputeSecRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ComputeSecRule.__pulumiType;
    }

    public readonly action!: pulumi.Output<string>;
    public readonly application!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly destinationList!: pulumi.Output<string>;
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly sourceList!: pulumi.Output<string>;

    /**
     * Create a ComputeSecRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ComputeSecRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ComputeSecRuleArgs | ComputeSecRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ComputeSecRuleState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["application"] = state ? state.application : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destinationList"] = state ? state.destinationList : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["sourceList"] = state ? state.sourceList : undefined;
        } else {
            const args = argsOrState as ComputeSecRuleArgs | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.application === undefined) && !opts.urn) {
                throw new Error("Missing required property 'application'");
            }
            if ((!args || args.destinationList === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationList'");
            }
            if ((!args || args.sourceList === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceList'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["application"] = args ? args.application : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destinationList"] = args ? args.destinationList : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["sourceList"] = args ? args.sourceList : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ComputeSecRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ComputeSecRule resources.
 */
export interface ComputeSecRuleState {
    action?: pulumi.Input<string>;
    application?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    destinationList?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    sourceList?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ComputeSecRule resource.
 */
export interface ComputeSecRuleArgs {
    action: pulumi.Input<string>;
    application: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    destinationList: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    sourceList: pulumi.Input<string>;
}
