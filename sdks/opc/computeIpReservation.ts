// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ComputeIpReservation extends pulumi.CustomResource {
    /**
     * Get an existing ComputeIpReservation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ComputeIpReservationState, opts?: pulumi.CustomResourceOptions): ComputeIpReservation {
        return new ComputeIpReservation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'opc:index/computeIpReservation:ComputeIpReservation';

    /**
     * Returns true if the given object is an instance of ComputeIpReservation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ComputeIpReservation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ComputeIpReservation.__pulumiType;
    }

    public /*out*/ readonly ip!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly parentPool!: pulumi.Output<string | undefined>;
    public readonly permanent!: pulumi.Output<boolean>;
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly used!: pulumi.Output<boolean>;

    /**
     * Create a ComputeIpReservation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ComputeIpReservationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ComputeIpReservationArgs | ComputeIpReservationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ComputeIpReservationState | undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parentPool"] = state ? state.parentPool : undefined;
            resourceInputs["permanent"] = state ? state.permanent : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["used"] = state ? state.used : undefined;
        } else {
            const args = argsOrState as ComputeIpReservationArgs | undefined;
            if ((!args || args.permanent === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permanent'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parentPool"] = args ? args.parentPool : undefined;
            resourceInputs["permanent"] = args ? args.permanent : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["ip"] = undefined /*out*/;
            resourceInputs["used"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ComputeIpReservation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ComputeIpReservation resources.
 */
export interface ComputeIpReservationState {
    ip?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    parentPool?: pulumi.Input<string>;
    permanent?: pulumi.Input<boolean>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    used?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ComputeIpReservation resource.
 */
export interface ComputeIpReservationArgs {
    name?: pulumi.Input<string>;
    parentPool?: pulumi.Input<string>;
    permanent: pulumi.Input<boolean>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
