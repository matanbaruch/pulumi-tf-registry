// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ComputeAclArgs, ComputeAclState } from "./computeAcl";
export type ComputeAcl = import("./computeAcl").ComputeAcl;
export const ComputeAcl: typeof import("./computeAcl").ComputeAcl = null as any;
utilities.lazyLoad(exports, ["ComputeAcl"], () => require("./computeAcl"));

export { ComputeImageListArgs, ComputeImageListState } from "./computeImageList";
export type ComputeImageList = import("./computeImageList").ComputeImageList;
export const ComputeImageList: typeof import("./computeImageList").ComputeImageList = null as any;
utilities.lazyLoad(exports, ["ComputeImageList"], () => require("./computeImageList"));

export { ComputeImageListEntryArgs, ComputeImageListEntryState } from "./computeImageListEntry";
export type ComputeImageListEntry = import("./computeImageListEntry").ComputeImageListEntry;
export const ComputeImageListEntry: typeof import("./computeImageListEntry").ComputeImageListEntry = null as any;
utilities.lazyLoad(exports, ["ComputeImageListEntry"], () => require("./computeImageListEntry"));

export { ComputeInstanceArgs, ComputeInstanceState } from "./computeInstance";
export type ComputeInstance = import("./computeInstance").ComputeInstance;
export const ComputeInstance: typeof import("./computeInstance").ComputeInstance = null as any;
utilities.lazyLoad(exports, ["ComputeInstance"], () => require("./computeInstance"));

export { ComputeIpAddressAssociationArgs, ComputeIpAddressAssociationState } from "./computeIpAddressAssociation";
export type ComputeIpAddressAssociation = import("./computeIpAddressAssociation").ComputeIpAddressAssociation;
export const ComputeIpAddressAssociation: typeof import("./computeIpAddressAssociation").ComputeIpAddressAssociation = null as any;
utilities.lazyLoad(exports, ["ComputeIpAddressAssociation"], () => require("./computeIpAddressAssociation"));

export { ComputeIpAddressPrefixSetArgs, ComputeIpAddressPrefixSetState } from "./computeIpAddressPrefixSet";
export type ComputeIpAddressPrefixSet = import("./computeIpAddressPrefixSet").ComputeIpAddressPrefixSet;
export const ComputeIpAddressPrefixSet: typeof import("./computeIpAddressPrefixSet").ComputeIpAddressPrefixSet = null as any;
utilities.lazyLoad(exports, ["ComputeIpAddressPrefixSet"], () => require("./computeIpAddressPrefixSet"));

export { ComputeIpAddressReservationArgs, ComputeIpAddressReservationState } from "./computeIpAddressReservation";
export type ComputeIpAddressReservation = import("./computeIpAddressReservation").ComputeIpAddressReservation;
export const ComputeIpAddressReservation: typeof import("./computeIpAddressReservation").ComputeIpAddressReservation = null as any;
utilities.lazyLoad(exports, ["ComputeIpAddressReservation"], () => require("./computeIpAddressReservation"));

export { ComputeIpAssociationArgs, ComputeIpAssociationState } from "./computeIpAssociation";
export type ComputeIpAssociation = import("./computeIpAssociation").ComputeIpAssociation;
export const ComputeIpAssociation: typeof import("./computeIpAssociation").ComputeIpAssociation = null as any;
utilities.lazyLoad(exports, ["ComputeIpAssociation"], () => require("./computeIpAssociation"));

export { ComputeIpNetworkArgs, ComputeIpNetworkState } from "./computeIpNetwork";
export type ComputeIpNetwork = import("./computeIpNetwork").ComputeIpNetwork;
export const ComputeIpNetwork: typeof import("./computeIpNetwork").ComputeIpNetwork = null as any;
utilities.lazyLoad(exports, ["ComputeIpNetwork"], () => require("./computeIpNetwork"));

export { ComputeIpNetworkExchangeArgs, ComputeIpNetworkExchangeState } from "./computeIpNetworkExchange";
export type ComputeIpNetworkExchange = import("./computeIpNetworkExchange").ComputeIpNetworkExchange;
export const ComputeIpNetworkExchange: typeof import("./computeIpNetworkExchange").ComputeIpNetworkExchange = null as any;
utilities.lazyLoad(exports, ["ComputeIpNetworkExchange"], () => require("./computeIpNetworkExchange"));

export { ComputeIpReservationArgs, ComputeIpReservationState } from "./computeIpReservation";
export type ComputeIpReservation = import("./computeIpReservation").ComputeIpReservation;
export const ComputeIpReservation: typeof import("./computeIpReservation").ComputeIpReservation = null as any;
utilities.lazyLoad(exports, ["ComputeIpReservation"], () => require("./computeIpReservation"));

export { ComputeMachineImageArgs, ComputeMachineImageState } from "./computeMachineImage";
export type ComputeMachineImage = import("./computeMachineImage").ComputeMachineImage;
export const ComputeMachineImage: typeof import("./computeMachineImage").ComputeMachineImage = null as any;
utilities.lazyLoad(exports, ["ComputeMachineImage"], () => require("./computeMachineImage"));

export { ComputeOrchestratedInstanceArgs, ComputeOrchestratedInstanceState } from "./computeOrchestratedInstance";
export type ComputeOrchestratedInstance = import("./computeOrchestratedInstance").ComputeOrchestratedInstance;
export const ComputeOrchestratedInstance: typeof import("./computeOrchestratedInstance").ComputeOrchestratedInstance = null as any;
utilities.lazyLoad(exports, ["ComputeOrchestratedInstance"], () => require("./computeOrchestratedInstance"));

export { ComputeRouteArgs, ComputeRouteState } from "./computeRoute";
export type ComputeRoute = import("./computeRoute").ComputeRoute;
export const ComputeRoute: typeof import("./computeRoute").ComputeRoute = null as any;
utilities.lazyLoad(exports, ["ComputeRoute"], () => require("./computeRoute"));

export { ComputeSecRuleArgs, ComputeSecRuleState } from "./computeSecRule";
export type ComputeSecRule = import("./computeSecRule").ComputeSecRule;
export const ComputeSecRule: typeof import("./computeSecRule").ComputeSecRule = null as any;
utilities.lazyLoad(exports, ["ComputeSecRule"], () => require("./computeSecRule"));

export { ComputeSecurityApplicationArgs, ComputeSecurityApplicationState } from "./computeSecurityApplication";
export type ComputeSecurityApplication = import("./computeSecurityApplication").ComputeSecurityApplication;
export const ComputeSecurityApplication: typeof import("./computeSecurityApplication").ComputeSecurityApplication = null as any;
utilities.lazyLoad(exports, ["ComputeSecurityApplication"], () => require("./computeSecurityApplication"));

export { ComputeSecurityAssociationArgs, ComputeSecurityAssociationState } from "./computeSecurityAssociation";
export type ComputeSecurityAssociation = import("./computeSecurityAssociation").ComputeSecurityAssociation;
export const ComputeSecurityAssociation: typeof import("./computeSecurityAssociation").ComputeSecurityAssociation = null as any;
utilities.lazyLoad(exports, ["ComputeSecurityAssociation"], () => require("./computeSecurityAssociation"));

export { ComputeSecurityIpListArgs, ComputeSecurityIpListState } from "./computeSecurityIpList";
export type ComputeSecurityIpList = import("./computeSecurityIpList").ComputeSecurityIpList;
export const ComputeSecurityIpList: typeof import("./computeSecurityIpList").ComputeSecurityIpList = null as any;
utilities.lazyLoad(exports, ["ComputeSecurityIpList"], () => require("./computeSecurityIpList"));

export { ComputeSecurityListArgs, ComputeSecurityListState } from "./computeSecurityList";
export type ComputeSecurityList = import("./computeSecurityList").ComputeSecurityList;
export const ComputeSecurityList: typeof import("./computeSecurityList").ComputeSecurityList = null as any;
utilities.lazyLoad(exports, ["ComputeSecurityList"], () => require("./computeSecurityList"));

export { ComputeSecurityProtocolArgs, ComputeSecurityProtocolState } from "./computeSecurityProtocol";
export type ComputeSecurityProtocol = import("./computeSecurityProtocol").ComputeSecurityProtocol;
export const ComputeSecurityProtocol: typeof import("./computeSecurityProtocol").ComputeSecurityProtocol = null as any;
utilities.lazyLoad(exports, ["ComputeSecurityProtocol"], () => require("./computeSecurityProtocol"));

export { ComputeSecurityRuleArgs, ComputeSecurityRuleState } from "./computeSecurityRule";
export type ComputeSecurityRule = import("./computeSecurityRule").ComputeSecurityRule;
export const ComputeSecurityRule: typeof import("./computeSecurityRule").ComputeSecurityRule = null as any;
utilities.lazyLoad(exports, ["ComputeSecurityRule"], () => require("./computeSecurityRule"));

export { ComputeSnapshotArgs, ComputeSnapshotState } from "./computeSnapshot";
export type ComputeSnapshot = import("./computeSnapshot").ComputeSnapshot;
export const ComputeSnapshot: typeof import("./computeSnapshot").ComputeSnapshot = null as any;
utilities.lazyLoad(exports, ["ComputeSnapshot"], () => require("./computeSnapshot"));

export { ComputeSshKeyArgs, ComputeSshKeyState } from "./computeSshKey";
export type ComputeSshKey = import("./computeSshKey").ComputeSshKey;
export const ComputeSshKey: typeof import("./computeSshKey").ComputeSshKey = null as any;
utilities.lazyLoad(exports, ["ComputeSshKey"], () => require("./computeSshKey"));

export { ComputeStorageAttachmentArgs, ComputeStorageAttachmentState } from "./computeStorageAttachment";
export type ComputeStorageAttachment = import("./computeStorageAttachment").ComputeStorageAttachment;
export const ComputeStorageAttachment: typeof import("./computeStorageAttachment").ComputeStorageAttachment = null as any;
utilities.lazyLoad(exports, ["ComputeStorageAttachment"], () => require("./computeStorageAttachment"));

export { ComputeStorageVolumeArgs, ComputeStorageVolumeState } from "./computeStorageVolume";
export type ComputeStorageVolume = import("./computeStorageVolume").ComputeStorageVolume;
export const ComputeStorageVolume: typeof import("./computeStorageVolume").ComputeStorageVolume = null as any;
utilities.lazyLoad(exports, ["ComputeStorageVolume"], () => require("./computeStorageVolume"));

export { ComputeStorageVolumeSnapshotArgs, ComputeStorageVolumeSnapshotState } from "./computeStorageVolumeSnapshot";
export type ComputeStorageVolumeSnapshot = import("./computeStorageVolumeSnapshot").ComputeStorageVolumeSnapshot;
export const ComputeStorageVolumeSnapshot: typeof import("./computeStorageVolumeSnapshot").ComputeStorageVolumeSnapshot = null as any;
utilities.lazyLoad(exports, ["ComputeStorageVolumeSnapshot"], () => require("./computeStorageVolumeSnapshot"));

export { ComputeVnicSetArgs, ComputeVnicSetState } from "./computeVnicSet";
export type ComputeVnicSet = import("./computeVnicSet").ComputeVnicSet;
export const ComputeVnicSet: typeof import("./computeVnicSet").ComputeVnicSet = null as any;
utilities.lazyLoad(exports, ["ComputeVnicSet"], () => require("./computeVnicSet"));

export { ComputeVpnEndpointV2Args, ComputeVpnEndpointV2State } from "./computeVpnEndpointV2";
export type ComputeVpnEndpointV2 = import("./computeVpnEndpointV2").ComputeVpnEndpointV2;
export const ComputeVpnEndpointV2: typeof import("./computeVpnEndpointV2").ComputeVpnEndpointV2 = null as any;
utilities.lazyLoad(exports, ["ComputeVpnEndpointV2"], () => require("./computeVpnEndpointV2"));

export { GetComputeImageListEntryArgs, GetComputeImageListEntryResult, GetComputeImageListEntryOutputArgs } from "./getComputeImageListEntry";
export const getComputeImageListEntry: typeof import("./getComputeImageListEntry").getComputeImageListEntry = null as any;
export const getComputeImageListEntryOutput: typeof import("./getComputeImageListEntry").getComputeImageListEntryOutput = null as any;
utilities.lazyLoad(exports, ["getComputeImageListEntry","getComputeImageListEntryOutput"], () => require("./getComputeImageListEntry"));

export { GetComputeIpAddressReservationArgs, GetComputeIpAddressReservationResult, GetComputeIpAddressReservationOutputArgs } from "./getComputeIpAddressReservation";
export const getComputeIpAddressReservation: typeof import("./getComputeIpAddressReservation").getComputeIpAddressReservation = null as any;
export const getComputeIpAddressReservationOutput: typeof import("./getComputeIpAddressReservation").getComputeIpAddressReservationOutput = null as any;
utilities.lazyLoad(exports, ["getComputeIpAddressReservation","getComputeIpAddressReservationOutput"], () => require("./getComputeIpAddressReservation"));

export { GetComputeIpReservationArgs, GetComputeIpReservationResult, GetComputeIpReservationOutputArgs } from "./getComputeIpReservation";
export const getComputeIpReservation: typeof import("./getComputeIpReservation").getComputeIpReservation = null as any;
export const getComputeIpReservationOutput: typeof import("./getComputeIpReservation").getComputeIpReservationOutput = null as any;
utilities.lazyLoad(exports, ["getComputeIpReservation","getComputeIpReservationOutput"], () => require("./getComputeIpReservation"));

export { GetComputeMachineImageArgs, GetComputeMachineImageResult, GetComputeMachineImageOutputArgs } from "./getComputeMachineImage";
export const getComputeMachineImage: typeof import("./getComputeMachineImage").getComputeMachineImage = null as any;
export const getComputeMachineImageOutput: typeof import("./getComputeMachineImage").getComputeMachineImageOutput = null as any;
utilities.lazyLoad(exports, ["getComputeMachineImage","getComputeMachineImageOutput"], () => require("./getComputeMachineImage"));

export { GetComputeNetworkInterfaceArgs, GetComputeNetworkInterfaceResult, GetComputeNetworkInterfaceOutputArgs } from "./getComputeNetworkInterface";
export const getComputeNetworkInterface: typeof import("./getComputeNetworkInterface").getComputeNetworkInterface = null as any;
export const getComputeNetworkInterfaceOutput: typeof import("./getComputeNetworkInterface").getComputeNetworkInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getComputeNetworkInterface","getComputeNetworkInterfaceOutput"], () => require("./getComputeNetworkInterface"));

export { GetComputeSshKeyArgs, GetComputeSshKeyResult, GetComputeSshKeyOutputArgs } from "./getComputeSshKey";
export const getComputeSshKey: typeof import("./getComputeSshKey").getComputeSshKey = null as any;
export const getComputeSshKeyOutput: typeof import("./getComputeSshKey").getComputeSshKeyOutput = null as any;
utilities.lazyLoad(exports, ["getComputeSshKey","getComputeSshKeyOutput"], () => require("./getComputeSshKey"));

export { GetComputeStorageVolumeSnapshotArgs, GetComputeStorageVolumeSnapshotResult, GetComputeStorageVolumeSnapshotOutputArgs } from "./getComputeStorageVolumeSnapshot";
export const getComputeStorageVolumeSnapshot: typeof import("./getComputeStorageVolumeSnapshot").getComputeStorageVolumeSnapshot = null as any;
export const getComputeStorageVolumeSnapshotOutput: typeof import("./getComputeStorageVolumeSnapshot").getComputeStorageVolumeSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getComputeStorageVolumeSnapshot","getComputeStorageVolumeSnapshotOutput"], () => require("./getComputeStorageVolumeSnapshot"));

export { GetComputeVnicArgs, GetComputeVnicResult, GetComputeVnicOutputArgs } from "./getComputeVnic";
export const getComputeVnic: typeof import("./getComputeVnic").getComputeVnic = null as any;
export const getComputeVnicOutput: typeof import("./getComputeVnic").getComputeVnicOutput = null as any;
utilities.lazyLoad(exports, ["getComputeVnic","getComputeVnicOutput"], () => require("./getComputeVnic"));

export { LbaasCertificateArgs, LbaasCertificateState } from "./lbaasCertificate";
export type LbaasCertificate = import("./lbaasCertificate").LbaasCertificate;
export const LbaasCertificate: typeof import("./lbaasCertificate").LbaasCertificate = null as any;
utilities.lazyLoad(exports, ["LbaasCertificate"], () => require("./lbaasCertificate"));

export { LbaasListenerArgs, LbaasListenerState } from "./lbaasListener";
export type LbaasListener = import("./lbaasListener").LbaasListener;
export const LbaasListener: typeof import("./lbaasListener").LbaasListener = null as any;
utilities.lazyLoad(exports, ["LbaasListener"], () => require("./lbaasListener"));

export { LbaasLoadBalancerArgs, LbaasLoadBalancerState } from "./lbaasLoadBalancer";
export type LbaasLoadBalancer = import("./lbaasLoadBalancer").LbaasLoadBalancer;
export const LbaasLoadBalancer: typeof import("./lbaasLoadBalancer").LbaasLoadBalancer = null as any;
utilities.lazyLoad(exports, ["LbaasLoadBalancer"], () => require("./lbaasLoadBalancer"));

export { LbaasPolicyArgs, LbaasPolicyState } from "./lbaasPolicy";
export type LbaasPolicy = import("./lbaasPolicy").LbaasPolicy;
export const LbaasPolicy: typeof import("./lbaasPolicy").LbaasPolicy = null as any;
utilities.lazyLoad(exports, ["LbaasPolicy"], () => require("./lbaasPolicy"));

export { LbaasServerPoolArgs, LbaasServerPoolState } from "./lbaasServerPool";
export type LbaasServerPool = import("./lbaasServerPool").LbaasServerPool;
export const LbaasServerPool: typeof import("./lbaasServerPool").LbaasServerPool = null as any;
utilities.lazyLoad(exports, ["LbaasServerPool"], () => require("./lbaasServerPool"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { StorageContainerArgs, StorageContainerState } from "./storageContainer";
export type StorageContainer = import("./storageContainer").StorageContainer;
export const StorageContainer: typeof import("./storageContainer").StorageContainer = null as any;
utilities.lazyLoad(exports, ["StorageContainer"], () => require("./storageContainer"));

export { StorageObjectArgs, StorageObjectState } from "./storageObject";
export type StorageObject = import("./storageObject").StorageObject;
export const StorageObject: typeof import("./storageObject").StorageObject = null as any;
utilities.lazyLoad(exports, ["StorageObject"], () => require("./storageObject"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "opc:index/computeAcl:ComputeAcl":
                return new ComputeAcl(name, <any>undefined, { urn })
            case "opc:index/computeImageList:ComputeImageList":
                return new ComputeImageList(name, <any>undefined, { urn })
            case "opc:index/computeImageListEntry:ComputeImageListEntry":
                return new ComputeImageListEntry(name, <any>undefined, { urn })
            case "opc:index/computeInstance:ComputeInstance":
                return new ComputeInstance(name, <any>undefined, { urn })
            case "opc:index/computeIpAddressAssociation:ComputeIpAddressAssociation":
                return new ComputeIpAddressAssociation(name, <any>undefined, { urn })
            case "opc:index/computeIpAddressPrefixSet:ComputeIpAddressPrefixSet":
                return new ComputeIpAddressPrefixSet(name, <any>undefined, { urn })
            case "opc:index/computeIpAddressReservation:ComputeIpAddressReservation":
                return new ComputeIpAddressReservation(name, <any>undefined, { urn })
            case "opc:index/computeIpAssociation:ComputeIpAssociation":
                return new ComputeIpAssociation(name, <any>undefined, { urn })
            case "opc:index/computeIpNetwork:ComputeIpNetwork":
                return new ComputeIpNetwork(name, <any>undefined, { urn })
            case "opc:index/computeIpNetworkExchange:ComputeIpNetworkExchange":
                return new ComputeIpNetworkExchange(name, <any>undefined, { urn })
            case "opc:index/computeIpReservation:ComputeIpReservation":
                return new ComputeIpReservation(name, <any>undefined, { urn })
            case "opc:index/computeMachineImage:ComputeMachineImage":
                return new ComputeMachineImage(name, <any>undefined, { urn })
            case "opc:index/computeOrchestratedInstance:ComputeOrchestratedInstance":
                return new ComputeOrchestratedInstance(name, <any>undefined, { urn })
            case "opc:index/computeRoute:ComputeRoute":
                return new ComputeRoute(name, <any>undefined, { urn })
            case "opc:index/computeSecRule:ComputeSecRule":
                return new ComputeSecRule(name, <any>undefined, { urn })
            case "opc:index/computeSecurityApplication:ComputeSecurityApplication":
                return new ComputeSecurityApplication(name, <any>undefined, { urn })
            case "opc:index/computeSecurityAssociation:ComputeSecurityAssociation":
                return new ComputeSecurityAssociation(name, <any>undefined, { urn })
            case "opc:index/computeSecurityIpList:ComputeSecurityIpList":
                return new ComputeSecurityIpList(name, <any>undefined, { urn })
            case "opc:index/computeSecurityList:ComputeSecurityList":
                return new ComputeSecurityList(name, <any>undefined, { urn })
            case "opc:index/computeSecurityProtocol:ComputeSecurityProtocol":
                return new ComputeSecurityProtocol(name, <any>undefined, { urn })
            case "opc:index/computeSecurityRule:ComputeSecurityRule":
                return new ComputeSecurityRule(name, <any>undefined, { urn })
            case "opc:index/computeSnapshot:ComputeSnapshot":
                return new ComputeSnapshot(name, <any>undefined, { urn })
            case "opc:index/computeSshKey:ComputeSshKey":
                return new ComputeSshKey(name, <any>undefined, { urn })
            case "opc:index/computeStorageAttachment:ComputeStorageAttachment":
                return new ComputeStorageAttachment(name, <any>undefined, { urn })
            case "opc:index/computeStorageVolume:ComputeStorageVolume":
                return new ComputeStorageVolume(name, <any>undefined, { urn })
            case "opc:index/computeStorageVolumeSnapshot:ComputeStorageVolumeSnapshot":
                return new ComputeStorageVolumeSnapshot(name, <any>undefined, { urn })
            case "opc:index/computeVnicSet:ComputeVnicSet":
                return new ComputeVnicSet(name, <any>undefined, { urn })
            case "opc:index/computeVpnEndpointV2:ComputeVpnEndpointV2":
                return new ComputeVpnEndpointV2(name, <any>undefined, { urn })
            case "opc:index/lbaasCertificate:LbaasCertificate":
                return new LbaasCertificate(name, <any>undefined, { urn })
            case "opc:index/lbaasListener:LbaasListener":
                return new LbaasListener(name, <any>undefined, { urn })
            case "opc:index/lbaasLoadBalancer:LbaasLoadBalancer":
                return new LbaasLoadBalancer(name, <any>undefined, { urn })
            case "opc:index/lbaasPolicy:LbaasPolicy":
                return new LbaasPolicy(name, <any>undefined, { urn })
            case "opc:index/lbaasServerPool:LbaasServerPool":
                return new LbaasServerPool(name, <any>undefined, { urn })
            case "opc:index/storageContainer:StorageContainer":
                return new StorageContainer(name, <any>undefined, { urn })
            case "opc:index/storageObject:StorageObject":
                return new StorageObject(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("opc", "index/computeAcl", _module)
pulumi.runtime.registerResourceModule("opc", "index/computeImageList", _module)
pulumi.runtime.registerResourceModule("opc", "index/computeImageListEntry", _module)
pulumi.runtime.registerResourceModule("opc", "index/computeInstance", _module)
pulumi.runtime.registerResourceModule("opc", "index/computeIpAddressAssociation", _module)
pulumi.runtime.registerResourceModule("opc", "index/computeIpAddressPrefixSet", _module)
pulumi.runtime.registerResourceModule("opc", "index/computeIpAddressReservation", _module)
pulumi.runtime.registerResourceModule("opc", "index/computeIpAssociation", _module)
pulumi.runtime.registerResourceModule("opc", "index/computeIpNetwork", _module)
pulumi.runtime.registerResourceModule("opc", "index/computeIpNetworkExchange", _module)
pulumi.runtime.registerResourceModule("opc", "index/computeIpReservation", _module)
pulumi.runtime.registerResourceModule("opc", "index/computeMachineImage", _module)
pulumi.runtime.registerResourceModule("opc", "index/computeOrchestratedInstance", _module)
pulumi.runtime.registerResourceModule("opc", "index/computeRoute", _module)
pulumi.runtime.registerResourceModule("opc", "index/computeSecRule", _module)
pulumi.runtime.registerResourceModule("opc", "index/computeSecurityApplication", _module)
pulumi.runtime.registerResourceModule("opc", "index/computeSecurityAssociation", _module)
pulumi.runtime.registerResourceModule("opc", "index/computeSecurityIpList", _module)
pulumi.runtime.registerResourceModule("opc", "index/computeSecurityList", _module)
pulumi.runtime.registerResourceModule("opc", "index/computeSecurityProtocol", _module)
pulumi.runtime.registerResourceModule("opc", "index/computeSecurityRule", _module)
pulumi.runtime.registerResourceModule("opc", "index/computeSnapshot", _module)
pulumi.runtime.registerResourceModule("opc", "index/computeSshKey", _module)
pulumi.runtime.registerResourceModule("opc", "index/computeStorageAttachment", _module)
pulumi.runtime.registerResourceModule("opc", "index/computeStorageVolume", _module)
pulumi.runtime.registerResourceModule("opc", "index/computeStorageVolumeSnapshot", _module)
pulumi.runtime.registerResourceModule("opc", "index/computeVnicSet", _module)
pulumi.runtime.registerResourceModule("opc", "index/computeVpnEndpointV2", _module)
pulumi.runtime.registerResourceModule("opc", "index/lbaasCertificate", _module)
pulumi.runtime.registerResourceModule("opc", "index/lbaasListener", _module)
pulumi.runtime.registerResourceModule("opc", "index/lbaasLoadBalancer", _module)
pulumi.runtime.registerResourceModule("opc", "index/lbaasPolicy", _module)
pulumi.runtime.registerResourceModule("opc", "index/lbaasServerPool", _module)
pulumi.runtime.registerResourceModule("opc", "index/storageContainer", _module)
pulumi.runtime.registerResourceModule("opc", "index/storageObject", _module)
pulumi.runtime.registerResourcePackage("opc", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:opc") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
