// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ComputeStorageVolumeSnapshot extends pulumi.CustomResource {
    /**
     * Get an existing ComputeStorageVolumeSnapshot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ComputeStorageVolumeSnapshotState, opts?: pulumi.CustomResourceOptions): ComputeStorageVolumeSnapshot {
        return new ComputeStorageVolumeSnapshot(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'opc:index/computeStorageVolumeSnapshot:ComputeStorageVolumeSnapshot';

    /**
     * Returns true if the given object is an instance of ComputeStorageVolumeSnapshot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ComputeStorageVolumeSnapshot {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ComputeStorageVolumeSnapshot.__pulumiType;
    }

    public /*out*/ readonly account!: pulumi.Output<string>;
    public readonly collocated!: pulumi.Output<boolean | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly machineImageName!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly parentVolumeBootable!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly platform!: pulumi.Output<string>;
    public /*out*/ readonly property!: pulumi.Output<string>;
    public /*out*/ readonly size!: pulumi.Output<string>;
    public /*out*/ readonly snapshotId!: pulumi.Output<string>;
    public /*out*/ readonly snapshotTimestamp!: pulumi.Output<string>;
    public /*out*/ readonly startTimestamp!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public /*out*/ readonly statusDetail!: pulumi.Output<string>;
    public /*out*/ readonly statusTimestamp!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ComputeStorageVolumeSnapshotTimeouts | undefined>;
    public /*out*/ readonly uri!: pulumi.Output<string>;
    public readonly volumeName!: pulumi.Output<string>;

    /**
     * Create a ComputeStorageVolumeSnapshot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ComputeStorageVolumeSnapshotArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ComputeStorageVolumeSnapshotArgs | ComputeStorageVolumeSnapshotState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ComputeStorageVolumeSnapshotState | undefined;
            resourceInputs["account"] = state ? state.account : undefined;
            resourceInputs["collocated"] = state ? state.collocated : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["machineImageName"] = state ? state.machineImageName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parentVolumeBootable"] = state ? state.parentVolumeBootable : undefined;
            resourceInputs["platform"] = state ? state.platform : undefined;
            resourceInputs["property"] = state ? state.property : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["snapshotId"] = state ? state.snapshotId : undefined;
            resourceInputs["snapshotTimestamp"] = state ? state.snapshotTimestamp : undefined;
            resourceInputs["startTimestamp"] = state ? state.startTimestamp : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["statusDetail"] = state ? state.statusDetail : undefined;
            resourceInputs["statusTimestamp"] = state ? state.statusTimestamp : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["uri"] = state ? state.uri : undefined;
            resourceInputs["volumeName"] = state ? state.volumeName : undefined;
        } else {
            const args = argsOrState as ComputeStorageVolumeSnapshotArgs | undefined;
            if ((!args || args.volumeName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volumeName'");
            }
            resourceInputs["collocated"] = args ? args.collocated : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parentVolumeBootable"] = args ? args.parentVolumeBootable : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["volumeName"] = args ? args.volumeName : undefined;
            resourceInputs["account"] = undefined /*out*/;
            resourceInputs["machineImageName"] = undefined /*out*/;
            resourceInputs["platform"] = undefined /*out*/;
            resourceInputs["property"] = undefined /*out*/;
            resourceInputs["size"] = undefined /*out*/;
            resourceInputs["snapshotId"] = undefined /*out*/;
            resourceInputs["snapshotTimestamp"] = undefined /*out*/;
            resourceInputs["startTimestamp"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["statusDetail"] = undefined /*out*/;
            resourceInputs["statusTimestamp"] = undefined /*out*/;
            resourceInputs["uri"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ComputeStorageVolumeSnapshot.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ComputeStorageVolumeSnapshot resources.
 */
export interface ComputeStorageVolumeSnapshotState {
    account?: pulumi.Input<string>;
    collocated?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    machineImageName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    parentVolumeBootable?: pulumi.Input<boolean>;
    platform?: pulumi.Input<string>;
    property?: pulumi.Input<string>;
    size?: pulumi.Input<string>;
    snapshotId?: pulumi.Input<string>;
    snapshotTimestamp?: pulumi.Input<string>;
    startTimestamp?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    statusDetail?: pulumi.Input<string>;
    statusTimestamp?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.ComputeStorageVolumeSnapshotTimeouts>;
    uri?: pulumi.Input<string>;
    volumeName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ComputeStorageVolumeSnapshot resource.
 */
export interface ComputeStorageVolumeSnapshotArgs {
    collocated?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    parentVolumeBootable?: pulumi.Input<boolean>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.ComputeStorageVolumeSnapshotTimeouts>;
    volumeName: pulumi.Input<string>;
}
