// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ComputeSnapshot extends pulumi.CustomResource {
    /**
     * Get an existing ComputeSnapshot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ComputeSnapshotState, opts?: pulumi.CustomResourceOptions): ComputeSnapshot {
        return new ComputeSnapshot(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'opc:index/computeSnapshot:ComputeSnapshot';

    /**
     * Returns true if the given object is an instance of ComputeSnapshot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ComputeSnapshot {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ComputeSnapshot.__pulumiType;
    }

    public readonly account!: pulumi.Output<string>;
    public /*out*/ readonly creationTime!: pulumi.Output<string>;
    public readonly instance!: pulumi.Output<string>;
    public readonly machineImage!: pulumi.Output<string>;
    public /*out*/ readonly name!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ComputeSnapshotTimeouts | undefined>;
    public /*out*/ readonly uri!: pulumi.Output<string>;

    /**
     * Create a ComputeSnapshot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ComputeSnapshotArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ComputeSnapshotArgs | ComputeSnapshotState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ComputeSnapshotState | undefined;
            resourceInputs["account"] = state ? state.account : undefined;
            resourceInputs["creationTime"] = state ? state.creationTime : undefined;
            resourceInputs["instance"] = state ? state.instance : undefined;
            resourceInputs["machineImage"] = state ? state.machineImage : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["uri"] = state ? state.uri : undefined;
        } else {
            const args = argsOrState as ComputeSnapshotArgs | undefined;
            if ((!args || args.instance === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instance'");
            }
            resourceInputs["account"] = args ? args.account : undefined;
            resourceInputs["instance"] = args ? args.instance : undefined;
            resourceInputs["machineImage"] = args ? args.machineImage : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["uri"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ComputeSnapshot.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ComputeSnapshot resources.
 */
export interface ComputeSnapshotState {
    account?: pulumi.Input<string>;
    creationTime?: pulumi.Input<string>;
    instance?: pulumi.Input<string>;
    machineImage?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ComputeSnapshotTimeouts>;
    uri?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ComputeSnapshot resource.
 */
export interface ComputeSnapshotArgs {
    account?: pulumi.Input<string>;
    instance: pulumi.Input<string>;
    machineImage?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ComputeSnapshotTimeouts>;
}
