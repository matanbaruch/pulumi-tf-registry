// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ComputeVpnEndpointV2 extends pulumi.CustomResource {
    /**
     * Get an existing ComputeVpnEndpointV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ComputeVpnEndpointV2State, opts?: pulumi.CustomResourceOptions): ComputeVpnEndpointV2 {
        return new ComputeVpnEndpointV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'opc:index/computeVpnEndpointV2:ComputeVpnEndpointV2';

    /**
     * Returns true if the given object is an instance of ComputeVpnEndpointV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ComputeVpnEndpointV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ComputeVpnEndpointV2.__pulumiType;
    }

    public readonly customerVpnGateway!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly ikeIdentifier!: pulumi.Output<string>;
    public readonly ipNetwork!: pulumi.Output<string>;
    public /*out*/ readonly localGatewayIpAddress!: pulumi.Output<string>;
    public /*out*/ readonly localGatewayPrivateIpAddress!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly phaseOneSettings!: pulumi.Output<outputs.ComputeVpnEndpointV2PhaseOneSettings | undefined>;
    public readonly phaseTwoSettings!: pulumi.Output<outputs.ComputeVpnEndpointV2PhaseTwoSettings | undefined>;
    public readonly preSharedKey!: pulumi.Output<string>;
    public readonly reachableRoutes!: pulumi.Output<string[]>;
    public readonly requirePerfectForwardSecrecy!: pulumi.Output<boolean | undefined>;
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ComputeVpnEndpointV2Timeouts | undefined>;
    public /*out*/ readonly tunnelStatus!: pulumi.Output<string>;
    public /*out*/ readonly uri!: pulumi.Output<string>;
    public readonly vnicSets!: pulumi.Output<string[]>;

    /**
     * Create a ComputeVpnEndpointV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ComputeVpnEndpointV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ComputeVpnEndpointV2Args | ComputeVpnEndpointV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ComputeVpnEndpointV2State | undefined;
            resourceInputs["customerVpnGateway"] = state ? state.customerVpnGateway : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["ikeIdentifier"] = state ? state.ikeIdentifier : undefined;
            resourceInputs["ipNetwork"] = state ? state.ipNetwork : undefined;
            resourceInputs["localGatewayIpAddress"] = state ? state.localGatewayIpAddress : undefined;
            resourceInputs["localGatewayPrivateIpAddress"] = state ? state.localGatewayPrivateIpAddress : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["phaseOneSettings"] = state ? state.phaseOneSettings : undefined;
            resourceInputs["phaseTwoSettings"] = state ? state.phaseTwoSettings : undefined;
            resourceInputs["preSharedKey"] = state ? state.preSharedKey : undefined;
            resourceInputs["reachableRoutes"] = state ? state.reachableRoutes : undefined;
            resourceInputs["requirePerfectForwardSecrecy"] = state ? state.requirePerfectForwardSecrecy : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["tunnelStatus"] = state ? state.tunnelStatus : undefined;
            resourceInputs["uri"] = state ? state.uri : undefined;
            resourceInputs["vnicSets"] = state ? state.vnicSets : undefined;
        } else {
            const args = argsOrState as ComputeVpnEndpointV2Args | undefined;
            if ((!args || args.customerVpnGateway === undefined) && !opts.urn) {
                throw new Error("Missing required property 'customerVpnGateway'");
            }
            if ((!args || args.ipNetwork === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipNetwork'");
            }
            if ((!args || args.preSharedKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'preSharedKey'");
            }
            if ((!args || args.reachableRoutes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'reachableRoutes'");
            }
            if ((!args || args.vnicSets === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vnicSets'");
            }
            resourceInputs["customerVpnGateway"] = args ? args.customerVpnGateway : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["ikeIdentifier"] = args ? args.ikeIdentifier : undefined;
            resourceInputs["ipNetwork"] = args ? args.ipNetwork : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["phaseOneSettings"] = args ? args.phaseOneSettings : undefined;
            resourceInputs["phaseTwoSettings"] = args ? args.phaseTwoSettings : undefined;
            resourceInputs["preSharedKey"] = args ? args.preSharedKey : undefined;
            resourceInputs["reachableRoutes"] = args ? args.reachableRoutes : undefined;
            resourceInputs["requirePerfectForwardSecrecy"] = args ? args.requirePerfectForwardSecrecy : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vnicSets"] = args ? args.vnicSets : undefined;
            resourceInputs["localGatewayIpAddress"] = undefined /*out*/;
            resourceInputs["localGatewayPrivateIpAddress"] = undefined /*out*/;
            resourceInputs["tunnelStatus"] = undefined /*out*/;
            resourceInputs["uri"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ComputeVpnEndpointV2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ComputeVpnEndpointV2 resources.
 */
export interface ComputeVpnEndpointV2State {
    customerVpnGateway?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    ikeIdentifier?: pulumi.Input<string>;
    ipNetwork?: pulumi.Input<string>;
    localGatewayIpAddress?: pulumi.Input<string>;
    localGatewayPrivateIpAddress?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    phaseOneSettings?: pulumi.Input<inputs.ComputeVpnEndpointV2PhaseOneSettings>;
    phaseTwoSettings?: pulumi.Input<inputs.ComputeVpnEndpointV2PhaseTwoSettings>;
    preSharedKey?: pulumi.Input<string>;
    reachableRoutes?: pulumi.Input<pulumi.Input<string>[]>;
    requirePerfectForwardSecrecy?: pulumi.Input<boolean>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.ComputeVpnEndpointV2Timeouts>;
    tunnelStatus?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
    vnicSets?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ComputeVpnEndpointV2 resource.
 */
export interface ComputeVpnEndpointV2Args {
    customerVpnGateway: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    ikeIdentifier?: pulumi.Input<string>;
    ipNetwork: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    phaseOneSettings?: pulumi.Input<inputs.ComputeVpnEndpointV2PhaseOneSettings>;
    phaseTwoSettings?: pulumi.Input<inputs.ComputeVpnEndpointV2PhaseTwoSettings>;
    preSharedKey: pulumi.Input<string>;
    reachableRoutes: pulumi.Input<pulumi.Input<string>[]>;
    requirePerfectForwardSecrecy?: pulumi.Input<boolean>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.ComputeVpnEndpointV2Timeouts>;
    vnicSets: pulumi.Input<pulumi.Input<string>[]>;
}
