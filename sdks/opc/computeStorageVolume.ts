// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ComputeStorageVolume extends pulumi.CustomResource {
    /**
     * Get an existing ComputeStorageVolume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ComputeStorageVolumeState, opts?: pulumi.CustomResourceOptions): ComputeStorageVolume {
        return new ComputeStorageVolume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'opc:index/computeStorageVolume:ComputeStorageVolume';

    /**
     * Returns true if the given object is an instance of ComputeStorageVolume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ComputeStorageVolume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ComputeStorageVolume.__pulumiType;
    }

    public readonly bootable!: pulumi.Output<boolean | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly hypervisor!: pulumi.Output<string>;
    public readonly imageList!: pulumi.Output<string | undefined>;
    public readonly imageListEntry!: pulumi.Output<number | undefined>;
    public readonly machineImage!: pulumi.Output<string>;
    public readonly managed!: pulumi.Output<boolean>;
    public readonly name!: pulumi.Output<string>;
    public readonly platform!: pulumi.Output<string>;
    public readonly readonly!: pulumi.Output<boolean>;
    public readonly size!: pulumi.Output<number>;
    public readonly snapshot!: pulumi.Output<string>;
    public readonly snapshotAccount!: pulumi.Output<string>;
    public readonly snapshotId!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly storagePool!: pulumi.Output<string>;
    public readonly storageType!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ComputeStorageVolumeTimeouts | undefined>;
    public readonly uri!: pulumi.Output<string>;

    /**
     * Create a ComputeStorageVolume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ComputeStorageVolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ComputeStorageVolumeArgs | ComputeStorageVolumeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ComputeStorageVolumeState | undefined;
            resourceInputs["bootable"] = state ? state.bootable : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["hypervisor"] = state ? state.hypervisor : undefined;
            resourceInputs["imageList"] = state ? state.imageList : undefined;
            resourceInputs["imageListEntry"] = state ? state.imageListEntry : undefined;
            resourceInputs["machineImage"] = state ? state.machineImage : undefined;
            resourceInputs["managed"] = state ? state.managed : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["platform"] = state ? state.platform : undefined;
            resourceInputs["readonly"] = state ? state.readonly : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["snapshot"] = state ? state.snapshot : undefined;
            resourceInputs["snapshotAccount"] = state ? state.snapshotAccount : undefined;
            resourceInputs["snapshotId"] = state ? state.snapshotId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["storagePool"] = state ? state.storagePool : undefined;
            resourceInputs["storageType"] = state ? state.storageType : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["uri"] = state ? state.uri : undefined;
        } else {
            const args = argsOrState as ComputeStorageVolumeArgs | undefined;
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            resourceInputs["bootable"] = args ? args.bootable : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["hypervisor"] = args ? args.hypervisor : undefined;
            resourceInputs["imageList"] = args ? args.imageList : undefined;
            resourceInputs["imageListEntry"] = args ? args.imageListEntry : undefined;
            resourceInputs["machineImage"] = args ? args.machineImage : undefined;
            resourceInputs["managed"] = args ? args.managed : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["platform"] = args ? args.platform : undefined;
            resourceInputs["readonly"] = args ? args.readonly : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["snapshot"] = args ? args.snapshot : undefined;
            resourceInputs["snapshotAccount"] = args ? args.snapshotAccount : undefined;
            resourceInputs["snapshotId"] = args ? args.snapshotId : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["storagePool"] = args ? args.storagePool : undefined;
            resourceInputs["storageType"] = args ? args.storageType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["uri"] = args ? args.uri : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ComputeStorageVolume.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ComputeStorageVolume resources.
 */
export interface ComputeStorageVolumeState {
    bootable?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    hypervisor?: pulumi.Input<string>;
    imageList?: pulumi.Input<string>;
    imageListEntry?: pulumi.Input<number>;
    machineImage?: pulumi.Input<string>;
    managed?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    platform?: pulumi.Input<string>;
    readonly?: pulumi.Input<boolean>;
    size?: pulumi.Input<number>;
    snapshot?: pulumi.Input<string>;
    snapshotAccount?: pulumi.Input<string>;
    snapshotId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    storagePool?: pulumi.Input<string>;
    storageType?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.ComputeStorageVolumeTimeouts>;
    uri?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ComputeStorageVolume resource.
 */
export interface ComputeStorageVolumeArgs {
    bootable?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    hypervisor?: pulumi.Input<string>;
    imageList?: pulumi.Input<string>;
    imageListEntry?: pulumi.Input<number>;
    machineImage?: pulumi.Input<string>;
    managed?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    platform?: pulumi.Input<string>;
    readonly?: pulumi.Input<boolean>;
    size: pulumi.Input<number>;
    snapshot?: pulumi.Input<string>;
    snapshotAccount?: pulumi.Input<string>;
    snapshotId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    storagePool?: pulumi.Input<string>;
    storageType?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.ComputeStorageVolumeTimeouts>;
    uri?: pulumi.Input<string>;
}
