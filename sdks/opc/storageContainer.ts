// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class StorageContainer extends pulumi.CustomResource {
    /**
     * Get an existing StorageContainer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StorageContainerState, opts?: pulumi.CustomResourceOptions): StorageContainer {
        return new StorageContainer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'opc:index/storageContainer:StorageContainer';

    /**
     * Returns true if the given object is an instance of StorageContainer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StorageContainer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StorageContainer.__pulumiType;
    }

    public readonly allowedOrigins!: pulumi.Output<string[]>;
    public readonly exposedHeaders!: pulumi.Output<string[]>;
    public readonly maxAge!: pulumi.Output<number | undefined>;
    public readonly metadata!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly primaryKey!: pulumi.Output<string | undefined>;
    public readonly quotaBytes!: pulumi.Output<number | undefined>;
    public readonly quotaCount!: pulumi.Output<number | undefined>;
    public readonly readAcls!: pulumi.Output<string[]>;
    public readonly secondaryKey!: pulumi.Output<string | undefined>;
    public readonly writeAcls!: pulumi.Output<string[]>;

    /**
     * Create a StorageContainer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: StorageContainerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StorageContainerArgs | StorageContainerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StorageContainerState | undefined;
            resourceInputs["allowedOrigins"] = state ? state.allowedOrigins : undefined;
            resourceInputs["exposedHeaders"] = state ? state.exposedHeaders : undefined;
            resourceInputs["maxAge"] = state ? state.maxAge : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["primaryKey"] = state ? state.primaryKey : undefined;
            resourceInputs["quotaBytes"] = state ? state.quotaBytes : undefined;
            resourceInputs["quotaCount"] = state ? state.quotaCount : undefined;
            resourceInputs["readAcls"] = state ? state.readAcls : undefined;
            resourceInputs["secondaryKey"] = state ? state.secondaryKey : undefined;
            resourceInputs["writeAcls"] = state ? state.writeAcls : undefined;
        } else {
            const args = argsOrState as StorageContainerArgs | undefined;
            resourceInputs["allowedOrigins"] = args ? args.allowedOrigins : undefined;
            resourceInputs["exposedHeaders"] = args ? args.exposedHeaders : undefined;
            resourceInputs["maxAge"] = args ? args.maxAge : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["primaryKey"] = args ? args.primaryKey : undefined;
            resourceInputs["quotaBytes"] = args ? args.quotaBytes : undefined;
            resourceInputs["quotaCount"] = args ? args.quotaCount : undefined;
            resourceInputs["readAcls"] = args ? args.readAcls : undefined;
            resourceInputs["secondaryKey"] = args ? args.secondaryKey : undefined;
            resourceInputs["writeAcls"] = args ? args.writeAcls : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StorageContainer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StorageContainer resources.
 */
export interface StorageContainerState {
    allowedOrigins?: pulumi.Input<pulumi.Input<string>[]>;
    exposedHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    maxAge?: pulumi.Input<number>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    primaryKey?: pulumi.Input<string>;
    quotaBytes?: pulumi.Input<number>;
    quotaCount?: pulumi.Input<number>;
    readAcls?: pulumi.Input<pulumi.Input<string>[]>;
    secondaryKey?: pulumi.Input<string>;
    writeAcls?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a StorageContainer resource.
 */
export interface StorageContainerArgs {
    allowedOrigins?: pulumi.Input<pulumi.Input<string>[]>;
    exposedHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    maxAge?: pulumi.Input<number>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    primaryKey?: pulumi.Input<string>;
    quotaBytes?: pulumi.Input<number>;
    quotaCount?: pulumi.Input<number>;
    readAcls?: pulumi.Input<pulumi.Input<string>[]>;
    secondaryKey?: pulumi.Input<string>;
    writeAcls?: pulumi.Input<pulumi.Input<string>[]>;
}
