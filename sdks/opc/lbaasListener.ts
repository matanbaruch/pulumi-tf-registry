// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LbaasListener extends pulumi.CustomResource {
    /**
     * Get an existing LbaasListener resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LbaasListenerState, opts?: pulumi.CustomResourceOptions): LbaasListener {
        return new LbaasListener(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'opc:index/lbaasListener:LbaasListener';

    /**
     * Returns true if the given object is an instance of LbaasListener.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LbaasListener {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LbaasListener.__pulumiType;
    }

    public readonly balancerProtocol!: pulumi.Output<string>;
    public readonly certificates!: pulumi.Output<string[] | undefined>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly loadBalancer!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly operationDetails!: pulumi.Output<string>;
    public /*out*/ readonly parentListener!: pulumi.Output<string>;
    public readonly pathPrefixes!: pulumi.Output<string[] | undefined>;
    public readonly policies!: pulumi.Output<string[] | undefined>;
    public readonly port!: pulumi.Output<number>;
    public readonly serverPool!: pulumi.Output<string | undefined>;
    public readonly serverProtocol!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<boolean>;
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly uri!: pulumi.Output<string>;
    public readonly virtualHosts!: pulumi.Output<string[] | undefined>;

    /**
     * Create a LbaasListener resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LbaasListenerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LbaasListenerArgs | LbaasListenerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LbaasListenerState | undefined;
            resourceInputs["balancerProtocol"] = state ? state.balancerProtocol : undefined;
            resourceInputs["certificates"] = state ? state.certificates : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["loadBalancer"] = state ? state.loadBalancer : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["operationDetails"] = state ? state.operationDetails : undefined;
            resourceInputs["parentListener"] = state ? state.parentListener : undefined;
            resourceInputs["pathPrefixes"] = state ? state.pathPrefixes : undefined;
            resourceInputs["policies"] = state ? state.policies : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["serverPool"] = state ? state.serverPool : undefined;
            resourceInputs["serverProtocol"] = state ? state.serverProtocol : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["uri"] = state ? state.uri : undefined;
            resourceInputs["virtualHosts"] = state ? state.virtualHosts : undefined;
        } else {
            const args = argsOrState as LbaasListenerArgs | undefined;
            if ((!args || args.balancerProtocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'balancerProtocol'");
            }
            if ((!args || args.loadBalancer === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loadBalancer'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if ((!args || args.serverProtocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverProtocol'");
            }
            resourceInputs["balancerProtocol"] = args ? args.balancerProtocol : undefined;
            resourceInputs["certificates"] = args ? args.certificates : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["loadBalancer"] = args ? args.loadBalancer : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pathPrefixes"] = args ? args.pathPrefixes : undefined;
            resourceInputs["policies"] = args ? args.policies : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["serverPool"] = args ? args.serverPool : undefined;
            resourceInputs["serverProtocol"] = args ? args.serverProtocol : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["virtualHosts"] = args ? args.virtualHosts : undefined;
            resourceInputs["operationDetails"] = undefined /*out*/;
            resourceInputs["parentListener"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["uri"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LbaasListener.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LbaasListener resources.
 */
export interface LbaasListenerState {
    balancerProtocol?: pulumi.Input<string>;
    certificates?: pulumi.Input<pulumi.Input<string>[]>;
    enabled?: pulumi.Input<boolean>;
    loadBalancer?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    operationDetails?: pulumi.Input<string>;
    parentListener?: pulumi.Input<string>;
    pathPrefixes?: pulumi.Input<pulumi.Input<string>[]>;
    policies?: pulumi.Input<pulumi.Input<string>[]>;
    port?: pulumi.Input<number>;
    serverPool?: pulumi.Input<string>;
    serverProtocol?: pulumi.Input<string>;
    state?: pulumi.Input<boolean>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    uri?: pulumi.Input<string>;
    virtualHosts?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a LbaasListener resource.
 */
export interface LbaasListenerArgs {
    balancerProtocol: pulumi.Input<string>;
    certificates?: pulumi.Input<pulumi.Input<string>[]>;
    enabled?: pulumi.Input<boolean>;
    loadBalancer: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    pathPrefixes?: pulumi.Input<pulumi.Input<string>[]>;
    policies?: pulumi.Input<pulumi.Input<string>[]>;
    port: pulumi.Input<number>;
    serverPool?: pulumi.Input<string>;
    serverProtocol: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    virtualHosts?: pulumi.Input<pulumi.Input<string>[]>;
}
