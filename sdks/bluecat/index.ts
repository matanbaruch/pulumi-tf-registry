// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { CnameRecordArgs, CnameRecordState } from "./cnameRecord";
export type CnameRecord = import("./cnameRecord").CnameRecord;
export const CnameRecord: typeof import("./cnameRecord").CnameRecord = null as any;
utilities.lazyLoad(exports, ["CnameRecord"], () => require("./cnameRecord"));

export { ConfigurationArgs, ConfigurationState } from "./configuration";
export type Configuration = import("./configuration").Configuration;
export const Configuration: typeof import("./configuration").Configuration = null as any;
utilities.lazyLoad(exports, ["Configuration"], () => require("./configuration"));

export { DhcpRangeArgs, DhcpRangeState } from "./dhcpRange";
export type DhcpRange = import("./dhcpRange").DhcpRange;
export const DhcpRange: typeof import("./dhcpRange").DhcpRange = null as any;
utilities.lazyLoad(exports, ["DhcpRange"], () => require("./dhcpRange"));

export { GenericRecordArgs, GenericRecordState } from "./genericRecord";
export type GenericRecord = import("./genericRecord").GenericRecord;
export const GenericRecord: typeof import("./genericRecord").GenericRecord = null as any;
utilities.lazyLoad(exports, ["GenericRecord"], () => require("./genericRecord"));

export { GetCnameRecordArgs, GetCnameRecordResult, GetCnameRecordOutputArgs } from "./getCnameRecord";
export const getCnameRecord: typeof import("./getCnameRecord").getCnameRecord = null as any;
export const getCnameRecordOutput: typeof import("./getCnameRecord").getCnameRecordOutput = null as any;
utilities.lazyLoad(exports, ["getCnameRecord","getCnameRecordOutput"], () => require("./getCnameRecord"));

export { GetHostRecordArgs, GetHostRecordResult, GetHostRecordOutputArgs } from "./getHostRecord";
export const getHostRecord: typeof import("./getHostRecord").getHostRecord = null as any;
export const getHostRecordOutput: typeof import("./getHostRecord").getHostRecordOutput = null as any;
utilities.lazyLoad(exports, ["getHostRecord","getHostRecordOutput"], () => require("./getHostRecord"));

export { GetIpv4blockArgs, GetIpv4blockResult, GetIpv4blockOutputArgs } from "./getIpv4block";
export const getIpv4block: typeof import("./getIpv4block").getIpv4block = null as any;
export const getIpv4blockOutput: typeof import("./getIpv4block").getIpv4blockOutput = null as any;
utilities.lazyLoad(exports, ["getIpv4block","getIpv4blockOutput"], () => require("./getIpv4block"));

export { GetIpv4networkArgs, GetIpv4networkResult, GetIpv4networkOutputArgs } from "./getIpv4network";
export const getIpv4network: typeof import("./getIpv4network").getIpv4network = null as any;
export const getIpv4networkOutput: typeof import("./getIpv4network").getIpv4networkOutput = null as any;
utilities.lazyLoad(exports, ["getIpv4network","getIpv4networkOutput"], () => require("./getIpv4network"));

export { GetZoneArgs, GetZoneResult, GetZoneOutputArgs } from "./getZone";
export const getZone: typeof import("./getZone").getZone = null as any;
export const getZoneOutput: typeof import("./getZone").getZoneOutput = null as any;
utilities.lazyLoad(exports, ["getZone","getZoneOutput"], () => require("./getZone"));

export { HostRecordArgs, HostRecordState } from "./hostRecord";
export type HostRecord = import("./hostRecord").HostRecord;
export const HostRecord: typeof import("./hostRecord").HostRecord = null as any;
utilities.lazyLoad(exports, ["HostRecord"], () => require("./hostRecord"));

export { IpAllocationArgs, IpAllocationState } from "./ipAllocation";
export type IpAllocation = import("./ipAllocation").IpAllocation;
export const IpAllocation: typeof import("./ipAllocation").IpAllocation = null as any;
utilities.lazyLoad(exports, ["IpAllocation"], () => require("./ipAllocation"));

export { IpAssociationArgs, IpAssociationState } from "./ipAssociation";
export type IpAssociation = import("./ipAssociation").IpAssociation;
export const IpAssociation: typeof import("./ipAssociation").IpAssociation = null as any;
utilities.lazyLoad(exports, ["IpAssociation"], () => require("./ipAssociation"));

export { Ipv4blockArgs, Ipv4blockState } from "./ipv4block";
export type Ipv4block = import("./ipv4block").Ipv4block;
export const Ipv4block: typeof import("./ipv4block").Ipv4block = null as any;
utilities.lazyLoad(exports, ["Ipv4block"], () => require("./ipv4block"));

export { Ipv4networkArgs, Ipv4networkState } from "./ipv4network";
export type Ipv4network = import("./ipv4network").Ipv4network;
export const Ipv4network: typeof import("./ipv4network").Ipv4network = null as any;
utilities.lazyLoad(exports, ["Ipv4network"], () => require("./ipv4network"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { PtrRecordArgs, PtrRecordState } from "./ptrRecord";
export type PtrRecord = import("./ptrRecord").PtrRecord;
export const PtrRecord: typeof import("./ptrRecord").PtrRecord = null as any;
utilities.lazyLoad(exports, ["PtrRecord"], () => require("./ptrRecord"));

export { TxtRecordArgs, TxtRecordState } from "./txtRecord";
export type TxtRecord = import("./txtRecord").TxtRecord;
export const TxtRecord: typeof import("./txtRecord").TxtRecord = null as any;
utilities.lazyLoad(exports, ["TxtRecord"], () => require("./txtRecord"));

export { ZoneArgs, ZoneState } from "./zone";
export type Zone = import("./zone").Zone;
export const Zone: typeof import("./zone").Zone = null as any;
utilities.lazyLoad(exports, ["Zone"], () => require("./zone"));


// Export sub-modules:
import * as config from "./config";

export {
    config,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "bluecat:index/cnameRecord:CnameRecord":
                return new CnameRecord(name, <any>undefined, { urn })
            case "bluecat:index/configuration:Configuration":
                return new Configuration(name, <any>undefined, { urn })
            case "bluecat:index/dhcpRange:DhcpRange":
                return new DhcpRange(name, <any>undefined, { urn })
            case "bluecat:index/genericRecord:GenericRecord":
                return new GenericRecord(name, <any>undefined, { urn })
            case "bluecat:index/hostRecord:HostRecord":
                return new HostRecord(name, <any>undefined, { urn })
            case "bluecat:index/ipAllocation:IpAllocation":
                return new IpAllocation(name, <any>undefined, { urn })
            case "bluecat:index/ipAssociation:IpAssociation":
                return new IpAssociation(name, <any>undefined, { urn })
            case "bluecat:index/ipv4block:Ipv4block":
                return new Ipv4block(name, <any>undefined, { urn })
            case "bluecat:index/ipv4network:Ipv4network":
                return new Ipv4network(name, <any>undefined, { urn })
            case "bluecat:index/ptrRecord:PtrRecord":
                return new PtrRecord(name, <any>undefined, { urn })
            case "bluecat:index/txtRecord:TxtRecord":
                return new TxtRecord(name, <any>undefined, { urn })
            case "bluecat:index/zone:Zone":
                return new Zone(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("bluecat", "index/cnameRecord", _module)
pulumi.runtime.registerResourceModule("bluecat", "index/configuration", _module)
pulumi.runtime.registerResourceModule("bluecat", "index/dhcpRange", _module)
pulumi.runtime.registerResourceModule("bluecat", "index/genericRecord", _module)
pulumi.runtime.registerResourceModule("bluecat", "index/hostRecord", _module)
pulumi.runtime.registerResourceModule("bluecat", "index/ipAllocation", _module)
pulumi.runtime.registerResourceModule("bluecat", "index/ipAssociation", _module)
pulumi.runtime.registerResourceModule("bluecat", "index/ipv4block", _module)
pulumi.runtime.registerResourceModule("bluecat", "index/ipv4network", _module)
pulumi.runtime.registerResourceModule("bluecat", "index/ptrRecord", _module)
pulumi.runtime.registerResourceModule("bluecat", "index/txtRecord", _module)
pulumi.runtime.registerResourceModule("bluecat", "index/zone", _module)
pulumi.runtime.registerResourcePackage("bluecat", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:bluecat") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
