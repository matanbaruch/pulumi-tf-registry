// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DhcpRange extends pulumi.CustomResource {
    /**
     * Get an existing DhcpRange resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DhcpRangeState, opts?: pulumi.CustomResourceOptions): DhcpRange {
        return new DhcpRange(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bluecat:index/dhcpRange:DhcpRange';

    /**
     * Returns true if the given object is an instance of DhcpRange.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DhcpRange {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DhcpRange.__pulumiType;
    }

    /**
     * The Configuration. Creating the Network in the default Configuration if doesn't specify
     */
    public readonly configuration!: pulumi.Output<string | undefined>;
    /**
     * End IP of the DHCP Range
     */
    public readonly end!: pulumi.Output<string | undefined>;
    /**
     * The network address in CIDR format
     */
    public readonly network!: pulumi.Output<string>;
    /**
     * DHCP Range's properties. Example: attribute=value|
     */
    public readonly properties!: pulumi.Output<string | undefined>;
    /**
     * Start IP of the DHCP Range
     */
    public readonly start!: pulumi.Output<string | undefined>;
    /**
     * IPv4 Template
     */
    public readonly template!: pulumi.Output<string | undefined>;

    /**
     * Create a DhcpRange resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DhcpRangeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DhcpRangeArgs | DhcpRangeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DhcpRangeState | undefined;
            resourceInputs["configuration"] = state ? state.configuration : undefined;
            resourceInputs["end"] = state ? state.end : undefined;
            resourceInputs["network"] = state ? state.network : undefined;
            resourceInputs["properties"] = state ? state.properties : undefined;
            resourceInputs["start"] = state ? state.start : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
        } else {
            const args = argsOrState as DhcpRangeArgs | undefined;
            if ((!args || args.network === undefined) && !opts.urn) {
                throw new Error("Missing required property 'network'");
            }
            resourceInputs["configuration"] = args ? args.configuration : undefined;
            resourceInputs["end"] = args ? args.end : undefined;
            resourceInputs["network"] = args ? args.network : undefined;
            resourceInputs["properties"] = args ? args.properties : undefined;
            resourceInputs["start"] = args ? args.start : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DhcpRange.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DhcpRange resources.
 */
export interface DhcpRangeState {
    /**
     * The Configuration. Creating the Network in the default Configuration if doesn't specify
     */
    configuration?: pulumi.Input<string>;
    /**
     * End IP of the DHCP Range
     */
    end?: pulumi.Input<string>;
    /**
     * The network address in CIDR format
     */
    network?: pulumi.Input<string>;
    /**
     * DHCP Range's properties. Example: attribute=value|
     */
    properties?: pulumi.Input<string>;
    /**
     * Start IP of the DHCP Range
     */
    start?: pulumi.Input<string>;
    /**
     * IPv4 Template
     */
    template?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DhcpRange resource.
 */
export interface DhcpRangeArgs {
    /**
     * The Configuration. Creating the Network in the default Configuration if doesn't specify
     */
    configuration?: pulumi.Input<string>;
    /**
     * End IP of the DHCP Range
     */
    end?: pulumi.Input<string>;
    /**
     * The network address in CIDR format
     */
    network: pulumi.Input<string>;
    /**
     * DHCP Range's properties. Example: attribute=value|
     */
    properties?: pulumi.Input<string>;
    /**
     * Start IP of the DHCP Range
     */
    start?: pulumi.Input<string>;
    /**
     * IPv4 Template
     */
    template?: pulumi.Input<string>;
}
