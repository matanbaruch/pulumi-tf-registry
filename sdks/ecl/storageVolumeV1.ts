// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class StorageVolumeV1 extends pulumi.CustomResource {
    /**
     * Get an existing StorageVolumeV1 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StorageVolumeV1State, opts?: pulumi.CustomResourceOptions): StorageVolumeV1 {
        return new StorageVolumeV1(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ecl:index/storageVolumeV1:StorageVolumeV1';

    /**
     * Returns true if the given object is an instance of StorageVolumeV1.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StorageVolumeV1 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StorageVolumeV1.__pulumiType;
    }

    public readonly availabilityZone!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly errorMessage!: pulumi.Output<string>;
    public readonly initiatorIqns!: pulumi.Output<string[] | undefined>;
    public readonly iopsPerGb!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly size!: pulumi.Output<number>;
    public readonly throughput!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.StorageVolumeV1Timeouts | undefined>;
    public readonly virtualStorageId!: pulumi.Output<string>;

    /**
     * Create a StorageVolumeV1 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StorageVolumeV1Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StorageVolumeV1Args | StorageVolumeV1State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StorageVolumeV1State | undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["errorMessage"] = state ? state.errorMessage : undefined;
            resourceInputs["initiatorIqns"] = state ? state.initiatorIqns : undefined;
            resourceInputs["iopsPerGb"] = state ? state.iopsPerGb : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["throughput"] = state ? state.throughput : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["virtualStorageId"] = state ? state.virtualStorageId : undefined;
        } else {
            const args = argsOrState as StorageVolumeV1Args | undefined;
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            if ((!args || args.virtualStorageId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualStorageId'");
            }
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["errorMessage"] = args ? args.errorMessage : undefined;
            resourceInputs["initiatorIqns"] = args ? args.initiatorIqns : undefined;
            resourceInputs["iopsPerGb"] = args ? args.iopsPerGb : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["throughput"] = args ? args.throughput : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["virtualStorageId"] = args ? args.virtualStorageId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StorageVolumeV1.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StorageVolumeV1 resources.
 */
export interface StorageVolumeV1State {
    availabilityZone?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    errorMessage?: pulumi.Input<string>;
    initiatorIqns?: pulumi.Input<pulumi.Input<string>[]>;
    iopsPerGb?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    throughput?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.StorageVolumeV1Timeouts>;
    virtualStorageId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StorageVolumeV1 resource.
 */
export interface StorageVolumeV1Args {
    availabilityZone?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    errorMessage?: pulumi.Input<string>;
    initiatorIqns?: pulumi.Input<pulumi.Input<string>[]>;
    iopsPerGb?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    size: pulumi.Input<number>;
    throughput?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.StorageVolumeV1Timeouts>;
    virtualStorageId: pulumi.Input<string>;
}
