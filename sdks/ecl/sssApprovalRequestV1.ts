// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SssApprovalRequestV1 extends pulumi.CustomResource {
    /**
     * Get an existing SssApprovalRequestV1 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SssApprovalRequestV1State, opts?: pulumi.CustomResourceOptions): SssApprovalRequestV1 {
        return new SssApprovalRequestV1(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ecl:index/sssApprovalRequestV1:SssApprovalRequestV1';

    /**
     * Returns true if the given object is an instance of SssApprovalRequestV1.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SssApprovalRequestV1 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SssApprovalRequestV1.__pulumiType;
    }

    public /*out*/ readonly actions!: pulumi.Output<outputs.SssApprovalRequestV1Action[]>;
    public /*out*/ readonly approvalDeadline!: pulumi.Output<string>;
    public /*out*/ readonly approvalExpire!: pulumi.Output<string>;
    public /*out*/ readonly approver!: pulumi.Output<boolean>;
    public /*out*/ readonly approverId!: pulumi.Output<string>;
    public /*out*/ readonly approverType!: pulumi.Output<string>;
    public /*out*/ readonly descriptions!: pulumi.Output<outputs.SssApprovalRequestV1Description[]>;
    public /*out*/ readonly externalRequestId!: pulumi.Output<string>;
    public /*out*/ readonly registeredTime!: pulumi.Output<string>;
    public readonly requestId!: pulumi.Output<string>;
    public /*out*/ readonly requestUser!: pulumi.Output<boolean>;
    public /*out*/ readonly requestUserId!: pulumi.Output<string>;
    public /*out*/ readonly service!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public /*out*/ readonly updatedTime!: pulumi.Output<string>;

    /**
     * Create a SssApprovalRequestV1 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SssApprovalRequestV1Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SssApprovalRequestV1Args | SssApprovalRequestV1State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SssApprovalRequestV1State | undefined;
            resourceInputs["actions"] = state ? state.actions : undefined;
            resourceInputs["approvalDeadline"] = state ? state.approvalDeadline : undefined;
            resourceInputs["approvalExpire"] = state ? state.approvalExpire : undefined;
            resourceInputs["approver"] = state ? state.approver : undefined;
            resourceInputs["approverId"] = state ? state.approverId : undefined;
            resourceInputs["approverType"] = state ? state.approverType : undefined;
            resourceInputs["descriptions"] = state ? state.descriptions : undefined;
            resourceInputs["externalRequestId"] = state ? state.externalRequestId : undefined;
            resourceInputs["registeredTime"] = state ? state.registeredTime : undefined;
            resourceInputs["requestId"] = state ? state.requestId : undefined;
            resourceInputs["requestUser"] = state ? state.requestUser : undefined;
            resourceInputs["requestUserId"] = state ? state.requestUserId : undefined;
            resourceInputs["service"] = state ? state.service : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["updatedTime"] = state ? state.updatedTime : undefined;
        } else {
            const args = argsOrState as SssApprovalRequestV1Args | undefined;
            if ((!args || args.requestId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'requestId'");
            }
            if ((!args || args.status === undefined) && !opts.urn) {
                throw new Error("Missing required property 'status'");
            }
            resourceInputs["requestId"] = args ? args.requestId : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["actions"] = undefined /*out*/;
            resourceInputs["approvalDeadline"] = undefined /*out*/;
            resourceInputs["approvalExpire"] = undefined /*out*/;
            resourceInputs["approver"] = undefined /*out*/;
            resourceInputs["approverId"] = undefined /*out*/;
            resourceInputs["approverType"] = undefined /*out*/;
            resourceInputs["descriptions"] = undefined /*out*/;
            resourceInputs["externalRequestId"] = undefined /*out*/;
            resourceInputs["registeredTime"] = undefined /*out*/;
            resourceInputs["requestUser"] = undefined /*out*/;
            resourceInputs["requestUserId"] = undefined /*out*/;
            resourceInputs["service"] = undefined /*out*/;
            resourceInputs["updatedTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SssApprovalRequestV1.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SssApprovalRequestV1 resources.
 */
export interface SssApprovalRequestV1State {
    actions?: pulumi.Input<pulumi.Input<inputs.SssApprovalRequestV1Action>[]>;
    approvalDeadline?: pulumi.Input<string>;
    approvalExpire?: pulumi.Input<string>;
    approver?: pulumi.Input<boolean>;
    approverId?: pulumi.Input<string>;
    approverType?: pulumi.Input<string>;
    descriptions?: pulumi.Input<pulumi.Input<inputs.SssApprovalRequestV1Description>[]>;
    externalRequestId?: pulumi.Input<string>;
    registeredTime?: pulumi.Input<string>;
    requestId?: pulumi.Input<string>;
    requestUser?: pulumi.Input<boolean>;
    requestUserId?: pulumi.Input<string>;
    service?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    updatedTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SssApprovalRequestV1 resource.
 */
export interface SssApprovalRequestV1Args {
    requestId: pulumi.Input<string>;
    status: pulumi.Input<string>;
}
