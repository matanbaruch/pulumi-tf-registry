// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class StorageVirtualstorageV1 extends pulumi.CustomResource {
    /**
     * Get an existing StorageVirtualstorageV1 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StorageVirtualstorageV1State, opts?: pulumi.CustomResourceOptions): StorageVirtualstorageV1 {
        return new StorageVirtualstorageV1(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ecl:index/storageVirtualstorageV1:StorageVirtualstorageV1';

    /**
     * Returns true if the given object is an instance of StorageVirtualstorageV1.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StorageVirtualstorageV1 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StorageVirtualstorageV1.__pulumiType;
    }

    public readonly description!: pulumi.Output<string | undefined>;
    public readonly errorMessage!: pulumi.Output<string>;
    public readonly hostRoutes!: pulumi.Output<outputs.StorageVirtualstorageV1HostRoute[] | undefined>;
    public readonly ipAddrPool!: pulumi.Output<{[key: string]: string}>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkId!: pulumi.Output<string>;
    public readonly subnetId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.StorageVirtualstorageV1Timeouts | undefined>;
    public readonly volumeTypeId!: pulumi.Output<string>;
    public readonly volumeTypeName!: pulumi.Output<string | undefined>;

    /**
     * Create a StorageVirtualstorageV1 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StorageVirtualstorageV1Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StorageVirtualstorageV1Args | StorageVirtualstorageV1State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StorageVirtualstorageV1State | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["errorMessage"] = state ? state.errorMessage : undefined;
            resourceInputs["hostRoutes"] = state ? state.hostRoutes : undefined;
            resourceInputs["ipAddrPool"] = state ? state.ipAddrPool : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkId"] = state ? state.networkId : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["volumeTypeId"] = state ? state.volumeTypeId : undefined;
            resourceInputs["volumeTypeName"] = state ? state.volumeTypeName : undefined;
        } else {
            const args = argsOrState as StorageVirtualstorageV1Args | undefined;
            if ((!args || args.ipAddrPool === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipAddrPool'");
            }
            if ((!args || args.networkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["errorMessage"] = args ? args.errorMessage : undefined;
            resourceInputs["hostRoutes"] = args ? args.hostRoutes : undefined;
            resourceInputs["ipAddrPool"] = args ? args.ipAddrPool : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkId"] = args ? args.networkId : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["volumeTypeId"] = args ? args.volumeTypeId : undefined;
            resourceInputs["volumeTypeName"] = args ? args.volumeTypeName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StorageVirtualstorageV1.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StorageVirtualstorageV1 resources.
 */
export interface StorageVirtualstorageV1State {
    description?: pulumi.Input<string>;
    errorMessage?: pulumi.Input<string>;
    hostRoutes?: pulumi.Input<pulumi.Input<inputs.StorageVirtualstorageV1HostRoute>[]>;
    ipAddrPool?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.StorageVirtualstorageV1Timeouts>;
    volumeTypeId?: pulumi.Input<string>;
    volumeTypeName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StorageVirtualstorageV1 resource.
 */
export interface StorageVirtualstorageV1Args {
    description?: pulumi.Input<string>;
    errorMessage?: pulumi.Input<string>;
    hostRoutes?: pulumi.Input<pulumi.Input<inputs.StorageVirtualstorageV1HostRoute>[]>;
    ipAddrPool: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    networkId: pulumi.Input<string>;
    subnetId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.StorageVirtualstorageV1Timeouts>;
    volumeTypeId?: pulumi.Input<string>;
    volumeTypeName?: pulumi.Input<string>;
}
