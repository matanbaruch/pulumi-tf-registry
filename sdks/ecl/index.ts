// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { BaremetalKeypairV2Args, BaremetalKeypairV2State } from "./baremetalKeypairV2";
export type BaremetalKeypairV2 = import("./baremetalKeypairV2").BaremetalKeypairV2;
export const BaremetalKeypairV2: typeof import("./baremetalKeypairV2").BaremetalKeypairV2 = null as any;
utilities.lazyLoad(exports, ["BaremetalKeypairV2"], () => require("./baremetalKeypairV2"));

export { BaremetalServerV2Args, BaremetalServerV2State } from "./baremetalServerV2";
export type BaremetalServerV2 = import("./baremetalServerV2").BaremetalServerV2;
export const BaremetalServerV2: typeof import("./baremetalServerV2").BaremetalServerV2 = null as any;
utilities.lazyLoad(exports, ["BaremetalServerV2"], () => require("./baremetalServerV2"));

export { ComputeInstanceV2Args, ComputeInstanceV2State } from "./computeInstanceV2";
export type ComputeInstanceV2 = import("./computeInstanceV2").ComputeInstanceV2;
export const ComputeInstanceV2: typeof import("./computeInstanceV2").ComputeInstanceV2 = null as any;
utilities.lazyLoad(exports, ["ComputeInstanceV2"], () => require("./computeInstanceV2"));

export { ComputeKeypairV2Args, ComputeKeypairV2State } from "./computeKeypairV2";
export type ComputeKeypairV2 = import("./computeKeypairV2").ComputeKeypairV2;
export const ComputeKeypairV2: typeof import("./computeKeypairV2").ComputeKeypairV2 = null as any;
utilities.lazyLoad(exports, ["ComputeKeypairV2"], () => require("./computeKeypairV2"));

export { ComputeVolumeAttachV2Args, ComputeVolumeAttachV2State } from "./computeVolumeAttachV2";
export type ComputeVolumeAttachV2 = import("./computeVolumeAttachV2").ComputeVolumeAttachV2;
export const ComputeVolumeAttachV2: typeof import("./computeVolumeAttachV2").ComputeVolumeAttachV2 = null as any;
utilities.lazyLoad(exports, ["ComputeVolumeAttachV2"], () => require("./computeVolumeAttachV2"));

export { ComputeVolumeV2Args, ComputeVolumeV2State } from "./computeVolumeV2";
export type ComputeVolumeV2 = import("./computeVolumeV2").ComputeVolumeV2;
export const ComputeVolumeV2: typeof import("./computeVolumeV2").ComputeVolumeV2 = null as any;
utilities.lazyLoad(exports, ["ComputeVolumeV2"], () => require("./computeVolumeV2"));

export { DedicatedHypervisorLicenseV1Args, DedicatedHypervisorLicenseV1State } from "./dedicatedHypervisorLicenseV1";
export type DedicatedHypervisorLicenseV1 = import("./dedicatedHypervisorLicenseV1").DedicatedHypervisorLicenseV1;
export const DedicatedHypervisorLicenseV1: typeof import("./dedicatedHypervisorLicenseV1").DedicatedHypervisorLicenseV1 = null as any;
utilities.lazyLoad(exports, ["DedicatedHypervisorLicenseV1"], () => require("./dedicatedHypervisorLicenseV1"));

export { DedicatedHypervisorServerV1Args, DedicatedHypervisorServerV1State } from "./dedicatedHypervisorServerV1";
export type DedicatedHypervisorServerV1 = import("./dedicatedHypervisorServerV1").DedicatedHypervisorServerV1;
export const DedicatedHypervisorServerV1: typeof import("./dedicatedHypervisorServerV1").DedicatedHypervisorServerV1 = null as any;
utilities.lazyLoad(exports, ["DedicatedHypervisorServerV1"], () => require("./dedicatedHypervisorServerV1"));

export { DnsRecordsetV2Args, DnsRecordsetV2State } from "./dnsRecordsetV2";
export type DnsRecordsetV2 = import("./dnsRecordsetV2").DnsRecordsetV2;
export const DnsRecordsetV2: typeof import("./dnsRecordsetV2").DnsRecordsetV2 = null as any;
utilities.lazyLoad(exports, ["DnsRecordsetV2"], () => require("./dnsRecordsetV2"));

export { DnsZoneV2Args, DnsZoneV2State } from "./dnsZoneV2";
export type DnsZoneV2 = import("./dnsZoneV2").DnsZoneV2;
export const DnsZoneV2: typeof import("./dnsZoneV2").DnsZoneV2 = null as any;
utilities.lazyLoad(exports, ["DnsZoneV2"], () => require("./dnsZoneV2"));

export { GetBaremetalAvailabilityZoneV2Args, GetBaremetalAvailabilityZoneV2Result, GetBaremetalAvailabilityZoneV2OutputArgs } from "./getBaremetalAvailabilityZoneV2";
export const getBaremetalAvailabilityZoneV2: typeof import("./getBaremetalAvailabilityZoneV2").getBaremetalAvailabilityZoneV2 = null as any;
export const getBaremetalAvailabilityZoneV2Output: typeof import("./getBaremetalAvailabilityZoneV2").getBaremetalAvailabilityZoneV2Output = null as any;
utilities.lazyLoad(exports, ["getBaremetalAvailabilityZoneV2","getBaremetalAvailabilityZoneV2Output"], () => require("./getBaremetalAvailabilityZoneV2"));

export { GetBaremetalFlavorV2Args, GetBaremetalFlavorV2Result, GetBaremetalFlavorV2OutputArgs } from "./getBaremetalFlavorV2";
export const getBaremetalFlavorV2: typeof import("./getBaremetalFlavorV2").getBaremetalFlavorV2 = null as any;
export const getBaremetalFlavorV2Output: typeof import("./getBaremetalFlavorV2").getBaremetalFlavorV2Output = null as any;
utilities.lazyLoad(exports, ["getBaremetalFlavorV2","getBaremetalFlavorV2Output"], () => require("./getBaremetalFlavorV2"));

export { GetBaremetalKeypairV2Args, GetBaremetalKeypairV2Result, GetBaremetalKeypairV2OutputArgs } from "./getBaremetalKeypairV2";
export const getBaremetalKeypairV2: typeof import("./getBaremetalKeypairV2").getBaremetalKeypairV2 = null as any;
export const getBaremetalKeypairV2Output: typeof import("./getBaremetalKeypairV2").getBaremetalKeypairV2Output = null as any;
utilities.lazyLoad(exports, ["getBaremetalKeypairV2","getBaremetalKeypairV2Output"], () => require("./getBaremetalKeypairV2"));

export { GetComputeFlavorV2Args, GetComputeFlavorV2Result, GetComputeFlavorV2OutputArgs } from "./getComputeFlavorV2";
export const getComputeFlavorV2: typeof import("./getComputeFlavorV2").getComputeFlavorV2 = null as any;
export const getComputeFlavorV2Output: typeof import("./getComputeFlavorV2").getComputeFlavorV2Output = null as any;
utilities.lazyLoad(exports, ["getComputeFlavorV2","getComputeFlavorV2Output"], () => require("./getComputeFlavorV2"));

export { GetComputeKeypairV2Args, GetComputeKeypairV2Result, GetComputeKeypairV2OutputArgs } from "./getComputeKeypairV2";
export const getComputeKeypairV2: typeof import("./getComputeKeypairV2").getComputeKeypairV2 = null as any;
export const getComputeKeypairV2Output: typeof import("./getComputeKeypairV2").getComputeKeypairV2Output = null as any;
utilities.lazyLoad(exports, ["getComputeKeypairV2","getComputeKeypairV2Output"], () => require("./getComputeKeypairV2"));

export { GetDnsZoneV2Args, GetDnsZoneV2Result, GetDnsZoneV2OutputArgs } from "./getDnsZoneV2";
export const getDnsZoneV2: typeof import("./getDnsZoneV2").getDnsZoneV2 = null as any;
export const getDnsZoneV2Output: typeof import("./getDnsZoneV2").getDnsZoneV2Output = null as any;
utilities.lazyLoad(exports, ["getDnsZoneV2","getDnsZoneV2Output"], () => require("./getDnsZoneV2"));

export { GetImagestoragesImageV2Args, GetImagestoragesImageV2Result, GetImagestoragesImageV2OutputArgs } from "./getImagestoragesImageV2";
export const getImagestoragesImageV2: typeof import("./getImagestoragesImageV2").getImagestoragesImageV2 = null as any;
export const getImagestoragesImageV2Output: typeof import("./getImagestoragesImageV2").getImagestoragesImageV2Output = null as any;
utilities.lazyLoad(exports, ["getImagestoragesImageV2","getImagestoragesImageV2Output"], () => require("./getImagestoragesImageV2"));

export { GetMlbCertificateV1Args, GetMlbCertificateV1Result, GetMlbCertificateV1OutputArgs } from "./getMlbCertificateV1";
export const getMlbCertificateV1: typeof import("./getMlbCertificateV1").getMlbCertificateV1 = null as any;
export const getMlbCertificateV1Output: typeof import("./getMlbCertificateV1").getMlbCertificateV1Output = null as any;
utilities.lazyLoad(exports, ["getMlbCertificateV1","getMlbCertificateV1Output"], () => require("./getMlbCertificateV1"));

export { GetMlbHealthMonitorV1Args, GetMlbHealthMonitorV1Result, GetMlbHealthMonitorV1OutputArgs } from "./getMlbHealthMonitorV1";
export const getMlbHealthMonitorV1: typeof import("./getMlbHealthMonitorV1").getMlbHealthMonitorV1 = null as any;
export const getMlbHealthMonitorV1Output: typeof import("./getMlbHealthMonitorV1").getMlbHealthMonitorV1Output = null as any;
utilities.lazyLoad(exports, ["getMlbHealthMonitorV1","getMlbHealthMonitorV1Output"], () => require("./getMlbHealthMonitorV1"));

export { GetMlbListenerV1Args, GetMlbListenerV1Result, GetMlbListenerV1OutputArgs } from "./getMlbListenerV1";
export const getMlbListenerV1: typeof import("./getMlbListenerV1").getMlbListenerV1 = null as any;
export const getMlbListenerV1Output: typeof import("./getMlbListenerV1").getMlbListenerV1Output = null as any;
utilities.lazyLoad(exports, ["getMlbListenerV1","getMlbListenerV1Output"], () => require("./getMlbListenerV1"));

export { GetMlbLoadBalancerV1Args, GetMlbLoadBalancerV1Result, GetMlbLoadBalancerV1OutputArgs } from "./getMlbLoadBalancerV1";
export const getMlbLoadBalancerV1: typeof import("./getMlbLoadBalancerV1").getMlbLoadBalancerV1 = null as any;
export const getMlbLoadBalancerV1Output: typeof import("./getMlbLoadBalancerV1").getMlbLoadBalancerV1Output = null as any;
utilities.lazyLoad(exports, ["getMlbLoadBalancerV1","getMlbLoadBalancerV1Output"], () => require("./getMlbLoadBalancerV1"));

export { GetMlbOperationV1Args, GetMlbOperationV1Result, GetMlbOperationV1OutputArgs } from "./getMlbOperationV1";
export const getMlbOperationV1: typeof import("./getMlbOperationV1").getMlbOperationV1 = null as any;
export const getMlbOperationV1Output: typeof import("./getMlbOperationV1").getMlbOperationV1Output = null as any;
utilities.lazyLoad(exports, ["getMlbOperationV1","getMlbOperationV1Output"], () => require("./getMlbOperationV1"));

export { GetMlbPlanV1Args, GetMlbPlanV1Result, GetMlbPlanV1OutputArgs } from "./getMlbPlanV1";
export const getMlbPlanV1: typeof import("./getMlbPlanV1").getMlbPlanV1 = null as any;
export const getMlbPlanV1Output: typeof import("./getMlbPlanV1").getMlbPlanV1Output = null as any;
utilities.lazyLoad(exports, ["getMlbPlanV1","getMlbPlanV1Output"], () => require("./getMlbPlanV1"));

export { GetMlbPolicyV1Args, GetMlbPolicyV1Result, GetMlbPolicyV1OutputArgs } from "./getMlbPolicyV1";
export const getMlbPolicyV1: typeof import("./getMlbPolicyV1").getMlbPolicyV1 = null as any;
export const getMlbPolicyV1Output: typeof import("./getMlbPolicyV1").getMlbPolicyV1Output = null as any;
utilities.lazyLoad(exports, ["getMlbPolicyV1","getMlbPolicyV1Output"], () => require("./getMlbPolicyV1"));

export { GetMlbRouteV1Args, GetMlbRouteV1Result, GetMlbRouteV1OutputArgs } from "./getMlbRouteV1";
export const getMlbRouteV1: typeof import("./getMlbRouteV1").getMlbRouteV1 = null as any;
export const getMlbRouteV1Output: typeof import("./getMlbRouteV1").getMlbRouteV1Output = null as any;
utilities.lazyLoad(exports, ["getMlbRouteV1","getMlbRouteV1Output"], () => require("./getMlbRouteV1"));

export { GetMlbRuleV1Args, GetMlbRuleV1Result, GetMlbRuleV1OutputArgs } from "./getMlbRuleV1";
export const getMlbRuleV1: typeof import("./getMlbRuleV1").getMlbRuleV1 = null as any;
export const getMlbRuleV1Output: typeof import("./getMlbRuleV1").getMlbRuleV1Output = null as any;
utilities.lazyLoad(exports, ["getMlbRuleV1","getMlbRuleV1Output"], () => require("./getMlbRuleV1"));

export { GetMlbSystemUpdateV1Args, GetMlbSystemUpdateV1Result, GetMlbSystemUpdateV1OutputArgs } from "./getMlbSystemUpdateV1";
export const getMlbSystemUpdateV1: typeof import("./getMlbSystemUpdateV1").getMlbSystemUpdateV1 = null as any;
export const getMlbSystemUpdateV1Output: typeof import("./getMlbSystemUpdateV1").getMlbSystemUpdateV1Output = null as any;
utilities.lazyLoad(exports, ["getMlbSystemUpdateV1","getMlbSystemUpdateV1Output"], () => require("./getMlbSystemUpdateV1"));

export { GetMlbTargetGroupV1Args, GetMlbTargetGroupV1Result, GetMlbTargetGroupV1OutputArgs } from "./getMlbTargetGroupV1";
export const getMlbTargetGroupV1: typeof import("./getMlbTargetGroupV1").getMlbTargetGroupV1 = null as any;
export const getMlbTargetGroupV1Output: typeof import("./getMlbTargetGroupV1").getMlbTargetGroupV1Output = null as any;
utilities.lazyLoad(exports, ["getMlbTargetGroupV1","getMlbTargetGroupV1Output"], () => require("./getMlbTargetGroupV1"));

export { GetMlbTlsPolicyV1Args, GetMlbTlsPolicyV1Result, GetMlbTlsPolicyV1OutputArgs } from "./getMlbTlsPolicyV1";
export const getMlbTlsPolicyV1: typeof import("./getMlbTlsPolicyV1").getMlbTlsPolicyV1 = null as any;
export const getMlbTlsPolicyV1Output: typeof import("./getMlbTlsPolicyV1").getMlbTlsPolicyV1Output = null as any;
utilities.lazyLoad(exports, ["getMlbTlsPolicyV1","getMlbTlsPolicyV1Output"], () => require("./getMlbTlsPolicyV1"));

export { GetNetworkCommonFunctionGatewayV2Args, GetNetworkCommonFunctionGatewayV2Result, GetNetworkCommonFunctionGatewayV2OutputArgs } from "./getNetworkCommonFunctionGatewayV2";
export const getNetworkCommonFunctionGatewayV2: typeof import("./getNetworkCommonFunctionGatewayV2").getNetworkCommonFunctionGatewayV2 = null as any;
export const getNetworkCommonFunctionGatewayV2Output: typeof import("./getNetworkCommonFunctionGatewayV2").getNetworkCommonFunctionGatewayV2Output = null as any;
utilities.lazyLoad(exports, ["getNetworkCommonFunctionGatewayV2","getNetworkCommonFunctionGatewayV2Output"], () => require("./getNetworkCommonFunctionGatewayV2"));

export { GetNetworkCommonFunctionPoolV2Args, GetNetworkCommonFunctionPoolV2Result, GetNetworkCommonFunctionPoolV2OutputArgs } from "./getNetworkCommonFunctionPoolV2";
export const getNetworkCommonFunctionPoolV2: typeof import("./getNetworkCommonFunctionPoolV2").getNetworkCommonFunctionPoolV2 = null as any;
export const getNetworkCommonFunctionPoolV2Output: typeof import("./getNetworkCommonFunctionPoolV2").getNetworkCommonFunctionPoolV2Output = null as any;
utilities.lazyLoad(exports, ["getNetworkCommonFunctionPoolV2","getNetworkCommonFunctionPoolV2Output"], () => require("./getNetworkCommonFunctionPoolV2"));

export { GetNetworkFicGatewayV2Args, GetNetworkFicGatewayV2Result, GetNetworkFicGatewayV2OutputArgs } from "./getNetworkFicGatewayV2";
export const getNetworkFicGatewayV2: typeof import("./getNetworkFicGatewayV2").getNetworkFicGatewayV2 = null as any;
export const getNetworkFicGatewayV2Output: typeof import("./getNetworkFicGatewayV2").getNetworkFicGatewayV2Output = null as any;
utilities.lazyLoad(exports, ["getNetworkFicGatewayV2","getNetworkFicGatewayV2Output"], () => require("./getNetworkFicGatewayV2"));

export { GetNetworkGatewayInterfaceV2Args, GetNetworkGatewayInterfaceV2Result, GetNetworkGatewayInterfaceV2OutputArgs } from "./getNetworkGatewayInterfaceV2";
export const getNetworkGatewayInterfaceV2: typeof import("./getNetworkGatewayInterfaceV2").getNetworkGatewayInterfaceV2 = null as any;
export const getNetworkGatewayInterfaceV2Output: typeof import("./getNetworkGatewayInterfaceV2").getNetworkGatewayInterfaceV2Output = null as any;
utilities.lazyLoad(exports, ["getNetworkGatewayInterfaceV2","getNetworkGatewayInterfaceV2Output"], () => require("./getNetworkGatewayInterfaceV2"));

export { GetNetworkInternetGatewayV2Args, GetNetworkInternetGatewayV2Result, GetNetworkInternetGatewayV2OutputArgs } from "./getNetworkInternetGatewayV2";
export const getNetworkInternetGatewayV2: typeof import("./getNetworkInternetGatewayV2").getNetworkInternetGatewayV2 = null as any;
export const getNetworkInternetGatewayV2Output: typeof import("./getNetworkInternetGatewayV2").getNetworkInternetGatewayV2Output = null as any;
utilities.lazyLoad(exports, ["getNetworkInternetGatewayV2","getNetworkInternetGatewayV2Output"], () => require("./getNetworkInternetGatewayV2"));

export { GetNetworkInternetServiceV2Args, GetNetworkInternetServiceV2Result, GetNetworkInternetServiceV2OutputArgs } from "./getNetworkInternetServiceV2";
export const getNetworkInternetServiceV2: typeof import("./getNetworkInternetServiceV2").getNetworkInternetServiceV2 = null as any;
export const getNetworkInternetServiceV2Output: typeof import("./getNetworkInternetServiceV2").getNetworkInternetServiceV2Output = null as any;
utilities.lazyLoad(exports, ["getNetworkInternetServiceV2","getNetworkInternetServiceV2Output"], () => require("./getNetworkInternetServiceV2"));

export { GetNetworkLoadBalancerPlanV2Args, GetNetworkLoadBalancerPlanV2Result, GetNetworkLoadBalancerPlanV2OutputArgs } from "./getNetworkLoadBalancerPlanV2";
export const getNetworkLoadBalancerPlanV2: typeof import("./getNetworkLoadBalancerPlanV2").getNetworkLoadBalancerPlanV2 = null as any;
export const getNetworkLoadBalancerPlanV2Output: typeof import("./getNetworkLoadBalancerPlanV2").getNetworkLoadBalancerPlanV2Output = null as any;
utilities.lazyLoad(exports, ["getNetworkLoadBalancerPlanV2","getNetworkLoadBalancerPlanV2Output"], () => require("./getNetworkLoadBalancerPlanV2"));

export { GetNetworkNetworkV2Args, GetNetworkNetworkV2Result, GetNetworkNetworkV2OutputArgs } from "./getNetworkNetworkV2";
export const getNetworkNetworkV2: typeof import("./getNetworkNetworkV2").getNetworkNetworkV2 = null as any;
export const getNetworkNetworkV2Output: typeof import("./getNetworkNetworkV2").getNetworkNetworkV2Output = null as any;
utilities.lazyLoad(exports, ["getNetworkNetworkV2","getNetworkNetworkV2Output"], () => require("./getNetworkNetworkV2"));

export { GetNetworkPortV2Args, GetNetworkPortV2Result, GetNetworkPortV2OutputArgs } from "./getNetworkPortV2";
export const getNetworkPortV2: typeof import("./getNetworkPortV2").getNetworkPortV2 = null as any;
export const getNetworkPortV2Output: typeof import("./getNetworkPortV2").getNetworkPortV2Output = null as any;
utilities.lazyLoad(exports, ["getNetworkPortV2","getNetworkPortV2Output"], () => require("./getNetworkPortV2"));

export { GetNetworkPublicIpV2Args, GetNetworkPublicIpV2Result, GetNetworkPublicIpV2OutputArgs } from "./getNetworkPublicIpV2";
export const getNetworkPublicIpV2: typeof import("./getNetworkPublicIpV2").getNetworkPublicIpV2 = null as any;
export const getNetworkPublicIpV2Output: typeof import("./getNetworkPublicIpV2").getNetworkPublicIpV2Output = null as any;
utilities.lazyLoad(exports, ["getNetworkPublicIpV2","getNetworkPublicIpV2Output"], () => require("./getNetworkPublicIpV2"));

export { GetNetworkQosOptionsV2Args, GetNetworkQosOptionsV2Result, GetNetworkQosOptionsV2OutputArgs } from "./getNetworkQosOptionsV2";
export const getNetworkQosOptionsV2: typeof import("./getNetworkQosOptionsV2").getNetworkQosOptionsV2 = null as any;
export const getNetworkQosOptionsV2Output: typeof import("./getNetworkQosOptionsV2").getNetworkQosOptionsV2Output = null as any;
utilities.lazyLoad(exports, ["getNetworkQosOptionsV2","getNetworkQosOptionsV2Output"], () => require("./getNetworkQosOptionsV2"));

export { GetNetworkStaticRouteV2Args, GetNetworkStaticRouteV2Result, GetNetworkStaticRouteV2OutputArgs } from "./getNetworkStaticRouteV2";
export const getNetworkStaticRouteV2: typeof import("./getNetworkStaticRouteV2").getNetworkStaticRouteV2 = null as any;
export const getNetworkStaticRouteV2Output: typeof import("./getNetworkStaticRouteV2").getNetworkStaticRouteV2Output = null as any;
utilities.lazyLoad(exports, ["getNetworkStaticRouteV2","getNetworkStaticRouteV2Output"], () => require("./getNetworkStaticRouteV2"));

export { GetNetworkSubnetV2Args, GetNetworkSubnetV2Result, GetNetworkSubnetV2OutputArgs } from "./getNetworkSubnetV2";
export const getNetworkSubnetV2: typeof import("./getNetworkSubnetV2").getNetworkSubnetV2 = null as any;
export const getNetworkSubnetV2Output: typeof import("./getNetworkSubnetV2").getNetworkSubnetV2Output = null as any;
utilities.lazyLoad(exports, ["getNetworkSubnetV2","getNetworkSubnetV2Output"], () => require("./getNetworkSubnetV2"));

export { GetSssTenantV1Args, GetSssTenantV1Result, GetSssTenantV1OutputArgs } from "./getSssTenantV1";
export const getSssTenantV1: typeof import("./getSssTenantV1").getSssTenantV1 = null as any;
export const getSssTenantV1Output: typeof import("./getSssTenantV1").getSssTenantV1Output = null as any;
utilities.lazyLoad(exports, ["getSssTenantV1","getSssTenantV1Output"], () => require("./getSssTenantV1"));

export { GetStorageVirtualstorageV1Args, GetStorageVirtualstorageV1Result, GetStorageVirtualstorageV1OutputArgs } from "./getStorageVirtualstorageV1";
export const getStorageVirtualstorageV1: typeof import("./getStorageVirtualstorageV1").getStorageVirtualstorageV1 = null as any;
export const getStorageVirtualstorageV1Output: typeof import("./getStorageVirtualstorageV1").getStorageVirtualstorageV1Output = null as any;
utilities.lazyLoad(exports, ["getStorageVirtualstorageV1","getStorageVirtualstorageV1Output"], () => require("./getStorageVirtualstorageV1"));

export { GetStorageVolumeV1Args, GetStorageVolumeV1Result, GetStorageVolumeV1OutputArgs } from "./getStorageVolumeV1";
export const getStorageVolumeV1: typeof import("./getStorageVolumeV1").getStorageVolumeV1 = null as any;
export const getStorageVolumeV1Output: typeof import("./getStorageVolumeV1").getStorageVolumeV1Output = null as any;
utilities.lazyLoad(exports, ["getStorageVolumeV1","getStorageVolumeV1Output"], () => require("./getStorageVolumeV1"));

export { GetStorageVolumetypeV1Args, GetStorageVolumetypeV1Result, GetStorageVolumetypeV1OutputArgs } from "./getStorageVolumetypeV1";
export const getStorageVolumetypeV1: typeof import("./getStorageVolumetypeV1").getStorageVolumetypeV1 = null as any;
export const getStorageVolumetypeV1Output: typeof import("./getStorageVolumetypeV1").getStorageVolumetypeV1Output = null as any;
utilities.lazyLoad(exports, ["getStorageVolumetypeV1","getStorageVolumetypeV1Output"], () => require("./getStorageVolumetypeV1"));

export { GetVnaAppliancePlanV1Args, GetVnaAppliancePlanV1Result, GetVnaAppliancePlanV1OutputArgs } from "./getVnaAppliancePlanV1";
export const getVnaAppliancePlanV1: typeof import("./getVnaAppliancePlanV1").getVnaAppliancePlanV1 = null as any;
export const getVnaAppliancePlanV1Output: typeof import("./getVnaAppliancePlanV1").getVnaAppliancePlanV1Output = null as any;
utilities.lazyLoad(exports, ["getVnaAppliancePlanV1","getVnaAppliancePlanV1Output"], () => require("./getVnaAppliancePlanV1"));

export { GetVnaApplianceV1Args, GetVnaApplianceV1Result, GetVnaApplianceV1OutputArgs } from "./getVnaApplianceV1";
export const getVnaApplianceV1: typeof import("./getVnaApplianceV1").getVnaApplianceV1 = null as any;
export const getVnaApplianceV1Output: typeof import("./getVnaApplianceV1").getVnaApplianceV1Output = null as any;
utilities.lazyLoad(exports, ["getVnaApplianceV1","getVnaApplianceV1Output"], () => require("./getVnaApplianceV1"));

export { ImagestoragesImageV2Args, ImagestoragesImageV2State } from "./imagestoragesImageV2";
export type ImagestoragesImageV2 = import("./imagestoragesImageV2").ImagestoragesImageV2;
export const ImagestoragesImageV2: typeof import("./imagestoragesImageV2").ImagestoragesImageV2 = null as any;
utilities.lazyLoad(exports, ["ImagestoragesImageV2"], () => require("./imagestoragesImageV2"));

export { ImagestoragesMemberAccepterV2Args, ImagestoragesMemberAccepterV2State } from "./imagestoragesMemberAccepterV2";
export type ImagestoragesMemberAccepterV2 = import("./imagestoragesMemberAccepterV2").ImagestoragesMemberAccepterV2;
export const ImagestoragesMemberAccepterV2: typeof import("./imagestoragesMemberAccepterV2").ImagestoragesMemberAccepterV2 = null as any;
utilities.lazyLoad(exports, ["ImagestoragesMemberAccepterV2"], () => require("./imagestoragesMemberAccepterV2"));

export { ImagestoragesMemberV2Args, ImagestoragesMemberV2State } from "./imagestoragesMemberV2";
export type ImagestoragesMemberV2 = import("./imagestoragesMemberV2").ImagestoragesMemberV2;
export const ImagestoragesMemberV2: typeof import("./imagestoragesMemberV2").ImagestoragesMemberV2 = null as any;
utilities.lazyLoad(exports, ["ImagestoragesMemberV2"], () => require("./imagestoragesMemberV2"));

export { MlbCertificateV1Args, MlbCertificateV1State } from "./mlbCertificateV1";
export type MlbCertificateV1 = import("./mlbCertificateV1").MlbCertificateV1;
export const MlbCertificateV1: typeof import("./mlbCertificateV1").MlbCertificateV1 = null as any;
utilities.lazyLoad(exports, ["MlbCertificateV1"], () => require("./mlbCertificateV1"));

export { MlbHealthMonitorV1Args, MlbHealthMonitorV1State } from "./mlbHealthMonitorV1";
export type MlbHealthMonitorV1 = import("./mlbHealthMonitorV1").MlbHealthMonitorV1;
export const MlbHealthMonitorV1: typeof import("./mlbHealthMonitorV1").MlbHealthMonitorV1 = null as any;
utilities.lazyLoad(exports, ["MlbHealthMonitorV1"], () => require("./mlbHealthMonitorV1"));

export { MlbListenerV1Args, MlbListenerV1State } from "./mlbListenerV1";
export type MlbListenerV1 = import("./mlbListenerV1").MlbListenerV1;
export const MlbListenerV1: typeof import("./mlbListenerV1").MlbListenerV1 = null as any;
utilities.lazyLoad(exports, ["MlbListenerV1"], () => require("./mlbListenerV1"));

export { MlbLoadBalancerActionV1Args, MlbLoadBalancerActionV1State } from "./mlbLoadBalancerActionV1";
export type MlbLoadBalancerActionV1 = import("./mlbLoadBalancerActionV1").MlbLoadBalancerActionV1;
export const MlbLoadBalancerActionV1: typeof import("./mlbLoadBalancerActionV1").MlbLoadBalancerActionV1 = null as any;
utilities.lazyLoad(exports, ["MlbLoadBalancerActionV1"], () => require("./mlbLoadBalancerActionV1"));

export { MlbLoadBalancerV1Args, MlbLoadBalancerV1State } from "./mlbLoadBalancerV1";
export type MlbLoadBalancerV1 = import("./mlbLoadBalancerV1").MlbLoadBalancerV1;
export const MlbLoadBalancerV1: typeof import("./mlbLoadBalancerV1").MlbLoadBalancerV1 = null as any;
utilities.lazyLoad(exports, ["MlbLoadBalancerV1"], () => require("./mlbLoadBalancerV1"));

export { MlbPolicyV1Args, MlbPolicyV1State } from "./mlbPolicyV1";
export type MlbPolicyV1 = import("./mlbPolicyV1").MlbPolicyV1;
export const MlbPolicyV1: typeof import("./mlbPolicyV1").MlbPolicyV1 = null as any;
utilities.lazyLoad(exports, ["MlbPolicyV1"], () => require("./mlbPolicyV1"));

export { MlbRouteV1Args, MlbRouteV1State } from "./mlbRouteV1";
export type MlbRouteV1 = import("./mlbRouteV1").MlbRouteV1;
export const MlbRouteV1: typeof import("./mlbRouteV1").MlbRouteV1 = null as any;
utilities.lazyLoad(exports, ["MlbRouteV1"], () => require("./mlbRouteV1"));

export { MlbRuleV1Args, MlbRuleV1State } from "./mlbRuleV1";
export type MlbRuleV1 = import("./mlbRuleV1").MlbRuleV1;
export const MlbRuleV1: typeof import("./mlbRuleV1").MlbRuleV1 = null as any;
utilities.lazyLoad(exports, ["MlbRuleV1"], () => require("./mlbRuleV1"));

export { MlbTargetGroupV1Args, MlbTargetGroupV1State } from "./mlbTargetGroupV1";
export type MlbTargetGroupV1 = import("./mlbTargetGroupV1").MlbTargetGroupV1;
export const MlbTargetGroupV1: typeof import("./mlbTargetGroupV1").MlbTargetGroupV1 = null as any;
utilities.lazyLoad(exports, ["MlbTargetGroupV1"], () => require("./mlbTargetGroupV1"));

export { NetworkCommonFunctionGatewayV2Args, NetworkCommonFunctionGatewayV2State } from "./networkCommonFunctionGatewayV2";
export type NetworkCommonFunctionGatewayV2 = import("./networkCommonFunctionGatewayV2").NetworkCommonFunctionGatewayV2;
export const NetworkCommonFunctionGatewayV2: typeof import("./networkCommonFunctionGatewayV2").NetworkCommonFunctionGatewayV2 = null as any;
utilities.lazyLoad(exports, ["NetworkCommonFunctionGatewayV2"], () => require("./networkCommonFunctionGatewayV2"));

export { NetworkGatewayInterfaceV2Args, NetworkGatewayInterfaceV2State } from "./networkGatewayInterfaceV2";
export type NetworkGatewayInterfaceV2 = import("./networkGatewayInterfaceV2").NetworkGatewayInterfaceV2;
export const NetworkGatewayInterfaceV2: typeof import("./networkGatewayInterfaceV2").NetworkGatewayInterfaceV2 = null as any;
utilities.lazyLoad(exports, ["NetworkGatewayInterfaceV2"], () => require("./networkGatewayInterfaceV2"));

export { NetworkInternetGatewayV2Args, NetworkInternetGatewayV2State } from "./networkInternetGatewayV2";
export type NetworkInternetGatewayV2 = import("./networkInternetGatewayV2").NetworkInternetGatewayV2;
export const NetworkInternetGatewayV2: typeof import("./networkInternetGatewayV2").NetworkInternetGatewayV2 = null as any;
utilities.lazyLoad(exports, ["NetworkInternetGatewayV2"], () => require("./networkInternetGatewayV2"));

export { NetworkLoadBalancerV2Args, NetworkLoadBalancerV2State } from "./networkLoadBalancerV2";
export type NetworkLoadBalancerV2 = import("./networkLoadBalancerV2").NetworkLoadBalancerV2;
export const NetworkLoadBalancerV2: typeof import("./networkLoadBalancerV2").NetworkLoadBalancerV2 = null as any;
utilities.lazyLoad(exports, ["NetworkLoadBalancerV2"], () => require("./networkLoadBalancerV2"));

export { NetworkNetworkV2Args, NetworkNetworkV2State } from "./networkNetworkV2";
export type NetworkNetworkV2 = import("./networkNetworkV2").NetworkNetworkV2;
export const NetworkNetworkV2: typeof import("./networkNetworkV2").NetworkNetworkV2 = null as any;
utilities.lazyLoad(exports, ["NetworkNetworkV2"], () => require("./networkNetworkV2"));

export { NetworkPortV2Args, NetworkPortV2State } from "./networkPortV2";
export type NetworkPortV2 = import("./networkPortV2").NetworkPortV2;
export const NetworkPortV2: typeof import("./networkPortV2").NetworkPortV2 = null as any;
utilities.lazyLoad(exports, ["NetworkPortV2"], () => require("./networkPortV2"));

export { NetworkPublicIpV2Args, NetworkPublicIpV2State } from "./networkPublicIpV2";
export type NetworkPublicIpV2 = import("./networkPublicIpV2").NetworkPublicIpV2;
export const NetworkPublicIpV2: typeof import("./networkPublicIpV2").NetworkPublicIpV2 = null as any;
utilities.lazyLoad(exports, ["NetworkPublicIpV2"], () => require("./networkPublicIpV2"));

export { NetworkStaticRouteV2Args, NetworkStaticRouteV2State } from "./networkStaticRouteV2";
export type NetworkStaticRouteV2 = import("./networkStaticRouteV2").NetworkStaticRouteV2;
export const NetworkStaticRouteV2: typeof import("./networkStaticRouteV2").NetworkStaticRouteV2 = null as any;
utilities.lazyLoad(exports, ["NetworkStaticRouteV2"], () => require("./networkStaticRouteV2"));

export { NetworkSubnetV2Args, NetworkSubnetV2State } from "./networkSubnetV2";
export type NetworkSubnetV2 = import("./networkSubnetV2").NetworkSubnetV2;
export const NetworkSubnetV2: typeof import("./networkSubnetV2").NetworkSubnetV2 = null as any;
utilities.lazyLoad(exports, ["NetworkSubnetV2"], () => require("./networkSubnetV2"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ProviderConnectivityTenantConnectionRequestV2Args, ProviderConnectivityTenantConnectionRequestV2State } from "./providerConnectivityTenantConnectionRequestV2";
export type ProviderConnectivityTenantConnectionRequestV2 = import("./providerConnectivityTenantConnectionRequestV2").ProviderConnectivityTenantConnectionRequestV2;
export const ProviderConnectivityTenantConnectionRequestV2: typeof import("./providerConnectivityTenantConnectionRequestV2").ProviderConnectivityTenantConnectionRequestV2 = null as any;
utilities.lazyLoad(exports, ["ProviderConnectivityTenantConnectionRequestV2"], () => require("./providerConnectivityTenantConnectionRequestV2"));

export { ProviderConnectivityTenantConnectionV2Args, ProviderConnectivityTenantConnectionV2State } from "./providerConnectivityTenantConnectionV2";
export type ProviderConnectivityTenantConnectionV2 = import("./providerConnectivityTenantConnectionV2").ProviderConnectivityTenantConnectionV2;
export const ProviderConnectivityTenantConnectionV2: typeof import("./providerConnectivityTenantConnectionV2").ProviderConnectivityTenantConnectionV2 = null as any;
utilities.lazyLoad(exports, ["ProviderConnectivityTenantConnectionV2"], () => require("./providerConnectivityTenantConnectionV2"));

export { RcaUserV1Args, RcaUserV1State } from "./rcaUserV1";
export type RcaUserV1 = import("./rcaUserV1").RcaUserV1;
export const RcaUserV1: typeof import("./rcaUserV1").RcaUserV1 = null as any;
utilities.lazyLoad(exports, ["RcaUserV1"], () => require("./rcaUserV1"));

export { SecurityHostBasedV3Args, SecurityHostBasedV3State } from "./securityHostBasedV3";
export type SecurityHostBasedV3 = import("./securityHostBasedV3").SecurityHostBasedV3;
export const SecurityHostBasedV3: typeof import("./securityHostBasedV3").SecurityHostBasedV3 = null as any;
utilities.lazyLoad(exports, ["SecurityHostBasedV3"], () => require("./securityHostBasedV3"));

export { SecurityNetworkBasedDeviceHaV3Args, SecurityNetworkBasedDeviceHaV3State } from "./securityNetworkBasedDeviceHaV3";
export type SecurityNetworkBasedDeviceHaV3 = import("./securityNetworkBasedDeviceHaV3").SecurityNetworkBasedDeviceHaV3;
export const SecurityNetworkBasedDeviceHaV3: typeof import("./securityNetworkBasedDeviceHaV3").SecurityNetworkBasedDeviceHaV3 = null as any;
utilities.lazyLoad(exports, ["SecurityNetworkBasedDeviceHaV3"], () => require("./securityNetworkBasedDeviceHaV3"));

export { SecurityNetworkBasedDeviceSingleV3Args, SecurityNetworkBasedDeviceSingleV3State } from "./securityNetworkBasedDeviceSingleV3";
export type SecurityNetworkBasedDeviceSingleV3 = import("./securityNetworkBasedDeviceSingleV3").SecurityNetworkBasedDeviceSingleV3;
export const SecurityNetworkBasedDeviceSingleV3: typeof import("./securityNetworkBasedDeviceSingleV3").SecurityNetworkBasedDeviceSingleV3 = null as any;
utilities.lazyLoad(exports, ["SecurityNetworkBasedDeviceSingleV3"], () => require("./securityNetworkBasedDeviceSingleV3"));

export { SecurityNetworkBasedWafSingleV3Args, SecurityNetworkBasedWafSingleV3State } from "./securityNetworkBasedWafSingleV3";
export type SecurityNetworkBasedWafSingleV3 = import("./securityNetworkBasedWafSingleV3").SecurityNetworkBasedWafSingleV3;
export const SecurityNetworkBasedWafSingleV3: typeof import("./securityNetworkBasedWafSingleV3").SecurityNetworkBasedWafSingleV3 = null as any;
utilities.lazyLoad(exports, ["SecurityNetworkBasedWafSingleV3"], () => require("./securityNetworkBasedWafSingleV3"));

export { SssApprovalRequestV1Args, SssApprovalRequestV1State } from "./sssApprovalRequestV1";
export type SssApprovalRequestV1 = import("./sssApprovalRequestV1").SssApprovalRequestV1;
export const SssApprovalRequestV1: typeof import("./sssApprovalRequestV1").SssApprovalRequestV1 = null as any;
utilities.lazyLoad(exports, ["SssApprovalRequestV1"], () => require("./sssApprovalRequestV1"));

export { SssTenantV1Args, SssTenantV1State } from "./sssTenantV1";
export type SssTenantV1 = import("./sssTenantV1").SssTenantV1;
export const SssTenantV1: typeof import("./sssTenantV1").SssTenantV1 = null as any;
utilities.lazyLoad(exports, ["SssTenantV1"], () => require("./sssTenantV1"));

export { SssUserV1Args, SssUserV1State } from "./sssUserV1";
export type SssUserV1 = import("./sssUserV1").SssUserV1;
export const SssUserV1: typeof import("./sssUserV1").SssUserV1 = null as any;
utilities.lazyLoad(exports, ["SssUserV1"], () => require("./sssUserV1"));

export { StorageVirtualstorageV1Args, StorageVirtualstorageV1State } from "./storageVirtualstorageV1";
export type StorageVirtualstorageV1 = import("./storageVirtualstorageV1").StorageVirtualstorageV1;
export const StorageVirtualstorageV1: typeof import("./storageVirtualstorageV1").StorageVirtualstorageV1 = null as any;
utilities.lazyLoad(exports, ["StorageVirtualstorageV1"], () => require("./storageVirtualstorageV1"));

export { StorageVolumeV1Args, StorageVolumeV1State } from "./storageVolumeV1";
export type StorageVolumeV1 = import("./storageVolumeV1").StorageVolumeV1;
export const StorageVolumeV1: typeof import("./storageVolumeV1").StorageVolumeV1 = null as any;
utilities.lazyLoad(exports, ["StorageVolumeV1"], () => require("./storageVolumeV1"));

export { VnaApplianceV1Args, VnaApplianceV1State } from "./vnaApplianceV1";
export type VnaApplianceV1 = import("./vnaApplianceV1").VnaApplianceV1;
export const VnaApplianceV1: typeof import("./vnaApplianceV1").VnaApplianceV1 = null as any;
utilities.lazyLoad(exports, ["VnaApplianceV1"], () => require("./vnaApplianceV1"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "ecl:index/baremetalKeypairV2:BaremetalKeypairV2":
                return new BaremetalKeypairV2(name, <any>undefined, { urn })
            case "ecl:index/baremetalServerV2:BaremetalServerV2":
                return new BaremetalServerV2(name, <any>undefined, { urn })
            case "ecl:index/computeInstanceV2:ComputeInstanceV2":
                return new ComputeInstanceV2(name, <any>undefined, { urn })
            case "ecl:index/computeKeypairV2:ComputeKeypairV2":
                return new ComputeKeypairV2(name, <any>undefined, { urn })
            case "ecl:index/computeVolumeAttachV2:ComputeVolumeAttachV2":
                return new ComputeVolumeAttachV2(name, <any>undefined, { urn })
            case "ecl:index/computeVolumeV2:ComputeVolumeV2":
                return new ComputeVolumeV2(name, <any>undefined, { urn })
            case "ecl:index/dedicatedHypervisorLicenseV1:DedicatedHypervisorLicenseV1":
                return new DedicatedHypervisorLicenseV1(name, <any>undefined, { urn })
            case "ecl:index/dedicatedHypervisorServerV1:DedicatedHypervisorServerV1":
                return new DedicatedHypervisorServerV1(name, <any>undefined, { urn })
            case "ecl:index/dnsRecordsetV2:DnsRecordsetV2":
                return new DnsRecordsetV2(name, <any>undefined, { urn })
            case "ecl:index/dnsZoneV2:DnsZoneV2":
                return new DnsZoneV2(name, <any>undefined, { urn })
            case "ecl:index/imagestoragesImageV2:ImagestoragesImageV2":
                return new ImagestoragesImageV2(name, <any>undefined, { urn })
            case "ecl:index/imagestoragesMemberAccepterV2:ImagestoragesMemberAccepterV2":
                return new ImagestoragesMemberAccepterV2(name, <any>undefined, { urn })
            case "ecl:index/imagestoragesMemberV2:ImagestoragesMemberV2":
                return new ImagestoragesMemberV2(name, <any>undefined, { urn })
            case "ecl:index/mlbCertificateV1:MlbCertificateV1":
                return new MlbCertificateV1(name, <any>undefined, { urn })
            case "ecl:index/mlbHealthMonitorV1:MlbHealthMonitorV1":
                return new MlbHealthMonitorV1(name, <any>undefined, { urn })
            case "ecl:index/mlbListenerV1:MlbListenerV1":
                return new MlbListenerV1(name, <any>undefined, { urn })
            case "ecl:index/mlbLoadBalancerActionV1:MlbLoadBalancerActionV1":
                return new MlbLoadBalancerActionV1(name, <any>undefined, { urn })
            case "ecl:index/mlbLoadBalancerV1:MlbLoadBalancerV1":
                return new MlbLoadBalancerV1(name, <any>undefined, { urn })
            case "ecl:index/mlbPolicyV1:MlbPolicyV1":
                return new MlbPolicyV1(name, <any>undefined, { urn })
            case "ecl:index/mlbRouteV1:MlbRouteV1":
                return new MlbRouteV1(name, <any>undefined, { urn })
            case "ecl:index/mlbRuleV1:MlbRuleV1":
                return new MlbRuleV1(name, <any>undefined, { urn })
            case "ecl:index/mlbTargetGroupV1:MlbTargetGroupV1":
                return new MlbTargetGroupV1(name, <any>undefined, { urn })
            case "ecl:index/networkCommonFunctionGatewayV2:NetworkCommonFunctionGatewayV2":
                return new NetworkCommonFunctionGatewayV2(name, <any>undefined, { urn })
            case "ecl:index/networkGatewayInterfaceV2:NetworkGatewayInterfaceV2":
                return new NetworkGatewayInterfaceV2(name, <any>undefined, { urn })
            case "ecl:index/networkInternetGatewayV2:NetworkInternetGatewayV2":
                return new NetworkInternetGatewayV2(name, <any>undefined, { urn })
            case "ecl:index/networkLoadBalancerV2:NetworkLoadBalancerV2":
                return new NetworkLoadBalancerV2(name, <any>undefined, { urn })
            case "ecl:index/networkNetworkV2:NetworkNetworkV2":
                return new NetworkNetworkV2(name, <any>undefined, { urn })
            case "ecl:index/networkPortV2:NetworkPortV2":
                return new NetworkPortV2(name, <any>undefined, { urn })
            case "ecl:index/networkPublicIpV2:NetworkPublicIpV2":
                return new NetworkPublicIpV2(name, <any>undefined, { urn })
            case "ecl:index/networkStaticRouteV2:NetworkStaticRouteV2":
                return new NetworkStaticRouteV2(name, <any>undefined, { urn })
            case "ecl:index/networkSubnetV2:NetworkSubnetV2":
                return new NetworkSubnetV2(name, <any>undefined, { urn })
            case "ecl:index/providerConnectivityTenantConnectionRequestV2:ProviderConnectivityTenantConnectionRequestV2":
                return new ProviderConnectivityTenantConnectionRequestV2(name, <any>undefined, { urn })
            case "ecl:index/providerConnectivityTenantConnectionV2:ProviderConnectivityTenantConnectionV2":
                return new ProviderConnectivityTenantConnectionV2(name, <any>undefined, { urn })
            case "ecl:index/rcaUserV1:RcaUserV1":
                return new RcaUserV1(name, <any>undefined, { urn })
            case "ecl:index/securityHostBasedV3:SecurityHostBasedV3":
                return new SecurityHostBasedV3(name, <any>undefined, { urn })
            case "ecl:index/securityNetworkBasedDeviceHaV3:SecurityNetworkBasedDeviceHaV3":
                return new SecurityNetworkBasedDeviceHaV3(name, <any>undefined, { urn })
            case "ecl:index/securityNetworkBasedDeviceSingleV3:SecurityNetworkBasedDeviceSingleV3":
                return new SecurityNetworkBasedDeviceSingleV3(name, <any>undefined, { urn })
            case "ecl:index/securityNetworkBasedWafSingleV3:SecurityNetworkBasedWafSingleV3":
                return new SecurityNetworkBasedWafSingleV3(name, <any>undefined, { urn })
            case "ecl:index/sssApprovalRequestV1:SssApprovalRequestV1":
                return new SssApprovalRequestV1(name, <any>undefined, { urn })
            case "ecl:index/sssTenantV1:SssTenantV1":
                return new SssTenantV1(name, <any>undefined, { urn })
            case "ecl:index/sssUserV1:SssUserV1":
                return new SssUserV1(name, <any>undefined, { urn })
            case "ecl:index/storageVirtualstorageV1:StorageVirtualstorageV1":
                return new StorageVirtualstorageV1(name, <any>undefined, { urn })
            case "ecl:index/storageVolumeV1:StorageVolumeV1":
                return new StorageVolumeV1(name, <any>undefined, { urn })
            case "ecl:index/vnaApplianceV1:VnaApplianceV1":
                return new VnaApplianceV1(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("ecl", "index/baremetalKeypairV2", _module)
pulumi.runtime.registerResourceModule("ecl", "index/baremetalServerV2", _module)
pulumi.runtime.registerResourceModule("ecl", "index/computeInstanceV2", _module)
pulumi.runtime.registerResourceModule("ecl", "index/computeKeypairV2", _module)
pulumi.runtime.registerResourceModule("ecl", "index/computeVolumeAttachV2", _module)
pulumi.runtime.registerResourceModule("ecl", "index/computeVolumeV2", _module)
pulumi.runtime.registerResourceModule("ecl", "index/dedicatedHypervisorLicenseV1", _module)
pulumi.runtime.registerResourceModule("ecl", "index/dedicatedHypervisorServerV1", _module)
pulumi.runtime.registerResourceModule("ecl", "index/dnsRecordsetV2", _module)
pulumi.runtime.registerResourceModule("ecl", "index/dnsZoneV2", _module)
pulumi.runtime.registerResourceModule("ecl", "index/imagestoragesImageV2", _module)
pulumi.runtime.registerResourceModule("ecl", "index/imagestoragesMemberAccepterV2", _module)
pulumi.runtime.registerResourceModule("ecl", "index/imagestoragesMemberV2", _module)
pulumi.runtime.registerResourceModule("ecl", "index/mlbCertificateV1", _module)
pulumi.runtime.registerResourceModule("ecl", "index/mlbHealthMonitorV1", _module)
pulumi.runtime.registerResourceModule("ecl", "index/mlbListenerV1", _module)
pulumi.runtime.registerResourceModule("ecl", "index/mlbLoadBalancerActionV1", _module)
pulumi.runtime.registerResourceModule("ecl", "index/mlbLoadBalancerV1", _module)
pulumi.runtime.registerResourceModule("ecl", "index/mlbPolicyV1", _module)
pulumi.runtime.registerResourceModule("ecl", "index/mlbRouteV1", _module)
pulumi.runtime.registerResourceModule("ecl", "index/mlbRuleV1", _module)
pulumi.runtime.registerResourceModule("ecl", "index/mlbTargetGroupV1", _module)
pulumi.runtime.registerResourceModule("ecl", "index/networkCommonFunctionGatewayV2", _module)
pulumi.runtime.registerResourceModule("ecl", "index/networkGatewayInterfaceV2", _module)
pulumi.runtime.registerResourceModule("ecl", "index/networkInternetGatewayV2", _module)
pulumi.runtime.registerResourceModule("ecl", "index/networkLoadBalancerV2", _module)
pulumi.runtime.registerResourceModule("ecl", "index/networkNetworkV2", _module)
pulumi.runtime.registerResourceModule("ecl", "index/networkPortV2", _module)
pulumi.runtime.registerResourceModule("ecl", "index/networkPublicIpV2", _module)
pulumi.runtime.registerResourceModule("ecl", "index/networkStaticRouteV2", _module)
pulumi.runtime.registerResourceModule("ecl", "index/networkSubnetV2", _module)
pulumi.runtime.registerResourceModule("ecl", "index/providerConnectivityTenantConnectionRequestV2", _module)
pulumi.runtime.registerResourceModule("ecl", "index/providerConnectivityTenantConnectionV2", _module)
pulumi.runtime.registerResourceModule("ecl", "index/rcaUserV1", _module)
pulumi.runtime.registerResourceModule("ecl", "index/securityHostBasedV3", _module)
pulumi.runtime.registerResourceModule("ecl", "index/securityNetworkBasedDeviceHaV3", _module)
pulumi.runtime.registerResourceModule("ecl", "index/securityNetworkBasedDeviceSingleV3", _module)
pulumi.runtime.registerResourceModule("ecl", "index/securityNetworkBasedWafSingleV3", _module)
pulumi.runtime.registerResourceModule("ecl", "index/sssApprovalRequestV1", _module)
pulumi.runtime.registerResourceModule("ecl", "index/sssTenantV1", _module)
pulumi.runtime.registerResourceModule("ecl", "index/sssUserV1", _module)
pulumi.runtime.registerResourceModule("ecl", "index/storageVirtualstorageV1", _module)
pulumi.runtime.registerResourceModule("ecl", "index/storageVolumeV1", _module)
pulumi.runtime.registerResourceModule("ecl", "index/vnaApplianceV1", _module)
pulumi.runtime.registerResourcePackage("ecl", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:ecl") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
