// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface BaremetalServerV2Filesystem {
    fsType?: pulumi.Input<string>;
    label?: pulumi.Input<string>;
    mountPoint?: pulumi.Input<string>;
}

export interface BaremetalServerV2LvmVolumeGroup {
    logicalVolumes?: pulumi.Input<pulumi.Input<inputs.BaremetalServerV2LvmVolumeGroupLogicalVolume>[]>;
    physicalVolumePartitionLabels?: pulumi.Input<pulumi.Input<string>[]>;
    vgLabel?: pulumi.Input<string>;
}

export interface BaremetalServerV2LvmVolumeGroupLogicalVolume {
    lvLabel?: pulumi.Input<string>;
    size?: pulumi.Input<string>;
}

export interface BaremetalServerV2Network {
    fixedIp?: pulumi.Input<string>;
    plane?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface BaremetalServerV2NicPhysicalPort {
    attachedPorts: pulumi.Input<pulumi.Input<inputs.BaremetalServerV2NicPhysicalPortAttachedPort>[]>;
    hardwareId: pulumi.Input<string>;
    id: pulumi.Input<string>;
    macAddr: pulumi.Input<string>;
    networkPhysicalPortId: pulumi.Input<string>;
    plane: pulumi.Input<string>;
}

export interface BaremetalServerV2NicPhysicalPortAttachedPort {
    fixedIps: pulumi.Input<pulumi.Input<inputs.BaremetalServerV2NicPhysicalPortAttachedPortFixedIp>[]>;
    networkId: pulumi.Input<string>;
    portId: pulumi.Input<string>;
}

export interface BaremetalServerV2NicPhysicalPortAttachedPortFixedIp {
    ipAddress: pulumi.Input<string>;
    subnetId: pulumi.Input<string>;
}

export interface BaremetalServerV2Personality {
    contents?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
}

export interface BaremetalServerV2RaidArray {
    diskHardwareIds?: pulumi.Input<pulumi.Input<string>[]>;
    partitions?: pulumi.Input<pulumi.Input<inputs.BaremetalServerV2RaidArrayPartition>[]>;
    primaryStorage?: pulumi.Input<boolean>;
    raidCardHardwareId?: pulumi.Input<string>;
    raidLevel?: pulumi.Input<number>;
}

export interface BaremetalServerV2RaidArrayPartition {
    lvm?: pulumi.Input<boolean>;
    partitionLabel?: pulumi.Input<string>;
    size?: pulumi.Input<string>;
}

export interface BaremetalServerV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface ComputeInstanceV2BlockDevice {
    bootIndex?: pulumi.Input<number>;
    deleteOnTermination?: pulumi.Input<boolean>;
    destinationType?: pulumi.Input<string>;
    sourceType: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    volumeSize?: pulumi.Input<number>;
}

export interface ComputeInstanceV2Network {
    accessNetwork?: pulumi.Input<boolean>;
    fixedIpV4?: pulumi.Input<string>;
    mac?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface ComputeInstanceV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface ComputeInstanceV2Volume {
    device?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    volumeId: pulumi.Input<string>;
}

export interface ComputeVolumeAttachV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface ComputeVolumeV2Attachment {
    device: pulumi.Input<string>;
    id: pulumi.Input<string>;
    instanceId: pulumi.Input<string>;
}

export interface ComputeVolumeV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface DedicatedHypervisorServerV1Network {
    fixedIp?: pulumi.Input<string>;
    plane: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    segmentationId: pulumi.Input<number>;
    uuid?: pulumi.Input<string>;
}

export interface DedicatedHypervisorServerV1Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface DnsRecordsetV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface DnsZoneV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface GetMlbLoadBalancerV1Interface {
    networkId?: string;
    reservedFixedIps?: inputs.GetMlbLoadBalancerV1InterfaceReservedFixedIp[];
    virtualIpAddress?: string;
}

export interface GetMlbLoadBalancerV1InterfaceArgs {
    networkId?: pulumi.Input<string>;
    reservedFixedIps?: pulumi.Input<pulumi.Input<inputs.GetMlbLoadBalancerV1InterfaceReservedFixedIpArgs>[]>;
    virtualIpAddress?: pulumi.Input<string>;
}

export interface GetMlbLoadBalancerV1InterfaceReservedFixedIp {
    ipAddress?: string;
}

export interface GetMlbLoadBalancerV1InterfaceReservedFixedIpArgs {
    ipAddress?: pulumi.Input<string>;
}

export interface GetMlbLoadBalancerV1SyslogServer {
    ipAddress?: string;
    port?: number;
    protocol?: string;
}

export interface GetMlbLoadBalancerV1SyslogServerArgs {
    ipAddress?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
}

export interface GetMlbRuleV1Conditions {
    pathPatterns?: string[];
}

export interface GetMlbRuleV1ConditionsArgs {
    pathPatterns?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetMlbTargetGroupV1Member {
    ipAddress?: string;
    port?: number;
    weight?: number;
}

export interface GetMlbTargetGroupV1MemberArgs {
    ipAddress?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    weight?: pulumi.Input<number>;
}

export interface GetNetworkLoadBalancerPlanV2Model {
    edition?: string;
    size?: string;
}

export interface GetNetworkLoadBalancerPlanV2ModelArgs {
    edition?: pulumi.Input<string>;
    size?: pulumi.Input<string>;
}

export interface GetVnaAppliancePlanV1AvailabilityZone {
    availabilityZone?: string;
    available?: boolean;
    rank?: number;
}

export interface GetVnaAppliancePlanV1AvailabilityZoneArgs {
    availabilityZone?: pulumi.Input<string>;
    available?: pulumi.Input<boolean>;
    rank?: pulumi.Input<number>;
}

export interface GetVnaAppliancePlanV1License {
    licenseType?: string;
}

export interface GetVnaAppliancePlanV1LicenseArgs {
    licenseType?: pulumi.Input<string>;
}

export interface GetVnaApplianceV1Interface1Info {
    description?: string;
    name?: string;
    networkId?: string;
    tags?: {[key: string]: string};
    updatable?: boolean;
}

export interface GetVnaApplianceV1Interface1InfoArgs {
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    updatable?: pulumi.Input<boolean>;
}

export interface GetVnaApplianceV1Interface2Info {
    description?: string;
    name?: string;
    networkId?: string;
    tags?: {[key: string]: string};
    updatable?: boolean;
}

export interface GetVnaApplianceV1Interface2InfoArgs {
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    updatable?: pulumi.Input<boolean>;
}

export interface GetVnaApplianceV1Interface3Info {
    description?: string;
    name?: string;
    networkId?: string;
    tags?: {[key: string]: string};
    updatable?: boolean;
}

export interface GetVnaApplianceV1Interface3InfoArgs {
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    updatable?: pulumi.Input<boolean>;
}

export interface GetVnaApplianceV1Interface4Info {
    description?: string;
    name?: string;
    networkId?: string;
    tags?: {[key: string]: string};
    updatable?: boolean;
}

export interface GetVnaApplianceV1Interface4InfoArgs {
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    updatable?: pulumi.Input<boolean>;
}

export interface GetVnaApplianceV1Interface5Info {
    description?: string;
    name?: string;
    networkId?: string;
    tags?: {[key: string]: string};
    updatable?: boolean;
}

export interface GetVnaApplianceV1Interface5InfoArgs {
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    updatable?: pulumi.Input<boolean>;
}

export interface GetVnaApplianceV1Interface6Info {
    description?: string;
    name?: string;
    networkId?: string;
    tags?: {[key: string]: string};
    updatable?: boolean;
}

export interface GetVnaApplianceV1Interface6InfoArgs {
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    updatable?: pulumi.Input<boolean>;
}

export interface GetVnaApplianceV1Interface7Info {
    description?: string;
    name?: string;
    networkId?: string;
    tags?: {[key: string]: string};
    updatable?: boolean;
}

export interface GetVnaApplianceV1Interface7InfoArgs {
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    updatable?: pulumi.Input<boolean>;
}

export interface GetVnaApplianceV1Interface8Info {
    description?: string;
    name?: string;
    networkId?: string;
    tags?: {[key: string]: string};
    updatable?: boolean;
}

export interface GetVnaApplianceV1Interface8InfoArgs {
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    updatable?: pulumi.Input<boolean>;
}

export interface ImagestoragesImageV2Timeouts {
    create?: pulumi.Input<string>;
}

export interface ImagestoragesMemberAccepterV2Timeouts {
    create?: pulumi.Input<string>;
}

export interface ImagestoragesMemberV2Timeouts {
    create?: pulumi.Input<string>;
}

export interface MlbLoadBalancerActionV1Timeouts {
    create?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface MlbLoadBalancerV1Interface {
    networkId: pulumi.Input<string>;
    reservedFixedIps: pulumi.Input<pulumi.Input<inputs.MlbLoadBalancerV1InterfaceReservedFixedIp>[]>;
    virtualIpAddress: pulumi.Input<string>;
}

export interface MlbLoadBalancerV1InterfaceReservedFixedIp {
    ipAddress: pulumi.Input<string>;
}

export interface MlbLoadBalancerV1SyslogServer {
    ipAddress: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
}

export interface MlbLoadBalancerV1Timeouts {
    delete?: pulumi.Input<string>;
}

export interface MlbRuleV1Conditions {
    pathPatterns?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface MlbTargetGroupV1Member {
    ipAddress: pulumi.Input<string>;
    port: pulumi.Input<number>;
    weight?: pulumi.Input<number>;
}

export interface NetworkCommonFunctionGatewayV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface NetworkGatewayInterfaceV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface NetworkInternetGatewayV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface NetworkLoadBalancerV2Interface {
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    ipAddress?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    slotNumber: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    virtualIpAddress?: pulumi.Input<string>;
    virtualIpProperties?: pulumi.Input<inputs.NetworkLoadBalancerV2InterfaceVirtualIpProperties>;
}

export interface NetworkLoadBalancerV2InterfaceVirtualIpProperties {
    protocol: pulumi.Input<string>;
    vrid: pulumi.Input<number>;
}

export interface NetworkLoadBalancerV2SyslogServer {
    aclLogging?: pulumi.Input<string>;
    appflowLogging?: pulumi.Input<string>;
    dateFormat?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    ipAddress: pulumi.Input<string>;
    logFacility?: pulumi.Input<string>;
    logLevel?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    portNumber?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tcpLogging?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
    timeZone?: pulumi.Input<string>;
    transportType?: pulumi.Input<string>;
    userConfigurableLogMessages?: pulumi.Input<string>;
}

export interface NetworkLoadBalancerV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface NetworkNetworkV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface NetworkPortV2AllowedAddressPair {
    ipAddress: pulumi.Input<string>;
    macAddress?: pulumi.Input<string>;
}

export interface NetworkPortV2FixedIp {
    ipAddress?: pulumi.Input<string>;
    subnetId: pulumi.Input<string>;
}

export interface NetworkPortV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface NetworkPublicIpV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface NetworkStaticRouteV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface NetworkSubnetV2AllocationPool {
    end: pulumi.Input<string>;
    start: pulumi.Input<string>;
}

export interface NetworkSubnetV2HostRoute {
    destinationCidr: pulumi.Input<string>;
    nextHop: pulumi.Input<string>;
}

export interface NetworkSubnetV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface ProviderConnectivityTenantConnectionV2AttachmentOptsBaremetal {
    allowedAddressPairs?: pulumi.Input<pulumi.Input<inputs.ProviderConnectivityTenantConnectionV2AttachmentOptsBaremetalAllowedAddressPair>[]>;
    fixedIps?: pulumi.Input<pulumi.Input<inputs.ProviderConnectivityTenantConnectionV2AttachmentOptsBaremetalFixedIp>[]>;
    segmentationId?: pulumi.Input<number>;
    segmentationType?: pulumi.Input<string>;
}

export interface ProviderConnectivityTenantConnectionV2AttachmentOptsBaremetalAllowedAddressPair {
    ipAddress?: pulumi.Input<string>;
    macAddress?: pulumi.Input<string>;
}

export interface ProviderConnectivityTenantConnectionV2AttachmentOptsBaremetalFixedIp {
    ipAddress?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
}

export interface ProviderConnectivityTenantConnectionV2AttachmentOptsCompute {
    allowedAddressPairs?: pulumi.Input<pulumi.Input<inputs.ProviderConnectivityTenantConnectionV2AttachmentOptsComputeAllowedAddressPair>[]>;
    fixedIps?: pulumi.Input<pulumi.Input<inputs.ProviderConnectivityTenantConnectionV2AttachmentOptsComputeFixedIp>[]>;
}

export interface ProviderConnectivityTenantConnectionV2AttachmentOptsComputeAllowedAddressPair {
    ipAddress?: pulumi.Input<string>;
    macAddress?: pulumi.Input<string>;
}

export interface ProviderConnectivityTenantConnectionV2AttachmentOptsComputeFixedIp {
    ipAddress?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
}

export interface ProviderConnectivityTenantConnectionV2AttachmentOptsVna {
    fixedIps?: pulumi.Input<pulumi.Input<inputs.ProviderConnectivityTenantConnectionV2AttachmentOptsVnaFixedIp>[]>;
}

export interface ProviderConnectivityTenantConnectionV2AttachmentOptsVnaFixedIp {
    ipAddress?: pulumi.Input<string>;
}

export interface RcaUserV1VpnEndpoint {
    endpoint: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface SecurityHostBasedV3Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface SecurityNetworkBasedDeviceHaV3HaLink1 {
    host1IpAddress: pulumi.Input<string>;
    host2IpAddress: pulumi.Input<string>;
    networkId: pulumi.Input<string>;
    subnetId: pulumi.Input<string>;
}

export interface SecurityNetworkBasedDeviceHaV3HaLink2 {
    host1IpAddress: pulumi.Input<string>;
    host2IpAddress: pulumi.Input<string>;
    networkId: pulumi.Input<string>;
    subnetId: pulumi.Input<string>;
}

export interface SecurityNetworkBasedDeviceHaV3Port {
    comment?: pulumi.Input<string>;
    enable: pulumi.Input<string>;
    enablePing?: pulumi.Input<string>;
    host1IpAddress?: pulumi.Input<string>;
    host1IpAddressPrefix?: pulumi.Input<number>;
    host2IpAddress?: pulumi.Input<string>;
    host2IpAddressPrefix?: pulumi.Input<number>;
    mtu?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    preempt?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    vrrpGrpId?: pulumi.Input<string>;
    vrrpId?: pulumi.Input<string>;
    vrrpIpAddress?: pulumi.Input<string>;
}

export interface SecurityNetworkBasedDeviceHaV3Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface SecurityNetworkBasedDeviceSingleV3Port {
    comment?: pulumi.Input<string>;
    enable: pulumi.Input<string>;
    ipAddress?: pulumi.Input<string>;
    ipAddressPrefix?: pulumi.Input<number>;
    mtu?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
}

export interface SecurityNetworkBasedDeviceSingleV3Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface SecurityNetworkBasedWafSingleV3Port {
    comment?: pulumi.Input<string>;
    enable: pulumi.Input<string>;
    ipAddress?: pulumi.Input<string>;
    ipAddressPrefix?: pulumi.Input<number>;
    mtu?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
}

export interface SecurityNetworkBasedWafSingleV3Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface SssApprovalRequestV1Action {
    apiPath: pulumi.Input<string>;
    body: pulumi.Input<string>;
    method: pulumi.Input<string>;
    region: pulumi.Input<string>;
    service: pulumi.Input<string>;
}

export interface SssApprovalRequestV1Description {
    lang: pulumi.Input<string>;
    text: pulumi.Input<string>;
}

export interface StorageVirtualstorageV1HostRoute {
    destination: pulumi.Input<string>;
    nexthop: pulumi.Input<string>;
}

export interface StorageVirtualstorageV1Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface StorageVolumeV1Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface VnaApplianceV1Interface1AllowedAddressPair {
    ipAddress: pulumi.Input<string>;
    macAddress?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    vrid: pulumi.Input<string>;
}

export interface VnaApplianceV1Interface1FixedIp {
    ipAddress: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
}

export interface VnaApplianceV1Interface1Info {
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    updatable?: pulumi.Input<boolean>;
}

export interface VnaApplianceV1Interface2AllowedAddressPair {
    ipAddress: pulumi.Input<string>;
    macAddress?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    vrid: pulumi.Input<string>;
}

export interface VnaApplianceV1Interface2FixedIp {
    ipAddress: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
}

export interface VnaApplianceV1Interface2Info {
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    updatable?: pulumi.Input<boolean>;
}

export interface VnaApplianceV1Interface3AllowedAddressPair {
    ipAddress: pulumi.Input<string>;
    macAddress?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    vrid: pulumi.Input<string>;
}

export interface VnaApplianceV1Interface3FixedIp {
    ipAddress: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
}

export interface VnaApplianceV1Interface3Info {
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    updatable?: pulumi.Input<boolean>;
}

export interface VnaApplianceV1Interface4AllowedAddressPair {
    ipAddress: pulumi.Input<string>;
    macAddress?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    vrid: pulumi.Input<string>;
}

export interface VnaApplianceV1Interface4FixedIp {
    ipAddress: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
}

export interface VnaApplianceV1Interface4Info {
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    updatable?: pulumi.Input<boolean>;
}

export interface VnaApplianceV1Interface5AllowedAddressPair {
    ipAddress: pulumi.Input<string>;
    macAddress?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    vrid: pulumi.Input<string>;
}

export interface VnaApplianceV1Interface5FixedIp {
    ipAddress: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
}

export interface VnaApplianceV1Interface5Info {
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    updatable?: pulumi.Input<boolean>;
}

export interface VnaApplianceV1Interface6AllowedAddressPair {
    ipAddress: pulumi.Input<string>;
    macAddress?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    vrid: pulumi.Input<string>;
}

export interface VnaApplianceV1Interface6FixedIp {
    ipAddress: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
}

export interface VnaApplianceV1Interface6Info {
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    updatable?: pulumi.Input<boolean>;
}

export interface VnaApplianceV1Interface7AllowedAddressPair {
    ipAddress: pulumi.Input<string>;
    macAddress?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    vrid: pulumi.Input<string>;
}

export interface VnaApplianceV1Interface7FixedIp {
    ipAddress: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
}

export interface VnaApplianceV1Interface7Info {
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    updatable?: pulumi.Input<boolean>;
}

export interface VnaApplianceV1Interface8AllowedAddressPair {
    ipAddress: pulumi.Input<string>;
    macAddress?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    vrid: pulumi.Input<string>;
}

export interface VnaApplianceV1Interface8FixedIp {
    ipAddress: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
}

export interface VnaApplianceV1Interface8Info {
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    updatable?: pulumi.Input<boolean>;
}

export interface VnaApplianceV1Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}
