// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface BaremetalServerV2Filesystem {
    fsType?: string;
    label?: string;
    mountPoint?: string;
}

export interface BaremetalServerV2LvmVolumeGroup {
    logicalVolumes?: outputs.BaremetalServerV2LvmVolumeGroupLogicalVolume[];
    physicalVolumePartitionLabels?: string[];
    vgLabel?: string;
}

export interface BaremetalServerV2LvmVolumeGroupLogicalVolume {
    lvLabel?: string;
    size?: string;
}

export interface BaremetalServerV2Network {
    fixedIp?: string;
    plane?: string;
    port?: string;
    uuid?: string;
}

export interface BaremetalServerV2NicPhysicalPort {
    attachedPorts: outputs.BaremetalServerV2NicPhysicalPortAttachedPort[];
    hardwareId: string;
    id: string;
    macAddr: string;
    networkPhysicalPortId: string;
    plane: string;
}

export interface BaremetalServerV2NicPhysicalPortAttachedPort {
    fixedIps: outputs.BaremetalServerV2NicPhysicalPortAttachedPortFixedIp[];
    networkId: string;
    portId: string;
}

export interface BaremetalServerV2NicPhysicalPortAttachedPortFixedIp {
    ipAddress: string;
    subnetId: string;
}

export interface BaremetalServerV2Personality {
    contents?: string;
    path?: string;
}

export interface BaremetalServerV2RaidArray {
    diskHardwareIds?: string[];
    partitions?: outputs.BaremetalServerV2RaidArrayPartition[];
    primaryStorage?: boolean;
    raidCardHardwareId?: string;
    raidLevel?: number;
}

export interface BaremetalServerV2RaidArrayPartition {
    lvm?: boolean;
    partitionLabel?: string;
    size?: string;
}

export interface BaremetalServerV2Timeouts {
    create?: string;
    delete?: string;
}

export interface ComputeInstanceV2BlockDevice {
    bootIndex?: number;
    deleteOnTermination?: boolean;
    destinationType?: string;
    sourceType: string;
    uuid?: string;
    volumeSize?: number;
}

export interface ComputeInstanceV2Network {
    accessNetwork?: boolean;
    fixedIpV4: string;
    mac: string;
    name: string;
    port: string;
    uuid: string;
}

export interface ComputeInstanceV2Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ComputeInstanceV2Volume {
    device: string;
    id: string;
    volumeId: string;
}

export interface ComputeVolumeAttachV2Timeouts {
    create?: string;
    delete?: string;
}

export interface ComputeVolumeV2Attachment {
    device: string;
    id: string;
    instanceId: string;
}

export interface ComputeVolumeV2Timeouts {
    create?: string;
    delete?: string;
}

export interface DedicatedHypervisorServerV1Network {
    fixedIp?: string;
    plane: string;
    port?: string;
    segmentationId: number;
    uuid?: string;
}

export interface DedicatedHypervisorServerV1Timeouts {
    create?: string;
    delete?: string;
}

export interface DnsRecordsetV2Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DnsZoneV2Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface GetMlbLoadBalancerV1Interface {
    networkId: string;
    reservedFixedIps?: outputs.GetMlbLoadBalancerV1InterfaceReservedFixedIp[];
    virtualIpAddress: string;
}

export interface GetMlbLoadBalancerV1InterfaceReservedFixedIp {
    ipAddress: string;
}

export interface GetMlbLoadBalancerV1SyslogServer {
    ipAddress: string;
    port: number;
    protocol: string;
}

export interface GetMlbRuleV1Conditions {
    pathPatterns: string[];
}

export interface GetMlbTargetGroupV1Member {
    ipAddress: string;
    port: number;
    weight: number;
}

export interface GetNetworkLoadBalancerPlanV2Model {
    edition: string;
    size: string;
}

export interface GetNetworkPortV2AllowedAddressPair {
    ipAddress: string;
    macAddress: string;
}

export interface GetNetworkPortV2FixedIp {
    ipAddress: string;
    subnetId: string;
}

export interface GetNetworkSubnetV2AllocationPool {
    end: string;
    start: string;
}

export interface GetNetworkSubnetV2HostRoute {
    destinationCidr: string;
    nextHop: string;
}

export interface GetStorageVirtualstorageV1HostRoute {
    destination: string;
    nexthop: string;
}

export interface GetVnaAppliancePlanV1AvailabilityZone {
    availabilityZone: string;
    available: boolean;
    rank: number;
}

export interface GetVnaAppliancePlanV1License {
    licenseType: string;
}

export interface GetVnaApplianceV1Interface1AllowedAddressPair {
    ipAddress: string;
    macAddress: string;
    type: string;
    vrid: string;
}

export interface GetVnaApplianceV1Interface1FixedIp {
    ipAddress: string;
    subnetId: string;
}

export interface GetVnaApplianceV1Interface1Info {
    description: string;
    name: string;
    networkId: string;
    tags: {[key: string]: string};
    updatable: boolean;
}

export interface GetVnaApplianceV1Interface2AllowedAddressPair {
    ipAddress: string;
    macAddress: string;
    type: string;
    vrid: string;
}

export interface GetVnaApplianceV1Interface2FixedIp {
    ipAddress: string;
    subnetId: string;
}

export interface GetVnaApplianceV1Interface2Info {
    description: string;
    name: string;
    networkId: string;
    tags: {[key: string]: string};
    updatable: boolean;
}

export interface GetVnaApplianceV1Interface3AllowedAddressPair {
    ipAddress: string;
    macAddress: string;
    type: string;
    vrid: string;
}

export interface GetVnaApplianceV1Interface3FixedIp {
    ipAddress: string;
    subnetId: string;
}

export interface GetVnaApplianceV1Interface3Info {
    description: string;
    name: string;
    networkId: string;
    tags: {[key: string]: string};
    updatable: boolean;
}

export interface GetVnaApplianceV1Interface4AllowedAddressPair {
    ipAddress: string;
    macAddress: string;
    type: string;
    vrid: string;
}

export interface GetVnaApplianceV1Interface4FixedIp {
    ipAddress: string;
    subnetId: string;
}

export interface GetVnaApplianceV1Interface4Info {
    description: string;
    name: string;
    networkId: string;
    tags: {[key: string]: string};
    updatable: boolean;
}

export interface GetVnaApplianceV1Interface5AllowedAddressPair {
    ipAddress: string;
    macAddress: string;
    type: string;
    vrid: string;
}

export interface GetVnaApplianceV1Interface5FixedIp {
    ipAddress: string;
    subnetId: string;
}

export interface GetVnaApplianceV1Interface5Info {
    description: string;
    name: string;
    networkId: string;
    tags: {[key: string]: string};
    updatable: boolean;
}

export interface GetVnaApplianceV1Interface6AllowedAddressPair {
    ipAddress: string;
    macAddress: string;
    type: string;
    vrid: string;
}

export interface GetVnaApplianceV1Interface6FixedIp {
    ipAddress: string;
    subnetId: string;
}

export interface GetVnaApplianceV1Interface6Info {
    description: string;
    name: string;
    networkId: string;
    tags: {[key: string]: string};
    updatable: boolean;
}

export interface GetVnaApplianceV1Interface7AllowedAddressPair {
    ipAddress: string;
    macAddress: string;
    type: string;
    vrid: string;
}

export interface GetVnaApplianceV1Interface7FixedIp {
    ipAddress: string;
    subnetId: string;
}

export interface GetVnaApplianceV1Interface7Info {
    description: string;
    name: string;
    networkId: string;
    tags: {[key: string]: string};
    updatable: boolean;
}

export interface GetVnaApplianceV1Interface8AllowedAddressPair {
    ipAddress: string;
    macAddress: string;
    type: string;
    vrid: string;
}

export interface GetVnaApplianceV1Interface8FixedIp {
    ipAddress: string;
    subnetId: string;
}

export interface GetVnaApplianceV1Interface8Info {
    description: string;
    name: string;
    networkId: string;
    tags: {[key: string]: string};
    updatable: boolean;
}

export interface ImagestoragesImageV2Timeouts {
    create?: string;
}

export interface ImagestoragesMemberAccepterV2Timeouts {
    create?: string;
}

export interface ImagestoragesMemberV2Timeouts {
    create?: string;
}

export interface MlbLoadBalancerActionV1Timeouts {
    create?: string;
    update?: string;
}

export interface MlbLoadBalancerV1Interface {
    networkId: string;
    reservedFixedIps: outputs.MlbLoadBalancerV1InterfaceReservedFixedIp[];
    virtualIpAddress: string;
}

export interface MlbLoadBalancerV1InterfaceReservedFixedIp {
    ipAddress: string;
}

export interface MlbLoadBalancerV1SyslogServer {
    ipAddress: string;
    port?: number;
    protocol?: string;
}

export interface MlbLoadBalancerV1Timeouts {
    delete?: string;
}

export interface MlbRuleV1Conditions {
    pathPatterns?: string[];
}

export interface MlbTargetGroupV1Member {
    ipAddress: string;
    port: number;
    weight?: number;
}

export interface NetworkCommonFunctionGatewayV2Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface NetworkGatewayInterfaceV2Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface NetworkInternetGatewayV2Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface NetworkLoadBalancerV2Interface {
    description?: string;
    id: string;
    ipAddress?: string;
    name: string;
    networkId?: string;
    slotNumber: number;
    status: string;
    virtualIpAddress?: string;
    virtualIpProperties?: outputs.NetworkLoadBalancerV2InterfaceVirtualIpProperties;
}

export interface NetworkLoadBalancerV2InterfaceVirtualIpProperties {
    protocol: string;
    vrid: number;
}

export interface NetworkLoadBalancerV2SyslogServer {
    aclLogging: string;
    appflowLogging: string;
    dateFormat: string;
    description?: string;
    id: string;
    ipAddress: string;
    logFacility: string;
    logLevel: string;
    name: string;
    portNumber: number;
    priority?: number;
    status: string;
    tcpLogging: string;
    tenantId: string;
    timeZone: string;
    transportType: string;
    userConfigurableLogMessages: string;
}

export interface NetworkLoadBalancerV2Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface NetworkNetworkV2Timeouts {
    create?: string;
    delete?: string;
}

export interface NetworkPortV2AllowedAddressPair {
    ipAddress: string;
    macAddress?: string;
}

export interface NetworkPortV2FixedIp {
    ipAddress?: string;
    subnetId: string;
}

export interface NetworkPortV2Timeouts {
    create?: string;
    delete?: string;
}

export interface NetworkPublicIpV2Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface NetworkStaticRouteV2Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface NetworkSubnetV2AllocationPool {
    end: string;
    start: string;
}

export interface NetworkSubnetV2HostRoute {
    destinationCidr: string;
    nextHop: string;
}

export interface NetworkSubnetV2Timeouts {
    create?: string;
    delete?: string;
}

export interface ProviderConnectivityTenantConnectionV2AttachmentOptsBaremetal {
    allowedAddressPairs?: outputs.ProviderConnectivityTenantConnectionV2AttachmentOptsBaremetalAllowedAddressPair[];
    fixedIps?: outputs.ProviderConnectivityTenantConnectionV2AttachmentOptsBaremetalFixedIp[];
    segmentationId?: number;
    segmentationType?: string;
}

export interface ProviderConnectivityTenantConnectionV2AttachmentOptsBaremetalAllowedAddressPair {
    ipAddress?: string;
    macAddress?: string;
}

export interface ProviderConnectivityTenantConnectionV2AttachmentOptsBaremetalFixedIp {
    ipAddress?: string;
    subnetId?: string;
}

export interface ProviderConnectivityTenantConnectionV2AttachmentOptsCompute {
    allowedAddressPairs?: outputs.ProviderConnectivityTenantConnectionV2AttachmentOptsComputeAllowedAddressPair[];
    fixedIps?: outputs.ProviderConnectivityTenantConnectionV2AttachmentOptsComputeFixedIp[];
}

export interface ProviderConnectivityTenantConnectionV2AttachmentOptsComputeAllowedAddressPair {
    ipAddress?: string;
    macAddress?: string;
}

export interface ProviderConnectivityTenantConnectionV2AttachmentOptsComputeFixedIp {
    ipAddress?: string;
    subnetId?: string;
}

export interface ProviderConnectivityTenantConnectionV2AttachmentOptsVna {
    fixedIps?: outputs.ProviderConnectivityTenantConnectionV2AttachmentOptsVnaFixedIp[];
}

export interface ProviderConnectivityTenantConnectionV2AttachmentOptsVnaFixedIp {
    ipAddress?: string;
}

export interface RcaUserV1VpnEndpoint {
    endpoint: string;
    type: string;
}

export interface SecurityHostBasedV3Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface SecurityNetworkBasedDeviceHaV3HaLink1 {
    host1IpAddress: string;
    host2IpAddress: string;
    networkId: string;
    subnetId: string;
}

export interface SecurityNetworkBasedDeviceHaV3HaLink2 {
    host1IpAddress: string;
    host2IpAddress: string;
    networkId: string;
    subnetId: string;
}

export interface SecurityNetworkBasedDeviceHaV3Port {
    comment?: string;
    enable: string;
    enablePing?: string;
    host1IpAddress: string;
    host1IpAddressPrefix?: number;
    host2IpAddress: string;
    host2IpAddressPrefix?: number;
    mtu?: string;
    networkId: string;
    preempt?: string;
    subnetId: string;
    vrrpGrpId?: string;
    vrrpId?: string;
    vrrpIpAddress: string;
}

export interface SecurityNetworkBasedDeviceHaV3Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface SecurityNetworkBasedDeviceSingleV3Port {
    comment?: string;
    enable: string;
    ipAddress: string;
    ipAddressPrefix?: number;
    mtu?: string;
    networkId: string;
    subnetId: string;
}

export interface SecurityNetworkBasedDeviceSingleV3Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface SecurityNetworkBasedWafSingleV3Port {
    comment?: string;
    enable: string;
    ipAddress: string;
    ipAddressPrefix?: number;
    mtu?: string;
    networkId: string;
    subnetId: string;
}

export interface SecurityNetworkBasedWafSingleV3Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface SssApprovalRequestV1Action {
    apiPath: string;
    body: string;
    method: string;
    region: string;
    service: string;
}

export interface SssApprovalRequestV1Description {
    lang: string;
    text: string;
}

export interface StorageVirtualstorageV1HostRoute {
    destination: string;
    nexthop: string;
}

export interface StorageVirtualstorageV1Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface StorageVolumeV1Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface VnaApplianceV1Interface1AllowedAddressPair {
    ipAddress: string;
    macAddress: string;
    type: string;
    vrid: string;
}

export interface VnaApplianceV1Interface1FixedIp {
    ipAddress: string;
    subnetId: string;
}

export interface VnaApplianceV1Interface1Info {
    description?: string;
    name?: string;
    networkId?: string;
    tags: {[key: string]: string};
    updatable: boolean;
}

export interface VnaApplianceV1Interface2AllowedAddressPair {
    ipAddress: string;
    macAddress: string;
    type: string;
    vrid: string;
}

export interface VnaApplianceV1Interface2FixedIp {
    ipAddress: string;
    subnetId: string;
}

export interface VnaApplianceV1Interface2Info {
    description?: string;
    name?: string;
    networkId?: string;
    tags: {[key: string]: string};
    updatable: boolean;
}

export interface VnaApplianceV1Interface3AllowedAddressPair {
    ipAddress: string;
    macAddress: string;
    type: string;
    vrid: string;
}

export interface VnaApplianceV1Interface3FixedIp {
    ipAddress: string;
    subnetId: string;
}

export interface VnaApplianceV1Interface3Info {
    description?: string;
    name?: string;
    networkId?: string;
    tags: {[key: string]: string};
    updatable: boolean;
}

export interface VnaApplianceV1Interface4AllowedAddressPair {
    ipAddress: string;
    macAddress: string;
    type: string;
    vrid: string;
}

export interface VnaApplianceV1Interface4FixedIp {
    ipAddress: string;
    subnetId: string;
}

export interface VnaApplianceV1Interface4Info {
    description?: string;
    name?: string;
    networkId?: string;
    tags: {[key: string]: string};
    updatable: boolean;
}

export interface VnaApplianceV1Interface5AllowedAddressPair {
    ipAddress: string;
    macAddress: string;
    type: string;
    vrid: string;
}

export interface VnaApplianceV1Interface5FixedIp {
    ipAddress: string;
    subnetId: string;
}

export interface VnaApplianceV1Interface5Info {
    description?: string;
    name?: string;
    networkId?: string;
    tags: {[key: string]: string};
    updatable: boolean;
}

export interface VnaApplianceV1Interface6AllowedAddressPair {
    ipAddress: string;
    macAddress: string;
    type: string;
    vrid: string;
}

export interface VnaApplianceV1Interface6FixedIp {
    ipAddress: string;
    subnetId: string;
}

export interface VnaApplianceV1Interface6Info {
    description?: string;
    name?: string;
    networkId?: string;
    tags: {[key: string]: string};
    updatable: boolean;
}

export interface VnaApplianceV1Interface7AllowedAddressPair {
    ipAddress: string;
    macAddress: string;
    type: string;
    vrid: string;
}

export interface VnaApplianceV1Interface7FixedIp {
    ipAddress: string;
    subnetId: string;
}

export interface VnaApplianceV1Interface7Info {
    description?: string;
    name?: string;
    networkId?: string;
    tags: {[key: string]: string};
    updatable: boolean;
}

export interface VnaApplianceV1Interface8AllowedAddressPair {
    ipAddress: string;
    macAddress: string;
    type: string;
    vrid: string;
}

export interface VnaApplianceV1Interface8FixedIp {
    ipAddress: string;
    subnetId: string;
}

export interface VnaApplianceV1Interface8Info {
    description?: string;
    name?: string;
    networkId?: string;
    tags: {[key: string]: string};
    updatable: boolean;
}

export interface VnaApplianceV1Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

