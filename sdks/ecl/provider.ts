// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The provider type for the ecl package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
export class Provider extends pulumi.ProviderResource {
    /** @internal */
    public static readonly __pulumiType = 'ecl';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === "pulumi:providers:" + Provider.__pulumiType;
    }

    /**
     * The Identity authentication URL.
     */
    public readonly authUrl!: pulumi.Output<string | undefined>;
    /**
     * A Custom CA certificate.
     */
    public readonly cacertFile!: pulumi.Output<string | undefined>;
    /**
     * A client certificate to authenticate with.
     */
    public readonly cert!: pulumi.Output<string | undefined>;
    /**
     * An entry in a `clouds.yaml` file to use.
     */
    public readonly cloud!: pulumi.Output<string | undefined>;
    /**
     * The name of the Domain ID to scope to if no other domain is specified. Defaults to `default` (Identity v3).
     */
    public readonly defaultDomain!: pulumi.Output<string | undefined>;
    /**
     * The ID of the Domain to scope to (Identity v3).
     */
    public readonly domainId!: pulumi.Output<string | undefined>;
    /**
     * The name of the Domain to scope to (Identity v3).
     */
    public readonly domainName!: pulumi.Output<string | undefined>;
    public readonly endpointType!: pulumi.Output<string | undefined>;
    /**
     * The SSS Endpoint URL to send API.
     */
    public readonly forceSssEndpoint!: pulumi.Output<string | undefined>;
    /**
     * A client private key to authenticate with.
     */
    public readonly key!: pulumi.Output<string | undefined>;
    /**
     * Password to login with.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * The ID of the domain where the project resides (Identity v3).
     */
    public readonly projectDomainId!: pulumi.Output<string | undefined>;
    /**
     * The name of the domain where the project resides (Identity v3).
     */
    public readonly projectDomainName!: pulumi.Output<string | undefined>;
    /**
     * The Enterprise Cloud region to connect to.
     */
    public readonly region!: pulumi.Output<string | undefined>;
    /**
     * The ID of the Tenant (Identity v2) or Project (Identity v3) to login with.
     */
    public readonly tenantId!: pulumi.Output<string | undefined>;
    /**
     * The name of the Tenant (Identity v2) or Project (Identity v3) to login with.
     */
    public readonly tenantName!: pulumi.Output<string | undefined>;
    /**
     * Authentication token to use as an alternative to username/password.
     */
    public readonly token!: pulumi.Output<string | undefined>;
    /**
     * The ID of the domain where the user resides (Identity v3).
     */
    public readonly userDomainId!: pulumi.Output<string | undefined>;
    /**
     * The name of the domain where the user resides (Identity v3).
     */
    public readonly userDomainName!: pulumi.Output<string | undefined>;
    /**
     * Username to login with.
     */
    public readonly userId!: pulumi.Output<string | undefined>;
    /**
     * Username to login with.
     */
    public readonly userName!: pulumi.Output<string | undefined>;

    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        {
            resourceInputs["authUrl"] = args ? args.authUrl : undefined;
            resourceInputs["cacertFile"] = args ? args.cacertFile : undefined;
            resourceInputs["cert"] = args ? args.cert : undefined;
            resourceInputs["cloud"] = args ? args.cloud : undefined;
            resourceInputs["defaultDomain"] = args ? args.defaultDomain : undefined;
            resourceInputs["domainId"] = args ? args.domainId : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["endpointType"] = args ? args.endpointType : undefined;
            resourceInputs["forceSssEndpoint"] = args ? args.forceSssEndpoint : undefined;
            resourceInputs["insecure"] = pulumi.output(args ? args.insecure : undefined).apply(JSON.stringify);
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["projectDomainId"] = args ? args.projectDomainId : undefined;
            resourceInputs["projectDomainName"] = args ? args.projectDomainName : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["tenantName"] = args ? args.tenantName : undefined;
            resourceInputs["token"] = args ? args.token : undefined;
            resourceInputs["userDomainId"] = args ? args.userDomainId : undefined;
            resourceInputs["userDomainName"] = args ? args.userDomainName : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
            resourceInputs["userName"] = args ? args.userName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Provider.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    /**
     * The Identity authentication URL.
     */
    authUrl?: pulumi.Input<string>;
    /**
     * A Custom CA certificate.
     */
    cacertFile?: pulumi.Input<string>;
    /**
     * A client certificate to authenticate with.
     */
    cert?: pulumi.Input<string>;
    /**
     * An entry in a `clouds.yaml` file to use.
     */
    cloud?: pulumi.Input<string>;
    /**
     * The name of the Domain ID to scope to if no other domain is specified. Defaults to `default` (Identity v3).
     */
    defaultDomain?: pulumi.Input<string>;
    /**
     * The ID of the Domain to scope to (Identity v3).
     */
    domainId?: pulumi.Input<string>;
    /**
     * The name of the Domain to scope to (Identity v3).
     */
    domainName?: pulumi.Input<string>;
    endpointType?: pulumi.Input<string>;
    /**
     * The SSS Endpoint URL to send API.
     */
    forceSssEndpoint?: pulumi.Input<string>;
    /**
     * Trust self-signed certificates.
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * A client private key to authenticate with.
     */
    key?: pulumi.Input<string>;
    /**
     * Password to login with.
     */
    password?: pulumi.Input<string>;
    /**
     * The ID of the domain where the project resides (Identity v3).
     */
    projectDomainId?: pulumi.Input<string>;
    /**
     * The name of the domain where the project resides (Identity v3).
     */
    projectDomainName?: pulumi.Input<string>;
    /**
     * The Enterprise Cloud region to connect to.
     */
    region?: pulumi.Input<string>;
    /**
     * The ID of the Tenant (Identity v2) or Project (Identity v3) to login with.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * The name of the Tenant (Identity v2) or Project (Identity v3) to login with.
     */
    tenantName?: pulumi.Input<string>;
    /**
     * Authentication token to use as an alternative to username/password.
     */
    token?: pulumi.Input<string>;
    /**
     * The ID of the domain where the user resides (Identity v3).
     */
    userDomainId?: pulumi.Input<string>;
    /**
     * The name of the domain where the user resides (Identity v3).
     */
    userDomainName?: pulumi.Input<string>;
    /**
     * Username to login with.
     */
    userId?: pulumi.Input<string>;
    /**
     * Username to login with.
     */
    userName?: pulumi.Input<string>;
}
