// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetworkGatewayInterfaceV2 extends pulumi.CustomResource {
    /**
     * Get an existing NetworkGatewayInterfaceV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkGatewayInterfaceV2State, opts?: pulumi.CustomResourceOptions): NetworkGatewayInterfaceV2 {
        return new NetworkGatewayInterfaceV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ecl:index/networkGatewayInterfaceV2:NetworkGatewayInterfaceV2';

    /**
     * Returns true if the given object is an instance of NetworkGatewayInterfaceV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkGatewayInterfaceV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkGatewayInterfaceV2.__pulumiType;
    }

    public readonly awsGwId!: pulumi.Output<string | undefined>;
    public readonly azureGwId!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly ficGwId!: pulumi.Output<string | undefined>;
    public readonly gcpGwId!: pulumi.Output<string | undefined>;
    public readonly gwVipv4!: pulumi.Output<string>;
    public /*out*/ readonly gwVipv6!: pulumi.Output<string>;
    public readonly interdcGwId!: pulumi.Output<string | undefined>;
    public readonly internetGwId!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly netmask!: pulumi.Output<number>;
    public readonly networkId!: pulumi.Output<string>;
    public readonly primaryIpv4!: pulumi.Output<string>;
    public /*out*/ readonly primaryIpv6!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public readonly secondaryIpv4!: pulumi.Output<string>;
    public /*out*/ readonly secondaryIpv6!: pulumi.Output<string>;
    public readonly serviceType!: pulumi.Output<string>;
    public readonly tenantId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.NetworkGatewayInterfaceV2Timeouts | undefined>;
    public readonly vpnGwId!: pulumi.Output<string | undefined>;
    public readonly vrid!: pulumi.Output<number>;

    /**
     * Create a NetworkGatewayInterfaceV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkGatewayInterfaceV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkGatewayInterfaceV2Args | NetworkGatewayInterfaceV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkGatewayInterfaceV2State | undefined;
            resourceInputs["awsGwId"] = state ? state.awsGwId : undefined;
            resourceInputs["azureGwId"] = state ? state.azureGwId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["ficGwId"] = state ? state.ficGwId : undefined;
            resourceInputs["gcpGwId"] = state ? state.gcpGwId : undefined;
            resourceInputs["gwVipv4"] = state ? state.gwVipv4 : undefined;
            resourceInputs["gwVipv6"] = state ? state.gwVipv6 : undefined;
            resourceInputs["interdcGwId"] = state ? state.interdcGwId : undefined;
            resourceInputs["internetGwId"] = state ? state.internetGwId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["netmask"] = state ? state.netmask : undefined;
            resourceInputs["networkId"] = state ? state.networkId : undefined;
            resourceInputs["primaryIpv4"] = state ? state.primaryIpv4 : undefined;
            resourceInputs["primaryIpv6"] = state ? state.primaryIpv6 : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["secondaryIpv4"] = state ? state.secondaryIpv4 : undefined;
            resourceInputs["secondaryIpv6"] = state ? state.secondaryIpv6 : undefined;
            resourceInputs["serviceType"] = state ? state.serviceType : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpnGwId"] = state ? state.vpnGwId : undefined;
            resourceInputs["vrid"] = state ? state.vrid : undefined;
        } else {
            const args = argsOrState as NetworkGatewayInterfaceV2Args | undefined;
            if ((!args || args.gwVipv4 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gwVipv4'");
            }
            if ((!args || args.netmask === undefined) && !opts.urn) {
                throw new Error("Missing required property 'netmask'");
            }
            if ((!args || args.networkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            if ((!args || args.primaryIpv4 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'primaryIpv4'");
            }
            if ((!args || args.secondaryIpv4 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secondaryIpv4'");
            }
            if ((!args || args.serviceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceType'");
            }
            if ((!args || args.vrid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vrid'");
            }
            resourceInputs["awsGwId"] = args ? args.awsGwId : undefined;
            resourceInputs["azureGwId"] = args ? args.azureGwId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["ficGwId"] = args ? args.ficGwId : undefined;
            resourceInputs["gcpGwId"] = args ? args.gcpGwId : undefined;
            resourceInputs["gwVipv4"] = args ? args.gwVipv4 : undefined;
            resourceInputs["interdcGwId"] = args ? args.interdcGwId : undefined;
            resourceInputs["internetGwId"] = args ? args.internetGwId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["netmask"] = args ? args.netmask : undefined;
            resourceInputs["networkId"] = args ? args.networkId : undefined;
            resourceInputs["primaryIpv4"] = args ? args.primaryIpv4 : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["secondaryIpv4"] = args ? args.secondaryIpv4 : undefined;
            resourceInputs["serviceType"] = args ? args.serviceType : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpnGwId"] = args ? args.vpnGwId : undefined;
            resourceInputs["vrid"] = args ? args.vrid : undefined;
            resourceInputs["gwVipv6"] = undefined /*out*/;
            resourceInputs["primaryIpv6"] = undefined /*out*/;
            resourceInputs["secondaryIpv6"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkGatewayInterfaceV2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetworkGatewayInterfaceV2 resources.
 */
export interface NetworkGatewayInterfaceV2State {
    awsGwId?: pulumi.Input<string>;
    azureGwId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    ficGwId?: pulumi.Input<string>;
    gcpGwId?: pulumi.Input<string>;
    gwVipv4?: pulumi.Input<string>;
    gwVipv6?: pulumi.Input<string>;
    interdcGwId?: pulumi.Input<string>;
    internetGwId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    netmask?: pulumi.Input<number>;
    networkId?: pulumi.Input<string>;
    primaryIpv4?: pulumi.Input<string>;
    primaryIpv6?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    secondaryIpv4?: pulumi.Input<string>;
    secondaryIpv6?: pulumi.Input<string>;
    serviceType?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NetworkGatewayInterfaceV2Timeouts>;
    vpnGwId?: pulumi.Input<string>;
    vrid?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a NetworkGatewayInterfaceV2 resource.
 */
export interface NetworkGatewayInterfaceV2Args {
    awsGwId?: pulumi.Input<string>;
    azureGwId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    ficGwId?: pulumi.Input<string>;
    gcpGwId?: pulumi.Input<string>;
    gwVipv4: pulumi.Input<string>;
    interdcGwId?: pulumi.Input<string>;
    internetGwId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    netmask: pulumi.Input<number>;
    networkId: pulumi.Input<string>;
    primaryIpv4: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    secondaryIpv4: pulumi.Input<string>;
    serviceType: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NetworkGatewayInterfaceV2Timeouts>;
    vpnGwId?: pulumi.Input<string>;
    vrid: pulumi.Input<number>;
}
