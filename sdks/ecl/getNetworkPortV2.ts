// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getNetworkPortV2(args?: GetNetworkPortV2Args, opts?: pulumi.InvokeOptions): Promise<GetNetworkPortV2Result> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("ecl:index/getNetworkPortV2:getNetworkPortV2", {
        "description": args.description,
        "deviceId": args.deviceId,
        "deviceOwner": args.deviceOwner,
        "id": args.id,
        "macAddress": args.macAddress,
        "name": args.name,
        "networkId": args.networkId,
        "portId": args.portId,
        "region": args.region,
        "segmentationId": args.segmentationId,
        "segmentationType": args.segmentationType,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNetworkPortV2.
 */
export interface GetNetworkPortV2Args {
    description?: string;
    deviceId?: string;
    deviceOwner?: string;
    id?: string;
    macAddress?: string;
    name?: string;
    networkId?: string;
    portId?: string;
    region?: string;
    segmentationId?: number;
    segmentationType?: string;
}

/**
 * A collection of values returned by getNetworkPortV2.
 */
export interface GetNetworkPortV2Result {
    readonly adminStateUp: boolean;
    readonly allFixedIps: string[];
    readonly allowedAddressPairs: outputs.GetNetworkPortV2AllowedAddressPair[];
    readonly description: string;
    readonly deviceId: string;
    readonly deviceOwner: string;
    readonly fixedIps: outputs.GetNetworkPortV2FixedIp[];
    readonly id: string;
    readonly macAddress: string;
    readonly managedByService: boolean;
    readonly name: string;
    readonly networkId: string;
    readonly portId: string;
    readonly region: string;
    readonly segmentationId: number;
    readonly segmentationType: string;
    readonly status: string;
    readonly tags: {[key: string]: string};
    readonly tenantId: string;
}
export function getNetworkPortV2Output(args?: GetNetworkPortV2OutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNetworkPortV2Result> {
    return pulumi.output(args).apply((a: any) => getNetworkPortV2(a, opts))
}

/**
 * A collection of arguments for invoking getNetworkPortV2.
 */
export interface GetNetworkPortV2OutputArgs {
    description?: pulumi.Input<string>;
    deviceId?: pulumi.Input<string>;
    deviceOwner?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    macAddress?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    portId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    segmentationId?: pulumi.Input<number>;
    segmentationType?: pulumi.Input<string>;
}
