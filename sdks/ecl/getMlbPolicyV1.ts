// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getMlbPolicyV1(args?: GetMlbPolicyV1Args, opts?: pulumi.InvokeOptions): Promise<GetMlbPolicyV1Result> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("ecl:index/getMlbPolicyV1:getMlbPolicyV1", {
        "algorithm": args.algorithm,
        "certificateId": args.certificateId,
        "configurationStatus": args.configurationStatus,
        "defaultTargetGroupId": args.defaultTargetGroupId,
        "description": args.description,
        "healthMonitorId": args.healthMonitorId,
        "id": args.id,
        "idleTimeout": args.idleTimeout,
        "listenerId": args.listenerId,
        "loadBalancerId": args.loadBalancerId,
        "name": args.name,
        "operationStatus": args.operationStatus,
        "persistence": args.persistence,
        "sorryPageUrl": args.sorryPageUrl,
        "sourceNat": args.sourceNat,
        "tags": args.tags,
        "tenantId": args.tenantId,
        "tlsPolicyId": args.tlsPolicyId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMlbPolicyV1.
 */
export interface GetMlbPolicyV1Args {
    algorithm?: string;
    certificateId?: string;
    configurationStatus?: string;
    defaultTargetGroupId?: string;
    description?: string;
    healthMonitorId?: string;
    id?: string;
    idleTimeout?: number;
    listenerId?: string;
    loadBalancerId?: string;
    name?: string;
    operationStatus?: string;
    persistence?: string;
    sorryPageUrl?: string;
    sourceNat?: string;
    tags?: {[key: string]: string};
    tenantId?: string;
    tlsPolicyId?: string;
}

/**
 * A collection of values returned by getMlbPolicyV1.
 */
export interface GetMlbPolicyV1Result {
    readonly algorithm: string;
    readonly certificateId: string;
    readonly configurationStatus: string;
    readonly defaultTargetGroupId: string;
    readonly description: string;
    readonly healthMonitorId: string;
    readonly id: string;
    readonly idleTimeout: number;
    readonly listenerId: string;
    readonly loadBalancerId: string;
    readonly name: string;
    readonly operationStatus: string;
    readonly persistence: string;
    readonly sorryPageUrl: string;
    readonly sourceNat: string;
    readonly tags: {[key: string]: string};
    readonly tenantId: string;
    readonly tlsPolicyId: string;
}
export function getMlbPolicyV1Output(args?: GetMlbPolicyV1OutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMlbPolicyV1Result> {
    return pulumi.output(args).apply((a: any) => getMlbPolicyV1(a, opts))
}

/**
 * A collection of arguments for invoking getMlbPolicyV1.
 */
export interface GetMlbPolicyV1OutputArgs {
    algorithm?: pulumi.Input<string>;
    certificateId?: pulumi.Input<string>;
    configurationStatus?: pulumi.Input<string>;
    defaultTargetGroupId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    healthMonitorId?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    idleTimeout?: pulumi.Input<number>;
    listenerId?: pulumi.Input<string>;
    loadBalancerId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    operationStatus?: pulumi.Input<string>;
    persistence?: pulumi.Input<string>;
    sorryPageUrl?: pulumi.Input<string>;
    sourceNat?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tenantId?: pulumi.Input<string>;
    tlsPolicyId?: pulumi.Input<string>;
}
