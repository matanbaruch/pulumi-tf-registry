// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVnaApplianceV1(args?: GetVnaApplianceV1Args, opts?: pulumi.InvokeOptions): Promise<GetVnaApplianceV1Result> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("ecl:index/getVnaApplianceV1:getVnaApplianceV1", {
        "applianceType": args.applianceType,
        "availabilityZone": args.availabilityZone,
        "description": args.description,
        "id": args.id,
        "interface1Infos": args.interface1Infos,
        "interface2Infos": args.interface2Infos,
        "interface3Infos": args.interface3Infos,
        "interface4Infos": args.interface4Infos,
        "interface5Infos": args.interface5Infos,
        "interface6Infos": args.interface6Infos,
        "interface7Infos": args.interface7Infos,
        "interface8Infos": args.interface8Infos,
        "name": args.name,
        "operationStatus": args.operationStatus,
        "osLoginStatus": args.osLoginStatus,
        "osMonitoringStatus": args.osMonitoringStatus,
        "tenantId": args.tenantId,
        "virtualNetworkApplianceId": args.virtualNetworkApplianceId,
        "virtualNetworkAppliancePlanId": args.virtualNetworkAppliancePlanId,
        "vmStatus": args.vmStatus,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVnaApplianceV1.
 */
export interface GetVnaApplianceV1Args {
    applianceType?: string;
    availabilityZone?: string;
    description?: string;
    id?: string;
    interface1Infos?: inputs.GetVnaApplianceV1Interface1Info[];
    interface2Infos?: inputs.GetVnaApplianceV1Interface2Info[];
    interface3Infos?: inputs.GetVnaApplianceV1Interface3Info[];
    interface4Infos?: inputs.GetVnaApplianceV1Interface4Info[];
    interface5Infos?: inputs.GetVnaApplianceV1Interface5Info[];
    interface6Infos?: inputs.GetVnaApplianceV1Interface6Info[];
    interface7Infos?: inputs.GetVnaApplianceV1Interface7Info[];
    interface8Infos?: inputs.GetVnaApplianceV1Interface8Info[];
    name?: string;
    operationStatus?: string;
    osLoginStatus?: string;
    osMonitoringStatus?: string;
    tenantId?: string;
    virtualNetworkApplianceId?: string;
    virtualNetworkAppliancePlanId?: string;
    vmStatus?: string;
}

/**
 * A collection of values returned by getVnaApplianceV1.
 */
export interface GetVnaApplianceV1Result {
    readonly applianceType: string;
    readonly availabilityZone: string;
    readonly description: string;
    readonly id: string;
    readonly interface1AllowedAddressPairs: outputs.GetVnaApplianceV1Interface1AllowedAddressPair[];
    readonly interface1FixedIps: outputs.GetVnaApplianceV1Interface1FixedIp[];
    readonly interface1Infos?: outputs.GetVnaApplianceV1Interface1Info[];
    readonly interface2AllowedAddressPairs: outputs.GetVnaApplianceV1Interface2AllowedAddressPair[];
    readonly interface2FixedIps: outputs.GetVnaApplianceV1Interface2FixedIp[];
    readonly interface2Infos?: outputs.GetVnaApplianceV1Interface2Info[];
    readonly interface3AllowedAddressPairs: outputs.GetVnaApplianceV1Interface3AllowedAddressPair[];
    readonly interface3FixedIps: outputs.GetVnaApplianceV1Interface3FixedIp[];
    readonly interface3Infos?: outputs.GetVnaApplianceV1Interface3Info[];
    readonly interface4AllowedAddressPairs: outputs.GetVnaApplianceV1Interface4AllowedAddressPair[];
    readonly interface4FixedIps: outputs.GetVnaApplianceV1Interface4FixedIp[];
    readonly interface4Infos?: outputs.GetVnaApplianceV1Interface4Info[];
    readonly interface5AllowedAddressPairs: outputs.GetVnaApplianceV1Interface5AllowedAddressPair[];
    readonly interface5FixedIps: outputs.GetVnaApplianceV1Interface5FixedIp[];
    readonly interface5Infos?: outputs.GetVnaApplianceV1Interface5Info[];
    readonly interface6AllowedAddressPairs: outputs.GetVnaApplianceV1Interface6AllowedAddressPair[];
    readonly interface6FixedIps: outputs.GetVnaApplianceV1Interface6FixedIp[];
    readonly interface6Infos?: outputs.GetVnaApplianceV1Interface6Info[];
    readonly interface7AllowedAddressPairs: outputs.GetVnaApplianceV1Interface7AllowedAddressPair[];
    readonly interface7FixedIps: outputs.GetVnaApplianceV1Interface7FixedIp[];
    readonly interface7Infos?: outputs.GetVnaApplianceV1Interface7Info[];
    readonly interface8AllowedAddressPairs: outputs.GetVnaApplianceV1Interface8AllowedAddressPair[];
    readonly interface8FixedIps: outputs.GetVnaApplianceV1Interface8FixedIp[];
    readonly interface8Infos?: outputs.GetVnaApplianceV1Interface8Info[];
    readonly name: string;
    readonly operationStatus: string;
    readonly osLoginStatus: string;
    readonly osMonitoringStatus: string;
    readonly tags: {[key: string]: string};
    readonly tenantId: string;
    readonly virtualNetworkApplianceId: string;
    readonly virtualNetworkAppliancePlanId: string;
    readonly vmStatus: string;
}
export function getVnaApplianceV1Output(args?: GetVnaApplianceV1OutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVnaApplianceV1Result> {
    return pulumi.output(args).apply((a: any) => getVnaApplianceV1(a, opts))
}

/**
 * A collection of arguments for invoking getVnaApplianceV1.
 */
export interface GetVnaApplianceV1OutputArgs {
    applianceType?: pulumi.Input<string>;
    availabilityZone?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    interface1Infos?: pulumi.Input<pulumi.Input<inputs.GetVnaApplianceV1Interface1InfoArgs>[]>;
    interface2Infos?: pulumi.Input<pulumi.Input<inputs.GetVnaApplianceV1Interface2InfoArgs>[]>;
    interface3Infos?: pulumi.Input<pulumi.Input<inputs.GetVnaApplianceV1Interface3InfoArgs>[]>;
    interface4Infos?: pulumi.Input<pulumi.Input<inputs.GetVnaApplianceV1Interface4InfoArgs>[]>;
    interface5Infos?: pulumi.Input<pulumi.Input<inputs.GetVnaApplianceV1Interface5InfoArgs>[]>;
    interface6Infos?: pulumi.Input<pulumi.Input<inputs.GetVnaApplianceV1Interface6InfoArgs>[]>;
    interface7Infos?: pulumi.Input<pulumi.Input<inputs.GetVnaApplianceV1Interface7InfoArgs>[]>;
    interface8Infos?: pulumi.Input<pulumi.Input<inputs.GetVnaApplianceV1Interface8InfoArgs>[]>;
    name?: pulumi.Input<string>;
    operationStatus?: pulumi.Input<string>;
    osLoginStatus?: pulumi.Input<string>;
    osMonitoringStatus?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
    virtualNetworkApplianceId?: pulumi.Input<string>;
    virtualNetworkAppliancePlanId?: pulumi.Input<string>;
    vmStatus?: pulumi.Input<string>;
}
