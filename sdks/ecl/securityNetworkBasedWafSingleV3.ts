// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SecurityNetworkBasedWafSingleV3 extends pulumi.CustomResource {
    /**
     * Get an existing SecurityNetworkBasedWafSingleV3 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecurityNetworkBasedWafSingleV3State, opts?: pulumi.CustomResourceOptions): SecurityNetworkBasedWafSingleV3 {
        return new SecurityNetworkBasedWafSingleV3(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ecl:index/securityNetworkBasedWafSingleV3:SecurityNetworkBasedWafSingleV3';

    /**
     * Returns true if the given object is an instance of SecurityNetworkBasedWafSingleV3.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecurityNetworkBasedWafSingleV3 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecurityNetworkBasedWafSingleV3.__pulumiType;
    }

    public readonly azGroup!: pulumi.Output<string>;
    public readonly licenseKind!: pulumi.Output<string>;
    public readonly locale!: pulumi.Output<string | undefined>;
    public readonly operatingMode!: pulumi.Output<string | undefined>;
    public readonly port!: pulumi.Output<outputs.SecurityNetworkBasedWafSingleV3Port | undefined>;
    public readonly tenantId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.SecurityNetworkBasedWafSingleV3Timeouts | undefined>;

    /**
     * Create a SecurityNetworkBasedWafSingleV3 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecurityNetworkBasedWafSingleV3Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecurityNetworkBasedWafSingleV3Args | SecurityNetworkBasedWafSingleV3State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecurityNetworkBasedWafSingleV3State | undefined;
            resourceInputs["azGroup"] = state ? state.azGroup : undefined;
            resourceInputs["licenseKind"] = state ? state.licenseKind : undefined;
            resourceInputs["locale"] = state ? state.locale : undefined;
            resourceInputs["operatingMode"] = state ? state.operatingMode : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as SecurityNetworkBasedWafSingleV3Args | undefined;
            if ((!args || args.azGroup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'azGroup'");
            }
            if ((!args || args.licenseKind === undefined) && !opts.urn) {
                throw new Error("Missing required property 'licenseKind'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["azGroup"] = args ? args.azGroup : undefined;
            resourceInputs["licenseKind"] = args ? args.licenseKind : undefined;
            resourceInputs["locale"] = args ? args.locale : undefined;
            resourceInputs["operatingMode"] = args ? args.operatingMode : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecurityNetworkBasedWafSingleV3.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SecurityNetworkBasedWafSingleV3 resources.
 */
export interface SecurityNetworkBasedWafSingleV3State {
    azGroup?: pulumi.Input<string>;
    licenseKind?: pulumi.Input<string>;
    locale?: pulumi.Input<string>;
    operatingMode?: pulumi.Input<string>;
    port?: pulumi.Input<inputs.SecurityNetworkBasedWafSingleV3Port>;
    tenantId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SecurityNetworkBasedWafSingleV3Timeouts>;
}

/**
 * The set of arguments for constructing a SecurityNetworkBasedWafSingleV3 resource.
 */
export interface SecurityNetworkBasedWafSingleV3Args {
    azGroup: pulumi.Input<string>;
    licenseKind: pulumi.Input<string>;
    locale?: pulumi.Input<string>;
    operatingMode?: pulumi.Input<string>;
    port?: pulumi.Input<inputs.SecurityNetworkBasedWafSingleV3Port>;
    tenantId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SecurityNetworkBasedWafSingleV3Timeouts>;
}
