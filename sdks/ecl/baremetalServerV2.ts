// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BaremetalServerV2 extends pulumi.CustomResource {
    /**
     * Get an existing BaremetalServerV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BaremetalServerV2State, opts?: pulumi.CustomResourceOptions): BaremetalServerV2 {
        return new BaremetalServerV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ecl:index/baremetalServerV2:BaremetalServerV2';

    /**
     * Returns true if the given object is an instance of BaremetalServerV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BaremetalServerV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BaremetalServerV2.__pulumiType;
    }

    public readonly adminPass!: pulumi.Output<string | undefined>;
    public readonly availabilityZone!: pulumi.Output<string | undefined>;
    public readonly filesystems!: pulumi.Output<outputs.BaremetalServerV2Filesystem[] | undefined>;
    public readonly flavorId!: pulumi.Output<string | undefined>;
    public readonly flavorName!: pulumi.Output<string | undefined>;
    public readonly imageId!: pulumi.Output<string | undefined>;
    public readonly imageName!: pulumi.Output<string | undefined>;
    public readonly keyPair!: pulumi.Output<string | undefined>;
    public readonly lvmVolumeGroups!: pulumi.Output<outputs.BaremetalServerV2LvmVolumeGroup[] | undefined>;
    public readonly metadata!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly networks!: pulumi.Output<outputs.BaremetalServerV2Network[] | undefined>;
    public /*out*/ readonly nicPhysicalPorts!: pulumi.Output<outputs.BaremetalServerV2NicPhysicalPort[]>;
    public readonly personalities!: pulumi.Output<outputs.BaremetalServerV2Personality[] | undefined>;
    public readonly raidArrays!: pulumi.Output<outputs.BaremetalServerV2RaidArray[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.BaremetalServerV2Timeouts | undefined>;
    public readonly userData!: pulumi.Output<string | undefined>;

    /**
     * Create a BaremetalServerV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: BaremetalServerV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BaremetalServerV2Args | BaremetalServerV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BaremetalServerV2State | undefined;
            resourceInputs["adminPass"] = state ? state.adminPass : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["filesystems"] = state ? state.filesystems : undefined;
            resourceInputs["flavorId"] = state ? state.flavorId : undefined;
            resourceInputs["flavorName"] = state ? state.flavorName : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["imageName"] = state ? state.imageName : undefined;
            resourceInputs["keyPair"] = state ? state.keyPair : undefined;
            resourceInputs["lvmVolumeGroups"] = state ? state.lvmVolumeGroups : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networks"] = state ? state.networks : undefined;
            resourceInputs["nicPhysicalPorts"] = state ? state.nicPhysicalPorts : undefined;
            resourceInputs["personalities"] = state ? state.personalities : undefined;
            resourceInputs["raidArrays"] = state ? state.raidArrays : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["userData"] = state ? state.userData : undefined;
        } else {
            const args = argsOrState as BaremetalServerV2Args | undefined;
            resourceInputs["adminPass"] = args ? args.adminPass : undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["filesystems"] = args ? args.filesystems : undefined;
            resourceInputs["flavorId"] = args ? args.flavorId : undefined;
            resourceInputs["flavorName"] = args ? args.flavorName : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["imageName"] = args ? args.imageName : undefined;
            resourceInputs["keyPair"] = args ? args.keyPair : undefined;
            resourceInputs["lvmVolumeGroups"] = args ? args.lvmVolumeGroups : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networks"] = args ? args.networks : undefined;
            resourceInputs["personalities"] = args ? args.personalities : undefined;
            resourceInputs["raidArrays"] = args ? args.raidArrays : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userData"] = args ? args.userData : undefined;
            resourceInputs["nicPhysicalPorts"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BaremetalServerV2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BaremetalServerV2 resources.
 */
export interface BaremetalServerV2State {
    adminPass?: pulumi.Input<string>;
    availabilityZone?: pulumi.Input<string>;
    filesystems?: pulumi.Input<pulumi.Input<inputs.BaremetalServerV2Filesystem>[]>;
    flavorId?: pulumi.Input<string>;
    flavorName?: pulumi.Input<string>;
    imageId?: pulumi.Input<string>;
    imageName?: pulumi.Input<string>;
    keyPair?: pulumi.Input<string>;
    lvmVolumeGroups?: pulumi.Input<pulumi.Input<inputs.BaremetalServerV2LvmVolumeGroup>[]>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    networks?: pulumi.Input<pulumi.Input<inputs.BaremetalServerV2Network>[]>;
    nicPhysicalPorts?: pulumi.Input<pulumi.Input<inputs.BaremetalServerV2NicPhysicalPort>[]>;
    personalities?: pulumi.Input<pulumi.Input<inputs.BaremetalServerV2Personality>[]>;
    raidArrays?: pulumi.Input<pulumi.Input<inputs.BaremetalServerV2RaidArray>[]>;
    timeouts?: pulumi.Input<inputs.BaremetalServerV2Timeouts>;
    userData?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BaremetalServerV2 resource.
 */
export interface BaremetalServerV2Args {
    adminPass?: pulumi.Input<string>;
    availabilityZone?: pulumi.Input<string>;
    filesystems?: pulumi.Input<pulumi.Input<inputs.BaremetalServerV2Filesystem>[]>;
    flavorId?: pulumi.Input<string>;
    flavorName?: pulumi.Input<string>;
    imageId?: pulumi.Input<string>;
    imageName?: pulumi.Input<string>;
    keyPair?: pulumi.Input<string>;
    lvmVolumeGroups?: pulumi.Input<pulumi.Input<inputs.BaremetalServerV2LvmVolumeGroup>[]>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    networks?: pulumi.Input<pulumi.Input<inputs.BaremetalServerV2Network>[]>;
    personalities?: pulumi.Input<pulumi.Input<inputs.BaremetalServerV2Personality>[]>;
    raidArrays?: pulumi.Input<pulumi.Input<inputs.BaremetalServerV2RaidArray>[]>;
    timeouts?: pulumi.Input<inputs.BaremetalServerV2Timeouts>;
    userData?: pulumi.Input<string>;
}
