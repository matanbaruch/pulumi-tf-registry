// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class MlbPolicyV1 extends pulumi.CustomResource {
    /**
     * Get an existing MlbPolicyV1 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MlbPolicyV1State, opts?: pulumi.CustomResourceOptions): MlbPolicyV1 {
        return new MlbPolicyV1(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ecl:index/mlbPolicyV1:MlbPolicyV1';

    /**
     * Returns true if the given object is an instance of MlbPolicyV1.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MlbPolicyV1 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MlbPolicyV1.__pulumiType;
    }

    public readonly algorithm!: pulumi.Output<string | undefined>;
    public readonly certificateId!: pulumi.Output<string | undefined>;
    public readonly defaultTargetGroupId!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly healthMonitorId!: pulumi.Output<string>;
    public readonly idleTimeout!: pulumi.Output<number | undefined>;
    public readonly listenerId!: pulumi.Output<string>;
    public readonly loadBalancerId!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly persistence!: pulumi.Output<string | undefined>;
    public readonly sorryPageUrl!: pulumi.Output<string | undefined>;
    public readonly sourceNat!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tenantId!: pulumi.Output<string>;
    public readonly tlsPolicyId!: pulumi.Output<string | undefined>;

    /**
     * Create a MlbPolicyV1 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MlbPolicyV1Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MlbPolicyV1Args | MlbPolicyV1State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MlbPolicyV1State | undefined;
            resourceInputs["algorithm"] = state ? state.algorithm : undefined;
            resourceInputs["certificateId"] = state ? state.certificateId : undefined;
            resourceInputs["defaultTargetGroupId"] = state ? state.defaultTargetGroupId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["healthMonitorId"] = state ? state.healthMonitorId : undefined;
            resourceInputs["idleTimeout"] = state ? state.idleTimeout : undefined;
            resourceInputs["listenerId"] = state ? state.listenerId : undefined;
            resourceInputs["loadBalancerId"] = state ? state.loadBalancerId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["persistence"] = state ? state.persistence : undefined;
            resourceInputs["sorryPageUrl"] = state ? state.sorryPageUrl : undefined;
            resourceInputs["sourceNat"] = state ? state.sourceNat : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["tlsPolicyId"] = state ? state.tlsPolicyId : undefined;
        } else {
            const args = argsOrState as MlbPolicyV1Args | undefined;
            if ((!args || args.defaultTargetGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultTargetGroupId'");
            }
            if ((!args || args.healthMonitorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'healthMonitorId'");
            }
            if ((!args || args.listenerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'listenerId'");
            }
            if ((!args || args.loadBalancerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loadBalancerId'");
            }
            resourceInputs["algorithm"] = args ? args.algorithm : undefined;
            resourceInputs["certificateId"] = args ? args.certificateId : undefined;
            resourceInputs["defaultTargetGroupId"] = args ? args.defaultTargetGroupId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["healthMonitorId"] = args ? args.healthMonitorId : undefined;
            resourceInputs["idleTimeout"] = args ? args.idleTimeout : undefined;
            resourceInputs["listenerId"] = args ? args.listenerId : undefined;
            resourceInputs["loadBalancerId"] = args ? args.loadBalancerId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["persistence"] = args ? args.persistence : undefined;
            resourceInputs["sorryPageUrl"] = args ? args.sorryPageUrl : undefined;
            resourceInputs["sourceNat"] = args ? args.sourceNat : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["tlsPolicyId"] = args ? args.tlsPolicyId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MlbPolicyV1.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MlbPolicyV1 resources.
 */
export interface MlbPolicyV1State {
    algorithm?: pulumi.Input<string>;
    certificateId?: pulumi.Input<string>;
    defaultTargetGroupId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    healthMonitorId?: pulumi.Input<string>;
    idleTimeout?: pulumi.Input<number>;
    listenerId?: pulumi.Input<string>;
    loadBalancerId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    persistence?: pulumi.Input<string>;
    sorryPageUrl?: pulumi.Input<string>;
    sourceNat?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tenantId?: pulumi.Input<string>;
    tlsPolicyId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MlbPolicyV1 resource.
 */
export interface MlbPolicyV1Args {
    algorithm?: pulumi.Input<string>;
    certificateId?: pulumi.Input<string>;
    defaultTargetGroupId: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    healthMonitorId: pulumi.Input<string>;
    idleTimeout?: pulumi.Input<number>;
    listenerId: pulumi.Input<string>;
    loadBalancerId: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    persistence?: pulumi.Input<string>;
    sorryPageUrl?: pulumi.Input<string>;
    sourceNat?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tenantId?: pulumi.Input<string>;
    tlsPolicyId?: pulumi.Input<string>;
}
