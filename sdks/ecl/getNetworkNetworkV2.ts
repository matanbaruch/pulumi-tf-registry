// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getNetworkNetworkV2(args?: GetNetworkNetworkV2Args, opts?: pulumi.InvokeOptions): Promise<GetNetworkNetworkV2Result> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("ecl:index/getNetworkNetworkV2:getNetworkNetworkV2", {
        "description": args.description,
        "id": args.id,
        "matchingSubnetCidr": args.matchingSubnetCidr,
        "name": args.name,
        "networkId": args.networkId,
        "plane": args.plane,
        "region": args.region,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNetworkNetworkV2.
 */
export interface GetNetworkNetworkV2Args {
    description?: string;
    id?: string;
    matchingSubnetCidr?: string;
    name?: string;
    networkId?: string;
    plane?: string;
    region?: string;
}

/**
 * A collection of values returned by getNetworkNetworkV2.
 */
export interface GetNetworkNetworkV2Result {
    readonly adminStateUp: boolean;
    readonly description: string;
    readonly id: string;
    readonly matchingSubnetCidr: string;
    readonly name: string;
    readonly networkId: string;
    readonly plane: string;
    readonly region: string;
    readonly status: string;
    readonly subnets: string[];
    readonly tags: {[key: string]: string};
    readonly tenantId: string;
}
export function getNetworkNetworkV2Output(args?: GetNetworkNetworkV2OutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNetworkNetworkV2Result> {
    return pulumi.output(args).apply((a: any) => getNetworkNetworkV2(a, opts))
}

/**
 * A collection of arguments for invoking getNetworkNetworkV2.
 */
export interface GetNetworkNetworkV2OutputArgs {
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    matchingSubnetCidr?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    plane?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}
