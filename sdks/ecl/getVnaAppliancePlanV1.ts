// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVnaAppliancePlanV1(args?: GetVnaAppliancePlanV1Args, opts?: pulumi.InvokeOptions): Promise<GetVnaAppliancePlanV1Result> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("ecl:index/getVnaAppliancePlanV1:getVnaAppliancePlanV1", {
        "applianceType": args.applianceType,
        "availabilityZones": args.availabilityZones,
        "description": args.description,
        "enabled": args.enabled,
        "flavor": args.flavor,
        "id": args.id,
        "licenses": args.licenses,
        "maxNumberOfAap": args.maxNumberOfAap,
        "name": args.name,
        "numberOfInterfaces": args.numberOfInterfaces,
        "version": args.version,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVnaAppliancePlanV1.
 */
export interface GetVnaAppliancePlanV1Args {
    applianceType?: string;
    availabilityZones?: inputs.GetVnaAppliancePlanV1AvailabilityZone[];
    description?: string;
    enabled?: boolean;
    flavor?: string;
    id?: string;
    licenses?: inputs.GetVnaAppliancePlanV1License[];
    maxNumberOfAap?: number;
    name?: string;
    numberOfInterfaces?: number;
    version?: string;
}

/**
 * A collection of values returned by getVnaAppliancePlanV1.
 */
export interface GetVnaAppliancePlanV1Result {
    readonly applianceType: string;
    readonly availabilityZones?: outputs.GetVnaAppliancePlanV1AvailabilityZone[];
    readonly description: string;
    readonly enabled: boolean;
    readonly flavor: string;
    readonly id: string;
    readonly licenses?: outputs.GetVnaAppliancePlanV1License[];
    readonly maxNumberOfAap: number;
    readonly name: string;
    readonly numberOfInterfaces: number;
    readonly version: string;
}
export function getVnaAppliancePlanV1Output(args?: GetVnaAppliancePlanV1OutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVnaAppliancePlanV1Result> {
    return pulumi.output(args).apply((a: any) => getVnaAppliancePlanV1(a, opts))
}

/**
 * A collection of arguments for invoking getVnaAppliancePlanV1.
 */
export interface GetVnaAppliancePlanV1OutputArgs {
    applianceType?: pulumi.Input<string>;
    availabilityZones?: pulumi.Input<pulumi.Input<inputs.GetVnaAppliancePlanV1AvailabilityZoneArgs>[]>;
    description?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    flavor?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    licenses?: pulumi.Input<pulumi.Input<inputs.GetVnaAppliancePlanV1LicenseArgs>[]>;
    maxNumberOfAap?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    numberOfInterfaces?: pulumi.Input<number>;
    version?: pulumi.Input<string>;
}
