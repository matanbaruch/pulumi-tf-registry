// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ImagestoragesMemberV2 extends pulumi.CustomResource {
    /**
     * Get an existing ImagestoragesMemberV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImagestoragesMemberV2State, opts?: pulumi.CustomResourceOptions): ImagestoragesMemberV2 {
        return new ImagestoragesMemberV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ecl:index/imagestoragesMemberV2:ImagestoragesMemberV2';

    /**
     * Returns true if the given object is an instance of ImagestoragesMemberV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ImagestoragesMemberV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ImagestoragesMemberV2.__pulumiType;
    }

    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly imageId!: pulumi.Output<string>;
    public readonly memberId!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public /*out*/ readonly schema!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ImagestoragesMemberV2Timeouts | undefined>;
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a ImagestoragesMemberV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImagestoragesMemberV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImagestoragesMemberV2Args | ImagestoragesMemberV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImagestoragesMemberV2State | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["memberId"] = state ? state.memberId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["schema"] = state ? state.schema : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as ImagestoragesMemberV2Args | undefined;
            if ((!args || args.imageId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'imageId'");
            }
            if ((!args || args.memberId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'memberId'");
            }
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["memberId"] = args ? args.memberId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["schema"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ImagestoragesMemberV2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ImagestoragesMemberV2 resources.
 */
export interface ImagestoragesMemberV2State {
    createdAt?: pulumi.Input<string>;
    imageId?: pulumi.Input<string>;
    memberId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    schema?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ImagestoragesMemberV2Timeouts>;
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ImagestoragesMemberV2 resource.
 */
export interface ImagestoragesMemberV2Args {
    imageId: pulumi.Input<string>;
    memberId: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ImagestoragesMemberV2Timeouts>;
}
