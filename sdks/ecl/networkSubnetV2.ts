// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetworkSubnetV2 extends pulumi.CustomResource {
    /**
     * Get an existing NetworkSubnetV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkSubnetV2State, opts?: pulumi.CustomResourceOptions): NetworkSubnetV2 {
        return new NetworkSubnetV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ecl:index/networkSubnetV2:NetworkSubnetV2';

    /**
     * Returns true if the given object is an instance of NetworkSubnetV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkSubnetV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkSubnetV2.__pulumiType;
    }

    public readonly allocationPools!: pulumi.Output<outputs.NetworkSubnetV2AllocationPool[] | undefined>;
    public readonly cidr!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly dnsNameservers!: pulumi.Output<string[]>;
    public readonly enableDhcp!: pulumi.Output<boolean>;
    public readonly gatewayIp!: pulumi.Output<string>;
    public readonly hostRoutes!: pulumi.Output<outputs.NetworkSubnetV2HostRoute[] | undefined>;
    public readonly ipVersion!: pulumi.Output<number | undefined>;
    public /*out*/ readonly ipv6AddressMode!: pulumi.Output<string>;
    public /*out*/ readonly ipv6RaMode!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkId!: pulumi.Output<string>;
    public readonly noGateway!: pulumi.Output<boolean | undefined>;
    public readonly ntpServers!: pulumi.Output<string[] | undefined>;
    public readonly region!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tenantId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.NetworkSubnetV2Timeouts | undefined>;

    /**
     * Create a NetworkSubnetV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkSubnetV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkSubnetV2Args | NetworkSubnetV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkSubnetV2State | undefined;
            resourceInputs["allocationPools"] = state ? state.allocationPools : undefined;
            resourceInputs["cidr"] = state ? state.cidr : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dnsNameservers"] = state ? state.dnsNameservers : undefined;
            resourceInputs["enableDhcp"] = state ? state.enableDhcp : undefined;
            resourceInputs["gatewayIp"] = state ? state.gatewayIp : undefined;
            resourceInputs["hostRoutes"] = state ? state.hostRoutes : undefined;
            resourceInputs["ipVersion"] = state ? state.ipVersion : undefined;
            resourceInputs["ipv6AddressMode"] = state ? state.ipv6AddressMode : undefined;
            resourceInputs["ipv6RaMode"] = state ? state.ipv6RaMode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkId"] = state ? state.networkId : undefined;
            resourceInputs["noGateway"] = state ? state.noGateway : undefined;
            resourceInputs["ntpServers"] = state ? state.ntpServers : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as NetworkSubnetV2Args | undefined;
            if ((!args || args.cidr === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cidr'");
            }
            if ((!args || args.networkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            resourceInputs["allocationPools"] = args ? args.allocationPools : undefined;
            resourceInputs["cidr"] = args ? args.cidr : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dnsNameservers"] = args ? args.dnsNameservers : undefined;
            resourceInputs["enableDhcp"] = args ? args.enableDhcp : undefined;
            resourceInputs["gatewayIp"] = args ? args.gatewayIp : undefined;
            resourceInputs["hostRoutes"] = args ? args.hostRoutes : undefined;
            resourceInputs["ipVersion"] = args ? args.ipVersion : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkId"] = args ? args.networkId : undefined;
            resourceInputs["noGateway"] = args ? args.noGateway : undefined;
            resourceInputs["ntpServers"] = args ? args.ntpServers : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["ipv6AddressMode"] = undefined /*out*/;
            resourceInputs["ipv6RaMode"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkSubnetV2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetworkSubnetV2 resources.
 */
export interface NetworkSubnetV2State {
    allocationPools?: pulumi.Input<pulumi.Input<inputs.NetworkSubnetV2AllocationPool>[]>;
    cidr?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dnsNameservers?: pulumi.Input<pulumi.Input<string>[]>;
    enableDhcp?: pulumi.Input<boolean>;
    gatewayIp?: pulumi.Input<string>;
    hostRoutes?: pulumi.Input<pulumi.Input<inputs.NetworkSubnetV2HostRoute>[]>;
    ipVersion?: pulumi.Input<number>;
    ipv6AddressMode?: pulumi.Input<string>;
    ipv6RaMode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    noGateway?: pulumi.Input<boolean>;
    ntpServers?: pulumi.Input<pulumi.Input<string>[]>;
    region?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tenantId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NetworkSubnetV2Timeouts>;
}

/**
 * The set of arguments for constructing a NetworkSubnetV2 resource.
 */
export interface NetworkSubnetV2Args {
    allocationPools?: pulumi.Input<pulumi.Input<inputs.NetworkSubnetV2AllocationPool>[]>;
    cidr: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dnsNameservers?: pulumi.Input<pulumi.Input<string>[]>;
    enableDhcp?: pulumi.Input<boolean>;
    gatewayIp?: pulumi.Input<string>;
    hostRoutes?: pulumi.Input<pulumi.Input<inputs.NetworkSubnetV2HostRoute>[]>;
    ipVersion?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    networkId: pulumi.Input<string>;
    noGateway?: pulumi.Input<boolean>;
    ntpServers?: pulumi.Input<pulumi.Input<string>[]>;
    region?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tenantId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NetworkSubnetV2Timeouts>;
}
