// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Vm extends pulumi.CustomResource {
    /**
     * Get an existing Vm resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VmState, opts?: pulumi.CustomResourceOptions): Vm {
        return new Vm(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vmworkstation:index/vm:Vm';

    /**
     * Returns true if the given object is an instance of Vm.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vm {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vm.__pulumiType;
    }

    /**
     * The name of the resource
     */
    public readonly denomination!: pulumi.Output<string | undefined>;
    /**
     * Little bit description of the instance
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Which is the IP of the instance
     */
    public /*out*/ readonly ip!: pulumi.Output<string>;
    /**
     * How much memory will have the VM
     */
    public readonly memory!: pulumi.Output<number>;
    /**
     * Path absolute of the VM machine
     */
    public readonly path!: pulumi.Output<string>;
    /**
     * Number of processors that will have the VM
     */
    public readonly processors!: pulumi.Output<number>;
    /**
     * The ID of the VM that to use for clone at the new
     */
    public readonly sourceid!: pulumi.Output<string>;
    /**
     * Which will be the state of the VM when we will deploy it
     */
    public readonly state!: pulumi.Output<string | undefined>;

    /**
     * Create a Vm resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VmArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VmArgs | VmState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VmState | undefined;
            resourceInputs["denomination"] = state ? state.denomination : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["memory"] = state ? state.memory : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["processors"] = state ? state.processors : undefined;
            resourceInputs["sourceid"] = state ? state.sourceid : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
        } else {
            const args = argsOrState as VmArgs | undefined;
            if ((!args || args.memory === undefined) && !opts.urn) {
                throw new Error("Missing required property 'memory'");
            }
            if ((!args || args.path === undefined) && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            if ((!args || args.processors === undefined) && !opts.urn) {
                throw new Error("Missing required property 'processors'");
            }
            if ((!args || args.sourceid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceid'");
            }
            resourceInputs["denomination"] = args ? args.denomination : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["memory"] = args ? args.memory : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["processors"] = args ? args.processors : undefined;
            resourceInputs["sourceid"] = args ? args.sourceid : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["ip"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vm.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Vm resources.
 */
export interface VmState {
    /**
     * The name of the resource
     */
    denomination?: pulumi.Input<string>;
    /**
     * Little bit description of the instance
     */
    description?: pulumi.Input<string>;
    /**
     * Which is the IP of the instance
     */
    ip?: pulumi.Input<string>;
    /**
     * How much memory will have the VM
     */
    memory?: pulumi.Input<number>;
    /**
     * Path absolute of the VM machine
     */
    path?: pulumi.Input<string>;
    /**
     * Number of processors that will have the VM
     */
    processors?: pulumi.Input<number>;
    /**
     * The ID of the VM that to use for clone at the new
     */
    sourceid?: pulumi.Input<string>;
    /**
     * Which will be the state of the VM when we will deploy it
     */
    state?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Vm resource.
 */
export interface VmArgs {
    /**
     * The name of the resource
     */
    denomination?: pulumi.Input<string>;
    /**
     * Little bit description of the instance
     */
    description?: pulumi.Input<string>;
    /**
     * How much memory will have the VM
     */
    memory: pulumi.Input<number>;
    /**
     * Path absolute of the VM machine
     */
    path: pulumi.Input<string>;
    /**
     * Number of processors that will have the VM
     */
    processors: pulumi.Input<number>;
    /**
     * The ID of the VM that to use for clone at the new
     */
    sourceid: pulumi.Input<string>;
    /**
     * Which will be the state of the VM when we will deploy it
     */
    state?: pulumi.Input<string>;
}
