// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getPraPortalController(args?: GetPraPortalControllerArgs, opts?: pulumi.InvokeOptions): Promise<GetPraPortalControllerResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("zpa:index/getPraPortalController:getPraPortalController", {
        "id": args.id,
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getPraPortalController.
 */
export interface GetPraPortalControllerArgs {
    id?: string;
    name?: string;
}

/**
 * A collection of values returned by getPraPortalController.
 */
export interface GetPraPortalControllerResult {
    readonly certificateId: string;
    readonly certificateName: string;
    readonly cname: string;
    readonly creationTime: string;
    readonly description: string;
    readonly domain: string;
    readonly enabled: boolean;
    readonly id?: string;
    readonly microtenantId: string;
    readonly microtenantName: string;
    readonly modifiedBy: string;
    readonly modifiedTime: string;
    readonly name?: string;
    readonly userNotification: string;
    readonly userNotificationEnabled: boolean;
}
export function getPraPortalControllerOutput(args?: GetPraPortalControllerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPraPortalControllerResult> {
    return pulumi.output(args).apply((a: any) => getPraPortalController(a, opts))
}

/**
 * A collection of arguments for invoking getPraPortalController.
 */
export interface GetPraPortalControllerOutputArgs {
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}
