// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ServerGroup extends pulumi.CustomResource {
    /**
     * Get an existing ServerGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerGroupState, opts?: pulumi.CustomResourceOptions): ServerGroup {
        return new ServerGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zpa:index/serverGroup:ServerGroup';

    /**
     * Returns true if the given object is an instance of ServerGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServerGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServerGroup.__pulumiType;
    }

    /**
     * List of app-connector IDs.
     */
    public readonly appConnectorGroups!: pulumi.Output<outputs.ServerGroupAppConnectorGroup[] | undefined>;
    /**
     * This field is a json array of app-connector-id only.
     */
    public readonly applications!: pulumi.Output<outputs.ServerGroupApplication[] | undefined>;
    public readonly configSpace!: pulumi.Output<string | undefined>;
    /**
     * This field is the description of the server group.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * This field controls dynamic discovery of the servers.
     */
    public readonly dynamicDiscovery!: pulumi.Output<boolean | undefined>;
    /**
     * This field defines if the server group is enabled or disabled.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly ipAnchored!: pulumi.Output<boolean | undefined>;
    public readonly microtenantId!: pulumi.Output<string>;
    /**
     * This field defines the name of the server group.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * This field is a list of servers that are applicable only when dynamic discovery is disabled. Server name is required
     * only in cases where the new servers need to be created in this API. For existing servers, pass only the serverId.
     */
    public readonly servers!: pulumi.Output<outputs.ServerGroupServer[] | undefined>;

    /**
     * Create a ServerGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ServerGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerGroupArgs | ServerGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerGroupState | undefined;
            resourceInputs["appConnectorGroups"] = state ? state.appConnectorGroups : undefined;
            resourceInputs["applications"] = state ? state.applications : undefined;
            resourceInputs["configSpace"] = state ? state.configSpace : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dynamicDiscovery"] = state ? state.dynamicDiscovery : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["ipAnchored"] = state ? state.ipAnchored : undefined;
            resourceInputs["microtenantId"] = state ? state.microtenantId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["servers"] = state ? state.servers : undefined;
        } else {
            const args = argsOrState as ServerGroupArgs | undefined;
            resourceInputs["appConnectorGroups"] = args ? args.appConnectorGroups : undefined;
            resourceInputs["applications"] = args ? args.applications : undefined;
            resourceInputs["configSpace"] = args ? args.configSpace : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dynamicDiscovery"] = args ? args.dynamicDiscovery : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["ipAnchored"] = args ? args.ipAnchored : undefined;
            resourceInputs["microtenantId"] = args ? args.microtenantId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["servers"] = args ? args.servers : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServerGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ServerGroup resources.
 */
export interface ServerGroupState {
    /**
     * List of app-connector IDs.
     */
    appConnectorGroups?: pulumi.Input<pulumi.Input<inputs.ServerGroupAppConnectorGroup>[]>;
    /**
     * This field is a json array of app-connector-id only.
     */
    applications?: pulumi.Input<pulumi.Input<inputs.ServerGroupApplication>[]>;
    configSpace?: pulumi.Input<string>;
    /**
     * This field is the description of the server group.
     */
    description?: pulumi.Input<string>;
    /**
     * This field controls dynamic discovery of the servers.
     */
    dynamicDiscovery?: pulumi.Input<boolean>;
    /**
     * This field defines if the server group is enabled or disabled.
     */
    enabled?: pulumi.Input<boolean>;
    ipAnchored?: pulumi.Input<boolean>;
    microtenantId?: pulumi.Input<string>;
    /**
     * This field defines the name of the server group.
     */
    name?: pulumi.Input<string>;
    /**
     * This field is a list of servers that are applicable only when dynamic discovery is disabled. Server name is required
     * only in cases where the new servers need to be created in this API. For existing servers, pass only the serverId.
     */
    servers?: pulumi.Input<pulumi.Input<inputs.ServerGroupServer>[]>;
}

/**
 * The set of arguments for constructing a ServerGroup resource.
 */
export interface ServerGroupArgs {
    /**
     * List of app-connector IDs.
     */
    appConnectorGroups?: pulumi.Input<pulumi.Input<inputs.ServerGroupAppConnectorGroup>[]>;
    /**
     * This field is a json array of app-connector-id only.
     */
    applications?: pulumi.Input<pulumi.Input<inputs.ServerGroupApplication>[]>;
    configSpace?: pulumi.Input<string>;
    /**
     * This field is the description of the server group.
     */
    description?: pulumi.Input<string>;
    /**
     * This field controls dynamic discovery of the servers.
     */
    dynamicDiscovery?: pulumi.Input<boolean>;
    /**
     * This field defines if the server group is enabled or disabled.
     */
    enabled?: pulumi.Input<boolean>;
    ipAnchored?: pulumi.Input<boolean>;
    microtenantId?: pulumi.Input<string>;
    /**
     * This field defines the name of the server group.
     */
    name?: pulumi.Input<string>;
    /**
     * This field is a list of servers that are applicable only when dynamic discovery is disabled. Server name is required
     * only in cases where the new servers need to be created in this API. For existing servers, pass only the serverId.
     */
    servers?: pulumi.Input<pulumi.Input<inputs.ServerGroupServer>[]>;
}
