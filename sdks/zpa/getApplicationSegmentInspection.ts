// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getApplicationSegmentInspection(args?: GetApplicationSegmentInspectionArgs, opts?: pulumi.InvokeOptions): Promise<GetApplicationSegmentInspectionResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("zpa:index/getApplicationSegmentInspection:getApplicationSegmentInspection", {
        "id": args.id,
        "name": args.name,
        "tcpPortRange": args.tcpPortRange,
        "udpPortRange": args.udpPortRange,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getApplicationSegmentInspection.
 */
export interface GetApplicationSegmentInspectionArgs {
    id?: string;
    name?: string;
    tcpPortRange?: inputs.GetApplicationSegmentInspectionTcpPortRange[];
    udpPortRange?: inputs.GetApplicationSegmentInspectionUdpPortRange[];
}

/**
 * A collection of values returned by getApplicationSegmentInspection.
 */
export interface GetApplicationSegmentInspectionResult {
    readonly bypassType: string;
    readonly creationTime: string;
    readonly description: string;
    readonly domainNames: string[];
    readonly doubleEncrypt: boolean;
    readonly enabled: boolean;
    readonly healthCheckType: string;
    readonly healthReporting: string;
    readonly icmpAccessType: string;
    readonly id?: string;
    readonly inspectionApps: outputs.GetApplicationSegmentInspectionInspectionApp[];
    readonly ipAnchored: boolean;
    readonly isCnameEnabled: boolean;
    readonly modifiedBy: string;
    readonly modifiedTime: string;
    readonly name?: string;
    readonly passiveHealthEnabled: boolean;
    readonly segmentGroupId: string;
    readonly segmentGroupName: string;
    readonly selectConnectorCloseToApp: boolean;
    readonly serverGroups: outputs.GetApplicationSegmentInspectionServerGroup[];
    readonly tcpPortRange: outputs.GetApplicationSegmentInspectionTcpPortRange[];
    readonly tcpPortRanges: string[];
    readonly udpPortRange: outputs.GetApplicationSegmentInspectionUdpPortRange[];
    readonly udpPortRanges: string[];
}
export function getApplicationSegmentInspectionOutput(args?: GetApplicationSegmentInspectionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetApplicationSegmentInspectionResult> {
    return pulumi.output(args).apply((a: any) => getApplicationSegmentInspection(a, opts))
}

/**
 * A collection of arguments for invoking getApplicationSegmentInspection.
 */
export interface GetApplicationSegmentInspectionOutputArgs {
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tcpPortRange?: pulumi.Input<pulumi.Input<inputs.GetApplicationSegmentInspectionTcpPortRangeArgs>[]>;
    udpPortRange?: pulumi.Input<pulumi.Input<inputs.GetApplicationSegmentInspectionUdpPortRangeArgs>[]>;
}
