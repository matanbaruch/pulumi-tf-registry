// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getLssConfigController(args?: GetLssConfigControllerArgs, opts?: pulumi.InvokeOptions): Promise<GetLssConfigControllerResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("zpa:index/getLssConfigController:getLssConfigController", {
        "configs": args.configs,
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLssConfigController.
 */
export interface GetLssConfigControllerArgs {
    configs?: inputs.GetLssConfigControllerConfig[];
    id?: string;
}

/**
 * A collection of values returned by getLssConfigController.
 */
export interface GetLssConfigControllerResult {
    readonly configs?: outputs.GetLssConfigControllerConfig[];
    readonly connectorGroups: outputs.GetLssConfigControllerConnectorGroup[];
    readonly id?: string;
    readonly policyRules: outputs.GetLssConfigControllerPolicyRule[];
}
export function getLssConfigControllerOutput(args?: GetLssConfigControllerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLssConfigControllerResult> {
    return pulumi.output(args).apply((a: any) => getLssConfigController(a, opts))
}

/**
 * A collection of arguments for invoking getLssConfigController.
 */
export interface GetLssConfigControllerOutputArgs {
    configs?: pulumi.Input<pulumi.Input<inputs.GetLssConfigControllerConfigArgs>[]>;
    id?: pulumi.Input<string>;
}
