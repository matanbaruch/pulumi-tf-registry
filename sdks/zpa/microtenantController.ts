// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MicrotenantController extends pulumi.CustomResource {
    /**
     * Get an existing MicrotenantController resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MicrotenantControllerState, opts?: pulumi.CustomResourceOptions): MicrotenantController {
        return new MicrotenantController(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zpa:index/microtenantController:MicrotenantController';

    /**
     * Returns true if the given object is an instance of MicrotenantController.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MicrotenantController {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MicrotenantController.__pulumiType;
    }

    /**
     * The criteria attribute for the Microtenant. The supported value is AuthDomain.
     */
    public readonly criteriaAttribute!: pulumi.Output<string | undefined>;
    /**
     * The value for the criteria attribute. This is the valid authentication domains configured for a customer (e.g.,
     * ExampleAuthDomain.com).
     */
    public readonly criteriaAttributeValues!: pulumi.Output<string[]>;
    /**
     * The description of the Microtenant.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Whether or not the Microtenant is enabled.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Name of the microtenant.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Indicates if Privileged Approvals is enabled (true) for the Microtenant. This allows approval-based access even if no
     * Authentication Domain is selected.
     */
    public readonly privilegedApprovalsEnabled!: pulumi.Output<boolean | undefined>;
    public readonly users!: pulumi.Output<outputs.MicrotenantControllerUser[] | undefined>;

    /**
     * Create a MicrotenantController resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: MicrotenantControllerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MicrotenantControllerArgs | MicrotenantControllerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MicrotenantControllerState | undefined;
            resourceInputs["criteriaAttribute"] = state ? state.criteriaAttribute : undefined;
            resourceInputs["criteriaAttributeValues"] = state ? state.criteriaAttributeValues : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["privilegedApprovalsEnabled"] = state ? state.privilegedApprovalsEnabled : undefined;
            resourceInputs["users"] = state ? state.users : undefined;
        } else {
            const args = argsOrState as MicrotenantControllerArgs | undefined;
            resourceInputs["criteriaAttribute"] = args ? args.criteriaAttribute : undefined;
            resourceInputs["criteriaAttributeValues"] = args ? args.criteriaAttributeValues : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["privilegedApprovalsEnabled"] = args ? args.privilegedApprovalsEnabled : undefined;
            resourceInputs["users"] = args ? args.users : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MicrotenantController.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MicrotenantController resources.
 */
export interface MicrotenantControllerState {
    /**
     * The criteria attribute for the Microtenant. The supported value is AuthDomain.
     */
    criteriaAttribute?: pulumi.Input<string>;
    /**
     * The value for the criteria attribute. This is the valid authentication domains configured for a customer (e.g.,
     * ExampleAuthDomain.com).
     */
    criteriaAttributeValues?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The description of the Microtenant.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether or not the Microtenant is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Name of the microtenant.
     */
    name?: pulumi.Input<string>;
    /**
     * Indicates if Privileged Approvals is enabled (true) for the Microtenant. This allows approval-based access even if no
     * Authentication Domain is selected.
     */
    privilegedApprovalsEnabled?: pulumi.Input<boolean>;
    users?: pulumi.Input<pulumi.Input<inputs.MicrotenantControllerUser>[]>;
}

/**
 * The set of arguments for constructing a MicrotenantController resource.
 */
export interface MicrotenantControllerArgs {
    /**
     * The criteria attribute for the Microtenant. The supported value is AuthDomain.
     */
    criteriaAttribute?: pulumi.Input<string>;
    /**
     * The value for the criteria attribute. This is the valid authentication domains configured for a customer (e.g.,
     * ExampleAuthDomain.com).
     */
    criteriaAttributeValues?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The description of the Microtenant.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether or not the Microtenant is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Name of the microtenant.
     */
    name?: pulumi.Input<string>;
    /**
     * Indicates if Privileged Approvals is enabled (true) for the Microtenant. This allows approval-based access even if no
     * Authentication Domain is selected.
     */
    privilegedApprovalsEnabled?: pulumi.Input<boolean>;
    users?: pulumi.Input<pulumi.Input<inputs.MicrotenantControllerUser>[]>;
}
