// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIdpController(args?: GetIdpControllerArgs, opts?: pulumi.InvokeOptions): Promise<GetIdpControllerResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("zpa:index/getIdpController:getIdpController", {
        "id": args.id,
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIdpController.
 */
export interface GetIdpControllerArgs {
    id?: string;
    name?: string;
}

/**
 * A collection of values returned by getIdpController.
 */
export interface GetIdpControllerResult {
    readonly adminMetadatas: outputs.GetIdpControllerAdminMetadata[];
    readonly adminSpSigningCertId: string;
    readonly autoProvision: string;
    readonly creationTime: string;
    readonly description: string;
    readonly disableSamlBasedPolicy: boolean;
    readonly domainLists: string[];
    readonly enableArbitraryAuthDomains: string;
    readonly enableScimBasedPolicy: boolean;
    readonly enabled: boolean;
    readonly forceAuth: boolean;
    readonly id: string;
    readonly idpEntityId: string;
    readonly loginHint: boolean;
    readonly loginNameAttribute: string;
    readonly loginUrl: string;
    readonly modifiedTime: string;
    readonly modifiedby: string;
    readonly name: string;
    readonly reauthOnUserUpdate: boolean;
    readonly redirectBinding: boolean;
    readonly scimEnabled: boolean;
    readonly scimServiceProviderEndpoint: string;
    readonly scimSharedSecretExists: boolean;
    readonly signSamlRequest: string;
    readonly ssoTypes: string[];
    readonly useCustomSpMetadata: boolean;
    readonly userMetadatas: outputs.GetIdpControllerUserMetadata[];
    readonly userSpSigningCertId: string;
}
export function getIdpControllerOutput(args?: GetIdpControllerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIdpControllerResult> {
    return pulumi.output(args).apply((a: any) => getIdpController(a, opts))
}

/**
 * A collection of arguments for invoking getIdpController.
 */
export interface GetIdpControllerOutputArgs {
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}
