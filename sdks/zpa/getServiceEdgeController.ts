// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getServiceEdgeController(args?: GetServiceEdgeControllerArgs, opts?: pulumi.InvokeOptions): Promise<GetServiceEdgeControllerResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("zpa:index/getServiceEdgeController:getServiceEdgeController", {
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getServiceEdgeController.
 */
export interface GetServiceEdgeControllerArgs {
    name?: string;
}

/**
 * A collection of values returned by getServiceEdgeController.
 */
export interface GetServiceEdgeControllerResult {
    readonly applicationStartTime: string;
    readonly controlChannelStatus: string;
    readonly creationTime: string;
    readonly ctrlBrokerName: string;
    readonly currentVersion: string;
    readonly description: string;
    readonly enabled: boolean;
    readonly enrollmentCert: {[key: string]: string};
    readonly expectedUpgradeTime: string;
    readonly expectedVersion: string;
    readonly fingerprint: string;
    readonly id: string;
    readonly ipAcl: string;
    readonly issuedCertId: string;
    readonly lastBrokerConnectTime: string;
    readonly lastBrokerConnectTimeDuration: string;
    readonly lastBrokerDisconnectTime: string;
    readonly lastBrokerDisconnectTimeDuration: string;
    readonly lastUpgradeTime: string;
    readonly latitude: string;
    readonly listenIps: string;
    readonly location: string;
    readonly longitude: string;
    readonly modifiedBy: string;
    readonly modifiedTime: string;
    readonly name?: string;
    readonly platform: string;
    readonly previousVersion: string;
    readonly privateIp: string;
    readonly provisioningKeyId: string;
    readonly provisioningKeyName: string;
    readonly publicIp: string;
    readonly publishIps: string[];
    readonly sargeVersion: string;
    readonly serviceEdgeGroupId: string;
    readonly serviceEdgeGroupName: string;
    readonly upgradeAttempt: string;
    readonly upgradeStatus: string;
    readonly zpnSubModuleUpgradeLists: outputs.GetServiceEdgeControllerZpnSubModuleUpgradeList[];
}
export function getServiceEdgeControllerOutput(args?: GetServiceEdgeControllerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServiceEdgeControllerResult> {
    return pulumi.output(args).apply((a: any) => getServiceEdgeController(a, opts))
}

/**
 * A collection of arguments for invoking getServiceEdgeController.
 */
export interface GetServiceEdgeControllerOutputArgs {
    name?: pulumi.Input<string>;
}
