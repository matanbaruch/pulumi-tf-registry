// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AppConnectorAssistantScheduleArgs, AppConnectorAssistantScheduleState } from "./appConnectorAssistantSchedule";
export type AppConnectorAssistantSchedule = import("./appConnectorAssistantSchedule").AppConnectorAssistantSchedule;
export const AppConnectorAssistantSchedule: typeof import("./appConnectorAssistantSchedule").AppConnectorAssistantSchedule = null as any;
utilities.lazyLoad(exports, ["AppConnectorAssistantSchedule"], () => require("./appConnectorAssistantSchedule"));

export { AppConnectorGroupArgs, AppConnectorGroupState } from "./appConnectorGroup";
export type AppConnectorGroup = import("./appConnectorGroup").AppConnectorGroup;
export const AppConnectorGroup: typeof import("./appConnectorGroup").AppConnectorGroup = null as any;
utilities.lazyLoad(exports, ["AppConnectorGroup"], () => require("./appConnectorGroup"));

export { ApplicationSegmentArgs, ApplicationSegmentState } from "./applicationSegment";
export type ApplicationSegment = import("./applicationSegment").ApplicationSegment;
export const ApplicationSegment: typeof import("./applicationSegment").ApplicationSegment = null as any;
utilities.lazyLoad(exports, ["ApplicationSegment"], () => require("./applicationSegment"));

export { ApplicationSegmentBrowserAccessArgs, ApplicationSegmentBrowserAccessState } from "./applicationSegmentBrowserAccess";
export type ApplicationSegmentBrowserAccess = import("./applicationSegmentBrowserAccess").ApplicationSegmentBrowserAccess;
export const ApplicationSegmentBrowserAccess: typeof import("./applicationSegmentBrowserAccess").ApplicationSegmentBrowserAccess = null as any;
utilities.lazyLoad(exports, ["ApplicationSegmentBrowserAccess"], () => require("./applicationSegmentBrowserAccess"));

export { ApplicationSegmentInspectionArgs, ApplicationSegmentInspectionState } from "./applicationSegmentInspection";
export type ApplicationSegmentInspection = import("./applicationSegmentInspection").ApplicationSegmentInspection;
export const ApplicationSegmentInspection: typeof import("./applicationSegmentInspection").ApplicationSegmentInspection = null as any;
utilities.lazyLoad(exports, ["ApplicationSegmentInspection"], () => require("./applicationSegmentInspection"));

export { ApplicationSegmentPraArgs, ApplicationSegmentPraState } from "./applicationSegmentPra";
export type ApplicationSegmentPra = import("./applicationSegmentPra").ApplicationSegmentPra;
export const ApplicationSegmentPra: typeof import("./applicationSegmentPra").ApplicationSegmentPra = null as any;
utilities.lazyLoad(exports, ["ApplicationSegmentPra"], () => require("./applicationSegmentPra"));

export { ApplicationServerArgs, ApplicationServerState } from "./applicationServer";
export type ApplicationServer = import("./applicationServer").ApplicationServer;
export const ApplicationServer: typeof import("./applicationServer").ApplicationServer = null as any;
utilities.lazyLoad(exports, ["ApplicationServer"], () => require("./applicationServer"));

export { BaCertificateArgs, BaCertificateState } from "./baCertificate";
export type BaCertificate = import("./baCertificate").BaCertificate;
export const BaCertificate: typeof import("./baCertificate").BaCertificate = null as any;
utilities.lazyLoad(exports, ["BaCertificate"], () => require("./baCertificate"));

export { BrowserAccessArgs, BrowserAccessState } from "./browserAccess";
export type BrowserAccess = import("./browserAccess").BrowserAccess;
export const BrowserAccess: typeof import("./browserAccess").BrowserAccess = null as any;
utilities.lazyLoad(exports, ["BrowserAccess"], () => require("./browserAccess"));

export { CloudBrowserIsolationBannerArgs, CloudBrowserIsolationBannerState } from "./cloudBrowserIsolationBanner";
export type CloudBrowserIsolationBanner = import("./cloudBrowserIsolationBanner").CloudBrowserIsolationBanner;
export const CloudBrowserIsolationBanner: typeof import("./cloudBrowserIsolationBanner").CloudBrowserIsolationBanner = null as any;
utilities.lazyLoad(exports, ["CloudBrowserIsolationBanner"], () => require("./cloudBrowserIsolationBanner"));

export { CloudBrowserIsolationCertificateArgs, CloudBrowserIsolationCertificateState } from "./cloudBrowserIsolationCertificate";
export type CloudBrowserIsolationCertificate = import("./cloudBrowserIsolationCertificate").CloudBrowserIsolationCertificate;
export const CloudBrowserIsolationCertificate: typeof import("./cloudBrowserIsolationCertificate").CloudBrowserIsolationCertificate = null as any;
utilities.lazyLoad(exports, ["CloudBrowserIsolationCertificate"], () => require("./cloudBrowserIsolationCertificate"));

export { CloudBrowserIsolationExternalProfileArgs, CloudBrowserIsolationExternalProfileState } from "./cloudBrowserIsolationExternalProfile";
export type CloudBrowserIsolationExternalProfile = import("./cloudBrowserIsolationExternalProfile").CloudBrowserIsolationExternalProfile;
export const CloudBrowserIsolationExternalProfile: typeof import("./cloudBrowserIsolationExternalProfile").CloudBrowserIsolationExternalProfile = null as any;
utilities.lazyLoad(exports, ["CloudBrowserIsolationExternalProfile"], () => require("./cloudBrowserIsolationExternalProfile"));

export { EmergencyAccessUserArgs, EmergencyAccessUserState } from "./emergencyAccessUser";
export type EmergencyAccessUser = import("./emergencyAccessUser").EmergencyAccessUser;
export const EmergencyAccessUser: typeof import("./emergencyAccessUser").EmergencyAccessUser = null as any;
utilities.lazyLoad(exports, ["EmergencyAccessUser"], () => require("./emergencyAccessUser"));

export { GetAccessPolicyClientTypesArgs, GetAccessPolicyClientTypesResult, GetAccessPolicyClientTypesOutputArgs } from "./getAccessPolicyClientTypes";
export const getAccessPolicyClientTypes: typeof import("./getAccessPolicyClientTypes").getAccessPolicyClientTypes = null as any;
export const getAccessPolicyClientTypesOutput: typeof import("./getAccessPolicyClientTypes").getAccessPolicyClientTypesOutput = null as any;
utilities.lazyLoad(exports, ["getAccessPolicyClientTypes","getAccessPolicyClientTypesOutput"], () => require("./getAccessPolicyClientTypes"));

export { GetAccessPolicyPlatformsArgs, GetAccessPolicyPlatformsResult, GetAccessPolicyPlatformsOutputArgs } from "./getAccessPolicyPlatforms";
export const getAccessPolicyPlatforms: typeof import("./getAccessPolicyPlatforms").getAccessPolicyPlatforms = null as any;
export const getAccessPolicyPlatformsOutput: typeof import("./getAccessPolicyPlatforms").getAccessPolicyPlatformsOutput = null as any;
utilities.lazyLoad(exports, ["getAccessPolicyPlatforms","getAccessPolicyPlatformsOutput"], () => require("./getAccessPolicyPlatforms"));

export { GetAppConnectorAssistantScheduleArgs, GetAppConnectorAssistantScheduleResult, GetAppConnectorAssistantScheduleOutputArgs } from "./getAppConnectorAssistantSchedule";
export const getAppConnectorAssistantSchedule: typeof import("./getAppConnectorAssistantSchedule").getAppConnectorAssistantSchedule = null as any;
export const getAppConnectorAssistantScheduleOutput: typeof import("./getAppConnectorAssistantSchedule").getAppConnectorAssistantScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getAppConnectorAssistantSchedule","getAppConnectorAssistantScheduleOutput"], () => require("./getAppConnectorAssistantSchedule"));

export { GetAppConnectorControllerArgs, GetAppConnectorControllerResult, GetAppConnectorControllerOutputArgs } from "./getAppConnectorController";
export const getAppConnectorController: typeof import("./getAppConnectorController").getAppConnectorController = null as any;
export const getAppConnectorControllerOutput: typeof import("./getAppConnectorController").getAppConnectorControllerOutput = null as any;
utilities.lazyLoad(exports, ["getAppConnectorController","getAppConnectorControllerOutput"], () => require("./getAppConnectorController"));

export { GetAppConnectorGroupArgs, GetAppConnectorGroupResult, GetAppConnectorGroupOutputArgs } from "./getAppConnectorGroup";
export const getAppConnectorGroup: typeof import("./getAppConnectorGroup").getAppConnectorGroup = null as any;
export const getAppConnectorGroupOutput: typeof import("./getAppConnectorGroup").getAppConnectorGroupOutput = null as any;
utilities.lazyLoad(exports, ["getAppConnectorGroup","getAppConnectorGroupOutput"], () => require("./getAppConnectorGroup"));

export { GetApplicationSegmentArgs, GetApplicationSegmentResult, GetApplicationSegmentOutputArgs } from "./getApplicationSegment";
export const getApplicationSegment: typeof import("./getApplicationSegment").getApplicationSegment = null as any;
export const getApplicationSegmentOutput: typeof import("./getApplicationSegment").getApplicationSegmentOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationSegment","getApplicationSegmentOutput"], () => require("./getApplicationSegment"));

export { GetApplicationSegmentBrowserAccessArgs, GetApplicationSegmentBrowserAccessResult, GetApplicationSegmentBrowserAccessOutputArgs } from "./getApplicationSegmentBrowserAccess";
export const getApplicationSegmentBrowserAccess: typeof import("./getApplicationSegmentBrowserAccess").getApplicationSegmentBrowserAccess = null as any;
export const getApplicationSegmentBrowserAccessOutput: typeof import("./getApplicationSegmentBrowserAccess").getApplicationSegmentBrowserAccessOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationSegmentBrowserAccess","getApplicationSegmentBrowserAccessOutput"], () => require("./getApplicationSegmentBrowserAccess"));

export { GetApplicationSegmentByTypeArgs, GetApplicationSegmentByTypeResult, GetApplicationSegmentByTypeOutputArgs } from "./getApplicationSegmentByType";
export const getApplicationSegmentByType: typeof import("./getApplicationSegmentByType").getApplicationSegmentByType = null as any;
export const getApplicationSegmentByTypeOutput: typeof import("./getApplicationSegmentByType").getApplicationSegmentByTypeOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationSegmentByType","getApplicationSegmentByTypeOutput"], () => require("./getApplicationSegmentByType"));

export { GetApplicationSegmentInspectionArgs, GetApplicationSegmentInspectionResult, GetApplicationSegmentInspectionOutputArgs } from "./getApplicationSegmentInspection";
export const getApplicationSegmentInspection: typeof import("./getApplicationSegmentInspection").getApplicationSegmentInspection = null as any;
export const getApplicationSegmentInspectionOutput: typeof import("./getApplicationSegmentInspection").getApplicationSegmentInspectionOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationSegmentInspection","getApplicationSegmentInspectionOutput"], () => require("./getApplicationSegmentInspection"));

export { GetApplicationSegmentPraArgs, GetApplicationSegmentPraResult, GetApplicationSegmentPraOutputArgs } from "./getApplicationSegmentPra";
export const getApplicationSegmentPra: typeof import("./getApplicationSegmentPra").getApplicationSegmentPra = null as any;
export const getApplicationSegmentPraOutput: typeof import("./getApplicationSegmentPra").getApplicationSegmentPraOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationSegmentPra","getApplicationSegmentPraOutput"], () => require("./getApplicationSegmentPra"));

export { GetApplicationServerArgs, GetApplicationServerResult, GetApplicationServerOutputArgs } from "./getApplicationServer";
export const getApplicationServer: typeof import("./getApplicationServer").getApplicationServer = null as any;
export const getApplicationServerOutput: typeof import("./getApplicationServer").getApplicationServerOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationServer","getApplicationServerOutput"], () => require("./getApplicationServer"));

export { GetBaCertificateArgs, GetBaCertificateResult, GetBaCertificateOutputArgs } from "./getBaCertificate";
export const getBaCertificate: typeof import("./getBaCertificate").getBaCertificate = null as any;
export const getBaCertificateOutput: typeof import("./getBaCertificate").getBaCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getBaCertificate","getBaCertificateOutput"], () => require("./getBaCertificate"));

export { GetCloudBrowserIsolationBannerArgs, GetCloudBrowserIsolationBannerResult, GetCloudBrowserIsolationBannerOutputArgs } from "./getCloudBrowserIsolationBanner";
export const getCloudBrowserIsolationBanner: typeof import("./getCloudBrowserIsolationBanner").getCloudBrowserIsolationBanner = null as any;
export const getCloudBrowserIsolationBannerOutput: typeof import("./getCloudBrowserIsolationBanner").getCloudBrowserIsolationBannerOutput = null as any;
utilities.lazyLoad(exports, ["getCloudBrowserIsolationBanner","getCloudBrowserIsolationBannerOutput"], () => require("./getCloudBrowserIsolationBanner"));

export { GetCloudBrowserIsolationCertificateArgs, GetCloudBrowserIsolationCertificateResult, GetCloudBrowserIsolationCertificateOutputArgs } from "./getCloudBrowserIsolationCertificate";
export const getCloudBrowserIsolationCertificate: typeof import("./getCloudBrowserIsolationCertificate").getCloudBrowserIsolationCertificate = null as any;
export const getCloudBrowserIsolationCertificateOutput: typeof import("./getCloudBrowserIsolationCertificate").getCloudBrowserIsolationCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getCloudBrowserIsolationCertificate","getCloudBrowserIsolationCertificateOutput"], () => require("./getCloudBrowserIsolationCertificate"));

export { GetCloudBrowserIsolationExternalProfileArgs, GetCloudBrowserIsolationExternalProfileResult, GetCloudBrowserIsolationExternalProfileOutputArgs } from "./getCloudBrowserIsolationExternalProfile";
export const getCloudBrowserIsolationExternalProfile: typeof import("./getCloudBrowserIsolationExternalProfile").getCloudBrowserIsolationExternalProfile = null as any;
export const getCloudBrowserIsolationExternalProfileOutput: typeof import("./getCloudBrowserIsolationExternalProfile").getCloudBrowserIsolationExternalProfileOutput = null as any;
utilities.lazyLoad(exports, ["getCloudBrowserIsolationExternalProfile","getCloudBrowserIsolationExternalProfileOutput"], () => require("./getCloudBrowserIsolationExternalProfile"));

export { GetCloudBrowserIsolationRegionArgs, GetCloudBrowserIsolationRegionResult, GetCloudBrowserIsolationRegionOutputArgs } from "./getCloudBrowserIsolationRegion";
export const getCloudBrowserIsolationRegion: typeof import("./getCloudBrowserIsolationRegion").getCloudBrowserIsolationRegion = null as any;
export const getCloudBrowserIsolationRegionOutput: typeof import("./getCloudBrowserIsolationRegion").getCloudBrowserIsolationRegionOutput = null as any;
utilities.lazyLoad(exports, ["getCloudBrowserIsolationRegion","getCloudBrowserIsolationRegionOutput"], () => require("./getCloudBrowserIsolationRegion"));

export { GetCloudBrowserIsolationZpaProfileArgs, GetCloudBrowserIsolationZpaProfileResult, GetCloudBrowserIsolationZpaProfileOutputArgs } from "./getCloudBrowserIsolationZpaProfile";
export const getCloudBrowserIsolationZpaProfile: typeof import("./getCloudBrowserIsolationZpaProfile").getCloudBrowserIsolationZpaProfile = null as any;
export const getCloudBrowserIsolationZpaProfileOutput: typeof import("./getCloudBrowserIsolationZpaProfile").getCloudBrowserIsolationZpaProfileOutput = null as any;
utilities.lazyLoad(exports, ["getCloudBrowserIsolationZpaProfile","getCloudBrowserIsolationZpaProfileOutput"], () => require("./getCloudBrowserIsolationZpaProfile"));

export { GetCloudConnectorGroupArgs, GetCloudConnectorGroupResult, GetCloudConnectorGroupOutputArgs } from "./getCloudConnectorGroup";
export const getCloudConnectorGroup: typeof import("./getCloudConnectorGroup").getCloudConnectorGroup = null as any;
export const getCloudConnectorGroupOutput: typeof import("./getCloudConnectorGroup").getCloudConnectorGroupOutput = null as any;
utilities.lazyLoad(exports, ["getCloudConnectorGroup","getCloudConnectorGroupOutput"], () => require("./getCloudConnectorGroup"));

export { GetCustomerVersionProfileArgs, GetCustomerVersionProfileResult, GetCustomerVersionProfileOutputArgs } from "./getCustomerVersionProfile";
export const getCustomerVersionProfile: typeof import("./getCustomerVersionProfile").getCustomerVersionProfile = null as any;
export const getCustomerVersionProfileOutput: typeof import("./getCustomerVersionProfile").getCustomerVersionProfileOutput = null as any;
utilities.lazyLoad(exports, ["getCustomerVersionProfile","getCustomerVersionProfileOutput"], () => require("./getCustomerVersionProfile"));

export { GetEnrollmentCertArgs, GetEnrollmentCertResult, GetEnrollmentCertOutputArgs } from "./getEnrollmentCert";
export const getEnrollmentCert: typeof import("./getEnrollmentCert").getEnrollmentCert = null as any;
export const getEnrollmentCertOutput: typeof import("./getEnrollmentCert").getEnrollmentCertOutput = null as any;
utilities.lazyLoad(exports, ["getEnrollmentCert","getEnrollmentCertOutput"], () => require("./getEnrollmentCert"));

export { GetIdpControllerArgs, GetIdpControllerResult, GetIdpControllerOutputArgs } from "./getIdpController";
export const getIdpController: typeof import("./getIdpController").getIdpController = null as any;
export const getIdpControllerOutput: typeof import("./getIdpController").getIdpControllerOutput = null as any;
utilities.lazyLoad(exports, ["getIdpController","getIdpControllerOutput"], () => require("./getIdpController"));

export { GetInspectionAllPredefinedControlsArgs, GetInspectionAllPredefinedControlsResult, GetInspectionAllPredefinedControlsOutputArgs } from "./getInspectionAllPredefinedControls";
export const getInspectionAllPredefinedControls: typeof import("./getInspectionAllPredefinedControls").getInspectionAllPredefinedControls = null as any;
export const getInspectionAllPredefinedControlsOutput: typeof import("./getInspectionAllPredefinedControls").getInspectionAllPredefinedControlsOutput = null as any;
utilities.lazyLoad(exports, ["getInspectionAllPredefinedControls","getInspectionAllPredefinedControlsOutput"], () => require("./getInspectionAllPredefinedControls"));

export { GetInspectionCustomControlsArgs, GetInspectionCustomControlsResult, GetInspectionCustomControlsOutputArgs } from "./getInspectionCustomControls";
export const getInspectionCustomControls: typeof import("./getInspectionCustomControls").getInspectionCustomControls = null as any;
export const getInspectionCustomControlsOutput: typeof import("./getInspectionCustomControls").getInspectionCustomControlsOutput = null as any;
utilities.lazyLoad(exports, ["getInspectionCustomControls","getInspectionCustomControlsOutput"], () => require("./getInspectionCustomControls"));

export { GetInspectionPredefinedControlsArgs, GetInspectionPredefinedControlsResult, GetInspectionPredefinedControlsOutputArgs } from "./getInspectionPredefinedControls";
export const getInspectionPredefinedControls: typeof import("./getInspectionPredefinedControls").getInspectionPredefinedControls = null as any;
export const getInspectionPredefinedControlsOutput: typeof import("./getInspectionPredefinedControls").getInspectionPredefinedControlsOutput = null as any;
utilities.lazyLoad(exports, ["getInspectionPredefinedControls","getInspectionPredefinedControlsOutput"], () => require("./getInspectionPredefinedControls"));

export { GetInspectionProfileArgs, GetInspectionProfileResult, GetInspectionProfileOutputArgs } from "./getInspectionProfile";
export const getInspectionProfile: typeof import("./getInspectionProfile").getInspectionProfile = null as any;
export const getInspectionProfileOutput: typeof import("./getInspectionProfile").getInspectionProfileOutput = null as any;
utilities.lazyLoad(exports, ["getInspectionProfile","getInspectionProfileOutput"], () => require("./getInspectionProfile"));

export { GetIsolationProfileArgs, GetIsolationProfileResult, GetIsolationProfileOutputArgs } from "./getIsolationProfile";
export const getIsolationProfile: typeof import("./getIsolationProfile").getIsolationProfile = null as any;
export const getIsolationProfileOutput: typeof import("./getIsolationProfile").getIsolationProfileOutput = null as any;
utilities.lazyLoad(exports, ["getIsolationProfile","getIsolationProfileOutput"], () => require("./getIsolationProfile"));

export { GetLssConfigClientTypesArgs, GetLssConfigClientTypesResult, GetLssConfigClientTypesOutputArgs } from "./getLssConfigClientTypes";
export const getLssConfigClientTypes: typeof import("./getLssConfigClientTypes").getLssConfigClientTypes = null as any;
export const getLssConfigClientTypesOutput: typeof import("./getLssConfigClientTypes").getLssConfigClientTypesOutput = null as any;
utilities.lazyLoad(exports, ["getLssConfigClientTypes","getLssConfigClientTypesOutput"], () => require("./getLssConfigClientTypes"));

export { GetLssConfigControllerArgs, GetLssConfigControllerResult, GetLssConfigControllerOutputArgs } from "./getLssConfigController";
export const getLssConfigController: typeof import("./getLssConfigController").getLssConfigController = null as any;
export const getLssConfigControllerOutput: typeof import("./getLssConfigController").getLssConfigControllerOutput = null as any;
utilities.lazyLoad(exports, ["getLssConfigController","getLssConfigControllerOutput"], () => require("./getLssConfigController"));

export { GetLssConfigLogTypeFormatsArgs, GetLssConfigLogTypeFormatsResult, GetLssConfigLogTypeFormatsOutputArgs } from "./getLssConfigLogTypeFormats";
export const getLssConfigLogTypeFormats: typeof import("./getLssConfigLogTypeFormats").getLssConfigLogTypeFormats = null as any;
export const getLssConfigLogTypeFormatsOutput: typeof import("./getLssConfigLogTypeFormats").getLssConfigLogTypeFormatsOutput = null as any;
utilities.lazyLoad(exports, ["getLssConfigLogTypeFormats","getLssConfigLogTypeFormatsOutput"], () => require("./getLssConfigLogTypeFormats"));

export { GetLssConfigStatusCodesArgs, GetLssConfigStatusCodesResult, GetLssConfigStatusCodesOutputArgs } from "./getLssConfigStatusCodes";
export const getLssConfigStatusCodes: typeof import("./getLssConfigStatusCodes").getLssConfigStatusCodes = null as any;
export const getLssConfigStatusCodesOutput: typeof import("./getLssConfigStatusCodes").getLssConfigStatusCodesOutput = null as any;
utilities.lazyLoad(exports, ["getLssConfigStatusCodes","getLssConfigStatusCodesOutput"], () => require("./getLssConfigStatusCodes"));

export { GetMachineGroupArgs, GetMachineGroupResult, GetMachineGroupOutputArgs } from "./getMachineGroup";
export const getMachineGroup: typeof import("./getMachineGroup").getMachineGroup = null as any;
export const getMachineGroupOutput: typeof import("./getMachineGroup").getMachineGroupOutput = null as any;
utilities.lazyLoad(exports, ["getMachineGroup","getMachineGroupOutput"], () => require("./getMachineGroup"));

export { GetMicrotenantControllerArgs, GetMicrotenantControllerResult, GetMicrotenantControllerOutputArgs } from "./getMicrotenantController";
export const getMicrotenantController: typeof import("./getMicrotenantController").getMicrotenantController = null as any;
export const getMicrotenantControllerOutput: typeof import("./getMicrotenantController").getMicrotenantControllerOutput = null as any;
utilities.lazyLoad(exports, ["getMicrotenantController","getMicrotenantControllerOutput"], () => require("./getMicrotenantController"));

export { GetPolicyTypeArgs, GetPolicyTypeResult, GetPolicyTypeOutputArgs } from "./getPolicyType";
export const getPolicyType: typeof import("./getPolicyType").getPolicyType = null as any;
export const getPolicyTypeOutput: typeof import("./getPolicyType").getPolicyTypeOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyType","getPolicyTypeOutput"], () => require("./getPolicyType"));

export { GetPostureProfileArgs, GetPostureProfileResult, GetPostureProfileOutputArgs } from "./getPostureProfile";
export const getPostureProfile: typeof import("./getPostureProfile").getPostureProfile = null as any;
export const getPostureProfileOutput: typeof import("./getPostureProfile").getPostureProfileOutput = null as any;
utilities.lazyLoad(exports, ["getPostureProfile","getPostureProfileOutput"], () => require("./getPostureProfile"));

export { GetPraApprovalControllerArgs, GetPraApprovalControllerResult, GetPraApprovalControllerOutputArgs } from "./getPraApprovalController";
export const getPraApprovalController: typeof import("./getPraApprovalController").getPraApprovalController = null as any;
export const getPraApprovalControllerOutput: typeof import("./getPraApprovalController").getPraApprovalControllerOutput = null as any;
utilities.lazyLoad(exports, ["getPraApprovalController","getPraApprovalControllerOutput"], () => require("./getPraApprovalController"));

export { GetPraConsoleControllerArgs, GetPraConsoleControllerResult, GetPraConsoleControllerOutputArgs } from "./getPraConsoleController";
export const getPraConsoleController: typeof import("./getPraConsoleController").getPraConsoleController = null as any;
export const getPraConsoleControllerOutput: typeof import("./getPraConsoleController").getPraConsoleControllerOutput = null as any;
utilities.lazyLoad(exports, ["getPraConsoleController","getPraConsoleControllerOutput"], () => require("./getPraConsoleController"));

export { GetPraCredentialControllerArgs, GetPraCredentialControllerResult, GetPraCredentialControllerOutputArgs } from "./getPraCredentialController";
export const getPraCredentialController: typeof import("./getPraCredentialController").getPraCredentialController = null as any;
export const getPraCredentialControllerOutput: typeof import("./getPraCredentialController").getPraCredentialControllerOutput = null as any;
utilities.lazyLoad(exports, ["getPraCredentialController","getPraCredentialControllerOutput"], () => require("./getPraCredentialController"));

export { GetPraPortalControllerArgs, GetPraPortalControllerResult, GetPraPortalControllerOutputArgs } from "./getPraPortalController";
export const getPraPortalController: typeof import("./getPraPortalController").getPraPortalController = null as any;
export const getPraPortalControllerOutput: typeof import("./getPraPortalController").getPraPortalControllerOutput = null as any;
utilities.lazyLoad(exports, ["getPraPortalController","getPraPortalControllerOutput"], () => require("./getPraPortalController"));

export { GetProvisioningKeyArgs, GetProvisioningKeyResult, GetProvisioningKeyOutputArgs } from "./getProvisioningKey";
export const getProvisioningKey: typeof import("./getProvisioningKey").getProvisioningKey = null as any;
export const getProvisioningKeyOutput: typeof import("./getProvisioningKey").getProvisioningKeyOutput = null as any;
utilities.lazyLoad(exports, ["getProvisioningKey","getProvisioningKeyOutput"], () => require("./getProvisioningKey"));

export { GetSamlAttributeArgs, GetSamlAttributeResult, GetSamlAttributeOutputArgs } from "./getSamlAttribute";
export const getSamlAttribute: typeof import("./getSamlAttribute").getSamlAttribute = null as any;
export const getSamlAttributeOutput: typeof import("./getSamlAttribute").getSamlAttributeOutput = null as any;
utilities.lazyLoad(exports, ["getSamlAttribute","getSamlAttributeOutput"], () => require("./getSamlAttribute"));

export { GetScimAttributeHeaderArgs, GetScimAttributeHeaderResult, GetScimAttributeHeaderOutputArgs } from "./getScimAttributeHeader";
export const getScimAttributeHeader: typeof import("./getScimAttributeHeader").getScimAttributeHeader = null as any;
export const getScimAttributeHeaderOutput: typeof import("./getScimAttributeHeader").getScimAttributeHeaderOutput = null as any;
utilities.lazyLoad(exports, ["getScimAttributeHeader","getScimAttributeHeaderOutput"], () => require("./getScimAttributeHeader"));

export { GetScimGroupsArgs, GetScimGroupsResult, GetScimGroupsOutputArgs } from "./getScimGroups";
export const getScimGroups: typeof import("./getScimGroups").getScimGroups = null as any;
export const getScimGroupsOutput: typeof import("./getScimGroups").getScimGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getScimGroups","getScimGroupsOutput"], () => require("./getScimGroups"));

export { GetSegmentGroupArgs, GetSegmentGroupResult, GetSegmentGroupOutputArgs } from "./getSegmentGroup";
export const getSegmentGroup: typeof import("./getSegmentGroup").getSegmentGroup = null as any;
export const getSegmentGroupOutput: typeof import("./getSegmentGroup").getSegmentGroupOutput = null as any;
utilities.lazyLoad(exports, ["getSegmentGroup","getSegmentGroupOutput"], () => require("./getSegmentGroup"));

export { GetServerGroupArgs, GetServerGroupResult, GetServerGroupOutputArgs } from "./getServerGroup";
export const getServerGroup: typeof import("./getServerGroup").getServerGroup = null as any;
export const getServerGroupOutput: typeof import("./getServerGroup").getServerGroupOutput = null as any;
utilities.lazyLoad(exports, ["getServerGroup","getServerGroupOutput"], () => require("./getServerGroup"));

export { GetServiceEdgeAssistantScheduleArgs, GetServiceEdgeAssistantScheduleResult, GetServiceEdgeAssistantScheduleOutputArgs } from "./getServiceEdgeAssistantSchedule";
export const getServiceEdgeAssistantSchedule: typeof import("./getServiceEdgeAssistantSchedule").getServiceEdgeAssistantSchedule = null as any;
export const getServiceEdgeAssistantScheduleOutput: typeof import("./getServiceEdgeAssistantSchedule").getServiceEdgeAssistantScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getServiceEdgeAssistantSchedule","getServiceEdgeAssistantScheduleOutput"], () => require("./getServiceEdgeAssistantSchedule"));

export { GetServiceEdgeControllerArgs, GetServiceEdgeControllerResult, GetServiceEdgeControllerOutputArgs } from "./getServiceEdgeController";
export const getServiceEdgeController: typeof import("./getServiceEdgeController").getServiceEdgeController = null as any;
export const getServiceEdgeControllerOutput: typeof import("./getServiceEdgeController").getServiceEdgeControllerOutput = null as any;
utilities.lazyLoad(exports, ["getServiceEdgeController","getServiceEdgeControllerOutput"], () => require("./getServiceEdgeController"));

export { GetServiceEdgeGroupArgs, GetServiceEdgeGroupResult, GetServiceEdgeGroupOutputArgs } from "./getServiceEdgeGroup";
export const getServiceEdgeGroup: typeof import("./getServiceEdgeGroup").getServiceEdgeGroup = null as any;
export const getServiceEdgeGroupOutput: typeof import("./getServiceEdgeGroup").getServiceEdgeGroupOutput = null as any;
utilities.lazyLoad(exports, ["getServiceEdgeGroup","getServiceEdgeGroupOutput"], () => require("./getServiceEdgeGroup"));

export { GetTrustedNetworkArgs, GetTrustedNetworkResult, GetTrustedNetworkOutputArgs } from "./getTrustedNetwork";
export const getTrustedNetwork: typeof import("./getTrustedNetwork").getTrustedNetwork = null as any;
export const getTrustedNetworkOutput: typeof import("./getTrustedNetwork").getTrustedNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getTrustedNetwork","getTrustedNetworkOutput"], () => require("./getTrustedNetwork"));

export { InspectionCustomControlsArgs, InspectionCustomControlsState } from "./inspectionCustomControls";
export type InspectionCustomControls = import("./inspectionCustomControls").InspectionCustomControls;
export const InspectionCustomControls: typeof import("./inspectionCustomControls").InspectionCustomControls = null as any;
utilities.lazyLoad(exports, ["InspectionCustomControls"], () => require("./inspectionCustomControls"));

export { InspectionProfileArgs, InspectionProfileState } from "./inspectionProfile";
export type InspectionProfile = import("./inspectionProfile").InspectionProfile;
export const InspectionProfile: typeof import("./inspectionProfile").InspectionProfile = null as any;
utilities.lazyLoad(exports, ["InspectionProfile"], () => require("./inspectionProfile"));

export { LssConfigControllerArgs, LssConfigControllerState } from "./lssConfigController";
export type LssConfigController = import("./lssConfigController").LssConfigController;
export const LssConfigController: typeof import("./lssConfigController").LssConfigController = null as any;
utilities.lazyLoad(exports, ["LssConfigController"], () => require("./lssConfigController"));

export { MicrotenantControllerArgs, MicrotenantControllerState } from "./microtenantController";
export type MicrotenantController = import("./microtenantController").MicrotenantController;
export const MicrotenantController: typeof import("./microtenantController").MicrotenantController = null as any;
utilities.lazyLoad(exports, ["MicrotenantController"], () => require("./microtenantController"));

export { PolicyAccessRuleArgs, PolicyAccessRuleState } from "./policyAccessRule";
export type PolicyAccessRule = import("./policyAccessRule").PolicyAccessRule;
export const PolicyAccessRule: typeof import("./policyAccessRule").PolicyAccessRule = null as any;
utilities.lazyLoad(exports, ["PolicyAccessRule"], () => require("./policyAccessRule"));

export { PolicyAccessRuleReorderArgs, PolicyAccessRuleReorderState } from "./policyAccessRuleReorder";
export type PolicyAccessRuleReorder = import("./policyAccessRuleReorder").PolicyAccessRuleReorder;
export const PolicyAccessRuleReorder: typeof import("./policyAccessRuleReorder").PolicyAccessRuleReorder = null as any;
utilities.lazyLoad(exports, ["PolicyAccessRuleReorder"], () => require("./policyAccessRuleReorder"));

export { PolicyAccessRuleV2Args, PolicyAccessRuleV2State } from "./policyAccessRuleV2";
export type PolicyAccessRuleV2 = import("./policyAccessRuleV2").PolicyAccessRuleV2;
export const PolicyAccessRuleV2: typeof import("./policyAccessRuleV2").PolicyAccessRuleV2 = null as any;
utilities.lazyLoad(exports, ["PolicyAccessRuleV2"], () => require("./policyAccessRuleV2"));

export { PolicyCapabilitiesRuleArgs, PolicyCapabilitiesRuleState } from "./policyCapabilitiesRule";
export type PolicyCapabilitiesRule = import("./policyCapabilitiesRule").PolicyCapabilitiesRule;
export const PolicyCapabilitiesRule: typeof import("./policyCapabilitiesRule").PolicyCapabilitiesRule = null as any;
utilities.lazyLoad(exports, ["PolicyCapabilitiesRule"], () => require("./policyCapabilitiesRule"));

export { PolicyCredentialRuleArgs, PolicyCredentialRuleState } from "./policyCredentialRule";
export type PolicyCredentialRule = import("./policyCredentialRule").PolicyCredentialRule;
export const PolicyCredentialRule: typeof import("./policyCredentialRule").PolicyCredentialRule = null as any;
utilities.lazyLoad(exports, ["PolicyCredentialRule"], () => require("./policyCredentialRule"));

export { PolicyForwardingRuleArgs, PolicyForwardingRuleState } from "./policyForwardingRule";
export type PolicyForwardingRule = import("./policyForwardingRule").PolicyForwardingRule;
export const PolicyForwardingRule: typeof import("./policyForwardingRule").PolicyForwardingRule = null as any;
utilities.lazyLoad(exports, ["PolicyForwardingRule"], () => require("./policyForwardingRule"));

export { PolicyForwardingRuleV2Args, PolicyForwardingRuleV2State } from "./policyForwardingRuleV2";
export type PolicyForwardingRuleV2 = import("./policyForwardingRuleV2").PolicyForwardingRuleV2;
export const PolicyForwardingRuleV2: typeof import("./policyForwardingRuleV2").PolicyForwardingRuleV2 = null as any;
utilities.lazyLoad(exports, ["PolicyForwardingRuleV2"], () => require("./policyForwardingRuleV2"));

export { PolicyInspectionRuleArgs, PolicyInspectionRuleState } from "./policyInspectionRule";
export type PolicyInspectionRule = import("./policyInspectionRule").PolicyInspectionRule;
export const PolicyInspectionRule: typeof import("./policyInspectionRule").PolicyInspectionRule = null as any;
utilities.lazyLoad(exports, ["PolicyInspectionRule"], () => require("./policyInspectionRule"));

export { PolicyInspectionRuleV2Args, PolicyInspectionRuleV2State } from "./policyInspectionRuleV2";
export type PolicyInspectionRuleV2 = import("./policyInspectionRuleV2").PolicyInspectionRuleV2;
export const PolicyInspectionRuleV2: typeof import("./policyInspectionRuleV2").PolicyInspectionRuleV2 = null as any;
utilities.lazyLoad(exports, ["PolicyInspectionRuleV2"], () => require("./policyInspectionRuleV2"));

export { PolicyIsolationRuleArgs, PolicyIsolationRuleState } from "./policyIsolationRule";
export type PolicyIsolationRule = import("./policyIsolationRule").PolicyIsolationRule;
export const PolicyIsolationRule: typeof import("./policyIsolationRule").PolicyIsolationRule = null as any;
utilities.lazyLoad(exports, ["PolicyIsolationRule"], () => require("./policyIsolationRule"));

export { PolicyIsolationRuleV2Args, PolicyIsolationRuleV2State } from "./policyIsolationRuleV2";
export type PolicyIsolationRuleV2 = import("./policyIsolationRuleV2").PolicyIsolationRuleV2;
export const PolicyIsolationRuleV2: typeof import("./policyIsolationRuleV2").PolicyIsolationRuleV2 = null as any;
utilities.lazyLoad(exports, ["PolicyIsolationRuleV2"], () => require("./policyIsolationRuleV2"));

export { PolicyRedirectionRuleArgs, PolicyRedirectionRuleState } from "./policyRedirectionRule";
export type PolicyRedirectionRule = import("./policyRedirectionRule").PolicyRedirectionRule;
export const PolicyRedirectionRule: typeof import("./policyRedirectionRule").PolicyRedirectionRule = null as any;
utilities.lazyLoad(exports, ["PolicyRedirectionRule"], () => require("./policyRedirectionRule"));

export { PolicyTimeoutRuleArgs, PolicyTimeoutRuleState } from "./policyTimeoutRule";
export type PolicyTimeoutRule = import("./policyTimeoutRule").PolicyTimeoutRule;
export const PolicyTimeoutRule: typeof import("./policyTimeoutRule").PolicyTimeoutRule = null as any;
utilities.lazyLoad(exports, ["PolicyTimeoutRule"], () => require("./policyTimeoutRule"));

export { PolicyTimeoutRuleV2Args, PolicyTimeoutRuleV2State } from "./policyTimeoutRuleV2";
export type PolicyTimeoutRuleV2 = import("./policyTimeoutRuleV2").PolicyTimeoutRuleV2;
export const PolicyTimeoutRuleV2: typeof import("./policyTimeoutRuleV2").PolicyTimeoutRuleV2 = null as any;
utilities.lazyLoad(exports, ["PolicyTimeoutRuleV2"], () => require("./policyTimeoutRuleV2"));

export { PraApprovalControllerArgs, PraApprovalControllerState } from "./praApprovalController";
export type PraApprovalController = import("./praApprovalController").PraApprovalController;
export const PraApprovalController: typeof import("./praApprovalController").PraApprovalController = null as any;
utilities.lazyLoad(exports, ["PraApprovalController"], () => require("./praApprovalController"));

export { PraConsoleControllerArgs, PraConsoleControllerState } from "./praConsoleController";
export type PraConsoleController = import("./praConsoleController").PraConsoleController;
export const PraConsoleController: typeof import("./praConsoleController").PraConsoleController = null as any;
utilities.lazyLoad(exports, ["PraConsoleController"], () => require("./praConsoleController"));

export { PraCredentialControllerArgs, PraCredentialControllerState } from "./praCredentialController";
export type PraCredentialController = import("./praCredentialController").PraCredentialController;
export const PraCredentialController: typeof import("./praCredentialController").PraCredentialController = null as any;
utilities.lazyLoad(exports, ["PraCredentialController"], () => require("./praCredentialController"));

export { PraPortalControllerArgs, PraPortalControllerState } from "./praPortalController";
export type PraPortalController = import("./praPortalController").PraPortalController;
export const PraPortalController: typeof import("./praPortalController").PraPortalController = null as any;
utilities.lazyLoad(exports, ["PraPortalController"], () => require("./praPortalController"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ProvisioningKeyArgs, ProvisioningKeyState } from "./provisioningKey";
export type ProvisioningKey = import("./provisioningKey").ProvisioningKey;
export const ProvisioningKey: typeof import("./provisioningKey").ProvisioningKey = null as any;
utilities.lazyLoad(exports, ["ProvisioningKey"], () => require("./provisioningKey"));

export { SegmentGroupArgs, SegmentGroupState } from "./segmentGroup";
export type SegmentGroup = import("./segmentGroup").SegmentGroup;
export const SegmentGroup: typeof import("./segmentGroup").SegmentGroup = null as any;
utilities.lazyLoad(exports, ["SegmentGroup"], () => require("./segmentGroup"));

export { ServerGroupArgs, ServerGroupState } from "./serverGroup";
export type ServerGroup = import("./serverGroup").ServerGroup;
export const ServerGroup: typeof import("./serverGroup").ServerGroup = null as any;
utilities.lazyLoad(exports, ["ServerGroup"], () => require("./serverGroup"));

export { ServiceEdgeAssistantScheduleArgs, ServiceEdgeAssistantScheduleState } from "./serviceEdgeAssistantSchedule";
export type ServiceEdgeAssistantSchedule = import("./serviceEdgeAssistantSchedule").ServiceEdgeAssistantSchedule;
export const ServiceEdgeAssistantSchedule: typeof import("./serviceEdgeAssistantSchedule").ServiceEdgeAssistantSchedule = null as any;
utilities.lazyLoad(exports, ["ServiceEdgeAssistantSchedule"], () => require("./serviceEdgeAssistantSchedule"));

export { ServiceEdgeGroupArgs, ServiceEdgeGroupState } from "./serviceEdgeGroup";
export type ServiceEdgeGroup = import("./serviceEdgeGroup").ServiceEdgeGroup;
export const ServiceEdgeGroup: typeof import("./serviceEdgeGroup").ServiceEdgeGroup = null as any;
utilities.lazyLoad(exports, ["ServiceEdgeGroup"], () => require("./serviceEdgeGroup"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "zpa:index/appConnectorAssistantSchedule:AppConnectorAssistantSchedule":
                return new AppConnectorAssistantSchedule(name, <any>undefined, { urn })
            case "zpa:index/appConnectorGroup:AppConnectorGroup":
                return new AppConnectorGroup(name, <any>undefined, { urn })
            case "zpa:index/applicationSegment:ApplicationSegment":
                return new ApplicationSegment(name, <any>undefined, { urn })
            case "zpa:index/applicationSegmentBrowserAccess:ApplicationSegmentBrowserAccess":
                return new ApplicationSegmentBrowserAccess(name, <any>undefined, { urn })
            case "zpa:index/applicationSegmentInspection:ApplicationSegmentInspection":
                return new ApplicationSegmentInspection(name, <any>undefined, { urn })
            case "zpa:index/applicationSegmentPra:ApplicationSegmentPra":
                return new ApplicationSegmentPra(name, <any>undefined, { urn })
            case "zpa:index/applicationServer:ApplicationServer":
                return new ApplicationServer(name, <any>undefined, { urn })
            case "zpa:index/baCertificate:BaCertificate":
                return new BaCertificate(name, <any>undefined, { urn })
            case "zpa:index/browserAccess:BrowserAccess":
                return new BrowserAccess(name, <any>undefined, { urn })
            case "zpa:index/cloudBrowserIsolationBanner:CloudBrowserIsolationBanner":
                return new CloudBrowserIsolationBanner(name, <any>undefined, { urn })
            case "zpa:index/cloudBrowserIsolationCertificate:CloudBrowserIsolationCertificate":
                return new CloudBrowserIsolationCertificate(name, <any>undefined, { urn })
            case "zpa:index/cloudBrowserIsolationExternalProfile:CloudBrowserIsolationExternalProfile":
                return new CloudBrowserIsolationExternalProfile(name, <any>undefined, { urn })
            case "zpa:index/emergencyAccessUser:EmergencyAccessUser":
                return new EmergencyAccessUser(name, <any>undefined, { urn })
            case "zpa:index/inspectionCustomControls:InspectionCustomControls":
                return new InspectionCustomControls(name, <any>undefined, { urn })
            case "zpa:index/inspectionProfile:InspectionProfile":
                return new InspectionProfile(name, <any>undefined, { urn })
            case "zpa:index/lssConfigController:LssConfigController":
                return new LssConfigController(name, <any>undefined, { urn })
            case "zpa:index/microtenantController:MicrotenantController":
                return new MicrotenantController(name, <any>undefined, { urn })
            case "zpa:index/policyAccessRule:PolicyAccessRule":
                return new PolicyAccessRule(name, <any>undefined, { urn })
            case "zpa:index/policyAccessRuleReorder:PolicyAccessRuleReorder":
                return new PolicyAccessRuleReorder(name, <any>undefined, { urn })
            case "zpa:index/policyAccessRuleV2:PolicyAccessRuleV2":
                return new PolicyAccessRuleV2(name, <any>undefined, { urn })
            case "zpa:index/policyCapabilitiesRule:PolicyCapabilitiesRule":
                return new PolicyCapabilitiesRule(name, <any>undefined, { urn })
            case "zpa:index/policyCredentialRule:PolicyCredentialRule":
                return new PolicyCredentialRule(name, <any>undefined, { urn })
            case "zpa:index/policyForwardingRule:PolicyForwardingRule":
                return new PolicyForwardingRule(name, <any>undefined, { urn })
            case "zpa:index/policyForwardingRuleV2:PolicyForwardingRuleV2":
                return new PolicyForwardingRuleV2(name, <any>undefined, { urn })
            case "zpa:index/policyInspectionRule:PolicyInspectionRule":
                return new PolicyInspectionRule(name, <any>undefined, { urn })
            case "zpa:index/policyInspectionRuleV2:PolicyInspectionRuleV2":
                return new PolicyInspectionRuleV2(name, <any>undefined, { urn })
            case "zpa:index/policyIsolationRule:PolicyIsolationRule":
                return new PolicyIsolationRule(name, <any>undefined, { urn })
            case "zpa:index/policyIsolationRuleV2:PolicyIsolationRuleV2":
                return new PolicyIsolationRuleV2(name, <any>undefined, { urn })
            case "zpa:index/policyRedirectionRule:PolicyRedirectionRule":
                return new PolicyRedirectionRule(name, <any>undefined, { urn })
            case "zpa:index/policyTimeoutRule:PolicyTimeoutRule":
                return new PolicyTimeoutRule(name, <any>undefined, { urn })
            case "zpa:index/policyTimeoutRuleV2:PolicyTimeoutRuleV2":
                return new PolicyTimeoutRuleV2(name, <any>undefined, { urn })
            case "zpa:index/praApprovalController:PraApprovalController":
                return new PraApprovalController(name, <any>undefined, { urn })
            case "zpa:index/praConsoleController:PraConsoleController":
                return new PraConsoleController(name, <any>undefined, { urn })
            case "zpa:index/praCredentialController:PraCredentialController":
                return new PraCredentialController(name, <any>undefined, { urn })
            case "zpa:index/praPortalController:PraPortalController":
                return new PraPortalController(name, <any>undefined, { urn })
            case "zpa:index/provisioningKey:ProvisioningKey":
                return new ProvisioningKey(name, <any>undefined, { urn })
            case "zpa:index/segmentGroup:SegmentGroup":
                return new SegmentGroup(name, <any>undefined, { urn })
            case "zpa:index/serverGroup:ServerGroup":
                return new ServerGroup(name, <any>undefined, { urn })
            case "zpa:index/serviceEdgeAssistantSchedule:ServiceEdgeAssistantSchedule":
                return new ServiceEdgeAssistantSchedule(name, <any>undefined, { urn })
            case "zpa:index/serviceEdgeGroup:ServiceEdgeGroup":
                return new ServiceEdgeGroup(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("zpa", "index/appConnectorAssistantSchedule", _module)
pulumi.runtime.registerResourceModule("zpa", "index/appConnectorGroup", _module)
pulumi.runtime.registerResourceModule("zpa", "index/applicationSegment", _module)
pulumi.runtime.registerResourceModule("zpa", "index/applicationSegmentBrowserAccess", _module)
pulumi.runtime.registerResourceModule("zpa", "index/applicationSegmentInspection", _module)
pulumi.runtime.registerResourceModule("zpa", "index/applicationSegmentPra", _module)
pulumi.runtime.registerResourceModule("zpa", "index/applicationServer", _module)
pulumi.runtime.registerResourceModule("zpa", "index/baCertificate", _module)
pulumi.runtime.registerResourceModule("zpa", "index/browserAccess", _module)
pulumi.runtime.registerResourceModule("zpa", "index/cloudBrowserIsolationBanner", _module)
pulumi.runtime.registerResourceModule("zpa", "index/cloudBrowserIsolationCertificate", _module)
pulumi.runtime.registerResourceModule("zpa", "index/cloudBrowserIsolationExternalProfile", _module)
pulumi.runtime.registerResourceModule("zpa", "index/emergencyAccessUser", _module)
pulumi.runtime.registerResourceModule("zpa", "index/inspectionCustomControls", _module)
pulumi.runtime.registerResourceModule("zpa", "index/inspectionProfile", _module)
pulumi.runtime.registerResourceModule("zpa", "index/lssConfigController", _module)
pulumi.runtime.registerResourceModule("zpa", "index/microtenantController", _module)
pulumi.runtime.registerResourceModule("zpa", "index/policyAccessRule", _module)
pulumi.runtime.registerResourceModule("zpa", "index/policyAccessRuleReorder", _module)
pulumi.runtime.registerResourceModule("zpa", "index/policyAccessRuleV2", _module)
pulumi.runtime.registerResourceModule("zpa", "index/policyCapabilitiesRule", _module)
pulumi.runtime.registerResourceModule("zpa", "index/policyCredentialRule", _module)
pulumi.runtime.registerResourceModule("zpa", "index/policyForwardingRule", _module)
pulumi.runtime.registerResourceModule("zpa", "index/policyForwardingRuleV2", _module)
pulumi.runtime.registerResourceModule("zpa", "index/policyInspectionRule", _module)
pulumi.runtime.registerResourceModule("zpa", "index/policyInspectionRuleV2", _module)
pulumi.runtime.registerResourceModule("zpa", "index/policyIsolationRule", _module)
pulumi.runtime.registerResourceModule("zpa", "index/policyIsolationRuleV2", _module)
pulumi.runtime.registerResourceModule("zpa", "index/policyRedirectionRule", _module)
pulumi.runtime.registerResourceModule("zpa", "index/policyTimeoutRule", _module)
pulumi.runtime.registerResourceModule("zpa", "index/policyTimeoutRuleV2", _module)
pulumi.runtime.registerResourceModule("zpa", "index/praApprovalController", _module)
pulumi.runtime.registerResourceModule("zpa", "index/praConsoleController", _module)
pulumi.runtime.registerResourceModule("zpa", "index/praCredentialController", _module)
pulumi.runtime.registerResourceModule("zpa", "index/praPortalController", _module)
pulumi.runtime.registerResourceModule("zpa", "index/provisioningKey", _module)
pulumi.runtime.registerResourceModule("zpa", "index/segmentGroup", _module)
pulumi.runtime.registerResourceModule("zpa", "index/serverGroup", _module)
pulumi.runtime.registerResourceModule("zpa", "index/serviceEdgeAssistantSchedule", _module)
pulumi.runtime.registerResourceModule("zpa", "index/serviceEdgeGroup", _module)
pulumi.runtime.registerResourcePackage("zpa", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:zpa") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
