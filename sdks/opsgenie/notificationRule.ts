// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NotificationRule extends pulumi.CustomResource {
    /**
     * Get an existing NotificationRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NotificationRuleState, opts?: pulumi.CustomResourceOptions): NotificationRule {
        return new NotificationRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'opsgenie:index/notificationRule:NotificationRule';

    /**
     * Returns true if the given object is an instance of NotificationRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NotificationRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NotificationRule.__pulumiType;
    }

    public readonly actionType!: pulumi.Output<string>;
    public readonly criterias!: pulumi.Output<outputs.NotificationRuleCriteria[] | undefined>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly notificationTimes!: pulumi.Output<string[] | undefined>;
    public readonly order!: pulumi.Output<number>;
    public readonly repeats!: pulumi.Output<outputs.NotificationRuleRepeat[] | undefined>;
    public readonly schedules!: pulumi.Output<outputs.NotificationRuleSchedule[] | undefined>;
    public readonly steps!: pulumi.Output<outputs.NotificationRuleStep[] | undefined>;
    public readonly timeRestriction!: pulumi.Output<outputs.NotificationRuleTimeRestriction | undefined>;
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a NotificationRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NotificationRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NotificationRuleArgs | NotificationRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NotificationRuleState | undefined;
            resourceInputs["actionType"] = state ? state.actionType : undefined;
            resourceInputs["criterias"] = state ? state.criterias : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notificationTimes"] = state ? state.notificationTimes : undefined;
            resourceInputs["order"] = state ? state.order : undefined;
            resourceInputs["repeats"] = state ? state.repeats : undefined;
            resourceInputs["schedules"] = state ? state.schedules : undefined;
            resourceInputs["steps"] = state ? state.steps : undefined;
            resourceInputs["timeRestriction"] = state ? state.timeRestriction : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as NotificationRuleArgs | undefined;
            if ((!args || args.actionType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'actionType'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["actionType"] = args ? args.actionType : undefined;
            resourceInputs["criterias"] = args ? args.criterias : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notificationTimes"] = args ? args.notificationTimes : undefined;
            resourceInputs["order"] = args ? args.order : undefined;
            resourceInputs["repeats"] = args ? args.repeats : undefined;
            resourceInputs["schedules"] = args ? args.schedules : undefined;
            resourceInputs["steps"] = args ? args.steps : undefined;
            resourceInputs["timeRestriction"] = args ? args.timeRestriction : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NotificationRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NotificationRule resources.
 */
export interface NotificationRuleState {
    actionType?: pulumi.Input<string>;
    criterias?: pulumi.Input<pulumi.Input<inputs.NotificationRuleCriteria>[]>;
    enabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    notificationTimes?: pulumi.Input<pulumi.Input<string>[]>;
    order?: pulumi.Input<number>;
    repeats?: pulumi.Input<pulumi.Input<inputs.NotificationRuleRepeat>[]>;
    schedules?: pulumi.Input<pulumi.Input<inputs.NotificationRuleSchedule>[]>;
    steps?: pulumi.Input<pulumi.Input<inputs.NotificationRuleStep>[]>;
    timeRestriction?: pulumi.Input<inputs.NotificationRuleTimeRestriction>;
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NotificationRule resource.
 */
export interface NotificationRuleArgs {
    actionType: pulumi.Input<string>;
    criterias?: pulumi.Input<pulumi.Input<inputs.NotificationRuleCriteria>[]>;
    enabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    notificationTimes?: pulumi.Input<pulumi.Input<string>[]>;
    order?: pulumi.Input<number>;
    repeats?: pulumi.Input<pulumi.Input<inputs.NotificationRuleRepeat>[]>;
    schedules?: pulumi.Input<pulumi.Input<inputs.NotificationRuleSchedule>[]>;
    steps?: pulumi.Input<pulumi.Input<inputs.NotificationRuleStep>[]>;
    timeRestriction?: pulumi.Input<inputs.NotificationRuleTimeRestriction>;
    username: pulumi.Input<string>;
}
