// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NotificationPolicy extends pulumi.CustomResource {
    /**
     * Get an existing NotificationPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NotificationPolicyState, opts?: pulumi.CustomResourceOptions): NotificationPolicy {
        return new NotificationPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'opsgenie:index/notificationPolicy:NotificationPolicy';

    /**
     * Returns true if the given object is an instance of NotificationPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NotificationPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NotificationPolicy.__pulumiType;
    }

    public readonly autoCloseAction!: pulumi.Output<outputs.NotificationPolicyAutoCloseAction | undefined>;
    public readonly autoRestartAction!: pulumi.Output<outputs.NotificationPolicyAutoRestartAction | undefined>;
    public readonly deDuplicationAction!: pulumi.Output<outputs.NotificationPolicyDeDuplicationAction | undefined>;
    public readonly delayAction!: pulumi.Output<outputs.NotificationPolicyDelayAction | undefined>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly filter!: pulumi.Output<outputs.NotificationPolicyFilter>;
    public readonly name!: pulumi.Output<string>;
    public readonly policyDescription!: pulumi.Output<string | undefined>;
    public readonly suppress!: pulumi.Output<boolean | undefined>;
    public readonly teamId!: pulumi.Output<string>;
    public readonly timeRestriction!: pulumi.Output<outputs.NotificationPolicyTimeRestriction | undefined>;

    /**
     * Create a NotificationPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NotificationPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NotificationPolicyArgs | NotificationPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NotificationPolicyState | undefined;
            resourceInputs["autoCloseAction"] = state ? state.autoCloseAction : undefined;
            resourceInputs["autoRestartAction"] = state ? state.autoRestartAction : undefined;
            resourceInputs["deDuplicationAction"] = state ? state.deDuplicationAction : undefined;
            resourceInputs["delayAction"] = state ? state.delayAction : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["filter"] = state ? state.filter : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["policyDescription"] = state ? state.policyDescription : undefined;
            resourceInputs["suppress"] = state ? state.suppress : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
            resourceInputs["timeRestriction"] = state ? state.timeRestriction : undefined;
        } else {
            const args = argsOrState as NotificationPolicyArgs | undefined;
            if ((!args || args.filter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filter'");
            }
            if ((!args || args.teamId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'teamId'");
            }
            resourceInputs["autoCloseAction"] = args ? args.autoCloseAction : undefined;
            resourceInputs["autoRestartAction"] = args ? args.autoRestartAction : undefined;
            resourceInputs["deDuplicationAction"] = args ? args.deDuplicationAction : undefined;
            resourceInputs["delayAction"] = args ? args.delayAction : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["filter"] = args ? args.filter : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["policyDescription"] = args ? args.policyDescription : undefined;
            resourceInputs["suppress"] = args ? args.suppress : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
            resourceInputs["timeRestriction"] = args ? args.timeRestriction : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NotificationPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NotificationPolicy resources.
 */
export interface NotificationPolicyState {
    autoCloseAction?: pulumi.Input<inputs.NotificationPolicyAutoCloseAction>;
    autoRestartAction?: pulumi.Input<inputs.NotificationPolicyAutoRestartAction>;
    deDuplicationAction?: pulumi.Input<inputs.NotificationPolicyDeDuplicationAction>;
    delayAction?: pulumi.Input<inputs.NotificationPolicyDelayAction>;
    enabled?: pulumi.Input<boolean>;
    filter?: pulumi.Input<inputs.NotificationPolicyFilter>;
    name?: pulumi.Input<string>;
    policyDescription?: pulumi.Input<string>;
    suppress?: pulumi.Input<boolean>;
    teamId?: pulumi.Input<string>;
    timeRestriction?: pulumi.Input<inputs.NotificationPolicyTimeRestriction>;
}

/**
 * The set of arguments for constructing a NotificationPolicy resource.
 */
export interface NotificationPolicyArgs {
    autoCloseAction?: pulumi.Input<inputs.NotificationPolicyAutoCloseAction>;
    autoRestartAction?: pulumi.Input<inputs.NotificationPolicyAutoRestartAction>;
    deDuplicationAction?: pulumi.Input<inputs.NotificationPolicyDeDuplicationAction>;
    delayAction?: pulumi.Input<inputs.NotificationPolicyDelayAction>;
    enabled?: pulumi.Input<boolean>;
    filter: pulumi.Input<inputs.NotificationPolicyFilter>;
    name?: pulumi.Input<string>;
    policyDescription?: pulumi.Input<string>;
    suppress?: pulumi.Input<boolean>;
    teamId: pulumi.Input<string>;
    timeRestriction?: pulumi.Input<inputs.NotificationPolicyTimeRestriction>;
}
