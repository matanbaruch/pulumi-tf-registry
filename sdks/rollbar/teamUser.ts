// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class TeamUser extends pulumi.CustomResource {
    /**
     * Get an existing TeamUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TeamUserState, opts?: pulumi.CustomResourceOptions): TeamUser {
        return new TeamUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rollbar:index/teamUser:TeamUser';

    /**
     * Returns true if the given object is an instance of TeamUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TeamUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TeamUser.__pulumiType;
    }

    /**
     * The user's email address
     */
    public readonly email!: pulumi.Output<string>;
    /**
     * Invitation ID if status is `invited`
     */
    public /*out*/ readonly inviteId!: pulumi.Output<number>;
    /**
     * Status of the user. Either `invited` or `registered`
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * ID of the team to which this user belongs
     */
    public readonly teamId!: pulumi.Output<number>;
    /**
     * The ID of the user
     */
    public /*out*/ readonly userId!: pulumi.Output<number>;

    /**
     * Create a TeamUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TeamUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TeamUserArgs | TeamUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TeamUserState | undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["inviteId"] = state ? state.inviteId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as TeamUserArgs | undefined;
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            if ((!args || args.teamId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'teamId'");
            }
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
            resourceInputs["inviteId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["userId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TeamUser.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering TeamUser resources.
 */
export interface TeamUserState {
    /**
     * The user's email address
     */
    email?: pulumi.Input<string>;
    /**
     * Invitation ID if status is `invited`
     */
    inviteId?: pulumi.Input<number>;
    /**
     * Status of the user. Either `invited` or `registered`
     */
    status?: pulumi.Input<string>;
    /**
     * ID of the team to which this user belongs
     */
    teamId?: pulumi.Input<number>;
    /**
     * The ID of the user
     */
    userId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a TeamUser resource.
 */
export interface TeamUserArgs {
    /**
     * The user's email address
     */
    email: pulumi.Input<string>;
    /**
     * ID of the team to which this user belongs
     */
    teamId: pulumi.Input<number>;
}
