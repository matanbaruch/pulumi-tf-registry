// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ProjectAccessToken extends pulumi.CustomResource {
    /**
     * Get an existing ProjectAccessToken resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectAccessTokenState, opts?: pulumi.CustomResourceOptions): ProjectAccessToken {
        return new ProjectAccessToken(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rollbar:index/projectAccessToken:ProjectAccessToken';

    /**
     * Returns true if the given object is an instance of ProjectAccessToken.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectAccessToken {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectAccessToken.__pulumiType;
    }

    /**
     * Access token for Rollbar API
     */
    public /*out*/ readonly accessToken!: pulumi.Output<string>;
    /**
     * Count of calls in the current window
     */
    public /*out*/ readonly curRateLimitWindowCount!: pulumi.Output<number>;
    /**
     * Time when the current window began
     */
    public /*out*/ readonly curRateLimitWindowStart!: pulumi.Output<number>;
    /**
     * Date the project was created
     */
    public /*out*/ readonly dateCreated!: pulumi.Output<number>;
    /**
     * Date the project was last modified
     */
    public /*out*/ readonly dateModified!: pulumi.Output<number>;
    /**
     * The human readable name for the token
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * ID of the Rollbar project to which this token belongs
     */
    public readonly projectId!: pulumi.Output<number>;
    /**
     * Total number of calls allowed within the rate limit window
     */
    public readonly rateLimitWindowCount!: pulumi.Output<number | undefined>;
    /**
     * Total number of seconds that makes up the rate limit window
     */
    public readonly rateLimitWindowSize!: pulumi.Output<number | undefined>;
    /**
     * List of access scopes granted to the token. Possible values are "read", "write", "post_server_item", and
     * "post_client_server".
     */
    public readonly scopes!: pulumi.Output<string[]>;
    /**
     * Status of the token. Possible values are "enabled" and "disabled"
     */
    public readonly status!: pulumi.Output<string | undefined>;

    /**
     * Create a ProjectAccessToken resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectAccessTokenArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectAccessTokenArgs | ProjectAccessTokenState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectAccessTokenState | undefined;
            resourceInputs["accessToken"] = state ? state.accessToken : undefined;
            resourceInputs["curRateLimitWindowCount"] = state ? state.curRateLimitWindowCount : undefined;
            resourceInputs["curRateLimitWindowStart"] = state ? state.curRateLimitWindowStart : undefined;
            resourceInputs["dateCreated"] = state ? state.dateCreated : undefined;
            resourceInputs["dateModified"] = state ? state.dateModified : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["rateLimitWindowCount"] = state ? state.rateLimitWindowCount : undefined;
            resourceInputs["rateLimitWindowSize"] = state ? state.rateLimitWindowSize : undefined;
            resourceInputs["scopes"] = state ? state.scopes : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as ProjectAccessTokenArgs | undefined;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.scopes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scopes'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["rateLimitWindowCount"] = args ? args.rateLimitWindowCount : undefined;
            resourceInputs["rateLimitWindowSize"] = args ? args.rateLimitWindowSize : undefined;
            resourceInputs["scopes"] = args ? args.scopes : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["accessToken"] = undefined /*out*/;
            resourceInputs["curRateLimitWindowCount"] = undefined /*out*/;
            resourceInputs["curRateLimitWindowStart"] = undefined /*out*/;
            resourceInputs["dateCreated"] = undefined /*out*/;
            resourceInputs["dateModified"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["accessToken"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ProjectAccessToken.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ProjectAccessToken resources.
 */
export interface ProjectAccessTokenState {
    /**
     * Access token for Rollbar API
     */
    accessToken?: pulumi.Input<string>;
    /**
     * Count of calls in the current window
     */
    curRateLimitWindowCount?: pulumi.Input<number>;
    /**
     * Time when the current window began
     */
    curRateLimitWindowStart?: pulumi.Input<number>;
    /**
     * Date the project was created
     */
    dateCreated?: pulumi.Input<number>;
    /**
     * Date the project was last modified
     */
    dateModified?: pulumi.Input<number>;
    /**
     * The human readable name for the token
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the Rollbar project to which this token belongs
     */
    projectId?: pulumi.Input<number>;
    /**
     * Total number of calls allowed within the rate limit window
     */
    rateLimitWindowCount?: pulumi.Input<number>;
    /**
     * Total number of seconds that makes up the rate limit window
     */
    rateLimitWindowSize?: pulumi.Input<number>;
    /**
     * List of access scopes granted to the token. Possible values are "read", "write", "post_server_item", and
     * "post_client_server".
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Status of the token. Possible values are "enabled" and "disabled"
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProjectAccessToken resource.
 */
export interface ProjectAccessTokenArgs {
    /**
     * The human readable name for the token
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the Rollbar project to which this token belongs
     */
    projectId: pulumi.Input<number>;
    /**
     * Total number of calls allowed within the rate limit window
     */
    rateLimitWindowCount?: pulumi.Input<number>;
    /**
     * Total number of seconds that makes up the rate limit window
     */
    rateLimitWindowSize?: pulumi.Input<number>;
    /**
     * List of access scopes granted to the token. Possible values are "read", "write", "post_server_item", and
     * "post_client_server".
     */
    scopes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Status of the token. Possible values are "enabled" and "disabled"
     */
    status?: pulumi.Input<string>;
}
