// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getProjectAccessToken(args: GetProjectAccessTokenArgs, opts?: pulumi.InvokeOptions): Promise<GetProjectAccessTokenResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("rollbar:index/getProjectAccessToken:getProjectAccessToken", {
        "id": args.id,
        "name": args.name,
        "projectId": args.projectId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getProjectAccessToken.
 */
export interface GetProjectAccessTokenArgs {
    id?: string;
    name?: string;
    projectId: number;
}

/**
 * A collection of values returned by getProjectAccessToken.
 */
export interface GetProjectAccessTokenResult {
    readonly accessToken: string;
    readonly curRateLimitWindowCount: number;
    readonly curRateLimitWindowStart: number;
    readonly dateCreated: number;
    readonly dateModified: number;
    readonly id: string;
    readonly name?: string;
    readonly projectId: number;
    readonly rateLimitWindowCount: number;
    readonly rateLimitWindowSize: number;
    readonly scopes: string[];
    readonly status: string;
}
export function getProjectAccessTokenOutput(args: GetProjectAccessTokenOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetProjectAccessTokenResult> {
    return pulumi.output(args).apply((a: any) => getProjectAccessToken(a, opts))
}

/**
 * A collection of arguments for invoking getProjectAccessToken.
 */
export interface GetProjectAccessTokenOutputArgs {
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    projectId: pulumi.Input<number>;
}
