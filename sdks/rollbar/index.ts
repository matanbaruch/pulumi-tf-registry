// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetProjectAccessTokensArgs, GetProjectAccessTokensResult, GetProjectAccessTokensOutputArgs } from "./getProjectAccessTokens";
export const getProjectAccessTokens: typeof import("./getProjectAccessTokens").getProjectAccessTokens = null as any;
export const getProjectAccessTokensOutput: typeof import("./getProjectAccessTokens").getProjectAccessTokensOutput = null as any;
utilities.lazyLoad(exports, ["getProjectAccessTokens","getProjectAccessTokensOutput"], () => require("./getProjectAccessTokens"));

export { GetTeamArgs, GetTeamResult, GetTeamOutputArgs } from "./getTeam";
export const getTeam: typeof import("./getTeam").getTeam = null as any;
export const getTeamOutput: typeof import("./getTeam").getTeamOutput = null as any;
utilities.lazyLoad(exports, ["getTeam","getTeamOutput"], () => require("./getTeam"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { PagerdutyIntegrationArgs, PagerdutyIntegrationState } from "./pagerdutyIntegration";
export type PagerdutyIntegration = import("./pagerdutyIntegration").PagerdutyIntegration;
export const PagerdutyIntegration: typeof import("./pagerdutyIntegration").PagerdutyIntegration = null as any;
utilities.lazyLoad(exports, ["PagerdutyIntegration"], () => require("./pagerdutyIntegration"));

export { PagerdutyNotificationRuleArgs, PagerdutyNotificationRuleState } from "./pagerdutyNotificationRule";
export type PagerdutyNotificationRule = import("./pagerdutyNotificationRule").PagerdutyNotificationRule;
export const PagerdutyNotificationRule: typeof import("./pagerdutyNotificationRule").PagerdutyNotificationRule = null as any;
utilities.lazyLoad(exports, ["PagerdutyNotificationRule"], () => require("./pagerdutyNotificationRule"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProjectAccessTokenArgs, ProjectAccessTokenState } from "./projectAccessToken";
export type ProjectAccessToken = import("./projectAccessToken").ProjectAccessToken;
export const ProjectAccessToken: typeof import("./projectAccessToken").ProjectAccessToken = null as any;
utilities.lazyLoad(exports, ["ProjectAccessToken"], () => require("./projectAccessToken"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { TeamArgs, TeamState } from "./team";
export type Team = import("./team").Team;
export const Team: typeof import("./team").Team = null as any;
utilities.lazyLoad(exports, ["Team"], () => require("./team"));

export { TeamProjectAssociationArgs, TeamProjectAssociationState } from "./teamProjectAssociation";
export type TeamProjectAssociation = import("./teamProjectAssociation").TeamProjectAssociation;
export const TeamProjectAssociation: typeof import("./teamProjectAssociation").TeamProjectAssociation = null as any;
utilities.lazyLoad(exports, ["TeamProjectAssociation"], () => require("./teamProjectAssociation"));

export { TeamUserAssociationArgs, TeamUserAssociationState } from "./teamUserAssociation";
export type TeamUserAssociation = import("./teamUserAssociation").TeamUserAssociation;
export const TeamUserAssociation: typeof import("./teamUserAssociation").TeamUserAssociation = null as any;
utilities.lazyLoad(exports, ["TeamUserAssociation"], () => require("./teamUserAssociation"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "rollbar:index/pagerdutyIntegration:PagerdutyIntegration":
                return new PagerdutyIntegration(name, <any>undefined, { urn })
            case "rollbar:index/pagerdutyNotificationRule:PagerdutyNotificationRule":
                return new PagerdutyNotificationRule(name, <any>undefined, { urn })
            case "rollbar:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "rollbar:index/projectAccessToken:ProjectAccessToken":
                return new ProjectAccessToken(name, <any>undefined, { urn })
            case "rollbar:index/team:Team":
                return new Team(name, <any>undefined, { urn })
            case "rollbar:index/teamProjectAssociation:TeamProjectAssociation":
                return new TeamProjectAssociation(name, <any>undefined, { urn })
            case "rollbar:index/teamUserAssociation:TeamUserAssociation":
                return new TeamUserAssociation(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("rollbar", "index/pagerdutyIntegration", _module)
pulumi.runtime.registerResourceModule("rollbar", "index/pagerdutyNotificationRule", _module)
pulumi.runtime.registerResourceModule("rollbar", "index/project", _module)
pulumi.runtime.registerResourceModule("rollbar", "index/projectAccessToken", _module)
pulumi.runtime.registerResourceModule("rollbar", "index/team", _module)
pulumi.runtime.registerResourceModule("rollbar", "index/teamProjectAssociation", _module)
pulumi.runtime.registerResourceModule("rollbar", "index/teamUserAssociation", _module)
pulumi.runtime.registerResourcePackage("rollbar", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:rollbar") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
