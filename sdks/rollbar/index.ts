// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetProjectAccessTokenArgs, GetProjectAccessTokenResult, GetProjectAccessTokenOutputArgs } from "./getProjectAccessToken";
export const getProjectAccessToken: typeof import("./getProjectAccessToken").getProjectAccessToken = null as any;
export const getProjectAccessTokenOutput: typeof import("./getProjectAccessToken").getProjectAccessTokenOutput = null as any;
utilities.lazyLoad(exports, ["getProjectAccessToken","getProjectAccessTokenOutput"], () => require("./getProjectAccessToken"));

export { GetProjectAccessTokensArgs, GetProjectAccessTokensResult, GetProjectAccessTokensOutputArgs } from "./getProjectAccessTokens";
export const getProjectAccessTokens: typeof import("./getProjectAccessTokens").getProjectAccessTokens = null as any;
export const getProjectAccessTokensOutput: typeof import("./getProjectAccessTokens").getProjectAccessTokensOutput = null as any;
utilities.lazyLoad(exports, ["getProjectAccessTokens","getProjectAccessTokensOutput"], () => require("./getProjectAccessTokens"));

export { GetProjectsArgs, GetProjectsResult, GetProjectsOutputArgs } from "./getProjects";
export const getProjects: typeof import("./getProjects").getProjects = null as any;
export const getProjectsOutput: typeof import("./getProjects").getProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getProjects","getProjectsOutput"], () => require("./getProjects"));

export { GetTeamArgs, GetTeamResult, GetTeamOutputArgs } from "./getTeam";
export const getTeam: typeof import("./getTeam").getTeam = null as any;
export const getTeamOutput: typeof import("./getTeam").getTeamOutput = null as any;
utilities.lazyLoad(exports, ["getTeam","getTeamOutput"], () => require("./getTeam"));

export { IntegrationArgs, IntegrationState } from "./integration";
export type Integration = import("./integration").Integration;
export const Integration: typeof import("./integration").Integration = null as any;
utilities.lazyLoad(exports, ["Integration"], () => require("./integration"));

export { NotificationArgs, NotificationState } from "./notification";
export type Notification = import("./notification").Notification;
export const Notification: typeof import("./notification").Notification = null as any;
utilities.lazyLoad(exports, ["Notification"], () => require("./notification"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProjectAccessTokenArgs, ProjectAccessTokenState } from "./projectAccessToken";
export type ProjectAccessToken = import("./projectAccessToken").ProjectAccessToken;
export const ProjectAccessToken: typeof import("./projectAccessToken").ProjectAccessToken = null as any;
utilities.lazyLoad(exports, ["ProjectAccessToken"], () => require("./projectAccessToken"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ServiceLinkArgs, ServiceLinkState } from "./serviceLink";
export type ServiceLink = import("./serviceLink").ServiceLink;
export const ServiceLink: typeof import("./serviceLink").ServiceLink = null as any;
utilities.lazyLoad(exports, ["ServiceLink"], () => require("./serviceLink"));

export { TeamArgs, TeamState } from "./team";
export type Team = import("./team").Team;
export const Team: typeof import("./team").Team = null as any;
utilities.lazyLoad(exports, ["Team"], () => require("./team"));

export { TeamUserArgs, TeamUserState } from "./teamUser";
export type TeamUser = import("./teamUser").TeamUser;
export const TeamUser: typeof import("./teamUser").TeamUser = null as any;
utilities.lazyLoad(exports, ["TeamUser"], () => require("./teamUser"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "rollbar:index/integration:Integration":
                return new Integration(name, <any>undefined, { urn })
            case "rollbar:index/notification:Notification":
                return new Notification(name, <any>undefined, { urn })
            case "rollbar:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "rollbar:index/projectAccessToken:ProjectAccessToken":
                return new ProjectAccessToken(name, <any>undefined, { urn })
            case "rollbar:index/serviceLink:ServiceLink":
                return new ServiceLink(name, <any>undefined, { urn })
            case "rollbar:index/team:Team":
                return new Team(name, <any>undefined, { urn })
            case "rollbar:index/teamUser:TeamUser":
                return new TeamUser(name, <any>undefined, { urn })
            case "rollbar:index/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("rollbar", "index/integration", _module)
pulumi.runtime.registerResourceModule("rollbar", "index/notification", _module)
pulumi.runtime.registerResourceModule("rollbar", "index/project", _module)
pulumi.runtime.registerResourceModule("rollbar", "index/projectAccessToken", _module)
pulumi.runtime.registerResourceModule("rollbar", "index/serviceLink", _module)
pulumi.runtime.registerResourceModule("rollbar", "index/team", _module)
pulumi.runtime.registerResourceModule("rollbar", "index/teamUser", _module)
pulumi.runtime.registerResourceModule("rollbar", "index/user", _module)
pulumi.runtime.registerResourcePackage("rollbar", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:rollbar") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
