// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class TeamUserAssociation extends pulumi.CustomResource {
    /**
     * Get an existing TeamUserAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TeamUserAssociationState, opts?: pulumi.CustomResourceOptions): TeamUserAssociation {
        return new TeamUserAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rollbar:index/teamUserAssociation:TeamUserAssociation';

    /**
     * Returns true if the given object is an instance of TeamUserAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TeamUserAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TeamUserAssociation.__pulumiType;
    }

    public readonly email!: pulumi.Output<string>;
    public /*out*/ readonly invitationId!: pulumi.Output<number>;
    public /*out*/ readonly invitationStatus!: pulumi.Output<string>;
    public /*out*/ readonly invitedOrAdded!: pulumi.Output<string>;
    public readonly teamId!: pulumi.Output<number>;
    public /*out*/ readonly userId!: pulumi.Output<number>;

    /**
     * Create a TeamUserAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TeamUserAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TeamUserAssociationArgs | TeamUserAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TeamUserAssociationState | undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["invitationId"] = state ? state.invitationId : undefined;
            resourceInputs["invitationStatus"] = state ? state.invitationStatus : undefined;
            resourceInputs["invitedOrAdded"] = state ? state.invitedOrAdded : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as TeamUserAssociationArgs | undefined;
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            if ((!args || args.teamId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'teamId'");
            }
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
            resourceInputs["invitationId"] = undefined /*out*/;
            resourceInputs["invitationStatus"] = undefined /*out*/;
            resourceInputs["invitedOrAdded"] = undefined /*out*/;
            resourceInputs["userId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TeamUserAssociation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering TeamUserAssociation resources.
 */
export interface TeamUserAssociationState {
    email?: pulumi.Input<string>;
    invitationId?: pulumi.Input<number>;
    invitationStatus?: pulumi.Input<string>;
    invitedOrAdded?: pulumi.Input<string>;
    teamId?: pulumi.Input<number>;
    userId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a TeamUserAssociation resource.
 */
export interface TeamUserAssociationArgs {
    email: pulumi.Input<string>;
    teamId: pulumi.Input<number>;
}
