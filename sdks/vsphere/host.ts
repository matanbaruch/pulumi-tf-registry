// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Host extends pulumi.CustomResource {
    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HostState, opts?: pulumi.CustomResourceOptions): Host {
        return new Host(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vsphere:index/host:Host';

    /**
     * Returns true if the given object is an instance of Host.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Host {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Host.__pulumiType;
    }

    /**
     * ID of the vSphere cluster the host will belong to.
     */
    public readonly cluster!: pulumi.Output<string | undefined>;
    /**
     * Must be set if host is a member of a managed compute_cluster resource.
     */
    public readonly clusterManaged!: pulumi.Output<boolean | undefined>;
    /**
     * Set the state of the host. If set to false then the host will be asked to disconnect.
     */
    public readonly connected!: pulumi.Output<boolean | undefined>;
    /**
     * A list of custom attributes to set on this resource.
     */
    public readonly customAttributes!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * ID of the vSphere datacenter the host will belong to.
     */
    public readonly datacenter!: pulumi.Output<string | undefined>;
    /**
     * Force add the host to the vSphere inventory even if it's already managed by a different vCenter Server instance.
     */
    public readonly force!: pulumi.Output<boolean | undefined>;
    /**
     * FQDN or IP address of the host.
     */
    public readonly hostname!: pulumi.Output<string>;
    /**
     * License key that will be applied to this host.
     */
    public readonly license!: pulumi.Output<string | undefined>;
    /**
     * Set the host's lockdown status. Default is disabled. Valid options are 'disabled', 'normal', 'strict'
     */
    public readonly lockdown!: pulumi.Output<string | undefined>;
    /**
     * Set the host's maintenance mode. Default is false
     */
    public readonly maintenance!: pulumi.Output<boolean | undefined>;
    /**
     * Password of the administration account of the host.
     */
    public readonly password!: pulumi.Output<string>;
    public readonly services!: pulumi.Output<outputs.HostService[] | undefined>;
    /**
     * A list of tag IDs to apply to this object.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * Host's certificate SHA-1 thumbprint. If not set then the CA that signed the host's certificate must be trusted.
     */
    public readonly thumbprint!: pulumi.Output<string | undefined>;
    /**
     * Username of the administration account of the host.
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a Host resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HostArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HostArgs | HostState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HostState | undefined;
            resourceInputs["cluster"] = state ? state.cluster : undefined;
            resourceInputs["clusterManaged"] = state ? state.clusterManaged : undefined;
            resourceInputs["connected"] = state ? state.connected : undefined;
            resourceInputs["customAttributes"] = state ? state.customAttributes : undefined;
            resourceInputs["datacenter"] = state ? state.datacenter : undefined;
            resourceInputs["force"] = state ? state.force : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["license"] = state ? state.license : undefined;
            resourceInputs["lockdown"] = state ? state.lockdown : undefined;
            resourceInputs["maintenance"] = state ? state.maintenance : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["services"] = state ? state.services : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["thumbprint"] = state ? state.thumbprint : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as HostArgs | undefined;
            if ((!args || args.hostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostname'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["cluster"] = args ? args.cluster : undefined;
            resourceInputs["clusterManaged"] = args ? args.clusterManaged : undefined;
            resourceInputs["connected"] = args ? args.connected : undefined;
            resourceInputs["customAttributes"] = args ? args.customAttributes : undefined;
            resourceInputs["datacenter"] = args ? args.datacenter : undefined;
            resourceInputs["force"] = args ? args.force : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["license"] = args ? args.license : undefined;
            resourceInputs["lockdown"] = args ? args.lockdown : undefined;
            resourceInputs["maintenance"] = args ? args.maintenance : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["services"] = args ? args.services : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["thumbprint"] = args ? args.thumbprint : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Host.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Host resources.
 */
export interface HostState {
    /**
     * ID of the vSphere cluster the host will belong to.
     */
    cluster?: pulumi.Input<string>;
    /**
     * Must be set if host is a member of a managed compute_cluster resource.
     */
    clusterManaged?: pulumi.Input<boolean>;
    /**
     * Set the state of the host. If set to false then the host will be asked to disconnect.
     */
    connected?: pulumi.Input<boolean>;
    /**
     * A list of custom attributes to set on this resource.
     */
    customAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * ID of the vSphere datacenter the host will belong to.
     */
    datacenter?: pulumi.Input<string>;
    /**
     * Force add the host to the vSphere inventory even if it's already managed by a different vCenter Server instance.
     */
    force?: pulumi.Input<boolean>;
    /**
     * FQDN or IP address of the host.
     */
    hostname?: pulumi.Input<string>;
    /**
     * License key that will be applied to this host.
     */
    license?: pulumi.Input<string>;
    /**
     * Set the host's lockdown status. Default is disabled. Valid options are 'disabled', 'normal', 'strict'
     */
    lockdown?: pulumi.Input<string>;
    /**
     * Set the host's maintenance mode. Default is false
     */
    maintenance?: pulumi.Input<boolean>;
    /**
     * Password of the administration account of the host.
     */
    password?: pulumi.Input<string>;
    services?: pulumi.Input<pulumi.Input<inputs.HostService>[]>;
    /**
     * A list of tag IDs to apply to this object.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Host's certificate SHA-1 thumbprint. If not set then the CA that signed the host's certificate must be trusted.
     */
    thumbprint?: pulumi.Input<string>;
    /**
     * Username of the administration account of the host.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Host resource.
 */
export interface HostArgs {
    /**
     * ID of the vSphere cluster the host will belong to.
     */
    cluster?: pulumi.Input<string>;
    /**
     * Must be set if host is a member of a managed compute_cluster resource.
     */
    clusterManaged?: pulumi.Input<boolean>;
    /**
     * Set the state of the host. If set to false then the host will be asked to disconnect.
     */
    connected?: pulumi.Input<boolean>;
    /**
     * A list of custom attributes to set on this resource.
     */
    customAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * ID of the vSphere datacenter the host will belong to.
     */
    datacenter?: pulumi.Input<string>;
    /**
     * Force add the host to the vSphere inventory even if it's already managed by a different vCenter Server instance.
     */
    force?: pulumi.Input<boolean>;
    /**
     * FQDN or IP address of the host.
     */
    hostname: pulumi.Input<string>;
    /**
     * License key that will be applied to this host.
     */
    license?: pulumi.Input<string>;
    /**
     * Set the host's lockdown status. Default is disabled. Valid options are 'disabled', 'normal', 'strict'
     */
    lockdown?: pulumi.Input<string>;
    /**
     * Set the host's maintenance mode. Default is false
     */
    maintenance?: pulumi.Input<boolean>;
    /**
     * Password of the administration account of the host.
     */
    password: pulumi.Input<string>;
    services?: pulumi.Input<pulumi.Input<inputs.HostService>[]>;
    /**
     * A list of tag IDs to apply to this object.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Host's certificate SHA-1 thumbprint. If not set then the CA that signed the host's certificate must be trusted.
     */
    thumbprint?: pulumi.Input<string>;
    /**
     * Username of the administration account of the host.
     */
    username: pulumi.Input<string>;
}
