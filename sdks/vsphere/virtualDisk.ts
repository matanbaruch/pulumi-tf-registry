// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VirtualDisk extends pulumi.CustomResource {
    /**
     * Get an existing VirtualDisk resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualDiskState, opts?: pulumi.CustomResourceOptions): VirtualDisk {
        return new VirtualDisk(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vsphere:index/virtualDisk:VirtualDisk';

    /**
     * Returns true if the given object is an instance of VirtualDisk.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualDisk {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualDisk.__pulumiType;
    }

    /**
     * @deprecated Deprecated
     */
    public readonly adapterType!: pulumi.Output<string | undefined>;
    public readonly createDirectories!: pulumi.Output<boolean | undefined>;
    public readonly datacenter!: pulumi.Output<string | undefined>;
    public readonly datastore!: pulumi.Output<string>;
    public readonly size!: pulumi.Output<number>;
    public readonly type!: pulumi.Output<string | undefined>;
    public readonly vmdkPath!: pulumi.Output<string>;

    /**
     * Create a VirtualDisk resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualDiskArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VirtualDiskArgs | VirtualDiskState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VirtualDiskState | undefined;
            resourceInputs["adapterType"] = state ? state.adapterType : undefined;
            resourceInputs["createDirectories"] = state ? state.createDirectories : undefined;
            resourceInputs["datacenter"] = state ? state.datacenter : undefined;
            resourceInputs["datastore"] = state ? state.datastore : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vmdkPath"] = state ? state.vmdkPath : undefined;
        } else {
            const args = argsOrState as VirtualDiskArgs | undefined;
            if ((!args || args.datastore === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datastore'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            if ((!args || args.vmdkPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vmdkPath'");
            }
            resourceInputs["adapterType"] = args ? args.adapterType : undefined;
            resourceInputs["createDirectories"] = args ? args.createDirectories : undefined;
            resourceInputs["datacenter"] = args ? args.datacenter : undefined;
            resourceInputs["datastore"] = args ? args.datastore : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["vmdkPath"] = args ? args.vmdkPath : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VirtualDisk.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VirtualDisk resources.
 */
export interface VirtualDiskState {
    /**
     * @deprecated Deprecated
     */
    adapterType?: pulumi.Input<string>;
    createDirectories?: pulumi.Input<boolean>;
    datacenter?: pulumi.Input<string>;
    datastore?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
    vmdkPath?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VirtualDisk resource.
 */
export interface VirtualDiskArgs {
    /**
     * @deprecated Deprecated
     */
    adapterType?: pulumi.Input<string>;
    createDirectories?: pulumi.Input<boolean>;
    datacenter?: pulumi.Input<string>;
    datastore: pulumi.Input<string>;
    size: pulumi.Input<number>;
    type?: pulumi.Input<string>;
    vmdkPath: pulumi.Input<string>;
}
