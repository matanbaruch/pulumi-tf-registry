// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VappContainer extends pulumi.CustomResource {
    /**
     * Get an existing VappContainer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VappContainerState, opts?: pulumi.CustomResourceOptions): VappContainer {
        return new VappContainer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vsphere:index/vappContainer:VappContainer';

    /**
     * Returns true if the given object is an instance of VappContainer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VappContainer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VappContainer.__pulumiType;
    }

    /**
     * Determines if the reservation on a vApp container can grow beyond the specified value, if the parent resource pool has
     * unreserved resources.
     */
    public readonly cpuExpandable!: pulumi.Output<boolean | undefined>;
    /**
     * The utilization of a vApp container will not exceed this limit, even if there are available resources. Set to -1 for
     * unlimited.
     */
    public readonly cpuLimit!: pulumi.Output<number | undefined>;
    /**
     * Amount of CPU (MHz) that is guaranteed available to the vApp container.
     */
    public readonly cpuReservation!: pulumi.Output<number | undefined>;
    /**
     * The allocation level. The level is a simplified view of shares. Levels map to a pre-determined set of numeric values for
     * shares. Can be one of low, normal, high, or custom.
     */
    public readonly cpuShareLevel!: pulumi.Output<string | undefined>;
    /**
     * The number of shares allocated. Used to determine resource allocation in case of resource contention. If this is set,
     * cpu_share_level must be custom.
     */
    public readonly cpuShares!: pulumi.Output<number>;
    /**
     * A list of custom attributes to set on this resource.
     */
    public readonly customAttributes!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Determines if the reservation on a vApp container can grow beyond the specified value, if the parent resource pool has
     * unreserved resources.
     */
    public readonly memoryExpandable!: pulumi.Output<boolean | undefined>;
    /**
     * The utilization of a vApp container will not exceed this limit, even if there are available resources. Set to -1 for
     * unlimited.
     */
    public readonly memoryLimit!: pulumi.Output<number | undefined>;
    /**
     * Amount of memory (MB) that is guaranteed available to the vApp container.
     */
    public readonly memoryReservation!: pulumi.Output<number | undefined>;
    /**
     * The allocation level. The level is a simplified view of shares. Levels map to a pre-determined set of numeric values for
     * shares. Can be one of low, normal, high, or custom.
     */
    public readonly memoryShareLevel!: pulumi.Output<string | undefined>;
    /**
     * The number of shares allocated. Used to determine resource allocation in case of resource contention. If this is set,
     * memory_share_level must be custom.
     */
    public readonly memoryShares!: pulumi.Output<number>;
    /**
     * The name of the vApp container.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the parent VM folder.
     */
    public readonly parentFolderId!: pulumi.Output<string | undefined>;
    /**
     * The managed object ID of the parent resource pool or the compute resource the vApp container is in.
     */
    public readonly parentResourcePoolId!: pulumi.Output<string>;
    /**
     * A list of tag IDs to apply to this object.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;

    /**
     * Create a VappContainer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VappContainerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VappContainerArgs | VappContainerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VappContainerState | undefined;
            resourceInputs["cpuExpandable"] = state ? state.cpuExpandable : undefined;
            resourceInputs["cpuLimit"] = state ? state.cpuLimit : undefined;
            resourceInputs["cpuReservation"] = state ? state.cpuReservation : undefined;
            resourceInputs["cpuShareLevel"] = state ? state.cpuShareLevel : undefined;
            resourceInputs["cpuShares"] = state ? state.cpuShares : undefined;
            resourceInputs["customAttributes"] = state ? state.customAttributes : undefined;
            resourceInputs["memoryExpandable"] = state ? state.memoryExpandable : undefined;
            resourceInputs["memoryLimit"] = state ? state.memoryLimit : undefined;
            resourceInputs["memoryReservation"] = state ? state.memoryReservation : undefined;
            resourceInputs["memoryShareLevel"] = state ? state.memoryShareLevel : undefined;
            resourceInputs["memoryShares"] = state ? state.memoryShares : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parentFolderId"] = state ? state.parentFolderId : undefined;
            resourceInputs["parentResourcePoolId"] = state ? state.parentResourcePoolId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as VappContainerArgs | undefined;
            if ((!args || args.parentResourcePoolId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parentResourcePoolId'");
            }
            resourceInputs["cpuExpandable"] = args ? args.cpuExpandable : undefined;
            resourceInputs["cpuLimit"] = args ? args.cpuLimit : undefined;
            resourceInputs["cpuReservation"] = args ? args.cpuReservation : undefined;
            resourceInputs["cpuShareLevel"] = args ? args.cpuShareLevel : undefined;
            resourceInputs["cpuShares"] = args ? args.cpuShares : undefined;
            resourceInputs["customAttributes"] = args ? args.customAttributes : undefined;
            resourceInputs["memoryExpandable"] = args ? args.memoryExpandable : undefined;
            resourceInputs["memoryLimit"] = args ? args.memoryLimit : undefined;
            resourceInputs["memoryReservation"] = args ? args.memoryReservation : undefined;
            resourceInputs["memoryShareLevel"] = args ? args.memoryShareLevel : undefined;
            resourceInputs["memoryShares"] = args ? args.memoryShares : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parentFolderId"] = args ? args.parentFolderId : undefined;
            resourceInputs["parentResourcePoolId"] = args ? args.parentResourcePoolId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VappContainer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VappContainer resources.
 */
export interface VappContainerState {
    /**
     * Determines if the reservation on a vApp container can grow beyond the specified value, if the parent resource pool has
     * unreserved resources.
     */
    cpuExpandable?: pulumi.Input<boolean>;
    /**
     * The utilization of a vApp container will not exceed this limit, even if there are available resources. Set to -1 for
     * unlimited.
     */
    cpuLimit?: pulumi.Input<number>;
    /**
     * Amount of CPU (MHz) that is guaranteed available to the vApp container.
     */
    cpuReservation?: pulumi.Input<number>;
    /**
     * The allocation level. The level is a simplified view of shares. Levels map to a pre-determined set of numeric values for
     * shares. Can be one of low, normal, high, or custom.
     */
    cpuShareLevel?: pulumi.Input<string>;
    /**
     * The number of shares allocated. Used to determine resource allocation in case of resource contention. If this is set,
     * cpu_share_level must be custom.
     */
    cpuShares?: pulumi.Input<number>;
    /**
     * A list of custom attributes to set on this resource.
     */
    customAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Determines if the reservation on a vApp container can grow beyond the specified value, if the parent resource pool has
     * unreserved resources.
     */
    memoryExpandable?: pulumi.Input<boolean>;
    /**
     * The utilization of a vApp container will not exceed this limit, even if there are available resources. Set to -1 for
     * unlimited.
     */
    memoryLimit?: pulumi.Input<number>;
    /**
     * Amount of memory (MB) that is guaranteed available to the vApp container.
     */
    memoryReservation?: pulumi.Input<number>;
    /**
     * The allocation level. The level is a simplified view of shares. Levels map to a pre-determined set of numeric values for
     * shares. Can be one of low, normal, high, or custom.
     */
    memoryShareLevel?: pulumi.Input<string>;
    /**
     * The number of shares allocated. Used to determine resource allocation in case of resource contention. If this is set,
     * memory_share_level must be custom.
     */
    memoryShares?: pulumi.Input<number>;
    /**
     * The name of the vApp container.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the parent VM folder.
     */
    parentFolderId?: pulumi.Input<string>;
    /**
     * The managed object ID of the parent resource pool or the compute resource the vApp container is in.
     */
    parentResourcePoolId?: pulumi.Input<string>;
    /**
     * A list of tag IDs to apply to this object.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a VappContainer resource.
 */
export interface VappContainerArgs {
    /**
     * Determines if the reservation on a vApp container can grow beyond the specified value, if the parent resource pool has
     * unreserved resources.
     */
    cpuExpandable?: pulumi.Input<boolean>;
    /**
     * The utilization of a vApp container will not exceed this limit, even if there are available resources. Set to -1 for
     * unlimited.
     */
    cpuLimit?: pulumi.Input<number>;
    /**
     * Amount of CPU (MHz) that is guaranteed available to the vApp container.
     */
    cpuReservation?: pulumi.Input<number>;
    /**
     * The allocation level. The level is a simplified view of shares. Levels map to a pre-determined set of numeric values for
     * shares. Can be one of low, normal, high, or custom.
     */
    cpuShareLevel?: pulumi.Input<string>;
    /**
     * The number of shares allocated. Used to determine resource allocation in case of resource contention. If this is set,
     * cpu_share_level must be custom.
     */
    cpuShares?: pulumi.Input<number>;
    /**
     * A list of custom attributes to set on this resource.
     */
    customAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Determines if the reservation on a vApp container can grow beyond the specified value, if the parent resource pool has
     * unreserved resources.
     */
    memoryExpandable?: pulumi.Input<boolean>;
    /**
     * The utilization of a vApp container will not exceed this limit, even if there are available resources. Set to -1 for
     * unlimited.
     */
    memoryLimit?: pulumi.Input<number>;
    /**
     * Amount of memory (MB) that is guaranteed available to the vApp container.
     */
    memoryReservation?: pulumi.Input<number>;
    /**
     * The allocation level. The level is a simplified view of shares. Levels map to a pre-determined set of numeric values for
     * shares. Can be one of low, normal, high, or custom.
     */
    memoryShareLevel?: pulumi.Input<string>;
    /**
     * The number of shares allocated. Used to determine resource allocation in case of resource contention. If this is set,
     * memory_share_level must be custom.
     */
    memoryShares?: pulumi.Input<number>;
    /**
     * The name of the vApp container.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the parent VM folder.
     */
    parentFolderId?: pulumi.Input<string>;
    /**
     * The managed object ID of the parent resource pool or the compute resource the vApp container is in.
     */
    parentResourcePoolId: pulumi.Input<string>;
    /**
     * A list of tag IDs to apply to this object.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
