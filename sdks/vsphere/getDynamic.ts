// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getDynamic(args: GetDynamicArgs, opts?: pulumi.InvokeOptions): Promise<GetDynamicResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vsphere:index/getDynamic:getDynamic", {
        "filters": args.filters,
        "id": args.id,
        "nameRegex": args.nameRegex,
        "type": args.type,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDynamic.
 */
export interface GetDynamicArgs {
    filters: string[];
    id?: string;
    nameRegex?: string;
    type?: string;
}

/**
 * A collection of values returned by getDynamic.
 */
export interface GetDynamicResult {
    readonly filters: string[];
    readonly id: string;
    readonly nameRegex?: string;
    readonly type?: string;
}
export function getDynamicOutput(args: GetDynamicOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDynamicResult> {
    return pulumi.output(args).apply((a: any) => getDynamic(a, opts))
}

/**
 * A collection of arguments for invoking getDynamic.
 */
export interface GetDynamicOutputArgs {
    filters: pulumi.Input<pulumi.Input<string>[]>;
    id?: pulumi.Input<string>;
    nameRegex?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}
