// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getVmfsDisks(args: GetVmfsDisksArgs, opts?: pulumi.InvokeOptions): Promise<GetVmfsDisksResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vsphere:index/getVmfsDisks:getVmfsDisks", {
        "filter": args.filter,
        "hostSystemId": args.hostSystemId,
        "id": args.id,
        "rescan": args.rescan,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVmfsDisks.
 */
export interface GetVmfsDisksArgs {
    filter?: string;
    hostSystemId: string;
    id?: string;
    rescan?: boolean;
}

/**
 * A collection of values returned by getVmfsDisks.
 */
export interface GetVmfsDisksResult {
    readonly disks: string[];
    readonly filter?: string;
    readonly hostSystemId: string;
    readonly id: string;
    readonly rescan?: boolean;
}
export function getVmfsDisksOutput(args: GetVmfsDisksOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVmfsDisksResult> {
    return pulumi.output(args).apply((a: any) => getVmfsDisks(a, opts))
}

/**
 * A collection of arguments for invoking getVmfsDisks.
 */
export interface GetVmfsDisksOutputArgs {
    filter?: pulumi.Input<string>;
    hostSystemId: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    rescan?: pulumi.Input<boolean>;
}
