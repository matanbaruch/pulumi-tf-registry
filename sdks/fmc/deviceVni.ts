// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DeviceVni extends pulumi.CustomResource {
    /**
     * Get an existing DeviceVni resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeviceVniState, opts?: pulumi.CustomResourceOptions): DeviceVni {
        return new DeviceVni(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmc:index/deviceVni:DeviceVni';

    /**
     * Returns true if the given object is an instance of DeviceVni.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DeviceVni {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DeviceVni.__pulumiType;
    }

    /**
     * VNI description
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The Device Id of VNI
     */
    public readonly deviceId!: pulumi.Output<string>;
    /**
     * EnableProxy of the VNI
     */
    public readonly enableProxy!: pulumi.Output<boolean | undefined>;
    /**
     * Enables VNI
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Logical Name of chosen interface
     */
    public readonly ifName!: pulumi.Output<string>;
    /**
     * IPV4 information
     */
    public readonly ipv4s!: pulumi.Output<outputs.DeviceVniIpv4[] | undefined>;
    /**
     * MulticastGroupAddress of the VNI
     */
    public readonly multicastGroupaddress!: pulumi.Output<string | undefined>;
    /**
     * Priority of the VNI
     */
    public readonly priority!: pulumi.Output<number | undefined>;
    /**
     * securityZone of the VNI
     */
    public readonly securityZoneId!: pulumi.Output<string | undefined>;
    /**
     * SegmentId of the VNI
     */
    public readonly segmentId!: pulumi.Output<number | undefined>;
    /**
     * Type of resource
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * VNID of the VNI
     */
    public readonly vnid!: pulumi.Output<number>;
    /**
     * The Device Id of VNI
     */
    public readonly vtepId!: pulumi.Output<number | undefined>;

    /**
     * Create a DeviceVni resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeviceVniArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeviceVniArgs | DeviceVniState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeviceVniState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["deviceId"] = state ? state.deviceId : undefined;
            resourceInputs["enableProxy"] = state ? state.enableProxy : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["ifName"] = state ? state.ifName : undefined;
            resourceInputs["ipv4s"] = state ? state.ipv4s : undefined;
            resourceInputs["multicastGroupaddress"] = state ? state.multicastGroupaddress : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["securityZoneId"] = state ? state.securityZoneId : undefined;
            resourceInputs["segmentId"] = state ? state.segmentId : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vnid"] = state ? state.vnid : undefined;
            resourceInputs["vtepId"] = state ? state.vtepId : undefined;
        } else {
            const args = argsOrState as DeviceVniArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.deviceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deviceId'");
            }
            if ((!args || args.ifName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ifName'");
            }
            if ((!args || args.vnid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vnid'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["deviceId"] = args ? args.deviceId : undefined;
            resourceInputs["enableProxy"] = args ? args.enableProxy : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["ifName"] = args ? args.ifName : undefined;
            resourceInputs["ipv4s"] = args ? args.ipv4s : undefined;
            resourceInputs["multicastGroupaddress"] = args ? args.multicastGroupaddress : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["securityZoneId"] = args ? args.securityZoneId : undefined;
            resourceInputs["segmentId"] = args ? args.segmentId : undefined;
            resourceInputs["vnid"] = args ? args.vnid : undefined;
            resourceInputs["vtepId"] = args ? args.vtepId : undefined;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DeviceVni.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DeviceVni resources.
 */
export interface DeviceVniState {
    /**
     * VNI description
     */
    description?: pulumi.Input<string>;
    /**
     * The Device Id of VNI
     */
    deviceId?: pulumi.Input<string>;
    /**
     * EnableProxy of the VNI
     */
    enableProxy?: pulumi.Input<boolean>;
    /**
     * Enables VNI
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Logical Name of chosen interface
     */
    ifName?: pulumi.Input<string>;
    /**
     * IPV4 information
     */
    ipv4s?: pulumi.Input<pulumi.Input<inputs.DeviceVniIpv4>[]>;
    /**
     * MulticastGroupAddress of the VNI
     */
    multicastGroupaddress?: pulumi.Input<string>;
    /**
     * Priority of the VNI
     */
    priority?: pulumi.Input<number>;
    /**
     * securityZone of the VNI
     */
    securityZoneId?: pulumi.Input<string>;
    /**
     * SegmentId of the VNI
     */
    segmentId?: pulumi.Input<number>;
    /**
     * Type of resource
     */
    type?: pulumi.Input<string>;
    /**
     * VNID of the VNI
     */
    vnid?: pulumi.Input<number>;
    /**
     * The Device Id of VNI
     */
    vtepId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a DeviceVni resource.
 */
export interface DeviceVniArgs {
    /**
     * VNI description
     */
    description: pulumi.Input<string>;
    /**
     * The Device Id of VNI
     */
    deviceId: pulumi.Input<string>;
    /**
     * EnableProxy of the VNI
     */
    enableProxy?: pulumi.Input<boolean>;
    /**
     * Enables VNI
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Logical Name of chosen interface
     */
    ifName: pulumi.Input<string>;
    /**
     * IPV4 information
     */
    ipv4s?: pulumi.Input<pulumi.Input<inputs.DeviceVniIpv4>[]>;
    /**
     * MulticastGroupAddress of the VNI
     */
    multicastGroupaddress?: pulumi.Input<string>;
    /**
     * Priority of the VNI
     */
    priority?: pulumi.Input<number>;
    /**
     * securityZone of the VNI
     */
    securityZoneId?: pulumi.Input<string>;
    /**
     * SegmentId of the VNI
     */
    segmentId?: pulumi.Input<number>;
    /**
     * VNID of the VNI
     */
    vnid: pulumi.Input<number>;
    /**
     * The Device Id of VNI
     */
    vtepId?: pulumi.Input<number>;
}
