// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FtdAutonatRules extends pulumi.CustomResource {
    /**
     * Get an existing FtdAutonatRules resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FtdAutonatRulesState, opts?: pulumi.CustomResourceOptions): FtdAutonatRules {
        return new FtdAutonatRules(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmc:index/ftdAutonatRules:FtdAutonatRules';

    /**
     * Returns true if the given object is an instance of FtdAutonatRules.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FtdAutonatRules {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FtdAutonatRules.__pulumiType;
    }

    /**
     * The description of this resource
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Destination interface of this resource
     */
    public readonly destinationInterface!: pulumi.Output<outputs.FtdAutonatRulesDestinationInterface | undefined>;
    /**
     * Enable Fallthrough
     */
    public readonly fallthrough!: pulumi.Output<boolean | undefined>;
    /**
     * Enable IPv6
     */
    public readonly ipv6!: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the NAT policy this resource belongs to
     */
    public readonly natPolicy!: pulumi.Output<string>;
    /**
     * The type of this resource, "static" or "dynamic"
     */
    public readonly natType!: pulumi.Output<string>;
    /**
     * Enable Net to Net
     */
    public readonly netToNet!: pulumi.Output<boolean | undefined>;
    /**
     * Disable Proxy ARP
     */
    public readonly noProxyArp!: pulumi.Output<boolean | undefined>;
    /**
     * Original network for this resource
     */
    public readonly originalNetwork!: pulumi.Output<outputs.FtdAutonatRulesOriginalNetwork | undefined>;
    /**
     * Original port for this resource
     */
    public readonly originalPort!: pulumi.Output<outputs.FtdAutonatRulesOriginalPort | undefined>;
    /**
     * PAT options for this resource
     */
    public readonly patOptions!: pulumi.Output<outputs.FtdAutonatRulesPatOptions | undefined>;
    /**
     * Enable perform route lookups for this resource
     */
    public readonly performRouteLookup!: pulumi.Output<boolean | undefined>;
    /**
     * Source interface for this resource
     */
    public readonly sourceInterface!: pulumi.Output<outputs.FtdAutonatRulesSourceInterface | undefined>;
    /**
     * Enable Translate DNS
     */
    public readonly translateDns!: pulumi.Output<boolean | undefined>;
    /**
     * Translated interface for this resource
     */
    public readonly translatedNetwork!: pulumi.Output<outputs.FtdAutonatRulesTranslatedNetwork | undefined>;
    /**
     * Interface is the destination translated network
     */
    public readonly translatedNetworkIsDestinationInterface!: pulumi.Output<boolean | undefined>;
    /**
     * Translated port for this resource
     */
    public readonly translatedPort!: pulumi.Output<number | undefined>;
    /**
     * The type of this resource
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a FtdAutonatRules resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FtdAutonatRulesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FtdAutonatRulesArgs | FtdAutonatRulesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FtdAutonatRulesState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destinationInterface"] = state ? state.destinationInterface : undefined;
            resourceInputs["fallthrough"] = state ? state.fallthrough : undefined;
            resourceInputs["ipv6"] = state ? state.ipv6 : undefined;
            resourceInputs["natPolicy"] = state ? state.natPolicy : undefined;
            resourceInputs["natType"] = state ? state.natType : undefined;
            resourceInputs["netToNet"] = state ? state.netToNet : undefined;
            resourceInputs["noProxyArp"] = state ? state.noProxyArp : undefined;
            resourceInputs["originalNetwork"] = state ? state.originalNetwork : undefined;
            resourceInputs["originalPort"] = state ? state.originalPort : undefined;
            resourceInputs["patOptions"] = state ? state.patOptions : undefined;
            resourceInputs["performRouteLookup"] = state ? state.performRouteLookup : undefined;
            resourceInputs["sourceInterface"] = state ? state.sourceInterface : undefined;
            resourceInputs["translateDns"] = state ? state.translateDns : undefined;
            resourceInputs["translatedNetwork"] = state ? state.translatedNetwork : undefined;
            resourceInputs["translatedNetworkIsDestinationInterface"] = state ? state.translatedNetworkIsDestinationInterface : undefined;
            resourceInputs["translatedPort"] = state ? state.translatedPort : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as FtdAutonatRulesArgs | undefined;
            if ((!args || args.natPolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'natPolicy'");
            }
            if ((!args || args.natType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'natType'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destinationInterface"] = args ? args.destinationInterface : undefined;
            resourceInputs["fallthrough"] = args ? args.fallthrough : undefined;
            resourceInputs["ipv6"] = args ? args.ipv6 : undefined;
            resourceInputs["natPolicy"] = args ? args.natPolicy : undefined;
            resourceInputs["natType"] = args ? args.natType : undefined;
            resourceInputs["netToNet"] = args ? args.netToNet : undefined;
            resourceInputs["noProxyArp"] = args ? args.noProxyArp : undefined;
            resourceInputs["originalNetwork"] = args ? args.originalNetwork : undefined;
            resourceInputs["originalPort"] = args ? args.originalPort : undefined;
            resourceInputs["patOptions"] = args ? args.patOptions : undefined;
            resourceInputs["performRouteLookup"] = args ? args.performRouteLookup : undefined;
            resourceInputs["sourceInterface"] = args ? args.sourceInterface : undefined;
            resourceInputs["translateDns"] = args ? args.translateDns : undefined;
            resourceInputs["translatedNetwork"] = args ? args.translatedNetwork : undefined;
            resourceInputs["translatedNetworkIsDestinationInterface"] = args ? args.translatedNetworkIsDestinationInterface : undefined;
            resourceInputs["translatedPort"] = args ? args.translatedPort : undefined;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FtdAutonatRules.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FtdAutonatRules resources.
 */
export interface FtdAutonatRulesState {
    /**
     * The description of this resource
     */
    description?: pulumi.Input<string>;
    /**
     * Destination interface of this resource
     */
    destinationInterface?: pulumi.Input<inputs.FtdAutonatRulesDestinationInterface>;
    /**
     * Enable Fallthrough
     */
    fallthrough?: pulumi.Input<boolean>;
    /**
     * Enable IPv6
     */
    ipv6?: pulumi.Input<boolean>;
    /**
     * The ID of the NAT policy this resource belongs to
     */
    natPolicy?: pulumi.Input<string>;
    /**
     * The type of this resource, "static" or "dynamic"
     */
    natType?: pulumi.Input<string>;
    /**
     * Enable Net to Net
     */
    netToNet?: pulumi.Input<boolean>;
    /**
     * Disable Proxy ARP
     */
    noProxyArp?: pulumi.Input<boolean>;
    /**
     * Original network for this resource
     */
    originalNetwork?: pulumi.Input<inputs.FtdAutonatRulesOriginalNetwork>;
    /**
     * Original port for this resource
     */
    originalPort?: pulumi.Input<inputs.FtdAutonatRulesOriginalPort>;
    /**
     * PAT options for this resource
     */
    patOptions?: pulumi.Input<inputs.FtdAutonatRulesPatOptions>;
    /**
     * Enable perform route lookups for this resource
     */
    performRouteLookup?: pulumi.Input<boolean>;
    /**
     * Source interface for this resource
     */
    sourceInterface?: pulumi.Input<inputs.FtdAutonatRulesSourceInterface>;
    /**
     * Enable Translate DNS
     */
    translateDns?: pulumi.Input<boolean>;
    /**
     * Translated interface for this resource
     */
    translatedNetwork?: pulumi.Input<inputs.FtdAutonatRulesTranslatedNetwork>;
    /**
     * Interface is the destination translated network
     */
    translatedNetworkIsDestinationInterface?: pulumi.Input<boolean>;
    /**
     * Translated port for this resource
     */
    translatedPort?: pulumi.Input<number>;
    /**
     * The type of this resource
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FtdAutonatRules resource.
 */
export interface FtdAutonatRulesArgs {
    /**
     * The description of this resource
     */
    description?: pulumi.Input<string>;
    /**
     * Destination interface of this resource
     */
    destinationInterface?: pulumi.Input<inputs.FtdAutonatRulesDestinationInterface>;
    /**
     * Enable Fallthrough
     */
    fallthrough?: pulumi.Input<boolean>;
    /**
     * Enable IPv6
     */
    ipv6?: pulumi.Input<boolean>;
    /**
     * The ID of the NAT policy this resource belongs to
     */
    natPolicy: pulumi.Input<string>;
    /**
     * The type of this resource, "static" or "dynamic"
     */
    natType: pulumi.Input<string>;
    /**
     * Enable Net to Net
     */
    netToNet?: pulumi.Input<boolean>;
    /**
     * Disable Proxy ARP
     */
    noProxyArp?: pulumi.Input<boolean>;
    /**
     * Original network for this resource
     */
    originalNetwork?: pulumi.Input<inputs.FtdAutonatRulesOriginalNetwork>;
    /**
     * Original port for this resource
     */
    originalPort?: pulumi.Input<inputs.FtdAutonatRulesOriginalPort>;
    /**
     * PAT options for this resource
     */
    patOptions?: pulumi.Input<inputs.FtdAutonatRulesPatOptions>;
    /**
     * Enable perform route lookups for this resource
     */
    performRouteLookup?: pulumi.Input<boolean>;
    /**
     * Source interface for this resource
     */
    sourceInterface?: pulumi.Input<inputs.FtdAutonatRulesSourceInterface>;
    /**
     * Enable Translate DNS
     */
    translateDns?: pulumi.Input<boolean>;
    /**
     * Translated interface for this resource
     */
    translatedNetwork?: pulumi.Input<inputs.FtdAutonatRulesTranslatedNetwork>;
    /**
     * Interface is the destination translated network
     */
    translatedNetworkIsDestinationInterface?: pulumi.Input<boolean>;
    /**
     * Translated port for this resource
     */
    translatedPort?: pulumi.Input<number>;
}
