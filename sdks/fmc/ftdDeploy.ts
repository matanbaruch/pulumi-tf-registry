// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class FtdDeploy extends pulumi.CustomResource {
    /**
     * Get an existing FtdDeploy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FtdDeployState, opts?: pulumi.CustomResourceOptions): FtdDeploy {
        return new FtdDeploy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmc:index/ftdDeploy:FtdDeploy';

    /**
     * Returns true if the given object is an instance of FtdDeploy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FtdDeploy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FtdDeploy.__pulumiType;
    }

    public readonly device!: pulumi.Output<string>;
    public readonly forceDeploy!: pulumi.Output<boolean | undefined>;
    public readonly ignoreWarning!: pulumi.Output<boolean | undefined>;

    /**
     * Create a FtdDeploy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FtdDeployArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FtdDeployArgs | FtdDeployState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FtdDeployState | undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["forceDeploy"] = state ? state.forceDeploy : undefined;
            resourceInputs["ignoreWarning"] = state ? state.ignoreWarning : undefined;
        } else {
            const args = argsOrState as FtdDeployArgs | undefined;
            if ((!args || args.device === undefined) && !opts.urn) {
                throw new Error("Missing required property 'device'");
            }
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["forceDeploy"] = args ? args.forceDeploy : undefined;
            resourceInputs["ignoreWarning"] = args ? args.ignoreWarning : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FtdDeploy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FtdDeploy resources.
 */
export interface FtdDeployState {
    device?: pulumi.Input<string>;
    forceDeploy?: pulumi.Input<boolean>;
    ignoreWarning?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a FtdDeploy resource.
 */
export interface FtdDeployArgs {
    device: pulumi.Input<string>;
    forceDeploy?: pulumi.Input<boolean>;
    ignoreWarning?: pulumi.Input<boolean>;
}
