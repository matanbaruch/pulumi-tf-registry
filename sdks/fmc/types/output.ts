// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AccessRulesDestinationDynamicObjects {
    destinationDynamicObjects: outputs.AccessRulesDestinationDynamicObjectsDestinationDynamicObject[];
}

export interface AccessRulesDestinationDynamicObjectsDestinationDynamicObject {
    /**
     * The ID of this resource
     */
    id: string;
    /**
     * The type of this resource
     */
    type: string;
}

export interface AccessRulesDestinationNetworks {
    destinationNetworks: outputs.AccessRulesDestinationNetworksDestinationNetwork[];
}

export interface AccessRulesDestinationNetworksDestinationNetwork {
    /**
     * The ID of this resource
     */
    id: string;
    /**
     * The type of this resource
     */
    type: string;
}

export interface AccessRulesDestinationPorts {
    destinationPorts: outputs.AccessRulesDestinationPortsDestinationPort[];
}

export interface AccessRulesDestinationPortsDestinationPort {
    /**
     * The ID of this resource
     */
    id: string;
    /**
     * The type of this resource
     */
    type: string;
}

export interface AccessRulesDestinationSecurityGroupTags {
    destinationSecurityGroupTags: outputs.AccessRulesDestinationSecurityGroupTagsDestinationSecurityGroupTag[];
}

export interface AccessRulesDestinationSecurityGroupTagsDestinationSecurityGroupTag {
    /**
     * The ID of this resource
     */
    id: string;
    /**
     * The type of this resource
     */
    type: string;
}

export interface AccessRulesDestinationZones {
    destinationZones: outputs.AccessRulesDestinationZonesDestinationZone[];
}

export interface AccessRulesDestinationZonesDestinationZone {
    /**
     * The ID of this resource
     */
    id: string;
    /**
     * The type of this resource
     */
    type: string;
}

export interface AccessRulesSourceDynamicObjects {
    sourceDynamicObjects: outputs.AccessRulesSourceDynamicObjectsSourceDynamicObject[];
}

export interface AccessRulesSourceDynamicObjectsSourceDynamicObject {
    /**
     * The ID of this resource
     */
    id: string;
    /**
     * The type of this resource
     */
    type: string;
}

export interface AccessRulesSourceNetworks {
    sourceNetworks: outputs.AccessRulesSourceNetworksSourceNetwork[];
}

export interface AccessRulesSourceNetworksSourceNetwork {
    /**
     * The ID of this resource
     */
    id: string;
    /**
     * The type of this resource
     */
    type: string;
}

export interface AccessRulesSourcePorts {
    sourcePorts: outputs.AccessRulesSourcePortsSourcePort[];
}

export interface AccessRulesSourcePortsSourcePort {
    /**
     * The ID of this resource
     */
    id: string;
    /**
     * The type of this resource
     */
    type: string;
}

export interface AccessRulesSourceSecurityGroupTags {
    sourceSecurityGroupTags: outputs.AccessRulesSourceSecurityGroupTagsSourceSecurityGroupTag[];
}

export interface AccessRulesSourceSecurityGroupTagsSourceSecurityGroupTag {
    /**
     * The ID of this resource
     */
    id: string;
    /**
     * The type of this resource
     */
    type: string;
}

export interface AccessRulesSourceZones {
    sourceZones: outputs.AccessRulesSourceZonesSourceZone[];
}

export interface AccessRulesSourceZonesSourceZone {
    /**
     * The ID of this resource
     */
    id: string;
    /**
     * The type of this resource
     */
    type: string;
}

export interface AccessRulesUrls {
    urls: outputs.AccessRulesUrlsUrl[];
}

export interface AccessRulesUrlsUrl {
    /**
     * The ID of this resource
     */
    id: string;
    /**
     * The type of this resource
     */
    type: string;
}

export interface DeviceClusterCommonBootstrap {
    cclInterfaces?: outputs.DeviceClusterCommonBootstrapCclInterface[];
    /**
     * Cluster control network
     */
    cclNetwork?: string;
    /**
     * VNI network
     */
    vniNetwork?: string;
}

export interface DeviceClusterCommonBootstrapCclInterface {
    /**
     * Interface ID
     */
    id?: string;
    /**
     * Interface Name
     */
    name?: string;
    /**
     * Interface Type
     */
    type: string;
}

export interface DeviceClusterControlDevice {
    clusterNodeBootstraps: outputs.DeviceClusterControlDeviceClusterNodeBootstrap[];
    deviceDetails: outputs.DeviceClusterControlDeviceDeviceDetail[];
}

export interface DeviceClusterControlDeviceClusterNodeBootstrap {
    /**
     * Cluster control IP
     */
    cclip: string;
    /**
     * Set the priority of cluster node
     */
    priority?: number;
}

export interface DeviceClusterControlDeviceDeviceDetail {
    /**
     * Device ID
     */
    id: string;
    /**
     * Device Name
     */
    name?: string;
    /**
     * Device Type
     */
    type: string;
}

export interface DeviceClusterDataDevice {
    clusterNodeBootstraps?: outputs.DeviceClusterDataDeviceClusterNodeBootstrap[];
    deviceDetails?: outputs.DeviceClusterDataDeviceDeviceDetail[];
}

export interface DeviceClusterDataDeviceClusterNodeBootstrap {
    /**
     * Cluster control IP
     */
    cclip?: string;
    /**
     * Set the priority of cluster node
     */
    priority?: number;
}

export interface DeviceClusterDataDeviceDeviceDetail {
    /**
     * Device ID
     */
    id?: string;
    /**
     * Device Name
     */
    name?: string;
    /**
     * Device Type
     */
    type: string;
}

export interface DeviceVniIpv4 {
    dhcps?: outputs.DeviceVniIpv4Dhcp[];
    statics?: outputs.DeviceVniIpv4Static[];
}

export interface DeviceVniIpv4Dhcp {
    dhcpRouteMetric?: number;
    /**
     * Dynamic IP of the interface
     */
    enableDefaultRouteDhcp?: boolean;
}

export interface DeviceVniIpv4Static {
    /**
     * IP of the interface
     */
    address?: string;
    /**
     * Net mask of the interface
     */
    netmask?: number;
}

export interface DevicesAccessPolicy {
    /**
     * The ID of this resource
     */
    id: string;
    /**
     * The type of this resource
     */
    type?: string;
}

export interface DevicesBulkDevice {
    /**
     * access policy for this resource
     */
    accessPolicy: outputs.DevicesBulkDeviceAccessPolicy;
    /**
     * The hostname of FTD
     */
    hostname: string;
    /**
     * The id of this resource
     */
    id: string;
    /**
     * License caps for this resource
     */
    licenseCaps?: string[];
    /**
     * The name of FTD
     */
    name?: string;
    /**
     * NAT_ID is required, if configured in FTD
     */
    natId?: string;
    /**
     * Select the desired performace tier
     */
    performanceTier?: string;
    /**
     * Same regkey as entered in FTD
     */
    regkey: string;
    /**
     * The type of this resource
     */
    type: string;
}

export interface DevicesBulkDeviceAccessPolicy {
    /**
     * The ID of this resource
     */
    id: string;
    /**
     * The type of this resource
     */
    type?: string;
}

export interface DevicesBulkIdMapping {
    id: string;
    name: string;
}

export interface FtdAutonatRulesDestinationInterface {
    /**
     * The ID of this resource
     */
    id: string;
    /**
     * The type of this resource
     */
    type: string;
}

export interface FtdAutonatRulesOriginalNetwork {
    /**
     * The ID of this resource
     */
    id: string;
    /**
     * The type of this resource
     */
    type: string;
}

export interface FtdAutonatRulesOriginalPort {
    port: number;
    protocol: string;
}

export interface FtdAutonatRulesPatOptions {
    /**
     * Enable Extended PAT table
     */
    extendedPatTable?: boolean;
    /**
     * Include Reserve ports
     */
    includeReservePorts?: boolean;
    /**
     * Enable interface PAT
     */
    interfacePat?: boolean;
    /**
     * Network Pool for PAT
     */
    patPoolAddress?: outputs.FtdAutonatRulesPatOptionsPatPoolAddress;
    /**
     * Enable Round Robin
     */
    roundRobin?: boolean;
}

export interface FtdAutonatRulesPatOptionsPatPoolAddress {
    /**
     * The ID of this resource
     */
    id: string;
    /**
     * The type of this resource
     */
    type: string;
}

export interface FtdAutonatRulesSourceInterface {
    /**
     * The ID of this resource
     */
    id: string;
    /**
     * The type of this resource
     */
    type: string;
}

export interface FtdAutonatRulesTranslatedNetwork {
    /**
     * The ID of this resource
     */
    id: string;
    /**
     * The type of this resource
     */
    type: string;
}

export interface FtdManualnatRulesDestinationInterface {
    /**
     * The ID of this resource
     */
    id: string;
    /**
     * The type of this resource
     */
    type: string;
}

export interface FtdManualnatRulesOriginalDestination {
    /**
     * The ID of this resource
     */
    id: string;
    /**
     * The type of this resource
     */
    type: string;
}

export interface FtdManualnatRulesOriginalDestinationPort {
    /**
     * The ID of this resource
     */
    id: string;
    /**
     * The type of this resource
     */
    type: string;
}

export interface FtdManualnatRulesOriginalSource {
    /**
     * The ID of this resource
     */
    id: string;
    /**
     * The type of this resource
     */
    type: string;
}

export interface FtdManualnatRulesOriginalSourcePort {
    /**
     * The ID of this resource
     */
    id: string;
    /**
     * The type of this resource
     */
    type: string;
}

export interface FtdManualnatRulesPatOptions {
    extendedPatTable?: boolean;
    includeReservePorts?: boolean;
    interfacePat?: boolean;
    patPoolAddress?: outputs.FtdManualnatRulesPatOptionsPatPoolAddress;
    roundRobin?: boolean;
}

export interface FtdManualnatRulesPatOptionsPatPoolAddress {
    /**
     * The ID of this resource
     */
    id: string;
    /**
     * The type of this resource
     */
    type: string;
}

export interface FtdManualnatRulesSourceInterface {
    /**
     * The ID of this resource
     */
    id: string;
    /**
     * The type of this resource
     */
    type: string;
}

export interface FtdManualnatRulesTranslatedDestination {
    /**
     * The ID of this resource
     */
    id: string;
    /**
     * The type of this resource
     */
    type: string;
}

export interface FtdManualnatRulesTranslatedDestinationPort {
    /**
     * The ID of this resource
     */
    id: string;
    /**
     * The type of this resource
     */
    type: string;
}

export interface FtdManualnatRulesTranslatedSource {
    /**
     * The ID of this resource
     */
    id: string;
    /**
     * The type of this resource
     */
    type: string;
}

export interface FtdManualnatRulesTranslatedSourcePort {
    /**
     * The ID of this resource
     */
    id: string;
    /**
     * The type of this resource
     */
    type: string;
}

export interface GetNetworkAnalysisPolicyBasePolicy {
    id: string;
    /**
     * Name of base policy
     */
    name: string;
    /**
     * Type of base policy
     */
    type?: string;
}

export interface NetworkAnalysisPolicyBasePolicy {
    id: string;
    /**
     * Name of base policy
     */
    name: string;
    /**
     * Type of base policy
     */
    type: string;
}

export interface NetworkGroupObjectsLiteral {
    /**
     * The type of this resource
     */
    type: string;
    /**
     * The value of this resource
     */
    value: string;
}

export interface NetworkGroupObjectsObject {
    /**
     * The ID of this resource
     */
    id: string;
    /**
     * The type of this resource
     */
    type: string;
}

export interface NetworkObjectsBulkIdMapping {
    id: string;
    name: string;
}

export interface NetworkObjectsBulkObject {
    /**
     * The description of this resource
     */
    description?: string;
    /**
     * The id of this resource
     */
    id: string;
    /**
     * The name of this resource
     */
    name: string;
    /**
     * The type this resource
     */
    type: string;
    /**
     * The value of this resource
     */
    value: string;
}

export interface PolicyDevicesAssignmentsPolicy {
    /**
     * The ID of this resource
     */
    id: string;
    /**
     * The type of this resource
     */
    type: string;
}

export interface PolicyDevicesAssignmentsTargetDevice {
    /**
     * The ID of this resource
     */
    id: string;
    /**
     * The type of this resource
     */
    type: string;
}

export interface PortGroupObjectsObject {
    /**
     * The ID of this resource
     */
    id: string;
    /**
     * The type of this resource
     */
    type: string;
}

export interface PrefilterPolicyDefaultAction {
    /**
     * Action. Should be BLOCK_TUNNELS or ANALYZE_TUNNELS
     */
    action: string;
    id: string;
    /**
     * Log begin
     */
    logBegin?: boolean;
    /**
     * Send events to FMC
     */
    sendEventsToFmc?: boolean;
}

export interface StaticIPv4RouteGateway {
    objects: outputs.StaticIPv4RouteGatewayObject[];
}

export interface StaticIPv4RouteGatewayObject {
    /**
     * The ID of this resource
     */
    id: string;
    /**
     * The name of this resource
     */
    name?: string;
    /**
     * The type of this resource
     */
    type?: string;
}

export interface StaticIPv4RouteRouteTracking {
    /**
     * The ID of this resource
     */
    id: string;
    /**
     * The name of this resource
     */
    name: string;
    /**
     * The type of this resource
     */
    type: string;
}

export interface StaticIPv4RouteSelectedNetworks {
    /**
     * The ID of this resource
     */
    id: string;
    /**
     * The name of this resource
     */
    name?: string;
    /**
     * The type of this resource
     */
    type?: string;
}

export interface TimeRangeObjectRecurrence {
    /**
     * Daily end time for this recurrence (time in RFC3339 format)
     */
    dailyEndTime?: string;
    /**
     * Daily start time for this recurrence (time in RFC3339 format)
     */
    dailyStartTime?: string;
    days?: string[];
    /**
     * End day for this recurrence (time in RFC3339 format)
     */
    endDay?: string;
    /**
     * End date for this recurrence (time in RFC3339 format)
     */
    endTime?: string;
    /**
     * Type of recurrence. Allowed values: "DAILY_INTERVAL", "RANGE"
     */
    recurrenceType: string;
    /**
     * Start day for this recurrence (time in RFC3339 format)
     */
    startDay?: string;
    /**
     * Start date for this recurrence (time in RFC3339 format)
     */
    startTime?: string;
}

export interface UrlObjectGroupLiteral {
    /**
     * The type of this resource
     */
    type: string;
    /**
     * The value URL for this resource
     */
    url: string;
}

export interface UrlObjectGroupObject {
    /**
     * The ID of this resource
     */
    id: string;
    /**
     * The type of this resource
     */
    type: string;
}

