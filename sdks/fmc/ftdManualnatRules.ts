// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FtdManualnatRules extends pulumi.CustomResource {
    /**
     * Get an existing FtdManualnatRules resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FtdManualnatRulesState, opts?: pulumi.CustomResourceOptions): FtdManualnatRules {
        return new FtdManualnatRules(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmc:index/ftdManualnatRules:FtdManualnatRules';

    /**
     * Returns true if the given object is an instance of FtdManualnatRules.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FtdManualnatRules {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FtdManualnatRules.__pulumiType;
    }

    /**
     * The description of this resource
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Destination interface for this resource
     */
    public readonly destinationInterface!: pulumi.Output<outputs.FtdManualnatRulesDestinationInterface | undefined>;
    /**
     * Enable this resource
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Enable fallthrough
     */
    public readonly fallthrough!: pulumi.Output<boolean | undefined>;
    /**
     * Interface is the original destination
     */
    public readonly interfaceInOriginalDestination!: pulumi.Output<boolean | undefined>;
    /**
     * Interface is the translated source
     */
    public readonly interfaceInTranslatedSource!: pulumi.Output<boolean | undefined>;
    /**
     * Enable IPv6
     */
    public readonly ipv6!: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the NAT policy this resource belongs to
     */
    public readonly natPolicy!: pulumi.Output<string>;
    /**
     * The type of this resource, "static" or "dynamic"
     */
    public readonly natType!: pulumi.Output<string>;
    /**
     * Enable Net to Net
     */
    public readonly netToNet!: pulumi.Output<boolean | undefined>;
    /**
     * Disable proxy ARP
     */
    public readonly noProxyArp!: pulumi.Output<boolean | undefined>;
    /**
     * Original destination for this resource
     */
    public readonly originalDestination!: pulumi.Output<outputs.FtdManualnatRulesOriginalDestination | undefined>;
    /**
     * Original destination port for this resource
     */
    public readonly originalDestinationPort!: pulumi.Output<outputs.FtdManualnatRulesOriginalDestinationPort | undefined>;
    /**
     * Original source for this resource
     */
    public readonly originalSource!: pulumi.Output<outputs.FtdManualnatRulesOriginalSource>;
    /**
     * Original source port for this resource
     */
    public readonly originalSourcePort!: pulumi.Output<outputs.FtdManualnatRulesOriginalSourcePort | undefined>;
    /**
     * PAT Options for this resource
     */
    public readonly patOptions!: pulumi.Output<outputs.FtdManualnatRulesPatOptions | undefined>;
    /**
     * Enable perform route lookup
     */
    public readonly performRouteLookup!: pulumi.Output<boolean | undefined>;
    /**
     * Section, "after_auto" or "before_auto"
     */
    public readonly section!: pulumi.Output<string | undefined>;
    /**
     * Source interface for this resource
     */
    public readonly sourceInterface!: pulumi.Output<outputs.FtdManualnatRulesSourceInterface | undefined>;
    /**
     * Target index to place this resource
     */
    public readonly targetIndex!: pulumi.Output<string | undefined>;
    /**
     * Enable translate DNS
     */
    public readonly translateDns!: pulumi.Output<boolean | undefined>;
    /**
     * Translated destination for this resource
     */
    public readonly translatedDestination!: pulumi.Output<outputs.FtdManualnatRulesTranslatedDestination | undefined>;
    /**
     * Translated destination port for this resource
     */
    public readonly translatedDestinationPort!: pulumi.Output<outputs.FtdManualnatRulesTranslatedDestinationPort | undefined>;
    /**
     * Translated source for this resource
     */
    public readonly translatedSource!: pulumi.Output<outputs.FtdManualnatRulesTranslatedSource | undefined>;
    /**
     * Translated source port for this resource
     */
    public readonly translatedSourcePort!: pulumi.Output<outputs.FtdManualnatRulesTranslatedSourcePort | undefined>;
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * Make this resource unidirectional
     */
    public readonly unidirectional!: pulumi.Output<boolean | undefined>;

    /**
     * Create a FtdManualnatRules resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FtdManualnatRulesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FtdManualnatRulesArgs | FtdManualnatRulesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FtdManualnatRulesState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destinationInterface"] = state ? state.destinationInterface : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["fallthrough"] = state ? state.fallthrough : undefined;
            resourceInputs["interfaceInOriginalDestination"] = state ? state.interfaceInOriginalDestination : undefined;
            resourceInputs["interfaceInTranslatedSource"] = state ? state.interfaceInTranslatedSource : undefined;
            resourceInputs["ipv6"] = state ? state.ipv6 : undefined;
            resourceInputs["natPolicy"] = state ? state.natPolicy : undefined;
            resourceInputs["natType"] = state ? state.natType : undefined;
            resourceInputs["netToNet"] = state ? state.netToNet : undefined;
            resourceInputs["noProxyArp"] = state ? state.noProxyArp : undefined;
            resourceInputs["originalDestination"] = state ? state.originalDestination : undefined;
            resourceInputs["originalDestinationPort"] = state ? state.originalDestinationPort : undefined;
            resourceInputs["originalSource"] = state ? state.originalSource : undefined;
            resourceInputs["originalSourcePort"] = state ? state.originalSourcePort : undefined;
            resourceInputs["patOptions"] = state ? state.patOptions : undefined;
            resourceInputs["performRouteLookup"] = state ? state.performRouteLookup : undefined;
            resourceInputs["section"] = state ? state.section : undefined;
            resourceInputs["sourceInterface"] = state ? state.sourceInterface : undefined;
            resourceInputs["targetIndex"] = state ? state.targetIndex : undefined;
            resourceInputs["translateDns"] = state ? state.translateDns : undefined;
            resourceInputs["translatedDestination"] = state ? state.translatedDestination : undefined;
            resourceInputs["translatedDestinationPort"] = state ? state.translatedDestinationPort : undefined;
            resourceInputs["translatedSource"] = state ? state.translatedSource : undefined;
            resourceInputs["translatedSourcePort"] = state ? state.translatedSourcePort : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["unidirectional"] = state ? state.unidirectional : undefined;
        } else {
            const args = argsOrState as FtdManualnatRulesArgs | undefined;
            if ((!args || args.natPolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'natPolicy'");
            }
            if ((!args || args.natType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'natType'");
            }
            if ((!args || args.originalSource === undefined) && !opts.urn) {
                throw new Error("Missing required property 'originalSource'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destinationInterface"] = args ? args.destinationInterface : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["fallthrough"] = args ? args.fallthrough : undefined;
            resourceInputs["interfaceInOriginalDestination"] = args ? args.interfaceInOriginalDestination : undefined;
            resourceInputs["interfaceInTranslatedSource"] = args ? args.interfaceInTranslatedSource : undefined;
            resourceInputs["ipv6"] = args ? args.ipv6 : undefined;
            resourceInputs["natPolicy"] = args ? args.natPolicy : undefined;
            resourceInputs["natType"] = args ? args.natType : undefined;
            resourceInputs["netToNet"] = args ? args.netToNet : undefined;
            resourceInputs["noProxyArp"] = args ? args.noProxyArp : undefined;
            resourceInputs["originalDestination"] = args ? args.originalDestination : undefined;
            resourceInputs["originalDestinationPort"] = args ? args.originalDestinationPort : undefined;
            resourceInputs["originalSource"] = args ? args.originalSource : undefined;
            resourceInputs["originalSourcePort"] = args ? args.originalSourcePort : undefined;
            resourceInputs["patOptions"] = args ? args.patOptions : undefined;
            resourceInputs["performRouteLookup"] = args ? args.performRouteLookup : undefined;
            resourceInputs["section"] = args ? args.section : undefined;
            resourceInputs["sourceInterface"] = args ? args.sourceInterface : undefined;
            resourceInputs["targetIndex"] = args ? args.targetIndex : undefined;
            resourceInputs["translateDns"] = args ? args.translateDns : undefined;
            resourceInputs["translatedDestination"] = args ? args.translatedDestination : undefined;
            resourceInputs["translatedDestinationPort"] = args ? args.translatedDestinationPort : undefined;
            resourceInputs["translatedSource"] = args ? args.translatedSource : undefined;
            resourceInputs["translatedSourcePort"] = args ? args.translatedSourcePort : undefined;
            resourceInputs["unidirectional"] = args ? args.unidirectional : undefined;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FtdManualnatRules.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FtdManualnatRules resources.
 */
export interface FtdManualnatRulesState {
    /**
     * The description of this resource
     */
    description?: pulumi.Input<string>;
    /**
     * Destination interface for this resource
     */
    destinationInterface?: pulumi.Input<inputs.FtdManualnatRulesDestinationInterface>;
    /**
     * Enable this resource
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Enable fallthrough
     */
    fallthrough?: pulumi.Input<boolean>;
    /**
     * Interface is the original destination
     */
    interfaceInOriginalDestination?: pulumi.Input<boolean>;
    /**
     * Interface is the translated source
     */
    interfaceInTranslatedSource?: pulumi.Input<boolean>;
    /**
     * Enable IPv6
     */
    ipv6?: pulumi.Input<boolean>;
    /**
     * The ID of the NAT policy this resource belongs to
     */
    natPolicy?: pulumi.Input<string>;
    /**
     * The type of this resource, "static" or "dynamic"
     */
    natType?: pulumi.Input<string>;
    /**
     * Enable Net to Net
     */
    netToNet?: pulumi.Input<boolean>;
    /**
     * Disable proxy ARP
     */
    noProxyArp?: pulumi.Input<boolean>;
    /**
     * Original destination for this resource
     */
    originalDestination?: pulumi.Input<inputs.FtdManualnatRulesOriginalDestination>;
    /**
     * Original destination port for this resource
     */
    originalDestinationPort?: pulumi.Input<inputs.FtdManualnatRulesOriginalDestinationPort>;
    /**
     * Original source for this resource
     */
    originalSource?: pulumi.Input<inputs.FtdManualnatRulesOriginalSource>;
    /**
     * Original source port for this resource
     */
    originalSourcePort?: pulumi.Input<inputs.FtdManualnatRulesOriginalSourcePort>;
    /**
     * PAT Options for this resource
     */
    patOptions?: pulumi.Input<inputs.FtdManualnatRulesPatOptions>;
    /**
     * Enable perform route lookup
     */
    performRouteLookup?: pulumi.Input<boolean>;
    /**
     * Section, "after_auto" or "before_auto"
     */
    section?: pulumi.Input<string>;
    /**
     * Source interface for this resource
     */
    sourceInterface?: pulumi.Input<inputs.FtdManualnatRulesSourceInterface>;
    /**
     * Target index to place this resource
     */
    targetIndex?: pulumi.Input<string>;
    /**
     * Enable translate DNS
     */
    translateDns?: pulumi.Input<boolean>;
    /**
     * Translated destination for this resource
     */
    translatedDestination?: pulumi.Input<inputs.FtdManualnatRulesTranslatedDestination>;
    /**
     * Translated destination port for this resource
     */
    translatedDestinationPort?: pulumi.Input<inputs.FtdManualnatRulesTranslatedDestinationPort>;
    /**
     * Translated source for this resource
     */
    translatedSource?: pulumi.Input<inputs.FtdManualnatRulesTranslatedSource>;
    /**
     * Translated source port for this resource
     */
    translatedSourcePort?: pulumi.Input<inputs.FtdManualnatRulesTranslatedSourcePort>;
    type?: pulumi.Input<string>;
    /**
     * Make this resource unidirectional
     */
    unidirectional?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a FtdManualnatRules resource.
 */
export interface FtdManualnatRulesArgs {
    /**
     * The description of this resource
     */
    description?: pulumi.Input<string>;
    /**
     * Destination interface for this resource
     */
    destinationInterface?: pulumi.Input<inputs.FtdManualnatRulesDestinationInterface>;
    /**
     * Enable this resource
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Enable fallthrough
     */
    fallthrough?: pulumi.Input<boolean>;
    /**
     * Interface is the original destination
     */
    interfaceInOriginalDestination?: pulumi.Input<boolean>;
    /**
     * Interface is the translated source
     */
    interfaceInTranslatedSource?: pulumi.Input<boolean>;
    /**
     * Enable IPv6
     */
    ipv6?: pulumi.Input<boolean>;
    /**
     * The ID of the NAT policy this resource belongs to
     */
    natPolicy: pulumi.Input<string>;
    /**
     * The type of this resource, "static" or "dynamic"
     */
    natType: pulumi.Input<string>;
    /**
     * Enable Net to Net
     */
    netToNet?: pulumi.Input<boolean>;
    /**
     * Disable proxy ARP
     */
    noProxyArp?: pulumi.Input<boolean>;
    /**
     * Original destination for this resource
     */
    originalDestination?: pulumi.Input<inputs.FtdManualnatRulesOriginalDestination>;
    /**
     * Original destination port for this resource
     */
    originalDestinationPort?: pulumi.Input<inputs.FtdManualnatRulesOriginalDestinationPort>;
    /**
     * Original source for this resource
     */
    originalSource: pulumi.Input<inputs.FtdManualnatRulesOriginalSource>;
    /**
     * Original source port for this resource
     */
    originalSourcePort?: pulumi.Input<inputs.FtdManualnatRulesOriginalSourcePort>;
    /**
     * PAT Options for this resource
     */
    patOptions?: pulumi.Input<inputs.FtdManualnatRulesPatOptions>;
    /**
     * Enable perform route lookup
     */
    performRouteLookup?: pulumi.Input<boolean>;
    /**
     * Section, "after_auto" or "before_auto"
     */
    section?: pulumi.Input<string>;
    /**
     * Source interface for this resource
     */
    sourceInterface?: pulumi.Input<inputs.FtdManualnatRulesSourceInterface>;
    /**
     * Target index to place this resource
     */
    targetIndex?: pulumi.Input<string>;
    /**
     * Enable translate DNS
     */
    translateDns?: pulumi.Input<boolean>;
    /**
     * Translated destination for this resource
     */
    translatedDestination?: pulumi.Input<inputs.FtdManualnatRulesTranslatedDestination>;
    /**
     * Translated destination port for this resource
     */
    translatedDestinationPort?: pulumi.Input<inputs.FtdManualnatRulesTranslatedDestinationPort>;
    /**
     * Translated source for this resource
     */
    translatedSource?: pulumi.Input<inputs.FtdManualnatRulesTranslatedSource>;
    /**
     * Translated source port for this resource
     */
    translatedSourcePort?: pulumi.Input<inputs.FtdManualnatRulesTranslatedSourcePort>;
    /**
     * Make this resource unidirectional
     */
    unidirectional?: pulumi.Input<boolean>;
}
