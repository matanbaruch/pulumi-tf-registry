// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getSmartLicense(args?: GetSmartLicenseArgs, opts?: pulumi.InvokeOptions): Promise<GetSmartLicenseResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("fmc:index/getSmartLicense:getSmartLicense", {
        "id": args.id,
        "virtualAccount": args.virtualAccount,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSmartLicense.
 */
export interface GetSmartLicenseArgs {
    id?: string;
    virtualAccount?: string;
}

/**
 * A collection of values returned by getSmartLicense.
 */
export interface GetSmartLicenseResult {
    readonly evalExpiresInDays: number;
    readonly evaluationUsed: boolean;
    readonly id: string;
    readonly registrationStatus: string;
    readonly virtualAccount: string;
}
export function getSmartLicenseOutput(args?: GetSmartLicenseOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSmartLicenseResult> {
    return pulumi.output(args).apply((a: any) => getSmartLicense(a, opts))
}

/**
 * A collection of arguments for invoking getSmartLicense.
 */
export interface GetSmartLicenseOutputArgs {
    id?: pulumi.Input<string>;
    virtualAccount?: pulumi.Input<string>;
}
