// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class StaticIPv4Route extends pulumi.CustomResource {
    /**
     * Get an existing StaticIPv4Route resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StaticIPv4RouteState, opts?: pulumi.CustomResourceOptions): StaticIPv4Route {
        return new StaticIPv4Route(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmc:index/staticIPv4Route:StaticIPv4Route';

    /**
     * Returns true if the given object is an instance of StaticIPv4Route.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StaticIPv4Route {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StaticIPv4Route.__pulumiType;
    }

    /**
     * The ID of this resource
     */
    public readonly deviceId!: pulumi.Output<string>;
    /**
     * The gateway for this resource
     */
    public readonly gateway!: pulumi.Output<outputs.StaticIPv4RouteGateway>;
    /**
     * Name of the interface
     */
    public readonly interfaceName!: pulumi.Output<string>;
    /**
     * If the route is tunneled or not
     */
    public readonly isTunneled!: pulumi.Output<boolean | undefined>;
    /**
     * The metric value to send
     */
    public readonly metricValue!: pulumi.Output<number>;
    /**
     * Route tracking information
     */
    public readonly routeTracking!: pulumi.Output<outputs.StaticIPv4RouteRouteTracking | undefined>;
    /**
     * Route tracking information
     */
    public readonly selectedNetworks!: pulumi.Output<outputs.StaticIPv4RouteSelectedNetworks>;
    /**
     * The type of this resource
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a StaticIPv4Route resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StaticIPv4RouteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StaticIPv4RouteArgs | StaticIPv4RouteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StaticIPv4RouteState | undefined;
            resourceInputs["deviceId"] = state ? state.deviceId : undefined;
            resourceInputs["gateway"] = state ? state.gateway : undefined;
            resourceInputs["interfaceName"] = state ? state.interfaceName : undefined;
            resourceInputs["isTunneled"] = state ? state.isTunneled : undefined;
            resourceInputs["metricValue"] = state ? state.metricValue : undefined;
            resourceInputs["routeTracking"] = state ? state.routeTracking : undefined;
            resourceInputs["selectedNetworks"] = state ? state.selectedNetworks : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as StaticIPv4RouteArgs | undefined;
            if ((!args || args.deviceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deviceId'");
            }
            if ((!args || args.gateway === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gateway'");
            }
            if ((!args || args.interfaceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interfaceName'");
            }
            if ((!args || args.metricValue === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metricValue'");
            }
            if ((!args || args.selectedNetworks === undefined) && !opts.urn) {
                throw new Error("Missing required property 'selectedNetworks'");
            }
            resourceInputs["deviceId"] = args ? args.deviceId : undefined;
            resourceInputs["gateway"] = args ? args.gateway : undefined;
            resourceInputs["interfaceName"] = args ? args.interfaceName : undefined;
            resourceInputs["isTunneled"] = args ? args.isTunneled : undefined;
            resourceInputs["metricValue"] = args ? args.metricValue : undefined;
            resourceInputs["routeTracking"] = args ? args.routeTracking : undefined;
            resourceInputs["selectedNetworks"] = args ? args.selectedNetworks : undefined;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StaticIPv4Route.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StaticIPv4Route resources.
 */
export interface StaticIPv4RouteState {
    /**
     * The ID of this resource
     */
    deviceId?: pulumi.Input<string>;
    /**
     * The gateway for this resource
     */
    gateway?: pulumi.Input<inputs.StaticIPv4RouteGateway>;
    /**
     * Name of the interface
     */
    interfaceName?: pulumi.Input<string>;
    /**
     * If the route is tunneled or not
     */
    isTunneled?: pulumi.Input<boolean>;
    /**
     * The metric value to send
     */
    metricValue?: pulumi.Input<number>;
    /**
     * Route tracking information
     */
    routeTracking?: pulumi.Input<inputs.StaticIPv4RouteRouteTracking>;
    /**
     * Route tracking information
     */
    selectedNetworks?: pulumi.Input<inputs.StaticIPv4RouteSelectedNetworks>;
    /**
     * The type of this resource
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StaticIPv4Route resource.
 */
export interface StaticIPv4RouteArgs {
    /**
     * The ID of this resource
     */
    deviceId: pulumi.Input<string>;
    /**
     * The gateway for this resource
     */
    gateway: pulumi.Input<inputs.StaticIPv4RouteGateway>;
    /**
     * Name of the interface
     */
    interfaceName: pulumi.Input<string>;
    /**
     * If the route is tunneled or not
     */
    isTunneled?: pulumi.Input<boolean>;
    /**
     * The metric value to send
     */
    metricValue: pulumi.Input<number>;
    /**
     * Route tracking information
     */
    routeTracking?: pulumi.Input<inputs.StaticIPv4RouteRouteTracking>;
    /**
     * Route tracking information
     */
    selectedNetworks: pulumi.Input<inputs.StaticIPv4RouteSelectedNetworks>;
}
