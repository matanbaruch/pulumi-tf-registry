// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DeviceVtep extends pulumi.CustomResource {
    /**
     * Get an existing DeviceVtep resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeviceVtepState, opts?: pulumi.CustomResourceOptions): DeviceVtep {
        return new DeviceVtep(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmc:index/deviceVtep:DeviceVtep';

    /**
     * Returns true if the given object is an instance of DeviceVtep.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DeviceVtep {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DeviceVtep.__pulumiType;
    }

    /**
     * The Device Id of VTEP
     */
    public readonly deviceId!: pulumi.Output<string>;
    /**
     * Neighbor Address literal type
     */
    public readonly neighborAddrLiteralType!: pulumi.Output<string | undefined>;
    /**
     * Neighbor Address literal value
     */
    public readonly neighborAddrLiteralValue!: pulumi.Output<string | undefined>;
    /**
     * Neighbor Address Object ID
     */
    public readonly neighborAddrObjectId!: pulumi.Output<string | undefined>;
    /**
     * If Object Overridable
     */
    public readonly neighborAddrObjectOverridable!: pulumi.Output<boolean | undefined>;
    /**
     * NVE Destination port
     */
    public readonly nveDestinationPort!: pulumi.Output<number>;
    /**
     * NVE Enabled
     */
    public readonly nveEnabled!: pulumi.Output<boolean>;
    /**
     * NVE Encapsulation type
     */
    public readonly nveEncapsulationType!: pulumi.Output<string>;
    /**
     * NVE Discovery type
     */
    public readonly nveNeighborDiscoveryType!: pulumi.Output<string | undefined>;
    /**
     * NVE VTEP Id
     */
    public readonly nveVtepId!: pulumi.Output<number>;
    /**
     * Source Interface Id
     */
    public readonly sourceInterfaceId!: pulumi.Output<string>;

    /**
     * Create a DeviceVtep resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeviceVtepArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeviceVtepArgs | DeviceVtepState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeviceVtepState | undefined;
            resourceInputs["deviceId"] = state ? state.deviceId : undefined;
            resourceInputs["neighborAddrLiteralType"] = state ? state.neighborAddrLiteralType : undefined;
            resourceInputs["neighborAddrLiteralValue"] = state ? state.neighborAddrLiteralValue : undefined;
            resourceInputs["neighborAddrObjectId"] = state ? state.neighborAddrObjectId : undefined;
            resourceInputs["neighborAddrObjectOverridable"] = state ? state.neighborAddrObjectOverridable : undefined;
            resourceInputs["nveDestinationPort"] = state ? state.nveDestinationPort : undefined;
            resourceInputs["nveEnabled"] = state ? state.nveEnabled : undefined;
            resourceInputs["nveEncapsulationType"] = state ? state.nveEncapsulationType : undefined;
            resourceInputs["nveNeighborDiscoveryType"] = state ? state.nveNeighborDiscoveryType : undefined;
            resourceInputs["nveVtepId"] = state ? state.nveVtepId : undefined;
            resourceInputs["sourceInterfaceId"] = state ? state.sourceInterfaceId : undefined;
        } else {
            const args = argsOrState as DeviceVtepArgs | undefined;
            if ((!args || args.deviceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deviceId'");
            }
            if ((!args || args.nveDestinationPort === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nveDestinationPort'");
            }
            if ((!args || args.nveEnabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nveEnabled'");
            }
            if ((!args || args.nveEncapsulationType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nveEncapsulationType'");
            }
            if ((!args || args.nveVtepId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nveVtepId'");
            }
            if ((!args || args.sourceInterfaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceInterfaceId'");
            }
            resourceInputs["deviceId"] = args ? args.deviceId : undefined;
            resourceInputs["neighborAddrLiteralType"] = args ? args.neighborAddrLiteralType : undefined;
            resourceInputs["neighborAddrLiteralValue"] = args ? args.neighborAddrLiteralValue : undefined;
            resourceInputs["neighborAddrObjectId"] = args ? args.neighborAddrObjectId : undefined;
            resourceInputs["neighborAddrObjectOverridable"] = args ? args.neighborAddrObjectOverridable : undefined;
            resourceInputs["nveDestinationPort"] = args ? args.nveDestinationPort : undefined;
            resourceInputs["nveEnabled"] = args ? args.nveEnabled : undefined;
            resourceInputs["nveEncapsulationType"] = args ? args.nveEncapsulationType : undefined;
            resourceInputs["nveNeighborDiscoveryType"] = args ? args.nveNeighborDiscoveryType : undefined;
            resourceInputs["nveVtepId"] = args ? args.nveVtepId : undefined;
            resourceInputs["sourceInterfaceId"] = args ? args.sourceInterfaceId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DeviceVtep.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DeviceVtep resources.
 */
export interface DeviceVtepState {
    /**
     * The Device Id of VTEP
     */
    deviceId?: pulumi.Input<string>;
    /**
     * Neighbor Address literal type
     */
    neighborAddrLiteralType?: pulumi.Input<string>;
    /**
     * Neighbor Address literal value
     */
    neighborAddrLiteralValue?: pulumi.Input<string>;
    /**
     * Neighbor Address Object ID
     */
    neighborAddrObjectId?: pulumi.Input<string>;
    /**
     * If Object Overridable
     */
    neighborAddrObjectOverridable?: pulumi.Input<boolean>;
    /**
     * NVE Destination port
     */
    nveDestinationPort?: pulumi.Input<number>;
    /**
     * NVE Enabled
     */
    nveEnabled?: pulumi.Input<boolean>;
    /**
     * NVE Encapsulation type
     */
    nveEncapsulationType?: pulumi.Input<string>;
    /**
     * NVE Discovery type
     */
    nveNeighborDiscoveryType?: pulumi.Input<string>;
    /**
     * NVE VTEP Id
     */
    nveVtepId?: pulumi.Input<number>;
    /**
     * Source Interface Id
     */
    sourceInterfaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DeviceVtep resource.
 */
export interface DeviceVtepArgs {
    /**
     * The Device Id of VTEP
     */
    deviceId: pulumi.Input<string>;
    /**
     * Neighbor Address literal type
     */
    neighborAddrLiteralType?: pulumi.Input<string>;
    /**
     * Neighbor Address literal value
     */
    neighborAddrLiteralValue?: pulumi.Input<string>;
    /**
     * Neighbor Address Object ID
     */
    neighborAddrObjectId?: pulumi.Input<string>;
    /**
     * If Object Overridable
     */
    neighborAddrObjectOverridable?: pulumi.Input<boolean>;
    /**
     * NVE Destination port
     */
    nveDestinationPort: pulumi.Input<number>;
    /**
     * NVE Enabled
     */
    nveEnabled: pulumi.Input<boolean>;
    /**
     * NVE Encapsulation type
     */
    nveEncapsulationType: pulumi.Input<string>;
    /**
     * NVE Discovery type
     */
    nveNeighborDiscoveryType?: pulumi.Input<string>;
    /**
     * NVE VTEP Id
     */
    nveVtepId: pulumi.Input<number>;
    /**
     * Source Interface Id
     */
    sourceInterfaceId: pulumi.Input<string>;
}
