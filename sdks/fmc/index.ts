// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AccessPoliciesArgs, AccessPoliciesState } from "./accessPolicies";
export type AccessPolicies = import("./accessPolicies").AccessPolicies;
export const AccessPolicies: typeof import("./accessPolicies").AccessPolicies = null as any;
utilities.lazyLoad(exports, ["AccessPolicies"], () => require("./accessPolicies"));

export { AccessPoliciesCategoryArgs, AccessPoliciesCategoryState } from "./accessPoliciesCategory";
export type AccessPoliciesCategory = import("./accessPoliciesCategory").AccessPoliciesCategory;
export const AccessPoliciesCategory: typeof import("./accessPoliciesCategory").AccessPoliciesCategory = null as any;
utilities.lazyLoad(exports, ["AccessPoliciesCategory"], () => require("./accessPoliciesCategory"));

export { AccessRulesArgs, AccessRulesState } from "./accessRules";
export type AccessRules = import("./accessRules").AccessRules;
export const AccessRules: typeof import("./accessRules").AccessRules = null as any;
utilities.lazyLoad(exports, ["AccessRules"], () => require("./accessRules"));

export { DeviceClusterArgs, DeviceClusterState } from "./deviceCluster";
export type DeviceCluster = import("./deviceCluster").DeviceCluster;
export const DeviceCluster: typeof import("./deviceCluster").DeviceCluster = null as any;
utilities.lazyLoad(exports, ["DeviceCluster"], () => require("./deviceCluster"));

export { DevicePhysicalInterfacesArgs, DevicePhysicalInterfacesState } from "./devicePhysicalInterfaces";
export type DevicePhysicalInterfaces = import("./devicePhysicalInterfaces").DevicePhysicalInterfaces;
export const DevicePhysicalInterfaces: typeof import("./devicePhysicalInterfaces").DevicePhysicalInterfaces = null as any;
utilities.lazyLoad(exports, ["DevicePhysicalInterfaces"], () => require("./devicePhysicalInterfaces"));

export { DeviceSubinterfacesArgs, DeviceSubinterfacesState } from "./deviceSubinterfaces";
export type DeviceSubinterfaces = import("./deviceSubinterfaces").DeviceSubinterfaces;
export const DeviceSubinterfaces: typeof import("./deviceSubinterfaces").DeviceSubinterfaces = null as any;
utilities.lazyLoad(exports, ["DeviceSubinterfaces"], () => require("./deviceSubinterfaces"));

export { DeviceVniArgs, DeviceVniState } from "./deviceVni";
export type DeviceVni = import("./deviceVni").DeviceVni;
export const DeviceVni: typeof import("./deviceVni").DeviceVni = null as any;
utilities.lazyLoad(exports, ["DeviceVni"], () => require("./deviceVni"));

export { DeviceVtepArgs, DeviceVtepState } from "./deviceVtep";
export type DeviceVtep = import("./deviceVtep").DeviceVtep;
export const DeviceVtep: typeof import("./deviceVtep").DeviceVtep = null as any;
utilities.lazyLoad(exports, ["DeviceVtep"], () => require("./deviceVtep"));

export { DevicesArgs, DevicesState } from "./devices";
export type Devices = import("./devices").Devices;
export const Devices: typeof import("./devices").Devices = null as any;
utilities.lazyLoad(exports, ["Devices"], () => require("./devices"));

export { DevicesBulkArgs, DevicesBulkState } from "./devicesBulk";
export type DevicesBulk = import("./devicesBulk").DevicesBulk;
export const DevicesBulk: typeof import("./devicesBulk").DevicesBulk = null as any;
utilities.lazyLoad(exports, ["DevicesBulk"], () => require("./devicesBulk"));

export { DynamicObjectMappingArgs, DynamicObjectMappingState } from "./dynamicObjectMapping";
export type DynamicObjectMapping = import("./dynamicObjectMapping").DynamicObjectMapping;
export const DynamicObjectMapping: typeof import("./dynamicObjectMapping").DynamicObjectMapping = null as any;
utilities.lazyLoad(exports, ["DynamicObjectMapping"], () => require("./dynamicObjectMapping"));

export { DynamicObjectsArgs, DynamicObjectsState } from "./dynamicObjects";
export type DynamicObjects = import("./dynamicObjects").DynamicObjects;
export const DynamicObjects: typeof import("./dynamicObjects").DynamicObjects = null as any;
utilities.lazyLoad(exports, ["DynamicObjects"], () => require("./dynamicObjects"));

export { ExtendedAclArgs, ExtendedAclState } from "./extendedAcl";
export type ExtendedAcl = import("./extendedAcl").ExtendedAcl;
export const ExtendedAcl: typeof import("./extendedAcl").ExtendedAcl = null as any;
utilities.lazyLoad(exports, ["ExtendedAcl"], () => require("./extendedAcl"));

export { FqdnObjectsArgs, FqdnObjectsState } from "./fqdnObjects";
export type FqdnObjects = import("./fqdnObjects").FqdnObjects;
export const FqdnObjects: typeof import("./fqdnObjects").FqdnObjects = null as any;
utilities.lazyLoad(exports, ["FqdnObjects"], () => require("./fqdnObjects"));

export { FtdAutonatRulesArgs, FtdAutonatRulesState } from "./ftdAutonatRules";
export type FtdAutonatRules = import("./ftdAutonatRules").FtdAutonatRules;
export const FtdAutonatRules: typeof import("./ftdAutonatRules").FtdAutonatRules = null as any;
utilities.lazyLoad(exports, ["FtdAutonatRules"], () => require("./ftdAutonatRules"));

export { FtdDeployArgs, FtdDeployState } from "./ftdDeploy";
export type FtdDeploy = import("./ftdDeploy").FtdDeploy;
export const FtdDeploy: typeof import("./ftdDeploy").FtdDeploy = null as any;
utilities.lazyLoad(exports, ["FtdDeploy"], () => require("./ftdDeploy"));

export { FtdManualnatRulesArgs, FtdManualnatRulesState } from "./ftdManualnatRules";
export type FtdManualnatRules = import("./ftdManualnatRules").FtdManualnatRules;
export const FtdManualnatRules: typeof import("./ftdManualnatRules").FtdManualnatRules = null as any;
utilities.lazyLoad(exports, ["FtdManualnatRules"], () => require("./ftdManualnatRules"));

export { FtdNatPoliciesArgs, FtdNatPoliciesState } from "./ftdNatPolicies";
export type FtdNatPolicies = import("./ftdNatPolicies").FtdNatPolicies;
export const FtdNatPolicies: typeof import("./ftdNatPolicies").FtdNatPolicies = null as any;
utilities.lazyLoad(exports, ["FtdNatPolicies"], () => require("./ftdNatPolicies"));

export { GetAccessPoliciesArgs, GetAccessPoliciesResult, GetAccessPoliciesOutputArgs } from "./getAccessPolicies";
export const getAccessPolicies: typeof import("./getAccessPolicies").getAccessPolicies = null as any;
export const getAccessPoliciesOutput: typeof import("./getAccessPolicies").getAccessPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getAccessPolicies","getAccessPoliciesOutput"], () => require("./getAccessPolicies"));

export { GetDeviceClusterArgs, GetDeviceClusterResult, GetDeviceClusterOutputArgs } from "./getDeviceCluster";
export const getDeviceCluster: typeof import("./getDeviceCluster").getDeviceCluster = null as any;
export const getDeviceClusterOutput: typeof import("./getDeviceCluster").getDeviceClusterOutput = null as any;
utilities.lazyLoad(exports, ["getDeviceCluster","getDeviceClusterOutput"], () => require("./getDeviceCluster"));

export { GetDevicePhysicalInterfacesArgs, GetDevicePhysicalInterfacesResult, GetDevicePhysicalInterfacesOutputArgs } from "./getDevicePhysicalInterfaces";
export const getDevicePhysicalInterfaces: typeof import("./getDevicePhysicalInterfaces").getDevicePhysicalInterfaces = null as any;
export const getDevicePhysicalInterfacesOutput: typeof import("./getDevicePhysicalInterfaces").getDevicePhysicalInterfacesOutput = null as any;
utilities.lazyLoad(exports, ["getDevicePhysicalInterfaces","getDevicePhysicalInterfacesOutput"], () => require("./getDevicePhysicalInterfaces"));

export { GetDeviceSubinterfacesArgs, GetDeviceSubinterfacesResult, GetDeviceSubinterfacesOutputArgs } from "./getDeviceSubinterfaces";
export const getDeviceSubinterfaces: typeof import("./getDeviceSubinterfaces").getDeviceSubinterfaces = null as any;
export const getDeviceSubinterfacesOutput: typeof import("./getDeviceSubinterfaces").getDeviceSubinterfacesOutput = null as any;
utilities.lazyLoad(exports, ["getDeviceSubinterfaces","getDeviceSubinterfacesOutput"], () => require("./getDeviceSubinterfaces"));

export { GetDeviceVniArgs, GetDeviceVniResult, GetDeviceVniOutputArgs } from "./getDeviceVni";
export const getDeviceVni: typeof import("./getDeviceVni").getDeviceVni = null as any;
export const getDeviceVniOutput: typeof import("./getDeviceVni").getDeviceVniOutput = null as any;
utilities.lazyLoad(exports, ["getDeviceVni","getDeviceVniOutput"], () => require("./getDeviceVni"));

export { GetDeviceVtepPoliciesArgs, GetDeviceVtepPoliciesResult, GetDeviceVtepPoliciesOutputArgs } from "./getDeviceVtepPolicies";
export const getDeviceVtepPolicies: typeof import("./getDeviceVtepPolicies").getDeviceVtepPolicies = null as any;
export const getDeviceVtepPoliciesOutput: typeof import("./getDeviceVtepPolicies").getDeviceVtepPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getDeviceVtepPolicies","getDeviceVtepPoliciesOutput"], () => require("./getDeviceVtepPolicies"));

export { GetDevicesArgs, GetDevicesResult, GetDevicesOutputArgs } from "./getDevices";
export const getDevices: typeof import("./getDevices").getDevices = null as any;
export const getDevicesOutput: typeof import("./getDevices").getDevicesOutput = null as any;
utilities.lazyLoad(exports, ["getDevices","getDevicesOutput"], () => require("./getDevices"));

export { GetDynamicObjectsArgs, GetDynamicObjectsResult, GetDynamicObjectsOutputArgs } from "./getDynamicObjects";
export const getDynamicObjects: typeof import("./getDynamicObjects").getDynamicObjects = null as any;
export const getDynamicObjectsOutput: typeof import("./getDynamicObjects").getDynamicObjectsOutput = null as any;
utilities.lazyLoad(exports, ["getDynamicObjects","getDynamicObjectsOutput"], () => require("./getDynamicObjects"));

export { GetExtendedAclArgs, GetExtendedAclResult, GetExtendedAclOutputArgs } from "./getExtendedAcl";
export const getExtendedAcl: typeof import("./getExtendedAcl").getExtendedAcl = null as any;
export const getExtendedAclOutput: typeof import("./getExtendedAcl").getExtendedAclOutput = null as any;
utilities.lazyLoad(exports, ["getExtendedAcl","getExtendedAclOutput"], () => require("./getExtendedAcl"));

export { GetFilePoliciesArgs, GetFilePoliciesResult, GetFilePoliciesOutputArgs } from "./getFilePolicies";
export const getFilePolicies: typeof import("./getFilePolicies").getFilePolicies = null as any;
export const getFilePoliciesOutput: typeof import("./getFilePolicies").getFilePoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getFilePolicies","getFilePoliciesOutput"], () => require("./getFilePolicies"));

export { GetFtdNatPoliciesArgs, GetFtdNatPoliciesResult, GetFtdNatPoliciesOutputArgs } from "./getFtdNatPolicies";
export const getFtdNatPolicies: typeof import("./getFtdNatPolicies").getFtdNatPolicies = null as any;
export const getFtdNatPoliciesOutput: typeof import("./getFtdNatPolicies").getFtdNatPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getFtdNatPolicies","getFtdNatPoliciesOutput"], () => require("./getFtdNatPolicies"));

export { GetHostObjectsArgs, GetHostObjectsResult, GetHostObjectsOutputArgs } from "./getHostObjects";
export const getHostObjects: typeof import("./getHostObjects").getHostObjects = null as any;
export const getHostObjectsOutput: typeof import("./getHostObjects").getHostObjectsOutput = null as any;
utilities.lazyLoad(exports, ["getHostObjects","getHostObjectsOutput"], () => require("./getHostObjects"));

export { GetIpsPoliciesArgs, GetIpsPoliciesResult, GetIpsPoliciesOutputArgs } from "./getIpsPolicies";
export const getIpsPolicies: typeof import("./getIpsPolicies").getIpsPolicies = null as any;
export const getIpsPoliciesOutput: typeof import("./getIpsPolicies").getIpsPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getIpsPolicies","getIpsPoliciesOutput"], () => require("./getIpsPolicies"));

export { GetIseSgtObjectsArgs, GetIseSgtObjectsResult, GetIseSgtObjectsOutputArgs } from "./getIseSgtObjects";
export const getIseSgtObjects: typeof import("./getIseSgtObjects").getIseSgtObjects = null as any;
export const getIseSgtObjectsOutput: typeof import("./getIseSgtObjects").getIseSgtObjectsOutput = null as any;
utilities.lazyLoad(exports, ["getIseSgtObjects","getIseSgtObjectsOutput"], () => require("./getIseSgtObjects"));

export { GetNetworkAnalysisPolicyArgs, GetNetworkAnalysisPolicyResult, GetNetworkAnalysisPolicyOutputArgs } from "./getNetworkAnalysisPolicy";
export const getNetworkAnalysisPolicy: typeof import("./getNetworkAnalysisPolicy").getNetworkAnalysisPolicy = null as any;
export const getNetworkAnalysisPolicyOutput: typeof import("./getNetworkAnalysisPolicy").getNetworkAnalysisPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkAnalysisPolicy","getNetworkAnalysisPolicyOutput"], () => require("./getNetworkAnalysisPolicy"));

export { GetNetworkGroupObjectsArgs, GetNetworkGroupObjectsResult, GetNetworkGroupObjectsOutputArgs } from "./getNetworkGroupObjects";
export const getNetworkGroupObjects: typeof import("./getNetworkGroupObjects").getNetworkGroupObjects = null as any;
export const getNetworkGroupObjectsOutput: typeof import("./getNetworkGroupObjects").getNetworkGroupObjectsOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkGroupObjects","getNetworkGroupObjectsOutput"], () => require("./getNetworkGroupObjects"));

export { GetNetworkObjectsArgs, GetNetworkObjectsResult, GetNetworkObjectsOutputArgs } from "./getNetworkObjects";
export const getNetworkObjects: typeof import("./getNetworkObjects").getNetworkObjects = null as any;
export const getNetworkObjectsOutput: typeof import("./getNetworkObjects").getNetworkObjectsOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkObjects","getNetworkObjectsOutput"], () => require("./getNetworkObjects"));

export { GetPortGroupObjectsArgs, GetPortGroupObjectsResult, GetPortGroupObjectsOutputArgs } from "./getPortGroupObjects";
export const getPortGroupObjects: typeof import("./getPortGroupObjects").getPortGroupObjects = null as any;
export const getPortGroupObjectsOutput: typeof import("./getPortGroupObjects").getPortGroupObjectsOutput = null as any;
utilities.lazyLoad(exports, ["getPortGroupObjects","getPortGroupObjectsOutput"], () => require("./getPortGroupObjects"));

export { GetPortObjectsArgs, GetPortObjectsResult, GetPortObjectsOutputArgs } from "./getPortObjects";
export const getPortObjects: typeof import("./getPortObjects").getPortObjects = null as any;
export const getPortObjectsOutput: typeof import("./getPortObjects").getPortObjectsOutput = null as any;
utilities.lazyLoad(exports, ["getPortObjects","getPortObjectsOutput"], () => require("./getPortObjects"));

export { GetSecurityZonesArgs, GetSecurityZonesResult, GetSecurityZonesOutputArgs } from "./getSecurityZones";
export const getSecurityZones: typeof import("./getSecurityZones").getSecurityZones = null as any;
export const getSecurityZonesOutput: typeof import("./getSecurityZones").getSecurityZonesOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityZones","getSecurityZonesOutput"], () => require("./getSecurityZones"));

export { GetSgtObjectsArgs, GetSgtObjectsResult, GetSgtObjectsOutputArgs } from "./getSgtObjects";
export const getSgtObjects: typeof import("./getSgtObjects").getSgtObjects = null as any;
export const getSgtObjectsOutput: typeof import("./getSgtObjects").getSgtObjectsOutput = null as any;
utilities.lazyLoad(exports, ["getSgtObjects","getSgtObjectsOutput"], () => require("./getSgtObjects"));

export { GetSmartLicenseArgs, GetSmartLicenseResult, GetSmartLicenseOutputArgs } from "./getSmartLicense";
export const getSmartLicense: typeof import("./getSmartLicense").getSmartLicense = null as any;
export const getSmartLicenseOutput: typeof import("./getSmartLicense").getSmartLicenseOutput = null as any;
utilities.lazyLoad(exports, ["getSmartLicense","getSmartLicenseOutput"], () => require("./getSmartLicense"));

export { GetStandardAclArgs, GetStandardAclResult, GetStandardAclOutputArgs } from "./getStandardAcl";
export const getStandardAcl: typeof import("./getStandardAcl").getStandardAcl = null as any;
export const getStandardAclOutput: typeof import("./getStandardAcl").getStandardAclOutput = null as any;
utilities.lazyLoad(exports, ["getStandardAcl","getStandardAclOutput"], () => require("./getStandardAcl"));

export { GetStaticIPv4RouteArgs, GetStaticIPv4RouteResult, GetStaticIPv4RouteOutputArgs } from "./getStaticIPv4Route";
export const getStaticIPv4Route: typeof import("./getStaticIPv4Route").getStaticIPv4Route = null as any;
export const getStaticIPv4RouteOutput: typeof import("./getStaticIPv4Route").getStaticIPv4RouteOutput = null as any;
utilities.lazyLoad(exports, ["getStaticIPv4Route","getStaticIPv4RouteOutput"], () => require("./getStaticIPv4Route"));

export { GetSyslogAlertsArgs, GetSyslogAlertsResult, GetSyslogAlertsOutputArgs } from "./getSyslogAlerts";
export const getSyslogAlerts: typeof import("./getSyslogAlerts").getSyslogAlerts = null as any;
export const getSyslogAlertsOutput: typeof import("./getSyslogAlerts").getSyslogAlertsOutput = null as any;
utilities.lazyLoad(exports, ["getSyslogAlerts","getSyslogAlertsOutput"], () => require("./getSyslogAlerts"));

export { GetUrlObjectsArgs, GetUrlObjectsResult, GetUrlObjectsOutputArgs } from "./getUrlObjects";
export const getUrlObjects: typeof import("./getUrlObjects").getUrlObjects = null as any;
export const getUrlObjectsOutput: typeof import("./getUrlObjects").getUrlObjectsOutput = null as any;
utilities.lazyLoad(exports, ["getUrlObjects","getUrlObjectsOutput"], () => require("./getUrlObjects"));

export { HostObjectsArgs, HostObjectsState } from "./hostObjects";
export type HostObjects = import("./hostObjects").HostObjects;
export const HostObjects: typeof import("./hostObjects").HostObjects = null as any;
utilities.lazyLoad(exports, ["HostObjects"], () => require("./hostObjects"));

export { Icmpv4ObjectsArgs, Icmpv4ObjectsState } from "./icmpv4Objects";
export type Icmpv4Objects = import("./icmpv4Objects").Icmpv4Objects;
export const Icmpv4Objects: typeof import("./icmpv4Objects").Icmpv4Objects = null as any;
utilities.lazyLoad(exports, ["Icmpv4Objects"], () => require("./icmpv4Objects"));

export { IpsPoliciesArgs, IpsPoliciesState } from "./ipsPolicies";
export type IpsPolicies = import("./ipsPolicies").IpsPolicies;
export const IpsPolicies: typeof import("./ipsPolicies").IpsPolicies = null as any;
utilities.lazyLoad(exports, ["IpsPolicies"], () => require("./ipsPolicies"));

export { NetworkAnalysisPolicyArgs, NetworkAnalysisPolicyState } from "./networkAnalysisPolicy";
export type NetworkAnalysisPolicy = import("./networkAnalysisPolicy").NetworkAnalysisPolicy;
export const NetworkAnalysisPolicy: typeof import("./networkAnalysisPolicy").NetworkAnalysisPolicy = null as any;
utilities.lazyLoad(exports, ["NetworkAnalysisPolicy"], () => require("./networkAnalysisPolicy"));

export { NetworkGroupObjectsArgs, NetworkGroupObjectsState } from "./networkGroupObjects";
export type NetworkGroupObjects = import("./networkGroupObjects").NetworkGroupObjects;
export const NetworkGroupObjects: typeof import("./networkGroupObjects").NetworkGroupObjects = null as any;
utilities.lazyLoad(exports, ["NetworkGroupObjects"], () => require("./networkGroupObjects"));

export { NetworkObjectsArgs, NetworkObjectsState } from "./networkObjects";
export type NetworkObjects = import("./networkObjects").NetworkObjects;
export const NetworkObjects: typeof import("./networkObjects").NetworkObjects = null as any;
utilities.lazyLoad(exports, ["NetworkObjects"], () => require("./networkObjects"));

export { NetworkObjectsBulkArgs, NetworkObjectsBulkState } from "./networkObjectsBulk";
export type NetworkObjectsBulk = import("./networkObjectsBulk").NetworkObjectsBulk;
export const NetworkObjectsBulk: typeof import("./networkObjectsBulk").NetworkObjectsBulk = null as any;
utilities.lazyLoad(exports, ["NetworkObjectsBulk"], () => require("./networkObjectsBulk"));

export { PolicyDevicesAssignmentsArgs, PolicyDevicesAssignmentsState } from "./policyDevicesAssignments";
export type PolicyDevicesAssignments = import("./policyDevicesAssignments").PolicyDevicesAssignments;
export const PolicyDevicesAssignments: typeof import("./policyDevicesAssignments").PolicyDevicesAssignments = null as any;
utilities.lazyLoad(exports, ["PolicyDevicesAssignments"], () => require("./policyDevicesAssignments"));

export { PortGroupObjectsArgs, PortGroupObjectsState } from "./portGroupObjects";
export type PortGroupObjects = import("./portGroupObjects").PortGroupObjects;
export const PortGroupObjects: typeof import("./portGroupObjects").PortGroupObjects = null as any;
utilities.lazyLoad(exports, ["PortGroupObjects"], () => require("./portGroupObjects"));

export { PortObjectsArgs, PortObjectsState } from "./portObjects";
export type PortObjects = import("./portObjects").PortObjects;
export const PortObjects: typeof import("./portObjects").PortObjects = null as any;
utilities.lazyLoad(exports, ["PortObjects"], () => require("./portObjects"));

export { PrefilterPolicyArgs, PrefilterPolicyState } from "./prefilterPolicy";
export type PrefilterPolicy = import("./prefilterPolicy").PrefilterPolicy;
export const PrefilterPolicy: typeof import("./prefilterPolicy").PrefilterPolicy = null as any;
utilities.lazyLoad(exports, ["PrefilterPolicy"], () => require("./prefilterPolicy"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RangeObjectsArgs, RangeObjectsState } from "./rangeObjects";
export type RangeObjects = import("./rangeObjects").RangeObjects;
export const RangeObjects: typeof import("./rangeObjects").RangeObjects = null as any;
utilities.lazyLoad(exports, ["RangeObjects"], () => require("./rangeObjects"));

export { SecurityZoneArgs, SecurityZoneState } from "./securityZone";
export type SecurityZone = import("./securityZone").SecurityZone;
export const SecurityZone: typeof import("./securityZone").SecurityZone = null as any;
utilities.lazyLoad(exports, ["SecurityZone"], () => require("./securityZone"));

export { SgtObjectsArgs, SgtObjectsState } from "./sgtObjects";
export type SgtObjects = import("./sgtObjects").SgtObjects;
export const SgtObjects: typeof import("./sgtObjects").SgtObjects = null as any;
utilities.lazyLoad(exports, ["SgtObjects"], () => require("./sgtObjects"));

export { SmartLicenseArgs, SmartLicenseState } from "./smartLicense";
export type SmartLicense = import("./smartLicense").SmartLicense;
export const SmartLicense: typeof import("./smartLicense").SmartLicense = null as any;
utilities.lazyLoad(exports, ["SmartLicense"], () => require("./smartLicense"));

export { StandardAclArgs, StandardAclState } from "./standardAcl";
export type StandardAcl = import("./standardAcl").StandardAcl;
export const StandardAcl: typeof import("./standardAcl").StandardAcl = null as any;
utilities.lazyLoad(exports, ["StandardAcl"], () => require("./standardAcl"));

export { StaticIPv4RouteArgs, StaticIPv4RouteState } from "./staticIPv4Route";
export type StaticIPv4Route = import("./staticIPv4Route").StaticIPv4Route;
export const StaticIPv4Route: typeof import("./staticIPv4Route").StaticIPv4Route = null as any;
utilities.lazyLoad(exports, ["StaticIPv4Route"], () => require("./staticIPv4Route"));

export { TimeRangeObjectArgs, TimeRangeObjectState } from "./timeRangeObject";
export type TimeRangeObject = import("./timeRangeObject").TimeRangeObject;
export const TimeRangeObject: typeof import("./timeRangeObject").TimeRangeObject = null as any;
utilities.lazyLoad(exports, ["TimeRangeObject"], () => require("./timeRangeObject"));

export { UrlObjectGroupArgs, UrlObjectGroupState } from "./urlObjectGroup";
export type UrlObjectGroup = import("./urlObjectGroup").UrlObjectGroup;
export const UrlObjectGroup: typeof import("./urlObjectGroup").UrlObjectGroup = null as any;
utilities.lazyLoad(exports, ["UrlObjectGroup"], () => require("./urlObjectGroup"));

export { UrlObjectsArgs, UrlObjectsState } from "./urlObjects";
export type UrlObjects = import("./urlObjects").UrlObjects;
export const UrlObjects: typeof import("./urlObjects").UrlObjects = null as any;
utilities.lazyLoad(exports, ["UrlObjects"], () => require("./urlObjects"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "fmc:index/accessPolicies:AccessPolicies":
                return new AccessPolicies(name, <any>undefined, { urn })
            case "fmc:index/accessPoliciesCategory:AccessPoliciesCategory":
                return new AccessPoliciesCategory(name, <any>undefined, { urn })
            case "fmc:index/accessRules:AccessRules":
                return new AccessRules(name, <any>undefined, { urn })
            case "fmc:index/deviceCluster:DeviceCluster":
                return new DeviceCluster(name, <any>undefined, { urn })
            case "fmc:index/devicePhysicalInterfaces:DevicePhysicalInterfaces":
                return new DevicePhysicalInterfaces(name, <any>undefined, { urn })
            case "fmc:index/deviceSubinterfaces:DeviceSubinterfaces":
                return new DeviceSubinterfaces(name, <any>undefined, { urn })
            case "fmc:index/deviceVni:DeviceVni":
                return new DeviceVni(name, <any>undefined, { urn })
            case "fmc:index/deviceVtep:DeviceVtep":
                return new DeviceVtep(name, <any>undefined, { urn })
            case "fmc:index/devices:Devices":
                return new Devices(name, <any>undefined, { urn })
            case "fmc:index/devicesBulk:DevicesBulk":
                return new DevicesBulk(name, <any>undefined, { urn })
            case "fmc:index/dynamicObjectMapping:DynamicObjectMapping":
                return new DynamicObjectMapping(name, <any>undefined, { urn })
            case "fmc:index/dynamicObjects:DynamicObjects":
                return new DynamicObjects(name, <any>undefined, { urn })
            case "fmc:index/extendedAcl:ExtendedAcl":
                return new ExtendedAcl(name, <any>undefined, { urn })
            case "fmc:index/fqdnObjects:FqdnObjects":
                return new FqdnObjects(name, <any>undefined, { urn })
            case "fmc:index/ftdAutonatRules:FtdAutonatRules":
                return new FtdAutonatRules(name, <any>undefined, { urn })
            case "fmc:index/ftdDeploy:FtdDeploy":
                return new FtdDeploy(name, <any>undefined, { urn })
            case "fmc:index/ftdManualnatRules:FtdManualnatRules":
                return new FtdManualnatRules(name, <any>undefined, { urn })
            case "fmc:index/ftdNatPolicies:FtdNatPolicies":
                return new FtdNatPolicies(name, <any>undefined, { urn })
            case "fmc:index/hostObjects:HostObjects":
                return new HostObjects(name, <any>undefined, { urn })
            case "fmc:index/icmpv4Objects:Icmpv4Objects":
                return new Icmpv4Objects(name, <any>undefined, { urn })
            case "fmc:index/ipsPolicies:IpsPolicies":
                return new IpsPolicies(name, <any>undefined, { urn })
            case "fmc:index/networkAnalysisPolicy:NetworkAnalysisPolicy":
                return new NetworkAnalysisPolicy(name, <any>undefined, { urn })
            case "fmc:index/networkGroupObjects:NetworkGroupObjects":
                return new NetworkGroupObjects(name, <any>undefined, { urn })
            case "fmc:index/networkObjects:NetworkObjects":
                return new NetworkObjects(name, <any>undefined, { urn })
            case "fmc:index/networkObjectsBulk:NetworkObjectsBulk":
                return new NetworkObjectsBulk(name, <any>undefined, { urn })
            case "fmc:index/policyDevicesAssignments:PolicyDevicesAssignments":
                return new PolicyDevicesAssignments(name, <any>undefined, { urn })
            case "fmc:index/portGroupObjects:PortGroupObjects":
                return new PortGroupObjects(name, <any>undefined, { urn })
            case "fmc:index/portObjects:PortObjects":
                return new PortObjects(name, <any>undefined, { urn })
            case "fmc:index/prefilterPolicy:PrefilterPolicy":
                return new PrefilterPolicy(name, <any>undefined, { urn })
            case "fmc:index/rangeObjects:RangeObjects":
                return new RangeObjects(name, <any>undefined, { urn })
            case "fmc:index/securityZone:SecurityZone":
                return new SecurityZone(name, <any>undefined, { urn })
            case "fmc:index/sgtObjects:SgtObjects":
                return new SgtObjects(name, <any>undefined, { urn })
            case "fmc:index/smartLicense:SmartLicense":
                return new SmartLicense(name, <any>undefined, { urn })
            case "fmc:index/standardAcl:StandardAcl":
                return new StandardAcl(name, <any>undefined, { urn })
            case "fmc:index/staticIPv4Route:StaticIPv4Route":
                return new StaticIPv4Route(name, <any>undefined, { urn })
            case "fmc:index/timeRangeObject:TimeRangeObject":
                return new TimeRangeObject(name, <any>undefined, { urn })
            case "fmc:index/urlObjectGroup:UrlObjectGroup":
                return new UrlObjectGroup(name, <any>undefined, { urn })
            case "fmc:index/urlObjects:UrlObjects":
                return new UrlObjects(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("fmc", "index/accessPolicies", _module)
pulumi.runtime.registerResourceModule("fmc", "index/accessPoliciesCategory", _module)
pulumi.runtime.registerResourceModule("fmc", "index/accessRules", _module)
pulumi.runtime.registerResourceModule("fmc", "index/deviceCluster", _module)
pulumi.runtime.registerResourceModule("fmc", "index/devicePhysicalInterfaces", _module)
pulumi.runtime.registerResourceModule("fmc", "index/deviceSubinterfaces", _module)
pulumi.runtime.registerResourceModule("fmc", "index/deviceVni", _module)
pulumi.runtime.registerResourceModule("fmc", "index/deviceVtep", _module)
pulumi.runtime.registerResourceModule("fmc", "index/devices", _module)
pulumi.runtime.registerResourceModule("fmc", "index/devicesBulk", _module)
pulumi.runtime.registerResourceModule("fmc", "index/dynamicObjectMapping", _module)
pulumi.runtime.registerResourceModule("fmc", "index/dynamicObjects", _module)
pulumi.runtime.registerResourceModule("fmc", "index/extendedAcl", _module)
pulumi.runtime.registerResourceModule("fmc", "index/fqdnObjects", _module)
pulumi.runtime.registerResourceModule("fmc", "index/ftdAutonatRules", _module)
pulumi.runtime.registerResourceModule("fmc", "index/ftdDeploy", _module)
pulumi.runtime.registerResourceModule("fmc", "index/ftdManualnatRules", _module)
pulumi.runtime.registerResourceModule("fmc", "index/ftdNatPolicies", _module)
pulumi.runtime.registerResourceModule("fmc", "index/hostObjects", _module)
pulumi.runtime.registerResourceModule("fmc", "index/icmpv4Objects", _module)
pulumi.runtime.registerResourceModule("fmc", "index/ipsPolicies", _module)
pulumi.runtime.registerResourceModule("fmc", "index/networkAnalysisPolicy", _module)
pulumi.runtime.registerResourceModule("fmc", "index/networkGroupObjects", _module)
pulumi.runtime.registerResourceModule("fmc", "index/networkObjects", _module)
pulumi.runtime.registerResourceModule("fmc", "index/networkObjectsBulk", _module)
pulumi.runtime.registerResourceModule("fmc", "index/policyDevicesAssignments", _module)
pulumi.runtime.registerResourceModule("fmc", "index/portGroupObjects", _module)
pulumi.runtime.registerResourceModule("fmc", "index/portObjects", _module)
pulumi.runtime.registerResourceModule("fmc", "index/prefilterPolicy", _module)
pulumi.runtime.registerResourceModule("fmc", "index/rangeObjects", _module)
pulumi.runtime.registerResourceModule("fmc", "index/securityZone", _module)
pulumi.runtime.registerResourceModule("fmc", "index/sgtObjects", _module)
pulumi.runtime.registerResourceModule("fmc", "index/smartLicense", _module)
pulumi.runtime.registerResourceModule("fmc", "index/standardAcl", _module)
pulumi.runtime.registerResourceModule("fmc", "index/staticIPv4Route", _module)
pulumi.runtime.registerResourceModule("fmc", "index/timeRangeObject", _module)
pulumi.runtime.registerResourceModule("fmc", "index/urlObjectGroup", _module)
pulumi.runtime.registerResourceModule("fmc", "index/urlObjects", _module)
pulumi.runtime.registerResourcePackage("fmc", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:fmc") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
