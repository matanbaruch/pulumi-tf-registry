// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Devices extends pulumi.CustomResource {
    /**
     * Get an existing Devices resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DevicesState, opts?: pulumi.CustomResourceOptions): Devices {
        return new Devices(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmc:index/devices:Devices';

    /**
     * Returns true if the given object is an instance of Devices.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Devices {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Devices.__pulumiType;
    }

    /**
     * access policy for this resource
     */
    public readonly accessPolicy!: pulumi.Output<outputs.DevicesAccessPolicy>;
    /**
     * CDO-Host
     */
    public readonly cdoHost!: pulumi.Output<string | undefined>;
    /**
     * CDO-Region
     */
    public readonly cdoRegion!: pulumi.Output<string | undefined>;
    /**
     * The hostname of FTD
     */
    public readonly hostname!: pulumi.Output<string>;
    /**
     * License caps for this resource
     */
    public readonly licenseCaps!: pulumi.Output<string[] | undefined>;
    /**
     * The name of FTD
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * NAT_ID is required, if configured in FTD
     */
    public readonly natId!: pulumi.Output<string | undefined>;
    /**
     * Select the desired performace tier
     */
    public readonly performanceTier!: pulumi.Output<string | undefined>;
    /**
     * Same regkey as entered in FTD
     */
    public readonly regkey!: pulumi.Output<string>;
    /**
     * The type of this resource
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a Devices resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DevicesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DevicesArgs | DevicesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DevicesState | undefined;
            resourceInputs["accessPolicy"] = state ? state.accessPolicy : undefined;
            resourceInputs["cdoHost"] = state ? state.cdoHost : undefined;
            resourceInputs["cdoRegion"] = state ? state.cdoRegion : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["licenseCaps"] = state ? state.licenseCaps : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["natId"] = state ? state.natId : undefined;
            resourceInputs["performanceTier"] = state ? state.performanceTier : undefined;
            resourceInputs["regkey"] = state ? state.regkey : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as DevicesArgs | undefined;
            if ((!args || args.accessPolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessPolicy'");
            }
            if ((!args || args.hostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostname'");
            }
            if ((!args || args.regkey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'regkey'");
            }
            resourceInputs["accessPolicy"] = args ? args.accessPolicy : undefined;
            resourceInputs["cdoHost"] = args ? args.cdoHost : undefined;
            resourceInputs["cdoRegion"] = args ? args.cdoRegion : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["licenseCaps"] = args ? args.licenseCaps : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["natId"] = args ? args.natId : undefined;
            resourceInputs["performanceTier"] = args ? args.performanceTier : undefined;
            resourceInputs["regkey"] = args ? args.regkey : undefined;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Devices.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Devices resources.
 */
export interface DevicesState {
    /**
     * access policy for this resource
     */
    accessPolicy?: pulumi.Input<inputs.DevicesAccessPolicy>;
    /**
     * CDO-Host
     */
    cdoHost?: pulumi.Input<string>;
    /**
     * CDO-Region
     */
    cdoRegion?: pulumi.Input<string>;
    /**
     * The hostname of FTD
     */
    hostname?: pulumi.Input<string>;
    /**
     * License caps for this resource
     */
    licenseCaps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of FTD
     */
    name?: pulumi.Input<string>;
    /**
     * NAT_ID is required, if configured in FTD
     */
    natId?: pulumi.Input<string>;
    /**
     * Select the desired performace tier
     */
    performanceTier?: pulumi.Input<string>;
    /**
     * Same regkey as entered in FTD
     */
    regkey?: pulumi.Input<string>;
    /**
     * The type of this resource
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Devices resource.
 */
export interface DevicesArgs {
    /**
     * access policy for this resource
     */
    accessPolicy: pulumi.Input<inputs.DevicesAccessPolicy>;
    /**
     * CDO-Host
     */
    cdoHost?: pulumi.Input<string>;
    /**
     * CDO-Region
     */
    cdoRegion?: pulumi.Input<string>;
    /**
     * The hostname of FTD
     */
    hostname: pulumi.Input<string>;
    /**
     * License caps for this resource
     */
    licenseCaps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of FTD
     */
    name?: pulumi.Input<string>;
    /**
     * NAT_ID is required, if configured in FTD
     */
    natId?: pulumi.Input<string>;
    /**
     * Select the desired performace tier
     */
    performanceTier?: pulumi.Input<string>;
    /**
     * Same regkey as entered in FTD
     */
    regkey: pulumi.Input<string>;
}
