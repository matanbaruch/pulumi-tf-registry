// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DevicePhysicalInterfaces extends pulumi.CustomResource {
    /**
     * Get an existing DevicePhysicalInterfaces resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DevicePhysicalInterfacesState, opts?: pulumi.CustomResourceOptions): DevicePhysicalInterfaces {
        return new DevicePhysicalInterfaces(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmc:index/devicePhysicalInterfaces:DevicePhysicalInterfaces';

    /**
     * Returns true if the given object is an instance of DevicePhysicalInterfaces.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DevicePhysicalInterfaces {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DevicePhysicalInterfaces.__pulumiType;
    }

    /**
     * Physical Interface description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The ID of the Physical Interface
     */
    public readonly deviceId!: pulumi.Output<string>;
    /**
     * enabled
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Name of chosen interface
     */
    public readonly ifName!: pulumi.Output<string | undefined>;
    /**
     * IPv4 DHCP enabled
     */
    public readonly ipv4DhcpEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * IPv4 DHCP Route Metric
     */
    public readonly ipv4DhcpRouteMetric!: pulumi.Output<number | undefined>;
    /**
     * IPv4 Static address
     */
    public readonly ipv4StaticAddress!: pulumi.Output<string | undefined>;
    /**
     * IPv4 Static address netmask
     */
    public readonly ipv4StaticNetmask!: pulumi.Output<number | undefined>;
    /**
     * IPv6 address
     */
    public readonly ipv6Address!: pulumi.Output<string | undefined>;
    /**
     * IPv6 EnforceEUI64
     */
    public readonly ipv6EnforceEui!: pulumi.Output<boolean | undefined>;
    /**
     * IPv6 netmask
     */
    public readonly ipv6Prefix!: pulumi.Output<number | undefined>;
    /**
     * Physical Interface Mode
     */
    public readonly mode!: pulumi.Output<string | undefined>;
    /**
     * Physical Interface MTU
     */
    public readonly mtu!: pulumi.Output<number | undefined>;
    /**
     * Name of chosen interface
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the physical interface this resource needs
     */
    public readonly physicalInterfaceId!: pulumi.Output<string>;
    /**
     * Physical Interface Security Zone
     */
    public readonly securityZoneId!: pulumi.Output<string | undefined>;

    /**
     * Create a DevicePhysicalInterfaces resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DevicePhysicalInterfacesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DevicePhysicalInterfacesArgs | DevicePhysicalInterfacesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DevicePhysicalInterfacesState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["deviceId"] = state ? state.deviceId : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["ifName"] = state ? state.ifName : undefined;
            resourceInputs["ipv4DhcpEnabled"] = state ? state.ipv4DhcpEnabled : undefined;
            resourceInputs["ipv4DhcpRouteMetric"] = state ? state.ipv4DhcpRouteMetric : undefined;
            resourceInputs["ipv4StaticAddress"] = state ? state.ipv4StaticAddress : undefined;
            resourceInputs["ipv4StaticNetmask"] = state ? state.ipv4StaticNetmask : undefined;
            resourceInputs["ipv6Address"] = state ? state.ipv6Address : undefined;
            resourceInputs["ipv6EnforceEui"] = state ? state.ipv6EnforceEui : undefined;
            resourceInputs["ipv6Prefix"] = state ? state.ipv6Prefix : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["mtu"] = state ? state.mtu : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["physicalInterfaceId"] = state ? state.physicalInterfaceId : undefined;
            resourceInputs["securityZoneId"] = state ? state.securityZoneId : undefined;
        } else {
            const args = argsOrState as DevicePhysicalInterfacesArgs | undefined;
            if ((!args || args.deviceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deviceId'");
            }
            if ((!args || args.physicalInterfaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'physicalInterfaceId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["deviceId"] = args ? args.deviceId : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["ifName"] = args ? args.ifName : undefined;
            resourceInputs["ipv4DhcpEnabled"] = args ? args.ipv4DhcpEnabled : undefined;
            resourceInputs["ipv4DhcpRouteMetric"] = args ? args.ipv4DhcpRouteMetric : undefined;
            resourceInputs["ipv4StaticAddress"] = args ? args.ipv4StaticAddress : undefined;
            resourceInputs["ipv4StaticNetmask"] = args ? args.ipv4StaticNetmask : undefined;
            resourceInputs["ipv6Address"] = args ? args.ipv6Address : undefined;
            resourceInputs["ipv6EnforceEui"] = args ? args.ipv6EnforceEui : undefined;
            resourceInputs["ipv6Prefix"] = args ? args.ipv6Prefix : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["mtu"] = args ? args.mtu : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["physicalInterfaceId"] = args ? args.physicalInterfaceId : undefined;
            resourceInputs["securityZoneId"] = args ? args.securityZoneId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DevicePhysicalInterfaces.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DevicePhysicalInterfaces resources.
 */
export interface DevicePhysicalInterfacesState {
    /**
     * Physical Interface description
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the Physical Interface
     */
    deviceId?: pulumi.Input<string>;
    /**
     * enabled
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Name of chosen interface
     */
    ifName?: pulumi.Input<string>;
    /**
     * IPv4 DHCP enabled
     */
    ipv4DhcpEnabled?: pulumi.Input<boolean>;
    /**
     * IPv4 DHCP Route Metric
     */
    ipv4DhcpRouteMetric?: pulumi.Input<number>;
    /**
     * IPv4 Static address
     */
    ipv4StaticAddress?: pulumi.Input<string>;
    /**
     * IPv4 Static address netmask
     */
    ipv4StaticNetmask?: pulumi.Input<number>;
    /**
     * IPv6 address
     */
    ipv6Address?: pulumi.Input<string>;
    /**
     * IPv6 EnforceEUI64
     */
    ipv6EnforceEui?: pulumi.Input<boolean>;
    /**
     * IPv6 netmask
     */
    ipv6Prefix?: pulumi.Input<number>;
    /**
     * Physical Interface Mode
     */
    mode?: pulumi.Input<string>;
    /**
     * Physical Interface MTU
     */
    mtu?: pulumi.Input<number>;
    /**
     * Name of chosen interface
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the physical interface this resource needs
     */
    physicalInterfaceId?: pulumi.Input<string>;
    /**
     * Physical Interface Security Zone
     */
    securityZoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DevicePhysicalInterfaces resource.
 */
export interface DevicePhysicalInterfacesArgs {
    /**
     * Physical Interface description
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the Physical Interface
     */
    deviceId: pulumi.Input<string>;
    /**
     * enabled
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Name of chosen interface
     */
    ifName?: pulumi.Input<string>;
    /**
     * IPv4 DHCP enabled
     */
    ipv4DhcpEnabled?: pulumi.Input<boolean>;
    /**
     * IPv4 DHCP Route Metric
     */
    ipv4DhcpRouteMetric?: pulumi.Input<number>;
    /**
     * IPv4 Static address
     */
    ipv4StaticAddress?: pulumi.Input<string>;
    /**
     * IPv4 Static address netmask
     */
    ipv4StaticNetmask?: pulumi.Input<number>;
    /**
     * IPv6 address
     */
    ipv6Address?: pulumi.Input<string>;
    /**
     * IPv6 EnforceEUI64
     */
    ipv6EnforceEui?: pulumi.Input<boolean>;
    /**
     * IPv6 netmask
     */
    ipv6Prefix?: pulumi.Input<number>;
    /**
     * Physical Interface Mode
     */
    mode?: pulumi.Input<string>;
    /**
     * Physical Interface MTU
     */
    mtu?: pulumi.Input<number>;
    /**
     * Name of chosen interface
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the physical interface this resource needs
     */
    physicalInterfaceId: pulumi.Input<string>;
    /**
     * Physical Interface Security Zone
     */
    securityZoneId?: pulumi.Input<string>;
}
