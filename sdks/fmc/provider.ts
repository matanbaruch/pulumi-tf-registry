// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The provider type for the fmc package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
export class Provider extends pulumi.ProviderResource {
    /** @internal */
    public static readonly __pulumiType = 'fmc';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === "pulumi:providers:" + Provider.__pulumiType;
    }

    /**
     * The domain uuid to use API of cdFMC the default domain for global is e276abec-e0f2-11e3-8169-6d9ed49b625f
     */
    public readonly cdfmcDomainUuid!: pulumi.Output<string | undefined>;
    /**
     * The CDO Api token to manage cdFMC
     */
    public readonly cdoToken!: pulumi.Output<string | undefined>;
    /**
     * Hostname/IP address of the FMC
     */
    public readonly fmcHost!: pulumi.Output<string>;
    /**
     * Password for the user to login to FMC
     */
    public readonly fmcPassword!: pulumi.Output<string | undefined>;
    /**
     * Username for the user to login to FMC
     */
    public readonly fmcUsername!: pulumi.Output<string | undefined>;

    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        {
            if ((!args || args.fmcHost === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fmcHost'");
            }
            resourceInputs["cdfmcDomainUuid"] = args?.cdfmcDomainUuid ? pulumi.secret(args.cdfmcDomainUuid) : undefined;
            resourceInputs["cdoToken"] = args?.cdoToken ? pulumi.secret(args.cdoToken) : undefined;
            resourceInputs["fmcHost"] = args ? args.fmcHost : undefined;
            resourceInputs["fmcInsecureSkipVerify"] = pulumi.output(args ? args.fmcInsecureSkipVerify : undefined).apply(JSON.stringify);
            resourceInputs["fmcPassword"] = args?.fmcPassword ? pulumi.secret(args.fmcPassword) : undefined;
            resourceInputs["fmcUsername"] = args?.fmcUsername ? pulumi.secret(args.fmcUsername) : undefined;
            resourceInputs["isCdfmc"] = pulumi.output(args ? args.isCdfmc : undefined).apply(JSON.stringify);
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["cdfmcDomainUuid", "cdoToken", "fmcPassword", "fmcUsername"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Provider.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    /**
     * The domain uuid to use API of cdFMC the default domain for global is e276abec-e0f2-11e3-8169-6d9ed49b625f
     */
    cdfmcDomainUuid?: pulumi.Input<string>;
    /**
     * The CDO Api token to manage cdFMC
     */
    cdoToken?: pulumi.Input<string>;
    /**
     * Hostname/IP address of the FMC
     */
    fmcHost: pulumi.Input<string>;
    /**
     * Skip certificate checks if the certificate is not public CA signed, or if using IP address
     */
    fmcInsecureSkipVerify?: pulumi.Input<boolean>;
    /**
     * Password for the user to login to FMC
     */
    fmcPassword?: pulumi.Input<string>;
    /**
     * Username for the user to login to FMC
     */
    fmcUsername?: pulumi.Input<string>;
    /**
     * set to true if is a cloud-delivered Firepower Management Center (cdFMC) with Cisco Defence Orchestrator(CDO)
     */
    isCdfmc?: pulumi.Input<boolean>;
}
