// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetworkPrefix extends pulumi.CustomResource {
    /**
     * Get an existing NetworkPrefix resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkPrefixState, opts?: pulumi.CustomResourceOptions): NetworkPrefix {
        return new NetworkPrefix(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'anxcloud:index/networkPrefix:NetworkPrefix';

    /**
     * Returns true if the given object is an instance of NetworkPrefix.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkPrefix {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkPrefix.__pulumiType;
    }

    /**
     * CIDR of the created prefix.
     */
    public /*out*/ readonly cidr!: pulumi.Output<string>;
    /**
     * Whether the prefix should be created with inactive IPs
     */
    public readonly createEmpty!: pulumi.Output<boolean | undefined>;
    /**
     * Additional description.
     */
    public readonly descriptionCustomer!: pulumi.Output<string | undefined>;
    /**
     * Internal description.
     */
    public /*out*/ readonly descriptionInternal!: pulumi.Output<string>;
    /**
     * The Prefix version: 4 = IPv4, 6 = IPv6.
     */
    public readonly ipVersion!: pulumi.Output<number | undefined>;
    /**
     * Identifier of the location to create the prefix at.
     */
    public readonly locationId!: pulumi.Output<string>;
    /**
     * Anexia Cloud Locations.
     */
    public /*out*/ readonly locations!: pulumi.Output<outputs.NetworkPrefixLocation[]>;
    /**
     * Netmask size. Example: 29 which would result in x.x.x.x/29.
     */
    public readonly netmask!: pulumi.Output<number>;
    /**
     * Customer of yours. Reseller only.
     */
    public readonly organization!: pulumi.Output<string | undefined>;
    /**
     * Role of the prefix.
     */
    public /*out*/ readonly roleText!: pulumi.Output<string>;
    /**
     * If router Redundancy shall be enabled.
     */
    public readonly routerRedundancy!: pulumi.Output<boolean | undefined>;
    /**
     * Status of the created prefix.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Set of tags attached to the resource.
     */
    public readonly tags!: pulumi.Output<string[]>;
    public readonly timeouts!: pulumi.Output<outputs.NetworkPrefixTimeouts | undefined>;
    /**
     * The Prefix type: 0 = Public, 1 = Private.
     */
    public readonly type!: pulumi.Output<number | undefined>;
    /**
     * The corresponding VLAN identifier
     */
    public readonly vlanId!: pulumi.Output<string | undefined>;

    /**
     * Create a NetworkPrefix resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkPrefixArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkPrefixArgs | NetworkPrefixState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkPrefixState | undefined;
            resourceInputs["cidr"] = state ? state.cidr : undefined;
            resourceInputs["createEmpty"] = state ? state.createEmpty : undefined;
            resourceInputs["descriptionCustomer"] = state ? state.descriptionCustomer : undefined;
            resourceInputs["descriptionInternal"] = state ? state.descriptionInternal : undefined;
            resourceInputs["ipVersion"] = state ? state.ipVersion : undefined;
            resourceInputs["locationId"] = state ? state.locationId : undefined;
            resourceInputs["locations"] = state ? state.locations : undefined;
            resourceInputs["netmask"] = state ? state.netmask : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["roleText"] = state ? state.roleText : undefined;
            resourceInputs["routerRedundancy"] = state ? state.routerRedundancy : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vlanId"] = state ? state.vlanId : undefined;
        } else {
            const args = argsOrState as NetworkPrefixArgs | undefined;
            if ((!args || args.locationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'locationId'");
            }
            if ((!args || args.netmask === undefined) && !opts.urn) {
                throw new Error("Missing required property 'netmask'");
            }
            resourceInputs["createEmpty"] = args ? args.createEmpty : undefined;
            resourceInputs["descriptionCustomer"] = args ? args.descriptionCustomer : undefined;
            resourceInputs["ipVersion"] = args ? args.ipVersion : undefined;
            resourceInputs["locationId"] = args ? args.locationId : undefined;
            resourceInputs["netmask"] = args ? args.netmask : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["routerRedundancy"] = args ? args.routerRedundancy : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["vlanId"] = args ? args.vlanId : undefined;
            resourceInputs["cidr"] = undefined /*out*/;
            resourceInputs["descriptionInternal"] = undefined /*out*/;
            resourceInputs["locations"] = undefined /*out*/;
            resourceInputs["roleText"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkPrefix.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetworkPrefix resources.
 */
export interface NetworkPrefixState {
    /**
     * CIDR of the created prefix.
     */
    cidr?: pulumi.Input<string>;
    /**
     * Whether the prefix should be created with inactive IPs
     */
    createEmpty?: pulumi.Input<boolean>;
    /**
     * Additional description.
     */
    descriptionCustomer?: pulumi.Input<string>;
    /**
     * Internal description.
     */
    descriptionInternal?: pulumi.Input<string>;
    /**
     * The Prefix version: 4 = IPv4, 6 = IPv6.
     */
    ipVersion?: pulumi.Input<number>;
    /**
     * Identifier of the location to create the prefix at.
     */
    locationId?: pulumi.Input<string>;
    /**
     * Anexia Cloud Locations.
     */
    locations?: pulumi.Input<pulumi.Input<inputs.NetworkPrefixLocation>[]>;
    /**
     * Netmask size. Example: 29 which would result in x.x.x.x/29.
     */
    netmask?: pulumi.Input<number>;
    /**
     * Customer of yours. Reseller only.
     */
    organization?: pulumi.Input<string>;
    /**
     * Role of the prefix.
     */
    roleText?: pulumi.Input<string>;
    /**
     * If router Redundancy shall be enabled.
     */
    routerRedundancy?: pulumi.Input<boolean>;
    /**
     * Status of the created prefix.
     */
    status?: pulumi.Input<string>;
    /**
     * Set of tags attached to the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.NetworkPrefixTimeouts>;
    /**
     * The Prefix type: 0 = Public, 1 = Private.
     */
    type?: pulumi.Input<number>;
    /**
     * The corresponding VLAN identifier
     */
    vlanId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkPrefix resource.
 */
export interface NetworkPrefixArgs {
    /**
     * Whether the prefix should be created with inactive IPs
     */
    createEmpty?: pulumi.Input<boolean>;
    /**
     * Additional description.
     */
    descriptionCustomer?: pulumi.Input<string>;
    /**
     * The Prefix version: 4 = IPv4, 6 = IPv6.
     */
    ipVersion?: pulumi.Input<number>;
    /**
     * Identifier of the location to create the prefix at.
     */
    locationId: pulumi.Input<string>;
    /**
     * Netmask size. Example: 29 which would result in x.x.x.x/29.
     */
    netmask: pulumi.Input<number>;
    /**
     * Customer of yours. Reseller only.
     */
    organization?: pulumi.Input<string>;
    /**
     * If router Redundancy shall be enabled.
     */
    routerRedundancy?: pulumi.Input<boolean>;
    /**
     * Set of tags attached to the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.NetworkPrefixTimeouts>;
    /**
     * The Prefix type: 0 = Public, 1 = Private.
     */
    type?: pulumi.Input<number>;
    /**
     * The corresponding VLAN identifier
     */
    vlanId?: pulumi.Input<string>;
}
