// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VirtualServer extends pulumi.CustomResource {
    /**
     * Get an existing VirtualServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualServerState, opts?: pulumi.CustomResourceOptions): VirtualServer {
        return new VirtualServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'anxcloud:index/virtualServer:VirtualServer';

    /**
     * Returns true if the given object is an instance of VirtualServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualServer.__pulumiType;
    }

    /**
     * Boot delay in seconds. Example: (0, 1, …).
     */
    public readonly bootDelay!: pulumi.Output<number | undefined>;
    /**
     * CPU type. Example: (`best-effort`, `standard`, `enterprise`, `performance`), defaults to `standard`.
     */
    public readonly cpuPerformanceType!: pulumi.Output<string | undefined>;
    /**
     * Amount of CPUs.
     */
    public readonly cpus!: pulumi.Output<number>;
    /**
     * Confirms a critical operation (if needed). Potentially dangerous operations (e.g. resulting in data loss) require an
     * additional confirmation. The parameter is used for VM UPDATE requests.
     */
    public readonly criticalOperationConfirmed!: pulumi.Output<boolean | undefined>;
    /**
     * Virtual Server Disks
     */
    public readonly disks!: pulumi.Output<outputs.VirtualServerDisk[]>;
    /**
     * DNS configuration. Maximum items 4. Defaults to template settings.
     */
    public readonly dns!: pulumi.Output<string[] | undefined>;
    /**
     * Start the VM into BIOS setup on next boot.
     */
    public readonly enterBiosSetup!: pulumi.Output<boolean | undefined>;
    /**
     * Certain operations may only be performed in powered off state. Such as: shrinking memory, shrinking/adding CPU, removing
     * disk and scaling a disk beyond 2 GB. Passing this value as true will always execute a power off and reboot request after
     * completing all other operations. Without this flag set to true scaling operations requiring a reboot will fail.
     */
    public readonly forceRestartIfNeeded!: pulumi.Output<boolean | undefined>;
    /**
     * Virtual server hostname.
     */
    public readonly hostname!: pulumi.Output<string>;
    /**
     * Virtual server info
     */
    public /*out*/ readonly infos!: pulumi.Output<outputs.VirtualServerInfo[]>;
    /**
     * Location identifier.
     */
    public readonly locationId!: pulumi.Output<string>;
    /**
     * Memory in MB.
     */
    public readonly memory!: pulumi.Output<number>;
    /**
     * Network interface
     */
    public readonly networks!: pulumi.Output<outputs.VirtualServerNetwork[] | undefined>;
    /**
     * Plaintext password. Example: ('!anx123mySuperStrongPassword123anx!', 'go3ju0la1ro3', …). For systems that support it,
     * we strongly recommend using a SSH key instead.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Script to be executed after provisioning. Consider the corresponding shebang at the beginning of your script. If you
     * want to use PowerShell, the first line should be: #ps1_sysnative.
     */
    public readonly script!: pulumi.Output<string | undefined>;
    /**
     * Amount of CPU sockets Number of cores have to be a multiple of sockets, as they will be spread evenly across all
     * sockets. Defaults to number of cores, i.e. one socket per CPU core.
     */
    public readonly sockets!: pulumi.Output<number>;
    /**
     * Public key (instead of password, only for Linux systems). Recommended over providing a plaintext password.
     */
    public readonly sshKey!: pulumi.Output<string | undefined>;
    /**
     * Set of tags attached to the resource.
     */
    public readonly tags!: pulumi.Output<string[]>;
    /**
     * Named template. Can be used instead of the template_id to select a template. Example: (`Debian 11`, `Windows 2022`).
     */
    public readonly template!: pulumi.Output<string | undefined>;
    /**
     * Template build identifier optionally used with `template`. Will default to latest build. Example: `b42`
     */
    public readonly templateBuild!: pulumi.Output<string | undefined>;
    /**
     * Template identifier.
     */
    public readonly templateId!: pulumi.Output<string>;
    /**
     * OS template type.
     */
    public readonly templateType!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.VirtualServerTimeouts | undefined>;

    /**
     * Create a VirtualServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VirtualServerArgs | VirtualServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VirtualServerState | undefined;
            resourceInputs["bootDelay"] = state ? state.bootDelay : undefined;
            resourceInputs["cpuPerformanceType"] = state ? state.cpuPerformanceType : undefined;
            resourceInputs["cpus"] = state ? state.cpus : undefined;
            resourceInputs["criticalOperationConfirmed"] = state ? state.criticalOperationConfirmed : undefined;
            resourceInputs["disks"] = state ? state.disks : undefined;
            resourceInputs["dns"] = state ? state.dns : undefined;
            resourceInputs["enterBiosSetup"] = state ? state.enterBiosSetup : undefined;
            resourceInputs["forceRestartIfNeeded"] = state ? state.forceRestartIfNeeded : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["infos"] = state ? state.infos : undefined;
            resourceInputs["locationId"] = state ? state.locationId : undefined;
            resourceInputs["memory"] = state ? state.memory : undefined;
            resourceInputs["networks"] = state ? state.networks : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["script"] = state ? state.script : undefined;
            resourceInputs["sockets"] = state ? state.sockets : undefined;
            resourceInputs["sshKey"] = state ? state.sshKey : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["templateBuild"] = state ? state.templateBuild : undefined;
            resourceInputs["templateId"] = state ? state.templateId : undefined;
            resourceInputs["templateType"] = state ? state.templateType : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as VirtualServerArgs | undefined;
            if ((!args || args.cpus === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cpus'");
            }
            if ((!args || args.disks === undefined) && !opts.urn) {
                throw new Error("Missing required property 'disks'");
            }
            if ((!args || args.hostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostname'");
            }
            if ((!args || args.locationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'locationId'");
            }
            if ((!args || args.memory === undefined) && !opts.urn) {
                throw new Error("Missing required property 'memory'");
            }
            resourceInputs["bootDelay"] = args ? args.bootDelay : undefined;
            resourceInputs["cpuPerformanceType"] = args ? args.cpuPerformanceType : undefined;
            resourceInputs["cpus"] = args ? args.cpus : undefined;
            resourceInputs["criticalOperationConfirmed"] = args ? args.criticalOperationConfirmed : undefined;
            resourceInputs["disks"] = args ? args.disks : undefined;
            resourceInputs["dns"] = args ? args.dns : undefined;
            resourceInputs["enterBiosSetup"] = args ? args.enterBiosSetup : undefined;
            resourceInputs["forceRestartIfNeeded"] = args ? args.forceRestartIfNeeded : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["locationId"] = args ? args.locationId : undefined;
            resourceInputs["memory"] = args ? args.memory : undefined;
            resourceInputs["networks"] = args ? args.networks : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["script"] = args ? args.script : undefined;
            resourceInputs["sockets"] = args ? args.sockets : undefined;
            resourceInputs["sshKey"] = args ? args.sshKey : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["templateBuild"] = args ? args.templateBuild : undefined;
            resourceInputs["templateId"] = args ? args.templateId : undefined;
            resourceInputs["templateType"] = args ? args.templateType : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["infos"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(VirtualServer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VirtualServer resources.
 */
export interface VirtualServerState {
    /**
     * Boot delay in seconds. Example: (0, 1, …).
     */
    bootDelay?: pulumi.Input<number>;
    /**
     * CPU type. Example: (`best-effort`, `standard`, `enterprise`, `performance`), defaults to `standard`.
     */
    cpuPerformanceType?: pulumi.Input<string>;
    /**
     * Amount of CPUs.
     */
    cpus?: pulumi.Input<number>;
    /**
     * Confirms a critical operation (if needed). Potentially dangerous operations (e.g. resulting in data loss) require an
     * additional confirmation. The parameter is used for VM UPDATE requests.
     */
    criticalOperationConfirmed?: pulumi.Input<boolean>;
    /**
     * Virtual Server Disks
     */
    disks?: pulumi.Input<pulumi.Input<inputs.VirtualServerDisk>[]>;
    /**
     * DNS configuration. Maximum items 4. Defaults to template settings.
     */
    dns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Start the VM into BIOS setup on next boot.
     */
    enterBiosSetup?: pulumi.Input<boolean>;
    /**
     * Certain operations may only be performed in powered off state. Such as: shrinking memory, shrinking/adding CPU, removing
     * disk and scaling a disk beyond 2 GB. Passing this value as true will always execute a power off and reboot request after
     * completing all other operations. Without this flag set to true scaling operations requiring a reboot will fail.
     */
    forceRestartIfNeeded?: pulumi.Input<boolean>;
    /**
     * Virtual server hostname.
     */
    hostname?: pulumi.Input<string>;
    /**
     * Virtual server info
     */
    infos?: pulumi.Input<pulumi.Input<inputs.VirtualServerInfo>[]>;
    /**
     * Location identifier.
     */
    locationId?: pulumi.Input<string>;
    /**
     * Memory in MB.
     */
    memory?: pulumi.Input<number>;
    /**
     * Network interface
     */
    networks?: pulumi.Input<pulumi.Input<inputs.VirtualServerNetwork>[]>;
    /**
     * Plaintext password. Example: ('!anx123mySuperStrongPassword123anx!', 'go3ju0la1ro3', …). For systems that support it,
     * we strongly recommend using a SSH key instead.
     */
    password?: pulumi.Input<string>;
    /**
     * Script to be executed after provisioning. Consider the corresponding shebang at the beginning of your script. If you
     * want to use PowerShell, the first line should be: #ps1_sysnative.
     */
    script?: pulumi.Input<string>;
    /**
     * Amount of CPU sockets Number of cores have to be a multiple of sockets, as they will be spread evenly across all
     * sockets. Defaults to number of cores, i.e. one socket per CPU core.
     */
    sockets?: pulumi.Input<number>;
    /**
     * Public key (instead of password, only for Linux systems). Recommended over providing a plaintext password.
     */
    sshKey?: pulumi.Input<string>;
    /**
     * Set of tags attached to the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Named template. Can be used instead of the template_id to select a template. Example: (`Debian 11`, `Windows 2022`).
     */
    template?: pulumi.Input<string>;
    /**
     * Template build identifier optionally used with `template`. Will default to latest build. Example: `b42`
     */
    templateBuild?: pulumi.Input<string>;
    /**
     * Template identifier.
     */
    templateId?: pulumi.Input<string>;
    /**
     * OS template type.
     */
    templateType?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VirtualServerTimeouts>;
}

/**
 * The set of arguments for constructing a VirtualServer resource.
 */
export interface VirtualServerArgs {
    /**
     * Boot delay in seconds. Example: (0, 1, …).
     */
    bootDelay?: pulumi.Input<number>;
    /**
     * CPU type. Example: (`best-effort`, `standard`, `enterprise`, `performance`), defaults to `standard`.
     */
    cpuPerformanceType?: pulumi.Input<string>;
    /**
     * Amount of CPUs.
     */
    cpus: pulumi.Input<number>;
    /**
     * Confirms a critical operation (if needed). Potentially dangerous operations (e.g. resulting in data loss) require an
     * additional confirmation. The parameter is used for VM UPDATE requests.
     */
    criticalOperationConfirmed?: pulumi.Input<boolean>;
    /**
     * Virtual Server Disks
     */
    disks: pulumi.Input<pulumi.Input<inputs.VirtualServerDisk>[]>;
    /**
     * DNS configuration. Maximum items 4. Defaults to template settings.
     */
    dns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Start the VM into BIOS setup on next boot.
     */
    enterBiosSetup?: pulumi.Input<boolean>;
    /**
     * Certain operations may only be performed in powered off state. Such as: shrinking memory, shrinking/adding CPU, removing
     * disk and scaling a disk beyond 2 GB. Passing this value as true will always execute a power off and reboot request after
     * completing all other operations. Without this flag set to true scaling operations requiring a reboot will fail.
     */
    forceRestartIfNeeded?: pulumi.Input<boolean>;
    /**
     * Virtual server hostname.
     */
    hostname: pulumi.Input<string>;
    /**
     * Location identifier.
     */
    locationId: pulumi.Input<string>;
    /**
     * Memory in MB.
     */
    memory: pulumi.Input<number>;
    /**
     * Network interface
     */
    networks?: pulumi.Input<pulumi.Input<inputs.VirtualServerNetwork>[]>;
    /**
     * Plaintext password. Example: ('!anx123mySuperStrongPassword123anx!', 'go3ju0la1ro3', …). For systems that support it,
     * we strongly recommend using a SSH key instead.
     */
    password?: pulumi.Input<string>;
    /**
     * Script to be executed after provisioning. Consider the corresponding shebang at the beginning of your script. If you
     * want to use PowerShell, the first line should be: #ps1_sysnative.
     */
    script?: pulumi.Input<string>;
    /**
     * Amount of CPU sockets Number of cores have to be a multiple of sockets, as they will be spread evenly across all
     * sockets. Defaults to number of cores, i.e. one socket per CPU core.
     */
    sockets?: pulumi.Input<number>;
    /**
     * Public key (instead of password, only for Linux systems). Recommended over providing a plaintext password.
     */
    sshKey?: pulumi.Input<string>;
    /**
     * Set of tags attached to the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Named template. Can be used instead of the template_id to select a template. Example: (`Debian 11`, `Windows 2022`).
     */
    template?: pulumi.Input<string>;
    /**
     * Template build identifier optionally used with `template`. Will default to latest build. Example: `b42`
     */
    templateBuild?: pulumi.Input<string>;
    /**
     * Template identifier.
     */
    templateId?: pulumi.Input<string>;
    /**
     * OS template type.
     */
    templateType?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VirtualServerTimeouts>;
}
