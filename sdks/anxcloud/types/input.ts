// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface DnsRecordTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
}

export interface DnsZoneDnsServer {
    /**
     * DNS server alias.
     */
    alias: pulumi.Input<string>;
    /**
     * DNS server name.
     */
    server: pulumi.Input<string>;
}

export interface DnsZoneTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface E5eFunctionEnv {
    name: pulumi.Input<string>;
    secret?: pulumi.Input<boolean>;
    value: pulumi.Input<string>;
}

export interface E5eFunctionHostname {
    hostname: pulumi.Input<string>;
    ip: pulumi.Input<string>;
}

export interface E5eFunctionStorageBackendArchive {
    content: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface E5eFunctionStorageBackendGit {
    branch?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    privateKey?: pulumi.Input<string>;
    url: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

export interface E5eFunctionStorageBackendS3 {
    accessKey?: pulumi.Input<string>;
    bucketName: pulumi.Input<string>;
    endpoint: pulumi.Input<string>;
    objectPath?: pulumi.Input<string>;
    secretKey?: pulumi.Input<string>;
}

export interface FrontierActionE5eAsyncFunction {
    function: pulumi.Input<string>;
}

export interface FrontierActionE5eAsyncResult {
    function: pulumi.Input<string>;
}

export interface FrontierActionE5eFunction {
    function: pulumi.Input<string>;
}

export interface FrontierActionMockResponse {
    body: pulumi.Input<string>;
    language: pulumi.Input<string>;
}

export interface FrontierActionUrlRewrite {
    url: pulumi.Input<string>;
}

export interface IpAddressTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface KubernetesClusterTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
}

export interface KubernetesKubeconfigTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
}

export interface KubernetesNodePoolDisk {
    /**
     * Disk size in GiB.
     */
    sizeGib: pulumi.Input<number>;
}

export interface KubernetesNodePoolTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
}

export interface LbaasLoadbalancerTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface NetworkPrefixLocation {
    cityCode: pulumi.Input<string>;
    code: pulumi.Input<string>;
    country: pulumi.Input<string>;
    identifier: pulumi.Input<string>;
    lat: pulumi.Input<string>;
    lon: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface NetworkPrefixTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface TagOrganisationAssignment {
    customers: pulumi.Input<pulumi.Input<inputs.TagOrganisationAssignmentCustomer>[]>;
    services: pulumi.Input<pulumi.Input<inputs.TagOrganisationAssignmentService>[]>;
}

export interface TagOrganisationAssignmentCustomer {
    customerId: pulumi.Input<string>;
    demo: pulumi.Input<boolean>;
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
    nameSlug: pulumi.Input<string>;
    reseller: pulumi.Input<string>;
}

export interface TagOrganisationAssignmentService {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface TagTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
}

export interface VirtualServerDisk {
    /**
     * Exact floating point disk size. Not configurable; just for comparison.
     */
    diskExact?: pulumi.Input<number>;
    /**
     * Disk capacity in GB.
     */
    diskGb: pulumi.Input<number>;
    /**
     * Device identifier of the disk.
     */
    diskId?: pulumi.Input<number>;
    /**
     * Disk category (limits disk performance, e.g. IOPS). Default value depends on location.
     */
    diskType?: pulumi.Input<string>;
}

export interface VirtualServerInfo {
    cores: pulumi.Input<number>;
    cpu: pulumi.Input<number>;
    customName: pulumi.Input<string>;
    disksInfos: pulumi.Input<pulumi.Input<inputs.VirtualServerInfoDisksInfo>[]>;
    disksNumber: pulumi.Input<number>;
    guestOs: pulumi.Input<string>;
    guestToolsStatus: pulumi.Input<string>;
    identifier: pulumi.Input<string>;
    locationCode: pulumi.Input<string>;
    locationCountry: pulumi.Input<string>;
    locationName: pulumi.Input<string>;
    name: pulumi.Input<string>;
    networks: pulumi.Input<pulumi.Input<inputs.VirtualServerInfoNetwork>[]>;
    ram: pulumi.Input<number>;
    status: pulumi.Input<string>;
    versionTools: pulumi.Input<string>;
}

export interface VirtualServerInfoDisksInfo {
    busType: pulumi.Input<string>;
    busTypeLabel: pulumi.Input<string>;
    diskGb: pulumi.Input<number>;
    diskId: pulumi.Input<number>;
    diskType: pulumi.Input<string>;
    iops: pulumi.Input<number>;
    latency: pulumi.Input<number>;
    storageType: pulumi.Input<string>;
}

export interface VirtualServerInfoNetwork {
    id: pulumi.Input<number>;
    ipV4s: pulumi.Input<pulumi.Input<string>[]>;
    ipV6s: pulumi.Input<pulumi.Input<string>[]>;
    macAddress: pulumi.Input<string>;
    nic: pulumi.Input<number>;
    vlan: pulumi.Input<string>;
}

export interface VirtualServerNetwork {
    /**
     * Requested set of IPs and IPs identifiers. IPs are ignored when using template_type 'from_scratch'. Defaults to free IPs from IP pool attached to VLAN.
     */
    ips?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Network interface card type.
     */
    nicType: pulumi.Input<string>;
    /**
     * VLAN identifier.
     */
    vlanId: pulumi.Input<string>;
}

export interface VirtualServerTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface VlanLocation {
    cityCode: pulumi.Input<string>;
    code: pulumi.Input<string>;
    country: pulumi.Input<string>;
    identifier: pulumi.Input<string>;
    lat: pulumi.Input<string>;
    lon: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface VlanTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}
