// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { DnsRecordArgs, DnsRecordState } from "./dnsRecord";
export type DnsRecord = import("./dnsRecord").DnsRecord;
export const DnsRecord: typeof import("./dnsRecord").DnsRecord = null as any;
utilities.lazyLoad(exports, ["DnsRecord"], () => require("./dnsRecord"));

export { DnsZoneArgs, DnsZoneState } from "./dnsZone";
export type DnsZone = import("./dnsZone").DnsZone;
export const DnsZone: typeof import("./dnsZone").DnsZone = null as any;
utilities.lazyLoad(exports, ["DnsZone"], () => require("./dnsZone"));

export { E5eApplicationArgs, E5eApplicationState } from "./e5eApplication";
export type E5eApplication = import("./e5eApplication").E5eApplication;
export const E5eApplication: typeof import("./e5eApplication").E5eApplication = null as any;
utilities.lazyLoad(exports, ["E5eApplication"], () => require("./e5eApplication"));

export { E5eFunctionArgs, E5eFunctionState } from "./e5eFunction";
export type E5eFunction = import("./e5eFunction").E5eFunction;
export const E5eFunction: typeof import("./e5eFunction").E5eFunction = null as any;
utilities.lazyLoad(exports, ["E5eFunction"], () => require("./e5eFunction"));

export { FrontierActionArgs, FrontierActionState } from "./frontierAction";
export type FrontierAction = import("./frontierAction").FrontierAction;
export const FrontierAction: typeof import("./frontierAction").FrontierAction = null as any;
utilities.lazyLoad(exports, ["FrontierAction"], () => require("./frontierAction"));

export { FrontierApiArgs, FrontierApiState } from "./frontierApi";
export type FrontierApi = import("./frontierApi").FrontierApi;
export const FrontierApi: typeof import("./frontierApi").FrontierApi = null as any;
utilities.lazyLoad(exports, ["FrontierApi"], () => require("./frontierApi"));

export { FrontierDeploymentArgs, FrontierDeploymentState } from "./frontierDeployment";
export type FrontierDeployment = import("./frontierDeployment").FrontierDeployment;
export const FrontierDeployment: typeof import("./frontierDeployment").FrontierDeployment = null as any;
utilities.lazyLoad(exports, ["FrontierDeployment"], () => require("./frontierDeployment"));

export { FrontierEndpointArgs, FrontierEndpointState } from "./frontierEndpoint";
export type FrontierEndpoint = import("./frontierEndpoint").FrontierEndpoint;
export const FrontierEndpoint: typeof import("./frontierEndpoint").FrontierEndpoint = null as any;
utilities.lazyLoad(exports, ["FrontierEndpoint"], () => require("./frontierEndpoint"));

export { GetCoreLocationArgs, GetCoreLocationResult, GetCoreLocationOutputArgs } from "./getCoreLocation";
export const getCoreLocation: typeof import("./getCoreLocation").getCoreLocation = null as any;
export const getCoreLocationOutput: typeof import("./getCoreLocation").getCoreLocationOutput = null as any;
utilities.lazyLoad(exports, ["getCoreLocation","getCoreLocationOutput"], () => require("./getCoreLocation"));

export { GetCoreLocationsArgs, GetCoreLocationsResult, GetCoreLocationsOutputArgs } from "./getCoreLocations";
export const getCoreLocations: typeof import("./getCoreLocations").getCoreLocations = null as any;
export const getCoreLocationsOutput: typeof import("./getCoreLocations").getCoreLocationsOutput = null as any;
utilities.lazyLoad(exports, ["getCoreLocations","getCoreLocationsOutput"], () => require("./getCoreLocations"));

export { GetCpuPerformanceTypesArgs, GetCpuPerformanceTypesResult, GetCpuPerformanceTypesOutputArgs } from "./getCpuPerformanceTypes";
export const getCpuPerformanceTypes: typeof import("./getCpuPerformanceTypes").getCpuPerformanceTypes = null as any;
export const getCpuPerformanceTypesOutput: typeof import("./getCpuPerformanceTypes").getCpuPerformanceTypesOutput = null as any;
utilities.lazyLoad(exports, ["getCpuPerformanceTypes","getCpuPerformanceTypesOutput"], () => require("./getCpuPerformanceTypes"));

export { GetDiskTypesArgs, GetDiskTypesResult, GetDiskTypesOutputArgs } from "./getDiskTypes";
export const getDiskTypes: typeof import("./getDiskTypes").getDiskTypes = null as any;
export const getDiskTypesOutput: typeof import("./getDiskTypes").getDiskTypesOutput = null as any;
utilities.lazyLoad(exports, ["getDiskTypes","getDiskTypesOutput"], () => require("./getDiskTypes"));

export { GetDnsRecordsArgs, GetDnsRecordsResult, GetDnsRecordsOutputArgs } from "./getDnsRecords";
export const getDnsRecords: typeof import("./getDnsRecords").getDnsRecords = null as any;
export const getDnsRecordsOutput: typeof import("./getDnsRecords").getDnsRecordsOutput = null as any;
utilities.lazyLoad(exports, ["getDnsRecords","getDnsRecordsOutput"], () => require("./getDnsRecords"));

export { GetDnsZonesArgs, GetDnsZonesResult, GetDnsZonesOutputArgs } from "./getDnsZones";
export const getDnsZones: typeof import("./getDnsZones").getDnsZones = null as any;
export const getDnsZonesOutput: typeof import("./getDnsZones").getDnsZonesOutput = null as any;
utilities.lazyLoad(exports, ["getDnsZones","getDnsZonesOutput"], () => require("./getDnsZones"));

export { GetIpAddressArgs, GetIpAddressResult, GetIpAddressOutputArgs } from "./getIpAddress";
export const getIpAddress: typeof import("./getIpAddress").getIpAddress = null as any;
export const getIpAddressOutput: typeof import("./getIpAddress").getIpAddressOutput = null as any;
utilities.lazyLoad(exports, ["getIpAddress","getIpAddressOutput"], () => require("./getIpAddress"));

export { GetIpAddressesArgs, GetIpAddressesResult, GetIpAddressesOutputArgs } from "./getIpAddresses";
export const getIpAddresses: typeof import("./getIpAddresses").getIpAddresses = null as any;
export const getIpAddressesOutput: typeof import("./getIpAddresses").getIpAddressesOutput = null as any;
utilities.lazyLoad(exports, ["getIpAddresses","getIpAddressesOutput"], () => require("./getIpAddresses"));

export { GetKubernetesClusterArgs, GetKubernetesClusterResult, GetKubernetesClusterOutputArgs } from "./getKubernetesCluster";
export const getKubernetesCluster: typeof import("./getKubernetesCluster").getKubernetesCluster = null as any;
export const getKubernetesClusterOutput: typeof import("./getKubernetesCluster").getKubernetesClusterOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesCluster","getKubernetesClusterOutput"], () => require("./getKubernetesCluster"));

export { GetNicTypesArgs, GetNicTypesResult, GetNicTypesOutputArgs } from "./getNicTypes";
export const getNicTypes: typeof import("./getNicTypes").getNicTypes = null as any;
export const getNicTypesOutput: typeof import("./getNicTypes").getNicTypesOutput = null as any;
utilities.lazyLoad(exports, ["getNicTypes","getNicTypesOutput"], () => require("./getNicTypes"));

export { GetTagsArgs, GetTagsResult, GetTagsOutputArgs } from "./getTags";
export const getTags: typeof import("./getTags").getTags = null as any;
export const getTagsOutput: typeof import("./getTags").getTagsOutput = null as any;
utilities.lazyLoad(exports, ["getTags","getTagsOutput"], () => require("./getTags"));

export { GetTemplateArgs, GetTemplateResult, GetTemplateOutputArgs } from "./getTemplate";
export const getTemplate: typeof import("./getTemplate").getTemplate = null as any;
export const getTemplateOutput: typeof import("./getTemplate").getTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getTemplate","getTemplateOutput"], () => require("./getTemplate"));

export { GetVlanArgs, GetVlanResult, GetVlanOutputArgs } from "./getVlan";
export const getVlan: typeof import("./getVlan").getVlan = null as any;
export const getVlanOutput: typeof import("./getVlan").getVlanOutput = null as any;
utilities.lazyLoad(exports, ["getVlan","getVlanOutput"], () => require("./getVlan"));

export { GetVlansArgs, GetVlansResult, GetVlansOutputArgs } from "./getVlans";
export const getVlans: typeof import("./getVlans").getVlans = null as any;
export const getVlansOutput: typeof import("./getVlans").getVlansOutput = null as any;
utilities.lazyLoad(exports, ["getVlans","getVlansOutput"], () => require("./getVlans"));

export { IpAddressArgs, IpAddressState } from "./ipAddress";
export type IpAddress = import("./ipAddress").IpAddress;
export const IpAddress: typeof import("./ipAddress").IpAddress = null as any;
utilities.lazyLoad(exports, ["IpAddress"], () => require("./ipAddress"));

export { KubernetesClusterArgs, KubernetesClusterState } from "./kubernetesCluster";
export type KubernetesCluster = import("./kubernetesCluster").KubernetesCluster;
export const KubernetesCluster: typeof import("./kubernetesCluster").KubernetesCluster = null as any;
utilities.lazyLoad(exports, ["KubernetesCluster"], () => require("./kubernetesCluster"));

export { KubernetesKubeconfigArgs, KubernetesKubeconfigState } from "./kubernetesKubeconfig";
export type KubernetesKubeconfig = import("./kubernetesKubeconfig").KubernetesKubeconfig;
export const KubernetesKubeconfig: typeof import("./kubernetesKubeconfig").KubernetesKubeconfig = null as any;
utilities.lazyLoad(exports, ["KubernetesKubeconfig"], () => require("./kubernetesKubeconfig"));

export { KubernetesNodePoolArgs, KubernetesNodePoolState } from "./kubernetesNodePool";
export type KubernetesNodePool = import("./kubernetesNodePool").KubernetesNodePool;
export const KubernetesNodePool: typeof import("./kubernetesNodePool").KubernetesNodePool = null as any;
utilities.lazyLoad(exports, ["KubernetesNodePool"], () => require("./kubernetesNodePool"));

export { LbaasLoadbalancerArgs, LbaasLoadbalancerState } from "./lbaasLoadbalancer";
export type LbaasLoadbalancer = import("./lbaasLoadbalancer").LbaasLoadbalancer;
export const LbaasLoadbalancer: typeof import("./lbaasLoadbalancer").LbaasLoadbalancer = null as any;
utilities.lazyLoad(exports, ["LbaasLoadbalancer"], () => require("./lbaasLoadbalancer"));

export { NetworkPrefixArgs, NetworkPrefixState } from "./networkPrefix";
export type NetworkPrefix = import("./networkPrefix").NetworkPrefix;
export const NetworkPrefix: typeof import("./networkPrefix").NetworkPrefix = null as any;
utilities.lazyLoad(exports, ["NetworkPrefix"], () => require("./networkPrefix"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { TagArgs, TagState } from "./tag";
export type Tag = import("./tag").Tag;
export const Tag: typeof import("./tag").Tag = null as any;
utilities.lazyLoad(exports, ["Tag"], () => require("./tag"));

export { VirtualServerArgs, VirtualServerState } from "./virtualServer";
export type VirtualServer = import("./virtualServer").VirtualServer;
export const VirtualServer: typeof import("./virtualServer").VirtualServer = null as any;
utilities.lazyLoad(exports, ["VirtualServer"], () => require("./virtualServer"));

export { VlanArgs, VlanState } from "./vlan";
export type Vlan = import("./vlan").Vlan;
export const Vlan: typeof import("./vlan").Vlan = null as any;
utilities.lazyLoad(exports, ["Vlan"], () => require("./vlan"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "anxcloud:index/dnsRecord:DnsRecord":
                return new DnsRecord(name, <any>undefined, { urn })
            case "anxcloud:index/dnsZone:DnsZone":
                return new DnsZone(name, <any>undefined, { urn })
            case "anxcloud:index/e5eApplication:E5eApplication":
                return new E5eApplication(name, <any>undefined, { urn })
            case "anxcloud:index/e5eFunction:E5eFunction":
                return new E5eFunction(name, <any>undefined, { urn })
            case "anxcloud:index/frontierAction:FrontierAction":
                return new FrontierAction(name, <any>undefined, { urn })
            case "anxcloud:index/frontierApi:FrontierApi":
                return new FrontierApi(name, <any>undefined, { urn })
            case "anxcloud:index/frontierDeployment:FrontierDeployment":
                return new FrontierDeployment(name, <any>undefined, { urn })
            case "anxcloud:index/frontierEndpoint:FrontierEndpoint":
                return new FrontierEndpoint(name, <any>undefined, { urn })
            case "anxcloud:index/ipAddress:IpAddress":
                return new IpAddress(name, <any>undefined, { urn })
            case "anxcloud:index/kubernetesCluster:KubernetesCluster":
                return new KubernetesCluster(name, <any>undefined, { urn })
            case "anxcloud:index/kubernetesKubeconfig:KubernetesKubeconfig":
                return new KubernetesKubeconfig(name, <any>undefined, { urn })
            case "anxcloud:index/kubernetesNodePool:KubernetesNodePool":
                return new KubernetesNodePool(name, <any>undefined, { urn })
            case "anxcloud:index/lbaasLoadbalancer:LbaasLoadbalancer":
                return new LbaasLoadbalancer(name, <any>undefined, { urn })
            case "anxcloud:index/networkPrefix:NetworkPrefix":
                return new NetworkPrefix(name, <any>undefined, { urn })
            case "anxcloud:index/tag:Tag":
                return new Tag(name, <any>undefined, { urn })
            case "anxcloud:index/virtualServer:VirtualServer":
                return new VirtualServer(name, <any>undefined, { urn })
            case "anxcloud:index/vlan:Vlan":
                return new Vlan(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("anxcloud", "index/dnsRecord", _module)
pulumi.runtime.registerResourceModule("anxcloud", "index/dnsZone", _module)
pulumi.runtime.registerResourceModule("anxcloud", "index/e5eApplication", _module)
pulumi.runtime.registerResourceModule("anxcloud", "index/e5eFunction", _module)
pulumi.runtime.registerResourceModule("anxcloud", "index/frontierAction", _module)
pulumi.runtime.registerResourceModule("anxcloud", "index/frontierApi", _module)
pulumi.runtime.registerResourceModule("anxcloud", "index/frontierDeployment", _module)
pulumi.runtime.registerResourceModule("anxcloud", "index/frontierEndpoint", _module)
pulumi.runtime.registerResourceModule("anxcloud", "index/ipAddress", _module)
pulumi.runtime.registerResourceModule("anxcloud", "index/kubernetesCluster", _module)
pulumi.runtime.registerResourceModule("anxcloud", "index/kubernetesKubeconfig", _module)
pulumi.runtime.registerResourceModule("anxcloud", "index/kubernetesNodePool", _module)
pulumi.runtime.registerResourceModule("anxcloud", "index/lbaasLoadbalancer", _module)
pulumi.runtime.registerResourceModule("anxcloud", "index/networkPrefix", _module)
pulumi.runtime.registerResourceModule("anxcloud", "index/tag", _module)
pulumi.runtime.registerResourceModule("anxcloud", "index/virtualServer", _module)
pulumi.runtime.registerResourceModule("anxcloud", "index/vlan", _module)
pulumi.runtime.registerResourcePackage("anxcloud", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:anxcloud") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
