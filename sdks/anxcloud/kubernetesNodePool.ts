// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KubernetesNodePool extends pulumi.CustomResource {
    /**
     * Get an existing KubernetesNodePool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KubernetesNodePoolState, opts?: pulumi.CustomResourceOptions): KubernetesNodePool {
        return new KubernetesNodePool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'anxcloud:index/kubernetesNodePool:KubernetesNodePool';

    /**
     * Returns true if the given object is an instance of KubernetesNodePool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KubernetesNodePool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KubernetesNodePool.__pulumiType;
    }

    /**
     * Cluster identifier.
     */
    public readonly cluster!: pulumi.Output<string>;
    /**
     * Number of CPUs per node.
     */
    public readonly cpus!: pulumi.Output<number>;
    /**
     * List of disks for each node.
     */
    public readonly disk!: pulumi.Output<outputs.KubernetesNodePoolDisk>;
    /**
     * Initial number of nodes.
     */
    public readonly initialReplicas!: pulumi.Output<number>;
    /**
     * Memory per node in GiB.
     */
    public readonly memoryGib!: pulumi.Output<number>;
    /**
     * Node pool name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Operating system. Only "Flatcar Linux" supported at the moment.
     */
    public readonly operatingSystem!: pulumi.Output<string>;
    /**
     * Set of tags attached to the resource.
     */
    public readonly tags!: pulumi.Output<string[]>;
    public readonly timeouts!: pulumi.Output<outputs.KubernetesNodePoolTimeouts | undefined>;

    /**
     * Create a KubernetesNodePool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KubernetesNodePoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KubernetesNodePoolArgs | KubernetesNodePoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KubernetesNodePoolState | undefined;
            resourceInputs["cluster"] = state ? state.cluster : undefined;
            resourceInputs["cpus"] = state ? state.cpus : undefined;
            resourceInputs["disk"] = state ? state.disk : undefined;
            resourceInputs["initialReplicas"] = state ? state.initialReplicas : undefined;
            resourceInputs["memoryGib"] = state ? state.memoryGib : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["operatingSystem"] = state ? state.operatingSystem : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as KubernetesNodePoolArgs | undefined;
            if ((!args || args.cluster === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cluster'");
            }
            if ((!args || args.cpus === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cpus'");
            }
            if ((!args || args.disk === undefined) && !opts.urn) {
                throw new Error("Missing required property 'disk'");
            }
            if ((!args || args.initialReplicas === undefined) && !opts.urn) {
                throw new Error("Missing required property 'initialReplicas'");
            }
            if ((!args || args.memoryGib === undefined) && !opts.urn) {
                throw new Error("Missing required property 'memoryGib'");
            }
            if ((!args || args.operatingSystem === undefined) && !opts.urn) {
                throw new Error("Missing required property 'operatingSystem'");
            }
            resourceInputs["cluster"] = args ? args.cluster : undefined;
            resourceInputs["cpus"] = args ? args.cpus : undefined;
            resourceInputs["disk"] = args ? args.disk : undefined;
            resourceInputs["initialReplicas"] = args ? args.initialReplicas : undefined;
            resourceInputs["memoryGib"] = args ? args.memoryGib : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["operatingSystem"] = args ? args.operatingSystem : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KubernetesNodePool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KubernetesNodePool resources.
 */
export interface KubernetesNodePoolState {
    /**
     * Cluster identifier.
     */
    cluster?: pulumi.Input<string>;
    /**
     * Number of CPUs per node.
     */
    cpus?: pulumi.Input<number>;
    /**
     * List of disks for each node.
     */
    disk?: pulumi.Input<inputs.KubernetesNodePoolDisk>;
    /**
     * Initial number of nodes.
     */
    initialReplicas?: pulumi.Input<number>;
    /**
     * Memory per node in GiB.
     */
    memoryGib?: pulumi.Input<number>;
    /**
     * Node pool name.
     */
    name?: pulumi.Input<string>;
    /**
     * Operating system. Only "Flatcar Linux" supported at the moment.
     */
    operatingSystem?: pulumi.Input<string>;
    /**
     * Set of tags attached to the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.KubernetesNodePoolTimeouts>;
}

/**
 * The set of arguments for constructing a KubernetesNodePool resource.
 */
export interface KubernetesNodePoolArgs {
    /**
     * Cluster identifier.
     */
    cluster: pulumi.Input<string>;
    /**
     * Number of CPUs per node.
     */
    cpus: pulumi.Input<number>;
    /**
     * List of disks for each node.
     */
    disk: pulumi.Input<inputs.KubernetesNodePoolDisk>;
    /**
     * Initial number of nodes.
     */
    initialReplicas: pulumi.Input<number>;
    /**
     * Memory per node in GiB.
     */
    memoryGib: pulumi.Input<number>;
    /**
     * Node pool name.
     */
    name?: pulumi.Input<string>;
    /**
     * Operating system. Only "Flatcar Linux" supported at the moment.
     */
    operatingSystem: pulumi.Input<string>;
    /**
     * Set of tags attached to the resource.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.KubernetesNodePoolTimeouts>;
}
