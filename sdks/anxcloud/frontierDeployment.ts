// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class FrontierDeployment extends pulumi.CustomResource {
    /**
     * Get an existing FrontierDeployment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FrontierDeploymentState, opts?: pulumi.CustomResourceOptions): FrontierDeployment {
        return new FrontierDeployment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'anxcloud:index/frontierDeployment:FrontierDeployment';

    /**
     * Returns true if the given object is an instance of FrontierDeployment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FrontierDeployment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FrontierDeployment.__pulumiType;
    }

    /**
     * Deployment API identifier.
     */
    public readonly api!: pulumi.Output<string>;
    /**
     * Deployment name.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Deployment revision is an optional attribute which can be used to trigger a new deployment. Use the
     * `create_before_destroy` lifecycle argument to ensure that there is always a deployment present. The value can be any
     * arbitrary string (e.g. `COMMIT_SHA` passed in via variables).
     */
    public readonly revision!: pulumi.Output<string | undefined>;
    /**
     * Deployment slug.
     */
    public readonly slug!: pulumi.Output<string>;
    /**
     * Deployment state.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;

    /**
     * Create a FrontierDeployment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FrontierDeploymentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FrontierDeploymentArgs | FrontierDeploymentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FrontierDeploymentState | undefined;
            resourceInputs["api"] = state ? state.api : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["revision"] = state ? state.revision : undefined;
            resourceInputs["slug"] = state ? state.slug : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
        } else {
            const args = argsOrState as FrontierDeploymentArgs | undefined;
            if ((!args || args.api === undefined) && !opts.urn) {
                throw new Error("Missing required property 'api'");
            }
            if ((!args || args.slug === undefined) && !opts.urn) {
                throw new Error("Missing required property 'slug'");
            }
            resourceInputs["api"] = args ? args.api : undefined;
            resourceInputs["revision"] = args ? args.revision : undefined;
            resourceInputs["slug"] = args ? args.slug : undefined;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FrontierDeployment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FrontierDeployment resources.
 */
export interface FrontierDeploymentState {
    /**
     * Deployment API identifier.
     */
    api?: pulumi.Input<string>;
    /**
     * Deployment name.
     */
    name?: pulumi.Input<string>;
    /**
     * Deployment revision is an optional attribute which can be used to trigger a new deployment. Use the
     * `create_before_destroy` lifecycle argument to ensure that there is always a deployment present. The value can be any
     * arbitrary string (e.g. `COMMIT_SHA` passed in via variables).
     */
    revision?: pulumi.Input<string>;
    /**
     * Deployment slug.
     */
    slug?: pulumi.Input<string>;
    /**
     * Deployment state.
     */
    state?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FrontierDeployment resource.
 */
export interface FrontierDeploymentArgs {
    /**
     * Deployment API identifier.
     */
    api: pulumi.Input<string>;
    /**
     * Deployment revision is an optional attribute which can be used to trigger a new deployment. Use the
     * `create_before_destroy` lifecycle argument to ensure that there is always a deployment present. The value can be any
     * arbitrary string (e.g. `COMMIT_SHA` passed in via variables).
     */
    revision?: pulumi.Input<string>;
    /**
     * Deployment slug.
     */
    slug: pulumi.Input<string>;
}
