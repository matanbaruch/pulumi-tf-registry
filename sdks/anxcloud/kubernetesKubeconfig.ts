// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KubernetesKubeconfig extends pulumi.CustomResource {
    /**
     * Get an existing KubernetesKubeconfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KubernetesKubeconfigState, opts?: pulumi.CustomResourceOptions): KubernetesKubeconfig {
        return new KubernetesKubeconfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'anxcloud:index/kubernetesKubeconfig:KubernetesKubeconfig';

    /**
     * Returns true if the given object is an instance of KubernetesKubeconfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KubernetesKubeconfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KubernetesKubeconfig.__pulumiType;
    }

    /**
     * Cluster identifier.
     */
    public readonly cluster!: pulumi.Output<string>;
    /**
     * Kubeconfig cluster ca certificate.
     */
    public /*out*/ readonly clusterCaCertificate!: pulumi.Output<string>;
    /**
     * Cluster control-plane host.
     */
    public /*out*/ readonly host!: pulumi.Output<string>;
    /**
     * Raw kubeconfig.
     */
    public /*out*/ readonly raw!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.KubernetesKubeconfigTimeouts | undefined>;
    /**
     * Kubeconfig token.
     */
    public /*out*/ readonly token!: pulumi.Output<string>;

    /**
     * Create a KubernetesKubeconfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KubernetesKubeconfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KubernetesKubeconfigArgs | KubernetesKubeconfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KubernetesKubeconfigState | undefined;
            resourceInputs["cluster"] = state ? state.cluster : undefined;
            resourceInputs["clusterCaCertificate"] = state ? state.clusterCaCertificate : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["raw"] = state ? state.raw : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
        } else {
            const args = argsOrState as KubernetesKubeconfigArgs | undefined;
            if ((!args || args.cluster === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cluster'");
            }
            resourceInputs["cluster"] = args ? args.cluster : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["clusterCaCertificate"] = undefined /*out*/;
            resourceInputs["host"] = undefined /*out*/;
            resourceInputs["raw"] = undefined /*out*/;
            resourceInputs["token"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["clusterCaCertificate", "raw", "token"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(KubernetesKubeconfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KubernetesKubeconfig resources.
 */
export interface KubernetesKubeconfigState {
    /**
     * Cluster identifier.
     */
    cluster?: pulumi.Input<string>;
    /**
     * Kubeconfig cluster ca certificate.
     */
    clusterCaCertificate?: pulumi.Input<string>;
    /**
     * Cluster control-plane host.
     */
    host?: pulumi.Input<string>;
    /**
     * Raw kubeconfig.
     */
    raw?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.KubernetesKubeconfigTimeouts>;
    /**
     * Kubeconfig token.
     */
    token?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KubernetesKubeconfig resource.
 */
export interface KubernetesKubeconfigArgs {
    /**
     * Cluster identifier.
     */
    cluster: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.KubernetesKubeconfigTimeouts>;
}
