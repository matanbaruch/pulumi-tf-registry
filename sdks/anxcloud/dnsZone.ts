// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DnsZone extends pulumi.CustomResource {
    /**
     * Get an existing DnsZone resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnsZoneState, opts?: pulumi.CustomResourceOptions): DnsZone {
        return new DnsZone(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'anxcloud:index/dnsZone:DnsZone';

    /**
     * Returns true if the given object is an instance of DnsZone.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DnsZone {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnsZone.__pulumiType;
    }

    /**
     * Admin email address.
     */
    public readonly adminEmail!: pulumi.Output<string>;
    /**
     * Current deployment progress in percent.
     */
    public /*out*/ readonly deploymentLevel!: pulumi.Output<number>;
    /**
     * DNSSec mode value for master zones. [`managed` or `unvalidated`]
     */
    public readonly dnsSecMode!: pulumi.Output<string>;
    /**
     * Configured DNS servers.
     */
    public readonly dnsServers!: pulumi.Output<outputs.DnsZoneDnsServer[] | undefined>;
    /**
     * Expiration value.
     */
    public readonly expire!: pulumi.Output<number>;
    /**
     * Indicator if zone is editable.
     */
    public /*out*/ readonly isEditable!: pulumi.Output<boolean>;
    /**
     * Indicator if the zone is a master zone.
     */
    public readonly isMaster!: pulumi.Output<boolean>;
    /**
     * Master nameserver.
     */
    public readonly masterNameserver!: pulumi.Output<string>;
    /**
     * Zone name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * IP addresses allowed to initiate domain transfer.
     */
    public readonly notifyAllowedIps!: pulumi.Output<string[] | undefined>;
    /**
     * Refresh value.
     */
    public readonly refresh!: pulumi.Output<number>;
    /**
     * Retry value.
     */
    public readonly retry!: pulumi.Output<number>;
    public readonly timeouts!: pulumi.Output<outputs.DnsZoneTimeouts | undefined>;
    /**
     * TTL value.
     */
    public readonly ttl!: pulumi.Output<number>;
    /**
     * Current validation level in percent.
     */
    public /*out*/ readonly validationLevel!: pulumi.Output<number>;

    /**
     * Create a DnsZone resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnsZoneArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnsZoneArgs | DnsZoneState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnsZoneState | undefined;
            resourceInputs["adminEmail"] = state ? state.adminEmail : undefined;
            resourceInputs["deploymentLevel"] = state ? state.deploymentLevel : undefined;
            resourceInputs["dnsSecMode"] = state ? state.dnsSecMode : undefined;
            resourceInputs["dnsServers"] = state ? state.dnsServers : undefined;
            resourceInputs["expire"] = state ? state.expire : undefined;
            resourceInputs["isEditable"] = state ? state.isEditable : undefined;
            resourceInputs["isMaster"] = state ? state.isMaster : undefined;
            resourceInputs["masterNameserver"] = state ? state.masterNameserver : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifyAllowedIps"] = state ? state.notifyAllowedIps : undefined;
            resourceInputs["refresh"] = state ? state.refresh : undefined;
            resourceInputs["retry"] = state ? state.retry : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["validationLevel"] = state ? state.validationLevel : undefined;
        } else {
            const args = argsOrState as DnsZoneArgs | undefined;
            if ((!args || args.adminEmail === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adminEmail'");
            }
            if ((!args || args.dnsSecMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dnsSecMode'");
            }
            if ((!args || args.expire === undefined) && !opts.urn) {
                throw new Error("Missing required property 'expire'");
            }
            if ((!args || args.isMaster === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isMaster'");
            }
            if ((!args || args.refresh === undefined) && !opts.urn) {
                throw new Error("Missing required property 'refresh'");
            }
            if ((!args || args.retry === undefined) && !opts.urn) {
                throw new Error("Missing required property 'retry'");
            }
            if ((!args || args.ttl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ttl'");
            }
            resourceInputs["adminEmail"] = args ? args.adminEmail : undefined;
            resourceInputs["dnsSecMode"] = args ? args.dnsSecMode : undefined;
            resourceInputs["dnsServers"] = args ? args.dnsServers : undefined;
            resourceInputs["expire"] = args ? args.expire : undefined;
            resourceInputs["isMaster"] = args ? args.isMaster : undefined;
            resourceInputs["masterNameserver"] = args ? args.masterNameserver : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notifyAllowedIps"] = args ? args.notifyAllowedIps : undefined;
            resourceInputs["refresh"] = args ? args.refresh : undefined;
            resourceInputs["retry"] = args ? args.retry : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["deploymentLevel"] = undefined /*out*/;
            resourceInputs["isEditable"] = undefined /*out*/;
            resourceInputs["validationLevel"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DnsZone.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DnsZone resources.
 */
export interface DnsZoneState {
    /**
     * Admin email address.
     */
    adminEmail?: pulumi.Input<string>;
    /**
     * Current deployment progress in percent.
     */
    deploymentLevel?: pulumi.Input<number>;
    /**
     * DNSSec mode value for master zones. [`managed` or `unvalidated`]
     */
    dnsSecMode?: pulumi.Input<string>;
    /**
     * Configured DNS servers.
     */
    dnsServers?: pulumi.Input<pulumi.Input<inputs.DnsZoneDnsServer>[]>;
    /**
     * Expiration value.
     */
    expire?: pulumi.Input<number>;
    /**
     * Indicator if zone is editable.
     */
    isEditable?: pulumi.Input<boolean>;
    /**
     * Indicator if the zone is a master zone.
     */
    isMaster?: pulumi.Input<boolean>;
    /**
     * Master nameserver.
     */
    masterNameserver?: pulumi.Input<string>;
    /**
     * Zone name.
     */
    name?: pulumi.Input<string>;
    /**
     * IP addresses allowed to initiate domain transfer.
     */
    notifyAllowedIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Refresh value.
     */
    refresh?: pulumi.Input<number>;
    /**
     * Retry value.
     */
    retry?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.DnsZoneTimeouts>;
    /**
     * TTL value.
     */
    ttl?: pulumi.Input<number>;
    /**
     * Current validation level in percent.
     */
    validationLevel?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a DnsZone resource.
 */
export interface DnsZoneArgs {
    /**
     * Admin email address.
     */
    adminEmail: pulumi.Input<string>;
    /**
     * DNSSec mode value for master zones. [`managed` or `unvalidated`]
     */
    dnsSecMode: pulumi.Input<string>;
    /**
     * Configured DNS servers.
     */
    dnsServers?: pulumi.Input<pulumi.Input<inputs.DnsZoneDnsServer>[]>;
    /**
     * Expiration value.
     */
    expire: pulumi.Input<number>;
    /**
     * Indicator if the zone is a master zone.
     */
    isMaster: pulumi.Input<boolean>;
    /**
     * Master nameserver.
     */
    masterNameserver?: pulumi.Input<string>;
    /**
     * Zone name.
     */
    name?: pulumi.Input<string>;
    /**
     * IP addresses allowed to initiate domain transfer.
     */
    notifyAllowedIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Refresh value.
     */
    refresh: pulumi.Input<number>;
    /**
     * Retry value.
     */
    retry: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.DnsZoneTimeouts>;
    /**
     * TTL value.
     */
    ttl: pulumi.Input<number>;
}
