// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Attest extends pulumi.CustomResource {
    /**
     * Get an existing Attest resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AttestState, opts?: pulumi.CustomResourceOptions): Attest {
        return new Attest(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cosign:index/attest:Attest';

    /**
     * Returns true if the given object is an instance of Attest.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Attest {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Attest.__pulumiType;
    }

    /**
     * This always matches the input digest, but is a convenience for composition.
     */
    public /*out*/ readonly attestedRef!: pulumi.Output<string>;
    /**
     * How to handle conflicting predicate values
     */
    public readonly conflict!: pulumi.Output<string>;
    /**
     * Address of sigstore PKI server (default https://fulcio.sigstore.dev).
     */
    public readonly fulcioUrl!: pulumi.Output<string>;
    /**
     * The digest of the container image to attest.
     */
    public readonly image!: pulumi.Output<string>;
    /**
     * The JSON body of the in-toto predicate's claim.
     *
     * @deprecated Deprecated
     */
    public readonly predicate!: pulumi.Output<string | undefined>;
    /**
     * The path and sha256 hex of the predicate to attest.
     *
     * @deprecated Deprecated
     */
    public readonly predicateFiles!: pulumi.Output<outputs.AttestPredicateFile[] | undefined>;
    /**
     * The in-toto predicate type of the claim being attested.
     *
     * @deprecated Deprecated
     */
    public readonly predicateType!: pulumi.Output<string | undefined>;
    /**
     * The path and sha256 hex of the predicate to attest.
     */
    public readonly predicates!: pulumi.Output<outputs.AttestPredicate[] | undefined>;
    /**
     * Address of rekor transparency log server (default https://rekor.sigstore.dev).
     */
    public readonly rekorUrl!: pulumi.Output<string>;

    /**
     * Create a Attest resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AttestArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AttestArgs | AttestState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AttestState | undefined;
            resourceInputs["attestedRef"] = state ? state.attestedRef : undefined;
            resourceInputs["conflict"] = state ? state.conflict : undefined;
            resourceInputs["fulcioUrl"] = state ? state.fulcioUrl : undefined;
            resourceInputs["image"] = state ? state.image : undefined;
            resourceInputs["predicate"] = state ? state.predicate : undefined;
            resourceInputs["predicateFiles"] = state ? state.predicateFiles : undefined;
            resourceInputs["predicateType"] = state ? state.predicateType : undefined;
            resourceInputs["predicates"] = state ? state.predicates : undefined;
            resourceInputs["rekorUrl"] = state ? state.rekorUrl : undefined;
        } else {
            const args = argsOrState as AttestArgs | undefined;
            if ((!args || args.image === undefined) && !opts.urn) {
                throw new Error("Missing required property 'image'");
            }
            resourceInputs["conflict"] = args ? args.conflict : undefined;
            resourceInputs["fulcioUrl"] = args ? args.fulcioUrl : undefined;
            resourceInputs["image"] = args ? args.image : undefined;
            resourceInputs["predicate"] = args ? args.predicate : undefined;
            resourceInputs["predicateFiles"] = args ? args.predicateFiles : undefined;
            resourceInputs["predicateType"] = args ? args.predicateType : undefined;
            resourceInputs["predicates"] = args ? args.predicates : undefined;
            resourceInputs["rekorUrl"] = args ? args.rekorUrl : undefined;
            resourceInputs["attestedRef"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Attest.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Attest resources.
 */
export interface AttestState {
    /**
     * This always matches the input digest, but is a convenience for composition.
     */
    attestedRef?: pulumi.Input<string>;
    /**
     * How to handle conflicting predicate values
     */
    conflict?: pulumi.Input<string>;
    /**
     * Address of sigstore PKI server (default https://fulcio.sigstore.dev).
     */
    fulcioUrl?: pulumi.Input<string>;
    /**
     * The digest of the container image to attest.
     */
    image?: pulumi.Input<string>;
    /**
     * The JSON body of the in-toto predicate's claim.
     *
     * @deprecated Deprecated
     */
    predicate?: pulumi.Input<string>;
    /**
     * The path and sha256 hex of the predicate to attest.
     *
     * @deprecated Deprecated
     */
    predicateFiles?: pulumi.Input<pulumi.Input<inputs.AttestPredicateFile>[]>;
    /**
     * The in-toto predicate type of the claim being attested.
     *
     * @deprecated Deprecated
     */
    predicateType?: pulumi.Input<string>;
    /**
     * The path and sha256 hex of the predicate to attest.
     */
    predicates?: pulumi.Input<pulumi.Input<inputs.AttestPredicate>[]>;
    /**
     * Address of rekor transparency log server (default https://rekor.sigstore.dev).
     */
    rekorUrl?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Attest resource.
 */
export interface AttestArgs {
    /**
     * How to handle conflicting predicate values
     */
    conflict?: pulumi.Input<string>;
    /**
     * Address of sigstore PKI server (default https://fulcio.sigstore.dev).
     */
    fulcioUrl?: pulumi.Input<string>;
    /**
     * The digest of the container image to attest.
     */
    image: pulumi.Input<string>;
    /**
     * The JSON body of the in-toto predicate's claim.
     *
     * @deprecated Deprecated
     */
    predicate?: pulumi.Input<string>;
    /**
     * The path and sha256 hex of the predicate to attest.
     *
     * @deprecated Deprecated
     */
    predicateFiles?: pulumi.Input<pulumi.Input<inputs.AttestPredicateFile>[]>;
    /**
     * The in-toto predicate type of the claim being attested.
     *
     * @deprecated Deprecated
     */
    predicateType?: pulumi.Input<string>;
    /**
     * The path and sha256 hex of the predicate to attest.
     */
    predicates?: pulumi.Input<pulumi.Input<inputs.AttestPredicate>[]>;
    /**
     * Address of rekor transparency log server (default https://rekor.sigstore.dev).
     */
    rekorUrl?: pulumi.Input<string>;
}
