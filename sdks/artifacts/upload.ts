// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Upload extends pulumi.CustomResource {
    /**
     * Get an existing Upload resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UploadState, opts?: pulumi.CustomResourceOptions): Upload {
        return new Upload(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'artifacts:index/upload:Upload';

    /**
     * Returns true if the given object is an instance of Upload.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Upload {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Upload.__pulumiType;
    }

    /**
     * Set to false if the remote file should be orphaned on destruction of the resource or change of upload_path value.
     * Defaults to true.
     */
    public readonly deleteOldPath!: pulumi.Output<boolean | undefined>;
    /**
     * SHA1 of the uploaded file
     */
    public /*out*/ readonly sha1!: pulumi.Output<string>;
    /**
     * Arbitrary map of values that, when changed, will trigger re-uploading of this resource's file.
     */
    public readonly triggers!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * File containing content to upload
     */
    public readonly uploadFile!: pulumi.Output<string>;
    /**
     * Path to upload to, relative to the provider's URL
     */
    public readonly uploadPath!: pulumi.Output<string>;

    /**
     * Create a Upload resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UploadArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UploadArgs | UploadState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UploadState | undefined;
            resourceInputs["deleteOldPath"] = state ? state.deleteOldPath : undefined;
            resourceInputs["sha1"] = state ? state.sha1 : undefined;
            resourceInputs["triggers"] = state ? state.triggers : undefined;
            resourceInputs["uploadFile"] = state ? state.uploadFile : undefined;
            resourceInputs["uploadPath"] = state ? state.uploadPath : undefined;
        } else {
            const args = argsOrState as UploadArgs | undefined;
            if ((!args || args.uploadFile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'uploadFile'");
            }
            if ((!args || args.uploadPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'uploadPath'");
            }
            resourceInputs["deleteOldPath"] = args ? args.deleteOldPath : undefined;
            resourceInputs["triggers"] = args ? args.triggers : undefined;
            resourceInputs["uploadFile"] = args ? args.uploadFile : undefined;
            resourceInputs["uploadPath"] = args ? args.uploadPath : undefined;
            resourceInputs["sha1"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Upload.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Upload resources.
 */
export interface UploadState {
    /**
     * Set to false if the remote file should be orphaned on destruction of the resource or change of upload_path value.
     * Defaults to true.
     */
    deleteOldPath?: pulumi.Input<boolean>;
    /**
     * SHA1 of the uploaded file
     */
    sha1?: pulumi.Input<string>;
    /**
     * Arbitrary map of values that, when changed, will trigger re-uploading of this resource's file.
     */
    triggers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * File containing content to upload
     */
    uploadFile?: pulumi.Input<string>;
    /**
     * Path to upload to, relative to the provider's URL
     */
    uploadPath?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Upload resource.
 */
export interface UploadArgs {
    /**
     * Set to false if the remote file should be orphaned on destruction of the resource or change of upload_path value.
     * Defaults to true.
     */
    deleteOldPath?: pulumi.Input<boolean>;
    /**
     * Arbitrary map of values that, when changed, will trigger re-uploading of this resource's file.
     */
    triggers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * File containing content to upload
     */
    uploadFile: pulumi.Input<string>;
    /**
     * Path to upload to, relative to the provider's URL
     */
    uploadPath: pulumi.Input<string>;
}
