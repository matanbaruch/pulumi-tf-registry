// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CmAs3Deploy extends pulumi.CustomResource {
    /**
     * Get an existing CmAs3Deploy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CmAs3DeployState, opts?: pulumi.CustomResourceOptions): CmAs3Deploy {
        return new CmAs3Deploy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bigipnext:index/cmAs3Deploy:CmAs3Deploy';

    /**
     * Returns true if the given object is an instance of CmAs3Deploy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CmAs3Deploy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CmAs3Deploy.__pulumiType;
    }

    /**
     * AS3 Json Declaration to be post onto BIG-IP Next
     */
    public readonly as3Json!: pulumi.Output<string>;
    /**
     * Deploy ID of the AS3 declaration on BIG-IP CM Next
     */
    public /*out*/ readonly deployId!: pulumi.Output<string>;
    /**
     * Draft ID of the AS3 declaration on BIG-IP CM Next
     */
    public /*out*/ readonly draftId!: pulumi.Output<string>;
    /**
     * Target Address of the Device Inventory on BIG-IP Next CM.
     */
    public readonly targetAddress!: pulumi.Output<string>;
    /**
     * The number of seconds to wait for instance deployment to finish.
     */
    public readonly timeout!: pulumi.Output<number>;

    /**
     * Create a CmAs3Deploy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CmAs3DeployArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CmAs3DeployArgs | CmAs3DeployState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CmAs3DeployState | undefined;
            resourceInputs["as3Json"] = state ? state.as3Json : undefined;
            resourceInputs["deployId"] = state ? state.deployId : undefined;
            resourceInputs["draftId"] = state ? state.draftId : undefined;
            resourceInputs["targetAddress"] = state ? state.targetAddress : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
        } else {
            const args = argsOrState as CmAs3DeployArgs | undefined;
            if ((!args || args.as3Json === undefined) && !opts.urn) {
                throw new Error("Missing required property 'as3Json'");
            }
            if ((!args || args.targetAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetAddress'");
            }
            resourceInputs["as3Json"] = args ? args.as3Json : undefined;
            resourceInputs["targetAddress"] = args ? args.targetAddress : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["deployId"] = undefined /*out*/;
            resourceInputs["draftId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CmAs3Deploy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CmAs3Deploy resources.
 */
export interface CmAs3DeployState {
    /**
     * AS3 Json Declaration to be post onto BIG-IP Next
     */
    as3Json?: pulumi.Input<string>;
    /**
     * Deploy ID of the AS3 declaration on BIG-IP CM Next
     */
    deployId?: pulumi.Input<string>;
    /**
     * Draft ID of the AS3 declaration on BIG-IP CM Next
     */
    draftId?: pulumi.Input<string>;
    /**
     * Target Address of the Device Inventory on BIG-IP Next CM.
     */
    targetAddress?: pulumi.Input<string>;
    /**
     * The number of seconds to wait for instance deployment to finish.
     */
    timeout?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a CmAs3Deploy resource.
 */
export interface CmAs3DeployArgs {
    /**
     * AS3 Json Declaration to be post onto BIG-IP Next
     */
    as3Json: pulumi.Input<string>;
    /**
     * Target Address of the Device Inventory on BIG-IP Next CM.
     */
    targetAddress: pulumi.Input<string>;
    /**
     * The number of seconds to wait for instance deployment to finish.
     */
    timeout?: pulumi.Input<number>;
}
