// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface CmActivateInstanceLicenseInstance {
    /**
     * IP Address of the instance to activate the license
     */
    instanceAddress: string;
    /**
     * JWT ID to be used to activate the license
     */
    jwtId: string;
}

export interface CmBootstrapExternalStorage {
    /**
     * Folder name created on the external storage server to store Central Manager data
     */
    cmStorageDir?: string;
    /**
     * Password to access the external storage, required if storage type is SAMBA
     */
    password?: string;
    /**
     * IP Address of the external storage
     */
    storageAddress: string;
    /**
     * Directory path that is mounted on the external storage server
     */
    storagePath: string;
    /**
     * Type of external storage. Supported values are NFS and SAMBA
     */
    storageType: string;
    /**
     * Username to access the external storage, required if storage type is SAMBA
     */
    username?: string;
}

export interface CmDeployF5osF5osProvider {
    /**
     * Name of F5OS provider to be used for deploying Instances
     */
    providerName: string;
    /**
     * The Type of F5OS provider(rseries/velos)
     */
    providerType: string;
}

export interface CmDeployF5osInstance {
    /**
     * The number of virtual processor cores to configure on the BIG-IP-Next Instance.Default is `4`.
     */
    cpuCores: number;
    /**
     * The amount of disk size in GigBytes to configure on the BIG-IP-Next Instance.Default is `30`.
     */
    diskSize: number;
    /**
     * Name of BIG-IP-Next Instance to be Deployed on F5OS(velos/rSeries),it should be `unique` string value
     */
    instanceHostname: string;
    /**
     * Management address to be used for deployed BIG-IP Next instance in F5OS Provider
     */
    managementAddress: string;
    /**
     * Management gateway address to be used for deployed BIG-IP Next instance in F5OS Provider
     */
    managementGateway: string;
    /**
     * Management password of deployed BIG-IP Next instance in F5OS Provider
     */
    managementPassword: string;
    /**
     * Management address prefix to be used for deployed BIG-IP Next instance in F5OS Provider.
     */
    managementPrefix: number;
    /**
     * Management username of deployed BIG-IP Next instance in F5OS Provider
     */
    managementUser: string;
    /**
     * Specifies on which list blades nodes the tenants are deployed.
     * Required for create operations.
     * For single blade platforms like rSeries only the value of 1 should be provided.
     */
    slotIds: number[];
    /**
     * Name of the tenant deployment file to be used to deploy instance in F5OS Provider
     */
    tenantDeploymentFile: string;
    /**
     * Name of tenant image to be used to deployinstance in F5OS Provider
     */
    tenantImageName: string;
    /**
     * List of vlan ids to be assigned to BIG-IP Next Instance deployed
     */
    vlanIds: number[];
}

export interface CmDeployVmwareInstance {
    /**
     * The number of virtual processor cores to configure on the VM.Default is `8`
     */
    cpu: number;
    /**
     * Name of the vSphere network to use as the BIG-IP Next external network
     */
    externalNetworkName: string;
    /**
     * Name of the vSphere network to use as the BIG-IP Next HA Control plane network
     */
    haControlPlaneNetworkName?: string;
    /**
     * Name of the vSphere network to use as the BIG-IP Next HA data plane network
     */
    haDataPlaneNetworkName?: string;
    /**
     * Name of VM Deployed on vSphere,it should be `unique` string value
     */
    instanceHostname: string;
    /**
     * Name of the vSphere network to use as the BIG-IP Next internal network
     */
    internalNetworkName?: string;
    /**
     * The amount of memory in MB to configure on the VM.Default is `16384`.
     */
    memory: number;
    /**
     * Management address to be used for deployed BIG-IP Next Instance in vsphere
     */
    mgmtAddress: string;
    /**
     * Management gateway address to be used for deployed BIG-IP Next instance in vsphere
     */
    mgmtGateway: string;
    /**
     * The management network name to be used for deployed BIG-IP Next Instance in vSphere
     */
    mgmtNetworkName: string;
    /**
     * Management password of deployed BIG-IP Next instance in vpshere
     */
    mgmtPassword: string;
    /**
     * Management address prefix to be used for deployed BIG-IP Next instance in vsphere.
     */
    mgmtPrefix: number;
    /**
     * Management username of deployed BIG-IP Next instance in vpshere
     */
    mgmtUser: string;
}

export interface CmDeployVmwareL1Network {
    /**
     * Name of l1Newwork to assign to deployed instance
     */
    name: string;
    /**
     * List of vlans to be mapped for l1Network,each vlan is a block of attributes like vlan_name,vlan_tag,self_ips
     */
    vlans: outputs.CmDeployVmwareL1NetworkVlan[];
}

export interface CmDeployVmwareL1NetworkVlan {
    /**
     * List of self ips to be mapped for l1Network
     */
    selfIps: string[];
    /**
     * Name of vlan to be mapped for l1Network
     */
    vlanName: string;
    /**
     * Vlan tag to be mapped for l1Network.
     */
    vlanTag: number;
}

export interface CmDeployVmwareVsphereProvider {
    /**
     * The vSphere cluster to create the VMs
     */
    clusterName: string;
    /**
     * The vSphere Content Library from where `vm_template_name` can be used to create the VMs
     */
    contentLibrary: string;
    /**
     * The vSphere datacenter to create the VMs
     */
    datacenterName: string;
    /**
     * The vSphere datastore to create the VMs
     */
    datastoreName: string;
    /**
     * Name of provider to be used for deploying VMs
     */
    providerName: string;
    /**
     * The vSphere resource pool to create the VMs
     */
    resourcePoolName: string;
    /**
     * The vSphere VM template name to create the VMs
     */
    vmTemplateName: string;
}

export interface CmGlobalResiliencyInstance {
    /**
     * Address of the Bip-IP Next. A valid IP Address is required
     */
    address: string;
    /**
     * DNS Listener Address. A valid IP Address is required
     */
    dnsListenerAddress: string;
    /**
     * GR Group Sunc IP. A valid IP Address with mask is required
     */
    groupSyncAddress: string;
    /**
     * Hostname of the Instance to be added
     */
    hostname: string;
}

export interface CmHaClusterNode {
    /**
     * The fingerprint of the node in the SHA256 format
     */
    fingerprint?: string;
    /**
     * IP address of the node that will be added to the cluster
     */
    nodeIp: string;
    /**
     * The password of the node
     */
    password: string;
    /**
     * The username of the node
     */
    username: string;
}

export interface CmWafPolicyBlockingSettings {
    enabled: boolean;
}

export interface CmWafPolicyBotDefense {
    enabled: boolean;
}

export interface CmWafPolicyDosProtection {
    enabled: boolean;
}

export interface CmWafPolicyIpIntelligence {
    enabled: boolean;
}

export interface CmWafReportCategory {
    /**
     * Specifies the name of the Categories.
     */
    name?: string;
}

export interface CmWafReportScope {
    /**
     * Specifies whether All policies/applications are to be taken or selected ones. 'names' must not be empty if 'all' is set to false.
     */
    all: boolean;
    /**
     * Entity value can be policies or applications
     */
    entity: string;
    /**
     * Specifies the names of the scoped entities.
     */
    names?: string[];
}

