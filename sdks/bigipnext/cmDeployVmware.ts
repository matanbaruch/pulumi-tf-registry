// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CmDeployVmware extends pulumi.CustomResource {
    /**
     * Get an existing CmDeployVmware resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CmDeployVmwareState, opts?: pulumi.CustomResourceOptions): CmDeployVmware {
        return new CmDeployVmware(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bigipnext:index/cmDeployVmware:CmDeployVmware';

    /**
     * Returns true if the given object is an instance of CmDeployVmware.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CmDeployVmware {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CmDeployVmware.__pulumiType;
    }

    /**
     * List of DNS servers to assign to each deployed instance
     */
    public readonly dnsServers!: pulumi.Output<string[] | undefined>;
    public readonly instance!: pulumi.Output<outputs.CmDeployVmwareInstance>;
    /**
     * List of l1networks to assign to deployed instance, each l1network is a block of attributes like name, vlans
     */
    public readonly l1Networks!: pulumi.Output<outputs.CmDeployVmwareL1Network[] | undefined>;
    /**
     * List of NTP servers to assign to each deployed instance
     */
    public readonly ntpServers!: pulumi.Output<string[] | undefined>;
    /**
     * Unique Identifier for the vpshere provider
     */
    public /*out*/ readonly providerId!: pulumi.Output<string>;
    /**
     * The number of seconds to wait for instance deployment to finish.
     */
    public readonly timeout!: pulumi.Output<number>;
    public readonly vsphereProvider!: pulumi.Output<outputs.CmDeployVmwareVsphereProvider>;

    /**
     * Create a CmDeployVmware resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CmDeployVmwareArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CmDeployVmwareArgs | CmDeployVmwareState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CmDeployVmwareState | undefined;
            resourceInputs["dnsServers"] = state ? state.dnsServers : undefined;
            resourceInputs["instance"] = state ? state.instance : undefined;
            resourceInputs["l1Networks"] = state ? state.l1Networks : undefined;
            resourceInputs["ntpServers"] = state ? state.ntpServers : undefined;
            resourceInputs["providerId"] = state ? state.providerId : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["vsphereProvider"] = state ? state.vsphereProvider : undefined;
        } else {
            const args = argsOrState as CmDeployVmwareArgs | undefined;
            if ((!args || args.instance === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instance'");
            }
            if ((!args || args.vsphereProvider === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vsphereProvider'");
            }
            resourceInputs["dnsServers"] = args ? args.dnsServers : undefined;
            resourceInputs["instance"] = args ? args.instance : undefined;
            resourceInputs["l1Networks"] = args ? args.l1Networks : undefined;
            resourceInputs["ntpServers"] = args ? args.ntpServers : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["vsphereProvider"] = args ? args.vsphereProvider : undefined;
            resourceInputs["providerId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CmDeployVmware.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CmDeployVmware resources.
 */
export interface CmDeployVmwareState {
    /**
     * List of DNS servers to assign to each deployed instance
     */
    dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    instance?: pulumi.Input<inputs.CmDeployVmwareInstance>;
    /**
     * List of l1networks to assign to deployed instance, each l1network is a block of attributes like name, vlans
     */
    l1Networks?: pulumi.Input<pulumi.Input<inputs.CmDeployVmwareL1Network>[]>;
    /**
     * List of NTP servers to assign to each deployed instance
     */
    ntpServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unique Identifier for the vpshere provider
     */
    providerId?: pulumi.Input<string>;
    /**
     * The number of seconds to wait for instance deployment to finish.
     */
    timeout?: pulumi.Input<number>;
    vsphereProvider?: pulumi.Input<inputs.CmDeployVmwareVsphereProvider>;
}

/**
 * The set of arguments for constructing a CmDeployVmware resource.
 */
export interface CmDeployVmwareArgs {
    /**
     * List of DNS servers to assign to each deployed instance
     */
    dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    instance: pulumi.Input<inputs.CmDeployVmwareInstance>;
    /**
     * List of l1networks to assign to deployed instance, each l1network is a block of attributes like name, vlans
     */
    l1Networks?: pulumi.Input<pulumi.Input<inputs.CmDeployVmwareL1Network>[]>;
    /**
     * List of NTP servers to assign to each deployed instance
     */
    ntpServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The number of seconds to wait for instance deployment to finish.
     */
    timeout?: pulumi.Input<number>;
    vsphereProvider: pulumi.Input<inputs.CmDeployVmwareVsphereProvider>;
}
