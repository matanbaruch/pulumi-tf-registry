// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CmImportCertitficate extends pulumi.CustomResource {
    /**
     * Get an existing CmImportCertitficate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CmImportCertitficateState, opts?: pulumi.CustomResourceOptions): CmImportCertitficate {
        return new CmImportCertitficate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bigipnext:index/cmImportCertitficate:CmImportCertitficate';

    /**
     * Returns true if the given object is an instance of CmImportCertitficate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CmImportCertitficate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CmImportCertitficate.__pulumiType;
    }

    /**
     * cert passphrase, A passphrase is a word or phrase that protects files
     */
    public readonly certPassphrase!: pulumi.Output<string | undefined>;
    /**
     * cert content
     */
    public readonly certText!: pulumi.Output<string | undefined>;
    /**
     * Import Type, Value can be `PKCS12`
     */
    public readonly importType!: pulumi.Output<string | undefined>;
    /**
     * key passphrase, A passphrase is a word or phrase that protects private key files, It prevents unauthorized users from
     * encrypting them. Usually it's just the secret encryption/decryption key used for Ciphers.
     */
    public readonly keyPassphrase!: pulumi.Output<string | undefined>;
    /**
     * key content
     */
    public readonly keyText!: pulumi.Output<string | undefined>;
    /**
     * The unique user-given name of the certificate. Certificate names cannot contain spaces or special characters. The
     * allowed characters are a-z, A-Z, 0-9, dot(.), dash (-) and underscore (_). Names starting with only a-z, A-Z.
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a CmImportCertitficate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CmImportCertitficateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CmImportCertitficateArgs | CmImportCertitficateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CmImportCertitficateState | undefined;
            resourceInputs["certPassphrase"] = state ? state.certPassphrase : undefined;
            resourceInputs["certText"] = state ? state.certText : undefined;
            resourceInputs["importType"] = state ? state.importType : undefined;
            resourceInputs["keyPassphrase"] = state ? state.keyPassphrase : undefined;
            resourceInputs["keyText"] = state ? state.keyText : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as CmImportCertitficateArgs | undefined;
            resourceInputs["certPassphrase"] = args ? args.certPassphrase : undefined;
            resourceInputs["certText"] = args ? args.certText : undefined;
            resourceInputs["importType"] = args ? args.importType : undefined;
            resourceInputs["keyPassphrase"] = args ? args.keyPassphrase : undefined;
            resourceInputs["keyText"] = args ? args.keyText : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CmImportCertitficate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CmImportCertitficate resources.
 */
export interface CmImportCertitficateState {
    /**
     * cert passphrase, A passphrase is a word or phrase that protects files
     */
    certPassphrase?: pulumi.Input<string>;
    /**
     * cert content
     */
    certText?: pulumi.Input<string>;
    /**
     * Import Type, Value can be `PKCS12`
     */
    importType?: pulumi.Input<string>;
    /**
     * key passphrase, A passphrase is a word or phrase that protects private key files, It prevents unauthorized users from
     * encrypting them. Usually it's just the secret encryption/decryption key used for Ciphers.
     */
    keyPassphrase?: pulumi.Input<string>;
    /**
     * key content
     */
    keyText?: pulumi.Input<string>;
    /**
     * The unique user-given name of the certificate. Certificate names cannot contain spaces or special characters. The
     * allowed characters are a-z, A-Z, 0-9, dot(.), dash (-) and underscore (_). Names starting with only a-z, A-Z.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CmImportCertitficate resource.
 */
export interface CmImportCertitficateArgs {
    /**
     * cert passphrase, A passphrase is a word or phrase that protects files
     */
    certPassphrase?: pulumi.Input<string>;
    /**
     * cert content
     */
    certText?: pulumi.Input<string>;
    /**
     * Import Type, Value can be `PKCS12`
     */
    importType?: pulumi.Input<string>;
    /**
     * key passphrase, A passphrase is a word or phrase that protects private key files, It prevents unauthorized users from
     * encrypting them. Usually it's just the secret encryption/decryption key used for Ciphers.
     */
    keyPassphrase?: pulumi.Input<string>;
    /**
     * key content
     */
    keyText?: pulumi.Input<string>;
    /**
     * The unique user-given name of the certificate. Certificate names cannot contain spaces or special characters. The
     * allowed characters are a-z, A-Z, 0-9, dot(.), dash (-) and underscore (_). Names starting with only a-z, A-Z.
     */
    name?: pulumi.Input<string>;
}
