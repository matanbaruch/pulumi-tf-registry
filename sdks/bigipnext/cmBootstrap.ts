// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CmBootstrap extends pulumi.CustomResource {
    /**
     * Get an existing CmBootstrap resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CmBootstrapState, opts?: pulumi.CustomResourceOptions): CmBootstrap {
        return new CmBootstrap(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bigipnext:index/cmBootstrap:CmBootstrap';

    /**
     * Returns true if the given object is an instance of CmBootstrap.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CmBootstrap {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CmBootstrap.__pulumiType;
    }

    /**
     * Status of the bootstrap operation
     */
    public /*out*/ readonly bootstrapStatus!: pulumi.Output<string>;
    /**
     * Timeout for the bootstrap operation
     */
    public readonly bootstrapTimeout!: pulumi.Output<number | undefined>;
    /**
     * External storage configuration
     */
    public readonly externalStorage!: pulumi.Output<outputs.CmBootstrapExternalStorage | undefined>;
    /**
     * Run setup on Central Manager
     */
    public readonly runSetup!: pulumi.Output<boolean>;

    /**
     * Create a CmBootstrap resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CmBootstrapArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CmBootstrapArgs | CmBootstrapState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CmBootstrapState | undefined;
            resourceInputs["bootstrapStatus"] = state ? state.bootstrapStatus : undefined;
            resourceInputs["bootstrapTimeout"] = state ? state.bootstrapTimeout : undefined;
            resourceInputs["externalStorage"] = state ? state.externalStorage : undefined;
            resourceInputs["runSetup"] = state ? state.runSetup : undefined;
        } else {
            const args = argsOrState as CmBootstrapArgs | undefined;
            if ((!args || args.runSetup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'runSetup'");
            }
            resourceInputs["bootstrapTimeout"] = args ? args.bootstrapTimeout : undefined;
            resourceInputs["externalStorage"] = args ? args.externalStorage : undefined;
            resourceInputs["runSetup"] = args ? args.runSetup : undefined;
            resourceInputs["bootstrapStatus"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CmBootstrap.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CmBootstrap resources.
 */
export interface CmBootstrapState {
    /**
     * Status of the bootstrap operation
     */
    bootstrapStatus?: pulumi.Input<string>;
    /**
     * Timeout for the bootstrap operation
     */
    bootstrapTimeout?: pulumi.Input<number>;
    /**
     * External storage configuration
     */
    externalStorage?: pulumi.Input<inputs.CmBootstrapExternalStorage>;
    /**
     * Run setup on Central Manager
     */
    runSetup?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a CmBootstrap resource.
 */
export interface CmBootstrapArgs {
    /**
     * Timeout for the bootstrap operation
     */
    bootstrapTimeout?: pulumi.Input<number>;
    /**
     * External storage configuration
     */
    externalStorage?: pulumi.Input<inputs.CmBootstrapExternalStorage>;
    /**
     * Run setup on Central Manager
     */
    runSetup: pulumi.Input<boolean>;
}
