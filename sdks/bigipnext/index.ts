// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { CmActivateInstanceLicenseArgs, CmActivateInstanceLicenseState } from "./cmActivateInstanceLicense";
export type CmActivateInstanceLicense = import("./cmActivateInstanceLicense").CmActivateInstanceLicense;
export const CmActivateInstanceLicense: typeof import("./cmActivateInstanceLicense").CmActivateInstanceLicense = null as any;
utilities.lazyLoad(exports, ["CmActivateInstanceLicense"], () => require("./cmActivateInstanceLicense"));

export { CmAddJwtTokenArgs, CmAddJwtTokenState } from "./cmAddJwtToken";
export type CmAddJwtToken = import("./cmAddJwtToken").CmAddJwtToken;
export const CmAddJwtToken: typeof import("./cmAddJwtToken").CmAddJwtToken = null as any;
utilities.lazyLoad(exports, ["CmAddJwtToken"], () => require("./cmAddJwtToken"));

export { CmAs3DeployArgs, CmAs3DeployState } from "./cmAs3Deploy";
export type CmAs3Deploy = import("./cmAs3Deploy").CmAs3Deploy;
export const CmAs3Deploy: typeof import("./cmAs3Deploy").CmAs3Deploy = null as any;
utilities.lazyLoad(exports, ["CmAs3Deploy"], () => require("./cmAs3Deploy"));

export { CmBackupRestoreArgs, CmBackupRestoreState } from "./cmBackupRestore";
export type CmBackupRestore = import("./cmBackupRestore").CmBackupRestore;
export const CmBackupRestore: typeof import("./cmBackupRestore").CmBackupRestore = null as any;
utilities.lazyLoad(exports, ["CmBackupRestore"], () => require("./cmBackupRestore"));

export { CmBootstrapArgs, CmBootstrapState } from "./cmBootstrap";
export type CmBootstrap = import("./cmBootstrap").CmBootstrap;
export const CmBootstrap: typeof import("./cmBootstrap").CmBootstrap = null as any;
utilities.lazyLoad(exports, ["CmBootstrap"], () => require("./cmBootstrap"));

export { CmCertificateArgs, CmCertificateState } from "./cmCertificate";
export type CmCertificate = import("./cmCertificate").CmCertificate;
export const CmCertificate: typeof import("./cmCertificate").CmCertificate = null as any;
utilities.lazyLoad(exports, ["CmCertificate"], () => require("./cmCertificate"));

export { CmDeployF5osArgs, CmDeployF5osState } from "./cmDeployF5os";
export type CmDeployF5os = import("./cmDeployF5os").CmDeployF5os;
export const CmDeployF5os: typeof import("./cmDeployF5os").CmDeployF5os = null as any;
utilities.lazyLoad(exports, ["CmDeployF5os"], () => require("./cmDeployF5os"));

export { CmDeployVmwareArgs, CmDeployVmwareState } from "./cmDeployVmware";
export type CmDeployVmware = import("./cmDeployVmware").CmDeployVmware;
export const CmDeployVmware: typeof import("./cmDeployVmware").CmDeployVmware = null as any;
utilities.lazyLoad(exports, ["CmDeployVmware"], () => require("./cmDeployVmware"));

export { CmDiscoverNextArgs, CmDiscoverNextState } from "./cmDiscoverNext";
export type CmDiscoverNext = import("./cmDiscoverNext").CmDiscoverNext;
export const CmDiscoverNext: typeof import("./cmDiscoverNext").CmDiscoverNext = null as any;
utilities.lazyLoad(exports, ["CmDiscoverNext"], () => require("./cmDiscoverNext"));

export { CmGlobalResiliencyArgs, CmGlobalResiliencyState } from "./cmGlobalResiliency";
export type CmGlobalResiliency = import("./cmGlobalResiliency").CmGlobalResiliency;
export const CmGlobalResiliency: typeof import("./cmGlobalResiliency").CmGlobalResiliency = null as any;
utilities.lazyLoad(exports, ["CmGlobalResiliency"], () => require("./cmGlobalResiliency"));

export { CmHaClusterArgs, CmHaClusterState } from "./cmHaCluster";
export type CmHaCluster = import("./cmHaCluster").CmHaCluster;
export const CmHaCluster: typeof import("./cmHaCluster").CmHaCluster = null as any;
utilities.lazyLoad(exports, ["CmHaCluster"], () => require("./cmHaCluster"));

export { CmImportCertitficateArgs, CmImportCertitficateState } from "./cmImportCertitficate";
export type CmImportCertitficate = import("./cmImportCertitficate").CmImportCertitficate;
export const CmImportCertitficate: typeof import("./cmImportCertitficate").CmImportCertitficate = null as any;
utilities.lazyLoad(exports, ["CmImportCertitficate"], () => require("./cmImportCertitficate"));

export { CmNextHaArgs, CmNextHaState } from "./cmNextHa";
export type CmNextHa = import("./cmNextHa").CmNextHa;
export const CmNextHa: typeof import("./cmNextHa").CmNextHa = null as any;
utilities.lazyLoad(exports, ["CmNextHa"], () => require("./cmNextHa"));

export { CmProviderArgs, CmProviderState } from "./cmProvider";
export type CmProvider = import("./cmProvider").CmProvider;
export const CmProvider: typeof import("./cmProvider").CmProvider = null as any;
utilities.lazyLoad(exports, ["CmProvider"], () => require("./cmProvider"));

export { CmWafPolicyArgs, CmWafPolicyState } from "./cmWafPolicy";
export type CmWafPolicy = import("./cmWafPolicy").CmWafPolicy;
export const CmWafPolicy: typeof import("./cmWafPolicy").CmWafPolicy = null as any;
utilities.lazyLoad(exports, ["CmWafPolicy"], () => require("./cmWafPolicy"));

export { CmWafPolicyImportArgs, CmWafPolicyImportState } from "./cmWafPolicyImport";
export type CmWafPolicyImport = import("./cmWafPolicyImport").CmWafPolicyImport;
export const CmWafPolicyImport: typeof import("./cmWafPolicyImport").CmWafPolicyImport = null as any;
utilities.lazyLoad(exports, ["CmWafPolicyImport"], () => require("./cmWafPolicyImport"));

export { CmWafReportArgs, CmWafReportState } from "./cmWafReport";
export type CmWafReport = import("./cmWafReport").CmWafReport;
export const CmWafReport: typeof import("./cmWafReport").CmWafReport = null as any;
utilities.lazyLoad(exports, ["CmWafReport"], () => require("./cmWafReport"));

export { GetCmDeviceInventoryResult } from "./getCmDeviceInventory";
export const getCmDeviceInventory: typeof import("./getCmDeviceInventory").getCmDeviceInventory = null as any;
export const getCmDeviceInventoryOutput: typeof import("./getCmDeviceInventory").getCmDeviceInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getCmDeviceInventory","getCmDeviceInventoryOutput"], () => require("./getCmDeviceInventory"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "bigipnext:index/cmActivateInstanceLicense:CmActivateInstanceLicense":
                return new CmActivateInstanceLicense(name, <any>undefined, { urn })
            case "bigipnext:index/cmAddJwtToken:CmAddJwtToken":
                return new CmAddJwtToken(name, <any>undefined, { urn })
            case "bigipnext:index/cmAs3Deploy:CmAs3Deploy":
                return new CmAs3Deploy(name, <any>undefined, { urn })
            case "bigipnext:index/cmBackupRestore:CmBackupRestore":
                return new CmBackupRestore(name, <any>undefined, { urn })
            case "bigipnext:index/cmBootstrap:CmBootstrap":
                return new CmBootstrap(name, <any>undefined, { urn })
            case "bigipnext:index/cmCertificate:CmCertificate":
                return new CmCertificate(name, <any>undefined, { urn })
            case "bigipnext:index/cmDeployF5os:CmDeployF5os":
                return new CmDeployF5os(name, <any>undefined, { urn })
            case "bigipnext:index/cmDeployVmware:CmDeployVmware":
                return new CmDeployVmware(name, <any>undefined, { urn })
            case "bigipnext:index/cmDiscoverNext:CmDiscoverNext":
                return new CmDiscoverNext(name, <any>undefined, { urn })
            case "bigipnext:index/cmGlobalResiliency:CmGlobalResiliency":
                return new CmGlobalResiliency(name, <any>undefined, { urn })
            case "bigipnext:index/cmHaCluster:CmHaCluster":
                return new CmHaCluster(name, <any>undefined, { urn })
            case "bigipnext:index/cmImportCertitficate:CmImportCertitficate":
                return new CmImportCertitficate(name, <any>undefined, { urn })
            case "bigipnext:index/cmNextHa:CmNextHa":
                return new CmNextHa(name, <any>undefined, { urn })
            case "bigipnext:index/cmProvider:CmProvider":
                return new CmProvider(name, <any>undefined, { urn })
            case "bigipnext:index/cmWafPolicy:CmWafPolicy":
                return new CmWafPolicy(name, <any>undefined, { urn })
            case "bigipnext:index/cmWafPolicyImport:CmWafPolicyImport":
                return new CmWafPolicyImport(name, <any>undefined, { urn })
            case "bigipnext:index/cmWafReport:CmWafReport":
                return new CmWafReport(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("bigipnext", "index/cmActivateInstanceLicense", _module)
pulumi.runtime.registerResourceModule("bigipnext", "index/cmAddJwtToken", _module)
pulumi.runtime.registerResourceModule("bigipnext", "index/cmAs3Deploy", _module)
pulumi.runtime.registerResourceModule("bigipnext", "index/cmBackupRestore", _module)
pulumi.runtime.registerResourceModule("bigipnext", "index/cmBootstrap", _module)
pulumi.runtime.registerResourceModule("bigipnext", "index/cmCertificate", _module)
pulumi.runtime.registerResourceModule("bigipnext", "index/cmDeployF5os", _module)
pulumi.runtime.registerResourceModule("bigipnext", "index/cmDeployVmware", _module)
pulumi.runtime.registerResourceModule("bigipnext", "index/cmDiscoverNext", _module)
pulumi.runtime.registerResourceModule("bigipnext", "index/cmGlobalResiliency", _module)
pulumi.runtime.registerResourceModule("bigipnext", "index/cmHaCluster", _module)
pulumi.runtime.registerResourceModule("bigipnext", "index/cmImportCertitficate", _module)
pulumi.runtime.registerResourceModule("bigipnext", "index/cmNextHa", _module)
pulumi.runtime.registerResourceModule("bigipnext", "index/cmProvider", _module)
pulumi.runtime.registerResourceModule("bigipnext", "index/cmWafPolicy", _module)
pulumi.runtime.registerResourceModule("bigipnext", "index/cmWafPolicyImport", _module)
pulumi.runtime.registerResourceModule("bigipnext", "index/cmWafReport", _module)
pulumi.runtime.registerResourcePackage("bigipnext", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:bigipnext") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
