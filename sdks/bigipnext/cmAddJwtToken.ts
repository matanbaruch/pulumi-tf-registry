// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CmAddJwtToken extends pulumi.CustomResource {
    /**
     * Get an existing CmAddJwtToken resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CmAddJwtTokenState, opts?: pulumi.CustomResourceOptions): CmAddJwtToken {
        return new CmAddJwtToken(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bigipnext:index/cmAddJwtToken:CmAddJwtToken';

    /**
     * Returns true if the given object is an instance of CmAddJwtToken.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CmAddJwtToken {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CmAddJwtToken.__pulumiType;
    }

    /**
     * JWT token to be added on Central Manager
     */
    public readonly jwtToken!: pulumi.Output<string>;
    /**
     * JWT token to be added on Central Manager
     */
    public /*out*/ readonly orderType!: pulumi.Output<string>;
    /**
     * JWT token to be added on Central Manager
     */
    public /*out*/ readonly subscriptionExpiry!: pulumi.Output<string>;
    /**
     * Nickname to be used to add the JWT token on Central Manager
     */
    public readonly tokenName!: pulumi.Output<string>;

    /**
     * Create a CmAddJwtToken resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CmAddJwtTokenArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CmAddJwtTokenArgs | CmAddJwtTokenState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CmAddJwtTokenState | undefined;
            resourceInputs["jwtToken"] = state ? state.jwtToken : undefined;
            resourceInputs["orderType"] = state ? state.orderType : undefined;
            resourceInputs["subscriptionExpiry"] = state ? state.subscriptionExpiry : undefined;
            resourceInputs["tokenName"] = state ? state.tokenName : undefined;
        } else {
            const args = argsOrState as CmAddJwtTokenArgs | undefined;
            if ((!args || args.jwtToken === undefined) && !opts.urn) {
                throw new Error("Missing required property 'jwtToken'");
            }
            if ((!args || args.tokenName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tokenName'");
            }
            resourceInputs["jwtToken"] = args?.jwtToken ? pulumi.secret(args.jwtToken) : undefined;
            resourceInputs["tokenName"] = args ? args.tokenName : undefined;
            resourceInputs["orderType"] = undefined /*out*/;
            resourceInputs["subscriptionExpiry"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["jwtToken"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(CmAddJwtToken.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CmAddJwtToken resources.
 */
export interface CmAddJwtTokenState {
    /**
     * JWT token to be added on Central Manager
     */
    jwtToken?: pulumi.Input<string>;
    /**
     * JWT token to be added on Central Manager
     */
    orderType?: pulumi.Input<string>;
    /**
     * JWT token to be added on Central Manager
     */
    subscriptionExpiry?: pulumi.Input<string>;
    /**
     * Nickname to be used to add the JWT token on Central Manager
     */
    tokenName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CmAddJwtToken resource.
 */
export interface CmAddJwtTokenArgs {
    /**
     * JWT token to be added on Central Manager
     */
    jwtToken: pulumi.Input<string>;
    /**
     * Nickname to be used to add the JWT token on Central Manager
     */
    tokenName: pulumi.Input<string>;
}
