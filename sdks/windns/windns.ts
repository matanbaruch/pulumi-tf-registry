// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Windns extends pulumi.CustomResource {
    /**
     * Get an existing Windns resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WindnsState, opts?: pulumi.CustomResourceOptions): Windns {
        return new Windns(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'windns:index/windns:Windns';

    /**
     * Returns true if the given object is an instance of Windns.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Windns {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Windns.__pulumiType;
    }

    public readonly hostnamealias!: pulumi.Output<string | undefined>;
    public readonly ipv4address!: pulumi.Output<string | undefined>;
    public readonly ptrdomainname!: pulumi.Output<string | undefined>;
    public readonly recordName!: pulumi.Output<string>;
    public readonly recordType!: pulumi.Output<string>;
    public readonly zoneName!: pulumi.Output<string>;

    /**
     * Create a Windns resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WindnsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WindnsArgs | WindnsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WindnsState | undefined;
            resourceInputs["hostnamealias"] = state ? state.hostnamealias : undefined;
            resourceInputs["ipv4address"] = state ? state.ipv4address : undefined;
            resourceInputs["ptrdomainname"] = state ? state.ptrdomainname : undefined;
            resourceInputs["recordName"] = state ? state.recordName : undefined;
            resourceInputs["recordType"] = state ? state.recordType : undefined;
            resourceInputs["zoneName"] = state ? state.zoneName : undefined;
        } else {
            const args = argsOrState as WindnsArgs | undefined;
            if ((!args || args.recordName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recordName'");
            }
            if ((!args || args.recordType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recordType'");
            }
            if ((!args || args.zoneName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneName'");
            }
            resourceInputs["hostnamealias"] = args ? args.hostnamealias : undefined;
            resourceInputs["ipv4address"] = args ? args.ipv4address : undefined;
            resourceInputs["ptrdomainname"] = args ? args.ptrdomainname : undefined;
            resourceInputs["recordName"] = args ? args.recordName : undefined;
            resourceInputs["recordType"] = args ? args.recordType : undefined;
            resourceInputs["zoneName"] = args ? args.zoneName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Windns.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Windns resources.
 */
export interface WindnsState {
    hostnamealias?: pulumi.Input<string>;
    ipv4address?: pulumi.Input<string>;
    ptrdomainname?: pulumi.Input<string>;
    recordName?: pulumi.Input<string>;
    recordType?: pulumi.Input<string>;
    zoneName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Windns resource.
 */
export interface WindnsArgs {
    hostnamealias?: pulumi.Input<string>;
    ipv4address?: pulumi.Input<string>;
    ptrdomainname?: pulumi.Input<string>;
    recordName: pulumi.Input<string>;
    recordType: pulumi.Input<string>;
    zoneName: pulumi.Input<string>;
}
