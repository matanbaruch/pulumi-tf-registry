// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getFileList(args: GetFileListArgs, opts?: pulumi.InvokeOptions): Promise<GetFileListResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("artifactory:index/getFileList:getFileList", {
        "deepListing": args.deepListing,
        "depth": args.depth,
        "folderPath": args.folderPath,
        "includeRootPath": args.includeRootPath,
        "listFolders": args.listFolders,
        "metadataTimestamps": args.metadataTimestamps,
        "repositoryKey": args.repositoryKey,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getFileList.
 */
export interface GetFileListArgs {
    deepListing?: boolean;
    depth?: number;
    folderPath: string;
    includeRootPath?: boolean;
    listFolders?: boolean;
    metadataTimestamps?: boolean;
    repositoryKey: string;
}

/**
 * A collection of values returned by getFileList.
 */
export interface GetFileListResult {
    readonly created: string;
    readonly deepListing?: boolean;
    readonly depth?: number;
    readonly files: outputs.GetFileListFile[];
    readonly folderPath: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly includeRootPath?: boolean;
    readonly listFolders?: boolean;
    readonly metadataTimestamps?: boolean;
    readonly repositoryKey: string;
    readonly uri: string;
}
export function getFileListOutput(args: GetFileListOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFileListResult> {
    return pulumi.output(args).apply((a: any) => getFileList(a, opts))
}

/**
 * A collection of arguments for invoking getFileList.
 */
export interface GetFileListOutputArgs {
    deepListing?: pulumi.Input<boolean>;
    depth?: pulumi.Input<number>;
    folderPath: pulumi.Input<string>;
    includeRootPath?: pulumi.Input<boolean>;
    listFolders?: pulumi.Input<boolean>;
    metadataTimestamps?: pulumi.Input<boolean>;
    repositoryKey: pulumi.Input<string>;
}
