// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Job extends pulumi.CustomResource {
    /**
     * Get an existing Job resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: JobState, opts?: pulumi.CustomResourceOptions): Job {
        return new Job(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rundeck:index/job:Job';

    /**
     * Returns true if the given object is an instance of Job.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Job {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Job.__pulumiType;
    }

    public readonly allowConcurrentExecutions!: pulumi.Output<boolean | undefined>;
    public readonly commandOrderingStrategy!: pulumi.Output<string | undefined>;
    public readonly commands!: pulumi.Output<outputs.JobCommand[]>;
    public readonly continueNextNodeOnError!: pulumi.Output<boolean | undefined>;
    public readonly continueOnError!: pulumi.Output<boolean | undefined>;
    public readonly description!: pulumi.Output<string>;
    public readonly executionEnabled!: pulumi.Output<boolean | undefined>;
    public readonly globalLogFilters!: pulumi.Output<outputs.JobGlobalLogFilter[] | undefined>;
    public readonly groupName!: pulumi.Output<string | undefined>;
    public readonly logLevel!: pulumi.Output<string | undefined>;
    public readonly maxThreadCount!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly nodeFilterExcludePrecedence!: pulumi.Output<boolean | undefined>;
    public readonly nodeFilterExcludeQuery!: pulumi.Output<string | undefined>;
    public readonly nodeFilterQuery!: pulumi.Output<string | undefined>;
    public readonly nodesSelectedByDefault!: pulumi.Output<boolean | undefined>;
    public readonly notifications!: pulumi.Output<outputs.JobNotification[] | undefined>;
    public readonly options!: pulumi.Output<outputs.JobOption[] | undefined>;
    public readonly orchestrators!: pulumi.Output<outputs.JobOrchestrator[] | undefined>;
    public readonly preserveOptionsOrder!: pulumi.Output<boolean>;
    public readonly projectName!: pulumi.Output<string>;
    public readonly rankAttribute!: pulumi.Output<string | undefined>;
    public readonly rankOrder!: pulumi.Output<string | undefined>;
    public readonly retry!: pulumi.Output<string | undefined>;
    public readonly retryDelay!: pulumi.Output<string | undefined>;
    public readonly schedule!: pulumi.Output<string | undefined>;
    public readonly scheduleEnabled!: pulumi.Output<boolean | undefined>;
    public readonly successOnEmptyNodeFilter!: pulumi.Output<boolean | undefined>;
    public readonly timeZone!: pulumi.Output<string | undefined>;
    public readonly timeout!: pulumi.Output<string | undefined>;

    /**
     * Create a Job resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: JobArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: JobArgs | JobState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as JobState | undefined;
            resourceInputs["allowConcurrentExecutions"] = state ? state.allowConcurrentExecutions : undefined;
            resourceInputs["commandOrderingStrategy"] = state ? state.commandOrderingStrategy : undefined;
            resourceInputs["commands"] = state ? state.commands : undefined;
            resourceInputs["continueNextNodeOnError"] = state ? state.continueNextNodeOnError : undefined;
            resourceInputs["continueOnError"] = state ? state.continueOnError : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["executionEnabled"] = state ? state.executionEnabled : undefined;
            resourceInputs["globalLogFilters"] = state ? state.globalLogFilters : undefined;
            resourceInputs["groupName"] = state ? state.groupName : undefined;
            resourceInputs["logLevel"] = state ? state.logLevel : undefined;
            resourceInputs["maxThreadCount"] = state ? state.maxThreadCount : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeFilterExcludePrecedence"] = state ? state.nodeFilterExcludePrecedence : undefined;
            resourceInputs["nodeFilterExcludeQuery"] = state ? state.nodeFilterExcludeQuery : undefined;
            resourceInputs["nodeFilterQuery"] = state ? state.nodeFilterQuery : undefined;
            resourceInputs["nodesSelectedByDefault"] = state ? state.nodesSelectedByDefault : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["orchestrators"] = state ? state.orchestrators : undefined;
            resourceInputs["preserveOptionsOrder"] = state ? state.preserveOptionsOrder : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["rankAttribute"] = state ? state.rankAttribute : undefined;
            resourceInputs["rankOrder"] = state ? state.rankOrder : undefined;
            resourceInputs["retry"] = state ? state.retry : undefined;
            resourceInputs["retryDelay"] = state ? state.retryDelay : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["scheduleEnabled"] = state ? state.scheduleEnabled : undefined;
            resourceInputs["successOnEmptyNodeFilter"] = state ? state.successOnEmptyNodeFilter : undefined;
            resourceInputs["timeZone"] = state ? state.timeZone : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
        } else {
            const args = argsOrState as JobArgs | undefined;
            if ((!args || args.commands === undefined) && !opts.urn) {
                throw new Error("Missing required property 'commands'");
            }
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.projectName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectName'");
            }
            resourceInputs["allowConcurrentExecutions"] = args ? args.allowConcurrentExecutions : undefined;
            resourceInputs["commandOrderingStrategy"] = args ? args.commandOrderingStrategy : undefined;
            resourceInputs["commands"] = args ? args.commands : undefined;
            resourceInputs["continueNextNodeOnError"] = args ? args.continueNextNodeOnError : undefined;
            resourceInputs["continueOnError"] = args ? args.continueOnError : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["executionEnabled"] = args ? args.executionEnabled : undefined;
            resourceInputs["globalLogFilters"] = args ? args.globalLogFilters : undefined;
            resourceInputs["groupName"] = args ? args.groupName : undefined;
            resourceInputs["logLevel"] = args ? args.logLevel : undefined;
            resourceInputs["maxThreadCount"] = args ? args.maxThreadCount : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeFilterExcludePrecedence"] = args ? args.nodeFilterExcludePrecedence : undefined;
            resourceInputs["nodeFilterExcludeQuery"] = args ? args.nodeFilterExcludeQuery : undefined;
            resourceInputs["nodeFilterQuery"] = args ? args.nodeFilterQuery : undefined;
            resourceInputs["nodesSelectedByDefault"] = args ? args.nodesSelectedByDefault : undefined;
            resourceInputs["notifications"] = args ? args.notifications : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["orchestrators"] = args ? args.orchestrators : undefined;
            resourceInputs["preserveOptionsOrder"] = args ? args.preserveOptionsOrder : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["rankAttribute"] = args ? args.rankAttribute : undefined;
            resourceInputs["rankOrder"] = args ? args.rankOrder : undefined;
            resourceInputs["retry"] = args ? args.retry : undefined;
            resourceInputs["retryDelay"] = args ? args.retryDelay : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["scheduleEnabled"] = args ? args.scheduleEnabled : undefined;
            resourceInputs["successOnEmptyNodeFilter"] = args ? args.successOnEmptyNodeFilter : undefined;
            resourceInputs["timeZone"] = args ? args.timeZone : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Job.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Job resources.
 */
export interface JobState {
    allowConcurrentExecutions?: pulumi.Input<boolean>;
    commandOrderingStrategy?: pulumi.Input<string>;
    commands?: pulumi.Input<pulumi.Input<inputs.JobCommand>[]>;
    continueNextNodeOnError?: pulumi.Input<boolean>;
    continueOnError?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    executionEnabled?: pulumi.Input<boolean>;
    globalLogFilters?: pulumi.Input<pulumi.Input<inputs.JobGlobalLogFilter>[]>;
    groupName?: pulumi.Input<string>;
    logLevel?: pulumi.Input<string>;
    maxThreadCount?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    nodeFilterExcludePrecedence?: pulumi.Input<boolean>;
    nodeFilterExcludeQuery?: pulumi.Input<string>;
    nodeFilterQuery?: pulumi.Input<string>;
    nodesSelectedByDefault?: pulumi.Input<boolean>;
    notifications?: pulumi.Input<pulumi.Input<inputs.JobNotification>[]>;
    options?: pulumi.Input<pulumi.Input<inputs.JobOption>[]>;
    orchestrators?: pulumi.Input<pulumi.Input<inputs.JobOrchestrator>[]>;
    preserveOptionsOrder?: pulumi.Input<boolean>;
    projectName?: pulumi.Input<string>;
    rankAttribute?: pulumi.Input<string>;
    rankOrder?: pulumi.Input<string>;
    retry?: pulumi.Input<string>;
    retryDelay?: pulumi.Input<string>;
    schedule?: pulumi.Input<string>;
    scheduleEnabled?: pulumi.Input<boolean>;
    successOnEmptyNodeFilter?: pulumi.Input<boolean>;
    timeZone?: pulumi.Input<string>;
    timeout?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Job resource.
 */
export interface JobArgs {
    allowConcurrentExecutions?: pulumi.Input<boolean>;
    commandOrderingStrategy?: pulumi.Input<string>;
    commands: pulumi.Input<pulumi.Input<inputs.JobCommand>[]>;
    continueNextNodeOnError?: pulumi.Input<boolean>;
    continueOnError?: pulumi.Input<boolean>;
    description: pulumi.Input<string>;
    executionEnabled?: pulumi.Input<boolean>;
    globalLogFilters?: pulumi.Input<pulumi.Input<inputs.JobGlobalLogFilter>[]>;
    groupName?: pulumi.Input<string>;
    logLevel?: pulumi.Input<string>;
    maxThreadCount?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    nodeFilterExcludePrecedence?: pulumi.Input<boolean>;
    nodeFilterExcludeQuery?: pulumi.Input<string>;
    nodeFilterQuery?: pulumi.Input<string>;
    nodesSelectedByDefault?: pulumi.Input<boolean>;
    notifications?: pulumi.Input<pulumi.Input<inputs.JobNotification>[]>;
    options?: pulumi.Input<pulumi.Input<inputs.JobOption>[]>;
    orchestrators?: pulumi.Input<pulumi.Input<inputs.JobOrchestrator>[]>;
    preserveOptionsOrder?: pulumi.Input<boolean>;
    projectName: pulumi.Input<string>;
    rankAttribute?: pulumi.Input<string>;
    rankOrder?: pulumi.Input<string>;
    retry?: pulumi.Input<string>;
    retryDelay?: pulumi.Input<string>;
    schedule?: pulumi.Input<string>;
    scheduleEnabled?: pulumi.Input<boolean>;
    successOnEmptyNodeFilter?: pulumi.Input<boolean>;
    timeZone?: pulumi.Input<string>;
    timeout?: pulumi.Input<string>;
}
