// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AclPolicyArgs, AclPolicyState } from "./aclPolicy";
export type AclPolicy = import("./aclPolicy").AclPolicy;
export const AclPolicy: typeof import("./aclPolicy").AclPolicy = null as any;
utilities.lazyLoad(exports, ["AclPolicy"], () => require("./aclPolicy"));

export { JobArgs, JobState } from "./job";
export type Job = import("./job").Job;
export const Job: typeof import("./job").Job = null as any;
utilities.lazyLoad(exports, ["Job"], () => require("./job"));

export { PasswordArgs, PasswordState } from "./password";
export type Password = import("./password").Password;
export const Password: typeof import("./password").Password = null as any;
utilities.lazyLoad(exports, ["Password"], () => require("./password"));

export { PrivateKeyArgs, PrivateKeyState } from "./privateKey";
export type PrivateKey = import("./privateKey").PrivateKey;
export const PrivateKey: typeof import("./privateKey").PrivateKey = null as any;
utilities.lazyLoad(exports, ["PrivateKey"], () => require("./privateKey"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { PublicKeyArgs, PublicKeyState } from "./publicKey";
export type PublicKey = import("./publicKey").PublicKey;
export const PublicKey: typeof import("./publicKey").PublicKey = null as any;
utilities.lazyLoad(exports, ["PublicKey"], () => require("./publicKey"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "rundeck:index/aclPolicy:AclPolicy":
                return new AclPolicy(name, <any>undefined, { urn })
            case "rundeck:index/job:Job":
                return new Job(name, <any>undefined, { urn })
            case "rundeck:index/password:Password":
                return new Password(name, <any>undefined, { urn })
            case "rundeck:index/privateKey:PrivateKey":
                return new PrivateKey(name, <any>undefined, { urn })
            case "rundeck:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "rundeck:index/publicKey:PublicKey":
                return new PublicKey(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("rundeck", "index/aclPolicy", _module)
pulumi.runtime.registerResourceModule("rundeck", "index/job", _module)
pulumi.runtime.registerResourceModule("rundeck", "index/password", _module)
pulumi.runtime.registerResourceModule("rundeck", "index/privateKey", _module)
pulumi.runtime.registerResourceModule("rundeck", "index/project", _module)
pulumi.runtime.registerResourceModule("rundeck", "index/publicKey", _module)
pulumi.runtime.registerResourcePackage("rundeck", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:rundeck") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
