// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface JobCommand {
    description?: string;
    errorHandlers?: outputs.JobCommandErrorHandler[];
    inlineScript?: string;
    jobs?: outputs.JobCommandJob[];
    keepGoingOnSuccess?: boolean;
    nodeStepPlugins?: outputs.JobCommandNodeStepPlugin[];
    scriptFile?: string;
    scriptFileArgs?: string;
    scriptInterpreters?: outputs.JobCommandScriptInterpreter[];
    shellCommand?: string;
    stepPlugins?: outputs.JobCommandStepPlugin[];
}

export interface JobCommandErrorHandler {
    description?: string;
    inlineScript?: string;
    jobs?: outputs.JobCommandErrorHandlerJob[];
    keepGoingOnSuccess?: boolean;
    nodeStepPlugins?: outputs.JobCommandErrorHandlerNodeStepPlugin[];
    scriptFile?: string;
    scriptFileArgs?: string;
    scriptInterpreters?: outputs.JobCommandErrorHandlerScriptInterpreter[];
    shellCommand?: string;
    stepPlugins?: outputs.JobCommandErrorHandlerStepPlugin[];
}

export interface JobCommandErrorHandlerJob {
    args?: string;
    groupName?: string;
    name: string;
    nodeFilters?: outputs.JobCommandErrorHandlerJobNodeFilter[];
    runForEachNode?: boolean;
}

export interface JobCommandErrorHandlerJobNodeFilter {
    excludeFilter?: string;
    excludePrecedence?: boolean;
    filter?: string;
}

export interface JobCommandErrorHandlerNodeStepPlugin {
    config?: {[key: string]: string};
    type: string;
}

export interface JobCommandErrorHandlerScriptInterpreter {
    argsQuoted?: boolean;
    invocationString?: string;
}

export interface JobCommandErrorHandlerStepPlugin {
    config?: {[key: string]: string};
    type: string;
}

export interface JobCommandJob {
    args?: string;
    groupName?: string;
    name: string;
    nodeFilters?: outputs.JobCommandJobNodeFilter[];
    runForEachNode?: boolean;
}

export interface JobCommandJobNodeFilter {
    excludeFilter?: string;
    excludePrecedence?: boolean;
    filter?: string;
}

export interface JobCommandNodeStepPlugin {
    config?: {[key: string]: string};
    type: string;
}

export interface JobCommandScriptInterpreter {
    argsQuoted?: boolean;
    invocationString?: string;
}

export interface JobCommandStepPlugin {
    config?: {[key: string]: string};
    type: string;
}

export interface JobGlobalLogFilter {
    config?: {[key: string]: string};
    type: string;
}

export interface JobNotification {
    emails?: outputs.JobNotificationEmail[];
    plugins?: outputs.JobNotificationPlugin[];
    /**
     * Option of `on_success`, `on_failure`, `on_start`
     */
    type: string;
    webhookUrls?: string[];
}

export interface JobNotificationEmail {
    attachLog?: boolean;
    recipients: string[];
    subject?: string;
}

export interface JobNotificationPlugin {
    config?: {[key: string]: string};
    type: string;
}

export interface JobOption {
    allowMultipleValues?: boolean;
    defaultValue?: string;
    description?: string;
    exposedToScripts?: boolean;
    hidden?: boolean;
    label?: string;
    multiValueDelimiter?: string;
    name: string;
    obscureInput?: boolean;
    requirePredefinedChoice?: boolean;
    required?: boolean;
    storagePath?: string;
    validationRegex?: string;
    valueChoices?: string[];
    valueChoicesUrl?: string;
}

export interface JobOrchestrator {
    /**
     * The Node Attribute that shoud be used to rank nodes in High/Low Orchestrator.
     */
    attribute?: string;
    /**
     * Value for the subset orchestrator
     */
    count?: number;
    /**
     * Value for the maxPercentage orchestrator
     */
    percent?: number;
    /**
     * Option of `highest` or `lowest` for High/Low Orchestrator
     */
    sort?: string;
    /**
     * Option of `subset`, `rankTiered`, `maxPercentage`, `orchestrator-highest-lowest-attribute`
     */
    type: string;
}

export interface ProjectResourceModelSource {
    /**
     * Configuration parameters for the selected plugin
     */
    config: {[key: string]: string};
    /**
     * Name of the resource model plugin to use
     */
    type: string;
}

