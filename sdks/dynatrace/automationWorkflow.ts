// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AutomationWorkflow extends pulumi.CustomResource {
    /**
     * Get an existing AutomationWorkflow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AutomationWorkflowState, opts?: pulumi.CustomResourceOptions): AutomationWorkflow {
        return new AutomationWorkflow(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/automationWorkflow:AutomationWorkflow';

    /**
     * Returns true if the given object is an instance of AutomationWorkflow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AutomationWorkflow {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AutomationWorkflow.__pulumiType;
    }

    /**
     * The user context the executions of the workflow will happen with
     */
    public readonly actor!: pulumi.Output<string | undefined>;
    /**
     * An optional description for the workflow
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The ID of the owner of this workflow
     */
    public readonly owner!: pulumi.Output<string | undefined>;
    /**
     * Defines whether this workflow is private to the owner or not. Default is `true`
     */
    public readonly private!: pulumi.Output<boolean | undefined>;
    /**
     * The tasks to run for every execution of this workflow
     */
    public readonly tasks!: pulumi.Output<outputs.AutomationWorkflowTasks>;
    /**
     * The title / name of the workflow
     */
    public readonly title!: pulumi.Output<string>;
    /**
     * Configures how executions of the workflows are getting triggered. If no trigger is specified it means the workflow is
     * getting manually triggered
     */
    public readonly trigger!: pulumi.Output<outputs.AutomationWorkflowTrigger | undefined>;

    /**
     * Create a AutomationWorkflow resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AutomationWorkflowArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AutomationWorkflowArgs | AutomationWorkflowState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AutomationWorkflowState | undefined;
            resourceInputs["actor"] = state ? state.actor : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["private"] = state ? state.private : undefined;
            resourceInputs["tasks"] = state ? state.tasks : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["trigger"] = state ? state.trigger : undefined;
        } else {
            const args = argsOrState as AutomationWorkflowArgs | undefined;
            if ((!args || args.tasks === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tasks'");
            }
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            resourceInputs["actor"] = args ? args.actor : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["owner"] = args ? args.owner : undefined;
            resourceInputs["private"] = args ? args.private : undefined;
            resourceInputs["tasks"] = args ? args.tasks : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["trigger"] = args ? args.trigger : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AutomationWorkflow.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AutomationWorkflow resources.
 */
export interface AutomationWorkflowState {
    /**
     * The user context the executions of the workflow will happen with
     */
    actor?: pulumi.Input<string>;
    /**
     * An optional description for the workflow
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the owner of this workflow
     */
    owner?: pulumi.Input<string>;
    /**
     * Defines whether this workflow is private to the owner or not. Default is `true`
     */
    private?: pulumi.Input<boolean>;
    /**
     * The tasks to run for every execution of this workflow
     */
    tasks?: pulumi.Input<inputs.AutomationWorkflowTasks>;
    /**
     * The title / name of the workflow
     */
    title?: pulumi.Input<string>;
    /**
     * Configures how executions of the workflows are getting triggered. If no trigger is specified it means the workflow is
     * getting manually triggered
     */
    trigger?: pulumi.Input<inputs.AutomationWorkflowTrigger>;
}

/**
 * The set of arguments for constructing a AutomationWorkflow resource.
 */
export interface AutomationWorkflowArgs {
    /**
     * The user context the executions of the workflow will happen with
     */
    actor?: pulumi.Input<string>;
    /**
     * An optional description for the workflow
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the owner of this workflow
     */
    owner?: pulumi.Input<string>;
    /**
     * Defines whether this workflow is private to the owner or not. Default is `true`
     */
    private?: pulumi.Input<boolean>;
    /**
     * The tasks to run for every execution of this workflow
     */
    tasks: pulumi.Input<inputs.AutomationWorkflowTasks>;
    /**
     * The title / name of the workflow
     */
    title: pulumi.Input<string>;
    /**
     * Configures how executions of the workflows are getting triggered. If no trigger is specified it means the workflow is
     * getting manually triggered
     */
    trigger?: pulumi.Input<inputs.AutomationWorkflowTrigger>;
}
