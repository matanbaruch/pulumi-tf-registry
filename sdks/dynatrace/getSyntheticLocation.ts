// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getSyntheticLocation(args?: GetSyntheticLocationArgs, opts?: pulumi.InvokeOptions): Promise<GetSyntheticLocationResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("dynatrace:index/getSyntheticLocation:getSyntheticLocation", {
        "cloudPlatform": args.cloudPlatform,
        "entityId": args.entityId,
        "id": args.id,
        "ips": args.ips,
        "name": args.name,
        "stage": args.stage,
        "status": args.status,
        "type": args.type,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSyntheticLocation.
 */
export interface GetSyntheticLocationArgs {
    cloudPlatform?: string;
    entityId?: string;
    id?: string;
    ips?: string[];
    name?: string;
    stage?: string;
    status?: string;
    type?: string;
}

/**
 * A collection of values returned by getSyntheticLocation.
 */
export interface GetSyntheticLocationResult {
    readonly cloudPlatform: string;
    readonly entityId?: string;
    readonly id: string;
    readonly ips: string[];
    readonly name?: string;
    readonly stage: string;
    readonly status: string;
    readonly type?: string;
}
export function getSyntheticLocationOutput(args?: GetSyntheticLocationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSyntheticLocationResult> {
    return pulumi.output(args).apply((a: any) => getSyntheticLocation(a, opts))
}

/**
 * A collection of arguments for invoking getSyntheticLocation.
 */
export interface GetSyntheticLocationOutputArgs {
    cloudPlatform?: pulumi.Input<string>;
    entityId?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    ips?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    stage?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}
