// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getSlo(args: GetSloArgs, opts?: pulumi.InvokeOptions): Promise<GetSloResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("dynatrace:index/getSlo:getSlo", {
        "id": args.id,
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSlo.
 */
export interface GetSloArgs {
    id?: string;
    name: string;
}

/**
 * A collection of values returned by getSlo.
 */
export interface GetSloResult {
    readonly burnRateVisualizationEnabled: boolean;
    readonly description: string;
    readonly enabled: boolean;
    readonly evaluationType: string;
    readonly evaluationWindow: string;
    readonly fastBurnThreshold: number;
    readonly filter: string;
    readonly id: string;
    readonly legacyId: string;
    readonly metricExpression: string;
    readonly metricName: string;
    readonly name: string;
    readonly targetSuccess: number;
    readonly targetWarning: number;
}
export function getSloOutput(args: GetSloOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSloResult> {
    return pulumi.output(args).apply((a: any) => getSlo(a, opts))
}

/**
 * A collection of arguments for invoking getSlo.
 */
export interface GetSloOutputArgs {
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
}
