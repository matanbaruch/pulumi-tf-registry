// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AutomationBusinessCalendar extends pulumi.CustomResource {
    /**
     * Get an existing AutomationBusinessCalendar resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AutomationBusinessCalendarState, opts?: pulumi.CustomResourceOptions): AutomationBusinessCalendar {
        return new AutomationBusinessCalendar(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/automationBusinessCalendar:AutomationBusinessCalendar';

    /**
     * Returns true if the given object is an instance of AutomationBusinessCalendar.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AutomationBusinessCalendar {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AutomationBusinessCalendar.__pulumiType;
    }

    /**
     * An optional description for the Business Calendar
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * A list of holidays valid in this calendar
     */
    public readonly holidays!: pulumi.Output<outputs.AutomationBusinessCalendarHolidays | undefined>;
    /**
     * The title / name of the Business Calendar
     */
    public readonly title!: pulumi.Output<string>;
    /**
     * The date from when on this calendar is valid from. Example: `2023-07-04` for July 4th 2023
     */
    public readonly validFrom!: pulumi.Output<string | undefined>;
    /**
     * The date until when on this calendar is valid to. Example: `2023-07-04` for July 4th 2023
     */
    public readonly validTo!: pulumi.Output<string | undefined>;
    /**
     * The days to be considered week days in this calendar. `1' = `Monday`, `2` = `Tuesday`, `3` = `Wednesday`, `4` =
     * `Thursday`, `5` = `Friday`, `6` = `Saturday`, `7` = `Sunday`
     */
    public readonly weekDays!: pulumi.Output<number[] | undefined>;
    /**
     * Specifies the day of the week that's considered to be the first day in the week. `1` for Monday, `7` for Sunday
     */
    public readonly weekStart!: pulumi.Output<number | undefined>;

    /**
     * Create a AutomationBusinessCalendar resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AutomationBusinessCalendarArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AutomationBusinessCalendarArgs | AutomationBusinessCalendarState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AutomationBusinessCalendarState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["holidays"] = state ? state.holidays : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["validFrom"] = state ? state.validFrom : undefined;
            resourceInputs["validTo"] = state ? state.validTo : undefined;
            resourceInputs["weekDays"] = state ? state.weekDays : undefined;
            resourceInputs["weekStart"] = state ? state.weekStart : undefined;
        } else {
            const args = argsOrState as AutomationBusinessCalendarArgs | undefined;
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["holidays"] = args ? args.holidays : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["validFrom"] = args ? args.validFrom : undefined;
            resourceInputs["validTo"] = args ? args.validTo : undefined;
            resourceInputs["weekDays"] = args ? args.weekDays : undefined;
            resourceInputs["weekStart"] = args ? args.weekStart : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AutomationBusinessCalendar.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AutomationBusinessCalendar resources.
 */
export interface AutomationBusinessCalendarState {
    /**
     * An optional description for the Business Calendar
     */
    description?: pulumi.Input<string>;
    /**
     * A list of holidays valid in this calendar
     */
    holidays?: pulumi.Input<inputs.AutomationBusinessCalendarHolidays>;
    /**
     * The title / name of the Business Calendar
     */
    title?: pulumi.Input<string>;
    /**
     * The date from when on this calendar is valid from. Example: `2023-07-04` for July 4th 2023
     */
    validFrom?: pulumi.Input<string>;
    /**
     * The date until when on this calendar is valid to. Example: `2023-07-04` for July 4th 2023
     */
    validTo?: pulumi.Input<string>;
    /**
     * The days to be considered week days in this calendar. `1' = `Monday`, `2` = `Tuesday`, `3` = `Wednesday`, `4` =
     * `Thursday`, `5` = `Friday`, `6` = `Saturday`, `7` = `Sunday`
     */
    weekDays?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Specifies the day of the week that's considered to be the first day in the week. `1` for Monday, `7` for Sunday
     */
    weekStart?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a AutomationBusinessCalendar resource.
 */
export interface AutomationBusinessCalendarArgs {
    /**
     * An optional description for the Business Calendar
     */
    description?: pulumi.Input<string>;
    /**
     * A list of holidays valid in this calendar
     */
    holidays?: pulumi.Input<inputs.AutomationBusinessCalendarHolidays>;
    /**
     * The title / name of the Business Calendar
     */
    title: pulumi.Input<string>;
    /**
     * The date from when on this calendar is valid from. Example: `2023-07-04` for July 4th 2023
     */
    validFrom?: pulumi.Input<string>;
    /**
     * The date until when on this calendar is valid to. Example: `2023-07-04` for July 4th 2023
     */
    validTo?: pulumi.Input<string>;
    /**
     * The days to be considered week days in this calendar. `1' = `Monday`, `2` = `Tuesday`, `3` = `Wednesday`, `4` =
     * `Thursday`, `5` = `Friday`, `6` = `Saturday`, `7` = `Sunday`
     */
    weekDays?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Specifies the day of the week that's considered to be the first day in the week. `1` for Monday, `7` for Sunday
     */
    weekStart?: pulumi.Input<number>;
}
