// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AutomationSchedulingRule extends pulumi.CustomResource {
    /**
     * Get an existing AutomationSchedulingRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AutomationSchedulingRuleState, opts?: pulumi.CustomResourceOptions): AutomationSchedulingRule {
        return new AutomationSchedulingRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/automationSchedulingRule:AutomationSchedulingRule';

    /**
     * Returns true if the given object is an instance of AutomationSchedulingRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AutomationSchedulingRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AutomationSchedulingRule.__pulumiType;
    }

    public readonly businessCalendar!: pulumi.Output<string | undefined>;
    /**
     * An optional description for the scheduling rule
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly fixedOffset!: pulumi.Output<outputs.AutomationSchedulingRuleFixedOffset | undefined>;
    public readonly grouping!: pulumi.Output<outputs.AutomationSchedulingRuleGrouping | undefined>;
    public readonly recurrence!: pulumi.Output<outputs.AutomationSchedulingRuleRecurrence | undefined>;
    public readonly relativeOffset!: pulumi.Output<outputs.AutomationSchedulingRuleRelativeOffset | undefined>;
    /**
     * The title / name of the scheduling rule
     */
    public readonly title!: pulumi.Output<string>;

    /**
     * Create a AutomationSchedulingRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AutomationSchedulingRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AutomationSchedulingRuleArgs | AutomationSchedulingRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AutomationSchedulingRuleState | undefined;
            resourceInputs["businessCalendar"] = state ? state.businessCalendar : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["fixedOffset"] = state ? state.fixedOffset : undefined;
            resourceInputs["grouping"] = state ? state.grouping : undefined;
            resourceInputs["recurrence"] = state ? state.recurrence : undefined;
            resourceInputs["relativeOffset"] = state ? state.relativeOffset : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
        } else {
            const args = argsOrState as AutomationSchedulingRuleArgs | undefined;
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            resourceInputs["businessCalendar"] = args ? args.businessCalendar : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["fixedOffset"] = args ? args.fixedOffset : undefined;
            resourceInputs["grouping"] = args ? args.grouping : undefined;
            resourceInputs["recurrence"] = args ? args.recurrence : undefined;
            resourceInputs["relativeOffset"] = args ? args.relativeOffset : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AutomationSchedulingRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AutomationSchedulingRule resources.
 */
export interface AutomationSchedulingRuleState {
    businessCalendar?: pulumi.Input<string>;
    /**
     * An optional description for the scheduling rule
     */
    description?: pulumi.Input<string>;
    fixedOffset?: pulumi.Input<inputs.AutomationSchedulingRuleFixedOffset>;
    grouping?: pulumi.Input<inputs.AutomationSchedulingRuleGrouping>;
    recurrence?: pulumi.Input<inputs.AutomationSchedulingRuleRecurrence>;
    relativeOffset?: pulumi.Input<inputs.AutomationSchedulingRuleRelativeOffset>;
    /**
     * The title / name of the scheduling rule
     */
    title?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AutomationSchedulingRule resource.
 */
export interface AutomationSchedulingRuleArgs {
    businessCalendar?: pulumi.Input<string>;
    /**
     * An optional description for the scheduling rule
     */
    description?: pulumi.Input<string>;
    fixedOffset?: pulumi.Input<inputs.AutomationSchedulingRuleFixedOffset>;
    grouping?: pulumi.Input<inputs.AutomationSchedulingRuleGrouping>;
    recurrence?: pulumi.Input<inputs.AutomationSchedulingRuleRecurrence>;
    relativeOffset?: pulumi.Input<inputs.AutomationSchedulingRuleRelativeOffset>;
    /**
     * The title / name of the scheduling rule
     */
    title: pulumi.Input<string>;
}
