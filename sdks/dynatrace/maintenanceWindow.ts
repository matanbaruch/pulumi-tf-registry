// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MaintenanceWindow extends pulumi.CustomResource {
    /**
     * Get an existing MaintenanceWindow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MaintenanceWindowState, opts?: pulumi.CustomResourceOptions): MaintenanceWindow {
        return new MaintenanceWindow(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/maintenanceWindow:MaintenanceWindow';

    /**
     * Returns true if the given object is an instance of MaintenanceWindow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MaintenanceWindow {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MaintenanceWindow.__pulumiType;
    }

    /**
     * A short description of the maintenance purpose
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The Maintenance Window is enabled or disabled
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the maintenance window, displayed in the UI
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The schedule of the maintenance window
     */
    public readonly schedule!: pulumi.Output<outputs.MaintenanceWindowSchedule | undefined>;
    /**
     * the tiles this Dashboard consist of
     */
    public readonly scope!: pulumi.Output<outputs.MaintenanceWindowScope | undefined>;
    /**
     * Suppress execution of synthetic monitors during the maintenance
     */
    public readonly suppressSynthMonExec!: pulumi.Output<boolean | undefined>;
    /**
     * The type of suppression of alerting and problem detection during the maintenance
     */
    public readonly suppression!: pulumi.Output<string>;
    /**
     * The type of the maintenance: planned or unplanned
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    public readonly unknowns!: pulumi.Output<string | undefined>;

    /**
     * Create a MaintenanceWindow resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MaintenanceWindowArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MaintenanceWindowArgs | MaintenanceWindowState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MaintenanceWindowState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["suppressSynthMonExec"] = state ? state.suppressSynthMonExec : undefined;
            resourceInputs["suppression"] = state ? state.suppression : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["unknowns"] = state ? state.unknowns : undefined;
        } else {
            const args = argsOrState as MaintenanceWindowArgs | undefined;
            if ((!args || args.suppression === undefined) && !opts.urn) {
                throw new Error("Missing required property 'suppression'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["suppressSynthMonExec"] = args ? args.suppressSynthMonExec : undefined;
            resourceInputs["suppression"] = args ? args.suppression : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["unknowns"] = args ? args.unknowns : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MaintenanceWindow.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MaintenanceWindow resources.
 */
export interface MaintenanceWindowState {
    /**
     * A short description of the maintenance purpose
     */
    description?: pulumi.Input<string>;
    /**
     * The Maintenance Window is enabled or disabled
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The name of the maintenance window, displayed in the UI
     */
    name?: pulumi.Input<string>;
    /**
     * The schedule of the maintenance window
     */
    schedule?: pulumi.Input<inputs.MaintenanceWindowSchedule>;
    /**
     * the tiles this Dashboard consist of
     */
    scope?: pulumi.Input<inputs.MaintenanceWindowScope>;
    /**
     * Suppress execution of synthetic monitors during the maintenance
     */
    suppressSynthMonExec?: pulumi.Input<boolean>;
    /**
     * The type of suppression of alerting and problem detection during the maintenance
     */
    suppression?: pulumi.Input<string>;
    /**
     * The type of the maintenance: planned or unplanned
     */
    type?: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MaintenanceWindow resource.
 */
export interface MaintenanceWindowArgs {
    /**
     * A short description of the maintenance purpose
     */
    description?: pulumi.Input<string>;
    /**
     * The Maintenance Window is enabled or disabled
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The name of the maintenance window, displayed in the UI
     */
    name?: pulumi.Input<string>;
    /**
     * The schedule of the maintenance window
     */
    schedule?: pulumi.Input<inputs.MaintenanceWindowSchedule>;
    /**
     * the tiles this Dashboard consist of
     */
    scope?: pulumi.Input<inputs.MaintenanceWindowScope>;
    /**
     * Suppress execution of synthetic monitors during the maintenance
     */
    suppressSynthMonExec?: pulumi.Input<boolean>;
    /**
     * The type of suppression of alerting and problem detection during the maintenance
     */
    suppression: pulumi.Input<string>;
    /**
     * The type of the maintenance: planned or unplanned
     */
    type: pulumi.Input<string>;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: pulumi.Input<string>;
}
