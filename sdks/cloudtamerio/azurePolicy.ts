// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AzurePolicy extends pulumi.CustomResource {
    /**
     * Get an existing AzurePolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AzurePolicyState, opts?: pulumi.CustomResourceOptions): AzurePolicy {
        return new AzurePolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudtamerio:index/azurePolicy:AzurePolicy';

    /**
     * Returns true if the given object is an instance of AzurePolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AzurePolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AzurePolicy.__pulumiType;
    }

    public /*out*/ readonly azureManagedPolicyDefId!: pulumi.Output<string>;
    public /*out*/ readonly ctManaged!: pulumi.Output<boolean>;
    public /*out*/ readonly description!: pulumi.Output<string>;
    public readonly lastUpdated!: pulumi.Output<string>;
    public /*out*/ readonly name!: pulumi.Output<string>;
    public readonly ownerUserGroups!: pulumi.Output<outputs.AzurePolicyOwnerUserGroup[] | undefined>;
    public readonly ownerUsers!: pulumi.Output<outputs.AzurePolicyOwnerUser[] | undefined>;
    public /*out*/ readonly parameters!: pulumi.Output<string>;
    public /*out*/ readonly policy!: pulumi.Output<string>;

    /**
     * Create a AzurePolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AzurePolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AzurePolicyArgs | AzurePolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AzurePolicyState | undefined;
            resourceInputs["azureManagedPolicyDefId"] = state ? state.azureManagedPolicyDefId : undefined;
            resourceInputs["ctManaged"] = state ? state.ctManaged : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ownerUserGroups"] = state ? state.ownerUserGroups : undefined;
            resourceInputs["ownerUsers"] = state ? state.ownerUsers : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
        } else {
            const args = argsOrState as AzurePolicyArgs | undefined;
            resourceInputs["lastUpdated"] = args ? args.lastUpdated : undefined;
            resourceInputs["ownerUserGroups"] = args ? args.ownerUserGroups : undefined;
            resourceInputs["ownerUsers"] = args ? args.ownerUsers : undefined;
            resourceInputs["azureManagedPolicyDefId"] = undefined /*out*/;
            resourceInputs["ctManaged"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["parameters"] = undefined /*out*/;
            resourceInputs["policy"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AzurePolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AzurePolicy resources.
 */
export interface AzurePolicyState {
    azureManagedPolicyDefId?: pulumi.Input<string>;
    ctManaged?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    lastUpdated?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ownerUserGroups?: pulumi.Input<pulumi.Input<inputs.AzurePolicyOwnerUserGroup>[]>;
    ownerUsers?: pulumi.Input<pulumi.Input<inputs.AzurePolicyOwnerUser>[]>;
    parameters?: pulumi.Input<string>;
    policy?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AzurePolicy resource.
 */
export interface AzurePolicyArgs {
    lastUpdated?: pulumi.Input<string>;
    ownerUserGroups?: pulumi.Input<pulumi.Input<inputs.AzurePolicyOwnerUserGroup>[]>;
    ownerUsers?: pulumi.Input<pulumi.Input<inputs.AzurePolicyOwnerUser>[]>;
}
