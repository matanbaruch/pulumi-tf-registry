// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ComplianceStandard extends pulumi.CustomResource {
    /**
     * Get an existing ComplianceStandard resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ComplianceStandardState, opts?: pulumi.CustomResourceOptions): ComplianceStandard {
        return new ComplianceStandard(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudtamerio:index/complianceStandard:ComplianceStandard';

    /**
     * Returns true if the given object is an instance of ComplianceStandard.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ComplianceStandard {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ComplianceStandard.__pulumiType;
    }

    public readonly complianceChecks!: pulumi.Output<outputs.ComplianceStandardComplianceCheck[] | undefined>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly createdByUserId!: pulumi.Output<number>;
    public /*out*/ readonly ctManaged!: pulumi.Output<boolean>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly lastUpdated!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly ownerUserGroups!: pulumi.Output<outputs.ComplianceStandardOwnerUserGroup[] | undefined>;
    public readonly ownerUsers!: pulumi.Output<outputs.ComplianceStandardOwnerUser[] | undefined>;

    /**
     * Create a ComplianceStandard resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ComplianceStandardArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ComplianceStandardArgs | ComplianceStandardState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ComplianceStandardState | undefined;
            resourceInputs["complianceChecks"] = state ? state.complianceChecks : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["createdByUserId"] = state ? state.createdByUserId : undefined;
            resourceInputs["ctManaged"] = state ? state.ctManaged : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ownerUserGroups"] = state ? state.ownerUserGroups : undefined;
            resourceInputs["ownerUsers"] = state ? state.ownerUsers : undefined;
        } else {
            const args = argsOrState as ComplianceStandardArgs | undefined;
            if ((!args || args.createdByUserId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'createdByUserId'");
            }
            resourceInputs["complianceChecks"] = args ? args.complianceChecks : undefined;
            resourceInputs["createdByUserId"] = args ? args.createdByUserId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["lastUpdated"] = args ? args.lastUpdated : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ownerUserGroups"] = args ? args.ownerUserGroups : undefined;
            resourceInputs["ownerUsers"] = args ? args.ownerUsers : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["ctManaged"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ComplianceStandard.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ComplianceStandard resources.
 */
export interface ComplianceStandardState {
    complianceChecks?: pulumi.Input<pulumi.Input<inputs.ComplianceStandardComplianceCheck>[]>;
    createdAt?: pulumi.Input<string>;
    createdByUserId?: pulumi.Input<number>;
    ctManaged?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    lastUpdated?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ownerUserGroups?: pulumi.Input<pulumi.Input<inputs.ComplianceStandardOwnerUserGroup>[]>;
    ownerUsers?: pulumi.Input<pulumi.Input<inputs.ComplianceStandardOwnerUser>[]>;
}

/**
 * The set of arguments for constructing a ComplianceStandard resource.
 */
export interface ComplianceStandardArgs {
    complianceChecks?: pulumi.Input<pulumi.Input<inputs.ComplianceStandardComplianceCheck>[]>;
    createdByUserId: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    lastUpdated?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ownerUserGroups?: pulumi.Input<pulumi.Input<inputs.ComplianceStandardOwnerUserGroup>[]>;
    ownerUsers?: pulumi.Input<pulumi.Input<inputs.ComplianceStandardOwnerUser>[]>;
}
