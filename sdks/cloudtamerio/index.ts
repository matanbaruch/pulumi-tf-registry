// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AwsCloudformationTemplateArgs, AwsCloudformationTemplateState } from "./awsCloudformationTemplate";
export type AwsCloudformationTemplate = import("./awsCloudformationTemplate").AwsCloudformationTemplate;
export const AwsCloudformationTemplate: typeof import("./awsCloudformationTemplate").AwsCloudformationTemplate = null as any;
utilities.lazyLoad(exports, ["AwsCloudformationTemplate"], () => require("./awsCloudformationTemplate"));

export { AwsIamPolicyArgs, AwsIamPolicyState } from "./awsIamPolicy";
export type AwsIamPolicy = import("./awsIamPolicy").AwsIamPolicy;
export const AwsIamPolicy: typeof import("./awsIamPolicy").AwsIamPolicy = null as any;
utilities.lazyLoad(exports, ["AwsIamPolicy"], () => require("./awsIamPolicy"));

export { AzurePolicyArgs, AzurePolicyState } from "./azurePolicy";
export type AzurePolicy = import("./azurePolicy").AzurePolicy;
export const AzurePolicy: typeof import("./azurePolicy").AzurePolicy = null as any;
utilities.lazyLoad(exports, ["AzurePolicy"], () => require("./azurePolicy"));

export { CloudRuleArgs, CloudRuleState } from "./cloudRule";
export type CloudRule = import("./cloudRule").CloudRule;
export const CloudRule: typeof import("./cloudRule").CloudRule = null as any;
utilities.lazyLoad(exports, ["CloudRule"], () => require("./cloudRule"));

export { ComplianceCheckArgs, ComplianceCheckState } from "./complianceCheck";
export type ComplianceCheck = import("./complianceCheck").ComplianceCheck;
export const ComplianceCheck: typeof import("./complianceCheck").ComplianceCheck = null as any;
utilities.lazyLoad(exports, ["ComplianceCheck"], () => require("./complianceCheck"));

export { ComplianceStandardArgs, ComplianceStandardState } from "./complianceStandard";
export type ComplianceStandard = import("./complianceStandard").ComplianceStandard;
export const ComplianceStandard: typeof import("./complianceStandard").ComplianceStandard = null as any;
utilities.lazyLoad(exports, ["ComplianceStandard"], () => require("./complianceStandard"));

export { GcpIamRoleArgs, GcpIamRoleState } from "./gcpIamRole";
export type GcpIamRole = import("./gcpIamRole").GcpIamRole;
export const GcpIamRole: typeof import("./gcpIamRole").GcpIamRole = null as any;
utilities.lazyLoad(exports, ["GcpIamRole"], () => require("./gcpIamRole"));

export { GetAwsCloudformationTemplateArgs, GetAwsCloudformationTemplateResult, GetAwsCloudformationTemplateOutputArgs } from "./getAwsCloudformationTemplate";
export const getAwsCloudformationTemplate: typeof import("./getAwsCloudformationTemplate").getAwsCloudformationTemplate = null as any;
export const getAwsCloudformationTemplateOutput: typeof import("./getAwsCloudformationTemplate").getAwsCloudformationTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getAwsCloudformationTemplate","getAwsCloudformationTemplateOutput"], () => require("./getAwsCloudformationTemplate"));

export { GetAwsIamPolicyArgs, GetAwsIamPolicyResult, GetAwsIamPolicyOutputArgs } from "./getAwsIamPolicy";
export const getAwsIamPolicy: typeof import("./getAwsIamPolicy").getAwsIamPolicy = null as any;
export const getAwsIamPolicyOutput: typeof import("./getAwsIamPolicy").getAwsIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getAwsIamPolicy","getAwsIamPolicyOutput"], () => require("./getAwsIamPolicy"));

export { GetAzurePolicyArgs, GetAzurePolicyResult, GetAzurePolicyOutputArgs } from "./getAzurePolicy";
export const getAzurePolicy: typeof import("./getAzurePolicy").getAzurePolicy = null as any;
export const getAzurePolicyOutput: typeof import("./getAzurePolicy").getAzurePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getAzurePolicy","getAzurePolicyOutput"], () => require("./getAzurePolicy"));

export { GetCloudRuleArgs, GetCloudRuleResult, GetCloudRuleOutputArgs } from "./getCloudRule";
export const getCloudRule: typeof import("./getCloudRule").getCloudRule = null as any;
export const getCloudRuleOutput: typeof import("./getCloudRule").getCloudRuleOutput = null as any;
utilities.lazyLoad(exports, ["getCloudRule","getCloudRuleOutput"], () => require("./getCloudRule"));

export { GetComplianceCheckArgs, GetComplianceCheckResult, GetComplianceCheckOutputArgs } from "./getComplianceCheck";
export const getComplianceCheck: typeof import("./getComplianceCheck").getComplianceCheck = null as any;
export const getComplianceCheckOutput: typeof import("./getComplianceCheck").getComplianceCheckOutput = null as any;
utilities.lazyLoad(exports, ["getComplianceCheck","getComplianceCheckOutput"], () => require("./getComplianceCheck"));

export { GetComplianceStandardArgs, GetComplianceStandardResult, GetComplianceStandardOutputArgs } from "./getComplianceStandard";
export const getComplianceStandard: typeof import("./getComplianceStandard").getComplianceStandard = null as any;
export const getComplianceStandardOutput: typeof import("./getComplianceStandard").getComplianceStandardOutput = null as any;
utilities.lazyLoad(exports, ["getComplianceStandard","getComplianceStandardOutput"], () => require("./getComplianceStandard"));

export { GetGcpIamRoleArgs, GetGcpIamRoleResult, GetGcpIamRoleOutputArgs } from "./getGcpIamRole";
export const getGcpIamRole: typeof import("./getGcpIamRole").getGcpIamRole = null as any;
export const getGcpIamRoleOutput: typeof import("./getGcpIamRole").getGcpIamRoleOutput = null as any;
utilities.lazyLoad(exports, ["getGcpIamRole","getGcpIamRoleOutput"], () => require("./getGcpIamRole"));

export { GetOuArgs, GetOuResult, GetOuOutputArgs } from "./getOu";
export const getOu: typeof import("./getOu").getOu = null as any;
export const getOuOutput: typeof import("./getOu").getOuOutput = null as any;
utilities.lazyLoad(exports, ["getOu","getOuOutput"], () => require("./getOu"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetSamlGroupAssociationArgs, GetSamlGroupAssociationResult, GetSamlGroupAssociationOutputArgs } from "./getSamlGroupAssociation";
export const getSamlGroupAssociation: typeof import("./getSamlGroupAssociation").getSamlGroupAssociation = null as any;
export const getSamlGroupAssociationOutput: typeof import("./getSamlGroupAssociation").getSamlGroupAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getSamlGroupAssociation","getSamlGroupAssociationOutput"], () => require("./getSamlGroupAssociation"));

export { GetUserGroupArgs, GetUserGroupResult, GetUserGroupOutputArgs } from "./getUserGroup";
export const getUserGroup: typeof import("./getUserGroup").getUserGroup = null as any;
export const getUserGroupOutput: typeof import("./getUserGroup").getUserGroupOutput = null as any;
utilities.lazyLoad(exports, ["getUserGroup","getUserGroupOutput"], () => require("./getUserGroup"));

export { OuArgs, OuState } from "./ou";
export type Ou = import("./ou").Ou;
export const Ou: typeof import("./ou").Ou = null as any;
utilities.lazyLoad(exports, ["Ou"], () => require("./ou"));

export { OuCloudAccessRoleArgs, OuCloudAccessRoleState } from "./ouCloudAccessRole";
export type OuCloudAccessRole = import("./ouCloudAccessRole").OuCloudAccessRole;
export const OuCloudAccessRole: typeof import("./ouCloudAccessRole").OuCloudAccessRole = null as any;
utilities.lazyLoad(exports, ["OuCloudAccessRole"], () => require("./ouCloudAccessRole"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProjectCloudAccessRoleArgs, ProjectCloudAccessRoleState } from "./projectCloudAccessRole";
export type ProjectCloudAccessRole = import("./projectCloudAccessRole").ProjectCloudAccessRole;
export const ProjectCloudAccessRole: typeof import("./projectCloudAccessRole").ProjectCloudAccessRole = null as any;
utilities.lazyLoad(exports, ["ProjectCloudAccessRole"], () => require("./projectCloudAccessRole"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SamlGroupAssociationArgs, SamlGroupAssociationState } from "./samlGroupAssociation";
export type SamlGroupAssociation = import("./samlGroupAssociation").SamlGroupAssociation;
export const SamlGroupAssociation: typeof import("./samlGroupAssociation").SamlGroupAssociation = null as any;
utilities.lazyLoad(exports, ["SamlGroupAssociation"], () => require("./samlGroupAssociation"));

export { UserGroupArgs, UserGroupState } from "./userGroup";
export type UserGroup = import("./userGroup").UserGroup;
export const UserGroup: typeof import("./userGroup").UserGroup = null as any;
utilities.lazyLoad(exports, ["UserGroup"], () => require("./userGroup"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "cloudtamerio:index/awsCloudformationTemplate:AwsCloudformationTemplate":
                return new AwsCloudformationTemplate(name, <any>undefined, { urn })
            case "cloudtamerio:index/awsIamPolicy:AwsIamPolicy":
                return new AwsIamPolicy(name, <any>undefined, { urn })
            case "cloudtamerio:index/azurePolicy:AzurePolicy":
                return new AzurePolicy(name, <any>undefined, { urn })
            case "cloudtamerio:index/cloudRule:CloudRule":
                return new CloudRule(name, <any>undefined, { urn })
            case "cloudtamerio:index/complianceCheck:ComplianceCheck":
                return new ComplianceCheck(name, <any>undefined, { urn })
            case "cloudtamerio:index/complianceStandard:ComplianceStandard":
                return new ComplianceStandard(name, <any>undefined, { urn })
            case "cloudtamerio:index/gcpIamRole:GcpIamRole":
                return new GcpIamRole(name, <any>undefined, { urn })
            case "cloudtamerio:index/ou:Ou":
                return new Ou(name, <any>undefined, { urn })
            case "cloudtamerio:index/ouCloudAccessRole:OuCloudAccessRole":
                return new OuCloudAccessRole(name, <any>undefined, { urn })
            case "cloudtamerio:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "cloudtamerio:index/projectCloudAccessRole:ProjectCloudAccessRole":
                return new ProjectCloudAccessRole(name, <any>undefined, { urn })
            case "cloudtamerio:index/samlGroupAssociation:SamlGroupAssociation":
                return new SamlGroupAssociation(name, <any>undefined, { urn })
            case "cloudtamerio:index/userGroup:UserGroup":
                return new UserGroup(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("cloudtamerio", "index/awsCloudformationTemplate", _module)
pulumi.runtime.registerResourceModule("cloudtamerio", "index/awsIamPolicy", _module)
pulumi.runtime.registerResourceModule("cloudtamerio", "index/azurePolicy", _module)
pulumi.runtime.registerResourceModule("cloudtamerio", "index/cloudRule", _module)
pulumi.runtime.registerResourceModule("cloudtamerio", "index/complianceCheck", _module)
pulumi.runtime.registerResourceModule("cloudtamerio", "index/complianceStandard", _module)
pulumi.runtime.registerResourceModule("cloudtamerio", "index/gcpIamRole", _module)
pulumi.runtime.registerResourceModule("cloudtamerio", "index/ou", _module)
pulumi.runtime.registerResourceModule("cloudtamerio", "index/ouCloudAccessRole", _module)
pulumi.runtime.registerResourceModule("cloudtamerio", "index/project", _module)
pulumi.runtime.registerResourceModule("cloudtamerio", "index/projectCloudAccessRole", _module)
pulumi.runtime.registerResourceModule("cloudtamerio", "index/samlGroupAssociation", _module)
pulumi.runtime.registerResourceModule("cloudtamerio", "index/userGroup", _module)
pulumi.runtime.registerResourcePackage("cloudtamerio", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:cloudtamerio") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
