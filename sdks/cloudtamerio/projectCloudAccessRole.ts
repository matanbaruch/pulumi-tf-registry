// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ProjectCloudAccessRole extends pulumi.CustomResource {
    /**
     * Get an existing ProjectCloudAccessRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectCloudAccessRoleState, opts?: pulumi.CustomResourceOptions): ProjectCloudAccessRole {
        return new ProjectCloudAccessRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudtamerio:index/projectCloudAccessRole:ProjectCloudAccessRole';

    /**
     * Returns true if the given object is an instance of ProjectCloudAccessRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectCloudAccessRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectCloudAccessRole.__pulumiType;
    }

    /**
     * This field will be ignored if 'apply_to_all_accounts' is set to: true.
     */
    public readonly accounts!: pulumi.Output<outputs.ProjectCloudAccessRoleAccount[] | undefined>;
    public readonly applyToAllAccounts!: pulumi.Output<boolean | undefined>;
    public readonly awsIamPath!: pulumi.Output<string | undefined>;
    public readonly awsIamPermissionsBoundary!: pulumi.Output<number | undefined>;
    public readonly awsIamPolicies!: pulumi.Output<outputs.ProjectCloudAccessRoleAwsIamPolicy[] | undefined>;
    public readonly awsIamRoleName!: pulumi.Output<string>;
    public readonly azureRoleDefinitions!: pulumi.Output<outputs.ProjectCloudAccessRoleAzureRoleDefinition[] | undefined>;
    public readonly futureAccounts!: pulumi.Output<boolean | undefined>;
    public readonly lastUpdated!: pulumi.Output<string>;
    public readonly longTermAccessKeys!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly projectId!: pulumi.Output<number>;
    public readonly shortTermAccessKeys!: pulumi.Output<boolean | undefined>;
    public readonly userGroups!: pulumi.Output<outputs.ProjectCloudAccessRoleUserGroup[] | undefined>;
    public readonly users!: pulumi.Output<outputs.ProjectCloudAccessRoleUser[] | undefined>;
    public readonly webAccess!: pulumi.Output<boolean | undefined>;

    /**
     * Create a ProjectCloudAccessRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectCloudAccessRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectCloudAccessRoleArgs | ProjectCloudAccessRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectCloudAccessRoleState | undefined;
            resourceInputs["accounts"] = state ? state.accounts : undefined;
            resourceInputs["applyToAllAccounts"] = state ? state.applyToAllAccounts : undefined;
            resourceInputs["awsIamPath"] = state ? state.awsIamPath : undefined;
            resourceInputs["awsIamPermissionsBoundary"] = state ? state.awsIamPermissionsBoundary : undefined;
            resourceInputs["awsIamPolicies"] = state ? state.awsIamPolicies : undefined;
            resourceInputs["awsIamRoleName"] = state ? state.awsIamRoleName : undefined;
            resourceInputs["azureRoleDefinitions"] = state ? state.azureRoleDefinitions : undefined;
            resourceInputs["futureAccounts"] = state ? state.futureAccounts : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["longTermAccessKeys"] = state ? state.longTermAccessKeys : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["shortTermAccessKeys"] = state ? state.shortTermAccessKeys : undefined;
            resourceInputs["userGroups"] = state ? state.userGroups : undefined;
            resourceInputs["users"] = state ? state.users : undefined;
            resourceInputs["webAccess"] = state ? state.webAccess : undefined;
        } else {
            const args = argsOrState as ProjectCloudAccessRoleArgs | undefined;
            if ((!args || args.awsIamRoleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'awsIamRoleName'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["accounts"] = args ? args.accounts : undefined;
            resourceInputs["applyToAllAccounts"] = args ? args.applyToAllAccounts : undefined;
            resourceInputs["awsIamPath"] = args ? args.awsIamPath : undefined;
            resourceInputs["awsIamPermissionsBoundary"] = args ? args.awsIamPermissionsBoundary : undefined;
            resourceInputs["awsIamPolicies"] = args ? args.awsIamPolicies : undefined;
            resourceInputs["awsIamRoleName"] = args ? args.awsIamRoleName : undefined;
            resourceInputs["azureRoleDefinitions"] = args ? args.azureRoleDefinitions : undefined;
            resourceInputs["futureAccounts"] = args ? args.futureAccounts : undefined;
            resourceInputs["lastUpdated"] = args ? args.lastUpdated : undefined;
            resourceInputs["longTermAccessKeys"] = args ? args.longTermAccessKeys : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["shortTermAccessKeys"] = args ? args.shortTermAccessKeys : undefined;
            resourceInputs["userGroups"] = args ? args.userGroups : undefined;
            resourceInputs["users"] = args ? args.users : undefined;
            resourceInputs["webAccess"] = args ? args.webAccess : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectCloudAccessRole.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ProjectCloudAccessRole resources.
 */
export interface ProjectCloudAccessRoleState {
    /**
     * This field will be ignored if 'apply_to_all_accounts' is set to: true.
     */
    accounts?: pulumi.Input<pulumi.Input<inputs.ProjectCloudAccessRoleAccount>[]>;
    applyToAllAccounts?: pulumi.Input<boolean>;
    awsIamPath?: pulumi.Input<string>;
    awsIamPermissionsBoundary?: pulumi.Input<number>;
    awsIamPolicies?: pulumi.Input<pulumi.Input<inputs.ProjectCloudAccessRoleAwsIamPolicy>[]>;
    awsIamRoleName?: pulumi.Input<string>;
    azureRoleDefinitions?: pulumi.Input<pulumi.Input<inputs.ProjectCloudAccessRoleAzureRoleDefinition>[]>;
    futureAccounts?: pulumi.Input<boolean>;
    lastUpdated?: pulumi.Input<string>;
    longTermAccessKeys?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    projectId?: pulumi.Input<number>;
    shortTermAccessKeys?: pulumi.Input<boolean>;
    userGroups?: pulumi.Input<pulumi.Input<inputs.ProjectCloudAccessRoleUserGroup>[]>;
    users?: pulumi.Input<pulumi.Input<inputs.ProjectCloudAccessRoleUser>[]>;
    webAccess?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ProjectCloudAccessRole resource.
 */
export interface ProjectCloudAccessRoleArgs {
    /**
     * This field will be ignored if 'apply_to_all_accounts' is set to: true.
     */
    accounts?: pulumi.Input<pulumi.Input<inputs.ProjectCloudAccessRoleAccount>[]>;
    applyToAllAccounts?: pulumi.Input<boolean>;
    awsIamPath?: pulumi.Input<string>;
    awsIamPermissionsBoundary?: pulumi.Input<number>;
    awsIamPolicies?: pulumi.Input<pulumi.Input<inputs.ProjectCloudAccessRoleAwsIamPolicy>[]>;
    awsIamRoleName: pulumi.Input<string>;
    azureRoleDefinitions?: pulumi.Input<pulumi.Input<inputs.ProjectCloudAccessRoleAzureRoleDefinition>[]>;
    futureAccounts?: pulumi.Input<boolean>;
    lastUpdated?: pulumi.Input<string>;
    longTermAccessKeys?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    projectId: pulumi.Input<number>;
    shortTermAccessKeys?: pulumi.Input<boolean>;
    userGroups?: pulumi.Input<pulumi.Input<inputs.ProjectCloudAccessRoleUserGroup>[]>;
    users?: pulumi.Input<pulumi.Input<inputs.ProjectCloudAccessRoleUser>[]>;
    webAccess?: pulumi.Input<boolean>;
}
