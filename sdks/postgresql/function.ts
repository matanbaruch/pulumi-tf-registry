// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Function extends pulumi.CustomResource {
    /**
     * Get an existing Function resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FunctionState, opts?: pulumi.CustomResourceOptions): Function {
        return new Function(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'postgresql:index/function:Function';

    /**
     * Returns true if the given object is an instance of Function.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Function {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Function.__pulumiType;
    }

    /**
     * Function argument definitions.
     */
    public readonly args!: pulumi.Output<outputs.FunctionArg[] | undefined>;
    /**
     * Body of the function.
     */
    public readonly body!: pulumi.Output<string>;
    /**
     * The database where the function is located. If not specified, the provider default database is used.
     */
    public readonly database!: pulumi.Output<string>;
    /**
     * Automatically drop objects that depend on the function (such as operators or triggers), and in turn all objects that
     * depend on those objects.
     */
    public readonly dropCascade!: pulumi.Output<boolean | undefined>;
    /**
     * Language of theof the function. One of: internal, sql, c, plpgsql
     */
    public readonly language!: pulumi.Output<string | undefined>;
    /**
     * Name of the function.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * If the function can be executed in parallel for a single query execution. One of: UNSAFE, RESTRICTED, SAFE
     */
    public readonly parallel!: pulumi.Output<string | undefined>;
    /**
     * Function return type. If not specified, it will be calculated based on the output arguments
     */
    public readonly returns!: pulumi.Output<string>;
    /**
     * Schema where the function is located. If not specified, the provider default schema is used.
     */
    public readonly schema!: pulumi.Output<string>;
    /**
     * If the function should execute with the permissions of the function owner instead of the permissions of the caller.
     */
    public readonly securityDefiner!: pulumi.Output<boolean | undefined>;
    /**
     * If the function should always return NULL if any of it's inputs is NULL.
     */
    public readonly strict!: pulumi.Output<boolean | undefined>;
    /**
     * Volatility of the function. One of: VOLATILE, STABLE, IMMUTABLE.
     */
    public readonly volatility!: pulumi.Output<string | undefined>;

    /**
     * Create a Function resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FunctionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FunctionArgs | FunctionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FunctionState | undefined;
            resourceInputs["args"] = state ? state.args : undefined;
            resourceInputs["body"] = state ? state.body : undefined;
            resourceInputs["database"] = state ? state.database : undefined;
            resourceInputs["dropCascade"] = state ? state.dropCascade : undefined;
            resourceInputs["language"] = state ? state.language : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parallel"] = state ? state.parallel : undefined;
            resourceInputs["returns"] = state ? state.returns : undefined;
            resourceInputs["schema"] = state ? state.schema : undefined;
            resourceInputs["securityDefiner"] = state ? state.securityDefiner : undefined;
            resourceInputs["strict"] = state ? state.strict : undefined;
            resourceInputs["volatility"] = state ? state.volatility : undefined;
        } else {
            const args = argsOrState as FunctionArgs | undefined;
            if ((!args || args.body === undefined) && !opts.urn) {
                throw new Error("Missing required property 'body'");
            }
            resourceInputs["args"] = args ? args.args : undefined;
            resourceInputs["body"] = args ? args.body : undefined;
            resourceInputs["database"] = args ? args.database : undefined;
            resourceInputs["dropCascade"] = args ? args.dropCascade : undefined;
            resourceInputs["language"] = args ? args.language : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parallel"] = args ? args.parallel : undefined;
            resourceInputs["returns"] = args ? args.returns : undefined;
            resourceInputs["schema"] = args ? args.schema : undefined;
            resourceInputs["securityDefiner"] = args ? args.securityDefiner : undefined;
            resourceInputs["strict"] = args ? args.strict : undefined;
            resourceInputs["volatility"] = args ? args.volatility : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Function.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Function resources.
 */
export interface FunctionState {
    /**
     * Function argument definitions.
     */
    args?: pulumi.Input<pulumi.Input<inputs.FunctionArg>[]>;
    /**
     * Body of the function.
     */
    body?: pulumi.Input<string>;
    /**
     * The database where the function is located. If not specified, the provider default database is used.
     */
    database?: pulumi.Input<string>;
    /**
     * Automatically drop objects that depend on the function (such as operators or triggers), and in turn all objects that
     * depend on those objects.
     */
    dropCascade?: pulumi.Input<boolean>;
    /**
     * Language of theof the function. One of: internal, sql, c, plpgsql
     */
    language?: pulumi.Input<string>;
    /**
     * Name of the function.
     */
    name?: pulumi.Input<string>;
    /**
     * If the function can be executed in parallel for a single query execution. One of: UNSAFE, RESTRICTED, SAFE
     */
    parallel?: pulumi.Input<string>;
    /**
     * Function return type. If not specified, it will be calculated based on the output arguments
     */
    returns?: pulumi.Input<string>;
    /**
     * Schema where the function is located. If not specified, the provider default schema is used.
     */
    schema?: pulumi.Input<string>;
    /**
     * If the function should execute with the permissions of the function owner instead of the permissions of the caller.
     */
    securityDefiner?: pulumi.Input<boolean>;
    /**
     * If the function should always return NULL if any of it's inputs is NULL.
     */
    strict?: pulumi.Input<boolean>;
    /**
     * Volatility of the function. One of: VOLATILE, STABLE, IMMUTABLE.
     */
    volatility?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Function resource.
 */
export interface FunctionArgs {
    /**
     * Function argument definitions.
     */
    args?: pulumi.Input<pulumi.Input<inputs.FunctionArg>[]>;
    /**
     * Body of the function.
     */
    body: pulumi.Input<string>;
    /**
     * The database where the function is located. If not specified, the provider default database is used.
     */
    database?: pulumi.Input<string>;
    /**
     * Automatically drop objects that depend on the function (such as operators or triggers), and in turn all objects that
     * depend on those objects.
     */
    dropCascade?: pulumi.Input<boolean>;
    /**
     * Language of theof the function. One of: internal, sql, c, plpgsql
     */
    language?: pulumi.Input<string>;
    /**
     * Name of the function.
     */
    name?: pulumi.Input<string>;
    /**
     * If the function can be executed in parallel for a single query execution. One of: UNSAFE, RESTRICTED, SAFE
     */
    parallel?: pulumi.Input<string>;
    /**
     * Function return type. If not specified, it will be calculated based on the output arguments
     */
    returns?: pulumi.Input<string>;
    /**
     * Schema where the function is located. If not specified, the provider default schema is used.
     */
    schema?: pulumi.Input<string>;
    /**
     * If the function should execute with the permissions of the function owner instead of the permissions of the caller.
     */
    securityDefiner?: pulumi.Input<boolean>;
    /**
     * If the function should always return NULL if any of it's inputs is NULL.
     */
    strict?: pulumi.Input<boolean>;
    /**
     * Volatility of the function. One of: VOLATILE, STABLE, IMMUTABLE.
     */
    volatility?: pulumi.Input<string>;
}
