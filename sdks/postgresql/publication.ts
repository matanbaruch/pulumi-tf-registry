// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Publication extends pulumi.CustomResource {
    /**
     * Get an existing Publication resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PublicationState, opts?: pulumi.CustomResourceOptions): Publication {
        return new Publication(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'postgresql:index/publication:Publication';

    /**
     * Returns true if the given object is an instance of Publication.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Publication {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Publication.__pulumiType;
    }

    /**
     * Sets the tables list to publish to ALL tables
     */
    public readonly allTables!: pulumi.Output<boolean>;
    /**
     * Sets the database to add the publication for
     */
    public readonly database!: pulumi.Output<string>;
    /**
     * When true, will also drop all the objects that depend on the publication, and in turn all objects that depend on those
     * objects
     */
    public readonly dropCascade!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    /**
     * Sets the owner of the publication
     */
    public readonly owner!: pulumi.Output<string>;
    /**
     * Sets which DML operations will be published
     */
    public readonly publishParams!: pulumi.Output<string[]>;
    /**
     * Sets whether changes in a partitioned table using the identity and schema of the partitioned table
     */
    public readonly publishViaPartitionRootParam!: pulumi.Output<boolean | undefined>;
    /**
     * Sets the tables list to publish
     */
    public readonly tables!: pulumi.Output<string[]>;

    /**
     * Create a Publication resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PublicationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PublicationArgs | PublicationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PublicationState | undefined;
            resourceInputs["allTables"] = state ? state.allTables : undefined;
            resourceInputs["database"] = state ? state.database : undefined;
            resourceInputs["dropCascade"] = state ? state.dropCascade : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["publishParams"] = state ? state.publishParams : undefined;
            resourceInputs["publishViaPartitionRootParam"] = state ? state.publishViaPartitionRootParam : undefined;
            resourceInputs["tables"] = state ? state.tables : undefined;
        } else {
            const args = argsOrState as PublicationArgs | undefined;
            resourceInputs["allTables"] = args ? args.allTables : undefined;
            resourceInputs["database"] = args ? args.database : undefined;
            resourceInputs["dropCascade"] = args ? args.dropCascade : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["owner"] = args ? args.owner : undefined;
            resourceInputs["publishParams"] = args ? args.publishParams : undefined;
            resourceInputs["publishViaPartitionRootParam"] = args ? args.publishViaPartitionRootParam : undefined;
            resourceInputs["tables"] = args ? args.tables : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Publication.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Publication resources.
 */
export interface PublicationState {
    /**
     * Sets the tables list to publish to ALL tables
     */
    allTables?: pulumi.Input<boolean>;
    /**
     * Sets the database to add the publication for
     */
    database?: pulumi.Input<string>;
    /**
     * When true, will also drop all the objects that depend on the publication, and in turn all objects that depend on those
     * objects
     */
    dropCascade?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    /**
     * Sets the owner of the publication
     */
    owner?: pulumi.Input<string>;
    /**
     * Sets which DML operations will be published
     */
    publishParams?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Sets whether changes in a partitioned table using the identity and schema of the partitioned table
     */
    publishViaPartitionRootParam?: pulumi.Input<boolean>;
    /**
     * Sets the tables list to publish
     */
    tables?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Publication resource.
 */
export interface PublicationArgs {
    /**
     * Sets the tables list to publish to ALL tables
     */
    allTables?: pulumi.Input<boolean>;
    /**
     * Sets the database to add the publication for
     */
    database?: pulumi.Input<string>;
    /**
     * When true, will also drop all the objects that depend on the publication, and in turn all objects that depend on those
     * objects
     */
    dropCascade?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    /**
     * Sets the owner of the publication
     */
    owner?: pulumi.Input<string>;
    /**
     * Sets which DML operations will be published
     */
    publishParams?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Sets whether changes in a partitioned table using the identity and schema of the partitioned table
     */
    publishViaPartitionRootParam?: pulumi.Input<boolean>;
    /**
     * Sets the tables list to publish
     */
    tables?: pulumi.Input<pulumi.Input<string>[]>;
}
