// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Role extends pulumi.CustomResource {
    /**
     * Get an existing Role resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RoleState, opts?: pulumi.CustomResourceOptions): Role {
        return new Role(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'postgresql:index/role:Role';

    /**
     * Returns true if the given object is an instance of Role.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Role {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Role.__pulumiType;
    }

    /**
     * Role to switch to at login
     */
    public readonly assumeRole!: pulumi.Output<string | undefined>;
    /**
     * Determine whether a role bypasses every row-level security (RLS) policy
     */
    public readonly bypassRowLevelSecurity!: pulumi.Output<boolean | undefined>;
    /**
     * How many concurrent connections can be made with this role
     */
    public readonly connectionLimit!: pulumi.Output<number | undefined>;
    /**
     * Define a role's ability to create databases
     */
    public readonly createDatabase!: pulumi.Output<boolean | undefined>;
    /**
     * Determine whether this role will be permitted to create new roles
     */
    public readonly createRole!: pulumi.Output<boolean | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly encrypted!: pulumi.Output<string | undefined>;
    /**
     * Control whether the password is stored encrypted in the system catalogs
     */
    public readonly encryptedPassword!: pulumi.Output<boolean | undefined>;
    /**
     * Terminate any session with an open transaction that has been idle for longer than the specified duration in milliseconds
     */
    public readonly idleInTransactionSessionTimeout!: pulumi.Output<number | undefined>;
    /**
     * Determine whether a role "inherits" the privileges of roles it is a member of
     */
    public readonly inherit!: pulumi.Output<boolean | undefined>;
    /**
     * Determine whether a role is allowed to log in
     */
    public readonly login!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the role
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Sets the role's password
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Determine whether a role is allowed to initiate streaming replication or put the system in and out of backup mode
     */
    public readonly replication!: pulumi.Output<boolean | undefined>;
    /**
     * Role(s) to grant to this new role
     */
    public readonly roles!: pulumi.Output<string[] | undefined>;
    /**
     * Sets the role's search path
     */
    public readonly searchPaths!: pulumi.Output<string[] | undefined>;
    /**
     * Skip actually running the DROP ROLE command when removing a ROLE from PostgreSQL
     */
    public readonly skipDropRole!: pulumi.Output<boolean | undefined>;
    /**
     * Skip actually running the REASSIGN OWNED command when removing a role from PostgreSQL
     */
    public readonly skipReassignOwned!: pulumi.Output<boolean | undefined>;
    /**
     * Abort any statement that takes more than the specified number of milliseconds
     */
    public readonly statementTimeout!: pulumi.Output<number | undefined>;
    /**
     * Determine whether the new role is a "superuser"
     */
    public readonly superuser!: pulumi.Output<boolean | undefined>;
    /**
     * Sets a date and time after which the role's password is no longer valid
     */
    public readonly validUntil!: pulumi.Output<string | undefined>;

    /**
     * Create a Role resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RoleArgs | RoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RoleState | undefined;
            resourceInputs["assumeRole"] = state ? state.assumeRole : undefined;
            resourceInputs["bypassRowLevelSecurity"] = state ? state.bypassRowLevelSecurity : undefined;
            resourceInputs["connectionLimit"] = state ? state.connectionLimit : undefined;
            resourceInputs["createDatabase"] = state ? state.createDatabase : undefined;
            resourceInputs["createRole"] = state ? state.createRole : undefined;
            resourceInputs["encrypted"] = state ? state.encrypted : undefined;
            resourceInputs["encryptedPassword"] = state ? state.encryptedPassword : undefined;
            resourceInputs["idleInTransactionSessionTimeout"] = state ? state.idleInTransactionSessionTimeout : undefined;
            resourceInputs["inherit"] = state ? state.inherit : undefined;
            resourceInputs["login"] = state ? state.login : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["replication"] = state ? state.replication : undefined;
            resourceInputs["roles"] = state ? state.roles : undefined;
            resourceInputs["searchPaths"] = state ? state.searchPaths : undefined;
            resourceInputs["skipDropRole"] = state ? state.skipDropRole : undefined;
            resourceInputs["skipReassignOwned"] = state ? state.skipReassignOwned : undefined;
            resourceInputs["statementTimeout"] = state ? state.statementTimeout : undefined;
            resourceInputs["superuser"] = state ? state.superuser : undefined;
            resourceInputs["validUntil"] = state ? state.validUntil : undefined;
        } else {
            const args = argsOrState as RoleArgs | undefined;
            resourceInputs["assumeRole"] = args ? args.assumeRole : undefined;
            resourceInputs["bypassRowLevelSecurity"] = args ? args.bypassRowLevelSecurity : undefined;
            resourceInputs["connectionLimit"] = args ? args.connectionLimit : undefined;
            resourceInputs["createDatabase"] = args ? args.createDatabase : undefined;
            resourceInputs["createRole"] = args ? args.createRole : undefined;
            resourceInputs["encrypted"] = args ? args.encrypted : undefined;
            resourceInputs["encryptedPassword"] = args ? args.encryptedPassword : undefined;
            resourceInputs["idleInTransactionSessionTimeout"] = args ? args.idleInTransactionSessionTimeout : undefined;
            resourceInputs["inherit"] = args ? args.inherit : undefined;
            resourceInputs["login"] = args ? args.login : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["replication"] = args ? args.replication : undefined;
            resourceInputs["roles"] = args ? args.roles : undefined;
            resourceInputs["searchPaths"] = args ? args.searchPaths : undefined;
            resourceInputs["skipDropRole"] = args ? args.skipDropRole : undefined;
            resourceInputs["skipReassignOwned"] = args ? args.skipReassignOwned : undefined;
            resourceInputs["statementTimeout"] = args ? args.statementTimeout : undefined;
            resourceInputs["superuser"] = args ? args.superuser : undefined;
            resourceInputs["validUntil"] = args ? args.validUntil : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Role.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Role resources.
 */
export interface RoleState {
    /**
     * Role to switch to at login
     */
    assumeRole?: pulumi.Input<string>;
    /**
     * Determine whether a role bypasses every row-level security (RLS) policy
     */
    bypassRowLevelSecurity?: pulumi.Input<boolean>;
    /**
     * How many concurrent connections can be made with this role
     */
    connectionLimit?: pulumi.Input<number>;
    /**
     * Define a role's ability to create databases
     */
    createDatabase?: pulumi.Input<boolean>;
    /**
     * Determine whether this role will be permitted to create new roles
     */
    createRole?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    encrypted?: pulumi.Input<string>;
    /**
     * Control whether the password is stored encrypted in the system catalogs
     */
    encryptedPassword?: pulumi.Input<boolean>;
    /**
     * Terminate any session with an open transaction that has been idle for longer than the specified duration in milliseconds
     */
    idleInTransactionSessionTimeout?: pulumi.Input<number>;
    /**
     * Determine whether a role "inherits" the privileges of roles it is a member of
     */
    inherit?: pulumi.Input<boolean>;
    /**
     * Determine whether a role is allowed to log in
     */
    login?: pulumi.Input<boolean>;
    /**
     * The name of the role
     */
    name?: pulumi.Input<string>;
    /**
     * Sets the role's password
     */
    password?: pulumi.Input<string>;
    /**
     * Determine whether a role is allowed to initiate streaming replication or put the system in and out of backup mode
     */
    replication?: pulumi.Input<boolean>;
    /**
     * Role(s) to grant to this new role
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Sets the role's search path
     */
    searchPaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Skip actually running the DROP ROLE command when removing a ROLE from PostgreSQL
     */
    skipDropRole?: pulumi.Input<boolean>;
    /**
     * Skip actually running the REASSIGN OWNED command when removing a role from PostgreSQL
     */
    skipReassignOwned?: pulumi.Input<boolean>;
    /**
     * Abort any statement that takes more than the specified number of milliseconds
     */
    statementTimeout?: pulumi.Input<number>;
    /**
     * Determine whether the new role is a "superuser"
     */
    superuser?: pulumi.Input<boolean>;
    /**
     * Sets a date and time after which the role's password is no longer valid
     */
    validUntil?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Role resource.
 */
export interface RoleArgs {
    /**
     * Role to switch to at login
     */
    assumeRole?: pulumi.Input<string>;
    /**
     * Determine whether a role bypasses every row-level security (RLS) policy
     */
    bypassRowLevelSecurity?: pulumi.Input<boolean>;
    /**
     * How many concurrent connections can be made with this role
     */
    connectionLimit?: pulumi.Input<number>;
    /**
     * Define a role's ability to create databases
     */
    createDatabase?: pulumi.Input<boolean>;
    /**
     * Determine whether this role will be permitted to create new roles
     */
    createRole?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    encrypted?: pulumi.Input<string>;
    /**
     * Control whether the password is stored encrypted in the system catalogs
     */
    encryptedPassword?: pulumi.Input<boolean>;
    /**
     * Terminate any session with an open transaction that has been idle for longer than the specified duration in milliseconds
     */
    idleInTransactionSessionTimeout?: pulumi.Input<number>;
    /**
     * Determine whether a role "inherits" the privileges of roles it is a member of
     */
    inherit?: pulumi.Input<boolean>;
    /**
     * Determine whether a role is allowed to log in
     */
    login?: pulumi.Input<boolean>;
    /**
     * The name of the role
     */
    name?: pulumi.Input<string>;
    /**
     * Sets the role's password
     */
    password?: pulumi.Input<string>;
    /**
     * Determine whether a role is allowed to initiate streaming replication or put the system in and out of backup mode
     */
    replication?: pulumi.Input<boolean>;
    /**
     * Role(s) to grant to this new role
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Sets the role's search path
     */
    searchPaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Skip actually running the DROP ROLE command when removing a ROLE from PostgreSQL
     */
    skipDropRole?: pulumi.Input<boolean>;
    /**
     * Skip actually running the REASSIGN OWNED command when removing a role from PostgreSQL
     */
    skipReassignOwned?: pulumi.Input<boolean>;
    /**
     * Abort any statement that takes more than the specified number of milliseconds
     */
    statementTimeout?: pulumi.Input<number>;
    /**
     * Determine whether the new role is a "superuser"
     */
    superuser?: pulumi.Input<boolean>;
    /**
     * Sets a date and time after which the role's password is no longer valid
     */
    validUntil?: pulumi.Input<string>;
}
