// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getSchemas(args: GetSchemasArgs, opts?: pulumi.InvokeOptions): Promise<GetSchemasResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("postgresql:index/getSchemas:getSchemas", {
        "database": args.database,
        "id": args.id,
        "includeSystemSchemas": args.includeSystemSchemas,
        "likeAllPatterns": args.likeAllPatterns,
        "likeAnyPatterns": args.likeAnyPatterns,
        "notLikeAllPatterns": args.notLikeAllPatterns,
        "regexPattern": args.regexPattern,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSchemas.
 */
export interface GetSchemasArgs {
    database: string;
    id?: string;
    includeSystemSchemas?: boolean;
    likeAllPatterns?: string[];
    likeAnyPatterns?: string[];
    notLikeAllPatterns?: string[];
    regexPattern?: string;
}

/**
 * A collection of values returned by getSchemas.
 */
export interface GetSchemasResult {
    readonly database: string;
    readonly id: string;
    readonly includeSystemSchemas?: boolean;
    readonly likeAllPatterns?: string[];
    readonly likeAnyPatterns?: string[];
    readonly notLikeAllPatterns?: string[];
    readonly regexPattern?: string;
    readonly schemas: string[];
}
export function getSchemasOutput(args: GetSchemasOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSchemasResult> {
    return pulumi.output(args).apply((a: any) => getSchemas(a, opts))
}

/**
 * A collection of arguments for invoking getSchemas.
 */
export interface GetSchemasOutputArgs {
    database: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    includeSystemSchemas?: pulumi.Input<boolean>;
    likeAllPatterns?: pulumi.Input<pulumi.Input<string>[]>;
    likeAnyPatterns?: pulumi.Input<pulumi.Input<string>[]>;
    notLikeAllPatterns?: pulumi.Input<pulumi.Input<string>[]>;
    regexPattern?: pulumi.Input<string>;
}
