// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface GetTemplatePostrender {
    /**
     * The command binary path.
     */
    binaryPath: string;
}

export interface GetTemplateSet {
    name: string;
    type?: string;
    value: string;
}

export interface GetTemplateSetList {
    name: string;
    values: string[];
}

export interface GetTemplateSetSensitive {
    name: string;
    type?: string;
    value: string;
}

export interface GetTemplateSetString {
    name: string;
    value: string;
}

export interface ReleaseMetadata {
    appVersion: string;
    chart: string;
    firstDeployed: number;
    lastDeployed: number;
    name: string;
    namespace: string;
    notes: string;
    revision: number;
    values: string;
    version: string;
}

export interface ReleasePostrender {
    /**
     * an argument to the post-renderer (can specify multiple)
     */
    args?: string[];
    /**
     * The command binary path.
     */
    binaryPath: string;
}

export interface ReleaseSet {
    name: string;
    type?: string;
    value: string;
}

export interface ReleaseSetList {
    name: string;
    values: string[];
}

export interface ReleaseSetSensitive {
    name: string;
    type?: string;
    value: string;
}

export namespace config {
    export interface Experiments {
        /**
         * Enable full diff by storing the rendered manifest in the state. This has similar limitations as when using helm install --dry-run. See https://helm.sh/docs/chart_best_practices/custom_resource_definitions/#install-a-crd-declaration-before-using-the-resource
         */
        manifest?: boolean;
    }

    export interface Kubernetes {
        /**
         * PEM-encoded client certificate for TLS authentication.
         */
        clientCertificate?: string;
        /**
         * PEM-encoded client certificate key for TLS authentication.
         */
        clientKey?: string;
        /**
         * PEM-encoded root certificates bundle for TLS authentication.
         */
        clusterCaCertificate?: string;
        configContext?: string;
        configContextAuthInfo?: string;
        configContextCluster?: string;
        /**
         * Path to the kube config file. Can be set with KUBE_CONFIG_PATH.
         */
        configPath?: string;
        /**
         * A list of paths to kube config files. Can be set with KUBE_CONFIG_PATHS environment variable.
         */
        configPaths?: string[];
        exec?: outputs.config.KubernetesExec;
        /**
         * The hostname (in form of URI) of Kubernetes master.
         */
        host?: string;
        /**
         * Whether server should be accessed without verifying the TLS certificate.
         */
        insecure?: boolean;
        /**
         * The password to use for HTTP basic authentication when accessing the Kubernetes master endpoint.
         */
        password?: string;
        /**
         * URL to the proxy to be used for all API requests
         */
        proxyUrl?: string;
        /**
         * Server name passed to the server for SNI and is used in the client to check server certificates against.
         */
        tlsServerName?: string;
        /**
         * Token to authenticate an service account
         */
        token?: string;
        /**
         * The username to use for HTTP basic authentication when accessing the Kubernetes master endpoint.
         */
        username?: string;
    }

    export interface KubernetesExec {
        apiVersion: string;
        args?: string[];
        command: string;
        env?: {[key: string]: string};
    }

    export interface Registries {
        /**
         * The password to use for the OCI HTTP basic authentication when accessing the Kubernetes master endpoint.
         */
        password: string;
        /**
         * OCI URL in form of oci://host:port or oci://host
         */
        url: string;
        /**
         * The username to use for the OCI HTTP basic authentication when accessing the Kubernetes master endpoint.
         */
        username: string;
    }

}
