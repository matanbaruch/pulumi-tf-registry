// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getTemplate(args: GetTemplateArgs, opts?: pulumi.InvokeOptions): Promise<GetTemplateResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("helm:index/getTemplate:getTemplate", {
        "apiVersions": args.apiVersions,
        "atomic": args.atomic,
        "chart": args.chart,
        "crds": args.crds,
        "createNamespace": args.createNamespace,
        "dependencyUpdate": args.dependencyUpdate,
        "description": args.description,
        "devel": args.devel,
        "disableOpenapiValidation": args.disableOpenapiValidation,
        "disableWebhooks": args.disableWebhooks,
        "id": args.id,
        "includeCrds": args.includeCrds,
        "isUpgrade": args.isUpgrade,
        "keyring": args.keyring,
        "kubeVersion": args.kubeVersion,
        "manifest": args.manifest,
        "manifests": args.manifests,
        "name": args.name,
        "namespace": args.namespace,
        "notes": args.notes,
        "passCredentials": args.passCredentials,
        "postrender": args.postrender,
        "renderSubchartNotes": args.renderSubchartNotes,
        "replace": args.replace,
        "repository": args.repository,
        "repositoryCaFile": args.repositoryCaFile,
        "repositoryCertFile": args.repositoryCertFile,
        "repositoryKeyFile": args.repositoryKeyFile,
        "repositoryPassword": args.repositoryPassword,
        "repositoryUsername": args.repositoryUsername,
        "resetValues": args.resetValues,
        "reuseValues": args.reuseValues,
        "setLists": args.setLists,
        "setSensitives": args.setSensitives,
        "setStrings": args.setStrings,
        "sets": args.sets,
        "showOnlies": args.showOnlies,
        "skipCrds": args.skipCrds,
        "skipTests": args.skipTests,
        "timeout": args.timeout,
        "validate": args.validate,
        "values": args.values,
        "verify": args.verify,
        "version": args.version,
        "wait": args.wait,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getTemplate.
 */
export interface GetTemplateArgs {
    apiVersions?: string[];
    atomic?: boolean;
    chart: string;
    crds?: string[];
    createNamespace?: boolean;
    dependencyUpdate?: boolean;
    description?: string;
    devel?: boolean;
    disableOpenapiValidation?: boolean;
    disableWebhooks?: boolean;
    id?: string;
    includeCrds?: boolean;
    isUpgrade?: boolean;
    keyring?: string;
    kubeVersion?: string;
    manifest?: string;
    manifests?: {[key: string]: string};
    name: string;
    namespace?: string;
    notes?: string;
    passCredentials?: boolean;
    postrender?: inputs.GetTemplatePostrender;
    renderSubchartNotes?: boolean;
    replace?: boolean;
    repository?: string;
    repositoryCaFile?: string;
    repositoryCertFile?: string;
    repositoryKeyFile?: string;
    repositoryPassword?: string;
    repositoryUsername?: string;
    resetValues?: boolean;
    reuseValues?: boolean;
    setLists?: inputs.GetTemplateSetList[];
    setSensitives?: inputs.GetTemplateSetSensitive[];
    /**
     * @deprecated Deprecated
     */
    setStrings?: inputs.GetTemplateSetString[];
    sets?: inputs.GetTemplateSet[];
    showOnlies?: string[];
    skipCrds?: boolean;
    skipTests?: boolean;
    timeout?: number;
    validate?: boolean;
    values?: string[];
    verify?: boolean;
    version?: string;
    wait?: boolean;
}

/**
 * A collection of values returned by getTemplate.
 */
export interface GetTemplateResult {
    readonly apiVersions?: string[];
    readonly atomic?: boolean;
    readonly chart: string;
    readonly crds: string[];
    readonly createNamespace?: boolean;
    readonly dependencyUpdate?: boolean;
    readonly description?: string;
    readonly devel?: boolean;
    readonly disableOpenapiValidation?: boolean;
    readonly disableWebhooks?: boolean;
    readonly id: string;
    readonly includeCrds?: boolean;
    readonly isUpgrade?: boolean;
    readonly keyring?: string;
    readonly kubeVersion?: string;
    readonly manifest: string;
    readonly manifests: {[key: string]: string};
    readonly name: string;
    readonly namespace?: string;
    readonly notes: string;
    readonly passCredentials?: boolean;
    readonly postrender?: outputs.GetTemplatePostrender;
    readonly renderSubchartNotes?: boolean;
    readonly replace?: boolean;
    readonly repository?: string;
    readonly repositoryCaFile?: string;
    readonly repositoryCertFile?: string;
    readonly repositoryKeyFile?: string;
    readonly repositoryPassword?: string;
    readonly repositoryUsername?: string;
    readonly resetValues?: boolean;
    readonly reuseValues?: boolean;
    readonly setLists?: outputs.GetTemplateSetList[];
    readonly setSensitives?: outputs.GetTemplateSetSensitive[];
    /**
     * @deprecated Deprecated
     */
    readonly setStrings?: outputs.GetTemplateSetString[];
    readonly sets?: outputs.GetTemplateSet[];
    readonly showOnlies?: string[];
    readonly skipCrds?: boolean;
    readonly skipTests?: boolean;
    readonly timeout?: number;
    readonly validate?: boolean;
    readonly values?: string[];
    readonly verify?: boolean;
    readonly version: string;
    readonly wait?: boolean;
}
export function getTemplateOutput(args: GetTemplateOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTemplateResult> {
    return pulumi.output(args).apply((a: any) => getTemplate(a, opts))
}

/**
 * A collection of arguments for invoking getTemplate.
 */
export interface GetTemplateOutputArgs {
    apiVersions?: pulumi.Input<pulumi.Input<string>[]>;
    atomic?: pulumi.Input<boolean>;
    chart: pulumi.Input<string>;
    crds?: pulumi.Input<pulumi.Input<string>[]>;
    createNamespace?: pulumi.Input<boolean>;
    dependencyUpdate?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    devel?: pulumi.Input<boolean>;
    disableOpenapiValidation?: pulumi.Input<boolean>;
    disableWebhooks?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    includeCrds?: pulumi.Input<boolean>;
    isUpgrade?: pulumi.Input<boolean>;
    keyring?: pulumi.Input<string>;
    kubeVersion?: pulumi.Input<string>;
    manifest?: pulumi.Input<string>;
    manifests?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    notes?: pulumi.Input<string>;
    passCredentials?: pulumi.Input<boolean>;
    postrender?: pulumi.Input<inputs.GetTemplatePostrenderArgs>;
    renderSubchartNotes?: pulumi.Input<boolean>;
    replace?: pulumi.Input<boolean>;
    repository?: pulumi.Input<string>;
    repositoryCaFile?: pulumi.Input<string>;
    repositoryCertFile?: pulumi.Input<string>;
    repositoryKeyFile?: pulumi.Input<string>;
    repositoryPassword?: pulumi.Input<string>;
    repositoryUsername?: pulumi.Input<string>;
    resetValues?: pulumi.Input<boolean>;
    reuseValues?: pulumi.Input<boolean>;
    setLists?: pulumi.Input<pulumi.Input<inputs.GetTemplateSetListArgs>[]>;
    setSensitives?: pulumi.Input<pulumi.Input<inputs.GetTemplateSetSensitiveArgs>[]>;
    /**
     * @deprecated Deprecated
     */
    setStrings?: pulumi.Input<pulumi.Input<inputs.GetTemplateSetStringArgs>[]>;
    sets?: pulumi.Input<pulumi.Input<inputs.GetTemplateSetArgs>[]>;
    showOnlies?: pulumi.Input<pulumi.Input<string>[]>;
    skipCrds?: pulumi.Input<boolean>;
    skipTests?: pulumi.Input<boolean>;
    timeout?: pulumi.Input<number>;
    validate?: pulumi.Input<boolean>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
    verify?: pulumi.Input<boolean>;
    version?: pulumi.Input<string>;
    wait?: pulumi.Input<boolean>;
}
