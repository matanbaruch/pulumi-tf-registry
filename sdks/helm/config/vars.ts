// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

declare var exports: any;
const __config = new pulumi.Config("helm");

/**
 * Helm burst limit. Increase this if you have a cluster with many CRDs
 */
export declare const burstLimit: number | undefined;
Object.defineProperty(exports, "burstLimit", {
    get() {
        return __config.getObject<number>("burstLimit");
    },
    enumerable: true,
});

/**
 * Debug indicates whether or not Helm is running in Debug mode.
 */
export declare const debug: boolean | undefined;
Object.defineProperty(exports, "debug", {
    get() {
        return __config.getObject<boolean>("debug");
    },
    enumerable: true,
});

/**
 * Enable and disable experimental features.
 */
export declare const experiments: outputs.config.Experiments | undefined;
Object.defineProperty(exports, "experiments", {
    get() {
        return __config.getObject<outputs.config.Experiments>("experiments");
    },
    enumerable: true,
});

/**
 * The backend storage driver. Values are: configmap, secret, memory, sql
 */
export declare const helmDriver: string | undefined;
Object.defineProperty(exports, "helmDriver", {
    get() {
        return __config.get("helmDriver");
    },
    enumerable: true,
});

/**
 * Kubernetes configuration.
 */
export declare const kubernetes: outputs.config.Kubernetes | undefined;
Object.defineProperty(exports, "kubernetes", {
    get() {
        return __config.getObject<outputs.config.Kubernetes>("kubernetes");
    },
    enumerable: true,
});

/**
 * The path to the helm plugins directory
 */
export declare const pluginsPath: string | undefined;
Object.defineProperty(exports, "pluginsPath", {
    get() {
        return __config.get("pluginsPath");
    },
    enumerable: true,
});

/**
 * RegistryClient configuration.
 */
export declare const registries: outputs.config.Registries[] | undefined;
Object.defineProperty(exports, "registries", {
    get() {
        return __config.getObject<outputs.config.Registries[]>("registries");
    },
    enumerable: true,
});

/**
 * The path to the registry config file
 */
export declare const registryConfigPath: string | undefined;
Object.defineProperty(exports, "registryConfigPath", {
    get() {
        return __config.get("registryConfigPath");
    },
    enumerable: true,
});

/**
 * The path to the file containing cached repository indexes
 */
export declare const repositoryCache: string | undefined;
Object.defineProperty(exports, "repositoryCache", {
    get() {
        return __config.get("repositoryCache");
    },
    enumerable: true,
});

/**
 * The path to the file containing repository names and URLs
 */
export declare const repositoryConfigPath: string | undefined;
Object.defineProperty(exports, "repositoryConfigPath", {
    get() {
        return __config.get("repositoryConfigPath");
    },
    enumerable: true,
});

