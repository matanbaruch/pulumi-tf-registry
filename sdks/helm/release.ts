// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Release extends pulumi.CustomResource {
    /**
     * Get an existing Release resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ReleaseState, opts?: pulumi.CustomResourceOptions): Release {
        return new Release(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'helm:index/release:Release';

    /**
     * Returns true if the given object is an instance of Release.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Release {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Release.__pulumiType;
    }

    /**
     * If set, installation process purges chart on fail. The wait flag will be set automatically if atomic is used. Defaults
     * to `false`.
     */
    public readonly atomic!: pulumi.Output<boolean | undefined>;
    /**
     * Chart name to be installed. A path may be used.
     */
    public readonly chart!: pulumi.Output<string>;
    /**
     * Allow deletion of new resources created in this upgrade when upgrade fails. Defaults to `false`.
     */
    public readonly cleanupOnFail!: pulumi.Output<boolean | undefined>;
    /**
     * Create the namespace if it does not exist. Defaults to `false`.
     */
    public readonly createNamespace!: pulumi.Output<boolean | undefined>;
    /**
     * Run helm dependency update before installing the chart. Defaults to `false`.
     */
    public readonly dependencyUpdate!: pulumi.Output<boolean | undefined>;
    /**
     * Add a custom description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Use chart development versions, too. Equivalent to version '>0.0.0-0'. If `version` is set, this is ignored
     */
    public readonly devel!: pulumi.Output<boolean | undefined>;
    /**
     * Prevent CRD hooks from, running, but run other hooks. See helm install --no-crd-hook
     */
    public readonly disableCrdHooks!: pulumi.Output<boolean | undefined>;
    /**
     * If set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema. Defaults to
     * `false`.
     */
    public readonly disableOpenapiValidation!: pulumi.Output<boolean | undefined>;
    /**
     * Prevent hooks from running.Defaults to `false`.
     */
    public readonly disableWebhooks!: pulumi.Output<boolean | undefined>;
    /**
     * Force resource update through delete/recreate if needed. Defaults to `false`.
     */
    public readonly forceUpdate!: pulumi.Output<boolean | undefined>;
    /**
     * Location of public keys used for verification. Used only if `verify` is true. Defaults to `/.gnupg/pubring.gpg` in the
     * location set by `home`.
     */
    public readonly keyring!: pulumi.Output<string | undefined>;
    /**
     * Run helm lint when planning. Defaults to `false`.
     */
    public readonly lint!: pulumi.Output<boolean | undefined>;
    /**
     * The rendered manifest as JSON.
     */
    public /*out*/ readonly manifest!: pulumi.Output<string>;
    /**
     * Limit the maximum number of revisions saved per release. Use 0 for no limit. Defaults to 0 (no limit).
     */
    public readonly maxHistory!: pulumi.Output<number | undefined>;
    /**
     * Status of the deployed release.
     */
    public /*out*/ readonly metadatas!: pulumi.Output<outputs.ReleaseMetadata[]>;
    /**
     * Release name. The length must not be longer than 53 characters.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Namespace to install the release into. Defaults to `default`.
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * Pass credentials to all domains. Defaults to `false`.
     */
    public readonly passCredentials!: pulumi.Output<boolean | undefined>;
    /**
     * Postrender command configuration.
     */
    public readonly postrender!: pulumi.Output<outputs.ReleasePostrender | undefined>;
    /**
     * Perform pods restart during upgrade/rollback. Defaults to `false`.
     */
    public readonly recreatePods!: pulumi.Output<boolean | undefined>;
    /**
     * If set, render subchart notes along with the parent. Defaults to `true`.
     */
    public readonly renderSubchartNotes!: pulumi.Output<boolean | undefined>;
    /**
     * Re-use the given name, even if that name is already used. This is unsafe in production. Defaults to `false`.
     */
    public readonly replace!: pulumi.Output<boolean | undefined>;
    /**
     * Repository where to locate the requested chart. If is a URL the chart is installed without installing the repository.
     */
    public readonly repository!: pulumi.Output<string | undefined>;
    /**
     * The Repositories CA File
     */
    public readonly repositoryCaFile!: pulumi.Output<string | undefined>;
    /**
     * The repositories cert file
     */
    public readonly repositoryCertFile!: pulumi.Output<string | undefined>;
    /**
     * The repositories cert key file
     */
    public readonly repositoryKeyFile!: pulumi.Output<string | undefined>;
    /**
     * Password for HTTP basic authentication
     */
    public readonly repositoryPassword!: pulumi.Output<string | undefined>;
    /**
     * Username for HTTP basic authentication
     */
    public readonly repositoryUsername!: pulumi.Output<string | undefined>;
    /**
     * When upgrading, reset the values to the ones built into the chart. Defaults to `false`.
     */
    public readonly resetValues!: pulumi.Output<boolean | undefined>;
    /**
     * When upgrading, reuse the last release's values and merge in any overrides. If 'reset_values' is specified, this is
     * ignored. Defaults to `false`.
     */
    public readonly reuseValues!: pulumi.Output<boolean | undefined>;
    /**
     * Custom list values to be merged with the values.
     */
    public readonly setLists!: pulumi.Output<outputs.ReleaseSetList[] | undefined>;
    /**
     * Custom sensitive values to be merged with the values.
     */
    public readonly setSensitives!: pulumi.Output<outputs.ReleaseSetSensitive[] | undefined>;
    /**
     * Custom values to be merged with the values.
     */
    public readonly sets!: pulumi.Output<outputs.ReleaseSet[] | undefined>;
    /**
     * If set, no CRDs will be installed. By default, CRDs are installed if not already present. Defaults to `false`.
     */
    public readonly skipCrds!: pulumi.Output<boolean | undefined>;
    /**
     * Status of the release.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Time in seconds to wait for any individual kubernetes operation. Defaults to 300 seconds.
     */
    public readonly timeout!: pulumi.Output<number | undefined>;
    /**
     * If true, the provider will install the release at the specified version even if a release not controlled by the provider
     * is present: this is equivalent to running 'helm upgrade --install' with the Helm CLI. WARNING: this may not be suitable
     * for production use -- see the 'Upgrade Mode' note in the provider documentation. Defaults to `false`.
     */
    public readonly upgradeInstall!: pulumi.Output<boolean | undefined>;
    /**
     * List of values in raw yaml format to pass to helm.
     */
    public readonly values!: pulumi.Output<string[] | undefined>;
    /**
     * Verify the package before installing it.Defaults to `false`.
     */
    public readonly verify!: pulumi.Output<boolean | undefined>;
    /**
     * Specify the exact chart version to install. If this is not specified, the latest version is installed.
     */
    public readonly version!: pulumi.Output<string>;
    /**
     * Will wait until all resources are in a ready state before marking the release as successful. Defaults to `true`.
     */
    public readonly wait!: pulumi.Output<boolean | undefined>;
    /**
     * If wait is enabled, will wait until all Jobs have been completed before marking the release as successful. Defaults to
     * `false``.
     */
    public readonly waitForJobs!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Release resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ReleaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ReleaseArgs | ReleaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ReleaseState | undefined;
            resourceInputs["atomic"] = state ? state.atomic : undefined;
            resourceInputs["chart"] = state ? state.chart : undefined;
            resourceInputs["cleanupOnFail"] = state ? state.cleanupOnFail : undefined;
            resourceInputs["createNamespace"] = state ? state.createNamespace : undefined;
            resourceInputs["dependencyUpdate"] = state ? state.dependencyUpdate : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["devel"] = state ? state.devel : undefined;
            resourceInputs["disableCrdHooks"] = state ? state.disableCrdHooks : undefined;
            resourceInputs["disableOpenapiValidation"] = state ? state.disableOpenapiValidation : undefined;
            resourceInputs["disableWebhooks"] = state ? state.disableWebhooks : undefined;
            resourceInputs["forceUpdate"] = state ? state.forceUpdate : undefined;
            resourceInputs["keyring"] = state ? state.keyring : undefined;
            resourceInputs["lint"] = state ? state.lint : undefined;
            resourceInputs["manifest"] = state ? state.manifest : undefined;
            resourceInputs["maxHistory"] = state ? state.maxHistory : undefined;
            resourceInputs["metadatas"] = state ? state.metadatas : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["passCredentials"] = state ? state.passCredentials : undefined;
            resourceInputs["postrender"] = state ? state.postrender : undefined;
            resourceInputs["recreatePods"] = state ? state.recreatePods : undefined;
            resourceInputs["renderSubchartNotes"] = state ? state.renderSubchartNotes : undefined;
            resourceInputs["replace"] = state ? state.replace : undefined;
            resourceInputs["repository"] = state ? state.repository : undefined;
            resourceInputs["repositoryCaFile"] = state ? state.repositoryCaFile : undefined;
            resourceInputs["repositoryCertFile"] = state ? state.repositoryCertFile : undefined;
            resourceInputs["repositoryKeyFile"] = state ? state.repositoryKeyFile : undefined;
            resourceInputs["repositoryPassword"] = state ? state.repositoryPassword : undefined;
            resourceInputs["repositoryUsername"] = state ? state.repositoryUsername : undefined;
            resourceInputs["resetValues"] = state ? state.resetValues : undefined;
            resourceInputs["reuseValues"] = state ? state.reuseValues : undefined;
            resourceInputs["setLists"] = state ? state.setLists : undefined;
            resourceInputs["setSensitives"] = state ? state.setSensitives : undefined;
            resourceInputs["sets"] = state ? state.sets : undefined;
            resourceInputs["skipCrds"] = state ? state.skipCrds : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["upgradeInstall"] = state ? state.upgradeInstall : undefined;
            resourceInputs["values"] = state ? state.values : undefined;
            resourceInputs["verify"] = state ? state.verify : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["wait"] = state ? state.wait : undefined;
            resourceInputs["waitForJobs"] = state ? state.waitForJobs : undefined;
        } else {
            const args = argsOrState as ReleaseArgs | undefined;
            if ((!args || args.chart === undefined) && !opts.urn) {
                throw new Error("Missing required property 'chart'");
            }
            resourceInputs["atomic"] = args ? args.atomic : undefined;
            resourceInputs["chart"] = args ? args.chart : undefined;
            resourceInputs["cleanupOnFail"] = args ? args.cleanupOnFail : undefined;
            resourceInputs["createNamespace"] = args ? args.createNamespace : undefined;
            resourceInputs["dependencyUpdate"] = args ? args.dependencyUpdate : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["devel"] = args ? args.devel : undefined;
            resourceInputs["disableCrdHooks"] = args ? args.disableCrdHooks : undefined;
            resourceInputs["disableOpenapiValidation"] = args ? args.disableOpenapiValidation : undefined;
            resourceInputs["disableWebhooks"] = args ? args.disableWebhooks : undefined;
            resourceInputs["forceUpdate"] = args ? args.forceUpdate : undefined;
            resourceInputs["keyring"] = args ? args.keyring : undefined;
            resourceInputs["lint"] = args ? args.lint : undefined;
            resourceInputs["maxHistory"] = args ? args.maxHistory : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["passCredentials"] = args ? args.passCredentials : undefined;
            resourceInputs["postrender"] = args ? args.postrender : undefined;
            resourceInputs["recreatePods"] = args ? args.recreatePods : undefined;
            resourceInputs["renderSubchartNotes"] = args ? args.renderSubchartNotes : undefined;
            resourceInputs["replace"] = args ? args.replace : undefined;
            resourceInputs["repository"] = args ? args.repository : undefined;
            resourceInputs["repositoryCaFile"] = args ? args.repositoryCaFile : undefined;
            resourceInputs["repositoryCertFile"] = args ? args.repositoryCertFile : undefined;
            resourceInputs["repositoryKeyFile"] = args ? args.repositoryKeyFile : undefined;
            resourceInputs["repositoryPassword"] = args?.repositoryPassword ? pulumi.secret(args.repositoryPassword) : undefined;
            resourceInputs["repositoryUsername"] = args ? args.repositoryUsername : undefined;
            resourceInputs["resetValues"] = args ? args.resetValues : undefined;
            resourceInputs["reuseValues"] = args ? args.reuseValues : undefined;
            resourceInputs["setLists"] = args ? args.setLists : undefined;
            resourceInputs["setSensitives"] = args ? args.setSensitives : undefined;
            resourceInputs["sets"] = args ? args.sets : undefined;
            resourceInputs["skipCrds"] = args ? args.skipCrds : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["upgradeInstall"] = args ? args.upgradeInstall : undefined;
            resourceInputs["values"] = args ? args.values : undefined;
            resourceInputs["verify"] = args ? args.verify : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["wait"] = args ? args.wait : undefined;
            resourceInputs["waitForJobs"] = args ? args.waitForJobs : undefined;
            resourceInputs["manifest"] = undefined /*out*/;
            resourceInputs["metadatas"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["repositoryPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Release.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Release resources.
 */
export interface ReleaseState {
    /**
     * If set, installation process purges chart on fail. The wait flag will be set automatically if atomic is used. Defaults
     * to `false`.
     */
    atomic?: pulumi.Input<boolean>;
    /**
     * Chart name to be installed. A path may be used.
     */
    chart?: pulumi.Input<string>;
    /**
     * Allow deletion of new resources created in this upgrade when upgrade fails. Defaults to `false`.
     */
    cleanupOnFail?: pulumi.Input<boolean>;
    /**
     * Create the namespace if it does not exist. Defaults to `false`.
     */
    createNamespace?: pulumi.Input<boolean>;
    /**
     * Run helm dependency update before installing the chart. Defaults to `false`.
     */
    dependencyUpdate?: pulumi.Input<boolean>;
    /**
     * Add a custom description
     */
    description?: pulumi.Input<string>;
    /**
     * Use chart development versions, too. Equivalent to version '>0.0.0-0'. If `version` is set, this is ignored
     */
    devel?: pulumi.Input<boolean>;
    /**
     * Prevent CRD hooks from, running, but run other hooks. See helm install --no-crd-hook
     */
    disableCrdHooks?: pulumi.Input<boolean>;
    /**
     * If set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema. Defaults to
     * `false`.
     */
    disableOpenapiValidation?: pulumi.Input<boolean>;
    /**
     * Prevent hooks from running.Defaults to `false`.
     */
    disableWebhooks?: pulumi.Input<boolean>;
    /**
     * Force resource update through delete/recreate if needed. Defaults to `false`.
     */
    forceUpdate?: pulumi.Input<boolean>;
    /**
     * Location of public keys used for verification. Used only if `verify` is true. Defaults to `/.gnupg/pubring.gpg` in the
     * location set by `home`.
     */
    keyring?: pulumi.Input<string>;
    /**
     * Run helm lint when planning. Defaults to `false`.
     */
    lint?: pulumi.Input<boolean>;
    /**
     * The rendered manifest as JSON.
     */
    manifest?: pulumi.Input<string>;
    /**
     * Limit the maximum number of revisions saved per release. Use 0 for no limit. Defaults to 0 (no limit).
     */
    maxHistory?: pulumi.Input<number>;
    /**
     * Status of the deployed release.
     */
    metadatas?: pulumi.Input<pulumi.Input<inputs.ReleaseMetadata>[]>;
    /**
     * Release name. The length must not be longer than 53 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * Namespace to install the release into. Defaults to `default`.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Pass credentials to all domains. Defaults to `false`.
     */
    passCredentials?: pulumi.Input<boolean>;
    /**
     * Postrender command configuration.
     */
    postrender?: pulumi.Input<inputs.ReleasePostrender>;
    /**
     * Perform pods restart during upgrade/rollback. Defaults to `false`.
     */
    recreatePods?: pulumi.Input<boolean>;
    /**
     * If set, render subchart notes along with the parent. Defaults to `true`.
     */
    renderSubchartNotes?: pulumi.Input<boolean>;
    /**
     * Re-use the given name, even if that name is already used. This is unsafe in production. Defaults to `false`.
     */
    replace?: pulumi.Input<boolean>;
    /**
     * Repository where to locate the requested chart. If is a URL the chart is installed without installing the repository.
     */
    repository?: pulumi.Input<string>;
    /**
     * The Repositories CA File
     */
    repositoryCaFile?: pulumi.Input<string>;
    /**
     * The repositories cert file
     */
    repositoryCertFile?: pulumi.Input<string>;
    /**
     * The repositories cert key file
     */
    repositoryKeyFile?: pulumi.Input<string>;
    /**
     * Password for HTTP basic authentication
     */
    repositoryPassword?: pulumi.Input<string>;
    /**
     * Username for HTTP basic authentication
     */
    repositoryUsername?: pulumi.Input<string>;
    /**
     * When upgrading, reset the values to the ones built into the chart. Defaults to `false`.
     */
    resetValues?: pulumi.Input<boolean>;
    /**
     * When upgrading, reuse the last release's values and merge in any overrides. If 'reset_values' is specified, this is
     * ignored. Defaults to `false`.
     */
    reuseValues?: pulumi.Input<boolean>;
    /**
     * Custom list values to be merged with the values.
     */
    setLists?: pulumi.Input<pulumi.Input<inputs.ReleaseSetList>[]>;
    /**
     * Custom sensitive values to be merged with the values.
     */
    setSensitives?: pulumi.Input<pulumi.Input<inputs.ReleaseSetSensitive>[]>;
    /**
     * Custom values to be merged with the values.
     */
    sets?: pulumi.Input<pulumi.Input<inputs.ReleaseSet>[]>;
    /**
     * If set, no CRDs will be installed. By default, CRDs are installed if not already present. Defaults to `false`.
     */
    skipCrds?: pulumi.Input<boolean>;
    /**
     * Status of the release.
     */
    status?: pulumi.Input<string>;
    /**
     * Time in seconds to wait for any individual kubernetes operation. Defaults to 300 seconds.
     */
    timeout?: pulumi.Input<number>;
    /**
     * If true, the provider will install the release at the specified version even if a release not controlled by the provider
     * is present: this is equivalent to running 'helm upgrade --install' with the Helm CLI. WARNING: this may not be suitable
     * for production use -- see the 'Upgrade Mode' note in the provider documentation. Defaults to `false`.
     */
    upgradeInstall?: pulumi.Input<boolean>;
    /**
     * List of values in raw yaml format to pass to helm.
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Verify the package before installing it.Defaults to `false`.
     */
    verify?: pulumi.Input<boolean>;
    /**
     * Specify the exact chart version to install. If this is not specified, the latest version is installed.
     */
    version?: pulumi.Input<string>;
    /**
     * Will wait until all resources are in a ready state before marking the release as successful. Defaults to `true`.
     */
    wait?: pulumi.Input<boolean>;
    /**
     * If wait is enabled, will wait until all Jobs have been completed before marking the release as successful. Defaults to
     * `false``.
     */
    waitForJobs?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Release resource.
 */
export interface ReleaseArgs {
    /**
     * If set, installation process purges chart on fail. The wait flag will be set automatically if atomic is used. Defaults
     * to `false`.
     */
    atomic?: pulumi.Input<boolean>;
    /**
     * Chart name to be installed. A path may be used.
     */
    chart: pulumi.Input<string>;
    /**
     * Allow deletion of new resources created in this upgrade when upgrade fails. Defaults to `false`.
     */
    cleanupOnFail?: pulumi.Input<boolean>;
    /**
     * Create the namespace if it does not exist. Defaults to `false`.
     */
    createNamespace?: pulumi.Input<boolean>;
    /**
     * Run helm dependency update before installing the chart. Defaults to `false`.
     */
    dependencyUpdate?: pulumi.Input<boolean>;
    /**
     * Add a custom description
     */
    description?: pulumi.Input<string>;
    /**
     * Use chart development versions, too. Equivalent to version '>0.0.0-0'. If `version` is set, this is ignored
     */
    devel?: pulumi.Input<boolean>;
    /**
     * Prevent CRD hooks from, running, but run other hooks. See helm install --no-crd-hook
     */
    disableCrdHooks?: pulumi.Input<boolean>;
    /**
     * If set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema. Defaults to
     * `false`.
     */
    disableOpenapiValidation?: pulumi.Input<boolean>;
    /**
     * Prevent hooks from running.Defaults to `false`.
     */
    disableWebhooks?: pulumi.Input<boolean>;
    /**
     * Force resource update through delete/recreate if needed. Defaults to `false`.
     */
    forceUpdate?: pulumi.Input<boolean>;
    /**
     * Location of public keys used for verification. Used only if `verify` is true. Defaults to `/.gnupg/pubring.gpg` in the
     * location set by `home`.
     */
    keyring?: pulumi.Input<string>;
    /**
     * Run helm lint when planning. Defaults to `false`.
     */
    lint?: pulumi.Input<boolean>;
    /**
     * Limit the maximum number of revisions saved per release. Use 0 for no limit. Defaults to 0 (no limit).
     */
    maxHistory?: pulumi.Input<number>;
    /**
     * Release name. The length must not be longer than 53 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * Namespace to install the release into. Defaults to `default`.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Pass credentials to all domains. Defaults to `false`.
     */
    passCredentials?: pulumi.Input<boolean>;
    /**
     * Postrender command configuration.
     */
    postrender?: pulumi.Input<inputs.ReleasePostrender>;
    /**
     * Perform pods restart during upgrade/rollback. Defaults to `false`.
     */
    recreatePods?: pulumi.Input<boolean>;
    /**
     * If set, render subchart notes along with the parent. Defaults to `true`.
     */
    renderSubchartNotes?: pulumi.Input<boolean>;
    /**
     * Re-use the given name, even if that name is already used. This is unsafe in production. Defaults to `false`.
     */
    replace?: pulumi.Input<boolean>;
    /**
     * Repository where to locate the requested chart. If is a URL the chart is installed without installing the repository.
     */
    repository?: pulumi.Input<string>;
    /**
     * The Repositories CA File
     */
    repositoryCaFile?: pulumi.Input<string>;
    /**
     * The repositories cert file
     */
    repositoryCertFile?: pulumi.Input<string>;
    /**
     * The repositories cert key file
     */
    repositoryKeyFile?: pulumi.Input<string>;
    /**
     * Password for HTTP basic authentication
     */
    repositoryPassword?: pulumi.Input<string>;
    /**
     * Username for HTTP basic authentication
     */
    repositoryUsername?: pulumi.Input<string>;
    /**
     * When upgrading, reset the values to the ones built into the chart. Defaults to `false`.
     */
    resetValues?: pulumi.Input<boolean>;
    /**
     * When upgrading, reuse the last release's values and merge in any overrides. If 'reset_values' is specified, this is
     * ignored. Defaults to `false`.
     */
    reuseValues?: pulumi.Input<boolean>;
    /**
     * Custom list values to be merged with the values.
     */
    setLists?: pulumi.Input<pulumi.Input<inputs.ReleaseSetList>[]>;
    /**
     * Custom sensitive values to be merged with the values.
     */
    setSensitives?: pulumi.Input<pulumi.Input<inputs.ReleaseSetSensitive>[]>;
    /**
     * Custom values to be merged with the values.
     */
    sets?: pulumi.Input<pulumi.Input<inputs.ReleaseSet>[]>;
    /**
     * If set, no CRDs will be installed. By default, CRDs are installed if not already present. Defaults to `false`.
     */
    skipCrds?: pulumi.Input<boolean>;
    /**
     * Time in seconds to wait for any individual kubernetes operation. Defaults to 300 seconds.
     */
    timeout?: pulumi.Input<number>;
    /**
     * If true, the provider will install the release at the specified version even if a release not controlled by the provider
     * is present: this is equivalent to running 'helm upgrade --install' with the Helm CLI. WARNING: this may not be suitable
     * for production use -- see the 'Upgrade Mode' note in the provider documentation. Defaults to `false`.
     */
    upgradeInstall?: pulumi.Input<boolean>;
    /**
     * List of values in raw yaml format to pass to helm.
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Verify the package before installing it.Defaults to `false`.
     */
    verify?: pulumi.Input<boolean>;
    /**
     * Specify the exact chart version to install. If this is not specified, the latest version is installed.
     */
    version?: pulumi.Input<string>;
    /**
     * Will wait until all resources are in a ready state before marking the release as successful. Defaults to `true`.
     */
    wait?: pulumi.Input<boolean>;
    /**
     * If wait is enabled, will wait until all Jobs have been completed before marking the release as successful. Defaults to
     * `false``.
     */
    waitForJobs?: pulumi.Input<boolean>;
}
