// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Node extends pulumi.CustomResource {
    /**
     * Get an existing Node resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NodeState, opts?: pulumi.CustomResourceOptions): Node {
        return new Node(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'puppetdb:index/node:Node';

    /**
     * Returns true if the given object is an instance of Node.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Node {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Node.__pulumiType;
    }

    public /*out*/ readonly cachedCatalogStatus!: pulumi.Output<string>;
    public /*out*/ readonly catalogEnvironment!: pulumi.Output<string>;
    public /*out*/ readonly catalogTimestamp!: pulumi.Output<string>;
    public readonly certname!: pulumi.Output<string>;
    public /*out*/ readonly deactivated!: pulumi.Output<string>;
    public /*out*/ readonly expired!: pulumi.Output<string>;
    public /*out*/ readonly factsEnvironment!: pulumi.Output<string>;
    public /*out*/ readonly factsTimestamp!: pulumi.Output<string>;
    public /*out*/ readonly latestReportCorrectiveChange!: pulumi.Output<string>;
    public /*out*/ readonly latestReportHash!: pulumi.Output<string>;
    public /*out*/ readonly latestReportNoop!: pulumi.Output<boolean>;
    public /*out*/ readonly latestReportNoopPending!: pulumi.Output<boolean>;
    public /*out*/ readonly latestReportStatus!: pulumi.Output<string>;
    public /*out*/ readonly reportEnvironment!: pulumi.Output<string>;
    public /*out*/ readonly reportTimestamp!: pulumi.Output<string>;

    /**
     * Create a Node resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NodeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NodeArgs | NodeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NodeState | undefined;
            resourceInputs["cachedCatalogStatus"] = state ? state.cachedCatalogStatus : undefined;
            resourceInputs["catalogEnvironment"] = state ? state.catalogEnvironment : undefined;
            resourceInputs["catalogTimestamp"] = state ? state.catalogTimestamp : undefined;
            resourceInputs["certname"] = state ? state.certname : undefined;
            resourceInputs["deactivated"] = state ? state.deactivated : undefined;
            resourceInputs["expired"] = state ? state.expired : undefined;
            resourceInputs["factsEnvironment"] = state ? state.factsEnvironment : undefined;
            resourceInputs["factsTimestamp"] = state ? state.factsTimestamp : undefined;
            resourceInputs["latestReportCorrectiveChange"] = state ? state.latestReportCorrectiveChange : undefined;
            resourceInputs["latestReportHash"] = state ? state.latestReportHash : undefined;
            resourceInputs["latestReportNoop"] = state ? state.latestReportNoop : undefined;
            resourceInputs["latestReportNoopPending"] = state ? state.latestReportNoopPending : undefined;
            resourceInputs["latestReportStatus"] = state ? state.latestReportStatus : undefined;
            resourceInputs["reportEnvironment"] = state ? state.reportEnvironment : undefined;
            resourceInputs["reportTimestamp"] = state ? state.reportTimestamp : undefined;
        } else {
            const args = argsOrState as NodeArgs | undefined;
            if ((!args || args.certname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certname'");
            }
            resourceInputs["certname"] = args ? args.certname : undefined;
            resourceInputs["cachedCatalogStatus"] = undefined /*out*/;
            resourceInputs["catalogEnvironment"] = undefined /*out*/;
            resourceInputs["catalogTimestamp"] = undefined /*out*/;
            resourceInputs["deactivated"] = undefined /*out*/;
            resourceInputs["expired"] = undefined /*out*/;
            resourceInputs["factsEnvironment"] = undefined /*out*/;
            resourceInputs["factsTimestamp"] = undefined /*out*/;
            resourceInputs["latestReportCorrectiveChange"] = undefined /*out*/;
            resourceInputs["latestReportHash"] = undefined /*out*/;
            resourceInputs["latestReportNoop"] = undefined /*out*/;
            resourceInputs["latestReportNoopPending"] = undefined /*out*/;
            resourceInputs["latestReportStatus"] = undefined /*out*/;
            resourceInputs["reportEnvironment"] = undefined /*out*/;
            resourceInputs["reportTimestamp"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Node.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Node resources.
 */
export interface NodeState {
    cachedCatalogStatus?: pulumi.Input<string>;
    catalogEnvironment?: pulumi.Input<string>;
    catalogTimestamp?: pulumi.Input<string>;
    certname?: pulumi.Input<string>;
    deactivated?: pulumi.Input<string>;
    expired?: pulumi.Input<string>;
    factsEnvironment?: pulumi.Input<string>;
    factsTimestamp?: pulumi.Input<string>;
    latestReportCorrectiveChange?: pulumi.Input<string>;
    latestReportHash?: pulumi.Input<string>;
    latestReportNoop?: pulumi.Input<boolean>;
    latestReportNoopPending?: pulumi.Input<boolean>;
    latestReportStatus?: pulumi.Input<string>;
    reportEnvironment?: pulumi.Input<string>;
    reportTimestamp?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Node resource.
 */
export interface NodeArgs {
    certname: pulumi.Input<string>;
}
