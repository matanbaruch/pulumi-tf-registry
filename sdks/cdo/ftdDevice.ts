// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class FtdDevice extends pulumi.CustomResource {
    /**
     * Get an existing FtdDevice resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FtdDeviceState, opts?: pulumi.CustomResourceOptions): FtdDevice {
        return new FtdDevice(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cdo:index/ftdDevice:FtdDevice';

    /**
     * Returns true if the given object is an instance of FtdDevice.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FtdDevice {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FtdDevice.__pulumiType;
    }

    /**
     * The ID of the cloud-delivered FMC (cdFMC) access policy applied to this FTD.
     */
    public /*out*/ readonly accessPolicyId!: pulumi.Output<string>;
    /**
     * The name of the Cloud-Delivered FMC (cdFMC) access policy that will be used by the FTD.
     */
    public readonly accessPolicyName!: pulumi.Output<string>;
    /**
     * The command to run in the FTD CLI to register it with the cloud-delivered FMC (cdFMC).
     */
    public /*out*/ readonly generatedCommand!: pulumi.Output<string>;
    /**
     * Specify a map of grouped labels to identify the device as part of a group. Refer to the [CDO
     * documentation](https://docs.defenseorchestrator.com/t-applying-labels-to-devices-and-objects.html#!c-labels-and-filtering.html)
     * for details on how labels are used in CDO.
     */
    public readonly groupedLabels!: pulumi.Output<{[key: string]: string[]}>;
    /**
     * The Hostname of the cloud-delivered FMC (cdFMC) manages this FTD.
     */
    public /*out*/ readonly hostname!: pulumi.Output<string>;
    /**
     * Specify a set of labels to identify the device as part of a group. Refer to the [CDO
     * documentation](https://docs.defenseorchestrator.com/t-applying-labels-to-devices-and-objects.html#!c-labels-and-filtering.html)
     * for details on how labels are used in CDO.
     */
    public readonly labels!: pulumi.Output<string[]>;
    /**
     * Comma-separated list of licenses to apply to this FTD. You must enable at least the "BASE" license. Allowed values are:
     * ["BASE", "CARRIER", "THREAT", "MALWARE", "URLFilter",].
     */
    public readonly licenses!: pulumi.Output<string[]>;
    /**
     * A human-readable name for the Firewall Threat Defense (FTD). This name must be unique.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The Network Address Translation (NAT) ID of this FTD.
     */
    public /*out*/ readonly natId!: pulumi.Output<string>;
    /**
     * The performance tier of the virtual FTD, if virtual is set to false, this field is ignored as performance tiers are not
     * applicable to physical FTD devices. Allowed values are: ["FTDv5", "FTDv10", "FTDv20", "FTDv30", "FTDv50", "FTDv100",
     * "FTDv"].
     */
    public readonly performanceTier!: pulumi.Output<string | undefined>;
    /**
     * The Registration Key of this FTD.
     */
    public /*out*/ readonly regKey!: pulumi.Output<string>;
    /**
     * This determines if this FTD is virtual. If false, performance_tier is ignored as performance tiers are not applicable to
     * physical FTD devices.
     */
    public readonly virtual!: pulumi.Output<boolean>;

    /**
     * Create a FtdDevice resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FtdDeviceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FtdDeviceArgs | FtdDeviceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FtdDeviceState | undefined;
            resourceInputs["accessPolicyId"] = state ? state.accessPolicyId : undefined;
            resourceInputs["accessPolicyName"] = state ? state.accessPolicyName : undefined;
            resourceInputs["generatedCommand"] = state ? state.generatedCommand : undefined;
            resourceInputs["groupedLabels"] = state ? state.groupedLabels : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["licenses"] = state ? state.licenses : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["natId"] = state ? state.natId : undefined;
            resourceInputs["performanceTier"] = state ? state.performanceTier : undefined;
            resourceInputs["regKey"] = state ? state.regKey : undefined;
            resourceInputs["virtual"] = state ? state.virtual : undefined;
        } else {
            const args = argsOrState as FtdDeviceArgs | undefined;
            if ((!args || args.accessPolicyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessPolicyName'");
            }
            if ((!args || args.licenses === undefined) && !opts.urn) {
                throw new Error("Missing required property 'licenses'");
            }
            if ((!args || args.virtual === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtual'");
            }
            resourceInputs["accessPolicyName"] = args ? args.accessPolicyName : undefined;
            resourceInputs["groupedLabels"] = args ? args.groupedLabels : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["licenses"] = args ? args.licenses : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["performanceTier"] = args ? args.performanceTier : undefined;
            resourceInputs["virtual"] = args ? args.virtual : undefined;
            resourceInputs["accessPolicyId"] = undefined /*out*/;
            resourceInputs["generatedCommand"] = undefined /*out*/;
            resourceInputs["hostname"] = undefined /*out*/;
            resourceInputs["natId"] = undefined /*out*/;
            resourceInputs["regKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FtdDevice.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FtdDevice resources.
 */
export interface FtdDeviceState {
    /**
     * The ID of the cloud-delivered FMC (cdFMC) access policy applied to this FTD.
     */
    accessPolicyId?: pulumi.Input<string>;
    /**
     * The name of the Cloud-Delivered FMC (cdFMC) access policy that will be used by the FTD.
     */
    accessPolicyName?: pulumi.Input<string>;
    /**
     * The command to run in the FTD CLI to register it with the cloud-delivered FMC (cdFMC).
     */
    generatedCommand?: pulumi.Input<string>;
    /**
     * Specify a map of grouped labels to identify the device as part of a group. Refer to the [CDO
     * documentation](https://docs.defenseorchestrator.com/t-applying-labels-to-devices-and-objects.html#!c-labels-and-filtering.html)
     * for details on how labels are used in CDO.
     */
    groupedLabels?: pulumi.Input<{[key: string]: pulumi.Input<pulumi.Input<string>[]>}>;
    /**
     * The Hostname of the cloud-delivered FMC (cdFMC) manages this FTD.
     */
    hostname?: pulumi.Input<string>;
    /**
     * Specify a set of labels to identify the device as part of a group. Refer to the [CDO
     * documentation](https://docs.defenseorchestrator.com/t-applying-labels-to-devices-and-objects.html#!c-labels-and-filtering.html)
     * for details on how labels are used in CDO.
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Comma-separated list of licenses to apply to this FTD. You must enable at least the "BASE" license. Allowed values are:
     * ["BASE", "CARRIER", "THREAT", "MALWARE", "URLFilter",].
     */
    licenses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A human-readable name for the Firewall Threat Defense (FTD). This name must be unique.
     */
    name?: pulumi.Input<string>;
    /**
     * The Network Address Translation (NAT) ID of this FTD.
     */
    natId?: pulumi.Input<string>;
    /**
     * The performance tier of the virtual FTD, if virtual is set to false, this field is ignored as performance tiers are not
     * applicable to physical FTD devices. Allowed values are: ["FTDv5", "FTDv10", "FTDv20", "FTDv30", "FTDv50", "FTDv100",
     * "FTDv"].
     */
    performanceTier?: pulumi.Input<string>;
    /**
     * The Registration Key of this FTD.
     */
    regKey?: pulumi.Input<string>;
    /**
     * This determines if this FTD is virtual. If false, performance_tier is ignored as performance tiers are not applicable to
     * physical FTD devices.
     */
    virtual?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a FtdDevice resource.
 */
export interface FtdDeviceArgs {
    /**
     * The name of the Cloud-Delivered FMC (cdFMC) access policy that will be used by the FTD.
     */
    accessPolicyName: pulumi.Input<string>;
    /**
     * Specify a map of grouped labels to identify the device as part of a group. Refer to the [CDO
     * documentation](https://docs.defenseorchestrator.com/t-applying-labels-to-devices-and-objects.html#!c-labels-and-filtering.html)
     * for details on how labels are used in CDO.
     */
    groupedLabels?: pulumi.Input<{[key: string]: pulumi.Input<pulumi.Input<string>[]>}>;
    /**
     * Specify a set of labels to identify the device as part of a group. Refer to the [CDO
     * documentation](https://docs.defenseorchestrator.com/t-applying-labels-to-devices-and-objects.html#!c-labels-and-filtering.html)
     * for details on how labels are used in CDO.
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Comma-separated list of licenses to apply to this FTD. You must enable at least the "BASE" license. Allowed values are:
     * ["BASE", "CARRIER", "THREAT", "MALWARE", "URLFilter",].
     */
    licenses: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A human-readable name for the Firewall Threat Defense (FTD). This name must be unique.
     */
    name?: pulumi.Input<string>;
    /**
     * The performance tier of the virtual FTD, if virtual is set to false, this field is ignored as performance tiers are not
     * applicable to physical FTD devices. Allowed values are: ["FTDv5", "FTDv10", "FTDv20", "FTDv30", "FTDv50", "FTDv100",
     * "FTDv"].
     */
    performanceTier?: pulumi.Input<string>;
    /**
     * This determines if this FTD is virtual. If false, performance_tier is ignored as performance tiers are not applicable to
     * physical FTD devices.
     */
    virtual: pulumi.Input<boolean>;
}
