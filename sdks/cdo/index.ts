// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ApiTokenArgs, ApiTokenState } from "./apiToken";
export type ApiToken = import("./apiToken").ApiToken;
export const ApiToken: typeof import("./apiToken").ApiToken = null as any;
utilities.lazyLoad(exports, ["ApiToken"], () => require("./apiToken"));

export { AsaDeviceArgs, AsaDeviceState } from "./asaDevice";
export type AsaDevice = import("./asaDevice").AsaDevice;
export const AsaDevice: typeof import("./asaDevice").AsaDevice = null as any;
utilities.lazyLoad(exports, ["AsaDevice"], () => require("./asaDevice"));

export { CdfmcArgs, CdfmcState } from "./cdfmc";
export type Cdfmc = import("./cdfmc").Cdfmc;
export const Cdfmc: typeof import("./cdfmc").Cdfmc = null as any;
utilities.lazyLoad(exports, ["Cdfmc"], () => require("./cdfmc"));

export { DuoAdminPanelArgs, DuoAdminPanelState } from "./duoAdminPanel";
export type DuoAdminPanel = import("./duoAdminPanel").DuoAdminPanel;
export const DuoAdminPanel: typeof import("./duoAdminPanel").DuoAdminPanel = null as any;
utilities.lazyLoad(exports, ["DuoAdminPanel"], () => require("./duoAdminPanel"));

export { FtdDeviceArgs, FtdDeviceState } from "./ftdDevice";
export type FtdDevice = import("./ftdDevice").FtdDevice;
export const FtdDevice: typeof import("./ftdDevice").FtdDevice = null as any;
utilities.lazyLoad(exports, ["FtdDevice"], () => require("./ftdDevice"));

export { FtdDeviceOnboardingArgs, FtdDeviceOnboardingState } from "./ftdDeviceOnboarding";
export type FtdDeviceOnboarding = import("./ftdDeviceOnboarding").FtdDeviceOnboarding;
export const FtdDeviceOnboarding: typeof import("./ftdDeviceOnboarding").FtdDeviceOnboarding = null as any;
utilities.lazyLoad(exports, ["FtdDeviceOnboarding"], () => require("./ftdDeviceOnboarding"));

export { GetAsaDeviceArgs, GetAsaDeviceResult, GetAsaDeviceOutputArgs } from "./getAsaDevice";
export const getAsaDevice: typeof import("./getAsaDevice").getAsaDevice = null as any;
export const getAsaDeviceOutput: typeof import("./getAsaDevice").getAsaDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getAsaDevice","getAsaDeviceOutput"], () => require("./getAsaDevice"));

export { GetCdfmcResult } from "./getCdfmc";
export const getCdfmc: typeof import("./getCdfmc").getCdfmc = null as any;
export const getCdfmcOutput: typeof import("./getCdfmc").getCdfmcOutput = null as any;
utilities.lazyLoad(exports, ["getCdfmc","getCdfmcOutput"], () => require("./getCdfmc"));

export { GetFtdDeviceArgs, GetFtdDeviceResult, GetFtdDeviceOutputArgs } from "./getFtdDevice";
export const getFtdDevice: typeof import("./getFtdDevice").getFtdDevice = null as any;
export const getFtdDeviceOutput: typeof import("./getFtdDevice").getFtdDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getFtdDevice","getFtdDeviceOutput"], () => require("./getFtdDevice"));

export { GetIosDeviceArgs, GetIosDeviceResult, GetIosDeviceOutputArgs } from "./getIosDevice";
export const getIosDevice: typeof import("./getIosDevice").getIosDevice = null as any;
export const getIosDeviceOutput: typeof import("./getIosDevice").getIosDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getIosDevice","getIosDeviceOutput"], () => require("./getIosDevice"));

export { GetSdcArgs, GetSdcResult, GetSdcOutputArgs } from "./getSdc";
export const getSdc: typeof import("./getSdc").getSdc = null as any;
export const getSdcOutput: typeof import("./getSdc").getSdcOutput = null as any;
utilities.lazyLoad(exports, ["getSdc","getSdcOutput"], () => require("./getSdc"));

export { GetTenantResult } from "./getTenant";
export const getTenant: typeof import("./getTenant").getTenant = null as any;
export const getTenantOutput: typeof import("./getTenant").getTenantOutput = null as any;
utilities.lazyLoad(exports, ["getTenant","getTenantOutput"], () => require("./getTenant"));

export { GetTenantSettingsResult } from "./getTenantSettings";
export const getTenantSettings: typeof import("./getTenantSettings").getTenantSettings = null as any;
export const getTenantSettingsOutput: typeof import("./getTenantSettings").getTenantSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getTenantSettings","getTenantSettingsOutput"], () => require("./getTenantSettings"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { IosDeviceArgs, IosDeviceState } from "./iosDevice";
export type IosDevice = import("./iosDevice").IosDevice;
export const IosDevice: typeof import("./iosDevice").IosDevice = null as any;
utilities.lazyLoad(exports, ["IosDevice"], () => require("./iosDevice"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SdcArgs, SdcState } from "./sdc";
export type Sdc = import("./sdc").Sdc;
export const Sdc: typeof import("./sdc").Sdc = null as any;
utilities.lazyLoad(exports, ["Sdc"], () => require("./sdc"));

export { SdcOnboardingArgs, SdcOnboardingState } from "./sdcOnboarding";
export type SdcOnboarding = import("./sdcOnboarding").SdcOnboarding;
export const SdcOnboarding: typeof import("./sdcOnboarding").SdcOnboarding = null as any;
utilities.lazyLoad(exports, ["SdcOnboarding"], () => require("./sdcOnboarding"));

export { SecArgs, SecState } from "./sec";
export type Sec = import("./sec").Sec;
export const Sec: typeof import("./sec").Sec = null as any;
utilities.lazyLoad(exports, ["Sec"], () => require("./sec"));

export { SecOnboardingArgs, SecOnboardingState } from "./secOnboarding";
export type SecOnboarding = import("./secOnboarding").SecOnboarding;
export const SecOnboarding: typeof import("./secOnboarding").SecOnboarding = null as any;
utilities.lazyLoad(exports, ["SecOnboarding"], () => require("./secOnboarding"));

export { TenantSettingsArgs, TenantSettingsState } from "./tenantSettings";
export type TenantSettings = import("./tenantSettings").TenantSettings;
export const TenantSettings: typeof import("./tenantSettings").TenantSettings = null as any;
utilities.lazyLoad(exports, ["TenantSettings"], () => require("./tenantSettings"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "cdo:index/apiToken:ApiToken":
                return new ApiToken(name, <any>undefined, { urn })
            case "cdo:index/asaDevice:AsaDevice":
                return new AsaDevice(name, <any>undefined, { urn })
            case "cdo:index/cdfmc:Cdfmc":
                return new Cdfmc(name, <any>undefined, { urn })
            case "cdo:index/duoAdminPanel:DuoAdminPanel":
                return new DuoAdminPanel(name, <any>undefined, { urn })
            case "cdo:index/ftdDevice:FtdDevice":
                return new FtdDevice(name, <any>undefined, { urn })
            case "cdo:index/ftdDeviceOnboarding:FtdDeviceOnboarding":
                return new FtdDeviceOnboarding(name, <any>undefined, { urn })
            case "cdo:index/iosDevice:IosDevice":
                return new IosDevice(name, <any>undefined, { urn })
            case "cdo:index/sdc:Sdc":
                return new Sdc(name, <any>undefined, { urn })
            case "cdo:index/sdcOnboarding:SdcOnboarding":
                return new SdcOnboarding(name, <any>undefined, { urn })
            case "cdo:index/sec:Sec":
                return new Sec(name, <any>undefined, { urn })
            case "cdo:index/secOnboarding:SecOnboarding":
                return new SecOnboarding(name, <any>undefined, { urn })
            case "cdo:index/tenantSettings:TenantSettings":
                return new TenantSettings(name, <any>undefined, { urn })
            case "cdo:index/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("cdo", "index/apiToken", _module)
pulumi.runtime.registerResourceModule("cdo", "index/asaDevice", _module)
pulumi.runtime.registerResourceModule("cdo", "index/cdfmc", _module)
pulumi.runtime.registerResourceModule("cdo", "index/duoAdminPanel", _module)
pulumi.runtime.registerResourceModule("cdo", "index/ftdDevice", _module)
pulumi.runtime.registerResourceModule("cdo", "index/ftdDeviceOnboarding", _module)
pulumi.runtime.registerResourceModule("cdo", "index/iosDevice", _module)
pulumi.runtime.registerResourceModule("cdo", "index/sdc", _module)
pulumi.runtime.registerResourceModule("cdo", "index/sdcOnboarding", _module)
pulumi.runtime.registerResourceModule("cdo", "index/sec", _module)
pulumi.runtime.registerResourceModule("cdo", "index/secOnboarding", _module)
pulumi.runtime.registerResourceModule("cdo", "index/tenantSettings", _module)
pulumi.runtime.registerResourceModule("cdo", "index/user", _module)
pulumi.runtime.registerResourcePackage("cdo", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:cdo") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
