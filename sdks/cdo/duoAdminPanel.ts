// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DuoAdminPanel extends pulumi.CustomResource {
    /**
     * Get an existing DuoAdminPanel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DuoAdminPanelState, opts?: pulumi.CustomResourceOptions): DuoAdminPanel {
        return new DuoAdminPanel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cdo:index/duoAdminPanel:DuoAdminPanel';

    /**
     * Returns true if the given object is an instance of DuoAdminPanel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DuoAdminPanel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DuoAdminPanel.__pulumiType;
    }

    /**
     * Specify a set of grouped labels to identify the Duo Admin Panel as part of a group. Refer to the [CDO
     * documentation](https://docs.defenseorchestrator.com/t-applying-labels-to-devices-and-objects.html#!c-labels-and-filtering.html)
     * for details on how labels are used in CDO.
     */
    public readonly groupedLabels!: pulumi.Output<{[key: string]: string[]}>;
    /**
     * The API hostname for an Admin API application in the Duo Admin Panel. Refer to the CDO documentation for details on how
     * to create an Admin API application to onboard your Duo Admin Panel in CDO.
     */
    public readonly host!: pulumi.Output<string>;
    /**
     * The integration key for an Admin API application in the Duo Admin Panel. Refer to the CDO documentation for details on
     * how to create an Admin API application to onboard your Duo Admin Panel in CDO.
     */
    public readonly integrationKey!: pulumi.Output<string>;
    /**
     * Specify a set of labels to identify the Duo Admin Panel as part of a group. Refer to the [CDO
     * documentation](https://docs.defenseorchestrator.com/t-applying-labels-to-devices-and-objects.html#!c-labels-and-filtering.html)
     * for details on how labels are used in CDO.
     */
    public readonly labels!: pulumi.Output<string[]>;
    /**
     * A human-readable name for the Duo Admin Panel.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The secret key for an Admin API application in the Duo Admin Panel. Refer to the CDO documentation for details on how to
     * create an Admin API application to onboard your Duo Admin Panel in CDO.
     */
    public readonly secretKey!: pulumi.Output<string>;

    /**
     * Create a DuoAdminPanel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DuoAdminPanelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DuoAdminPanelArgs | DuoAdminPanelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DuoAdminPanelState | undefined;
            resourceInputs["groupedLabels"] = state ? state.groupedLabels : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["integrationKey"] = state ? state.integrationKey : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["secretKey"] = state ? state.secretKey : undefined;
        } else {
            const args = argsOrState as DuoAdminPanelArgs | undefined;
            if ((!args || args.host === undefined) && !opts.urn) {
                throw new Error("Missing required property 'host'");
            }
            if ((!args || args.integrationKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'integrationKey'");
            }
            if ((!args || args.secretKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secretKey'");
            }
            resourceInputs["groupedLabels"] = args ? args.groupedLabels : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["integrationKey"] = args?.integrationKey ? pulumi.secret(args.integrationKey) : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["secretKey"] = args?.secretKey ? pulumi.secret(args.secretKey) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["integrationKey", "secretKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DuoAdminPanel.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DuoAdminPanel resources.
 */
export interface DuoAdminPanelState {
    /**
     * Specify a set of grouped labels to identify the Duo Admin Panel as part of a group. Refer to the [CDO
     * documentation](https://docs.defenseorchestrator.com/t-applying-labels-to-devices-and-objects.html#!c-labels-and-filtering.html)
     * for details on how labels are used in CDO.
     */
    groupedLabels?: pulumi.Input<{[key: string]: pulumi.Input<pulumi.Input<string>[]>}>;
    /**
     * The API hostname for an Admin API application in the Duo Admin Panel. Refer to the CDO documentation for details on how
     * to create an Admin API application to onboard your Duo Admin Panel in CDO.
     */
    host?: pulumi.Input<string>;
    /**
     * The integration key for an Admin API application in the Duo Admin Panel. Refer to the CDO documentation for details on
     * how to create an Admin API application to onboard your Duo Admin Panel in CDO.
     */
    integrationKey?: pulumi.Input<string>;
    /**
     * Specify a set of labels to identify the Duo Admin Panel as part of a group. Refer to the [CDO
     * documentation](https://docs.defenseorchestrator.com/t-applying-labels-to-devices-and-objects.html#!c-labels-and-filtering.html)
     * for details on how labels are used in CDO.
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A human-readable name for the Duo Admin Panel.
     */
    name?: pulumi.Input<string>;
    /**
     * The secret key for an Admin API application in the Duo Admin Panel. Refer to the CDO documentation for details on how to
     * create an Admin API application to onboard your Duo Admin Panel in CDO.
     */
    secretKey?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DuoAdminPanel resource.
 */
export interface DuoAdminPanelArgs {
    /**
     * Specify a set of grouped labels to identify the Duo Admin Panel as part of a group. Refer to the [CDO
     * documentation](https://docs.defenseorchestrator.com/t-applying-labels-to-devices-and-objects.html#!c-labels-and-filtering.html)
     * for details on how labels are used in CDO.
     */
    groupedLabels?: pulumi.Input<{[key: string]: pulumi.Input<pulumi.Input<string>[]>}>;
    /**
     * The API hostname for an Admin API application in the Duo Admin Panel. Refer to the CDO documentation for details on how
     * to create an Admin API application to onboard your Duo Admin Panel in CDO.
     */
    host: pulumi.Input<string>;
    /**
     * The integration key for an Admin API application in the Duo Admin Panel. Refer to the CDO documentation for details on
     * how to create an Admin API application to onboard your Duo Admin Panel in CDO.
     */
    integrationKey: pulumi.Input<string>;
    /**
     * Specify a set of labels to identify the Duo Admin Panel as part of a group. Refer to the [CDO
     * documentation](https://docs.defenseorchestrator.com/t-applying-labels-to-devices-and-objects.html#!c-labels-and-filtering.html)
     * for details on how labels are used in CDO.
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A human-readable name for the Duo Admin Panel.
     */
    name?: pulumi.Input<string>;
    /**
     * The secret key for an Admin API application in the Duo Admin Panel. Refer to the CDO documentation for details on how to
     * create an Admin API application to onboard your Duo Admin Panel in CDO.
     */
    secretKey: pulumi.Input<string>;
}
