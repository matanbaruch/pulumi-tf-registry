// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class IosDevice extends pulumi.CustomResource {
    /**
     * Get an existing IosDevice resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IosDeviceState, opts?: pulumi.CustomResourceOptions): IosDevice {
        return new IosDevice(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cdo:index/iosDevice:IosDevice';

    /**
     * Returns true if the given object is an instance of IosDevice.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IosDevice {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IosDevice.__pulumiType;
    }

    /**
     * The name of the Secure Device Connector (SDC) that will be used to communicate with the device. This value is not
     * required if the connector type selected is Cloud Device Gateway (CDG).
     */
    public readonly connectorName!: pulumi.Output<string>;
    /**
     * Specify a set of grouped labels to identify the device as part of a group. Refer to the [CDO
     * documentation](https://docs.defenseorchestrator.com/t-applying-labels-to-devices-and-objects.html#!c-labels-and-filtering.html)
     * for details on how labels are used in CDO.
     */
    public readonly groupedLabels!: pulumi.Output<{[key: string]: string[]}>;
    /**
     * The host used to connect to the device.
     */
    public /*out*/ readonly host!: pulumi.Output<string>;
    /**
     * Set this attribute to true if you do not want CDO to validate the certificate of this device before onboarding.
     */
    public readonly ignoreCertificate!: pulumi.Output<boolean>;
    /**
     * Specify a set of labels to identify the device as part of a group. Refer to the [CDO
     * documentation](https://docs.defenseorchestrator.com/t-applying-labels-to-devices-and-objects.html#!c-labels-and-filtering.html)
     * for details on how labels are used in CDO.
     */
    public readonly labels!: pulumi.Output<string[]>;
    /**
     * A human-readable name for the device.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The password used to authenticate with the device.
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * The port used to connect to the device.
     */
    public /*out*/ readonly port!: pulumi.Output<number>;
    /**
     * The address of the device to onboard, specified in the format `host:port`.
     */
    public readonly socketAddress!: pulumi.Output<string>;
    /**
     * The username used to authenticate with the device.
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a IosDevice resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IosDeviceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IosDeviceArgs | IosDeviceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IosDeviceState | undefined;
            resourceInputs["connectorName"] = state ? state.connectorName : undefined;
            resourceInputs["groupedLabels"] = state ? state.groupedLabels : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["ignoreCertificate"] = state ? state.ignoreCertificate : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["socketAddress"] = state ? state.socketAddress : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as IosDeviceArgs | undefined;
            if ((!args || args.connectorName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectorName'");
            }
            if ((!args || args.ignoreCertificate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ignoreCertificate'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.socketAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'socketAddress'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["connectorName"] = args ? args.connectorName : undefined;
            resourceInputs["groupedLabels"] = args ? args.groupedLabels : undefined;
            resourceInputs["ignoreCertificate"] = args ? args.ignoreCertificate : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["socketAddress"] = args ? args.socketAddress : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["host"] = undefined /*out*/;
            resourceInputs["port"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(IosDevice.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IosDevice resources.
 */
export interface IosDeviceState {
    /**
     * The name of the Secure Device Connector (SDC) that will be used to communicate with the device. This value is not
     * required if the connector type selected is Cloud Device Gateway (CDG).
     */
    connectorName?: pulumi.Input<string>;
    /**
     * Specify a set of grouped labels to identify the device as part of a group. Refer to the [CDO
     * documentation](https://docs.defenseorchestrator.com/t-applying-labels-to-devices-and-objects.html#!c-labels-and-filtering.html)
     * for details on how labels are used in CDO.
     */
    groupedLabels?: pulumi.Input<{[key: string]: pulumi.Input<pulumi.Input<string>[]>}>;
    /**
     * The host used to connect to the device.
     */
    host?: pulumi.Input<string>;
    /**
     * Set this attribute to true if you do not want CDO to validate the certificate of this device before onboarding.
     */
    ignoreCertificate?: pulumi.Input<boolean>;
    /**
     * Specify a set of labels to identify the device as part of a group. Refer to the [CDO
     * documentation](https://docs.defenseorchestrator.com/t-applying-labels-to-devices-and-objects.html#!c-labels-and-filtering.html)
     * for details on how labels are used in CDO.
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A human-readable name for the device.
     */
    name?: pulumi.Input<string>;
    /**
     * The password used to authenticate with the device.
     */
    password?: pulumi.Input<string>;
    /**
     * The port used to connect to the device.
     */
    port?: pulumi.Input<number>;
    /**
     * The address of the device to onboard, specified in the format `host:port`.
     */
    socketAddress?: pulumi.Input<string>;
    /**
     * The username used to authenticate with the device.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IosDevice resource.
 */
export interface IosDeviceArgs {
    /**
     * The name of the Secure Device Connector (SDC) that will be used to communicate with the device. This value is not
     * required if the connector type selected is Cloud Device Gateway (CDG).
     */
    connectorName: pulumi.Input<string>;
    /**
     * Specify a set of grouped labels to identify the device as part of a group. Refer to the [CDO
     * documentation](https://docs.defenseorchestrator.com/t-applying-labels-to-devices-and-objects.html#!c-labels-and-filtering.html)
     * for details on how labels are used in CDO.
     */
    groupedLabels?: pulumi.Input<{[key: string]: pulumi.Input<pulumi.Input<string>[]>}>;
    /**
     * Set this attribute to true if you do not want CDO to validate the certificate of this device before onboarding.
     */
    ignoreCertificate: pulumi.Input<boolean>;
    /**
     * Specify a set of labels to identify the device as part of a group. Refer to the [CDO
     * documentation](https://docs.defenseorchestrator.com/t-applying-labels-to-devices-and-objects.html#!c-labels-and-filtering.html)
     * for details on how labels are used in CDO.
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A human-readable name for the device.
     */
    name?: pulumi.Input<string>;
    /**
     * The password used to authenticate with the device.
     */
    password: pulumi.Input<string>;
    /**
     * The address of the device to onboard, specified in the format `host:port`.
     */
    socketAddress: pulumi.Input<string>;
    /**
     * The username used to authenticate with the device.
     */
    username: pulumi.Input<string>;
}
