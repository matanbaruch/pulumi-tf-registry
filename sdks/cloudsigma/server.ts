// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Server extends pulumi.CustomResource {
    /**
     * Get an existing Server resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerState, opts?: pulumi.CustomResourceOptions): Server {
        return new Server(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudsigma:index/server:Server';

    /**
     * Returns true if the given object is an instance of Server.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Server {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Server.__pulumiType;
    }

    /**
     * Server's CPU Clock speed measured in MHz.
     */
    public readonly cpu!: pulumi.Output<number>;
    /**
     * Drive attached to the server on creation.The server will boot from the first defined drive in this resource, which get
     * `boot_order = 1`.
     */
    public readonly drives!: pulumi.Output<outputs.ServerDrife[] | undefined>;
    /**
     * SGX enclaves defined with its size in bytes.
     */
    public readonly enclavePageCaches!: pulumi.Output<number[] | undefined>;
    /**
     * The IPv4 address.
     */
    public /*out*/ readonly ipv4Address!: pulumi.Output<string>;
    /**
     * Server's RAM measured in bytes.
     */
    public readonly memory!: pulumi.Output<number>;
    /**
     * The field can be used to store arbitrary information in key-value form.
     */
    public readonly meta!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Human readable name of server.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Network interface card attached to the server.
     */
    public readonly networks!: pulumi.Output<outputs.ServerNetwork[] | undefined>;
    /**
     * The unique resource identifier of the server.
     */
    public /*out*/ readonly resourceUri!: pulumi.Output<string>;
    /**
     * Symmetric Multiprocessing (SMP) i.e. number of CPU cores.
     */
    public readonly smp!: pulumi.Output<number>;
    /**
     * A list of the SSH key UUIDs to be applied to the server.
     */
    public readonly sshKeys!: pulumi.Output<string[] | undefined>;
    /**
     * A list of the tags UUIDs to be applied to the server.
     */
    public readonly tags!: pulumi.Output<string[]>;
    public readonly timeouts!: pulumi.Output<outputs.ServerTimeouts | undefined>;
    /**
     * VNC Password to connect to server.
     */
    public readonly vncPassword!: pulumi.Output<string>;

    /**
     * Create a Server resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerArgs | ServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerState | undefined;
            resourceInputs["cpu"] = state ? state.cpu : undefined;
            resourceInputs["drives"] = state ? state.drives : undefined;
            resourceInputs["enclavePageCaches"] = state ? state.enclavePageCaches : undefined;
            resourceInputs["ipv4Address"] = state ? state.ipv4Address : undefined;
            resourceInputs["memory"] = state ? state.memory : undefined;
            resourceInputs["meta"] = state ? state.meta : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networks"] = state ? state.networks : undefined;
            resourceInputs["resourceUri"] = state ? state.resourceUri : undefined;
            resourceInputs["smp"] = state ? state.smp : undefined;
            resourceInputs["sshKeys"] = state ? state.sshKeys : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vncPassword"] = state ? state.vncPassword : undefined;
        } else {
            const args = argsOrState as ServerArgs | undefined;
            if ((!args || args.cpu === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cpu'");
            }
            if ((!args || args.memory === undefined) && !opts.urn) {
                throw new Error("Missing required property 'memory'");
            }
            if ((!args || args.vncPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vncPassword'");
            }
            resourceInputs["cpu"] = args ? args.cpu : undefined;
            resourceInputs["drives"] = args ? args.drives : undefined;
            resourceInputs["enclavePageCaches"] = args ? args.enclavePageCaches : undefined;
            resourceInputs["memory"] = args ? args.memory : undefined;
            resourceInputs["meta"] = args ? args.meta : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networks"] = args ? args.networks : undefined;
            resourceInputs["smp"] = args ? args.smp : undefined;
            resourceInputs["sshKeys"] = args ? args.sshKeys : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vncPassword"] = args ? args.vncPassword : undefined;
            resourceInputs["ipv4Address"] = undefined /*out*/;
            resourceInputs["resourceUri"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Server.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Server resources.
 */
export interface ServerState {
    /**
     * Server's CPU Clock speed measured in MHz.
     */
    cpu?: pulumi.Input<number>;
    /**
     * Drive attached to the server on creation.The server will boot from the first defined drive in this resource, which get
     * `boot_order = 1`.
     */
    drives?: pulumi.Input<pulumi.Input<inputs.ServerDrife>[]>;
    /**
     * SGX enclaves defined with its size in bytes.
     */
    enclavePageCaches?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The IPv4 address.
     */
    ipv4Address?: pulumi.Input<string>;
    /**
     * Server's RAM measured in bytes.
     */
    memory?: pulumi.Input<number>;
    /**
     * The field can be used to store arbitrary information in key-value form.
     */
    meta?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Human readable name of server.
     */
    name?: pulumi.Input<string>;
    /**
     * Network interface card attached to the server.
     */
    networks?: pulumi.Input<pulumi.Input<inputs.ServerNetwork>[]>;
    /**
     * The unique resource identifier of the server.
     */
    resourceUri?: pulumi.Input<string>;
    /**
     * Symmetric Multiprocessing (SMP) i.e. number of CPU cores.
     */
    smp?: pulumi.Input<number>;
    /**
     * A list of the SSH key UUIDs to be applied to the server.
     */
    sshKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of the tags UUIDs to be applied to the server.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.ServerTimeouts>;
    /**
     * VNC Password to connect to server.
     */
    vncPassword?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Server resource.
 */
export interface ServerArgs {
    /**
     * Server's CPU Clock speed measured in MHz.
     */
    cpu: pulumi.Input<number>;
    /**
     * Drive attached to the server on creation.The server will boot from the first defined drive in this resource, which get
     * `boot_order = 1`.
     */
    drives?: pulumi.Input<pulumi.Input<inputs.ServerDrife>[]>;
    /**
     * SGX enclaves defined with its size in bytes.
     */
    enclavePageCaches?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Server's RAM measured in bytes.
     */
    memory: pulumi.Input<number>;
    /**
     * The field can be used to store arbitrary information in key-value form.
     */
    meta?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Human readable name of server.
     */
    name?: pulumi.Input<string>;
    /**
     * Network interface card attached to the server.
     */
    networks?: pulumi.Input<pulumi.Input<inputs.ServerNetwork>[]>;
    /**
     * Symmetric Multiprocessing (SMP) i.e. number of CPU cores.
     */
    smp?: pulumi.Input<number>;
    /**
     * A list of the SSH key UUIDs to be applied to the server.
     */
    sshKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of the tags UUIDs to be applied to the server.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.ServerTimeouts>;
    /**
     * VNC Password to connect to server.
     */
    vncPassword: pulumi.Input<string>;
}
