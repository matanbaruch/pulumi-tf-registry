// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { DriveArgs, DriveState } from "./drive";
export type Drive = import("./drive").Drive;
export const Drive: typeof import("./drive").Drive = null as any;
utilities.lazyLoad(exports, ["Drive"], () => require("./drive"));

export { GetDriveArgs, GetDriveResult, GetDriveOutputArgs } from "./getDrive";
export const getDrive: typeof import("./getDrive").getDrive = null as any;
export const getDriveOutput: typeof import("./getDrive").getDriveOutput = null as any;
utilities.lazyLoad(exports, ["getDrive","getDriveOutput"], () => require("./getDrive"));

export { GetIpArgs, GetIpResult, GetIpOutputArgs } from "./getIp";
export const getIp: typeof import("./getIp").getIp = null as any;
export const getIpOutput: typeof import("./getIp").getIpOutput = null as any;
utilities.lazyLoad(exports, ["getIp","getIpOutput"], () => require("./getIp"));

export { GetLibraryDriveArgs, GetLibraryDriveResult, GetLibraryDriveOutputArgs } from "./getLibraryDrive";
export const getLibraryDrive: typeof import("./getLibraryDrive").getLibraryDrive = null as any;
export const getLibraryDriveOutput: typeof import("./getLibraryDrive").getLibraryDriveOutput = null as any;
utilities.lazyLoad(exports, ["getLibraryDrive","getLibraryDriveOutput"], () => require("./getLibraryDrive"));

export { GetLicenseArgs, GetLicenseResult, GetLicenseOutputArgs } from "./getLicense";
export const getLicense: typeof import("./getLicense").getLicense = null as any;
export const getLicenseOutput: typeof import("./getLicense").getLicenseOutput = null as any;
utilities.lazyLoad(exports, ["getLicense","getLicenseOutput"], () => require("./getLicense"));

export { GetLocationArgs, GetLocationResult, GetLocationOutputArgs } from "./getLocation";
export const getLocation: typeof import("./getLocation").getLocation = null as any;
export const getLocationOutput: typeof import("./getLocation").getLocationOutput = null as any;
utilities.lazyLoad(exports, ["getLocation","getLocationOutput"], () => require("./getLocation"));

export { GetProfileResult } from "./getProfile";
export const getProfile: typeof import("./getProfile").getProfile = null as any;
export const getProfileOutput: typeof import("./getProfile").getProfileOutput = null as any;
utilities.lazyLoad(exports, ["getProfile","getProfileOutput"], () => require("./getProfile"));

export { GetSubscriptionArgs, GetSubscriptionResult, GetSubscriptionOutputArgs } from "./getSubscription";
export const getSubscription: typeof import("./getSubscription").getSubscription = null as any;
export const getSubscriptionOutput: typeof import("./getSubscription").getSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getSubscription","getSubscriptionOutput"], () => require("./getSubscription"));

export { GetTagArgs, GetTagResult, GetTagOutputArgs } from "./getTag";
export const getTag: typeof import("./getTag").getTag = null as any;
export const getTagOutput: typeof import("./getTag").getTagOutput = null as any;
utilities.lazyLoad(exports, ["getTag","getTagOutput"], () => require("./getTag"));

export { GetVlanArgs, GetVlanResult, GetVlanOutputArgs } from "./getVlan";
export const getVlan: typeof import("./getVlan").getVlan = null as any;
export const getVlanOutput: typeof import("./getVlan").getVlanOutput = null as any;
utilities.lazyLoad(exports, ["getVlan","getVlanOutput"], () => require("./getVlan"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ServerArgs, ServerState } from "./server";
export type Server = import("./server").Server;
export const Server: typeof import("./server").Server = null as any;
utilities.lazyLoad(exports, ["Server"], () => require("./server"));

export { SnapshotArgs, SnapshotState } from "./snapshot";
export type Snapshot = import("./snapshot").Snapshot;
export const Snapshot: typeof import("./snapshot").Snapshot = null as any;
utilities.lazyLoad(exports, ["Snapshot"], () => require("./snapshot"));

export { SshKeyArgs, SshKeyState } from "./sshKey";
export type SshKey = import("./sshKey").SshKey;
export const SshKey: typeof import("./sshKey").SshKey = null as any;
utilities.lazyLoad(exports, ["SshKey"], () => require("./sshKey"));

export { TagArgs, TagState } from "./tag";
export type Tag = import("./tag").Tag;
export const Tag: typeof import("./tag").Tag = null as any;
utilities.lazyLoad(exports, ["Tag"], () => require("./tag"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "cloudsigma:index/drive:Drive":
                return new Drive(name, <any>undefined, { urn })
            case "cloudsigma:index/server:Server":
                return new Server(name, <any>undefined, { urn })
            case "cloudsigma:index/snapshot:Snapshot":
                return new Snapshot(name, <any>undefined, { urn })
            case "cloudsigma:index/sshKey:SshKey":
                return new SshKey(name, <any>undefined, { urn })
            case "cloudsigma:index/tag:Tag":
                return new Tag(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("cloudsigma", "index/drive", _module)
pulumi.runtime.registerResourceModule("cloudsigma", "index/server", _module)
pulumi.runtime.registerResourceModule("cloudsigma", "index/snapshot", _module)
pulumi.runtime.registerResourceModule("cloudsigma", "index/sshKey", _module)
pulumi.runtime.registerResourceModule("cloudsigma", "index/tag", _module)
pulumi.runtime.registerResourcePackage("cloudsigma", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:cloudsigma") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
