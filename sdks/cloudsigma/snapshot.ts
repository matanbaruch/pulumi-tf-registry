// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Snapshot extends pulumi.CustomResource {
    /**
     * Get an existing Snapshot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnapshotState, opts?: pulumi.CustomResourceOptions): Snapshot {
        return new Snapshot(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudsigma:index/snapshot:Snapshot';

    /**
     * Returns true if the given object is an instance of Snapshot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Snapshot {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Snapshot.__pulumiType;
    }

    /**
     * The UUID of the drive.
     */
    public readonly drive!: pulumi.Output<string>;
    /**
     * The name of the snapshot.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The unique resource identifier of the snapshot.
     */
    public /*out*/ readonly resourceUri!: pulumi.Output<string>;
    /**
     * The status of the snapshot.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The timestamp of the snapshot creation.
     */
    public /*out*/ readonly timestamp!: pulumi.Output<string>;
    /**
     * The unique universal identifier of the snapshot, equal to ID.
     */
    public /*out*/ readonly uuid!: pulumi.Output<string>;

    /**
     * Create a Snapshot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SnapshotArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnapshotArgs | SnapshotState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnapshotState | undefined;
            resourceInputs["drive"] = state ? state.drive : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceUri"] = state ? state.resourceUri : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timestamp"] = state ? state.timestamp : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as SnapshotArgs | undefined;
            if ((!args || args.drive === undefined) && !opts.urn) {
                throw new Error("Missing required property 'drive'");
            }
            resourceInputs["drive"] = args ? args.drive : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceUri"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["timestamp"] = undefined /*out*/;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Snapshot.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Snapshot resources.
 */
export interface SnapshotState {
    /**
     * The UUID of the drive.
     */
    drive?: pulumi.Input<string>;
    /**
     * The name of the snapshot.
     */
    name?: pulumi.Input<string>;
    /**
     * The unique resource identifier of the snapshot.
     */
    resourceUri?: pulumi.Input<string>;
    /**
     * The status of the snapshot.
     */
    status?: pulumi.Input<string>;
    /**
     * The timestamp of the snapshot creation.
     */
    timestamp?: pulumi.Input<string>;
    /**
     * The unique universal identifier of the snapshot, equal to ID.
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Snapshot resource.
 */
export interface SnapshotArgs {
    /**
     * The UUID of the drive.
     */
    drive: pulumi.Input<string>;
    /**
     * The name of the snapshot.
     */
    name?: pulumi.Input<string>;
}
