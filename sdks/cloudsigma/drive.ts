// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Drive extends pulumi.CustomResource {
    /**
     * Get an existing Drive resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DriveState, opts?: pulumi.CustomResourceOptions): Drive {
        return new Drive(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudsigma:index/drive:Drive';

    /**
     * Returns true if the given object is an instance of Drive.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Drive {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Drive.__pulumiType;
    }

    /**
     * The UUID of the drive that will be cloned.
     */
    public readonly cloneDriveId!: pulumi.Output<string | undefined>;
    /**
     * Media representation type. It can be `cdrom` or `disk`.
     */
    public readonly media!: pulumi.Output<string>;
    /**
     * Servers on which this drive is mounted on.
     */
    public /*out*/ readonly mountedOns!: pulumi.Output<outputs.DriveMountedOn[]>;
    /**
     * Human readable name of the drive.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The unique resource identifier of the drive.
     */
    public /*out*/ readonly resourceUri!: pulumi.Output<string>;
    /**
     * Size of the drive in bytes.
     */
    public readonly size!: pulumi.Output<number>;
    /**
     * The drive status.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Drive storage type, cannot be changed after drive creation.
     */
    public readonly storageType!: pulumi.Output<string>;
    /**
     * A list of the tags UUIDs to be applied to the drive.
     */
    public readonly tags!: pulumi.Output<string[]>;
    public readonly timeouts!: pulumi.Output<outputs.DriveTimeouts | undefined>;
    /**
     * The UUID of the drive.
     */
    public /*out*/ readonly uuid!: pulumi.Output<string>;

    /**
     * Create a Drive resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DriveArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DriveArgs | DriveState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DriveState | undefined;
            resourceInputs["cloneDriveId"] = state ? state.cloneDriveId : undefined;
            resourceInputs["media"] = state ? state.media : undefined;
            resourceInputs["mountedOns"] = state ? state.mountedOns : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceUri"] = state ? state.resourceUri : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["storageType"] = state ? state.storageType : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as DriveArgs | undefined;
            if ((!args || args.media === undefined) && !opts.urn) {
                throw new Error("Missing required property 'media'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            resourceInputs["cloneDriveId"] = args ? args.cloneDriveId : undefined;
            resourceInputs["media"] = args ? args.media : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["storageType"] = args ? args.storageType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["mountedOns"] = undefined /*out*/;
            resourceInputs["resourceUri"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Drive.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Drive resources.
 */
export interface DriveState {
    /**
     * The UUID of the drive that will be cloned.
     */
    cloneDriveId?: pulumi.Input<string>;
    /**
     * Media representation type. It can be `cdrom` or `disk`.
     */
    media?: pulumi.Input<string>;
    /**
     * Servers on which this drive is mounted on.
     */
    mountedOns?: pulumi.Input<pulumi.Input<inputs.DriveMountedOn>[]>;
    /**
     * Human readable name of the drive.
     */
    name?: pulumi.Input<string>;
    /**
     * The unique resource identifier of the drive.
     */
    resourceUri?: pulumi.Input<string>;
    /**
     * Size of the drive in bytes.
     */
    size?: pulumi.Input<number>;
    /**
     * The drive status.
     */
    status?: pulumi.Input<string>;
    /**
     * Drive storage type, cannot be changed after drive creation.
     */
    storageType?: pulumi.Input<string>;
    /**
     * A list of the tags UUIDs to be applied to the drive.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.DriveTimeouts>;
    /**
     * The UUID of the drive.
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Drive resource.
 */
export interface DriveArgs {
    /**
     * The UUID of the drive that will be cloned.
     */
    cloneDriveId?: pulumi.Input<string>;
    /**
     * Media representation type. It can be `cdrom` or `disk`.
     */
    media: pulumi.Input<string>;
    /**
     * Human readable name of the drive.
     */
    name?: pulumi.Input<string>;
    /**
     * Size of the drive in bytes.
     */
    size: pulumi.Input<number>;
    /**
     * Drive storage type, cannot be changed after drive creation.
     */
    storageType?: pulumi.Input<string>;
    /**
     * A list of the tags UUIDs to be applied to the drive.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.DriveTimeouts>;
}
