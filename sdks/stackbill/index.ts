// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { GetComputeOfferingListArgs, GetComputeOfferingListResult, GetComputeOfferingListOutputArgs } from "./getComputeOfferingList";
export const getComputeOfferingList: typeof import("./getComputeOfferingList").getComputeOfferingList = null as any;
export const getComputeOfferingListOutput: typeof import("./getComputeOfferingList").getComputeOfferingListOutput = null as any;
utilities.lazyLoad(exports, ["getComputeOfferingList","getComputeOfferingListOutput"], () => require("./getComputeOfferingList"));

export { GetInstanceListArgs, GetInstanceListResult, GetInstanceListOutputArgs } from "./getInstanceList";
export const getInstanceList: typeof import("./getInstanceList").getInstanceList = null as any;
export const getInstanceListOutput: typeof import("./getInstanceList").getInstanceListOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceList","getInstanceListOutput"], () => require("./getInstanceList"));

export { GetIsoListArgs, GetIsoListResult, GetIsoListOutputArgs } from "./getIsoList";
export const getIsoList: typeof import("./getIsoList").getIsoList = null as any;
export const getIsoListOutput: typeof import("./getIsoList").getIsoListOutput = null as any;
utilities.lazyLoad(exports, ["getIsoList","getIsoListOutput"], () => require("./getIsoList"));

export { GetNetworkListArgs, GetNetworkListResult, GetNetworkListOutputArgs } from "./getNetworkList";
export const getNetworkList: typeof import("./getNetworkList").getNetworkList = null as any;
export const getNetworkListOutput: typeof import("./getNetworkList").getNetworkListOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkList","getNetworkListOutput"], () => require("./getNetworkList"));

export { GetNetworkOfferingListArgs, GetNetworkOfferingListResult, GetNetworkOfferingListOutputArgs } from "./getNetworkOfferingList";
export const getNetworkOfferingList: typeof import("./getNetworkOfferingList").getNetworkOfferingList = null as any;
export const getNetworkOfferingListOutput: typeof import("./getNetworkOfferingList").getNetworkOfferingListOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkOfferingList","getNetworkOfferingListOutput"], () => require("./getNetworkOfferingList"));

export { GetSecurityGroupListArgs, GetSecurityGroupListResult, GetSecurityGroupListOutputArgs } from "./getSecurityGroupList";
export const getSecurityGroupList: typeof import("./getSecurityGroupList").getSecurityGroupList = null as any;
export const getSecurityGroupListOutput: typeof import("./getSecurityGroupList").getSecurityGroupListOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityGroupList","getSecurityGroupListOutput"], () => require("./getSecurityGroupList"));

export { GetSshkeyListArgs, GetSshkeyListResult, GetSshkeyListOutputArgs } from "./getSshkeyList";
export const getSshkeyList: typeof import("./getSshkeyList").getSshkeyList = null as any;
export const getSshkeyListOutput: typeof import("./getSshkeyList").getSshkeyListOutput = null as any;
utilities.lazyLoad(exports, ["getSshkeyList","getSshkeyListOutput"], () => require("./getSshkeyList"));

export { GetStorageOfferingListArgs, GetStorageOfferingListResult, GetStorageOfferingListOutputArgs } from "./getStorageOfferingList";
export const getStorageOfferingList: typeof import("./getStorageOfferingList").getStorageOfferingList = null as any;
export const getStorageOfferingListOutput: typeof import("./getStorageOfferingList").getStorageOfferingListOutput = null as any;
utilities.lazyLoad(exports, ["getStorageOfferingList","getStorageOfferingListOutput"], () => require("./getStorageOfferingList"));

export { GetTemplateListArgs, GetTemplateListResult, GetTemplateListOutputArgs } from "./getTemplateList";
export const getTemplateList: typeof import("./getTemplateList").getTemplateList = null as any;
export const getTemplateListOutput: typeof import("./getTemplateList").getTemplateListOutput = null as any;
utilities.lazyLoad(exports, ["getTemplateList","getTemplateListOutput"], () => require("./getTemplateList"));

export { GetVmSnapshotListArgs, GetVmSnapshotListResult, GetVmSnapshotListOutputArgs } from "./getVmSnapshotList";
export const getVmSnapshotList: typeof import("./getVmSnapshotList").getVmSnapshotList = null as any;
export const getVmSnapshotListOutput: typeof import("./getVmSnapshotList").getVmSnapshotListOutput = null as any;
utilities.lazyLoad(exports, ["getVmSnapshotList","getVmSnapshotListOutput"], () => require("./getVmSnapshotList"));

export { GetVolumeListArgs, GetVolumeListResult, GetVolumeListOutputArgs } from "./getVolumeList";
export const getVolumeList: typeof import("./getVolumeList").getVolumeList = null as any;
export const getVolumeListOutput: typeof import("./getVolumeList").getVolumeListOutput = null as any;
utilities.lazyLoad(exports, ["getVolumeList","getVolumeListOutput"], () => require("./getVolumeList"));

export { GetVpcNetworkOfferingListArgs, GetVpcNetworkOfferingListResult, GetVpcNetworkOfferingListOutputArgs } from "./getVpcNetworkOfferingList";
export const getVpcNetworkOfferingList: typeof import("./getVpcNetworkOfferingList").getVpcNetworkOfferingList = null as any;
export const getVpcNetworkOfferingListOutput: typeof import("./getVpcNetworkOfferingList").getVpcNetworkOfferingListOutput = null as any;
utilities.lazyLoad(exports, ["getVpcNetworkOfferingList","getVpcNetworkOfferingListOutput"], () => require("./getVpcNetworkOfferingList"));

export { GetZoneListArgs, GetZoneListResult, GetZoneListOutputArgs } from "./getZoneList";
export const getZoneList: typeof import("./getZoneList").getZoneList = null as any;
export const getZoneListOutput: typeof import("./getZoneList").getZoneListOutput = null as any;
utilities.lazyLoad(exports, ["getZoneList","getZoneListOutput"], () => require("./getZoneList"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { InstanceActionsArgs, InstanceActionsState } from "./instanceActions";
export type InstanceActions = import("./instanceActions").InstanceActions;
export const InstanceActions: typeof import("./instanceActions").InstanceActions = null as any;
utilities.lazyLoad(exports, ["InstanceActions"], () => require("./instanceActions"));

export { InstanceIsoActionsArgs, InstanceIsoActionsState } from "./instanceIsoActions";
export type InstanceIsoActions = import("./instanceIsoActions").InstanceIsoActions;
export const InstanceIsoActions: typeof import("./instanceIsoActions").InstanceIsoActions = null as any;
utilities.lazyLoad(exports, ["InstanceIsoActions"], () => require("./instanceIsoActions"));

export { InstanceResetSshkeyArgs, InstanceResetSshkeyState } from "./instanceResetSshkey";
export type InstanceResetSshkey = import("./instanceResetSshkey").InstanceResetSshkey;
export const InstanceResetSshkey: typeof import("./instanceResetSshkey").InstanceResetSshkey = null as any;
utilities.lazyLoad(exports, ["InstanceResetSshkey"], () => require("./instanceResetSshkey"));

export { InstanceResizeArgs, InstanceResizeState } from "./instanceResize";
export type InstanceResize = import("./instanceResize").InstanceResize;
export const InstanceResize: typeof import("./instanceResize").InstanceResize = null as any;
utilities.lazyLoad(exports, ["InstanceResize"], () => require("./instanceResize"));

export { InstanceSnapshotArgs, InstanceSnapshotState } from "./instanceSnapshot";
export type InstanceSnapshot = import("./instanceSnapshot").InstanceSnapshot;
export const InstanceSnapshot: typeof import("./instanceSnapshot").InstanceSnapshot = null as any;
utilities.lazyLoad(exports, ["InstanceSnapshot"], () => require("./instanceSnapshot"));

export { InstanceUpdateNameArgs, InstanceUpdateNameState } from "./instanceUpdateName";
export type InstanceUpdateName = import("./instanceUpdateName").InstanceUpdateName;
export const InstanceUpdateName: typeof import("./instanceUpdateName").InstanceUpdateName = null as any;
utilities.lazyLoad(exports, ["InstanceUpdateName"], () => require("./instanceUpdateName"));

export { NetworkArgs, NetworkState } from "./network";
export type Network = import("./network").Network;
export const Network: typeof import("./network").Network = null as any;
utilities.lazyLoad(exports, ["Network"], () => require("./network"));

export { NetworkActionsArgs, NetworkActionsState } from "./networkActions";
export type NetworkActions = import("./networkActions").NetworkActions;
export const NetworkActions: typeof import("./networkActions").NetworkActions = null as any;
utilities.lazyLoad(exports, ["NetworkActions"], () => require("./networkActions"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { VolumeArgs, VolumeState } from "./volume";
export type Volume = import("./volume").Volume;
export const Volume: typeof import("./volume").Volume = null as any;
utilities.lazyLoad(exports, ["Volume"], () => require("./volume"));

export { VolumeActionsArgs, VolumeActionsState } from "./volumeActions";
export type VolumeActions = import("./volumeActions").VolumeActions;
export const VolumeActions: typeof import("./volumeActions").VolumeActions = null as any;
utilities.lazyLoad(exports, ["VolumeActions"], () => require("./volumeActions"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "stackbill:index/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "stackbill:index/instanceActions:InstanceActions":
                return new InstanceActions(name, <any>undefined, { urn })
            case "stackbill:index/instanceIsoActions:InstanceIsoActions":
                return new InstanceIsoActions(name, <any>undefined, { urn })
            case "stackbill:index/instanceResetSshkey:InstanceResetSshkey":
                return new InstanceResetSshkey(name, <any>undefined, { urn })
            case "stackbill:index/instanceResize:InstanceResize":
                return new InstanceResize(name, <any>undefined, { urn })
            case "stackbill:index/instanceSnapshot:InstanceSnapshot":
                return new InstanceSnapshot(name, <any>undefined, { urn })
            case "stackbill:index/instanceUpdateName:InstanceUpdateName":
                return new InstanceUpdateName(name, <any>undefined, { urn })
            case "stackbill:index/network:Network":
                return new Network(name, <any>undefined, { urn })
            case "stackbill:index/networkActions:NetworkActions":
                return new NetworkActions(name, <any>undefined, { urn })
            case "stackbill:index/volume:Volume":
                return new Volume(name, <any>undefined, { urn })
            case "stackbill:index/volumeActions:VolumeActions":
                return new VolumeActions(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("stackbill", "index/instance", _module)
pulumi.runtime.registerResourceModule("stackbill", "index/instanceActions", _module)
pulumi.runtime.registerResourceModule("stackbill", "index/instanceIsoActions", _module)
pulumi.runtime.registerResourceModule("stackbill", "index/instanceResetSshkey", _module)
pulumi.runtime.registerResourceModule("stackbill", "index/instanceResize", _module)
pulumi.runtime.registerResourceModule("stackbill", "index/instanceSnapshot", _module)
pulumi.runtime.registerResourceModule("stackbill", "index/instanceUpdateName", _module)
pulumi.runtime.registerResourceModule("stackbill", "index/network", _module)
pulumi.runtime.registerResourceModule("stackbill", "index/networkActions", _module)
pulumi.runtime.registerResourceModule("stackbill", "index/volume", _module)
pulumi.runtime.registerResourceModule("stackbill", "index/volumeActions", _module)
pulumi.runtime.registerResourcePackage("stackbill", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:stackbill") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
