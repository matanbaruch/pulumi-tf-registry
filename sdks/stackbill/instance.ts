// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Instance extends pulumi.CustomResource {
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceState, opts?: pulumi.CustomResourceOptions): Instance {
        return new Instance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'stackbill:index/instance:Instance';

    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Instance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Instance.__pulumiType;
    }

    public readonly computeOfferingUuid!: pulumi.Output<string>;
    public readonly cpuCore!: pulumi.Output<string | undefined>;
    public readonly diskSize!: pulumi.Output<number | undefined>;
    public readonly hypervisorName!: pulumi.Output<string | undefined>;
    public readonly memory!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkUuid!: pulumi.Output<string>;
    public readonly securityGroupName!: pulumi.Output<string | undefined>;
    public readonly sshKeyName!: pulumi.Output<string | undefined>;
    public readonly storageOfferingUuid!: pulumi.Output<string | undefined>;
    public readonly templateUuid!: pulumi.Output<string>;
    public readonly zoneUuid!: pulumi.Output<string>;

    /**
     * Create a Instance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceArgs | InstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceState | undefined;
            resourceInputs["computeOfferingUuid"] = state ? state.computeOfferingUuid : undefined;
            resourceInputs["cpuCore"] = state ? state.cpuCore : undefined;
            resourceInputs["diskSize"] = state ? state.diskSize : undefined;
            resourceInputs["hypervisorName"] = state ? state.hypervisorName : undefined;
            resourceInputs["memory"] = state ? state.memory : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkUuid"] = state ? state.networkUuid : undefined;
            resourceInputs["securityGroupName"] = state ? state.securityGroupName : undefined;
            resourceInputs["sshKeyName"] = state ? state.sshKeyName : undefined;
            resourceInputs["storageOfferingUuid"] = state ? state.storageOfferingUuid : undefined;
            resourceInputs["templateUuid"] = state ? state.templateUuid : undefined;
            resourceInputs["zoneUuid"] = state ? state.zoneUuid : undefined;
        } else {
            const args = argsOrState as InstanceArgs | undefined;
            if ((!args || args.computeOfferingUuid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'computeOfferingUuid'");
            }
            if ((!args || args.networkUuid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkUuid'");
            }
            if ((!args || args.templateUuid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'templateUuid'");
            }
            if ((!args || args.zoneUuid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneUuid'");
            }
            resourceInputs["computeOfferingUuid"] = args ? args.computeOfferingUuid : undefined;
            resourceInputs["cpuCore"] = args ? args.cpuCore : undefined;
            resourceInputs["diskSize"] = args ? args.diskSize : undefined;
            resourceInputs["hypervisorName"] = args ? args.hypervisorName : undefined;
            resourceInputs["memory"] = args ? args.memory : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkUuid"] = args ? args.networkUuid : undefined;
            resourceInputs["securityGroupName"] = args ? args.securityGroupName : undefined;
            resourceInputs["sshKeyName"] = args ? args.sshKeyName : undefined;
            resourceInputs["storageOfferingUuid"] = args ? args.storageOfferingUuid : undefined;
            resourceInputs["templateUuid"] = args ? args.templateUuid : undefined;
            resourceInputs["zoneUuid"] = args ? args.zoneUuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Instance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Instance resources.
 */
export interface InstanceState {
    computeOfferingUuid?: pulumi.Input<string>;
    cpuCore?: pulumi.Input<string>;
    diskSize?: pulumi.Input<number>;
    hypervisorName?: pulumi.Input<string>;
    memory?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkUuid?: pulumi.Input<string>;
    securityGroupName?: pulumi.Input<string>;
    sshKeyName?: pulumi.Input<string>;
    storageOfferingUuid?: pulumi.Input<string>;
    templateUuid?: pulumi.Input<string>;
    zoneUuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Instance resource.
 */
export interface InstanceArgs {
    computeOfferingUuid: pulumi.Input<string>;
    cpuCore?: pulumi.Input<string>;
    diskSize?: pulumi.Input<number>;
    hypervisorName?: pulumi.Input<string>;
    memory?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkUuid: pulumi.Input<string>;
    securityGroupName?: pulumi.Input<string>;
    sshKeyName?: pulumi.Input<string>;
    storageOfferingUuid?: pulumi.Input<string>;
    templateUuid: pulumi.Input<string>;
    zoneUuid: pulumi.Input<string>;
}
