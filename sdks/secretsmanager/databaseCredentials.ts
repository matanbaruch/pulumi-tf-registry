// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatabaseCredentials extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseCredentials resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseCredentialsState, opts?: pulumi.CustomResourceOptions): DatabaseCredentials {
        return new DatabaseCredentials(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'secretsmanager:index/databaseCredentials:DatabaseCredentials';

    /**
     * Returns true if the given object is an instance of DatabaseCredentials.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseCredentials {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseCredentials.__pulumiType;
    }

    /**
     * Text field data.
     */
    public readonly dbType!: pulumi.Output<outputs.DatabaseCredentialsDbType | undefined>;
    /**
     * FileRef field data.
     */
    public readonly fileRef!: pulumi.Output<outputs.DatabaseCredentialsFileRef | undefined>;
    /**
     * The folder UID where the secret is stored. The parent shared folder must be non empty.
     */
    public readonly folderUid!: pulumi.Output<string>;
    /**
     * Host field data.
     */
    public readonly host!: pulumi.Output<outputs.DatabaseCredentialsHost | undefined>;
    /**
     * Login field data.
     */
    public readonly login!: pulumi.Output<outputs.DatabaseCredentialsLogin | undefined>;
    /**
     * The secret notes.
     */
    public readonly notes!: pulumi.Output<string | undefined>;
    /**
     * Password field data.
     */
    public readonly password!: pulumi.Output<outputs.DatabaseCredentialsPassword | undefined>;
    /**
     * The secret title.
     */
    public readonly title!: pulumi.Output<string | undefined>;
    /**
     * The secret type.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * The UID of the new secret (using RFC4648 URL and Filename Safe Alphabet).
     */
    public readonly uid!: pulumi.Output<string>;

    /**
     * Create a DatabaseCredentials resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DatabaseCredentialsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseCredentialsArgs | DatabaseCredentialsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseCredentialsState | undefined;
            resourceInputs["dbType"] = state ? state.dbType : undefined;
            resourceInputs["fileRef"] = state ? state.fileRef : undefined;
            resourceInputs["folderUid"] = state ? state.folderUid : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["login"] = state ? state.login : undefined;
            resourceInputs["notes"] = state ? state.notes : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
        } else {
            const args = argsOrState as DatabaseCredentialsArgs | undefined;
            resourceInputs["dbType"] = args ? args.dbType : undefined;
            resourceInputs["fileRef"] = args ? args.fileRef : undefined;
            resourceInputs["folderUid"] = args ? args.folderUid : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["login"] = args ? args.login : undefined;
            resourceInputs["notes"] = args ? args.notes : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["uid"] = args ? args.uid : undefined;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabaseCredentials.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatabaseCredentials resources.
 */
export interface DatabaseCredentialsState {
    /**
     * Text field data.
     */
    dbType?: pulumi.Input<inputs.DatabaseCredentialsDbType>;
    /**
     * FileRef field data.
     */
    fileRef?: pulumi.Input<inputs.DatabaseCredentialsFileRef>;
    /**
     * The folder UID where the secret is stored. The parent shared folder must be non empty.
     */
    folderUid?: pulumi.Input<string>;
    /**
     * Host field data.
     */
    host?: pulumi.Input<inputs.DatabaseCredentialsHost>;
    /**
     * Login field data.
     */
    login?: pulumi.Input<inputs.DatabaseCredentialsLogin>;
    /**
     * The secret notes.
     */
    notes?: pulumi.Input<string>;
    /**
     * Password field data.
     */
    password?: pulumi.Input<inputs.DatabaseCredentialsPassword>;
    /**
     * The secret title.
     */
    title?: pulumi.Input<string>;
    /**
     * The secret type.
     */
    type?: pulumi.Input<string>;
    /**
     * The UID of the new secret (using RFC4648 URL and Filename Safe Alphabet).
     */
    uid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DatabaseCredentials resource.
 */
export interface DatabaseCredentialsArgs {
    /**
     * Text field data.
     */
    dbType?: pulumi.Input<inputs.DatabaseCredentialsDbType>;
    /**
     * FileRef field data.
     */
    fileRef?: pulumi.Input<inputs.DatabaseCredentialsFileRef>;
    /**
     * The folder UID where the secret is stored. The parent shared folder must be non empty.
     */
    folderUid?: pulumi.Input<string>;
    /**
     * Host field data.
     */
    host?: pulumi.Input<inputs.DatabaseCredentialsHost>;
    /**
     * Login field data.
     */
    login?: pulumi.Input<inputs.DatabaseCredentialsLogin>;
    /**
     * The secret notes.
     */
    notes?: pulumi.Input<string>;
    /**
     * Password field data.
     */
    password?: pulumi.Input<inputs.DatabaseCredentialsPassword>;
    /**
     * The secret title.
     */
    title?: pulumi.Input<string>;
    /**
     * The UID of the new secret (using RFC4648 URL and Filename Safe Alphabet).
     */
    uid?: pulumi.Input<string>;
}
