// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AddressArgs, AddressState } from "./address";
export type Address = import("./address").Address;
export const Address: typeof import("./address").Address = null as any;
utilities.lazyLoad(exports, ["Address"], () => require("./address"));

export { BankAccountArgs, BankAccountState } from "./bankAccount";
export type BankAccount = import("./bankAccount").BankAccount;
export const BankAccount: typeof import("./bankAccount").BankAccount = null as any;
utilities.lazyLoad(exports, ["BankAccount"], () => require("./bankAccount"));

export { BankCardArgs, BankCardState } from "./bankCard";
export type BankCard = import("./bankCard").BankCard;
export const BankCard: typeof import("./bankCard").BankCard = null as any;
utilities.lazyLoad(exports, ["BankCard"], () => require("./bankCard"));

export { BirthCertificateArgs, BirthCertificateState } from "./birthCertificate";
export type BirthCertificate = import("./birthCertificate").BirthCertificate;
export const BirthCertificate: typeof import("./birthCertificate").BirthCertificate = null as any;
utilities.lazyLoad(exports, ["BirthCertificate"], () => require("./birthCertificate"));

export { ContactArgs, ContactState } from "./contact";
export type Contact = import("./contact").Contact;
export const Contact: typeof import("./contact").Contact = null as any;
utilities.lazyLoad(exports, ["Contact"], () => require("./contact"));

export { DatabaseCredentialsArgs, DatabaseCredentialsState } from "./databaseCredentials";
export type DatabaseCredentials = import("./databaseCredentials").DatabaseCredentials;
export const DatabaseCredentials: typeof import("./databaseCredentials").DatabaseCredentials = null as any;
utilities.lazyLoad(exports, ["DatabaseCredentials"], () => require("./databaseCredentials"));

export { DriverLicenseArgs, DriverLicenseState } from "./driverLicense";
export type DriverLicense = import("./driverLicense").DriverLicense;
export const DriverLicense: typeof import("./driverLicense").DriverLicense = null as any;
utilities.lazyLoad(exports, ["DriverLicense"], () => require("./driverLicense"));

export { EncryptedNotesArgs, EncryptedNotesState } from "./encryptedNotes";
export type EncryptedNotes = import("./encryptedNotes").EncryptedNotes;
export const EncryptedNotes: typeof import("./encryptedNotes").EncryptedNotes = null as any;
utilities.lazyLoad(exports, ["EncryptedNotes"], () => require("./encryptedNotes"));

export { FileArgs, FileState } from "./file";
export type File = import("./file").File;
export const File: typeof import("./file").File = null as any;
utilities.lazyLoad(exports, ["File"], () => require("./file"));

export { GetAddressArgs, GetAddressResult, GetAddressOutputArgs } from "./getAddress";
export const getAddress: typeof import("./getAddress").getAddress = null as any;
export const getAddressOutput: typeof import("./getAddress").getAddressOutput = null as any;
utilities.lazyLoad(exports, ["getAddress","getAddressOutput"], () => require("./getAddress"));

export { GetBankAccountArgs, GetBankAccountResult, GetBankAccountOutputArgs } from "./getBankAccount";
export const getBankAccount: typeof import("./getBankAccount").getBankAccount = null as any;
export const getBankAccountOutput: typeof import("./getBankAccount").getBankAccountOutput = null as any;
utilities.lazyLoad(exports, ["getBankAccount","getBankAccountOutput"], () => require("./getBankAccount"));

export { GetBankCardArgs, GetBankCardResult, GetBankCardOutputArgs } from "./getBankCard";
export const getBankCard: typeof import("./getBankCard").getBankCard = null as any;
export const getBankCardOutput: typeof import("./getBankCard").getBankCardOutput = null as any;
utilities.lazyLoad(exports, ["getBankCard","getBankCardOutput"], () => require("./getBankCard"));

export { GetBirthCertificateArgs, GetBirthCertificateResult, GetBirthCertificateOutputArgs } from "./getBirthCertificate";
export const getBirthCertificate: typeof import("./getBirthCertificate").getBirthCertificate = null as any;
export const getBirthCertificateOutput: typeof import("./getBirthCertificate").getBirthCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getBirthCertificate","getBirthCertificateOutput"], () => require("./getBirthCertificate"));

export { GetContactArgs, GetContactResult, GetContactOutputArgs } from "./getContact";
export const getContact: typeof import("./getContact").getContact = null as any;
export const getContactOutput: typeof import("./getContact").getContactOutput = null as any;
utilities.lazyLoad(exports, ["getContact","getContactOutput"], () => require("./getContact"));

export { GetDatabaseCredentialsArgs, GetDatabaseCredentialsResult, GetDatabaseCredentialsOutputArgs } from "./getDatabaseCredentials";
export const getDatabaseCredentials: typeof import("./getDatabaseCredentials").getDatabaseCredentials = null as any;
export const getDatabaseCredentialsOutput: typeof import("./getDatabaseCredentials").getDatabaseCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseCredentials","getDatabaseCredentialsOutput"], () => require("./getDatabaseCredentials"));

export { GetDriverLicenseArgs, GetDriverLicenseResult, GetDriverLicenseOutputArgs } from "./getDriverLicense";
export const getDriverLicense: typeof import("./getDriverLicense").getDriverLicense = null as any;
export const getDriverLicenseOutput: typeof import("./getDriverLicense").getDriverLicenseOutput = null as any;
utilities.lazyLoad(exports, ["getDriverLicense","getDriverLicenseOutput"], () => require("./getDriverLicense"));

export { GetEncryptedNotesArgs, GetEncryptedNotesResult, GetEncryptedNotesOutputArgs } from "./getEncryptedNotes";
export const getEncryptedNotes: typeof import("./getEncryptedNotes").getEncryptedNotes = null as any;
export const getEncryptedNotesOutput: typeof import("./getEncryptedNotes").getEncryptedNotesOutput = null as any;
utilities.lazyLoad(exports, ["getEncryptedNotes","getEncryptedNotesOutput"], () => require("./getEncryptedNotes"));

export { GetFieldArgs, GetFieldResult, GetFieldOutputArgs } from "./getField";
export const getField: typeof import("./getField").getField = null as any;
export const getFieldOutput: typeof import("./getField").getFieldOutput = null as any;
utilities.lazyLoad(exports, ["getField","getFieldOutput"], () => require("./getField"));

export { GetFileArgs, GetFileResult, GetFileOutputArgs } from "./getFile";
export const getFile: typeof import("./getFile").getFile = null as any;
export const getFileOutput: typeof import("./getFile").getFileOutput = null as any;
utilities.lazyLoad(exports, ["getFile","getFileOutput"], () => require("./getFile"));

export { GetGeneralArgs, GetGeneralResult, GetGeneralOutputArgs } from "./getGeneral";
export const getGeneral: typeof import("./getGeneral").getGeneral = null as any;
export const getGeneralOutput: typeof import("./getGeneral").getGeneralOutput = null as any;
utilities.lazyLoad(exports, ["getGeneral","getGeneralOutput"], () => require("./getGeneral"));

export { GetHealthInsuranceArgs, GetHealthInsuranceResult, GetHealthInsuranceOutputArgs } from "./getHealthInsurance";
export const getHealthInsurance: typeof import("./getHealthInsurance").getHealthInsurance = null as any;
export const getHealthInsuranceOutput: typeof import("./getHealthInsurance").getHealthInsuranceOutput = null as any;
utilities.lazyLoad(exports, ["getHealthInsurance","getHealthInsuranceOutput"], () => require("./getHealthInsurance"));

export { GetLoginArgs, GetLoginResult, GetLoginOutputArgs } from "./getLogin";
export const getLogin: typeof import("./getLogin").getLogin = null as any;
export const getLoginOutput: typeof import("./getLogin").getLoginOutput = null as any;
utilities.lazyLoad(exports, ["getLogin","getLoginOutput"], () => require("./getLogin"));

export { GetMembershipArgs, GetMembershipResult, GetMembershipOutputArgs } from "./getMembership";
export const getMembership: typeof import("./getMembership").getMembership = null as any;
export const getMembershipOutput: typeof import("./getMembership").getMembershipOutput = null as any;
utilities.lazyLoad(exports, ["getMembership","getMembershipOutput"], () => require("./getMembership"));

export { GetPassportArgs, GetPassportResult, GetPassportOutputArgs } from "./getPassport";
export const getPassport: typeof import("./getPassport").getPassport = null as any;
export const getPassportOutput: typeof import("./getPassport").getPassportOutput = null as any;
utilities.lazyLoad(exports, ["getPassport","getPassportOutput"], () => require("./getPassport"));

export { GetPhotoArgs, GetPhotoResult, GetPhotoOutputArgs } from "./getPhoto";
export const getPhoto: typeof import("./getPhoto").getPhoto = null as any;
export const getPhotoOutput: typeof import("./getPhoto").getPhotoOutput = null as any;
utilities.lazyLoad(exports, ["getPhoto","getPhotoOutput"], () => require("./getPhoto"));

export { GetServerCredentialsArgs, GetServerCredentialsResult, GetServerCredentialsOutputArgs } from "./getServerCredentials";
export const getServerCredentials: typeof import("./getServerCredentials").getServerCredentials = null as any;
export const getServerCredentialsOutput: typeof import("./getServerCredentials").getServerCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getServerCredentials","getServerCredentialsOutput"], () => require("./getServerCredentials"));

export { GetSoftwareLicenseArgs, GetSoftwareLicenseResult, GetSoftwareLicenseOutputArgs } from "./getSoftwareLicense";
export const getSoftwareLicense: typeof import("./getSoftwareLicense").getSoftwareLicense = null as any;
export const getSoftwareLicenseOutput: typeof import("./getSoftwareLicense").getSoftwareLicenseOutput = null as any;
utilities.lazyLoad(exports, ["getSoftwareLicense","getSoftwareLicenseOutput"], () => require("./getSoftwareLicense"));

export { GetSshKeysArgs, GetSshKeysResult, GetSshKeysOutputArgs } from "./getSshKeys";
export const getSshKeys: typeof import("./getSshKeys").getSshKeys = null as any;
export const getSshKeysOutput: typeof import("./getSshKeys").getSshKeysOutput = null as any;
utilities.lazyLoad(exports, ["getSshKeys","getSshKeysOutput"], () => require("./getSshKeys"));

export { GetSsnCardArgs, GetSsnCardResult, GetSsnCardOutputArgs } from "./getSsnCard";
export const getSsnCard: typeof import("./getSsnCard").getSsnCard = null as any;
export const getSsnCardOutput: typeof import("./getSsnCard").getSsnCardOutput = null as any;
utilities.lazyLoad(exports, ["getSsnCard","getSsnCardOutput"], () => require("./getSsnCard"));

export { HealthInsuranceArgs, HealthInsuranceState } from "./healthInsurance";
export type HealthInsurance = import("./healthInsurance").HealthInsurance;
export const HealthInsurance: typeof import("./healthInsurance").HealthInsurance = null as any;
utilities.lazyLoad(exports, ["HealthInsurance"], () => require("./healthInsurance"));

export { LoginArgs, LoginState } from "./login";
export type Login = import("./login").Login;
export const Login: typeof import("./login").Login = null as any;
utilities.lazyLoad(exports, ["Login"], () => require("./login"));

export { MembershipArgs, MembershipState } from "./membership";
export type Membership = import("./membership").Membership;
export const Membership: typeof import("./membership").Membership = null as any;
utilities.lazyLoad(exports, ["Membership"], () => require("./membership"));

export { PassportArgs, PassportState } from "./passport";
export type Passport = import("./passport").Passport;
export const Passport: typeof import("./passport").Passport = null as any;
utilities.lazyLoad(exports, ["Passport"], () => require("./passport"));

export { PhotoArgs, PhotoState } from "./photo";
export type Photo = import("./photo").Photo;
export const Photo: typeof import("./photo").Photo = null as any;
utilities.lazyLoad(exports, ["Photo"], () => require("./photo"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ServerCredentialsArgs, ServerCredentialsState } from "./serverCredentials";
export type ServerCredentials = import("./serverCredentials").ServerCredentials;
export const ServerCredentials: typeof import("./serverCredentials").ServerCredentials = null as any;
utilities.lazyLoad(exports, ["ServerCredentials"], () => require("./serverCredentials"));

export { SoftwareLicenseArgs, SoftwareLicenseState } from "./softwareLicense";
export type SoftwareLicense = import("./softwareLicense").SoftwareLicense;
export const SoftwareLicense: typeof import("./softwareLicense").SoftwareLicense = null as any;
utilities.lazyLoad(exports, ["SoftwareLicense"], () => require("./softwareLicense"));

export { SshKeysArgs, SshKeysState } from "./sshKeys";
export type SshKeys = import("./sshKeys").SshKeys;
export const SshKeys: typeof import("./sshKeys").SshKeys = null as any;
utilities.lazyLoad(exports, ["SshKeys"], () => require("./sshKeys"));

export { SsnCardArgs, SsnCardState } from "./ssnCard";
export type SsnCard = import("./ssnCard").SsnCard;
export const SsnCard: typeof import("./ssnCard").SsnCard = null as any;
utilities.lazyLoad(exports, ["SsnCard"], () => require("./ssnCard"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "secretsmanager:index/address:Address":
                return new Address(name, <any>undefined, { urn })
            case "secretsmanager:index/bankAccount:BankAccount":
                return new BankAccount(name, <any>undefined, { urn })
            case "secretsmanager:index/bankCard:BankCard":
                return new BankCard(name, <any>undefined, { urn })
            case "secretsmanager:index/birthCertificate:BirthCertificate":
                return new BirthCertificate(name, <any>undefined, { urn })
            case "secretsmanager:index/contact:Contact":
                return new Contact(name, <any>undefined, { urn })
            case "secretsmanager:index/databaseCredentials:DatabaseCredentials":
                return new DatabaseCredentials(name, <any>undefined, { urn })
            case "secretsmanager:index/driverLicense:DriverLicense":
                return new DriverLicense(name, <any>undefined, { urn })
            case "secretsmanager:index/encryptedNotes:EncryptedNotes":
                return new EncryptedNotes(name, <any>undefined, { urn })
            case "secretsmanager:index/file:File":
                return new File(name, <any>undefined, { urn })
            case "secretsmanager:index/healthInsurance:HealthInsurance":
                return new HealthInsurance(name, <any>undefined, { urn })
            case "secretsmanager:index/login:Login":
                return new Login(name, <any>undefined, { urn })
            case "secretsmanager:index/membership:Membership":
                return new Membership(name, <any>undefined, { urn })
            case "secretsmanager:index/passport:Passport":
                return new Passport(name, <any>undefined, { urn })
            case "secretsmanager:index/photo:Photo":
                return new Photo(name, <any>undefined, { urn })
            case "secretsmanager:index/serverCredentials:ServerCredentials":
                return new ServerCredentials(name, <any>undefined, { urn })
            case "secretsmanager:index/softwareLicense:SoftwareLicense":
                return new SoftwareLicense(name, <any>undefined, { urn })
            case "secretsmanager:index/sshKeys:SshKeys":
                return new SshKeys(name, <any>undefined, { urn })
            case "secretsmanager:index/ssnCard:SsnCard":
                return new SsnCard(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("secretsmanager", "index/address", _module)
pulumi.runtime.registerResourceModule("secretsmanager", "index/bankAccount", _module)
pulumi.runtime.registerResourceModule("secretsmanager", "index/bankCard", _module)
pulumi.runtime.registerResourceModule("secretsmanager", "index/birthCertificate", _module)
pulumi.runtime.registerResourceModule("secretsmanager", "index/contact", _module)
pulumi.runtime.registerResourceModule("secretsmanager", "index/databaseCredentials", _module)
pulumi.runtime.registerResourceModule("secretsmanager", "index/driverLicense", _module)
pulumi.runtime.registerResourceModule("secretsmanager", "index/encryptedNotes", _module)
pulumi.runtime.registerResourceModule("secretsmanager", "index/file", _module)
pulumi.runtime.registerResourceModule("secretsmanager", "index/healthInsurance", _module)
pulumi.runtime.registerResourceModule("secretsmanager", "index/login", _module)
pulumi.runtime.registerResourceModule("secretsmanager", "index/membership", _module)
pulumi.runtime.registerResourceModule("secretsmanager", "index/passport", _module)
pulumi.runtime.registerResourceModule("secretsmanager", "index/photo", _module)
pulumi.runtime.registerResourceModule("secretsmanager", "index/serverCredentials", _module)
pulumi.runtime.registerResourceModule("secretsmanager", "index/softwareLicense", _module)
pulumi.runtime.registerResourceModule("secretsmanager", "index/sshKeys", _module)
pulumi.runtime.registerResourceModule("secretsmanager", "index/ssnCard", _module)
pulumi.runtime.registerResourcePackage("secretsmanager", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:secretsmanager") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
