// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Nat extends pulumi.CustomResource {
    /**
     * Get an existing Nat resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NatState, opts?: pulumi.CustomResourceOptions): Nat {
        return new Nat(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ciscoasa:index/nat:Nat';

    /**
     * Returns true if the given object is an instance of Nat.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Nat {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Nat.__pulumiType;
    }

    public readonly active!: pulumi.Output<boolean | undefined>;
    public readonly blockAllocation!: pulumi.Output<boolean | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly dns!: pulumi.Output<boolean | undefined>;
    public readonly extended!: pulumi.Output<boolean | undefined>;
    public readonly flat!: pulumi.Output<boolean | undefined>;
    public readonly includeReserve!: pulumi.Output<boolean | undefined>;
    public readonly interfacePat!: pulumi.Output<boolean | undefined>;
    public readonly lastUpdated!: pulumi.Output<string>;
    public readonly mode!: pulumi.Output<string>;
    public readonly netToNet!: pulumi.Output<boolean | undefined>;
    public readonly noProxyArp!: pulumi.Output<boolean | undefined>;
    public readonly originalDestinationKind!: pulumi.Output<string | undefined>;
    public readonly originalDestinationValue!: pulumi.Output<string | undefined>;
    public readonly originalInterfaceName!: pulumi.Output<string | undefined>;
    public readonly originalServiceKind!: pulumi.Output<string | undefined>;
    public readonly originalServiceValue!: pulumi.Output<string | undefined>;
    public readonly originalSourceKind!: pulumi.Output<string | undefined>;
    public readonly originalSourceValue!: pulumi.Output<string | undefined>;
    public readonly patPool!: pulumi.Output<boolean | undefined>;
    public readonly position!: pulumi.Output<number>;
    public readonly roundRobin!: pulumi.Output<boolean | undefined>;
    public readonly routeLookup!: pulumi.Output<boolean | undefined>;
    public readonly section!: pulumi.Output<string>;
    public readonly translatedDestinationKind!: pulumi.Output<string | undefined>;
    public readonly translatedDestinationValue!: pulumi.Output<string | undefined>;
    public readonly translatedInterfaceName!: pulumi.Output<string | undefined>;
    public readonly translatedServiceKind!: pulumi.Output<string | undefined>;
    public readonly translatedServiceValue!: pulumi.Output<string | undefined>;
    public readonly translatedSourceKind!: pulumi.Output<string | undefined>;
    public readonly translatedSourcePatPoolKind!: pulumi.Output<string | undefined>;
    public readonly translatedSourcePatPoolValue!: pulumi.Output<string | undefined>;
    public readonly translatedSourceValue!: pulumi.Output<string | undefined>;
    public readonly unidirectional!: pulumi.Output<boolean | undefined>;
    public readonly useDestinationInterfaceIpv6!: pulumi.Output<boolean | undefined>;
    public readonly useSourceInterfaceIpv6!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Nat resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NatArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NatArgs | NatState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NatState | undefined;
            resourceInputs["active"] = state ? state.active : undefined;
            resourceInputs["blockAllocation"] = state ? state.blockAllocation : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dns"] = state ? state.dns : undefined;
            resourceInputs["extended"] = state ? state.extended : undefined;
            resourceInputs["flat"] = state ? state.flat : undefined;
            resourceInputs["includeReserve"] = state ? state.includeReserve : undefined;
            resourceInputs["interfacePat"] = state ? state.interfacePat : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["netToNet"] = state ? state.netToNet : undefined;
            resourceInputs["noProxyArp"] = state ? state.noProxyArp : undefined;
            resourceInputs["originalDestinationKind"] = state ? state.originalDestinationKind : undefined;
            resourceInputs["originalDestinationValue"] = state ? state.originalDestinationValue : undefined;
            resourceInputs["originalInterfaceName"] = state ? state.originalInterfaceName : undefined;
            resourceInputs["originalServiceKind"] = state ? state.originalServiceKind : undefined;
            resourceInputs["originalServiceValue"] = state ? state.originalServiceValue : undefined;
            resourceInputs["originalSourceKind"] = state ? state.originalSourceKind : undefined;
            resourceInputs["originalSourceValue"] = state ? state.originalSourceValue : undefined;
            resourceInputs["patPool"] = state ? state.patPool : undefined;
            resourceInputs["position"] = state ? state.position : undefined;
            resourceInputs["roundRobin"] = state ? state.roundRobin : undefined;
            resourceInputs["routeLookup"] = state ? state.routeLookup : undefined;
            resourceInputs["section"] = state ? state.section : undefined;
            resourceInputs["translatedDestinationKind"] = state ? state.translatedDestinationKind : undefined;
            resourceInputs["translatedDestinationValue"] = state ? state.translatedDestinationValue : undefined;
            resourceInputs["translatedInterfaceName"] = state ? state.translatedInterfaceName : undefined;
            resourceInputs["translatedServiceKind"] = state ? state.translatedServiceKind : undefined;
            resourceInputs["translatedServiceValue"] = state ? state.translatedServiceValue : undefined;
            resourceInputs["translatedSourceKind"] = state ? state.translatedSourceKind : undefined;
            resourceInputs["translatedSourcePatPoolKind"] = state ? state.translatedSourcePatPoolKind : undefined;
            resourceInputs["translatedSourcePatPoolValue"] = state ? state.translatedSourcePatPoolValue : undefined;
            resourceInputs["translatedSourceValue"] = state ? state.translatedSourceValue : undefined;
            resourceInputs["unidirectional"] = state ? state.unidirectional : undefined;
            resourceInputs["useDestinationInterfaceIpv6"] = state ? state.useDestinationInterfaceIpv6 : undefined;
            resourceInputs["useSourceInterfaceIpv6"] = state ? state.useSourceInterfaceIpv6 : undefined;
        } else {
            const args = argsOrState as NatArgs | undefined;
            if ((!args || args.mode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mode'");
            }
            if ((!args || args.section === undefined) && !opts.urn) {
                throw new Error("Missing required property 'section'");
            }
            resourceInputs["active"] = args ? args.active : undefined;
            resourceInputs["blockAllocation"] = args ? args.blockAllocation : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dns"] = args ? args.dns : undefined;
            resourceInputs["extended"] = args ? args.extended : undefined;
            resourceInputs["flat"] = args ? args.flat : undefined;
            resourceInputs["includeReserve"] = args ? args.includeReserve : undefined;
            resourceInputs["interfacePat"] = args ? args.interfacePat : undefined;
            resourceInputs["lastUpdated"] = args ? args.lastUpdated : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["netToNet"] = args ? args.netToNet : undefined;
            resourceInputs["noProxyArp"] = args ? args.noProxyArp : undefined;
            resourceInputs["originalDestinationKind"] = args ? args.originalDestinationKind : undefined;
            resourceInputs["originalDestinationValue"] = args ? args.originalDestinationValue : undefined;
            resourceInputs["originalInterfaceName"] = args ? args.originalInterfaceName : undefined;
            resourceInputs["originalServiceKind"] = args ? args.originalServiceKind : undefined;
            resourceInputs["originalServiceValue"] = args ? args.originalServiceValue : undefined;
            resourceInputs["originalSourceKind"] = args ? args.originalSourceKind : undefined;
            resourceInputs["originalSourceValue"] = args ? args.originalSourceValue : undefined;
            resourceInputs["patPool"] = args ? args.patPool : undefined;
            resourceInputs["position"] = args ? args.position : undefined;
            resourceInputs["roundRobin"] = args ? args.roundRobin : undefined;
            resourceInputs["routeLookup"] = args ? args.routeLookup : undefined;
            resourceInputs["section"] = args ? args.section : undefined;
            resourceInputs["translatedDestinationKind"] = args ? args.translatedDestinationKind : undefined;
            resourceInputs["translatedDestinationValue"] = args ? args.translatedDestinationValue : undefined;
            resourceInputs["translatedInterfaceName"] = args ? args.translatedInterfaceName : undefined;
            resourceInputs["translatedServiceKind"] = args ? args.translatedServiceKind : undefined;
            resourceInputs["translatedServiceValue"] = args ? args.translatedServiceValue : undefined;
            resourceInputs["translatedSourceKind"] = args ? args.translatedSourceKind : undefined;
            resourceInputs["translatedSourcePatPoolKind"] = args ? args.translatedSourcePatPoolKind : undefined;
            resourceInputs["translatedSourcePatPoolValue"] = args ? args.translatedSourcePatPoolValue : undefined;
            resourceInputs["translatedSourceValue"] = args ? args.translatedSourceValue : undefined;
            resourceInputs["unidirectional"] = args ? args.unidirectional : undefined;
            resourceInputs["useDestinationInterfaceIpv6"] = args ? args.useDestinationInterfaceIpv6 : undefined;
            resourceInputs["useSourceInterfaceIpv6"] = args ? args.useSourceInterfaceIpv6 : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Nat.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Nat resources.
 */
export interface NatState {
    active?: pulumi.Input<boolean>;
    blockAllocation?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    dns?: pulumi.Input<boolean>;
    extended?: pulumi.Input<boolean>;
    flat?: pulumi.Input<boolean>;
    includeReserve?: pulumi.Input<boolean>;
    interfacePat?: pulumi.Input<boolean>;
    lastUpdated?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    netToNet?: pulumi.Input<boolean>;
    noProxyArp?: pulumi.Input<boolean>;
    originalDestinationKind?: pulumi.Input<string>;
    originalDestinationValue?: pulumi.Input<string>;
    originalInterfaceName?: pulumi.Input<string>;
    originalServiceKind?: pulumi.Input<string>;
    originalServiceValue?: pulumi.Input<string>;
    originalSourceKind?: pulumi.Input<string>;
    originalSourceValue?: pulumi.Input<string>;
    patPool?: pulumi.Input<boolean>;
    position?: pulumi.Input<number>;
    roundRobin?: pulumi.Input<boolean>;
    routeLookup?: pulumi.Input<boolean>;
    section?: pulumi.Input<string>;
    translatedDestinationKind?: pulumi.Input<string>;
    translatedDestinationValue?: pulumi.Input<string>;
    translatedInterfaceName?: pulumi.Input<string>;
    translatedServiceKind?: pulumi.Input<string>;
    translatedServiceValue?: pulumi.Input<string>;
    translatedSourceKind?: pulumi.Input<string>;
    translatedSourcePatPoolKind?: pulumi.Input<string>;
    translatedSourcePatPoolValue?: pulumi.Input<string>;
    translatedSourceValue?: pulumi.Input<string>;
    unidirectional?: pulumi.Input<boolean>;
    useDestinationInterfaceIpv6?: pulumi.Input<boolean>;
    useSourceInterfaceIpv6?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Nat resource.
 */
export interface NatArgs {
    active?: pulumi.Input<boolean>;
    blockAllocation?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    dns?: pulumi.Input<boolean>;
    extended?: pulumi.Input<boolean>;
    flat?: pulumi.Input<boolean>;
    includeReserve?: pulumi.Input<boolean>;
    interfacePat?: pulumi.Input<boolean>;
    lastUpdated?: pulumi.Input<string>;
    mode: pulumi.Input<string>;
    netToNet?: pulumi.Input<boolean>;
    noProxyArp?: pulumi.Input<boolean>;
    originalDestinationKind?: pulumi.Input<string>;
    originalDestinationValue?: pulumi.Input<string>;
    originalInterfaceName?: pulumi.Input<string>;
    originalServiceKind?: pulumi.Input<string>;
    originalServiceValue?: pulumi.Input<string>;
    originalSourceKind?: pulumi.Input<string>;
    originalSourceValue?: pulumi.Input<string>;
    patPool?: pulumi.Input<boolean>;
    position?: pulumi.Input<number>;
    roundRobin?: pulumi.Input<boolean>;
    routeLookup?: pulumi.Input<boolean>;
    section: pulumi.Input<string>;
    translatedDestinationKind?: pulumi.Input<string>;
    translatedDestinationValue?: pulumi.Input<string>;
    translatedInterfaceName?: pulumi.Input<string>;
    translatedServiceKind?: pulumi.Input<string>;
    translatedServiceValue?: pulumi.Input<string>;
    translatedSourceKind?: pulumi.Input<string>;
    translatedSourcePatPoolKind?: pulumi.Input<string>;
    translatedSourcePatPoolValue?: pulumi.Input<string>;
    translatedSourceValue?: pulumi.Input<string>;
    unidirectional?: pulumi.Input<boolean>;
    useDestinationInterfaceIpv6?: pulumi.Input<boolean>;
    useSourceInterfaceIpv6?: pulumi.Input<boolean>;
}
