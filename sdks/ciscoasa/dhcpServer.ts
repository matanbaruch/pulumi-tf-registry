// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DhcpServer extends pulumi.CustomResource {
    /**
     * Get an existing DhcpServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DhcpServerState, opts?: pulumi.CustomResourceOptions): DhcpServer {
        return new DhcpServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ciscoasa:index/dhcpServer:DhcpServer';

    /**
     * Returns true if the given object is an instance of DhcpServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DhcpServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DhcpServer.__pulumiType;
    }

    public readonly autoConfigEnabled!: pulumi.Output<boolean | undefined>;
    public readonly autoConfigInterface!: pulumi.Output<string | undefined>;
    public readonly ddnsOverrideClientSettings!: pulumi.Output<boolean | undefined>;
    public readonly ddnsUpdateBothRecords!: pulumi.Output<boolean | undefined>;
    public readonly ddnsUpdateDnsClient!: pulumi.Output<boolean | undefined>;
    public readonly dnsIpPrimary!: pulumi.Output<string | undefined>;
    public readonly dnsIpSecondary!: pulumi.Output<string | undefined>;
    public readonly domainName!: pulumi.Output<string | undefined>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly interface!: pulumi.Output<string>;
    public readonly leaseLength!: pulumi.Output<string | undefined>;
    public readonly options!: pulumi.Output<outputs.DhcpServerOption[] | undefined>;
    public readonly pingTimeout!: pulumi.Output<string | undefined>;
    public readonly poolEndIp!: pulumi.Output<string | undefined>;
    public readonly poolStartIp!: pulumi.Output<string | undefined>;
    public readonly vpnOverride!: pulumi.Output<boolean | undefined>;
    public readonly winsIpPrimary!: pulumi.Output<string | undefined>;
    public readonly winsIpSecondary!: pulumi.Output<string | undefined>;

    /**
     * Create a DhcpServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DhcpServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DhcpServerArgs | DhcpServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DhcpServerState | undefined;
            resourceInputs["autoConfigEnabled"] = state ? state.autoConfigEnabled : undefined;
            resourceInputs["autoConfigInterface"] = state ? state.autoConfigInterface : undefined;
            resourceInputs["ddnsOverrideClientSettings"] = state ? state.ddnsOverrideClientSettings : undefined;
            resourceInputs["ddnsUpdateBothRecords"] = state ? state.ddnsUpdateBothRecords : undefined;
            resourceInputs["ddnsUpdateDnsClient"] = state ? state.ddnsUpdateDnsClient : undefined;
            resourceInputs["dnsIpPrimary"] = state ? state.dnsIpPrimary : undefined;
            resourceInputs["dnsIpSecondary"] = state ? state.dnsIpSecondary : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["interface"] = state ? state.interface : undefined;
            resourceInputs["leaseLength"] = state ? state.leaseLength : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["pingTimeout"] = state ? state.pingTimeout : undefined;
            resourceInputs["poolEndIp"] = state ? state.poolEndIp : undefined;
            resourceInputs["poolStartIp"] = state ? state.poolStartIp : undefined;
            resourceInputs["vpnOverride"] = state ? state.vpnOverride : undefined;
            resourceInputs["winsIpPrimary"] = state ? state.winsIpPrimary : undefined;
            resourceInputs["winsIpSecondary"] = state ? state.winsIpSecondary : undefined;
        } else {
            const args = argsOrState as DhcpServerArgs | undefined;
            if ((!args || args.interface === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interface'");
            }
            resourceInputs["autoConfigEnabled"] = args ? args.autoConfigEnabled : undefined;
            resourceInputs["autoConfigInterface"] = args ? args.autoConfigInterface : undefined;
            resourceInputs["ddnsOverrideClientSettings"] = args ? args.ddnsOverrideClientSettings : undefined;
            resourceInputs["ddnsUpdateBothRecords"] = args ? args.ddnsUpdateBothRecords : undefined;
            resourceInputs["ddnsUpdateDnsClient"] = args ? args.ddnsUpdateDnsClient : undefined;
            resourceInputs["dnsIpPrimary"] = args ? args.dnsIpPrimary : undefined;
            resourceInputs["dnsIpSecondary"] = args ? args.dnsIpSecondary : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["interface"] = args ? args.interface : undefined;
            resourceInputs["leaseLength"] = args ? args.leaseLength : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["pingTimeout"] = args ? args.pingTimeout : undefined;
            resourceInputs["poolEndIp"] = args ? args.poolEndIp : undefined;
            resourceInputs["poolStartIp"] = args ? args.poolStartIp : undefined;
            resourceInputs["vpnOverride"] = args ? args.vpnOverride : undefined;
            resourceInputs["winsIpPrimary"] = args ? args.winsIpPrimary : undefined;
            resourceInputs["winsIpSecondary"] = args ? args.winsIpSecondary : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DhcpServer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DhcpServer resources.
 */
export interface DhcpServerState {
    autoConfigEnabled?: pulumi.Input<boolean>;
    autoConfigInterface?: pulumi.Input<string>;
    ddnsOverrideClientSettings?: pulumi.Input<boolean>;
    ddnsUpdateBothRecords?: pulumi.Input<boolean>;
    ddnsUpdateDnsClient?: pulumi.Input<boolean>;
    dnsIpPrimary?: pulumi.Input<string>;
    dnsIpSecondary?: pulumi.Input<string>;
    domainName?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    interface?: pulumi.Input<string>;
    leaseLength?: pulumi.Input<string>;
    options?: pulumi.Input<pulumi.Input<inputs.DhcpServerOption>[]>;
    pingTimeout?: pulumi.Input<string>;
    poolEndIp?: pulumi.Input<string>;
    poolStartIp?: pulumi.Input<string>;
    vpnOverride?: pulumi.Input<boolean>;
    winsIpPrimary?: pulumi.Input<string>;
    winsIpSecondary?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DhcpServer resource.
 */
export interface DhcpServerArgs {
    autoConfigEnabled?: pulumi.Input<boolean>;
    autoConfigInterface?: pulumi.Input<string>;
    ddnsOverrideClientSettings?: pulumi.Input<boolean>;
    ddnsUpdateBothRecords?: pulumi.Input<boolean>;
    ddnsUpdateDnsClient?: pulumi.Input<boolean>;
    dnsIpPrimary?: pulumi.Input<string>;
    dnsIpSecondary?: pulumi.Input<string>;
    domainName?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    interface: pulumi.Input<string>;
    leaseLength?: pulumi.Input<string>;
    options?: pulumi.Input<pulumi.Input<inputs.DhcpServerOption>[]>;
    pingTimeout?: pulumi.Input<string>;
    poolEndIp?: pulumi.Input<string>;
    poolStartIp?: pulumi.Input<string>;
    vpnOverride?: pulumi.Input<boolean>;
    winsIpPrimary?: pulumi.Input<string>;
    winsIpSecondary?: pulumi.Input<string>;
}
