// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class NtpServer extends pulumi.CustomResource {
    /**
     * Get an existing NtpServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NtpServerState, opts?: pulumi.CustomResourceOptions): NtpServer {
        return new NtpServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ciscoasa:index/ntpServer:NtpServer';

    /**
     * Returns true if the given object is an instance of NtpServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NtpServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NtpServer.__pulumiType;
    }

    public readonly interface!: pulumi.Output<string | undefined>;
    public readonly ipAddress!: pulumi.Output<string>;
    public readonly keyNumber!: pulumi.Output<string>;
    public readonly keyTrusted!: pulumi.Output<boolean | undefined>;
    public readonly keyValue!: pulumi.Output<string>;
    public readonly lastUpdated!: pulumi.Output<string>;
    public readonly preferred!: pulumi.Output<boolean | undefined>;

    /**
     * Create a NtpServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NtpServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NtpServerArgs | NtpServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NtpServerState | undefined;
            resourceInputs["interface"] = state ? state.interface : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["keyNumber"] = state ? state.keyNumber : undefined;
            resourceInputs["keyTrusted"] = state ? state.keyTrusted : undefined;
            resourceInputs["keyValue"] = state ? state.keyValue : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["preferred"] = state ? state.preferred : undefined;
        } else {
            const args = argsOrState as NtpServerArgs | undefined;
            if ((!args || args.ipAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipAddress'");
            }
            if ((!args || args.keyNumber === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyNumber'");
            }
            if ((!args || args.keyValue === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyValue'");
            }
            resourceInputs["interface"] = args ? args.interface : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["keyNumber"] = args ? args.keyNumber : undefined;
            resourceInputs["keyTrusted"] = args ? args.keyTrusted : undefined;
            resourceInputs["keyValue"] = args ? args.keyValue : undefined;
            resourceInputs["lastUpdated"] = args ? args.lastUpdated : undefined;
            resourceInputs["preferred"] = args ? args.preferred : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NtpServer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NtpServer resources.
 */
export interface NtpServerState {
    interface?: pulumi.Input<string>;
    ipAddress?: pulumi.Input<string>;
    keyNumber?: pulumi.Input<string>;
    keyTrusted?: pulumi.Input<boolean>;
    keyValue?: pulumi.Input<string>;
    lastUpdated?: pulumi.Input<string>;
    preferred?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a NtpServer resource.
 */
export interface NtpServerArgs {
    interface?: pulumi.Input<string>;
    ipAddress: pulumi.Input<string>;
    keyNumber: pulumi.Input<string>;
    keyTrusted?: pulumi.Input<boolean>;
    keyValue: pulumi.Input<string>;
    lastUpdated?: pulumi.Input<string>;
    preferred?: pulumi.Input<boolean>;
}
