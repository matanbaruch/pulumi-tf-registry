// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AccessInRulesRule {
    active?: boolean;
    destination: string;
    destinationService: string;
    id: string;
    permit?: boolean;
    source: string;
    sourceService?: string;
    timeRange?: string;
}

export interface AccessOutRulesRule {
    active?: boolean;
    destination: string;
    destinationService: string;
    id: string;
    permit?: boolean;
    source: string;
    sourceService?: string;
    timeRange?: string;
}

export interface AclRule {
    active?: boolean;
    destination: string;
    destinationService: string;
    id: string;
    logInterval?: number;
    logStatus?: string;
    permit?: boolean;
    remarks?: string[];
    source: string;
    sourceService?: string;
}

export interface DhcpServerOption {
    code: number;
    type: string;
    value1: string;
    value2?: string;
}

export interface GetInterfacePhysicalIpAddress {
    dhcps: outputs.GetInterfacePhysicalIpAddressDhcp[];
    statics: outputs.GetInterfacePhysicalIpAddressStatic[];
}

export interface GetInterfacePhysicalIpAddressDhcp {
    dhcpBroadcast: boolean;
    dhcpClients: outputs.GetInterfacePhysicalIpAddressDhcpDhcpClient[];
    dhcpOptionUsingMac: boolean;
}

export interface GetInterfacePhysicalIpAddressDhcpDhcpClient {
    metric: number;
    primaryTrackId: number;
    setDefaultRoute: boolean;
    slaTrackingSettings: outputs.GetInterfacePhysicalIpAddressDhcpDhcpClientSlaTrackingSetting[];
    trackingEnabled: boolean;
}

export interface GetInterfacePhysicalIpAddressDhcpDhcpClientSlaTrackingSetting {
    dataSizeInBytes: number;
    frequencyInSeconds: number;
    numPackets: number;
    slaId: number;
    thresholdInMilliseconds: number;
    timeoutInMilliseconds: number;
    tos: number;
    trackedIp: string;
}

export interface GetInterfacePhysicalIpAddressStatic {
    ip: string;
    netMask: string;
}

export interface GetInterfacePhysicalIpv6Info {
    autoConfig: boolean;
    dadAttempts: number;
    enabled: boolean;
    enforceEui64: boolean;
    ipv6Addresses: outputs.GetInterfacePhysicalIpv6InfoIpv6Address[];
    linkLocalAddresses: outputs.GetInterfacePhysicalIpv6InfoLinkLocalAddress[];
    managedAddressConfig: boolean;
    nDiscoveryPrefixLists: outputs.GetInterfacePhysicalIpv6InfoNDiscoveryPrefixList[];
    nsInterval: number;
    otherStatefulConfig: boolean;
    reachableTime: number;
    routerAdvertInterval: number;
    routerAdvertIntervalUnit: string;
    routerAdvertLifetime: number;
    suppressRouterAdvert: boolean;
}

export interface GetInterfacePhysicalIpv6InfoIpv6Address {
    address: string;
    prefixLength: number;
    standby: string;
}

export interface GetInterfacePhysicalIpv6InfoLinkLocalAddress {
    address: string;
    standby: string;
}

export interface GetInterfacePhysicalIpv6InfoNDiscoveryPrefixList {
    defaultPrefix: boolean;
    hasDuration: boolean;
    noAdvertise: boolean;
    offLink: boolean;
    preferredLifetime: number;
    validLifetime: number;
}

export interface GetInterfaceVlanIpAddress {
    dhcps: outputs.GetInterfaceVlanIpAddressDhcp[];
    statics: outputs.GetInterfaceVlanIpAddressStatic[];
}

export interface GetInterfaceVlanIpAddressDhcp {
    dhcpBroadcast: boolean;
    dhcpClients: outputs.GetInterfaceVlanIpAddressDhcpDhcpClient[];
    dhcpOptionUsingMac: boolean;
}

export interface GetInterfaceVlanIpAddressDhcpDhcpClient {
    metric: number;
    primaryTrackId: number;
    setDefaultRoute: boolean;
    slaTrackingSettings: outputs.GetInterfaceVlanIpAddressDhcpDhcpClientSlaTrackingSetting[];
    trackingEnabled: boolean;
}

export interface GetInterfaceVlanIpAddressDhcpDhcpClientSlaTrackingSetting {
    dataSizeInBytes: number;
    frequencyInSeconds: number;
    numPackets: number;
    slaId: number;
    thresholdInMilliseconds: number;
    timeoutInMilliseconds: number;
    tos: number;
    trackedIp: string;
}

export interface GetInterfaceVlanIpAddressStatic {
    ip: string;
    netMask: string;
}

export interface GetInterfaceVlanIpv6Info {
    autoConfig: boolean;
    dadAttempts: number;
    enabled: boolean;
    enforceEui64: boolean;
    ipv6Addresses: outputs.GetInterfaceVlanIpv6InfoIpv6Address[];
    linkLocalAddresses: outputs.GetInterfaceVlanIpv6InfoLinkLocalAddress[];
    managedAddressConfig: boolean;
    nDiscoveryPrefixLists: outputs.GetInterfaceVlanIpv6InfoNDiscoveryPrefixList[];
    nsInterval: number;
    otherStatefulConfig: boolean;
    reachableTime: number;
    routerAdvertInterval: number;
    routerAdvertIntervalUnit: string;
    routerAdvertLifetime: number;
    suppressRouterAdvert: boolean;
}

export interface GetInterfaceVlanIpv6InfoIpv6Address {
    address: string;
    prefixLength: number;
    standby: string;
}

export interface GetInterfaceVlanIpv6InfoLinkLocalAddress {
    address: string;
    standby: string;
}

export interface GetInterfaceVlanIpv6InfoNDiscoveryPrefixList {
    defaultPrefix: boolean;
    hasDuration: boolean;
    noAdvertise: boolean;
    offLink: boolean;
    preferredLifetime: number;
    validLifetime: number;
}

export interface GetInterfacesPhysicalInterfacesPhysical {
    activeMacAddress: string;
    forwardTrafficCx: boolean;
    forwardTrafficSfr: boolean;
    hardwareId: string;
    id: string;
    interfaceDesc: string;
    ipAddresses: outputs.GetInterfacesPhysicalInterfacesPhysicalIpAddress[];
    ipv6Infos: outputs.GetInterfacesPhysicalInterfacesPhysicalIpv6Info[];
    managementOnly: boolean;
    mtu: number;
    name: string;
    securityLevel: number;
    shutdown: boolean;
    standByMacAddress: string;
}

export interface GetInterfacesPhysicalInterfacesPhysicalIpAddress {
    dhcps: outputs.GetInterfacesPhysicalInterfacesPhysicalIpAddressDhcp[];
    statics: outputs.GetInterfacesPhysicalInterfacesPhysicalIpAddressStatic[];
}

export interface GetInterfacesPhysicalInterfacesPhysicalIpAddressDhcp {
    dhcpBroadcast: boolean;
    dhcpClients: outputs.GetInterfacesPhysicalInterfacesPhysicalIpAddressDhcpDhcpClient[];
    dhcpOptionUsingMac: boolean;
}

export interface GetInterfacesPhysicalInterfacesPhysicalIpAddressDhcpDhcpClient {
    metric: number;
    primaryTrackId: number;
    setDefaultRoute: boolean;
    slaTrackingSettings: outputs.GetInterfacesPhysicalInterfacesPhysicalIpAddressDhcpDhcpClientSlaTrackingSetting[];
    trackingEnabled: boolean;
}

export interface GetInterfacesPhysicalInterfacesPhysicalIpAddressDhcpDhcpClientSlaTrackingSetting {
    dataSizeInBytes: number;
    frequencyInSeconds: number;
    numPackets: number;
    slaId: number;
    thresholdInMilliseconds: number;
    timeoutInMilliseconds: number;
    tos: number;
    trackedIp: string;
}

export interface GetInterfacesPhysicalInterfacesPhysicalIpAddressStatic {
    ip: string;
    netMask: string;
}

export interface GetInterfacesPhysicalInterfacesPhysicalIpv6Info {
    autoConfig: boolean;
    dadAttempts: number;
    enabled: boolean;
    enforceEui64: boolean;
    ipv6Addresses: outputs.GetInterfacesPhysicalInterfacesPhysicalIpv6InfoIpv6Address[];
    linkLocalAddresses: outputs.GetInterfacesPhysicalInterfacesPhysicalIpv6InfoLinkLocalAddress[];
    managedAddressConfig: boolean;
    nDiscoveryPrefixLists: outputs.GetInterfacesPhysicalInterfacesPhysicalIpv6InfoNDiscoveryPrefixList[];
    nsInterval: number;
    otherStatefulConfig: boolean;
    reachableTime: number;
    routerAdvertInterval: number;
    routerAdvertIntervalUnit: string;
    routerAdvertLifetime: number;
    suppressRouterAdvert: boolean;
}

export interface GetInterfacesPhysicalInterfacesPhysicalIpv6InfoIpv6Address {
    address: string;
    prefixLength: number;
    standby: string;
}

export interface GetInterfacesPhysicalInterfacesPhysicalIpv6InfoLinkLocalAddress {
    address: string;
    standby: string;
}

export interface GetInterfacesPhysicalInterfacesPhysicalIpv6InfoNDiscoveryPrefixList {
    defaultPrefix: boolean;
    hasDuration: boolean;
    noAdvertise: boolean;
    offLink: boolean;
    preferredLifetime: number;
    validLifetime: number;
}

export interface GetInterfacesVlanInterfacesVlan {
    activeMacAddress: string;
    forwardTrafficCx: boolean;
    forwardTrafficSfr: boolean;
    hardwareId: string;
    id: string;
    interfaceDesc: string;
    ipAddresses: outputs.GetInterfacesVlanInterfacesVlanIpAddress[];
    ipv6Infos: outputs.GetInterfacesVlanInterfacesVlanIpv6Info[];
    managementOnly: boolean;
    mtu: number;
    name: string;
    securityLevel: number;
    shutdown: boolean;
    standByMacAddress: string;
    vlanId: number;
}

export interface GetInterfacesVlanInterfacesVlanIpAddress {
    dhcps: outputs.GetInterfacesVlanInterfacesVlanIpAddressDhcp[];
    statics: outputs.GetInterfacesVlanInterfacesVlanIpAddressStatic[];
}

export interface GetInterfacesVlanInterfacesVlanIpAddressDhcp {
    dhcpBroadcast: boolean;
    dhcpClients: outputs.GetInterfacesVlanInterfacesVlanIpAddressDhcpDhcpClient[];
    dhcpOptionUsingMac: boolean;
}

export interface GetInterfacesVlanInterfacesVlanIpAddressDhcpDhcpClient {
    metric: number;
    primaryTrackId: number;
    setDefaultRoute: boolean;
    slaTrackingSettings: outputs.GetInterfacesVlanInterfacesVlanIpAddressDhcpDhcpClientSlaTrackingSetting[];
    trackingEnabled: boolean;
}

export interface GetInterfacesVlanInterfacesVlanIpAddressDhcpDhcpClientSlaTrackingSetting {
    dataSizeInBytes: number;
    frequencyInSeconds: number;
    numPackets: number;
    slaId: number;
    thresholdInMilliseconds: number;
    timeoutInMilliseconds: number;
    tos: number;
    trackedIp: string;
}

export interface GetInterfacesVlanInterfacesVlanIpAddressStatic {
    ip: string;
    netMask: string;
}

export interface GetInterfacesVlanInterfacesVlanIpv6Info {
    autoConfig: boolean;
    dadAttempts: number;
    enabled: boolean;
    enforceEui64: boolean;
    ipv6Addresses: outputs.GetInterfacesVlanInterfacesVlanIpv6InfoIpv6Address[];
    linkLocalAddresses: outputs.GetInterfacesVlanInterfacesVlanIpv6InfoLinkLocalAddress[];
    managedAddressConfig: boolean;
    nDiscoveryPrefixLists: outputs.GetInterfacesVlanInterfacesVlanIpv6InfoNDiscoveryPrefixList[];
    nsInterval: number;
    otherStatefulConfig: boolean;
    reachableTime: number;
    routerAdvertInterval: number;
    routerAdvertIntervalUnit: string;
    routerAdvertLifetime: number;
    suppressRouterAdvert: boolean;
}

export interface GetInterfacesVlanInterfacesVlanIpv6InfoIpv6Address {
    address: string;
    prefixLength: number;
    standby: string;
}

export interface GetInterfacesVlanInterfacesVlanIpv6InfoLinkLocalAddress {
    address: string;
    standby: string;
}

export interface GetInterfacesVlanInterfacesVlanIpv6InfoNDiscoveryPrefixList {
    defaultPrefix: boolean;
    hasDuration: boolean;
    noAdvertise: boolean;
    offLink: boolean;
    preferredLifetime: number;
    validLifetime: number;
}

export interface GetNetworkObjectsNetworkObject {
    name: string;
    value: string;
}

export interface GetNetworkServicesNetworkService {
    name: string;
    value: string;
}

export interface InterfacePhysicalIpAddress {
    dhcps?: outputs.InterfacePhysicalIpAddressDhcp[];
    statics?: outputs.InterfacePhysicalIpAddressStatic[];
}

export interface InterfacePhysicalIpAddressDhcp {
    dhcpBroadcast: boolean;
    dhcpClients: outputs.InterfacePhysicalIpAddressDhcpDhcpClient[];
    dhcpOptionUsingMac: boolean;
}

export interface InterfacePhysicalIpAddressDhcpDhcpClient {
    metric: number;
    primaryTrackId: number;
    setDefaultRoute: boolean;
    slaTrackingSettings: outputs.InterfacePhysicalIpAddressDhcpDhcpClientSlaTrackingSetting[];
    trackingEnabled: boolean;
}

export interface InterfacePhysicalIpAddressDhcpDhcpClientSlaTrackingSetting {
    dataSizeInBytes: number;
    frequencyInSeconds: number;
    numPackets: number;
    slaId: number;
    thresholdInMilliseconds: number;
    timeoutInMilliseconds: number;
    tos: number;
    trackedIp: string;
}

export interface InterfacePhysicalIpAddressStatic {
    ip: string;
    netMask: string;
}

export interface InterfacePhysicalIpv6Info {
    autoConfig?: boolean;
    dadAttempts?: number;
    enabled?: boolean;
    enforceEui64?: boolean;
    ipv6Addresses?: outputs.InterfacePhysicalIpv6InfoIpv6Address[];
    linkLocalAddresses?: outputs.InterfacePhysicalIpv6InfoLinkLocalAddress[];
    managedAddressConfig?: boolean;
    nDiscoveryPrefixLists?: outputs.InterfacePhysicalIpv6InfoNDiscoveryPrefixList[];
    nsInterval?: number;
    otherStatefulConfig?: boolean;
    reachableTime?: number;
    routerAdvertInterval?: number;
    routerAdvertIntervalUnit?: string;
    routerAdvertLifetime?: number;
    suppressRouterAdvert?: boolean;
}

export interface InterfacePhysicalIpv6InfoIpv6Address {
    address: string;
    prefixLength: number;
    standby: string;
}

export interface InterfacePhysicalIpv6InfoLinkLocalAddress {
    address: string;
    standby: string;
}

export interface InterfacePhysicalIpv6InfoNDiscoveryPrefixList {
    defaultPrefix: boolean;
    hasDuration: boolean;
    noAdvertise: boolean;
    offLink: boolean;
    preferredLifetime: number;
    validLifetime: number;
}

export interface InterfaceVlanIpAddress {
    dhcps?: outputs.InterfaceVlanIpAddressDhcp[];
    statics?: outputs.InterfaceVlanIpAddressStatic[];
}

export interface InterfaceVlanIpAddressDhcp {
    dhcpBroadcast: boolean;
    dhcpClients: outputs.InterfaceVlanIpAddressDhcpDhcpClient[];
    dhcpOptionUsingMac: boolean;
}

export interface InterfaceVlanIpAddressDhcpDhcpClient {
    metric: number;
    primaryTrackId: number;
    setDefaultRoute: boolean;
    slaTrackingSettings: outputs.InterfaceVlanIpAddressDhcpDhcpClientSlaTrackingSetting[];
    trackingEnabled: boolean;
}

export interface InterfaceVlanIpAddressDhcpDhcpClientSlaTrackingSetting {
    dataSizeInBytes: number;
    frequencyInSeconds: number;
    numPackets: number;
    slaId: number;
    thresholdInMilliseconds: number;
    timeoutInMilliseconds: number;
    tos: number;
    trackedIp: string;
}

export interface InterfaceVlanIpAddressStatic {
    ip: string;
    netMask: string;
}

export interface InterfaceVlanIpv6Info {
    autoConfig?: boolean;
    dadAttempts?: number;
    enabled?: boolean;
    enforceEui64?: boolean;
    ipv6Addresses?: outputs.InterfaceVlanIpv6InfoIpv6Address[];
    linkLocalAddresses?: outputs.InterfaceVlanIpv6InfoLinkLocalAddress[];
    managedAddressConfig?: boolean;
    nDiscoveryPrefixLists?: outputs.InterfaceVlanIpv6InfoNDiscoveryPrefixList[];
    nsInterval?: number;
    otherStatefulConfig?: boolean;
    reachableTime?: number;
    routerAdvertInterval?: number;
    routerAdvertIntervalUnit?: string;
    routerAdvertLifetime?: number;
    suppressRouterAdvert?: boolean;
}

export interface InterfaceVlanIpv6InfoIpv6Address {
    address: string;
    prefixLength: number;
    standby: string;
}

export interface InterfaceVlanIpv6InfoLinkLocalAddress {
    address: string;
    standby: string;
}

export interface InterfaceVlanIpv6InfoNDiscoveryPrefixList {
    defaultPrefix: boolean;
    hasDuration: boolean;
    noAdvertise: boolean;
    offLink: boolean;
    preferredLifetime: number;
    validLifetime: number;
}

export interface TimerangeValue {
    end: string;
    periodics?: outputs.TimerangeValuePeriodic[];
    start: string;
}

export interface TimerangeValuePeriodic {
    endHour: number;
    endMinute: number;
    frequency: string;
    startHour: number;
    startMinute: number;
}

