// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AccessInRulesArgs, AccessInRulesState } from "./accessInRules";
export type AccessInRules = import("./accessInRules").AccessInRules;
export const AccessInRules: typeof import("./accessInRules").AccessInRules = null as any;
utilities.lazyLoad(exports, ["AccessInRules"], () => require("./accessInRules"));

export { AccessOutRulesArgs, AccessOutRulesState } from "./accessOutRules";
export type AccessOutRules = import("./accessOutRules").AccessOutRules;
export const AccessOutRules: typeof import("./accessOutRules").AccessOutRules = null as any;
utilities.lazyLoad(exports, ["AccessOutRules"], () => require("./accessOutRules"));

export { AclArgs, AclState } from "./acl";
export type Acl = import("./acl").Acl;
export const Acl: typeof import("./acl").Acl = null as any;
utilities.lazyLoad(exports, ["Acl"], () => require("./acl"));

export { BackupArgs, BackupState } from "./backup";
export type Backup = import("./backup").Backup;
export const Backup: typeof import("./backup").Backup = null as any;
utilities.lazyLoad(exports, ["Backup"], () => require("./backup"));

export { DhcpRelayGlobalsettingsArgs, DhcpRelayGlobalsettingsState } from "./dhcpRelayGlobalsettings";
export type DhcpRelayGlobalsettings = import("./dhcpRelayGlobalsettings").DhcpRelayGlobalsettings;
export const DhcpRelayGlobalsettings: typeof import("./dhcpRelayGlobalsettings").DhcpRelayGlobalsettings = null as any;
utilities.lazyLoad(exports, ["DhcpRelayGlobalsettings"], () => require("./dhcpRelayGlobalsettings"));

export { DhcpRelayLocalArgs, DhcpRelayLocalState } from "./dhcpRelayLocal";
export type DhcpRelayLocal = import("./dhcpRelayLocal").DhcpRelayLocal;
export const DhcpRelayLocal: typeof import("./dhcpRelayLocal").DhcpRelayLocal = null as any;
utilities.lazyLoad(exports, ["DhcpRelayLocal"], () => require("./dhcpRelayLocal"));

export { DhcpServerArgs, DhcpServerState } from "./dhcpServer";
export type DhcpServer = import("./dhcpServer").DhcpServer;
export const DhcpServer: typeof import("./dhcpServer").DhcpServer = null as any;
utilities.lazyLoad(exports, ["DhcpServer"], () => require("./dhcpServer"));

export { FailoverInterfaceArgs, FailoverInterfaceState } from "./failoverInterface";
export type FailoverInterface = import("./failoverInterface").FailoverInterface;
export const FailoverInterface: typeof import("./failoverInterface").FailoverInterface = null as any;
utilities.lazyLoad(exports, ["FailoverInterface"], () => require("./failoverInterface"));

export { FailoverSetupArgs, FailoverSetupState } from "./failoverSetup";
export type FailoverSetup = import("./failoverSetup").FailoverSetup;
export const FailoverSetup: typeof import("./failoverSetup").FailoverSetup = null as any;
utilities.lazyLoad(exports, ["FailoverSetup"], () => require("./failoverSetup"));

export { GetInterfacePhysicalArgs, GetInterfacePhysicalResult, GetInterfacePhysicalOutputArgs } from "./getInterfacePhysical";
export const getInterfacePhysical: typeof import("./getInterfacePhysical").getInterfacePhysical = null as any;
export const getInterfacePhysicalOutput: typeof import("./getInterfacePhysical").getInterfacePhysicalOutput = null as any;
utilities.lazyLoad(exports, ["getInterfacePhysical","getInterfacePhysicalOutput"], () => require("./getInterfacePhysical"));

export { GetInterfaceVlanArgs, GetInterfaceVlanResult, GetInterfaceVlanOutputArgs } from "./getInterfaceVlan";
export const getInterfaceVlan: typeof import("./getInterfaceVlan").getInterfaceVlan = null as any;
export const getInterfaceVlanOutput: typeof import("./getInterfaceVlan").getInterfaceVlanOutput = null as any;
utilities.lazyLoad(exports, ["getInterfaceVlan","getInterfaceVlanOutput"], () => require("./getInterfaceVlan"));

export { GetInterfacesPhysicalArgs, GetInterfacesPhysicalResult, GetInterfacesPhysicalOutputArgs } from "./getInterfacesPhysical";
export const getInterfacesPhysical: typeof import("./getInterfacesPhysical").getInterfacesPhysical = null as any;
export const getInterfacesPhysicalOutput: typeof import("./getInterfacesPhysical").getInterfacesPhysicalOutput = null as any;
utilities.lazyLoad(exports, ["getInterfacesPhysical","getInterfacesPhysicalOutput"], () => require("./getInterfacesPhysical"));

export { GetInterfacesVlanArgs, GetInterfacesVlanResult, GetInterfacesVlanOutputArgs } from "./getInterfacesVlan";
export const getInterfacesVlan: typeof import("./getInterfacesVlan").getInterfacesVlan = null as any;
export const getInterfacesVlanOutput: typeof import("./getInterfacesVlan").getInterfacesVlanOutput = null as any;
utilities.lazyLoad(exports, ["getInterfacesVlan","getInterfacesVlanOutput"], () => require("./getInterfacesVlan"));

export { GetNetworkObjectArgs, GetNetworkObjectResult, GetNetworkObjectOutputArgs } from "./getNetworkObject";
export const getNetworkObject: typeof import("./getNetworkObject").getNetworkObject = null as any;
export const getNetworkObjectOutput: typeof import("./getNetworkObject").getNetworkObjectOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkObject","getNetworkObjectOutput"], () => require("./getNetworkObject"));

export { GetNetworkObjectsArgs, GetNetworkObjectsResult, GetNetworkObjectsOutputArgs } from "./getNetworkObjects";
export const getNetworkObjects: typeof import("./getNetworkObjects").getNetworkObjects = null as any;
export const getNetworkObjectsOutput: typeof import("./getNetworkObjects").getNetworkObjectsOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkObjects","getNetworkObjectsOutput"], () => require("./getNetworkObjects"));

export { GetNetworkServiceArgs, GetNetworkServiceResult, GetNetworkServiceOutputArgs } from "./getNetworkService";
export const getNetworkService: typeof import("./getNetworkService").getNetworkService = null as any;
export const getNetworkServiceOutput: typeof import("./getNetworkService").getNetworkServiceOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkService","getNetworkServiceOutput"], () => require("./getNetworkService"));

export { GetNetworkServicesArgs, GetNetworkServicesResult, GetNetworkServicesOutputArgs } from "./getNetworkServices";
export const getNetworkServices: typeof import("./getNetworkServices").getNetworkServices = null as any;
export const getNetworkServicesOutput: typeof import("./getNetworkServices").getNetworkServicesOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkServices","getNetworkServicesOutput"], () => require("./getNetworkServices"));

export { InterfacePhysicalArgs, InterfacePhysicalState } from "./interfacePhysical";
export type InterfacePhysical = import("./interfacePhysical").InterfacePhysical;
export const InterfacePhysical: typeof import("./interfacePhysical").InterfacePhysical = null as any;
utilities.lazyLoad(exports, ["InterfacePhysical"], () => require("./interfacePhysical"));

export { InterfaceVlanArgs, InterfaceVlanState } from "./interfaceVlan";
export type InterfaceVlan = import("./interfaceVlan").InterfaceVlan;
export const InterfaceVlan: typeof import("./interfaceVlan").InterfaceVlan = null as any;
utilities.lazyLoad(exports, ["InterfaceVlan"], () => require("./interfaceVlan"));

export { LicenseConfigArgs, LicenseConfigState } from "./licenseConfig";
export type LicenseConfig = import("./licenseConfig").LicenseConfig;
export const LicenseConfig: typeof import("./licenseConfig").LicenseConfig = null as any;
utilities.lazyLoad(exports, ["LicenseConfig"], () => require("./licenseConfig"));

export { LicenseRegisterArgs, LicenseRegisterState } from "./licenseRegister";
export type LicenseRegister = import("./licenseRegister").LicenseRegister;
export const LicenseRegister: typeof import("./licenseRegister").LicenseRegister = null as any;
utilities.lazyLoad(exports, ["LicenseRegister"], () => require("./licenseRegister"));

export { LicenseRenewauthArgs, LicenseRenewauthState } from "./licenseRenewauth";
export type LicenseRenewauth = import("./licenseRenewauth").LicenseRenewauth;
export const LicenseRenewauth: typeof import("./licenseRenewauth").LicenseRenewauth = null as any;
utilities.lazyLoad(exports, ["LicenseRenewauth"], () => require("./licenseRenewauth"));

export { LicenseRenewidArgs, LicenseRenewidState } from "./licenseRenewid";
export type LicenseRenewid = import("./licenseRenewid").LicenseRenewid;
export const LicenseRenewid: typeof import("./licenseRenewid").LicenseRenewid = null as any;
utilities.lazyLoad(exports, ["LicenseRenewid"], () => require("./licenseRenewid"));

export { NatArgs, NatState } from "./nat";
export type Nat = import("./nat").Nat;
export const Nat: typeof import("./nat").Nat = null as any;
utilities.lazyLoad(exports, ["Nat"], () => require("./nat"));

export { NetworkObjectArgs, NetworkObjectState } from "./networkObject";
export type NetworkObject = import("./networkObject").NetworkObject;
export const NetworkObject: typeof import("./networkObject").NetworkObject = null as any;
utilities.lazyLoad(exports, ["NetworkObject"], () => require("./networkObject"));

export { NetworkObjectGroupArgs, NetworkObjectGroupState } from "./networkObjectGroup";
export type NetworkObjectGroup = import("./networkObjectGroup").NetworkObjectGroup;
export const NetworkObjectGroup: typeof import("./networkObjectGroup").NetworkObjectGroup = null as any;
utilities.lazyLoad(exports, ["NetworkObjectGroup"], () => require("./networkObjectGroup"));

export { NetworkServiceArgs, NetworkServiceState } from "./networkService";
export type NetworkService = import("./networkService").NetworkService;
export const NetworkService: typeof import("./networkService").NetworkService = null as any;
utilities.lazyLoad(exports, ["NetworkService"], () => require("./networkService"));

export { NetworkServiceGroupArgs, NetworkServiceGroupState } from "./networkServiceGroup";
export type NetworkServiceGroup = import("./networkServiceGroup").NetworkServiceGroup;
export const NetworkServiceGroup: typeof import("./networkServiceGroup").NetworkServiceGroup = null as any;
utilities.lazyLoad(exports, ["NetworkServiceGroup"], () => require("./networkServiceGroup"));

export { NtpServerArgs, NtpServerState } from "./ntpServer";
export type NtpServer = import("./ntpServer").NtpServer;
export const NtpServer: typeof import("./ntpServer").NtpServer = null as any;
utilities.lazyLoad(exports, ["NtpServer"], () => require("./ntpServer"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { StaticRouteArgs, StaticRouteState } from "./staticRoute";
export type StaticRoute = import("./staticRoute").StaticRoute;
export const StaticRoute: typeof import("./staticRoute").StaticRoute = null as any;
utilities.lazyLoad(exports, ["StaticRoute"], () => require("./staticRoute"));

export { TimerangeArgs, TimerangeState } from "./timerange";
export type Timerange = import("./timerange").Timerange;
export const Timerange: typeof import("./timerange").Timerange = null as any;
utilities.lazyLoad(exports, ["Timerange"], () => require("./timerange"));

export { WriteMemoryArgs, WriteMemoryState } from "./writeMemory";
export type WriteMemory = import("./writeMemory").WriteMemory;
export const WriteMemory: typeof import("./writeMemory").WriteMemory = null as any;
utilities.lazyLoad(exports, ["WriteMemory"], () => require("./writeMemory"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "ciscoasa:index/accessInRules:AccessInRules":
                return new AccessInRules(name, <any>undefined, { urn })
            case "ciscoasa:index/accessOutRules:AccessOutRules":
                return new AccessOutRules(name, <any>undefined, { urn })
            case "ciscoasa:index/acl:Acl":
                return new Acl(name, <any>undefined, { urn })
            case "ciscoasa:index/backup:Backup":
                return new Backup(name, <any>undefined, { urn })
            case "ciscoasa:index/dhcpRelayGlobalsettings:DhcpRelayGlobalsettings":
                return new DhcpRelayGlobalsettings(name, <any>undefined, { urn })
            case "ciscoasa:index/dhcpRelayLocal:DhcpRelayLocal":
                return new DhcpRelayLocal(name, <any>undefined, { urn })
            case "ciscoasa:index/dhcpServer:DhcpServer":
                return new DhcpServer(name, <any>undefined, { urn })
            case "ciscoasa:index/failoverInterface:FailoverInterface":
                return new FailoverInterface(name, <any>undefined, { urn })
            case "ciscoasa:index/failoverSetup:FailoverSetup":
                return new FailoverSetup(name, <any>undefined, { urn })
            case "ciscoasa:index/interfacePhysical:InterfacePhysical":
                return new InterfacePhysical(name, <any>undefined, { urn })
            case "ciscoasa:index/interfaceVlan:InterfaceVlan":
                return new InterfaceVlan(name, <any>undefined, { urn })
            case "ciscoasa:index/licenseConfig:LicenseConfig":
                return new LicenseConfig(name, <any>undefined, { urn })
            case "ciscoasa:index/licenseRegister:LicenseRegister":
                return new LicenseRegister(name, <any>undefined, { urn })
            case "ciscoasa:index/licenseRenewauth:LicenseRenewauth":
                return new LicenseRenewauth(name, <any>undefined, { urn })
            case "ciscoasa:index/licenseRenewid:LicenseRenewid":
                return new LicenseRenewid(name, <any>undefined, { urn })
            case "ciscoasa:index/nat:Nat":
                return new Nat(name, <any>undefined, { urn })
            case "ciscoasa:index/networkObject:NetworkObject":
                return new NetworkObject(name, <any>undefined, { urn })
            case "ciscoasa:index/networkObjectGroup:NetworkObjectGroup":
                return new NetworkObjectGroup(name, <any>undefined, { urn })
            case "ciscoasa:index/networkService:NetworkService":
                return new NetworkService(name, <any>undefined, { urn })
            case "ciscoasa:index/networkServiceGroup:NetworkServiceGroup":
                return new NetworkServiceGroup(name, <any>undefined, { urn })
            case "ciscoasa:index/ntpServer:NtpServer":
                return new NtpServer(name, <any>undefined, { urn })
            case "ciscoasa:index/staticRoute:StaticRoute":
                return new StaticRoute(name, <any>undefined, { urn })
            case "ciscoasa:index/timerange:Timerange":
                return new Timerange(name, <any>undefined, { urn })
            case "ciscoasa:index/writeMemory:WriteMemory":
                return new WriteMemory(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("ciscoasa", "index/accessInRules", _module)
pulumi.runtime.registerResourceModule("ciscoasa", "index/accessOutRules", _module)
pulumi.runtime.registerResourceModule("ciscoasa", "index/acl", _module)
pulumi.runtime.registerResourceModule("ciscoasa", "index/backup", _module)
pulumi.runtime.registerResourceModule("ciscoasa", "index/dhcpRelayGlobalsettings", _module)
pulumi.runtime.registerResourceModule("ciscoasa", "index/dhcpRelayLocal", _module)
pulumi.runtime.registerResourceModule("ciscoasa", "index/dhcpServer", _module)
pulumi.runtime.registerResourceModule("ciscoasa", "index/failoverInterface", _module)
pulumi.runtime.registerResourceModule("ciscoasa", "index/failoverSetup", _module)
pulumi.runtime.registerResourceModule("ciscoasa", "index/interfacePhysical", _module)
pulumi.runtime.registerResourceModule("ciscoasa", "index/interfaceVlan", _module)
pulumi.runtime.registerResourceModule("ciscoasa", "index/licenseConfig", _module)
pulumi.runtime.registerResourceModule("ciscoasa", "index/licenseRegister", _module)
pulumi.runtime.registerResourceModule("ciscoasa", "index/licenseRenewauth", _module)
pulumi.runtime.registerResourceModule("ciscoasa", "index/licenseRenewid", _module)
pulumi.runtime.registerResourceModule("ciscoasa", "index/nat", _module)
pulumi.runtime.registerResourceModule("ciscoasa", "index/networkObject", _module)
pulumi.runtime.registerResourceModule("ciscoasa", "index/networkObjectGroup", _module)
pulumi.runtime.registerResourceModule("ciscoasa", "index/networkService", _module)
pulumi.runtime.registerResourceModule("ciscoasa", "index/networkServiceGroup", _module)
pulumi.runtime.registerResourceModule("ciscoasa", "index/ntpServer", _module)
pulumi.runtime.registerResourceModule("ciscoasa", "index/staticRoute", _module)
pulumi.runtime.registerResourceModule("ciscoasa", "index/timerange", _module)
pulumi.runtime.registerResourceModule("ciscoasa", "index/writeMemory", _module)
pulumi.runtime.registerResourcePackage("ciscoasa", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:ciscoasa") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
