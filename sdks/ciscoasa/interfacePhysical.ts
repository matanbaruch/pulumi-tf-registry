// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class InterfacePhysical extends pulumi.CustomResource {
    /**
     * Get an existing InterfacePhysical resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InterfacePhysicalState, opts?: pulumi.CustomResourceOptions): InterfacePhysical {
        return new InterfacePhysical(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ciscoasa:index/interfacePhysical:InterfacePhysical';

    /**
     * Returns true if the given object is an instance of InterfacePhysical.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InterfacePhysical {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InterfacePhysical.__pulumiType;
    }

    public readonly activeMacAddress!: pulumi.Output<string | undefined>;
    public readonly forwardTrafficCx!: pulumi.Output<boolean | undefined>;
    public readonly forwardTrafficSfr!: pulumi.Output<boolean | undefined>;
    public readonly hardwareId!: pulumi.Output<string>;
    public readonly interfaceDesc!: pulumi.Output<string | undefined>;
    public readonly ipAddress!: pulumi.Output<outputs.InterfacePhysicalIpAddress | undefined>;
    public readonly ipv6Info!: pulumi.Output<outputs.InterfacePhysicalIpv6Info | undefined>;
    public readonly lastUpdated!: pulumi.Output<string>;
    public readonly managementOnly!: pulumi.Output<boolean | undefined>;
    public readonly mtu!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly securityLevel!: pulumi.Output<number>;
    public readonly shutdown!: pulumi.Output<boolean | undefined>;
    public readonly standByMacAddress!: pulumi.Output<string | undefined>;

    /**
     * Create a InterfacePhysical resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InterfacePhysicalArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InterfacePhysicalArgs | InterfacePhysicalState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InterfacePhysicalState | undefined;
            resourceInputs["activeMacAddress"] = state ? state.activeMacAddress : undefined;
            resourceInputs["forwardTrafficCx"] = state ? state.forwardTrafficCx : undefined;
            resourceInputs["forwardTrafficSfr"] = state ? state.forwardTrafficSfr : undefined;
            resourceInputs["hardwareId"] = state ? state.hardwareId : undefined;
            resourceInputs["interfaceDesc"] = state ? state.interfaceDesc : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["ipv6Info"] = state ? state.ipv6Info : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["managementOnly"] = state ? state.managementOnly : undefined;
            resourceInputs["mtu"] = state ? state.mtu : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["securityLevel"] = state ? state.securityLevel : undefined;
            resourceInputs["shutdown"] = state ? state.shutdown : undefined;
            resourceInputs["standByMacAddress"] = state ? state.standByMacAddress : undefined;
        } else {
            const args = argsOrState as InterfacePhysicalArgs | undefined;
            if ((!args || args.hardwareId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hardwareId'");
            }
            if ((!args || args.securityLevel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityLevel'");
            }
            resourceInputs["activeMacAddress"] = args ? args.activeMacAddress : undefined;
            resourceInputs["forwardTrafficCx"] = args ? args.forwardTrafficCx : undefined;
            resourceInputs["forwardTrafficSfr"] = args ? args.forwardTrafficSfr : undefined;
            resourceInputs["hardwareId"] = args ? args.hardwareId : undefined;
            resourceInputs["interfaceDesc"] = args ? args.interfaceDesc : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["ipv6Info"] = args ? args.ipv6Info : undefined;
            resourceInputs["lastUpdated"] = args ? args.lastUpdated : undefined;
            resourceInputs["managementOnly"] = args ? args.managementOnly : undefined;
            resourceInputs["mtu"] = args ? args.mtu : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["securityLevel"] = args ? args.securityLevel : undefined;
            resourceInputs["shutdown"] = args ? args.shutdown : undefined;
            resourceInputs["standByMacAddress"] = args ? args.standByMacAddress : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InterfacePhysical.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering InterfacePhysical resources.
 */
export interface InterfacePhysicalState {
    activeMacAddress?: pulumi.Input<string>;
    forwardTrafficCx?: pulumi.Input<boolean>;
    forwardTrafficSfr?: pulumi.Input<boolean>;
    hardwareId?: pulumi.Input<string>;
    interfaceDesc?: pulumi.Input<string>;
    ipAddress?: pulumi.Input<inputs.InterfacePhysicalIpAddress>;
    ipv6Info?: pulumi.Input<inputs.InterfacePhysicalIpv6Info>;
    lastUpdated?: pulumi.Input<string>;
    managementOnly?: pulumi.Input<boolean>;
    mtu?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    securityLevel?: pulumi.Input<number>;
    shutdown?: pulumi.Input<boolean>;
    standByMacAddress?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InterfacePhysical resource.
 */
export interface InterfacePhysicalArgs {
    activeMacAddress?: pulumi.Input<string>;
    forwardTrafficCx?: pulumi.Input<boolean>;
    forwardTrafficSfr?: pulumi.Input<boolean>;
    hardwareId: pulumi.Input<string>;
    interfaceDesc?: pulumi.Input<string>;
    ipAddress?: pulumi.Input<inputs.InterfacePhysicalIpAddress>;
    ipv6Info?: pulumi.Input<inputs.InterfacePhysicalIpv6Info>;
    lastUpdated?: pulumi.Input<string>;
    managementOnly?: pulumi.Input<boolean>;
    mtu?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    securityLevel: pulumi.Input<number>;
    shutdown?: pulumi.Input<boolean>;
    standByMacAddress?: pulumi.Input<string>;
}
