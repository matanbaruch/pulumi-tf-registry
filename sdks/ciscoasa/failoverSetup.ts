// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class FailoverSetup extends pulumi.CustomResource {
    /**
     * Get an existing FailoverSetup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FailoverSetupState, opts?: pulumi.CustomResourceOptions): FailoverSetup {
        return new FailoverSetup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ciscoasa:index/failoverSetup:FailoverSetup';

    /**
     * Returns true if the given object is an instance of FailoverSetup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FailoverSetup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FailoverSetup.__pulumiType;
    }

    public readonly enable!: pulumi.Output<boolean | undefined>;
    public readonly failedInterfacesThreshold!: pulumi.Output<string | undefined>;
    public readonly failedInterfacesThresholdUnit!: pulumi.Output<string | undefined>;
    public readonly hexKey!: pulumi.Output<boolean | undefined>;
    public readonly httpReplication!: pulumi.Output<boolean | undefined>;
    public readonly interfaceHoldTime!: pulumi.Output<string | undefined>;
    public readonly ipsecKey!: pulumi.Output<string | undefined>;
    public readonly lanFailoverName!: pulumi.Output<string | undefined>;
    public readonly lanInterfaceHwId!: pulumi.Output<string | undefined>;
    public readonly lanNetMask!: pulumi.Output<string | undefined>;
    public readonly lanPreferredRole!: pulumi.Output<string | undefined>;
    public readonly lanPrimaryIp!: pulumi.Output<string | undefined>;
    public readonly lanSecondaryIp!: pulumi.Output<string | undefined>;
    public readonly monitoredPollTime!: pulumi.Output<string | undefined>;
    public readonly monitoredPollTimeUnit!: pulumi.Output<string | undefined>;
    public readonly replicationRate!: pulumi.Output<number | undefined>;
    public readonly sharedKey!: pulumi.Output<string | undefined>;
    public readonly stateFailoverName!: pulumi.Output<string | undefined>;
    public readonly stateInterfaceHwId!: pulumi.Output<string | undefined>;
    public readonly stateNetMask!: pulumi.Output<string | undefined>;
    public readonly statePrimaryIp!: pulumi.Output<string | undefined>;
    public readonly stateSecondaryIp!: pulumi.Output<string | undefined>;
    public readonly unitHoldTime!: pulumi.Output<string | undefined>;
    public readonly unitHoldTimeUnit!: pulumi.Output<string | undefined>;
    public readonly unitPollTime!: pulumi.Output<string | undefined>;
    public readonly unitPollTimeUnit!: pulumi.Output<string | undefined>;

    /**
     * Create a FailoverSetup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: FailoverSetupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FailoverSetupArgs | FailoverSetupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FailoverSetupState | undefined;
            resourceInputs["enable"] = state ? state.enable : undefined;
            resourceInputs["failedInterfacesThreshold"] = state ? state.failedInterfacesThreshold : undefined;
            resourceInputs["failedInterfacesThresholdUnit"] = state ? state.failedInterfacesThresholdUnit : undefined;
            resourceInputs["hexKey"] = state ? state.hexKey : undefined;
            resourceInputs["httpReplication"] = state ? state.httpReplication : undefined;
            resourceInputs["interfaceHoldTime"] = state ? state.interfaceHoldTime : undefined;
            resourceInputs["ipsecKey"] = state ? state.ipsecKey : undefined;
            resourceInputs["lanFailoverName"] = state ? state.lanFailoverName : undefined;
            resourceInputs["lanInterfaceHwId"] = state ? state.lanInterfaceHwId : undefined;
            resourceInputs["lanNetMask"] = state ? state.lanNetMask : undefined;
            resourceInputs["lanPreferredRole"] = state ? state.lanPreferredRole : undefined;
            resourceInputs["lanPrimaryIp"] = state ? state.lanPrimaryIp : undefined;
            resourceInputs["lanSecondaryIp"] = state ? state.lanSecondaryIp : undefined;
            resourceInputs["monitoredPollTime"] = state ? state.monitoredPollTime : undefined;
            resourceInputs["monitoredPollTimeUnit"] = state ? state.monitoredPollTimeUnit : undefined;
            resourceInputs["replicationRate"] = state ? state.replicationRate : undefined;
            resourceInputs["sharedKey"] = state ? state.sharedKey : undefined;
            resourceInputs["stateFailoverName"] = state ? state.stateFailoverName : undefined;
            resourceInputs["stateInterfaceHwId"] = state ? state.stateInterfaceHwId : undefined;
            resourceInputs["stateNetMask"] = state ? state.stateNetMask : undefined;
            resourceInputs["statePrimaryIp"] = state ? state.statePrimaryIp : undefined;
            resourceInputs["stateSecondaryIp"] = state ? state.stateSecondaryIp : undefined;
            resourceInputs["unitHoldTime"] = state ? state.unitHoldTime : undefined;
            resourceInputs["unitHoldTimeUnit"] = state ? state.unitHoldTimeUnit : undefined;
            resourceInputs["unitPollTime"] = state ? state.unitPollTime : undefined;
            resourceInputs["unitPollTimeUnit"] = state ? state.unitPollTimeUnit : undefined;
        } else {
            const args = argsOrState as FailoverSetupArgs | undefined;
            resourceInputs["enable"] = args ? args.enable : undefined;
            resourceInputs["failedInterfacesThreshold"] = args ? args.failedInterfacesThreshold : undefined;
            resourceInputs["failedInterfacesThresholdUnit"] = args ? args.failedInterfacesThresholdUnit : undefined;
            resourceInputs["hexKey"] = args ? args.hexKey : undefined;
            resourceInputs["httpReplication"] = args ? args.httpReplication : undefined;
            resourceInputs["interfaceHoldTime"] = args ? args.interfaceHoldTime : undefined;
            resourceInputs["ipsecKey"] = args ? args.ipsecKey : undefined;
            resourceInputs["lanFailoverName"] = args ? args.lanFailoverName : undefined;
            resourceInputs["lanInterfaceHwId"] = args ? args.lanInterfaceHwId : undefined;
            resourceInputs["lanNetMask"] = args ? args.lanNetMask : undefined;
            resourceInputs["lanPreferredRole"] = args ? args.lanPreferredRole : undefined;
            resourceInputs["lanPrimaryIp"] = args ? args.lanPrimaryIp : undefined;
            resourceInputs["lanSecondaryIp"] = args ? args.lanSecondaryIp : undefined;
            resourceInputs["monitoredPollTime"] = args ? args.monitoredPollTime : undefined;
            resourceInputs["monitoredPollTimeUnit"] = args ? args.monitoredPollTimeUnit : undefined;
            resourceInputs["replicationRate"] = args ? args.replicationRate : undefined;
            resourceInputs["sharedKey"] = args ? args.sharedKey : undefined;
            resourceInputs["stateFailoverName"] = args ? args.stateFailoverName : undefined;
            resourceInputs["stateInterfaceHwId"] = args ? args.stateInterfaceHwId : undefined;
            resourceInputs["stateNetMask"] = args ? args.stateNetMask : undefined;
            resourceInputs["statePrimaryIp"] = args ? args.statePrimaryIp : undefined;
            resourceInputs["stateSecondaryIp"] = args ? args.stateSecondaryIp : undefined;
            resourceInputs["unitHoldTime"] = args ? args.unitHoldTime : undefined;
            resourceInputs["unitHoldTimeUnit"] = args ? args.unitHoldTimeUnit : undefined;
            resourceInputs["unitPollTime"] = args ? args.unitPollTime : undefined;
            resourceInputs["unitPollTimeUnit"] = args ? args.unitPollTimeUnit : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FailoverSetup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FailoverSetup resources.
 */
export interface FailoverSetupState {
    enable?: pulumi.Input<boolean>;
    failedInterfacesThreshold?: pulumi.Input<string>;
    failedInterfacesThresholdUnit?: pulumi.Input<string>;
    hexKey?: pulumi.Input<boolean>;
    httpReplication?: pulumi.Input<boolean>;
    interfaceHoldTime?: pulumi.Input<string>;
    ipsecKey?: pulumi.Input<string>;
    lanFailoverName?: pulumi.Input<string>;
    lanInterfaceHwId?: pulumi.Input<string>;
    lanNetMask?: pulumi.Input<string>;
    lanPreferredRole?: pulumi.Input<string>;
    lanPrimaryIp?: pulumi.Input<string>;
    lanSecondaryIp?: pulumi.Input<string>;
    monitoredPollTime?: pulumi.Input<string>;
    monitoredPollTimeUnit?: pulumi.Input<string>;
    replicationRate?: pulumi.Input<number>;
    sharedKey?: pulumi.Input<string>;
    stateFailoverName?: pulumi.Input<string>;
    stateInterfaceHwId?: pulumi.Input<string>;
    stateNetMask?: pulumi.Input<string>;
    statePrimaryIp?: pulumi.Input<string>;
    stateSecondaryIp?: pulumi.Input<string>;
    unitHoldTime?: pulumi.Input<string>;
    unitHoldTimeUnit?: pulumi.Input<string>;
    unitPollTime?: pulumi.Input<string>;
    unitPollTimeUnit?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FailoverSetup resource.
 */
export interface FailoverSetupArgs {
    enable?: pulumi.Input<boolean>;
    failedInterfacesThreshold?: pulumi.Input<string>;
    failedInterfacesThresholdUnit?: pulumi.Input<string>;
    hexKey?: pulumi.Input<boolean>;
    httpReplication?: pulumi.Input<boolean>;
    interfaceHoldTime?: pulumi.Input<string>;
    ipsecKey?: pulumi.Input<string>;
    lanFailoverName?: pulumi.Input<string>;
    lanInterfaceHwId?: pulumi.Input<string>;
    lanNetMask?: pulumi.Input<string>;
    lanPreferredRole?: pulumi.Input<string>;
    lanPrimaryIp?: pulumi.Input<string>;
    lanSecondaryIp?: pulumi.Input<string>;
    monitoredPollTime?: pulumi.Input<string>;
    monitoredPollTimeUnit?: pulumi.Input<string>;
    replicationRate?: pulumi.Input<number>;
    sharedKey?: pulumi.Input<string>;
    stateFailoverName?: pulumi.Input<string>;
    stateInterfaceHwId?: pulumi.Input<string>;
    stateNetMask?: pulumi.Input<string>;
    statePrimaryIp?: pulumi.Input<string>;
    stateSecondaryIp?: pulumi.Input<string>;
    unitHoldTime?: pulumi.Input<string>;
    unitHoldTimeUnit?: pulumi.Input<string>;
    unitPollTime?: pulumi.Input<string>;
    unitPollTimeUnit?: pulumi.Input<string>;
}
