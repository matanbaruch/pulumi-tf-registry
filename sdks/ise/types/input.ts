// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ActiveDirectoryAddGroupsGroup {
    /**
     * Required for each group in the group list with no duplication between groups
     */
    name: pulumi.Input<string>;
    /**
     * Required for each group in the group list with no duplication between groups
     */
    sid: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ActiveDirectoryJoinDomainWithAllNodesAdditionalData {
    /**
     * Additional attribute name
     */
    name: pulumi.Input<string>;
    /**
     * Additional attribute value
     */
    value: pulumi.Input<string>;
}

export interface ActiveDirectoryJoinPointAttribute {
    /**
     * Required for each attribute in the attribute list. Can contain an empty string.
     */
    defaultValue: pulumi.Input<string>;
    /**
     * Required for each attribute in the attribute list
     */
    internalName: pulumi.Input<string>;
    /**
     * Required for each attribute in the attribute list with no duplication between attributes
     */
    name: pulumi.Input<string>;
    /**
     * Required for each group in the group list
     *   - Choices: `STRING`, `IP`, `BOOLEAN`, `INT`, `OCTET_STRING`
     */
    type: pulumi.Input<string>;
}

export interface ActiveDirectoryJoinPointGroup {
    /**
     * Required for each group in the group list with no duplication between groups
     */
    name: pulumi.Input<string>;
    /**
     * Required for each group in the group list with no duplication between groups
     */
    sid: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ActiveDirectoryJoinPointRewriteRule {
    /**
     * Required for each rule in the list with no duplication between rules
     */
    rewriteMatch: pulumi.Input<string>;
    /**
     * Required for each rule in the list
     */
    rewriteResult: pulumi.Input<string>;
    /**
     * Required for each rule in the list in serial order
     */
    rowId: pulumi.Input<string>;
}

export interface AuthorizationProfileAdvancedAttribute {
    /**
     * Dictionary name
     */
    attributeLeftDictionaryName?: pulumi.Input<string>;
    /**
     * Attribute name
     */
    attributeLeftName?: pulumi.Input<string>;
    /**
     * Dictionary name, only required when `attribute_right_value_type` is `AdvancedDictionaryAttribute`
     */
    attributeRightDictionaryName?: pulumi.Input<string>;
    /**
     * Attribute name, only required when `attribute_right_value_type` is `AdvancedDictionaryAttribute`
     */
    attributeRightName?: pulumi.Input<string>;
    /**
     * Attribute value, only required when `attribute_right_value_type` is `AttributeValue`
     */
    attributeRightValue?: pulumi.Input<string>;
    /**
     * Advanced attribute value type
     *   - Choices: `AdvancedDictionaryAttribute`, `AttributeValue`
     */
    attributeRightValueType?: pulumi.Input<string>;
}

export interface DeviceAdminAuthenticationRuleChildren {
    /**
     * Dictionary attribute name
     */
    attributeName?: pulumi.Input<string>;
    /**
     * Attribute value for condition. Value type is specified in dictionary object.
     */
    attributeValue?: pulumi.Input<string>;
    /**
     * List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
     */
    childrens?: pulumi.Input<pulumi.Input<inputs.DeviceAdminAuthenticationRuleChildrenChildren>[]>;
    /**
     * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
     *   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
     */
    conditionType: pulumi.Input<string>;
    /**
     * Dictionary name
     */
    dictionaryName?: pulumi.Input<string>;
    /**
     * Dictionary value
     */
    dictionaryValue?: pulumi.Input<string>;
    /**
     * UUID for condition
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates whereas this condition is in negate mode
     */
    isNegate?: pulumi.Input<boolean>;
    /**
     * Equality operator
     *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
     */
    operator?: pulumi.Input<string>;
}

export interface DeviceAdminAuthenticationRuleChildrenChildren {
    /**
     * Dictionary attribute name
     */
    attributeName?: pulumi.Input<string>;
    /**
     * Attribute value for condition. Value type is specified in dictionary object.
     */
    attributeValue?: pulumi.Input<string>;
    /**
     * Condition type.
     *   - Choices: `ConditionAttributes`, `ConditionReference`
     */
    conditionType: pulumi.Input<string>;
    /**
     * Dictionary name
     */
    dictionaryName?: pulumi.Input<string>;
    /**
     * Dictionary value
     */
    dictionaryValue?: pulumi.Input<string>;
    /**
     * UUID for condition
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates whereas this condition is in negate mode
     */
    isNegate?: pulumi.Input<boolean>;
    /**
     * Equality operator
     *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
     */
    operator?: pulumi.Input<string>;
}

export interface DeviceAdminAuthorizationExceptionRuleChildren {
    /**
     * Dictionary attribute name
     */
    attributeName?: pulumi.Input<string>;
    /**
     * Attribute value for condition. Value type is specified in dictionary object.
     */
    attributeValue?: pulumi.Input<string>;
    /**
     * List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
     */
    childrens?: pulumi.Input<pulumi.Input<inputs.DeviceAdminAuthorizationExceptionRuleChildrenChildren>[]>;
    /**
     * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
     *   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
     */
    conditionType: pulumi.Input<string>;
    /**
     * Dictionary name
     */
    dictionaryName?: pulumi.Input<string>;
    /**
     * Dictionary value
     */
    dictionaryValue?: pulumi.Input<string>;
    /**
     * UUID for condition
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates whereas this condition is in negate mode
     */
    isNegate?: pulumi.Input<boolean>;
    /**
     * Equality operator
     *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
     */
    operator?: pulumi.Input<string>;
}

export interface DeviceAdminAuthorizationExceptionRuleChildrenChildren {
    /**
     * Dictionary attribute name
     */
    attributeName?: pulumi.Input<string>;
    /**
     * Attribute value for condition. Value type is specified in dictionary object.
     */
    attributeValue?: pulumi.Input<string>;
    /**
     * Condition type.
     *   - Choices: `ConditionAttributes`, `ConditionReference`
     */
    conditionType: pulumi.Input<string>;
    /**
     * Dictionary name
     */
    dictionaryName?: pulumi.Input<string>;
    /**
     * Dictionary value
     */
    dictionaryValue?: pulumi.Input<string>;
    /**
     * UUID for condition
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates whereas this condition is in negate mode
     */
    isNegate?: pulumi.Input<boolean>;
    /**
     * Equality operator
     *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
     */
    operator?: pulumi.Input<string>;
}

export interface DeviceAdminAuthorizationGlobalExceptionRuleChildren {
    /**
     * Dictionary attribute name
     */
    attributeName?: pulumi.Input<string>;
    /**
     * Attribute value for condition. Value type is specified in dictionary object.
     */
    attributeValue?: pulumi.Input<string>;
    /**
     * List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
     */
    childrens?: pulumi.Input<pulumi.Input<inputs.DeviceAdminAuthorizationGlobalExceptionRuleChildrenChildren>[]>;
    /**
     * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
     *   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
     */
    conditionType: pulumi.Input<string>;
    /**
     * Dictionary name
     */
    dictionaryName?: pulumi.Input<string>;
    /**
     * Dictionary value
     */
    dictionaryValue?: pulumi.Input<string>;
    /**
     * UUID for condition
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates whereas this condition is in negate mode
     */
    isNegate?: pulumi.Input<boolean>;
    /**
     * Equality operator
     *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
     */
    operator?: pulumi.Input<string>;
}

export interface DeviceAdminAuthorizationGlobalExceptionRuleChildrenChildren {
    /**
     * Dictionary attribute name
     */
    attributeName?: pulumi.Input<string>;
    /**
     * Attribute value for condition. Value type is specified in dictionary object.
     */
    attributeValue?: pulumi.Input<string>;
    /**
     * Condition type.
     *   - Choices: `ConditionAttributes`, `ConditionReference`
     */
    conditionType: pulumi.Input<string>;
    /**
     * Dictionary name
     */
    dictionaryName?: pulumi.Input<string>;
    /**
     * Dictionary value
     */
    dictionaryValue?: pulumi.Input<string>;
    /**
     * UUID for condition
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates whereas this condition is in negate mode
     */
    isNegate?: pulumi.Input<boolean>;
    /**
     * Equality operator
     *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
     */
    operator?: pulumi.Input<string>;
}

export interface DeviceAdminAuthorizationRuleChildren {
    /**
     * Dictionary attribute name
     */
    attributeName?: pulumi.Input<string>;
    /**
     * Attribute value for condition. Value type is specified in dictionary object.
     */
    attributeValue?: pulumi.Input<string>;
    /**
     * List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
     */
    childrens?: pulumi.Input<pulumi.Input<inputs.DeviceAdminAuthorizationRuleChildrenChildren>[]>;
    /**
     * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
     *   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
     */
    conditionType: pulumi.Input<string>;
    /**
     * Dictionary name
     */
    dictionaryName?: pulumi.Input<string>;
    /**
     * Dictionary value
     */
    dictionaryValue?: pulumi.Input<string>;
    /**
     * UUID for condition
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates whereas this condition is in negate mode
     */
    isNegate?: pulumi.Input<boolean>;
    /**
     * Equality operator
     *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
     */
    operator?: pulumi.Input<string>;
}

export interface DeviceAdminAuthorizationRuleChildrenChildren {
    /**
     * Dictionary attribute name
     */
    attributeName?: pulumi.Input<string>;
    /**
     * Attribute value for condition. Value type is specified in dictionary object.
     */
    attributeValue?: pulumi.Input<string>;
    /**
     * Condition type.
     *   - Choices: `ConditionAttributes`, `ConditionReference`
     */
    conditionType: pulumi.Input<string>;
    /**
     * Dictionary name
     */
    dictionaryName?: pulumi.Input<string>;
    /**
     * Dictionary value
     */
    dictionaryValue?: pulumi.Input<string>;
    /**
     * UUID for condition
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates whereas this condition is in negate mode
     */
    isNegate?: pulumi.Input<boolean>;
    /**
     * Equality operator
     *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
     */
    operator?: pulumi.Input<string>;
}

export interface DeviceAdminConditionChildren {
    /**
     * Dictionary attribute name
     */
    attributeName?: pulumi.Input<string>;
    /**
     * Attribute value for condition. Value type is specified in dictionary object.
     */
    attributeValue?: pulumi.Input<string>;
    /**
     * List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
     */
    childrens?: pulumi.Input<pulumi.Input<inputs.DeviceAdminConditionChildrenChildren>[]>;
    /**
     * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
     *   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
     */
    conditionType: pulumi.Input<string>;
    /**
     * Condition description
     */
    description?: pulumi.Input<string>;
    /**
     * Dictionary name
     */
    dictionaryName?: pulumi.Input<string>;
    /**
     * Dictionary value
     */
    dictionaryValue?: pulumi.Input<string>;
    /**
     * UUID for condition
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates whereas this condition is in negate mode
     */
    isNegate?: pulumi.Input<boolean>;
    /**
     * Condition name
     */
    name?: pulumi.Input<string>;
    /**
     * Equality operator
     *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
     */
    operator?: pulumi.Input<string>;
}

export interface DeviceAdminConditionChildrenChildren {
    /**
     * Dictionary attribute name
     */
    attributeName?: pulumi.Input<string>;
    /**
     * Attribute value for condition. Value type is specified in dictionary object.
     */
    attributeValue?: pulumi.Input<string>;
    /**
     * Condition type.
     *   - Choices: `ConditionAttributes`, `ConditionReference`
     */
    conditionType: pulumi.Input<string>;
    /**
     * Condition description
     */
    description?: pulumi.Input<string>;
    /**
     * Dictionary name
     */
    dictionaryName?: pulumi.Input<string>;
    /**
     * Dictionary value
     */
    dictionaryValue?: pulumi.Input<string>;
    /**
     * UUID for condition
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates whereas this condition is in negate mode
     */
    isNegate?: pulumi.Input<boolean>;
    /**
     * Condition name
     */
    name?: pulumi.Input<string>;
    /**
     * Equality operator
     *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
     */
    operator?: pulumi.Input<string>;
}

export interface DeviceAdminPolicySetChildren {
    /**
     * Dictionary attribute name
     */
    attributeName?: pulumi.Input<string>;
    /**
     * Attribute value for condition. Value type is specified in dictionary object.
     */
    attributeValue?: pulumi.Input<string>;
    /**
     * List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
     */
    childrens?: pulumi.Input<pulumi.Input<inputs.DeviceAdminPolicySetChildrenChildren>[]>;
    /**
     * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
     *   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
     */
    conditionType: pulumi.Input<string>;
    /**
     * Dictionary name
     */
    dictionaryName?: pulumi.Input<string>;
    /**
     * Dictionary value
     */
    dictionaryValue?: pulumi.Input<string>;
    /**
     * UUID for condition
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates whereas this condition is in negate mode
     */
    isNegate?: pulumi.Input<boolean>;
    /**
     * Equality operator
     *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
     */
    operator?: pulumi.Input<string>;
}

export interface DeviceAdminPolicySetChildrenChildren {
    /**
     * Dictionary attribute name
     */
    attributeName?: pulumi.Input<string>;
    /**
     * Attribute value for condition. Value type is specified in dictionary object.
     */
    attributeValue?: pulumi.Input<string>;
    /**
     * Condition type.
     *   - Choices: `ConditionAttributes`, `ConditionReference`
     */
    conditionType: pulumi.Input<string>;
    /**
     * Dictionary name
     */
    dictionaryName?: pulumi.Input<string>;
    /**
     * Dictionary value
     */
    dictionaryValue?: pulumi.Input<string>;
    /**
     * UUID for condition
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates whereas this condition is in negate mode
     */
    isNegate?: pulumi.Input<boolean>;
    /**
     * Equality operator
     *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
     */
    operator?: pulumi.Input<string>;
}

export interface IdentitySourceSequenceIdentitySource {
    /**
     * Name of the identity source
     */
    name: pulumi.Input<string>;
    /**
     * Order of the identity source in the sequence
     */
    order: pulumi.Input<number>;
}

export interface LicenseTierStateLicense {
    /**
     * License name
     *   - Choices: `ESSENTIAL`, `ADVANTAGE`, `PREMIER`, `DEVICEADMIN`, `VM`
     */
    name: pulumi.Input<string>;
    /**
     * License status
     *   - Choices: `ENABLED`, `DISABLED`
     */
    status: pulumi.Input<string>;
}

export interface NetworkAccessAuthenticationRuleChildren {
    /**
     * Dictionary attribute name
     */
    attributeName?: pulumi.Input<string>;
    /**
     * Attribute value for condition. Value type is specified in dictionary object.
     */
    attributeValue?: pulumi.Input<string>;
    /**
     * List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
     */
    childrens?: pulumi.Input<pulumi.Input<inputs.NetworkAccessAuthenticationRuleChildrenChildren>[]>;
    /**
     * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
     *   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
     */
    conditionType: pulumi.Input<string>;
    /**
     * Dictionary name
     */
    dictionaryName?: pulumi.Input<string>;
    /**
     * Dictionary value
     */
    dictionaryValue?: pulumi.Input<string>;
    /**
     * UUID for condition
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates whereas this condition is in negate mode
     */
    isNegate?: pulumi.Input<boolean>;
    /**
     * Equality operator
     *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
     */
    operator?: pulumi.Input<string>;
}

export interface NetworkAccessAuthenticationRuleChildrenChildren {
    /**
     * Dictionary attribute name
     */
    attributeName?: pulumi.Input<string>;
    /**
     * Attribute value for condition. Value type is specified in dictionary object.
     */
    attributeValue?: pulumi.Input<string>;
    /**
     * Condition type.
     *   - Choices: `ConditionAttributes`, `ConditionReference`
     */
    conditionType: pulumi.Input<string>;
    /**
     * Dictionary name
     */
    dictionaryName?: pulumi.Input<string>;
    /**
     * Dictionary value
     */
    dictionaryValue?: pulumi.Input<string>;
    /**
     * UUID for condition
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates whereas this condition is in negate mode
     */
    isNegate?: pulumi.Input<boolean>;
    /**
     * Equality operator
     *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
     */
    operator?: pulumi.Input<string>;
}

export interface NetworkAccessAuthorizationExceptionRuleChildren {
    /**
     * Dictionary attribute name
     */
    attributeName?: pulumi.Input<string>;
    /**
     * Attribute value for condition. Value type is specified in dictionary object.
     */
    attributeValue?: pulumi.Input<string>;
    /**
     * List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
     */
    childrens?: pulumi.Input<pulumi.Input<inputs.NetworkAccessAuthorizationExceptionRuleChildrenChildren>[]>;
    /**
     * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
     *   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
     */
    conditionType: pulumi.Input<string>;
    /**
     * Dictionary name
     */
    dictionaryName?: pulumi.Input<string>;
    /**
     * Dictionary value
     */
    dictionaryValue?: pulumi.Input<string>;
    /**
     * UUID for condition
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates whereas this condition is in negate mode
     */
    isNegate?: pulumi.Input<boolean>;
    /**
     * Equality operator
     *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
     */
    operator?: pulumi.Input<string>;
}

export interface NetworkAccessAuthorizationExceptionRuleChildrenChildren {
    /**
     * Dictionary attribute name
     */
    attributeName?: pulumi.Input<string>;
    /**
     * Attribute value for condition. Value type is specified in dictionary object.
     */
    attributeValue?: pulumi.Input<string>;
    /**
     * Condition type.
     *   - Choices: `ConditionAttributes`, `ConditionReference`
     */
    conditionType: pulumi.Input<string>;
    /**
     * Dictionary name
     */
    dictionaryName?: pulumi.Input<string>;
    /**
     * Dictionary value
     */
    dictionaryValue?: pulumi.Input<string>;
    /**
     * UUID for condition
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates whereas this condition is in negate mode
     */
    isNegate?: pulumi.Input<boolean>;
    /**
     * Equality operator
     *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
     */
    operator?: pulumi.Input<string>;
}

export interface NetworkAccessAuthorizationGlobalExceptionRuleChildren {
    /**
     * Dictionary attribute name
     */
    attributeName?: pulumi.Input<string>;
    /**
     * Attribute value for condition. Value type is specified in dictionary object.
     */
    attributeValue?: pulumi.Input<string>;
    /**
     * List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
     */
    childrens?: pulumi.Input<pulumi.Input<inputs.NetworkAccessAuthorizationGlobalExceptionRuleChildrenChildren>[]>;
    /**
     * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
     *   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
     */
    conditionType: pulumi.Input<string>;
    /**
     * Dictionary name
     */
    dictionaryName?: pulumi.Input<string>;
    /**
     * Dictionary value
     */
    dictionaryValue?: pulumi.Input<string>;
    /**
     * UUID for condition
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates whereas this condition is in negate mode
     */
    isNegate?: pulumi.Input<boolean>;
    /**
     * Equality operator
     *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
     */
    operator?: pulumi.Input<string>;
}

export interface NetworkAccessAuthorizationGlobalExceptionRuleChildrenChildren {
    /**
     * Dictionary attribute name
     */
    attributeName?: pulumi.Input<string>;
    /**
     * Attribute value for condition. Value type is specified in dictionary object.
     */
    attributeValue?: pulumi.Input<string>;
    /**
     * Condition type.
     *   - Choices: `ConditionAttributes`, `ConditionReference`
     */
    conditionType: pulumi.Input<string>;
    /**
     * Dictionary name
     */
    dictionaryName?: pulumi.Input<string>;
    /**
     * Dictionary value
     */
    dictionaryValue?: pulumi.Input<string>;
    /**
     * UUID for condition
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates whereas this condition is in negate mode
     */
    isNegate?: pulumi.Input<boolean>;
    /**
     * Equality operator
     *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
     */
    operator?: pulumi.Input<string>;
}

export interface NetworkAccessAuthorizationRuleChildren {
    /**
     * Dictionary attribute name
     */
    attributeName?: pulumi.Input<string>;
    /**
     * Attribute value for condition. Value type is specified in dictionary object.
     */
    attributeValue?: pulumi.Input<string>;
    /**
     * List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
     */
    childrens?: pulumi.Input<pulumi.Input<inputs.NetworkAccessAuthorizationRuleChildrenChildren>[]>;
    /**
     * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
     *   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
     */
    conditionType: pulumi.Input<string>;
    /**
     * Dictionary name
     */
    dictionaryName?: pulumi.Input<string>;
    /**
     * Dictionary value
     */
    dictionaryValue?: pulumi.Input<string>;
    /**
     * UUID for condition
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates whereas this condition is in negate mode
     */
    isNegate?: pulumi.Input<boolean>;
    /**
     * Equality operator
     *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
     */
    operator?: pulumi.Input<string>;
}

export interface NetworkAccessAuthorizationRuleChildrenChildren {
    /**
     * Dictionary attribute name
     */
    attributeName?: pulumi.Input<string>;
    /**
     * Attribute value for condition. Value type is specified in dictionary object.
     */
    attributeValue?: pulumi.Input<string>;
    /**
     * Condition type.
     *   - Choices: `ConditionAttributes`, `ConditionReference`
     */
    conditionType: pulumi.Input<string>;
    /**
     * Dictionary name
     */
    dictionaryName?: pulumi.Input<string>;
    /**
     * Dictionary value
     */
    dictionaryValue?: pulumi.Input<string>;
    /**
     * UUID for condition
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates whereas this condition is in negate mode
     */
    isNegate?: pulumi.Input<boolean>;
    /**
     * Equality operator
     *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
     */
    operator?: pulumi.Input<string>;
}

export interface NetworkAccessConditionChildren {
    /**
     * Dictionary attribute name
     */
    attributeName?: pulumi.Input<string>;
    /**
     * Attribute value for condition. Value type is specified in dictionary object.
     */
    attributeValue?: pulumi.Input<string>;
    /**
     * List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
     */
    childrens?: pulumi.Input<pulumi.Input<inputs.NetworkAccessConditionChildrenChildren>[]>;
    /**
     * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
     *   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
     */
    conditionType: pulumi.Input<string>;
    /**
     * Condition description
     */
    description?: pulumi.Input<string>;
    /**
     * Dictionary name
     */
    dictionaryName?: pulumi.Input<string>;
    /**
     * Dictionary value
     */
    dictionaryValue?: pulumi.Input<string>;
    /**
     * UUID for condition
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates whereas this condition is in negate mode
     */
    isNegate?: pulumi.Input<boolean>;
    /**
     * Condition name
     */
    name?: pulumi.Input<string>;
    /**
     * Equality operator
     *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
     */
    operator?: pulumi.Input<string>;
}

export interface NetworkAccessConditionChildrenChildren {
    /**
     * Dictionary attribute name
     */
    attributeName?: pulumi.Input<string>;
    /**
     * Attribute value for condition. Value type is specified in dictionary object.
     */
    attributeValue?: pulumi.Input<string>;
    /**
     * Condition type.
     *   - Choices: `ConditionAttributes`, `ConditionReference`
     */
    conditionType: pulumi.Input<string>;
    /**
     * Condition description
     */
    description?: pulumi.Input<string>;
    /**
     * Dictionary name
     */
    dictionaryName?: pulumi.Input<string>;
    /**
     * Dictionary value
     */
    dictionaryValue?: pulumi.Input<string>;
    /**
     * UUID for condition
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates whereas this condition is in negate mode
     */
    isNegate?: pulumi.Input<boolean>;
    /**
     * Condition name
     */
    name?: pulumi.Input<string>;
    /**
     * Equality operator
     *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
     */
    operator?: pulumi.Input<string>;
}

export interface NetworkAccessPolicySetChildren {
    /**
     * Dictionary attribute name
     */
    attributeName?: pulumi.Input<string>;
    /**
     * Attribute value for condition. Value type is specified in dictionary object.
     */
    attributeValue?: pulumi.Input<string>;
    /**
     * List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`.
     */
    childrens?: pulumi.Input<pulumi.Input<inputs.NetworkAccessPolicySetChildrenChildren>[]>;
    /**
     * Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute.
     *   - Choices: `ConditionAndBlock`, `ConditionAttributes`, `ConditionOrBlock`, `ConditionReference`
     */
    conditionType: pulumi.Input<string>;
    /**
     * Dictionary name
     */
    dictionaryName?: pulumi.Input<string>;
    /**
     * Dictionary value
     */
    dictionaryValue?: pulumi.Input<string>;
    /**
     * UUID for condition
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates whereas this condition is in negate mode
     */
    isNegate?: pulumi.Input<boolean>;
    /**
     * Equality operator
     *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
     */
    operator?: pulumi.Input<string>;
}

export interface NetworkAccessPolicySetChildrenChildren {
    /**
     * Dictionary attribute name
     */
    attributeName?: pulumi.Input<string>;
    /**
     * Attribute value for condition. Value type is specified in dictionary object.
     */
    attributeValue?: pulumi.Input<string>;
    /**
     * Condition type.
     *   - Choices: `ConditionAttributes`, `ConditionReference`
     */
    conditionType: pulumi.Input<string>;
    /**
     * Dictionary name
     */
    dictionaryName?: pulumi.Input<string>;
    /**
     * Dictionary value
     */
    dictionaryValue?: pulumi.Input<string>;
    /**
     * UUID for condition
     */
    id?: pulumi.Input<string>;
    /**
     * Indicates whereas this condition is in negate mode
     */
    isNegate?: pulumi.Input<boolean>;
    /**
     * Equality operator
     *   - Choices: `contains`, `endsWith`, `equals`, `greaterOrEquals`, `greaterThan`, `in`, `ipEquals`, `ipGreaterThan`, `ipLessThan`, `ipNotEquals`, `lessOrEquals`, `lessThan`, `matches`, `notContains`, `notEndsWith`, `notEquals`, `notIn`, `notStartsWith`, `startsWith`
     */
    operator?: pulumi.Input<string>;
}

export interface NetworkDeviceIp {
    /**
     * It can be either single ip address or ip range address
     */
    ipaddress: pulumi.Input<string>;
    /**
     * It can be either single ip address or ip range address
     */
    ipaddressExclude?: pulumi.Input<string>;
    /**
     * Subnet mask length
     */
    mask?: pulumi.Input<string>;
}

export interface TacacsCommandSetCommand {
    /**
     * Command arguments
     */
    arguments: pulumi.Input<string>;
    /**
     * Command
     */
    command: pulumi.Input<string>;
    /**
     * Grant
     *   - Choices: `PERMIT`, `DENY`, `DENY_ALWAYS`
     */
    grant: pulumi.Input<string>;
}

export interface TacacsProfileSessionAttribute {
    /**
     * Name
     */
    name: pulumi.Input<string>;
    /**
     * Type
     *   - Choices: `MANDATORY`, `OPTIONAL`
     */
    type: pulumi.Input<string>;
    /**
     * Value
     */
    value: pulumi.Input<string>;
}
