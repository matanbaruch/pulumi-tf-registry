// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ActiveDirectoryAddGroupsArgs, ActiveDirectoryAddGroupsState } from "./activeDirectoryAddGroups";
export type ActiveDirectoryAddGroups = import("./activeDirectoryAddGroups").ActiveDirectoryAddGroups;
export const ActiveDirectoryAddGroups: typeof import("./activeDirectoryAddGroups").ActiveDirectoryAddGroups = null as any;
utilities.lazyLoad(exports, ["ActiveDirectoryAddGroups"], () => require("./activeDirectoryAddGroups"));

export { ActiveDirectoryJoinDomainWithAllNodesArgs, ActiveDirectoryJoinDomainWithAllNodesState } from "./activeDirectoryJoinDomainWithAllNodes";
export type ActiveDirectoryJoinDomainWithAllNodes = import("./activeDirectoryJoinDomainWithAllNodes").ActiveDirectoryJoinDomainWithAllNodes;
export const ActiveDirectoryJoinDomainWithAllNodes: typeof import("./activeDirectoryJoinDomainWithAllNodes").ActiveDirectoryJoinDomainWithAllNodes = null as any;
utilities.lazyLoad(exports, ["ActiveDirectoryJoinDomainWithAllNodes"], () => require("./activeDirectoryJoinDomainWithAllNodes"));

export { ActiveDirectoryJoinPointArgs, ActiveDirectoryJoinPointState } from "./activeDirectoryJoinPoint";
export type ActiveDirectoryJoinPoint = import("./activeDirectoryJoinPoint").ActiveDirectoryJoinPoint;
export const ActiveDirectoryJoinPoint: typeof import("./activeDirectoryJoinPoint").ActiveDirectoryJoinPoint = null as any;
utilities.lazyLoad(exports, ["ActiveDirectoryJoinPoint"], () => require("./activeDirectoryJoinPoint"));

export { AllowedProtocolsArgs, AllowedProtocolsState } from "./allowedProtocols";
export type AllowedProtocols = import("./allowedProtocols").AllowedProtocols;
export const AllowedProtocols: typeof import("./allowedProtocols").AllowedProtocols = null as any;
utilities.lazyLoad(exports, ["AllowedProtocols"], () => require("./allowedProtocols"));

export { AllowedProtocolsTacacsArgs, AllowedProtocolsTacacsState } from "./allowedProtocolsTacacs";
export type AllowedProtocolsTacacs = import("./allowedProtocolsTacacs").AllowedProtocolsTacacs;
export const AllowedProtocolsTacacs: typeof import("./allowedProtocolsTacacs").AllowedProtocolsTacacs = null as any;
utilities.lazyLoad(exports, ["AllowedProtocolsTacacs"], () => require("./allowedProtocolsTacacs"));

export { AuthorizationProfileArgs, AuthorizationProfileState } from "./authorizationProfile";
export type AuthorizationProfile = import("./authorizationProfile").AuthorizationProfile;
export const AuthorizationProfile: typeof import("./authorizationProfile").AuthorizationProfile = null as any;
utilities.lazyLoad(exports, ["AuthorizationProfile"], () => require("./authorizationProfile"));

export { CertificateAuthenticationProfileArgs, CertificateAuthenticationProfileState } from "./certificateAuthenticationProfile";
export type CertificateAuthenticationProfile = import("./certificateAuthenticationProfile").CertificateAuthenticationProfile;
export const CertificateAuthenticationProfile: typeof import("./certificateAuthenticationProfile").CertificateAuthenticationProfile = null as any;
utilities.lazyLoad(exports, ["CertificateAuthenticationProfile"], () => require("./certificateAuthenticationProfile"));

export { DeviceAdminAuthenticationRuleArgs, DeviceAdminAuthenticationRuleState } from "./deviceAdminAuthenticationRule";
export type DeviceAdminAuthenticationRule = import("./deviceAdminAuthenticationRule").DeviceAdminAuthenticationRule;
export const DeviceAdminAuthenticationRule: typeof import("./deviceAdminAuthenticationRule").DeviceAdminAuthenticationRule = null as any;
utilities.lazyLoad(exports, ["DeviceAdminAuthenticationRule"], () => require("./deviceAdminAuthenticationRule"));

export { DeviceAdminAuthorizationExceptionRuleArgs, DeviceAdminAuthorizationExceptionRuleState } from "./deviceAdminAuthorizationExceptionRule";
export type DeviceAdminAuthorizationExceptionRule = import("./deviceAdminAuthorizationExceptionRule").DeviceAdminAuthorizationExceptionRule;
export const DeviceAdminAuthorizationExceptionRule: typeof import("./deviceAdminAuthorizationExceptionRule").DeviceAdminAuthorizationExceptionRule = null as any;
utilities.lazyLoad(exports, ["DeviceAdminAuthorizationExceptionRule"], () => require("./deviceAdminAuthorizationExceptionRule"));

export { DeviceAdminAuthorizationGlobalExceptionRuleArgs, DeviceAdminAuthorizationGlobalExceptionRuleState } from "./deviceAdminAuthorizationGlobalExceptionRule";
export type DeviceAdminAuthorizationGlobalExceptionRule = import("./deviceAdminAuthorizationGlobalExceptionRule").DeviceAdminAuthorizationGlobalExceptionRule;
export const DeviceAdminAuthorizationGlobalExceptionRule: typeof import("./deviceAdminAuthorizationGlobalExceptionRule").DeviceAdminAuthorizationGlobalExceptionRule = null as any;
utilities.lazyLoad(exports, ["DeviceAdminAuthorizationGlobalExceptionRule"], () => require("./deviceAdminAuthorizationGlobalExceptionRule"));

export { DeviceAdminAuthorizationRuleArgs, DeviceAdminAuthorizationRuleState } from "./deviceAdminAuthorizationRule";
export type DeviceAdminAuthorizationRule = import("./deviceAdminAuthorizationRule").DeviceAdminAuthorizationRule;
export const DeviceAdminAuthorizationRule: typeof import("./deviceAdminAuthorizationRule").DeviceAdminAuthorizationRule = null as any;
utilities.lazyLoad(exports, ["DeviceAdminAuthorizationRule"], () => require("./deviceAdminAuthorizationRule"));

export { DeviceAdminConditionArgs, DeviceAdminConditionState } from "./deviceAdminCondition";
export type DeviceAdminCondition = import("./deviceAdminCondition").DeviceAdminCondition;
export const DeviceAdminCondition: typeof import("./deviceAdminCondition").DeviceAdminCondition = null as any;
utilities.lazyLoad(exports, ["DeviceAdminCondition"], () => require("./deviceAdminCondition"));

export { DeviceAdminPolicySetArgs, DeviceAdminPolicySetState } from "./deviceAdminPolicySet";
export type DeviceAdminPolicySet = import("./deviceAdminPolicySet").DeviceAdminPolicySet;
export const DeviceAdminPolicySet: typeof import("./deviceAdminPolicySet").DeviceAdminPolicySet = null as any;
utilities.lazyLoad(exports, ["DeviceAdminPolicySet"], () => require("./deviceAdminPolicySet"));

export { DeviceAdminTimeAndDateConditionArgs, DeviceAdminTimeAndDateConditionState } from "./deviceAdminTimeAndDateCondition";
export type DeviceAdminTimeAndDateCondition = import("./deviceAdminTimeAndDateCondition").DeviceAdminTimeAndDateCondition;
export const DeviceAdminTimeAndDateCondition: typeof import("./deviceAdminTimeAndDateCondition").DeviceAdminTimeAndDateCondition = null as any;
utilities.lazyLoad(exports, ["DeviceAdminTimeAndDateCondition"], () => require("./deviceAdminTimeAndDateCondition"));

export { DownloadableAclArgs, DownloadableAclState } from "./downloadableAcl";
export type DownloadableAcl = import("./downloadableAcl").DownloadableAcl;
export const DownloadableAcl: typeof import("./downloadableAcl").DownloadableAcl = null as any;
utilities.lazyLoad(exports, ["DownloadableAcl"], () => require("./downloadableAcl"));

export { EndpointArgs, EndpointState } from "./endpoint";
export type Endpoint = import("./endpoint").Endpoint;
export const Endpoint: typeof import("./endpoint").Endpoint = null as any;
utilities.lazyLoad(exports, ["Endpoint"], () => require("./endpoint"));

export { EndpointIdentityGroupArgs, EndpointIdentityGroupState } from "./endpointIdentityGroup";
export type EndpointIdentityGroup = import("./endpointIdentityGroup").EndpointIdentityGroup;
export const EndpointIdentityGroup: typeof import("./endpointIdentityGroup").EndpointIdentityGroup = null as any;
utilities.lazyLoad(exports, ["EndpointIdentityGroup"], () => require("./endpointIdentityGroup"));

export { GetActiveDirectoryGroupsByDomainArgs, GetActiveDirectoryGroupsByDomainResult, GetActiveDirectoryGroupsByDomainOutputArgs } from "./getActiveDirectoryGroupsByDomain";
export const getActiveDirectoryGroupsByDomain: typeof import("./getActiveDirectoryGroupsByDomain").getActiveDirectoryGroupsByDomain = null as any;
export const getActiveDirectoryGroupsByDomainOutput: typeof import("./getActiveDirectoryGroupsByDomain").getActiveDirectoryGroupsByDomainOutput = null as any;
utilities.lazyLoad(exports, ["getActiveDirectoryGroupsByDomain","getActiveDirectoryGroupsByDomainOutput"], () => require("./getActiveDirectoryGroupsByDomain"));

export { GetActiveDirectoryJoinPointArgs, GetActiveDirectoryJoinPointResult, GetActiveDirectoryJoinPointOutputArgs } from "./getActiveDirectoryJoinPoint";
export const getActiveDirectoryJoinPoint: typeof import("./getActiveDirectoryJoinPoint").getActiveDirectoryJoinPoint = null as any;
export const getActiveDirectoryJoinPointOutput: typeof import("./getActiveDirectoryJoinPoint").getActiveDirectoryJoinPointOutput = null as any;
utilities.lazyLoad(exports, ["getActiveDirectoryJoinPoint","getActiveDirectoryJoinPointOutput"], () => require("./getActiveDirectoryJoinPoint"));

export { GetAllowedProtocolsArgs, GetAllowedProtocolsResult, GetAllowedProtocolsOutputArgs } from "./getAllowedProtocols";
export const getAllowedProtocols: typeof import("./getAllowedProtocols").getAllowedProtocols = null as any;
export const getAllowedProtocolsOutput: typeof import("./getAllowedProtocols").getAllowedProtocolsOutput = null as any;
utilities.lazyLoad(exports, ["getAllowedProtocols","getAllowedProtocolsOutput"], () => require("./getAllowedProtocols"));

export { GetAllowedProtocolsTacacsArgs, GetAllowedProtocolsTacacsResult, GetAllowedProtocolsTacacsOutputArgs } from "./getAllowedProtocolsTacacs";
export const getAllowedProtocolsTacacs: typeof import("./getAllowedProtocolsTacacs").getAllowedProtocolsTacacs = null as any;
export const getAllowedProtocolsTacacsOutput: typeof import("./getAllowedProtocolsTacacs").getAllowedProtocolsTacacsOutput = null as any;
utilities.lazyLoad(exports, ["getAllowedProtocolsTacacs","getAllowedProtocolsTacacsOutput"], () => require("./getAllowedProtocolsTacacs"));

export { GetAuthorizationProfileArgs, GetAuthorizationProfileResult, GetAuthorizationProfileOutputArgs } from "./getAuthorizationProfile";
export const getAuthorizationProfile: typeof import("./getAuthorizationProfile").getAuthorizationProfile = null as any;
export const getAuthorizationProfileOutput: typeof import("./getAuthorizationProfile").getAuthorizationProfileOutput = null as any;
utilities.lazyLoad(exports, ["getAuthorizationProfile","getAuthorizationProfileOutput"], () => require("./getAuthorizationProfile"));

export { GetCertificateAuthenticationProfileArgs, GetCertificateAuthenticationProfileResult, GetCertificateAuthenticationProfileOutputArgs } from "./getCertificateAuthenticationProfile";
export const getCertificateAuthenticationProfile: typeof import("./getCertificateAuthenticationProfile").getCertificateAuthenticationProfile = null as any;
export const getCertificateAuthenticationProfileOutput: typeof import("./getCertificateAuthenticationProfile").getCertificateAuthenticationProfileOutput = null as any;
utilities.lazyLoad(exports, ["getCertificateAuthenticationProfile","getCertificateAuthenticationProfileOutput"], () => require("./getCertificateAuthenticationProfile"));

export { GetDeviceAdminAuthenticationRuleArgs, GetDeviceAdminAuthenticationRuleResult, GetDeviceAdminAuthenticationRuleOutputArgs } from "./getDeviceAdminAuthenticationRule";
export const getDeviceAdminAuthenticationRule: typeof import("./getDeviceAdminAuthenticationRule").getDeviceAdminAuthenticationRule = null as any;
export const getDeviceAdminAuthenticationRuleOutput: typeof import("./getDeviceAdminAuthenticationRule").getDeviceAdminAuthenticationRuleOutput = null as any;
utilities.lazyLoad(exports, ["getDeviceAdminAuthenticationRule","getDeviceAdminAuthenticationRuleOutput"], () => require("./getDeviceAdminAuthenticationRule"));

export { GetDeviceAdminAuthorizationExceptionRuleArgs, GetDeviceAdminAuthorizationExceptionRuleResult, GetDeviceAdminAuthorizationExceptionRuleOutputArgs } from "./getDeviceAdminAuthorizationExceptionRule";
export const getDeviceAdminAuthorizationExceptionRule: typeof import("./getDeviceAdminAuthorizationExceptionRule").getDeviceAdminAuthorizationExceptionRule = null as any;
export const getDeviceAdminAuthorizationExceptionRuleOutput: typeof import("./getDeviceAdminAuthorizationExceptionRule").getDeviceAdminAuthorizationExceptionRuleOutput = null as any;
utilities.lazyLoad(exports, ["getDeviceAdminAuthorizationExceptionRule","getDeviceAdminAuthorizationExceptionRuleOutput"], () => require("./getDeviceAdminAuthorizationExceptionRule"));

export { GetDeviceAdminAuthorizationGlobalExceptionRuleArgs, GetDeviceAdminAuthorizationGlobalExceptionRuleResult, GetDeviceAdminAuthorizationGlobalExceptionRuleOutputArgs } from "./getDeviceAdminAuthorizationGlobalExceptionRule";
export const getDeviceAdminAuthorizationGlobalExceptionRule: typeof import("./getDeviceAdminAuthorizationGlobalExceptionRule").getDeviceAdminAuthorizationGlobalExceptionRule = null as any;
export const getDeviceAdminAuthorizationGlobalExceptionRuleOutput: typeof import("./getDeviceAdminAuthorizationGlobalExceptionRule").getDeviceAdminAuthorizationGlobalExceptionRuleOutput = null as any;
utilities.lazyLoad(exports, ["getDeviceAdminAuthorizationGlobalExceptionRule","getDeviceAdminAuthorizationGlobalExceptionRuleOutput"], () => require("./getDeviceAdminAuthorizationGlobalExceptionRule"));

export { GetDeviceAdminAuthorizationRuleArgs, GetDeviceAdminAuthorizationRuleResult, GetDeviceAdminAuthorizationRuleOutputArgs } from "./getDeviceAdminAuthorizationRule";
export const getDeviceAdminAuthorizationRule: typeof import("./getDeviceAdminAuthorizationRule").getDeviceAdminAuthorizationRule = null as any;
export const getDeviceAdminAuthorizationRuleOutput: typeof import("./getDeviceAdminAuthorizationRule").getDeviceAdminAuthorizationRuleOutput = null as any;
utilities.lazyLoad(exports, ["getDeviceAdminAuthorizationRule","getDeviceAdminAuthorizationRuleOutput"], () => require("./getDeviceAdminAuthorizationRule"));

export { GetDeviceAdminConditionArgs, GetDeviceAdminConditionResult, GetDeviceAdminConditionOutputArgs } from "./getDeviceAdminCondition";
export const getDeviceAdminCondition: typeof import("./getDeviceAdminCondition").getDeviceAdminCondition = null as any;
export const getDeviceAdminConditionOutput: typeof import("./getDeviceAdminCondition").getDeviceAdminConditionOutput = null as any;
utilities.lazyLoad(exports, ["getDeviceAdminCondition","getDeviceAdminConditionOutput"], () => require("./getDeviceAdminCondition"));

export { GetDeviceAdminPolicySetArgs, GetDeviceAdminPolicySetResult, GetDeviceAdminPolicySetOutputArgs } from "./getDeviceAdminPolicySet";
export const getDeviceAdminPolicySet: typeof import("./getDeviceAdminPolicySet").getDeviceAdminPolicySet = null as any;
export const getDeviceAdminPolicySetOutput: typeof import("./getDeviceAdminPolicySet").getDeviceAdminPolicySetOutput = null as any;
utilities.lazyLoad(exports, ["getDeviceAdminPolicySet","getDeviceAdminPolicySetOutput"], () => require("./getDeviceAdminPolicySet"));

export { GetDeviceAdminTimeAndDateConditionArgs, GetDeviceAdminTimeAndDateConditionResult, GetDeviceAdminTimeAndDateConditionOutputArgs } from "./getDeviceAdminTimeAndDateCondition";
export const getDeviceAdminTimeAndDateCondition: typeof import("./getDeviceAdminTimeAndDateCondition").getDeviceAdminTimeAndDateCondition = null as any;
export const getDeviceAdminTimeAndDateConditionOutput: typeof import("./getDeviceAdminTimeAndDateCondition").getDeviceAdminTimeAndDateConditionOutput = null as any;
utilities.lazyLoad(exports, ["getDeviceAdminTimeAndDateCondition","getDeviceAdminTimeAndDateConditionOutput"], () => require("./getDeviceAdminTimeAndDateCondition"));

export { GetDownloadableAclArgs, GetDownloadableAclResult, GetDownloadableAclOutputArgs } from "./getDownloadableAcl";
export const getDownloadableAcl: typeof import("./getDownloadableAcl").getDownloadableAcl = null as any;
export const getDownloadableAclOutput: typeof import("./getDownloadableAcl").getDownloadableAclOutput = null as any;
utilities.lazyLoad(exports, ["getDownloadableAcl","getDownloadableAclOutput"], () => require("./getDownloadableAcl"));

export { GetEndpointArgs, GetEndpointResult, GetEndpointOutputArgs } from "./getEndpoint";
export const getEndpoint: typeof import("./getEndpoint").getEndpoint = null as any;
export const getEndpointOutput: typeof import("./getEndpoint").getEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getEndpoint","getEndpointOutput"], () => require("./getEndpoint"));

export { GetEndpointIdentityGroupArgs, GetEndpointIdentityGroupResult, GetEndpointIdentityGroupOutputArgs } from "./getEndpointIdentityGroup";
export const getEndpointIdentityGroup: typeof import("./getEndpointIdentityGroup").getEndpointIdentityGroup = null as any;
export const getEndpointIdentityGroupOutput: typeof import("./getEndpointIdentityGroup").getEndpointIdentityGroupOutput = null as any;
utilities.lazyLoad(exports, ["getEndpointIdentityGroup","getEndpointIdentityGroupOutput"], () => require("./getEndpointIdentityGroup"));

export { GetIdentitySourceSequenceArgs, GetIdentitySourceSequenceResult, GetIdentitySourceSequenceOutputArgs } from "./getIdentitySourceSequence";
export const getIdentitySourceSequence: typeof import("./getIdentitySourceSequence").getIdentitySourceSequence = null as any;
export const getIdentitySourceSequenceOutput: typeof import("./getIdentitySourceSequence").getIdentitySourceSequenceOutput = null as any;
utilities.lazyLoad(exports, ["getIdentitySourceSequence","getIdentitySourceSequenceOutput"], () => require("./getIdentitySourceSequence"));

export { GetInternalUserArgs, GetInternalUserResult, GetInternalUserOutputArgs } from "./getInternalUser";
export const getInternalUser: typeof import("./getInternalUser").getInternalUser = null as any;
export const getInternalUserOutput: typeof import("./getInternalUser").getInternalUserOutput = null as any;
utilities.lazyLoad(exports, ["getInternalUser","getInternalUserOutput"], () => require("./getInternalUser"));

export { GetLicenseTierStateArgs, GetLicenseTierStateResult, GetLicenseTierStateOutputArgs } from "./getLicenseTierState";
export const getLicenseTierState: typeof import("./getLicenseTierState").getLicenseTierState = null as any;
export const getLicenseTierStateOutput: typeof import("./getLicenseTierState").getLicenseTierStateOutput = null as any;
utilities.lazyLoad(exports, ["getLicenseTierState","getLicenseTierStateOutput"], () => require("./getLicenseTierState"));

export { GetNetworkAccessAuthenticationRuleArgs, GetNetworkAccessAuthenticationRuleResult, GetNetworkAccessAuthenticationRuleOutputArgs } from "./getNetworkAccessAuthenticationRule";
export const getNetworkAccessAuthenticationRule: typeof import("./getNetworkAccessAuthenticationRule").getNetworkAccessAuthenticationRule = null as any;
export const getNetworkAccessAuthenticationRuleOutput: typeof import("./getNetworkAccessAuthenticationRule").getNetworkAccessAuthenticationRuleOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkAccessAuthenticationRule","getNetworkAccessAuthenticationRuleOutput"], () => require("./getNetworkAccessAuthenticationRule"));

export { GetNetworkAccessAuthorizationExceptionRuleArgs, GetNetworkAccessAuthorizationExceptionRuleResult, GetNetworkAccessAuthorizationExceptionRuleOutputArgs } from "./getNetworkAccessAuthorizationExceptionRule";
export const getNetworkAccessAuthorizationExceptionRule: typeof import("./getNetworkAccessAuthorizationExceptionRule").getNetworkAccessAuthorizationExceptionRule = null as any;
export const getNetworkAccessAuthorizationExceptionRuleOutput: typeof import("./getNetworkAccessAuthorizationExceptionRule").getNetworkAccessAuthorizationExceptionRuleOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkAccessAuthorizationExceptionRule","getNetworkAccessAuthorizationExceptionRuleOutput"], () => require("./getNetworkAccessAuthorizationExceptionRule"));

export { GetNetworkAccessAuthorizationGlobalExceptionRuleArgs, GetNetworkAccessAuthorizationGlobalExceptionRuleResult, GetNetworkAccessAuthorizationGlobalExceptionRuleOutputArgs } from "./getNetworkAccessAuthorizationGlobalExceptionRule";
export const getNetworkAccessAuthorizationGlobalExceptionRule: typeof import("./getNetworkAccessAuthorizationGlobalExceptionRule").getNetworkAccessAuthorizationGlobalExceptionRule = null as any;
export const getNetworkAccessAuthorizationGlobalExceptionRuleOutput: typeof import("./getNetworkAccessAuthorizationGlobalExceptionRule").getNetworkAccessAuthorizationGlobalExceptionRuleOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkAccessAuthorizationGlobalExceptionRule","getNetworkAccessAuthorizationGlobalExceptionRuleOutput"], () => require("./getNetworkAccessAuthorizationGlobalExceptionRule"));

export { GetNetworkAccessAuthorizationRuleArgs, GetNetworkAccessAuthorizationRuleResult, GetNetworkAccessAuthorizationRuleOutputArgs } from "./getNetworkAccessAuthorizationRule";
export const getNetworkAccessAuthorizationRule: typeof import("./getNetworkAccessAuthorizationRule").getNetworkAccessAuthorizationRule = null as any;
export const getNetworkAccessAuthorizationRuleOutput: typeof import("./getNetworkAccessAuthorizationRule").getNetworkAccessAuthorizationRuleOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkAccessAuthorizationRule","getNetworkAccessAuthorizationRuleOutput"], () => require("./getNetworkAccessAuthorizationRule"));

export { GetNetworkAccessConditionArgs, GetNetworkAccessConditionResult, GetNetworkAccessConditionOutputArgs } from "./getNetworkAccessCondition";
export const getNetworkAccessCondition: typeof import("./getNetworkAccessCondition").getNetworkAccessCondition = null as any;
export const getNetworkAccessConditionOutput: typeof import("./getNetworkAccessCondition").getNetworkAccessConditionOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkAccessCondition","getNetworkAccessConditionOutput"], () => require("./getNetworkAccessCondition"));

export { GetNetworkAccessDictionaryArgs, GetNetworkAccessDictionaryResult, GetNetworkAccessDictionaryOutputArgs } from "./getNetworkAccessDictionary";
export const getNetworkAccessDictionary: typeof import("./getNetworkAccessDictionary").getNetworkAccessDictionary = null as any;
export const getNetworkAccessDictionaryOutput: typeof import("./getNetworkAccessDictionary").getNetworkAccessDictionaryOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkAccessDictionary","getNetworkAccessDictionaryOutput"], () => require("./getNetworkAccessDictionary"));

export { GetNetworkAccessPolicySetArgs, GetNetworkAccessPolicySetResult, GetNetworkAccessPolicySetOutputArgs } from "./getNetworkAccessPolicySet";
export const getNetworkAccessPolicySet: typeof import("./getNetworkAccessPolicySet").getNetworkAccessPolicySet = null as any;
export const getNetworkAccessPolicySetOutput: typeof import("./getNetworkAccessPolicySet").getNetworkAccessPolicySetOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkAccessPolicySet","getNetworkAccessPolicySetOutput"], () => require("./getNetworkAccessPolicySet"));

export { GetNetworkAccessTimeAndDateConditionArgs, GetNetworkAccessTimeAndDateConditionResult, GetNetworkAccessTimeAndDateConditionOutputArgs } from "./getNetworkAccessTimeAndDateCondition";
export const getNetworkAccessTimeAndDateCondition: typeof import("./getNetworkAccessTimeAndDateCondition").getNetworkAccessTimeAndDateCondition = null as any;
export const getNetworkAccessTimeAndDateConditionOutput: typeof import("./getNetworkAccessTimeAndDateCondition").getNetworkAccessTimeAndDateConditionOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkAccessTimeAndDateCondition","getNetworkAccessTimeAndDateConditionOutput"], () => require("./getNetworkAccessTimeAndDateCondition"));

export { GetNetworkDeviceArgs, GetNetworkDeviceResult, GetNetworkDeviceOutputArgs } from "./getNetworkDevice";
export const getNetworkDevice: typeof import("./getNetworkDevice").getNetworkDevice = null as any;
export const getNetworkDeviceOutput: typeof import("./getNetworkDevice").getNetworkDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkDevice","getNetworkDeviceOutput"], () => require("./getNetworkDevice"));

export { GetNetworkDeviceGroupArgs, GetNetworkDeviceGroupResult, GetNetworkDeviceGroupOutputArgs } from "./getNetworkDeviceGroup";
export const getNetworkDeviceGroup: typeof import("./getNetworkDeviceGroup").getNetworkDeviceGroup = null as any;
export const getNetworkDeviceGroupOutput: typeof import("./getNetworkDeviceGroup").getNetworkDeviceGroupOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkDeviceGroup","getNetworkDeviceGroupOutput"], () => require("./getNetworkDeviceGroup"));

export { GetRepositoryArgs, GetRepositoryResult, GetRepositoryOutputArgs } from "./getRepository";
export const getRepository: typeof import("./getRepository").getRepository = null as any;
export const getRepositoryOutput: typeof import("./getRepository").getRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getRepository","getRepositoryOutput"], () => require("./getRepository"));

export { GetTacacsCommandSetArgs, GetTacacsCommandSetResult, GetTacacsCommandSetOutputArgs } from "./getTacacsCommandSet";
export const getTacacsCommandSet: typeof import("./getTacacsCommandSet").getTacacsCommandSet = null as any;
export const getTacacsCommandSetOutput: typeof import("./getTacacsCommandSet").getTacacsCommandSetOutput = null as any;
utilities.lazyLoad(exports, ["getTacacsCommandSet","getTacacsCommandSetOutput"], () => require("./getTacacsCommandSet"));

export { GetTacacsProfileArgs, GetTacacsProfileResult, GetTacacsProfileOutputArgs } from "./getTacacsProfile";
export const getTacacsProfile: typeof import("./getTacacsProfile").getTacacsProfile = null as any;
export const getTacacsProfileOutput: typeof import("./getTacacsProfile").getTacacsProfileOutput = null as any;
utilities.lazyLoad(exports, ["getTacacsProfile","getTacacsProfileOutput"], () => require("./getTacacsProfile"));

export { GetTrustsecEgressMatrixCellArgs, GetTrustsecEgressMatrixCellResult, GetTrustsecEgressMatrixCellOutputArgs } from "./getTrustsecEgressMatrixCell";
export const getTrustsecEgressMatrixCell: typeof import("./getTrustsecEgressMatrixCell").getTrustsecEgressMatrixCell = null as any;
export const getTrustsecEgressMatrixCellOutput: typeof import("./getTrustsecEgressMatrixCell").getTrustsecEgressMatrixCellOutput = null as any;
utilities.lazyLoad(exports, ["getTrustsecEgressMatrixCell","getTrustsecEgressMatrixCellOutput"], () => require("./getTrustsecEgressMatrixCell"));

export { GetTrustsecIpToSgtMappingArgs, GetTrustsecIpToSgtMappingResult, GetTrustsecIpToSgtMappingOutputArgs } from "./getTrustsecIpToSgtMapping";
export const getTrustsecIpToSgtMapping: typeof import("./getTrustsecIpToSgtMapping").getTrustsecIpToSgtMapping = null as any;
export const getTrustsecIpToSgtMappingOutput: typeof import("./getTrustsecIpToSgtMapping").getTrustsecIpToSgtMappingOutput = null as any;
utilities.lazyLoad(exports, ["getTrustsecIpToSgtMapping","getTrustsecIpToSgtMappingOutput"], () => require("./getTrustsecIpToSgtMapping"));

export { GetTrustsecIpToSgtMappingGroupArgs, GetTrustsecIpToSgtMappingGroupResult, GetTrustsecIpToSgtMappingGroupOutputArgs } from "./getTrustsecIpToSgtMappingGroup";
export const getTrustsecIpToSgtMappingGroup: typeof import("./getTrustsecIpToSgtMappingGroup").getTrustsecIpToSgtMappingGroup = null as any;
export const getTrustsecIpToSgtMappingGroupOutput: typeof import("./getTrustsecIpToSgtMappingGroup").getTrustsecIpToSgtMappingGroupOutput = null as any;
utilities.lazyLoad(exports, ["getTrustsecIpToSgtMappingGroup","getTrustsecIpToSgtMappingGroupOutput"], () => require("./getTrustsecIpToSgtMappingGroup"));

export { GetTrustsecSecurityGroupArgs, GetTrustsecSecurityGroupResult, GetTrustsecSecurityGroupOutputArgs } from "./getTrustsecSecurityGroup";
export const getTrustsecSecurityGroup: typeof import("./getTrustsecSecurityGroup").getTrustsecSecurityGroup = null as any;
export const getTrustsecSecurityGroupOutput: typeof import("./getTrustsecSecurityGroup").getTrustsecSecurityGroupOutput = null as any;
utilities.lazyLoad(exports, ["getTrustsecSecurityGroup","getTrustsecSecurityGroupOutput"], () => require("./getTrustsecSecurityGroup"));

export { GetTrustsecSecurityGroupAclArgs, GetTrustsecSecurityGroupAclResult, GetTrustsecSecurityGroupAclOutputArgs } from "./getTrustsecSecurityGroupAcl";
export const getTrustsecSecurityGroupAcl: typeof import("./getTrustsecSecurityGroupAcl").getTrustsecSecurityGroupAcl = null as any;
export const getTrustsecSecurityGroupAclOutput: typeof import("./getTrustsecSecurityGroupAcl").getTrustsecSecurityGroupAclOutput = null as any;
utilities.lazyLoad(exports, ["getTrustsecSecurityGroupAcl","getTrustsecSecurityGroupAclOutput"], () => require("./getTrustsecSecurityGroupAcl"));

export { GetUserIdentityGroupArgs, GetUserIdentityGroupResult, GetUserIdentityGroupOutputArgs } from "./getUserIdentityGroup";
export const getUserIdentityGroup: typeof import("./getUserIdentityGroup").getUserIdentityGroup = null as any;
export const getUserIdentityGroupOutput: typeof import("./getUserIdentityGroup").getUserIdentityGroupOutput = null as any;
utilities.lazyLoad(exports, ["getUserIdentityGroup","getUserIdentityGroupOutput"], () => require("./getUserIdentityGroup"));

export { IdentitySourceSequenceArgs, IdentitySourceSequenceState } from "./identitySourceSequence";
export type IdentitySourceSequence = import("./identitySourceSequence").IdentitySourceSequence;
export const IdentitySourceSequence: typeof import("./identitySourceSequence").IdentitySourceSequence = null as any;
utilities.lazyLoad(exports, ["IdentitySourceSequence"], () => require("./identitySourceSequence"));

export { InternalUserArgs, InternalUserState } from "./internalUser";
export type InternalUser = import("./internalUser").InternalUser;
export const InternalUser: typeof import("./internalUser").InternalUser = null as any;
utilities.lazyLoad(exports, ["InternalUser"], () => require("./internalUser"));

export { LicenseTierStateArgs, LicenseTierStateState } from "./licenseTierState";
export type LicenseTierState = import("./licenseTierState").LicenseTierState;
export const LicenseTierState: typeof import("./licenseTierState").LicenseTierState = null as any;
utilities.lazyLoad(exports, ["LicenseTierState"], () => require("./licenseTierState"));

export { NetworkAccessAuthenticationRuleArgs, NetworkAccessAuthenticationRuleState } from "./networkAccessAuthenticationRule";
export type NetworkAccessAuthenticationRule = import("./networkAccessAuthenticationRule").NetworkAccessAuthenticationRule;
export const NetworkAccessAuthenticationRule: typeof import("./networkAccessAuthenticationRule").NetworkAccessAuthenticationRule = null as any;
utilities.lazyLoad(exports, ["NetworkAccessAuthenticationRule"], () => require("./networkAccessAuthenticationRule"));

export { NetworkAccessAuthorizationExceptionRuleArgs, NetworkAccessAuthorizationExceptionRuleState } from "./networkAccessAuthorizationExceptionRule";
export type NetworkAccessAuthorizationExceptionRule = import("./networkAccessAuthorizationExceptionRule").NetworkAccessAuthorizationExceptionRule;
export const NetworkAccessAuthorizationExceptionRule: typeof import("./networkAccessAuthorizationExceptionRule").NetworkAccessAuthorizationExceptionRule = null as any;
utilities.lazyLoad(exports, ["NetworkAccessAuthorizationExceptionRule"], () => require("./networkAccessAuthorizationExceptionRule"));

export { NetworkAccessAuthorizationGlobalExceptionRuleArgs, NetworkAccessAuthorizationGlobalExceptionRuleState } from "./networkAccessAuthorizationGlobalExceptionRule";
export type NetworkAccessAuthorizationGlobalExceptionRule = import("./networkAccessAuthorizationGlobalExceptionRule").NetworkAccessAuthorizationGlobalExceptionRule;
export const NetworkAccessAuthorizationGlobalExceptionRule: typeof import("./networkAccessAuthorizationGlobalExceptionRule").NetworkAccessAuthorizationGlobalExceptionRule = null as any;
utilities.lazyLoad(exports, ["NetworkAccessAuthorizationGlobalExceptionRule"], () => require("./networkAccessAuthorizationGlobalExceptionRule"));

export { NetworkAccessAuthorizationRuleArgs, NetworkAccessAuthorizationRuleState } from "./networkAccessAuthorizationRule";
export type NetworkAccessAuthorizationRule = import("./networkAccessAuthorizationRule").NetworkAccessAuthorizationRule;
export const NetworkAccessAuthorizationRule: typeof import("./networkAccessAuthorizationRule").NetworkAccessAuthorizationRule = null as any;
utilities.lazyLoad(exports, ["NetworkAccessAuthorizationRule"], () => require("./networkAccessAuthorizationRule"));

export { NetworkAccessConditionArgs, NetworkAccessConditionState } from "./networkAccessCondition";
export type NetworkAccessCondition = import("./networkAccessCondition").NetworkAccessCondition;
export const NetworkAccessCondition: typeof import("./networkAccessCondition").NetworkAccessCondition = null as any;
utilities.lazyLoad(exports, ["NetworkAccessCondition"], () => require("./networkAccessCondition"));

export { NetworkAccessDictionaryArgs, NetworkAccessDictionaryState } from "./networkAccessDictionary";
export type NetworkAccessDictionary = import("./networkAccessDictionary").NetworkAccessDictionary;
export const NetworkAccessDictionary: typeof import("./networkAccessDictionary").NetworkAccessDictionary = null as any;
utilities.lazyLoad(exports, ["NetworkAccessDictionary"], () => require("./networkAccessDictionary"));

export { NetworkAccessPolicySetArgs, NetworkAccessPolicySetState } from "./networkAccessPolicySet";
export type NetworkAccessPolicySet = import("./networkAccessPolicySet").NetworkAccessPolicySet;
export const NetworkAccessPolicySet: typeof import("./networkAccessPolicySet").NetworkAccessPolicySet = null as any;
utilities.lazyLoad(exports, ["NetworkAccessPolicySet"], () => require("./networkAccessPolicySet"));

export { NetworkAccessTimeAndDateConditionArgs, NetworkAccessTimeAndDateConditionState } from "./networkAccessTimeAndDateCondition";
export type NetworkAccessTimeAndDateCondition = import("./networkAccessTimeAndDateCondition").NetworkAccessTimeAndDateCondition;
export const NetworkAccessTimeAndDateCondition: typeof import("./networkAccessTimeAndDateCondition").NetworkAccessTimeAndDateCondition = null as any;
utilities.lazyLoad(exports, ["NetworkAccessTimeAndDateCondition"], () => require("./networkAccessTimeAndDateCondition"));

export { NetworkDeviceArgs, NetworkDeviceState } from "./networkDevice";
export type NetworkDevice = import("./networkDevice").NetworkDevice;
export const NetworkDevice: typeof import("./networkDevice").NetworkDevice = null as any;
utilities.lazyLoad(exports, ["NetworkDevice"], () => require("./networkDevice"));

export { NetworkDeviceGroupArgs, NetworkDeviceGroupState } from "./networkDeviceGroup";
export type NetworkDeviceGroup = import("./networkDeviceGroup").NetworkDeviceGroup;
export const NetworkDeviceGroup: typeof import("./networkDeviceGroup").NetworkDeviceGroup = null as any;
utilities.lazyLoad(exports, ["NetworkDeviceGroup"], () => require("./networkDeviceGroup"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RepositoryArgs, RepositoryState } from "./repository";
export type Repository = import("./repository").Repository;
export const Repository: typeof import("./repository").Repository = null as any;
utilities.lazyLoad(exports, ["Repository"], () => require("./repository"));

export { TacacsCommandSetArgs, TacacsCommandSetState } from "./tacacsCommandSet";
export type TacacsCommandSet = import("./tacacsCommandSet").TacacsCommandSet;
export const TacacsCommandSet: typeof import("./tacacsCommandSet").TacacsCommandSet = null as any;
utilities.lazyLoad(exports, ["TacacsCommandSet"], () => require("./tacacsCommandSet"));

export { TacacsProfileArgs, TacacsProfileState } from "./tacacsProfile";
export type TacacsProfile = import("./tacacsProfile").TacacsProfile;
export const TacacsProfile: typeof import("./tacacsProfile").TacacsProfile = null as any;
utilities.lazyLoad(exports, ["TacacsProfile"], () => require("./tacacsProfile"));

export { TrustsecEgressMatrixCellArgs, TrustsecEgressMatrixCellState } from "./trustsecEgressMatrixCell";
export type TrustsecEgressMatrixCell = import("./trustsecEgressMatrixCell").TrustsecEgressMatrixCell;
export const TrustsecEgressMatrixCell: typeof import("./trustsecEgressMatrixCell").TrustsecEgressMatrixCell = null as any;
utilities.lazyLoad(exports, ["TrustsecEgressMatrixCell"], () => require("./trustsecEgressMatrixCell"));

export { TrustsecIpToSgtMappingArgs, TrustsecIpToSgtMappingState } from "./trustsecIpToSgtMapping";
export type TrustsecIpToSgtMapping = import("./trustsecIpToSgtMapping").TrustsecIpToSgtMapping;
export const TrustsecIpToSgtMapping: typeof import("./trustsecIpToSgtMapping").TrustsecIpToSgtMapping = null as any;
utilities.lazyLoad(exports, ["TrustsecIpToSgtMapping"], () => require("./trustsecIpToSgtMapping"));

export { TrustsecIpToSgtMappingGroupArgs, TrustsecIpToSgtMappingGroupState } from "./trustsecIpToSgtMappingGroup";
export type TrustsecIpToSgtMappingGroup = import("./trustsecIpToSgtMappingGroup").TrustsecIpToSgtMappingGroup;
export const TrustsecIpToSgtMappingGroup: typeof import("./trustsecIpToSgtMappingGroup").TrustsecIpToSgtMappingGroup = null as any;
utilities.lazyLoad(exports, ["TrustsecIpToSgtMappingGroup"], () => require("./trustsecIpToSgtMappingGroup"));

export { TrustsecSecurityGroupArgs, TrustsecSecurityGroupState } from "./trustsecSecurityGroup";
export type TrustsecSecurityGroup = import("./trustsecSecurityGroup").TrustsecSecurityGroup;
export const TrustsecSecurityGroup: typeof import("./trustsecSecurityGroup").TrustsecSecurityGroup = null as any;
utilities.lazyLoad(exports, ["TrustsecSecurityGroup"], () => require("./trustsecSecurityGroup"));

export { TrustsecSecurityGroupAclArgs, TrustsecSecurityGroupAclState } from "./trustsecSecurityGroupAcl";
export type TrustsecSecurityGroupAcl = import("./trustsecSecurityGroupAcl").TrustsecSecurityGroupAcl;
export const TrustsecSecurityGroupAcl: typeof import("./trustsecSecurityGroupAcl").TrustsecSecurityGroupAcl = null as any;
utilities.lazyLoad(exports, ["TrustsecSecurityGroupAcl"], () => require("./trustsecSecurityGroupAcl"));

export { UserIdentityGroupArgs, UserIdentityGroupState } from "./userIdentityGroup";
export type UserIdentityGroup = import("./userIdentityGroup").UserIdentityGroup;
export const UserIdentityGroup: typeof import("./userIdentityGroup").UserIdentityGroup = null as any;
utilities.lazyLoad(exports, ["UserIdentityGroup"], () => require("./userIdentityGroup"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "ise:index/activeDirectoryAddGroups:ActiveDirectoryAddGroups":
                return new ActiveDirectoryAddGroups(name, <any>undefined, { urn })
            case "ise:index/activeDirectoryJoinDomainWithAllNodes:ActiveDirectoryJoinDomainWithAllNodes":
                return new ActiveDirectoryJoinDomainWithAllNodes(name, <any>undefined, { urn })
            case "ise:index/activeDirectoryJoinPoint:ActiveDirectoryJoinPoint":
                return new ActiveDirectoryJoinPoint(name, <any>undefined, { urn })
            case "ise:index/allowedProtocols:AllowedProtocols":
                return new AllowedProtocols(name, <any>undefined, { urn })
            case "ise:index/allowedProtocolsTacacs:AllowedProtocolsTacacs":
                return new AllowedProtocolsTacacs(name, <any>undefined, { urn })
            case "ise:index/authorizationProfile:AuthorizationProfile":
                return new AuthorizationProfile(name, <any>undefined, { urn })
            case "ise:index/certificateAuthenticationProfile:CertificateAuthenticationProfile":
                return new CertificateAuthenticationProfile(name, <any>undefined, { urn })
            case "ise:index/deviceAdminAuthenticationRule:DeviceAdminAuthenticationRule":
                return new DeviceAdminAuthenticationRule(name, <any>undefined, { urn })
            case "ise:index/deviceAdminAuthorizationExceptionRule:DeviceAdminAuthorizationExceptionRule":
                return new DeviceAdminAuthorizationExceptionRule(name, <any>undefined, { urn })
            case "ise:index/deviceAdminAuthorizationGlobalExceptionRule:DeviceAdminAuthorizationGlobalExceptionRule":
                return new DeviceAdminAuthorizationGlobalExceptionRule(name, <any>undefined, { urn })
            case "ise:index/deviceAdminAuthorizationRule:DeviceAdminAuthorizationRule":
                return new DeviceAdminAuthorizationRule(name, <any>undefined, { urn })
            case "ise:index/deviceAdminCondition:DeviceAdminCondition":
                return new DeviceAdminCondition(name, <any>undefined, { urn })
            case "ise:index/deviceAdminPolicySet:DeviceAdminPolicySet":
                return new DeviceAdminPolicySet(name, <any>undefined, { urn })
            case "ise:index/deviceAdminTimeAndDateCondition:DeviceAdminTimeAndDateCondition":
                return new DeviceAdminTimeAndDateCondition(name, <any>undefined, { urn })
            case "ise:index/downloadableAcl:DownloadableAcl":
                return new DownloadableAcl(name, <any>undefined, { urn })
            case "ise:index/endpoint:Endpoint":
                return new Endpoint(name, <any>undefined, { urn })
            case "ise:index/endpointIdentityGroup:EndpointIdentityGroup":
                return new EndpointIdentityGroup(name, <any>undefined, { urn })
            case "ise:index/identitySourceSequence:IdentitySourceSequence":
                return new IdentitySourceSequence(name, <any>undefined, { urn })
            case "ise:index/internalUser:InternalUser":
                return new InternalUser(name, <any>undefined, { urn })
            case "ise:index/licenseTierState:LicenseTierState":
                return new LicenseTierState(name, <any>undefined, { urn })
            case "ise:index/networkAccessAuthenticationRule:NetworkAccessAuthenticationRule":
                return new NetworkAccessAuthenticationRule(name, <any>undefined, { urn })
            case "ise:index/networkAccessAuthorizationExceptionRule:NetworkAccessAuthorizationExceptionRule":
                return new NetworkAccessAuthorizationExceptionRule(name, <any>undefined, { urn })
            case "ise:index/networkAccessAuthorizationGlobalExceptionRule:NetworkAccessAuthorizationGlobalExceptionRule":
                return new NetworkAccessAuthorizationGlobalExceptionRule(name, <any>undefined, { urn })
            case "ise:index/networkAccessAuthorizationRule:NetworkAccessAuthorizationRule":
                return new NetworkAccessAuthorizationRule(name, <any>undefined, { urn })
            case "ise:index/networkAccessCondition:NetworkAccessCondition":
                return new NetworkAccessCondition(name, <any>undefined, { urn })
            case "ise:index/networkAccessDictionary:NetworkAccessDictionary":
                return new NetworkAccessDictionary(name, <any>undefined, { urn })
            case "ise:index/networkAccessPolicySet:NetworkAccessPolicySet":
                return new NetworkAccessPolicySet(name, <any>undefined, { urn })
            case "ise:index/networkAccessTimeAndDateCondition:NetworkAccessTimeAndDateCondition":
                return new NetworkAccessTimeAndDateCondition(name, <any>undefined, { urn })
            case "ise:index/networkDevice:NetworkDevice":
                return new NetworkDevice(name, <any>undefined, { urn })
            case "ise:index/networkDeviceGroup:NetworkDeviceGroup":
                return new NetworkDeviceGroup(name, <any>undefined, { urn })
            case "ise:index/repository:Repository":
                return new Repository(name, <any>undefined, { urn })
            case "ise:index/tacacsCommandSet:TacacsCommandSet":
                return new TacacsCommandSet(name, <any>undefined, { urn })
            case "ise:index/tacacsProfile:TacacsProfile":
                return new TacacsProfile(name, <any>undefined, { urn })
            case "ise:index/trustsecEgressMatrixCell:TrustsecEgressMatrixCell":
                return new TrustsecEgressMatrixCell(name, <any>undefined, { urn })
            case "ise:index/trustsecIpToSgtMapping:TrustsecIpToSgtMapping":
                return new TrustsecIpToSgtMapping(name, <any>undefined, { urn })
            case "ise:index/trustsecIpToSgtMappingGroup:TrustsecIpToSgtMappingGroup":
                return new TrustsecIpToSgtMappingGroup(name, <any>undefined, { urn })
            case "ise:index/trustsecSecurityGroup:TrustsecSecurityGroup":
                return new TrustsecSecurityGroup(name, <any>undefined, { urn })
            case "ise:index/trustsecSecurityGroupAcl:TrustsecSecurityGroupAcl":
                return new TrustsecSecurityGroupAcl(name, <any>undefined, { urn })
            case "ise:index/userIdentityGroup:UserIdentityGroup":
                return new UserIdentityGroup(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("ise", "index/activeDirectoryAddGroups", _module)
pulumi.runtime.registerResourceModule("ise", "index/activeDirectoryJoinDomainWithAllNodes", _module)
pulumi.runtime.registerResourceModule("ise", "index/activeDirectoryJoinPoint", _module)
pulumi.runtime.registerResourceModule("ise", "index/allowedProtocols", _module)
pulumi.runtime.registerResourceModule("ise", "index/allowedProtocolsTacacs", _module)
pulumi.runtime.registerResourceModule("ise", "index/authorizationProfile", _module)
pulumi.runtime.registerResourceModule("ise", "index/certificateAuthenticationProfile", _module)
pulumi.runtime.registerResourceModule("ise", "index/deviceAdminAuthenticationRule", _module)
pulumi.runtime.registerResourceModule("ise", "index/deviceAdminAuthorizationExceptionRule", _module)
pulumi.runtime.registerResourceModule("ise", "index/deviceAdminAuthorizationGlobalExceptionRule", _module)
pulumi.runtime.registerResourceModule("ise", "index/deviceAdminAuthorizationRule", _module)
pulumi.runtime.registerResourceModule("ise", "index/deviceAdminCondition", _module)
pulumi.runtime.registerResourceModule("ise", "index/deviceAdminPolicySet", _module)
pulumi.runtime.registerResourceModule("ise", "index/deviceAdminTimeAndDateCondition", _module)
pulumi.runtime.registerResourceModule("ise", "index/downloadableAcl", _module)
pulumi.runtime.registerResourceModule("ise", "index/endpoint", _module)
pulumi.runtime.registerResourceModule("ise", "index/endpointIdentityGroup", _module)
pulumi.runtime.registerResourceModule("ise", "index/identitySourceSequence", _module)
pulumi.runtime.registerResourceModule("ise", "index/internalUser", _module)
pulumi.runtime.registerResourceModule("ise", "index/licenseTierState", _module)
pulumi.runtime.registerResourceModule("ise", "index/networkAccessAuthenticationRule", _module)
pulumi.runtime.registerResourceModule("ise", "index/networkAccessAuthorizationExceptionRule", _module)
pulumi.runtime.registerResourceModule("ise", "index/networkAccessAuthorizationGlobalExceptionRule", _module)
pulumi.runtime.registerResourceModule("ise", "index/networkAccessAuthorizationRule", _module)
pulumi.runtime.registerResourceModule("ise", "index/networkAccessCondition", _module)
pulumi.runtime.registerResourceModule("ise", "index/networkAccessDictionary", _module)
pulumi.runtime.registerResourceModule("ise", "index/networkAccessPolicySet", _module)
pulumi.runtime.registerResourceModule("ise", "index/networkAccessTimeAndDateCondition", _module)
pulumi.runtime.registerResourceModule("ise", "index/networkDevice", _module)
pulumi.runtime.registerResourceModule("ise", "index/networkDeviceGroup", _module)
pulumi.runtime.registerResourceModule("ise", "index/repository", _module)
pulumi.runtime.registerResourceModule("ise", "index/tacacsCommandSet", _module)
pulumi.runtime.registerResourceModule("ise", "index/tacacsProfile", _module)
pulumi.runtime.registerResourceModule("ise", "index/trustsecEgressMatrixCell", _module)
pulumi.runtime.registerResourceModule("ise", "index/trustsecIpToSgtMapping", _module)
pulumi.runtime.registerResourceModule("ise", "index/trustsecIpToSgtMappingGroup", _module)
pulumi.runtime.registerResourceModule("ise", "index/trustsecSecurityGroup", _module)
pulumi.runtime.registerResourceModule("ise", "index/trustsecSecurityGroupAcl", _module)
pulumi.runtime.registerResourceModule("ise", "index/userIdentityGroup", _module)
pulumi.runtime.registerResourcePackage("ise", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:ise") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
