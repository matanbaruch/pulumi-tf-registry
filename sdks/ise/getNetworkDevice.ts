// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getNetworkDevice(args?: GetNetworkDeviceArgs, opts?: pulumi.InvokeOptions): Promise<GetNetworkDeviceResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("ise:index/getNetworkDevice:getNetworkDevice", {
        "id": args.id,
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNetworkDevice.
 */
export interface GetNetworkDeviceArgs {
    id?: string;
    name?: string;
}

/**
 * A collection of values returned by getNetworkDevice.
 */
export interface GetNetworkDeviceResult {
    readonly authenticationDtlsRequired: boolean;
    readonly authenticationEnableKeyWrap: boolean;
    readonly authenticationEnableMultiSecret: boolean;
    readonly authenticationEncryptionKey: string;
    readonly authenticationEncryptionKeyFormat: string;
    readonly authenticationMessageAuthenticatorCodeKey: string;
    readonly authenticationNetworkProtocol: string;
    readonly authenticationRadiusSharedSecret: string;
    readonly authenticationSecondRadiusSharedSecret: string;
    readonly coaPort: number;
    readonly description: string;
    readonly dtlsDnsName: string;
    readonly id: string;
    readonly ips: outputs.GetNetworkDeviceIp[];
    readonly modelName: string;
    readonly name: string;
    readonly networkDeviceGroups: string[];
    readonly profileName: string;
    readonly snmpLinkTrapQuery: boolean;
    readonly snmpMacTrapQuery: boolean;
    readonly snmpOriginatingPolicyServiceNode: string;
    readonly snmpPollingInterval: number;
    readonly snmpRoCommunity: string;
    readonly snmpVersion: string;
    readonly softwareVersion: string;
    readonly tacacsConnectModeOptions: string;
    readonly tacacsSharedSecret: string;
    readonly trustsecCoaSourceHost: string;
    readonly trustsecDeviceId: string;
    readonly trustsecDevicePassword: string;
    readonly trustsecDownloadEnviromentDataEveryXSeconds: number;
    readonly trustsecDownloadPeerAuthorizationPolicyEveryXSeconds: number;
    readonly trustsecDownloadSgaclListsEveryXSeconds: number;
    readonly trustsecEnableModePassword: string;
    readonly trustsecExecModePassword: string;
    readonly trustsecExecModeUsername: string;
    readonly trustsecIncludeWhenDeployingSgtUpdates: boolean;
    readonly trustsecOtherSgaDevicesToTrustThisDevice: boolean;
    readonly trustsecReAuthenticationEveryXSeconds: number;
    readonly trustsecRestApiPassword: string;
    readonly trustsecRestApiUsername: string;
    readonly trustsecSendConfigurationToDevice: boolean;
    readonly trustsecSendConfigurationToDeviceUsing: string;
}
export function getNetworkDeviceOutput(args?: GetNetworkDeviceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNetworkDeviceResult> {
    return pulumi.output(args).apply((a: any) => getNetworkDevice(a, opts))
}

/**
 * A collection of arguments for invoking getNetworkDevice.
 */
export interface GetNetworkDeviceOutputArgs {
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}
