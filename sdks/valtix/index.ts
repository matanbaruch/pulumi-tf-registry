// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AddressObjectArgs, AddressObjectState } from "./addressObject";
export type AddressObject = import("./addressObject").AddressObject;
export const AddressObject: typeof import("./addressObject").AddressObject = null as any;
utilities.lazyLoad(exports, ["AddressObject"], () => require("./addressObject"));

export { AlertProfileArgs, AlertProfileState } from "./alertProfile";
export type AlertProfile = import("./alertProfile").AlertProfile;
export const AlertProfile: typeof import("./alertProfile").AlertProfile = null as any;
utilities.lazyLoad(exports, ["AlertProfile"], () => require("./alertProfile"));

export { AlertRuleArgs, AlertRuleState } from "./alertRule";
export type AlertRule = import("./alertRule").AlertRule;
export const AlertRule: typeof import("./alertRule").AlertRule = null as any;
utilities.lazyLoad(exports, ["AlertRule"], () => require("./alertRule"));

export { CertificateArgs, CertificateState } from "./certificate";
export type Certificate = import("./certificate").Certificate;
export const Certificate: typeof import("./certificate").Certificate = null as any;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));

export { CloudAccountArgs, CloudAccountState } from "./cloudAccount";
export type CloudAccount = import("./cloudAccount").CloudAccount;
export const CloudAccount: typeof import("./cloudAccount").CloudAccount = null as any;
utilities.lazyLoad(exports, ["CloudAccount"], () => require("./cloudAccount"));

export { CloudAccountLogProfileAssociationArgs, CloudAccountLogProfileAssociationState } from "./cloudAccountLogProfileAssociation";
export type CloudAccountLogProfileAssociation = import("./cloudAccountLogProfileAssociation").CloudAccountLogProfileAssociation;
export const CloudAccountLogProfileAssociation: typeof import("./cloudAccountLogProfileAssociation").CloudAccountLogProfileAssociation = null as any;
utilities.lazyLoad(exports, ["CloudAccountLogProfileAssociation"], () => require("./cloudAccountLogProfileAssociation"));

export { ExternalIdArgs, ExternalIdState } from "./externalId";
export type ExternalId = import("./externalId").ExternalId;
export const ExternalId: typeof import("./externalId").ExternalId = null as any;
utilities.lazyLoad(exports, ["ExternalId"], () => require("./externalId"));

export { GatewayArgs, GatewayState } from "./gateway";
export type Gateway = import("./gateway").Gateway;
export const Gateway: typeof import("./gateway").Gateway = null as any;
utilities.lazyLoad(exports, ["Gateway"], () => require("./gateway"));

export { GetAddressObjectArgs, GetAddressObjectResult, GetAddressObjectOutputArgs } from "./getAddressObject";
export const getAddressObject: typeof import("./getAddressObject").getAddressObject = null as any;
export const getAddressObjectOutput: typeof import("./getAddressObject").getAddressObjectOutput = null as any;
utilities.lazyLoad(exports, ["getAddressObject","getAddressObjectOutput"], () => require("./getAddressObject"));

export { GetAlertProfileArgs, GetAlertProfileResult, GetAlertProfileOutputArgs } from "./getAlertProfile";
export const getAlertProfile: typeof import("./getAlertProfile").getAlertProfile = null as any;
export const getAlertProfileOutput: typeof import("./getAlertProfile").getAlertProfileOutput = null as any;
utilities.lazyLoad(exports, ["getAlertProfile","getAlertProfileOutput"], () => require("./getAlertProfile"));

export { GetAlertRuleArgs, GetAlertRuleResult, GetAlertRuleOutputArgs } from "./getAlertRule";
export const getAlertRule: typeof import("./getAlertRule").getAlertRule = null as any;
export const getAlertRuleOutput: typeof import("./getAlertRule").getAlertRuleOutput = null as any;
utilities.lazyLoad(exports, ["getAlertRule","getAlertRuleOutput"], () => require("./getAlertRule"));

export { GetCertificateArgs, GetCertificateResult, GetCertificateOutputArgs } from "./getCertificate";
export const getCertificate: typeof import("./getCertificate").getCertificate = null as any;
export const getCertificateOutput: typeof import("./getCertificate").getCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getCertificate","getCertificateOutput"], () => require("./getCertificate"));

export { GetCloudAccountArgs, GetCloudAccountResult, GetCloudAccountOutputArgs } from "./getCloudAccount";
export const getCloudAccount: typeof import("./getCloudAccount").getCloudAccount = null as any;
export const getCloudAccountOutput: typeof import("./getCloudAccount").getCloudAccountOutput = null as any;
utilities.lazyLoad(exports, ["getCloudAccount","getCloudAccountOutput"], () => require("./getCloudAccount"));

export { GetGatewayArgs, GetGatewayResult, GetGatewayOutputArgs } from "./getGateway";
export const getGateway: typeof import("./getGateway").getGateway = null as any;
export const getGatewayOutput: typeof import("./getGateway").getGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getGateway","getGatewayOutput"], () => require("./getGateway"));

export { GetPolicyRuleSetArgs, GetPolicyRuleSetResult, GetPolicyRuleSetOutputArgs } from "./getPolicyRuleSet";
export const getPolicyRuleSet: typeof import("./getPolicyRuleSet").getPolicyRuleSet = null as any;
export const getPolicyRuleSetOutput: typeof import("./getPolicyRuleSet").getPolicyRuleSetOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyRuleSet","getPolicyRuleSetOutput"], () => require("./getPolicyRuleSet"));

export { GetProfileAntiMalwareArgs, GetProfileAntiMalwareResult, GetProfileAntiMalwareOutputArgs } from "./getProfileAntiMalware";
export const getProfileAntiMalware: typeof import("./getProfileAntiMalware").getProfileAntiMalware = null as any;
export const getProfileAntiMalwareOutput: typeof import("./getProfileAntiMalware").getProfileAntiMalwareOutput = null as any;
utilities.lazyLoad(exports, ["getProfileAntiMalware","getProfileAntiMalwareOutput"], () => require("./getProfileAntiMalware"));

export { GetProfileApplicationThreatArgs, GetProfileApplicationThreatResult, GetProfileApplicationThreatOutputArgs } from "./getProfileApplicationThreat";
export const getProfileApplicationThreat: typeof import("./getProfileApplicationThreat").getProfileApplicationThreat = null as any;
export const getProfileApplicationThreatOutput: typeof import("./getProfileApplicationThreat").getProfileApplicationThreatOutput = null as any;
utilities.lazyLoad(exports, ["getProfileApplicationThreat","getProfileApplicationThreatOutput"], () => require("./getProfileApplicationThreat"));

export { GetProfileDecryptionArgs, GetProfileDecryptionResult, GetProfileDecryptionOutputArgs } from "./getProfileDecryption";
export const getProfileDecryption: typeof import("./getProfileDecryption").getProfileDecryption = null as any;
export const getProfileDecryptionOutput: typeof import("./getProfileDecryption").getProfileDecryptionOutput = null as any;
utilities.lazyLoad(exports, ["getProfileDecryption","getProfileDecryptionOutput"], () => require("./getProfileDecryption"));

export { GetProfileDiagnosticsArgs, GetProfileDiagnosticsResult, GetProfileDiagnosticsOutputArgs } from "./getProfileDiagnostics";
export const getProfileDiagnostics: typeof import("./getProfileDiagnostics").getProfileDiagnostics = null as any;
export const getProfileDiagnosticsOutput: typeof import("./getProfileDiagnostics").getProfileDiagnosticsOutput = null as any;
utilities.lazyLoad(exports, ["getProfileDiagnostics","getProfileDiagnosticsOutput"], () => require("./getProfileDiagnostics"));

export { GetProfileDlpArgs, GetProfileDlpResult, GetProfileDlpOutputArgs } from "./getProfileDlp";
export const getProfileDlp: typeof import("./getProfileDlp").getProfileDlp = null as any;
export const getProfileDlpOutput: typeof import("./getProfileDlp").getProfileDlpOutput = null as any;
utilities.lazyLoad(exports, ["getProfileDlp","getProfileDlpOutput"], () => require("./getProfileDlp"));

export { GetProfileDnsArgs, GetProfileDnsResult, GetProfileDnsOutputArgs } from "./getProfileDns";
export const getProfileDns: typeof import("./getProfileDns").getProfileDns = null as any;
export const getProfileDnsOutput: typeof import("./getProfileDns").getProfileDnsOutput = null as any;
utilities.lazyLoad(exports, ["getProfileDns","getProfileDnsOutput"], () => require("./getProfileDns"));

export { GetProfileFqdnArgs, GetProfileFqdnResult, GetProfileFqdnOutputArgs } from "./getProfileFqdn";
export const getProfileFqdn: typeof import("./getProfileFqdn").getProfileFqdn = null as any;
export const getProfileFqdnOutput: typeof import("./getProfileFqdn").getProfileFqdnOutput = null as any;
utilities.lazyLoad(exports, ["getProfileFqdn","getProfileFqdnOutput"], () => require("./getProfileFqdn"));

export { GetProfileL7dosArgs, GetProfileL7dosResult, GetProfileL7dosOutputArgs } from "./getProfileL7dos";
export const getProfileL7dos: typeof import("./getProfileL7dos").getProfileL7dos = null as any;
export const getProfileL7dosOutput: typeof import("./getProfileL7dos").getProfileL7dosOutput = null as any;
utilities.lazyLoad(exports, ["getProfileL7dos","getProfileL7dosOutput"], () => require("./getProfileL7dos"));

export { GetProfileLogForwardingArgs, GetProfileLogForwardingResult, GetProfileLogForwardingOutputArgs } from "./getProfileLogForwarding";
export const getProfileLogForwarding: typeof import("./getProfileLogForwarding").getProfileLogForwarding = null as any;
export const getProfileLogForwardingOutput: typeof import("./getProfileLogForwarding").getProfileLogForwardingOutput = null as any;
utilities.lazyLoad(exports, ["getProfileLogForwarding","getProfileLogForwardingOutput"], () => require("./getProfileLogForwarding"));

export { GetProfileMaliciousIpArgs, GetProfileMaliciousIpResult, GetProfileMaliciousIpOutputArgs } from "./getProfileMaliciousIp";
export const getProfileMaliciousIp: typeof import("./getProfileMaliciousIp").getProfileMaliciousIp = null as any;
export const getProfileMaliciousIpOutput: typeof import("./getProfileMaliciousIp").getProfileMaliciousIpOutput = null as any;
utilities.lazyLoad(exports, ["getProfileMaliciousIp","getProfileMaliciousIpOutput"], () => require("./getProfileMaliciousIp"));

export { GetProfileMetricsForwardingArgs, GetProfileMetricsForwardingResult, GetProfileMetricsForwardingOutputArgs } from "./getProfileMetricsForwarding";
export const getProfileMetricsForwarding: typeof import("./getProfileMetricsForwarding").getProfileMetricsForwarding = null as any;
export const getProfileMetricsForwardingOutput: typeof import("./getProfileMetricsForwarding").getProfileMetricsForwardingOutput = null as any;
utilities.lazyLoad(exports, ["getProfileMetricsForwarding","getProfileMetricsForwardingOutput"], () => require("./getProfileMetricsForwarding"));

export { GetProfileNetworkIntrusionArgs, GetProfileNetworkIntrusionResult, GetProfileNetworkIntrusionOutputArgs } from "./getProfileNetworkIntrusion";
export const getProfileNetworkIntrusion: typeof import("./getProfileNetworkIntrusion").getProfileNetworkIntrusion = null as any;
export const getProfileNetworkIntrusionOutput: typeof import("./getProfileNetworkIntrusion").getProfileNetworkIntrusionOutput = null as any;
utilities.lazyLoad(exports, ["getProfileNetworkIntrusion","getProfileNetworkIntrusionOutput"], () => require("./getProfileNetworkIntrusion"));

export { GetProfileNtpArgs, GetProfileNtpResult, GetProfileNtpOutputArgs } from "./getProfileNtp";
export const getProfileNtp: typeof import("./getProfileNtp").getProfileNtp = null as any;
export const getProfileNtpOutput: typeof import("./getProfileNtp").getProfileNtpOutput = null as any;
utilities.lazyLoad(exports, ["getProfileNtp","getProfileNtpOutput"], () => require("./getProfileNtp"));

export { GetProfilePacketCaptureArgs, GetProfilePacketCaptureResult, GetProfilePacketCaptureOutputArgs } from "./getProfilePacketCapture";
export const getProfilePacketCapture: typeof import("./getProfilePacketCapture").getProfilePacketCapture = null as any;
export const getProfilePacketCaptureOutput: typeof import("./getProfilePacketCapture").getProfilePacketCaptureOutput = null as any;
utilities.lazyLoad(exports, ["getProfilePacketCapture","getProfilePacketCaptureOutput"], () => require("./getProfilePacketCapture"));

export { GetProfileUrlfilterArgs, GetProfileUrlfilterResult, GetProfileUrlfilterOutputArgs } from "./getProfileUrlfilter";
export const getProfileUrlfilter: typeof import("./getProfileUrlfilter").getProfileUrlfilter = null as any;
export const getProfileUrlfilterOutput: typeof import("./getProfileUrlfilter").getProfileUrlfilterOutput = null as any;
utilities.lazyLoad(exports, ["getProfileUrlfilter","getProfileUrlfilterOutput"], () => require("./getProfileUrlfilter"));

export { GetServiceObjectArgs, GetServiceObjectResult, GetServiceObjectOutputArgs } from "./getServiceObject";
export const getServiceObject: typeof import("./getServiceObject").getServiceObject = null as any;
export const getServiceObjectOutput: typeof import("./getServiceObject").getServiceObjectOutput = null as any;
utilities.lazyLoad(exports, ["getServiceObject","getServiceObjectOutput"], () => require("./getServiceObject"));

export { GetServiceVpcArgs, GetServiceVpcResult, GetServiceVpcOutputArgs } from "./getServiceVpc";
export const getServiceVpc: typeof import("./getServiceVpc").getServiceVpc = null as any;
export const getServiceVpcOutput: typeof import("./getServiceVpc").getServiceVpcOutput = null as any;
utilities.lazyLoad(exports, ["getServiceVpc","getServiceVpcOutput"], () => require("./getServiceVpc"));

export { GetUserIdentityArgs, GetUserIdentityResult, GetUserIdentityOutputArgs } from "./getUserIdentity";
export const getUserIdentity: typeof import("./getUserIdentity").getUserIdentity = null as any;
export const getUserIdentityOutput: typeof import("./getUserIdentity").getUserIdentityOutput = null as any;
utilities.lazyLoad(exports, ["getUserIdentity","getUserIdentityOutput"], () => require("./getUserIdentity"));

export { PolicyRuleSetArgs, PolicyRuleSetState } from "./policyRuleSet";
export type PolicyRuleSet = import("./policyRuleSet").PolicyRuleSet;
export const PolicyRuleSet: typeof import("./policyRuleSet").PolicyRuleSet = null as any;
utilities.lazyLoad(exports, ["PolicyRuleSet"], () => require("./policyRuleSet"));

export { PolicyRulesArgs, PolicyRulesState } from "./policyRules";
export type PolicyRules = import("./policyRules").PolicyRules;
export const PolicyRules: typeof import("./policyRules").PolicyRules = null as any;
utilities.lazyLoad(exports, ["PolicyRules"], () => require("./policyRules"));

export { ProfileAntiMalwareArgs, ProfileAntiMalwareState } from "./profileAntiMalware";
export type ProfileAntiMalware = import("./profileAntiMalware").ProfileAntiMalware;
export const ProfileAntiMalware: typeof import("./profileAntiMalware").ProfileAntiMalware = null as any;
utilities.lazyLoad(exports, ["ProfileAntiMalware"], () => require("./profileAntiMalware"));

export { ProfileAntiVirusArgs, ProfileAntiVirusState } from "./profileAntiVirus";
export type ProfileAntiVirus = import("./profileAntiVirus").ProfileAntiVirus;
export const ProfileAntiVirus: typeof import("./profileAntiVirus").ProfileAntiVirus = null as any;
utilities.lazyLoad(exports, ["ProfileAntiVirus"], () => require("./profileAntiVirus"));

export { ProfileApplicationThreatArgs, ProfileApplicationThreatState } from "./profileApplicationThreat";
export type ProfileApplicationThreat = import("./profileApplicationThreat").ProfileApplicationThreat;
export const ProfileApplicationThreat: typeof import("./profileApplicationThreat").ProfileApplicationThreat = null as any;
utilities.lazyLoad(exports, ["ProfileApplicationThreat"], () => require("./profileApplicationThreat"));

export { ProfileDecryptionArgs, ProfileDecryptionState } from "./profileDecryption";
export type ProfileDecryption = import("./profileDecryption").ProfileDecryption;
export const ProfileDecryption: typeof import("./profileDecryption").ProfileDecryption = null as any;
utilities.lazyLoad(exports, ["ProfileDecryption"], () => require("./profileDecryption"));

export { ProfileDiagnosticsArgs, ProfileDiagnosticsState } from "./profileDiagnostics";
export type ProfileDiagnostics = import("./profileDiagnostics").ProfileDiagnostics;
export const ProfileDiagnostics: typeof import("./profileDiagnostics").ProfileDiagnostics = null as any;
utilities.lazyLoad(exports, ["ProfileDiagnostics"], () => require("./profileDiagnostics"));

export { ProfileDlpArgs, ProfileDlpState } from "./profileDlp";
export type ProfileDlp = import("./profileDlp").ProfileDlp;
export const ProfileDlp: typeof import("./profileDlp").ProfileDlp = null as any;
utilities.lazyLoad(exports, ["ProfileDlp"], () => require("./profileDlp"));

export { ProfileDnsArgs, ProfileDnsState } from "./profileDns";
export type ProfileDns = import("./profileDns").ProfileDns;
export const ProfileDns: typeof import("./profileDns").ProfileDns = null as any;
utilities.lazyLoad(exports, ["ProfileDns"], () => require("./profileDns"));

export { ProfileFqdnArgs, ProfileFqdnState } from "./profileFqdn";
export type ProfileFqdn = import("./profileFqdn").ProfileFqdn;
export const ProfileFqdn: typeof import("./profileFqdn").ProfileFqdn = null as any;
utilities.lazyLoad(exports, ["ProfileFqdn"], () => require("./profileFqdn"));

export { ProfileL7dosArgs, ProfileL7dosState } from "./profileL7dos";
export type ProfileL7dos = import("./profileL7dos").ProfileL7dos;
export const ProfileL7dos: typeof import("./profileL7dos").ProfileL7dos = null as any;
utilities.lazyLoad(exports, ["ProfileL7dos"], () => require("./profileL7dos"));

export { ProfileLogForwardingArgs, ProfileLogForwardingState } from "./profileLogForwarding";
export type ProfileLogForwarding = import("./profileLogForwarding").ProfileLogForwarding;
export const ProfileLogForwarding: typeof import("./profileLogForwarding").ProfileLogForwarding = null as any;
utilities.lazyLoad(exports, ["ProfileLogForwarding"], () => require("./profileLogForwarding"));

export { ProfileMaliciousIpArgs, ProfileMaliciousIpState } from "./profileMaliciousIp";
export type ProfileMaliciousIp = import("./profileMaliciousIp").ProfileMaliciousIp;
export const ProfileMaliciousIp: typeof import("./profileMaliciousIp").ProfileMaliciousIp = null as any;
utilities.lazyLoad(exports, ["ProfileMaliciousIp"], () => require("./profileMaliciousIp"));

export { ProfileMaliciousSourceArgs, ProfileMaliciousSourceState } from "./profileMaliciousSource";
export type ProfileMaliciousSource = import("./profileMaliciousSource").ProfileMaliciousSource;
export const ProfileMaliciousSource: typeof import("./profileMaliciousSource").ProfileMaliciousSource = null as any;
utilities.lazyLoad(exports, ["ProfileMaliciousSource"], () => require("./profileMaliciousSource"));

export { ProfileMetricsForwardingArgs, ProfileMetricsForwardingState } from "./profileMetricsForwarding";
export type ProfileMetricsForwarding = import("./profileMetricsForwarding").ProfileMetricsForwarding;
export const ProfileMetricsForwarding: typeof import("./profileMetricsForwarding").ProfileMetricsForwarding = null as any;
utilities.lazyLoad(exports, ["ProfileMetricsForwarding"], () => require("./profileMetricsForwarding"));

export { ProfileNetworkIntrusionArgs, ProfileNetworkIntrusionState } from "./profileNetworkIntrusion";
export type ProfileNetworkIntrusion = import("./profileNetworkIntrusion").ProfileNetworkIntrusion;
export const ProfileNetworkIntrusion: typeof import("./profileNetworkIntrusion").ProfileNetworkIntrusion = null as any;
utilities.lazyLoad(exports, ["ProfileNetworkIntrusion"], () => require("./profileNetworkIntrusion"));

export { ProfileNtpArgs, ProfileNtpState } from "./profileNtp";
export type ProfileNtp = import("./profileNtp").ProfileNtp;
export const ProfileNtp: typeof import("./profileNtp").ProfileNtp = null as any;
utilities.lazyLoad(exports, ["ProfileNtp"], () => require("./profileNtp"));

export { ProfilePacketCaptureArgs, ProfilePacketCaptureState } from "./profilePacketCapture";
export type ProfilePacketCapture = import("./profilePacketCapture").ProfilePacketCapture;
export const ProfilePacketCapture: typeof import("./profilePacketCapture").ProfilePacketCapture = null as any;
utilities.lazyLoad(exports, ["ProfilePacketCapture"], () => require("./profilePacketCapture"));

export { ProfileUrlfilterArgs, ProfileUrlfilterState } from "./profileUrlfilter";
export type ProfileUrlfilter = import("./profileUrlfilter").ProfileUrlfilter;
export const ProfileUrlfilter: typeof import("./profileUrlfilter").ProfileUrlfilter = null as any;
utilities.lazyLoad(exports, ["ProfileUrlfilter"], () => require("./profileUrlfilter"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ServiceObjectArgs, ServiceObjectState } from "./serviceObject";
export type ServiceObject = import("./serviceObject").ServiceObject;
export const ServiceObject: typeof import("./serviceObject").ServiceObject = null as any;
utilities.lazyLoad(exports, ["ServiceObject"], () => require("./serviceObject"));

export { ServiceVpcArgs, ServiceVpcState } from "./serviceVpc";
export type ServiceVpc = import("./serviceVpc").ServiceVpc;
export const ServiceVpc: typeof import("./serviceVpc").ServiceVpc = null as any;
utilities.lazyLoad(exports, ["ServiceVpc"], () => require("./serviceVpc"));

export { SpokeVpcArgs, SpokeVpcState } from "./spokeVpc";
export type SpokeVpc = import("./spokeVpc").SpokeVpc;
export const SpokeVpc: typeof import("./spokeVpc").SpokeVpc = null as any;
utilities.lazyLoad(exports, ["SpokeVpc"], () => require("./spokeVpc"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "valtix:index/addressObject:AddressObject":
                return new AddressObject(name, <any>undefined, { urn })
            case "valtix:index/alertProfile:AlertProfile":
                return new AlertProfile(name, <any>undefined, { urn })
            case "valtix:index/alertRule:AlertRule":
                return new AlertRule(name, <any>undefined, { urn })
            case "valtix:index/certificate:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "valtix:index/cloudAccount:CloudAccount":
                return new CloudAccount(name, <any>undefined, { urn })
            case "valtix:index/cloudAccountLogProfileAssociation:CloudAccountLogProfileAssociation":
                return new CloudAccountLogProfileAssociation(name, <any>undefined, { urn })
            case "valtix:index/externalId:ExternalId":
                return new ExternalId(name, <any>undefined, { urn })
            case "valtix:index/gateway:Gateway":
                return new Gateway(name, <any>undefined, { urn })
            case "valtix:index/policyRuleSet:PolicyRuleSet":
                return new PolicyRuleSet(name, <any>undefined, { urn })
            case "valtix:index/policyRules:PolicyRules":
                return new PolicyRules(name, <any>undefined, { urn })
            case "valtix:index/profileAntiMalware:ProfileAntiMalware":
                return new ProfileAntiMalware(name, <any>undefined, { urn })
            case "valtix:index/profileAntiVirus:ProfileAntiVirus":
                return new ProfileAntiVirus(name, <any>undefined, { urn })
            case "valtix:index/profileApplicationThreat:ProfileApplicationThreat":
                return new ProfileApplicationThreat(name, <any>undefined, { urn })
            case "valtix:index/profileDecryption:ProfileDecryption":
                return new ProfileDecryption(name, <any>undefined, { urn })
            case "valtix:index/profileDiagnostics:ProfileDiagnostics":
                return new ProfileDiagnostics(name, <any>undefined, { urn })
            case "valtix:index/profileDlp:ProfileDlp":
                return new ProfileDlp(name, <any>undefined, { urn })
            case "valtix:index/profileDns:ProfileDns":
                return new ProfileDns(name, <any>undefined, { urn })
            case "valtix:index/profileFqdn:ProfileFqdn":
                return new ProfileFqdn(name, <any>undefined, { urn })
            case "valtix:index/profileL7dos:ProfileL7dos":
                return new ProfileL7dos(name, <any>undefined, { urn })
            case "valtix:index/profileLogForwarding:ProfileLogForwarding":
                return new ProfileLogForwarding(name, <any>undefined, { urn })
            case "valtix:index/profileMaliciousIp:ProfileMaliciousIp":
                return new ProfileMaliciousIp(name, <any>undefined, { urn })
            case "valtix:index/profileMaliciousSource:ProfileMaliciousSource":
                return new ProfileMaliciousSource(name, <any>undefined, { urn })
            case "valtix:index/profileMetricsForwarding:ProfileMetricsForwarding":
                return new ProfileMetricsForwarding(name, <any>undefined, { urn })
            case "valtix:index/profileNetworkIntrusion:ProfileNetworkIntrusion":
                return new ProfileNetworkIntrusion(name, <any>undefined, { urn })
            case "valtix:index/profileNtp:ProfileNtp":
                return new ProfileNtp(name, <any>undefined, { urn })
            case "valtix:index/profilePacketCapture:ProfilePacketCapture":
                return new ProfilePacketCapture(name, <any>undefined, { urn })
            case "valtix:index/profileUrlfilter:ProfileUrlfilter":
                return new ProfileUrlfilter(name, <any>undefined, { urn })
            case "valtix:index/serviceObject:ServiceObject":
                return new ServiceObject(name, <any>undefined, { urn })
            case "valtix:index/serviceVpc:ServiceVpc":
                return new ServiceVpc(name, <any>undefined, { urn })
            case "valtix:index/spokeVpc:SpokeVpc":
                return new SpokeVpc(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("valtix", "index/addressObject", _module)
pulumi.runtime.registerResourceModule("valtix", "index/alertProfile", _module)
pulumi.runtime.registerResourceModule("valtix", "index/alertRule", _module)
pulumi.runtime.registerResourceModule("valtix", "index/certificate", _module)
pulumi.runtime.registerResourceModule("valtix", "index/cloudAccount", _module)
pulumi.runtime.registerResourceModule("valtix", "index/cloudAccountLogProfileAssociation", _module)
pulumi.runtime.registerResourceModule("valtix", "index/externalId", _module)
pulumi.runtime.registerResourceModule("valtix", "index/gateway", _module)
pulumi.runtime.registerResourceModule("valtix", "index/policyRuleSet", _module)
pulumi.runtime.registerResourceModule("valtix", "index/policyRules", _module)
pulumi.runtime.registerResourceModule("valtix", "index/profileAntiMalware", _module)
pulumi.runtime.registerResourceModule("valtix", "index/profileAntiVirus", _module)
pulumi.runtime.registerResourceModule("valtix", "index/profileApplicationThreat", _module)
pulumi.runtime.registerResourceModule("valtix", "index/profileDecryption", _module)
pulumi.runtime.registerResourceModule("valtix", "index/profileDiagnostics", _module)
pulumi.runtime.registerResourceModule("valtix", "index/profileDlp", _module)
pulumi.runtime.registerResourceModule("valtix", "index/profileDns", _module)
pulumi.runtime.registerResourceModule("valtix", "index/profileFqdn", _module)
pulumi.runtime.registerResourceModule("valtix", "index/profileL7dos", _module)
pulumi.runtime.registerResourceModule("valtix", "index/profileLogForwarding", _module)
pulumi.runtime.registerResourceModule("valtix", "index/profileMaliciousIp", _module)
pulumi.runtime.registerResourceModule("valtix", "index/profileMaliciousSource", _module)
pulumi.runtime.registerResourceModule("valtix", "index/profileMetricsForwarding", _module)
pulumi.runtime.registerResourceModule("valtix", "index/profileNetworkIntrusion", _module)
pulumi.runtime.registerResourceModule("valtix", "index/profileNtp", _module)
pulumi.runtime.registerResourceModule("valtix", "index/profilePacketCapture", _module)
pulumi.runtime.registerResourceModule("valtix", "index/profileUrlfilter", _module)
pulumi.runtime.registerResourceModule("valtix", "index/serviceObject", _module)
pulumi.runtime.registerResourceModule("valtix", "index/serviceVpc", _module)
pulumi.runtime.registerResourceModule("valtix", "index/spokeVpc", _module)
pulumi.runtime.registerResourcePackage("valtix", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:valtix") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
