// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Gateway extends pulumi.CustomResource {
    /**
     * Get an existing Gateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GatewayState, opts?: pulumi.CustomResourceOptions): Gateway {
        return new Gateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'valtix:index/gateway:Gateway';

    /**
     * Returns true if the given object is an instance of Gateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Gateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Gateway.__pulumiType;
    }

    public readonly awsGatewayLb!: pulumi.Output<boolean | undefined>;
    public readonly awsIamRoleFirewall!: pulumi.Output<string | undefined>;
    public readonly azureGatewayLb!: pulumi.Output<boolean | undefined>;
    public readonly azureResourceGroup!: pulumi.Output<string | undefined>;
    public readonly azureUserIdentityId!: pulumi.Output<string | undefined>;
    public readonly azureUserName!: pulumi.Output<string | undefined>;
    public readonly cspAccountName!: pulumi.Output<string>;
    public readonly datapathSecurityGroup!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly diagnosticsProfile!: pulumi.Output<number | undefined>;
    public /*out*/ readonly gatewayEndpoint!: pulumi.Output<string>;
    public readonly gatewayGwlbEndpoints!: pulumi.Output<outputs.GatewayGatewayGwlbEndpoint[] | undefined>;
    public readonly gatewayImage!: pulumi.Output<string>;
    public readonly gatewayLbIntegrations!: pulumi.Output<outputs.GatewayGatewayLbIntegration[] | undefined>;
    public readonly gatewayState!: pulumi.Output<string | undefined>;
    public /*out*/ readonly gcpLbForwardingRuleName!: pulumi.Output<string>;
    public readonly gcpServiceAccountEmail!: pulumi.Output<string | undefined>;
    public readonly gcpUserName!: pulumi.Output<string | undefined>;
    public /*out*/ readonly gwlbServiceId!: pulumi.Output<string>;
    public /*out*/ readonly gwlbServiceName!: pulumi.Output<string>;
    public readonly healthCheckPort!: pulumi.Output<number | undefined>;
    public readonly instanceDetails!: pulumi.Output<outputs.GatewayInstanceDetail[] | undefined>;
    public readonly instanceType!: pulumi.Output<string>;
    public readonly logProfile!: pulumi.Output<number | undefined>;
    public readonly maxInstances!: pulumi.Output<number | undefined>;
    public readonly metricsProfile!: pulumi.Output<number | undefined>;
    public readonly mgmtSecurityGroup!: pulumi.Output<string>;
    public readonly mgmtVpcId!: pulumi.Output<string | undefined>;
    public readonly minInstances!: pulumi.Output<number | undefined>;
    public readonly mode!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly ntpProfile!: pulumi.Output<number | undefined>;
    public readonly ociCompartmentId!: pulumi.Output<string | undefined>;
    public readonly packetCaptureProfile!: pulumi.Output<number | undefined>;
    public readonly policyRuleSetId!: pulumi.Output<number>;
    public readonly region!: pulumi.Output<string>;
    public readonly securityType!: pulumi.Output<string | undefined>;
    public readonly settings!: pulumi.Output<outputs.GatewaySetting[] | undefined>;
    public readonly sshKeyPair!: pulumi.Output<string | undefined>;
    public readonly sshPublicKey!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly transitGatewayId!: pulumi.Output<string | undefined>;
    public readonly username!: pulumi.Output<string | undefined>;
    public readonly vpcId!: pulumi.Output<string>;
    public readonly vpnConnectionSetId!: pulumi.Output<number | undefined>;
    public readonly vpnEnable!: pulumi.Output<boolean | undefined>;
    public readonly waitForGatewayState!: pulumi.Output<boolean | undefined>;
    public readonly waitUntilGatewayActive!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Gateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GatewayArgs | GatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GatewayState | undefined;
            resourceInputs["awsGatewayLb"] = state ? state.awsGatewayLb : undefined;
            resourceInputs["awsIamRoleFirewall"] = state ? state.awsIamRoleFirewall : undefined;
            resourceInputs["azureGatewayLb"] = state ? state.azureGatewayLb : undefined;
            resourceInputs["azureResourceGroup"] = state ? state.azureResourceGroup : undefined;
            resourceInputs["azureUserIdentityId"] = state ? state.azureUserIdentityId : undefined;
            resourceInputs["azureUserName"] = state ? state.azureUserName : undefined;
            resourceInputs["cspAccountName"] = state ? state.cspAccountName : undefined;
            resourceInputs["datapathSecurityGroup"] = state ? state.datapathSecurityGroup : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["diagnosticsProfile"] = state ? state.diagnosticsProfile : undefined;
            resourceInputs["gatewayEndpoint"] = state ? state.gatewayEndpoint : undefined;
            resourceInputs["gatewayGwlbEndpoints"] = state ? state.gatewayGwlbEndpoints : undefined;
            resourceInputs["gatewayImage"] = state ? state.gatewayImage : undefined;
            resourceInputs["gatewayLbIntegrations"] = state ? state.gatewayLbIntegrations : undefined;
            resourceInputs["gatewayState"] = state ? state.gatewayState : undefined;
            resourceInputs["gcpLbForwardingRuleName"] = state ? state.gcpLbForwardingRuleName : undefined;
            resourceInputs["gcpServiceAccountEmail"] = state ? state.gcpServiceAccountEmail : undefined;
            resourceInputs["gcpUserName"] = state ? state.gcpUserName : undefined;
            resourceInputs["gwlbServiceId"] = state ? state.gwlbServiceId : undefined;
            resourceInputs["gwlbServiceName"] = state ? state.gwlbServiceName : undefined;
            resourceInputs["healthCheckPort"] = state ? state.healthCheckPort : undefined;
            resourceInputs["instanceDetails"] = state ? state.instanceDetails : undefined;
            resourceInputs["instanceType"] = state ? state.instanceType : undefined;
            resourceInputs["logProfile"] = state ? state.logProfile : undefined;
            resourceInputs["maxInstances"] = state ? state.maxInstances : undefined;
            resourceInputs["metricsProfile"] = state ? state.metricsProfile : undefined;
            resourceInputs["mgmtSecurityGroup"] = state ? state.mgmtSecurityGroup : undefined;
            resourceInputs["mgmtVpcId"] = state ? state.mgmtVpcId : undefined;
            resourceInputs["minInstances"] = state ? state.minInstances : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ntpProfile"] = state ? state.ntpProfile : undefined;
            resourceInputs["ociCompartmentId"] = state ? state.ociCompartmentId : undefined;
            resourceInputs["packetCaptureProfile"] = state ? state.packetCaptureProfile : undefined;
            resourceInputs["policyRuleSetId"] = state ? state.policyRuleSetId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["securityType"] = state ? state.securityType : undefined;
            resourceInputs["settings"] = state ? state.settings : undefined;
            resourceInputs["sshKeyPair"] = state ? state.sshKeyPair : undefined;
            resourceInputs["sshPublicKey"] = state ? state.sshPublicKey : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["transitGatewayId"] = state ? state.transitGatewayId : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vpnConnectionSetId"] = state ? state.vpnConnectionSetId : undefined;
            resourceInputs["vpnEnable"] = state ? state.vpnEnable : undefined;
            resourceInputs["waitForGatewayState"] = state ? state.waitForGatewayState : undefined;
            resourceInputs["waitUntilGatewayActive"] = state ? state.waitUntilGatewayActive : undefined;
        } else {
            const args = argsOrState as GatewayArgs | undefined;
            if ((!args || args.cspAccountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cspAccountName'");
            }
            if ((!args || args.gatewayImage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gatewayImage'");
            }
            if ((!args || args.instanceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceType'");
            }
            if ((!args || args.policyRuleSetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyRuleSetId'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["awsGatewayLb"] = args ? args.awsGatewayLb : undefined;
            resourceInputs["awsIamRoleFirewall"] = args ? args.awsIamRoleFirewall : undefined;
            resourceInputs["azureGatewayLb"] = args ? args.azureGatewayLb : undefined;
            resourceInputs["azureResourceGroup"] = args ? args.azureResourceGroup : undefined;
            resourceInputs["azureUserIdentityId"] = args ? args.azureUserIdentityId : undefined;
            resourceInputs["azureUserName"] = args ? args.azureUserName : undefined;
            resourceInputs["cspAccountName"] = args ? args.cspAccountName : undefined;
            resourceInputs["datapathSecurityGroup"] = args ? args.datapathSecurityGroup : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["diagnosticsProfile"] = args ? args.diagnosticsProfile : undefined;
            resourceInputs["gatewayGwlbEndpoints"] = args ? args.gatewayGwlbEndpoints : undefined;
            resourceInputs["gatewayImage"] = args ? args.gatewayImage : undefined;
            resourceInputs["gatewayLbIntegrations"] = args ? args.gatewayLbIntegrations : undefined;
            resourceInputs["gatewayState"] = args ? args.gatewayState : undefined;
            resourceInputs["gcpServiceAccountEmail"] = args ? args.gcpServiceAccountEmail : undefined;
            resourceInputs["gcpUserName"] = args ? args.gcpUserName : undefined;
            resourceInputs["healthCheckPort"] = args ? args.healthCheckPort : undefined;
            resourceInputs["instanceDetails"] = args ? args.instanceDetails : undefined;
            resourceInputs["instanceType"] = args ? args.instanceType : undefined;
            resourceInputs["logProfile"] = args ? args.logProfile : undefined;
            resourceInputs["maxInstances"] = args ? args.maxInstances : undefined;
            resourceInputs["metricsProfile"] = args ? args.metricsProfile : undefined;
            resourceInputs["mgmtSecurityGroup"] = args ? args.mgmtSecurityGroup : undefined;
            resourceInputs["mgmtVpcId"] = args ? args.mgmtVpcId : undefined;
            resourceInputs["minInstances"] = args ? args.minInstances : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ntpProfile"] = args ? args.ntpProfile : undefined;
            resourceInputs["ociCompartmentId"] = args ? args.ociCompartmentId : undefined;
            resourceInputs["packetCaptureProfile"] = args ? args.packetCaptureProfile : undefined;
            resourceInputs["policyRuleSetId"] = args ? args.policyRuleSetId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["securityType"] = args ? args.securityType : undefined;
            resourceInputs["settings"] = args ? args.settings : undefined;
            resourceInputs["sshKeyPair"] = args ? args.sshKeyPair : undefined;
            resourceInputs["sshPublicKey"] = args ? args.sshPublicKey : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["transitGatewayId"] = args ? args.transitGatewayId : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["vpnConnectionSetId"] = args ? args.vpnConnectionSetId : undefined;
            resourceInputs["vpnEnable"] = args ? args.vpnEnable : undefined;
            resourceInputs["waitForGatewayState"] = args ? args.waitForGatewayState : undefined;
            resourceInputs["waitUntilGatewayActive"] = args ? args.waitUntilGatewayActive : undefined;
            resourceInputs["gatewayEndpoint"] = undefined /*out*/;
            resourceInputs["gcpLbForwardingRuleName"] = undefined /*out*/;
            resourceInputs["gwlbServiceId"] = undefined /*out*/;
            resourceInputs["gwlbServiceName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Gateway.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Gateway resources.
 */
export interface GatewayState {
    awsGatewayLb?: pulumi.Input<boolean>;
    awsIamRoleFirewall?: pulumi.Input<string>;
    azureGatewayLb?: pulumi.Input<boolean>;
    azureResourceGroup?: pulumi.Input<string>;
    azureUserIdentityId?: pulumi.Input<string>;
    azureUserName?: pulumi.Input<string>;
    cspAccountName?: pulumi.Input<string>;
    datapathSecurityGroup?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    diagnosticsProfile?: pulumi.Input<number>;
    gatewayEndpoint?: pulumi.Input<string>;
    gatewayGwlbEndpoints?: pulumi.Input<pulumi.Input<inputs.GatewayGatewayGwlbEndpoint>[]>;
    gatewayImage?: pulumi.Input<string>;
    gatewayLbIntegrations?: pulumi.Input<pulumi.Input<inputs.GatewayGatewayLbIntegration>[]>;
    gatewayState?: pulumi.Input<string>;
    gcpLbForwardingRuleName?: pulumi.Input<string>;
    gcpServiceAccountEmail?: pulumi.Input<string>;
    gcpUserName?: pulumi.Input<string>;
    gwlbServiceId?: pulumi.Input<string>;
    gwlbServiceName?: pulumi.Input<string>;
    healthCheckPort?: pulumi.Input<number>;
    instanceDetails?: pulumi.Input<pulumi.Input<inputs.GatewayInstanceDetail>[]>;
    instanceType?: pulumi.Input<string>;
    logProfile?: pulumi.Input<number>;
    maxInstances?: pulumi.Input<number>;
    metricsProfile?: pulumi.Input<number>;
    mgmtSecurityGroup?: pulumi.Input<string>;
    mgmtVpcId?: pulumi.Input<string>;
    minInstances?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ntpProfile?: pulumi.Input<number>;
    ociCompartmentId?: pulumi.Input<string>;
    packetCaptureProfile?: pulumi.Input<number>;
    policyRuleSetId?: pulumi.Input<number>;
    region?: pulumi.Input<string>;
    securityType?: pulumi.Input<string>;
    settings?: pulumi.Input<pulumi.Input<inputs.GatewaySetting>[]>;
    sshKeyPair?: pulumi.Input<string>;
    sshPublicKey?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    transitGatewayId?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
    vpnConnectionSetId?: pulumi.Input<number>;
    vpnEnable?: pulumi.Input<boolean>;
    waitForGatewayState?: pulumi.Input<boolean>;
    waitUntilGatewayActive?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Gateway resource.
 */
export interface GatewayArgs {
    awsGatewayLb?: pulumi.Input<boolean>;
    awsIamRoleFirewall?: pulumi.Input<string>;
    azureGatewayLb?: pulumi.Input<boolean>;
    azureResourceGroup?: pulumi.Input<string>;
    azureUserIdentityId?: pulumi.Input<string>;
    azureUserName?: pulumi.Input<string>;
    cspAccountName: pulumi.Input<string>;
    datapathSecurityGroup?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    diagnosticsProfile?: pulumi.Input<number>;
    gatewayGwlbEndpoints?: pulumi.Input<pulumi.Input<inputs.GatewayGatewayGwlbEndpoint>[]>;
    gatewayImage: pulumi.Input<string>;
    gatewayLbIntegrations?: pulumi.Input<pulumi.Input<inputs.GatewayGatewayLbIntegration>[]>;
    gatewayState?: pulumi.Input<string>;
    gcpServiceAccountEmail?: pulumi.Input<string>;
    gcpUserName?: pulumi.Input<string>;
    healthCheckPort?: pulumi.Input<number>;
    instanceDetails?: pulumi.Input<pulumi.Input<inputs.GatewayInstanceDetail>[]>;
    instanceType: pulumi.Input<string>;
    logProfile?: pulumi.Input<number>;
    maxInstances?: pulumi.Input<number>;
    metricsProfile?: pulumi.Input<number>;
    mgmtSecurityGroup?: pulumi.Input<string>;
    mgmtVpcId?: pulumi.Input<string>;
    minInstances?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ntpProfile?: pulumi.Input<number>;
    ociCompartmentId?: pulumi.Input<string>;
    packetCaptureProfile?: pulumi.Input<number>;
    policyRuleSetId: pulumi.Input<number>;
    region: pulumi.Input<string>;
    securityType?: pulumi.Input<string>;
    settings?: pulumi.Input<pulumi.Input<inputs.GatewaySetting>[]>;
    sshKeyPair?: pulumi.Input<string>;
    sshPublicKey?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    transitGatewayId?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
    vpcId: pulumi.Input<string>;
    vpnConnectionSetId?: pulumi.Input<number>;
    vpnEnable?: pulumi.Input<boolean>;
    waitForGatewayState?: pulumi.Input<boolean>;
    waitUntilGatewayActive?: pulumi.Input<boolean>;
}
