// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Certificate extends pulumi.CustomResource {
    /**
     * Get an existing Certificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CertificateState, opts?: pulumi.CustomResourceOptions): Certificate {
        return new Certificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'valtix:index/certificate:Certificate';

    /**
     * Returns true if the given object is an instance of Certificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Certificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Certificate.__pulumiType;
    }

    public readonly awsSecretName!: pulumi.Output<string | undefined>;
    public readonly azureKeyVaultName!: pulumi.Output<string | undefined>;
    public readonly azureKeyVaultSecretName!: pulumi.Output<string | undefined>;
    public readonly certificateBody!: pulumi.Output<string>;
    public readonly certificateChain!: pulumi.Output<string | undefined>;
    public readonly certificateType!: pulumi.Output<string>;
    public readonly credstashKeyName!: pulumi.Output<string | undefined>;
    public readonly credstashTableName!: pulumi.Output<string | undefined>;
    public readonly cspAccountName!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly privateKey!: pulumi.Output<string | undefined>;
    public readonly privateKeyCipherText!: pulumi.Output<string | undefined>;
    public readonly region!: pulumi.Output<string | undefined>;
    public readonly secretName!: pulumi.Output<string | undefined>;
    public readonly secretVersion!: pulumi.Output<string | undefined>;

    /**
     * Create a Certificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CertificateArgs | CertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CertificateState | undefined;
            resourceInputs["awsSecretName"] = state ? state.awsSecretName : undefined;
            resourceInputs["azureKeyVaultName"] = state ? state.azureKeyVaultName : undefined;
            resourceInputs["azureKeyVaultSecretName"] = state ? state.azureKeyVaultSecretName : undefined;
            resourceInputs["certificateBody"] = state ? state.certificateBody : undefined;
            resourceInputs["certificateChain"] = state ? state.certificateChain : undefined;
            resourceInputs["certificateType"] = state ? state.certificateType : undefined;
            resourceInputs["credstashKeyName"] = state ? state.credstashKeyName : undefined;
            resourceInputs["credstashTableName"] = state ? state.credstashTableName : undefined;
            resourceInputs["cspAccountName"] = state ? state.cspAccountName : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["privateKeyCipherText"] = state ? state.privateKeyCipherText : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["secretName"] = state ? state.secretName : undefined;
            resourceInputs["secretVersion"] = state ? state.secretVersion : undefined;
        } else {
            const args = argsOrState as CertificateArgs | undefined;
            if ((!args || args.certificateBody === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateBody'");
            }
            if ((!args || args.certificateType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateType'");
            }
            resourceInputs["awsSecretName"] = args ? args.awsSecretName : undefined;
            resourceInputs["azureKeyVaultName"] = args ? args.azureKeyVaultName : undefined;
            resourceInputs["azureKeyVaultSecretName"] = args ? args.azureKeyVaultSecretName : undefined;
            resourceInputs["certificateBody"] = args ? args.certificateBody : undefined;
            resourceInputs["certificateChain"] = args ? args.certificateChain : undefined;
            resourceInputs["certificateType"] = args ? args.certificateType : undefined;
            resourceInputs["credstashKeyName"] = args ? args.credstashKeyName : undefined;
            resourceInputs["credstashTableName"] = args ? args.credstashTableName : undefined;
            resourceInputs["cspAccountName"] = args ? args.cspAccountName : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["privateKey"] = args ? args.privateKey : undefined;
            resourceInputs["privateKeyCipherText"] = args ? args.privateKeyCipherText : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["secretName"] = args ? args.secretName : undefined;
            resourceInputs["secretVersion"] = args ? args.secretVersion : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Certificate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Certificate resources.
 */
export interface CertificateState {
    awsSecretName?: pulumi.Input<string>;
    azureKeyVaultName?: pulumi.Input<string>;
    azureKeyVaultSecretName?: pulumi.Input<string>;
    certificateBody?: pulumi.Input<string>;
    certificateChain?: pulumi.Input<string>;
    certificateType?: pulumi.Input<string>;
    credstashKeyName?: pulumi.Input<string>;
    credstashTableName?: pulumi.Input<string>;
    cspAccountName?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    privateKey?: pulumi.Input<string>;
    privateKeyCipherText?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    secretName?: pulumi.Input<string>;
    secretVersion?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Certificate resource.
 */
export interface CertificateArgs {
    awsSecretName?: pulumi.Input<string>;
    azureKeyVaultName?: pulumi.Input<string>;
    azureKeyVaultSecretName?: pulumi.Input<string>;
    certificateBody: pulumi.Input<string>;
    certificateChain?: pulumi.Input<string>;
    certificateType: pulumi.Input<string>;
    credstashKeyName?: pulumi.Input<string>;
    credstashTableName?: pulumi.Input<string>;
    cspAccountName?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    privateKey?: pulumi.Input<string>;
    privateKeyCipherText?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    secretName?: pulumi.Input<string>;
    secretVersion?: pulumi.Input<string>;
}
