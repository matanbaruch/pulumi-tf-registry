// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class InstanceTemplate extends pulumi.CustomResource {
    /**
     * Get an existing InstanceTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceTemplateState, opts?: pulumi.CustomResourceOptions): InstanceTemplate {
        return new InstanceTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'triton:index/instanceTemplate:InstanceTemplate';

    /**
     * Returns true if the given object is an instance of InstanceTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InstanceTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InstanceTemplate.__pulumiType;
    }

    /**
     * Whether to enable the firewall for group instances
     */
    public readonly firewallEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * UUID of the image
     */
    public readonly image!: pulumi.Output<string>;
    /**
     * Metadata for group instances
     */
    public readonly metadata!: pulumi.Output<{[key: string]: string}>;
    /**
     * Network IDs for group instances
     */
    public readonly networks!: pulumi.Output<string[]>;
    /**
     * Package name used for provisioning
     */
    public readonly package!: pulumi.Output<string>;
    /**
     * Tags for group instances
     */
    public readonly tags!: pulumi.Output<{[key: string]: string}>;
    /**
     * Friendly name for the instance template
     */
    public readonly templateName!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.InstanceTemplateTimeouts | undefined>;
    /**
     * Data copied to instance on boot
     */
    public readonly userdata!: pulumi.Output<string>;

    /**
     * Create a InstanceTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceTemplateArgs | InstanceTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceTemplateState | undefined;
            resourceInputs["firewallEnabled"] = state ? state.firewallEnabled : undefined;
            resourceInputs["image"] = state ? state.image : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["networks"] = state ? state.networks : undefined;
            resourceInputs["package"] = state ? state.package : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["templateName"] = state ? state.templateName : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["userdata"] = state ? state.userdata : undefined;
        } else {
            const args = argsOrState as InstanceTemplateArgs | undefined;
            if ((!args || args.image === undefined) && !opts.urn) {
                throw new Error("Missing required property 'image'");
            }
            if ((!args || args.package === undefined) && !opts.urn) {
                throw new Error("Missing required property 'package'");
            }
            if ((!args || args.templateName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'templateName'");
            }
            resourceInputs["firewallEnabled"] = args ? args.firewallEnabled : undefined;
            resourceInputs["image"] = args ? args.image : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["networks"] = args ? args.networks : undefined;
            resourceInputs["package"] = args ? args.package : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["templateName"] = args ? args.templateName : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userdata"] = args ? args.userdata : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InstanceTemplate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering InstanceTemplate resources.
 */
export interface InstanceTemplateState {
    /**
     * Whether to enable the firewall for group instances
     */
    firewallEnabled?: pulumi.Input<boolean>;
    /**
     * UUID of the image
     */
    image?: pulumi.Input<string>;
    /**
     * Metadata for group instances
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Network IDs for group instances
     */
    networks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Package name used for provisioning
     */
    package?: pulumi.Input<string>;
    /**
     * Tags for group instances
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Friendly name for the instance template
     */
    templateName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.InstanceTemplateTimeouts>;
    /**
     * Data copied to instance on boot
     */
    userdata?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InstanceTemplate resource.
 */
export interface InstanceTemplateArgs {
    /**
     * Whether to enable the firewall for group instances
     */
    firewallEnabled?: pulumi.Input<boolean>;
    /**
     * UUID of the image
     */
    image: pulumi.Input<string>;
    /**
     * Metadata for group instances
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Network IDs for group instances
     */
    networks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Package name used for provisioning
     */
    package: pulumi.Input<string>;
    /**
     * Tags for group instances
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Friendly name for the instance template
     */
    templateName: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.InstanceTemplateTimeouts>;
    /**
     * Data copied to instance on boot
     */
    userdata?: pulumi.Input<string>;
}
