// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Machine extends pulumi.CustomResource {
    /**
     * Get an existing Machine resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MachineState, opts?: pulumi.CustomResourceOptions): Machine {
        return new Machine(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'triton:index/machine:Machine';

    /**
     * Returns true if the given object is an instance of Machine.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Machine {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Machine.__pulumiType;
    }

    /**
     * Administrator's initial password (Windows only)
     */
    public readonly administratorPw!: pulumi.Output<string | undefined>;
    /**
     * Label based affinity rules for assisting instance placement
     */
    public readonly affinities!: pulumi.Output<string[] | undefined>;
    /**
     * copied to machine on boot
     */
    public readonly cloudConfig!: pulumi.Output<string | undefined>;
    public readonly cns!: pulumi.Output<outputs.MachineCns | undefined>;
    /**
     * UUID of the server on which the instance is located
     */
    public /*out*/ readonly computeNode!: pulumi.Output<string>;
    /**
     * When the machine was created
     */
    public /*out*/ readonly created!: pulumi.Output<string>;
    /**
     * Dataset URN with which the machine was provisioned
     */
    public /*out*/ readonly dataset!: pulumi.Output<string>;
    /**
     * Whether to create a delegate dataset for this machine
     */
    public readonly delegateDataset!: pulumi.Output<boolean | undefined>;
    /**
     * Whether to enable deletion protection for this machine
     */
    public readonly deletionProtectionEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Amount of disk allocated to the machine (in Gb)
     */
    public /*out*/ readonly disk!: pulumi.Output<number>;
    /**
     * List of domain names from Triton CNS
     */
    public /*out*/ readonly domainNames!: pulumi.Output<string[]>;
    /**
     * Whether to enable the firewall for this machine
     */
    public readonly firewallEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * UUID of the image
     */
    public readonly image!: pulumi.Output<string>;
    /**
     * IP addresses assigned to the machine
     */
    public /*out*/ readonly ips!: pulumi.Output<string[]>;
    public readonly locality!: pulumi.Output<outputs.MachineLocality | undefined>;
    /**
     * Amount of memory allocated to the machine (in Mb)
     */
    public /*out*/ readonly memory!: pulumi.Output<number>;
    /**
     * Machine metadata
     */
    public readonly metadata!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Friendly name for machine
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Desired network IDs
     */
    public readonly networks!: pulumi.Output<string[] | undefined>;
    public readonly nics!: pulumi.Output<outputs.MachineNic[] | undefined>;
    /**
     * The package for use for provisioning
     */
    public readonly package!: pulumi.Output<string>;
    /**
     * Primary (public) IP address for the machine
     */
    public /*out*/ readonly primaryip!: pulumi.Output<string>;
    /**
     * Authorized keys for the root user on this machine
     */
    public readonly rootAuthorizedKeys!: pulumi.Output<string>;
    /**
     * Machine tags
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.MachineTimeouts | undefined>;
    /**
     * Machine type (smartmachine or virtualmachine)
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * When the machine was updated
     */
    public /*out*/ readonly updated!: pulumi.Output<string>;
    /**
     * Data copied to machine on boot
     */
    public readonly userData!: pulumi.Output<string | undefined>;
    /**
     * User script to run on boot (every boot on SmartMachines)
     */
    public readonly userScript!: pulumi.Output<string | undefined>;
    public readonly volumes!: pulumi.Output<outputs.MachineVolume[] | undefined>;

    /**
     * Create a Machine resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MachineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MachineArgs | MachineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MachineState | undefined;
            resourceInputs["administratorPw"] = state ? state.administratorPw : undefined;
            resourceInputs["affinities"] = state ? state.affinities : undefined;
            resourceInputs["cloudConfig"] = state ? state.cloudConfig : undefined;
            resourceInputs["cns"] = state ? state.cns : undefined;
            resourceInputs["computeNode"] = state ? state.computeNode : undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["dataset"] = state ? state.dataset : undefined;
            resourceInputs["delegateDataset"] = state ? state.delegateDataset : undefined;
            resourceInputs["deletionProtectionEnabled"] = state ? state.deletionProtectionEnabled : undefined;
            resourceInputs["disk"] = state ? state.disk : undefined;
            resourceInputs["domainNames"] = state ? state.domainNames : undefined;
            resourceInputs["firewallEnabled"] = state ? state.firewallEnabled : undefined;
            resourceInputs["image"] = state ? state.image : undefined;
            resourceInputs["ips"] = state ? state.ips : undefined;
            resourceInputs["locality"] = state ? state.locality : undefined;
            resourceInputs["memory"] = state ? state.memory : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networks"] = state ? state.networks : undefined;
            resourceInputs["nics"] = state ? state.nics : undefined;
            resourceInputs["package"] = state ? state.package : undefined;
            resourceInputs["primaryip"] = state ? state.primaryip : undefined;
            resourceInputs["rootAuthorizedKeys"] = state ? state.rootAuthorizedKeys : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["updated"] = state ? state.updated : undefined;
            resourceInputs["userData"] = state ? state.userData : undefined;
            resourceInputs["userScript"] = state ? state.userScript : undefined;
            resourceInputs["volumes"] = state ? state.volumes : undefined;
        } else {
            const args = argsOrState as MachineArgs | undefined;
            if ((!args || args.image === undefined) && !opts.urn) {
                throw new Error("Missing required property 'image'");
            }
            if ((!args || args.package === undefined) && !opts.urn) {
                throw new Error("Missing required property 'package'");
            }
            resourceInputs["administratorPw"] = args ? args.administratorPw : undefined;
            resourceInputs["affinities"] = args ? args.affinities : undefined;
            resourceInputs["cloudConfig"] = args ? args.cloudConfig : undefined;
            resourceInputs["cns"] = args ? args.cns : undefined;
            resourceInputs["delegateDataset"] = args ? args.delegateDataset : undefined;
            resourceInputs["deletionProtectionEnabled"] = args ? args.deletionProtectionEnabled : undefined;
            resourceInputs["firewallEnabled"] = args ? args.firewallEnabled : undefined;
            resourceInputs["image"] = args ? args.image : undefined;
            resourceInputs["locality"] = args ? args.locality : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networks"] = args ? args.networks : undefined;
            resourceInputs["nics"] = args ? args.nics : undefined;
            resourceInputs["package"] = args ? args.package : undefined;
            resourceInputs["rootAuthorizedKeys"] = args ? args.rootAuthorizedKeys : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userData"] = args ? args.userData : undefined;
            resourceInputs["userScript"] = args ? args.userScript : undefined;
            resourceInputs["volumes"] = args ? args.volumes : undefined;
            resourceInputs["computeNode"] = undefined /*out*/;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["dataset"] = undefined /*out*/;
            resourceInputs["disk"] = undefined /*out*/;
            resourceInputs["domainNames"] = undefined /*out*/;
            resourceInputs["ips"] = undefined /*out*/;
            resourceInputs["memory"] = undefined /*out*/;
            resourceInputs["primaryip"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["updated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Machine.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Machine resources.
 */
export interface MachineState {
    /**
     * Administrator's initial password (Windows only)
     */
    administratorPw?: pulumi.Input<string>;
    /**
     * Label based affinity rules for assisting instance placement
     */
    affinities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * copied to machine on boot
     */
    cloudConfig?: pulumi.Input<string>;
    cns?: pulumi.Input<inputs.MachineCns>;
    /**
     * UUID of the server on which the instance is located
     */
    computeNode?: pulumi.Input<string>;
    /**
     * When the machine was created
     */
    created?: pulumi.Input<string>;
    /**
     * Dataset URN with which the machine was provisioned
     */
    dataset?: pulumi.Input<string>;
    /**
     * Whether to create a delegate dataset for this machine
     */
    delegateDataset?: pulumi.Input<boolean>;
    /**
     * Whether to enable deletion protection for this machine
     */
    deletionProtectionEnabled?: pulumi.Input<boolean>;
    /**
     * Amount of disk allocated to the machine (in Gb)
     */
    disk?: pulumi.Input<number>;
    /**
     * List of domain names from Triton CNS
     */
    domainNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to enable the firewall for this machine
     */
    firewallEnabled?: pulumi.Input<boolean>;
    /**
     * UUID of the image
     */
    image?: pulumi.Input<string>;
    /**
     * IP addresses assigned to the machine
     */
    ips?: pulumi.Input<pulumi.Input<string>[]>;
    locality?: pulumi.Input<inputs.MachineLocality>;
    /**
     * Amount of memory allocated to the machine (in Mb)
     */
    memory?: pulumi.Input<number>;
    /**
     * Machine metadata
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Friendly name for machine
     */
    name?: pulumi.Input<string>;
    /**
     * Desired network IDs
     */
    networks?: pulumi.Input<pulumi.Input<string>[]>;
    nics?: pulumi.Input<pulumi.Input<inputs.MachineNic>[]>;
    /**
     * The package for use for provisioning
     */
    package?: pulumi.Input<string>;
    /**
     * Primary (public) IP address for the machine
     */
    primaryip?: pulumi.Input<string>;
    /**
     * Authorized keys for the root user on this machine
     */
    rootAuthorizedKeys?: pulumi.Input<string>;
    /**
     * Machine tags
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.MachineTimeouts>;
    /**
     * Machine type (smartmachine or virtualmachine)
     */
    type?: pulumi.Input<string>;
    /**
     * When the machine was updated
     */
    updated?: pulumi.Input<string>;
    /**
     * Data copied to machine on boot
     */
    userData?: pulumi.Input<string>;
    /**
     * User script to run on boot (every boot on SmartMachines)
     */
    userScript?: pulumi.Input<string>;
    volumes?: pulumi.Input<pulumi.Input<inputs.MachineVolume>[]>;
}

/**
 * The set of arguments for constructing a Machine resource.
 */
export interface MachineArgs {
    /**
     * Administrator's initial password (Windows only)
     */
    administratorPw?: pulumi.Input<string>;
    /**
     * Label based affinity rules for assisting instance placement
     */
    affinities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * copied to machine on boot
     */
    cloudConfig?: pulumi.Input<string>;
    cns?: pulumi.Input<inputs.MachineCns>;
    /**
     * Whether to create a delegate dataset for this machine
     */
    delegateDataset?: pulumi.Input<boolean>;
    /**
     * Whether to enable deletion protection for this machine
     */
    deletionProtectionEnabled?: pulumi.Input<boolean>;
    /**
     * Whether to enable the firewall for this machine
     */
    firewallEnabled?: pulumi.Input<boolean>;
    /**
     * UUID of the image
     */
    image: pulumi.Input<string>;
    locality?: pulumi.Input<inputs.MachineLocality>;
    /**
     * Machine metadata
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Friendly name for machine
     */
    name?: pulumi.Input<string>;
    /**
     * Desired network IDs
     */
    networks?: pulumi.Input<pulumi.Input<string>[]>;
    nics?: pulumi.Input<pulumi.Input<inputs.MachineNic>[]>;
    /**
     * The package for use for provisioning
     */
    package: pulumi.Input<string>;
    /**
     * Authorized keys for the root user on this machine
     */
    rootAuthorizedKeys?: pulumi.Input<string>;
    /**
     * Machine tags
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.MachineTimeouts>;
    /**
     * Data copied to machine on boot
     */
    userData?: pulumi.Input<string>;
    /**
     * User script to run on boot (every boot on SmartMachines)
     */
    userScript?: pulumi.Input<string>;
    volumes?: pulumi.Input<pulumi.Input<inputs.MachineVolume>[]>;
}
