// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { FabricArgs, FabricState } from "./fabric";
export type Fabric = import("./fabric").Fabric;
export const Fabric: typeof import("./fabric").Fabric = null as any;
utilities.lazyLoad(exports, ["Fabric"], () => require("./fabric"));

export { FirewallRuleArgs, FirewallRuleState } from "./firewallRule";
export type FirewallRule = import("./firewallRule").FirewallRule;
export const FirewallRule: typeof import("./firewallRule").FirewallRule = null as any;
utilities.lazyLoad(exports, ["FirewallRule"], () => require("./firewallRule"));

export { GetAccountArgs, GetAccountResult, GetAccountOutputArgs } from "./getAccount";
export const getAccount: typeof import("./getAccount").getAccount = null as any;
export const getAccountOutput: typeof import("./getAccount").getAccountOutput = null as any;
utilities.lazyLoad(exports, ["getAccount","getAccountOutput"], () => require("./getAccount"));

export { GetDatacenterArgs, GetDatacenterResult, GetDatacenterOutputArgs } from "./getDatacenter";
export const getDatacenter: typeof import("./getDatacenter").getDatacenter = null as any;
export const getDatacenterOutput: typeof import("./getDatacenter").getDatacenterOutput = null as any;
utilities.lazyLoad(exports, ["getDatacenter","getDatacenterOutput"], () => require("./getDatacenter"));

export { GetFabricNetworkArgs, GetFabricNetworkResult, GetFabricNetworkOutputArgs } from "./getFabricNetwork";
export const getFabricNetwork: typeof import("./getFabricNetwork").getFabricNetwork = null as any;
export const getFabricNetworkOutput: typeof import("./getFabricNetwork").getFabricNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getFabricNetwork","getFabricNetworkOutput"], () => require("./getFabricNetwork"));

export { GetFabricVlanArgs, GetFabricVlanResult, GetFabricVlanOutputArgs } from "./getFabricVlan";
export const getFabricVlan: typeof import("./getFabricVlan").getFabricVlan = null as any;
export const getFabricVlanOutput: typeof import("./getFabricVlan").getFabricVlanOutput = null as any;
utilities.lazyLoad(exports, ["getFabricVlan","getFabricVlanOutput"], () => require("./getFabricVlan"));

export { GetImageArgs, GetImageResult, GetImageOutputArgs } from "./getImage";
export const getImage: typeof import("./getImage").getImage = null as any;
export const getImageOutput: typeof import("./getImage").getImageOutput = null as any;
utilities.lazyLoad(exports, ["getImage","getImageOutput"], () => require("./getImage"));

export { GetNetworkArgs, GetNetworkResult, GetNetworkOutputArgs } from "./getNetwork";
export const getNetwork: typeof import("./getNetwork").getNetwork = null as any;
export const getNetworkOutput: typeof import("./getNetwork").getNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getNetwork","getNetworkOutput"], () => require("./getNetwork"));

export { GetPackageArgs, GetPackageResult, GetPackageOutputArgs } from "./getPackage";
export const getPackage: typeof import("./getPackage").getPackage = null as any;
export const getPackageOutput: typeof import("./getPackage").getPackageOutput = null as any;
utilities.lazyLoad(exports, ["getPackage","getPackageOutput"], () => require("./getPackage"));

export { GetVolumeArgs, GetVolumeResult, GetVolumeOutputArgs } from "./getVolume";
export const getVolume: typeof import("./getVolume").getVolume = null as any;
export const getVolumeOutput: typeof import("./getVolume").getVolumeOutput = null as any;
utilities.lazyLoad(exports, ["getVolume","getVolumeOutput"], () => require("./getVolume"));

export { InstanceTemplateArgs, InstanceTemplateState } from "./instanceTemplate";
export type InstanceTemplate = import("./instanceTemplate").InstanceTemplate;
export const InstanceTemplate: typeof import("./instanceTemplate").InstanceTemplate = null as any;
utilities.lazyLoad(exports, ["InstanceTemplate"], () => require("./instanceTemplate"));

export { KeyArgs, KeyState } from "./key";
export type Key = import("./key").Key;
export const Key: typeof import("./key").Key = null as any;
utilities.lazyLoad(exports, ["Key"], () => require("./key"));

export { MachineArgs, MachineState } from "./machine";
export type Machine = import("./machine").Machine;
export const Machine: typeof import("./machine").Machine = null as any;
utilities.lazyLoad(exports, ["Machine"], () => require("./machine"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ServiceGroupArgs, ServiceGroupState } from "./serviceGroup";
export type ServiceGroup = import("./serviceGroup").ServiceGroup;
export const ServiceGroup: typeof import("./serviceGroup").ServiceGroup = null as any;
utilities.lazyLoad(exports, ["ServiceGroup"], () => require("./serviceGroup"));

export { SnapshotArgs, SnapshotState } from "./snapshot";
export type Snapshot = import("./snapshot").Snapshot;
export const Snapshot: typeof import("./snapshot").Snapshot = null as any;
utilities.lazyLoad(exports, ["Snapshot"], () => require("./snapshot"));

export { VlanArgs, VlanState } from "./vlan";
export type Vlan = import("./vlan").Vlan;
export const Vlan: typeof import("./vlan").Vlan = null as any;
utilities.lazyLoad(exports, ["Vlan"], () => require("./vlan"));

export { VolumeArgs, VolumeState } from "./volume";
export type Volume = import("./volume").Volume;
export const Volume: typeof import("./volume").Volume = null as any;
utilities.lazyLoad(exports, ["Volume"], () => require("./volume"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "triton:index/fabric:Fabric":
                return new Fabric(name, <any>undefined, { urn })
            case "triton:index/firewallRule:FirewallRule":
                return new FirewallRule(name, <any>undefined, { urn })
            case "triton:index/instanceTemplate:InstanceTemplate":
                return new InstanceTemplate(name, <any>undefined, { urn })
            case "triton:index/key:Key":
                return new Key(name, <any>undefined, { urn })
            case "triton:index/machine:Machine":
                return new Machine(name, <any>undefined, { urn })
            case "triton:index/serviceGroup:ServiceGroup":
                return new ServiceGroup(name, <any>undefined, { urn })
            case "triton:index/snapshot:Snapshot":
                return new Snapshot(name, <any>undefined, { urn })
            case "triton:index/vlan:Vlan":
                return new Vlan(name, <any>undefined, { urn })
            case "triton:index/volume:Volume":
                return new Volume(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("triton", "index/fabric", _module)
pulumi.runtime.registerResourceModule("triton", "index/firewallRule", _module)
pulumi.runtime.registerResourceModule("triton", "index/instanceTemplate", _module)
pulumi.runtime.registerResourceModule("triton", "index/key", _module)
pulumi.runtime.registerResourceModule("triton", "index/machine", _module)
pulumi.runtime.registerResourceModule("triton", "index/serviceGroup", _module)
pulumi.runtime.registerResourceModule("triton", "index/snapshot", _module)
pulumi.runtime.registerResourceModule("triton", "index/vlan", _module)
pulumi.runtime.registerResourceModule("triton", "index/volume", _module)
pulumi.runtime.registerResourcePackage("triton", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:triton") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
