// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Fabric extends pulumi.CustomResource {
    /**
     * Get an existing Fabric resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FabricState, opts?: pulumi.CustomResourceOptions): Fabric {
        return new Fabric(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'triton:index/fabric:Fabric';

    /**
     * Returns true if the given object is an instance of Fabric.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Fabric {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Fabric.__pulumiType;
    }

    /**
     * Description of network
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Whether or not this network is on a fabric
     */
    public /*out*/ readonly fabric!: pulumi.Output<boolean>;
    /**
     * Gateway IP
     */
    public readonly gateway!: pulumi.Output<string | undefined>;
    /**
     * Whether or not a NAT zone is provisioned at the Gateway IP address
     */
    public readonly internetNat!: pulumi.Output<boolean | undefined>;
    /**
     * Network name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Last assignable IP on the network
     */
    public readonly provisionEndIp!: pulumi.Output<string>;
    /**
     * First IP on the network that can be assigned
     */
    public readonly provisionStartIp!: pulumi.Output<string>;
    /**
     * Whether or not this is an RFC1918 network
     */
    public /*out*/ readonly public!: pulumi.Output<boolean>;
    /**
     * List of IP addresses for DNS resolvers
     */
    public readonly resolvers!: pulumi.Output<string[]>;
    /**
     * Map of CIDR block to Gateway IP address
     */
    public readonly routes!: pulumi.Output<{[key: string]: string}>;
    /**
     * CIDR formatted string describing network address space
     */
    public readonly subnet!: pulumi.Output<string>;
    /**
     * VLAN on which the network exists
     */
    public readonly vlanId!: pulumi.Output<number>;

    /**
     * Create a Fabric resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FabricArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FabricArgs | FabricState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FabricState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["fabric"] = state ? state.fabric : undefined;
            resourceInputs["gateway"] = state ? state.gateway : undefined;
            resourceInputs["internetNat"] = state ? state.internetNat : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["provisionEndIp"] = state ? state.provisionEndIp : undefined;
            resourceInputs["provisionStartIp"] = state ? state.provisionStartIp : undefined;
            resourceInputs["public"] = state ? state.public : undefined;
            resourceInputs["resolvers"] = state ? state.resolvers : undefined;
            resourceInputs["routes"] = state ? state.routes : undefined;
            resourceInputs["subnet"] = state ? state.subnet : undefined;
            resourceInputs["vlanId"] = state ? state.vlanId : undefined;
        } else {
            const args = argsOrState as FabricArgs | undefined;
            if ((!args || args.provisionEndIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'provisionEndIp'");
            }
            if ((!args || args.provisionStartIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'provisionStartIp'");
            }
            if ((!args || args.subnet === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnet'");
            }
            if ((!args || args.vlanId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vlanId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["gateway"] = args ? args.gateway : undefined;
            resourceInputs["internetNat"] = args ? args.internetNat : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["provisionEndIp"] = args ? args.provisionEndIp : undefined;
            resourceInputs["provisionStartIp"] = args ? args.provisionStartIp : undefined;
            resourceInputs["resolvers"] = args ? args.resolvers : undefined;
            resourceInputs["routes"] = args ? args.routes : undefined;
            resourceInputs["subnet"] = args ? args.subnet : undefined;
            resourceInputs["vlanId"] = args ? args.vlanId : undefined;
            resourceInputs["fabric"] = undefined /*out*/;
            resourceInputs["public"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Fabric.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Fabric resources.
 */
export interface FabricState {
    /**
     * Description of network
     */
    description?: pulumi.Input<string>;
    /**
     * Whether or not this network is on a fabric
     */
    fabric?: pulumi.Input<boolean>;
    /**
     * Gateway IP
     */
    gateway?: pulumi.Input<string>;
    /**
     * Whether or not a NAT zone is provisioned at the Gateway IP address
     */
    internetNat?: pulumi.Input<boolean>;
    /**
     * Network name
     */
    name?: pulumi.Input<string>;
    /**
     * Last assignable IP on the network
     */
    provisionEndIp?: pulumi.Input<string>;
    /**
     * First IP on the network that can be assigned
     */
    provisionStartIp?: pulumi.Input<string>;
    /**
     * Whether or not this is an RFC1918 network
     */
    public?: pulumi.Input<boolean>;
    /**
     * List of IP addresses for DNS resolvers
     */
    resolvers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Map of CIDR block to Gateway IP address
     */
    routes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * CIDR formatted string describing network address space
     */
    subnet?: pulumi.Input<string>;
    /**
     * VLAN on which the network exists
     */
    vlanId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Fabric resource.
 */
export interface FabricArgs {
    /**
     * Description of network
     */
    description?: pulumi.Input<string>;
    /**
     * Gateway IP
     */
    gateway?: pulumi.Input<string>;
    /**
     * Whether or not a NAT zone is provisioned at the Gateway IP address
     */
    internetNat?: pulumi.Input<boolean>;
    /**
     * Network name
     */
    name?: pulumi.Input<string>;
    /**
     * Last assignable IP on the network
     */
    provisionEndIp: pulumi.Input<string>;
    /**
     * First IP on the network that can be assigned
     */
    provisionStartIp: pulumi.Input<string>;
    /**
     * List of IP addresses for DNS resolvers
     */
    resolvers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Map of CIDR block to Gateway IP address
     */
    routes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * CIDR formatted string describing network address space
     */
    subnet: pulumi.Input<string>;
    /**
     * VLAN on which the network exists
     */
    vlanId: pulumi.Input<number>;
}
