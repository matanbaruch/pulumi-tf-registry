// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AppdataDsource extends pulumi.CustomResource {
    /**
     * Get an existing AppdataDsource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppdataDsourceState, opts?: pulumi.CustomResourceOptions): AppdataDsource {
        return new AppdataDsource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'delphix:index/appdataDsource:AppdataDsource';

    /**
     * Returns true if the given object is an instance of AppdataDsource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppdataDsource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppdataDsource.__pulumiType;
    }

    public /*out*/ readonly contentType!: pulumi.Output<string>;
    public /*out*/ readonly creationDate!: pulumi.Output<string>;
    public /*out*/ readonly currentTimeflowId!: pulumi.Output<string>;
    public /*out*/ readonly dataUuid!: pulumi.Output<string>;
    public /*out*/ readonly databaseType!: pulumi.Output<string>;
    public /*out*/ readonly databaseVersion!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly enabled!: pulumi.Output<boolean>;
    public /*out*/ readonly engineId!: pulumi.Output<string>;
    public /*out*/ readonly engineName!: pulumi.Output<string>;
    public readonly environmentUser!: pulumi.Output<string>;
    public readonly excludes!: pulumi.Output<string[] | undefined>;
    public readonly followSymlinks!: pulumi.Output<string[] | undefined>;
    public readonly groupId!: pulumi.Output<string>;
    public /*out*/ readonly groupName!: pulumi.Output<string>;
    public /*out*/ readonly isAppdata!: pulumi.Output<boolean>;
    public /*out*/ readonly isReplica!: pulumi.Output<boolean>;
    public readonly linkType!: pulumi.Output<string>;
    public readonly logSyncEnabled!: pulumi.Output<boolean | undefined>;
    public readonly makeCurrentAccountOwner!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly namespaceId!: pulumi.Output<string>;
    public /*out*/ readonly namespaceName!: pulumi.Output<string>;
    public readonly opsPostSyncs!: pulumi.Output<outputs.AppdataDsourceOpsPostSync[] | undefined>;
    public readonly opsPreSyncs!: pulumi.Output<outputs.AppdataDsourceOpsPreSync[] | undefined>;
    public readonly parameters!: pulumi.Output<string>;
    public /*out*/ readonly pluginVersion!: pulumi.Output<string>;
    public /*out*/ readonly previousTimeflowId!: pulumi.Output<string>;
    public readonly skipWaitForSnapshotCreation!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly sourceId!: pulumi.Output<string>;
    public readonly sourceValue!: pulumi.Output<string>;
    public readonly stagingEnvironment!: pulumi.Output<string>;
    public readonly stagingEnvironmentUser!: pulumi.Output<string | undefined>;
    public readonly stagingMountBase!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly syncParameters!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.AppdataDsourceTag[] | undefined>;
    public readonly waitTime!: pulumi.Output<number | undefined>;

    /**
     * Create a AppdataDsource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppdataDsourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppdataDsourceArgs | AppdataDsourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppdataDsourceState | undefined;
            resourceInputs["contentType"] = state ? state.contentType : undefined;
            resourceInputs["creationDate"] = state ? state.creationDate : undefined;
            resourceInputs["currentTimeflowId"] = state ? state.currentTimeflowId : undefined;
            resourceInputs["dataUuid"] = state ? state.dataUuid : undefined;
            resourceInputs["databaseType"] = state ? state.databaseType : undefined;
            resourceInputs["databaseVersion"] = state ? state.databaseVersion : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["engineId"] = state ? state.engineId : undefined;
            resourceInputs["engineName"] = state ? state.engineName : undefined;
            resourceInputs["environmentUser"] = state ? state.environmentUser : undefined;
            resourceInputs["excludes"] = state ? state.excludes : undefined;
            resourceInputs["followSymlinks"] = state ? state.followSymlinks : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["groupName"] = state ? state.groupName : undefined;
            resourceInputs["isAppdata"] = state ? state.isAppdata : undefined;
            resourceInputs["isReplica"] = state ? state.isReplica : undefined;
            resourceInputs["linkType"] = state ? state.linkType : undefined;
            resourceInputs["logSyncEnabled"] = state ? state.logSyncEnabled : undefined;
            resourceInputs["makeCurrentAccountOwner"] = state ? state.makeCurrentAccountOwner : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespaceId"] = state ? state.namespaceId : undefined;
            resourceInputs["namespaceName"] = state ? state.namespaceName : undefined;
            resourceInputs["opsPostSyncs"] = state ? state.opsPostSyncs : undefined;
            resourceInputs["opsPreSyncs"] = state ? state.opsPreSyncs : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["pluginVersion"] = state ? state.pluginVersion : undefined;
            resourceInputs["previousTimeflowId"] = state ? state.previousTimeflowId : undefined;
            resourceInputs["skipWaitForSnapshotCreation"] = state ? state.skipWaitForSnapshotCreation : undefined;
            resourceInputs["sourceId"] = state ? state.sourceId : undefined;
            resourceInputs["sourceValue"] = state ? state.sourceValue : undefined;
            resourceInputs["stagingEnvironment"] = state ? state.stagingEnvironment : undefined;
            resourceInputs["stagingEnvironmentUser"] = state ? state.stagingEnvironmentUser : undefined;
            resourceInputs["stagingMountBase"] = state ? state.stagingMountBase : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["syncParameters"] = state ? state.syncParameters : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["waitTime"] = state ? state.waitTime : undefined;
        } else {
            const args = argsOrState as AppdataDsourceArgs | undefined;
            if ((!args || args.environmentUser === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentUser'");
            }
            if ((!args || args.groupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            if ((!args || args.linkType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'linkType'");
            }
            if ((!args || args.parameters === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parameters'");
            }
            if ((!args || args.sourceValue === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceValue'");
            }
            if ((!args || args.stagingEnvironment === undefined) && !opts.urn) {
                throw new Error("Missing required property 'stagingEnvironment'");
            }
            if ((!args || args.stagingMountBase === undefined) && !opts.urn) {
                throw new Error("Missing required property 'stagingMountBase'");
            }
            if ((!args || args.syncParameters === undefined) && !opts.urn) {
                throw new Error("Missing required property 'syncParameters'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["environmentUser"] = args ? args.environmentUser : undefined;
            resourceInputs["excludes"] = args ? args.excludes : undefined;
            resourceInputs["followSymlinks"] = args ? args.followSymlinks : undefined;
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["linkType"] = args ? args.linkType : undefined;
            resourceInputs["logSyncEnabled"] = args ? args.logSyncEnabled : undefined;
            resourceInputs["makeCurrentAccountOwner"] = args ? args.makeCurrentAccountOwner : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["opsPostSyncs"] = args ? args.opsPostSyncs : undefined;
            resourceInputs["opsPreSyncs"] = args ? args.opsPreSyncs : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["skipWaitForSnapshotCreation"] = args ? args.skipWaitForSnapshotCreation : undefined;
            resourceInputs["sourceValue"] = args ? args.sourceValue : undefined;
            resourceInputs["stagingEnvironment"] = args ? args.stagingEnvironment : undefined;
            resourceInputs["stagingEnvironmentUser"] = args ? args.stagingEnvironmentUser : undefined;
            resourceInputs["stagingMountBase"] = args ? args.stagingMountBase : undefined;
            resourceInputs["syncParameters"] = args ? args.syncParameters : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["waitTime"] = args ? args.waitTime : undefined;
            resourceInputs["contentType"] = undefined /*out*/;
            resourceInputs["creationDate"] = undefined /*out*/;
            resourceInputs["currentTimeflowId"] = undefined /*out*/;
            resourceInputs["dataUuid"] = undefined /*out*/;
            resourceInputs["databaseType"] = undefined /*out*/;
            resourceInputs["databaseVersion"] = undefined /*out*/;
            resourceInputs["enabled"] = undefined /*out*/;
            resourceInputs["engineId"] = undefined /*out*/;
            resourceInputs["engineName"] = undefined /*out*/;
            resourceInputs["groupName"] = undefined /*out*/;
            resourceInputs["isAppdata"] = undefined /*out*/;
            resourceInputs["isReplica"] = undefined /*out*/;
            resourceInputs["namespaceId"] = undefined /*out*/;
            resourceInputs["namespaceName"] = undefined /*out*/;
            resourceInputs["pluginVersion"] = undefined /*out*/;
            resourceInputs["previousTimeflowId"] = undefined /*out*/;
            resourceInputs["sourceId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppdataDsource.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AppdataDsource resources.
 */
export interface AppdataDsourceState {
    contentType?: pulumi.Input<string>;
    creationDate?: pulumi.Input<string>;
    currentTimeflowId?: pulumi.Input<string>;
    dataUuid?: pulumi.Input<string>;
    databaseType?: pulumi.Input<string>;
    databaseVersion?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    engineId?: pulumi.Input<string>;
    engineName?: pulumi.Input<string>;
    environmentUser?: pulumi.Input<string>;
    excludes?: pulumi.Input<pulumi.Input<string>[]>;
    followSymlinks?: pulumi.Input<pulumi.Input<string>[]>;
    groupId?: pulumi.Input<string>;
    groupName?: pulumi.Input<string>;
    isAppdata?: pulumi.Input<boolean>;
    isReplica?: pulumi.Input<boolean>;
    linkType?: pulumi.Input<string>;
    logSyncEnabled?: pulumi.Input<boolean>;
    makeCurrentAccountOwner?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    namespaceId?: pulumi.Input<string>;
    namespaceName?: pulumi.Input<string>;
    opsPostSyncs?: pulumi.Input<pulumi.Input<inputs.AppdataDsourceOpsPostSync>[]>;
    opsPreSyncs?: pulumi.Input<pulumi.Input<inputs.AppdataDsourceOpsPreSync>[]>;
    parameters?: pulumi.Input<string>;
    pluginVersion?: pulumi.Input<string>;
    previousTimeflowId?: pulumi.Input<string>;
    skipWaitForSnapshotCreation?: pulumi.Input<boolean>;
    sourceId?: pulumi.Input<string>;
    sourceValue?: pulumi.Input<string>;
    stagingEnvironment?: pulumi.Input<string>;
    stagingEnvironmentUser?: pulumi.Input<string>;
    stagingMountBase?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    syncParameters?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.AppdataDsourceTag>[]>;
    waitTime?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a AppdataDsource resource.
 */
export interface AppdataDsourceArgs {
    description?: pulumi.Input<string>;
    environmentUser: pulumi.Input<string>;
    excludes?: pulumi.Input<pulumi.Input<string>[]>;
    followSymlinks?: pulumi.Input<pulumi.Input<string>[]>;
    groupId: pulumi.Input<string>;
    linkType: pulumi.Input<string>;
    logSyncEnabled?: pulumi.Input<boolean>;
    makeCurrentAccountOwner?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    opsPostSyncs?: pulumi.Input<pulumi.Input<inputs.AppdataDsourceOpsPostSync>[]>;
    opsPreSyncs?: pulumi.Input<pulumi.Input<inputs.AppdataDsourceOpsPreSync>[]>;
    parameters: pulumi.Input<string>;
    skipWaitForSnapshotCreation?: pulumi.Input<boolean>;
    sourceValue: pulumi.Input<string>;
    stagingEnvironment: pulumi.Input<string>;
    stagingEnvironmentUser?: pulumi.Input<string>;
    stagingMountBase: pulumi.Input<string>;
    syncParameters: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.AppdataDsourceTag>[]>;
    waitTime?: pulumi.Input<number>;
}
