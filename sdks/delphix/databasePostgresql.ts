// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatabasePostgresql extends pulumi.CustomResource {
    /**
     * Get an existing DatabasePostgresql resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabasePostgresqlState, opts?: pulumi.CustomResourceOptions): DatabasePostgresql {
        return new DatabasePostgresql(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'delphix:index/databasePostgresql:DatabasePostgresql';

    /**
     * Returns true if the given object is an instance of DatabasePostgresql.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabasePostgresql {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabasePostgresql.__pulumiType;
    }

    public /*out*/ readonly appdataSourceType!: pulumi.Output<string>;
    public /*out*/ readonly dataUuid!: pulumi.Output<string>;
    public /*out*/ readonly databaseType!: pulumi.Output<string>;
    public /*out*/ readonly databaseVersion!: pulumi.Output<string>;
    public readonly engineValue!: pulumi.Output<string | undefined>;
    public /*out*/ readonly environmentId!: pulumi.Output<string>;
    public readonly environmentValue!: pulumi.Output<string | undefined>;
    public /*out*/ readonly fqdn!: pulumi.Output<string>;
    public /*out*/ readonly ipAddress!: pulumi.Output<string>;
    public /*out*/ readonly isDsource!: pulumi.Output<boolean>;
    public /*out*/ readonly isReplica!: pulumi.Output<boolean>;
    public /*out*/ readonly jdbcConnectionString!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly namespaceId!: pulumi.Output<string>;
    public /*out*/ readonly namespaceName!: pulumi.Output<string>;
    public /*out*/ readonly pluginVersion!: pulumi.Output<string>;
    public /*out*/ readonly repository!: pulumi.Output<string>;
    public readonly repositoryValue!: pulumi.Output<string>;
    public /*out*/ readonly size!: pulumi.Output<number>;
    public readonly tags!: pulumi.Output<outputs.DatabasePostgresqlTag[] | undefined>;
    public /*out*/ readonly toolkitId!: pulumi.Output<string>;

    /**
     * Create a DatabasePostgresql resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabasePostgresqlArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabasePostgresqlArgs | DatabasePostgresqlState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabasePostgresqlState | undefined;
            resourceInputs["appdataSourceType"] = state ? state.appdataSourceType : undefined;
            resourceInputs["dataUuid"] = state ? state.dataUuid : undefined;
            resourceInputs["databaseType"] = state ? state.databaseType : undefined;
            resourceInputs["databaseVersion"] = state ? state.databaseVersion : undefined;
            resourceInputs["engineValue"] = state ? state.engineValue : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["environmentValue"] = state ? state.environmentValue : undefined;
            resourceInputs["fqdn"] = state ? state.fqdn : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["isDsource"] = state ? state.isDsource : undefined;
            resourceInputs["isReplica"] = state ? state.isReplica : undefined;
            resourceInputs["jdbcConnectionString"] = state ? state.jdbcConnectionString : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespaceId"] = state ? state.namespaceId : undefined;
            resourceInputs["namespaceName"] = state ? state.namespaceName : undefined;
            resourceInputs["pluginVersion"] = state ? state.pluginVersion : undefined;
            resourceInputs["repository"] = state ? state.repository : undefined;
            resourceInputs["repositoryValue"] = state ? state.repositoryValue : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["toolkitId"] = state ? state.toolkitId : undefined;
        } else {
            const args = argsOrState as DatabasePostgresqlArgs | undefined;
            if ((!args || args.repositoryValue === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repositoryValue'");
            }
            resourceInputs["engineValue"] = args ? args.engineValue : undefined;
            resourceInputs["environmentValue"] = args ? args.environmentValue : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["repositoryValue"] = args ? args.repositoryValue : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["appdataSourceType"] = undefined /*out*/;
            resourceInputs["dataUuid"] = undefined /*out*/;
            resourceInputs["databaseType"] = undefined /*out*/;
            resourceInputs["databaseVersion"] = undefined /*out*/;
            resourceInputs["environmentId"] = undefined /*out*/;
            resourceInputs["fqdn"] = undefined /*out*/;
            resourceInputs["ipAddress"] = undefined /*out*/;
            resourceInputs["isDsource"] = undefined /*out*/;
            resourceInputs["isReplica"] = undefined /*out*/;
            resourceInputs["jdbcConnectionString"] = undefined /*out*/;
            resourceInputs["namespaceId"] = undefined /*out*/;
            resourceInputs["namespaceName"] = undefined /*out*/;
            resourceInputs["pluginVersion"] = undefined /*out*/;
            resourceInputs["repository"] = undefined /*out*/;
            resourceInputs["size"] = undefined /*out*/;
            resourceInputs["toolkitId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabasePostgresql.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatabasePostgresql resources.
 */
export interface DatabasePostgresqlState {
    appdataSourceType?: pulumi.Input<string>;
    dataUuid?: pulumi.Input<string>;
    databaseType?: pulumi.Input<string>;
    databaseVersion?: pulumi.Input<string>;
    engineValue?: pulumi.Input<string>;
    environmentId?: pulumi.Input<string>;
    environmentValue?: pulumi.Input<string>;
    fqdn?: pulumi.Input<string>;
    ipAddress?: pulumi.Input<string>;
    isDsource?: pulumi.Input<boolean>;
    isReplica?: pulumi.Input<boolean>;
    jdbcConnectionString?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    namespaceId?: pulumi.Input<string>;
    namespaceName?: pulumi.Input<string>;
    pluginVersion?: pulumi.Input<string>;
    repository?: pulumi.Input<string>;
    repositoryValue?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<inputs.DatabasePostgresqlTag>[]>;
    toolkitId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DatabasePostgresql resource.
 */
export interface DatabasePostgresqlArgs {
    engineValue?: pulumi.Input<string>;
    environmentValue?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    repositoryValue: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.DatabasePostgresqlTag>[]>;
}
