// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Environment extends pulumi.CustomResource {
    /**
     * Get an existing Environment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EnvironmentState, opts?: pulumi.CustomResourceOptions): Environment {
        return new Environment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'delphix:index/environment:Environment';

    /**
     * Returns true if the given object is an instance of Environment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Environment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Environment.__pulumiType;
    }

    public readonly aseDbCyberarkVaultQueryString!: pulumi.Output<string | undefined>;
    public readonly aseDbHashicorpVaultEngine!: pulumi.Output<string | undefined>;
    public readonly aseDbHashicorpVaultSecretKey!: pulumi.Output<string | undefined>;
    public readonly aseDbHashicorpVaultSecretPath!: pulumi.Output<string | undefined>;
    public readonly aseDbHashicorpVaultUsernameKey!: pulumi.Output<string | undefined>;
    public readonly aseDbPassword!: pulumi.Output<string | undefined>;
    public readonly aseDbUseKerberosAuthentication!: pulumi.Output<boolean | undefined>;
    public readonly aseDbUsername!: pulumi.Output<string | undefined>;
    public readonly aseDbVault!: pulumi.Output<string | undefined>;
    public readonly clusterHome!: pulumi.Output<string | undefined>;
    public readonly connectorPort!: pulumi.Output<number | undefined>;
    public readonly cyberarkVaultQueryString!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly dspKeystoreAlias!: pulumi.Output<string | undefined>;
    public readonly dspKeystorePassword!: pulumi.Output<string | undefined>;
    public readonly dspKeystorePath!: pulumi.Output<string | undefined>;
    public readonly dspTruststorePassword!: pulumi.Output<string | undefined>;
    public readonly dspTruststorePath!: pulumi.Output<string | undefined>;
    public /*out*/ readonly enabled!: pulumi.Output<boolean>;
    public readonly engineId!: pulumi.Output<string>;
    public readonly hashicorpVaultEngine!: pulumi.Output<string | undefined>;
    public readonly hashicorpVaultSecretKey!: pulumi.Output<string | undefined>;
    public readonly hashicorpVaultSecretPath!: pulumi.Output<string | undefined>;
    public readonly hashicorpVaultUsernameKey!: pulumi.Output<string | undefined>;
    public readonly hostname!: pulumi.Output<string>;
    public /*out*/ readonly hosts!: pulumi.Output<outputs.EnvironmentHost[]>;
    public readonly isCluster!: pulumi.Output<boolean | undefined>;
    public readonly isTarget!: pulumi.Output<boolean | undefined>;
    public readonly javaHome!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly namespace!: pulumi.Output<string>;
    public readonly nfsAddresses!: pulumi.Output<string[] | undefined>;
    public readonly osName!: pulumi.Output<string>;
    public readonly password!: pulumi.Output<string | undefined>;
    public /*out*/ readonly repositories!: pulumi.Output<outputs.EnvironmentRepository[]>;
    public readonly sshPort!: pulumi.Output<number | undefined>;
    public readonly stagingEnvironment!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<outputs.EnvironmentTag[] | undefined>;
    public readonly toolkitPath!: pulumi.Output<string | undefined>;
    public readonly useEnginePublicKey!: pulumi.Output<boolean | undefined>;
    public readonly useKerberosAuthentication!: pulumi.Output<boolean | undefined>;
    public readonly username!: pulumi.Output<string | undefined>;
    public readonly vault!: pulumi.Output<string | undefined>;

    /**
     * Create a Environment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EnvironmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EnvironmentArgs | EnvironmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EnvironmentState | undefined;
            resourceInputs["aseDbCyberarkVaultQueryString"] = state ? state.aseDbCyberarkVaultQueryString : undefined;
            resourceInputs["aseDbHashicorpVaultEngine"] = state ? state.aseDbHashicorpVaultEngine : undefined;
            resourceInputs["aseDbHashicorpVaultSecretKey"] = state ? state.aseDbHashicorpVaultSecretKey : undefined;
            resourceInputs["aseDbHashicorpVaultSecretPath"] = state ? state.aseDbHashicorpVaultSecretPath : undefined;
            resourceInputs["aseDbHashicorpVaultUsernameKey"] = state ? state.aseDbHashicorpVaultUsernameKey : undefined;
            resourceInputs["aseDbPassword"] = state ? state.aseDbPassword : undefined;
            resourceInputs["aseDbUseKerberosAuthentication"] = state ? state.aseDbUseKerberosAuthentication : undefined;
            resourceInputs["aseDbUsername"] = state ? state.aseDbUsername : undefined;
            resourceInputs["aseDbVault"] = state ? state.aseDbVault : undefined;
            resourceInputs["clusterHome"] = state ? state.clusterHome : undefined;
            resourceInputs["connectorPort"] = state ? state.connectorPort : undefined;
            resourceInputs["cyberarkVaultQueryString"] = state ? state.cyberarkVaultQueryString : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dspKeystoreAlias"] = state ? state.dspKeystoreAlias : undefined;
            resourceInputs["dspKeystorePassword"] = state ? state.dspKeystorePassword : undefined;
            resourceInputs["dspKeystorePath"] = state ? state.dspKeystorePath : undefined;
            resourceInputs["dspTruststorePassword"] = state ? state.dspTruststorePassword : undefined;
            resourceInputs["dspTruststorePath"] = state ? state.dspTruststorePath : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["engineId"] = state ? state.engineId : undefined;
            resourceInputs["hashicorpVaultEngine"] = state ? state.hashicorpVaultEngine : undefined;
            resourceInputs["hashicorpVaultSecretKey"] = state ? state.hashicorpVaultSecretKey : undefined;
            resourceInputs["hashicorpVaultSecretPath"] = state ? state.hashicorpVaultSecretPath : undefined;
            resourceInputs["hashicorpVaultUsernameKey"] = state ? state.hashicorpVaultUsernameKey : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["hosts"] = state ? state.hosts : undefined;
            resourceInputs["isCluster"] = state ? state.isCluster : undefined;
            resourceInputs["isTarget"] = state ? state.isTarget : undefined;
            resourceInputs["javaHome"] = state ? state.javaHome : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["nfsAddresses"] = state ? state.nfsAddresses : undefined;
            resourceInputs["osName"] = state ? state.osName : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["repositories"] = state ? state.repositories : undefined;
            resourceInputs["sshPort"] = state ? state.sshPort : undefined;
            resourceInputs["stagingEnvironment"] = state ? state.stagingEnvironment : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["toolkitPath"] = state ? state.toolkitPath : undefined;
            resourceInputs["useEnginePublicKey"] = state ? state.useEnginePublicKey : undefined;
            resourceInputs["useKerberosAuthentication"] = state ? state.useKerberosAuthentication : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["vault"] = state ? state.vault : undefined;
        } else {
            const args = argsOrState as EnvironmentArgs | undefined;
            if ((!args || args.engineId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'engineId'");
            }
            if ((!args || args.hostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostname'");
            }
            if ((!args || args.osName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'osName'");
            }
            resourceInputs["aseDbCyberarkVaultQueryString"] = args ? args.aseDbCyberarkVaultQueryString : undefined;
            resourceInputs["aseDbHashicorpVaultEngine"] = args ? args.aseDbHashicorpVaultEngine : undefined;
            resourceInputs["aseDbHashicorpVaultSecretKey"] = args ? args.aseDbHashicorpVaultSecretKey : undefined;
            resourceInputs["aseDbHashicorpVaultSecretPath"] = args ? args.aseDbHashicorpVaultSecretPath : undefined;
            resourceInputs["aseDbHashicorpVaultUsernameKey"] = args ? args.aseDbHashicorpVaultUsernameKey : undefined;
            resourceInputs["aseDbPassword"] = args ? args.aseDbPassword : undefined;
            resourceInputs["aseDbUseKerberosAuthentication"] = args ? args.aseDbUseKerberosAuthentication : undefined;
            resourceInputs["aseDbUsername"] = args ? args.aseDbUsername : undefined;
            resourceInputs["aseDbVault"] = args ? args.aseDbVault : undefined;
            resourceInputs["clusterHome"] = args ? args.clusterHome : undefined;
            resourceInputs["connectorPort"] = args ? args.connectorPort : undefined;
            resourceInputs["cyberarkVaultQueryString"] = args ? args.cyberarkVaultQueryString : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dspKeystoreAlias"] = args ? args.dspKeystoreAlias : undefined;
            resourceInputs["dspKeystorePassword"] = args ? args.dspKeystorePassword : undefined;
            resourceInputs["dspKeystorePath"] = args ? args.dspKeystorePath : undefined;
            resourceInputs["dspTruststorePassword"] = args ? args.dspTruststorePassword : undefined;
            resourceInputs["dspTruststorePath"] = args ? args.dspTruststorePath : undefined;
            resourceInputs["engineId"] = args ? args.engineId : undefined;
            resourceInputs["hashicorpVaultEngine"] = args ? args.hashicorpVaultEngine : undefined;
            resourceInputs["hashicorpVaultSecretKey"] = args ? args.hashicorpVaultSecretKey : undefined;
            resourceInputs["hashicorpVaultSecretPath"] = args ? args.hashicorpVaultSecretPath : undefined;
            resourceInputs["hashicorpVaultUsernameKey"] = args ? args.hashicorpVaultUsernameKey : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["isCluster"] = args ? args.isCluster : undefined;
            resourceInputs["isTarget"] = args ? args.isTarget : undefined;
            resourceInputs["javaHome"] = args ? args.javaHome : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nfsAddresses"] = args ? args.nfsAddresses : undefined;
            resourceInputs["osName"] = args ? args.osName : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["sshPort"] = args ? args.sshPort : undefined;
            resourceInputs["stagingEnvironment"] = args ? args.stagingEnvironment : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["toolkitPath"] = args ? args.toolkitPath : undefined;
            resourceInputs["useEnginePublicKey"] = args ? args.useEnginePublicKey : undefined;
            resourceInputs["useKerberosAuthentication"] = args ? args.useKerberosAuthentication : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["vault"] = args ? args.vault : undefined;
            resourceInputs["enabled"] = undefined /*out*/;
            resourceInputs["hosts"] = undefined /*out*/;
            resourceInputs["namespace"] = undefined /*out*/;
            resourceInputs["repositories"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Environment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Environment resources.
 */
export interface EnvironmentState {
    aseDbCyberarkVaultQueryString?: pulumi.Input<string>;
    aseDbHashicorpVaultEngine?: pulumi.Input<string>;
    aseDbHashicorpVaultSecretKey?: pulumi.Input<string>;
    aseDbHashicorpVaultSecretPath?: pulumi.Input<string>;
    aseDbHashicorpVaultUsernameKey?: pulumi.Input<string>;
    aseDbPassword?: pulumi.Input<string>;
    aseDbUseKerberosAuthentication?: pulumi.Input<boolean>;
    aseDbUsername?: pulumi.Input<string>;
    aseDbVault?: pulumi.Input<string>;
    clusterHome?: pulumi.Input<string>;
    connectorPort?: pulumi.Input<number>;
    cyberarkVaultQueryString?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dspKeystoreAlias?: pulumi.Input<string>;
    dspKeystorePassword?: pulumi.Input<string>;
    dspKeystorePath?: pulumi.Input<string>;
    dspTruststorePassword?: pulumi.Input<string>;
    dspTruststorePath?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    engineId?: pulumi.Input<string>;
    hashicorpVaultEngine?: pulumi.Input<string>;
    hashicorpVaultSecretKey?: pulumi.Input<string>;
    hashicorpVaultSecretPath?: pulumi.Input<string>;
    hashicorpVaultUsernameKey?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    hosts?: pulumi.Input<pulumi.Input<inputs.EnvironmentHost>[]>;
    isCluster?: pulumi.Input<boolean>;
    isTarget?: pulumi.Input<boolean>;
    javaHome?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    nfsAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    osName?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    repositories?: pulumi.Input<pulumi.Input<inputs.EnvironmentRepository>[]>;
    sshPort?: pulumi.Input<number>;
    stagingEnvironment?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.EnvironmentTag>[]>;
    toolkitPath?: pulumi.Input<string>;
    useEnginePublicKey?: pulumi.Input<boolean>;
    useKerberosAuthentication?: pulumi.Input<boolean>;
    username?: pulumi.Input<string>;
    vault?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Environment resource.
 */
export interface EnvironmentArgs {
    aseDbCyberarkVaultQueryString?: pulumi.Input<string>;
    aseDbHashicorpVaultEngine?: pulumi.Input<string>;
    aseDbHashicorpVaultSecretKey?: pulumi.Input<string>;
    aseDbHashicorpVaultSecretPath?: pulumi.Input<string>;
    aseDbHashicorpVaultUsernameKey?: pulumi.Input<string>;
    aseDbPassword?: pulumi.Input<string>;
    aseDbUseKerberosAuthentication?: pulumi.Input<boolean>;
    aseDbUsername?: pulumi.Input<string>;
    aseDbVault?: pulumi.Input<string>;
    clusterHome?: pulumi.Input<string>;
    connectorPort?: pulumi.Input<number>;
    cyberarkVaultQueryString?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dspKeystoreAlias?: pulumi.Input<string>;
    dspKeystorePassword?: pulumi.Input<string>;
    dspKeystorePath?: pulumi.Input<string>;
    dspTruststorePassword?: pulumi.Input<string>;
    dspTruststorePath?: pulumi.Input<string>;
    engineId: pulumi.Input<string>;
    hashicorpVaultEngine?: pulumi.Input<string>;
    hashicorpVaultSecretKey?: pulumi.Input<string>;
    hashicorpVaultSecretPath?: pulumi.Input<string>;
    hashicorpVaultUsernameKey?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    isCluster?: pulumi.Input<boolean>;
    isTarget?: pulumi.Input<boolean>;
    javaHome?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nfsAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    osName: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    sshPort?: pulumi.Input<number>;
    stagingEnvironment?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.EnvironmentTag>[]>;
    toolkitPath?: pulumi.Input<string>;
    useEnginePublicKey?: pulumi.Input<boolean>;
    useKerberosAuthentication?: pulumi.Input<boolean>;
    username?: pulumi.Input<string>;
    vault?: pulumi.Input<string>;
}
