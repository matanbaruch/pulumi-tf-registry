// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getUser(args: GetUserArgs, opts?: pulumi.InvokeOptions): Promise<GetUserResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("astro:index/getUser:getUser", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getUser.
 */
export interface GetUserArgs {
    id: string;
}

/**
 * A collection of values returned by getUser.
 */
export interface GetUserResult {
    readonly avatarUrl: string;
    readonly createdAt: string;
    readonly deploymentRoles: outputs.GetUserDeploymentRole[];
    readonly fullName: string;
    readonly id: string;
    readonly organizationRole: string;
    readonly status: string;
    readonly updatedAt: string;
    readonly username: string;
    readonly workspaceRoles: outputs.GetUserWorkspaceRole[];
}
export function getUserOutput(args: GetUserOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetUserResult> {
    return pulumi.output(args).apply((a: any) => getUser(a, opts))
}

/**
 * A collection of arguments for invoking getUser.
 */
export interface GetUserOutputArgs {
    id: pulumi.Input<string>;
}
