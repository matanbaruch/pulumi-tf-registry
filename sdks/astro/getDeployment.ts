// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDeployment(args: GetDeploymentArgs, opts?: pulumi.InvokeOptions): Promise<GetDeploymentResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("astro:index/getDeployment:getDeployment", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDeployment.
 */
export interface GetDeploymentArgs {
    id: string;
}

/**
 * A collection of values returned by getDeployment.
 */
export interface GetDeploymentResult {
    readonly airflowVersion: string;
    readonly astroRuntimeVersion: string;
    readonly cloudProvider: string;
    readonly clusterId: string;
    readonly contactEmails: string[];
    readonly createdAt: string;
    readonly createdBy: outputs.GetDeploymentCreatedBy;
    readonly dagTarballVersion: string;
    readonly defaultTaskPodCpu: string;
    readonly defaultTaskPodMemory: string;
    readonly description: string;
    readonly desiredDagTarballVersion: string;
    readonly environmentVariables: outputs.GetDeploymentEnvironmentVariable[];
    readonly executor: string;
    readonly externalIps: string[];
    readonly id: string;
    readonly imageRepository: string;
    readonly imageTag: string;
    readonly imageVersion: string;
    readonly isCicdEnforced: boolean;
    readonly isDagDeployEnabled: boolean;
    readonly isDevelopmentMode: boolean;
    readonly isHighAvailability: boolean;
    readonly name: string;
    readonly namespace: string;
    readonly oidcIssuerUrl: string;
    readonly region: string;
    readonly resourceQuotaCpu: string;
    readonly resourceQuotaMemory: string;
    readonly scalingSpec: outputs.GetDeploymentScalingSpec;
    readonly scalingStatus: outputs.GetDeploymentScalingStatus;
    readonly schedulerAu: number;
    readonly schedulerCpu: string;
    readonly schedulerMemory: string;
    readonly schedulerReplicas: number;
    readonly schedulerSize: string;
    readonly status: string;
    readonly statusReason: string;
    readonly taskPodNodePoolId: string;
    readonly type: string;
    readonly updatedAt: string;
    readonly updatedBy: outputs.GetDeploymentUpdatedBy;
    readonly webserverAirflowApiUrl: string;
    readonly webserverIngressHostname: string;
    readonly webserverUrl: string;
    readonly workerQueues: outputs.GetDeploymentWorkerQueue[];
    readonly workloadIdentity: string;
    readonly workspaceId: string;
}
export function getDeploymentOutput(args: GetDeploymentOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDeploymentResult> {
    return pulumi.output(args).apply((a: any) => getDeployment(a, opts))
}

/**
 * A collection of arguments for invoking getDeployment.
 */
export interface GetDeploymentOutputArgs {
    id: pulumi.Input<string>;
}
