// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCluster(args: GetClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetClusterResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("astro:index/getCluster:getCluster", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCluster.
 */
export interface GetClusterArgs {
    id: string;
}

/**
 * A collection of values returned by getCluster.
 */
export interface GetClusterResult {
    readonly cloudProvider: string;
    readonly createdAt: string;
    readonly dbInstanceType: string;
    readonly healthStatus: outputs.GetClusterHealthStatus;
    readonly id: string;
    readonly isLimited: boolean;
    readonly metadata: outputs.GetClusterMetadata;
    readonly name: string;
    readonly nodePools: outputs.GetClusterNodePool[];
    readonly podSubnetRange: string;
    readonly providerAccount: string;
    readonly region: string;
    readonly servicePeeringRange: string;
    readonly serviceSubnetRange: string;
    readonly status: string;
    readonly tags: outputs.GetClusterTag[];
    readonly tenantId: string;
    readonly type: string;
    readonly updatedAt: string;
    readonly vpcSubnetRange: string;
    readonly workspaceIds: string[];
}
export function getClusterOutput(args: GetClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetClusterResult> {
    return pulumi.output(args).apply((a: any) => getCluster(a, opts))
}

/**
 * A collection of arguments for invoking getCluster.
 */
export interface GetClusterOutputArgs {
    id: pulumi.Input<string>;
}
