// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getClusters(args?: GetClustersArgs, opts?: pulumi.InvokeOptions): Promise<GetClustersResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("astro:index/getClusters:getClusters", {
        "cloudProvider": args.cloudProvider,
        "names": args.names,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getClusters.
 */
export interface GetClustersArgs {
    cloudProvider?: string;
    names?: string[];
}

/**
 * A collection of values returned by getClusters.
 */
export interface GetClustersResult {
    readonly cloudProvider?: string;
    readonly clusters: outputs.GetClustersCluster[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly names?: string[];
}
export function getClustersOutput(args?: GetClustersOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetClustersResult> {
    return pulumi.output(args).apply((a: any) => getClusters(a, opts))
}

/**
 * A collection of arguments for invoking getClusters.
 */
export interface GetClustersOutputArgs {
    cloudProvider?: pulumi.Input<string>;
    names?: pulumi.Input<pulumi.Input<string>[]>;
}
