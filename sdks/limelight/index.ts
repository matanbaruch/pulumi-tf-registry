// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { DeliveryArgs, DeliveryState } from "./delivery";
export type Delivery = import("./delivery").Delivery;
export const Delivery: typeof import("./delivery").Delivery = null as any;
utilities.lazyLoad(exports, ["Delivery"], () => require("./delivery"));

export { EdgefunctionArgs, EdgefunctionState } from "./edgefunction";
export type Edgefunction = import("./edgefunction").Edgefunction;
export const Edgefunction: typeof import("./edgefunction").Edgefunction = null as any;
utilities.lazyLoad(exports, ["Edgefunction"], () => require("./edgefunction"));

export { EdgefunctionAliasArgs, EdgefunctionAliasState } from "./edgefunctionAlias";
export type EdgefunctionAlias = import("./edgefunctionAlias").EdgefunctionAlias;
export const EdgefunctionAlias: typeof import("./edgefunctionAlias").EdgefunctionAlias = null as any;
utilities.lazyLoad(exports, ["EdgefunctionAlias"], () => require("./edgefunctionAlias"));

export { GetIpRangesArgs, GetIpRangesResult, GetIpRangesOutputArgs } from "./getIpRanges";
export const getIpRanges: typeof import("./getIpRanges").getIpRanges = null as any;
export const getIpRangesOutput: typeof import("./getIpRanges").getIpRangesOutput = null as any;
utilities.lazyLoad(exports, ["getIpRanges","getIpRangesOutput"], () => require("./getIpRanges"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "limelight:index/delivery:Delivery":
                return new Delivery(name, <any>undefined, { urn })
            case "limelight:index/edgefunction:Edgefunction":
                return new Edgefunction(name, <any>undefined, { urn })
            case "limelight:index/edgefunctionAlias:EdgefunctionAlias":
                return new EdgefunctionAlias(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("limelight", "index/delivery", _module)
pulumi.runtime.registerResourceModule("limelight", "index/edgefunction", _module)
pulumi.runtime.registerResourceModule("limelight", "index/edgefunctionAlias", _module)
pulumi.runtime.registerResourcePackage("limelight", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:limelight") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
