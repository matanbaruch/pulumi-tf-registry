// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Edgefunction extends pulumi.CustomResource {
    /**
     * Get an existing Edgefunction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EdgefunctionState, opts?: pulumi.CustomResourceOptions): Edgefunction {
        return new Edgefunction(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'limelight:index/edgefunction:Edgefunction';

    /**
     * Returns true if the given object is an instance of Edgefunction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Edgefunction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Edgefunction.__pulumiType;
    }

    public readonly canDebug!: pulumi.Output<boolean | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly environmentVariables!: pulumi.Output<outputs.EdgefunctionEnvironmentVariable[] | undefined>;
    public readonly functionArchive!: pulumi.Output<string>;
    public readonly functionSha256!: pulumi.Output<string>;
    public readonly handler!: pulumi.Output<string>;
    public readonly memory!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly reservedConcurrency!: pulumi.Output<number | undefined>;
    public /*out*/ readonly revisionId!: pulumi.Output<number>;
    public readonly runtime!: pulumi.Output<string>;
    public readonly shortname!: pulumi.Output<string>;
    public readonly timeout!: pulumi.Output<number | undefined>;

    /**
     * Create a Edgefunction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EdgefunctionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EdgefunctionArgs | EdgefunctionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EdgefunctionState | undefined;
            resourceInputs["canDebug"] = state ? state.canDebug : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["environmentVariables"] = state ? state.environmentVariables : undefined;
            resourceInputs["functionArchive"] = state ? state.functionArchive : undefined;
            resourceInputs["functionSha256"] = state ? state.functionSha256 : undefined;
            resourceInputs["handler"] = state ? state.handler : undefined;
            resourceInputs["memory"] = state ? state.memory : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["reservedConcurrency"] = state ? state.reservedConcurrency : undefined;
            resourceInputs["revisionId"] = state ? state.revisionId : undefined;
            resourceInputs["runtime"] = state ? state.runtime : undefined;
            resourceInputs["shortname"] = state ? state.shortname : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
        } else {
            const args = argsOrState as EdgefunctionArgs | undefined;
            if ((!args || args.functionArchive === undefined) && !opts.urn) {
                throw new Error("Missing required property 'functionArchive'");
            }
            if ((!args || args.functionSha256 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'functionSha256'");
            }
            if ((!args || args.handler === undefined) && !opts.urn) {
                throw new Error("Missing required property 'handler'");
            }
            if ((!args || args.runtime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'runtime'");
            }
            if ((!args || args.shortname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shortname'");
            }
            resourceInputs["canDebug"] = args ? args.canDebug : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["environmentVariables"] = args ? args.environmentVariables : undefined;
            resourceInputs["functionArchive"] = args ? args.functionArchive : undefined;
            resourceInputs["functionSha256"] = args ? args.functionSha256 : undefined;
            resourceInputs["handler"] = args ? args.handler : undefined;
            resourceInputs["memory"] = args ? args.memory : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["reservedConcurrency"] = args ? args.reservedConcurrency : undefined;
            resourceInputs["runtime"] = args ? args.runtime : undefined;
            resourceInputs["shortname"] = args ? args.shortname : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["revisionId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Edgefunction.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Edgefunction resources.
 */
export interface EdgefunctionState {
    canDebug?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    environmentVariables?: pulumi.Input<pulumi.Input<inputs.EdgefunctionEnvironmentVariable>[]>;
    functionArchive?: pulumi.Input<string>;
    functionSha256?: pulumi.Input<string>;
    handler?: pulumi.Input<string>;
    memory?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    reservedConcurrency?: pulumi.Input<number>;
    revisionId?: pulumi.Input<number>;
    runtime?: pulumi.Input<string>;
    shortname?: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Edgefunction resource.
 */
export interface EdgefunctionArgs {
    canDebug?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    environmentVariables?: pulumi.Input<pulumi.Input<inputs.EdgefunctionEnvironmentVariable>[]>;
    functionArchive: pulumi.Input<string>;
    functionSha256: pulumi.Input<string>;
    handler: pulumi.Input<string>;
    memory?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    reservedConcurrency?: pulumi.Input<number>;
    runtime: pulumi.Input<string>;
    shortname: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
}
