// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Delivery extends pulumi.CustomResource {
    /**
     * Get an existing Delivery resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeliveryState, opts?: pulumi.CustomResourceOptions): Delivery {
        return new Delivery(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'limelight:index/delivery:Delivery';

    /**
     * Returns true if the given object is an instance of Delivery.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Delivery {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Delivery.__pulumiType;
    }

    public readonly protocolSets!: pulumi.Output<outputs.DeliveryProtocolSet[]>;
    public readonly publishedHostname!: pulumi.Output<string>;
    public readonly publishedPath!: pulumi.Output<string>;
    public readonly serviceProfile!: pulumi.Output<string | undefined>;
    public readonly shortname!: pulumi.Output<string>;
    public readonly sourceHostname!: pulumi.Output<string>;
    public readonly sourcePath!: pulumi.Output<string>;
    public /*out*/ readonly versionNumber!: pulumi.Output<number>;

    /**
     * Create a Delivery resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeliveryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeliveryArgs | DeliveryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeliveryState | undefined;
            resourceInputs["protocolSets"] = state ? state.protocolSets : undefined;
            resourceInputs["publishedHostname"] = state ? state.publishedHostname : undefined;
            resourceInputs["publishedPath"] = state ? state.publishedPath : undefined;
            resourceInputs["serviceProfile"] = state ? state.serviceProfile : undefined;
            resourceInputs["shortname"] = state ? state.shortname : undefined;
            resourceInputs["sourceHostname"] = state ? state.sourceHostname : undefined;
            resourceInputs["sourcePath"] = state ? state.sourcePath : undefined;
            resourceInputs["versionNumber"] = state ? state.versionNumber : undefined;
        } else {
            const args = argsOrState as DeliveryArgs | undefined;
            if ((!args || args.protocolSets === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocolSets'");
            }
            if ((!args || args.publishedHostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'publishedHostname'");
            }
            if ((!args || args.publishedPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'publishedPath'");
            }
            if ((!args || args.shortname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shortname'");
            }
            if ((!args || args.sourceHostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceHostname'");
            }
            if ((!args || args.sourcePath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourcePath'");
            }
            resourceInputs["protocolSets"] = args ? args.protocolSets : undefined;
            resourceInputs["publishedHostname"] = args ? args.publishedHostname : undefined;
            resourceInputs["publishedPath"] = args ? args.publishedPath : undefined;
            resourceInputs["serviceProfile"] = args ? args.serviceProfile : undefined;
            resourceInputs["shortname"] = args ? args.shortname : undefined;
            resourceInputs["sourceHostname"] = args ? args.sourceHostname : undefined;
            resourceInputs["sourcePath"] = args ? args.sourcePath : undefined;
            resourceInputs["versionNumber"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Delivery.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Delivery resources.
 */
export interface DeliveryState {
    protocolSets?: pulumi.Input<pulumi.Input<inputs.DeliveryProtocolSet>[]>;
    publishedHostname?: pulumi.Input<string>;
    publishedPath?: pulumi.Input<string>;
    serviceProfile?: pulumi.Input<string>;
    shortname?: pulumi.Input<string>;
    sourceHostname?: pulumi.Input<string>;
    sourcePath?: pulumi.Input<string>;
    versionNumber?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Delivery resource.
 */
export interface DeliveryArgs {
    protocolSets: pulumi.Input<pulumi.Input<inputs.DeliveryProtocolSet>[]>;
    publishedHostname: pulumi.Input<string>;
    publishedPath: pulumi.Input<string>;
    serviceProfile?: pulumi.Input<string>;
    shortname: pulumi.Input<string>;
    sourceHostname: pulumi.Input<string>;
    sourcePath: pulumi.Input<string>;
}
