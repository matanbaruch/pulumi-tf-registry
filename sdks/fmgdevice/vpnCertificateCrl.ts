// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VpnCertificateCrl extends pulumi.CustomResource {
    /**
     * Get an existing VpnCertificateCrl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpnCertificateCrlState, opts?: pulumi.CustomResourceOptions): VpnCertificateCrl {
        return new VpnCertificateCrl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/vpnCertificateCrl:VpnCertificateCrl';

    /**
     * Returns true if the given object is an instance of VpnCertificateCrl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpnCertificateCrl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpnCertificateCrl.__pulumiType;
    }

    public readonly crl!: pulumi.Output<string | undefined>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly deviceVdom!: pulumi.Output<string>;
    public readonly httpUrl!: pulumi.Output<string | undefined>;
    public readonly lastUpdated!: pulumi.Output<number | undefined>;
    public readonly ldapPasswords!: pulumi.Output<string[]>;
    public readonly ldapServers!: pulumi.Output<string[]>;
    public readonly ldapUsername!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly range!: pulumi.Output<string>;
    public readonly scepCerts!: pulumi.Output<string[]>;
    public readonly scepUrl!: pulumi.Output<string | undefined>;
    public readonly source!: pulumi.Output<string>;
    public readonly sourceIp!: pulumi.Output<string>;
    public readonly updateInterval!: pulumi.Output<number | undefined>;
    public readonly updateVdoms!: pulumi.Output<string[]>;

    /**
     * Create a VpnCertificateCrl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VpnCertificateCrlArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpnCertificateCrlArgs | VpnCertificateCrlState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpnCertificateCrlState | undefined;
            resourceInputs["crl"] = state ? state.crl : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["deviceVdom"] = state ? state.deviceVdom : undefined;
            resourceInputs["httpUrl"] = state ? state.httpUrl : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["ldapPasswords"] = state ? state.ldapPasswords : undefined;
            resourceInputs["ldapServers"] = state ? state.ldapServers : undefined;
            resourceInputs["ldapUsername"] = state ? state.ldapUsername : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["range"] = state ? state.range : undefined;
            resourceInputs["scepCerts"] = state ? state.scepCerts : undefined;
            resourceInputs["scepUrl"] = state ? state.scepUrl : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["sourceIp"] = state ? state.sourceIp : undefined;
            resourceInputs["updateInterval"] = state ? state.updateInterval : undefined;
            resourceInputs["updateVdoms"] = state ? state.updateVdoms : undefined;
        } else {
            const args = argsOrState as VpnCertificateCrlArgs | undefined;
            resourceInputs["crl"] = args ? args.crl : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["deviceVdom"] = args ? args.deviceVdom : undefined;
            resourceInputs["httpUrl"] = args ? args.httpUrl : undefined;
            resourceInputs["lastUpdated"] = args ? args.lastUpdated : undefined;
            resourceInputs["ldapPasswords"] = args?.ldapPasswords ? pulumi.secret(args.ldapPasswords) : undefined;
            resourceInputs["ldapServers"] = args ? args.ldapServers : undefined;
            resourceInputs["ldapUsername"] = args ? args.ldapUsername : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["range"] = args ? args.range : undefined;
            resourceInputs["scepCerts"] = args ? args.scepCerts : undefined;
            resourceInputs["scepUrl"] = args ? args.scepUrl : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["sourceIp"] = args ? args.sourceIp : undefined;
            resourceInputs["updateInterval"] = args ? args.updateInterval : undefined;
            resourceInputs["updateVdoms"] = args ? args.updateVdoms : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["ldapPasswords"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(VpnCertificateCrl.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpnCertificateCrl resources.
 */
export interface VpnCertificateCrlState {
    crl?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    httpUrl?: pulumi.Input<string>;
    lastUpdated?: pulumi.Input<number>;
    ldapPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    ldapServers?: pulumi.Input<pulumi.Input<string>[]>;
    ldapUsername?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    range?: pulumi.Input<string>;
    scepCerts?: pulumi.Input<pulumi.Input<string>[]>;
    scepUrl?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    sourceIp?: pulumi.Input<string>;
    updateInterval?: pulumi.Input<number>;
    updateVdoms?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a VpnCertificateCrl resource.
 */
export interface VpnCertificateCrlArgs {
    crl?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    httpUrl?: pulumi.Input<string>;
    lastUpdated?: pulumi.Input<number>;
    ldapPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    ldapServers?: pulumi.Input<pulumi.Input<string>[]>;
    ldapUsername?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    range?: pulumi.Input<string>;
    scepCerts?: pulumi.Input<pulumi.Input<string>[]>;
    scepUrl?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    sourceIp?: pulumi.Input<string>;
    updateInterval?: pulumi.Input<number>;
    updateVdoms?: pulumi.Input<pulumi.Input<string>[]>;
}
