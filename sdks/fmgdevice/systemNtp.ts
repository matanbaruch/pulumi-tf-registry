// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SystemNtp extends pulumi.CustomResource {
    /**
     * Get an existing SystemNtp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemNtpState, opts?: pulumi.CustomResourceOptions): SystemNtp {
        return new SystemNtp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/systemNtp:SystemNtp';

    /**
     * Returns true if the given object is an instance of SystemNtp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemNtp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemNtp.__pulumiType;
    }

    public readonly authentication!: pulumi.Output<string>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly interfaces!: pulumi.Output<string[]>;
    public readonly keyId!: pulumi.Output<number | undefined>;
    public readonly keyType!: pulumi.Output<string>;
    public readonly keys!: pulumi.Output<string[]>;
    public readonly ntpservers!: pulumi.Output<outputs.SystemNtpNtpserver[] | undefined>;
    public readonly ntpsync!: pulumi.Output<string>;
    public readonly serverMode!: pulumi.Output<string>;
    public readonly sourceIp!: pulumi.Output<string>;
    public readonly sourceIp6!: pulumi.Output<string>;
    public readonly syncinterval!: pulumi.Output<number>;
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a SystemNtp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemNtpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemNtpArgs | SystemNtpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemNtpState | undefined;
            resourceInputs["authentication"] = state ? state.authentication : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["interfaces"] = state ? state.interfaces : undefined;
            resourceInputs["keyId"] = state ? state.keyId : undefined;
            resourceInputs["keyType"] = state ? state.keyType : undefined;
            resourceInputs["keys"] = state ? state.keys : undefined;
            resourceInputs["ntpservers"] = state ? state.ntpservers : undefined;
            resourceInputs["ntpsync"] = state ? state.ntpsync : undefined;
            resourceInputs["serverMode"] = state ? state.serverMode : undefined;
            resourceInputs["sourceIp"] = state ? state.sourceIp : undefined;
            resourceInputs["sourceIp6"] = state ? state.sourceIp6 : undefined;
            resourceInputs["syncinterval"] = state ? state.syncinterval : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as SystemNtpArgs | undefined;
            resourceInputs["authentication"] = args ? args.authentication : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["interfaces"] = args ? args.interfaces : undefined;
            resourceInputs["keyId"] = args ? args.keyId : undefined;
            resourceInputs["keyType"] = args ? args.keyType : undefined;
            resourceInputs["keys"] = args?.keys ? pulumi.secret(args.keys) : undefined;
            resourceInputs["ntpservers"] = args ? args.ntpservers : undefined;
            resourceInputs["ntpsync"] = args ? args.ntpsync : undefined;
            resourceInputs["serverMode"] = args ? args.serverMode : undefined;
            resourceInputs["sourceIp"] = args ? args.sourceIp : undefined;
            resourceInputs["sourceIp6"] = args ? args.sourceIp6 : undefined;
            resourceInputs["syncinterval"] = args ? args.syncinterval : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["keys"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SystemNtp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemNtp resources.
 */
export interface SystemNtpState {
    authentication?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    keyId?: pulumi.Input<number>;
    keyType?: pulumi.Input<string>;
    keys?: pulumi.Input<pulumi.Input<string>[]>;
    ntpservers?: pulumi.Input<pulumi.Input<inputs.SystemNtpNtpserver>[]>;
    ntpsync?: pulumi.Input<string>;
    serverMode?: pulumi.Input<string>;
    sourceIp?: pulumi.Input<string>;
    sourceIp6?: pulumi.Input<string>;
    syncinterval?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SystemNtp resource.
 */
export interface SystemNtpArgs {
    authentication?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    keyId?: pulumi.Input<number>;
    keyType?: pulumi.Input<string>;
    keys?: pulumi.Input<pulumi.Input<string>[]>;
    ntpservers?: pulumi.Input<pulumi.Input<inputs.SystemNtpNtpserver>[]>;
    ntpsync?: pulumi.Input<string>;
    serverMode?: pulumi.Input<string>;
    sourceIp?: pulumi.Input<string>;
    sourceIp6?: pulumi.Input<string>;
    syncinterval?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
}
