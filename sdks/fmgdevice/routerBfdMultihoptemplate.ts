// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RouterBfdMultihoptemplate extends pulumi.CustomResource {
    /**
     * Get an existing RouterBfdMultihoptemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouterBfdMultihoptemplateState, opts?: pulumi.CustomResourceOptions): RouterBfdMultihoptemplate {
        return new RouterBfdMultihoptemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/routerBfdMultihoptemplate:RouterBfdMultihoptemplate';

    /**
     * Returns true if the given object is an instance of RouterBfdMultihoptemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RouterBfdMultihoptemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RouterBfdMultihoptemplate.__pulumiType;
    }

    public readonly authMode!: pulumi.Output<string>;
    public readonly bfdDesiredMinTx!: pulumi.Output<number>;
    public readonly bfdDetectMult!: pulumi.Output<number>;
    public readonly bfdRequiredMinRx!: pulumi.Output<number>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly deviceVdom!: pulumi.Output<string>;
    public readonly dsts!: pulumi.Output<string[]>;
    public readonly fosid!: pulumi.Output<number>;
    public readonly md5Keys!: pulumi.Output<string[]>;
    public readonly srcs!: pulumi.Output<string[]>;

    /**
     * Create a RouterBfdMultihoptemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RouterBfdMultihoptemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RouterBfdMultihoptemplateArgs | RouterBfdMultihoptemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RouterBfdMultihoptemplateState | undefined;
            resourceInputs["authMode"] = state ? state.authMode : undefined;
            resourceInputs["bfdDesiredMinTx"] = state ? state.bfdDesiredMinTx : undefined;
            resourceInputs["bfdDetectMult"] = state ? state.bfdDetectMult : undefined;
            resourceInputs["bfdRequiredMinRx"] = state ? state.bfdRequiredMinRx : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["deviceVdom"] = state ? state.deviceVdom : undefined;
            resourceInputs["dsts"] = state ? state.dsts : undefined;
            resourceInputs["fosid"] = state ? state.fosid : undefined;
            resourceInputs["md5Keys"] = state ? state.md5Keys : undefined;
            resourceInputs["srcs"] = state ? state.srcs : undefined;
        } else {
            const args = argsOrState as RouterBfdMultihoptemplateArgs | undefined;
            resourceInputs["authMode"] = args ? args.authMode : undefined;
            resourceInputs["bfdDesiredMinTx"] = args ? args.bfdDesiredMinTx : undefined;
            resourceInputs["bfdDetectMult"] = args ? args.bfdDetectMult : undefined;
            resourceInputs["bfdRequiredMinRx"] = args ? args.bfdRequiredMinRx : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["deviceVdom"] = args ? args.deviceVdom : undefined;
            resourceInputs["dsts"] = args ? args.dsts : undefined;
            resourceInputs["fosid"] = args ? args.fosid : undefined;
            resourceInputs["md5Keys"] = args?.md5Keys ? pulumi.secret(args.md5Keys) : undefined;
            resourceInputs["srcs"] = args ? args.srcs : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["md5Keys"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(RouterBfdMultihoptemplate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RouterBfdMultihoptemplate resources.
 */
export interface RouterBfdMultihoptemplateState {
    authMode?: pulumi.Input<string>;
    bfdDesiredMinTx?: pulumi.Input<number>;
    bfdDetectMult?: pulumi.Input<number>;
    bfdRequiredMinRx?: pulumi.Input<number>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    dsts?: pulumi.Input<pulumi.Input<string>[]>;
    fosid?: pulumi.Input<number>;
    md5Keys?: pulumi.Input<pulumi.Input<string>[]>;
    srcs?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a RouterBfdMultihoptemplate resource.
 */
export interface RouterBfdMultihoptemplateArgs {
    authMode?: pulumi.Input<string>;
    bfdDesiredMinTx?: pulumi.Input<number>;
    bfdDetectMult?: pulumi.Input<number>;
    bfdRequiredMinRx?: pulumi.Input<number>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    dsts?: pulumi.Input<pulumi.Input<string>[]>;
    fosid?: pulumi.Input<number>;
    md5Keys?: pulumi.Input<pulumi.Input<string>[]>;
    srcs?: pulumi.Input<pulumi.Input<string>[]>;
}
