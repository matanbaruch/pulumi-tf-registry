// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class WirelesscontrollerWtpLan extends pulumi.CustomResource {
    /**
     * Get an existing WirelesscontrollerWtpLan resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WirelesscontrollerWtpLanState, opts?: pulumi.CustomResourceOptions): WirelesscontrollerWtpLan {
        return new WirelesscontrollerWtpLan(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/wirelesscontrollerWtpLan:WirelesscontrollerWtpLan';

    /**
     * Returns true if the given object is an instance of WirelesscontrollerWtpLan.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WirelesscontrollerWtpLan {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WirelesscontrollerWtpLan.__pulumiType;
    }

    public readonly deviceName!: pulumi.Output<string>;
    public readonly deviceVdom!: pulumi.Output<string>;
    public readonly port1Mode!: pulumi.Output<string>;
    public readonly port1Ssids!: pulumi.Output<string[]>;
    public readonly port2Mode!: pulumi.Output<string>;
    public readonly port2Ssids!: pulumi.Output<string[]>;
    public readonly port3Mode!: pulumi.Output<string>;
    public readonly port3Ssids!: pulumi.Output<string[]>;
    public readonly port4Mode!: pulumi.Output<string>;
    public readonly port4Ssids!: pulumi.Output<string[]>;
    public readonly port5Mode!: pulumi.Output<string>;
    public readonly port5Ssids!: pulumi.Output<string[]>;
    public readonly port6Mode!: pulumi.Output<string>;
    public readonly port6Ssids!: pulumi.Output<string[]>;
    public readonly port7Mode!: pulumi.Output<string>;
    public readonly port7Ssids!: pulumi.Output<string[]>;
    public readonly port8Mode!: pulumi.Output<string>;
    public readonly port8Ssids!: pulumi.Output<string[]>;
    public readonly portEslMode!: pulumi.Output<string>;
    public readonly portEslSsids!: pulumi.Output<string[]>;
    public readonly portMode!: pulumi.Output<string>;
    public readonly portSsids!: pulumi.Output<string[]>;
    public readonly wtp!: pulumi.Output<string>;

    /**
     * Create a WirelesscontrollerWtpLan resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WirelesscontrollerWtpLanArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WirelesscontrollerWtpLanArgs | WirelesscontrollerWtpLanState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WirelesscontrollerWtpLanState | undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["deviceVdom"] = state ? state.deviceVdom : undefined;
            resourceInputs["port1Mode"] = state ? state.port1Mode : undefined;
            resourceInputs["port1Ssids"] = state ? state.port1Ssids : undefined;
            resourceInputs["port2Mode"] = state ? state.port2Mode : undefined;
            resourceInputs["port2Ssids"] = state ? state.port2Ssids : undefined;
            resourceInputs["port3Mode"] = state ? state.port3Mode : undefined;
            resourceInputs["port3Ssids"] = state ? state.port3Ssids : undefined;
            resourceInputs["port4Mode"] = state ? state.port4Mode : undefined;
            resourceInputs["port4Ssids"] = state ? state.port4Ssids : undefined;
            resourceInputs["port5Mode"] = state ? state.port5Mode : undefined;
            resourceInputs["port5Ssids"] = state ? state.port5Ssids : undefined;
            resourceInputs["port6Mode"] = state ? state.port6Mode : undefined;
            resourceInputs["port6Ssids"] = state ? state.port6Ssids : undefined;
            resourceInputs["port7Mode"] = state ? state.port7Mode : undefined;
            resourceInputs["port7Ssids"] = state ? state.port7Ssids : undefined;
            resourceInputs["port8Mode"] = state ? state.port8Mode : undefined;
            resourceInputs["port8Ssids"] = state ? state.port8Ssids : undefined;
            resourceInputs["portEslMode"] = state ? state.portEslMode : undefined;
            resourceInputs["portEslSsids"] = state ? state.portEslSsids : undefined;
            resourceInputs["portMode"] = state ? state.portMode : undefined;
            resourceInputs["portSsids"] = state ? state.portSsids : undefined;
            resourceInputs["wtp"] = state ? state.wtp : undefined;
        } else {
            const args = argsOrState as WirelesscontrollerWtpLanArgs | undefined;
            if ((!args || args.wtp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'wtp'");
            }
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["deviceVdom"] = args ? args.deviceVdom : undefined;
            resourceInputs["port1Mode"] = args ? args.port1Mode : undefined;
            resourceInputs["port1Ssids"] = args ? args.port1Ssids : undefined;
            resourceInputs["port2Mode"] = args ? args.port2Mode : undefined;
            resourceInputs["port2Ssids"] = args ? args.port2Ssids : undefined;
            resourceInputs["port3Mode"] = args ? args.port3Mode : undefined;
            resourceInputs["port3Ssids"] = args ? args.port3Ssids : undefined;
            resourceInputs["port4Mode"] = args ? args.port4Mode : undefined;
            resourceInputs["port4Ssids"] = args ? args.port4Ssids : undefined;
            resourceInputs["port5Mode"] = args ? args.port5Mode : undefined;
            resourceInputs["port5Ssids"] = args ? args.port5Ssids : undefined;
            resourceInputs["port6Mode"] = args ? args.port6Mode : undefined;
            resourceInputs["port6Ssids"] = args ? args.port6Ssids : undefined;
            resourceInputs["port7Mode"] = args ? args.port7Mode : undefined;
            resourceInputs["port7Ssids"] = args ? args.port7Ssids : undefined;
            resourceInputs["port8Mode"] = args ? args.port8Mode : undefined;
            resourceInputs["port8Ssids"] = args ? args.port8Ssids : undefined;
            resourceInputs["portEslMode"] = args ? args.portEslMode : undefined;
            resourceInputs["portEslSsids"] = args ? args.portEslSsids : undefined;
            resourceInputs["portMode"] = args ? args.portMode : undefined;
            resourceInputs["portSsids"] = args ? args.portSsids : undefined;
            resourceInputs["wtp"] = args ? args.wtp : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WirelesscontrollerWtpLan.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WirelesscontrollerWtpLan resources.
 */
export interface WirelesscontrollerWtpLanState {
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    port1Mode?: pulumi.Input<string>;
    port1Ssids?: pulumi.Input<pulumi.Input<string>[]>;
    port2Mode?: pulumi.Input<string>;
    port2Ssids?: pulumi.Input<pulumi.Input<string>[]>;
    port3Mode?: pulumi.Input<string>;
    port3Ssids?: pulumi.Input<pulumi.Input<string>[]>;
    port4Mode?: pulumi.Input<string>;
    port4Ssids?: pulumi.Input<pulumi.Input<string>[]>;
    port5Mode?: pulumi.Input<string>;
    port5Ssids?: pulumi.Input<pulumi.Input<string>[]>;
    port6Mode?: pulumi.Input<string>;
    port6Ssids?: pulumi.Input<pulumi.Input<string>[]>;
    port7Mode?: pulumi.Input<string>;
    port7Ssids?: pulumi.Input<pulumi.Input<string>[]>;
    port8Mode?: pulumi.Input<string>;
    port8Ssids?: pulumi.Input<pulumi.Input<string>[]>;
    portEslMode?: pulumi.Input<string>;
    portEslSsids?: pulumi.Input<pulumi.Input<string>[]>;
    portMode?: pulumi.Input<string>;
    portSsids?: pulumi.Input<pulumi.Input<string>[]>;
    wtp?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WirelesscontrollerWtpLan resource.
 */
export interface WirelesscontrollerWtpLanArgs {
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    port1Mode?: pulumi.Input<string>;
    port1Ssids?: pulumi.Input<pulumi.Input<string>[]>;
    port2Mode?: pulumi.Input<string>;
    port2Ssids?: pulumi.Input<pulumi.Input<string>[]>;
    port3Mode?: pulumi.Input<string>;
    port3Ssids?: pulumi.Input<pulumi.Input<string>[]>;
    port4Mode?: pulumi.Input<string>;
    port4Ssids?: pulumi.Input<pulumi.Input<string>[]>;
    port5Mode?: pulumi.Input<string>;
    port5Ssids?: pulumi.Input<pulumi.Input<string>[]>;
    port6Mode?: pulumi.Input<string>;
    port6Ssids?: pulumi.Input<pulumi.Input<string>[]>;
    port7Mode?: pulumi.Input<string>;
    port7Ssids?: pulumi.Input<pulumi.Input<string>[]>;
    port8Mode?: pulumi.Input<string>;
    port8Ssids?: pulumi.Input<pulumi.Input<string>[]>;
    portEslMode?: pulumi.Input<string>;
    portEslSsids?: pulumi.Input<pulumi.Input<string>[]>;
    portMode?: pulumi.Input<string>;
    portSsids?: pulumi.Input<pulumi.Input<string>[]>;
    wtp: pulumi.Input<string>;
}
