// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DlpExactdatamatch extends pulumi.CustomResource {
    /**
     * Get an existing DlpExactdatamatch resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DlpExactdatamatchState, opts?: pulumi.CustomResourceOptions): DlpExactdatamatch {
        return new DlpExactdatamatch(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/dlpExactdatamatch:DlpExactdatamatch';

    /**
     * Returns true if the given object is an instance of DlpExactdatamatch.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DlpExactdatamatch {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DlpExactdatamatch.__pulumiType;
    }

    public readonly columns!: pulumi.Output<outputs.DlpExactdatamatchColumn[] | undefined>;
    public readonly datas!: pulumi.Output<string[]>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly deviceVdom!: pulumi.Output<string>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly optional!: pulumi.Output<number | undefined>;

    /**
     * Create a DlpExactdatamatch resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DlpExactdatamatchArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DlpExactdatamatchArgs | DlpExactdatamatchState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DlpExactdatamatchState | undefined;
            resourceInputs["columns"] = state ? state.columns : undefined;
            resourceInputs["datas"] = state ? state.datas : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["deviceVdom"] = state ? state.deviceVdom : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["optional"] = state ? state.optional : undefined;
        } else {
            const args = argsOrState as DlpExactdatamatchArgs | undefined;
            resourceInputs["columns"] = args ? args.columns : undefined;
            resourceInputs["datas"] = args ? args.datas : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["deviceVdom"] = args ? args.deviceVdom : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["optional"] = args ? args.optional : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DlpExactdatamatch.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DlpExactdatamatch resources.
 */
export interface DlpExactdatamatchState {
    columns?: pulumi.Input<pulumi.Input<inputs.DlpExactdatamatchColumn>[]>;
    datas?: pulumi.Input<pulumi.Input<string>[]>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    optional?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a DlpExactdatamatch resource.
 */
export interface DlpExactdatamatchArgs {
    columns?: pulumi.Input<pulumi.Input<inputs.DlpExactdatamatchColumn>[]>;
    datas?: pulumi.Input<pulumi.Input<string>[]>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    optional?: pulumi.Input<number>;
}
