// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SystemVnetunnel extends pulumi.CustomResource {
    /**
     * Get an existing SystemVnetunnel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemVnetunnelState, opts?: pulumi.CustomResourceOptions): SystemVnetunnel {
        return new SystemVnetunnel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/systemVnetunnel:SystemVnetunnel';

    /**
     * Returns true if the given object is an instance of SystemVnetunnel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemVnetunnel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemVnetunnel.__pulumiType;
    }

    public readonly autoAsicOffload!: pulumi.Output<string | undefined>;
    public readonly bmrHostnames!: pulumi.Output<string[]>;
    public readonly br!: pulumi.Output<string>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly deviceVdom!: pulumi.Output<string>;
    public readonly httpPasswords!: pulumi.Output<string[]>;
    public readonly httpUsername!: pulumi.Output<string | undefined>;
    public readonly interfaces!: pulumi.Output<string[]>;
    public readonly ipv4Addresses!: pulumi.Output<string[]>;
    public readonly mode!: pulumi.Output<string>;
    public readonly sslCertificates!: pulumi.Output<string[]>;
    public readonly status!: pulumi.Output<string>;
    public readonly updateUrl!: pulumi.Output<string | undefined>;

    /**
     * Create a SystemVnetunnel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemVnetunnelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemVnetunnelArgs | SystemVnetunnelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemVnetunnelState | undefined;
            resourceInputs["autoAsicOffload"] = state ? state.autoAsicOffload : undefined;
            resourceInputs["bmrHostnames"] = state ? state.bmrHostnames : undefined;
            resourceInputs["br"] = state ? state.br : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["deviceVdom"] = state ? state.deviceVdom : undefined;
            resourceInputs["httpPasswords"] = state ? state.httpPasswords : undefined;
            resourceInputs["httpUsername"] = state ? state.httpUsername : undefined;
            resourceInputs["interfaces"] = state ? state.interfaces : undefined;
            resourceInputs["ipv4Addresses"] = state ? state.ipv4Addresses : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["sslCertificates"] = state ? state.sslCertificates : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["updateUrl"] = state ? state.updateUrl : undefined;
        } else {
            const args = argsOrState as SystemVnetunnelArgs | undefined;
            resourceInputs["autoAsicOffload"] = args ? args.autoAsicOffload : undefined;
            resourceInputs["bmrHostnames"] = args?.bmrHostnames ? pulumi.secret(args.bmrHostnames) : undefined;
            resourceInputs["br"] = args ? args.br : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["deviceVdom"] = args ? args.deviceVdom : undefined;
            resourceInputs["httpPasswords"] = args?.httpPasswords ? pulumi.secret(args.httpPasswords) : undefined;
            resourceInputs["httpUsername"] = args ? args.httpUsername : undefined;
            resourceInputs["interfaces"] = args ? args.interfaces : undefined;
            resourceInputs["ipv4Addresses"] = args ? args.ipv4Addresses : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["sslCertificates"] = args ? args.sslCertificates : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["updateUrl"] = args ? args.updateUrl : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["bmrHostnames", "httpPasswords"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SystemVnetunnel.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemVnetunnel resources.
 */
export interface SystemVnetunnelState {
    autoAsicOffload?: pulumi.Input<string>;
    bmrHostnames?: pulumi.Input<pulumi.Input<string>[]>;
    br?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    httpPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    httpUsername?: pulumi.Input<string>;
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    ipv4Addresses?: pulumi.Input<pulumi.Input<string>[]>;
    mode?: pulumi.Input<string>;
    sslCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    updateUrl?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SystemVnetunnel resource.
 */
export interface SystemVnetunnelArgs {
    autoAsicOffload?: pulumi.Input<string>;
    bmrHostnames?: pulumi.Input<pulumi.Input<string>[]>;
    br?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    httpPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    httpUsername?: pulumi.Input<string>;
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    ipv4Addresses?: pulumi.Input<pulumi.Input<string>[]>;
    mode?: pulumi.Input<string>;
    sslCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    updateUrl?: pulumi.Input<string>;
}
