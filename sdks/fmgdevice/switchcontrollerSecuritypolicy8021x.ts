// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SwitchcontrollerSecuritypolicy8021x extends pulumi.CustomResource {
    /**
     * Get an existing SwitchcontrollerSecuritypolicy8021x resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SwitchcontrollerSecuritypolicy8021xState, opts?: pulumi.CustomResourceOptions): SwitchcontrollerSecuritypolicy8021x {
        return new SwitchcontrollerSecuritypolicy8021x(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/switchcontrollerSecuritypolicy8021x:SwitchcontrollerSecuritypolicy8021x';

    /**
     * Returns true if the given object is an instance of SwitchcontrollerSecuritypolicy8021x.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SwitchcontrollerSecuritypolicy8021x {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SwitchcontrollerSecuritypolicy8021x.__pulumiType;
    }

    public readonly authFailVlan!: pulumi.Output<string>;
    public readonly authFailVlanIds!: pulumi.Output<string[]>;
    public readonly authserverTimeoutPeriod!: pulumi.Output<number | undefined>;
    public readonly authserverTimeoutTagged!: pulumi.Output<string | undefined>;
    public readonly authserverTimeoutTaggedVlanids!: pulumi.Output<string[]>;
    public readonly authserverTimeoutVlan!: pulumi.Output<string>;
    public readonly authserverTimeoutVlanids!: pulumi.Output<string[]>;
    public readonly dacl!: pulumi.Output<string>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly deviceVdom!: pulumi.Output<string>;
    public readonly eapAutoUntaggedVlans!: pulumi.Output<string>;
    public readonly eapPassthru!: pulumi.Output<string>;
    public readonly framevidApply!: pulumi.Output<string>;
    public readonly guestAuthDelay!: pulumi.Output<number>;
    public readonly guestVlan!: pulumi.Output<string>;
    public readonly guestVlanIds!: pulumi.Output<string[]>;
    public readonly macAuthBypass!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly openAuth!: pulumi.Output<string>;
    public readonly policyType!: pulumi.Output<string>;
    public readonly radiusTimeoutOverwrite!: pulumi.Output<string>;
    public readonly securityMode!: pulumi.Output<string>;
    public readonly userGroups!: pulumi.Output<string[]>;

    /**
     * Create a SwitchcontrollerSecuritypolicy8021x resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SwitchcontrollerSecuritypolicy8021xArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SwitchcontrollerSecuritypolicy8021xArgs | SwitchcontrollerSecuritypolicy8021xState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SwitchcontrollerSecuritypolicy8021xState | undefined;
            resourceInputs["authFailVlan"] = state ? state.authFailVlan : undefined;
            resourceInputs["authFailVlanIds"] = state ? state.authFailVlanIds : undefined;
            resourceInputs["authserverTimeoutPeriod"] = state ? state.authserverTimeoutPeriod : undefined;
            resourceInputs["authserverTimeoutTagged"] = state ? state.authserverTimeoutTagged : undefined;
            resourceInputs["authserverTimeoutTaggedVlanids"] = state ? state.authserverTimeoutTaggedVlanids : undefined;
            resourceInputs["authserverTimeoutVlan"] = state ? state.authserverTimeoutVlan : undefined;
            resourceInputs["authserverTimeoutVlanids"] = state ? state.authserverTimeoutVlanids : undefined;
            resourceInputs["dacl"] = state ? state.dacl : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["deviceVdom"] = state ? state.deviceVdom : undefined;
            resourceInputs["eapAutoUntaggedVlans"] = state ? state.eapAutoUntaggedVlans : undefined;
            resourceInputs["eapPassthru"] = state ? state.eapPassthru : undefined;
            resourceInputs["framevidApply"] = state ? state.framevidApply : undefined;
            resourceInputs["guestAuthDelay"] = state ? state.guestAuthDelay : undefined;
            resourceInputs["guestVlan"] = state ? state.guestVlan : undefined;
            resourceInputs["guestVlanIds"] = state ? state.guestVlanIds : undefined;
            resourceInputs["macAuthBypass"] = state ? state.macAuthBypass : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["openAuth"] = state ? state.openAuth : undefined;
            resourceInputs["policyType"] = state ? state.policyType : undefined;
            resourceInputs["radiusTimeoutOverwrite"] = state ? state.radiusTimeoutOverwrite : undefined;
            resourceInputs["securityMode"] = state ? state.securityMode : undefined;
            resourceInputs["userGroups"] = state ? state.userGroups : undefined;
        } else {
            const args = argsOrState as SwitchcontrollerSecuritypolicy8021xArgs | undefined;
            resourceInputs["authFailVlan"] = args ? args.authFailVlan : undefined;
            resourceInputs["authFailVlanIds"] = args ? args.authFailVlanIds : undefined;
            resourceInputs["authserverTimeoutPeriod"] = args ? args.authserverTimeoutPeriod : undefined;
            resourceInputs["authserverTimeoutTagged"] = args ? args.authserverTimeoutTagged : undefined;
            resourceInputs["authserverTimeoutTaggedVlanids"] = args ? args.authserverTimeoutTaggedVlanids : undefined;
            resourceInputs["authserverTimeoutVlan"] = args ? args.authserverTimeoutVlan : undefined;
            resourceInputs["authserverTimeoutVlanids"] = args ? args.authserverTimeoutVlanids : undefined;
            resourceInputs["dacl"] = args ? args.dacl : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["deviceVdom"] = args ? args.deviceVdom : undefined;
            resourceInputs["eapAutoUntaggedVlans"] = args ? args.eapAutoUntaggedVlans : undefined;
            resourceInputs["eapPassthru"] = args ? args.eapPassthru : undefined;
            resourceInputs["framevidApply"] = args ? args.framevidApply : undefined;
            resourceInputs["guestAuthDelay"] = args ? args.guestAuthDelay : undefined;
            resourceInputs["guestVlan"] = args ? args.guestVlan : undefined;
            resourceInputs["guestVlanIds"] = args ? args.guestVlanIds : undefined;
            resourceInputs["macAuthBypass"] = args ? args.macAuthBypass : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["openAuth"] = args ? args.openAuth : undefined;
            resourceInputs["policyType"] = args ? args.policyType : undefined;
            resourceInputs["radiusTimeoutOverwrite"] = args ? args.radiusTimeoutOverwrite : undefined;
            resourceInputs["securityMode"] = args ? args.securityMode : undefined;
            resourceInputs["userGroups"] = args ? args.userGroups : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SwitchcontrollerSecuritypolicy8021x.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SwitchcontrollerSecuritypolicy8021x resources.
 */
export interface SwitchcontrollerSecuritypolicy8021xState {
    authFailVlan?: pulumi.Input<string>;
    authFailVlanIds?: pulumi.Input<pulumi.Input<string>[]>;
    authserverTimeoutPeriod?: pulumi.Input<number>;
    authserverTimeoutTagged?: pulumi.Input<string>;
    authserverTimeoutTaggedVlanids?: pulumi.Input<pulumi.Input<string>[]>;
    authserverTimeoutVlan?: pulumi.Input<string>;
    authserverTimeoutVlanids?: pulumi.Input<pulumi.Input<string>[]>;
    dacl?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    eapAutoUntaggedVlans?: pulumi.Input<string>;
    eapPassthru?: pulumi.Input<string>;
    framevidApply?: pulumi.Input<string>;
    guestAuthDelay?: pulumi.Input<number>;
    guestVlan?: pulumi.Input<string>;
    guestVlanIds?: pulumi.Input<pulumi.Input<string>[]>;
    macAuthBypass?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    openAuth?: pulumi.Input<string>;
    policyType?: pulumi.Input<string>;
    radiusTimeoutOverwrite?: pulumi.Input<string>;
    securityMode?: pulumi.Input<string>;
    userGroups?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a SwitchcontrollerSecuritypolicy8021x resource.
 */
export interface SwitchcontrollerSecuritypolicy8021xArgs {
    authFailVlan?: pulumi.Input<string>;
    authFailVlanIds?: pulumi.Input<pulumi.Input<string>[]>;
    authserverTimeoutPeriod?: pulumi.Input<number>;
    authserverTimeoutTagged?: pulumi.Input<string>;
    authserverTimeoutTaggedVlanids?: pulumi.Input<pulumi.Input<string>[]>;
    authserverTimeoutVlan?: pulumi.Input<string>;
    authserverTimeoutVlanids?: pulumi.Input<pulumi.Input<string>[]>;
    dacl?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    eapAutoUntaggedVlans?: pulumi.Input<string>;
    eapPassthru?: pulumi.Input<string>;
    framevidApply?: pulumi.Input<string>;
    guestAuthDelay?: pulumi.Input<number>;
    guestVlan?: pulumi.Input<string>;
    guestVlanIds?: pulumi.Input<pulumi.Input<string>[]>;
    macAuthBypass?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    openAuth?: pulumi.Input<string>;
    policyType?: pulumi.Input<string>;
    radiusTimeoutOverwrite?: pulumi.Input<string>;
    securityMode?: pulumi.Input<string>;
    userGroups?: pulumi.Input<pulumi.Input<string>[]>;
}
