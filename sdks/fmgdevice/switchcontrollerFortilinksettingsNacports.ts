// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SwitchcontrollerFortilinksettingsNacports extends pulumi.CustomResource {
    /**
     * Get an existing SwitchcontrollerFortilinksettingsNacports resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SwitchcontrollerFortilinksettingsNacportsState, opts?: pulumi.CustomResourceOptions): SwitchcontrollerFortilinksettingsNacports {
        return new SwitchcontrollerFortilinksettingsNacports(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/switchcontrollerFortilinksettingsNacports:SwitchcontrollerFortilinksettingsNacports';

    /**
     * Returns true if the given object is an instance of SwitchcontrollerFortilinksettingsNacports.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SwitchcontrollerFortilinksettingsNacports {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SwitchcontrollerFortilinksettingsNacports.__pulumiType;
    }

    public readonly bounceNacPort!: pulumi.Output<string | undefined>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly deviceVdom!: pulumi.Output<string>;
    public readonly fortilinkSettings!: pulumi.Output<string>;
    public readonly lanSegment!: pulumi.Output<string>;
    public readonly memberChange!: pulumi.Output<number | undefined>;
    public readonly nacLanInterfaces!: pulumi.Output<string[]>;
    public readonly nacSegmentVlans!: pulumi.Output<string[]>;
    public readonly onboardingVlans!: pulumi.Output<string[]>;
    public readonly parentKey!: pulumi.Output<string | undefined>;

    /**
     * Create a SwitchcontrollerFortilinksettingsNacports resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SwitchcontrollerFortilinksettingsNacportsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SwitchcontrollerFortilinksettingsNacportsArgs | SwitchcontrollerFortilinksettingsNacportsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SwitchcontrollerFortilinksettingsNacportsState | undefined;
            resourceInputs["bounceNacPort"] = state ? state.bounceNacPort : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["deviceVdom"] = state ? state.deviceVdom : undefined;
            resourceInputs["fortilinkSettings"] = state ? state.fortilinkSettings : undefined;
            resourceInputs["lanSegment"] = state ? state.lanSegment : undefined;
            resourceInputs["memberChange"] = state ? state.memberChange : undefined;
            resourceInputs["nacLanInterfaces"] = state ? state.nacLanInterfaces : undefined;
            resourceInputs["nacSegmentVlans"] = state ? state.nacSegmentVlans : undefined;
            resourceInputs["onboardingVlans"] = state ? state.onboardingVlans : undefined;
            resourceInputs["parentKey"] = state ? state.parentKey : undefined;
        } else {
            const args = argsOrState as SwitchcontrollerFortilinksettingsNacportsArgs | undefined;
            if ((!args || args.fortilinkSettings === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fortilinkSettings'");
            }
            resourceInputs["bounceNacPort"] = args ? args.bounceNacPort : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["deviceVdom"] = args ? args.deviceVdom : undefined;
            resourceInputs["fortilinkSettings"] = args ? args.fortilinkSettings : undefined;
            resourceInputs["lanSegment"] = args ? args.lanSegment : undefined;
            resourceInputs["memberChange"] = args ? args.memberChange : undefined;
            resourceInputs["nacLanInterfaces"] = args ? args.nacLanInterfaces : undefined;
            resourceInputs["nacSegmentVlans"] = args ? args.nacSegmentVlans : undefined;
            resourceInputs["onboardingVlans"] = args ? args.onboardingVlans : undefined;
            resourceInputs["parentKey"] = args ? args.parentKey : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SwitchcontrollerFortilinksettingsNacports.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SwitchcontrollerFortilinksettingsNacports resources.
 */
export interface SwitchcontrollerFortilinksettingsNacportsState {
    bounceNacPort?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    fortilinkSettings?: pulumi.Input<string>;
    lanSegment?: pulumi.Input<string>;
    memberChange?: pulumi.Input<number>;
    nacLanInterfaces?: pulumi.Input<pulumi.Input<string>[]>;
    nacSegmentVlans?: pulumi.Input<pulumi.Input<string>[]>;
    onboardingVlans?: pulumi.Input<pulumi.Input<string>[]>;
    parentKey?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SwitchcontrollerFortilinksettingsNacports resource.
 */
export interface SwitchcontrollerFortilinksettingsNacportsArgs {
    bounceNacPort?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    fortilinkSettings: pulumi.Input<string>;
    lanSegment?: pulumi.Input<string>;
    memberChange?: pulumi.Input<number>;
    nacLanInterfaces?: pulumi.Input<pulumi.Input<string>[]>;
    nacSegmentVlans?: pulumi.Input<pulumi.Input<string>[]>;
    onboardingVlans?: pulumi.Input<pulumi.Input<string>[]>;
    parentKey?: pulumi.Input<string>;
}
