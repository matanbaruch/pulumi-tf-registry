// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RouterRipInterface extends pulumi.CustomResource {
    /**
     * Get an existing RouterRipInterface resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouterRipInterfaceState, opts?: pulumi.CustomResourceOptions): RouterRipInterface {
        return new RouterRipInterface(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/routerRipInterface:RouterRipInterface';

    /**
     * Returns true if the given object is an instance of RouterRipInterface.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RouterRipInterface {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RouterRipInterface.__pulumiType;
    }

    public readonly authKeychains!: pulumi.Output<string[]>;
    public readonly authMode!: pulumi.Output<string>;
    public readonly authStrings!: pulumi.Output<string[]>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly deviceVdom!: pulumi.Output<string>;
    public readonly flags!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly receiveVersions!: pulumi.Output<string[]>;
    public readonly sendVersion2Broadcast!: pulumi.Output<string | undefined>;
    public readonly sendVersions!: pulumi.Output<string[]>;
    public readonly splitHorizon!: pulumi.Output<string>;
    public readonly splitHorizonStatus!: pulumi.Output<string>;

    /**
     * Create a RouterRipInterface resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RouterRipInterfaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RouterRipInterfaceArgs | RouterRipInterfaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RouterRipInterfaceState | undefined;
            resourceInputs["authKeychains"] = state ? state.authKeychains : undefined;
            resourceInputs["authMode"] = state ? state.authMode : undefined;
            resourceInputs["authStrings"] = state ? state.authStrings : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["deviceVdom"] = state ? state.deviceVdom : undefined;
            resourceInputs["flags"] = state ? state.flags : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["receiveVersions"] = state ? state.receiveVersions : undefined;
            resourceInputs["sendVersion2Broadcast"] = state ? state.sendVersion2Broadcast : undefined;
            resourceInputs["sendVersions"] = state ? state.sendVersions : undefined;
            resourceInputs["splitHorizon"] = state ? state.splitHorizon : undefined;
            resourceInputs["splitHorizonStatus"] = state ? state.splitHorizonStatus : undefined;
        } else {
            const args = argsOrState as RouterRipInterfaceArgs | undefined;
            resourceInputs["authKeychains"] = args ? args.authKeychains : undefined;
            resourceInputs["authMode"] = args ? args.authMode : undefined;
            resourceInputs["authStrings"] = args?.authStrings ? pulumi.secret(args.authStrings) : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["deviceVdom"] = args ? args.deviceVdom : undefined;
            resourceInputs["flags"] = args ? args.flags : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["receiveVersions"] = args ? args.receiveVersions : undefined;
            resourceInputs["sendVersion2Broadcast"] = args ? args.sendVersion2Broadcast : undefined;
            resourceInputs["sendVersions"] = args ? args.sendVersions : undefined;
            resourceInputs["splitHorizon"] = args ? args.splitHorizon : undefined;
            resourceInputs["splitHorizonStatus"] = args ? args.splitHorizonStatus : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["authStrings"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(RouterRipInterface.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RouterRipInterface resources.
 */
export interface RouterRipInterfaceState {
    authKeychains?: pulumi.Input<pulumi.Input<string>[]>;
    authMode?: pulumi.Input<string>;
    authStrings?: pulumi.Input<pulumi.Input<string>[]>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    flags?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    receiveVersions?: pulumi.Input<pulumi.Input<string>[]>;
    sendVersion2Broadcast?: pulumi.Input<string>;
    sendVersions?: pulumi.Input<pulumi.Input<string>[]>;
    splitHorizon?: pulumi.Input<string>;
    splitHorizonStatus?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RouterRipInterface resource.
 */
export interface RouterRipInterfaceArgs {
    authKeychains?: pulumi.Input<pulumi.Input<string>[]>;
    authMode?: pulumi.Input<string>;
    authStrings?: pulumi.Input<pulumi.Input<string>[]>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    flags?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    receiveVersions?: pulumi.Input<pulumi.Input<string>[]>;
    sendVersion2Broadcast?: pulumi.Input<string>;
    sendVersions?: pulumi.Input<pulumi.Input<string>[]>;
    splitHorizon?: pulumi.Input<string>;
    splitHorizonStatus?: pulumi.Input<string>;
}
