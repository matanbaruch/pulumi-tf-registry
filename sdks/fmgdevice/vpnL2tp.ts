// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VpnL2tp extends pulumi.CustomResource {
    /**
     * Get an existing VpnL2tp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpnL2tpState, opts?: pulumi.CustomResourceOptions): VpnL2tp {
        return new VpnL2tp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/vpnL2tp:VpnL2tp';

    /**
     * Returns true if the given object is an instance of VpnL2tp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpnL2tp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpnL2tp.__pulumiType;
    }

    public readonly compress!: pulumi.Output<string | undefined>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly deviceVdom!: pulumi.Output<string>;
    public readonly eip!: pulumi.Output<string>;
    public readonly enforceIpsec!: pulumi.Output<string>;
    public readonly helloInterval!: pulumi.Output<number>;
    public readonly lcpEchoInterval!: pulumi.Output<number>;
    public readonly lcpMaxEchoFails!: pulumi.Output<number>;
    public readonly sip!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly usrgrps!: pulumi.Output<string[]>;

    /**
     * Create a VpnL2tp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VpnL2tpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpnL2tpArgs | VpnL2tpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpnL2tpState | undefined;
            resourceInputs["compress"] = state ? state.compress : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["deviceVdom"] = state ? state.deviceVdom : undefined;
            resourceInputs["eip"] = state ? state.eip : undefined;
            resourceInputs["enforceIpsec"] = state ? state.enforceIpsec : undefined;
            resourceInputs["helloInterval"] = state ? state.helloInterval : undefined;
            resourceInputs["lcpEchoInterval"] = state ? state.lcpEchoInterval : undefined;
            resourceInputs["lcpMaxEchoFails"] = state ? state.lcpMaxEchoFails : undefined;
            resourceInputs["sip"] = state ? state.sip : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["usrgrps"] = state ? state.usrgrps : undefined;
        } else {
            const args = argsOrState as VpnL2tpArgs | undefined;
            resourceInputs["compress"] = args ? args.compress : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["deviceVdom"] = args ? args.deviceVdom : undefined;
            resourceInputs["eip"] = args ? args.eip : undefined;
            resourceInputs["enforceIpsec"] = args ? args.enforceIpsec : undefined;
            resourceInputs["helloInterval"] = args ? args.helloInterval : undefined;
            resourceInputs["lcpEchoInterval"] = args ? args.lcpEchoInterval : undefined;
            resourceInputs["lcpMaxEchoFails"] = args ? args.lcpMaxEchoFails : undefined;
            resourceInputs["sip"] = args ? args.sip : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["usrgrps"] = args ? args.usrgrps : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpnL2tp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpnL2tp resources.
 */
export interface VpnL2tpState {
    compress?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    eip?: pulumi.Input<string>;
    enforceIpsec?: pulumi.Input<string>;
    helloInterval?: pulumi.Input<number>;
    lcpEchoInterval?: pulumi.Input<number>;
    lcpMaxEchoFails?: pulumi.Input<number>;
    sip?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    usrgrps?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a VpnL2tp resource.
 */
export interface VpnL2tpArgs {
    compress?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    eip?: pulumi.Input<string>;
    enforceIpsec?: pulumi.Input<string>;
    helloInterval?: pulumi.Input<number>;
    lcpEchoInterval?: pulumi.Input<number>;
    lcpMaxEchoFails?: pulumi.Input<number>;
    sip?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    usrgrps?: pulumi.Input<pulumi.Input<string>[]>;
}
