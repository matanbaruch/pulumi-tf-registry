// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class WirelesscontrollerHotspot20Hsprofile extends pulumi.CustomResource {
    /**
     * Get an existing WirelesscontrollerHotspot20Hsprofile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WirelesscontrollerHotspot20HsprofileState, opts?: pulumi.CustomResourceOptions): WirelesscontrollerHotspot20Hsprofile {
        return new WirelesscontrollerHotspot20Hsprofile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/wirelesscontrollerHotspot20Hsprofile:WirelesscontrollerHotspot20Hsprofile';

    /**
     * Returns true if the given object is an instance of WirelesscontrollerHotspot20Hsprofile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WirelesscontrollerHotspot20Hsprofile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WirelesscontrollerHotspot20Hsprofile.__pulumiType;
    }

    public readonly accessNetworkAsra!: pulumi.Output<string>;
    public readonly accessNetworkEsr!: pulumi.Output<string>;
    public readonly accessNetworkInternet!: pulumi.Output<string>;
    public readonly accessNetworkType!: pulumi.Output<string>;
    public readonly accessNetworkUesa!: pulumi.Output<string>;
    public readonly adviceOfCharges!: pulumi.Output<string[]>;
    public readonly anqpDomainId!: pulumi.Output<number | undefined>;
    public readonly bssTransition!: pulumi.Output<string>;
    public readonly connCaps!: pulumi.Output<string[]>;
    public readonly deauthRequestTimeout!: pulumi.Output<number>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly deviceVdom!: pulumi.Output<string>;
    public readonly dgaf!: pulumi.Output<string>;
    public readonly domainName!: pulumi.Output<string | undefined>;
    public readonly gasComebackDelay!: pulumi.Output<number>;
    public readonly gasFragmentationLimit!: pulumi.Output<number>;
    public readonly hessid!: pulumi.Output<string>;
    public readonly ipAddrTypes!: pulumi.Output<string[]>;
    public readonly l2tif!: pulumi.Output<string>;
    public readonly n3gppPlmns!: pulumi.Output<string[]>;
    public readonly naiRealms!: pulumi.Output<string[]>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkAuths!: pulumi.Output<string[]>;
    public readonly operFriendlyNames!: pulumi.Output<string[]>;
    public readonly operIcons!: pulumi.Output<string[]>;
    public readonly osuProviderNais!: pulumi.Output<string[]>;
    public readonly osuProviders!: pulumi.Output<string[]>;
    public readonly osuSsid!: pulumi.Output<string | undefined>;
    public readonly pameBi!: pulumi.Output<string>;
    public readonly proxyArp!: pulumi.Output<string>;
    public readonly qosMaps!: pulumi.Output<string[]>;
    public readonly release!: pulumi.Output<number>;
    public readonly roamingConsortia!: pulumi.Output<string[]>;
    public readonly termsAndConditions!: pulumi.Output<string[]>;
    public readonly venueGroup!: pulumi.Output<string>;
    public readonly venueNames!: pulumi.Output<string[]>;
    public readonly venueType!: pulumi.Output<string>;
    public readonly venueUrls!: pulumi.Output<string[]>;
    public readonly wanMetrics!: pulumi.Output<string[]>;
    public readonly wnmSleepMode!: pulumi.Output<string>;

    /**
     * Create a WirelesscontrollerHotspot20Hsprofile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: WirelesscontrollerHotspot20HsprofileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WirelesscontrollerHotspot20HsprofileArgs | WirelesscontrollerHotspot20HsprofileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WirelesscontrollerHotspot20HsprofileState | undefined;
            resourceInputs["accessNetworkAsra"] = state ? state.accessNetworkAsra : undefined;
            resourceInputs["accessNetworkEsr"] = state ? state.accessNetworkEsr : undefined;
            resourceInputs["accessNetworkInternet"] = state ? state.accessNetworkInternet : undefined;
            resourceInputs["accessNetworkType"] = state ? state.accessNetworkType : undefined;
            resourceInputs["accessNetworkUesa"] = state ? state.accessNetworkUesa : undefined;
            resourceInputs["adviceOfCharges"] = state ? state.adviceOfCharges : undefined;
            resourceInputs["anqpDomainId"] = state ? state.anqpDomainId : undefined;
            resourceInputs["bssTransition"] = state ? state.bssTransition : undefined;
            resourceInputs["connCaps"] = state ? state.connCaps : undefined;
            resourceInputs["deauthRequestTimeout"] = state ? state.deauthRequestTimeout : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["deviceVdom"] = state ? state.deviceVdom : undefined;
            resourceInputs["dgaf"] = state ? state.dgaf : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["gasComebackDelay"] = state ? state.gasComebackDelay : undefined;
            resourceInputs["gasFragmentationLimit"] = state ? state.gasFragmentationLimit : undefined;
            resourceInputs["hessid"] = state ? state.hessid : undefined;
            resourceInputs["ipAddrTypes"] = state ? state.ipAddrTypes : undefined;
            resourceInputs["l2tif"] = state ? state.l2tif : undefined;
            resourceInputs["n3gppPlmns"] = state ? state.n3gppPlmns : undefined;
            resourceInputs["naiRealms"] = state ? state.naiRealms : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkAuths"] = state ? state.networkAuths : undefined;
            resourceInputs["operFriendlyNames"] = state ? state.operFriendlyNames : undefined;
            resourceInputs["operIcons"] = state ? state.operIcons : undefined;
            resourceInputs["osuProviderNais"] = state ? state.osuProviderNais : undefined;
            resourceInputs["osuProviders"] = state ? state.osuProviders : undefined;
            resourceInputs["osuSsid"] = state ? state.osuSsid : undefined;
            resourceInputs["pameBi"] = state ? state.pameBi : undefined;
            resourceInputs["proxyArp"] = state ? state.proxyArp : undefined;
            resourceInputs["qosMaps"] = state ? state.qosMaps : undefined;
            resourceInputs["release"] = state ? state.release : undefined;
            resourceInputs["roamingConsortia"] = state ? state.roamingConsortia : undefined;
            resourceInputs["termsAndConditions"] = state ? state.termsAndConditions : undefined;
            resourceInputs["venueGroup"] = state ? state.venueGroup : undefined;
            resourceInputs["venueNames"] = state ? state.venueNames : undefined;
            resourceInputs["venueType"] = state ? state.venueType : undefined;
            resourceInputs["venueUrls"] = state ? state.venueUrls : undefined;
            resourceInputs["wanMetrics"] = state ? state.wanMetrics : undefined;
            resourceInputs["wnmSleepMode"] = state ? state.wnmSleepMode : undefined;
        } else {
            const args = argsOrState as WirelesscontrollerHotspot20HsprofileArgs | undefined;
            resourceInputs["accessNetworkAsra"] = args ? args.accessNetworkAsra : undefined;
            resourceInputs["accessNetworkEsr"] = args ? args.accessNetworkEsr : undefined;
            resourceInputs["accessNetworkInternet"] = args ? args.accessNetworkInternet : undefined;
            resourceInputs["accessNetworkType"] = args ? args.accessNetworkType : undefined;
            resourceInputs["accessNetworkUesa"] = args ? args.accessNetworkUesa : undefined;
            resourceInputs["adviceOfCharges"] = args ? args.adviceOfCharges : undefined;
            resourceInputs["anqpDomainId"] = args ? args.anqpDomainId : undefined;
            resourceInputs["bssTransition"] = args ? args.bssTransition : undefined;
            resourceInputs["connCaps"] = args ? args.connCaps : undefined;
            resourceInputs["deauthRequestTimeout"] = args ? args.deauthRequestTimeout : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["deviceVdom"] = args ? args.deviceVdom : undefined;
            resourceInputs["dgaf"] = args ? args.dgaf : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["gasComebackDelay"] = args ? args.gasComebackDelay : undefined;
            resourceInputs["gasFragmentationLimit"] = args ? args.gasFragmentationLimit : undefined;
            resourceInputs["hessid"] = args ? args.hessid : undefined;
            resourceInputs["ipAddrTypes"] = args ? args.ipAddrTypes : undefined;
            resourceInputs["l2tif"] = args ? args.l2tif : undefined;
            resourceInputs["n3gppPlmns"] = args ? args.n3gppPlmns : undefined;
            resourceInputs["naiRealms"] = args ? args.naiRealms : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkAuths"] = args ? args.networkAuths : undefined;
            resourceInputs["operFriendlyNames"] = args ? args.operFriendlyNames : undefined;
            resourceInputs["operIcons"] = args ? args.operIcons : undefined;
            resourceInputs["osuProviderNais"] = args ? args.osuProviderNais : undefined;
            resourceInputs["osuProviders"] = args ? args.osuProviders : undefined;
            resourceInputs["osuSsid"] = args ? args.osuSsid : undefined;
            resourceInputs["pameBi"] = args ? args.pameBi : undefined;
            resourceInputs["proxyArp"] = args ? args.proxyArp : undefined;
            resourceInputs["qosMaps"] = args ? args.qosMaps : undefined;
            resourceInputs["release"] = args ? args.release : undefined;
            resourceInputs["roamingConsortia"] = args ? args.roamingConsortia : undefined;
            resourceInputs["termsAndConditions"] = args ? args.termsAndConditions : undefined;
            resourceInputs["venueGroup"] = args ? args.venueGroup : undefined;
            resourceInputs["venueNames"] = args ? args.venueNames : undefined;
            resourceInputs["venueType"] = args ? args.venueType : undefined;
            resourceInputs["venueUrls"] = args ? args.venueUrls : undefined;
            resourceInputs["wanMetrics"] = args ? args.wanMetrics : undefined;
            resourceInputs["wnmSleepMode"] = args ? args.wnmSleepMode : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WirelesscontrollerHotspot20Hsprofile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WirelesscontrollerHotspot20Hsprofile resources.
 */
export interface WirelesscontrollerHotspot20HsprofileState {
    accessNetworkAsra?: pulumi.Input<string>;
    accessNetworkEsr?: pulumi.Input<string>;
    accessNetworkInternet?: pulumi.Input<string>;
    accessNetworkType?: pulumi.Input<string>;
    accessNetworkUesa?: pulumi.Input<string>;
    adviceOfCharges?: pulumi.Input<pulumi.Input<string>[]>;
    anqpDomainId?: pulumi.Input<number>;
    bssTransition?: pulumi.Input<string>;
    connCaps?: pulumi.Input<pulumi.Input<string>[]>;
    deauthRequestTimeout?: pulumi.Input<number>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    dgaf?: pulumi.Input<string>;
    domainName?: pulumi.Input<string>;
    gasComebackDelay?: pulumi.Input<number>;
    gasFragmentationLimit?: pulumi.Input<number>;
    hessid?: pulumi.Input<string>;
    ipAddrTypes?: pulumi.Input<pulumi.Input<string>[]>;
    l2tif?: pulumi.Input<string>;
    n3gppPlmns?: pulumi.Input<pulumi.Input<string>[]>;
    naiRealms?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    networkAuths?: pulumi.Input<pulumi.Input<string>[]>;
    operFriendlyNames?: pulumi.Input<pulumi.Input<string>[]>;
    operIcons?: pulumi.Input<pulumi.Input<string>[]>;
    osuProviderNais?: pulumi.Input<pulumi.Input<string>[]>;
    osuProviders?: pulumi.Input<pulumi.Input<string>[]>;
    osuSsid?: pulumi.Input<string>;
    pameBi?: pulumi.Input<string>;
    proxyArp?: pulumi.Input<string>;
    qosMaps?: pulumi.Input<pulumi.Input<string>[]>;
    release?: pulumi.Input<number>;
    roamingConsortia?: pulumi.Input<pulumi.Input<string>[]>;
    termsAndConditions?: pulumi.Input<pulumi.Input<string>[]>;
    venueGroup?: pulumi.Input<string>;
    venueNames?: pulumi.Input<pulumi.Input<string>[]>;
    venueType?: pulumi.Input<string>;
    venueUrls?: pulumi.Input<pulumi.Input<string>[]>;
    wanMetrics?: pulumi.Input<pulumi.Input<string>[]>;
    wnmSleepMode?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WirelesscontrollerHotspot20Hsprofile resource.
 */
export interface WirelesscontrollerHotspot20HsprofileArgs {
    accessNetworkAsra?: pulumi.Input<string>;
    accessNetworkEsr?: pulumi.Input<string>;
    accessNetworkInternet?: pulumi.Input<string>;
    accessNetworkType?: pulumi.Input<string>;
    accessNetworkUesa?: pulumi.Input<string>;
    adviceOfCharges?: pulumi.Input<pulumi.Input<string>[]>;
    anqpDomainId?: pulumi.Input<number>;
    bssTransition?: pulumi.Input<string>;
    connCaps?: pulumi.Input<pulumi.Input<string>[]>;
    deauthRequestTimeout?: pulumi.Input<number>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    dgaf?: pulumi.Input<string>;
    domainName?: pulumi.Input<string>;
    gasComebackDelay?: pulumi.Input<number>;
    gasFragmentationLimit?: pulumi.Input<number>;
    hessid?: pulumi.Input<string>;
    ipAddrTypes?: pulumi.Input<pulumi.Input<string>[]>;
    l2tif?: pulumi.Input<string>;
    n3gppPlmns?: pulumi.Input<pulumi.Input<string>[]>;
    naiRealms?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    networkAuths?: pulumi.Input<pulumi.Input<string>[]>;
    operFriendlyNames?: pulumi.Input<pulumi.Input<string>[]>;
    operIcons?: pulumi.Input<pulumi.Input<string>[]>;
    osuProviderNais?: pulumi.Input<pulumi.Input<string>[]>;
    osuProviders?: pulumi.Input<pulumi.Input<string>[]>;
    osuSsid?: pulumi.Input<string>;
    pameBi?: pulumi.Input<string>;
    proxyArp?: pulumi.Input<string>;
    qosMaps?: pulumi.Input<pulumi.Input<string>[]>;
    release?: pulumi.Input<number>;
    roamingConsortia?: pulumi.Input<pulumi.Input<string>[]>;
    termsAndConditions?: pulumi.Input<pulumi.Input<string>[]>;
    venueGroup?: pulumi.Input<string>;
    venueNames?: pulumi.Input<pulumi.Input<string>[]>;
    venueType?: pulumi.Input<string>;
    venueUrls?: pulumi.Input<pulumi.Input<string>[]>;
    wanMetrics?: pulumi.Input<pulumi.Input<string>[]>;
    wnmSleepMode?: pulumi.Input<string>;
}
