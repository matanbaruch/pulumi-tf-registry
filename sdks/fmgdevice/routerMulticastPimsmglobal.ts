// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RouterMulticastPimsmglobal extends pulumi.CustomResource {
    /**
     * Get an existing RouterMulticastPimsmglobal resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouterMulticastPimsmglobalState, opts?: pulumi.CustomResourceOptions): RouterMulticastPimsmglobal {
        return new RouterMulticastPimsmglobal(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/routerMulticastPimsmglobal:RouterMulticastPimsmglobal';

    /**
     * Returns true if the given object is an instance of RouterMulticastPimsmglobal.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RouterMulticastPimsmglobal {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RouterMulticastPimsmglobal.__pulumiType;
    }

    public readonly acceptRegisterLists!: pulumi.Output<string[]>;
    public readonly acceptSourceLists!: pulumi.Output<string[]>;
    public readonly bsrAllowQuickRefresh!: pulumi.Output<string>;
    public readonly bsrCandidate!: pulumi.Output<string>;
    public readonly bsrHash!: pulumi.Output<number | undefined>;
    public readonly bsrInterfaces!: pulumi.Output<string[]>;
    public readonly bsrPriority!: pulumi.Output<number | undefined>;
    public readonly ciscoCrpPrefix!: pulumi.Output<string>;
    public readonly ciscoIgnoreRpSetPriority!: pulumi.Output<string>;
    public readonly ciscoRegisterChecksum!: pulumi.Output<string>;
    public readonly ciscoRegisterChecksumGroups!: pulumi.Output<string[]>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly deviceVdom!: pulumi.Output<string>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly joinPruneHoldtime!: pulumi.Output<number>;
    public readonly messageInterval!: pulumi.Output<number>;
    public readonly nullRegisterRetries!: pulumi.Output<number>;
    public readonly pimUseSdwan!: pulumi.Output<string>;
    public readonly registerRateLimit!: pulumi.Output<number | undefined>;
    public readonly registerRpReachability!: pulumi.Output<string>;
    public readonly registerSource!: pulumi.Output<string>;
    public readonly registerSourceInterfaces!: pulumi.Output<string[]>;
    public readonly registerSourceIp!: pulumi.Output<string | undefined>;
    public readonly registerSupression!: pulumi.Output<number>;
    public readonly rpAddresses!: pulumi.Output<outputs.RouterMulticastPimsmglobalRpAddress[] | undefined>;
    public readonly rpRegisterKeepalive!: pulumi.Output<number>;
    public readonly sptThreshold!: pulumi.Output<string>;
    public readonly sptThresholdGroups!: pulumi.Output<string[]>;
    public readonly ssm!: pulumi.Output<string>;
    public readonly ssmRanges!: pulumi.Output<string[]>;

    /**
     * Create a RouterMulticastPimsmglobal resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RouterMulticastPimsmglobalArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RouterMulticastPimsmglobalArgs | RouterMulticastPimsmglobalState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RouterMulticastPimsmglobalState | undefined;
            resourceInputs["acceptRegisterLists"] = state ? state.acceptRegisterLists : undefined;
            resourceInputs["acceptSourceLists"] = state ? state.acceptSourceLists : undefined;
            resourceInputs["bsrAllowQuickRefresh"] = state ? state.bsrAllowQuickRefresh : undefined;
            resourceInputs["bsrCandidate"] = state ? state.bsrCandidate : undefined;
            resourceInputs["bsrHash"] = state ? state.bsrHash : undefined;
            resourceInputs["bsrInterfaces"] = state ? state.bsrInterfaces : undefined;
            resourceInputs["bsrPriority"] = state ? state.bsrPriority : undefined;
            resourceInputs["ciscoCrpPrefix"] = state ? state.ciscoCrpPrefix : undefined;
            resourceInputs["ciscoIgnoreRpSetPriority"] = state ? state.ciscoIgnoreRpSetPriority : undefined;
            resourceInputs["ciscoRegisterChecksum"] = state ? state.ciscoRegisterChecksum : undefined;
            resourceInputs["ciscoRegisterChecksumGroups"] = state ? state.ciscoRegisterChecksumGroups : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["deviceVdom"] = state ? state.deviceVdom : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["joinPruneHoldtime"] = state ? state.joinPruneHoldtime : undefined;
            resourceInputs["messageInterval"] = state ? state.messageInterval : undefined;
            resourceInputs["nullRegisterRetries"] = state ? state.nullRegisterRetries : undefined;
            resourceInputs["pimUseSdwan"] = state ? state.pimUseSdwan : undefined;
            resourceInputs["registerRateLimit"] = state ? state.registerRateLimit : undefined;
            resourceInputs["registerRpReachability"] = state ? state.registerRpReachability : undefined;
            resourceInputs["registerSource"] = state ? state.registerSource : undefined;
            resourceInputs["registerSourceInterfaces"] = state ? state.registerSourceInterfaces : undefined;
            resourceInputs["registerSourceIp"] = state ? state.registerSourceIp : undefined;
            resourceInputs["registerSupression"] = state ? state.registerSupression : undefined;
            resourceInputs["rpAddresses"] = state ? state.rpAddresses : undefined;
            resourceInputs["rpRegisterKeepalive"] = state ? state.rpRegisterKeepalive : undefined;
            resourceInputs["sptThreshold"] = state ? state.sptThreshold : undefined;
            resourceInputs["sptThresholdGroups"] = state ? state.sptThresholdGroups : undefined;
            resourceInputs["ssm"] = state ? state.ssm : undefined;
            resourceInputs["ssmRanges"] = state ? state.ssmRanges : undefined;
        } else {
            const args = argsOrState as RouterMulticastPimsmglobalArgs | undefined;
            resourceInputs["acceptRegisterLists"] = args ? args.acceptRegisterLists : undefined;
            resourceInputs["acceptSourceLists"] = args ? args.acceptSourceLists : undefined;
            resourceInputs["bsrAllowQuickRefresh"] = args ? args.bsrAllowQuickRefresh : undefined;
            resourceInputs["bsrCandidate"] = args ? args.bsrCandidate : undefined;
            resourceInputs["bsrHash"] = args ? args.bsrHash : undefined;
            resourceInputs["bsrInterfaces"] = args ? args.bsrInterfaces : undefined;
            resourceInputs["bsrPriority"] = args ? args.bsrPriority : undefined;
            resourceInputs["ciscoCrpPrefix"] = args ? args.ciscoCrpPrefix : undefined;
            resourceInputs["ciscoIgnoreRpSetPriority"] = args ? args.ciscoIgnoreRpSetPriority : undefined;
            resourceInputs["ciscoRegisterChecksum"] = args ? args.ciscoRegisterChecksum : undefined;
            resourceInputs["ciscoRegisterChecksumGroups"] = args ? args.ciscoRegisterChecksumGroups : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["deviceVdom"] = args ? args.deviceVdom : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["joinPruneHoldtime"] = args ? args.joinPruneHoldtime : undefined;
            resourceInputs["messageInterval"] = args ? args.messageInterval : undefined;
            resourceInputs["nullRegisterRetries"] = args ? args.nullRegisterRetries : undefined;
            resourceInputs["pimUseSdwan"] = args ? args.pimUseSdwan : undefined;
            resourceInputs["registerRateLimit"] = args ? args.registerRateLimit : undefined;
            resourceInputs["registerRpReachability"] = args ? args.registerRpReachability : undefined;
            resourceInputs["registerSource"] = args ? args.registerSource : undefined;
            resourceInputs["registerSourceInterfaces"] = args ? args.registerSourceInterfaces : undefined;
            resourceInputs["registerSourceIp"] = args ? args.registerSourceIp : undefined;
            resourceInputs["registerSupression"] = args ? args.registerSupression : undefined;
            resourceInputs["rpAddresses"] = args ? args.rpAddresses : undefined;
            resourceInputs["rpRegisterKeepalive"] = args ? args.rpRegisterKeepalive : undefined;
            resourceInputs["sptThreshold"] = args ? args.sptThreshold : undefined;
            resourceInputs["sptThresholdGroups"] = args ? args.sptThresholdGroups : undefined;
            resourceInputs["ssm"] = args ? args.ssm : undefined;
            resourceInputs["ssmRanges"] = args ? args.ssmRanges : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RouterMulticastPimsmglobal.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RouterMulticastPimsmglobal resources.
 */
export interface RouterMulticastPimsmglobalState {
    acceptRegisterLists?: pulumi.Input<pulumi.Input<string>[]>;
    acceptSourceLists?: pulumi.Input<pulumi.Input<string>[]>;
    bsrAllowQuickRefresh?: pulumi.Input<string>;
    bsrCandidate?: pulumi.Input<string>;
    bsrHash?: pulumi.Input<number>;
    bsrInterfaces?: pulumi.Input<pulumi.Input<string>[]>;
    bsrPriority?: pulumi.Input<number>;
    ciscoCrpPrefix?: pulumi.Input<string>;
    ciscoIgnoreRpSetPriority?: pulumi.Input<string>;
    ciscoRegisterChecksum?: pulumi.Input<string>;
    ciscoRegisterChecksumGroups?: pulumi.Input<pulumi.Input<string>[]>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    joinPruneHoldtime?: pulumi.Input<number>;
    messageInterval?: pulumi.Input<number>;
    nullRegisterRetries?: pulumi.Input<number>;
    pimUseSdwan?: pulumi.Input<string>;
    registerRateLimit?: pulumi.Input<number>;
    registerRpReachability?: pulumi.Input<string>;
    registerSource?: pulumi.Input<string>;
    registerSourceInterfaces?: pulumi.Input<pulumi.Input<string>[]>;
    registerSourceIp?: pulumi.Input<string>;
    registerSupression?: pulumi.Input<number>;
    rpAddresses?: pulumi.Input<pulumi.Input<inputs.RouterMulticastPimsmglobalRpAddress>[]>;
    rpRegisterKeepalive?: pulumi.Input<number>;
    sptThreshold?: pulumi.Input<string>;
    sptThresholdGroups?: pulumi.Input<pulumi.Input<string>[]>;
    ssm?: pulumi.Input<string>;
    ssmRanges?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a RouterMulticastPimsmglobal resource.
 */
export interface RouterMulticastPimsmglobalArgs {
    acceptRegisterLists?: pulumi.Input<pulumi.Input<string>[]>;
    acceptSourceLists?: pulumi.Input<pulumi.Input<string>[]>;
    bsrAllowQuickRefresh?: pulumi.Input<string>;
    bsrCandidate?: pulumi.Input<string>;
    bsrHash?: pulumi.Input<number>;
    bsrInterfaces?: pulumi.Input<pulumi.Input<string>[]>;
    bsrPriority?: pulumi.Input<number>;
    ciscoCrpPrefix?: pulumi.Input<string>;
    ciscoIgnoreRpSetPriority?: pulumi.Input<string>;
    ciscoRegisterChecksum?: pulumi.Input<string>;
    ciscoRegisterChecksumGroups?: pulumi.Input<pulumi.Input<string>[]>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    joinPruneHoldtime?: pulumi.Input<number>;
    messageInterval?: pulumi.Input<number>;
    nullRegisterRetries?: pulumi.Input<number>;
    pimUseSdwan?: pulumi.Input<string>;
    registerRateLimit?: pulumi.Input<number>;
    registerRpReachability?: pulumi.Input<string>;
    registerSource?: pulumi.Input<string>;
    registerSourceInterfaces?: pulumi.Input<pulumi.Input<string>[]>;
    registerSourceIp?: pulumi.Input<string>;
    registerSupression?: pulumi.Input<number>;
    rpAddresses?: pulumi.Input<pulumi.Input<inputs.RouterMulticastPimsmglobalRpAddress>[]>;
    rpRegisterKeepalive?: pulumi.Input<number>;
    sptThreshold?: pulumi.Input<string>;
    sptThresholdGroups?: pulumi.Input<pulumi.Input<string>[]>;
    ssm?: pulumi.Input<string>;
    ssmRanges?: pulumi.Input<pulumi.Input<string>[]>;
}
