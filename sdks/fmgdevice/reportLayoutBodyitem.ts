// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ReportLayoutBodyitem extends pulumi.CustomResource {
    /**
     * Get an existing ReportLayoutBodyitem resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ReportLayoutBodyitemState, opts?: pulumi.CustomResourceOptions): ReportLayoutBodyitem {
        return new ReportLayoutBodyitem(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/reportLayoutBodyitem:ReportLayoutBodyitem';

    /**
     * Returns true if the given object is an instance of ReportLayoutBodyitem.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ReportLayoutBodyitem {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ReportLayoutBodyitem.__pulumiType;
    }

    public readonly chartOptions!: pulumi.Output<string[]>;
    public readonly charts!: pulumi.Output<string[]>;
    public readonly column!: pulumi.Output<number | undefined>;
    public readonly content!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly deviceVdom!: pulumi.Output<string>;
    public readonly drillDownItems!: pulumi.Output<string | undefined>;
    public readonly drillDownTypes!: pulumi.Output<string | undefined>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly fosid!: pulumi.Output<number | undefined>;
    public readonly hide!: pulumi.Output<string | undefined>;
    public readonly imgSrc!: pulumi.Output<string | undefined>;
    public readonly layout!: pulumi.Output<string>;
    public readonly listComponent!: pulumi.Output<string | undefined>;
    public readonly lists!: pulumi.Output<outputs.ReportLayoutBodyitemList[] | undefined>;
    public readonly miscComponent!: pulumi.Output<string>;
    public readonly parameters!: pulumi.Output<outputs.ReportLayoutBodyitemParameter[] | undefined>;
    public readonly styles!: pulumi.Output<string[]>;
    public readonly tableCaptionStyles!: pulumi.Output<string[]>;
    public readonly tableColumnWidths!: pulumi.Output<string | undefined>;
    public readonly tableEvenRowStyles!: pulumi.Output<string[]>;
    public readonly tableHeadStyles!: pulumi.Output<string[]>;
    public readonly tableOddRowStyles!: pulumi.Output<string[]>;
    public readonly textComponent!: pulumi.Output<string>;
    public readonly title!: pulumi.Output<string | undefined>;
    public readonly topN!: pulumi.Output<number | undefined>;
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a ReportLayoutBodyitem resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ReportLayoutBodyitemArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ReportLayoutBodyitemArgs | ReportLayoutBodyitemState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ReportLayoutBodyitemState | undefined;
            resourceInputs["chartOptions"] = state ? state.chartOptions : undefined;
            resourceInputs["charts"] = state ? state.charts : undefined;
            resourceInputs["column"] = state ? state.column : undefined;
            resourceInputs["content"] = state ? state.content : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["deviceVdom"] = state ? state.deviceVdom : undefined;
            resourceInputs["drillDownItems"] = state ? state.drillDownItems : undefined;
            resourceInputs["drillDownTypes"] = state ? state.drillDownTypes : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["fosid"] = state ? state.fosid : undefined;
            resourceInputs["hide"] = state ? state.hide : undefined;
            resourceInputs["imgSrc"] = state ? state.imgSrc : undefined;
            resourceInputs["layout"] = state ? state.layout : undefined;
            resourceInputs["listComponent"] = state ? state.listComponent : undefined;
            resourceInputs["lists"] = state ? state.lists : undefined;
            resourceInputs["miscComponent"] = state ? state.miscComponent : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["styles"] = state ? state.styles : undefined;
            resourceInputs["tableCaptionStyles"] = state ? state.tableCaptionStyles : undefined;
            resourceInputs["tableColumnWidths"] = state ? state.tableColumnWidths : undefined;
            resourceInputs["tableEvenRowStyles"] = state ? state.tableEvenRowStyles : undefined;
            resourceInputs["tableHeadStyles"] = state ? state.tableHeadStyles : undefined;
            resourceInputs["tableOddRowStyles"] = state ? state.tableOddRowStyles : undefined;
            resourceInputs["textComponent"] = state ? state.textComponent : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["topN"] = state ? state.topN : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as ReportLayoutBodyitemArgs | undefined;
            if ((!args || args.layout === undefined) && !opts.urn) {
                throw new Error("Missing required property 'layout'");
            }
            resourceInputs["chartOptions"] = args ? args.chartOptions : undefined;
            resourceInputs["charts"] = args ? args.charts : undefined;
            resourceInputs["column"] = args ? args.column : undefined;
            resourceInputs["content"] = args ? args.content : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["deviceVdom"] = args ? args.deviceVdom : undefined;
            resourceInputs["drillDownItems"] = args ? args.drillDownItems : undefined;
            resourceInputs["drillDownTypes"] = args ? args.drillDownTypes : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["fosid"] = args ? args.fosid : undefined;
            resourceInputs["hide"] = args ? args.hide : undefined;
            resourceInputs["imgSrc"] = args ? args.imgSrc : undefined;
            resourceInputs["layout"] = args ? args.layout : undefined;
            resourceInputs["listComponent"] = args ? args.listComponent : undefined;
            resourceInputs["lists"] = args ? args.lists : undefined;
            resourceInputs["miscComponent"] = args ? args.miscComponent : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["styles"] = args ? args.styles : undefined;
            resourceInputs["tableCaptionStyles"] = args ? args.tableCaptionStyles : undefined;
            resourceInputs["tableColumnWidths"] = args ? args.tableColumnWidths : undefined;
            resourceInputs["tableEvenRowStyles"] = args ? args.tableEvenRowStyles : undefined;
            resourceInputs["tableHeadStyles"] = args ? args.tableHeadStyles : undefined;
            resourceInputs["tableOddRowStyles"] = args ? args.tableOddRowStyles : undefined;
            resourceInputs["textComponent"] = args ? args.textComponent : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["topN"] = args ? args.topN : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ReportLayoutBodyitem.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ReportLayoutBodyitem resources.
 */
export interface ReportLayoutBodyitemState {
    chartOptions?: pulumi.Input<pulumi.Input<string>[]>;
    charts?: pulumi.Input<pulumi.Input<string>[]>;
    column?: pulumi.Input<number>;
    content?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    drillDownItems?: pulumi.Input<string>;
    drillDownTypes?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    fosid?: pulumi.Input<number>;
    hide?: pulumi.Input<string>;
    imgSrc?: pulumi.Input<string>;
    layout?: pulumi.Input<string>;
    listComponent?: pulumi.Input<string>;
    lists?: pulumi.Input<pulumi.Input<inputs.ReportLayoutBodyitemList>[]>;
    miscComponent?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<inputs.ReportLayoutBodyitemParameter>[]>;
    styles?: pulumi.Input<pulumi.Input<string>[]>;
    tableCaptionStyles?: pulumi.Input<pulumi.Input<string>[]>;
    tableColumnWidths?: pulumi.Input<string>;
    tableEvenRowStyles?: pulumi.Input<pulumi.Input<string>[]>;
    tableHeadStyles?: pulumi.Input<pulumi.Input<string>[]>;
    tableOddRowStyles?: pulumi.Input<pulumi.Input<string>[]>;
    textComponent?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
    topN?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ReportLayoutBodyitem resource.
 */
export interface ReportLayoutBodyitemArgs {
    chartOptions?: pulumi.Input<pulumi.Input<string>[]>;
    charts?: pulumi.Input<pulumi.Input<string>[]>;
    column?: pulumi.Input<number>;
    content?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    drillDownItems?: pulumi.Input<string>;
    drillDownTypes?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    fosid?: pulumi.Input<number>;
    hide?: pulumi.Input<string>;
    imgSrc?: pulumi.Input<string>;
    layout: pulumi.Input<string>;
    listComponent?: pulumi.Input<string>;
    lists?: pulumi.Input<pulumi.Input<inputs.ReportLayoutBodyitemList>[]>;
    miscComponent?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<inputs.ReportLayoutBodyitemParameter>[]>;
    styles?: pulumi.Input<pulumi.Input<string>[]>;
    tableCaptionStyles?: pulumi.Input<pulumi.Input<string>[]>;
    tableColumnWidths?: pulumi.Input<string>;
    tableEvenRowStyles?: pulumi.Input<pulumi.Input<string>[]>;
    tableHeadStyles?: pulumi.Input<pulumi.Input<string>[]>;
    tableOddRowStyles?: pulumi.Input<pulumi.Input<string>[]>;
    textComponent?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
    topN?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
}
