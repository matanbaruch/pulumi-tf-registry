// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SystemGeneve extends pulumi.CustomResource {
    /**
     * Get an existing SystemGeneve resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemGeneveState, opts?: pulumi.CustomResourceOptions): SystemGeneve {
        return new SystemGeneve(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/systemGeneve:SystemGeneve';

    /**
     * Returns true if the given object is an instance of SystemGeneve.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemGeneve {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemGeneve.__pulumiType;
    }

    public readonly deviceName!: pulumi.Output<string>;
    public readonly deviceVdom!: pulumi.Output<string>;
    public readonly dstport!: pulumi.Output<number>;
    public readonly interfaces!: pulumi.Output<string[]>;
    public readonly ipVersion!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly remoteIp!: pulumi.Output<string>;
    public readonly remoteIp6!: pulumi.Output<string | undefined>;
    public readonly type!: pulumi.Output<string>;
    public readonly vni!: pulumi.Output<number | undefined>;

    /**
     * Create a SystemGeneve resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemGeneveArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemGeneveArgs | SystemGeneveState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemGeneveState | undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["deviceVdom"] = state ? state.deviceVdom : undefined;
            resourceInputs["dstport"] = state ? state.dstport : undefined;
            resourceInputs["interfaces"] = state ? state.interfaces : undefined;
            resourceInputs["ipVersion"] = state ? state.ipVersion : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["remoteIp"] = state ? state.remoteIp : undefined;
            resourceInputs["remoteIp6"] = state ? state.remoteIp6 : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vni"] = state ? state.vni : undefined;
        } else {
            const args = argsOrState as SystemGeneveArgs | undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["deviceVdom"] = args ? args.deviceVdom : undefined;
            resourceInputs["dstport"] = args ? args.dstport : undefined;
            resourceInputs["interfaces"] = args ? args.interfaces : undefined;
            resourceInputs["ipVersion"] = args ? args.ipVersion : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["remoteIp"] = args ? args.remoteIp : undefined;
            resourceInputs["remoteIp6"] = args ? args.remoteIp6 : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["vni"] = args ? args.vni : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SystemGeneve.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemGeneve resources.
 */
export interface SystemGeneveState {
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    dstport?: pulumi.Input<number>;
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    ipVersion?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    remoteIp?: pulumi.Input<string>;
    remoteIp6?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    vni?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SystemGeneve resource.
 */
export interface SystemGeneveArgs {
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    dstport?: pulumi.Input<number>;
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    ipVersion?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    remoteIp?: pulumi.Input<string>;
    remoteIp6?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    vni?: pulumi.Input<number>;
}
