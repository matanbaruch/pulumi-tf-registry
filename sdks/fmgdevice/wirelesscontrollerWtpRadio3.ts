// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class WirelesscontrollerWtpRadio3 extends pulumi.CustomResource {
    /**
     * Get an existing WirelesscontrollerWtpRadio3 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WirelesscontrollerWtpRadio3State, opts?: pulumi.CustomResourceOptions): WirelesscontrollerWtpRadio3 {
        return new WirelesscontrollerWtpRadio3(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/wirelesscontrollerWtpRadio3:WirelesscontrollerWtpRadio3';

    /**
     * Returns true if the given object is an instance of WirelesscontrollerWtpRadio3.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WirelesscontrollerWtpRadio3 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WirelesscontrollerWtpRadio3.__pulumiType;
    }

    public readonly autoPowerHigh!: pulumi.Output<number | undefined>;
    public readonly autoPowerLevel!: pulumi.Output<string | undefined>;
    public readonly autoPowerLow!: pulumi.Output<number | undefined>;
    public readonly autoPowerTarget!: pulumi.Output<string>;
    public readonly bands!: pulumi.Output<string[]>;
    public readonly channels!: pulumi.Output<string[]>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly deviceVdom!: pulumi.Output<string>;
    public readonly drmaManualMode!: pulumi.Output<string | undefined>;
    public readonly overrideAnalysis!: pulumi.Output<string | undefined>;
    public readonly overrideBand!: pulumi.Output<string>;
    public readonly overrideChannel!: pulumi.Output<string>;
    public readonly overrideTxpower!: pulumi.Output<string>;
    public readonly overrideVaps!: pulumi.Output<string>;
    public readonly powerLevel!: pulumi.Output<number | undefined>;
    public readonly powerMode!: pulumi.Output<string>;
    public readonly powerValue!: pulumi.Output<number>;
    public readonly radioId!: pulumi.Output<number>;
    public readonly spectrumAnalysis!: pulumi.Output<string | undefined>;
    public readonly vap1!: pulumi.Output<string | undefined>;
    public readonly vap2!: pulumi.Output<string | undefined>;
    public readonly vap3!: pulumi.Output<string | undefined>;
    public readonly vap4!: pulumi.Output<string | undefined>;
    public readonly vap5!: pulumi.Output<string | undefined>;
    public readonly vap6!: pulumi.Output<string | undefined>;
    public readonly vap7!: pulumi.Output<string | undefined>;
    public readonly vap8!: pulumi.Output<string | undefined>;
    public readonly vapAll!: pulumi.Output<string | undefined>;
    public readonly vaps!: pulumi.Output<string[]>;
    public readonly wtp!: pulumi.Output<string>;

    /**
     * Create a WirelesscontrollerWtpRadio3 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WirelesscontrollerWtpRadio3Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WirelesscontrollerWtpRadio3Args | WirelesscontrollerWtpRadio3State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WirelesscontrollerWtpRadio3State | undefined;
            resourceInputs["autoPowerHigh"] = state ? state.autoPowerHigh : undefined;
            resourceInputs["autoPowerLevel"] = state ? state.autoPowerLevel : undefined;
            resourceInputs["autoPowerLow"] = state ? state.autoPowerLow : undefined;
            resourceInputs["autoPowerTarget"] = state ? state.autoPowerTarget : undefined;
            resourceInputs["bands"] = state ? state.bands : undefined;
            resourceInputs["channels"] = state ? state.channels : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["deviceVdom"] = state ? state.deviceVdom : undefined;
            resourceInputs["drmaManualMode"] = state ? state.drmaManualMode : undefined;
            resourceInputs["overrideAnalysis"] = state ? state.overrideAnalysis : undefined;
            resourceInputs["overrideBand"] = state ? state.overrideBand : undefined;
            resourceInputs["overrideChannel"] = state ? state.overrideChannel : undefined;
            resourceInputs["overrideTxpower"] = state ? state.overrideTxpower : undefined;
            resourceInputs["overrideVaps"] = state ? state.overrideVaps : undefined;
            resourceInputs["powerLevel"] = state ? state.powerLevel : undefined;
            resourceInputs["powerMode"] = state ? state.powerMode : undefined;
            resourceInputs["powerValue"] = state ? state.powerValue : undefined;
            resourceInputs["radioId"] = state ? state.radioId : undefined;
            resourceInputs["spectrumAnalysis"] = state ? state.spectrumAnalysis : undefined;
            resourceInputs["vap1"] = state ? state.vap1 : undefined;
            resourceInputs["vap2"] = state ? state.vap2 : undefined;
            resourceInputs["vap3"] = state ? state.vap3 : undefined;
            resourceInputs["vap4"] = state ? state.vap4 : undefined;
            resourceInputs["vap5"] = state ? state.vap5 : undefined;
            resourceInputs["vap6"] = state ? state.vap6 : undefined;
            resourceInputs["vap7"] = state ? state.vap7 : undefined;
            resourceInputs["vap8"] = state ? state.vap8 : undefined;
            resourceInputs["vapAll"] = state ? state.vapAll : undefined;
            resourceInputs["vaps"] = state ? state.vaps : undefined;
            resourceInputs["wtp"] = state ? state.wtp : undefined;
        } else {
            const args = argsOrState as WirelesscontrollerWtpRadio3Args | undefined;
            if ((!args || args.wtp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'wtp'");
            }
            resourceInputs["autoPowerHigh"] = args ? args.autoPowerHigh : undefined;
            resourceInputs["autoPowerLevel"] = args ? args.autoPowerLevel : undefined;
            resourceInputs["autoPowerLow"] = args ? args.autoPowerLow : undefined;
            resourceInputs["autoPowerTarget"] = args ? args.autoPowerTarget : undefined;
            resourceInputs["bands"] = args ? args.bands : undefined;
            resourceInputs["channels"] = args ? args.channels : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["deviceVdom"] = args ? args.deviceVdom : undefined;
            resourceInputs["drmaManualMode"] = args ? args.drmaManualMode : undefined;
            resourceInputs["overrideAnalysis"] = args ? args.overrideAnalysis : undefined;
            resourceInputs["overrideBand"] = args ? args.overrideBand : undefined;
            resourceInputs["overrideChannel"] = args ? args.overrideChannel : undefined;
            resourceInputs["overrideTxpower"] = args ? args.overrideTxpower : undefined;
            resourceInputs["overrideVaps"] = args ? args.overrideVaps : undefined;
            resourceInputs["powerLevel"] = args ? args.powerLevel : undefined;
            resourceInputs["powerMode"] = args ? args.powerMode : undefined;
            resourceInputs["powerValue"] = args ? args.powerValue : undefined;
            resourceInputs["radioId"] = args ? args.radioId : undefined;
            resourceInputs["spectrumAnalysis"] = args ? args.spectrumAnalysis : undefined;
            resourceInputs["vap1"] = args ? args.vap1 : undefined;
            resourceInputs["vap2"] = args ? args.vap2 : undefined;
            resourceInputs["vap3"] = args ? args.vap3 : undefined;
            resourceInputs["vap4"] = args ? args.vap4 : undefined;
            resourceInputs["vap5"] = args ? args.vap5 : undefined;
            resourceInputs["vap6"] = args ? args.vap6 : undefined;
            resourceInputs["vap7"] = args ? args.vap7 : undefined;
            resourceInputs["vap8"] = args ? args.vap8 : undefined;
            resourceInputs["vapAll"] = args ? args.vapAll : undefined;
            resourceInputs["vaps"] = args ? args.vaps : undefined;
            resourceInputs["wtp"] = args ? args.wtp : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WirelesscontrollerWtpRadio3.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WirelesscontrollerWtpRadio3 resources.
 */
export interface WirelesscontrollerWtpRadio3State {
    autoPowerHigh?: pulumi.Input<number>;
    autoPowerLevel?: pulumi.Input<string>;
    autoPowerLow?: pulumi.Input<number>;
    autoPowerTarget?: pulumi.Input<string>;
    bands?: pulumi.Input<pulumi.Input<string>[]>;
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    drmaManualMode?: pulumi.Input<string>;
    overrideAnalysis?: pulumi.Input<string>;
    overrideBand?: pulumi.Input<string>;
    overrideChannel?: pulumi.Input<string>;
    overrideTxpower?: pulumi.Input<string>;
    overrideVaps?: pulumi.Input<string>;
    powerLevel?: pulumi.Input<number>;
    powerMode?: pulumi.Input<string>;
    powerValue?: pulumi.Input<number>;
    radioId?: pulumi.Input<number>;
    spectrumAnalysis?: pulumi.Input<string>;
    vap1?: pulumi.Input<string>;
    vap2?: pulumi.Input<string>;
    vap3?: pulumi.Input<string>;
    vap4?: pulumi.Input<string>;
    vap5?: pulumi.Input<string>;
    vap6?: pulumi.Input<string>;
    vap7?: pulumi.Input<string>;
    vap8?: pulumi.Input<string>;
    vapAll?: pulumi.Input<string>;
    vaps?: pulumi.Input<pulumi.Input<string>[]>;
    wtp?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WirelesscontrollerWtpRadio3 resource.
 */
export interface WirelesscontrollerWtpRadio3Args {
    autoPowerHigh?: pulumi.Input<number>;
    autoPowerLevel?: pulumi.Input<string>;
    autoPowerLow?: pulumi.Input<number>;
    autoPowerTarget?: pulumi.Input<string>;
    bands?: pulumi.Input<pulumi.Input<string>[]>;
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    drmaManualMode?: pulumi.Input<string>;
    overrideAnalysis?: pulumi.Input<string>;
    overrideBand?: pulumi.Input<string>;
    overrideChannel?: pulumi.Input<string>;
    overrideTxpower?: pulumi.Input<string>;
    overrideVaps?: pulumi.Input<string>;
    powerLevel?: pulumi.Input<number>;
    powerMode?: pulumi.Input<string>;
    powerValue?: pulumi.Input<number>;
    radioId?: pulumi.Input<number>;
    spectrumAnalysis?: pulumi.Input<string>;
    vap1?: pulumi.Input<string>;
    vap2?: pulumi.Input<string>;
    vap3?: pulumi.Input<string>;
    vap4?: pulumi.Input<string>;
    vap5?: pulumi.Input<string>;
    vap6?: pulumi.Input<string>;
    vap7?: pulumi.Input<string>;
    vap8?: pulumi.Input<string>;
    vapAll?: pulumi.Input<string>;
    vaps?: pulumi.Input<pulumi.Input<string>[]>;
    wtp: pulumi.Input<string>;
}
