// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class WirelesscontrollerWtpprofileRadio1 extends pulumi.CustomResource {
    /**
     * Get an existing WirelesscontrollerWtpprofileRadio1 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WirelesscontrollerWtpprofileRadio1State, opts?: pulumi.CustomResourceOptions): WirelesscontrollerWtpprofileRadio1 {
        return new WirelesscontrollerWtpprofileRadio1(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/wirelesscontrollerWtpprofileRadio1:WirelesscontrollerWtpprofileRadio1';

    /**
     * Returns true if the given object is an instance of WirelesscontrollerWtpprofileRadio1.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WirelesscontrollerWtpprofileRadio1 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WirelesscontrollerWtpprofileRadio1.__pulumiType;
    }

    public readonly airtimeFairness!: pulumi.Output<string>;
    public readonly amsdu!: pulumi.Output<string>;
    public readonly apHandoff!: pulumi.Output<string | undefined>;
    public readonly apSnifferAddr!: pulumi.Output<string | undefined>;
    public readonly apSnifferBufsize!: pulumi.Output<number | undefined>;
    public readonly apSnifferChan!: pulumi.Output<number | undefined>;
    public readonly apSnifferCtl!: pulumi.Output<string | undefined>;
    public readonly apSnifferData!: pulumi.Output<string | undefined>;
    public readonly apSnifferMgmtBeacon!: pulumi.Output<string | undefined>;
    public readonly apSnifferMgmtOther!: pulumi.Output<string | undefined>;
    public readonly apSnifferMgmtProbe!: pulumi.Output<string | undefined>;
    public readonly arrpProfiles!: pulumi.Output<string[]>;
    public readonly autoPowerHigh!: pulumi.Output<number | undefined>;
    public readonly autoPowerLevel!: pulumi.Output<string>;
    public readonly autoPowerLow!: pulumi.Output<number | undefined>;
    public readonly autoPowerTarget!: pulumi.Output<string>;
    public readonly band5gType!: pulumi.Output<string>;
    public readonly bands!: pulumi.Output<string[]>;
    public readonly bandwidthAdmissionControl!: pulumi.Output<string>;
    public readonly bandwidthCapacity!: pulumi.Output<number>;
    public readonly beaconInterval!: pulumi.Output<number>;
    public readonly bssColor!: pulumi.Output<number | undefined>;
    public readonly bssColorMode!: pulumi.Output<string>;
    public readonly callAdmissionControl!: pulumi.Output<string>;
    public readonly callCapacity!: pulumi.Output<number>;
    public readonly channelBonding!: pulumi.Output<string>;
    public readonly channelBondingExt!: pulumi.Output<string>;
    public readonly channelUtilization!: pulumi.Output<string>;
    public readonly channels!: pulumi.Output<string[]>;
    public readonly coexistence!: pulumi.Output<string>;
    public readonly darrp!: pulumi.Output<string>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly deviceVdom!: pulumi.Output<string>;
    public readonly drma!: pulumi.Output<string>;
    public readonly drmaSensitivity!: pulumi.Output<string>;
    public readonly dtim!: pulumi.Output<number>;
    public readonly fragThreshold!: pulumi.Output<number>;
    public readonly frequencyHandoff!: pulumi.Output<string | undefined>;
    public readonly iperfProtocol!: pulumi.Output<string | undefined>;
    public readonly iperfServerPort!: pulumi.Output<number | undefined>;
    public readonly maxClients!: pulumi.Output<number | undefined>;
    public readonly maxDistance!: pulumi.Output<number | undefined>;
    public readonly mimoMode!: pulumi.Output<string | undefined>;
    public readonly mode!: pulumi.Output<string>;
    public readonly n80211d!: pulumi.Output<string>;
    public readonly optionalAntenna!: pulumi.Output<string>;
    public readonly optionalAntennaGain!: pulumi.Output<string>;
    public readonly powerLevel!: pulumi.Output<number>;
    public readonly powerMode!: pulumi.Output<string>;
    public readonly powerValue!: pulumi.Output<number | undefined>;
    public readonly powersaveOptimizes!: pulumi.Output<string[]>;
    public readonly protectionMode!: pulumi.Output<string>;
    public readonly radioId!: pulumi.Output<number | undefined>;
    public readonly rtsThreshold!: pulumi.Output<number>;
    public readonly samBssid!: pulumi.Output<string | undefined>;
    public readonly samCaCertificates!: pulumi.Output<string[]>;
    public readonly samCaptivePortal!: pulumi.Output<string | undefined>;
    public readonly samClientCertificates!: pulumi.Output<string[]>;
    public readonly samCwpFailureString!: pulumi.Output<string | undefined>;
    public readonly samCwpMatchString!: pulumi.Output<string | undefined>;
    public readonly samCwpPasswords!: pulumi.Output<string[]>;
    public readonly samCwpSuccessString!: pulumi.Output<string | undefined>;
    public readonly samCwpTestUrl!: pulumi.Output<string | undefined>;
    public readonly samCwpUsername!: pulumi.Output<string | undefined>;
    public readonly samEapMethod!: pulumi.Output<string>;
    public readonly samPasswords!: pulumi.Output<string[]>;
    public readonly samPrivateKeyPasswords!: pulumi.Output<string[]>;
    public readonly samPrivateKeys!: pulumi.Output<string[]>;
    public readonly samReportIntv!: pulumi.Output<number | undefined>;
    public readonly samSecurityType!: pulumi.Output<string | undefined>;
    public readonly samServer!: pulumi.Output<string | undefined>;
    public readonly samServerFqdn!: pulumi.Output<string | undefined>;
    public readonly samServerIp!: pulumi.Output<string | undefined>;
    public readonly samServerType!: pulumi.Output<string | undefined>;
    public readonly samSsid!: pulumi.Output<string | undefined>;
    public readonly samTest!: pulumi.Output<string | undefined>;
    public readonly samUsername!: pulumi.Output<string | undefined>;
    public readonly shortGuardInterval!: pulumi.Output<string>;
    public readonly spectrumAnalysis!: pulumi.Output<string | undefined>;
    public readonly transmitOptimizes!: pulumi.Output<string[]>;
    public readonly vap1!: pulumi.Output<string | undefined>;
    public readonly vap2!: pulumi.Output<string | undefined>;
    public readonly vap3!: pulumi.Output<string | undefined>;
    public readonly vap4!: pulumi.Output<string | undefined>;
    public readonly vap5!: pulumi.Output<string | undefined>;
    public readonly vap6!: pulumi.Output<string | undefined>;
    public readonly vap7!: pulumi.Output<string | undefined>;
    public readonly vap8!: pulumi.Output<string | undefined>;
    public readonly vapAll!: pulumi.Output<string>;
    public readonly vaps!: pulumi.Output<string[]>;
    public readonly widsProfiles!: pulumi.Output<string[]>;
    public readonly wtpProfile!: pulumi.Output<string>;
    public readonly zeroWaitDfs!: pulumi.Output<string>;

    /**
     * Create a WirelesscontrollerWtpprofileRadio1 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WirelesscontrollerWtpprofileRadio1Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WirelesscontrollerWtpprofileRadio1Args | WirelesscontrollerWtpprofileRadio1State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WirelesscontrollerWtpprofileRadio1State | undefined;
            resourceInputs["airtimeFairness"] = state ? state.airtimeFairness : undefined;
            resourceInputs["amsdu"] = state ? state.amsdu : undefined;
            resourceInputs["apHandoff"] = state ? state.apHandoff : undefined;
            resourceInputs["apSnifferAddr"] = state ? state.apSnifferAddr : undefined;
            resourceInputs["apSnifferBufsize"] = state ? state.apSnifferBufsize : undefined;
            resourceInputs["apSnifferChan"] = state ? state.apSnifferChan : undefined;
            resourceInputs["apSnifferCtl"] = state ? state.apSnifferCtl : undefined;
            resourceInputs["apSnifferData"] = state ? state.apSnifferData : undefined;
            resourceInputs["apSnifferMgmtBeacon"] = state ? state.apSnifferMgmtBeacon : undefined;
            resourceInputs["apSnifferMgmtOther"] = state ? state.apSnifferMgmtOther : undefined;
            resourceInputs["apSnifferMgmtProbe"] = state ? state.apSnifferMgmtProbe : undefined;
            resourceInputs["arrpProfiles"] = state ? state.arrpProfiles : undefined;
            resourceInputs["autoPowerHigh"] = state ? state.autoPowerHigh : undefined;
            resourceInputs["autoPowerLevel"] = state ? state.autoPowerLevel : undefined;
            resourceInputs["autoPowerLow"] = state ? state.autoPowerLow : undefined;
            resourceInputs["autoPowerTarget"] = state ? state.autoPowerTarget : undefined;
            resourceInputs["band5gType"] = state ? state.band5gType : undefined;
            resourceInputs["bands"] = state ? state.bands : undefined;
            resourceInputs["bandwidthAdmissionControl"] = state ? state.bandwidthAdmissionControl : undefined;
            resourceInputs["bandwidthCapacity"] = state ? state.bandwidthCapacity : undefined;
            resourceInputs["beaconInterval"] = state ? state.beaconInterval : undefined;
            resourceInputs["bssColor"] = state ? state.bssColor : undefined;
            resourceInputs["bssColorMode"] = state ? state.bssColorMode : undefined;
            resourceInputs["callAdmissionControl"] = state ? state.callAdmissionControl : undefined;
            resourceInputs["callCapacity"] = state ? state.callCapacity : undefined;
            resourceInputs["channelBonding"] = state ? state.channelBonding : undefined;
            resourceInputs["channelBondingExt"] = state ? state.channelBondingExt : undefined;
            resourceInputs["channelUtilization"] = state ? state.channelUtilization : undefined;
            resourceInputs["channels"] = state ? state.channels : undefined;
            resourceInputs["coexistence"] = state ? state.coexistence : undefined;
            resourceInputs["darrp"] = state ? state.darrp : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["deviceVdom"] = state ? state.deviceVdom : undefined;
            resourceInputs["drma"] = state ? state.drma : undefined;
            resourceInputs["drmaSensitivity"] = state ? state.drmaSensitivity : undefined;
            resourceInputs["dtim"] = state ? state.dtim : undefined;
            resourceInputs["fragThreshold"] = state ? state.fragThreshold : undefined;
            resourceInputs["frequencyHandoff"] = state ? state.frequencyHandoff : undefined;
            resourceInputs["iperfProtocol"] = state ? state.iperfProtocol : undefined;
            resourceInputs["iperfServerPort"] = state ? state.iperfServerPort : undefined;
            resourceInputs["maxClients"] = state ? state.maxClients : undefined;
            resourceInputs["maxDistance"] = state ? state.maxDistance : undefined;
            resourceInputs["mimoMode"] = state ? state.mimoMode : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["n80211d"] = state ? state.n80211d : undefined;
            resourceInputs["optionalAntenna"] = state ? state.optionalAntenna : undefined;
            resourceInputs["optionalAntennaGain"] = state ? state.optionalAntennaGain : undefined;
            resourceInputs["powerLevel"] = state ? state.powerLevel : undefined;
            resourceInputs["powerMode"] = state ? state.powerMode : undefined;
            resourceInputs["powerValue"] = state ? state.powerValue : undefined;
            resourceInputs["powersaveOptimizes"] = state ? state.powersaveOptimizes : undefined;
            resourceInputs["protectionMode"] = state ? state.protectionMode : undefined;
            resourceInputs["radioId"] = state ? state.radioId : undefined;
            resourceInputs["rtsThreshold"] = state ? state.rtsThreshold : undefined;
            resourceInputs["samBssid"] = state ? state.samBssid : undefined;
            resourceInputs["samCaCertificates"] = state ? state.samCaCertificates : undefined;
            resourceInputs["samCaptivePortal"] = state ? state.samCaptivePortal : undefined;
            resourceInputs["samClientCertificates"] = state ? state.samClientCertificates : undefined;
            resourceInputs["samCwpFailureString"] = state ? state.samCwpFailureString : undefined;
            resourceInputs["samCwpMatchString"] = state ? state.samCwpMatchString : undefined;
            resourceInputs["samCwpPasswords"] = state ? state.samCwpPasswords : undefined;
            resourceInputs["samCwpSuccessString"] = state ? state.samCwpSuccessString : undefined;
            resourceInputs["samCwpTestUrl"] = state ? state.samCwpTestUrl : undefined;
            resourceInputs["samCwpUsername"] = state ? state.samCwpUsername : undefined;
            resourceInputs["samEapMethod"] = state ? state.samEapMethod : undefined;
            resourceInputs["samPasswords"] = state ? state.samPasswords : undefined;
            resourceInputs["samPrivateKeyPasswords"] = state ? state.samPrivateKeyPasswords : undefined;
            resourceInputs["samPrivateKeys"] = state ? state.samPrivateKeys : undefined;
            resourceInputs["samReportIntv"] = state ? state.samReportIntv : undefined;
            resourceInputs["samSecurityType"] = state ? state.samSecurityType : undefined;
            resourceInputs["samServer"] = state ? state.samServer : undefined;
            resourceInputs["samServerFqdn"] = state ? state.samServerFqdn : undefined;
            resourceInputs["samServerIp"] = state ? state.samServerIp : undefined;
            resourceInputs["samServerType"] = state ? state.samServerType : undefined;
            resourceInputs["samSsid"] = state ? state.samSsid : undefined;
            resourceInputs["samTest"] = state ? state.samTest : undefined;
            resourceInputs["samUsername"] = state ? state.samUsername : undefined;
            resourceInputs["shortGuardInterval"] = state ? state.shortGuardInterval : undefined;
            resourceInputs["spectrumAnalysis"] = state ? state.spectrumAnalysis : undefined;
            resourceInputs["transmitOptimizes"] = state ? state.transmitOptimizes : undefined;
            resourceInputs["vap1"] = state ? state.vap1 : undefined;
            resourceInputs["vap2"] = state ? state.vap2 : undefined;
            resourceInputs["vap3"] = state ? state.vap3 : undefined;
            resourceInputs["vap4"] = state ? state.vap4 : undefined;
            resourceInputs["vap5"] = state ? state.vap5 : undefined;
            resourceInputs["vap6"] = state ? state.vap6 : undefined;
            resourceInputs["vap7"] = state ? state.vap7 : undefined;
            resourceInputs["vap8"] = state ? state.vap8 : undefined;
            resourceInputs["vapAll"] = state ? state.vapAll : undefined;
            resourceInputs["vaps"] = state ? state.vaps : undefined;
            resourceInputs["widsProfiles"] = state ? state.widsProfiles : undefined;
            resourceInputs["wtpProfile"] = state ? state.wtpProfile : undefined;
            resourceInputs["zeroWaitDfs"] = state ? state.zeroWaitDfs : undefined;
        } else {
            const args = argsOrState as WirelesscontrollerWtpprofileRadio1Args | undefined;
            if ((!args || args.wtpProfile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'wtpProfile'");
            }
            resourceInputs["airtimeFairness"] = args ? args.airtimeFairness : undefined;
            resourceInputs["amsdu"] = args ? args.amsdu : undefined;
            resourceInputs["apHandoff"] = args ? args.apHandoff : undefined;
            resourceInputs["apSnifferAddr"] = args ? args.apSnifferAddr : undefined;
            resourceInputs["apSnifferBufsize"] = args ? args.apSnifferBufsize : undefined;
            resourceInputs["apSnifferChan"] = args ? args.apSnifferChan : undefined;
            resourceInputs["apSnifferCtl"] = args ? args.apSnifferCtl : undefined;
            resourceInputs["apSnifferData"] = args ? args.apSnifferData : undefined;
            resourceInputs["apSnifferMgmtBeacon"] = args ? args.apSnifferMgmtBeacon : undefined;
            resourceInputs["apSnifferMgmtOther"] = args ? args.apSnifferMgmtOther : undefined;
            resourceInputs["apSnifferMgmtProbe"] = args ? args.apSnifferMgmtProbe : undefined;
            resourceInputs["arrpProfiles"] = args ? args.arrpProfiles : undefined;
            resourceInputs["autoPowerHigh"] = args ? args.autoPowerHigh : undefined;
            resourceInputs["autoPowerLevel"] = args ? args.autoPowerLevel : undefined;
            resourceInputs["autoPowerLow"] = args ? args.autoPowerLow : undefined;
            resourceInputs["autoPowerTarget"] = args ? args.autoPowerTarget : undefined;
            resourceInputs["band5gType"] = args ? args.band5gType : undefined;
            resourceInputs["bands"] = args ? args.bands : undefined;
            resourceInputs["bandwidthAdmissionControl"] = args ? args.bandwidthAdmissionControl : undefined;
            resourceInputs["bandwidthCapacity"] = args ? args.bandwidthCapacity : undefined;
            resourceInputs["beaconInterval"] = args ? args.beaconInterval : undefined;
            resourceInputs["bssColor"] = args ? args.bssColor : undefined;
            resourceInputs["bssColorMode"] = args ? args.bssColorMode : undefined;
            resourceInputs["callAdmissionControl"] = args ? args.callAdmissionControl : undefined;
            resourceInputs["callCapacity"] = args ? args.callCapacity : undefined;
            resourceInputs["channelBonding"] = args ? args.channelBonding : undefined;
            resourceInputs["channelBondingExt"] = args ? args.channelBondingExt : undefined;
            resourceInputs["channelUtilization"] = args ? args.channelUtilization : undefined;
            resourceInputs["channels"] = args ? args.channels : undefined;
            resourceInputs["coexistence"] = args ? args.coexistence : undefined;
            resourceInputs["darrp"] = args ? args.darrp : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["deviceVdom"] = args ? args.deviceVdom : undefined;
            resourceInputs["drma"] = args ? args.drma : undefined;
            resourceInputs["drmaSensitivity"] = args ? args.drmaSensitivity : undefined;
            resourceInputs["dtim"] = args ? args.dtim : undefined;
            resourceInputs["fragThreshold"] = args ? args.fragThreshold : undefined;
            resourceInputs["frequencyHandoff"] = args ? args.frequencyHandoff : undefined;
            resourceInputs["iperfProtocol"] = args ? args.iperfProtocol : undefined;
            resourceInputs["iperfServerPort"] = args ? args.iperfServerPort : undefined;
            resourceInputs["maxClients"] = args ? args.maxClients : undefined;
            resourceInputs["maxDistance"] = args ? args.maxDistance : undefined;
            resourceInputs["mimoMode"] = args ? args.mimoMode : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["n80211d"] = args ? args.n80211d : undefined;
            resourceInputs["optionalAntenna"] = args ? args.optionalAntenna : undefined;
            resourceInputs["optionalAntennaGain"] = args ? args.optionalAntennaGain : undefined;
            resourceInputs["powerLevel"] = args ? args.powerLevel : undefined;
            resourceInputs["powerMode"] = args ? args.powerMode : undefined;
            resourceInputs["powerValue"] = args ? args.powerValue : undefined;
            resourceInputs["powersaveOptimizes"] = args ? args.powersaveOptimizes : undefined;
            resourceInputs["protectionMode"] = args ? args.protectionMode : undefined;
            resourceInputs["radioId"] = args ? args.radioId : undefined;
            resourceInputs["rtsThreshold"] = args ? args.rtsThreshold : undefined;
            resourceInputs["samBssid"] = args ? args.samBssid : undefined;
            resourceInputs["samCaCertificates"] = args ? args.samCaCertificates : undefined;
            resourceInputs["samCaptivePortal"] = args ? args.samCaptivePortal : undefined;
            resourceInputs["samClientCertificates"] = args ? args.samClientCertificates : undefined;
            resourceInputs["samCwpFailureString"] = args ? args.samCwpFailureString : undefined;
            resourceInputs["samCwpMatchString"] = args ? args.samCwpMatchString : undefined;
            resourceInputs["samCwpPasswords"] = args?.samCwpPasswords ? pulumi.secret(args.samCwpPasswords) : undefined;
            resourceInputs["samCwpSuccessString"] = args ? args.samCwpSuccessString : undefined;
            resourceInputs["samCwpTestUrl"] = args ? args.samCwpTestUrl : undefined;
            resourceInputs["samCwpUsername"] = args ? args.samCwpUsername : undefined;
            resourceInputs["samEapMethod"] = args ? args.samEapMethod : undefined;
            resourceInputs["samPasswords"] = args?.samPasswords ? pulumi.secret(args.samPasswords) : undefined;
            resourceInputs["samPrivateKeyPasswords"] = args?.samPrivateKeyPasswords ? pulumi.secret(args.samPrivateKeyPasswords) : undefined;
            resourceInputs["samPrivateKeys"] = args ? args.samPrivateKeys : undefined;
            resourceInputs["samReportIntv"] = args ? args.samReportIntv : undefined;
            resourceInputs["samSecurityType"] = args ? args.samSecurityType : undefined;
            resourceInputs["samServer"] = args ? args.samServer : undefined;
            resourceInputs["samServerFqdn"] = args ? args.samServerFqdn : undefined;
            resourceInputs["samServerIp"] = args ? args.samServerIp : undefined;
            resourceInputs["samServerType"] = args ? args.samServerType : undefined;
            resourceInputs["samSsid"] = args ? args.samSsid : undefined;
            resourceInputs["samTest"] = args ? args.samTest : undefined;
            resourceInputs["samUsername"] = args ? args.samUsername : undefined;
            resourceInputs["shortGuardInterval"] = args ? args.shortGuardInterval : undefined;
            resourceInputs["spectrumAnalysis"] = args ? args.spectrumAnalysis : undefined;
            resourceInputs["transmitOptimizes"] = args ? args.transmitOptimizes : undefined;
            resourceInputs["vap1"] = args ? args.vap1 : undefined;
            resourceInputs["vap2"] = args ? args.vap2 : undefined;
            resourceInputs["vap3"] = args ? args.vap3 : undefined;
            resourceInputs["vap4"] = args ? args.vap4 : undefined;
            resourceInputs["vap5"] = args ? args.vap5 : undefined;
            resourceInputs["vap6"] = args ? args.vap6 : undefined;
            resourceInputs["vap7"] = args ? args.vap7 : undefined;
            resourceInputs["vap8"] = args ? args.vap8 : undefined;
            resourceInputs["vapAll"] = args ? args.vapAll : undefined;
            resourceInputs["vaps"] = args ? args.vaps : undefined;
            resourceInputs["widsProfiles"] = args ? args.widsProfiles : undefined;
            resourceInputs["wtpProfile"] = args ? args.wtpProfile : undefined;
            resourceInputs["zeroWaitDfs"] = args ? args.zeroWaitDfs : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["samCwpPasswords", "samPasswords", "samPrivateKeyPasswords"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(WirelesscontrollerWtpprofileRadio1.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WirelesscontrollerWtpprofileRadio1 resources.
 */
export interface WirelesscontrollerWtpprofileRadio1State {
    airtimeFairness?: pulumi.Input<string>;
    amsdu?: pulumi.Input<string>;
    apHandoff?: pulumi.Input<string>;
    apSnifferAddr?: pulumi.Input<string>;
    apSnifferBufsize?: pulumi.Input<number>;
    apSnifferChan?: pulumi.Input<number>;
    apSnifferCtl?: pulumi.Input<string>;
    apSnifferData?: pulumi.Input<string>;
    apSnifferMgmtBeacon?: pulumi.Input<string>;
    apSnifferMgmtOther?: pulumi.Input<string>;
    apSnifferMgmtProbe?: pulumi.Input<string>;
    arrpProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    autoPowerHigh?: pulumi.Input<number>;
    autoPowerLevel?: pulumi.Input<string>;
    autoPowerLow?: pulumi.Input<number>;
    autoPowerTarget?: pulumi.Input<string>;
    band5gType?: pulumi.Input<string>;
    bands?: pulumi.Input<pulumi.Input<string>[]>;
    bandwidthAdmissionControl?: pulumi.Input<string>;
    bandwidthCapacity?: pulumi.Input<number>;
    beaconInterval?: pulumi.Input<number>;
    bssColor?: pulumi.Input<number>;
    bssColorMode?: pulumi.Input<string>;
    callAdmissionControl?: pulumi.Input<string>;
    callCapacity?: pulumi.Input<number>;
    channelBonding?: pulumi.Input<string>;
    channelBondingExt?: pulumi.Input<string>;
    channelUtilization?: pulumi.Input<string>;
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    coexistence?: pulumi.Input<string>;
    darrp?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    drma?: pulumi.Input<string>;
    drmaSensitivity?: pulumi.Input<string>;
    dtim?: pulumi.Input<number>;
    fragThreshold?: pulumi.Input<number>;
    frequencyHandoff?: pulumi.Input<string>;
    iperfProtocol?: pulumi.Input<string>;
    iperfServerPort?: pulumi.Input<number>;
    maxClients?: pulumi.Input<number>;
    maxDistance?: pulumi.Input<number>;
    mimoMode?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    n80211d?: pulumi.Input<string>;
    optionalAntenna?: pulumi.Input<string>;
    optionalAntennaGain?: pulumi.Input<string>;
    powerLevel?: pulumi.Input<number>;
    powerMode?: pulumi.Input<string>;
    powerValue?: pulumi.Input<number>;
    powersaveOptimizes?: pulumi.Input<pulumi.Input<string>[]>;
    protectionMode?: pulumi.Input<string>;
    radioId?: pulumi.Input<number>;
    rtsThreshold?: pulumi.Input<number>;
    samBssid?: pulumi.Input<string>;
    samCaCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    samCaptivePortal?: pulumi.Input<string>;
    samClientCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    samCwpFailureString?: pulumi.Input<string>;
    samCwpMatchString?: pulumi.Input<string>;
    samCwpPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    samCwpSuccessString?: pulumi.Input<string>;
    samCwpTestUrl?: pulumi.Input<string>;
    samCwpUsername?: pulumi.Input<string>;
    samEapMethod?: pulumi.Input<string>;
    samPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    samPrivateKeyPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    samPrivateKeys?: pulumi.Input<pulumi.Input<string>[]>;
    samReportIntv?: pulumi.Input<number>;
    samSecurityType?: pulumi.Input<string>;
    samServer?: pulumi.Input<string>;
    samServerFqdn?: pulumi.Input<string>;
    samServerIp?: pulumi.Input<string>;
    samServerType?: pulumi.Input<string>;
    samSsid?: pulumi.Input<string>;
    samTest?: pulumi.Input<string>;
    samUsername?: pulumi.Input<string>;
    shortGuardInterval?: pulumi.Input<string>;
    spectrumAnalysis?: pulumi.Input<string>;
    transmitOptimizes?: pulumi.Input<pulumi.Input<string>[]>;
    vap1?: pulumi.Input<string>;
    vap2?: pulumi.Input<string>;
    vap3?: pulumi.Input<string>;
    vap4?: pulumi.Input<string>;
    vap5?: pulumi.Input<string>;
    vap6?: pulumi.Input<string>;
    vap7?: pulumi.Input<string>;
    vap8?: pulumi.Input<string>;
    vapAll?: pulumi.Input<string>;
    vaps?: pulumi.Input<pulumi.Input<string>[]>;
    widsProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    wtpProfile?: pulumi.Input<string>;
    zeroWaitDfs?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WirelesscontrollerWtpprofileRadio1 resource.
 */
export interface WirelesscontrollerWtpprofileRadio1Args {
    airtimeFairness?: pulumi.Input<string>;
    amsdu?: pulumi.Input<string>;
    apHandoff?: pulumi.Input<string>;
    apSnifferAddr?: pulumi.Input<string>;
    apSnifferBufsize?: pulumi.Input<number>;
    apSnifferChan?: pulumi.Input<number>;
    apSnifferCtl?: pulumi.Input<string>;
    apSnifferData?: pulumi.Input<string>;
    apSnifferMgmtBeacon?: pulumi.Input<string>;
    apSnifferMgmtOther?: pulumi.Input<string>;
    apSnifferMgmtProbe?: pulumi.Input<string>;
    arrpProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    autoPowerHigh?: pulumi.Input<number>;
    autoPowerLevel?: pulumi.Input<string>;
    autoPowerLow?: pulumi.Input<number>;
    autoPowerTarget?: pulumi.Input<string>;
    band5gType?: pulumi.Input<string>;
    bands?: pulumi.Input<pulumi.Input<string>[]>;
    bandwidthAdmissionControl?: pulumi.Input<string>;
    bandwidthCapacity?: pulumi.Input<number>;
    beaconInterval?: pulumi.Input<number>;
    bssColor?: pulumi.Input<number>;
    bssColorMode?: pulumi.Input<string>;
    callAdmissionControl?: pulumi.Input<string>;
    callCapacity?: pulumi.Input<number>;
    channelBonding?: pulumi.Input<string>;
    channelBondingExt?: pulumi.Input<string>;
    channelUtilization?: pulumi.Input<string>;
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    coexistence?: pulumi.Input<string>;
    darrp?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    drma?: pulumi.Input<string>;
    drmaSensitivity?: pulumi.Input<string>;
    dtim?: pulumi.Input<number>;
    fragThreshold?: pulumi.Input<number>;
    frequencyHandoff?: pulumi.Input<string>;
    iperfProtocol?: pulumi.Input<string>;
    iperfServerPort?: pulumi.Input<number>;
    maxClients?: pulumi.Input<number>;
    maxDistance?: pulumi.Input<number>;
    mimoMode?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    n80211d?: pulumi.Input<string>;
    optionalAntenna?: pulumi.Input<string>;
    optionalAntennaGain?: pulumi.Input<string>;
    powerLevel?: pulumi.Input<number>;
    powerMode?: pulumi.Input<string>;
    powerValue?: pulumi.Input<number>;
    powersaveOptimizes?: pulumi.Input<pulumi.Input<string>[]>;
    protectionMode?: pulumi.Input<string>;
    radioId?: pulumi.Input<number>;
    rtsThreshold?: pulumi.Input<number>;
    samBssid?: pulumi.Input<string>;
    samCaCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    samCaptivePortal?: pulumi.Input<string>;
    samClientCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    samCwpFailureString?: pulumi.Input<string>;
    samCwpMatchString?: pulumi.Input<string>;
    samCwpPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    samCwpSuccessString?: pulumi.Input<string>;
    samCwpTestUrl?: pulumi.Input<string>;
    samCwpUsername?: pulumi.Input<string>;
    samEapMethod?: pulumi.Input<string>;
    samPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    samPrivateKeyPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    samPrivateKeys?: pulumi.Input<pulumi.Input<string>[]>;
    samReportIntv?: pulumi.Input<number>;
    samSecurityType?: pulumi.Input<string>;
    samServer?: pulumi.Input<string>;
    samServerFqdn?: pulumi.Input<string>;
    samServerIp?: pulumi.Input<string>;
    samServerType?: pulumi.Input<string>;
    samSsid?: pulumi.Input<string>;
    samTest?: pulumi.Input<string>;
    samUsername?: pulumi.Input<string>;
    shortGuardInterval?: pulumi.Input<string>;
    spectrumAnalysis?: pulumi.Input<string>;
    transmitOptimizes?: pulumi.Input<pulumi.Input<string>[]>;
    vap1?: pulumi.Input<string>;
    vap2?: pulumi.Input<string>;
    vap3?: pulumi.Input<string>;
    vap4?: pulumi.Input<string>;
    vap5?: pulumi.Input<string>;
    vap6?: pulumi.Input<string>;
    vap7?: pulumi.Input<string>;
    vap8?: pulumi.Input<string>;
    vapAll?: pulumi.Input<string>;
    vaps?: pulumi.Input<pulumi.Input<string>[]>;
    widsProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    wtpProfile: pulumi.Input<string>;
    zeroWaitDfs?: pulumi.Input<string>;
}
