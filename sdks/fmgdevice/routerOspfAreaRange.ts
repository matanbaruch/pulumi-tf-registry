// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RouterOspfAreaRange extends pulumi.CustomResource {
    /**
     * Get an existing RouterOspfAreaRange resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouterOspfAreaRangeState, opts?: pulumi.CustomResourceOptions): RouterOspfAreaRange {
        return new RouterOspfAreaRange(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/routerOspfAreaRange:RouterOspfAreaRange';

    /**
     * Returns true if the given object is an instance of RouterOspfAreaRange.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RouterOspfAreaRange {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RouterOspfAreaRange.__pulumiType;
    }

    public readonly advertise!: pulumi.Output<string>;
    public readonly area!: pulumi.Output<string>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly deviceVdom!: pulumi.Output<string>;
    public readonly fosid!: pulumi.Output<number | undefined>;
    public readonly prefixes!: pulumi.Output<string[]>;
    public readonly substituteStatus!: pulumi.Output<string>;
    public readonly substitutes!: pulumi.Output<string[]>;

    /**
     * Create a RouterOspfAreaRange resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RouterOspfAreaRangeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RouterOspfAreaRangeArgs | RouterOspfAreaRangeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RouterOspfAreaRangeState | undefined;
            resourceInputs["advertise"] = state ? state.advertise : undefined;
            resourceInputs["area"] = state ? state.area : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["deviceVdom"] = state ? state.deviceVdom : undefined;
            resourceInputs["fosid"] = state ? state.fosid : undefined;
            resourceInputs["prefixes"] = state ? state.prefixes : undefined;
            resourceInputs["substituteStatus"] = state ? state.substituteStatus : undefined;
            resourceInputs["substitutes"] = state ? state.substitutes : undefined;
        } else {
            const args = argsOrState as RouterOspfAreaRangeArgs | undefined;
            if ((!args || args.area === undefined) && !opts.urn) {
                throw new Error("Missing required property 'area'");
            }
            resourceInputs["advertise"] = args ? args.advertise : undefined;
            resourceInputs["area"] = args ? args.area : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["deviceVdom"] = args ? args.deviceVdom : undefined;
            resourceInputs["fosid"] = args ? args.fosid : undefined;
            resourceInputs["prefixes"] = args ? args.prefixes : undefined;
            resourceInputs["substituteStatus"] = args ? args.substituteStatus : undefined;
            resourceInputs["substitutes"] = args ? args.substitutes : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RouterOspfAreaRange.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RouterOspfAreaRange resources.
 */
export interface RouterOspfAreaRangeState {
    advertise?: pulumi.Input<string>;
    area?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    fosid?: pulumi.Input<number>;
    prefixes?: pulumi.Input<pulumi.Input<string>[]>;
    substituteStatus?: pulumi.Input<string>;
    substitutes?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a RouterOspfAreaRange resource.
 */
export interface RouterOspfAreaRangeArgs {
    advertise?: pulumi.Input<string>;
    area: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    fosid?: pulumi.Input<number>;
    prefixes?: pulumi.Input<pulumi.Input<string>[]>;
    substituteStatus?: pulumi.Input<string>;
    substitutes?: pulumi.Input<pulumi.Input<string>[]>;
}
