// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SystemFederatedupgradeNodelist extends pulumi.CustomResource {
    /**
     * Get an existing SystemFederatedupgradeNodelist resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemFederatedupgradeNodelistState, opts?: pulumi.CustomResourceOptions): SystemFederatedupgradeNodelist {
        return new SystemFederatedupgradeNodelist(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/systemFederatedupgradeNodelist:SystemFederatedupgradeNodelist';

    /**
     * Returns true if the given object is an instance of SystemFederatedupgradeNodelist.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemFederatedupgradeNodelist {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemFederatedupgradeNodelist.__pulumiType;
    }

    public readonly coordinatingFortigate!: pulumi.Output<string | undefined>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly deviceType!: pulumi.Output<string>;
    public readonly maximumMinutes!: pulumi.Output<number>;
    public readonly serial!: pulumi.Output<string | undefined>;
    public readonly setupTimes!: pulumi.Output<string[]>;
    public readonly times!: pulumi.Output<string[]>;
    public readonly timing!: pulumi.Output<string>;
    public readonly upgradePath!: pulumi.Output<string | undefined>;

    /**
     * Create a SystemFederatedupgradeNodelist resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemFederatedupgradeNodelistArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemFederatedupgradeNodelistArgs | SystemFederatedupgradeNodelistState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemFederatedupgradeNodelistState | undefined;
            resourceInputs["coordinatingFortigate"] = state ? state.coordinatingFortigate : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["deviceType"] = state ? state.deviceType : undefined;
            resourceInputs["maximumMinutes"] = state ? state.maximumMinutes : undefined;
            resourceInputs["serial"] = state ? state.serial : undefined;
            resourceInputs["setupTimes"] = state ? state.setupTimes : undefined;
            resourceInputs["times"] = state ? state.times : undefined;
            resourceInputs["timing"] = state ? state.timing : undefined;
            resourceInputs["upgradePath"] = state ? state.upgradePath : undefined;
        } else {
            const args = argsOrState as SystemFederatedupgradeNodelistArgs | undefined;
            resourceInputs["coordinatingFortigate"] = args ? args.coordinatingFortigate : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["deviceType"] = args ? args.deviceType : undefined;
            resourceInputs["maximumMinutes"] = args ? args.maximumMinutes : undefined;
            resourceInputs["serial"] = args ? args.serial : undefined;
            resourceInputs["setupTimes"] = args ? args.setupTimes : undefined;
            resourceInputs["times"] = args ? args.times : undefined;
            resourceInputs["timing"] = args ? args.timing : undefined;
            resourceInputs["upgradePath"] = args ? args.upgradePath : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SystemFederatedupgradeNodelist.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemFederatedupgradeNodelist resources.
 */
export interface SystemFederatedupgradeNodelistState {
    coordinatingFortigate?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceType?: pulumi.Input<string>;
    maximumMinutes?: pulumi.Input<number>;
    serial?: pulumi.Input<string>;
    setupTimes?: pulumi.Input<pulumi.Input<string>[]>;
    times?: pulumi.Input<pulumi.Input<string>[]>;
    timing?: pulumi.Input<string>;
    upgradePath?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SystemFederatedupgradeNodelist resource.
 */
export interface SystemFederatedupgradeNodelistArgs {
    coordinatingFortigate?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceType?: pulumi.Input<string>;
    maximumMinutes?: pulumi.Input<number>;
    serial?: pulumi.Input<string>;
    setupTimes?: pulumi.Input<pulumi.Input<string>[]>;
    times?: pulumi.Input<pulumi.Input<string>[]>;
    timing?: pulumi.Input<string>;
    upgradePath?: pulumi.Input<string>;
}
