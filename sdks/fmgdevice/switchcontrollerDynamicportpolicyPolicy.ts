// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SwitchcontrollerDynamicportpolicyPolicy extends pulumi.CustomResource {
    /**
     * Get an existing SwitchcontrollerDynamicportpolicyPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SwitchcontrollerDynamicportpolicyPolicyState, opts?: pulumi.CustomResourceOptions): SwitchcontrollerDynamicportpolicyPolicy {
        return new SwitchcontrollerDynamicportpolicyPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/switchcontrollerDynamicportpolicyPolicy:SwitchcontrollerDynamicportpolicyPolicy';

    /**
     * Returns true if the given object is an instance of SwitchcontrollerDynamicportpolicyPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SwitchcontrollerDynamicportpolicyPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SwitchcontrollerDynamicportpolicyPolicy.__pulumiType;
    }

    public readonly bouncePortLink!: pulumi.Output<string>;
    public readonly category!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly deviceVdom!: pulumi.Output<string>;
    public readonly dynamicPortPolicy!: pulumi.Output<string>;
    public readonly family!: pulumi.Output<string | undefined>;
    public readonly host!: pulumi.Output<string | undefined>;
    public readonly hwVendor!: pulumi.Output<string | undefined>;
    public readonly interfaceTags!: pulumi.Output<string[]>;
    public readonly lldpProfiles!: pulumi.Output<string[]>;
    public readonly mac!: pulumi.Output<string | undefined>;
    public readonly matchPeriod!: pulumi.Output<number | undefined>;
    public readonly matchType!: pulumi.Output<string>;
    public readonly n8021xes!: pulumi.Output<string[]>;
    public readonly name!: pulumi.Output<string>;
    public readonly qosPolicies!: pulumi.Output<string[]>;
    public readonly status!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string | undefined>;
    public readonly vlanPolicies!: pulumi.Output<string[]>;

    /**
     * Create a SwitchcontrollerDynamicportpolicyPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SwitchcontrollerDynamicportpolicyPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SwitchcontrollerDynamicportpolicyPolicyArgs | SwitchcontrollerDynamicportpolicyPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SwitchcontrollerDynamicportpolicyPolicyState | undefined;
            resourceInputs["bouncePortLink"] = state ? state.bouncePortLink : undefined;
            resourceInputs["category"] = state ? state.category : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["deviceVdom"] = state ? state.deviceVdom : undefined;
            resourceInputs["dynamicPortPolicy"] = state ? state.dynamicPortPolicy : undefined;
            resourceInputs["family"] = state ? state.family : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["hwVendor"] = state ? state.hwVendor : undefined;
            resourceInputs["interfaceTags"] = state ? state.interfaceTags : undefined;
            resourceInputs["lldpProfiles"] = state ? state.lldpProfiles : undefined;
            resourceInputs["mac"] = state ? state.mac : undefined;
            resourceInputs["matchPeriod"] = state ? state.matchPeriod : undefined;
            resourceInputs["matchType"] = state ? state.matchType : undefined;
            resourceInputs["n8021xes"] = state ? state.n8021xes : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["qosPolicies"] = state ? state.qosPolicies : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vlanPolicies"] = state ? state.vlanPolicies : undefined;
        } else {
            const args = argsOrState as SwitchcontrollerDynamicportpolicyPolicyArgs | undefined;
            if ((!args || args.dynamicPortPolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dynamicPortPolicy'");
            }
            resourceInputs["bouncePortLink"] = args ? args.bouncePortLink : undefined;
            resourceInputs["category"] = args ? args.category : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["deviceVdom"] = args ? args.deviceVdom : undefined;
            resourceInputs["dynamicPortPolicy"] = args ? args.dynamicPortPolicy : undefined;
            resourceInputs["family"] = args ? args.family : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["hwVendor"] = args ? args.hwVendor : undefined;
            resourceInputs["interfaceTags"] = args ? args.interfaceTags : undefined;
            resourceInputs["lldpProfiles"] = args ? args.lldpProfiles : undefined;
            resourceInputs["mac"] = args ? args.mac : undefined;
            resourceInputs["matchPeriod"] = args ? args.matchPeriod : undefined;
            resourceInputs["matchType"] = args ? args.matchType : undefined;
            resourceInputs["n8021xes"] = args ? args.n8021xes : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["qosPolicies"] = args ? args.qosPolicies : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["vlanPolicies"] = args ? args.vlanPolicies : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SwitchcontrollerDynamicportpolicyPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SwitchcontrollerDynamicportpolicyPolicy resources.
 */
export interface SwitchcontrollerDynamicportpolicyPolicyState {
    bouncePortLink?: pulumi.Input<string>;
    category?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    dynamicPortPolicy?: pulumi.Input<string>;
    family?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    hwVendor?: pulumi.Input<string>;
    interfaceTags?: pulumi.Input<pulumi.Input<string>[]>;
    lldpProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    mac?: pulumi.Input<string>;
    matchPeriod?: pulumi.Input<number>;
    matchType?: pulumi.Input<string>;
    n8021xes?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    qosPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    vlanPolicies?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a SwitchcontrollerDynamicportpolicyPolicy resource.
 */
export interface SwitchcontrollerDynamicportpolicyPolicyArgs {
    bouncePortLink?: pulumi.Input<string>;
    category?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    dynamicPortPolicy: pulumi.Input<string>;
    family?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    hwVendor?: pulumi.Input<string>;
    interfaceTags?: pulumi.Input<pulumi.Input<string>[]>;
    lldpProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    mac?: pulumi.Input<string>;
    matchPeriod?: pulumi.Input<number>;
    matchType?: pulumi.Input<string>;
    n8021xes?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    qosPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    vlanPolicies?: pulumi.Input<pulumi.Input<string>[]>;
}
