// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IpsGlobal extends pulumi.CustomResource {
    /**
     * Get an existing IpsGlobal resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IpsGlobalState, opts?: pulumi.CustomResourceOptions): IpsGlobal {
        return new IpsGlobal(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/ipsGlobal:IpsGlobal';

    /**
     * Returns true if the given object is an instance of IpsGlobal.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IpsGlobal {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IpsGlobal.__pulumiType;
    }

    public readonly anomalyMode!: pulumi.Output<string | undefined>;
    public readonly avMemLimit!: pulumi.Output<number | undefined>;
    public readonly cpAccelMode!: pulumi.Output<string | undefined>;
    public readonly database!: pulumi.Output<string>;
    public readonly deepAppInspDbLimit!: pulumi.Output<number | undefined>;
    public readonly deepAppInspTimeout!: pulumi.Output<number | undefined>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly engineCount!: pulumi.Output<number | undefined>;
    public readonly excludeSignatures!: pulumi.Output<string>;
    public readonly failOpen!: pulumi.Output<string>;
    public readonly intelligentMode!: pulumi.Output<string | undefined>;
    public readonly ipsReserveCpu!: pulumi.Output<string | undefined>;
    public readonly ngfwMaxScanRange!: pulumi.Output<number>;
    public readonly npAccelMode!: pulumi.Output<string | undefined>;
    public readonly packetLogQueueDepth!: pulumi.Output<number>;
    public readonly sessionLimitMode!: pulumi.Output<string>;
    public readonly skypeClientPublicIpaddr!: pulumi.Output<string | undefined>;
    public readonly socketSize!: pulumi.Output<number>;
    public readonly syncSessionTtl!: pulumi.Output<string>;
    public readonly tlsActiveProbe!: pulumi.Output<outputs.IpsGlobalTlsActiveProbe | undefined>;
    public readonly trafficSubmit!: pulumi.Output<string>;

    /**
     * Create a IpsGlobal resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: IpsGlobalArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IpsGlobalArgs | IpsGlobalState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IpsGlobalState | undefined;
            resourceInputs["anomalyMode"] = state ? state.anomalyMode : undefined;
            resourceInputs["avMemLimit"] = state ? state.avMemLimit : undefined;
            resourceInputs["cpAccelMode"] = state ? state.cpAccelMode : undefined;
            resourceInputs["database"] = state ? state.database : undefined;
            resourceInputs["deepAppInspDbLimit"] = state ? state.deepAppInspDbLimit : undefined;
            resourceInputs["deepAppInspTimeout"] = state ? state.deepAppInspTimeout : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["engineCount"] = state ? state.engineCount : undefined;
            resourceInputs["excludeSignatures"] = state ? state.excludeSignatures : undefined;
            resourceInputs["failOpen"] = state ? state.failOpen : undefined;
            resourceInputs["intelligentMode"] = state ? state.intelligentMode : undefined;
            resourceInputs["ipsReserveCpu"] = state ? state.ipsReserveCpu : undefined;
            resourceInputs["ngfwMaxScanRange"] = state ? state.ngfwMaxScanRange : undefined;
            resourceInputs["npAccelMode"] = state ? state.npAccelMode : undefined;
            resourceInputs["packetLogQueueDepth"] = state ? state.packetLogQueueDepth : undefined;
            resourceInputs["sessionLimitMode"] = state ? state.sessionLimitMode : undefined;
            resourceInputs["skypeClientPublicIpaddr"] = state ? state.skypeClientPublicIpaddr : undefined;
            resourceInputs["socketSize"] = state ? state.socketSize : undefined;
            resourceInputs["syncSessionTtl"] = state ? state.syncSessionTtl : undefined;
            resourceInputs["tlsActiveProbe"] = state ? state.tlsActiveProbe : undefined;
            resourceInputs["trafficSubmit"] = state ? state.trafficSubmit : undefined;
        } else {
            const args = argsOrState as IpsGlobalArgs | undefined;
            resourceInputs["anomalyMode"] = args ? args.anomalyMode : undefined;
            resourceInputs["avMemLimit"] = args ? args.avMemLimit : undefined;
            resourceInputs["cpAccelMode"] = args ? args.cpAccelMode : undefined;
            resourceInputs["database"] = args ? args.database : undefined;
            resourceInputs["deepAppInspDbLimit"] = args ? args.deepAppInspDbLimit : undefined;
            resourceInputs["deepAppInspTimeout"] = args ? args.deepAppInspTimeout : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["engineCount"] = args ? args.engineCount : undefined;
            resourceInputs["excludeSignatures"] = args ? args.excludeSignatures : undefined;
            resourceInputs["failOpen"] = args ? args.failOpen : undefined;
            resourceInputs["intelligentMode"] = args ? args.intelligentMode : undefined;
            resourceInputs["ipsReserveCpu"] = args ? args.ipsReserveCpu : undefined;
            resourceInputs["ngfwMaxScanRange"] = args ? args.ngfwMaxScanRange : undefined;
            resourceInputs["npAccelMode"] = args ? args.npAccelMode : undefined;
            resourceInputs["packetLogQueueDepth"] = args ? args.packetLogQueueDepth : undefined;
            resourceInputs["sessionLimitMode"] = args ? args.sessionLimitMode : undefined;
            resourceInputs["skypeClientPublicIpaddr"] = args ? args.skypeClientPublicIpaddr : undefined;
            resourceInputs["socketSize"] = args ? args.socketSize : undefined;
            resourceInputs["syncSessionTtl"] = args ? args.syncSessionTtl : undefined;
            resourceInputs["tlsActiveProbe"] = args ? args.tlsActiveProbe : undefined;
            resourceInputs["trafficSubmit"] = args ? args.trafficSubmit : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IpsGlobal.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IpsGlobal resources.
 */
export interface IpsGlobalState {
    anomalyMode?: pulumi.Input<string>;
    avMemLimit?: pulumi.Input<number>;
    cpAccelMode?: pulumi.Input<string>;
    database?: pulumi.Input<string>;
    deepAppInspDbLimit?: pulumi.Input<number>;
    deepAppInspTimeout?: pulumi.Input<number>;
    deviceName?: pulumi.Input<string>;
    engineCount?: pulumi.Input<number>;
    excludeSignatures?: pulumi.Input<string>;
    failOpen?: pulumi.Input<string>;
    intelligentMode?: pulumi.Input<string>;
    ipsReserveCpu?: pulumi.Input<string>;
    ngfwMaxScanRange?: pulumi.Input<number>;
    npAccelMode?: pulumi.Input<string>;
    packetLogQueueDepth?: pulumi.Input<number>;
    sessionLimitMode?: pulumi.Input<string>;
    skypeClientPublicIpaddr?: pulumi.Input<string>;
    socketSize?: pulumi.Input<number>;
    syncSessionTtl?: pulumi.Input<string>;
    tlsActiveProbe?: pulumi.Input<inputs.IpsGlobalTlsActiveProbe>;
    trafficSubmit?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IpsGlobal resource.
 */
export interface IpsGlobalArgs {
    anomalyMode?: pulumi.Input<string>;
    avMemLimit?: pulumi.Input<number>;
    cpAccelMode?: pulumi.Input<string>;
    database?: pulumi.Input<string>;
    deepAppInspDbLimit?: pulumi.Input<number>;
    deepAppInspTimeout?: pulumi.Input<number>;
    deviceName?: pulumi.Input<string>;
    engineCount?: pulumi.Input<number>;
    excludeSignatures?: pulumi.Input<string>;
    failOpen?: pulumi.Input<string>;
    intelligentMode?: pulumi.Input<string>;
    ipsReserveCpu?: pulumi.Input<string>;
    ngfwMaxScanRange?: pulumi.Input<number>;
    npAccelMode?: pulumi.Input<string>;
    packetLogQueueDepth?: pulumi.Input<number>;
    sessionLimitMode?: pulumi.Input<string>;
    skypeClientPublicIpaddr?: pulumi.Input<string>;
    socketSize?: pulumi.Input<number>;
    syncSessionTtl?: pulumi.Input<string>;
    tlsActiveProbe?: pulumi.Input<inputs.IpsGlobalTlsActiveProbe>;
    trafficSubmit?: pulumi.Input<string>;
}
