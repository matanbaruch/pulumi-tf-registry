// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface DlpExactdatamatchColumn {
    index?: number;
    optional: string;
    types: string[];
}

export interface ExtendercontrollerExtenderControllerReport {
    interval?: number;
    signalThreshold?: number;
    status?: string;
}

export interface ExtendercontrollerExtenderModem1 {
    _simProfiles: string[];
    autoSwitch?: outputs.ExtendercontrollerExtenderModem1AutoSwitch;
    connStatus?: number;
    defaultSim?: string;
    gps?: string;
    ifnames: string[];
    modemId?: number;
    preferredCarrier?: string;
    redundantIntf?: string;
    redundantMode?: string;
    sim1Pin?: string;
    sim1PinCodes: string[];
    sim2Pin?: string;
    sim2PinCodes: string[];
    status?: string;
}

export interface ExtendercontrollerExtenderModem1AutoSwitch {
    dataplan?: string;
    disconnect?: string;
    disconnectPeriod?: number;
    disconnectThreshold?: number;
    signal?: string;
    status?: string;
    switchBackTime?: string;
    switchBackTimer?: number;
    switchBacks: string[];
}

export interface ExtendercontrollerExtenderModem2 {
    _simProfiles: string[];
    autoSwitch?: outputs.ExtendercontrollerExtenderModem2AutoSwitch;
    connStatus?: number;
    defaultSim?: string;
    gps?: string;
    ifnames: string[];
    modemId?: number;
    preferredCarrier?: string;
    redundantIntf?: string;
    redundantMode?: string;
    sim1Pin?: string;
    sim1PinCodes: string[];
    sim2Pin?: string;
    sim2PinCodes: string[];
    status?: string;
}

export interface ExtendercontrollerExtenderModem2AutoSwitch {
    dataplan?: string;
    disconnect?: string;
    disconnectPeriod?: number;
    disconnectThreshold?: number;
    signal?: string;
    status?: string;
    switchBackTime?: string;
    switchBackTimer?: number;
    switchBacks: string[];
}

export interface ExtendercontrollerExtenderWanExtension {
    modem1Extensions: string[];
    modem2Extensions: string[];
}

export interface ExtensioncontrollerExtenderWanExtension {
    modem1Extensions: string[];
    modem2Extensions: string[];
}

export interface ExtensioncontrollerFortigateprofileLanExtension {
    backhaulInterfaces: string[];
    backhaulIp?: string;
    ipsecTunnel?: string;
}

export interface FirewallInternetservicedefinitionEntry {
    categoryId?: number;
    name?: string;
    portRanges?: outputs.FirewallInternetservicedefinitionEntryPortRange[];
    protocol?: number;
    seqNum?: number;
}

export interface FirewallInternetservicedefinitionEntryPortRange {
    endPort: number;
    id?: number;
    startPort: number;
}

export interface FirewallInternetserviceextensionDisableEntry {
    addrMode?: string;
    id?: number;
    ip6Ranges?: outputs.FirewallInternetserviceextensionDisableEntryIp6Range[];
    ipRanges?: outputs.FirewallInternetserviceextensionDisableEntryIpRange[];
    portRanges?: outputs.FirewallInternetserviceextensionDisableEntryPortRange[];
    protocol?: number;
}

export interface FirewallInternetserviceextensionDisableEntryIp6Range {
    endIp6?: string;
    id?: number;
    startIp6?: string;
}

export interface FirewallInternetserviceextensionDisableEntryIpRange {
    endIp?: string;
    id?: number;
    startIp?: string;
}

export interface FirewallInternetserviceextensionDisableEntryPortRange {
    endPort?: number;
    id?: number;
    startPort?: number;
}

export interface FirewallInternetserviceextensionEntry {
    addrMode: string;
    dst6s: string[];
    dsts: string[];
    id?: number;
    portRanges?: outputs.FirewallInternetserviceextensionEntryPortRange[];
    protocol?: number;
}

export interface FirewallInternetserviceextensionEntryPortRange {
    endPort: number;
    id?: number;
    startPort: number;
}

export interface FirewallSnifferAnomaly {
    action?: string;
    log?: string;
    name?: string;
    quarantine?: string;
    quarantineExpiry?: string;
    quarantineLog?: string;
    status?: string;
    synproxyTcpMss?: string;
    synproxyTcpSack?: string;
    synproxyTcpTimestamp?: string;
    synproxyTcpWindow?: string;
    synproxyTcpWindowscale?: string;
    synproxyTos?: string;
    synproxyTtl?: string;
    threshold?: number;
    thresholddefault?: number;
}

export interface IcapServergroupServerList {
    names: string[];
    weight?: number;
}

export interface IpsDecoderParameter {
    name?: string;
    value?: string;
}

export interface IpsGlobalTlsActiveProbe {
    interfaceSelectMethod: string;
    interfaces: string[];
    sourceIp?: string;
    sourceIp6?: string;
    vdoms: string[];
}

export interface LogDiskFilterFreeStyle {
    category: string;
    filter?: string;
    filterType: string;
    id?: number;
}

export interface LogFortianalyzer2OverridefilterFreeStyle {
    category: string;
    filter?: string;
    filterType: string;
    id?: number;
}

export interface LogFortianalyzer3OverridefilterFreeStyle {
    category: string;
    filter?: string;
    filterType: string;
    id?: number;
}

export interface LogFortianalyzercloudOverridefilterFreeStyle {
    category: string;
    filter?: string;
    filterType: string;
    id?: number;
}

export interface LogFortiguardFilterFreeStyle {
    category: string;
    filter?: string;
    filterType: string;
    id?: number;
}

export interface LogFortiguardOverridefilterFreeStyle {
    category: string;
    filter?: string;
    filterType: string;
    id?: number;
}

export interface LogMemoryFilterFreeStyle {
    category: string;
    filter?: string;
    filterType: string;
    id?: number;
}

export interface LogNulldeviceFilterFreeStyle {
    category: string;
    filter?: string;
    filterType: string;
    id?: number;
}

export interface LogSyslogd2FilterFreeStyle {
    category: string;
    filter?: string;
    filterType: string;
    id?: number;
}

export interface LogSyslogd2OverridefilterFreeStyle {
    category: string;
    filter?: string;
    filterType: string;
    id?: number;
}

export interface LogSyslogd2OverridesettingCustomFieldName {
    custom?: string;
    id?: number;
    name?: string;
}

export interface LogSyslogd2SettingCustomFieldName {
    custom?: string;
    id?: number;
    name?: string;
}

export interface LogSyslogd3FilterFreeStyle {
    category: string;
    filter?: string;
    filterType: string;
    id?: number;
}

export interface LogSyslogd3OverridefilterFreeStyle {
    category: string;
    filter?: string;
    filterType: string;
    id?: number;
}

export interface LogSyslogd3OverridesettingCustomFieldName {
    custom?: string;
    id?: number;
    name?: string;
}

export interface LogSyslogd3SettingCustomFieldName {
    custom?: string;
    id?: number;
    name?: string;
}

export interface LogSyslogd4FilterFreeStyle {
    category: string;
    filter?: string;
    filterType: string;
    id?: number;
}

export interface LogSyslogd4OverridefilterFreeStyle {
    category: string;
    filter?: string;
    filterType: string;
    id?: number;
}

export interface LogSyslogd4OverridesettingCustomFieldName {
    custom?: string;
    id?: number;
    name?: string;
}

export interface LogSyslogd4SettingCustomFieldName {
    custom?: string;
    id?: number;
    name?: string;
}

export interface LogSyslogdFilterFreeStyle {
    category: string;
    filter?: string;
    filterType: string;
    id?: number;
}

export interface LogSyslogdSettingCustomFieldName {
    custom?: string;
    id?: number;
    name?: string;
}

export interface LogWebtrendsFilterFreeStyle {
    category: string;
    filter?: string;
    filterType: string;
    id?: number;
}

export interface NsxtServicechainServiceIndex {
    id?: number;
    name?: string;
    reverseIndex: number;
    vds: string[];
}

export interface ReportLayoutBodyItem {
    chartOptions: string[];
    charts: string[];
    column?: number;
    content?: string;
    description?: string;
    drillDownItems?: string;
    drillDownTypes?: string;
    hide?: string;
    id?: number;
    imgSrc?: string;
    listComponent?: string;
    lists?: outputs.ReportLayoutBodyItemList[];
    miscComponent: string;
    parameters?: outputs.ReportLayoutBodyItemParameter[];
    styles: string[];
    tableCaptionStyles: string[];
    tableColumnWidths?: string;
    tableEvenRowStyles: string[];
    tableHeadStyles: string[];
    tableOddRowStyles: string[];
    textComponent: string;
    title?: string;
    topN?: number;
    type: string;
}

export interface ReportLayoutBodyItemList {
    content?: string;
    id?: number;
}

export interface ReportLayoutBodyItemParameter {
    id?: number;
    name?: string;
    value?: string;
}

export interface ReportLayoutBodyitemList {
    content?: string;
    id?: number;
}

export interface ReportLayoutBodyitemParameter {
    id?: number;
    name?: string;
    value?: string;
}

export interface ReportLayoutPage {
    columnBreakBefores: string[];
    footer?: outputs.ReportLayoutPageFooter;
    header?: outputs.ReportLayoutPageHeader;
    options: string[];
    pageBreakBefores: string[];
    paper: string;
}

export interface ReportLayoutPageFooter {
    footerItems?: outputs.ReportLayoutPageFooterFooterItem[];
    styles: string[];
}

export interface ReportLayoutPageFooterFooterItem {
    content?: string;
    description?: string;
    id?: number;
    imgSrc?: string;
    styles: string[];
    type: string;
}

export interface ReportLayoutPageHeader {
    headerItems?: outputs.ReportLayoutPageHeaderHeaderItem[];
    styles: string[];
}

export interface ReportLayoutPageHeaderHeaderItem {
    content?: string;
    description?: string;
    id?: number;
    imgSrc?: string;
    styles: string[];
    type: string;
}

export interface RouterBfd6MultihopTemplate {
    authMode: string;
    bfdDesiredMinTx: number;
    bfdDetectMult: number;
    bfdRequiredMinRx: number;
    dst: string;
    id: number;
    md5Keys: string[];
    src: string;
}

export interface RouterBfd6Neighbor {
    interfaces: string[];
    ip6Address?: string;
}

export interface RouterBfdMultihopTemplate {
    authMode: string;
    bfdDesiredMinTx: number;
    bfdDetectMult: number;
    bfdRequiredMinRx: number;
    dsts: string[];
    id: number;
    md5Keys: string[];
    srcs: string[];
}

export interface RouterBfdNeighbor {
    interfaces: string[];
    ip?: string;
}

export interface RouterBgpAdminDistance {
    distance?: number;
    id: number;
    neighbourPrefixes: string[];
    routeLists: string[];
}

export interface RouterBgpAggregateAddress {
    asSet: string;
    id: number;
    prefixes: string[];
    summaryOnly: string;
}

export interface RouterBgpAggregateAddress6 {
    asSet: string;
    id: number;
    prefix6: string;
    summaryOnly: string;
}

export interface RouterBgpNeighbor {
    activate: string;
    activate6: string;
    activateEvpn: string;
    activateVpnv4: string;
    activateVpnv6: string;
    additionalPath: string;
    additionalPath6: string;
    additionalPathVpnv4: string;
    additionalPathVpnv6: string;
    advAdditionalPath: number;
    advAdditionalPath6: number;
    advAdditionalPathVpnv4: number;
    advAdditionalPathVpnv6?: number;
    advertisementInterval: number;
    allowasIn?: number;
    allowasIn6?: number;
    allowasInEnable: string;
    allowasInEnable6: string;
    allowasInEnableEvpn: string;
    allowasInEnableVpnv4: string;
    allowasInEnableVpnv6: string;
    allowasInEvpn: number;
    allowasInVpnv4?: number;
    allowasInVpnv6: number;
    asOverride: string;
    asOverride6: string;
    attributeUnchanged6s: string[];
    attributeUnchangedVpnv4s: string[];
    attributeUnchangedVpnv6s: string[];
    attributeUnchangeds: string[];
    authOptions: string[];
    bfd: string;
    capabilityDefaultOriginate: string;
    capabilityDefaultOriginate6: string;
    capabilityDynamic: string;
    capabilityGracefulRestart: string;
    capabilityGracefulRestart6: string;
    capabilityGracefulRestartEvpn: string;
    capabilityGracefulRestartVpnv4: string;
    capabilityGracefulRestartVpnv6: string;
    capabilityOrf: string;
    capabilityOrf6: string;
    capabilityRouteRefresh: string;
    conditionalAdvertise6s?: outputs.RouterBgpNeighborConditionalAdvertise6[];
    conditionalAdvertises?: outputs.RouterBgpNeighborConditionalAdvertise[];
    connectTimer: number;
    defaultOriginateRoutemap6s: string[];
    defaultOriginateRoutemaps: string[];
    description?: string;
    distributeListIn6s: string[];
    distributeListInVpnv4s: string[];
    distributeListInVpnv6s: string[];
    distributeListIns: string[];
    distributeListOut6s: string[];
    distributeListOutVpnv4s: string[];
    distributeListOutVpnv6s: string[];
    distributeListOuts: string[];
    dontCapabilityNegotiate: string;
    ebgpEnforceMultihop: string;
    ebgpMultihopTtl?: number;
    filterListIn6s: string[];
    filterListInVpnv4s: string[];
    filterListInVpnv6s: string[];
    filterListIns: string[];
    filterListOut6s: string[];
    filterListOutVpnv4s: string[];
    filterListOutVpnv6s: string[];
    filterListOuts: string[];
    holdtimeTimer: number;
    interfaces: string[];
    ip?: string;
    keepAliveTimer: number;
    linkDownFailover: string;
    localAs?: number;
    localAsNoPrepend: string;
    localAsReplaceAs: string;
    maximumPrefix?: number;
    maximumPrefix6?: number;
    maximumPrefixEvpn?: number;
    maximumPrefixThreshold: number;
    maximumPrefixThreshold6: number;
    maximumPrefixThresholdEvpn: number;
    maximumPrefixThresholdVpnv4: number;
    maximumPrefixThresholdVpnv6: number;
    maximumPrefixVpnv4?: number;
    maximumPrefixVpnv6?: number;
    maximumPrefixWarningOnly: string;
    maximumPrefixWarningOnly6: string;
    maximumPrefixWarningOnlyEvpn: string;
    maximumPrefixWarningOnlyVpnv4: string;
    maximumPrefixWarningOnlyVpnv6: string;
    nextHopSelf: string;
    nextHopSelf6: string;
    nextHopSelfRr: string;
    nextHopSelfRr6: string;
    nextHopSelfVpnv4: string;
    nextHopSelfVpnv6: string;
    overrideCapability: string;
    passive: string;
    passwords: string[];
    prefixListIn6s: string[];
    prefixListInVpnv4s: string[];
    prefixListInVpnv6s: string[];
    prefixListIns: string[];
    prefixListOut6s: string[];
    prefixListOutVpnv4s: string[];
    prefixListOutVpnv6s: string[];
    prefixListOuts: string[];
    remoteAs?: number;
    removePrivateAs: string;
    removePrivateAs6: string;
    removePrivateAsEvpn: string;
    removePrivateAsVpnv4: string;
    removePrivateAsVpnv6: string;
    restartTime?: number;
    retainStaleTime?: number;
    routeMapIn6s: string[];
    routeMapInEvpns: string[];
    routeMapInVpnv4s: string[];
    routeMapInVpnv6s: string[];
    routeMapIns: string[];
    routeMapOut6Preferables: string[];
    routeMapOut6s: string[];
    routeMapOutEvpns: string[];
    routeMapOutPreferables: string[];
    routeMapOutVpnv4Preferables: string[];
    routeMapOutVpnv4s: string[];
    routeMapOutVpnv6Preferables: string[];
    routeMapOutVpnv6s: string[];
    routeMapOuts: string[];
    routeReflectorClient: string;
    routeReflectorClient6: string;
    routeReflectorClientEvpn: string;
    routeReflectorClientVpnv4: string;
    routeReflectorClientVpnv6: string;
    routeServerClient: string;
    routeServerClient6: string;
    routeServerClientEvpn: string;
    routeServerClientVpnv4: string;
    routeServerClientVpnv6: string;
    sendCommunity: string;
    sendCommunity6: string;
    sendCommunityEvpn: string;
    sendCommunityVpnv4: string;
    sendCommunityVpnv6: string;
    shutdown: string;
    softReconfiguration: string;
    softReconfiguration6: string;
    softReconfigurationEvpn: string;
    softReconfigurationVpnv4: string;
    softReconfigurationVpnv6: string;
    staleRoute: string;
    strictCapabilityMatch: string;
    unsuppressMap6s: string[];
    unsuppressMaps: string[];
    updateSources: string[];
    weight: number;
}

export interface RouterBgpNeighborConditionalAdvertise {
    advertiseRoutemap?: string;
    conditionRoutemaps: string[];
    conditionType: string;
}

export interface RouterBgpNeighborConditionalAdvertise6 {
    advertiseRoutemaps: string[];
    conditionRoutemaps: string[];
    conditionType: string;
}

export interface RouterBgpNeighborGroup {
    activate: string;
    activate6: string;
    activateEvpn: string;
    activateVpnv4: string;
    activateVpnv6: string;
    additionalPath: string;
    additionalPath6: string;
    additionalPathVpnv4: string;
    additionalPathVpnv6: string;
    advAdditionalPath: number;
    advAdditionalPath6: number;
    advAdditionalPathVpnv4: number;
    advAdditionalPathVpnv6: number;
    advertisementInterval: number;
    allowasIn?: number;
    allowasIn6?: number;
    allowasInEnable: string;
    allowasInEnable6: string;
    allowasInEnableEvpn: string;
    allowasInEnableVpnv4: string;
    allowasInEnableVpnv6: string;
    allowasInEvpn: number;
    allowasInVpnv4?: number;
    allowasInVpnv6: number;
    asOverride: string;
    asOverride6: string;
    attributeUnchanged6s: string[];
    attributeUnchangedVpnv4s: string[];
    attributeUnchangedVpnv6s: string[];
    attributeUnchangeds: string[];
    authOptions: string[];
    bfd: string;
    capabilityDefaultOriginate: string;
    capabilityDefaultOriginate6: string;
    capabilityDynamic: string;
    capabilityGracefulRestart: string;
    capabilityGracefulRestart6: string;
    capabilityGracefulRestartEvpn: string;
    capabilityGracefulRestartVpnv4: string;
    capabilityGracefulRestartVpnv6: string;
    capabilityOrf: string;
    capabilityOrf6: string;
    capabilityRouteRefresh: string;
    connectTimer: number;
    defaultOriginateRoutemap6s: string[];
    defaultOriginateRoutemaps: string[];
    description?: string;
    distributeListIn6s: string[];
    distributeListInVpnv4s: string[];
    distributeListInVpnv6s: string[];
    distributeListIns: string[];
    distributeListOut6s: string[];
    distributeListOutVpnv4s: string[];
    distributeListOutVpnv6s: string[];
    distributeListOuts: string[];
    dontCapabilityNegotiate: string;
    ebgpEnforceMultihop: string;
    ebgpMultihopTtl: number;
    filterListIn6s: string[];
    filterListInVpnv4s: string[];
    filterListInVpnv6s: string[];
    filterListIns: string[];
    filterListOut6s: string[];
    filterListOutVpnv4s: string[];
    filterListOutVpnv6s: string[];
    filterListOuts: string[];
    holdtimeTimer: number;
    interfaces: string[];
    keepAliveTimer: number;
    linkDownFailover: string;
    localAs?: number;
    localAsNoPrepend: string;
    localAsReplaceAs: string;
    maximumPrefix?: number;
    maximumPrefix6?: number;
    maximumPrefixEvpn?: number;
    maximumPrefixThreshold: number;
    maximumPrefixThreshold6: number;
    maximumPrefixThresholdEvpn: number;
    maximumPrefixThresholdVpnv4: number;
    maximumPrefixThresholdVpnv6: number;
    maximumPrefixVpnv4?: number;
    maximumPrefixVpnv6?: number;
    maximumPrefixWarningOnly: string;
    maximumPrefixWarningOnly6: string;
    maximumPrefixWarningOnlyEvpn: string;
    maximumPrefixWarningOnlyVpnv4: string;
    maximumPrefixWarningOnlyVpnv6: string;
    name?: string;
    nextHopSelf: string;
    nextHopSelf6: string;
    nextHopSelfRr: string;
    nextHopSelfRr6: string;
    nextHopSelfVpnv4: string;
    nextHopSelfVpnv6: string;
    overrideCapability: string;
    passive: string;
    passwords: string[];
    prefixListIn6s: string[];
    prefixListInVpnv4s: string[];
    prefixListInVpnv6s: string[];
    prefixListIns: string[];
    prefixListOut6s: string[];
    prefixListOutVpnv4s: string[];
    prefixListOutVpnv6s: string[];
    prefixListOuts: string[];
    remoteAs?: number;
    remoteAsFilters: string[];
    removePrivateAs: string;
    removePrivateAs6: string;
    removePrivateAsEvpn: string;
    removePrivateAsVpnv4: string;
    removePrivateAsVpnv6: string;
    restartTime?: number;
    retainStaleTime?: number;
    routeMapIn6s: string[];
    routeMapInEvpns: string[];
    routeMapInVpnv4s: string[];
    routeMapInVpnv6s: string[];
    routeMapIns: string[];
    routeMapOut6Preferables: string[];
    routeMapOut6s: string[];
    routeMapOutEvpns: string[];
    routeMapOutPreferables: string[];
    routeMapOutVpnv4Preferables: string[];
    routeMapOutVpnv4s: string[];
    routeMapOutVpnv6Preferables: string[];
    routeMapOutVpnv6s: string[];
    routeMapOuts: string[];
    routeReflectorClient: string;
    routeReflectorClient6: string;
    routeReflectorClientEvpn: string;
    routeReflectorClientVpnv4: string;
    routeReflectorClientVpnv6: string;
    routeServerClient: string;
    routeServerClient6: string;
    routeServerClientEvpn: string;
    routeServerClientVpnv4: string;
    routeServerClientVpnv6: string;
    sendCommunity: string;
    sendCommunity6: string;
    sendCommunityEvpn: string;
    sendCommunityVpnv4: string;
    sendCommunityVpnv6: string;
    shutdown: string;
    softReconfiguration: string;
    softReconfiguration6: string;
    softReconfigurationEvpn: string;
    softReconfigurationVpnv4: string;
    softReconfigurationVpnv6: string;
    staleRoute: string;
    strictCapabilityMatch: string;
    unsuppressMap6s: string[];
    unsuppressMaps: string[];
    updateSources: string[];
    weight: number;
}

export interface RouterBgpNeighborRange {
    id?: number;
    maxNeighborNum?: number;
    neighborGroups: string[];
    prefixes: string[];
}

export interface RouterBgpNeighborRange6 {
    id?: number;
    maxNeighborNum?: number;
    neighborGroups: string[];
    prefix6: string;
}

export interface RouterBgpNetwork {
    backdoor: string;
    id: number;
    networkImportCheck: string;
    prefixes: string[];
    routeMaps: string[];
}

export interface RouterBgpNetwork6 {
    backdoor: string;
    id?: number;
    networkImportCheck: string;
    prefix6: string;
    routeMaps: string[];
}

export interface RouterBgpRedistribute {
    name?: string;
    routeMaps: string[];
    status: string;
}

export interface RouterBgpRedistribute6 {
    name?: string;
    routeMaps: string[];
    status: string;
}

export interface RouterBgpVrf {
    exportRts: string[];
    importRouteMaps: string[];
    importRts: string[];
    leakTargets?: outputs.RouterBgpVrfLeakTarget[];
    rd?: string;
    role: string;
    vrf?: string;
}

export interface RouterBgpVrf6 {
    exportRts: string[];
    importRouteMaps: string[];
    importRts: string[];
    leakTargets?: outputs.RouterBgpVrf6LeakTarget[];
    rd?: string;
    role: string;
    vrf?: string;
}

export interface RouterBgpVrf6LeakTarget {
    interfaces: string[];
    routeMaps: string[];
    vrf?: string;
}

export interface RouterBgpVrfLeak {
    targets?: outputs.RouterBgpVrfLeakTarget[];
    vrf?: string;
}

export interface RouterBgpVrfLeak6 {
    targets?: outputs.RouterBgpVrfLeak6Target[];
    vrf?: string;
}

export interface RouterBgpVrfLeak6Target {
    interfaces: string[];
    routeMaps: string[];
    vrf?: string;
}

export interface RouterBgpVrfLeakTarget {
    interfaces: string[];
    routeMaps: string[];
    vrf?: string;
}

export interface RouterExtcommunitylistRule {
    action?: string;
    id?: number;
    match?: string;
    regexp?: string;
    type: string;
}

export interface RouterIsisIsisInterface {
    authKeychainL1s: string[];
    authKeychainL2s: string[];
    authModeL1: string;
    authModeL2: string;
    authPasswordL1s: string[];
    authPasswordL2s: string[];
    authSendOnlyL1: string;
    authSendOnlyL2: string;
    circuitType: string;
    csnpIntervalL1: number;
    csnpIntervalL2: number;
    helloIntervalL1: number;
    helloIntervalL2: number;
    helloMultiplierL1: number;
    helloMultiplierL2: number;
    helloPadding: string;
    lspInterval: number;
    lspRetransmitInterval: number;
    meshGroup: string;
    meshGroupId?: number;
    metricL1: number;
    metricL2: number;
    names: string[];
    networkType?: string;
    priorityL1: number;
    priorityL2: number;
    status: string;
    status6: string;
    wideMetricL1: number;
    wideMetricL2: number;
}

export interface RouterIsisIsisNet {
    id?: number;
    net?: string;
}

export interface RouterIsisRedistribute {
    level: string;
    metric?: number;
    metricType: string;
    protocol?: string;
    routemaps: string[];
    status: string;
}

export interface RouterIsisRedistribute6 {
    level: string;
    metric?: number;
    metricType: string;
    protocol?: string;
    routemaps: string[];
    status: string;
}

export interface RouterIsisSummaryAddress {
    id?: number;
    level: string;
    prefixes: string[];
}

export interface RouterIsisSummaryAddress6 {
    id?: number;
    level: string;
    prefix6: string;
}

export interface RouterKeychainKey {
    acceptLifetime?: string;
    algorithm?: string;
    id?: string;
    keyStrings: string[];
    sendLifetime?: string;
}

export interface RouterMulticast6Interface {
    helloHoldtime?: number;
    helloInterval: number;
    name?: string;
}

export interface RouterMulticast6PimSmGlobal {
    registerRateLimit?: number;
    rpAddresses?: outputs.RouterMulticast6PimSmGlobalRpAddress[];
}

export interface RouterMulticast6PimSmGlobalRpAddress {
    id?: number;
    ip6Address: string;
}

export interface RouterMulticast6PimsmglobalRpAddress {
    id?: number;
    ip6Address: string;
}

export interface RouterMulticastInterface {
    bfd: string;
    ciscoExcludeGenid: string;
    drPriority: number;
    helloHoldtime: number;
    helloInterval: number;
    igmp?: outputs.RouterMulticastInterfaceIgmp;
    joinGroups?: outputs.RouterMulticastInterfaceJoinGroup[];
    multicastFlows: string[];
    name?: string;
    neighbourFilters: string[];
    passive: string;
    pimMode: string;
    propagationDelay?: number;
    rpCandidate: string;
    rpCandidateGroups: string[];
    rpCandidateInterval?: number;
    rpCandidatePriority?: number;
    rpfNbrFailBack: string;
    rpfNbrFailBackFilters: string[];
    stateRefreshInterval?: number;
    staticGroups: string[];
    ttlThreshold: number;
}

export interface RouterMulticastInterfaceIgmp {
    accessGroups: string[];
    immediateLeaveGroups: string[];
    lastMemberQueryCount?: number;
    lastMemberQueryInterval?: number;
    queryInterval: number;
    queryMaxResponseTime: number;
    queryTimeout: number;
    routerAlertCheck: string;
    version: string;
}

export interface RouterMulticastInterfaceJoinGroup {
    address?: string;
}

export interface RouterMulticastPimSmGlobal {
    acceptRegisterLists: string[];
    acceptSourceLists: string[];
    bsrAllowQuickRefresh: string;
    bsrCandidate: string;
    bsrHash?: number;
    bsrInterfaces: string[];
    bsrPriority?: number;
    ciscoCrpPrefix: string;
    ciscoIgnoreRpSetPriority: string;
    ciscoRegisterChecksum: string;
    ciscoRegisterChecksumGroups: string[];
    joinPruneHoldtime: number;
    messageInterval: number;
    nullRegisterRetries: number;
    pimUseSdwan: string;
    registerRateLimit?: number;
    registerRpReachability: string;
    registerSource: string;
    registerSourceInterfaces: string[];
    registerSourceIp?: string;
    registerSupression: number;
    rpAddresses?: outputs.RouterMulticastPimSmGlobalRpAddress[];
    rpRegisterKeepalive: number;
    sptThreshold: string;
    sptThresholdGroups: string[];
    ssm: string;
    ssmRanges: string[];
}

export interface RouterMulticastPimSmGlobalRpAddress {
    groups: string[];
    id?: number;
    ipAddress: string;
}

export interface RouterMulticastPimsmglobalRpAddress {
    groups: string[];
    id?: number;
    ipAddress: string;
}

export interface RouterMulticastflowFlow {
    groupAddr: string;
    id?: number;
    sourceAddr: string;
}

export interface RouterOspf6Area {
    authentication: string;
    defaultCost: number;
    id?: string;
    ipsecAuthAlg?: string;
    ipsecEncAlg?: string;
    ipsecKeys?: outputs.RouterOspf6AreaIpsecKey[];
    keyRolloverInterval: number;
    nssaDefaultInformationOriginate: string;
    nssaDefaultInformationOriginateMetric: number;
    nssaDefaultInformationOriginateMetricType: string;
    nssaRedistribution: string;
    nssaTranslatorRole: string;
    ranges?: outputs.RouterOspf6AreaRange[];
    stubType: string;
    type: string;
    virtualLinks?: outputs.RouterOspf6AreaVirtualLink[];
}

export interface RouterOspf6AreaIpsecKey {
    authKeys: string[];
    encKeys: string[];
    spi?: number;
}

export interface RouterOspf6AreaRange {
    advertise: string;
    id?: number;
    prefix6: string;
}

export interface RouterOspf6AreaVirtualLink {
    authentication: string;
    deadInterval: number;
    helloInterval: number;
    ipsecAuthAlg?: string;
    ipsecEncAlg?: string;
    ipsecKeys?: outputs.RouterOspf6AreaVirtualLinkIpsecKey[];
    keyRolloverInterval: number;
    name?: string;
    peer: string;
    retransmitInterval: number;
    transmitDelay: number;
}

export interface RouterOspf6AreaVirtualLinkIpsecKey {
    authKeys: string[];
    encKeys: string[];
    spi?: number;
}

export interface RouterOspf6AreaVirtuallinkIpsecKey {
    authKeys: string[];
    encKeys: string[];
    spi?: number;
}

export interface RouterOspf6Ospf6Interface {
    areaId: string;
    authentication: string;
    bfd: string;
    cost?: number;
    deadInterval?: number;
    helloInterval?: number;
    interfaces: string[];
    ipsecAuthAlg?: string;
    ipsecEncAlg?: string;
    ipsecKeys?: outputs.RouterOspf6Ospf6InterfaceIpsecKey[];
    keyRolloverInterval: number;
    mtu?: number;
    mtuIgnore: string;
    name?: string;
    neighbors?: outputs.RouterOspf6Ospf6InterfaceNeighbor[];
    networkType: string;
    priority: number;
    retransmitInterval: number;
    status: string;
    transmitDelay: number;
}

export interface RouterOspf6Ospf6InterfaceIpsecKey {
    authKeys: string[];
    encKeys: string[];
    spi?: number;
}

export interface RouterOspf6Ospf6InterfaceNeighbor {
    cost?: number;
    ip6?: string;
    pollInterval: number;
    priority: number;
}

export interface RouterOspf6Ospf6interfaceIpsecKey {
    authKeys: string[];
    encKeys: string[];
    spi?: number;
}

export interface RouterOspf6Ospf6interfaceNeighbor {
    cost?: number;
    ip6?: string;
    pollInterval: number;
    priority: number;
}

export interface RouterOspf6Redistribute {
    metric?: number;
    metricType: string;
    name?: string;
    routemaps: string[];
    status: string;
}

export interface RouterOspf6SummaryAddress {
    advertise: string;
    id?: number;
    prefix6: string;
    tag?: number;
}

export interface RouterOspfArea {
    authentication: string;
    comments?: string;
    defaultCost: number;
    filterLists?: outputs.RouterOspfAreaFilterList[];
    id?: string;
    nssaDefaultInformationOriginate: string;
    nssaDefaultInformationOriginateMetric: number;
    nssaDefaultInformationOriginateMetricType: string;
    nssaRedistribution: string;
    nssaTranslatorRole: string;
    ranges?: outputs.RouterOspfAreaRange[];
    shortcut: string;
    stubType: string;
    type: string;
    virtualLinks?: outputs.RouterOspfAreaVirtualLink[];
}

export interface RouterOspfAreaFilterList {
    direction?: string;
    id?: number;
    lists: string[];
}

export interface RouterOspfAreaRange {
    advertise: string;
    id?: number;
    prefixes: string[];
    substituteStatus: string;
    substitutes: string[];
}

export interface RouterOspfAreaVirtualLink {
    authentication: string;
    authenticationKeys: string[];
    deadInterval: number;
    helloInterval: number;
    keychains: string[];
    md5Keychains: string[];
    md5Keys?: outputs.RouterOspfAreaVirtualLinkMd5Key[];
    name?: string;
    peer: string;
    retransmitInterval: number;
    transmitDelay: number;
}

export interface RouterOspfAreaVirtualLinkMd5Key {
    id?: number;
    keyStrings: string[];
}

export interface RouterOspfAreaVirtuallinkMd5Key {
    id?: number;
    keyStrings: string[];
}

export interface RouterOspfDistributeList {
    accessLists: string[];
    id?: number;
    protocol: string;
}

export interface RouterOspfNeighbor {
    cost?: number;
    id?: number;
    ip: string;
    pollInterval: number;
    priority: number;
}

export interface RouterOspfNetwork {
    area?: string;
    comments?: string;
    id?: number;
    prefixes: string[];
}

export interface RouterOspfOspfInterface {
    authentication: string;
    authenticationKeys: string[];
    bfd: string;
    comments?: string;
    cost?: number;
    databaseFilterOut: string;
    deadInterval?: number;
    helloInterval?: number;
    helloMultiplier?: number;
    interfaces: string[];
    ip: string;
    keychains: string[];
    md5Keychains: string[];
    md5Keys?: outputs.RouterOspfOspfInterfaceMd5Key[];
    mtu?: number;
    mtuIgnore: string;
    name?: string;
    networkType: string;
    prefixLength?: number;
    priority: number;
    resyncTimeout: number;
    retransmitInterval: number;
    status: string;
    transmitDelay: number;
}

export interface RouterOspfOspfInterfaceMd5Key {
    id?: number;
    keyStrings: string[];
}

export interface RouterOspfOspfinterfaceMd5Key {
    id?: number;
    keyStrings: string[];
}

export interface RouterOspfRedistribute {
    metric?: number;
    metricType: string;
    name?: string;
    routemaps: string[];
    status: string;
    tag?: number;
}

export interface RouterOspfSummaryAddress {
    advertise: string;
    id: number;
    prefixes: string[];
    tag?: number;
}

export interface RouterRipDistance {
    accessLists: string[];
    distance?: number;
    id: number;
    prefixes: string[];
}

export interface RouterRipDistributeList {
    direction?: string;
    id?: number;
    interfaces: string[];
    listnames: string[];
    status?: string;
}

export interface RouterRipInterface {
    authKeychains: string[];
    authMode: string;
    authStrings: string[];
    flags: number;
    name?: string;
    receiveVersions: string[];
    sendVersion2Broadcast?: string;
    sendVersions: string[];
    splitHorizon: string;
    splitHorizonStatus: string;
}

export interface RouterRipNeighbor {
    id?: number;
    ip: string;
}

export interface RouterRipNetwork {
    id?: number;
    prefixes: string[];
}

export interface RouterRipOffsetList {
    accessLists: string[];
    direction: string;
    id?: number;
    interfaces: string[];
    offset?: number;
    status: string;
}

export interface RouterRipRedistribute {
    metric?: number;
    name?: string;
    routemaps: string[];
    status: string;
}

export interface RouterRipngAggregateAddress {
    id?: number;
    prefix6: string;
}

export interface RouterRipngDistance {
    accessList6s: string[];
    distance?: number;
    id?: number;
    prefix6: string;
}

export interface RouterRipngDistributeList {
    direction: string;
    id?: number;
    interfaces: string[];
    listnames: string[];
    status: string;
}

export interface RouterRipngInterface {
    flags: number;
    names: string[];
    splitHorizon: string;
    splitHorizonStatus: string;
}

export interface RouterRipngNeighbor {
    id?: number;
    interfaces: string[];
    ip6: string;
}

export interface RouterRipngNetwork {
    id?: number;
    prefix: string;
}

export interface RouterRipngOffsetList {
    accessList6s: string[];
    direction: string;
    id?: number;
    interfaces: string[];
    offset?: number;
    status: string;
}

export interface RouterRipngRedistribute {
    metric?: number;
    name?: string;
    routemaps: string[];
    status: string;
}

export interface SwitchcontrollerAclIngressAction {
    count: string;
    drop: string;
}

export interface SwitchcontrollerAclIngressClassifier {
    dstIpPrefixes: string[];
    dstMac: string;
    srcIpPrefixes: string[];
    srcMac: string;
    vlan?: number;
}

export interface SwitchcontrollerAutoconfigCustomSwitchBinding {
    policies: string[];
    switchId?: string;
}

export interface SwitchcontrollerDynamicportpolicyPolicy {
    bouncePortLink: string;
    category: string;
    description?: string;
    family?: string;
    host?: string;
    hwVendor?: string;
    interfaceTags: string[];
    lldpProfiles: string[];
    mac?: string;
    matchPeriod?: number;
    matchType: string;
    n8021xes: string[];
    name?: string;
    qosPolicies: string[];
    status: string;
    type?: string;
    vlanPolicies: string[];
}

export interface SwitchcontrollerFlowtrackingAggregate {
    id: number;
    ips: string[];
}

export interface SwitchcontrollerFlowtrackingCollector {
    ip: string;
    name?: string;
    port?: number;
    transport: string;
}

export interface SwitchcontrollerFortilinksettingsNacPorts {
    bounceNacPort?: string;
    lanSegment: string;
    memberChange?: number;
    nacLanInterfaces: string[];
    nacSegmentVlans: string[];
    onboardingVlans: string[];
    parentKey?: string;
}

export interface SwitchcontrollerGlobalCustomCommand {
    commandEntry?: string;
    commandNames: string[];
}

export interface SwitchcontrollerLldpprofileCustomTlv {
    informationString?: string;
    name?: string;
    oui: string;
    subtype?: number;
}

export interface SwitchcontrollerLldpprofileMedLocationService {
    name?: string;
    status?: string;
    sysLocationIds: string[];
}

export interface SwitchcontrollerLldpprofileMedNetworkPolicy {
    assignVlan?: string;
    dscp?: number;
    name?: string;
    priority?: number;
    status?: string;
    vlan?: number;
    vlanIntfs: string[];
}

export interface SwitchcontrollerLocationAddressCivic {
    additional?: string;
    additionalCode?: string;
    block?: string;
    branchRoad?: string;
    building?: string;
    city?: string;
    cityDivision?: string;
    country?: string;
    countrySubdivision?: string;
    county?: string;
    direction?: string;
    floor?: string;
    landmark?: string;
    language?: string;
    name?: string;
    number?: string;
    numberSuffix?: string;
    parentKey?: string;
    placeType?: string;
    postOfficeBox?: string;
    postalCommunity?: string;
    primaryRoad?: string;
    roadSection?: string;
    room?: string;
    script?: string;
    seat?: string;
    street?: string;
    streetNamePostMod?: string;
    streetNamePreMod?: string;
    streetSuffix?: string;
    subBranchRoad?: string;
    trailingStrSuffix?: string;
    unit?: string;
    zip?: string;
}

export interface SwitchcontrollerLocationCoordinates {
    altitude?: string;
    altitudeUnit: string;
    datum: string;
    latitude?: string;
    longitude?: string;
    parentKey?: string;
}

export interface SwitchcontrollerLocationElinNumber {
    elinNum?: string;
    parentKey?: string;
}

export interface SwitchcontrollerManagedswitchCustomCommand {
    commandEntry?: string;
    commandNames: string[];
}

export interface SwitchcontrollerManagedswitchDhcpSnoopingStaticClient {
    ip: string;
    mac: string;
    name?: string;
    port?: string;
    vlans: string[];
}

export interface SwitchcontrollerManagedswitchIgmpSnooping {
    agingTime: number;
    floodUnknownMulticast: string;
    localOverride: string;
    vlans?: outputs.SwitchcontrollerManagedswitchIgmpSnoopingVlan[];
}

export interface SwitchcontrollerManagedswitchIgmpSnoopingVlan {
    proxy: string;
    querier: string;
    querierAddr: string;
    version: number;
    vlanNames: string[];
}

export interface SwitchcontrollerManagedswitchIgmpsnoopingVlan {
    proxy: string;
    querier: string;
    querierAddr: string;
    version: number;
    vlanNames: string[];
}

export interface SwitchcontrollerManagedswitchIpSourceGuard {
    bindingEntries?: outputs.SwitchcontrollerManagedswitchIpSourceGuardBindingEntry[];
    description?: string;
    port?: string;
}

export interface SwitchcontrollerManagedswitchIpSourceGuardBindingEntry {
    entryName?: string;
    ip: string;
    mac: string;
}

export interface SwitchcontrollerManagedswitchIpsourceguardBindingEntry {
    entryName?: string;
    ip: string;
    mac: string;
}

export interface SwitchcontrollerManagedswitchMirror {
    dst?: string;
    name?: string;
    srcEgresses: string[];
    srcIngresses: string[];
    status: string;
    switchingPacket: string;
}

export interface SwitchcontrollerManagedswitchN8021xSettings {
    linkDownAuth: string;
    localOverride: string;
    mabReauth: string;
    macCalledStationDelimiter: string;
    macCallingStationDelimiter: string;
    macCase: string;
    macPasswordDelimiter: string;
    macUsernameDelimiter: string;
    maxReauthAttempt: number;
    reauthPeriod: number;
    txPeriod: number;
}

export interface SwitchcontrollerManagedswitchPort {
    accessMode?: string;
    aclGroups: string[];
    aggregatorMode?: string;
    allowArpMonitor?: string;
    allowedVlans: string[];
    allowedVlansAll?: string;
    arpInspectionTrust?: string;
    authenticatedPort?: number;
    bundle?: string;
    description?: string;
    dhcpSnoopOption82Overrides?: outputs.SwitchcontrollerManagedswitchPortDhcpSnoopOption82Override[];
    dhcpSnoopOption82Trust?: string;
    dhcpSnooping?: string;
    discardMode?: string;
    dslProfiles: string[];
    edgePort?: string;
    encryptedPort?: number;
    exportTags: string[];
    exportToPoolFlag?: number;
    exportToPools: string[];
    exportTos: string[];
    fallbackPort?: string;
    fecCapable?: number;
    fecState?: string;
    fgtPeerDeviceName?: string;
    fgtPeerPortName?: string;
    fiberPort?: number;
    flags?: number;
    flapDuration?: number;
    flapRate?: number;
    flapTimeout?: number;
    flapguard?: string;
    flowControl?: string;
    fortilinkPort?: number;
    fortiswitchAcls: number[];
    igmpSnooping?: string;
    igmpSnoopingFloodReports?: string;
    igmpsFloodReports?: string;
    igmpsFloodTraffic?: string;
    interfaceTags: string[];
    ipSourceGuard?: string;
    islLocalTrunkName?: string;
    islPeerDeviceName?: string;
    islPeerDeviceSn?: string;
    islPeerPortName?: string;
    lacpSpeed?: string;
    learningLimit?: number;
    linkStatus?: string;
    lldpProfiles: string[];
    lldpStatus?: string;
    loopGuard?: string;
    loopGuardTimeout?: number;
    macAddr?: string;
    matchedDppIntfTags?: string;
    matchedDppPolicy?: string;
    maxBundle?: number;
    mcastSnoopingFloodTraffic?: string;
    mclag?: string;
    mclagIclPort?: number;
    mediaType?: string;
    memberWithdrawalBehavior?: string;
    members: string[];
    minBundle?: number;
    mode?: string;
    p2pPort?: number;
    packetSampleRate?: number;
    packetSampler?: string;
    pauseMeter?: number;
    pauseMeterResume?: string;
    poeCapable?: number;
    poeMaxPower?: string;
    poeModeBtCabable?: number;
    poePortMode?: string;
    poePortPower?: string;
    poePortPriority?: string;
    poePreStandardDetection?: string;
    poeStandard?: string;
    poeStatus?: string;
    portName?: string;
    portNumber?: number;
    portOwner?: string;
    portPolicies: string[];
    portPrefixType?: number;
    portSecurityPolicies: string[];
    portSelectionCriteria?: string;
    ptpPolicies: string[];
    ptpStatus?: string;
    qosPolicies: string[];
    restrictedAuthPort?: number;
    rpvstPort?: string;
    sampleDirection?: string;
    sflowCounterInterval?: number;
    speed?: string;
    speedMask?: number;
    stackingPort?: number;
    status?: string;
    stickyMac?: string;
    stormControlPolicies: string[];
    stpBpduGuard?: string;
    stpBpduGuardTimeout?: number;
    stpRootGuard?: string;
    stpState?: string;
    switchId?: string;
    trunkMember?: number;
    type?: string;
    untaggedVlans: string[];
    virtualPort?: number;
    vlans: string[];
}

export interface SwitchcontrollerManagedswitchPortDhcpSnoopOption82Override {
    circuitId?: string;
    remoteId?: string;
    vlanNames: string[];
}

export interface SwitchcontrollerManagedswitchRemoteLog {
    csv: string;
    facility: string;
    name?: string;
    port: number;
    server?: string;
    severity: string;
    status: string;
}

export interface SwitchcontrollerManagedswitchRouteOffloadRouter {
    routerIp: string;
    vlanNames: string[];
}

export interface SwitchcontrollerManagedswitchSnmpCommunity {
    events: string[];
    hosts?: outputs.SwitchcontrollerManagedswitchSnmpCommunityHost[];
    id?: number;
    name?: string;
    queryV1Port: number;
    queryV1Status: string;
    queryV2cPort: number;
    queryV2cStatus: string;
    status: string;
    trapV1Lport: number;
    trapV1Rport: number;
    trapV1Status: string;
    trapV2cLport: number;
    trapV2cRport: number;
    trapV2cStatus: string;
}

export interface SwitchcontrollerManagedswitchSnmpCommunityHost {
    id?: number;
    ips: string[];
}

export interface SwitchcontrollerManagedswitchSnmpSysinfo {
    contactInfo?: string;
    description?: string;
    engineId?: string;
    location?: string;
    status: string;
}

export interface SwitchcontrollerManagedswitchSnmpTrapThreshold {
    trapHighCpuThreshold?: number;
    trapLogFullThreshold: number;
    trapLowMemoryThreshold: number;
}

export interface SwitchcontrollerManagedswitchSnmpUser {
    authProto: string;
    authPwds: string[];
    name?: string;
    privProto: string;
    privPwds: string[];
    queries: string;
    queryPort: number;
    securityLevel: string;
}

export interface SwitchcontrollerManagedswitchSnmpcommunityHost {
    id?: number;
    ips: string[];
}

export interface SwitchcontrollerManagedswitchStaticMac {
    description?: string;
    id?: number;
    interface?: string;
    mac: string;
    type: string;
    vlans: string[];
}

export interface SwitchcontrollerManagedswitchStormControl {
    broadcast?: string;
    localOverride: string;
    rate: number;
    unknownMulticast: string;
    unknownUnicast: string;
}

export interface SwitchcontrollerManagedswitchStpInstance {
    id?: string;
    priority: string;
}

export interface SwitchcontrollerManagedswitchStpSettings {
    forwardTime: number;
    helloTime: number;
    localOverride: string;
    maxAge: number;
    maxHops: number;
    name?: string;
    pendingTimer: number;
    revision?: number;
    status: string;
}

export interface SwitchcontrollerManagedswitchSwitchLog {
    localOverride?: string;
    severity: string;
    status: string;
}

export interface SwitchcontrollerManagedswitchVlan {
    assignmentPriority: number;
    vlanNames: string[];
}

export interface SwitchcontrollerQosIpdscpmapMap {
    cosQueue?: number;
    diffservs: string[];
    ipPrecedences: string[];
    name?: string;
    value?: string;
}

export interface SwitchcontrollerQosQueuepolicyCosQueue {
    description?: string;
    dropPolicy?: string;
    ecn?: string;
    maxRate?: number;
    maxRatePercent?: number;
    minRate?: number;
    minRatePercent?: number;
    name?: string;
    weight?: number;
}

export interface SwitchcontrollerSnmpcommunityHost {
    id?: number;
    ips: string[];
}

export interface SwitchcontrollerTrafficsnifferTargetIp {
    description?: string;
    dstEntryId?: number;
    ip?: string;
    srcEntryId?: number;
}

export interface SwitchcontrollerTrafficsnifferTargetMac {
    description?: string;
    dstEntryId: number;
    mac?: string;
    srcEntryId: number;
}

export interface SwitchcontrollerTrafficsnifferTargetPort {
    description?: string;
    inPorts: string[];
    outPorts: string[];
    switchIds: string[];
}

export interface System5gmodemModem1SimSwitch {
    activeSimSlot?: string;
    byConnectionState?: string;
    byLinkMonitor?: string;
    bySimState?: string;
    linkMonitor?: string;
    modemDisconnectionTime?: number;
    simSwitchLogAlertInterval?: number;
    simSwitchLogAlertThreshold?: number;
}

export interface SystemAccprofileFwgrpPermission {
    address?: string;
    others?: string;
    policy?: string;
    schedule?: string;
    service?: string;
}

export interface SystemAccprofileLoggrpPermission {
    config?: string;
    dataAccess?: string;
    reportAccess?: string;
    threatWeight?: string;
}

export interface SystemAccprofileNetgrpPermission {
    cfg?: string;
    packetCapture?: string;
    routeCfg?: string;
}

export interface SystemAccprofileSysgrpPermission {
    admin?: string;
    cfg?: string;
    mnt?: string;
    upd?: string;
}

export interface SystemAccprofileUtmgrpPermission {
    antivirus?: string;
    applicationControl?: string;
    casb?: string;
    dataLeakPrevention?: string;
    dataLossPrevention?: string;
    dlp?: string;
    dnsfilter?: string;
    emailfilter?: string;
    endpointControl?: string;
    fileFilter?: string;
    icap?: string;
    ips?: string;
    mmsgtp?: string;
    videofilter?: string;
    virtualPatch?: string;
    voip?: string;
    waf?: string;
    webfilter?: string;
}

export interface SystemAcmeAccount {
    caUrl?: string;
    email?: string;
    id?: string;
    privatekey?: string;
    status?: string;
    url?: string;
}

export interface SystemApiuserTrusthost {
    id?: number;
    ipv4Trusthosts: string[];
    ipv6Trusthost: string;
    type: string;
}

export interface SystemAutomationactionHttpHeader {
    id?: number;
    key?: string;
    value?: string;
}

export interface SystemAutomationstitchAction {
    actions: string[];
    delay?: number;
    id?: number;
    required: string;
}

export interface SystemAutomationtriggerField {
    id?: number;
    name?: string;
    value?: string;
}

export interface SystemCentralmanagementServerList {
    addrType: string;
    fqdn?: string;
    id?: number;
    serverAddress: string;
    serverAddress6: string;
    serverTypes: string[];
}

export interface SystemClustersyncSessionSyncFilter {
    customServices?: outputs.SystemClustersyncSessionSyncFilterCustomService[];
    dstaddr6: string;
    dstaddrs: string[];
    dstintfs: string[];
    srcaddr6: string;
    srcaddrs: string[];
    srcintf?: string;
}

export interface SystemClustersyncSessionSyncFilterCustomService {
    dstPortRange: string;
    id?: number;
    srcPortRange: string;
}

export interface SystemClustersyncSessionsyncfilterCustomService {
    dstPortRange: string;
    id?: number;
    srcPortRange: string;
}

export interface SystemCsfFabricConnector {
    accprofiles: string[];
    configurationWriteAccess: string;
    serial?: string;
    vdoms: string[];
}

export interface SystemCsfFabricDevice {
    accessTokens: string[];
    deviceIp: string;
    httpsPort: number;
    name?: string;
}

export interface SystemCsfTrustedList {
    action?: string;
    authorizationType?: string;
    certificate?: string;
    downstreamAuthorization?: string;
    haMembers: string[];
    index?: number;
    name?: string;
    serial?: string;
}

export interface SystemDeviceupgradeKnownHaMember {
    serial?: string;
}

export interface SystemDhcp6ServerIpRange {
    endIp: string;
    id?: number;
    startIp: string;
}

export interface SystemDhcp6ServerPrefixRange {
    endPrefix: string;
    id?: number;
    prefixLength?: number;
    startPrefix: string;
}

export interface SystemFabricvpnAdvertisedSubnet {
    access: string;
    bgpNetworks: string[];
    firewallAddresses: string[];
    id?: number;
    policies: string[];
    prefixes: string[];
}

export interface SystemFabricvpnOverlay {
    bgpNeighborGroups: string[];
    bgpNeighborRanges: string[];
    bgpNeighbors: string[];
    bgpNetworks: string[];
    interfaces: string[];
    ipsecPhase1s: string[];
    name?: string;
    overlayPolicies: string[];
    overlayTunnelBlocks: string[];
    remoteGw: string;
    routePolicies: string[];
    sdwanMembers: string[];
}

export interface SystemFederatedupgradeKnownHaMember {
    serial?: string;
}

export interface SystemFederatedupgradeNodeList {
    coordinatingFortigate?: string;
    deviceType: string;
    maximumMinutes: number;
    serial?: string;
    setupTimes: string[];
    times: string[];
    timing: string;
    upgradePath?: string;
}

export interface SystemGlobalSplitPortMode {
    interface?: string;
    splitMode?: string;
}

export interface SystemHaFrupSettings {
    activeInterfaces: string[];
    activeSwitchPort?: string;
    backupInterfaces: string[];
}

export interface SystemHaHaMgmtInterface {
    dsts: string[];
    gateway: string;
    gateway6: string;
    id?: number;
    interfaces: string[];
}

export interface SystemHaSecondaryVcluster {
    monitors: string[];
    override?: string;
    overrideWaitTime?: number;
    pingserverFailoverThreshold?: number;
    pingserverMonitorInterfaces: string[];
    pingserverSecondaryForceReset?: string;
    pingserverSlaveForceReset?: string;
    priority?: number;
    vclusterId?: number;
    vdoms: string[];
}

export interface SystemHaUnicastPeer {
    id?: number;
    peerIp: string;
}

export interface SystemHaVcluster {
    monitors: string[];
    override: string;
    overrideWaitTime?: number;
    pingserverFailoverThreshold?: number;
    pingserverFlipTimeout: number;
    pingserverMonitorInterfaces: string[];
    pingserverSecondaryForceReset: string;
    pingserverSlaveForceReset?: string;
    priority: number;
    vclusterId?: number;
    vdoms: string[];
}

export interface SystemIkeDhGroup1 {
    id?: number;
    keypairCache: string;
    keypairCount?: number;
    mode: string;
}

export interface SystemIkeDhGroup14 {
    id?: number;
    keypairCache: string;
    keypairCount?: number;
    mode: string;
}

export interface SystemIkeDhGroup15 {
    id?: number;
    keypairCache: string;
    keypairCount?: number;
    mode: string;
}

export interface SystemIkeDhGroup16 {
    id?: number;
    keypairCache: string;
    keypairCount?: number;
    mode: string;
}

export interface SystemIkeDhGroup17 {
    id?: number;
    keypairCache: string;
    keypairCount?: number;
    mode: string;
}

export interface SystemIkeDhGroup18 {
    id?: number;
    keypairCache: string;
    keypairCount?: number;
    mode: string;
}

export interface SystemIkeDhGroup19 {
    id?: number;
    keypairCache: string;
    keypairCount?: number;
    mode: string;
}

export interface SystemIkeDhGroup2 {
    id?: number;
    keypairCache: string;
    keypairCount?: number;
    mode: string;
}

export interface SystemIkeDhGroup20 {
    id?: number;
    keypairCache: string;
    keypairCount?: number;
    mode: string;
}

export interface SystemIkeDhGroup21 {
    id?: number;
    keypairCache: string;
    keypairCount?: number;
    mode: string;
}

export interface SystemIkeDhGroup27 {
    id?: number;
    keypairCache: string;
    keypairCount?: number;
    mode: string;
}

export interface SystemIkeDhGroup28 {
    id?: number;
    keypairCache: string;
    keypairCount?: number;
    mode: string;
}

export interface SystemIkeDhGroup29 {
    id?: number;
    keypairCache: string;
    keypairCount?: number;
    mode: string;
}

export interface SystemIkeDhGroup30 {
    id?: number;
    keypairCache: string;
    keypairCount?: number;
    mode: string;
}

export interface SystemIkeDhGroup31 {
    id?: number;
    keypairCache: string;
    keypairCount?: number;
    mode: string;
}

export interface SystemIkeDhGroup32 {
    id?: number;
    keypairCache: string;
    keypairCount?: number;
    mode: string;
}

export interface SystemIkeDhGroup5 {
    id?: number;
    keypairCache: string;
    keypairCount?: number;
    mode: string;
}

export interface SystemInterfaceClientOption {
    code?: number;
    id?: number;
    ips: string[];
    type: string;
    value?: string;
}

export interface SystemInterfaceDhcpSnoopingServerList {
    name?: string;
    serverIp: string;
}

export interface SystemInterfaceEgressQueues {
    cos0s: string[];
    cos1s: string[];
    cos2s: string[];
    cos3s: string[];
    cos4s: string[];
    cos5s: string[];
    cos6s: string[];
    cos7s: string[];
}

export interface SystemInterfaceIpv6 {
    autoconf: string;
    cliConn6Status?: number;
    dhcp6ClientOptions: string[];
    dhcp6IapdLists?: outputs.SystemInterfaceIpv6Dhcp6IapdList[];
    dhcp6InformationRequest: string;
    dhcp6PrefixDelegation: string;
    dhcp6PrefixHint?: string;
    dhcp6PrefixHintPlt?: number;
    dhcp6PrefixHintVlt?: number;
    dhcp6RelayInterfaceId?: string;
    dhcp6RelayIps: string[];
    dhcp6RelayService: string;
    dhcp6RelaySourceInterface: string;
    dhcp6RelaySourceIp: string;
    dhcp6RelayType: string;
    icmp6SendRedirect: string;
    interfaceIdentifier: string;
    ip6Address: string;
    ip6Allowaccesses: string[];
    ip6DefaultLife: number;
    ip6DelegatedPrefixIaid?: number;
    ip6DelegatedPrefixLists?: outputs.SystemInterfaceIpv6Ip6DelegatedPrefixList[];
    ip6DnsServerOverride: string;
    ip6ExtraAddrs?: outputs.SystemInterfaceIpv6Ip6ExtraAddr[];
    ip6HopLimit?: number;
    ip6LinkMtu?: number;
    ip6ManageFlag: string;
    ip6MaxInterval: number;
    ip6MinInterval: number;
    ip6Mode: string;
    ip6OtherFlag: string;
    ip6PrefixLists?: outputs.SystemInterfaceIpv6Ip6PrefixList[];
    ip6PrefixMode: string;
    ip6ReachableTime?: number;
    ip6RetransTime?: number;
    ip6SendAdv: string;
    ip6Subnet: string;
    ip6UpstreamInterfaces: string[];
    ndCerts: string[];
    ndCgaModifier?: string;
    ndMode: string;
    ndSecurityLevel?: number;
    ndTimestampDelta?: number;
    ndTimestampFuzz?: number;
    raSendMtu: string;
    uniqueAutoconfAddr: string;
    vrip6LinkLocal: string;
    vrrp6s?: outputs.SystemInterfaceIpv6Vrrp6[];
    vrrpVirtualMac6: string;
}

export interface SystemInterfaceIpv6Dhcp6IapdList {
    iaid?: number;
    prefixHint: string;
    prefixHintPlt: number;
    prefixHintVlt: number;
}

export interface SystemInterfaceIpv6Ip6DelegatedPrefixList {
    autonomousFlag?: string;
    delegatedPrefixIaid?: number;
    onlinkFlag?: string;
    prefixId?: number;
    rdnssService?: string;
    rdnsses: string[];
    subnet?: string;
    upstreamInterfaces: string[];
}

export interface SystemInterfaceIpv6Ip6ExtraAddr {
    prefix?: string;
}

export interface SystemInterfaceIpv6Ip6PrefixList {
    autonomousFlag?: string;
    dnssls: string[];
    onlinkFlag?: string;
    preferredLifeTime?: number;
    prefix?: string;
    rdnsses: string[];
    validLifeTime?: number;
}

export interface SystemInterfaceIpv6Vrrp6 {
    acceptMode: string;
    advInterval: number;
    ignoreDefaultRoute: string;
    preempt: string;
    priority: number;
    startTime: number;
    status: string;
    vrdst6s: string[];
    vrgrp?: number;
    vrid?: number;
    vrip6: string;
}

export interface SystemInterfaceL2tpClientSettings {
    authType?: string;
    defaultgw?: string;
    distance?: number;
    helloInterval?: number;
    ips: string[];
    mtu?: number;
    passwords: string[];
    peerHost?: string;
    peerMask?: string;
    peerPort?: number;
    priority?: number;
    user?: string;
}

export interface SystemInterfaceMirroringFilter {
    dbgDump?: number;
    filterDport?: number;
    filterDstips: string[];
    filterProtocol?: number;
    filterSport?: number;
    filterSrcips: string[];
}

export interface SystemInterfaceSecondaryip {
    allowaccesses: string[];
    id: number;
    ips: string[];
    secipRelayIp?: string;
}

export interface SystemInterfaceTagging {
    categories: string[];
    name?: string;
    tags: string[];
}

export interface SystemInterfaceVrrp {
    acceptMode: string;
    advInterval: number;
    ignoreDefaultRoute: string;
    preempt: string;
    priority: number;
    proxyArps?: outputs.SystemInterfaceVrrpProxyArp[];
    startTime: number;
    status: string;
    version: string;
    vrdstPriority?: number;
    vrdsts: string[];
    vrgrp?: number;
    vrid?: number;
    vrip?: string;
}

export interface SystemInterfaceVrrpProxyArp {
    id?: number;
    ip: string;
}

export interface SystemInterfaceWifiNetwork {
    id?: number;
    obsoleteSecurityOptions?: string;
    wifiCaCertificates: string[];
    wifiClientCertificates: string[];
    wifiEapType?: string;
    wifiEncrypt?: string;
    wifiKeyindex?: number;
    wifiKeys: string[];
    wifiPassphrases: string[];
    wifiPrivateKey?: string;
    wifiPrivateKeyPasswords: string[];
    wifiSecurity?: string;
    wifiSsid?: string;
    wifiUsername?: string;
}

export interface SystemIpamPool {
    description?: string;
    excludes?: outputs.SystemIpamPoolExclude[];
    name?: string;
    subnets: string[];
}

export interface SystemIpamPoolExclude {
    excludeSubnets: string[];
    id?: number;
}

export interface SystemIpamPoolsExclude {
    excludeSubnets: string[];
    id?: number;
}

export interface SystemIpamRule {
    description?: string;
    devices: string[];
    dhcp: string;
    interfaces: string[];
    name?: string;
    pools: string[];
    role: string;
}

export interface SystemLinkmonitorServerList {
    dst?: string;
    id?: number;
    port?: number;
    protocols: string[];
    weight?: number;
}

export interface SystemLldpNetworkpolicyGuest {
    dscp?: number;
    priority: number;
    status: string;
    tag: string;
    vlan?: number;
}

export interface SystemLldpNetworkpolicyGuestVoiceSignaling {
    dscp?: number;
    priority: number;
    status: string;
    tag: string;
    vlan?: number;
}

export interface SystemLldpNetworkpolicySoftphone {
    dscp?: number;
    priority: number;
    status: string;
    tag: string;
    vlan?: number;
}

export interface SystemLldpNetworkpolicyStreamingVideo {
    dscp?: number;
    priority: number;
    status: string;
    tag: string;
    vlan?: number;
}

export interface SystemLldpNetworkpolicyVideoConferencing {
    dscp?: number;
    priority: number;
    status: string;
    tag: string;
    vlan?: number;
}

export interface SystemLldpNetworkpolicyVideoSignaling {
    dscp?: number;
    priority: number;
    status: string;
    tag: string;
    vlan?: number;
}

export interface SystemLldpNetworkpolicyVoice {
    dscp?: number;
    priority: number;
    status: string;
    tag: string;
    vlan?: number;
}

export interface SystemLldpNetworkpolicyVoiceSignaling {
    dscp?: number;
    priority: number;
    status: string;
    tag: string;
    vlan?: number;
}

export interface SystemMobiletunnelNetwork {
    id?: number;
    interfaces: string[];
    prefixes: string[];
}

export interface SystemNetflowCollector {
    collectorIp?: string;
    collectorPort: number;
    id?: number;
    interfaceSelectMethod: string;
    interfaces: string[];
    sourceIp?: string;
}

export interface SystemNtpNtpserver {
    authentication?: string;
    id: number;
    interfaceSelectMethod: string;
    interfaces: string[];
    ipType: string;
    keyId?: number;
    keyType: string;
    keys: string[];
    ntpv3: string;
    server?: string;
}

export interface SystemPcpserverPool {
    allowOpcodes: string[];
    announcementCount: number;
    arpReply: string;
    clientMappingLimit?: number;
    clientSubnets: string[];
    description?: string;
    extIntfs: string[];
    extip: string;
    extport: string;
    id?: number;
    intlIntfs: string[];
    mappingFilterLimit: number;
    maximalLifetime: number;
    minimalLifetime: number;
    multicastAnnouncement: string;
    name?: string;
    recycleDelay?: number;
    thirdParty: string;
    thirdPartySubnets: string[];
}

export interface SystemPtpServerInterface {
    delayMechanism: string;
    id?: number;
    serverInterfaceNames: string[];
}

export interface SystemSamlServiceProvider {
    assertionAttributes?: outputs.SystemSamlServiceProviderAssertionAttribute[];
    idpArtifactResolutionUrl?: string;
    idpEntityId?: string;
    idpSingleLogoutUrl?: string;
    idpSingleSignOnUrl?: string;
    name?: string;
    prefix?: string;
    spArtifactResolutionUrl?: string;
    spBindingProtocol?: string;
    spCerts: string[];
    spEntityId?: string;
    spPortalUrl?: string;
    spSingleLogoutUrl?: string;
    spSingleSignOnUrl?: string;
}

export interface SystemSamlServiceProviderAssertionAttribute {
    name?: string;
    type?: string;
}

export interface SystemSdwanDuplication {
    dstaddr6s: string[];
    dstaddrs: string[];
    dstintfs: string[];
    id?: number;
    packetDeDuplication: string;
    packetDuplication: string;
    serviceIds: string[];
    services: string[];
    slaMatchService: string;
    srcaddr6s: string[];
    srcaddrs: string[];
    srcintfs: string[];
}

export interface SystemSdwanHealthCheck {
    addrMode: string;
    classIds: string[];
    detectMode: string;
    diffservcode: string;
    dnsMatchIp: string;
    dnsRequestDomain: string;
    embedMeasuredHealth: string;
    failtime: number;
    ftpFile?: string;
    ftpMode: string;
    haPriority: number;
    httpAgent: string;
    httpGet?: string;
    httpMatch?: string;
    interval: number;
    members: string[];
    mosCodec: string;
    name?: string;
    packetSize?: number;
    passwords: string[];
    port?: number;
    probeCount: number;
    probePackets: string;
    probeTimeout: number;
    protocol: string;
    qualityMeasuredMethod: string;
    recoverytime: number;
    securityMode?: string;
    servers: string[];
    slaFailLogPeriod?: number;
    slaIdRedistribute?: number;
    slaPassLogPeriod?: number;
    slas?: outputs.SystemSdwanHealthCheckSla[];
    source: string;
    source6?: string;
    systemDns: string;
    thresholdAlertJitter?: number;
    thresholdAlertLatency?: number;
    thresholdAlertPacketloss?: number;
    thresholdWarningJitter?: number;
    thresholdWarningLatency?: number;
    thresholdWarningPacketloss?: number;
    updateCascadeInterface: string;
    updateStaticRoute: string;
    user?: string;
    vrf?: number;
}

export interface SystemSdwanHealthCheckSla {
    id?: number;
    jitterThreshold?: number;
    latencyThreshold?: number;
    linkCostFactors: string[];
    mosThreshold: string;
    packetlossThreshold?: number;
    priorityInSla?: number;
    priorityOutSla?: number;
}

export interface SystemSdwanHealthcheckSla {
    id?: number;
    jitterThreshold?: number;
    latencyThreshold?: number;
    linkCostFactors: string[];
    mosThreshold: string;
    packetlossThreshold?: number;
    priorityInSla?: number;
    priorityOutSla?: number;
}

export interface SystemSdwanMember {
    comment?: string;
    cost?: number;
    gateway: string;
    gateway6: string;
    ingressSpilloverThreshold?: number;
    interfaces: string[];
    preferredSource: string;
    priority: number;
    priority6: number;
    seqNum?: number;
    source: string;
    source6: string;
    spilloverThreshold?: number;
    status: string;
    transportGroup?: number;
    volumeRatio?: number;
    weight?: number;
    zones: string[];
}

export interface SystemSdwanNeighbor {
    healthChecks: string[];
    ips: string[];
    members: string[];
    minimumSlaMeetMembers?: number;
    mode?: string;
    role?: string;
    serviceIds: string[];
    slaId?: number;
}

export interface SystemSdwanService {
    addrMode: string;
    agentExclusive: string;
    bandwidthWeight?: number;
    default: string;
    dscpForward: string;
    dscpForwardTag?: string;
    dscpReverse: string;
    dscpReverseTag?: string;
    dst6s: string[];
    dstNegate: string;
    dsts: string[];
    endPort: number;
    endSrcPort: number;
    gateway: string;
    groups: string[];
    hashMode?: string;
    healthChecks: string[];
    holdDownTime?: number;
    id?: number;
    inputDeviceNegate: string;
    inputDevices: string[];
    inputZones: string[];
    internetService: string;
    internetServiceAppCtrlCategories: number[];
    internetServiceAppCtrlGroups: string[];
    internetServiceAppCtrls: number[];
    internetServiceCustomGroups: string[];
    internetServiceCustoms: string[];
    internetServiceGroups: string[];
    internetServiceNames: string[];
    jitterWeight?: number;
    latencyWeight?: number;
    linkCostFactor?: string;
    linkCostThreshold: number;
    loadBalance: string;
    minimumSlaMeetMembers?: number;
    mode: string;
    name?: string;
    packetLossWeight?: number;
    passiveMeasurement: string;
    priorityMembers: string[];
    priorityZones: string[];
    protocol?: number;
    qualityLink?: number;
    role: string;
    routeTag?: number;
    shortcut: string;
    shortcutPriority: string;
    slaCompareMethod?: string;
    slaStickiness?: string;
    slas?: outputs.SystemSdwanServiceSla[];
    src6s: string[];
    srcNegate: string;
    srcs: string[];
    standaloneAction: string;
    startPort: number;
    startSrcPort: number;
    status: string;
    tieBreak: string;
    tos: string;
    tosMask: string;
    useShortcutSla: string;
    users: string[];
    zoneMode: string;
}

export interface SystemSdwanServiceSla {
    healthChecks: string[];
    id?: number;
}

export interface SystemSdwanZone {
    advpnHealthChecks: string[];
    advpnSelect: string;
    minimumSlaMeetMembers: number;
    name?: string;
    serviceSlaTieBreak: string;
}

export interface SystemSessionttlPort {
    endPort?: number;
    id: number;
    protocol?: number;
    refreshDirection: string;
    startPort?: number;
    timeout: string;
}

export interface SystemSflowCollector {
    collectorIp: string;
    collectorPort: number;
    id: number;
    interfaceSelectMethod: string;
    interfaces: string[];
    sourceIp: string;
}

export interface SystemSnmpCommunityHost {
    haDirect: string;
    hostType: string;
    id?: number;
    ips: string[];
    sourceIp: string;
}

export interface SystemSnmpCommunityHosts6 {
    haDirect: string;
    hostType: string;
    id?: number;
    ipv6: string;
    sourceIpv6: string;
}

export interface SystemSpeedtestserverHost {
    distance?: number;
    id?: number;
    ip: string;
    latitude?: string;
    longitude?: string;
    passwords: string[];
    port: number;
    user?: string;
}

export interface SystemStandaloneclusterClusterPeer {
    downIntfsBeforeSessSyncs: string[];
    hbInterval: number;
    hbLostThreshold: number;
    ikeHeartbeatInterval?: number;
    ikeMonitor?: string;
    ikeMonitorInterval?: number;
    ikeUseRfc6311?: string;
    ipsecTunnelSync: string;
    peerip: string;
    peervds: string[];
    secondaryAddIpsecRoutes: string;
    sessionSyncFilter?: outputs.SystemStandaloneclusterClusterPeerSessionSyncFilter;
    syncId: number;
    syncvds: string[];
}

export interface SystemStandaloneclusterClusterPeerSessionSyncFilter {
    customServices?: outputs.SystemStandaloneclusterClusterPeerSessionSyncFilterCustomService[];
    dstaddr6: string;
    dstaddrs: string[];
    dstintfs: string[];
    srcaddr6: string;
    srcaddrs: string[];
    srcintfs: string[];
}

export interface SystemStandaloneclusterClusterPeerSessionSyncFilterCustomService {
    dstPortRange: string;
    id?: number;
    srcPortRange: string;
}

export interface SystemStandaloneclusterClusterpeerSessionSyncFilter {
    customServices?: outputs.SystemStandaloneclusterClusterpeerSessionSyncFilterCustomService[];
    dstaddr6: string;
    dstaddrs: string[];
    dstintfs: string[];
    srcaddr6: string;
    srcaddrs: string[];
    srcintfs: string[];
}

export interface SystemStandaloneclusterClusterpeerSessionSyncFilterCustomService {
    dstPortRange: string;
    id?: number;
    srcPortRange: string;
}

export interface SystemStandaloneclusterClusterpeerSessionsyncfilterCustomService {
    dstPortRange: string;
    id?: number;
    srcPortRange: string;
}

export interface SystemVdomnetflowCollector {
    collectorIp?: string;
    collectorPort: number;
    id?: number;
    interfaceSelectMethod: string;
    interfaces: string[];
    sourceIp?: string;
}

export interface SystemVdomsflowCollector {
    collectorIp: string;
    collectorPort: number;
    id?: number;
    interfaceSelectMethod: string;
    interfaces: string[];
    sourceIp: string;
}

export interface SystemZoneTagging {
    categories: string[];
    name?: string;
    tags: string[];
}

export interface UserQuarantineTarget {
    description?: string;
    entry?: string;
    macs?: outputs.UserQuarantineTargetMac[];
}

export interface UserQuarantineTargetMac {
    description?: string;
    drop: string;
    entryId: number;
    mac?: string;
    parent?: string;
}

export interface UserQuarantineTargetsMac {
    description?: string;
    drop: string;
    entryId: number;
    mac?: string;
    parent?: string;
}

export interface UserSettingAuthPort {
    id?: number;
    port: number;
    type: string;
}

export interface VpnCertificateSettingCrlVerification {
    chainCrlAbsence: string;
    expiry: string;
    leafCrlAbsence: string;
}

export interface VpnIpsecPhase1Ipv4ExcludeRange {
    endIp?: string;
    id?: number;
    startIp?: string;
}

export interface VpnIpsecPhase1Ipv6ExcludeRange {
    endIp?: string;
    id?: number;
    startIp?: string;
}

export interface VpnIpsecPhase1interfaceIpv4ExcludeRange {
    endIp?: string;
    id?: number;
    startIp?: string;
}

export interface VpnIpsecPhase1interfaceIpv6ExcludeRange {
    endIp?: string;
    id?: number;
    startIp?: string;
}

export interface VpnKmipserverServerList {
    certs: string[];
    id?: number;
    port: number;
    server?: string;
    status: string;
}

export interface VpnOcvpnForticlientAccess {
    authGroups?: outputs.VpnOcvpnForticlientAccessAuthGroup[];
    psksecrets: string[];
    status?: string;
}

export interface VpnOcvpnForticlientAccessAuthGroup {
    authGroups: string[];
    name?: string;
    overlays: string[];
}

export interface VpnOcvpnOverlay {
    assignIp?: string;
    id?: number;
    interOverlay: string;
    ipv4EndIp?: string;
    ipv4StartIp?: string;
    name?: string;
    overlayName?: string;
    subnets?: outputs.VpnOcvpnOverlaySubnet[];
}

export interface VpnOcvpnOverlaySubnet {
    id?: number;
    interfaces: string[];
    subnets: string[];
    type: string;
}

export interface VpnOcvpnOverlaysSubnet {
    id?: number;
    interfaces: string[];
    subnets: string[];
    type: string;
}

export interface VpnSslSettingsAuthenticationRule {
    auth: string;
    cipher: string;
    clientCert: string;
    groups: string[];
    id?: number;
    portals: string[];
    realms: string[];
    sourceAddress6Negate: string;
    sourceAddress6s: string[];
    sourceAddressNegate: string;
    sourceAddresses: string[];
    sourceInterfaces: string[];
    userPeers: string[];
    users: string[];
}

export interface VpnSslWebUserbookmarkBookmark {
    additionalParams?: string;
    apptype: string;
    colorDepth: string;
    description?: string;
    domain?: string;
    folder?: string;
    formDatas?: outputs.VpnSslWebUserbookmarkBookmarkFormData[];
    height?: number;
    host?: string;
    keyboardLayout: string;
    listeningPort?: number;
    loadBalancingInfo?: string;
    logonPasswords: string[];
    logonUser?: string;
    name?: string;
    port?: number;
    preconnectionBlob?: string;
    preconnectionId?: number;
    remotePort?: number;
    restrictedAdmin: string;
    security?: string;
    sendPreconnectionId: string;
    serverLayout?: string;
    showStatusWindow?: string;
    sso: string;
    ssoCredential: string;
    ssoCredentialSentOnce: string;
    ssoPasswords: string[];
    ssoUsername?: string;
    url?: string;
    vncKeyboardLayout: string;
    width?: number;
}

export interface VpnSslWebUserbookmarkBookmarkFormData {
    name?: string;
    value?: string;
}

export interface VpnSslWebUserbookmarkBookmarksFormData {
    name?: string;
    value?: string;
}

export interface VpnSslWebUsergroupbookmarkBookmark {
    additionalParams?: string;
    apptype: string;
    colorDepth: string;
    description?: string;
    domain?: string;
    folder?: string;
    formDatas?: outputs.VpnSslWebUsergroupbookmarkBookmarkFormData[];
    height?: number;
    host?: string;
    keyboardLayout: string;
    listeningPort?: number;
    loadBalancingInfo?: string;
    logonPasswords: string[];
    logonUser?: string;
    name?: string;
    port?: number;
    preconnectionBlob?: string;
    preconnectionId?: number;
    remotePort?: number;
    restrictedAdmin: string;
    security?: string;
    sendPreconnectionId: string;
    serverLayout?: string;
    showStatusWindow?: string;
    sso: string;
    ssoCredential: string;
    ssoCredentialSentOnce: string;
    ssoPasswords: string[];
    ssoUsername?: string;
    url?: string;
    vncKeyboardLayout: string;
    width?: number;
}

export interface VpnSslWebUsergroupbookmarkBookmarkFormData {
    name?: string;
    value?: string;
}

export interface VpnSslWebUsergroupbookmarkBookmarksFormData {
    name?: string;
    value?: string;
}

export interface WanoptCacheserviceDstPeer {
    authType?: number;
    deviceId?: string;
    encodeType?: number;
    ip: string;
    priority: number;
}

export interface WanoptCacheserviceSrcPeer {
    authType?: number;
    deviceId?: string;
    encodeType?: number;
    ip: string;
    priority: number;
}

export interface WanoptContentdeliverynetworkruleRule {
    contentId?: outputs.WanoptContentdeliverynetworkruleRuleContentId;
    matchEntries?: outputs.WanoptContentdeliverynetworkruleRuleMatchEntry[];
    matchMode: string;
    name?: string;
    skipEntries?: outputs.WanoptContentdeliverynetworkruleRuleSkipEntry[];
    skipRuleMode: string;
}

export interface WanoptContentdeliverynetworkruleRuleContentId {
    endDirection: string;
    endSkip?: number;
    endStr?: string;
    rangeStr?: string;
    startDirection: string;
    startSkip?: number;
    startStr?: string;
    target: string;
}

export interface WanoptContentdeliverynetworkruleRuleMatchEntry {
    id?: number;
    patterns: string[];
    target: string;
}

export interface WanoptContentdeliverynetworkruleRuleSkipEntry {
    id?: number;
    patterns: string[];
    target: string;
}

export interface WanoptContentdeliverynetworkruleRulesContentId {
    endDirection: string;
    endSkip?: number;
    endStr?: string;
    rangeStr?: string;
    startDirection: string;
    startSkip?: number;
    startStr?: string;
    target: string;
}

export interface WanoptContentdeliverynetworkruleRulesMatchEntry {
    id?: number;
    patterns: string[];
    target: string;
}

export interface WanoptContentdeliverynetworkruleRulesSkipEntry {
    id?: number;
    patterns: string[];
    target: string;
}

export interface WebproxyExplicitPacPolicy {
    comments?: string;
    dstaddrs: string[];
    pacFileData?: string;
    pacFileName: string;
    policyid?: number;
    srcaddr6s: string[];
    srcaddrs: string[];
    status: string;
}

export interface WirelesscontrollerAccesscontrollistLayer3Ipv4Rule {
    action?: string;
    comment?: string;
    dstaddr: string;
    dstport?: number;
    protocol: number;
    ruleId?: number;
    srcaddr: string;
    srcport?: number;
}

export interface WirelesscontrollerAccesscontrollistLayer3Ipv6Rule {
    action?: string;
    comment?: string;
    dstaddr: string;
    dstport?: number;
    protocol: number;
    ruleId?: number;
    srcaddr: string;
    srcport?: number;
}

export interface WirelesscontrollerApcfgprofileCommandList {
    id?: number;
    name?: string;
    passwdValues: string[];
    type: string;
    value?: string;
}

export interface WirelesscontrollerBonjourprofilePolicyList {
    description?: string;
    fromVlan: string;
    policyId?: number;
    services: string[];
    toVlan: string;
}

export interface WirelesscontrollerHotspot20Anqp3gppcellularMccMncList {
    id?: number;
    mcc?: string;
    mnc?: string;
}

export interface WirelesscontrollerHotspot20AnqpnairealmNaiList {
    eapMethods?: outputs.WirelesscontrollerHotspot20AnqpnairealmNaiListEapMethod[];
    encoding: string;
    naiRealm?: string;
    name?: string;
}

export interface WirelesscontrollerHotspot20AnqpnairealmNaiListEapMethod {
    authParams?: outputs.WirelesscontrollerHotspot20AnqpnairealmNaiListEapMethodAuthParam[];
    index?: number;
    method: string;
}

export interface WirelesscontrollerHotspot20AnqpnairealmNaiListEapMethodAuthParam {
    id: string;
    index?: number;
    val: string;
}

export interface WirelesscontrollerHotspot20AnqpnairealmNailistEapMethod {
    authParams?: outputs.WirelesscontrollerHotspot20AnqpnairealmNailistEapMethodAuthParam[];
    index?: number;
    method: string;
}

export interface WirelesscontrollerHotspot20AnqpnairealmNailistEapMethodAuthParam {
    id: string;
    index?: number;
    val: string;
}

export interface WirelesscontrollerHotspot20AnqpnairealmNailistEapmethodAuthParam {
    id: string;
    index?: number;
    val: string;
}

export interface WirelesscontrollerHotspot20AnqproamingconsortiumOiList {
    comment?: string;
    index?: number;
    oi?: string;
}

export interface WirelesscontrollerHotspot20AnqpvenuenameValueList {
    index?: number;
    lang: string;
    value?: string;
}

export interface WirelesscontrollerHotspot20AnqpvenueurlValueList {
    index?: number;
    number?: number;
    value?: string;
}

export interface WirelesscontrollerHotspot20H2qpadviceofchargeAocList {
    naiRealm?: string;
    naiRealmEncoding?: string;
    name?: string;
    planInfos?: outputs.WirelesscontrollerHotspot20H2qpadviceofchargeAocListPlanInfo[];
    type: string;
}

export interface WirelesscontrollerHotspot20H2qpadviceofchargeAocListPlanInfo {
    currency?: string;
    infoFile?: string;
    lang?: string;
    name?: string;
}

export interface WirelesscontrollerHotspot20H2qpadviceofchargeAoclistPlanInfo {
    currency?: string;
    infoFile?: string;
    lang?: string;
    name?: string;
}

export interface WirelesscontrollerHotspot20H2qpoperatornameValueList {
    index?: number;
    lang: string;
    value?: string;
}

export interface WirelesscontrollerHotspot20H2qposuproviderFriendlyName {
    friendlyName?: string;
    index?: number;
    lang: string;
}

export interface WirelesscontrollerHotspot20H2qposuproviderServiceDescription {
    lang: string;
    serviceDescription?: string;
    serviceId?: number;
}

export interface WirelesscontrollerHotspot20H2qposuprovidernaiNaiList {
    name?: string;
    osuNai?: string;
}

export interface WirelesscontrollerHotspot20IconIconList {
    file?: string;
    height?: number;
    lang: string;
    name?: string;
    type: string;
    width?: number;
}

export interface WirelesscontrollerHotspot20QosmapDscpExcept {
    dscp?: number;
    index?: number;
    up?: number;
}

export interface WirelesscontrollerHotspot20QosmapDscpRange {
    high: number;
    index?: number;
    low: number;
    up?: number;
}

export interface WirelesscontrollerIntercontrollerInterControllerPeer {
    id?: number;
    peerIp: string;
    peerPort: number;
    peerPriority: string;
}

export interface WirelesscontrollerMpskprofileMpskGroup {
    mpskKeys?: outputs.WirelesscontrollerMpskprofileMpskGroupMpskKey[];
    name?: string;
    vlanId?: number;
    vlanType: string;
}

export interface WirelesscontrollerMpskprofileMpskGroupMpskKey {
    comment?: string;
    concurrentClientLimitType: string;
    concurrentClients: number;
    keyType: string;
    mac: string;
    mpskSchedules: string[];
    name?: string;
    passphrases: string[];
    pmks: string[];
    saePasswords: string[];
    saePk: string;
    saePrivateKey?: string;
}

export interface WirelesscontrollerMpskprofileMpskgroupMpskKey {
    comment?: string;
    concurrentClientLimitType: string;
    concurrentClients: number;
    keyType: string;
    mac: string;
    mpskSchedules: string[];
    name?: string;
    passphrases: string[];
    pmks: string[];
    saePasswords: string[];
    saePk: string;
    saePrivateKey?: string;
}

export interface WirelesscontrollerSettingOffendingSsid {
    actions: string[];
    id?: number;
    ssidPattern?: string;
}

export interface WirelesscontrollerSnmpCommunity {
    hosts?: outputs.WirelesscontrollerSnmpCommunityHost[];
    id?: number;
    name?: string;
    queryV1Status: string;
    queryV2cStatus: string;
    status: string;
    trapV1Status: string;
    trapV2cStatus: string;
}

export interface WirelesscontrollerSnmpCommunityHost {
    id?: number;
    ip: string;
}

export interface WirelesscontrollerSnmpUser {
    authProto: string;
    authPwds: string[];
    name?: string;
    notifyHosts: string[];
    privProto: string;
    privPwds: string[];
    queries: string;
    securityLevel: string;
    status: string;
    trapStatus: string;
}

export interface WirelesscontrollerVapDynamicMapping {
    _centmgmt: string;
    _dhcpSvrIds: string[];
    _intfAllowaccesses: string[];
    _intfDeviceAccessLists: string[];
    _intfDeviceIdentification: string;
    _intfDeviceNetscan: string;
    _intfDhcp6RelayIps: string[];
    _intfDhcp6RelayService: string;
    _intfDhcp6RelayType: string;
    _intfDhcpRelayIps: string[];
    _intfDhcpRelayService: string;
    _intfDhcpRelayType: string;
    _intfIp6Address?: string;
    _intfIp6Allowaccesses: string[];
    _intfIps: string[];
    _intfListenForticlientConnection: string;
    _isFactorySetting: string;
    _scopes?: outputs.WirelesscontrollerVapDynamicMapping_Scope[];
    accessControlLists: string[];
    acctInterimInterval?: number;
    additionalAkms: string[];
    addressGroupPolicy?: string;
    addressGroups: string[];
    akm24Only?: string;
    alias?: string;
    antivirusProfiles: string[];
    applicationDetectionEngine?: string;
    applicationDscpMarking?: string;
    applicationLists: string[];
    applicationReportIntv?: number;
    atfWeight?: number;
    auth?: string;
    authCerts: string[];
    authPortalAddr?: string;
    beaconAdvertisings: string[];
    beaconProtection?: string;
    broadcastSsid?: string;
    broadcastSuppressions: string[];
    bssColorPartial?: string;
    bstmDisassociationImminent?: string;
    bstmLoadBalancingDisassocTimer?: number;
    bstmRssiDisassocTimer?: number;
    captivePortal?: string;
    captivePortalAcName?: string;
    captivePortalAuthTimeout?: number;
    captivePortalFwAccounting?: string;
    captivePortalMacauthRadiusSecrets: string[];
    captivePortalMacauthRadiusServer?: string;
    captivePortalRadiusSecrets: string[];
    captivePortalRadiusServer?: string;
    captivePortalSessionTimeoutInterval?: number;
    clientCount?: number;
    dhcpAddressEnforcement?: string;
    dhcpLeaseTime?: number;
    dhcpOption43Insertion?: string;
    dhcpOption82CircuitIdInsertion?: string;
    dhcpOption82Insertion?: string;
    dhcpOption82RemoteIdInsertion?: string;
    dynamicVlan?: string;
    eapReauth?: string;
    eapReauthIntv?: number;
    eapolKeyRetries?: string;
    encrypt?: string;
    externalFastRoaming?: string;
    externalLogout?: string;
    externalWeb?: string;
    externalWebFormat?: string;
    fastBssTransition?: string;
    fastRoaming?: string;
    ftMobilityDomain?: number;
    ftOverDs?: string;
    ftR0KeyLifetime?: number;
    gasComebackDelay?: number;
    gasFragmentationLimit?: number;
    gtkRekey?: string;
    gtkRekeyIntv?: number;
    highEfficiency?: string;
    hotspot20Profiles: string[];
    igmpSnooping?: string;
    intraVapPrivacy?: string;
    ips: string[];
    ipsSensors: string[];
    ipv6Rules: string[];
    keyindex?: number;
    keys: string[];
    l3Roaming?: string;
    l3RoamingMode?: string;
    ldpc?: string;
    localAuthentication?: string;
    localBridging?: string;
    localLan?: string;
    localStandalone?: string;
    localStandaloneDns?: string;
    localStandaloneDnsIps: string[];
    localStandaloneNat?: string;
    localSwitching?: string;
    macAuthBypass?: string;
    macCalledStationDelimiter?: string;
    macCallingStationDelimiter?: string;
    macCase?: string;
    macFilter?: string;
    macFilterPolicyOther?: string;
    macPasswordDelimiter?: string;
    macUsernameDelimiter?: string;
    maxClients?: number;
    maxClientsAp?: number;
    mbo?: string;
    mboCellDataConnPref?: string;
    meDisableThresh?: number;
    meshBackhaul?: string;
    mpsk?: string;
    mpskConcurrentClients?: number;
    mpskProfiles: string[];
    muMimo?: string;
    multicastEnhance?: string;
    multicastRate?: string;
    n80211k?: string;
    n80211v?: string;
    nac?: string;
    nacProfiles: string[];
    nasFilterRule?: string;
    neighborReportDualBand?: string;
    okc?: string;
    osen?: string;
    oweGroups: string[];
    oweTransition?: string;
    oweTransitionSsid?: string;
    passphrases: string[];
    pmf?: string;
    pmfAssocComebackTimeout?: number;
    pmfSaQueryRetryTimeout?: number;
    portMacauth?: string;
    portMacauthReauthTimeout?: number;
    portMacauthTimeout?: number;
    portalMessageOverrideGroups: string[];
    portalType?: string;
    primaryWagProfiles: string[];
    probeRespSuppression?: string;
    probeRespThreshold?: string;
    ptkRekey?: string;
    ptkRekeyIntv?: number;
    qosProfiles: string[];
    quarantine?: string;
    radio2gThreshold?: string;
    radio5gThreshold?: string;
    radioSensitivity?: string;
    radiusMacAuth?: string;
    radiusMacAuthBlockInterval?: number;
    radiusMacAuthServers: string[];
    radiusMacAuthUsergroups: string[];
    radiusMacMpskAuth?: string;
    radiusMacMpskTimeout?: number;
    radiusServers: string[];
    rates11acMcsMap?: string;
    rates11acSs12s: string[];
    rates11acSs34s: string[];
    rates11as: string[];
    rates11axMcsMap?: string;
    rates11axSs12s: string[];
    rates11axSs34s: string[];
    rates11beMcsMap?: string;
    rates11beMcsMap160?: string;
    rates11beMcsMap320?: string;
    rates11bgs: string[];
    rates11nSs12s: string[];
    rates11nSs34s: string[];
    roamingAcctInterimUpdate?: string;
    saeGroups: string[];
    saeH2eOnly?: string;
    saeHnpOnly?: string;
    saePasswords: string[];
    saePk?: string;
    saePrivateKey?: string;
    scanBotnetConnections?: string;
    schedules: string[];
    secondaryWagProfiles: string[];
    security?: string;
    securityExemptLists: string[];
    securityObsoleteOption?: string;
    securityRedirectUrl?: string;
    selectedUsergroups: string[];
    splitTunneling?: string;
    ssid?: string;
    stickyClientRemove?: string;
    stickyClientThreshold2g?: string;
    stickyClientThreshold5g?: string;
    stickyClientThreshold6g?: string;
    targetWakeTime?: string;
    tkipCounterMeasure?: string;
    tunnelEchoInterval?: number;
    tunnelFallbackInterval?: number;
    usergroups: string[];
    utmLog?: string;
    utmProfiles: string[];
    utmStatus?: string;
    vdoms: string[];
    vlanAuto?: string;
    vlanPooling?: string;
    vlanid?: number;
    voiceEnterprise?: string;
    webfilterProfiles: string[];
}

export interface WirelesscontrollerVapDynamicMapping_Scope {
    name?: string;
    vdom?: string;
}

export interface WirelesscontrollerVapMacFilterList {
    id?: number;
    mac?: string;
    macFilterPolicy?: string;
}

export interface WirelesscontrollerVapMpskKey {
    comment?: string;
    concurrentClients?: string;
    keyName?: string;
    mpskSchedules: string[];
    passphrases: string[];
}

export interface WirelesscontrollerVapPortalMessageOverrides {
    authDisclaimerPage?: string;
    authLoginFailedPage?: string;
    authLoginPage?: string;
    authRejectPage?: string;
}

export interface WirelesscontrollerVapVlanName {
    name?: string;
    vlanId?: number;
}

export interface WirelesscontrollerVapVlanPool {
    id?: number;
    wtpGroups: string[];
}

export interface WirelesscontrollerWtpLan {
    port1Mode: string;
    port1Ssids: string[];
    port2Mode: string;
    port2Ssids: string[];
    port3Mode: string;
    port3Ssids: string[];
    port4Mode: string;
    port4Ssids: string[];
    port5Mode: string;
    port5Ssids: string[];
    port6Mode: string;
    port6Ssids: string[];
    port7Mode: string;
    port7Ssids: string[];
    port8Mode: string;
    port8Ssids: string[];
    portEslMode: string;
    portEslSsids: string[];
    portMode: string;
    portSsids: string[];
}

export interface WirelesscontrollerWtpRadio1 {
    autoPowerHigh?: number;
    autoPowerLevel?: string;
    autoPowerLow?: number;
    autoPowerTarget: string;
    bands: string[];
    channels: string[];
    drmaManualMode: string;
    overrideAnalysis?: string;
    overrideBand: string;
    overrideChannel: string;
    overrideTxpower: string;
    overrideVaps: string;
    powerLevel?: number;
    powerMode: string;
    powerValue?: number;
    radioId?: number;
    spectrumAnalysis?: string;
    vap1?: string;
    vap2?: string;
    vap3?: string;
    vap4?: string;
    vap5?: string;
    vap6?: string;
    vap7?: string;
    vap8?: string;
    vapAll?: string;
    vaps: string[];
}

export interface WirelesscontrollerWtpRadio2 {
    autoPowerHigh?: number;
    autoPowerLevel?: string;
    autoPowerLow?: number;
    autoPowerTarget: string;
    bands: string[];
    channels: string[];
    drmaManualMode?: string;
    overrideAnalysis?: string;
    overrideBand: string;
    overrideChannel: string;
    overrideTxpower: string;
    overrideVaps: string;
    powerLevel?: number;
    powerMode: string;
    powerValue?: number;
    radioId: number;
    spectrumAnalysis?: string;
    vap1?: string;
    vap2?: string;
    vap3?: string;
    vap4?: string;
    vap5?: string;
    vap6?: string;
    vap7?: string;
    vap8?: string;
    vapAll?: string;
    vaps: string[];
}

export interface WirelesscontrollerWtpRadio3 {
    autoPowerHigh?: number;
    autoPowerLevel?: string;
    autoPowerLow?: number;
    autoPowerTarget: string;
    bands: string[];
    channels: string[];
    drmaManualMode?: string;
    overrideAnalysis?: string;
    overrideBand: string;
    overrideChannel: string;
    overrideTxpower: string;
    overrideVaps: string;
    powerLevel?: number;
    powerMode: string;
    powerValue: number;
    radioId: number;
    spectrumAnalysis?: string;
    vap1?: string;
    vap2?: string;
    vap3?: string;
    vap4?: string;
    vap5?: string;
    vap6?: string;
    vap7?: string;
    vap8?: string;
    vapAll?: string;
    vaps: string[];
}

export interface WirelesscontrollerWtpRadio4 {
    autoPowerHigh?: number;
    autoPowerLevel?: string;
    autoPowerLow?: number;
    autoPowerTarget: string;
    bands: string[];
    channels: string[];
    drmaManualMode?: string;
    overrideAnalysis?: string;
    overrideBand: string;
    overrideChannel: string;
    overrideTxpower: string;
    overrideVaps: string;
    powerLevel?: number;
    powerMode: string;
    powerValue: number;
    radioId: number;
    spectrumAnalysis?: string;
    vap1?: string;
    vap2?: string;
    vap3?: string;
    vap4?: string;
    vap5?: string;
    vap6?: string;
    vap7?: string;
    vap8?: string;
    vapAll?: string;
    vaps: string[];
}

export interface WirelesscontrollerWtpSplitTunnelingAcl {
    destIps: string[];
    id?: number;
}

export interface WirelesscontrollerWtpprofileDenyMacList {
    id?: number;
    mac: string;
}

export interface WirelesscontrollerWtpprofileEslSesDongle {
    apcAddrType: string;
    apcFqdn?: string;
    apcIp: string;
    apcPort?: number;
    coexLevel: string;
    complianceLevel: string;
    eslChannel: string;
    outputPower: string;
    scdEnable: string;
    tlsCertVerification: string;
    tlsFqdnVerification: string;
}

export interface WirelesscontrollerWtpprofileLan {
    port1Mode?: string;
    port1Ssids: string[];
    port2Mode?: string;
    port2Ssids: string[];
    port3Mode?: string;
    port3Ssids: string[];
    port4Mode?: string;
    port4Ssids: string[];
    port5Mode?: string;
    port5Ssids: string[];
    port6Mode?: string;
    port6Ssids: string[];
    port7Mode?: string;
    port7Ssids: string[];
    port8Mode?: string;
    port8Ssids: string[];
    portEslMode?: string;
    portEslSsids: string[];
    portMode?: string;
    portSsids: string[];
}

export interface WirelesscontrollerWtpprofileLbs {
    aeroscout: string;
    aeroscoutApMac?: string;
    aeroscoutMmuReport?: string;
    aeroscoutMu?: string;
    aeroscoutMuFactor?: number;
    aeroscoutMuTimeout?: number;
    aeroscoutServerIp?: string;
    aeroscoutServerPort?: number;
    ekahauBlinkMode: string;
    ekahauTag: string;
    ercServerIp: string;
    ercServerPort: number;
    fortipresence: string;
    fortipresenceBle: string;
    fortipresenceFrequency?: number;
    fortipresencePort?: number;
    fortipresenceProject?: string;
    fortipresenceRogue?: string;
    fortipresenceSecrets: string[];
    fortipresenceServer?: string;
    fortipresenceServerAddrType?: string;
    fortipresenceServerFqdn?: string;
    fortipresenceUnassoc?: string;
    polestar: string;
    polestarAccumulationInterval: number;
    polestarAssetAddrgrpLists: string[];
    polestarAssetUuidList1?: string;
    polestarAssetUuidList2?: string;
    polestarAssetUuidList3?: string;
    polestarAssetUuidList4?: string;
    polestarProtocol: string;
    polestarReportingInterval: number;
    polestarServerFqdn: string;
    polestarServerPath: string;
    polestarServerPort: number;
    polestarServerToken?: string;
    stationLocate: string;
}

export interface WirelesscontrollerWtpprofilePlatform {
    _localPlatformStr?: string;
    ddscan?: string;
    mode?: string;
    type: string;
}

export interface WirelesscontrollerWtpprofileRadio1 {
    airtimeFairness: string;
    amsdu: string;
    apHandoff?: string;
    apSnifferAddr?: string;
    apSnifferBufsize?: number;
    apSnifferChan?: number;
    apSnifferCtl?: string;
    apSnifferData?: string;
    apSnifferMgmtBeacon?: string;
    apSnifferMgmtOther?: string;
    apSnifferMgmtProbe?: string;
    arrpProfiles: string[];
    autoPowerHigh?: number;
    autoPowerLevel: string;
    autoPowerLow?: number;
    autoPowerTarget: string;
    band5gType: string;
    bands: string[];
    bandwidthAdmissionControl: string;
    bandwidthCapacity: number;
    beaconInterval: number;
    bssColor?: number;
    bssColorMode: string;
    callAdmissionControl: string;
    callCapacity: number;
    channelBonding: string;
    channelBondingExt: string;
    channelUtilization: string;
    channels: string[];
    coexistence: string;
    darrp: string;
    drma: string;
    drmaSensitivity: string;
    dtim: number;
    fragThreshold: number;
    frequencyHandoff?: string;
    iperfProtocol?: string;
    iperfServerPort?: number;
    maxClients?: number;
    maxDistance?: number;
    mimoMode?: string;
    mode: string;
    n80211d: string;
    optionalAntenna: string;
    optionalAntennaGain: string;
    powerLevel: number;
    powerMode: string;
    powerValue?: number;
    powersaveOptimizes: string[];
    protectionMode: string;
    radioId?: number;
    rtsThreshold: number;
    samBssid?: string;
    samCaCertificates: string[];
    samCaptivePortal?: string;
    samClientCertificates: string[];
    samCwpFailureString?: string;
    samCwpMatchString?: string;
    samCwpPasswords: string[];
    samCwpSuccessString?: string;
    samCwpTestUrl?: string;
    samCwpUsername?: string;
    samEapMethod: string;
    samPasswords: string[];
    samPrivateKeyPasswords: string[];
    samPrivateKeys: string[];
    samReportIntv?: number;
    samSecurityType?: string;
    samServer?: string;
    samServerFqdn?: string;
    samServerIp?: string;
    samServerType?: string;
    samSsid?: string;
    samTest?: string;
    samUsername?: string;
    shortGuardInterval: string;
    spectrumAnalysis?: string;
    transmitOptimizes: string[];
    vap1?: string;
    vap2?: string;
    vap3?: string;
    vap4?: string;
    vap5?: string;
    vap6?: string;
    vap7?: string;
    vap8?: string;
    vapAll: string;
    vaps: string[];
    widsProfiles: string[];
    zeroWaitDfs: string;
}

export interface WirelesscontrollerWtpprofileRadio2 {
    airtimeFairness: string;
    amsdu: string;
    apHandoff?: string;
    apSnifferAddr?: string;
    apSnifferBufsize?: number;
    apSnifferChan?: number;
    apSnifferCtl?: string;
    apSnifferData?: string;
    apSnifferMgmtBeacon?: string;
    apSnifferMgmtOther?: string;
    apSnifferMgmtProbe?: string;
    arrpProfiles: string[];
    autoPowerHigh?: number;
    autoPowerLevel: string;
    autoPowerLow?: number;
    autoPowerTarget: string;
    band5gType: string;
    bands: string[];
    bandwidthAdmissionControl: string;
    bandwidthCapacity: number;
    beaconInterval: number;
    bssColor?: number;
    bssColorMode: string;
    callAdmissionControl: string;
    callCapacity: number;
    channelBonding: string;
    channelBondingExt: string;
    channelUtilization: string;
    channels: string[];
    coexistence: string;
    darrp: string;
    drma: string;
    drmaSensitivity: string;
    dtim: number;
    fragThreshold: number;
    frequencyHandoff?: string;
    iperfProtocol?: string;
    iperfServerPort?: number;
    maxClients?: number;
    maxDistance?: number;
    mimoMode?: string;
    mode: string;
    n80211d: string;
    optionalAntenna: string;
    optionalAntennaGain: string;
    powerLevel: number;
    powerMode: string;
    powerValue?: number;
    powersaveOptimizes: string[];
    protectionMode: string;
    radioId: number;
    rtsThreshold: number;
    samBssid?: string;
    samCaCertificates: string[];
    samCaptivePortal?: string;
    samClientCertificates: string[];
    samCwpFailureString?: string;
    samCwpMatchString?: string;
    samCwpPasswords: string[];
    samCwpSuccessString?: string;
    samCwpTestUrl?: string;
    samCwpUsername?: string;
    samEapMethod: string;
    samPasswords: string[];
    samPrivateKeyPasswords: string[];
    samPrivateKeys: string[];
    samReportIntv?: number;
    samSecurityType?: string;
    samServer?: string;
    samServerFqdn?: string;
    samServerIp?: string;
    samServerType?: string;
    samSsid?: string;
    samTest?: string;
    samUsername?: string;
    shortGuardInterval: string;
    spectrumAnalysis?: string;
    transmitOptimizes: string[];
    vap1?: string;
    vap2?: string;
    vap3?: string;
    vap4?: string;
    vap5?: string;
    vap6?: string;
    vap7?: string;
    vap8?: string;
    vapAll: string;
    vaps: string[];
    widsProfiles: string[];
    zeroWaitDfs: string;
}

export interface WirelesscontrollerWtpprofileRadio3 {
    airtimeFairness?: string;
    amsdu?: string;
    apHandoff?: string;
    apSnifferAddr?: string;
    apSnifferBufsize?: number;
    apSnifferChan?: number;
    apSnifferCtl?: string;
    apSnifferData?: string;
    apSnifferMgmtBeacon?: string;
    apSnifferMgmtOther?: string;
    apSnifferMgmtProbe?: string;
    arrpProfiles: string[];
    autoPowerHigh?: number;
    autoPowerLevel?: string;
    autoPowerLow?: number;
    autoPowerTarget?: string;
    band5gType?: string;
    bands: string[];
    bandwidthAdmissionControl?: string;
    bandwidthCapacity?: number;
    beaconInterval?: number;
    bssColor?: number;
    bssColorMode?: string;
    callAdmissionControl?: string;
    callCapacity?: number;
    channelBonding?: string;
    channelBondingExt?: string;
    channelUtilization?: string;
    channels: string[];
    coexistence?: string;
    darrp?: string;
    drma?: string;
    drmaSensitivity?: string;
    dtim?: number;
    fragThreshold?: number;
    frequencyHandoff?: string;
    iperfProtocol?: string;
    iperfServerPort?: number;
    maxClients?: number;
    maxDistance?: number;
    mimoMode?: string;
    mode?: string;
    n80211d?: string;
    optionalAntenna?: string;
    optionalAntennaGain?: string;
    powerLevel?: number;
    powerMode?: string;
    powerValue?: number;
    powersaveOptimizes: string[];
    protectionMode?: string;
    radioId?: number;
    rtsThreshold?: number;
    samBssid?: string;
    samCaCertificates: string[];
    samCaptivePortal?: string;
    samClientCertificates: string[];
    samCwpFailureString?: string;
    samCwpMatchString?: string;
    samCwpPasswords: string[];
    samCwpSuccessString?: string;
    samCwpTestUrl?: string;
    samCwpUsername?: string;
    samEapMethod?: string;
    samPasswords: string[];
    samPrivateKeyPasswords: string[];
    samPrivateKeys: string[];
    samReportIntv?: number;
    samSecurityType?: string;
    samServer?: string;
    samServerFqdn?: string;
    samServerIp?: string;
    samServerType?: string;
    samSsid?: string;
    samTest?: string;
    samUsername?: string;
    shortGuardInterval?: string;
    spectrumAnalysis?: string;
    transmitOptimizes: string[];
    vap1?: string;
    vap2?: string;
    vap3?: string;
    vap4?: string;
    vap5?: string;
    vap6?: string;
    vap7?: string;
    vap8?: string;
    vapAll?: string;
    vaps: string[];
    widsProfiles: string[];
    zeroWaitDfs?: string;
}

export interface WirelesscontrollerWtpprofileRadio4 {
    airtimeFairness?: string;
    amsdu?: string;
    apHandoff?: string;
    apSnifferAddr?: string;
    apSnifferBufsize?: number;
    apSnifferChan?: number;
    apSnifferCtl?: string;
    apSnifferData?: string;
    apSnifferMgmtBeacon?: string;
    apSnifferMgmtOther?: string;
    apSnifferMgmtProbe?: string;
    arrpProfiles: string[];
    autoPowerHigh?: number;
    autoPowerLevel?: string;
    autoPowerLow?: number;
    autoPowerTarget?: string;
    band5gType?: string;
    bands: string[];
    bandwidthAdmissionControl?: string;
    bandwidthCapacity?: number;
    beaconInterval?: number;
    bssColor?: number;
    bssColorMode?: string;
    callAdmissionControl?: string;
    callCapacity?: number;
    channelBonding?: string;
    channelBondingExt?: string;
    channelUtilization?: string;
    channels: string[];
    coexistence?: string;
    darrp?: string;
    drma?: string;
    drmaSensitivity?: string;
    dtim?: number;
    fragThreshold?: number;
    frequencyHandoff?: string;
    iperfProtocol?: string;
    iperfServerPort?: number;
    maxClients?: number;
    maxDistance?: number;
    mimoMode?: string;
    mode?: string;
    n80211d?: string;
    optionalAntenna?: string;
    optionalAntennaGain?: string;
    powerLevel?: number;
    powerMode?: string;
    powerValue?: number;
    powersaveOptimizes: string[];
    protectionMode?: string;
    radioId?: number;
    rtsThreshold?: number;
    samBssid?: string;
    samCaCertificates: string[];
    samCaptivePortal?: string;
    samClientCertificates: string[];
    samCwpFailureString?: string;
    samCwpMatchString?: string;
    samCwpPasswords: string[];
    samCwpSuccessString?: string;
    samCwpTestUrl?: string;
    samCwpUsername?: string;
    samEapMethod?: string;
    samPasswords: string[];
    samPrivateKeyPasswords: string[];
    samPrivateKeys: string[];
    samReportIntv?: number;
    samSecurityType?: string;
    samServer?: string;
    samServerFqdn?: string;
    samServerIp?: string;
    samServerType?: string;
    samSsid?: string;
    samTest?: string;
    samUsername?: string;
    shortGuardInterval?: string;
    spectrumAnalysis?: string;
    transmitOptimizes: string[];
    vap1?: string;
    vap2?: string;
    vap3?: string;
    vap4?: string;
    vap5?: string;
    vap6?: string;
    vap7?: string;
    vap8?: string;
    vapAll?: string;
    vaps: string[];
    widsProfiles: string[];
    zeroWaitDfs?: string;
}

export interface WirelesscontrollerWtpprofileSplitTunnelingAcl {
    destIps: string[];
    id?: number;
}

