// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface DlpExactdatamatchColumn {
    index?: pulumi.Input<number>;
    optional?: pulumi.Input<string>;
    types?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ExtendercontrollerExtenderControllerReport {
    interval?: pulumi.Input<number>;
    signalThreshold?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface ExtendercontrollerExtenderModem1 {
    _simProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    autoSwitch?: pulumi.Input<inputs.ExtendercontrollerExtenderModem1AutoSwitch>;
    connStatus?: pulumi.Input<number>;
    defaultSim?: pulumi.Input<string>;
    gps?: pulumi.Input<string>;
    ifnames?: pulumi.Input<pulumi.Input<string>[]>;
    modemId?: pulumi.Input<number>;
    preferredCarrier?: pulumi.Input<string>;
    redundantIntf?: pulumi.Input<string>;
    redundantMode?: pulumi.Input<string>;
    sim1Pin?: pulumi.Input<string>;
    sim1PinCodes?: pulumi.Input<pulumi.Input<string>[]>;
    sim2Pin?: pulumi.Input<string>;
    sim2PinCodes?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
}

export interface ExtendercontrollerExtenderModem1AutoSwitch {
    dataplan?: pulumi.Input<string>;
    disconnect?: pulumi.Input<string>;
    disconnectPeriod?: pulumi.Input<number>;
    disconnectThreshold?: pulumi.Input<number>;
    signal?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    switchBackTime?: pulumi.Input<string>;
    switchBackTimer?: pulumi.Input<number>;
    switchBacks?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ExtendercontrollerExtenderModem2 {
    _simProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    autoSwitch?: pulumi.Input<inputs.ExtendercontrollerExtenderModem2AutoSwitch>;
    connStatus?: pulumi.Input<number>;
    defaultSim?: pulumi.Input<string>;
    gps?: pulumi.Input<string>;
    ifnames?: pulumi.Input<pulumi.Input<string>[]>;
    modemId?: pulumi.Input<number>;
    preferredCarrier?: pulumi.Input<string>;
    redundantIntf?: pulumi.Input<string>;
    redundantMode?: pulumi.Input<string>;
    sim1Pin?: pulumi.Input<string>;
    sim1PinCodes?: pulumi.Input<pulumi.Input<string>[]>;
    sim2Pin?: pulumi.Input<string>;
    sim2PinCodes?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
}

export interface ExtendercontrollerExtenderModem2AutoSwitch {
    dataplan?: pulumi.Input<string>;
    disconnect?: pulumi.Input<string>;
    disconnectPeriod?: pulumi.Input<number>;
    disconnectThreshold?: pulumi.Input<number>;
    signal?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    switchBackTime?: pulumi.Input<string>;
    switchBackTimer?: pulumi.Input<number>;
    switchBacks?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ExtendercontrollerExtenderWanExtension {
    modem1Extensions?: pulumi.Input<pulumi.Input<string>[]>;
    modem2Extensions?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ExtensioncontrollerExtenderWanExtension {
    modem1Extensions?: pulumi.Input<pulumi.Input<string>[]>;
    modem2Extensions?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ExtensioncontrollerFortigateprofileLanExtension {
    backhaulInterfaces?: pulumi.Input<pulumi.Input<string>[]>;
    backhaulIp?: pulumi.Input<string>;
    ipsecTunnel?: pulumi.Input<string>;
}

export interface FirewallInternetservicedefinitionEntry {
    categoryId?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    portRanges?: pulumi.Input<pulumi.Input<inputs.FirewallInternetservicedefinitionEntryPortRange>[]>;
    protocol?: pulumi.Input<number>;
    seqNum?: pulumi.Input<number>;
}

export interface FirewallInternetservicedefinitionEntryPortRange {
    endPort?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface FirewallInternetserviceextensionDisableEntry {
    addrMode?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip6Ranges?: pulumi.Input<pulumi.Input<inputs.FirewallInternetserviceextensionDisableEntryIp6Range>[]>;
    ipRanges?: pulumi.Input<pulumi.Input<inputs.FirewallInternetserviceextensionDisableEntryIpRange>[]>;
    portRanges?: pulumi.Input<pulumi.Input<inputs.FirewallInternetserviceextensionDisableEntryPortRange>[]>;
    protocol?: pulumi.Input<number>;
}

export interface FirewallInternetserviceextensionDisableEntryIp6Range {
    endIp6?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    startIp6?: pulumi.Input<string>;
}

export interface FirewallInternetserviceextensionDisableEntryIpRange {
    endIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    startIp?: pulumi.Input<string>;
}

export interface FirewallInternetserviceextensionDisableEntryPortRange {
    endPort?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface FirewallInternetserviceextensionEntry {
    addrMode?: pulumi.Input<string>;
    dst6s?: pulumi.Input<pulumi.Input<string>[]>;
    dsts?: pulumi.Input<pulumi.Input<string>[]>;
    id?: pulumi.Input<number>;
    portRanges?: pulumi.Input<pulumi.Input<inputs.FirewallInternetserviceextensionEntryPortRange>[]>;
    protocol?: pulumi.Input<number>;
}

export interface FirewallInternetserviceextensionEntryPortRange {
    endPort?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface FirewallSnifferAnomaly {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
    quarantineExpiry?: pulumi.Input<string>;
    quarantineLog?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    synproxyTcpMss?: pulumi.Input<string>;
    synproxyTcpSack?: pulumi.Input<string>;
    synproxyTcpTimestamp?: pulumi.Input<string>;
    synproxyTcpWindow?: pulumi.Input<string>;
    synproxyTcpWindowscale?: pulumi.Input<string>;
    synproxyTos?: pulumi.Input<string>;
    synproxyTtl?: pulumi.Input<string>;
    threshold?: pulumi.Input<number>;
    thresholddefault?: pulumi.Input<number>;
}

export interface IcapServergroupServerList {
    names?: pulumi.Input<pulumi.Input<string>[]>;
    weight?: pulumi.Input<number>;
}

export interface IpsDecoderParameter {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface IpsGlobalTlsActiveProbe {
    interfaceSelectMethod?: pulumi.Input<string>;
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    sourceIp?: pulumi.Input<string>;
    sourceIp6?: pulumi.Input<string>;
    vdoms?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface LogDiskFilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LogFortianalyzer2OverridefilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LogFortianalyzer3OverridefilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LogFortianalyzercloudOverridefilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LogFortiguardFilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LogFortiguardOverridefilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LogMemoryFilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LogNulldeviceFilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LogSyslogd2FilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LogSyslogd2OverridefilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LogSyslogd2OverridesettingCustomFieldName {
    custom?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface LogSyslogd2SettingCustomFieldName {
    custom?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface LogSyslogd3FilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LogSyslogd3OverridefilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LogSyslogd3OverridesettingCustomFieldName {
    custom?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface LogSyslogd3SettingCustomFieldName {
    custom?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface LogSyslogd4FilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LogSyslogd4OverridefilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LogSyslogd4OverridesettingCustomFieldName {
    custom?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface LogSyslogd4SettingCustomFieldName {
    custom?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface LogSyslogdFilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface LogSyslogdSettingCustomFieldName {
    custom?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface LogWebtrendsFilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface NsxtServicechainServiceIndex {
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    reverseIndex?: pulumi.Input<number>;
    vds?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ReportLayoutBodyItem {
    chartOptions?: pulumi.Input<pulumi.Input<string>[]>;
    charts?: pulumi.Input<pulumi.Input<string>[]>;
    column?: pulumi.Input<number>;
    content?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    drillDownItems?: pulumi.Input<string>;
    drillDownTypes?: pulumi.Input<string>;
    hide?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    imgSrc?: pulumi.Input<string>;
    listComponent?: pulumi.Input<string>;
    lists?: pulumi.Input<pulumi.Input<inputs.ReportLayoutBodyItemList>[]>;
    miscComponent?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<inputs.ReportLayoutBodyItemParameter>[]>;
    styles?: pulumi.Input<pulumi.Input<string>[]>;
    tableCaptionStyles?: pulumi.Input<pulumi.Input<string>[]>;
    tableColumnWidths?: pulumi.Input<string>;
    tableEvenRowStyles?: pulumi.Input<pulumi.Input<string>[]>;
    tableHeadStyles?: pulumi.Input<pulumi.Input<string>[]>;
    tableOddRowStyles?: pulumi.Input<pulumi.Input<string>[]>;
    textComponent?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
    topN?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
}

export interface ReportLayoutBodyItemList {
    content?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface ReportLayoutBodyItemParameter {
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ReportLayoutBodyitemList {
    content?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface ReportLayoutBodyitemParameter {
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ReportLayoutPage {
    columnBreakBefores?: pulumi.Input<pulumi.Input<string>[]>;
    footer?: pulumi.Input<inputs.ReportLayoutPageFooter>;
    header?: pulumi.Input<inputs.ReportLayoutPageHeader>;
    options?: pulumi.Input<pulumi.Input<string>[]>;
    pageBreakBefores?: pulumi.Input<pulumi.Input<string>[]>;
    paper?: pulumi.Input<string>;
}

export interface ReportLayoutPageFooter {
    footerItems?: pulumi.Input<pulumi.Input<inputs.ReportLayoutPageFooterFooterItem>[]>;
    styles?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ReportLayoutPageFooterFooterItem {
    content?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    imgSrc?: pulumi.Input<string>;
    styles?: pulumi.Input<pulumi.Input<string>[]>;
    type?: pulumi.Input<string>;
}

export interface ReportLayoutPageHeader {
    headerItems?: pulumi.Input<pulumi.Input<inputs.ReportLayoutPageHeaderHeaderItem>[]>;
    styles?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ReportLayoutPageHeaderHeaderItem {
    content?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    imgSrc?: pulumi.Input<string>;
    styles?: pulumi.Input<pulumi.Input<string>[]>;
    type?: pulumi.Input<string>;
}

export interface RouterBfd6MultihopTemplate {
    authMode?: pulumi.Input<string>;
    bfdDesiredMinTx?: pulumi.Input<number>;
    bfdDetectMult?: pulumi.Input<number>;
    bfdRequiredMinRx?: pulumi.Input<number>;
    dst?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    md5Keys?: pulumi.Input<pulumi.Input<string>[]>;
    src?: pulumi.Input<string>;
}

export interface RouterBfd6Neighbor {
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    ip6Address?: pulumi.Input<string>;
}

export interface RouterBfdMultihopTemplate {
    authMode?: pulumi.Input<string>;
    bfdDesiredMinTx?: pulumi.Input<number>;
    bfdDetectMult?: pulumi.Input<number>;
    bfdRequiredMinRx?: pulumi.Input<number>;
    dsts?: pulumi.Input<pulumi.Input<string>[]>;
    id?: pulumi.Input<number>;
    md5Keys?: pulumi.Input<pulumi.Input<string>[]>;
    srcs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RouterBfdNeighbor {
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    ip?: pulumi.Input<string>;
}

export interface RouterBgpAdminDistance {
    distance?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    neighbourPrefixes?: pulumi.Input<pulumi.Input<string>[]>;
    routeLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RouterBgpAggregateAddress {
    asSet?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    prefixes?: pulumi.Input<pulumi.Input<string>[]>;
    summaryOnly?: pulumi.Input<string>;
}

export interface RouterBgpAggregateAddress6 {
    asSet?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    prefix6?: pulumi.Input<string>;
    summaryOnly?: pulumi.Input<string>;
}

export interface RouterBgpNeighbor {
    activate?: pulumi.Input<string>;
    activate6?: pulumi.Input<string>;
    activateEvpn?: pulumi.Input<string>;
    activateVpnv4?: pulumi.Input<string>;
    activateVpnv6?: pulumi.Input<string>;
    additionalPath?: pulumi.Input<string>;
    additionalPath6?: pulumi.Input<string>;
    additionalPathVpnv4?: pulumi.Input<string>;
    additionalPathVpnv6?: pulumi.Input<string>;
    advAdditionalPath?: pulumi.Input<number>;
    advAdditionalPath6?: pulumi.Input<number>;
    advAdditionalPathVpnv4?: pulumi.Input<number>;
    advAdditionalPathVpnv6?: pulumi.Input<number>;
    advertisementInterval?: pulumi.Input<number>;
    allowasIn?: pulumi.Input<number>;
    allowasIn6?: pulumi.Input<number>;
    allowasInEnable?: pulumi.Input<string>;
    allowasInEnable6?: pulumi.Input<string>;
    allowasInEnableEvpn?: pulumi.Input<string>;
    allowasInEnableVpnv4?: pulumi.Input<string>;
    allowasInEnableVpnv6?: pulumi.Input<string>;
    allowasInEvpn?: pulumi.Input<number>;
    allowasInVpnv4?: pulumi.Input<number>;
    allowasInVpnv6?: pulumi.Input<number>;
    asOverride?: pulumi.Input<string>;
    asOverride6?: pulumi.Input<string>;
    attributeUnchanged6s?: pulumi.Input<pulumi.Input<string>[]>;
    attributeUnchangedVpnv4s?: pulumi.Input<pulumi.Input<string>[]>;
    attributeUnchangedVpnv6s?: pulumi.Input<pulumi.Input<string>[]>;
    attributeUnchangeds?: pulumi.Input<pulumi.Input<string>[]>;
    authOptions?: pulumi.Input<pulumi.Input<string>[]>;
    bfd?: pulumi.Input<string>;
    capabilityDefaultOriginate?: pulumi.Input<string>;
    capabilityDefaultOriginate6?: pulumi.Input<string>;
    capabilityDynamic?: pulumi.Input<string>;
    capabilityGracefulRestart?: pulumi.Input<string>;
    capabilityGracefulRestart6?: pulumi.Input<string>;
    capabilityGracefulRestartEvpn?: pulumi.Input<string>;
    capabilityGracefulRestartVpnv4?: pulumi.Input<string>;
    capabilityGracefulRestartVpnv6?: pulumi.Input<string>;
    capabilityOrf?: pulumi.Input<string>;
    capabilityOrf6?: pulumi.Input<string>;
    capabilityRouteRefresh?: pulumi.Input<string>;
    conditionalAdvertise6s?: pulumi.Input<pulumi.Input<inputs.RouterBgpNeighborConditionalAdvertise6>[]>;
    conditionalAdvertises?: pulumi.Input<pulumi.Input<inputs.RouterBgpNeighborConditionalAdvertise>[]>;
    connectTimer?: pulumi.Input<number>;
    defaultOriginateRoutemap6s?: pulumi.Input<pulumi.Input<string>[]>;
    defaultOriginateRoutemaps?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    distributeListIn6s?: pulumi.Input<pulumi.Input<string>[]>;
    distributeListInVpnv4s?: pulumi.Input<pulumi.Input<string>[]>;
    distributeListInVpnv6s?: pulumi.Input<pulumi.Input<string>[]>;
    distributeListIns?: pulumi.Input<pulumi.Input<string>[]>;
    distributeListOut6s?: pulumi.Input<pulumi.Input<string>[]>;
    distributeListOutVpnv4s?: pulumi.Input<pulumi.Input<string>[]>;
    distributeListOutVpnv6s?: pulumi.Input<pulumi.Input<string>[]>;
    distributeListOuts?: pulumi.Input<pulumi.Input<string>[]>;
    dontCapabilityNegotiate?: pulumi.Input<string>;
    ebgpEnforceMultihop?: pulumi.Input<string>;
    ebgpMultihopTtl?: pulumi.Input<number>;
    filterListIn6s?: pulumi.Input<pulumi.Input<string>[]>;
    filterListInVpnv4s?: pulumi.Input<pulumi.Input<string>[]>;
    filterListInVpnv6s?: pulumi.Input<pulumi.Input<string>[]>;
    filterListIns?: pulumi.Input<pulumi.Input<string>[]>;
    filterListOut6s?: pulumi.Input<pulumi.Input<string>[]>;
    filterListOutVpnv4s?: pulumi.Input<pulumi.Input<string>[]>;
    filterListOutVpnv6s?: pulumi.Input<pulumi.Input<string>[]>;
    filterListOuts?: pulumi.Input<pulumi.Input<string>[]>;
    holdtimeTimer?: pulumi.Input<number>;
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    ip?: pulumi.Input<string>;
    keepAliveTimer?: pulumi.Input<number>;
    linkDownFailover?: pulumi.Input<string>;
    localAs?: pulumi.Input<number>;
    localAsNoPrepend?: pulumi.Input<string>;
    localAsReplaceAs?: pulumi.Input<string>;
    maximumPrefix?: pulumi.Input<number>;
    maximumPrefix6?: pulumi.Input<number>;
    maximumPrefixEvpn?: pulumi.Input<number>;
    maximumPrefixThreshold?: pulumi.Input<number>;
    maximumPrefixThreshold6?: pulumi.Input<number>;
    maximumPrefixThresholdEvpn?: pulumi.Input<number>;
    maximumPrefixThresholdVpnv4?: pulumi.Input<number>;
    maximumPrefixThresholdVpnv6?: pulumi.Input<number>;
    maximumPrefixVpnv4?: pulumi.Input<number>;
    maximumPrefixVpnv6?: pulumi.Input<number>;
    maximumPrefixWarningOnly?: pulumi.Input<string>;
    maximumPrefixWarningOnly6?: pulumi.Input<string>;
    maximumPrefixWarningOnlyEvpn?: pulumi.Input<string>;
    maximumPrefixWarningOnlyVpnv4?: pulumi.Input<string>;
    maximumPrefixWarningOnlyVpnv6?: pulumi.Input<string>;
    nextHopSelf?: pulumi.Input<string>;
    nextHopSelf6?: pulumi.Input<string>;
    nextHopSelfRr?: pulumi.Input<string>;
    nextHopSelfRr6?: pulumi.Input<string>;
    nextHopSelfVpnv4?: pulumi.Input<string>;
    nextHopSelfVpnv6?: pulumi.Input<string>;
    overrideCapability?: pulumi.Input<string>;
    passive?: pulumi.Input<string>;
    passwords?: pulumi.Input<pulumi.Input<string>[]>;
    prefixListIn6s?: pulumi.Input<pulumi.Input<string>[]>;
    prefixListInVpnv4s?: pulumi.Input<pulumi.Input<string>[]>;
    prefixListInVpnv6s?: pulumi.Input<pulumi.Input<string>[]>;
    prefixListIns?: pulumi.Input<pulumi.Input<string>[]>;
    prefixListOut6s?: pulumi.Input<pulumi.Input<string>[]>;
    prefixListOutVpnv4s?: pulumi.Input<pulumi.Input<string>[]>;
    prefixListOutVpnv6s?: pulumi.Input<pulumi.Input<string>[]>;
    prefixListOuts?: pulumi.Input<pulumi.Input<string>[]>;
    remoteAs?: pulumi.Input<number>;
    removePrivateAs?: pulumi.Input<string>;
    removePrivateAs6?: pulumi.Input<string>;
    removePrivateAsEvpn?: pulumi.Input<string>;
    removePrivateAsVpnv4?: pulumi.Input<string>;
    removePrivateAsVpnv6?: pulumi.Input<string>;
    restartTime?: pulumi.Input<number>;
    retainStaleTime?: pulumi.Input<number>;
    routeMapIn6s?: pulumi.Input<pulumi.Input<string>[]>;
    routeMapInEvpns?: pulumi.Input<pulumi.Input<string>[]>;
    routeMapInVpnv4s?: pulumi.Input<pulumi.Input<string>[]>;
    routeMapInVpnv6s?: pulumi.Input<pulumi.Input<string>[]>;
    routeMapIns?: pulumi.Input<pulumi.Input<string>[]>;
    routeMapOut6Preferables?: pulumi.Input<pulumi.Input<string>[]>;
    routeMapOut6s?: pulumi.Input<pulumi.Input<string>[]>;
    routeMapOutEvpns?: pulumi.Input<pulumi.Input<string>[]>;
    routeMapOutPreferables?: pulumi.Input<pulumi.Input<string>[]>;
    routeMapOutVpnv4Preferables?: pulumi.Input<pulumi.Input<string>[]>;
    routeMapOutVpnv4s?: pulumi.Input<pulumi.Input<string>[]>;
    routeMapOutVpnv6Preferables?: pulumi.Input<pulumi.Input<string>[]>;
    routeMapOutVpnv6s?: pulumi.Input<pulumi.Input<string>[]>;
    routeMapOuts?: pulumi.Input<pulumi.Input<string>[]>;
    routeReflectorClient?: pulumi.Input<string>;
    routeReflectorClient6?: pulumi.Input<string>;
    routeReflectorClientEvpn?: pulumi.Input<string>;
    routeReflectorClientVpnv4?: pulumi.Input<string>;
    routeReflectorClientVpnv6?: pulumi.Input<string>;
    routeServerClient?: pulumi.Input<string>;
    routeServerClient6?: pulumi.Input<string>;
    routeServerClientEvpn?: pulumi.Input<string>;
    routeServerClientVpnv4?: pulumi.Input<string>;
    routeServerClientVpnv6?: pulumi.Input<string>;
    sendCommunity?: pulumi.Input<string>;
    sendCommunity6?: pulumi.Input<string>;
    sendCommunityEvpn?: pulumi.Input<string>;
    sendCommunityVpnv4?: pulumi.Input<string>;
    sendCommunityVpnv6?: pulumi.Input<string>;
    shutdown?: pulumi.Input<string>;
    softReconfiguration?: pulumi.Input<string>;
    softReconfiguration6?: pulumi.Input<string>;
    softReconfigurationEvpn?: pulumi.Input<string>;
    softReconfigurationVpnv4?: pulumi.Input<string>;
    softReconfigurationVpnv6?: pulumi.Input<string>;
    staleRoute?: pulumi.Input<string>;
    strictCapabilityMatch?: pulumi.Input<string>;
    unsuppressMap6s?: pulumi.Input<pulumi.Input<string>[]>;
    unsuppressMaps?: pulumi.Input<pulumi.Input<string>[]>;
    updateSources?: pulumi.Input<pulumi.Input<string>[]>;
    weight?: pulumi.Input<number>;
}

export interface RouterBgpNeighborConditionalAdvertise {
    advertiseRoutemap?: pulumi.Input<string>;
    conditionRoutemaps?: pulumi.Input<pulumi.Input<string>[]>;
    conditionType?: pulumi.Input<string>;
}

export interface RouterBgpNeighborConditionalAdvertise6 {
    advertiseRoutemaps?: pulumi.Input<pulumi.Input<string>[]>;
    conditionRoutemaps?: pulumi.Input<pulumi.Input<string>[]>;
    conditionType?: pulumi.Input<string>;
}

export interface RouterBgpNeighborGroup {
    activate?: pulumi.Input<string>;
    activate6?: pulumi.Input<string>;
    activateEvpn?: pulumi.Input<string>;
    activateVpnv4?: pulumi.Input<string>;
    activateVpnv6?: pulumi.Input<string>;
    additionalPath?: pulumi.Input<string>;
    additionalPath6?: pulumi.Input<string>;
    additionalPathVpnv4?: pulumi.Input<string>;
    additionalPathVpnv6?: pulumi.Input<string>;
    advAdditionalPath?: pulumi.Input<number>;
    advAdditionalPath6?: pulumi.Input<number>;
    advAdditionalPathVpnv4?: pulumi.Input<number>;
    advAdditionalPathVpnv6?: pulumi.Input<number>;
    advertisementInterval?: pulumi.Input<number>;
    allowasIn?: pulumi.Input<number>;
    allowasIn6?: pulumi.Input<number>;
    allowasInEnable?: pulumi.Input<string>;
    allowasInEnable6?: pulumi.Input<string>;
    allowasInEnableEvpn?: pulumi.Input<string>;
    allowasInEnableVpnv4?: pulumi.Input<string>;
    allowasInEnableVpnv6?: pulumi.Input<string>;
    allowasInEvpn?: pulumi.Input<number>;
    allowasInVpnv4?: pulumi.Input<number>;
    allowasInVpnv6?: pulumi.Input<number>;
    asOverride?: pulumi.Input<string>;
    asOverride6?: pulumi.Input<string>;
    attributeUnchanged6s?: pulumi.Input<pulumi.Input<string>[]>;
    attributeUnchangedVpnv4s?: pulumi.Input<pulumi.Input<string>[]>;
    attributeUnchangedVpnv6s?: pulumi.Input<pulumi.Input<string>[]>;
    attributeUnchangeds?: pulumi.Input<pulumi.Input<string>[]>;
    authOptions?: pulumi.Input<pulumi.Input<string>[]>;
    bfd?: pulumi.Input<string>;
    capabilityDefaultOriginate?: pulumi.Input<string>;
    capabilityDefaultOriginate6?: pulumi.Input<string>;
    capabilityDynamic?: pulumi.Input<string>;
    capabilityGracefulRestart?: pulumi.Input<string>;
    capabilityGracefulRestart6?: pulumi.Input<string>;
    capabilityGracefulRestartEvpn?: pulumi.Input<string>;
    capabilityGracefulRestartVpnv4?: pulumi.Input<string>;
    capabilityGracefulRestartVpnv6?: pulumi.Input<string>;
    capabilityOrf?: pulumi.Input<string>;
    capabilityOrf6?: pulumi.Input<string>;
    capabilityRouteRefresh?: pulumi.Input<string>;
    connectTimer?: pulumi.Input<number>;
    defaultOriginateRoutemap6s?: pulumi.Input<pulumi.Input<string>[]>;
    defaultOriginateRoutemaps?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    distributeListIn6s?: pulumi.Input<pulumi.Input<string>[]>;
    distributeListInVpnv4s?: pulumi.Input<pulumi.Input<string>[]>;
    distributeListInVpnv6s?: pulumi.Input<pulumi.Input<string>[]>;
    distributeListIns?: pulumi.Input<pulumi.Input<string>[]>;
    distributeListOut6s?: pulumi.Input<pulumi.Input<string>[]>;
    distributeListOutVpnv4s?: pulumi.Input<pulumi.Input<string>[]>;
    distributeListOutVpnv6s?: pulumi.Input<pulumi.Input<string>[]>;
    distributeListOuts?: pulumi.Input<pulumi.Input<string>[]>;
    dontCapabilityNegotiate?: pulumi.Input<string>;
    ebgpEnforceMultihop?: pulumi.Input<string>;
    ebgpMultihopTtl?: pulumi.Input<number>;
    filterListIn6s?: pulumi.Input<pulumi.Input<string>[]>;
    filterListInVpnv4s?: pulumi.Input<pulumi.Input<string>[]>;
    filterListInVpnv6s?: pulumi.Input<pulumi.Input<string>[]>;
    filterListIns?: pulumi.Input<pulumi.Input<string>[]>;
    filterListOut6s?: pulumi.Input<pulumi.Input<string>[]>;
    filterListOutVpnv4s?: pulumi.Input<pulumi.Input<string>[]>;
    filterListOutVpnv6s?: pulumi.Input<pulumi.Input<string>[]>;
    filterListOuts?: pulumi.Input<pulumi.Input<string>[]>;
    holdtimeTimer?: pulumi.Input<number>;
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    keepAliveTimer?: pulumi.Input<number>;
    linkDownFailover?: pulumi.Input<string>;
    localAs?: pulumi.Input<number>;
    localAsNoPrepend?: pulumi.Input<string>;
    localAsReplaceAs?: pulumi.Input<string>;
    maximumPrefix?: pulumi.Input<number>;
    maximumPrefix6?: pulumi.Input<number>;
    maximumPrefixEvpn?: pulumi.Input<number>;
    maximumPrefixThreshold?: pulumi.Input<number>;
    maximumPrefixThreshold6?: pulumi.Input<number>;
    maximumPrefixThresholdEvpn?: pulumi.Input<number>;
    maximumPrefixThresholdVpnv4?: pulumi.Input<number>;
    maximumPrefixThresholdVpnv6?: pulumi.Input<number>;
    maximumPrefixVpnv4?: pulumi.Input<number>;
    maximumPrefixVpnv6?: pulumi.Input<number>;
    maximumPrefixWarningOnly?: pulumi.Input<string>;
    maximumPrefixWarningOnly6?: pulumi.Input<string>;
    maximumPrefixWarningOnlyEvpn?: pulumi.Input<string>;
    maximumPrefixWarningOnlyVpnv4?: pulumi.Input<string>;
    maximumPrefixWarningOnlyVpnv6?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nextHopSelf?: pulumi.Input<string>;
    nextHopSelf6?: pulumi.Input<string>;
    nextHopSelfRr?: pulumi.Input<string>;
    nextHopSelfRr6?: pulumi.Input<string>;
    nextHopSelfVpnv4?: pulumi.Input<string>;
    nextHopSelfVpnv6?: pulumi.Input<string>;
    overrideCapability?: pulumi.Input<string>;
    passive?: pulumi.Input<string>;
    passwords?: pulumi.Input<pulumi.Input<string>[]>;
    prefixListIn6s?: pulumi.Input<pulumi.Input<string>[]>;
    prefixListInVpnv4s?: pulumi.Input<pulumi.Input<string>[]>;
    prefixListInVpnv6s?: pulumi.Input<pulumi.Input<string>[]>;
    prefixListIns?: pulumi.Input<pulumi.Input<string>[]>;
    prefixListOut6s?: pulumi.Input<pulumi.Input<string>[]>;
    prefixListOutVpnv4s?: pulumi.Input<pulumi.Input<string>[]>;
    prefixListOutVpnv6s?: pulumi.Input<pulumi.Input<string>[]>;
    prefixListOuts?: pulumi.Input<pulumi.Input<string>[]>;
    remoteAs?: pulumi.Input<number>;
    remoteAsFilters?: pulumi.Input<pulumi.Input<string>[]>;
    removePrivateAs?: pulumi.Input<string>;
    removePrivateAs6?: pulumi.Input<string>;
    removePrivateAsEvpn?: pulumi.Input<string>;
    removePrivateAsVpnv4?: pulumi.Input<string>;
    removePrivateAsVpnv6?: pulumi.Input<string>;
    restartTime?: pulumi.Input<number>;
    retainStaleTime?: pulumi.Input<number>;
    routeMapIn6s?: pulumi.Input<pulumi.Input<string>[]>;
    routeMapInEvpns?: pulumi.Input<pulumi.Input<string>[]>;
    routeMapInVpnv4s?: pulumi.Input<pulumi.Input<string>[]>;
    routeMapInVpnv6s?: pulumi.Input<pulumi.Input<string>[]>;
    routeMapIns?: pulumi.Input<pulumi.Input<string>[]>;
    routeMapOut6Preferables?: pulumi.Input<pulumi.Input<string>[]>;
    routeMapOut6s?: pulumi.Input<pulumi.Input<string>[]>;
    routeMapOutEvpns?: pulumi.Input<pulumi.Input<string>[]>;
    routeMapOutPreferables?: pulumi.Input<pulumi.Input<string>[]>;
    routeMapOutVpnv4Preferables?: pulumi.Input<pulumi.Input<string>[]>;
    routeMapOutVpnv4s?: pulumi.Input<pulumi.Input<string>[]>;
    routeMapOutVpnv6Preferables?: pulumi.Input<pulumi.Input<string>[]>;
    routeMapOutVpnv6s?: pulumi.Input<pulumi.Input<string>[]>;
    routeMapOuts?: pulumi.Input<pulumi.Input<string>[]>;
    routeReflectorClient?: pulumi.Input<string>;
    routeReflectorClient6?: pulumi.Input<string>;
    routeReflectorClientEvpn?: pulumi.Input<string>;
    routeReflectorClientVpnv4?: pulumi.Input<string>;
    routeReflectorClientVpnv6?: pulumi.Input<string>;
    routeServerClient?: pulumi.Input<string>;
    routeServerClient6?: pulumi.Input<string>;
    routeServerClientEvpn?: pulumi.Input<string>;
    routeServerClientVpnv4?: pulumi.Input<string>;
    routeServerClientVpnv6?: pulumi.Input<string>;
    sendCommunity?: pulumi.Input<string>;
    sendCommunity6?: pulumi.Input<string>;
    sendCommunityEvpn?: pulumi.Input<string>;
    sendCommunityVpnv4?: pulumi.Input<string>;
    sendCommunityVpnv6?: pulumi.Input<string>;
    shutdown?: pulumi.Input<string>;
    softReconfiguration?: pulumi.Input<string>;
    softReconfiguration6?: pulumi.Input<string>;
    softReconfigurationEvpn?: pulumi.Input<string>;
    softReconfigurationVpnv4?: pulumi.Input<string>;
    softReconfigurationVpnv6?: pulumi.Input<string>;
    staleRoute?: pulumi.Input<string>;
    strictCapabilityMatch?: pulumi.Input<string>;
    unsuppressMap6s?: pulumi.Input<pulumi.Input<string>[]>;
    unsuppressMaps?: pulumi.Input<pulumi.Input<string>[]>;
    updateSources?: pulumi.Input<pulumi.Input<string>[]>;
    weight?: pulumi.Input<number>;
}

export interface RouterBgpNeighborRange {
    id?: pulumi.Input<number>;
    maxNeighborNum?: pulumi.Input<number>;
    neighborGroups?: pulumi.Input<pulumi.Input<string>[]>;
    prefixes?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RouterBgpNeighborRange6 {
    id?: pulumi.Input<number>;
    maxNeighborNum?: pulumi.Input<number>;
    neighborGroups?: pulumi.Input<pulumi.Input<string>[]>;
    prefix6?: pulumi.Input<string>;
}

export interface RouterBgpNetwork {
    backdoor?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    networkImportCheck?: pulumi.Input<string>;
    prefixes?: pulumi.Input<pulumi.Input<string>[]>;
    routeMaps?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RouterBgpNetwork6 {
    backdoor?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    networkImportCheck?: pulumi.Input<string>;
    prefix6?: pulumi.Input<string>;
    routeMaps?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RouterBgpRedistribute {
    name?: pulumi.Input<string>;
    routeMaps?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
}

export interface RouterBgpRedistribute6 {
    name?: pulumi.Input<string>;
    routeMaps?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
}

export interface RouterBgpVrf {
    exportRts?: pulumi.Input<pulumi.Input<string>[]>;
    importRouteMaps?: pulumi.Input<pulumi.Input<string>[]>;
    importRts?: pulumi.Input<pulumi.Input<string>[]>;
    leakTargets?: pulumi.Input<pulumi.Input<inputs.RouterBgpVrfLeakTarget>[]>;
    rd?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    vrf?: pulumi.Input<string>;
}

export interface RouterBgpVrf6 {
    exportRts?: pulumi.Input<pulumi.Input<string>[]>;
    importRouteMaps?: pulumi.Input<pulumi.Input<string>[]>;
    importRts?: pulumi.Input<pulumi.Input<string>[]>;
    leakTargets?: pulumi.Input<pulumi.Input<inputs.RouterBgpVrf6LeakTarget>[]>;
    rd?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    vrf?: pulumi.Input<string>;
}

export interface RouterBgpVrf6LeakTarget {
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    routeMaps?: pulumi.Input<pulumi.Input<string>[]>;
    vrf?: pulumi.Input<string>;
}

export interface RouterBgpVrfLeak {
    targets?: pulumi.Input<pulumi.Input<inputs.RouterBgpVrfLeakTarget>[]>;
    vrf?: pulumi.Input<string>;
}

export interface RouterBgpVrfLeak6 {
    targets?: pulumi.Input<pulumi.Input<inputs.RouterBgpVrfLeak6Target>[]>;
    vrf?: pulumi.Input<string>;
}

export interface RouterBgpVrfLeak6Target {
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    routeMaps?: pulumi.Input<pulumi.Input<string>[]>;
    vrf?: pulumi.Input<string>;
}

export interface RouterBgpVrfLeakTarget {
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    routeMaps?: pulumi.Input<pulumi.Input<string>[]>;
    vrf?: pulumi.Input<string>;
}

export interface RouterExtcommunitylistRule {
    action?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    match?: pulumi.Input<string>;
    regexp?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface RouterIsisIsisInterface {
    authKeychainL1s?: pulumi.Input<pulumi.Input<string>[]>;
    authKeychainL2s?: pulumi.Input<pulumi.Input<string>[]>;
    authModeL1?: pulumi.Input<string>;
    authModeL2?: pulumi.Input<string>;
    authPasswordL1s?: pulumi.Input<pulumi.Input<string>[]>;
    authPasswordL2s?: pulumi.Input<pulumi.Input<string>[]>;
    authSendOnlyL1?: pulumi.Input<string>;
    authSendOnlyL2?: pulumi.Input<string>;
    circuitType?: pulumi.Input<string>;
    csnpIntervalL1?: pulumi.Input<number>;
    csnpIntervalL2?: pulumi.Input<number>;
    helloIntervalL1?: pulumi.Input<number>;
    helloIntervalL2?: pulumi.Input<number>;
    helloMultiplierL1?: pulumi.Input<number>;
    helloMultiplierL2?: pulumi.Input<number>;
    helloPadding?: pulumi.Input<string>;
    lspInterval?: pulumi.Input<number>;
    lspRetransmitInterval?: pulumi.Input<number>;
    meshGroup?: pulumi.Input<string>;
    meshGroupId?: pulumi.Input<number>;
    metricL1?: pulumi.Input<number>;
    metricL2?: pulumi.Input<number>;
    names?: pulumi.Input<pulumi.Input<string>[]>;
    networkType?: pulumi.Input<string>;
    priorityL1?: pulumi.Input<number>;
    priorityL2?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    status6?: pulumi.Input<string>;
    wideMetricL1?: pulumi.Input<number>;
    wideMetricL2?: pulumi.Input<number>;
}

export interface RouterIsisIsisNet {
    id?: pulumi.Input<number>;
    net?: pulumi.Input<string>;
}

export interface RouterIsisRedistribute {
    level?: pulumi.Input<string>;
    metric?: pulumi.Input<number>;
    metricType?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    routemaps?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
}

export interface RouterIsisRedistribute6 {
    level?: pulumi.Input<string>;
    metric?: pulumi.Input<number>;
    metricType?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    routemaps?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
}

export interface RouterIsisSummaryAddress {
    id?: pulumi.Input<number>;
    level?: pulumi.Input<string>;
    prefixes?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RouterIsisSummaryAddress6 {
    id?: pulumi.Input<number>;
    level?: pulumi.Input<string>;
    prefix6?: pulumi.Input<string>;
}

export interface RouterKeychainKey {
    acceptLifetime?: pulumi.Input<string>;
    algorithm?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    keyStrings?: pulumi.Input<pulumi.Input<string>[]>;
    sendLifetime?: pulumi.Input<string>;
}

export interface RouterMulticast6Interface {
    helloHoldtime?: pulumi.Input<number>;
    helloInterval?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface RouterMulticast6PimSmGlobal {
    registerRateLimit?: pulumi.Input<number>;
    rpAddresses?: pulumi.Input<pulumi.Input<inputs.RouterMulticast6PimSmGlobalRpAddress>[]>;
}

export interface RouterMulticast6PimSmGlobalRpAddress {
    id?: pulumi.Input<number>;
    ip6Address?: pulumi.Input<string>;
}

export interface RouterMulticast6PimsmglobalRpAddress {
    id?: pulumi.Input<number>;
    ip6Address?: pulumi.Input<string>;
}

export interface RouterMulticastInterface {
    bfd?: pulumi.Input<string>;
    ciscoExcludeGenid?: pulumi.Input<string>;
    drPriority?: pulumi.Input<number>;
    helloHoldtime?: pulumi.Input<number>;
    helloInterval?: pulumi.Input<number>;
    igmp?: pulumi.Input<inputs.RouterMulticastInterfaceIgmp>;
    joinGroups?: pulumi.Input<pulumi.Input<inputs.RouterMulticastInterfaceJoinGroup>[]>;
    multicastFlows?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    neighbourFilters?: pulumi.Input<pulumi.Input<string>[]>;
    passive?: pulumi.Input<string>;
    pimMode?: pulumi.Input<string>;
    propagationDelay?: pulumi.Input<number>;
    rpCandidate?: pulumi.Input<string>;
    rpCandidateGroups?: pulumi.Input<pulumi.Input<string>[]>;
    rpCandidateInterval?: pulumi.Input<number>;
    rpCandidatePriority?: pulumi.Input<number>;
    rpfNbrFailBack?: pulumi.Input<string>;
    rpfNbrFailBackFilters?: pulumi.Input<pulumi.Input<string>[]>;
    stateRefreshInterval?: pulumi.Input<number>;
    staticGroups?: pulumi.Input<pulumi.Input<string>[]>;
    ttlThreshold?: pulumi.Input<number>;
}

export interface RouterMulticastInterfaceIgmp {
    accessGroups?: pulumi.Input<pulumi.Input<string>[]>;
    immediateLeaveGroups?: pulumi.Input<pulumi.Input<string>[]>;
    lastMemberQueryCount?: pulumi.Input<number>;
    lastMemberQueryInterval?: pulumi.Input<number>;
    queryInterval?: pulumi.Input<number>;
    queryMaxResponseTime?: pulumi.Input<number>;
    queryTimeout?: pulumi.Input<number>;
    routerAlertCheck?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

export interface RouterMulticastInterfaceJoinGroup {
    address?: pulumi.Input<string>;
}

export interface RouterMulticastPimSmGlobal {
    acceptRegisterLists?: pulumi.Input<pulumi.Input<string>[]>;
    acceptSourceLists?: pulumi.Input<pulumi.Input<string>[]>;
    bsrAllowQuickRefresh?: pulumi.Input<string>;
    bsrCandidate?: pulumi.Input<string>;
    bsrHash?: pulumi.Input<number>;
    bsrInterfaces?: pulumi.Input<pulumi.Input<string>[]>;
    bsrPriority?: pulumi.Input<number>;
    ciscoCrpPrefix?: pulumi.Input<string>;
    ciscoIgnoreRpSetPriority?: pulumi.Input<string>;
    ciscoRegisterChecksum?: pulumi.Input<string>;
    ciscoRegisterChecksumGroups?: pulumi.Input<pulumi.Input<string>[]>;
    joinPruneHoldtime?: pulumi.Input<number>;
    messageInterval?: pulumi.Input<number>;
    nullRegisterRetries?: pulumi.Input<number>;
    pimUseSdwan?: pulumi.Input<string>;
    registerRateLimit?: pulumi.Input<number>;
    registerRpReachability?: pulumi.Input<string>;
    registerSource?: pulumi.Input<string>;
    registerSourceInterfaces?: pulumi.Input<pulumi.Input<string>[]>;
    registerSourceIp?: pulumi.Input<string>;
    registerSupression?: pulumi.Input<number>;
    rpAddresses?: pulumi.Input<pulumi.Input<inputs.RouterMulticastPimSmGlobalRpAddress>[]>;
    rpRegisterKeepalive?: pulumi.Input<number>;
    sptThreshold?: pulumi.Input<string>;
    sptThresholdGroups?: pulumi.Input<pulumi.Input<string>[]>;
    ssm?: pulumi.Input<string>;
    ssmRanges?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RouterMulticastPimSmGlobalRpAddress {
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    id?: pulumi.Input<number>;
    ipAddress?: pulumi.Input<string>;
}

export interface RouterMulticastPimsmglobalRpAddress {
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    id?: pulumi.Input<number>;
    ipAddress?: pulumi.Input<string>;
}

export interface RouterMulticastflowFlow {
    groupAddr?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    sourceAddr?: pulumi.Input<string>;
}

export interface RouterOspf6Area {
    authentication?: pulumi.Input<string>;
    defaultCost?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    ipsecAuthAlg?: pulumi.Input<string>;
    ipsecEncAlg?: pulumi.Input<string>;
    ipsecKeys?: pulumi.Input<pulumi.Input<inputs.RouterOspf6AreaIpsecKey>[]>;
    keyRolloverInterval?: pulumi.Input<number>;
    nssaDefaultInformationOriginate?: pulumi.Input<string>;
    nssaDefaultInformationOriginateMetric?: pulumi.Input<number>;
    nssaDefaultInformationOriginateMetricType?: pulumi.Input<string>;
    nssaRedistribution?: pulumi.Input<string>;
    nssaTranslatorRole?: pulumi.Input<string>;
    ranges?: pulumi.Input<pulumi.Input<inputs.RouterOspf6AreaRange>[]>;
    stubType?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    virtualLinks?: pulumi.Input<pulumi.Input<inputs.RouterOspf6AreaVirtualLink>[]>;
}

export interface RouterOspf6AreaIpsecKey {
    authKeys?: pulumi.Input<pulumi.Input<string>[]>;
    encKeys?: pulumi.Input<pulumi.Input<string>[]>;
    spi?: pulumi.Input<number>;
}

export interface RouterOspf6AreaRange {
    advertise?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    prefix6?: pulumi.Input<string>;
}

export interface RouterOspf6AreaVirtualLink {
    authentication?: pulumi.Input<string>;
    deadInterval?: pulumi.Input<number>;
    helloInterval?: pulumi.Input<number>;
    ipsecAuthAlg?: pulumi.Input<string>;
    ipsecEncAlg?: pulumi.Input<string>;
    ipsecKeys?: pulumi.Input<pulumi.Input<inputs.RouterOspf6AreaVirtualLinkIpsecKey>[]>;
    keyRolloverInterval?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    peer?: pulumi.Input<string>;
    retransmitInterval?: pulumi.Input<number>;
    transmitDelay?: pulumi.Input<number>;
}

export interface RouterOspf6AreaVirtualLinkIpsecKey {
    authKeys?: pulumi.Input<pulumi.Input<string>[]>;
    encKeys?: pulumi.Input<pulumi.Input<string>[]>;
    spi?: pulumi.Input<number>;
}

export interface RouterOspf6AreaVirtuallinkIpsecKey {
    authKeys?: pulumi.Input<pulumi.Input<string>[]>;
    encKeys?: pulumi.Input<pulumi.Input<string>[]>;
    spi?: pulumi.Input<number>;
}

export interface RouterOspf6Ospf6Interface {
    areaId?: pulumi.Input<string>;
    authentication?: pulumi.Input<string>;
    bfd?: pulumi.Input<string>;
    cost?: pulumi.Input<number>;
    deadInterval?: pulumi.Input<number>;
    helloInterval?: pulumi.Input<number>;
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    ipsecAuthAlg?: pulumi.Input<string>;
    ipsecEncAlg?: pulumi.Input<string>;
    ipsecKeys?: pulumi.Input<pulumi.Input<inputs.RouterOspf6Ospf6InterfaceIpsecKey>[]>;
    keyRolloverInterval?: pulumi.Input<number>;
    mtu?: pulumi.Input<number>;
    mtuIgnore?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    neighbors?: pulumi.Input<pulumi.Input<inputs.RouterOspf6Ospf6InterfaceNeighbor>[]>;
    networkType?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    retransmitInterval?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    transmitDelay?: pulumi.Input<number>;
}

export interface RouterOspf6Ospf6InterfaceIpsecKey {
    authKeys?: pulumi.Input<pulumi.Input<string>[]>;
    encKeys?: pulumi.Input<pulumi.Input<string>[]>;
    spi?: pulumi.Input<number>;
}

export interface RouterOspf6Ospf6InterfaceNeighbor {
    cost?: pulumi.Input<number>;
    ip6?: pulumi.Input<string>;
    pollInterval?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
}

export interface RouterOspf6Ospf6interfaceIpsecKey {
    authKeys?: pulumi.Input<pulumi.Input<string>[]>;
    encKeys?: pulumi.Input<pulumi.Input<string>[]>;
    spi?: pulumi.Input<number>;
}

export interface RouterOspf6Ospf6interfaceNeighbor {
    cost?: pulumi.Input<number>;
    ip6?: pulumi.Input<string>;
    pollInterval?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
}

export interface RouterOspf6Redistribute {
    metric?: pulumi.Input<number>;
    metricType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    routemaps?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
}

export interface RouterOspf6SummaryAddress {
    advertise?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    prefix6?: pulumi.Input<string>;
    tag?: pulumi.Input<number>;
}

export interface RouterOspfArea {
    authentication?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    defaultCost?: pulumi.Input<number>;
    filterLists?: pulumi.Input<pulumi.Input<inputs.RouterOspfAreaFilterList>[]>;
    id?: pulumi.Input<string>;
    nssaDefaultInformationOriginate?: pulumi.Input<string>;
    nssaDefaultInformationOriginateMetric?: pulumi.Input<number>;
    nssaDefaultInformationOriginateMetricType?: pulumi.Input<string>;
    nssaRedistribution?: pulumi.Input<string>;
    nssaTranslatorRole?: pulumi.Input<string>;
    ranges?: pulumi.Input<pulumi.Input<inputs.RouterOspfAreaRange>[]>;
    shortcut?: pulumi.Input<string>;
    stubType?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    virtualLinks?: pulumi.Input<pulumi.Input<inputs.RouterOspfAreaVirtualLink>[]>;
}

export interface RouterOspfAreaFilterList {
    direction?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    lists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RouterOspfAreaRange {
    advertise?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    prefixes?: pulumi.Input<pulumi.Input<string>[]>;
    substituteStatus?: pulumi.Input<string>;
    substitutes?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RouterOspfAreaVirtualLink {
    authentication?: pulumi.Input<string>;
    authenticationKeys?: pulumi.Input<pulumi.Input<string>[]>;
    deadInterval?: pulumi.Input<number>;
    helloInterval?: pulumi.Input<number>;
    keychains?: pulumi.Input<pulumi.Input<string>[]>;
    md5Keychains?: pulumi.Input<pulumi.Input<string>[]>;
    md5Keys?: pulumi.Input<pulumi.Input<inputs.RouterOspfAreaVirtualLinkMd5Key>[]>;
    name?: pulumi.Input<string>;
    peer?: pulumi.Input<string>;
    retransmitInterval?: pulumi.Input<number>;
    transmitDelay?: pulumi.Input<number>;
}

export interface RouterOspfAreaVirtualLinkMd5Key {
    id?: pulumi.Input<number>;
    keyStrings?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RouterOspfAreaVirtuallinkMd5Key {
    id?: pulumi.Input<number>;
    keyStrings?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RouterOspfDistributeList {
    accessLists?: pulumi.Input<pulumi.Input<string>[]>;
    id?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
}

export interface RouterOspfNeighbor {
    cost?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    pollInterval?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
}

export interface RouterOspfNetwork {
    area?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    prefixes?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RouterOspfOspfInterface {
    authentication?: pulumi.Input<string>;
    authenticationKeys?: pulumi.Input<pulumi.Input<string>[]>;
    bfd?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    cost?: pulumi.Input<number>;
    databaseFilterOut?: pulumi.Input<string>;
    deadInterval?: pulumi.Input<number>;
    helloInterval?: pulumi.Input<number>;
    helloMultiplier?: pulumi.Input<number>;
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    ip?: pulumi.Input<string>;
    keychains?: pulumi.Input<pulumi.Input<string>[]>;
    md5Keychains?: pulumi.Input<pulumi.Input<string>[]>;
    md5Keys?: pulumi.Input<pulumi.Input<inputs.RouterOspfOspfInterfaceMd5Key>[]>;
    mtu?: pulumi.Input<number>;
    mtuIgnore?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkType?: pulumi.Input<string>;
    prefixLength?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    resyncTimeout?: pulumi.Input<number>;
    retransmitInterval?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    transmitDelay?: pulumi.Input<number>;
}

export interface RouterOspfOspfInterfaceMd5Key {
    id?: pulumi.Input<number>;
    keyStrings?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RouterOspfOspfinterfaceMd5Key {
    id?: pulumi.Input<number>;
    keyStrings?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RouterOspfRedistribute {
    metric?: pulumi.Input<number>;
    metricType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    routemaps?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    tag?: pulumi.Input<number>;
}

export interface RouterOspfSummaryAddress {
    advertise?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    prefixes?: pulumi.Input<pulumi.Input<string>[]>;
    tag?: pulumi.Input<number>;
}

export interface RouterRipDistance {
    accessLists?: pulumi.Input<pulumi.Input<string>[]>;
    distance?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    prefixes?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RouterRipDistributeList {
    direction?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    listnames?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
}

export interface RouterRipInterface {
    authKeychains?: pulumi.Input<pulumi.Input<string>[]>;
    authMode?: pulumi.Input<string>;
    authStrings?: pulumi.Input<pulumi.Input<string>[]>;
    flags?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    receiveVersions?: pulumi.Input<pulumi.Input<string>[]>;
    sendVersion2Broadcast?: pulumi.Input<string>;
    sendVersions?: pulumi.Input<pulumi.Input<string>[]>;
    splitHorizon?: pulumi.Input<string>;
    splitHorizonStatus?: pulumi.Input<string>;
}

export interface RouterRipNeighbor {
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
}

export interface RouterRipNetwork {
    id?: pulumi.Input<number>;
    prefixes?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RouterRipOffsetList {
    accessLists?: pulumi.Input<pulumi.Input<string>[]>;
    direction?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    offset?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface RouterRipRedistribute {
    metric?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    routemaps?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
}

export interface RouterRipngAggregateAddress {
    id?: pulumi.Input<number>;
    prefix6?: pulumi.Input<string>;
}

export interface RouterRipngDistance {
    accessList6s?: pulumi.Input<pulumi.Input<string>[]>;
    distance?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    prefix6?: pulumi.Input<string>;
}

export interface RouterRipngDistributeList {
    direction?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    listnames?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
}

export interface RouterRipngInterface {
    flags?: pulumi.Input<number>;
    names?: pulumi.Input<pulumi.Input<string>[]>;
    splitHorizon?: pulumi.Input<string>;
    splitHorizonStatus?: pulumi.Input<string>;
}

export interface RouterRipngNeighbor {
    id?: pulumi.Input<number>;
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    ip6?: pulumi.Input<string>;
}

export interface RouterRipngNetwork {
    id?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
}

export interface RouterRipngOffsetList {
    accessList6s?: pulumi.Input<pulumi.Input<string>[]>;
    direction?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    offset?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface RouterRipngRedistribute {
    metric?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    routemaps?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
}

export interface SwitchcontrollerAclIngressAction {
    count?: pulumi.Input<string>;
    drop?: pulumi.Input<string>;
}

export interface SwitchcontrollerAclIngressClassifier {
    dstIpPrefixes?: pulumi.Input<pulumi.Input<string>[]>;
    dstMac?: pulumi.Input<string>;
    srcIpPrefixes?: pulumi.Input<pulumi.Input<string>[]>;
    srcMac?: pulumi.Input<string>;
    vlan?: pulumi.Input<number>;
}

export interface SwitchcontrollerAutoconfigCustomSwitchBinding {
    policies?: pulumi.Input<pulumi.Input<string>[]>;
    switchId?: pulumi.Input<string>;
}

export interface SwitchcontrollerDynamicportpolicyPolicy {
    bouncePortLink?: pulumi.Input<string>;
    category?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    family?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    hwVendor?: pulumi.Input<string>;
    interfaceTags?: pulumi.Input<pulumi.Input<string>[]>;
    lldpProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    mac?: pulumi.Input<string>;
    matchPeriod?: pulumi.Input<number>;
    matchType?: pulumi.Input<string>;
    n8021xes?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    qosPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    vlanPolicies?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SwitchcontrollerFlowtrackingAggregate {
    id?: pulumi.Input<number>;
    ips?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SwitchcontrollerFlowtrackingCollector {
    ip?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    transport?: pulumi.Input<string>;
}

export interface SwitchcontrollerFortilinksettingsNacPorts {
    bounceNacPort?: pulumi.Input<string>;
    lanSegment?: pulumi.Input<string>;
    memberChange?: pulumi.Input<number>;
    nacLanInterfaces?: pulumi.Input<pulumi.Input<string>[]>;
    nacSegmentVlans?: pulumi.Input<pulumi.Input<string>[]>;
    onboardingVlans?: pulumi.Input<pulumi.Input<string>[]>;
    parentKey?: pulumi.Input<string>;
}

export interface SwitchcontrollerGlobalCustomCommand {
    commandEntry?: pulumi.Input<string>;
    commandNames?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SwitchcontrollerLldpprofileCustomTlv {
    informationString?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    oui?: pulumi.Input<string>;
    subtype?: pulumi.Input<number>;
}

export interface SwitchcontrollerLldpprofileMedLocationService {
    name?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    sysLocationIds?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SwitchcontrollerLldpprofileMedNetworkPolicy {
    assignVlan?: pulumi.Input<string>;
    dscp?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    vlan?: pulumi.Input<number>;
    vlanIntfs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SwitchcontrollerLocationAddressCivic {
    additional?: pulumi.Input<string>;
    additionalCode?: pulumi.Input<string>;
    block?: pulumi.Input<string>;
    branchRoad?: pulumi.Input<string>;
    building?: pulumi.Input<string>;
    city?: pulumi.Input<string>;
    cityDivision?: pulumi.Input<string>;
    country?: pulumi.Input<string>;
    countrySubdivision?: pulumi.Input<string>;
    county?: pulumi.Input<string>;
    direction?: pulumi.Input<string>;
    floor?: pulumi.Input<string>;
    landmark?: pulumi.Input<string>;
    language?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    number?: pulumi.Input<string>;
    numberSuffix?: pulumi.Input<string>;
    parentKey?: pulumi.Input<string>;
    placeType?: pulumi.Input<string>;
    postOfficeBox?: pulumi.Input<string>;
    postalCommunity?: pulumi.Input<string>;
    primaryRoad?: pulumi.Input<string>;
    roadSection?: pulumi.Input<string>;
    room?: pulumi.Input<string>;
    script?: pulumi.Input<string>;
    seat?: pulumi.Input<string>;
    street?: pulumi.Input<string>;
    streetNamePostMod?: pulumi.Input<string>;
    streetNamePreMod?: pulumi.Input<string>;
    streetSuffix?: pulumi.Input<string>;
    subBranchRoad?: pulumi.Input<string>;
    trailingStrSuffix?: pulumi.Input<string>;
    unit?: pulumi.Input<string>;
    zip?: pulumi.Input<string>;
}

export interface SwitchcontrollerLocationCoordinates {
    altitude?: pulumi.Input<string>;
    altitudeUnit?: pulumi.Input<string>;
    datum?: pulumi.Input<string>;
    latitude?: pulumi.Input<string>;
    longitude?: pulumi.Input<string>;
    parentKey?: pulumi.Input<string>;
}

export interface SwitchcontrollerLocationElinNumber {
    elinNum?: pulumi.Input<string>;
    parentKey?: pulumi.Input<string>;
}

export interface SwitchcontrollerManagedswitchCustomCommand {
    commandEntry?: pulumi.Input<string>;
    commandNames?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SwitchcontrollerManagedswitchDhcpSnoopingStaticClient {
    ip?: pulumi.Input<string>;
    mac?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    vlans?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SwitchcontrollerManagedswitchIgmpSnooping {
    agingTime?: pulumi.Input<number>;
    floodUnknownMulticast?: pulumi.Input<string>;
    localOverride?: pulumi.Input<string>;
    vlans?: pulumi.Input<pulumi.Input<inputs.SwitchcontrollerManagedswitchIgmpSnoopingVlan>[]>;
}

export interface SwitchcontrollerManagedswitchIgmpSnoopingVlan {
    proxy?: pulumi.Input<string>;
    querier?: pulumi.Input<string>;
    querierAddr?: pulumi.Input<string>;
    version?: pulumi.Input<number>;
    vlanNames?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SwitchcontrollerManagedswitchIgmpsnoopingVlan {
    proxy?: pulumi.Input<string>;
    querier?: pulumi.Input<string>;
    querierAddr?: pulumi.Input<string>;
    version?: pulumi.Input<number>;
    vlanNames?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SwitchcontrollerManagedswitchIpSourceGuard {
    bindingEntries?: pulumi.Input<pulumi.Input<inputs.SwitchcontrollerManagedswitchIpSourceGuardBindingEntry>[]>;
    description?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
}

export interface SwitchcontrollerManagedswitchIpSourceGuardBindingEntry {
    entryName?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    mac?: pulumi.Input<string>;
}

export interface SwitchcontrollerManagedswitchIpsourceguardBindingEntry {
    entryName?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    mac?: pulumi.Input<string>;
}

export interface SwitchcontrollerManagedswitchMirror {
    dst?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    srcEgresses?: pulumi.Input<pulumi.Input<string>[]>;
    srcIngresses?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    switchingPacket?: pulumi.Input<string>;
}

export interface SwitchcontrollerManagedswitchN8021xSettings {
    linkDownAuth?: pulumi.Input<string>;
    localOverride?: pulumi.Input<string>;
    mabReauth?: pulumi.Input<string>;
    macCalledStationDelimiter?: pulumi.Input<string>;
    macCallingStationDelimiter?: pulumi.Input<string>;
    macCase?: pulumi.Input<string>;
    macPasswordDelimiter?: pulumi.Input<string>;
    macUsernameDelimiter?: pulumi.Input<string>;
    maxReauthAttempt?: pulumi.Input<number>;
    reauthPeriod?: pulumi.Input<number>;
    txPeriod?: pulumi.Input<number>;
}

export interface SwitchcontrollerManagedswitchPort {
    accessMode?: pulumi.Input<string>;
    aclGroups?: pulumi.Input<pulumi.Input<string>[]>;
    aggregatorMode?: pulumi.Input<string>;
    allowArpMonitor?: pulumi.Input<string>;
    allowedVlans?: pulumi.Input<pulumi.Input<string>[]>;
    allowedVlansAll?: pulumi.Input<string>;
    arpInspectionTrust?: pulumi.Input<string>;
    authenticatedPort?: pulumi.Input<number>;
    bundle?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dhcpSnoopOption82Overrides?: pulumi.Input<pulumi.Input<inputs.SwitchcontrollerManagedswitchPortDhcpSnoopOption82Override>[]>;
    dhcpSnoopOption82Trust?: pulumi.Input<string>;
    dhcpSnooping?: pulumi.Input<string>;
    discardMode?: pulumi.Input<string>;
    dslProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    edgePort?: pulumi.Input<string>;
    encryptedPort?: pulumi.Input<number>;
    exportTags?: pulumi.Input<pulumi.Input<string>[]>;
    exportToPoolFlag?: pulumi.Input<number>;
    exportToPools?: pulumi.Input<pulumi.Input<string>[]>;
    exportTos?: pulumi.Input<pulumi.Input<string>[]>;
    fallbackPort?: pulumi.Input<string>;
    fecCapable?: pulumi.Input<number>;
    fecState?: pulumi.Input<string>;
    fgtPeerDeviceName?: pulumi.Input<string>;
    fgtPeerPortName?: pulumi.Input<string>;
    fiberPort?: pulumi.Input<number>;
    flags?: pulumi.Input<number>;
    flapDuration?: pulumi.Input<number>;
    flapRate?: pulumi.Input<number>;
    flapTimeout?: pulumi.Input<number>;
    flapguard?: pulumi.Input<string>;
    flowControl?: pulumi.Input<string>;
    fortilinkPort?: pulumi.Input<number>;
    fortiswitchAcls?: pulumi.Input<pulumi.Input<number>[]>;
    igmpSnooping?: pulumi.Input<string>;
    igmpSnoopingFloodReports?: pulumi.Input<string>;
    igmpsFloodReports?: pulumi.Input<string>;
    igmpsFloodTraffic?: pulumi.Input<string>;
    interfaceTags?: pulumi.Input<pulumi.Input<string>[]>;
    ipSourceGuard?: pulumi.Input<string>;
    islLocalTrunkName?: pulumi.Input<string>;
    islPeerDeviceName?: pulumi.Input<string>;
    islPeerDeviceSn?: pulumi.Input<string>;
    islPeerPortName?: pulumi.Input<string>;
    lacpSpeed?: pulumi.Input<string>;
    learningLimit?: pulumi.Input<number>;
    linkStatus?: pulumi.Input<string>;
    lldpProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    lldpStatus?: pulumi.Input<string>;
    loopGuard?: pulumi.Input<string>;
    loopGuardTimeout?: pulumi.Input<number>;
    macAddr?: pulumi.Input<string>;
    matchedDppIntfTags?: pulumi.Input<string>;
    matchedDppPolicy?: pulumi.Input<string>;
    maxBundle?: pulumi.Input<number>;
    mcastSnoopingFloodTraffic?: pulumi.Input<string>;
    mclag?: pulumi.Input<string>;
    mclagIclPort?: pulumi.Input<number>;
    mediaType?: pulumi.Input<string>;
    memberWithdrawalBehavior?: pulumi.Input<string>;
    members?: pulumi.Input<pulumi.Input<string>[]>;
    minBundle?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    p2pPort?: pulumi.Input<number>;
    packetSampleRate?: pulumi.Input<number>;
    packetSampler?: pulumi.Input<string>;
    pauseMeter?: pulumi.Input<number>;
    pauseMeterResume?: pulumi.Input<string>;
    poeCapable?: pulumi.Input<number>;
    poeMaxPower?: pulumi.Input<string>;
    poeModeBtCabable?: pulumi.Input<number>;
    poePortMode?: pulumi.Input<string>;
    poePortPower?: pulumi.Input<string>;
    poePortPriority?: pulumi.Input<string>;
    poePreStandardDetection?: pulumi.Input<string>;
    poeStandard?: pulumi.Input<string>;
    poeStatus?: pulumi.Input<string>;
    portName?: pulumi.Input<string>;
    portNumber?: pulumi.Input<number>;
    portOwner?: pulumi.Input<string>;
    portPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    portPrefixType?: pulumi.Input<number>;
    portSecurityPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    portSelectionCriteria?: pulumi.Input<string>;
    ptpPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    ptpStatus?: pulumi.Input<string>;
    qosPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    restrictedAuthPort?: pulumi.Input<number>;
    rpvstPort?: pulumi.Input<string>;
    sampleDirection?: pulumi.Input<string>;
    sflowCounterInterval?: pulumi.Input<number>;
    speed?: pulumi.Input<string>;
    speedMask?: pulumi.Input<number>;
    stackingPort?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    stickyMac?: pulumi.Input<string>;
    stormControlPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    stpBpduGuard?: pulumi.Input<string>;
    stpBpduGuardTimeout?: pulumi.Input<number>;
    stpRootGuard?: pulumi.Input<string>;
    stpState?: pulumi.Input<string>;
    switchId?: pulumi.Input<string>;
    trunkMember?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
    untaggedVlans?: pulumi.Input<pulumi.Input<string>[]>;
    virtualPort?: pulumi.Input<number>;
    vlans?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SwitchcontrollerManagedswitchPortDhcpSnoopOption82Override {
    circuitId?: pulumi.Input<string>;
    remoteId?: pulumi.Input<string>;
    vlanNames?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SwitchcontrollerManagedswitchRemoteLog {
    csv?: pulumi.Input<string>;
    facility?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    server?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface SwitchcontrollerManagedswitchRouteOffloadRouter {
    routerIp?: pulumi.Input<string>;
    vlanNames?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SwitchcontrollerManagedswitchSnmpCommunity {
    events?: pulumi.Input<pulumi.Input<string>[]>;
    hosts?: pulumi.Input<pulumi.Input<inputs.SwitchcontrollerManagedswitchSnmpCommunityHost>[]>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    queryV1Port?: pulumi.Input<number>;
    queryV1Status?: pulumi.Input<string>;
    queryV2cPort?: pulumi.Input<number>;
    queryV2cStatus?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    trapV1Lport?: pulumi.Input<number>;
    trapV1Rport?: pulumi.Input<number>;
    trapV1Status?: pulumi.Input<string>;
    trapV2cLport?: pulumi.Input<number>;
    trapV2cRport?: pulumi.Input<number>;
    trapV2cStatus?: pulumi.Input<string>;
}

export interface SwitchcontrollerManagedswitchSnmpCommunityHost {
    id?: pulumi.Input<number>;
    ips?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SwitchcontrollerManagedswitchSnmpSysinfo {
    contactInfo?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    engineId?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface SwitchcontrollerManagedswitchSnmpTrapThreshold {
    trapHighCpuThreshold?: pulumi.Input<number>;
    trapLogFullThreshold?: pulumi.Input<number>;
    trapLowMemoryThreshold?: pulumi.Input<number>;
}

export interface SwitchcontrollerManagedswitchSnmpUser {
    authProto?: pulumi.Input<string>;
    authPwds?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    privProto?: pulumi.Input<string>;
    privPwds?: pulumi.Input<pulumi.Input<string>[]>;
    queries?: pulumi.Input<string>;
    queryPort?: pulumi.Input<number>;
    securityLevel?: pulumi.Input<string>;
}

export interface SwitchcontrollerManagedswitchSnmpcommunityHost {
    id?: pulumi.Input<number>;
    ips?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SwitchcontrollerManagedswitchStaticMac {
    description?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    mac?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    vlans?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SwitchcontrollerManagedswitchStormControl {
    broadcast?: pulumi.Input<string>;
    localOverride?: pulumi.Input<string>;
    rate?: pulumi.Input<number>;
    unknownMulticast?: pulumi.Input<string>;
    unknownUnicast?: pulumi.Input<string>;
}

export interface SwitchcontrollerManagedswitchStpInstance {
    id?: pulumi.Input<string>;
    priority?: pulumi.Input<string>;
}

export interface SwitchcontrollerManagedswitchStpSettings {
    forwardTime?: pulumi.Input<number>;
    helloTime?: pulumi.Input<number>;
    localOverride?: pulumi.Input<string>;
    maxAge?: pulumi.Input<number>;
    maxHops?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    pendingTimer?: pulumi.Input<number>;
    revision?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface SwitchcontrollerManagedswitchSwitchLog {
    localOverride?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface SwitchcontrollerManagedswitchVlan {
    assignmentPriority?: pulumi.Input<number>;
    vlanNames?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SwitchcontrollerQosIpdscpmapMap {
    cosQueue?: pulumi.Input<number>;
    diffservs?: pulumi.Input<pulumi.Input<string>[]>;
    ipPrecedences?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface SwitchcontrollerQosQueuepolicyCosQueue {
    description?: pulumi.Input<string>;
    dropPolicy?: pulumi.Input<string>;
    ecn?: pulumi.Input<string>;
    maxRate?: pulumi.Input<number>;
    maxRatePercent?: pulumi.Input<number>;
    minRate?: pulumi.Input<number>;
    minRatePercent?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface SwitchcontrollerSnmpcommunityHost {
    id?: pulumi.Input<number>;
    ips?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SwitchcontrollerTrafficsnifferTargetIp {
    description?: pulumi.Input<string>;
    dstEntryId?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    srcEntryId?: pulumi.Input<number>;
}

export interface SwitchcontrollerTrafficsnifferTargetMac {
    description?: pulumi.Input<string>;
    dstEntryId?: pulumi.Input<number>;
    mac?: pulumi.Input<string>;
    srcEntryId?: pulumi.Input<number>;
}

export interface SwitchcontrollerTrafficsnifferTargetPort {
    description?: pulumi.Input<string>;
    inPorts?: pulumi.Input<pulumi.Input<string>[]>;
    outPorts?: pulumi.Input<pulumi.Input<string>[]>;
    switchIds?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface System5gmodemModem1SimSwitch {
    activeSimSlot?: pulumi.Input<string>;
    byConnectionState?: pulumi.Input<string>;
    byLinkMonitor?: pulumi.Input<string>;
    bySimState?: pulumi.Input<string>;
    linkMonitor?: pulumi.Input<string>;
    modemDisconnectionTime?: pulumi.Input<number>;
    simSwitchLogAlertInterval?: pulumi.Input<number>;
    simSwitchLogAlertThreshold?: pulumi.Input<number>;
}

export interface SystemAccprofileFwgrpPermission {
    address?: pulumi.Input<string>;
    others?: pulumi.Input<string>;
    policy?: pulumi.Input<string>;
    schedule?: pulumi.Input<string>;
    service?: pulumi.Input<string>;
}

export interface SystemAccprofileLoggrpPermission {
    config?: pulumi.Input<string>;
    dataAccess?: pulumi.Input<string>;
    reportAccess?: pulumi.Input<string>;
    threatWeight?: pulumi.Input<string>;
}

export interface SystemAccprofileNetgrpPermission {
    cfg?: pulumi.Input<string>;
    packetCapture?: pulumi.Input<string>;
    routeCfg?: pulumi.Input<string>;
}

export interface SystemAccprofileSysgrpPermission {
    admin?: pulumi.Input<string>;
    cfg?: pulumi.Input<string>;
    mnt?: pulumi.Input<string>;
    upd?: pulumi.Input<string>;
}

export interface SystemAccprofileUtmgrpPermission {
    antivirus?: pulumi.Input<string>;
    applicationControl?: pulumi.Input<string>;
    casb?: pulumi.Input<string>;
    dataLeakPrevention?: pulumi.Input<string>;
    dataLossPrevention?: pulumi.Input<string>;
    dlp?: pulumi.Input<string>;
    dnsfilter?: pulumi.Input<string>;
    emailfilter?: pulumi.Input<string>;
    endpointControl?: pulumi.Input<string>;
    fileFilter?: pulumi.Input<string>;
    icap?: pulumi.Input<string>;
    ips?: pulumi.Input<string>;
    mmsgtp?: pulumi.Input<string>;
    videofilter?: pulumi.Input<string>;
    virtualPatch?: pulumi.Input<string>;
    voip?: pulumi.Input<string>;
    waf?: pulumi.Input<string>;
    webfilter?: pulumi.Input<string>;
}

export interface SystemAcmeAccount {
    caUrl?: pulumi.Input<string>;
    email?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    privatekey?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
}

export interface SystemApiuserTrusthost {
    id?: pulumi.Input<number>;
    ipv4Trusthosts?: pulumi.Input<pulumi.Input<string>[]>;
    ipv6Trusthost?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface SystemAutomationactionHttpHeader {
    id?: pulumi.Input<number>;
    key?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface SystemAutomationstitchAction {
    actions?: pulumi.Input<pulumi.Input<string>[]>;
    delay?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    required?: pulumi.Input<string>;
}

export interface SystemAutomationtriggerField {
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface SystemCentralmanagementServerList {
    addrType?: pulumi.Input<string>;
    fqdn?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    serverAddress?: pulumi.Input<string>;
    serverAddress6?: pulumi.Input<string>;
    serverTypes?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SystemClustersyncSessionSyncFilter {
    customServices?: pulumi.Input<pulumi.Input<inputs.SystemClustersyncSessionSyncFilterCustomService>[]>;
    dstaddr6?: pulumi.Input<string>;
    dstaddrs?: pulumi.Input<pulumi.Input<string>[]>;
    dstintfs?: pulumi.Input<pulumi.Input<string>[]>;
    srcaddr6?: pulumi.Input<string>;
    srcaddrs?: pulumi.Input<pulumi.Input<string>[]>;
    srcintf?: pulumi.Input<string>;
}

export interface SystemClustersyncSessionSyncFilterCustomService {
    dstPortRange?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    srcPortRange?: pulumi.Input<string>;
}

export interface SystemClustersyncSessionsyncfilterCustomService {
    dstPortRange?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    srcPortRange?: pulumi.Input<string>;
}

export interface SystemCsfFabricConnector {
    accprofiles?: pulumi.Input<pulumi.Input<string>[]>;
    configurationWriteAccess?: pulumi.Input<string>;
    serial?: pulumi.Input<string>;
    vdoms?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SystemCsfFabricDevice {
    accessTokens?: pulumi.Input<pulumi.Input<string>[]>;
    deviceIp?: pulumi.Input<string>;
    httpsPort?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface SystemCsfTrustedList {
    action?: pulumi.Input<string>;
    authorizationType?: pulumi.Input<string>;
    certificate?: pulumi.Input<string>;
    downstreamAuthorization?: pulumi.Input<string>;
    haMembers?: pulumi.Input<pulumi.Input<string>[]>;
    index?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    serial?: pulumi.Input<string>;
}

export interface SystemDeviceupgradeKnownHaMember {
    serial?: pulumi.Input<string>;
}

export interface SystemDhcp6ServerIpRange {
    endIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    startIp?: pulumi.Input<string>;
}

export interface SystemDhcp6ServerPrefixRange {
    endPrefix?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    prefixLength?: pulumi.Input<number>;
    startPrefix?: pulumi.Input<string>;
}

export interface SystemFabricvpnAdvertisedSubnet {
    access?: pulumi.Input<string>;
    bgpNetworks?: pulumi.Input<pulumi.Input<string>[]>;
    firewallAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    id?: pulumi.Input<number>;
    policies?: pulumi.Input<pulumi.Input<string>[]>;
    prefixes?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SystemFabricvpnOverlay {
    bgpNeighborGroups?: pulumi.Input<pulumi.Input<string>[]>;
    bgpNeighborRanges?: pulumi.Input<pulumi.Input<string>[]>;
    bgpNeighbors?: pulumi.Input<pulumi.Input<string>[]>;
    bgpNetworks?: pulumi.Input<pulumi.Input<string>[]>;
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    ipsecPhase1s?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    overlayPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    overlayTunnelBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    remoteGw?: pulumi.Input<string>;
    routePolicies?: pulumi.Input<pulumi.Input<string>[]>;
    sdwanMembers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SystemFederatedupgradeKnownHaMember {
    serial?: pulumi.Input<string>;
}

export interface SystemFederatedupgradeNodeList {
    coordinatingFortigate?: pulumi.Input<string>;
    deviceType?: pulumi.Input<string>;
    maximumMinutes?: pulumi.Input<number>;
    serial?: pulumi.Input<string>;
    setupTimes?: pulumi.Input<pulumi.Input<string>[]>;
    times?: pulumi.Input<pulumi.Input<string>[]>;
    timing?: pulumi.Input<string>;
    upgradePath?: pulumi.Input<string>;
}

export interface SystemGlobalSplitPortMode {
    interface?: pulumi.Input<string>;
    splitMode?: pulumi.Input<string>;
}

export interface SystemHaFrupSettings {
    activeInterfaces?: pulumi.Input<pulumi.Input<string>[]>;
    activeSwitchPort?: pulumi.Input<string>;
    backupInterfaces?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SystemHaHaMgmtInterface {
    dsts?: pulumi.Input<pulumi.Input<string>[]>;
    gateway?: pulumi.Input<string>;
    gateway6?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SystemHaSecondaryVcluster {
    monitors?: pulumi.Input<pulumi.Input<string>[]>;
    override?: pulumi.Input<string>;
    overrideWaitTime?: pulumi.Input<number>;
    pingserverFailoverThreshold?: pulumi.Input<number>;
    pingserverMonitorInterfaces?: pulumi.Input<pulumi.Input<string>[]>;
    pingserverSecondaryForceReset?: pulumi.Input<string>;
    pingserverSlaveForceReset?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    vclusterId?: pulumi.Input<number>;
    vdoms?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SystemHaUnicastPeer {
    id?: pulumi.Input<number>;
    peerIp?: pulumi.Input<string>;
}

export interface SystemHaVcluster {
    monitors?: pulumi.Input<pulumi.Input<string>[]>;
    override?: pulumi.Input<string>;
    overrideWaitTime?: pulumi.Input<number>;
    pingserverFailoverThreshold?: pulumi.Input<number>;
    pingserverFlipTimeout?: pulumi.Input<number>;
    pingserverMonitorInterfaces?: pulumi.Input<pulumi.Input<string>[]>;
    pingserverSecondaryForceReset?: pulumi.Input<string>;
    pingserverSlaveForceReset?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    vclusterId?: pulumi.Input<number>;
    vdoms?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SystemIkeDhGroup1 {
    id?: pulumi.Input<number>;
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup14 {
    id?: pulumi.Input<number>;
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup15 {
    id?: pulumi.Input<number>;
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup16 {
    id?: pulumi.Input<number>;
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup17 {
    id?: pulumi.Input<number>;
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup18 {
    id?: pulumi.Input<number>;
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup19 {
    id?: pulumi.Input<number>;
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup2 {
    id?: pulumi.Input<number>;
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup20 {
    id?: pulumi.Input<number>;
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup21 {
    id?: pulumi.Input<number>;
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup27 {
    id?: pulumi.Input<number>;
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup28 {
    id?: pulumi.Input<number>;
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup29 {
    id?: pulumi.Input<number>;
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup30 {
    id?: pulumi.Input<number>;
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup31 {
    id?: pulumi.Input<number>;
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup32 {
    id?: pulumi.Input<number>;
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemIkeDhGroup5 {
    id?: pulumi.Input<number>;
    keypairCache?: pulumi.Input<string>;
    keypairCount?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
}

export interface SystemInterfaceClientOption {
    code?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    ips?: pulumi.Input<pulumi.Input<string>[]>;
    type?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface SystemInterfaceDhcpSnoopingServerList {
    name?: pulumi.Input<string>;
    serverIp?: pulumi.Input<string>;
}

export interface SystemInterfaceEgressQueues {
    cos0s?: pulumi.Input<pulumi.Input<string>[]>;
    cos1s?: pulumi.Input<pulumi.Input<string>[]>;
    cos2s?: pulumi.Input<pulumi.Input<string>[]>;
    cos3s?: pulumi.Input<pulumi.Input<string>[]>;
    cos4s?: pulumi.Input<pulumi.Input<string>[]>;
    cos5s?: pulumi.Input<pulumi.Input<string>[]>;
    cos6s?: pulumi.Input<pulumi.Input<string>[]>;
    cos7s?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SystemInterfaceIpv6 {
    autoconf?: pulumi.Input<string>;
    cliConn6Status?: pulumi.Input<number>;
    dhcp6ClientOptions?: pulumi.Input<pulumi.Input<string>[]>;
    dhcp6IapdLists?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceIpv6Dhcp6IapdList>[]>;
    dhcp6InformationRequest?: pulumi.Input<string>;
    dhcp6PrefixDelegation?: pulumi.Input<string>;
    dhcp6PrefixHint?: pulumi.Input<string>;
    dhcp6PrefixHintPlt?: pulumi.Input<number>;
    dhcp6PrefixHintVlt?: pulumi.Input<number>;
    dhcp6RelayInterfaceId?: pulumi.Input<string>;
    dhcp6RelayIps?: pulumi.Input<pulumi.Input<string>[]>;
    dhcp6RelayService?: pulumi.Input<string>;
    dhcp6RelaySourceInterface?: pulumi.Input<string>;
    dhcp6RelaySourceIp?: pulumi.Input<string>;
    dhcp6RelayType?: pulumi.Input<string>;
    icmp6SendRedirect?: pulumi.Input<string>;
    interfaceIdentifier?: pulumi.Input<string>;
    ip6Address?: pulumi.Input<string>;
    ip6Allowaccesses?: pulumi.Input<pulumi.Input<string>[]>;
    ip6DefaultLife?: pulumi.Input<number>;
    ip6DelegatedPrefixIaid?: pulumi.Input<number>;
    ip6DelegatedPrefixLists?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceIpv6Ip6DelegatedPrefixList>[]>;
    ip6DnsServerOverride?: pulumi.Input<string>;
    ip6ExtraAddrs?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceIpv6Ip6ExtraAddr>[]>;
    ip6HopLimit?: pulumi.Input<number>;
    ip6LinkMtu?: pulumi.Input<number>;
    ip6ManageFlag?: pulumi.Input<string>;
    ip6MaxInterval?: pulumi.Input<number>;
    ip6MinInterval?: pulumi.Input<number>;
    ip6Mode?: pulumi.Input<string>;
    ip6OtherFlag?: pulumi.Input<string>;
    ip6PrefixLists?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceIpv6Ip6PrefixList>[]>;
    ip6PrefixMode?: pulumi.Input<string>;
    ip6ReachableTime?: pulumi.Input<number>;
    ip6RetransTime?: pulumi.Input<number>;
    ip6SendAdv?: pulumi.Input<string>;
    ip6Subnet?: pulumi.Input<string>;
    ip6UpstreamInterfaces?: pulumi.Input<pulumi.Input<string>[]>;
    ndCerts?: pulumi.Input<pulumi.Input<string>[]>;
    ndCgaModifier?: pulumi.Input<string>;
    ndMode?: pulumi.Input<string>;
    ndSecurityLevel?: pulumi.Input<number>;
    ndTimestampDelta?: pulumi.Input<number>;
    ndTimestampFuzz?: pulumi.Input<number>;
    raSendMtu?: pulumi.Input<string>;
    uniqueAutoconfAddr?: pulumi.Input<string>;
    vrip6LinkLocal?: pulumi.Input<string>;
    vrrp6s?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceIpv6Vrrp6>[]>;
    vrrpVirtualMac6?: pulumi.Input<string>;
}

export interface SystemInterfaceIpv6Dhcp6IapdList {
    iaid?: pulumi.Input<number>;
    prefixHint?: pulumi.Input<string>;
    prefixHintPlt?: pulumi.Input<number>;
    prefixHintVlt?: pulumi.Input<number>;
}

export interface SystemInterfaceIpv6Ip6DelegatedPrefixList {
    autonomousFlag?: pulumi.Input<string>;
    delegatedPrefixIaid?: pulumi.Input<number>;
    onlinkFlag?: pulumi.Input<string>;
    prefixId?: pulumi.Input<number>;
    rdnssService?: pulumi.Input<string>;
    rdnsses?: pulumi.Input<pulumi.Input<string>[]>;
    subnet?: pulumi.Input<string>;
    upstreamInterfaces?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SystemInterfaceIpv6Ip6ExtraAddr {
    prefix?: pulumi.Input<string>;
}

export interface SystemInterfaceIpv6Ip6PrefixList {
    autonomousFlag?: pulumi.Input<string>;
    dnssls?: pulumi.Input<pulumi.Input<string>[]>;
    onlinkFlag?: pulumi.Input<string>;
    preferredLifeTime?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
    rdnsses?: pulumi.Input<pulumi.Input<string>[]>;
    validLifeTime?: pulumi.Input<number>;
}

export interface SystemInterfaceIpv6Vrrp6 {
    acceptMode?: pulumi.Input<string>;
    advInterval?: pulumi.Input<number>;
    ignoreDefaultRoute?: pulumi.Input<string>;
    preempt?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    startTime?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    vrdst6s?: pulumi.Input<pulumi.Input<string>[]>;
    vrgrp?: pulumi.Input<number>;
    vrid?: pulumi.Input<number>;
    vrip6?: pulumi.Input<string>;
}

export interface SystemInterfaceL2tpClientSettings {
    authType?: pulumi.Input<string>;
    defaultgw?: pulumi.Input<string>;
    distance?: pulumi.Input<number>;
    helloInterval?: pulumi.Input<number>;
    ips?: pulumi.Input<pulumi.Input<string>[]>;
    mtu?: pulumi.Input<number>;
    passwords?: pulumi.Input<pulumi.Input<string>[]>;
    peerHost?: pulumi.Input<string>;
    peerMask?: pulumi.Input<string>;
    peerPort?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    user?: pulumi.Input<string>;
}

export interface SystemInterfaceMirroringFilter {
    dbgDump?: pulumi.Input<number>;
    filterDport?: pulumi.Input<number>;
    filterDstips?: pulumi.Input<pulumi.Input<string>[]>;
    filterProtocol?: pulumi.Input<number>;
    filterSport?: pulumi.Input<number>;
    filterSrcips?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SystemInterfaceSecondaryip {
    allowaccesses?: pulumi.Input<pulumi.Input<string>[]>;
    id?: pulumi.Input<number>;
    ips?: pulumi.Input<pulumi.Input<string>[]>;
    secipRelayIp?: pulumi.Input<string>;
}

export interface SystemInterfaceTagging {
    categories?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SystemInterfaceVrrp {
    acceptMode?: pulumi.Input<string>;
    advInterval?: pulumi.Input<number>;
    ignoreDefaultRoute?: pulumi.Input<string>;
    preempt?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    proxyArps?: pulumi.Input<pulumi.Input<inputs.SystemInterfaceVrrpProxyArp>[]>;
    startTime?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
    vrdstPriority?: pulumi.Input<number>;
    vrdsts?: pulumi.Input<pulumi.Input<string>[]>;
    vrgrp?: pulumi.Input<number>;
    vrid?: pulumi.Input<number>;
    vrip?: pulumi.Input<string>;
}

export interface SystemInterfaceVrrpProxyArp {
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
}

export interface SystemInterfaceWifiNetwork {
    id?: pulumi.Input<number>;
    obsoleteSecurityOptions?: pulumi.Input<string>;
    wifiCaCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    wifiClientCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    wifiEapType?: pulumi.Input<string>;
    wifiEncrypt?: pulumi.Input<string>;
    wifiKeyindex?: pulumi.Input<number>;
    wifiKeys?: pulumi.Input<pulumi.Input<string>[]>;
    wifiPassphrases?: pulumi.Input<pulumi.Input<string>[]>;
    wifiPrivateKey?: pulumi.Input<string>;
    wifiPrivateKeyPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    wifiSecurity?: pulumi.Input<string>;
    wifiSsid?: pulumi.Input<string>;
    wifiUsername?: pulumi.Input<string>;
}

export interface SystemIpamPool {
    description?: pulumi.Input<string>;
    excludes?: pulumi.Input<pulumi.Input<inputs.SystemIpamPoolExclude>[]>;
    name?: pulumi.Input<string>;
    subnets?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SystemIpamPoolExclude {
    excludeSubnets?: pulumi.Input<pulumi.Input<string>[]>;
    id?: pulumi.Input<number>;
}

export interface SystemIpamPoolsExclude {
    excludeSubnets?: pulumi.Input<pulumi.Input<string>[]>;
    id?: pulumi.Input<number>;
}

export interface SystemIpamRule {
    description?: pulumi.Input<string>;
    devices?: pulumi.Input<pulumi.Input<string>[]>;
    dhcp?: pulumi.Input<string>;
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    pools?: pulumi.Input<pulumi.Input<string>[]>;
    role?: pulumi.Input<string>;
}

export interface SystemLinkmonitorServerList {
    dst?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    port?: pulumi.Input<number>;
    protocols?: pulumi.Input<pulumi.Input<string>[]>;
    weight?: pulumi.Input<number>;
}

export interface SystemLldpNetworkpolicyGuest {
    dscp?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
    vlan?: pulumi.Input<number>;
}

export interface SystemLldpNetworkpolicyGuestVoiceSignaling {
    dscp?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
    vlan?: pulumi.Input<number>;
}

export interface SystemLldpNetworkpolicySoftphone {
    dscp?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
    vlan?: pulumi.Input<number>;
}

export interface SystemLldpNetworkpolicyStreamingVideo {
    dscp?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
    vlan?: pulumi.Input<number>;
}

export interface SystemLldpNetworkpolicyVideoConferencing {
    dscp?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
    vlan?: pulumi.Input<number>;
}

export interface SystemLldpNetworkpolicyVideoSignaling {
    dscp?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
    vlan?: pulumi.Input<number>;
}

export interface SystemLldpNetworkpolicyVoice {
    dscp?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
    vlan?: pulumi.Input<number>;
}

export interface SystemLldpNetworkpolicyVoiceSignaling {
    dscp?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
    vlan?: pulumi.Input<number>;
}

export interface SystemMobiletunnelNetwork {
    id?: pulumi.Input<number>;
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    prefixes?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SystemNetflowCollector {
    collectorIp?: pulumi.Input<string>;
    collectorPort?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    interfaceSelectMethod?: pulumi.Input<string>;
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    sourceIp?: pulumi.Input<string>;
}

export interface SystemNtpNtpserver {
    authentication?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    interfaceSelectMethod?: pulumi.Input<string>;
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    ipType?: pulumi.Input<string>;
    keyId?: pulumi.Input<number>;
    keyType?: pulumi.Input<string>;
    keys?: pulumi.Input<pulumi.Input<string>[]>;
    ntpv3?: pulumi.Input<string>;
    server?: pulumi.Input<string>;
}

export interface SystemPcpserverPool {
    allowOpcodes?: pulumi.Input<pulumi.Input<string>[]>;
    announcementCount?: pulumi.Input<number>;
    arpReply?: pulumi.Input<string>;
    clientMappingLimit?: pulumi.Input<number>;
    clientSubnets?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    extIntfs?: pulumi.Input<pulumi.Input<string>[]>;
    extip?: pulumi.Input<string>;
    extport?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    intlIntfs?: pulumi.Input<pulumi.Input<string>[]>;
    mappingFilterLimit?: pulumi.Input<number>;
    maximalLifetime?: pulumi.Input<number>;
    minimalLifetime?: pulumi.Input<number>;
    multicastAnnouncement?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    recycleDelay?: pulumi.Input<number>;
    thirdParty?: pulumi.Input<string>;
    thirdPartySubnets?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SystemPtpServerInterface {
    delayMechanism?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    serverInterfaceNames?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SystemSamlServiceProvider {
    assertionAttributes?: pulumi.Input<pulumi.Input<inputs.SystemSamlServiceProviderAssertionAttribute>[]>;
    idpArtifactResolutionUrl?: pulumi.Input<string>;
    idpEntityId?: pulumi.Input<string>;
    idpSingleLogoutUrl?: pulumi.Input<string>;
    idpSingleSignOnUrl?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    prefix?: pulumi.Input<string>;
    spArtifactResolutionUrl?: pulumi.Input<string>;
    spBindingProtocol?: pulumi.Input<string>;
    spCerts?: pulumi.Input<pulumi.Input<string>[]>;
    spEntityId?: pulumi.Input<string>;
    spPortalUrl?: pulumi.Input<string>;
    spSingleLogoutUrl?: pulumi.Input<string>;
    spSingleSignOnUrl?: pulumi.Input<string>;
}

export interface SystemSamlServiceProviderAssertionAttribute {
    name?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface SystemSdwanDuplication {
    dstaddr6s?: pulumi.Input<pulumi.Input<string>[]>;
    dstaddrs?: pulumi.Input<pulumi.Input<string>[]>;
    dstintfs?: pulumi.Input<pulumi.Input<string>[]>;
    id?: pulumi.Input<number>;
    packetDeDuplication?: pulumi.Input<string>;
    packetDuplication?: pulumi.Input<string>;
    serviceIds?: pulumi.Input<pulumi.Input<string>[]>;
    services?: pulumi.Input<pulumi.Input<string>[]>;
    slaMatchService?: pulumi.Input<string>;
    srcaddr6s?: pulumi.Input<pulumi.Input<string>[]>;
    srcaddrs?: pulumi.Input<pulumi.Input<string>[]>;
    srcintfs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SystemSdwanHealthCheck {
    addrMode?: pulumi.Input<string>;
    classIds?: pulumi.Input<pulumi.Input<string>[]>;
    detectMode?: pulumi.Input<string>;
    diffservcode?: pulumi.Input<string>;
    dnsMatchIp?: pulumi.Input<string>;
    dnsRequestDomain?: pulumi.Input<string>;
    embedMeasuredHealth?: pulumi.Input<string>;
    failtime?: pulumi.Input<number>;
    ftpFile?: pulumi.Input<string>;
    ftpMode?: pulumi.Input<string>;
    haPriority?: pulumi.Input<number>;
    httpAgent?: pulumi.Input<string>;
    httpGet?: pulumi.Input<string>;
    httpMatch?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
    members?: pulumi.Input<pulumi.Input<string>[]>;
    mosCodec?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    packetSize?: pulumi.Input<number>;
    passwords?: pulumi.Input<pulumi.Input<string>[]>;
    port?: pulumi.Input<number>;
    probeCount?: pulumi.Input<number>;
    probePackets?: pulumi.Input<string>;
    probeTimeout?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    qualityMeasuredMethod?: pulumi.Input<string>;
    recoverytime?: pulumi.Input<number>;
    securityMode?: pulumi.Input<string>;
    servers?: pulumi.Input<pulumi.Input<string>[]>;
    slaFailLogPeriod?: pulumi.Input<number>;
    slaIdRedistribute?: pulumi.Input<number>;
    slaPassLogPeriod?: pulumi.Input<number>;
    slas?: pulumi.Input<pulumi.Input<inputs.SystemSdwanHealthCheckSla>[]>;
    source?: pulumi.Input<string>;
    source6?: pulumi.Input<string>;
    systemDns?: pulumi.Input<string>;
    thresholdAlertJitter?: pulumi.Input<number>;
    thresholdAlertLatency?: pulumi.Input<number>;
    thresholdAlertPacketloss?: pulumi.Input<number>;
    thresholdWarningJitter?: pulumi.Input<number>;
    thresholdWarningLatency?: pulumi.Input<number>;
    thresholdWarningPacketloss?: pulumi.Input<number>;
    updateCascadeInterface?: pulumi.Input<string>;
    updateStaticRoute?: pulumi.Input<string>;
    user?: pulumi.Input<string>;
    vrf?: pulumi.Input<number>;
}

export interface SystemSdwanHealthCheckSla {
    id?: pulumi.Input<number>;
    jitterThreshold?: pulumi.Input<number>;
    latencyThreshold?: pulumi.Input<number>;
    linkCostFactors?: pulumi.Input<pulumi.Input<string>[]>;
    mosThreshold?: pulumi.Input<string>;
    packetlossThreshold?: pulumi.Input<number>;
    priorityInSla?: pulumi.Input<number>;
    priorityOutSla?: pulumi.Input<number>;
}

export interface SystemSdwanHealthcheckSla {
    id?: pulumi.Input<number>;
    jitterThreshold?: pulumi.Input<number>;
    latencyThreshold?: pulumi.Input<number>;
    linkCostFactors?: pulumi.Input<pulumi.Input<string>[]>;
    mosThreshold?: pulumi.Input<string>;
    packetlossThreshold?: pulumi.Input<number>;
    priorityInSla?: pulumi.Input<number>;
    priorityOutSla?: pulumi.Input<number>;
}

export interface SystemSdwanMember {
    comment?: pulumi.Input<string>;
    cost?: pulumi.Input<number>;
    gateway?: pulumi.Input<string>;
    gateway6?: pulumi.Input<string>;
    ingressSpilloverThreshold?: pulumi.Input<number>;
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    preferredSource?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    priority6?: pulumi.Input<number>;
    seqNum?: pulumi.Input<number>;
    source?: pulumi.Input<string>;
    source6?: pulumi.Input<string>;
    spilloverThreshold?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    transportGroup?: pulumi.Input<number>;
    volumeRatio?: pulumi.Input<number>;
    weight?: pulumi.Input<number>;
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SystemSdwanNeighbor {
    healthChecks?: pulumi.Input<pulumi.Input<string>[]>;
    ips?: pulumi.Input<pulumi.Input<string>[]>;
    members?: pulumi.Input<pulumi.Input<string>[]>;
    minimumSlaMeetMembers?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    serviceIds?: pulumi.Input<pulumi.Input<string>[]>;
    slaId?: pulumi.Input<number>;
}

export interface SystemSdwanService {
    addrMode?: pulumi.Input<string>;
    agentExclusive?: pulumi.Input<string>;
    bandwidthWeight?: pulumi.Input<number>;
    default?: pulumi.Input<string>;
    dscpForward?: pulumi.Input<string>;
    dscpForwardTag?: pulumi.Input<string>;
    dscpReverse?: pulumi.Input<string>;
    dscpReverseTag?: pulumi.Input<string>;
    dst6s?: pulumi.Input<pulumi.Input<string>[]>;
    dstNegate?: pulumi.Input<string>;
    dsts?: pulumi.Input<pulumi.Input<string>[]>;
    endPort?: pulumi.Input<number>;
    endSrcPort?: pulumi.Input<number>;
    gateway?: pulumi.Input<string>;
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    hashMode?: pulumi.Input<string>;
    healthChecks?: pulumi.Input<pulumi.Input<string>[]>;
    holdDownTime?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    inputDeviceNegate?: pulumi.Input<string>;
    inputDevices?: pulumi.Input<pulumi.Input<string>[]>;
    inputZones?: pulumi.Input<pulumi.Input<string>[]>;
    internetService?: pulumi.Input<string>;
    internetServiceAppCtrlCategories?: pulumi.Input<pulumi.Input<number>[]>;
    internetServiceAppCtrlGroups?: pulumi.Input<pulumi.Input<string>[]>;
    internetServiceAppCtrls?: pulumi.Input<pulumi.Input<number>[]>;
    internetServiceCustomGroups?: pulumi.Input<pulumi.Input<string>[]>;
    internetServiceCustoms?: pulumi.Input<pulumi.Input<string>[]>;
    internetServiceGroups?: pulumi.Input<pulumi.Input<string>[]>;
    internetServiceNames?: pulumi.Input<pulumi.Input<string>[]>;
    jitterWeight?: pulumi.Input<number>;
    latencyWeight?: pulumi.Input<number>;
    linkCostFactor?: pulumi.Input<string>;
    linkCostThreshold?: pulumi.Input<number>;
    loadBalance?: pulumi.Input<string>;
    minimumSlaMeetMembers?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    packetLossWeight?: pulumi.Input<number>;
    passiveMeasurement?: pulumi.Input<string>;
    priorityMembers?: pulumi.Input<pulumi.Input<string>[]>;
    priorityZones?: pulumi.Input<pulumi.Input<string>[]>;
    protocol?: pulumi.Input<number>;
    qualityLink?: pulumi.Input<number>;
    role?: pulumi.Input<string>;
    routeTag?: pulumi.Input<number>;
    shortcut?: pulumi.Input<string>;
    shortcutPriority?: pulumi.Input<string>;
    slaCompareMethod?: pulumi.Input<string>;
    slaStickiness?: pulumi.Input<string>;
    slas?: pulumi.Input<pulumi.Input<inputs.SystemSdwanServiceSla>[]>;
    src6s?: pulumi.Input<pulumi.Input<string>[]>;
    srcNegate?: pulumi.Input<string>;
    srcs?: pulumi.Input<pulumi.Input<string>[]>;
    standaloneAction?: pulumi.Input<string>;
    startPort?: pulumi.Input<number>;
    startSrcPort?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tieBreak?: pulumi.Input<string>;
    tos?: pulumi.Input<string>;
    tosMask?: pulumi.Input<string>;
    useShortcutSla?: pulumi.Input<string>;
    users?: pulumi.Input<pulumi.Input<string>[]>;
    zoneMode?: pulumi.Input<string>;
}

export interface SystemSdwanServiceSla {
    healthChecks?: pulumi.Input<pulumi.Input<string>[]>;
    id?: pulumi.Input<number>;
}

export interface SystemSdwanZone {
    advpnHealthChecks?: pulumi.Input<pulumi.Input<string>[]>;
    advpnSelect?: pulumi.Input<string>;
    minimumSlaMeetMembers?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    serviceSlaTieBreak?: pulumi.Input<string>;
}

export interface SystemSessionttlPort {
    endPort?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    protocol?: pulumi.Input<number>;
    refreshDirection?: pulumi.Input<string>;
    startPort?: pulumi.Input<number>;
    timeout?: pulumi.Input<string>;
}

export interface SystemSflowCollector {
    collectorIp?: pulumi.Input<string>;
    collectorPort?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    interfaceSelectMethod?: pulumi.Input<string>;
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    sourceIp?: pulumi.Input<string>;
}

export interface SystemSnmpCommunityHost {
    haDirect?: pulumi.Input<string>;
    hostType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ips?: pulumi.Input<pulumi.Input<string>[]>;
    sourceIp?: pulumi.Input<string>;
}

export interface SystemSnmpCommunityHosts6 {
    haDirect?: pulumi.Input<string>;
    hostType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ipv6?: pulumi.Input<string>;
    sourceIpv6?: pulumi.Input<string>;
}

export interface SystemSpeedtestserverHost {
    distance?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    latitude?: pulumi.Input<string>;
    longitude?: pulumi.Input<string>;
    passwords?: pulumi.Input<pulumi.Input<string>[]>;
    port?: pulumi.Input<number>;
    user?: pulumi.Input<string>;
}

export interface SystemStandaloneclusterClusterPeer {
    downIntfsBeforeSessSyncs?: pulumi.Input<pulumi.Input<string>[]>;
    hbInterval?: pulumi.Input<number>;
    hbLostThreshold?: pulumi.Input<number>;
    ikeHeartbeatInterval?: pulumi.Input<number>;
    ikeMonitor?: pulumi.Input<string>;
    ikeMonitorInterval?: pulumi.Input<number>;
    ikeUseRfc6311?: pulumi.Input<string>;
    ipsecTunnelSync?: pulumi.Input<string>;
    peerip?: pulumi.Input<string>;
    peervds?: pulumi.Input<pulumi.Input<string>[]>;
    secondaryAddIpsecRoutes?: pulumi.Input<string>;
    sessionSyncFilter?: pulumi.Input<inputs.SystemStandaloneclusterClusterPeerSessionSyncFilter>;
    syncId?: pulumi.Input<number>;
    syncvds?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SystemStandaloneclusterClusterPeerSessionSyncFilter {
    customServices?: pulumi.Input<pulumi.Input<inputs.SystemStandaloneclusterClusterPeerSessionSyncFilterCustomService>[]>;
    dstaddr6?: pulumi.Input<string>;
    dstaddrs?: pulumi.Input<pulumi.Input<string>[]>;
    dstintfs?: pulumi.Input<pulumi.Input<string>[]>;
    srcaddr6?: pulumi.Input<string>;
    srcaddrs?: pulumi.Input<pulumi.Input<string>[]>;
    srcintfs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SystemStandaloneclusterClusterPeerSessionSyncFilterCustomService {
    dstPortRange?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    srcPortRange?: pulumi.Input<string>;
}

export interface SystemStandaloneclusterClusterpeerSessionSyncFilter {
    customServices?: pulumi.Input<pulumi.Input<inputs.SystemStandaloneclusterClusterpeerSessionSyncFilterCustomService>[]>;
    dstaddr6?: pulumi.Input<string>;
    dstaddrs?: pulumi.Input<pulumi.Input<string>[]>;
    dstintfs?: pulumi.Input<pulumi.Input<string>[]>;
    srcaddr6?: pulumi.Input<string>;
    srcaddrs?: pulumi.Input<pulumi.Input<string>[]>;
    srcintfs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SystemStandaloneclusterClusterpeerSessionSyncFilterCustomService {
    dstPortRange?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    srcPortRange?: pulumi.Input<string>;
}

export interface SystemStandaloneclusterClusterpeerSessionsyncfilterCustomService {
    dstPortRange?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    srcPortRange?: pulumi.Input<string>;
}

export interface SystemVdomnetflowCollector {
    collectorIp?: pulumi.Input<string>;
    collectorPort?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    interfaceSelectMethod?: pulumi.Input<string>;
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    sourceIp?: pulumi.Input<string>;
}

export interface SystemVdomsflowCollector {
    collectorIp?: pulumi.Input<string>;
    collectorPort?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    interfaceSelectMethod?: pulumi.Input<string>;
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    sourceIp?: pulumi.Input<string>;
}

export interface SystemZoneTagging {
    categories?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface UserQuarantineTarget {
    description?: pulumi.Input<string>;
    entry?: pulumi.Input<string>;
    macs?: pulumi.Input<pulumi.Input<inputs.UserQuarantineTargetMac>[]>;
}

export interface UserQuarantineTargetMac {
    description?: pulumi.Input<string>;
    drop?: pulumi.Input<string>;
    entryId?: pulumi.Input<number>;
    mac?: pulumi.Input<string>;
    parent?: pulumi.Input<string>;
}

export interface UserQuarantineTargetsMac {
    description?: pulumi.Input<string>;
    drop?: pulumi.Input<string>;
    entryId?: pulumi.Input<number>;
    mac?: pulumi.Input<string>;
    parent?: pulumi.Input<string>;
}

export interface UserSettingAuthPort {
    id?: pulumi.Input<number>;
    port?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
}

export interface VpnCertificateSettingCrlVerification {
    chainCrlAbsence?: pulumi.Input<string>;
    expiry?: pulumi.Input<string>;
    leafCrlAbsence?: pulumi.Input<string>;
}

export interface VpnIpsecPhase1Ipv4ExcludeRange {
    endIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    startIp?: pulumi.Input<string>;
}

export interface VpnIpsecPhase1Ipv6ExcludeRange {
    endIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    startIp?: pulumi.Input<string>;
}

export interface VpnIpsecPhase1interfaceIpv4ExcludeRange {
    endIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    startIp?: pulumi.Input<string>;
}

export interface VpnIpsecPhase1interfaceIpv6ExcludeRange {
    endIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    startIp?: pulumi.Input<string>;
}

export interface VpnKmipserverServerList {
    certs?: pulumi.Input<pulumi.Input<string>[]>;
    id?: pulumi.Input<number>;
    port?: pulumi.Input<number>;
    server?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface VpnOcvpnForticlientAccess {
    authGroups?: pulumi.Input<pulumi.Input<inputs.VpnOcvpnForticlientAccessAuthGroup>[]>;
    psksecrets?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
}

export interface VpnOcvpnForticlientAccessAuthGroup {
    authGroups?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    overlays?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface VpnOcvpnOverlay {
    assignIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    interOverlay?: pulumi.Input<string>;
    ipv4EndIp?: pulumi.Input<string>;
    ipv4StartIp?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    overlayName?: pulumi.Input<string>;
    subnets?: pulumi.Input<pulumi.Input<inputs.VpnOcvpnOverlaySubnet>[]>;
}

export interface VpnOcvpnOverlaySubnet {
    id?: pulumi.Input<number>;
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    subnets?: pulumi.Input<pulumi.Input<string>[]>;
    type?: pulumi.Input<string>;
}

export interface VpnOcvpnOverlaysSubnet {
    id?: pulumi.Input<number>;
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    subnets?: pulumi.Input<pulumi.Input<string>[]>;
    type?: pulumi.Input<string>;
}

export interface VpnSslSettingsAuthenticationRule {
    auth?: pulumi.Input<string>;
    cipher?: pulumi.Input<string>;
    clientCert?: pulumi.Input<string>;
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    id?: pulumi.Input<number>;
    portals?: pulumi.Input<pulumi.Input<string>[]>;
    realms?: pulumi.Input<pulumi.Input<string>[]>;
    sourceAddress6Negate?: pulumi.Input<string>;
    sourceAddress6s?: pulumi.Input<pulumi.Input<string>[]>;
    sourceAddressNegate?: pulumi.Input<string>;
    sourceAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    sourceInterfaces?: pulumi.Input<pulumi.Input<string>[]>;
    userPeers?: pulumi.Input<pulumi.Input<string>[]>;
    users?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface VpnSslWebUserbookmarkBookmark {
    additionalParams?: pulumi.Input<string>;
    apptype?: pulumi.Input<string>;
    colorDepth?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    folder?: pulumi.Input<string>;
    formDatas?: pulumi.Input<pulumi.Input<inputs.VpnSslWebUserbookmarkBookmarkFormData>[]>;
    height?: pulumi.Input<number>;
    host?: pulumi.Input<string>;
    keyboardLayout?: pulumi.Input<string>;
    listeningPort?: pulumi.Input<number>;
    loadBalancingInfo?: pulumi.Input<string>;
    logonPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    logonUser?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    preconnectionBlob?: pulumi.Input<string>;
    preconnectionId?: pulumi.Input<number>;
    remotePort?: pulumi.Input<number>;
    restrictedAdmin?: pulumi.Input<string>;
    security?: pulumi.Input<string>;
    sendPreconnectionId?: pulumi.Input<string>;
    serverLayout?: pulumi.Input<string>;
    showStatusWindow?: pulumi.Input<string>;
    sso?: pulumi.Input<string>;
    ssoCredential?: pulumi.Input<string>;
    ssoCredentialSentOnce?: pulumi.Input<string>;
    ssoPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    ssoUsername?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
    vncKeyboardLayout?: pulumi.Input<string>;
    width?: pulumi.Input<number>;
}

export interface VpnSslWebUserbookmarkBookmarkFormData {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface VpnSslWebUserbookmarkBookmarksFormData {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface VpnSslWebUsergroupbookmarkBookmark {
    additionalParams?: pulumi.Input<string>;
    apptype?: pulumi.Input<string>;
    colorDepth?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    folder?: pulumi.Input<string>;
    formDatas?: pulumi.Input<pulumi.Input<inputs.VpnSslWebUsergroupbookmarkBookmarkFormData>[]>;
    height?: pulumi.Input<number>;
    host?: pulumi.Input<string>;
    keyboardLayout?: pulumi.Input<string>;
    listeningPort?: pulumi.Input<number>;
    loadBalancingInfo?: pulumi.Input<string>;
    logonPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    logonUser?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    preconnectionBlob?: pulumi.Input<string>;
    preconnectionId?: pulumi.Input<number>;
    remotePort?: pulumi.Input<number>;
    restrictedAdmin?: pulumi.Input<string>;
    security?: pulumi.Input<string>;
    sendPreconnectionId?: pulumi.Input<string>;
    serverLayout?: pulumi.Input<string>;
    showStatusWindow?: pulumi.Input<string>;
    sso?: pulumi.Input<string>;
    ssoCredential?: pulumi.Input<string>;
    ssoCredentialSentOnce?: pulumi.Input<string>;
    ssoPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    ssoUsername?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
    vncKeyboardLayout?: pulumi.Input<string>;
    width?: pulumi.Input<number>;
}

export interface VpnSslWebUsergroupbookmarkBookmarkFormData {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface VpnSslWebUsergroupbookmarkBookmarksFormData {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface WanoptCacheserviceDstPeer {
    authType?: pulumi.Input<number>;
    deviceId?: pulumi.Input<string>;
    encodeType?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
}

export interface WanoptCacheserviceSrcPeer {
    authType?: pulumi.Input<number>;
    deviceId?: pulumi.Input<string>;
    encodeType?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
}

export interface WanoptContentdeliverynetworkruleRule {
    contentId?: pulumi.Input<inputs.WanoptContentdeliverynetworkruleRuleContentId>;
    matchEntries?: pulumi.Input<pulumi.Input<inputs.WanoptContentdeliverynetworkruleRuleMatchEntry>[]>;
    matchMode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    skipEntries?: pulumi.Input<pulumi.Input<inputs.WanoptContentdeliverynetworkruleRuleSkipEntry>[]>;
    skipRuleMode?: pulumi.Input<string>;
}

export interface WanoptContentdeliverynetworkruleRuleContentId {
    endDirection?: pulumi.Input<string>;
    endSkip?: pulumi.Input<number>;
    endStr?: pulumi.Input<string>;
    rangeStr?: pulumi.Input<string>;
    startDirection?: pulumi.Input<string>;
    startSkip?: pulumi.Input<number>;
    startStr?: pulumi.Input<string>;
    target?: pulumi.Input<string>;
}

export interface WanoptContentdeliverynetworkruleRuleMatchEntry {
    id?: pulumi.Input<number>;
    patterns?: pulumi.Input<pulumi.Input<string>[]>;
    target?: pulumi.Input<string>;
}

export interface WanoptContentdeliverynetworkruleRuleSkipEntry {
    id?: pulumi.Input<number>;
    patterns?: pulumi.Input<pulumi.Input<string>[]>;
    target?: pulumi.Input<string>;
}

export interface WanoptContentdeliverynetworkruleRulesContentId {
    endDirection?: pulumi.Input<string>;
    endSkip?: pulumi.Input<number>;
    endStr?: pulumi.Input<string>;
    rangeStr?: pulumi.Input<string>;
    startDirection?: pulumi.Input<string>;
    startSkip?: pulumi.Input<number>;
    startStr?: pulumi.Input<string>;
    target?: pulumi.Input<string>;
}

export interface WanoptContentdeliverynetworkruleRulesMatchEntry {
    id?: pulumi.Input<number>;
    patterns?: pulumi.Input<pulumi.Input<string>[]>;
    target?: pulumi.Input<string>;
}

export interface WanoptContentdeliverynetworkruleRulesSkipEntry {
    id?: pulumi.Input<number>;
    patterns?: pulumi.Input<pulumi.Input<string>[]>;
    target?: pulumi.Input<string>;
}

export interface WebproxyExplicitPacPolicy {
    comments?: pulumi.Input<string>;
    dstaddrs?: pulumi.Input<pulumi.Input<string>[]>;
    pacFileData?: pulumi.Input<string>;
    pacFileName?: pulumi.Input<string>;
    policyid?: pulumi.Input<number>;
    srcaddr6s?: pulumi.Input<pulumi.Input<string>[]>;
    srcaddrs?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
}

export interface WirelesscontrollerAccesscontrollistLayer3Ipv4Rule {
    action?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    dstaddr?: pulumi.Input<string>;
    dstport?: pulumi.Input<number>;
    protocol?: pulumi.Input<number>;
    ruleId?: pulumi.Input<number>;
    srcaddr?: pulumi.Input<string>;
    srcport?: pulumi.Input<number>;
}

export interface WirelesscontrollerAccesscontrollistLayer3Ipv6Rule {
    action?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    dstaddr?: pulumi.Input<string>;
    dstport?: pulumi.Input<number>;
    protocol?: pulumi.Input<number>;
    ruleId?: pulumi.Input<number>;
    srcaddr?: pulumi.Input<string>;
    srcport?: pulumi.Input<number>;
}

export interface WirelesscontrollerApcfgprofileCommandList {
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    passwdValues?: pulumi.Input<pulumi.Input<string>[]>;
    type?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface WirelesscontrollerBonjourprofilePolicyList {
    description?: pulumi.Input<string>;
    fromVlan?: pulumi.Input<string>;
    policyId?: pulumi.Input<number>;
    services?: pulumi.Input<pulumi.Input<string>[]>;
    toVlan?: pulumi.Input<string>;
}

export interface WirelesscontrollerHotspot20Anqp3gppcellularMccMncList {
    id?: pulumi.Input<number>;
    mcc?: pulumi.Input<string>;
    mnc?: pulumi.Input<string>;
}

export interface WirelesscontrollerHotspot20AnqpnairealmNaiList {
    eapMethods?: pulumi.Input<pulumi.Input<inputs.WirelesscontrollerHotspot20AnqpnairealmNaiListEapMethod>[]>;
    encoding?: pulumi.Input<string>;
    naiRealm?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface WirelesscontrollerHotspot20AnqpnairealmNaiListEapMethod {
    authParams?: pulumi.Input<pulumi.Input<inputs.WirelesscontrollerHotspot20AnqpnairealmNaiListEapMethodAuthParam>[]>;
    index?: pulumi.Input<number>;
    method?: pulumi.Input<string>;
}

export interface WirelesscontrollerHotspot20AnqpnairealmNaiListEapMethodAuthParam {
    id?: pulumi.Input<string>;
    index?: pulumi.Input<number>;
    val?: pulumi.Input<string>;
}

export interface WirelesscontrollerHotspot20AnqpnairealmNailistEapMethod {
    authParams?: pulumi.Input<pulumi.Input<inputs.WirelesscontrollerHotspot20AnqpnairealmNailistEapMethodAuthParam>[]>;
    index?: pulumi.Input<number>;
    method?: pulumi.Input<string>;
}

export interface WirelesscontrollerHotspot20AnqpnairealmNailistEapMethodAuthParam {
    id?: pulumi.Input<string>;
    index?: pulumi.Input<number>;
    val?: pulumi.Input<string>;
}

export interface WirelesscontrollerHotspot20AnqpnairealmNailistEapmethodAuthParam {
    id?: pulumi.Input<string>;
    index?: pulumi.Input<number>;
    val?: pulumi.Input<string>;
}

export interface WirelesscontrollerHotspot20AnqproamingconsortiumOiList {
    comment?: pulumi.Input<string>;
    index?: pulumi.Input<number>;
    oi?: pulumi.Input<string>;
}

export interface WirelesscontrollerHotspot20AnqpvenuenameValueList {
    index?: pulumi.Input<number>;
    lang?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface WirelesscontrollerHotspot20AnqpvenueurlValueList {
    index?: pulumi.Input<number>;
    number?: pulumi.Input<number>;
    value?: pulumi.Input<string>;
}

export interface WirelesscontrollerHotspot20H2qpadviceofchargeAocList {
    naiRealm?: pulumi.Input<string>;
    naiRealmEncoding?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    planInfos?: pulumi.Input<pulumi.Input<inputs.WirelesscontrollerHotspot20H2qpadviceofchargeAocListPlanInfo>[]>;
    type?: pulumi.Input<string>;
}

export interface WirelesscontrollerHotspot20H2qpadviceofchargeAocListPlanInfo {
    currency?: pulumi.Input<string>;
    infoFile?: pulumi.Input<string>;
    lang?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface WirelesscontrollerHotspot20H2qpadviceofchargeAoclistPlanInfo {
    currency?: pulumi.Input<string>;
    infoFile?: pulumi.Input<string>;
    lang?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface WirelesscontrollerHotspot20H2qpoperatornameValueList {
    index?: pulumi.Input<number>;
    lang?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface WirelesscontrollerHotspot20H2qposuproviderFriendlyName {
    friendlyName?: pulumi.Input<string>;
    index?: pulumi.Input<number>;
    lang?: pulumi.Input<string>;
}

export interface WirelesscontrollerHotspot20H2qposuproviderServiceDescription {
    lang?: pulumi.Input<string>;
    serviceDescription?: pulumi.Input<string>;
    serviceId?: pulumi.Input<number>;
}

export interface WirelesscontrollerHotspot20H2qposuprovidernaiNaiList {
    name?: pulumi.Input<string>;
    osuNai?: pulumi.Input<string>;
}

export interface WirelesscontrollerHotspot20IconIconList {
    file?: pulumi.Input<string>;
    height?: pulumi.Input<number>;
    lang?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    width?: pulumi.Input<number>;
}

export interface WirelesscontrollerHotspot20QosmapDscpExcept {
    dscp?: pulumi.Input<number>;
    index?: pulumi.Input<number>;
    up?: pulumi.Input<number>;
}

export interface WirelesscontrollerHotspot20QosmapDscpRange {
    high?: pulumi.Input<number>;
    index?: pulumi.Input<number>;
    low?: pulumi.Input<number>;
    up?: pulumi.Input<number>;
}

export interface WirelesscontrollerIntercontrollerInterControllerPeer {
    id?: pulumi.Input<number>;
    peerIp?: pulumi.Input<string>;
    peerPort?: pulumi.Input<number>;
    peerPriority?: pulumi.Input<string>;
}

export interface WirelesscontrollerMpskprofileMpskGroup {
    mpskKeys?: pulumi.Input<pulumi.Input<inputs.WirelesscontrollerMpskprofileMpskGroupMpskKey>[]>;
    name?: pulumi.Input<string>;
    vlanId?: pulumi.Input<number>;
    vlanType?: pulumi.Input<string>;
}

export interface WirelesscontrollerMpskprofileMpskGroupMpskKey {
    comment?: pulumi.Input<string>;
    concurrentClientLimitType?: pulumi.Input<string>;
    concurrentClients?: pulumi.Input<number>;
    keyType?: pulumi.Input<string>;
    mac?: pulumi.Input<string>;
    mpskSchedules?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    passphrases?: pulumi.Input<pulumi.Input<string>[]>;
    pmks?: pulumi.Input<pulumi.Input<string>[]>;
    saePasswords?: pulumi.Input<pulumi.Input<string>[]>;
    saePk?: pulumi.Input<string>;
    saePrivateKey?: pulumi.Input<string>;
}

export interface WirelesscontrollerMpskprofileMpskgroupMpskKey {
    comment?: pulumi.Input<string>;
    concurrentClientLimitType?: pulumi.Input<string>;
    concurrentClients?: pulumi.Input<number>;
    keyType?: pulumi.Input<string>;
    mac?: pulumi.Input<string>;
    mpskSchedules?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    passphrases?: pulumi.Input<pulumi.Input<string>[]>;
    pmks?: pulumi.Input<pulumi.Input<string>[]>;
    saePasswords?: pulumi.Input<pulumi.Input<string>[]>;
    saePk?: pulumi.Input<string>;
    saePrivateKey?: pulumi.Input<string>;
}

export interface WirelesscontrollerSettingOffendingSsid {
    actions?: pulumi.Input<pulumi.Input<string>[]>;
    id?: pulumi.Input<number>;
    ssidPattern?: pulumi.Input<string>;
}

export interface WirelesscontrollerSnmpCommunity {
    hosts?: pulumi.Input<pulumi.Input<inputs.WirelesscontrollerSnmpCommunityHost>[]>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    queryV1Status?: pulumi.Input<string>;
    queryV2cStatus?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    trapV1Status?: pulumi.Input<string>;
    trapV2cStatus?: pulumi.Input<string>;
}

export interface WirelesscontrollerSnmpCommunityHost {
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
}

export interface WirelesscontrollerSnmpUser {
    authProto?: pulumi.Input<string>;
    authPwds?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    notifyHosts?: pulumi.Input<pulumi.Input<string>[]>;
    privProto?: pulumi.Input<string>;
    privPwds?: pulumi.Input<pulumi.Input<string>[]>;
    queries?: pulumi.Input<string>;
    securityLevel?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    trapStatus?: pulumi.Input<string>;
}

export interface WirelesscontrollerVapDynamicMapping {
    _centmgmt?: pulumi.Input<string>;
    _dhcpSvrIds?: pulumi.Input<pulumi.Input<string>[]>;
    _intfAllowaccesses?: pulumi.Input<pulumi.Input<string>[]>;
    _intfDeviceAccessLists?: pulumi.Input<pulumi.Input<string>[]>;
    _intfDeviceIdentification?: pulumi.Input<string>;
    _intfDeviceNetscan?: pulumi.Input<string>;
    _intfDhcp6RelayIps?: pulumi.Input<pulumi.Input<string>[]>;
    _intfDhcp6RelayService?: pulumi.Input<string>;
    _intfDhcp6RelayType?: pulumi.Input<string>;
    _intfDhcpRelayIps?: pulumi.Input<pulumi.Input<string>[]>;
    _intfDhcpRelayService?: pulumi.Input<string>;
    _intfDhcpRelayType?: pulumi.Input<string>;
    _intfIp6Address?: pulumi.Input<string>;
    _intfIp6Allowaccesses?: pulumi.Input<pulumi.Input<string>[]>;
    _intfIps?: pulumi.Input<pulumi.Input<string>[]>;
    _intfListenForticlientConnection?: pulumi.Input<string>;
    _isFactorySetting?: pulumi.Input<string>;
    _scopes?: pulumi.Input<pulumi.Input<inputs.WirelesscontrollerVapDynamicMapping_Scope>[]>;
    accessControlLists?: pulumi.Input<pulumi.Input<string>[]>;
    acctInterimInterval?: pulumi.Input<number>;
    additionalAkms?: pulumi.Input<pulumi.Input<string>[]>;
    addressGroupPolicy?: pulumi.Input<string>;
    addressGroups?: pulumi.Input<pulumi.Input<string>[]>;
    akm24Only?: pulumi.Input<string>;
    alias?: pulumi.Input<string>;
    antivirusProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    applicationDetectionEngine?: pulumi.Input<string>;
    applicationDscpMarking?: pulumi.Input<string>;
    applicationLists?: pulumi.Input<pulumi.Input<string>[]>;
    applicationReportIntv?: pulumi.Input<number>;
    atfWeight?: pulumi.Input<number>;
    auth?: pulumi.Input<string>;
    authCerts?: pulumi.Input<pulumi.Input<string>[]>;
    authPortalAddr?: pulumi.Input<string>;
    beaconAdvertisings?: pulumi.Input<pulumi.Input<string>[]>;
    beaconProtection?: pulumi.Input<string>;
    broadcastSsid?: pulumi.Input<string>;
    broadcastSuppressions?: pulumi.Input<pulumi.Input<string>[]>;
    bssColorPartial?: pulumi.Input<string>;
    bstmDisassociationImminent?: pulumi.Input<string>;
    bstmLoadBalancingDisassocTimer?: pulumi.Input<number>;
    bstmRssiDisassocTimer?: pulumi.Input<number>;
    captivePortal?: pulumi.Input<string>;
    captivePortalAcName?: pulumi.Input<string>;
    captivePortalAuthTimeout?: pulumi.Input<number>;
    captivePortalFwAccounting?: pulumi.Input<string>;
    captivePortalMacauthRadiusSecrets?: pulumi.Input<pulumi.Input<string>[]>;
    captivePortalMacauthRadiusServer?: pulumi.Input<string>;
    captivePortalRadiusSecrets?: pulumi.Input<pulumi.Input<string>[]>;
    captivePortalRadiusServer?: pulumi.Input<string>;
    captivePortalSessionTimeoutInterval?: pulumi.Input<number>;
    clientCount?: pulumi.Input<number>;
    dhcpAddressEnforcement?: pulumi.Input<string>;
    dhcpLeaseTime?: pulumi.Input<number>;
    dhcpOption43Insertion?: pulumi.Input<string>;
    dhcpOption82CircuitIdInsertion?: pulumi.Input<string>;
    dhcpOption82Insertion?: pulumi.Input<string>;
    dhcpOption82RemoteIdInsertion?: pulumi.Input<string>;
    dynamicVlan?: pulumi.Input<string>;
    eapReauth?: pulumi.Input<string>;
    eapReauthIntv?: pulumi.Input<number>;
    eapolKeyRetries?: pulumi.Input<string>;
    encrypt?: pulumi.Input<string>;
    externalFastRoaming?: pulumi.Input<string>;
    externalLogout?: pulumi.Input<string>;
    externalWeb?: pulumi.Input<string>;
    externalWebFormat?: pulumi.Input<string>;
    fastBssTransition?: pulumi.Input<string>;
    fastRoaming?: pulumi.Input<string>;
    ftMobilityDomain?: pulumi.Input<number>;
    ftOverDs?: pulumi.Input<string>;
    ftR0KeyLifetime?: pulumi.Input<number>;
    gasComebackDelay?: pulumi.Input<number>;
    gasFragmentationLimit?: pulumi.Input<number>;
    gtkRekey?: pulumi.Input<string>;
    gtkRekeyIntv?: pulumi.Input<number>;
    highEfficiency?: pulumi.Input<string>;
    hotspot20Profiles?: pulumi.Input<pulumi.Input<string>[]>;
    igmpSnooping?: pulumi.Input<string>;
    intraVapPrivacy?: pulumi.Input<string>;
    ips?: pulumi.Input<pulumi.Input<string>[]>;
    ipsSensors?: pulumi.Input<pulumi.Input<string>[]>;
    ipv6Rules?: pulumi.Input<pulumi.Input<string>[]>;
    keyindex?: pulumi.Input<number>;
    keys?: pulumi.Input<pulumi.Input<string>[]>;
    l3Roaming?: pulumi.Input<string>;
    l3RoamingMode?: pulumi.Input<string>;
    ldpc?: pulumi.Input<string>;
    localAuthentication?: pulumi.Input<string>;
    localBridging?: pulumi.Input<string>;
    localLan?: pulumi.Input<string>;
    localStandalone?: pulumi.Input<string>;
    localStandaloneDns?: pulumi.Input<string>;
    localStandaloneDnsIps?: pulumi.Input<pulumi.Input<string>[]>;
    localStandaloneNat?: pulumi.Input<string>;
    localSwitching?: pulumi.Input<string>;
    macAuthBypass?: pulumi.Input<string>;
    macCalledStationDelimiter?: pulumi.Input<string>;
    macCallingStationDelimiter?: pulumi.Input<string>;
    macCase?: pulumi.Input<string>;
    macFilter?: pulumi.Input<string>;
    macFilterPolicyOther?: pulumi.Input<string>;
    macPasswordDelimiter?: pulumi.Input<string>;
    macUsernameDelimiter?: pulumi.Input<string>;
    maxClients?: pulumi.Input<number>;
    maxClientsAp?: pulumi.Input<number>;
    mbo?: pulumi.Input<string>;
    mboCellDataConnPref?: pulumi.Input<string>;
    meDisableThresh?: pulumi.Input<number>;
    meshBackhaul?: pulumi.Input<string>;
    mpsk?: pulumi.Input<string>;
    mpskConcurrentClients?: pulumi.Input<number>;
    mpskProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    muMimo?: pulumi.Input<string>;
    multicastEnhance?: pulumi.Input<string>;
    multicastRate?: pulumi.Input<string>;
    n80211k?: pulumi.Input<string>;
    n80211v?: pulumi.Input<string>;
    nac?: pulumi.Input<string>;
    nacProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    nasFilterRule?: pulumi.Input<string>;
    neighborReportDualBand?: pulumi.Input<string>;
    okc?: pulumi.Input<string>;
    osen?: pulumi.Input<string>;
    oweGroups?: pulumi.Input<pulumi.Input<string>[]>;
    oweTransition?: pulumi.Input<string>;
    oweTransitionSsid?: pulumi.Input<string>;
    passphrases?: pulumi.Input<pulumi.Input<string>[]>;
    pmf?: pulumi.Input<string>;
    pmfAssocComebackTimeout?: pulumi.Input<number>;
    pmfSaQueryRetryTimeout?: pulumi.Input<number>;
    portMacauth?: pulumi.Input<string>;
    portMacauthReauthTimeout?: pulumi.Input<number>;
    portMacauthTimeout?: pulumi.Input<number>;
    portalMessageOverrideGroups?: pulumi.Input<pulumi.Input<string>[]>;
    portalType?: pulumi.Input<string>;
    primaryWagProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    probeRespSuppression?: pulumi.Input<string>;
    probeRespThreshold?: pulumi.Input<string>;
    ptkRekey?: pulumi.Input<string>;
    ptkRekeyIntv?: pulumi.Input<number>;
    qosProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    quarantine?: pulumi.Input<string>;
    radio2gThreshold?: pulumi.Input<string>;
    radio5gThreshold?: pulumi.Input<string>;
    radioSensitivity?: pulumi.Input<string>;
    radiusMacAuth?: pulumi.Input<string>;
    radiusMacAuthBlockInterval?: pulumi.Input<number>;
    radiusMacAuthServers?: pulumi.Input<pulumi.Input<string>[]>;
    radiusMacAuthUsergroups?: pulumi.Input<pulumi.Input<string>[]>;
    radiusMacMpskAuth?: pulumi.Input<string>;
    radiusMacMpskTimeout?: pulumi.Input<number>;
    radiusServers?: pulumi.Input<pulumi.Input<string>[]>;
    rates11acMcsMap?: pulumi.Input<string>;
    rates11acSs12s?: pulumi.Input<pulumi.Input<string>[]>;
    rates11acSs34s?: pulumi.Input<pulumi.Input<string>[]>;
    rates11as?: pulumi.Input<pulumi.Input<string>[]>;
    rates11axMcsMap?: pulumi.Input<string>;
    rates11axSs12s?: pulumi.Input<pulumi.Input<string>[]>;
    rates11axSs34s?: pulumi.Input<pulumi.Input<string>[]>;
    rates11beMcsMap?: pulumi.Input<string>;
    rates11beMcsMap160?: pulumi.Input<string>;
    rates11beMcsMap320?: pulumi.Input<string>;
    rates11bgs?: pulumi.Input<pulumi.Input<string>[]>;
    rates11nSs12s?: pulumi.Input<pulumi.Input<string>[]>;
    rates11nSs34s?: pulumi.Input<pulumi.Input<string>[]>;
    roamingAcctInterimUpdate?: pulumi.Input<string>;
    saeGroups?: pulumi.Input<pulumi.Input<string>[]>;
    saeH2eOnly?: pulumi.Input<string>;
    saeHnpOnly?: pulumi.Input<string>;
    saePasswords?: pulumi.Input<pulumi.Input<string>[]>;
    saePk?: pulumi.Input<string>;
    saePrivateKey?: pulumi.Input<string>;
    scanBotnetConnections?: pulumi.Input<string>;
    schedules?: pulumi.Input<pulumi.Input<string>[]>;
    secondaryWagProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    security?: pulumi.Input<string>;
    securityExemptLists?: pulumi.Input<pulumi.Input<string>[]>;
    securityObsoleteOption?: pulumi.Input<string>;
    securityRedirectUrl?: pulumi.Input<string>;
    selectedUsergroups?: pulumi.Input<pulumi.Input<string>[]>;
    splitTunneling?: pulumi.Input<string>;
    ssid?: pulumi.Input<string>;
    stickyClientRemove?: pulumi.Input<string>;
    stickyClientThreshold2g?: pulumi.Input<string>;
    stickyClientThreshold5g?: pulumi.Input<string>;
    stickyClientThreshold6g?: pulumi.Input<string>;
    targetWakeTime?: pulumi.Input<string>;
    tkipCounterMeasure?: pulumi.Input<string>;
    tunnelEchoInterval?: pulumi.Input<number>;
    tunnelFallbackInterval?: pulumi.Input<number>;
    usergroups?: pulumi.Input<pulumi.Input<string>[]>;
    utmLog?: pulumi.Input<string>;
    utmProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    utmStatus?: pulumi.Input<string>;
    vdoms?: pulumi.Input<pulumi.Input<string>[]>;
    vlanAuto?: pulumi.Input<string>;
    vlanPooling?: pulumi.Input<string>;
    vlanid?: pulumi.Input<number>;
    voiceEnterprise?: pulumi.Input<string>;
    webfilterProfiles?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WirelesscontrollerVapDynamicMapping_Scope {
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface WirelesscontrollerVapMacFilterList {
    id?: pulumi.Input<number>;
    mac?: pulumi.Input<string>;
    macFilterPolicy?: pulumi.Input<string>;
}

export interface WirelesscontrollerVapMpskKey {
    comment?: pulumi.Input<string>;
    concurrentClients?: pulumi.Input<string>;
    keyName?: pulumi.Input<string>;
    mpskSchedules?: pulumi.Input<pulumi.Input<string>[]>;
    passphrases?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WirelesscontrollerVapPortalMessageOverrides {
    authDisclaimerPage?: pulumi.Input<string>;
    authLoginFailedPage?: pulumi.Input<string>;
    authLoginPage?: pulumi.Input<string>;
    authRejectPage?: pulumi.Input<string>;
}

export interface WirelesscontrollerVapVlanName {
    name?: pulumi.Input<string>;
    vlanId?: pulumi.Input<number>;
}

export interface WirelesscontrollerVapVlanPool {
    id?: pulumi.Input<number>;
    wtpGroups?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WirelesscontrollerWtpLan {
    port1Mode?: pulumi.Input<string>;
    port1Ssids?: pulumi.Input<pulumi.Input<string>[]>;
    port2Mode?: pulumi.Input<string>;
    port2Ssids?: pulumi.Input<pulumi.Input<string>[]>;
    port3Mode?: pulumi.Input<string>;
    port3Ssids?: pulumi.Input<pulumi.Input<string>[]>;
    port4Mode?: pulumi.Input<string>;
    port4Ssids?: pulumi.Input<pulumi.Input<string>[]>;
    port5Mode?: pulumi.Input<string>;
    port5Ssids?: pulumi.Input<pulumi.Input<string>[]>;
    port6Mode?: pulumi.Input<string>;
    port6Ssids?: pulumi.Input<pulumi.Input<string>[]>;
    port7Mode?: pulumi.Input<string>;
    port7Ssids?: pulumi.Input<pulumi.Input<string>[]>;
    port8Mode?: pulumi.Input<string>;
    port8Ssids?: pulumi.Input<pulumi.Input<string>[]>;
    portEslMode?: pulumi.Input<string>;
    portEslSsids?: pulumi.Input<pulumi.Input<string>[]>;
    portMode?: pulumi.Input<string>;
    portSsids?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WirelesscontrollerWtpRadio1 {
    autoPowerHigh?: pulumi.Input<number>;
    autoPowerLevel?: pulumi.Input<string>;
    autoPowerLow?: pulumi.Input<number>;
    autoPowerTarget?: pulumi.Input<string>;
    bands?: pulumi.Input<pulumi.Input<string>[]>;
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    drmaManualMode?: pulumi.Input<string>;
    overrideAnalysis?: pulumi.Input<string>;
    overrideBand?: pulumi.Input<string>;
    overrideChannel?: pulumi.Input<string>;
    overrideTxpower?: pulumi.Input<string>;
    overrideVaps?: pulumi.Input<string>;
    powerLevel?: pulumi.Input<number>;
    powerMode?: pulumi.Input<string>;
    powerValue?: pulumi.Input<number>;
    radioId?: pulumi.Input<number>;
    spectrumAnalysis?: pulumi.Input<string>;
    vap1?: pulumi.Input<string>;
    vap2?: pulumi.Input<string>;
    vap3?: pulumi.Input<string>;
    vap4?: pulumi.Input<string>;
    vap5?: pulumi.Input<string>;
    vap6?: pulumi.Input<string>;
    vap7?: pulumi.Input<string>;
    vap8?: pulumi.Input<string>;
    vapAll?: pulumi.Input<string>;
    vaps?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WirelesscontrollerWtpRadio2 {
    autoPowerHigh?: pulumi.Input<number>;
    autoPowerLevel?: pulumi.Input<string>;
    autoPowerLow?: pulumi.Input<number>;
    autoPowerTarget?: pulumi.Input<string>;
    bands?: pulumi.Input<pulumi.Input<string>[]>;
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    drmaManualMode?: pulumi.Input<string>;
    overrideAnalysis?: pulumi.Input<string>;
    overrideBand?: pulumi.Input<string>;
    overrideChannel?: pulumi.Input<string>;
    overrideTxpower?: pulumi.Input<string>;
    overrideVaps?: pulumi.Input<string>;
    powerLevel?: pulumi.Input<number>;
    powerMode?: pulumi.Input<string>;
    powerValue?: pulumi.Input<number>;
    radioId?: pulumi.Input<number>;
    spectrumAnalysis?: pulumi.Input<string>;
    vap1?: pulumi.Input<string>;
    vap2?: pulumi.Input<string>;
    vap3?: pulumi.Input<string>;
    vap4?: pulumi.Input<string>;
    vap5?: pulumi.Input<string>;
    vap6?: pulumi.Input<string>;
    vap7?: pulumi.Input<string>;
    vap8?: pulumi.Input<string>;
    vapAll?: pulumi.Input<string>;
    vaps?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WirelesscontrollerWtpRadio3 {
    autoPowerHigh?: pulumi.Input<number>;
    autoPowerLevel?: pulumi.Input<string>;
    autoPowerLow?: pulumi.Input<number>;
    autoPowerTarget?: pulumi.Input<string>;
    bands?: pulumi.Input<pulumi.Input<string>[]>;
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    drmaManualMode?: pulumi.Input<string>;
    overrideAnalysis?: pulumi.Input<string>;
    overrideBand?: pulumi.Input<string>;
    overrideChannel?: pulumi.Input<string>;
    overrideTxpower?: pulumi.Input<string>;
    overrideVaps?: pulumi.Input<string>;
    powerLevel?: pulumi.Input<number>;
    powerMode?: pulumi.Input<string>;
    powerValue?: pulumi.Input<number>;
    radioId?: pulumi.Input<number>;
    spectrumAnalysis?: pulumi.Input<string>;
    vap1?: pulumi.Input<string>;
    vap2?: pulumi.Input<string>;
    vap3?: pulumi.Input<string>;
    vap4?: pulumi.Input<string>;
    vap5?: pulumi.Input<string>;
    vap6?: pulumi.Input<string>;
    vap7?: pulumi.Input<string>;
    vap8?: pulumi.Input<string>;
    vapAll?: pulumi.Input<string>;
    vaps?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WirelesscontrollerWtpRadio4 {
    autoPowerHigh?: pulumi.Input<number>;
    autoPowerLevel?: pulumi.Input<string>;
    autoPowerLow?: pulumi.Input<number>;
    autoPowerTarget?: pulumi.Input<string>;
    bands?: pulumi.Input<pulumi.Input<string>[]>;
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    drmaManualMode?: pulumi.Input<string>;
    overrideAnalysis?: pulumi.Input<string>;
    overrideBand?: pulumi.Input<string>;
    overrideChannel?: pulumi.Input<string>;
    overrideTxpower?: pulumi.Input<string>;
    overrideVaps?: pulumi.Input<string>;
    powerLevel?: pulumi.Input<number>;
    powerMode?: pulumi.Input<string>;
    powerValue?: pulumi.Input<number>;
    radioId?: pulumi.Input<number>;
    spectrumAnalysis?: pulumi.Input<string>;
    vap1?: pulumi.Input<string>;
    vap2?: pulumi.Input<string>;
    vap3?: pulumi.Input<string>;
    vap4?: pulumi.Input<string>;
    vap5?: pulumi.Input<string>;
    vap6?: pulumi.Input<string>;
    vap7?: pulumi.Input<string>;
    vap8?: pulumi.Input<string>;
    vapAll?: pulumi.Input<string>;
    vaps?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WirelesscontrollerWtpSplitTunnelingAcl {
    destIps?: pulumi.Input<pulumi.Input<string>[]>;
    id?: pulumi.Input<number>;
}

export interface WirelesscontrollerWtpprofileDenyMacList {
    id?: pulumi.Input<number>;
    mac?: pulumi.Input<string>;
}

export interface WirelesscontrollerWtpprofileEslSesDongle {
    apcAddrType?: pulumi.Input<string>;
    apcFqdn?: pulumi.Input<string>;
    apcIp?: pulumi.Input<string>;
    apcPort?: pulumi.Input<number>;
    coexLevel?: pulumi.Input<string>;
    complianceLevel?: pulumi.Input<string>;
    eslChannel?: pulumi.Input<string>;
    outputPower?: pulumi.Input<string>;
    scdEnable?: pulumi.Input<string>;
    tlsCertVerification?: pulumi.Input<string>;
    tlsFqdnVerification?: pulumi.Input<string>;
}

export interface WirelesscontrollerWtpprofileLan {
    port1Mode?: pulumi.Input<string>;
    port1Ssids?: pulumi.Input<pulumi.Input<string>[]>;
    port2Mode?: pulumi.Input<string>;
    port2Ssids?: pulumi.Input<pulumi.Input<string>[]>;
    port3Mode?: pulumi.Input<string>;
    port3Ssids?: pulumi.Input<pulumi.Input<string>[]>;
    port4Mode?: pulumi.Input<string>;
    port4Ssids?: pulumi.Input<pulumi.Input<string>[]>;
    port5Mode?: pulumi.Input<string>;
    port5Ssids?: pulumi.Input<pulumi.Input<string>[]>;
    port6Mode?: pulumi.Input<string>;
    port6Ssids?: pulumi.Input<pulumi.Input<string>[]>;
    port7Mode?: pulumi.Input<string>;
    port7Ssids?: pulumi.Input<pulumi.Input<string>[]>;
    port8Mode?: pulumi.Input<string>;
    port8Ssids?: pulumi.Input<pulumi.Input<string>[]>;
    portEslMode?: pulumi.Input<string>;
    portEslSsids?: pulumi.Input<pulumi.Input<string>[]>;
    portMode?: pulumi.Input<string>;
    portSsids?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WirelesscontrollerWtpprofileLbs {
    aeroscout?: pulumi.Input<string>;
    aeroscoutApMac?: pulumi.Input<string>;
    aeroscoutMmuReport?: pulumi.Input<string>;
    aeroscoutMu?: pulumi.Input<string>;
    aeroscoutMuFactor?: pulumi.Input<number>;
    aeroscoutMuTimeout?: pulumi.Input<number>;
    aeroscoutServerIp?: pulumi.Input<string>;
    aeroscoutServerPort?: pulumi.Input<number>;
    ekahauBlinkMode?: pulumi.Input<string>;
    ekahauTag?: pulumi.Input<string>;
    ercServerIp?: pulumi.Input<string>;
    ercServerPort?: pulumi.Input<number>;
    fortipresence?: pulumi.Input<string>;
    fortipresenceBle?: pulumi.Input<string>;
    fortipresenceFrequency?: pulumi.Input<number>;
    fortipresencePort?: pulumi.Input<number>;
    fortipresenceProject?: pulumi.Input<string>;
    fortipresenceRogue?: pulumi.Input<string>;
    fortipresenceSecrets?: pulumi.Input<pulumi.Input<string>[]>;
    fortipresenceServer?: pulumi.Input<string>;
    fortipresenceServerAddrType?: pulumi.Input<string>;
    fortipresenceServerFqdn?: pulumi.Input<string>;
    fortipresenceUnassoc?: pulumi.Input<string>;
    polestar?: pulumi.Input<string>;
    polestarAccumulationInterval?: pulumi.Input<number>;
    polestarAssetAddrgrpLists?: pulumi.Input<pulumi.Input<string>[]>;
    polestarAssetUuidList1?: pulumi.Input<string>;
    polestarAssetUuidList2?: pulumi.Input<string>;
    polestarAssetUuidList3?: pulumi.Input<string>;
    polestarAssetUuidList4?: pulumi.Input<string>;
    polestarProtocol?: pulumi.Input<string>;
    polestarReportingInterval?: pulumi.Input<number>;
    polestarServerFqdn?: pulumi.Input<string>;
    polestarServerPath?: pulumi.Input<string>;
    polestarServerPort?: pulumi.Input<number>;
    polestarServerToken?: pulumi.Input<string>;
    stationLocate?: pulumi.Input<string>;
}

export interface WirelesscontrollerWtpprofilePlatform {
    _localPlatformStr?: pulumi.Input<string>;
    ddscan?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface WirelesscontrollerWtpprofileRadio1 {
    airtimeFairness?: pulumi.Input<string>;
    amsdu?: pulumi.Input<string>;
    apHandoff?: pulumi.Input<string>;
    apSnifferAddr?: pulumi.Input<string>;
    apSnifferBufsize?: pulumi.Input<number>;
    apSnifferChan?: pulumi.Input<number>;
    apSnifferCtl?: pulumi.Input<string>;
    apSnifferData?: pulumi.Input<string>;
    apSnifferMgmtBeacon?: pulumi.Input<string>;
    apSnifferMgmtOther?: pulumi.Input<string>;
    apSnifferMgmtProbe?: pulumi.Input<string>;
    arrpProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    autoPowerHigh?: pulumi.Input<number>;
    autoPowerLevel?: pulumi.Input<string>;
    autoPowerLow?: pulumi.Input<number>;
    autoPowerTarget?: pulumi.Input<string>;
    band5gType?: pulumi.Input<string>;
    bands?: pulumi.Input<pulumi.Input<string>[]>;
    bandwidthAdmissionControl?: pulumi.Input<string>;
    bandwidthCapacity?: pulumi.Input<number>;
    beaconInterval?: pulumi.Input<number>;
    bssColor?: pulumi.Input<number>;
    bssColorMode?: pulumi.Input<string>;
    callAdmissionControl?: pulumi.Input<string>;
    callCapacity?: pulumi.Input<number>;
    channelBonding?: pulumi.Input<string>;
    channelBondingExt?: pulumi.Input<string>;
    channelUtilization?: pulumi.Input<string>;
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    coexistence?: pulumi.Input<string>;
    darrp?: pulumi.Input<string>;
    drma?: pulumi.Input<string>;
    drmaSensitivity?: pulumi.Input<string>;
    dtim?: pulumi.Input<number>;
    fragThreshold?: pulumi.Input<number>;
    frequencyHandoff?: pulumi.Input<string>;
    iperfProtocol?: pulumi.Input<string>;
    iperfServerPort?: pulumi.Input<number>;
    maxClients?: pulumi.Input<number>;
    maxDistance?: pulumi.Input<number>;
    mimoMode?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    n80211d?: pulumi.Input<string>;
    optionalAntenna?: pulumi.Input<string>;
    optionalAntennaGain?: pulumi.Input<string>;
    powerLevel?: pulumi.Input<number>;
    powerMode?: pulumi.Input<string>;
    powerValue?: pulumi.Input<number>;
    powersaveOptimizes?: pulumi.Input<pulumi.Input<string>[]>;
    protectionMode?: pulumi.Input<string>;
    radioId?: pulumi.Input<number>;
    rtsThreshold?: pulumi.Input<number>;
    samBssid?: pulumi.Input<string>;
    samCaCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    samCaptivePortal?: pulumi.Input<string>;
    samClientCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    samCwpFailureString?: pulumi.Input<string>;
    samCwpMatchString?: pulumi.Input<string>;
    samCwpPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    samCwpSuccessString?: pulumi.Input<string>;
    samCwpTestUrl?: pulumi.Input<string>;
    samCwpUsername?: pulumi.Input<string>;
    samEapMethod?: pulumi.Input<string>;
    samPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    samPrivateKeyPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    samPrivateKeys?: pulumi.Input<pulumi.Input<string>[]>;
    samReportIntv?: pulumi.Input<number>;
    samSecurityType?: pulumi.Input<string>;
    samServer?: pulumi.Input<string>;
    samServerFqdn?: pulumi.Input<string>;
    samServerIp?: pulumi.Input<string>;
    samServerType?: pulumi.Input<string>;
    samSsid?: pulumi.Input<string>;
    samTest?: pulumi.Input<string>;
    samUsername?: pulumi.Input<string>;
    shortGuardInterval?: pulumi.Input<string>;
    spectrumAnalysis?: pulumi.Input<string>;
    transmitOptimizes?: pulumi.Input<pulumi.Input<string>[]>;
    vap1?: pulumi.Input<string>;
    vap2?: pulumi.Input<string>;
    vap3?: pulumi.Input<string>;
    vap4?: pulumi.Input<string>;
    vap5?: pulumi.Input<string>;
    vap6?: pulumi.Input<string>;
    vap7?: pulumi.Input<string>;
    vap8?: pulumi.Input<string>;
    vapAll?: pulumi.Input<string>;
    vaps?: pulumi.Input<pulumi.Input<string>[]>;
    widsProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    zeroWaitDfs?: pulumi.Input<string>;
}

export interface WirelesscontrollerWtpprofileRadio2 {
    airtimeFairness?: pulumi.Input<string>;
    amsdu?: pulumi.Input<string>;
    apHandoff?: pulumi.Input<string>;
    apSnifferAddr?: pulumi.Input<string>;
    apSnifferBufsize?: pulumi.Input<number>;
    apSnifferChan?: pulumi.Input<number>;
    apSnifferCtl?: pulumi.Input<string>;
    apSnifferData?: pulumi.Input<string>;
    apSnifferMgmtBeacon?: pulumi.Input<string>;
    apSnifferMgmtOther?: pulumi.Input<string>;
    apSnifferMgmtProbe?: pulumi.Input<string>;
    arrpProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    autoPowerHigh?: pulumi.Input<number>;
    autoPowerLevel?: pulumi.Input<string>;
    autoPowerLow?: pulumi.Input<number>;
    autoPowerTarget?: pulumi.Input<string>;
    band5gType?: pulumi.Input<string>;
    bands?: pulumi.Input<pulumi.Input<string>[]>;
    bandwidthAdmissionControl?: pulumi.Input<string>;
    bandwidthCapacity?: pulumi.Input<number>;
    beaconInterval?: pulumi.Input<number>;
    bssColor?: pulumi.Input<number>;
    bssColorMode?: pulumi.Input<string>;
    callAdmissionControl?: pulumi.Input<string>;
    callCapacity?: pulumi.Input<number>;
    channelBonding?: pulumi.Input<string>;
    channelBondingExt?: pulumi.Input<string>;
    channelUtilization?: pulumi.Input<string>;
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    coexistence?: pulumi.Input<string>;
    darrp?: pulumi.Input<string>;
    drma?: pulumi.Input<string>;
    drmaSensitivity?: pulumi.Input<string>;
    dtim?: pulumi.Input<number>;
    fragThreshold?: pulumi.Input<number>;
    frequencyHandoff?: pulumi.Input<string>;
    iperfProtocol?: pulumi.Input<string>;
    iperfServerPort?: pulumi.Input<number>;
    maxClients?: pulumi.Input<number>;
    maxDistance?: pulumi.Input<number>;
    mimoMode?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    n80211d?: pulumi.Input<string>;
    optionalAntenna?: pulumi.Input<string>;
    optionalAntennaGain?: pulumi.Input<string>;
    powerLevel?: pulumi.Input<number>;
    powerMode?: pulumi.Input<string>;
    powerValue?: pulumi.Input<number>;
    powersaveOptimizes?: pulumi.Input<pulumi.Input<string>[]>;
    protectionMode?: pulumi.Input<string>;
    radioId?: pulumi.Input<number>;
    rtsThreshold?: pulumi.Input<number>;
    samBssid?: pulumi.Input<string>;
    samCaCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    samCaptivePortal?: pulumi.Input<string>;
    samClientCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    samCwpFailureString?: pulumi.Input<string>;
    samCwpMatchString?: pulumi.Input<string>;
    samCwpPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    samCwpSuccessString?: pulumi.Input<string>;
    samCwpTestUrl?: pulumi.Input<string>;
    samCwpUsername?: pulumi.Input<string>;
    samEapMethod?: pulumi.Input<string>;
    samPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    samPrivateKeyPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    samPrivateKeys?: pulumi.Input<pulumi.Input<string>[]>;
    samReportIntv?: pulumi.Input<number>;
    samSecurityType?: pulumi.Input<string>;
    samServer?: pulumi.Input<string>;
    samServerFqdn?: pulumi.Input<string>;
    samServerIp?: pulumi.Input<string>;
    samServerType?: pulumi.Input<string>;
    samSsid?: pulumi.Input<string>;
    samTest?: pulumi.Input<string>;
    samUsername?: pulumi.Input<string>;
    shortGuardInterval?: pulumi.Input<string>;
    spectrumAnalysis?: pulumi.Input<string>;
    transmitOptimizes?: pulumi.Input<pulumi.Input<string>[]>;
    vap1?: pulumi.Input<string>;
    vap2?: pulumi.Input<string>;
    vap3?: pulumi.Input<string>;
    vap4?: pulumi.Input<string>;
    vap5?: pulumi.Input<string>;
    vap6?: pulumi.Input<string>;
    vap7?: pulumi.Input<string>;
    vap8?: pulumi.Input<string>;
    vapAll?: pulumi.Input<string>;
    vaps?: pulumi.Input<pulumi.Input<string>[]>;
    widsProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    zeroWaitDfs?: pulumi.Input<string>;
}

export interface WirelesscontrollerWtpprofileRadio3 {
    airtimeFairness?: pulumi.Input<string>;
    amsdu?: pulumi.Input<string>;
    apHandoff?: pulumi.Input<string>;
    apSnifferAddr?: pulumi.Input<string>;
    apSnifferBufsize?: pulumi.Input<number>;
    apSnifferChan?: pulumi.Input<number>;
    apSnifferCtl?: pulumi.Input<string>;
    apSnifferData?: pulumi.Input<string>;
    apSnifferMgmtBeacon?: pulumi.Input<string>;
    apSnifferMgmtOther?: pulumi.Input<string>;
    apSnifferMgmtProbe?: pulumi.Input<string>;
    arrpProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    autoPowerHigh?: pulumi.Input<number>;
    autoPowerLevel?: pulumi.Input<string>;
    autoPowerLow?: pulumi.Input<number>;
    autoPowerTarget?: pulumi.Input<string>;
    band5gType?: pulumi.Input<string>;
    bands?: pulumi.Input<pulumi.Input<string>[]>;
    bandwidthAdmissionControl?: pulumi.Input<string>;
    bandwidthCapacity?: pulumi.Input<number>;
    beaconInterval?: pulumi.Input<number>;
    bssColor?: pulumi.Input<number>;
    bssColorMode?: pulumi.Input<string>;
    callAdmissionControl?: pulumi.Input<string>;
    callCapacity?: pulumi.Input<number>;
    channelBonding?: pulumi.Input<string>;
    channelBondingExt?: pulumi.Input<string>;
    channelUtilization?: pulumi.Input<string>;
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    coexistence?: pulumi.Input<string>;
    darrp?: pulumi.Input<string>;
    drma?: pulumi.Input<string>;
    drmaSensitivity?: pulumi.Input<string>;
    dtim?: pulumi.Input<number>;
    fragThreshold?: pulumi.Input<number>;
    frequencyHandoff?: pulumi.Input<string>;
    iperfProtocol?: pulumi.Input<string>;
    iperfServerPort?: pulumi.Input<number>;
    maxClients?: pulumi.Input<number>;
    maxDistance?: pulumi.Input<number>;
    mimoMode?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    n80211d?: pulumi.Input<string>;
    optionalAntenna?: pulumi.Input<string>;
    optionalAntennaGain?: pulumi.Input<string>;
    powerLevel?: pulumi.Input<number>;
    powerMode?: pulumi.Input<string>;
    powerValue?: pulumi.Input<number>;
    powersaveOptimizes?: pulumi.Input<pulumi.Input<string>[]>;
    protectionMode?: pulumi.Input<string>;
    radioId?: pulumi.Input<number>;
    rtsThreshold?: pulumi.Input<number>;
    samBssid?: pulumi.Input<string>;
    samCaCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    samCaptivePortal?: pulumi.Input<string>;
    samClientCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    samCwpFailureString?: pulumi.Input<string>;
    samCwpMatchString?: pulumi.Input<string>;
    samCwpPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    samCwpSuccessString?: pulumi.Input<string>;
    samCwpTestUrl?: pulumi.Input<string>;
    samCwpUsername?: pulumi.Input<string>;
    samEapMethod?: pulumi.Input<string>;
    samPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    samPrivateKeyPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    samPrivateKeys?: pulumi.Input<pulumi.Input<string>[]>;
    samReportIntv?: pulumi.Input<number>;
    samSecurityType?: pulumi.Input<string>;
    samServer?: pulumi.Input<string>;
    samServerFqdn?: pulumi.Input<string>;
    samServerIp?: pulumi.Input<string>;
    samServerType?: pulumi.Input<string>;
    samSsid?: pulumi.Input<string>;
    samTest?: pulumi.Input<string>;
    samUsername?: pulumi.Input<string>;
    shortGuardInterval?: pulumi.Input<string>;
    spectrumAnalysis?: pulumi.Input<string>;
    transmitOptimizes?: pulumi.Input<pulumi.Input<string>[]>;
    vap1?: pulumi.Input<string>;
    vap2?: pulumi.Input<string>;
    vap3?: pulumi.Input<string>;
    vap4?: pulumi.Input<string>;
    vap5?: pulumi.Input<string>;
    vap6?: pulumi.Input<string>;
    vap7?: pulumi.Input<string>;
    vap8?: pulumi.Input<string>;
    vapAll?: pulumi.Input<string>;
    vaps?: pulumi.Input<pulumi.Input<string>[]>;
    widsProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    zeroWaitDfs?: pulumi.Input<string>;
}

export interface WirelesscontrollerWtpprofileRadio4 {
    airtimeFairness?: pulumi.Input<string>;
    amsdu?: pulumi.Input<string>;
    apHandoff?: pulumi.Input<string>;
    apSnifferAddr?: pulumi.Input<string>;
    apSnifferBufsize?: pulumi.Input<number>;
    apSnifferChan?: pulumi.Input<number>;
    apSnifferCtl?: pulumi.Input<string>;
    apSnifferData?: pulumi.Input<string>;
    apSnifferMgmtBeacon?: pulumi.Input<string>;
    apSnifferMgmtOther?: pulumi.Input<string>;
    apSnifferMgmtProbe?: pulumi.Input<string>;
    arrpProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    autoPowerHigh?: pulumi.Input<number>;
    autoPowerLevel?: pulumi.Input<string>;
    autoPowerLow?: pulumi.Input<number>;
    autoPowerTarget?: pulumi.Input<string>;
    band5gType?: pulumi.Input<string>;
    bands?: pulumi.Input<pulumi.Input<string>[]>;
    bandwidthAdmissionControl?: pulumi.Input<string>;
    bandwidthCapacity?: pulumi.Input<number>;
    beaconInterval?: pulumi.Input<number>;
    bssColor?: pulumi.Input<number>;
    bssColorMode?: pulumi.Input<string>;
    callAdmissionControl?: pulumi.Input<string>;
    callCapacity?: pulumi.Input<number>;
    channelBonding?: pulumi.Input<string>;
    channelBondingExt?: pulumi.Input<string>;
    channelUtilization?: pulumi.Input<string>;
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    coexistence?: pulumi.Input<string>;
    darrp?: pulumi.Input<string>;
    drma?: pulumi.Input<string>;
    drmaSensitivity?: pulumi.Input<string>;
    dtim?: pulumi.Input<number>;
    fragThreshold?: pulumi.Input<number>;
    frequencyHandoff?: pulumi.Input<string>;
    iperfProtocol?: pulumi.Input<string>;
    iperfServerPort?: pulumi.Input<number>;
    maxClients?: pulumi.Input<number>;
    maxDistance?: pulumi.Input<number>;
    mimoMode?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    n80211d?: pulumi.Input<string>;
    optionalAntenna?: pulumi.Input<string>;
    optionalAntennaGain?: pulumi.Input<string>;
    powerLevel?: pulumi.Input<number>;
    powerMode?: pulumi.Input<string>;
    powerValue?: pulumi.Input<number>;
    powersaveOptimizes?: pulumi.Input<pulumi.Input<string>[]>;
    protectionMode?: pulumi.Input<string>;
    radioId?: pulumi.Input<number>;
    rtsThreshold?: pulumi.Input<number>;
    samBssid?: pulumi.Input<string>;
    samCaCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    samCaptivePortal?: pulumi.Input<string>;
    samClientCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    samCwpFailureString?: pulumi.Input<string>;
    samCwpMatchString?: pulumi.Input<string>;
    samCwpPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    samCwpSuccessString?: pulumi.Input<string>;
    samCwpTestUrl?: pulumi.Input<string>;
    samCwpUsername?: pulumi.Input<string>;
    samEapMethod?: pulumi.Input<string>;
    samPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    samPrivateKeyPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    samPrivateKeys?: pulumi.Input<pulumi.Input<string>[]>;
    samReportIntv?: pulumi.Input<number>;
    samSecurityType?: pulumi.Input<string>;
    samServer?: pulumi.Input<string>;
    samServerFqdn?: pulumi.Input<string>;
    samServerIp?: pulumi.Input<string>;
    samServerType?: pulumi.Input<string>;
    samSsid?: pulumi.Input<string>;
    samTest?: pulumi.Input<string>;
    samUsername?: pulumi.Input<string>;
    shortGuardInterval?: pulumi.Input<string>;
    spectrumAnalysis?: pulumi.Input<string>;
    transmitOptimizes?: pulumi.Input<pulumi.Input<string>[]>;
    vap1?: pulumi.Input<string>;
    vap2?: pulumi.Input<string>;
    vap3?: pulumi.Input<string>;
    vap4?: pulumi.Input<string>;
    vap5?: pulumi.Input<string>;
    vap6?: pulumi.Input<string>;
    vap7?: pulumi.Input<string>;
    vap8?: pulumi.Input<string>;
    vapAll?: pulumi.Input<string>;
    vaps?: pulumi.Input<pulumi.Input<string>[]>;
    widsProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    zeroWaitDfs?: pulumi.Input<string>;
}

export interface WirelesscontrollerWtpprofileSplitTunnelingAcl {
    destIps?: pulumi.Input<pulumi.Input<string>[]>;
    id?: pulumi.Input<number>;
}
