// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SystemAccprofile extends pulumi.CustomResource {
    /**
     * Get an existing SystemAccprofile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemAccprofileState, opts?: pulumi.CustomResourceOptions): SystemAccprofile {
        return new SystemAccprofile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/systemAccprofile:SystemAccprofile';

    /**
     * Returns true if the given object is an instance of SystemAccprofile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemAccprofile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemAccprofile.__pulumiType;
    }

    public readonly admintimeout!: pulumi.Output<number | undefined>;
    public readonly admintimeoutOverride!: pulumi.Output<string>;
    public readonly authgrp!: pulumi.Output<string>;
    public readonly cliConfig!: pulumi.Output<string>;
    public readonly cliDiagnose!: pulumi.Output<string>;
    public readonly cliExec!: pulumi.Output<string>;
    public readonly cliGet!: pulumi.Output<string>;
    public readonly cliShow!: pulumi.Output<string>;
    public readonly comments!: pulumi.Output<string | undefined>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly ftviewgrp!: pulumi.Output<string>;
    public readonly fwgrp!: pulumi.Output<string>;
    public readonly fwgrpPermission!: pulumi.Output<outputs.SystemAccprofileFwgrpPermission | undefined>;
    public readonly loggrp!: pulumi.Output<string>;
    public readonly loggrpPermission!: pulumi.Output<outputs.SystemAccprofileLoggrpPermission | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly netgrp!: pulumi.Output<string>;
    public readonly netgrpPermission!: pulumi.Output<outputs.SystemAccprofileNetgrpPermission | undefined>;
    public readonly scope!: pulumi.Output<string>;
    public readonly secfabgrp!: pulumi.Output<string>;
    public readonly sysgrp!: pulumi.Output<string>;
    public readonly sysgrpPermission!: pulumi.Output<outputs.SystemAccprofileSysgrpPermission | undefined>;
    public readonly systemDiagnostics!: pulumi.Output<string>;
    public readonly systemExecuteSsh!: pulumi.Output<string>;
    public readonly systemExecuteTelnet!: pulumi.Output<string>;
    public readonly utmgrp!: pulumi.Output<string>;
    public readonly utmgrpPermission!: pulumi.Output<outputs.SystemAccprofileUtmgrpPermission | undefined>;
    public readonly vpngrp!: pulumi.Output<string>;
    public readonly wanoptgrp!: pulumi.Output<string>;
    public readonly wifi!: pulumi.Output<string>;

    /**
     * Create a SystemAccprofile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemAccprofileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemAccprofileArgs | SystemAccprofileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemAccprofileState | undefined;
            resourceInputs["admintimeout"] = state ? state.admintimeout : undefined;
            resourceInputs["admintimeoutOverride"] = state ? state.admintimeoutOverride : undefined;
            resourceInputs["authgrp"] = state ? state.authgrp : undefined;
            resourceInputs["cliConfig"] = state ? state.cliConfig : undefined;
            resourceInputs["cliDiagnose"] = state ? state.cliDiagnose : undefined;
            resourceInputs["cliExec"] = state ? state.cliExec : undefined;
            resourceInputs["cliGet"] = state ? state.cliGet : undefined;
            resourceInputs["cliShow"] = state ? state.cliShow : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["ftviewgrp"] = state ? state.ftviewgrp : undefined;
            resourceInputs["fwgrp"] = state ? state.fwgrp : undefined;
            resourceInputs["fwgrpPermission"] = state ? state.fwgrpPermission : undefined;
            resourceInputs["loggrp"] = state ? state.loggrp : undefined;
            resourceInputs["loggrpPermission"] = state ? state.loggrpPermission : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["netgrp"] = state ? state.netgrp : undefined;
            resourceInputs["netgrpPermission"] = state ? state.netgrpPermission : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["secfabgrp"] = state ? state.secfabgrp : undefined;
            resourceInputs["sysgrp"] = state ? state.sysgrp : undefined;
            resourceInputs["sysgrpPermission"] = state ? state.sysgrpPermission : undefined;
            resourceInputs["systemDiagnostics"] = state ? state.systemDiagnostics : undefined;
            resourceInputs["systemExecuteSsh"] = state ? state.systemExecuteSsh : undefined;
            resourceInputs["systemExecuteTelnet"] = state ? state.systemExecuteTelnet : undefined;
            resourceInputs["utmgrp"] = state ? state.utmgrp : undefined;
            resourceInputs["utmgrpPermission"] = state ? state.utmgrpPermission : undefined;
            resourceInputs["vpngrp"] = state ? state.vpngrp : undefined;
            resourceInputs["wanoptgrp"] = state ? state.wanoptgrp : undefined;
            resourceInputs["wifi"] = state ? state.wifi : undefined;
        } else {
            const args = argsOrState as SystemAccprofileArgs | undefined;
            resourceInputs["admintimeout"] = args ? args.admintimeout : undefined;
            resourceInputs["admintimeoutOverride"] = args ? args.admintimeoutOverride : undefined;
            resourceInputs["authgrp"] = args ? args.authgrp : undefined;
            resourceInputs["cliConfig"] = args ? args.cliConfig : undefined;
            resourceInputs["cliDiagnose"] = args ? args.cliDiagnose : undefined;
            resourceInputs["cliExec"] = args ? args.cliExec : undefined;
            resourceInputs["cliGet"] = args ? args.cliGet : undefined;
            resourceInputs["cliShow"] = args ? args.cliShow : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["ftviewgrp"] = args ? args.ftviewgrp : undefined;
            resourceInputs["fwgrp"] = args ? args.fwgrp : undefined;
            resourceInputs["fwgrpPermission"] = args ? args.fwgrpPermission : undefined;
            resourceInputs["loggrp"] = args ? args.loggrp : undefined;
            resourceInputs["loggrpPermission"] = args ? args.loggrpPermission : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["netgrp"] = args ? args.netgrp : undefined;
            resourceInputs["netgrpPermission"] = args ? args.netgrpPermission : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["secfabgrp"] = args ? args.secfabgrp : undefined;
            resourceInputs["sysgrp"] = args ? args.sysgrp : undefined;
            resourceInputs["sysgrpPermission"] = args ? args.sysgrpPermission : undefined;
            resourceInputs["systemDiagnostics"] = args ? args.systemDiagnostics : undefined;
            resourceInputs["systemExecuteSsh"] = args ? args.systemExecuteSsh : undefined;
            resourceInputs["systemExecuteTelnet"] = args ? args.systemExecuteTelnet : undefined;
            resourceInputs["utmgrp"] = args ? args.utmgrp : undefined;
            resourceInputs["utmgrpPermission"] = args ? args.utmgrpPermission : undefined;
            resourceInputs["vpngrp"] = args ? args.vpngrp : undefined;
            resourceInputs["wanoptgrp"] = args ? args.wanoptgrp : undefined;
            resourceInputs["wifi"] = args ? args.wifi : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SystemAccprofile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemAccprofile resources.
 */
export interface SystemAccprofileState {
    admintimeout?: pulumi.Input<number>;
    admintimeoutOverride?: pulumi.Input<string>;
    authgrp?: pulumi.Input<string>;
    cliConfig?: pulumi.Input<string>;
    cliDiagnose?: pulumi.Input<string>;
    cliExec?: pulumi.Input<string>;
    cliGet?: pulumi.Input<string>;
    cliShow?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    ftviewgrp?: pulumi.Input<string>;
    fwgrp?: pulumi.Input<string>;
    fwgrpPermission?: pulumi.Input<inputs.SystemAccprofileFwgrpPermission>;
    loggrp?: pulumi.Input<string>;
    loggrpPermission?: pulumi.Input<inputs.SystemAccprofileLoggrpPermission>;
    name?: pulumi.Input<string>;
    netgrp?: pulumi.Input<string>;
    netgrpPermission?: pulumi.Input<inputs.SystemAccprofileNetgrpPermission>;
    scope?: pulumi.Input<string>;
    secfabgrp?: pulumi.Input<string>;
    sysgrp?: pulumi.Input<string>;
    sysgrpPermission?: pulumi.Input<inputs.SystemAccprofileSysgrpPermission>;
    systemDiagnostics?: pulumi.Input<string>;
    systemExecuteSsh?: pulumi.Input<string>;
    systemExecuteTelnet?: pulumi.Input<string>;
    utmgrp?: pulumi.Input<string>;
    utmgrpPermission?: pulumi.Input<inputs.SystemAccprofileUtmgrpPermission>;
    vpngrp?: pulumi.Input<string>;
    wanoptgrp?: pulumi.Input<string>;
    wifi?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SystemAccprofile resource.
 */
export interface SystemAccprofileArgs {
    admintimeout?: pulumi.Input<number>;
    admintimeoutOverride?: pulumi.Input<string>;
    authgrp?: pulumi.Input<string>;
    cliConfig?: pulumi.Input<string>;
    cliDiagnose?: pulumi.Input<string>;
    cliExec?: pulumi.Input<string>;
    cliGet?: pulumi.Input<string>;
    cliShow?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    ftviewgrp?: pulumi.Input<string>;
    fwgrp?: pulumi.Input<string>;
    fwgrpPermission?: pulumi.Input<inputs.SystemAccprofileFwgrpPermission>;
    loggrp?: pulumi.Input<string>;
    loggrpPermission?: pulumi.Input<inputs.SystemAccprofileLoggrpPermission>;
    name?: pulumi.Input<string>;
    netgrp?: pulumi.Input<string>;
    netgrpPermission?: pulumi.Input<inputs.SystemAccprofileNetgrpPermission>;
    scope?: pulumi.Input<string>;
    secfabgrp?: pulumi.Input<string>;
    sysgrp?: pulumi.Input<string>;
    sysgrpPermission?: pulumi.Input<inputs.SystemAccprofileSysgrpPermission>;
    systemDiagnostics?: pulumi.Input<string>;
    systemExecuteSsh?: pulumi.Input<string>;
    systemExecuteTelnet?: pulumi.Input<string>;
    utmgrp?: pulumi.Input<string>;
    utmgrpPermission?: pulumi.Input<inputs.SystemAccprofileUtmgrpPermission>;
    vpngrp?: pulumi.Input<string>;
    wanoptgrp?: pulumi.Input<string>;
    wifi?: pulumi.Input<string>;
}
