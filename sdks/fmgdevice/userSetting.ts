// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class UserSetting extends pulumi.CustomResource {
    /**
     * Get an existing UserSetting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserSettingState, opts?: pulumi.CustomResourceOptions): UserSetting {
        return new UserSetting(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/userSetting:UserSetting';

    /**
     * Returns true if the given object is an instance of UserSetting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserSetting {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserSetting.__pulumiType;
    }

    public readonly authBlackoutTime!: pulumi.Output<number | undefined>;
    public readonly authCaCerts!: pulumi.Output<string[]>;
    public readonly authCerts!: pulumi.Output<string[]>;
    public readonly authHttpBasic!: pulumi.Output<string>;
    public readonly authInvalidMax!: pulumi.Output<number>;
    public readonly authLockoutDuration!: pulumi.Output<number | undefined>;
    public readonly authLockoutThreshold!: pulumi.Output<number>;
    public readonly authOnDemand!: pulumi.Output<string>;
    public readonly authPortalTimeout!: pulumi.Output<number>;
    public readonly authPorts!: pulumi.Output<outputs.UserSettingAuthPort[] | undefined>;
    public readonly authSecureHttp!: pulumi.Output<string>;
    public readonly authSrcMac!: pulumi.Output<string>;
    public readonly authSslAllowRenegotiation!: pulumi.Output<string>;
    public readonly authSslMaxProtoVersion!: pulumi.Output<string | undefined>;
    public readonly authSslMinProtoVersion!: pulumi.Output<string>;
    public readonly authSslSigalgs!: pulumi.Output<string>;
    public readonly authTimeout!: pulumi.Output<number>;
    public readonly authTimeoutType!: pulumi.Output<string>;
    public readonly authTypes!: pulumi.Output<string[]>;
    public readonly defaultUserPasswordPolicies!: pulumi.Output<string[]>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly deviceVdom!: pulumi.Output<string>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly perPolicyDisclaimer!: pulumi.Output<string>;
    public readonly radiusSesTimeoutAct!: pulumi.Output<string>;

    /**
     * Create a UserSetting resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: UserSettingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserSettingArgs | UserSettingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserSettingState | undefined;
            resourceInputs["authBlackoutTime"] = state ? state.authBlackoutTime : undefined;
            resourceInputs["authCaCerts"] = state ? state.authCaCerts : undefined;
            resourceInputs["authCerts"] = state ? state.authCerts : undefined;
            resourceInputs["authHttpBasic"] = state ? state.authHttpBasic : undefined;
            resourceInputs["authInvalidMax"] = state ? state.authInvalidMax : undefined;
            resourceInputs["authLockoutDuration"] = state ? state.authLockoutDuration : undefined;
            resourceInputs["authLockoutThreshold"] = state ? state.authLockoutThreshold : undefined;
            resourceInputs["authOnDemand"] = state ? state.authOnDemand : undefined;
            resourceInputs["authPortalTimeout"] = state ? state.authPortalTimeout : undefined;
            resourceInputs["authPorts"] = state ? state.authPorts : undefined;
            resourceInputs["authSecureHttp"] = state ? state.authSecureHttp : undefined;
            resourceInputs["authSrcMac"] = state ? state.authSrcMac : undefined;
            resourceInputs["authSslAllowRenegotiation"] = state ? state.authSslAllowRenegotiation : undefined;
            resourceInputs["authSslMaxProtoVersion"] = state ? state.authSslMaxProtoVersion : undefined;
            resourceInputs["authSslMinProtoVersion"] = state ? state.authSslMinProtoVersion : undefined;
            resourceInputs["authSslSigalgs"] = state ? state.authSslSigalgs : undefined;
            resourceInputs["authTimeout"] = state ? state.authTimeout : undefined;
            resourceInputs["authTimeoutType"] = state ? state.authTimeoutType : undefined;
            resourceInputs["authTypes"] = state ? state.authTypes : undefined;
            resourceInputs["defaultUserPasswordPolicies"] = state ? state.defaultUserPasswordPolicies : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["deviceVdom"] = state ? state.deviceVdom : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["perPolicyDisclaimer"] = state ? state.perPolicyDisclaimer : undefined;
            resourceInputs["radiusSesTimeoutAct"] = state ? state.radiusSesTimeoutAct : undefined;
        } else {
            const args = argsOrState as UserSettingArgs | undefined;
            resourceInputs["authBlackoutTime"] = args ? args.authBlackoutTime : undefined;
            resourceInputs["authCaCerts"] = args ? args.authCaCerts : undefined;
            resourceInputs["authCerts"] = args ? args.authCerts : undefined;
            resourceInputs["authHttpBasic"] = args ? args.authHttpBasic : undefined;
            resourceInputs["authInvalidMax"] = args ? args.authInvalidMax : undefined;
            resourceInputs["authLockoutDuration"] = args ? args.authLockoutDuration : undefined;
            resourceInputs["authLockoutThreshold"] = args ? args.authLockoutThreshold : undefined;
            resourceInputs["authOnDemand"] = args ? args.authOnDemand : undefined;
            resourceInputs["authPortalTimeout"] = args ? args.authPortalTimeout : undefined;
            resourceInputs["authPorts"] = args ? args.authPorts : undefined;
            resourceInputs["authSecureHttp"] = args ? args.authSecureHttp : undefined;
            resourceInputs["authSrcMac"] = args ? args.authSrcMac : undefined;
            resourceInputs["authSslAllowRenegotiation"] = args ? args.authSslAllowRenegotiation : undefined;
            resourceInputs["authSslMaxProtoVersion"] = args ? args.authSslMaxProtoVersion : undefined;
            resourceInputs["authSslMinProtoVersion"] = args ? args.authSslMinProtoVersion : undefined;
            resourceInputs["authSslSigalgs"] = args ? args.authSslSigalgs : undefined;
            resourceInputs["authTimeout"] = args ? args.authTimeout : undefined;
            resourceInputs["authTimeoutType"] = args ? args.authTimeoutType : undefined;
            resourceInputs["authTypes"] = args ? args.authTypes : undefined;
            resourceInputs["defaultUserPasswordPolicies"] = args ? args.defaultUserPasswordPolicies : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["deviceVdom"] = args ? args.deviceVdom : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["perPolicyDisclaimer"] = args ? args.perPolicyDisclaimer : undefined;
            resourceInputs["radiusSesTimeoutAct"] = args ? args.radiusSesTimeoutAct : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserSetting.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering UserSetting resources.
 */
export interface UserSettingState {
    authBlackoutTime?: pulumi.Input<number>;
    authCaCerts?: pulumi.Input<pulumi.Input<string>[]>;
    authCerts?: pulumi.Input<pulumi.Input<string>[]>;
    authHttpBasic?: pulumi.Input<string>;
    authInvalidMax?: pulumi.Input<number>;
    authLockoutDuration?: pulumi.Input<number>;
    authLockoutThreshold?: pulumi.Input<number>;
    authOnDemand?: pulumi.Input<string>;
    authPortalTimeout?: pulumi.Input<number>;
    authPorts?: pulumi.Input<pulumi.Input<inputs.UserSettingAuthPort>[]>;
    authSecureHttp?: pulumi.Input<string>;
    authSrcMac?: pulumi.Input<string>;
    authSslAllowRenegotiation?: pulumi.Input<string>;
    authSslMaxProtoVersion?: pulumi.Input<string>;
    authSslMinProtoVersion?: pulumi.Input<string>;
    authSslSigalgs?: pulumi.Input<string>;
    authTimeout?: pulumi.Input<number>;
    authTimeoutType?: pulumi.Input<string>;
    authTypes?: pulumi.Input<pulumi.Input<string>[]>;
    defaultUserPasswordPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    perPolicyDisclaimer?: pulumi.Input<string>;
    radiusSesTimeoutAct?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserSetting resource.
 */
export interface UserSettingArgs {
    authBlackoutTime?: pulumi.Input<number>;
    authCaCerts?: pulumi.Input<pulumi.Input<string>[]>;
    authCerts?: pulumi.Input<pulumi.Input<string>[]>;
    authHttpBasic?: pulumi.Input<string>;
    authInvalidMax?: pulumi.Input<number>;
    authLockoutDuration?: pulumi.Input<number>;
    authLockoutThreshold?: pulumi.Input<number>;
    authOnDemand?: pulumi.Input<string>;
    authPortalTimeout?: pulumi.Input<number>;
    authPorts?: pulumi.Input<pulumi.Input<inputs.UserSettingAuthPort>[]>;
    authSecureHttp?: pulumi.Input<string>;
    authSrcMac?: pulumi.Input<string>;
    authSslAllowRenegotiation?: pulumi.Input<string>;
    authSslMaxProtoVersion?: pulumi.Input<string>;
    authSslMinProtoVersion?: pulumi.Input<string>;
    authSslSigalgs?: pulumi.Input<string>;
    authTimeout?: pulumi.Input<number>;
    authTimeoutType?: pulumi.Input<string>;
    authTypes?: pulumi.Input<pulumi.Input<string>[]>;
    defaultUserPasswordPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    perPolicyDisclaimer?: pulumi.Input<string>;
    radiusSesTimeoutAct?: pulumi.Input<string>;
}
