// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RouterMulticastInterfaceIgmp extends pulumi.CustomResource {
    /**
     * Get an existing RouterMulticastInterfaceIgmp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouterMulticastInterfaceIgmpState, opts?: pulumi.CustomResourceOptions): RouterMulticastInterfaceIgmp {
        return new RouterMulticastInterfaceIgmp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/routerMulticastInterfaceIgmp:RouterMulticastInterfaceIgmp';

    /**
     * Returns true if the given object is an instance of RouterMulticastInterfaceIgmp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RouterMulticastInterfaceIgmp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RouterMulticastInterfaceIgmp.__pulumiType;
    }

    public readonly accessGroups!: pulumi.Output<string[]>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly deviceVdom!: pulumi.Output<string>;
    public readonly immediateLeaveGroups!: pulumi.Output<string[]>;
    public readonly interface!: pulumi.Output<string>;
    public readonly lastMemberQueryCount!: pulumi.Output<number | undefined>;
    public readonly lastMemberQueryInterval!: pulumi.Output<number | undefined>;
    public readonly queryInterval!: pulumi.Output<number>;
    public readonly queryMaxResponseTime!: pulumi.Output<number>;
    public readonly queryTimeout!: pulumi.Output<number>;
    public readonly routerAlertCheck!: pulumi.Output<string>;
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a RouterMulticastInterfaceIgmp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RouterMulticastInterfaceIgmpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RouterMulticastInterfaceIgmpArgs | RouterMulticastInterfaceIgmpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RouterMulticastInterfaceIgmpState | undefined;
            resourceInputs["accessGroups"] = state ? state.accessGroups : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["deviceVdom"] = state ? state.deviceVdom : undefined;
            resourceInputs["immediateLeaveGroups"] = state ? state.immediateLeaveGroups : undefined;
            resourceInputs["interface"] = state ? state.interface : undefined;
            resourceInputs["lastMemberQueryCount"] = state ? state.lastMemberQueryCount : undefined;
            resourceInputs["lastMemberQueryInterval"] = state ? state.lastMemberQueryInterval : undefined;
            resourceInputs["queryInterval"] = state ? state.queryInterval : undefined;
            resourceInputs["queryMaxResponseTime"] = state ? state.queryMaxResponseTime : undefined;
            resourceInputs["queryTimeout"] = state ? state.queryTimeout : undefined;
            resourceInputs["routerAlertCheck"] = state ? state.routerAlertCheck : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as RouterMulticastInterfaceIgmpArgs | undefined;
            if ((!args || args.interface === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interface'");
            }
            resourceInputs["accessGroups"] = args ? args.accessGroups : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["deviceVdom"] = args ? args.deviceVdom : undefined;
            resourceInputs["immediateLeaveGroups"] = args ? args.immediateLeaveGroups : undefined;
            resourceInputs["interface"] = args ? args.interface : undefined;
            resourceInputs["lastMemberQueryCount"] = args ? args.lastMemberQueryCount : undefined;
            resourceInputs["lastMemberQueryInterval"] = args ? args.lastMemberQueryInterval : undefined;
            resourceInputs["queryInterval"] = args ? args.queryInterval : undefined;
            resourceInputs["queryMaxResponseTime"] = args ? args.queryMaxResponseTime : undefined;
            resourceInputs["queryTimeout"] = args ? args.queryTimeout : undefined;
            resourceInputs["routerAlertCheck"] = args ? args.routerAlertCheck : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RouterMulticastInterfaceIgmp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RouterMulticastInterfaceIgmp resources.
 */
export interface RouterMulticastInterfaceIgmpState {
    accessGroups?: pulumi.Input<pulumi.Input<string>[]>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    immediateLeaveGroups?: pulumi.Input<pulumi.Input<string>[]>;
    interface?: pulumi.Input<string>;
    lastMemberQueryCount?: pulumi.Input<number>;
    lastMemberQueryInterval?: pulumi.Input<number>;
    queryInterval?: pulumi.Input<number>;
    queryMaxResponseTime?: pulumi.Input<number>;
    queryTimeout?: pulumi.Input<number>;
    routerAlertCheck?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RouterMulticastInterfaceIgmp resource.
 */
export interface RouterMulticastInterfaceIgmpArgs {
    accessGroups?: pulumi.Input<pulumi.Input<string>[]>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    immediateLeaveGroups?: pulumi.Input<pulumi.Input<string>[]>;
    interface: pulumi.Input<string>;
    lastMemberQueryCount?: pulumi.Input<number>;
    lastMemberQueryInterval?: pulumi.Input<number>;
    queryInterval?: pulumi.Input<number>;
    queryMaxResponseTime?: pulumi.Input<number>;
    queryTimeout?: pulumi.Input<number>;
    routerAlertCheck?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}
