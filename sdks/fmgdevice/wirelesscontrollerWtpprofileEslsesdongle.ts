// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class WirelesscontrollerWtpprofileEslsesdongle extends pulumi.CustomResource {
    /**
     * Get an existing WirelesscontrollerWtpprofileEslsesdongle resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WirelesscontrollerWtpprofileEslsesdongleState, opts?: pulumi.CustomResourceOptions): WirelesscontrollerWtpprofileEslsesdongle {
        return new WirelesscontrollerWtpprofileEslsesdongle(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/wirelesscontrollerWtpprofileEslsesdongle:WirelesscontrollerWtpprofileEslsesdongle';

    /**
     * Returns true if the given object is an instance of WirelesscontrollerWtpprofileEslsesdongle.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WirelesscontrollerWtpprofileEslsesdongle {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WirelesscontrollerWtpprofileEslsesdongle.__pulumiType;
    }

    public readonly apcAddrType!: pulumi.Output<string>;
    public readonly apcFqdn!: pulumi.Output<string | undefined>;
    public readonly apcIp!: pulumi.Output<string>;
    public readonly apcPort!: pulumi.Output<number | undefined>;
    public readonly coexLevel!: pulumi.Output<string>;
    public readonly complianceLevel!: pulumi.Output<string>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly deviceVdom!: pulumi.Output<string>;
    public readonly eslChannel!: pulumi.Output<string>;
    public readonly outputPower!: pulumi.Output<string>;
    public readonly scdEnable!: pulumi.Output<string>;
    public readonly tlsCertVerification!: pulumi.Output<string>;
    public readonly tlsFqdnVerification!: pulumi.Output<string>;
    public readonly wtpProfile!: pulumi.Output<string>;

    /**
     * Create a WirelesscontrollerWtpprofileEslsesdongle resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WirelesscontrollerWtpprofileEslsesdongleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WirelesscontrollerWtpprofileEslsesdongleArgs | WirelesscontrollerWtpprofileEslsesdongleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WirelesscontrollerWtpprofileEslsesdongleState | undefined;
            resourceInputs["apcAddrType"] = state ? state.apcAddrType : undefined;
            resourceInputs["apcFqdn"] = state ? state.apcFqdn : undefined;
            resourceInputs["apcIp"] = state ? state.apcIp : undefined;
            resourceInputs["apcPort"] = state ? state.apcPort : undefined;
            resourceInputs["coexLevel"] = state ? state.coexLevel : undefined;
            resourceInputs["complianceLevel"] = state ? state.complianceLevel : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["deviceVdom"] = state ? state.deviceVdom : undefined;
            resourceInputs["eslChannel"] = state ? state.eslChannel : undefined;
            resourceInputs["outputPower"] = state ? state.outputPower : undefined;
            resourceInputs["scdEnable"] = state ? state.scdEnable : undefined;
            resourceInputs["tlsCertVerification"] = state ? state.tlsCertVerification : undefined;
            resourceInputs["tlsFqdnVerification"] = state ? state.tlsFqdnVerification : undefined;
            resourceInputs["wtpProfile"] = state ? state.wtpProfile : undefined;
        } else {
            const args = argsOrState as WirelesscontrollerWtpprofileEslsesdongleArgs | undefined;
            if ((!args || args.wtpProfile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'wtpProfile'");
            }
            resourceInputs["apcAddrType"] = args ? args.apcAddrType : undefined;
            resourceInputs["apcFqdn"] = args ? args.apcFqdn : undefined;
            resourceInputs["apcIp"] = args ? args.apcIp : undefined;
            resourceInputs["apcPort"] = args ? args.apcPort : undefined;
            resourceInputs["coexLevel"] = args ? args.coexLevel : undefined;
            resourceInputs["complianceLevel"] = args ? args.complianceLevel : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["deviceVdom"] = args ? args.deviceVdom : undefined;
            resourceInputs["eslChannel"] = args ? args.eslChannel : undefined;
            resourceInputs["outputPower"] = args ? args.outputPower : undefined;
            resourceInputs["scdEnable"] = args ? args.scdEnable : undefined;
            resourceInputs["tlsCertVerification"] = args ? args.tlsCertVerification : undefined;
            resourceInputs["tlsFqdnVerification"] = args ? args.tlsFqdnVerification : undefined;
            resourceInputs["wtpProfile"] = args ? args.wtpProfile : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WirelesscontrollerWtpprofileEslsesdongle.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WirelesscontrollerWtpprofileEslsesdongle resources.
 */
export interface WirelesscontrollerWtpprofileEslsesdongleState {
    apcAddrType?: pulumi.Input<string>;
    apcFqdn?: pulumi.Input<string>;
    apcIp?: pulumi.Input<string>;
    apcPort?: pulumi.Input<number>;
    coexLevel?: pulumi.Input<string>;
    complianceLevel?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    eslChannel?: pulumi.Input<string>;
    outputPower?: pulumi.Input<string>;
    scdEnable?: pulumi.Input<string>;
    tlsCertVerification?: pulumi.Input<string>;
    tlsFqdnVerification?: pulumi.Input<string>;
    wtpProfile?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WirelesscontrollerWtpprofileEslsesdongle resource.
 */
export interface WirelesscontrollerWtpprofileEslsesdongleArgs {
    apcAddrType?: pulumi.Input<string>;
    apcFqdn?: pulumi.Input<string>;
    apcIp?: pulumi.Input<string>;
    apcPort?: pulumi.Input<number>;
    coexLevel?: pulumi.Input<string>;
    complianceLevel?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    eslChannel?: pulumi.Input<string>;
    outputPower?: pulumi.Input<string>;
    scdEnable?: pulumi.Input<string>;
    tlsCertVerification?: pulumi.Input<string>;
    tlsFqdnVerification?: pulumi.Input<string>;
    wtpProfile: pulumi.Input<string>;
}
