// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class WebproxyGlobal extends pulumi.CustomResource {
    /**
     * Get an existing WebproxyGlobal resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WebproxyGlobalState, opts?: pulumi.CustomResourceOptions): WebproxyGlobal {
        return new WebproxyGlobal(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/webproxyGlobal:WebproxyGlobal';

    /**
     * Returns true if the given object is an instance of WebproxyGlobal.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WebproxyGlobal {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WebproxyGlobal.__pulumiType;
    }

    public readonly alwaysLearnClientIp!: pulumi.Output<string | undefined>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly deviceVdom!: pulumi.Output<string>;
    public readonly fastPolicyMatch!: pulumi.Output<string>;
    public readonly forwardProxyAuth!: pulumi.Output<string>;
    public readonly forwardServerAffinityTimeout!: pulumi.Output<number>;
    public readonly ldapUserCache!: pulumi.Output<string>;
    public readonly learnClientIp!: pulumi.Output<string>;
    public readonly learnClientIpFromHeaders!: pulumi.Output<string[]>;
    public readonly learnClientIpSrcaddr6s!: pulumi.Output<string[]>;
    public readonly learnClientIpSrcaddrs!: pulumi.Output<string[]>;
    public readonly logAppId!: pulumi.Output<string>;
    public readonly logForwardServer!: pulumi.Output<string>;
    public readonly logPolicyPending!: pulumi.Output<string>;
    public readonly maxMessageLength!: pulumi.Output<number>;
    public readonly maxRequestLength!: pulumi.Output<number>;
    public readonly maxWafBodyCacheLength!: pulumi.Output<number>;
    public readonly policyCategoryDeepInspect!: pulumi.Output<string>;
    public readonly proxyFqdn!: pulumi.Output<string>;
    public readonly proxyTransparentCertInspection!: pulumi.Output<string>;
    public readonly srcAffinityExemptAddr6s!: pulumi.Output<string[]>;
    public readonly srcAffinityExemptAddrs!: pulumi.Output<string[]>;
    public readonly sslCaCerts!: pulumi.Output<string[]>;
    public readonly sslCerts!: pulumi.Output<string[]>;
    public readonly strictWebCheck!: pulumi.Output<string>;
    public readonly tunnelNonHttp!: pulumi.Output<string | undefined>;
    public readonly unknownHttpVersion!: pulumi.Output<string | undefined>;
    public readonly webproxyProfiles!: pulumi.Output<string[]>;

    /**
     * Create a WebproxyGlobal resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: WebproxyGlobalArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WebproxyGlobalArgs | WebproxyGlobalState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WebproxyGlobalState | undefined;
            resourceInputs["alwaysLearnClientIp"] = state ? state.alwaysLearnClientIp : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["deviceVdom"] = state ? state.deviceVdom : undefined;
            resourceInputs["fastPolicyMatch"] = state ? state.fastPolicyMatch : undefined;
            resourceInputs["forwardProxyAuth"] = state ? state.forwardProxyAuth : undefined;
            resourceInputs["forwardServerAffinityTimeout"] = state ? state.forwardServerAffinityTimeout : undefined;
            resourceInputs["ldapUserCache"] = state ? state.ldapUserCache : undefined;
            resourceInputs["learnClientIp"] = state ? state.learnClientIp : undefined;
            resourceInputs["learnClientIpFromHeaders"] = state ? state.learnClientIpFromHeaders : undefined;
            resourceInputs["learnClientIpSrcaddr6s"] = state ? state.learnClientIpSrcaddr6s : undefined;
            resourceInputs["learnClientIpSrcaddrs"] = state ? state.learnClientIpSrcaddrs : undefined;
            resourceInputs["logAppId"] = state ? state.logAppId : undefined;
            resourceInputs["logForwardServer"] = state ? state.logForwardServer : undefined;
            resourceInputs["logPolicyPending"] = state ? state.logPolicyPending : undefined;
            resourceInputs["maxMessageLength"] = state ? state.maxMessageLength : undefined;
            resourceInputs["maxRequestLength"] = state ? state.maxRequestLength : undefined;
            resourceInputs["maxWafBodyCacheLength"] = state ? state.maxWafBodyCacheLength : undefined;
            resourceInputs["policyCategoryDeepInspect"] = state ? state.policyCategoryDeepInspect : undefined;
            resourceInputs["proxyFqdn"] = state ? state.proxyFqdn : undefined;
            resourceInputs["proxyTransparentCertInspection"] = state ? state.proxyTransparentCertInspection : undefined;
            resourceInputs["srcAffinityExemptAddr6s"] = state ? state.srcAffinityExemptAddr6s : undefined;
            resourceInputs["srcAffinityExemptAddrs"] = state ? state.srcAffinityExemptAddrs : undefined;
            resourceInputs["sslCaCerts"] = state ? state.sslCaCerts : undefined;
            resourceInputs["sslCerts"] = state ? state.sslCerts : undefined;
            resourceInputs["strictWebCheck"] = state ? state.strictWebCheck : undefined;
            resourceInputs["tunnelNonHttp"] = state ? state.tunnelNonHttp : undefined;
            resourceInputs["unknownHttpVersion"] = state ? state.unknownHttpVersion : undefined;
            resourceInputs["webproxyProfiles"] = state ? state.webproxyProfiles : undefined;
        } else {
            const args = argsOrState as WebproxyGlobalArgs | undefined;
            resourceInputs["alwaysLearnClientIp"] = args ? args.alwaysLearnClientIp : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["deviceVdom"] = args ? args.deviceVdom : undefined;
            resourceInputs["fastPolicyMatch"] = args ? args.fastPolicyMatch : undefined;
            resourceInputs["forwardProxyAuth"] = args ? args.forwardProxyAuth : undefined;
            resourceInputs["forwardServerAffinityTimeout"] = args ? args.forwardServerAffinityTimeout : undefined;
            resourceInputs["ldapUserCache"] = args ? args.ldapUserCache : undefined;
            resourceInputs["learnClientIp"] = args ? args.learnClientIp : undefined;
            resourceInputs["learnClientIpFromHeaders"] = args ? args.learnClientIpFromHeaders : undefined;
            resourceInputs["learnClientIpSrcaddr6s"] = args ? args.learnClientIpSrcaddr6s : undefined;
            resourceInputs["learnClientIpSrcaddrs"] = args ? args.learnClientIpSrcaddrs : undefined;
            resourceInputs["logAppId"] = args ? args.logAppId : undefined;
            resourceInputs["logForwardServer"] = args ? args.logForwardServer : undefined;
            resourceInputs["logPolicyPending"] = args ? args.logPolicyPending : undefined;
            resourceInputs["maxMessageLength"] = args ? args.maxMessageLength : undefined;
            resourceInputs["maxRequestLength"] = args ? args.maxRequestLength : undefined;
            resourceInputs["maxWafBodyCacheLength"] = args ? args.maxWafBodyCacheLength : undefined;
            resourceInputs["policyCategoryDeepInspect"] = args ? args.policyCategoryDeepInspect : undefined;
            resourceInputs["proxyFqdn"] = args ? args.proxyFqdn : undefined;
            resourceInputs["proxyTransparentCertInspection"] = args ? args.proxyTransparentCertInspection : undefined;
            resourceInputs["srcAffinityExemptAddr6s"] = args ? args.srcAffinityExemptAddr6s : undefined;
            resourceInputs["srcAffinityExemptAddrs"] = args ? args.srcAffinityExemptAddrs : undefined;
            resourceInputs["sslCaCerts"] = args ? args.sslCaCerts : undefined;
            resourceInputs["sslCerts"] = args ? args.sslCerts : undefined;
            resourceInputs["strictWebCheck"] = args ? args.strictWebCheck : undefined;
            resourceInputs["tunnelNonHttp"] = args ? args.tunnelNonHttp : undefined;
            resourceInputs["unknownHttpVersion"] = args ? args.unknownHttpVersion : undefined;
            resourceInputs["webproxyProfiles"] = args ? args.webproxyProfiles : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WebproxyGlobal.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WebproxyGlobal resources.
 */
export interface WebproxyGlobalState {
    alwaysLearnClientIp?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    fastPolicyMatch?: pulumi.Input<string>;
    forwardProxyAuth?: pulumi.Input<string>;
    forwardServerAffinityTimeout?: pulumi.Input<number>;
    ldapUserCache?: pulumi.Input<string>;
    learnClientIp?: pulumi.Input<string>;
    learnClientIpFromHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    learnClientIpSrcaddr6s?: pulumi.Input<pulumi.Input<string>[]>;
    learnClientIpSrcaddrs?: pulumi.Input<pulumi.Input<string>[]>;
    logAppId?: pulumi.Input<string>;
    logForwardServer?: pulumi.Input<string>;
    logPolicyPending?: pulumi.Input<string>;
    maxMessageLength?: pulumi.Input<number>;
    maxRequestLength?: pulumi.Input<number>;
    maxWafBodyCacheLength?: pulumi.Input<number>;
    policyCategoryDeepInspect?: pulumi.Input<string>;
    proxyFqdn?: pulumi.Input<string>;
    proxyTransparentCertInspection?: pulumi.Input<string>;
    srcAffinityExemptAddr6s?: pulumi.Input<pulumi.Input<string>[]>;
    srcAffinityExemptAddrs?: pulumi.Input<pulumi.Input<string>[]>;
    sslCaCerts?: pulumi.Input<pulumi.Input<string>[]>;
    sslCerts?: pulumi.Input<pulumi.Input<string>[]>;
    strictWebCheck?: pulumi.Input<string>;
    tunnelNonHttp?: pulumi.Input<string>;
    unknownHttpVersion?: pulumi.Input<string>;
    webproxyProfiles?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a WebproxyGlobal resource.
 */
export interface WebproxyGlobalArgs {
    alwaysLearnClientIp?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    fastPolicyMatch?: pulumi.Input<string>;
    forwardProxyAuth?: pulumi.Input<string>;
    forwardServerAffinityTimeout?: pulumi.Input<number>;
    ldapUserCache?: pulumi.Input<string>;
    learnClientIp?: pulumi.Input<string>;
    learnClientIpFromHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    learnClientIpSrcaddr6s?: pulumi.Input<pulumi.Input<string>[]>;
    learnClientIpSrcaddrs?: pulumi.Input<pulumi.Input<string>[]>;
    logAppId?: pulumi.Input<string>;
    logForwardServer?: pulumi.Input<string>;
    logPolicyPending?: pulumi.Input<string>;
    maxMessageLength?: pulumi.Input<number>;
    maxRequestLength?: pulumi.Input<number>;
    maxWafBodyCacheLength?: pulumi.Input<number>;
    policyCategoryDeepInspect?: pulumi.Input<string>;
    proxyFqdn?: pulumi.Input<string>;
    proxyTransparentCertInspection?: pulumi.Input<string>;
    srcAffinityExemptAddr6s?: pulumi.Input<pulumi.Input<string>[]>;
    srcAffinityExemptAddrs?: pulumi.Input<pulumi.Input<string>[]>;
    sslCaCerts?: pulumi.Input<pulumi.Input<string>[]>;
    sslCerts?: pulumi.Input<pulumi.Input<string>[]>;
    strictWebCheck?: pulumi.Input<string>;
    tunnelNonHttp?: pulumi.Input<string>;
    unknownHttpVersion?: pulumi.Input<string>;
    webproxyProfiles?: pulumi.Input<pulumi.Input<string>[]>;
}
