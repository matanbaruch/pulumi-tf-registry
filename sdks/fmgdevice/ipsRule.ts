// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class IpsRule extends pulumi.CustomResource {
    /**
     * Get an existing IpsRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IpsRuleState, opts?: pulumi.CustomResourceOptions): IpsRule {
        return new IpsRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/ipsRule:IpsRule';

    /**
     * Returns true if the given object is an instance of IpsRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IpsRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IpsRule.__pulumiType;
    }

    public readonly action!: pulumi.Output<string>;
    public readonly application!: pulumi.Output<string | undefined>;
    public readonly date!: pulumi.Output<number | undefined>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly group!: pulumi.Output<string | undefined>;
    public readonly location!: pulumi.Output<string | undefined>;
    public readonly log!: pulumi.Output<string>;
    public readonly logPacket!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly os!: pulumi.Output<string | undefined>;
    public readonly rev!: pulumi.Output<number | undefined>;
    public readonly ruleId!: pulumi.Output<number | undefined>;
    public readonly service!: pulumi.Output<string | undefined>;
    public readonly severity!: pulumi.Output<string | undefined>;
    public readonly status!: pulumi.Output<string>;

    /**
     * Create a IpsRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: IpsRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IpsRuleArgs | IpsRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IpsRuleState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["application"] = state ? state.application : undefined;
            resourceInputs["date"] = state ? state.date : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["log"] = state ? state.log : undefined;
            resourceInputs["logPacket"] = state ? state.logPacket : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["os"] = state ? state.os : undefined;
            resourceInputs["rev"] = state ? state.rev : undefined;
            resourceInputs["ruleId"] = state ? state.ruleId : undefined;
            resourceInputs["service"] = state ? state.service : undefined;
            resourceInputs["severity"] = state ? state.severity : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as IpsRuleArgs | undefined;
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["application"] = args ? args.application : undefined;
            resourceInputs["date"] = args ? args.date : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["log"] = args ? args.log : undefined;
            resourceInputs["logPacket"] = args ? args.logPacket : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["os"] = args ? args.os : undefined;
            resourceInputs["rev"] = args ? args.rev : undefined;
            resourceInputs["ruleId"] = args ? args.ruleId : undefined;
            resourceInputs["service"] = args ? args.service : undefined;
            resourceInputs["severity"] = args ? args.severity : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IpsRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IpsRule resources.
 */
export interface IpsRuleState {
    action?: pulumi.Input<string>;
    application?: pulumi.Input<string>;
    date?: pulumi.Input<number>;
    deviceName?: pulumi.Input<string>;
    group?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    logPacket?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    os?: pulumi.Input<string>;
    rev?: pulumi.Input<number>;
    ruleId?: pulumi.Input<number>;
    service?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IpsRule resource.
 */
export interface IpsRuleArgs {
    action?: pulumi.Input<string>;
    application?: pulumi.Input<string>;
    date?: pulumi.Input<number>;
    deviceName?: pulumi.Input<string>;
    group?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    logPacket?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    os?: pulumi.Input<string>;
    rev?: pulumi.Input<number>;
    ruleId?: pulumi.Input<number>;
    service?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}
