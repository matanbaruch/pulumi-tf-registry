// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SystemPcpserverPools extends pulumi.CustomResource {
    /**
     * Get an existing SystemPcpserverPools resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemPcpserverPoolsState, opts?: pulumi.CustomResourceOptions): SystemPcpserverPools {
        return new SystemPcpserverPools(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/systemPcpserverPools:SystemPcpserverPools';

    /**
     * Returns true if the given object is an instance of SystemPcpserverPools.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemPcpserverPools {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemPcpserverPools.__pulumiType;
    }

    public readonly allowOpcodes!: pulumi.Output<string[]>;
    public readonly announcementCount!: pulumi.Output<number>;
    public readonly arpReply!: pulumi.Output<string>;
    public readonly clientMappingLimit!: pulumi.Output<number | undefined>;
    public readonly clientSubnets!: pulumi.Output<string[]>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly deviceVdom!: pulumi.Output<string>;
    public readonly extIntfs!: pulumi.Output<string[]>;
    public readonly extip!: pulumi.Output<string>;
    public readonly extport!: pulumi.Output<string>;
    public readonly fosid!: pulumi.Output<number | undefined>;
    public readonly intlIntfs!: pulumi.Output<string[]>;
    public readonly mappingFilterLimit!: pulumi.Output<number>;
    public readonly maximalLifetime!: pulumi.Output<number>;
    public readonly minimalLifetime!: pulumi.Output<number>;
    public readonly multicastAnnouncement!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly recycleDelay!: pulumi.Output<number | undefined>;
    public readonly thirdParty!: pulumi.Output<string>;
    public readonly thirdPartySubnets!: pulumi.Output<string[]>;

    /**
     * Create a SystemPcpserverPools resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemPcpserverPoolsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemPcpserverPoolsArgs | SystemPcpserverPoolsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemPcpserverPoolsState | undefined;
            resourceInputs["allowOpcodes"] = state ? state.allowOpcodes : undefined;
            resourceInputs["announcementCount"] = state ? state.announcementCount : undefined;
            resourceInputs["arpReply"] = state ? state.arpReply : undefined;
            resourceInputs["clientMappingLimit"] = state ? state.clientMappingLimit : undefined;
            resourceInputs["clientSubnets"] = state ? state.clientSubnets : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["deviceVdom"] = state ? state.deviceVdom : undefined;
            resourceInputs["extIntfs"] = state ? state.extIntfs : undefined;
            resourceInputs["extip"] = state ? state.extip : undefined;
            resourceInputs["extport"] = state ? state.extport : undefined;
            resourceInputs["fosid"] = state ? state.fosid : undefined;
            resourceInputs["intlIntfs"] = state ? state.intlIntfs : undefined;
            resourceInputs["mappingFilterLimit"] = state ? state.mappingFilterLimit : undefined;
            resourceInputs["maximalLifetime"] = state ? state.maximalLifetime : undefined;
            resourceInputs["minimalLifetime"] = state ? state.minimalLifetime : undefined;
            resourceInputs["multicastAnnouncement"] = state ? state.multicastAnnouncement : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["recycleDelay"] = state ? state.recycleDelay : undefined;
            resourceInputs["thirdParty"] = state ? state.thirdParty : undefined;
            resourceInputs["thirdPartySubnets"] = state ? state.thirdPartySubnets : undefined;
        } else {
            const args = argsOrState as SystemPcpserverPoolsArgs | undefined;
            resourceInputs["allowOpcodes"] = args ? args.allowOpcodes : undefined;
            resourceInputs["announcementCount"] = args ? args.announcementCount : undefined;
            resourceInputs["arpReply"] = args ? args.arpReply : undefined;
            resourceInputs["clientMappingLimit"] = args ? args.clientMappingLimit : undefined;
            resourceInputs["clientSubnets"] = args ? args.clientSubnets : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["deviceVdom"] = args ? args.deviceVdom : undefined;
            resourceInputs["extIntfs"] = args ? args.extIntfs : undefined;
            resourceInputs["extip"] = args ? args.extip : undefined;
            resourceInputs["extport"] = args ? args.extport : undefined;
            resourceInputs["fosid"] = args ? args.fosid : undefined;
            resourceInputs["intlIntfs"] = args ? args.intlIntfs : undefined;
            resourceInputs["mappingFilterLimit"] = args ? args.mappingFilterLimit : undefined;
            resourceInputs["maximalLifetime"] = args ? args.maximalLifetime : undefined;
            resourceInputs["minimalLifetime"] = args ? args.minimalLifetime : undefined;
            resourceInputs["multicastAnnouncement"] = args ? args.multicastAnnouncement : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["recycleDelay"] = args ? args.recycleDelay : undefined;
            resourceInputs["thirdParty"] = args ? args.thirdParty : undefined;
            resourceInputs["thirdPartySubnets"] = args ? args.thirdPartySubnets : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SystemPcpserverPools.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemPcpserverPools resources.
 */
export interface SystemPcpserverPoolsState {
    allowOpcodes?: pulumi.Input<pulumi.Input<string>[]>;
    announcementCount?: pulumi.Input<number>;
    arpReply?: pulumi.Input<string>;
    clientMappingLimit?: pulumi.Input<number>;
    clientSubnets?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    extIntfs?: pulumi.Input<pulumi.Input<string>[]>;
    extip?: pulumi.Input<string>;
    extport?: pulumi.Input<string>;
    fosid?: pulumi.Input<number>;
    intlIntfs?: pulumi.Input<pulumi.Input<string>[]>;
    mappingFilterLimit?: pulumi.Input<number>;
    maximalLifetime?: pulumi.Input<number>;
    minimalLifetime?: pulumi.Input<number>;
    multicastAnnouncement?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    recycleDelay?: pulumi.Input<number>;
    thirdParty?: pulumi.Input<string>;
    thirdPartySubnets?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a SystemPcpserverPools resource.
 */
export interface SystemPcpserverPoolsArgs {
    allowOpcodes?: pulumi.Input<pulumi.Input<string>[]>;
    announcementCount?: pulumi.Input<number>;
    arpReply?: pulumi.Input<string>;
    clientMappingLimit?: pulumi.Input<number>;
    clientSubnets?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    extIntfs?: pulumi.Input<pulumi.Input<string>[]>;
    extip?: pulumi.Input<string>;
    extport?: pulumi.Input<string>;
    fosid?: pulumi.Input<number>;
    intlIntfs?: pulumi.Input<pulumi.Input<string>[]>;
    mappingFilterLimit?: pulumi.Input<number>;
    maximalLifetime?: pulumi.Input<number>;
    minimalLifetime?: pulumi.Input<number>;
    multicastAnnouncement?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    recycleDelay?: pulumi.Input<number>;
    thirdParty?: pulumi.Input<string>;
    thirdPartySubnets?: pulumi.Input<pulumi.Input<string>[]>;
}
