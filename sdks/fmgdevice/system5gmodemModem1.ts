// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class System5gmodemModem1 extends pulumi.CustomResource {
    /**
     * Get an existing System5gmodemModem1 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: System5gmodemModem1State, opts?: pulumi.CustomResourceOptions): System5gmodemModem1 {
        return new System5gmodemModem1(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/system5gmodemModem1:System5gmodemModem1';

    /**
     * Returns true if the given object is an instance of System5gmodemModem1.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is System5gmodemModem1 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === System5gmodemModem1.__pulumiType;
    }

    public readonly carrierConfig!: pulumi.Output<string | undefined>;
    public readonly customIpv4Netmask!: pulumi.Output<string>;
    public readonly defaultGateway!: pulumi.Output<string>;
    public readonly defaultNetmask!: pulumi.Output<string>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly gpsService!: pulumi.Output<string>;
    public readonly intferface!: pulumi.Output<string | undefined>;
    public readonly modemId!: pulumi.Output<number | undefined>;
    public readonly networkType!: pulumi.Output<string>;
    public readonly sim1DataPlans!: pulumi.Output<string[]>;
    public readonly sim1Pins!: pulumi.Output<string[]>;
    public readonly sim2DataPlans!: pulumi.Output<string[]>;
    public readonly sim2Pins!: pulumi.Output<string[]>;
    public readonly simDataPlans!: pulumi.Output<string[]>;
    public readonly simPins!: pulumi.Output<string[]>;
    public readonly simSwitch!: pulumi.Output<outputs.System5gmodemModem1SimSwitch | undefined>;
    public readonly status!: pulumi.Output<string>;

    /**
     * Create a System5gmodemModem1 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: System5gmodemModem1Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: System5gmodemModem1Args | System5gmodemModem1State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as System5gmodemModem1State | undefined;
            resourceInputs["carrierConfig"] = state ? state.carrierConfig : undefined;
            resourceInputs["customIpv4Netmask"] = state ? state.customIpv4Netmask : undefined;
            resourceInputs["defaultGateway"] = state ? state.defaultGateway : undefined;
            resourceInputs["defaultNetmask"] = state ? state.defaultNetmask : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["gpsService"] = state ? state.gpsService : undefined;
            resourceInputs["intferface"] = state ? state.intferface : undefined;
            resourceInputs["modemId"] = state ? state.modemId : undefined;
            resourceInputs["networkType"] = state ? state.networkType : undefined;
            resourceInputs["sim1DataPlans"] = state ? state.sim1DataPlans : undefined;
            resourceInputs["sim1Pins"] = state ? state.sim1Pins : undefined;
            resourceInputs["sim2DataPlans"] = state ? state.sim2DataPlans : undefined;
            resourceInputs["sim2Pins"] = state ? state.sim2Pins : undefined;
            resourceInputs["simDataPlans"] = state ? state.simDataPlans : undefined;
            resourceInputs["simPins"] = state ? state.simPins : undefined;
            resourceInputs["simSwitch"] = state ? state.simSwitch : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as System5gmodemModem1Args | undefined;
            resourceInputs["carrierConfig"] = args ? args.carrierConfig : undefined;
            resourceInputs["customIpv4Netmask"] = args ? args.customIpv4Netmask : undefined;
            resourceInputs["defaultGateway"] = args ? args.defaultGateway : undefined;
            resourceInputs["defaultNetmask"] = args ? args.defaultNetmask : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["gpsService"] = args ? args.gpsService : undefined;
            resourceInputs["intferface"] = args ? args.intferface : undefined;
            resourceInputs["modemId"] = args ? args.modemId : undefined;
            resourceInputs["networkType"] = args ? args.networkType : undefined;
            resourceInputs["sim1DataPlans"] = args ? args.sim1DataPlans : undefined;
            resourceInputs["sim1Pins"] = args?.sim1Pins ? pulumi.secret(args.sim1Pins) : undefined;
            resourceInputs["sim2DataPlans"] = args ? args.sim2DataPlans : undefined;
            resourceInputs["sim2Pins"] = args?.sim2Pins ? pulumi.secret(args.sim2Pins) : undefined;
            resourceInputs["simDataPlans"] = args ? args.simDataPlans : undefined;
            resourceInputs["simPins"] = args?.simPins ? pulumi.secret(args.simPins) : undefined;
            resourceInputs["simSwitch"] = args ? args.simSwitch : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["sim1Pins", "sim2Pins", "simPins"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(System5gmodemModem1.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering System5gmodemModem1 resources.
 */
export interface System5gmodemModem1State {
    carrierConfig?: pulumi.Input<string>;
    customIpv4Netmask?: pulumi.Input<string>;
    defaultGateway?: pulumi.Input<string>;
    defaultNetmask?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    gpsService?: pulumi.Input<string>;
    intferface?: pulumi.Input<string>;
    modemId?: pulumi.Input<number>;
    networkType?: pulumi.Input<string>;
    sim1DataPlans?: pulumi.Input<pulumi.Input<string>[]>;
    sim1Pins?: pulumi.Input<pulumi.Input<string>[]>;
    sim2DataPlans?: pulumi.Input<pulumi.Input<string>[]>;
    sim2Pins?: pulumi.Input<pulumi.Input<string>[]>;
    simDataPlans?: pulumi.Input<pulumi.Input<string>[]>;
    simPins?: pulumi.Input<pulumi.Input<string>[]>;
    simSwitch?: pulumi.Input<inputs.System5gmodemModem1SimSwitch>;
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a System5gmodemModem1 resource.
 */
export interface System5gmodemModem1Args {
    carrierConfig?: pulumi.Input<string>;
    customIpv4Netmask?: pulumi.Input<string>;
    defaultGateway?: pulumi.Input<string>;
    defaultNetmask?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    gpsService?: pulumi.Input<string>;
    intferface?: pulumi.Input<string>;
    modemId?: pulumi.Input<number>;
    networkType?: pulumi.Input<string>;
    sim1DataPlans?: pulumi.Input<pulumi.Input<string>[]>;
    sim1Pins?: pulumi.Input<pulumi.Input<string>[]>;
    sim2DataPlans?: pulumi.Input<pulumi.Input<string>[]>;
    sim2Pins?: pulumi.Input<pulumi.Input<string>[]>;
    simDataPlans?: pulumi.Input<pulumi.Input<string>[]>;
    simPins?: pulumi.Input<pulumi.Input<string>[]>;
    simSwitch?: pulumi.Input<inputs.System5gmodemModem1SimSwitch>;
    status?: pulumi.Input<string>;
}
