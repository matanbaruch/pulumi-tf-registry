// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class WirelesscontrollerArrpprofile extends pulumi.CustomResource {
    /**
     * Get an existing WirelesscontrollerArrpprofile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WirelesscontrollerArrpprofileState, opts?: pulumi.CustomResourceOptions): WirelesscontrollerArrpprofile {
        return new WirelesscontrollerArrpprofile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/wirelesscontrollerArrpprofile:WirelesscontrollerArrpprofile';

    /**
     * Returns true if the given object is an instance of WirelesscontrollerArrpprofile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WirelesscontrollerArrpprofile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WirelesscontrollerArrpprofile.__pulumiType;
    }

    public readonly comment!: pulumi.Output<string | undefined>;
    public readonly darrpOptimize!: pulumi.Output<number | undefined>;
    public readonly darrpOptimizeSchedules!: pulumi.Output<string[]>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly deviceVdom!: pulumi.Output<string>;
    public readonly includeDfsChannel!: pulumi.Output<string>;
    public readonly includeWeatherChannel!: pulumi.Output<string>;
    public readonly monitorPeriod!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly overrideDarrpOptimize!: pulumi.Output<string>;
    public readonly selectionPeriod!: pulumi.Output<number>;
    public readonly thresholdAp!: pulumi.Output<number>;
    public readonly thresholdChannelLoad!: pulumi.Output<number>;
    public readonly thresholdNoiseFloor!: pulumi.Output<string>;
    public readonly thresholdRxErrors!: pulumi.Output<number>;
    public readonly thresholdSpectralRssi!: pulumi.Output<string>;
    public readonly thresholdTxRetries!: pulumi.Output<number>;
    public readonly weightChannelLoad!: pulumi.Output<number>;
    public readonly weightDfsChannel!: pulumi.Output<number>;
    public readonly weightManagedAp!: pulumi.Output<number>;
    public readonly weightNoiseFloor!: pulumi.Output<number>;
    public readonly weightRogueAp!: pulumi.Output<number>;
    public readonly weightSpectralRssi!: pulumi.Output<number>;
    public readonly weightWeatherChannel!: pulumi.Output<number>;

    /**
     * Create a WirelesscontrollerArrpprofile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: WirelesscontrollerArrpprofileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WirelesscontrollerArrpprofileArgs | WirelesscontrollerArrpprofileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WirelesscontrollerArrpprofileState | undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["darrpOptimize"] = state ? state.darrpOptimize : undefined;
            resourceInputs["darrpOptimizeSchedules"] = state ? state.darrpOptimizeSchedules : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["deviceVdom"] = state ? state.deviceVdom : undefined;
            resourceInputs["includeDfsChannel"] = state ? state.includeDfsChannel : undefined;
            resourceInputs["includeWeatherChannel"] = state ? state.includeWeatherChannel : undefined;
            resourceInputs["monitorPeriod"] = state ? state.monitorPeriod : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["overrideDarrpOptimize"] = state ? state.overrideDarrpOptimize : undefined;
            resourceInputs["selectionPeriod"] = state ? state.selectionPeriod : undefined;
            resourceInputs["thresholdAp"] = state ? state.thresholdAp : undefined;
            resourceInputs["thresholdChannelLoad"] = state ? state.thresholdChannelLoad : undefined;
            resourceInputs["thresholdNoiseFloor"] = state ? state.thresholdNoiseFloor : undefined;
            resourceInputs["thresholdRxErrors"] = state ? state.thresholdRxErrors : undefined;
            resourceInputs["thresholdSpectralRssi"] = state ? state.thresholdSpectralRssi : undefined;
            resourceInputs["thresholdTxRetries"] = state ? state.thresholdTxRetries : undefined;
            resourceInputs["weightChannelLoad"] = state ? state.weightChannelLoad : undefined;
            resourceInputs["weightDfsChannel"] = state ? state.weightDfsChannel : undefined;
            resourceInputs["weightManagedAp"] = state ? state.weightManagedAp : undefined;
            resourceInputs["weightNoiseFloor"] = state ? state.weightNoiseFloor : undefined;
            resourceInputs["weightRogueAp"] = state ? state.weightRogueAp : undefined;
            resourceInputs["weightSpectralRssi"] = state ? state.weightSpectralRssi : undefined;
            resourceInputs["weightWeatherChannel"] = state ? state.weightWeatherChannel : undefined;
        } else {
            const args = argsOrState as WirelesscontrollerArrpprofileArgs | undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["darrpOptimize"] = args ? args.darrpOptimize : undefined;
            resourceInputs["darrpOptimizeSchedules"] = args ? args.darrpOptimizeSchedules : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["deviceVdom"] = args ? args.deviceVdom : undefined;
            resourceInputs["includeDfsChannel"] = args ? args.includeDfsChannel : undefined;
            resourceInputs["includeWeatherChannel"] = args ? args.includeWeatherChannel : undefined;
            resourceInputs["monitorPeriod"] = args ? args.monitorPeriod : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["overrideDarrpOptimize"] = args ? args.overrideDarrpOptimize : undefined;
            resourceInputs["selectionPeriod"] = args ? args.selectionPeriod : undefined;
            resourceInputs["thresholdAp"] = args ? args.thresholdAp : undefined;
            resourceInputs["thresholdChannelLoad"] = args ? args.thresholdChannelLoad : undefined;
            resourceInputs["thresholdNoiseFloor"] = args ? args.thresholdNoiseFloor : undefined;
            resourceInputs["thresholdRxErrors"] = args ? args.thresholdRxErrors : undefined;
            resourceInputs["thresholdSpectralRssi"] = args ? args.thresholdSpectralRssi : undefined;
            resourceInputs["thresholdTxRetries"] = args ? args.thresholdTxRetries : undefined;
            resourceInputs["weightChannelLoad"] = args ? args.weightChannelLoad : undefined;
            resourceInputs["weightDfsChannel"] = args ? args.weightDfsChannel : undefined;
            resourceInputs["weightManagedAp"] = args ? args.weightManagedAp : undefined;
            resourceInputs["weightNoiseFloor"] = args ? args.weightNoiseFloor : undefined;
            resourceInputs["weightRogueAp"] = args ? args.weightRogueAp : undefined;
            resourceInputs["weightSpectralRssi"] = args ? args.weightSpectralRssi : undefined;
            resourceInputs["weightWeatherChannel"] = args ? args.weightWeatherChannel : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WirelesscontrollerArrpprofile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WirelesscontrollerArrpprofile resources.
 */
export interface WirelesscontrollerArrpprofileState {
    comment?: pulumi.Input<string>;
    darrpOptimize?: pulumi.Input<number>;
    darrpOptimizeSchedules?: pulumi.Input<pulumi.Input<string>[]>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    includeDfsChannel?: pulumi.Input<string>;
    includeWeatherChannel?: pulumi.Input<string>;
    monitorPeriod?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    overrideDarrpOptimize?: pulumi.Input<string>;
    selectionPeriod?: pulumi.Input<number>;
    thresholdAp?: pulumi.Input<number>;
    thresholdChannelLoad?: pulumi.Input<number>;
    thresholdNoiseFloor?: pulumi.Input<string>;
    thresholdRxErrors?: pulumi.Input<number>;
    thresholdSpectralRssi?: pulumi.Input<string>;
    thresholdTxRetries?: pulumi.Input<number>;
    weightChannelLoad?: pulumi.Input<number>;
    weightDfsChannel?: pulumi.Input<number>;
    weightManagedAp?: pulumi.Input<number>;
    weightNoiseFloor?: pulumi.Input<number>;
    weightRogueAp?: pulumi.Input<number>;
    weightSpectralRssi?: pulumi.Input<number>;
    weightWeatherChannel?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a WirelesscontrollerArrpprofile resource.
 */
export interface WirelesscontrollerArrpprofileArgs {
    comment?: pulumi.Input<string>;
    darrpOptimize?: pulumi.Input<number>;
    darrpOptimizeSchedules?: pulumi.Input<pulumi.Input<string>[]>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    includeDfsChannel?: pulumi.Input<string>;
    includeWeatherChannel?: pulumi.Input<string>;
    monitorPeriod?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    overrideDarrpOptimize?: pulumi.Input<string>;
    selectionPeriod?: pulumi.Input<number>;
    thresholdAp?: pulumi.Input<number>;
    thresholdChannelLoad?: pulumi.Input<number>;
    thresholdNoiseFloor?: pulumi.Input<string>;
    thresholdRxErrors?: pulumi.Input<number>;
    thresholdSpectralRssi?: pulumi.Input<string>;
    thresholdTxRetries?: pulumi.Input<number>;
    weightChannelLoad?: pulumi.Input<number>;
    weightDfsChannel?: pulumi.Input<number>;
    weightManagedAp?: pulumi.Input<number>;
    weightNoiseFloor?: pulumi.Input<number>;
    weightRogueAp?: pulumi.Input<number>;
    weightSpectralRssi?: pulumi.Input<number>;
    weightWeatherChannel?: pulumi.Input<number>;
}
