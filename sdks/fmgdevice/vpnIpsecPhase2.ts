// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VpnIpsecPhase2 extends pulumi.CustomResource {
    /**
     * Get an existing VpnIpsecPhase2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpnIpsecPhase2State, opts?: pulumi.CustomResourceOptions): VpnIpsecPhase2 {
        return new VpnIpsecPhase2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/vpnIpsecPhase2:VpnIpsecPhase2';

    /**
     * Returns true if the given object is an instance of VpnIpsecPhase2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpnIpsecPhase2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpnIpsecPhase2.__pulumiType;
    }

    public readonly addRoute!: pulumi.Output<string>;
    public readonly autoNegotiate!: pulumi.Output<string>;
    public readonly comments!: pulumi.Output<string | undefined>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly deviceVdom!: pulumi.Output<string>;
    public readonly dhcpIpsec!: pulumi.Output<string | undefined>;
    public readonly dhgrps!: pulumi.Output<string[]>;
    public readonly diffserv!: pulumi.Output<string>;
    public readonly diffservcode!: pulumi.Output<string>;
    public readonly dstAddrType!: pulumi.Output<string>;
    public readonly dstEndIp!: pulumi.Output<string | undefined>;
    public readonly dstEndIp6!: pulumi.Output<string | undefined>;
    public readonly dstName6s!: pulumi.Output<string[]>;
    public readonly dstNames!: pulumi.Output<string[]>;
    public readonly dstPort!: pulumi.Output<number | undefined>;
    public readonly dstStartIp!: pulumi.Output<string | undefined>;
    public readonly dstStartIp6!: pulumi.Output<string | undefined>;
    public readonly dstSubnet6!: pulumi.Output<string | undefined>;
    public readonly dstSubnets!: pulumi.Output<string[]>;
    public readonly encapsulation!: pulumi.Output<string>;
    public readonly inboundDscpCopy!: pulumi.Output<string>;
    public readonly initiatorTsNarrow!: pulumi.Output<string | undefined>;
    public readonly ipv4Df!: pulumi.Output<string>;
    public readonly keepalive!: pulumi.Output<string>;
    public readonly keylifeType!: pulumi.Output<string>;
    public readonly keylifekbs!: pulumi.Output<number | undefined>;
    public readonly keylifeseconds!: pulumi.Output<number>;
    public readonly l2tp!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly pfs!: pulumi.Output<string>;
    public readonly phase1names!: pulumi.Output<string[]>;
    public readonly proposals!: pulumi.Output<string[]>;
    public readonly protocol!: pulumi.Output<number | undefined>;
    public readonly replay!: pulumi.Output<string>;
    public readonly routeOverlap!: pulumi.Output<string>;
    public readonly selectorMatch!: pulumi.Output<string>;
    public readonly singleSource!: pulumi.Output<string>;
    public readonly srcAddrType!: pulumi.Output<string>;
    public readonly srcEndIp!: pulumi.Output<string | undefined>;
    public readonly srcEndIp6!: pulumi.Output<string | undefined>;
    public readonly srcName6s!: pulumi.Output<string[]>;
    public readonly srcNames!: pulumi.Output<string[]>;
    public readonly srcPort!: pulumi.Output<number | undefined>;
    public readonly srcStartIp!: pulumi.Output<string | undefined>;
    public readonly srcStartIp6!: pulumi.Output<string | undefined>;
    public readonly srcSubnet6!: pulumi.Output<string | undefined>;
    public readonly srcSubnets!: pulumi.Output<string[]>;
    public readonly useNatip!: pulumi.Output<string>;

    /**
     * Create a VpnIpsecPhase2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VpnIpsecPhase2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpnIpsecPhase2Args | VpnIpsecPhase2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpnIpsecPhase2State | undefined;
            resourceInputs["addRoute"] = state ? state.addRoute : undefined;
            resourceInputs["autoNegotiate"] = state ? state.autoNegotiate : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["deviceVdom"] = state ? state.deviceVdom : undefined;
            resourceInputs["dhcpIpsec"] = state ? state.dhcpIpsec : undefined;
            resourceInputs["dhgrps"] = state ? state.dhgrps : undefined;
            resourceInputs["diffserv"] = state ? state.diffserv : undefined;
            resourceInputs["diffservcode"] = state ? state.diffservcode : undefined;
            resourceInputs["dstAddrType"] = state ? state.dstAddrType : undefined;
            resourceInputs["dstEndIp"] = state ? state.dstEndIp : undefined;
            resourceInputs["dstEndIp6"] = state ? state.dstEndIp6 : undefined;
            resourceInputs["dstName6s"] = state ? state.dstName6s : undefined;
            resourceInputs["dstNames"] = state ? state.dstNames : undefined;
            resourceInputs["dstPort"] = state ? state.dstPort : undefined;
            resourceInputs["dstStartIp"] = state ? state.dstStartIp : undefined;
            resourceInputs["dstStartIp6"] = state ? state.dstStartIp6 : undefined;
            resourceInputs["dstSubnet6"] = state ? state.dstSubnet6 : undefined;
            resourceInputs["dstSubnets"] = state ? state.dstSubnets : undefined;
            resourceInputs["encapsulation"] = state ? state.encapsulation : undefined;
            resourceInputs["inboundDscpCopy"] = state ? state.inboundDscpCopy : undefined;
            resourceInputs["initiatorTsNarrow"] = state ? state.initiatorTsNarrow : undefined;
            resourceInputs["ipv4Df"] = state ? state.ipv4Df : undefined;
            resourceInputs["keepalive"] = state ? state.keepalive : undefined;
            resourceInputs["keylifeType"] = state ? state.keylifeType : undefined;
            resourceInputs["keylifekbs"] = state ? state.keylifekbs : undefined;
            resourceInputs["keylifeseconds"] = state ? state.keylifeseconds : undefined;
            resourceInputs["l2tp"] = state ? state.l2tp : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pfs"] = state ? state.pfs : undefined;
            resourceInputs["phase1names"] = state ? state.phase1names : undefined;
            resourceInputs["proposals"] = state ? state.proposals : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["replay"] = state ? state.replay : undefined;
            resourceInputs["routeOverlap"] = state ? state.routeOverlap : undefined;
            resourceInputs["selectorMatch"] = state ? state.selectorMatch : undefined;
            resourceInputs["singleSource"] = state ? state.singleSource : undefined;
            resourceInputs["srcAddrType"] = state ? state.srcAddrType : undefined;
            resourceInputs["srcEndIp"] = state ? state.srcEndIp : undefined;
            resourceInputs["srcEndIp6"] = state ? state.srcEndIp6 : undefined;
            resourceInputs["srcName6s"] = state ? state.srcName6s : undefined;
            resourceInputs["srcNames"] = state ? state.srcNames : undefined;
            resourceInputs["srcPort"] = state ? state.srcPort : undefined;
            resourceInputs["srcStartIp"] = state ? state.srcStartIp : undefined;
            resourceInputs["srcStartIp6"] = state ? state.srcStartIp6 : undefined;
            resourceInputs["srcSubnet6"] = state ? state.srcSubnet6 : undefined;
            resourceInputs["srcSubnets"] = state ? state.srcSubnets : undefined;
            resourceInputs["useNatip"] = state ? state.useNatip : undefined;
        } else {
            const args = argsOrState as VpnIpsecPhase2Args | undefined;
            resourceInputs["addRoute"] = args ? args.addRoute : undefined;
            resourceInputs["autoNegotiate"] = args ? args.autoNegotiate : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["deviceVdom"] = args ? args.deviceVdom : undefined;
            resourceInputs["dhcpIpsec"] = args ? args.dhcpIpsec : undefined;
            resourceInputs["dhgrps"] = args ? args.dhgrps : undefined;
            resourceInputs["diffserv"] = args ? args.diffserv : undefined;
            resourceInputs["diffservcode"] = args ? args.diffservcode : undefined;
            resourceInputs["dstAddrType"] = args ? args.dstAddrType : undefined;
            resourceInputs["dstEndIp"] = args ? args.dstEndIp : undefined;
            resourceInputs["dstEndIp6"] = args ? args.dstEndIp6 : undefined;
            resourceInputs["dstName6s"] = args ? args.dstName6s : undefined;
            resourceInputs["dstNames"] = args ? args.dstNames : undefined;
            resourceInputs["dstPort"] = args ? args.dstPort : undefined;
            resourceInputs["dstStartIp"] = args ? args.dstStartIp : undefined;
            resourceInputs["dstStartIp6"] = args ? args.dstStartIp6 : undefined;
            resourceInputs["dstSubnet6"] = args ? args.dstSubnet6 : undefined;
            resourceInputs["dstSubnets"] = args ? args.dstSubnets : undefined;
            resourceInputs["encapsulation"] = args ? args.encapsulation : undefined;
            resourceInputs["inboundDscpCopy"] = args ? args.inboundDscpCopy : undefined;
            resourceInputs["initiatorTsNarrow"] = args ? args.initiatorTsNarrow : undefined;
            resourceInputs["ipv4Df"] = args ? args.ipv4Df : undefined;
            resourceInputs["keepalive"] = args ? args.keepalive : undefined;
            resourceInputs["keylifeType"] = args ? args.keylifeType : undefined;
            resourceInputs["keylifekbs"] = args ? args.keylifekbs : undefined;
            resourceInputs["keylifeseconds"] = args ? args.keylifeseconds : undefined;
            resourceInputs["l2tp"] = args ? args.l2tp : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pfs"] = args ? args.pfs : undefined;
            resourceInputs["phase1names"] = args ? args.phase1names : undefined;
            resourceInputs["proposals"] = args ? args.proposals : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["replay"] = args ? args.replay : undefined;
            resourceInputs["routeOverlap"] = args ? args.routeOverlap : undefined;
            resourceInputs["selectorMatch"] = args ? args.selectorMatch : undefined;
            resourceInputs["singleSource"] = args ? args.singleSource : undefined;
            resourceInputs["srcAddrType"] = args ? args.srcAddrType : undefined;
            resourceInputs["srcEndIp"] = args ? args.srcEndIp : undefined;
            resourceInputs["srcEndIp6"] = args ? args.srcEndIp6 : undefined;
            resourceInputs["srcName6s"] = args ? args.srcName6s : undefined;
            resourceInputs["srcNames"] = args ? args.srcNames : undefined;
            resourceInputs["srcPort"] = args ? args.srcPort : undefined;
            resourceInputs["srcStartIp"] = args ? args.srcStartIp : undefined;
            resourceInputs["srcStartIp6"] = args ? args.srcStartIp6 : undefined;
            resourceInputs["srcSubnet6"] = args ? args.srcSubnet6 : undefined;
            resourceInputs["srcSubnets"] = args ? args.srcSubnets : undefined;
            resourceInputs["useNatip"] = args ? args.useNatip : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpnIpsecPhase2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpnIpsecPhase2 resources.
 */
export interface VpnIpsecPhase2State {
    addRoute?: pulumi.Input<string>;
    autoNegotiate?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    dhcpIpsec?: pulumi.Input<string>;
    dhgrps?: pulumi.Input<pulumi.Input<string>[]>;
    diffserv?: pulumi.Input<string>;
    diffservcode?: pulumi.Input<string>;
    dstAddrType?: pulumi.Input<string>;
    dstEndIp?: pulumi.Input<string>;
    dstEndIp6?: pulumi.Input<string>;
    dstName6s?: pulumi.Input<pulumi.Input<string>[]>;
    dstNames?: pulumi.Input<pulumi.Input<string>[]>;
    dstPort?: pulumi.Input<number>;
    dstStartIp?: pulumi.Input<string>;
    dstStartIp6?: pulumi.Input<string>;
    dstSubnet6?: pulumi.Input<string>;
    dstSubnets?: pulumi.Input<pulumi.Input<string>[]>;
    encapsulation?: pulumi.Input<string>;
    inboundDscpCopy?: pulumi.Input<string>;
    initiatorTsNarrow?: pulumi.Input<string>;
    ipv4Df?: pulumi.Input<string>;
    keepalive?: pulumi.Input<string>;
    keylifeType?: pulumi.Input<string>;
    keylifekbs?: pulumi.Input<number>;
    keylifeseconds?: pulumi.Input<number>;
    l2tp?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    pfs?: pulumi.Input<string>;
    phase1names?: pulumi.Input<pulumi.Input<string>[]>;
    proposals?: pulumi.Input<pulumi.Input<string>[]>;
    protocol?: pulumi.Input<number>;
    replay?: pulumi.Input<string>;
    routeOverlap?: pulumi.Input<string>;
    selectorMatch?: pulumi.Input<string>;
    singleSource?: pulumi.Input<string>;
    srcAddrType?: pulumi.Input<string>;
    srcEndIp?: pulumi.Input<string>;
    srcEndIp6?: pulumi.Input<string>;
    srcName6s?: pulumi.Input<pulumi.Input<string>[]>;
    srcNames?: pulumi.Input<pulumi.Input<string>[]>;
    srcPort?: pulumi.Input<number>;
    srcStartIp?: pulumi.Input<string>;
    srcStartIp6?: pulumi.Input<string>;
    srcSubnet6?: pulumi.Input<string>;
    srcSubnets?: pulumi.Input<pulumi.Input<string>[]>;
    useNatip?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpnIpsecPhase2 resource.
 */
export interface VpnIpsecPhase2Args {
    addRoute?: pulumi.Input<string>;
    autoNegotiate?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    dhcpIpsec?: pulumi.Input<string>;
    dhgrps?: pulumi.Input<pulumi.Input<string>[]>;
    diffserv?: pulumi.Input<string>;
    diffservcode?: pulumi.Input<string>;
    dstAddrType?: pulumi.Input<string>;
    dstEndIp?: pulumi.Input<string>;
    dstEndIp6?: pulumi.Input<string>;
    dstName6s?: pulumi.Input<pulumi.Input<string>[]>;
    dstNames?: pulumi.Input<pulumi.Input<string>[]>;
    dstPort?: pulumi.Input<number>;
    dstStartIp?: pulumi.Input<string>;
    dstStartIp6?: pulumi.Input<string>;
    dstSubnet6?: pulumi.Input<string>;
    dstSubnets?: pulumi.Input<pulumi.Input<string>[]>;
    encapsulation?: pulumi.Input<string>;
    inboundDscpCopy?: pulumi.Input<string>;
    initiatorTsNarrow?: pulumi.Input<string>;
    ipv4Df?: pulumi.Input<string>;
    keepalive?: pulumi.Input<string>;
    keylifeType?: pulumi.Input<string>;
    keylifekbs?: pulumi.Input<number>;
    keylifeseconds?: pulumi.Input<number>;
    l2tp?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    pfs?: pulumi.Input<string>;
    phase1names?: pulumi.Input<pulumi.Input<string>[]>;
    proposals?: pulumi.Input<pulumi.Input<string>[]>;
    protocol?: pulumi.Input<number>;
    replay?: pulumi.Input<string>;
    routeOverlap?: pulumi.Input<string>;
    selectorMatch?: pulumi.Input<string>;
    singleSource?: pulumi.Input<string>;
    srcAddrType?: pulumi.Input<string>;
    srcEndIp?: pulumi.Input<string>;
    srcEndIp6?: pulumi.Input<string>;
    srcName6s?: pulumi.Input<pulumi.Input<string>[]>;
    srcNames?: pulumi.Input<pulumi.Input<string>[]>;
    srcPort?: pulumi.Input<number>;
    srcStartIp?: pulumi.Input<string>;
    srcStartIp6?: pulumi.Input<string>;
    srcSubnet6?: pulumi.Input<string>;
    srcSubnets?: pulumi.Input<pulumi.Input<string>[]>;
    useNatip?: pulumi.Input<string>;
}
