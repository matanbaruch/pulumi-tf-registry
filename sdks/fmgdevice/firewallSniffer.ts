// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FirewallSniffer extends pulumi.CustomResource {
    /**
     * Get an existing FirewallSniffer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirewallSnifferState, opts?: pulumi.CustomResourceOptions): FirewallSniffer {
        return new FirewallSniffer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/firewallSniffer:FirewallSniffer';

    /**
     * Returns true if the given object is an instance of FirewallSniffer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirewallSniffer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirewallSniffer.__pulumiType;
    }

    public readonly anomalies!: pulumi.Output<outputs.FirewallSnifferAnomaly[] | undefined>;
    public readonly applicationListStatus!: pulumi.Output<string | undefined>;
    public readonly applicationLists!: pulumi.Output<string[]>;
    public readonly avProfileStatus!: pulumi.Output<string | undefined>;
    public readonly avProfiles!: pulumi.Output<string[]>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly deviceVdom!: pulumi.Output<string>;
    public readonly dlpProfileStatus!: pulumi.Output<string | undefined>;
    public readonly dlpProfiles!: pulumi.Output<string[]>;
    public readonly dlpSensorStatus!: pulumi.Output<string>;
    public readonly dlpSensors!: pulumi.Output<string[]>;
    public readonly dsri!: pulumi.Output<string>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly emailfilterProfileStatus!: pulumi.Output<string | undefined>;
    public readonly emailfilterProfiles!: pulumi.Output<string[]>;
    public readonly fileFilterProfileStatus!: pulumi.Output<string | undefined>;
    public readonly fileFilterProfiles!: pulumi.Output<string[]>;
    public readonly fosid!: pulumi.Output<number>;
    public readonly host!: pulumi.Output<string | undefined>;
    public readonly interfaces!: pulumi.Output<string[]>;
    public readonly ipThreatfeedStatus!: pulumi.Output<string | undefined>;
    public readonly ipThreatfeeds!: pulumi.Output<string[]>;
    public readonly ipsDosStatus!: pulumi.Output<string | undefined>;
    public readonly ipsSensorStatus!: pulumi.Output<string | undefined>;
    public readonly ipsSensors!: pulumi.Output<string[]>;
    public readonly ipv6!: pulumi.Output<string>;
    public readonly logtraffic!: pulumi.Output<string>;
    public readonly maxPacketCount!: pulumi.Output<number>;
    public readonly nonIp!: pulumi.Output<string>;
    public readonly port!: pulumi.Output<string | undefined>;
    public readonly protocol!: pulumi.Output<string | undefined>;
    public readonly status!: pulumi.Output<string>;
    public readonly uuid!: pulumi.Output<string>;
    public readonly vlan!: pulumi.Output<string | undefined>;
    public readonly webfilterProfileStatus!: pulumi.Output<string | undefined>;
    public readonly webfilterProfiles!: pulumi.Output<string[]>;

    /**
     * Create a FirewallSniffer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: FirewallSnifferArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirewallSnifferArgs | FirewallSnifferState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirewallSnifferState | undefined;
            resourceInputs["anomalies"] = state ? state.anomalies : undefined;
            resourceInputs["applicationListStatus"] = state ? state.applicationListStatus : undefined;
            resourceInputs["applicationLists"] = state ? state.applicationLists : undefined;
            resourceInputs["avProfileStatus"] = state ? state.avProfileStatus : undefined;
            resourceInputs["avProfiles"] = state ? state.avProfiles : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["deviceVdom"] = state ? state.deviceVdom : undefined;
            resourceInputs["dlpProfileStatus"] = state ? state.dlpProfileStatus : undefined;
            resourceInputs["dlpProfiles"] = state ? state.dlpProfiles : undefined;
            resourceInputs["dlpSensorStatus"] = state ? state.dlpSensorStatus : undefined;
            resourceInputs["dlpSensors"] = state ? state.dlpSensors : undefined;
            resourceInputs["dsri"] = state ? state.dsri : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["emailfilterProfileStatus"] = state ? state.emailfilterProfileStatus : undefined;
            resourceInputs["emailfilterProfiles"] = state ? state.emailfilterProfiles : undefined;
            resourceInputs["fileFilterProfileStatus"] = state ? state.fileFilterProfileStatus : undefined;
            resourceInputs["fileFilterProfiles"] = state ? state.fileFilterProfiles : undefined;
            resourceInputs["fosid"] = state ? state.fosid : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["interfaces"] = state ? state.interfaces : undefined;
            resourceInputs["ipThreatfeedStatus"] = state ? state.ipThreatfeedStatus : undefined;
            resourceInputs["ipThreatfeeds"] = state ? state.ipThreatfeeds : undefined;
            resourceInputs["ipsDosStatus"] = state ? state.ipsDosStatus : undefined;
            resourceInputs["ipsSensorStatus"] = state ? state.ipsSensorStatus : undefined;
            resourceInputs["ipsSensors"] = state ? state.ipsSensors : undefined;
            resourceInputs["ipv6"] = state ? state.ipv6 : undefined;
            resourceInputs["logtraffic"] = state ? state.logtraffic : undefined;
            resourceInputs["maxPacketCount"] = state ? state.maxPacketCount : undefined;
            resourceInputs["nonIp"] = state ? state.nonIp : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["vlan"] = state ? state.vlan : undefined;
            resourceInputs["webfilterProfileStatus"] = state ? state.webfilterProfileStatus : undefined;
            resourceInputs["webfilterProfiles"] = state ? state.webfilterProfiles : undefined;
        } else {
            const args = argsOrState as FirewallSnifferArgs | undefined;
            resourceInputs["anomalies"] = args ? args.anomalies : undefined;
            resourceInputs["applicationListStatus"] = args ? args.applicationListStatus : undefined;
            resourceInputs["applicationLists"] = args ? args.applicationLists : undefined;
            resourceInputs["avProfileStatus"] = args ? args.avProfileStatus : undefined;
            resourceInputs["avProfiles"] = args ? args.avProfiles : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["deviceVdom"] = args ? args.deviceVdom : undefined;
            resourceInputs["dlpProfileStatus"] = args ? args.dlpProfileStatus : undefined;
            resourceInputs["dlpProfiles"] = args ? args.dlpProfiles : undefined;
            resourceInputs["dlpSensorStatus"] = args ? args.dlpSensorStatus : undefined;
            resourceInputs["dlpSensors"] = args ? args.dlpSensors : undefined;
            resourceInputs["dsri"] = args ? args.dsri : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["emailfilterProfileStatus"] = args ? args.emailfilterProfileStatus : undefined;
            resourceInputs["emailfilterProfiles"] = args ? args.emailfilterProfiles : undefined;
            resourceInputs["fileFilterProfileStatus"] = args ? args.fileFilterProfileStatus : undefined;
            resourceInputs["fileFilterProfiles"] = args ? args.fileFilterProfiles : undefined;
            resourceInputs["fosid"] = args ? args.fosid : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["interfaces"] = args ? args.interfaces : undefined;
            resourceInputs["ipThreatfeedStatus"] = args ? args.ipThreatfeedStatus : undefined;
            resourceInputs["ipThreatfeeds"] = args ? args.ipThreatfeeds : undefined;
            resourceInputs["ipsDosStatus"] = args ? args.ipsDosStatus : undefined;
            resourceInputs["ipsSensorStatus"] = args ? args.ipsSensorStatus : undefined;
            resourceInputs["ipsSensors"] = args ? args.ipsSensors : undefined;
            resourceInputs["ipv6"] = args ? args.ipv6 : undefined;
            resourceInputs["logtraffic"] = args ? args.logtraffic : undefined;
            resourceInputs["maxPacketCount"] = args ? args.maxPacketCount : undefined;
            resourceInputs["nonIp"] = args ? args.nonIp : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["vlan"] = args ? args.vlan : undefined;
            resourceInputs["webfilterProfileStatus"] = args ? args.webfilterProfileStatus : undefined;
            resourceInputs["webfilterProfiles"] = args ? args.webfilterProfiles : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FirewallSniffer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FirewallSniffer resources.
 */
export interface FirewallSnifferState {
    anomalies?: pulumi.Input<pulumi.Input<inputs.FirewallSnifferAnomaly>[]>;
    applicationListStatus?: pulumi.Input<string>;
    applicationLists?: pulumi.Input<pulumi.Input<string>[]>;
    avProfileStatus?: pulumi.Input<string>;
    avProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    dlpProfileStatus?: pulumi.Input<string>;
    dlpProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    dlpSensorStatus?: pulumi.Input<string>;
    dlpSensors?: pulumi.Input<pulumi.Input<string>[]>;
    dsri?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    emailfilterProfileStatus?: pulumi.Input<string>;
    emailfilterProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    fileFilterProfileStatus?: pulumi.Input<string>;
    fileFilterProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    fosid?: pulumi.Input<number>;
    host?: pulumi.Input<string>;
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    ipThreatfeedStatus?: pulumi.Input<string>;
    ipThreatfeeds?: pulumi.Input<pulumi.Input<string>[]>;
    ipsDosStatus?: pulumi.Input<string>;
    ipsSensorStatus?: pulumi.Input<string>;
    ipsSensors?: pulumi.Input<pulumi.Input<string>[]>;
    ipv6?: pulumi.Input<string>;
    logtraffic?: pulumi.Input<string>;
    maxPacketCount?: pulumi.Input<number>;
    nonIp?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    vlan?: pulumi.Input<string>;
    webfilterProfileStatus?: pulumi.Input<string>;
    webfilterProfiles?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a FirewallSniffer resource.
 */
export interface FirewallSnifferArgs {
    anomalies?: pulumi.Input<pulumi.Input<inputs.FirewallSnifferAnomaly>[]>;
    applicationListStatus?: pulumi.Input<string>;
    applicationLists?: pulumi.Input<pulumi.Input<string>[]>;
    avProfileStatus?: pulumi.Input<string>;
    avProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    dlpProfileStatus?: pulumi.Input<string>;
    dlpProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    dlpSensorStatus?: pulumi.Input<string>;
    dlpSensors?: pulumi.Input<pulumi.Input<string>[]>;
    dsri?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    emailfilterProfileStatus?: pulumi.Input<string>;
    emailfilterProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    fileFilterProfileStatus?: pulumi.Input<string>;
    fileFilterProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    fosid?: pulumi.Input<number>;
    host?: pulumi.Input<string>;
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    ipThreatfeedStatus?: pulumi.Input<string>;
    ipThreatfeeds?: pulumi.Input<pulumi.Input<string>[]>;
    ipsDosStatus?: pulumi.Input<string>;
    ipsSensorStatus?: pulumi.Input<string>;
    ipsSensors?: pulumi.Input<pulumi.Input<string>[]>;
    ipv6?: pulumi.Input<string>;
    logtraffic?: pulumi.Input<string>;
    maxPacketCount?: pulumi.Input<number>;
    nonIp?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    vlan?: pulumi.Input<string>;
    webfilterProfileStatus?: pulumi.Input<string>;
    webfilterProfiles?: pulumi.Input<pulumi.Input<string>[]>;
}
