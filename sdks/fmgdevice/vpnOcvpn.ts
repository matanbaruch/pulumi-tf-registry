// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VpnOcvpn extends pulumi.CustomResource {
    /**
     * Get an existing VpnOcvpn resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpnOcvpnState, opts?: pulumi.CustomResourceOptions): VpnOcvpn {
        return new VpnOcvpn(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/vpnOcvpn:VpnOcvpn';

    /**
     * Returns true if the given object is an instance of VpnOcvpn.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpnOcvpn {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpnOcvpn.__pulumiType;
    }

    public readonly autoDiscovery!: pulumi.Output<string>;
    public readonly autoDiscoveryShortcutMode!: pulumi.Output<string>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly deviceVdom!: pulumi.Output<string>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly eap!: pulumi.Output<string>;
    public readonly eapUsers!: pulumi.Output<string[]>;
    public readonly forticlientAccess!: pulumi.Output<outputs.VpnOcvpnForticlientAccess | undefined>;
    public readonly haAlias!: pulumi.Output<string | undefined>;
    public readonly ipAllocationBlocks!: pulumi.Output<string[]>;
    public readonly multipath!: pulumi.Output<string>;
    public readonly nat!: pulumi.Output<string>;
    public readonly overlays!: pulumi.Output<outputs.VpnOcvpnOverlay[] | undefined>;
    public readonly pollInterval!: pulumi.Output<number>;
    public readonly role!: pulumi.Output<string>;
    public readonly sdwan!: pulumi.Output<string>;
    public readonly sdwanZones!: pulumi.Output<string[]>;
    public readonly status!: pulumi.Output<string>;
    public readonly wanInterfaces!: pulumi.Output<string[]>;

    /**
     * Create a VpnOcvpn resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VpnOcvpnArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpnOcvpnArgs | VpnOcvpnState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpnOcvpnState | undefined;
            resourceInputs["autoDiscovery"] = state ? state.autoDiscovery : undefined;
            resourceInputs["autoDiscoveryShortcutMode"] = state ? state.autoDiscoveryShortcutMode : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["deviceVdom"] = state ? state.deviceVdom : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["eap"] = state ? state.eap : undefined;
            resourceInputs["eapUsers"] = state ? state.eapUsers : undefined;
            resourceInputs["forticlientAccess"] = state ? state.forticlientAccess : undefined;
            resourceInputs["haAlias"] = state ? state.haAlias : undefined;
            resourceInputs["ipAllocationBlocks"] = state ? state.ipAllocationBlocks : undefined;
            resourceInputs["multipath"] = state ? state.multipath : undefined;
            resourceInputs["nat"] = state ? state.nat : undefined;
            resourceInputs["overlays"] = state ? state.overlays : undefined;
            resourceInputs["pollInterval"] = state ? state.pollInterval : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["sdwan"] = state ? state.sdwan : undefined;
            resourceInputs["sdwanZones"] = state ? state.sdwanZones : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["wanInterfaces"] = state ? state.wanInterfaces : undefined;
        } else {
            const args = argsOrState as VpnOcvpnArgs | undefined;
            resourceInputs["autoDiscovery"] = args ? args.autoDiscovery : undefined;
            resourceInputs["autoDiscoveryShortcutMode"] = args ? args.autoDiscoveryShortcutMode : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["deviceVdom"] = args ? args.deviceVdom : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["eap"] = args ? args.eap : undefined;
            resourceInputs["eapUsers"] = args ? args.eapUsers : undefined;
            resourceInputs["forticlientAccess"] = args ? args.forticlientAccess : undefined;
            resourceInputs["haAlias"] = args ? args.haAlias : undefined;
            resourceInputs["ipAllocationBlocks"] = args ? args.ipAllocationBlocks : undefined;
            resourceInputs["multipath"] = args ? args.multipath : undefined;
            resourceInputs["nat"] = args ? args.nat : undefined;
            resourceInputs["overlays"] = args ? args.overlays : undefined;
            resourceInputs["pollInterval"] = args ? args.pollInterval : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["sdwan"] = args ? args.sdwan : undefined;
            resourceInputs["sdwanZones"] = args ? args.sdwanZones : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["wanInterfaces"] = args ? args.wanInterfaces : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpnOcvpn.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpnOcvpn resources.
 */
export interface VpnOcvpnState {
    autoDiscovery?: pulumi.Input<string>;
    autoDiscoveryShortcutMode?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    eap?: pulumi.Input<string>;
    eapUsers?: pulumi.Input<pulumi.Input<string>[]>;
    forticlientAccess?: pulumi.Input<inputs.VpnOcvpnForticlientAccess>;
    haAlias?: pulumi.Input<string>;
    ipAllocationBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    multipath?: pulumi.Input<string>;
    nat?: pulumi.Input<string>;
    overlays?: pulumi.Input<pulumi.Input<inputs.VpnOcvpnOverlay>[]>;
    pollInterval?: pulumi.Input<number>;
    role?: pulumi.Input<string>;
    sdwan?: pulumi.Input<string>;
    sdwanZones?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    wanInterfaces?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a VpnOcvpn resource.
 */
export interface VpnOcvpnArgs {
    autoDiscovery?: pulumi.Input<string>;
    autoDiscoveryShortcutMode?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    eap?: pulumi.Input<string>;
    eapUsers?: pulumi.Input<pulumi.Input<string>[]>;
    forticlientAccess?: pulumi.Input<inputs.VpnOcvpnForticlientAccess>;
    haAlias?: pulumi.Input<string>;
    ipAllocationBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    multipath?: pulumi.Input<string>;
    nat?: pulumi.Input<string>;
    overlays?: pulumi.Input<pulumi.Input<inputs.VpnOcvpnOverlay>[]>;
    pollInterval?: pulumi.Input<number>;
    role?: pulumi.Input<string>;
    sdwan?: pulumi.Input<string>;
    sdwanZones?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    wanInterfaces?: pulumi.Input<pulumi.Input<string>[]>;
}
