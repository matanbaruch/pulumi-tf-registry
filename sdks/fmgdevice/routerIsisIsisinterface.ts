// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RouterIsisIsisinterface extends pulumi.CustomResource {
    /**
     * Get an existing RouterIsisIsisinterface resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouterIsisIsisinterfaceState, opts?: pulumi.CustomResourceOptions): RouterIsisIsisinterface {
        return new RouterIsisIsisinterface(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/routerIsisIsisinterface:RouterIsisIsisinterface';

    /**
     * Returns true if the given object is an instance of RouterIsisIsisinterface.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RouterIsisIsisinterface {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RouterIsisIsisinterface.__pulumiType;
    }

    public readonly authKeychainL1s!: pulumi.Output<string[]>;
    public readonly authKeychainL2s!: pulumi.Output<string[]>;
    public readonly authModeL1!: pulumi.Output<string>;
    public readonly authModeL2!: pulumi.Output<string>;
    public readonly authPasswordL1s!: pulumi.Output<string[]>;
    public readonly authPasswordL2s!: pulumi.Output<string[]>;
    public readonly authSendOnlyL1!: pulumi.Output<string>;
    public readonly authSendOnlyL2!: pulumi.Output<string>;
    public readonly circuitType!: pulumi.Output<string>;
    public readonly csnpIntervalL1!: pulumi.Output<number>;
    public readonly csnpIntervalL2!: pulumi.Output<number>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly deviceVdom!: pulumi.Output<string>;
    public readonly helloIntervalL1!: pulumi.Output<number>;
    public readonly helloIntervalL2!: pulumi.Output<number>;
    public readonly helloMultiplierL1!: pulumi.Output<number>;
    public readonly helloMultiplierL2!: pulumi.Output<number>;
    public readonly helloPadding!: pulumi.Output<string>;
    public readonly lspInterval!: pulumi.Output<number>;
    public readonly lspRetransmitInterval!: pulumi.Output<number>;
    public readonly meshGroup!: pulumi.Output<string>;
    public readonly meshGroupId!: pulumi.Output<number | undefined>;
    public readonly metricL1!: pulumi.Output<number>;
    public readonly metricL2!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkType!: pulumi.Output<string | undefined>;
    public readonly priorityL1!: pulumi.Output<number>;
    public readonly priorityL2!: pulumi.Output<number>;
    public readonly status!: pulumi.Output<string>;
    public readonly status6!: pulumi.Output<string>;
    public readonly wideMetricL1!: pulumi.Output<number>;
    public readonly wideMetricL2!: pulumi.Output<number>;

    /**
     * Create a RouterIsisIsisinterface resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RouterIsisIsisinterfaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RouterIsisIsisinterfaceArgs | RouterIsisIsisinterfaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RouterIsisIsisinterfaceState | undefined;
            resourceInputs["authKeychainL1s"] = state ? state.authKeychainL1s : undefined;
            resourceInputs["authKeychainL2s"] = state ? state.authKeychainL2s : undefined;
            resourceInputs["authModeL1"] = state ? state.authModeL1 : undefined;
            resourceInputs["authModeL2"] = state ? state.authModeL2 : undefined;
            resourceInputs["authPasswordL1s"] = state ? state.authPasswordL1s : undefined;
            resourceInputs["authPasswordL2s"] = state ? state.authPasswordL2s : undefined;
            resourceInputs["authSendOnlyL1"] = state ? state.authSendOnlyL1 : undefined;
            resourceInputs["authSendOnlyL2"] = state ? state.authSendOnlyL2 : undefined;
            resourceInputs["circuitType"] = state ? state.circuitType : undefined;
            resourceInputs["csnpIntervalL1"] = state ? state.csnpIntervalL1 : undefined;
            resourceInputs["csnpIntervalL2"] = state ? state.csnpIntervalL2 : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["deviceVdom"] = state ? state.deviceVdom : undefined;
            resourceInputs["helloIntervalL1"] = state ? state.helloIntervalL1 : undefined;
            resourceInputs["helloIntervalL2"] = state ? state.helloIntervalL2 : undefined;
            resourceInputs["helloMultiplierL1"] = state ? state.helloMultiplierL1 : undefined;
            resourceInputs["helloMultiplierL2"] = state ? state.helloMultiplierL2 : undefined;
            resourceInputs["helloPadding"] = state ? state.helloPadding : undefined;
            resourceInputs["lspInterval"] = state ? state.lspInterval : undefined;
            resourceInputs["lspRetransmitInterval"] = state ? state.lspRetransmitInterval : undefined;
            resourceInputs["meshGroup"] = state ? state.meshGroup : undefined;
            resourceInputs["meshGroupId"] = state ? state.meshGroupId : undefined;
            resourceInputs["metricL1"] = state ? state.metricL1 : undefined;
            resourceInputs["metricL2"] = state ? state.metricL2 : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkType"] = state ? state.networkType : undefined;
            resourceInputs["priorityL1"] = state ? state.priorityL1 : undefined;
            resourceInputs["priorityL2"] = state ? state.priorityL2 : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["status6"] = state ? state.status6 : undefined;
            resourceInputs["wideMetricL1"] = state ? state.wideMetricL1 : undefined;
            resourceInputs["wideMetricL2"] = state ? state.wideMetricL2 : undefined;
        } else {
            const args = argsOrState as RouterIsisIsisinterfaceArgs | undefined;
            resourceInputs["authKeychainL1s"] = args ? args.authKeychainL1s : undefined;
            resourceInputs["authKeychainL2s"] = args ? args.authKeychainL2s : undefined;
            resourceInputs["authModeL1"] = args ? args.authModeL1 : undefined;
            resourceInputs["authModeL2"] = args ? args.authModeL2 : undefined;
            resourceInputs["authPasswordL1s"] = args?.authPasswordL1s ? pulumi.secret(args.authPasswordL1s) : undefined;
            resourceInputs["authPasswordL2s"] = args?.authPasswordL2s ? pulumi.secret(args.authPasswordL2s) : undefined;
            resourceInputs["authSendOnlyL1"] = args ? args.authSendOnlyL1 : undefined;
            resourceInputs["authSendOnlyL2"] = args ? args.authSendOnlyL2 : undefined;
            resourceInputs["circuitType"] = args ? args.circuitType : undefined;
            resourceInputs["csnpIntervalL1"] = args ? args.csnpIntervalL1 : undefined;
            resourceInputs["csnpIntervalL2"] = args ? args.csnpIntervalL2 : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["deviceVdom"] = args ? args.deviceVdom : undefined;
            resourceInputs["helloIntervalL1"] = args ? args.helloIntervalL1 : undefined;
            resourceInputs["helloIntervalL2"] = args ? args.helloIntervalL2 : undefined;
            resourceInputs["helloMultiplierL1"] = args ? args.helloMultiplierL1 : undefined;
            resourceInputs["helloMultiplierL2"] = args ? args.helloMultiplierL2 : undefined;
            resourceInputs["helloPadding"] = args ? args.helloPadding : undefined;
            resourceInputs["lspInterval"] = args ? args.lspInterval : undefined;
            resourceInputs["lspRetransmitInterval"] = args ? args.lspRetransmitInterval : undefined;
            resourceInputs["meshGroup"] = args ? args.meshGroup : undefined;
            resourceInputs["meshGroupId"] = args ? args.meshGroupId : undefined;
            resourceInputs["metricL1"] = args ? args.metricL1 : undefined;
            resourceInputs["metricL2"] = args ? args.metricL2 : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkType"] = args ? args.networkType : undefined;
            resourceInputs["priorityL1"] = args ? args.priorityL1 : undefined;
            resourceInputs["priorityL2"] = args ? args.priorityL2 : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["status6"] = args ? args.status6 : undefined;
            resourceInputs["wideMetricL1"] = args ? args.wideMetricL1 : undefined;
            resourceInputs["wideMetricL2"] = args ? args.wideMetricL2 : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["authPasswordL1s", "authPasswordL2s"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(RouterIsisIsisinterface.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RouterIsisIsisinterface resources.
 */
export interface RouterIsisIsisinterfaceState {
    authKeychainL1s?: pulumi.Input<pulumi.Input<string>[]>;
    authKeychainL2s?: pulumi.Input<pulumi.Input<string>[]>;
    authModeL1?: pulumi.Input<string>;
    authModeL2?: pulumi.Input<string>;
    authPasswordL1s?: pulumi.Input<pulumi.Input<string>[]>;
    authPasswordL2s?: pulumi.Input<pulumi.Input<string>[]>;
    authSendOnlyL1?: pulumi.Input<string>;
    authSendOnlyL2?: pulumi.Input<string>;
    circuitType?: pulumi.Input<string>;
    csnpIntervalL1?: pulumi.Input<number>;
    csnpIntervalL2?: pulumi.Input<number>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    helloIntervalL1?: pulumi.Input<number>;
    helloIntervalL2?: pulumi.Input<number>;
    helloMultiplierL1?: pulumi.Input<number>;
    helloMultiplierL2?: pulumi.Input<number>;
    helloPadding?: pulumi.Input<string>;
    lspInterval?: pulumi.Input<number>;
    lspRetransmitInterval?: pulumi.Input<number>;
    meshGroup?: pulumi.Input<string>;
    meshGroupId?: pulumi.Input<number>;
    metricL1?: pulumi.Input<number>;
    metricL2?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    networkType?: pulumi.Input<string>;
    priorityL1?: pulumi.Input<number>;
    priorityL2?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    status6?: pulumi.Input<string>;
    wideMetricL1?: pulumi.Input<number>;
    wideMetricL2?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a RouterIsisIsisinterface resource.
 */
export interface RouterIsisIsisinterfaceArgs {
    authKeychainL1s?: pulumi.Input<pulumi.Input<string>[]>;
    authKeychainL2s?: pulumi.Input<pulumi.Input<string>[]>;
    authModeL1?: pulumi.Input<string>;
    authModeL2?: pulumi.Input<string>;
    authPasswordL1s?: pulumi.Input<pulumi.Input<string>[]>;
    authPasswordL2s?: pulumi.Input<pulumi.Input<string>[]>;
    authSendOnlyL1?: pulumi.Input<string>;
    authSendOnlyL2?: pulumi.Input<string>;
    circuitType?: pulumi.Input<string>;
    csnpIntervalL1?: pulumi.Input<number>;
    csnpIntervalL2?: pulumi.Input<number>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    helloIntervalL1?: pulumi.Input<number>;
    helloIntervalL2?: pulumi.Input<number>;
    helloMultiplierL1?: pulumi.Input<number>;
    helloMultiplierL2?: pulumi.Input<number>;
    helloPadding?: pulumi.Input<string>;
    lspInterval?: pulumi.Input<number>;
    lspRetransmitInterval?: pulumi.Input<number>;
    meshGroup?: pulumi.Input<string>;
    meshGroupId?: pulumi.Input<number>;
    metricL1?: pulumi.Input<number>;
    metricL2?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    networkType?: pulumi.Input<string>;
    priorityL1?: pulumi.Input<number>;
    priorityL2?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    status6?: pulumi.Input<string>;
    wideMetricL1?: pulumi.Input<number>;
    wideMetricL2?: pulumi.Input<number>;
}
