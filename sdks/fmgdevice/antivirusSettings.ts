// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AntivirusSettings extends pulumi.CustomResource {
    /**
     * Get an existing AntivirusSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AntivirusSettingsState, opts?: pulumi.CustomResourceOptions): AntivirusSettings {
        return new AntivirusSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/antivirusSettings:AntivirusSettings';

    /**
     * Returns true if the given object is an instance of AntivirusSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AntivirusSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AntivirusSettings.__pulumiType;
    }

    public readonly cacheCleanResult!: pulumi.Output<string | undefined>;
    public readonly cacheInfectedResult!: pulumi.Output<string>;
    public readonly defaultDb!: pulumi.Output<string | undefined>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly deviceVdom!: pulumi.Output<string>;
    public readonly grayware!: pulumi.Output<string>;
    public readonly machineLearningDetection!: pulumi.Output<string>;
    public readonly overrideTimeout!: pulumi.Output<number | undefined>;
    public readonly useExtremeDb!: pulumi.Output<string>;

    /**
     * Create a AntivirusSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AntivirusSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AntivirusSettingsArgs | AntivirusSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AntivirusSettingsState | undefined;
            resourceInputs["cacheCleanResult"] = state ? state.cacheCleanResult : undefined;
            resourceInputs["cacheInfectedResult"] = state ? state.cacheInfectedResult : undefined;
            resourceInputs["defaultDb"] = state ? state.defaultDb : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["deviceVdom"] = state ? state.deviceVdom : undefined;
            resourceInputs["grayware"] = state ? state.grayware : undefined;
            resourceInputs["machineLearningDetection"] = state ? state.machineLearningDetection : undefined;
            resourceInputs["overrideTimeout"] = state ? state.overrideTimeout : undefined;
            resourceInputs["useExtremeDb"] = state ? state.useExtremeDb : undefined;
        } else {
            const args = argsOrState as AntivirusSettingsArgs | undefined;
            resourceInputs["cacheCleanResult"] = args ? args.cacheCleanResult : undefined;
            resourceInputs["cacheInfectedResult"] = args ? args.cacheInfectedResult : undefined;
            resourceInputs["defaultDb"] = args ? args.defaultDb : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["deviceVdom"] = args ? args.deviceVdom : undefined;
            resourceInputs["grayware"] = args ? args.grayware : undefined;
            resourceInputs["machineLearningDetection"] = args ? args.machineLearningDetection : undefined;
            resourceInputs["overrideTimeout"] = args ? args.overrideTimeout : undefined;
            resourceInputs["useExtremeDb"] = args ? args.useExtremeDb : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AntivirusSettings.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AntivirusSettings resources.
 */
export interface AntivirusSettingsState {
    cacheCleanResult?: pulumi.Input<string>;
    cacheInfectedResult?: pulumi.Input<string>;
    defaultDb?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    grayware?: pulumi.Input<string>;
    machineLearningDetection?: pulumi.Input<string>;
    overrideTimeout?: pulumi.Input<number>;
    useExtremeDb?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AntivirusSettings resource.
 */
export interface AntivirusSettingsArgs {
    cacheCleanResult?: pulumi.Input<string>;
    cacheInfectedResult?: pulumi.Input<string>;
    defaultDb?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    grayware?: pulumi.Input<string>;
    machineLearningDetection?: pulumi.Input<string>;
    overrideTimeout?: pulumi.Input<number>;
    useExtremeDb?: pulumi.Input<string>;
}
