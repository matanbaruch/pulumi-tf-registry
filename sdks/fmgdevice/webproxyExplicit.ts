// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class WebproxyExplicit extends pulumi.CustomResource {
    /**
     * Get an existing WebproxyExplicit resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WebproxyExplicitState, opts?: pulumi.CustomResourceOptions): WebproxyExplicit {
        return new WebproxyExplicit(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/webproxyExplicit:WebproxyExplicit';

    /**
     * Returns true if the given object is an instance of WebproxyExplicit.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WebproxyExplicit {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WebproxyExplicit.__pulumiType;
    }

    public readonly clientCert!: pulumi.Output<string | undefined>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly deviceVdom!: pulumi.Output<string>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly emptyCertAction!: pulumi.Output<string>;
    public readonly ftpIncomingPorts!: pulumi.Output<string[]>;
    public readonly ftpOverHttp!: pulumi.Output<string | undefined>;
    public readonly httpConnectionMode!: pulumi.Output<string>;
    public readonly httpIncomingPorts!: pulumi.Output<string[]>;
    public readonly httpsIncomingPorts!: pulumi.Output<string[]>;
    public readonly httpsReplacementMessage!: pulumi.Output<string>;
    public readonly incomingIp!: pulumi.Output<string | undefined>;
    public readonly incomingIp6!: pulumi.Output<string>;
    public readonly ipv6Status!: pulumi.Output<string>;
    public readonly messageUponServerError!: pulumi.Output<string>;
    public readonly outgoingIp6s!: pulumi.Output<string[]>;
    public readonly outgoingIps!: pulumi.Output<string[]>;
    public readonly pacFileData!: pulumi.Output<string | undefined>;
    public readonly pacFileName!: pulumi.Output<string | undefined>;
    public readonly pacFileServerPorts!: pulumi.Output<string[]>;
    public readonly pacFileServerStatus!: pulumi.Output<string | undefined>;
    public readonly pacFileThroughHttps!: pulumi.Output<string>;
    public readonly pacFileUrl!: pulumi.Output<string | undefined>;
    public readonly pacPolicies!: pulumi.Output<outputs.WebproxyExplicitPacPolicy[] | undefined>;
    public readonly prefDnsResult!: pulumi.Output<string>;
    public readonly realm!: pulumi.Output<string | undefined>;
    public readonly secDefaultAction!: pulumi.Output<string | undefined>;
    public readonly secureWebProxy!: pulumi.Output<string>;
    public readonly secureWebProxyCerts!: pulumi.Output<string[]>;
    public readonly socks!: pulumi.Output<string | undefined>;
    public readonly socksIncomingPorts!: pulumi.Output<string[]>;
    public readonly sslAlgorithm!: pulumi.Output<string>;
    public readonly sslDhBits!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly strictGuest!: pulumi.Output<string>;
    public readonly traceAuthNoRsp!: pulumi.Output<string>;
    public readonly unknownHttpVersion!: pulumi.Output<string | undefined>;
    public readonly userAgentDetect!: pulumi.Output<string>;

    /**
     * Create a WebproxyExplicit resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: WebproxyExplicitArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WebproxyExplicitArgs | WebproxyExplicitState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WebproxyExplicitState | undefined;
            resourceInputs["clientCert"] = state ? state.clientCert : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["deviceVdom"] = state ? state.deviceVdom : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["emptyCertAction"] = state ? state.emptyCertAction : undefined;
            resourceInputs["ftpIncomingPorts"] = state ? state.ftpIncomingPorts : undefined;
            resourceInputs["ftpOverHttp"] = state ? state.ftpOverHttp : undefined;
            resourceInputs["httpConnectionMode"] = state ? state.httpConnectionMode : undefined;
            resourceInputs["httpIncomingPorts"] = state ? state.httpIncomingPorts : undefined;
            resourceInputs["httpsIncomingPorts"] = state ? state.httpsIncomingPorts : undefined;
            resourceInputs["httpsReplacementMessage"] = state ? state.httpsReplacementMessage : undefined;
            resourceInputs["incomingIp"] = state ? state.incomingIp : undefined;
            resourceInputs["incomingIp6"] = state ? state.incomingIp6 : undefined;
            resourceInputs["ipv6Status"] = state ? state.ipv6Status : undefined;
            resourceInputs["messageUponServerError"] = state ? state.messageUponServerError : undefined;
            resourceInputs["outgoingIp6s"] = state ? state.outgoingIp6s : undefined;
            resourceInputs["outgoingIps"] = state ? state.outgoingIps : undefined;
            resourceInputs["pacFileData"] = state ? state.pacFileData : undefined;
            resourceInputs["pacFileName"] = state ? state.pacFileName : undefined;
            resourceInputs["pacFileServerPorts"] = state ? state.pacFileServerPorts : undefined;
            resourceInputs["pacFileServerStatus"] = state ? state.pacFileServerStatus : undefined;
            resourceInputs["pacFileThroughHttps"] = state ? state.pacFileThroughHttps : undefined;
            resourceInputs["pacFileUrl"] = state ? state.pacFileUrl : undefined;
            resourceInputs["pacPolicies"] = state ? state.pacPolicies : undefined;
            resourceInputs["prefDnsResult"] = state ? state.prefDnsResult : undefined;
            resourceInputs["realm"] = state ? state.realm : undefined;
            resourceInputs["secDefaultAction"] = state ? state.secDefaultAction : undefined;
            resourceInputs["secureWebProxy"] = state ? state.secureWebProxy : undefined;
            resourceInputs["secureWebProxyCerts"] = state ? state.secureWebProxyCerts : undefined;
            resourceInputs["socks"] = state ? state.socks : undefined;
            resourceInputs["socksIncomingPorts"] = state ? state.socksIncomingPorts : undefined;
            resourceInputs["sslAlgorithm"] = state ? state.sslAlgorithm : undefined;
            resourceInputs["sslDhBits"] = state ? state.sslDhBits : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["strictGuest"] = state ? state.strictGuest : undefined;
            resourceInputs["traceAuthNoRsp"] = state ? state.traceAuthNoRsp : undefined;
            resourceInputs["unknownHttpVersion"] = state ? state.unknownHttpVersion : undefined;
            resourceInputs["userAgentDetect"] = state ? state.userAgentDetect : undefined;
        } else {
            const args = argsOrState as WebproxyExplicitArgs | undefined;
            resourceInputs["clientCert"] = args ? args.clientCert : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["deviceVdom"] = args ? args.deviceVdom : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["emptyCertAction"] = args ? args.emptyCertAction : undefined;
            resourceInputs["ftpIncomingPorts"] = args ? args.ftpIncomingPorts : undefined;
            resourceInputs["ftpOverHttp"] = args ? args.ftpOverHttp : undefined;
            resourceInputs["httpConnectionMode"] = args ? args.httpConnectionMode : undefined;
            resourceInputs["httpIncomingPorts"] = args ? args.httpIncomingPorts : undefined;
            resourceInputs["httpsIncomingPorts"] = args ? args.httpsIncomingPorts : undefined;
            resourceInputs["httpsReplacementMessage"] = args ? args.httpsReplacementMessage : undefined;
            resourceInputs["incomingIp"] = args ? args.incomingIp : undefined;
            resourceInputs["incomingIp6"] = args ? args.incomingIp6 : undefined;
            resourceInputs["ipv6Status"] = args ? args.ipv6Status : undefined;
            resourceInputs["messageUponServerError"] = args ? args.messageUponServerError : undefined;
            resourceInputs["outgoingIp6s"] = args ? args.outgoingIp6s : undefined;
            resourceInputs["outgoingIps"] = args ? args.outgoingIps : undefined;
            resourceInputs["pacFileData"] = args ? args.pacFileData : undefined;
            resourceInputs["pacFileName"] = args ? args.pacFileName : undefined;
            resourceInputs["pacFileServerPorts"] = args ? args.pacFileServerPorts : undefined;
            resourceInputs["pacFileServerStatus"] = args ? args.pacFileServerStatus : undefined;
            resourceInputs["pacFileThroughHttps"] = args ? args.pacFileThroughHttps : undefined;
            resourceInputs["pacFileUrl"] = args ? args.pacFileUrl : undefined;
            resourceInputs["pacPolicies"] = args ? args.pacPolicies : undefined;
            resourceInputs["prefDnsResult"] = args ? args.prefDnsResult : undefined;
            resourceInputs["realm"] = args ? args.realm : undefined;
            resourceInputs["secDefaultAction"] = args ? args.secDefaultAction : undefined;
            resourceInputs["secureWebProxy"] = args ? args.secureWebProxy : undefined;
            resourceInputs["secureWebProxyCerts"] = args ? args.secureWebProxyCerts : undefined;
            resourceInputs["socks"] = args ? args.socks : undefined;
            resourceInputs["socksIncomingPorts"] = args ? args.socksIncomingPorts : undefined;
            resourceInputs["sslAlgorithm"] = args ? args.sslAlgorithm : undefined;
            resourceInputs["sslDhBits"] = args ? args.sslDhBits : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["strictGuest"] = args ? args.strictGuest : undefined;
            resourceInputs["traceAuthNoRsp"] = args ? args.traceAuthNoRsp : undefined;
            resourceInputs["unknownHttpVersion"] = args ? args.unknownHttpVersion : undefined;
            resourceInputs["userAgentDetect"] = args ? args.userAgentDetect : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WebproxyExplicit.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WebproxyExplicit resources.
 */
export interface WebproxyExplicitState {
    clientCert?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    emptyCertAction?: pulumi.Input<string>;
    ftpIncomingPorts?: pulumi.Input<pulumi.Input<string>[]>;
    ftpOverHttp?: pulumi.Input<string>;
    httpConnectionMode?: pulumi.Input<string>;
    httpIncomingPorts?: pulumi.Input<pulumi.Input<string>[]>;
    httpsIncomingPorts?: pulumi.Input<pulumi.Input<string>[]>;
    httpsReplacementMessage?: pulumi.Input<string>;
    incomingIp?: pulumi.Input<string>;
    incomingIp6?: pulumi.Input<string>;
    ipv6Status?: pulumi.Input<string>;
    messageUponServerError?: pulumi.Input<string>;
    outgoingIp6s?: pulumi.Input<pulumi.Input<string>[]>;
    outgoingIps?: pulumi.Input<pulumi.Input<string>[]>;
    pacFileData?: pulumi.Input<string>;
    pacFileName?: pulumi.Input<string>;
    pacFileServerPorts?: pulumi.Input<pulumi.Input<string>[]>;
    pacFileServerStatus?: pulumi.Input<string>;
    pacFileThroughHttps?: pulumi.Input<string>;
    pacFileUrl?: pulumi.Input<string>;
    pacPolicies?: pulumi.Input<pulumi.Input<inputs.WebproxyExplicitPacPolicy>[]>;
    prefDnsResult?: pulumi.Input<string>;
    realm?: pulumi.Input<string>;
    secDefaultAction?: pulumi.Input<string>;
    secureWebProxy?: pulumi.Input<string>;
    secureWebProxyCerts?: pulumi.Input<pulumi.Input<string>[]>;
    socks?: pulumi.Input<string>;
    socksIncomingPorts?: pulumi.Input<pulumi.Input<string>[]>;
    sslAlgorithm?: pulumi.Input<string>;
    sslDhBits?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    strictGuest?: pulumi.Input<string>;
    traceAuthNoRsp?: pulumi.Input<string>;
    unknownHttpVersion?: pulumi.Input<string>;
    userAgentDetect?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WebproxyExplicit resource.
 */
export interface WebproxyExplicitArgs {
    clientCert?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    emptyCertAction?: pulumi.Input<string>;
    ftpIncomingPorts?: pulumi.Input<pulumi.Input<string>[]>;
    ftpOverHttp?: pulumi.Input<string>;
    httpConnectionMode?: pulumi.Input<string>;
    httpIncomingPorts?: pulumi.Input<pulumi.Input<string>[]>;
    httpsIncomingPorts?: pulumi.Input<pulumi.Input<string>[]>;
    httpsReplacementMessage?: pulumi.Input<string>;
    incomingIp?: pulumi.Input<string>;
    incomingIp6?: pulumi.Input<string>;
    ipv6Status?: pulumi.Input<string>;
    messageUponServerError?: pulumi.Input<string>;
    outgoingIp6s?: pulumi.Input<pulumi.Input<string>[]>;
    outgoingIps?: pulumi.Input<pulumi.Input<string>[]>;
    pacFileData?: pulumi.Input<string>;
    pacFileName?: pulumi.Input<string>;
    pacFileServerPorts?: pulumi.Input<pulumi.Input<string>[]>;
    pacFileServerStatus?: pulumi.Input<string>;
    pacFileThroughHttps?: pulumi.Input<string>;
    pacFileUrl?: pulumi.Input<string>;
    pacPolicies?: pulumi.Input<pulumi.Input<inputs.WebproxyExplicitPacPolicy>[]>;
    prefDnsResult?: pulumi.Input<string>;
    realm?: pulumi.Input<string>;
    secDefaultAction?: pulumi.Input<string>;
    secureWebProxy?: pulumi.Input<string>;
    secureWebProxyCerts?: pulumi.Input<pulumi.Input<string>[]>;
    socks?: pulumi.Input<string>;
    socksIncomingPorts?: pulumi.Input<pulumi.Input<string>[]>;
    sslAlgorithm?: pulumi.Input<string>;
    sslDhBits?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    strictGuest?: pulumi.Input<string>;
    traceAuthNoRsp?: pulumi.Input<string>;
    unknownHttpVersion?: pulumi.Input<string>;
    userAgentDetect?: pulumi.Input<string>;
}
