// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ReportLayoutPage extends pulumi.CustomResource {
    /**
     * Get an existing ReportLayoutPage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ReportLayoutPageState, opts?: pulumi.CustomResourceOptions): ReportLayoutPage {
        return new ReportLayoutPage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/reportLayoutPage:ReportLayoutPage';

    /**
     * Returns true if the given object is an instance of ReportLayoutPage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ReportLayoutPage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ReportLayoutPage.__pulumiType;
    }

    public readonly columnBreakBefores!: pulumi.Output<string[]>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly deviceVdom!: pulumi.Output<string>;
    public readonly footer!: pulumi.Output<outputs.ReportLayoutPageFooter | undefined>;
    public readonly header!: pulumi.Output<outputs.ReportLayoutPageHeader | undefined>;
    public readonly layout!: pulumi.Output<string>;
    public readonly options!: pulumi.Output<string[]>;
    public readonly pageBreakBefores!: pulumi.Output<string[]>;
    public readonly paper!: pulumi.Output<string>;

    /**
     * Create a ReportLayoutPage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ReportLayoutPageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ReportLayoutPageArgs | ReportLayoutPageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ReportLayoutPageState | undefined;
            resourceInputs["columnBreakBefores"] = state ? state.columnBreakBefores : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["deviceVdom"] = state ? state.deviceVdom : undefined;
            resourceInputs["footer"] = state ? state.footer : undefined;
            resourceInputs["header"] = state ? state.header : undefined;
            resourceInputs["layout"] = state ? state.layout : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["pageBreakBefores"] = state ? state.pageBreakBefores : undefined;
            resourceInputs["paper"] = state ? state.paper : undefined;
        } else {
            const args = argsOrState as ReportLayoutPageArgs | undefined;
            if ((!args || args.layout === undefined) && !opts.urn) {
                throw new Error("Missing required property 'layout'");
            }
            resourceInputs["columnBreakBefores"] = args ? args.columnBreakBefores : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["deviceVdom"] = args ? args.deviceVdom : undefined;
            resourceInputs["footer"] = args ? args.footer : undefined;
            resourceInputs["header"] = args ? args.header : undefined;
            resourceInputs["layout"] = args ? args.layout : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["pageBreakBefores"] = args ? args.pageBreakBefores : undefined;
            resourceInputs["paper"] = args ? args.paper : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ReportLayoutPage.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ReportLayoutPage resources.
 */
export interface ReportLayoutPageState {
    columnBreakBefores?: pulumi.Input<pulumi.Input<string>[]>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    footer?: pulumi.Input<inputs.ReportLayoutPageFooter>;
    header?: pulumi.Input<inputs.ReportLayoutPageHeader>;
    layout?: pulumi.Input<string>;
    options?: pulumi.Input<pulumi.Input<string>[]>;
    pageBreakBefores?: pulumi.Input<pulumi.Input<string>[]>;
    paper?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ReportLayoutPage resource.
 */
export interface ReportLayoutPageArgs {
    columnBreakBefores?: pulumi.Input<pulumi.Input<string>[]>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    footer?: pulumi.Input<inputs.ReportLayoutPageFooter>;
    header?: pulumi.Input<inputs.ReportLayoutPageHeader>;
    layout: pulumi.Input<string>;
    options?: pulumi.Input<pulumi.Input<string>[]>;
    pageBreakBefores?: pulumi.Input<pulumi.Input<string>[]>;
    paper?: pulumi.Input<string>;
}
