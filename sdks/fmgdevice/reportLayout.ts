// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ReportLayout extends pulumi.CustomResource {
    /**
     * Get an existing ReportLayout resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ReportLayoutState, opts?: pulumi.CustomResourceOptions): ReportLayout {
        return new ReportLayout(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/reportLayout:ReportLayout';

    /**
     * Returns true if the given object is an instance of ReportLayout.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ReportLayout {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ReportLayout.__pulumiType;
    }

    public readonly bodyItems!: pulumi.Output<outputs.ReportLayoutBodyItem[] | undefined>;
    public readonly cutoffOption!: pulumi.Output<string>;
    public readonly cutoffTime!: pulumi.Output<string>;
    public readonly day!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly deviceVdom!: pulumi.Output<string>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly emailRecipients!: pulumi.Output<string | undefined>;
    public readonly emailSend!: pulumi.Output<string>;
    public readonly formats!: pulumi.Output<string[]>;
    public readonly maxPdfReport!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly options!: pulumi.Output<string[]>;
    public readonly page!: pulumi.Output<outputs.ReportLayoutPage | undefined>;
    public readonly scheduleType!: pulumi.Output<string>;
    public readonly styleTheme!: pulumi.Output<string | undefined>;
    public readonly subtitle!: pulumi.Output<string | undefined>;
    public readonly time!: pulumi.Output<string>;
    public readonly title!: pulumi.Output<string | undefined>;

    /**
     * Create a ReportLayout resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ReportLayoutArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ReportLayoutArgs | ReportLayoutState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ReportLayoutState | undefined;
            resourceInputs["bodyItems"] = state ? state.bodyItems : undefined;
            resourceInputs["cutoffOption"] = state ? state.cutoffOption : undefined;
            resourceInputs["cutoffTime"] = state ? state.cutoffTime : undefined;
            resourceInputs["day"] = state ? state.day : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["deviceVdom"] = state ? state.deviceVdom : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["emailRecipients"] = state ? state.emailRecipients : undefined;
            resourceInputs["emailSend"] = state ? state.emailSend : undefined;
            resourceInputs["formats"] = state ? state.formats : undefined;
            resourceInputs["maxPdfReport"] = state ? state.maxPdfReport : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["page"] = state ? state.page : undefined;
            resourceInputs["scheduleType"] = state ? state.scheduleType : undefined;
            resourceInputs["styleTheme"] = state ? state.styleTheme : undefined;
            resourceInputs["subtitle"] = state ? state.subtitle : undefined;
            resourceInputs["time"] = state ? state.time : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
        } else {
            const args = argsOrState as ReportLayoutArgs | undefined;
            resourceInputs["bodyItems"] = args ? args.bodyItems : undefined;
            resourceInputs["cutoffOption"] = args ? args.cutoffOption : undefined;
            resourceInputs["cutoffTime"] = args ? args.cutoffTime : undefined;
            resourceInputs["day"] = args ? args.day : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["deviceVdom"] = args ? args.deviceVdom : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["emailRecipients"] = args ? args.emailRecipients : undefined;
            resourceInputs["emailSend"] = args ? args.emailSend : undefined;
            resourceInputs["formats"] = args ? args.formats : undefined;
            resourceInputs["maxPdfReport"] = args ? args.maxPdfReport : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["page"] = args ? args.page : undefined;
            resourceInputs["scheduleType"] = args ? args.scheduleType : undefined;
            resourceInputs["styleTheme"] = args ? args.styleTheme : undefined;
            resourceInputs["subtitle"] = args ? args.subtitle : undefined;
            resourceInputs["time"] = args ? args.time : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ReportLayout.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ReportLayout resources.
 */
export interface ReportLayoutState {
    bodyItems?: pulumi.Input<pulumi.Input<inputs.ReportLayoutBodyItem>[]>;
    cutoffOption?: pulumi.Input<string>;
    cutoffTime?: pulumi.Input<string>;
    day?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    emailRecipients?: pulumi.Input<string>;
    emailSend?: pulumi.Input<string>;
    formats?: pulumi.Input<pulumi.Input<string>[]>;
    maxPdfReport?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    options?: pulumi.Input<pulumi.Input<string>[]>;
    page?: pulumi.Input<inputs.ReportLayoutPage>;
    scheduleType?: pulumi.Input<string>;
    styleTheme?: pulumi.Input<string>;
    subtitle?: pulumi.Input<string>;
    time?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ReportLayout resource.
 */
export interface ReportLayoutArgs {
    bodyItems?: pulumi.Input<pulumi.Input<inputs.ReportLayoutBodyItem>[]>;
    cutoffOption?: pulumi.Input<string>;
    cutoffTime?: pulumi.Input<string>;
    day?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    emailRecipients?: pulumi.Input<string>;
    emailSend?: pulumi.Input<string>;
    formats?: pulumi.Input<pulumi.Input<string>[]>;
    maxPdfReport?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    options?: pulumi.Input<pulumi.Input<string>[]>;
    page?: pulumi.Input<inputs.ReportLayoutPage>;
    scheduleType?: pulumi.Input<string>;
    styleTheme?: pulumi.Input<string>;
    subtitle?: pulumi.Input<string>;
    time?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
}
