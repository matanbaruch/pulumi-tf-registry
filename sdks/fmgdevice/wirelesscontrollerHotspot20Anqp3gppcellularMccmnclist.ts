// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class WirelesscontrollerHotspot20Anqp3gppcellularMccmnclist extends pulumi.CustomResource {
    /**
     * Get an existing WirelesscontrollerHotspot20Anqp3gppcellularMccmnclist resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WirelesscontrollerHotspot20Anqp3gppcellularMccmnclistState, opts?: pulumi.CustomResourceOptions): WirelesscontrollerHotspot20Anqp3gppcellularMccmnclist {
        return new WirelesscontrollerHotspot20Anqp3gppcellularMccmnclist(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/wirelesscontrollerHotspot20Anqp3gppcellularMccmnclist:WirelesscontrollerHotspot20Anqp3gppcellularMccmnclist';

    /**
     * Returns true if the given object is an instance of WirelesscontrollerHotspot20Anqp3gppcellularMccmnclist.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WirelesscontrollerHotspot20Anqp3gppcellularMccmnclist {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WirelesscontrollerHotspot20Anqp3gppcellularMccmnclist.__pulumiType;
    }

    public readonly anqp3gppCellular!: pulumi.Output<string>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly deviceVdom!: pulumi.Output<string>;
    public readonly fosid!: pulumi.Output<number | undefined>;
    public readonly mcc!: pulumi.Output<string | undefined>;
    public readonly mnc!: pulumi.Output<string | undefined>;

    /**
     * Create a WirelesscontrollerHotspot20Anqp3gppcellularMccmnclist resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WirelesscontrollerHotspot20Anqp3gppcellularMccmnclistArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WirelesscontrollerHotspot20Anqp3gppcellularMccmnclistArgs | WirelesscontrollerHotspot20Anqp3gppcellularMccmnclistState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WirelesscontrollerHotspot20Anqp3gppcellularMccmnclistState | undefined;
            resourceInputs["anqp3gppCellular"] = state ? state.anqp3gppCellular : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["deviceVdom"] = state ? state.deviceVdom : undefined;
            resourceInputs["fosid"] = state ? state.fosid : undefined;
            resourceInputs["mcc"] = state ? state.mcc : undefined;
            resourceInputs["mnc"] = state ? state.mnc : undefined;
        } else {
            const args = argsOrState as WirelesscontrollerHotspot20Anqp3gppcellularMccmnclistArgs | undefined;
            if ((!args || args.anqp3gppCellular === undefined) && !opts.urn) {
                throw new Error("Missing required property 'anqp3gppCellular'");
            }
            resourceInputs["anqp3gppCellular"] = args ? args.anqp3gppCellular : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["deviceVdom"] = args ? args.deviceVdom : undefined;
            resourceInputs["fosid"] = args ? args.fosid : undefined;
            resourceInputs["mcc"] = args ? args.mcc : undefined;
            resourceInputs["mnc"] = args ? args.mnc : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WirelesscontrollerHotspot20Anqp3gppcellularMccmnclist.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WirelesscontrollerHotspot20Anqp3gppcellularMccmnclist resources.
 */
export interface WirelesscontrollerHotspot20Anqp3gppcellularMccmnclistState {
    anqp3gppCellular?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    fosid?: pulumi.Input<number>;
    mcc?: pulumi.Input<string>;
    mnc?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WirelesscontrollerHotspot20Anqp3gppcellularMccmnclist resource.
 */
export interface WirelesscontrollerHotspot20Anqp3gppcellularMccmnclistArgs {
    anqp3gppCellular: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    fosid?: pulumi.Input<number>;
    mcc?: pulumi.Input<string>;
    mnc?: pulumi.Input<string>;
}
