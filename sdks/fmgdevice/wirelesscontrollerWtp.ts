// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class WirelesscontrollerWtp extends pulumi.CustomResource {
    /**
     * Get an existing WirelesscontrollerWtp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WirelesscontrollerWtpState, opts?: pulumi.CustomResourceOptions): WirelesscontrollerWtp {
        return new WirelesscontrollerWtp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/wirelesscontrollerWtp:WirelesscontrollerWtp';

    /**
     * Returns true if the given object is an instance of WirelesscontrollerWtp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WirelesscontrollerWtp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WirelesscontrollerWtp.__pulumiType;
    }

    public readonly admin!: pulumi.Output<string>;
    public readonly allowaccesses!: pulumi.Output<string[]>;
    public readonly apcfgProfiles!: pulumi.Output<string[]>;
    public readonly bleMajorId!: pulumi.Output<number | undefined>;
    public readonly bleMinorId!: pulumi.Output<number | undefined>;
    public readonly bonjourProfiles!: pulumi.Output<string[]>;
    public readonly coordinateLatitude!: pulumi.Output<string | undefined>;
    public readonly coordinateLongitude!: pulumi.Output<string | undefined>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly deviceVdom!: pulumi.Output<string>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly firmwareProvision!: pulumi.Output<string | undefined>;
    public readonly firmwareProvisionLatest!: pulumi.Output<string>;
    public readonly imageDownload!: pulumi.Output<string>;
    public readonly index!: pulumi.Output<number | undefined>;
    public readonly ipFragmentPreventings!: pulumi.Output<string[]>;
    public readonly lan!: pulumi.Output<outputs.WirelesscontrollerWtpLan | undefined>;
    public readonly ledState!: pulumi.Output<string>;
    public readonly location!: pulumi.Output<string | undefined>;
    public readonly loginPasswdChange!: pulumi.Output<string | undefined>;
    public readonly loginPasswds!: pulumi.Output<string[]>;
    public readonly meshBridgeEnable!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly overrideAllowaccess!: pulumi.Output<string>;
    public readonly overrideIpFragment!: pulumi.Output<string>;
    public readonly overrideLan!: pulumi.Output<string>;
    public readonly overrideLedState!: pulumi.Output<string>;
    public readonly overrideLoginPasswdChange!: pulumi.Output<string>;
    public readonly overrideSplitTunnel!: pulumi.Output<string>;
    public readonly overrideWanPortMode!: pulumi.Output<string | undefined>;
    public readonly purdueLevel!: pulumi.Output<string>;
    public readonly radio1!: pulumi.Output<outputs.WirelesscontrollerWtpRadio1 | undefined>;
    public readonly radio2!: pulumi.Output<outputs.WirelesscontrollerWtpRadio2 | undefined>;
    public readonly radio3!: pulumi.Output<outputs.WirelesscontrollerWtpRadio3 | undefined>;
    public readonly radio4!: pulumi.Output<outputs.WirelesscontrollerWtpRadio4 | undefined>;
    public readonly regionX!: pulumi.Output<string>;
    public readonly regionY!: pulumi.Output<string>;
    public readonly regions!: pulumi.Output<string[]>;
    public readonly splitTunnelingAclLocalApSubnet!: pulumi.Output<string>;
    public readonly splitTunnelingAclPath!: pulumi.Output<string>;
    public readonly splitTunnelingAcls!: pulumi.Output<outputs.WirelesscontrollerWtpSplitTunnelingAcl[] | undefined>;
    public readonly tunMtuDownlink!: pulumi.Output<number | undefined>;
    public readonly tunMtuUplink!: pulumi.Output<number | undefined>;
    public readonly uuid!: pulumi.Output<string>;
    public readonly wanPortMode!: pulumi.Output<string | undefined>;
    public readonly wtpId!: pulumi.Output<string | undefined>;
    public readonly wtpMode!: pulumi.Output<string>;
    public readonly wtpProfiles!: pulumi.Output<string[]>;

    /**
     * Create a WirelesscontrollerWtp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: WirelesscontrollerWtpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WirelesscontrollerWtpArgs | WirelesscontrollerWtpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WirelesscontrollerWtpState | undefined;
            resourceInputs["admin"] = state ? state.admin : undefined;
            resourceInputs["allowaccesses"] = state ? state.allowaccesses : undefined;
            resourceInputs["apcfgProfiles"] = state ? state.apcfgProfiles : undefined;
            resourceInputs["bleMajorId"] = state ? state.bleMajorId : undefined;
            resourceInputs["bleMinorId"] = state ? state.bleMinorId : undefined;
            resourceInputs["bonjourProfiles"] = state ? state.bonjourProfiles : undefined;
            resourceInputs["coordinateLatitude"] = state ? state.coordinateLatitude : undefined;
            resourceInputs["coordinateLongitude"] = state ? state.coordinateLongitude : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["deviceVdom"] = state ? state.deviceVdom : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["firmwareProvision"] = state ? state.firmwareProvision : undefined;
            resourceInputs["firmwareProvisionLatest"] = state ? state.firmwareProvisionLatest : undefined;
            resourceInputs["imageDownload"] = state ? state.imageDownload : undefined;
            resourceInputs["index"] = state ? state.index : undefined;
            resourceInputs["ipFragmentPreventings"] = state ? state.ipFragmentPreventings : undefined;
            resourceInputs["lan"] = state ? state.lan : undefined;
            resourceInputs["ledState"] = state ? state.ledState : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["loginPasswdChange"] = state ? state.loginPasswdChange : undefined;
            resourceInputs["loginPasswds"] = state ? state.loginPasswds : undefined;
            resourceInputs["meshBridgeEnable"] = state ? state.meshBridgeEnable : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["overrideAllowaccess"] = state ? state.overrideAllowaccess : undefined;
            resourceInputs["overrideIpFragment"] = state ? state.overrideIpFragment : undefined;
            resourceInputs["overrideLan"] = state ? state.overrideLan : undefined;
            resourceInputs["overrideLedState"] = state ? state.overrideLedState : undefined;
            resourceInputs["overrideLoginPasswdChange"] = state ? state.overrideLoginPasswdChange : undefined;
            resourceInputs["overrideSplitTunnel"] = state ? state.overrideSplitTunnel : undefined;
            resourceInputs["overrideWanPortMode"] = state ? state.overrideWanPortMode : undefined;
            resourceInputs["purdueLevel"] = state ? state.purdueLevel : undefined;
            resourceInputs["radio1"] = state ? state.radio1 : undefined;
            resourceInputs["radio2"] = state ? state.radio2 : undefined;
            resourceInputs["radio3"] = state ? state.radio3 : undefined;
            resourceInputs["radio4"] = state ? state.radio4 : undefined;
            resourceInputs["regionX"] = state ? state.regionX : undefined;
            resourceInputs["regionY"] = state ? state.regionY : undefined;
            resourceInputs["regions"] = state ? state.regions : undefined;
            resourceInputs["splitTunnelingAclLocalApSubnet"] = state ? state.splitTunnelingAclLocalApSubnet : undefined;
            resourceInputs["splitTunnelingAclPath"] = state ? state.splitTunnelingAclPath : undefined;
            resourceInputs["splitTunnelingAcls"] = state ? state.splitTunnelingAcls : undefined;
            resourceInputs["tunMtuDownlink"] = state ? state.tunMtuDownlink : undefined;
            resourceInputs["tunMtuUplink"] = state ? state.tunMtuUplink : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["wanPortMode"] = state ? state.wanPortMode : undefined;
            resourceInputs["wtpId"] = state ? state.wtpId : undefined;
            resourceInputs["wtpMode"] = state ? state.wtpMode : undefined;
            resourceInputs["wtpProfiles"] = state ? state.wtpProfiles : undefined;
        } else {
            const args = argsOrState as WirelesscontrollerWtpArgs | undefined;
            resourceInputs["admin"] = args ? args.admin : undefined;
            resourceInputs["allowaccesses"] = args ? args.allowaccesses : undefined;
            resourceInputs["apcfgProfiles"] = args ? args.apcfgProfiles : undefined;
            resourceInputs["bleMajorId"] = args ? args.bleMajorId : undefined;
            resourceInputs["bleMinorId"] = args ? args.bleMinorId : undefined;
            resourceInputs["bonjourProfiles"] = args ? args.bonjourProfiles : undefined;
            resourceInputs["coordinateLatitude"] = args ? args.coordinateLatitude : undefined;
            resourceInputs["coordinateLongitude"] = args ? args.coordinateLongitude : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["deviceVdom"] = args ? args.deviceVdom : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["firmwareProvision"] = args ? args.firmwareProvision : undefined;
            resourceInputs["firmwareProvisionLatest"] = args ? args.firmwareProvisionLatest : undefined;
            resourceInputs["imageDownload"] = args ? args.imageDownload : undefined;
            resourceInputs["index"] = args ? args.index : undefined;
            resourceInputs["ipFragmentPreventings"] = args ? args.ipFragmentPreventings : undefined;
            resourceInputs["lan"] = args ? args.lan : undefined;
            resourceInputs["ledState"] = args ? args.ledState : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["loginPasswdChange"] = args ? args.loginPasswdChange : undefined;
            resourceInputs["loginPasswds"] = args?.loginPasswds ? pulumi.secret(args.loginPasswds) : undefined;
            resourceInputs["meshBridgeEnable"] = args ? args.meshBridgeEnable : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["overrideAllowaccess"] = args ? args.overrideAllowaccess : undefined;
            resourceInputs["overrideIpFragment"] = args ? args.overrideIpFragment : undefined;
            resourceInputs["overrideLan"] = args ? args.overrideLan : undefined;
            resourceInputs["overrideLedState"] = args ? args.overrideLedState : undefined;
            resourceInputs["overrideLoginPasswdChange"] = args ? args.overrideLoginPasswdChange : undefined;
            resourceInputs["overrideSplitTunnel"] = args ? args.overrideSplitTunnel : undefined;
            resourceInputs["overrideWanPortMode"] = args ? args.overrideWanPortMode : undefined;
            resourceInputs["purdueLevel"] = args ? args.purdueLevel : undefined;
            resourceInputs["radio1"] = args ? args.radio1 : undefined;
            resourceInputs["radio2"] = args ? args.radio2 : undefined;
            resourceInputs["radio3"] = args ? args.radio3 : undefined;
            resourceInputs["radio4"] = args ? args.radio4 : undefined;
            resourceInputs["regionX"] = args ? args.regionX : undefined;
            resourceInputs["regionY"] = args ? args.regionY : undefined;
            resourceInputs["regions"] = args ? args.regions : undefined;
            resourceInputs["splitTunnelingAclLocalApSubnet"] = args ? args.splitTunnelingAclLocalApSubnet : undefined;
            resourceInputs["splitTunnelingAclPath"] = args ? args.splitTunnelingAclPath : undefined;
            resourceInputs["splitTunnelingAcls"] = args ? args.splitTunnelingAcls : undefined;
            resourceInputs["tunMtuDownlink"] = args ? args.tunMtuDownlink : undefined;
            resourceInputs["tunMtuUplink"] = args ? args.tunMtuUplink : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["wanPortMode"] = args ? args.wanPortMode : undefined;
            resourceInputs["wtpId"] = args ? args.wtpId : undefined;
            resourceInputs["wtpMode"] = args ? args.wtpMode : undefined;
            resourceInputs["wtpProfiles"] = args ? args.wtpProfiles : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["loginPasswds"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(WirelesscontrollerWtp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WirelesscontrollerWtp resources.
 */
export interface WirelesscontrollerWtpState {
    admin?: pulumi.Input<string>;
    allowaccesses?: pulumi.Input<pulumi.Input<string>[]>;
    apcfgProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    bleMajorId?: pulumi.Input<number>;
    bleMinorId?: pulumi.Input<number>;
    bonjourProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    coordinateLatitude?: pulumi.Input<string>;
    coordinateLongitude?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    firmwareProvision?: pulumi.Input<string>;
    firmwareProvisionLatest?: pulumi.Input<string>;
    imageDownload?: pulumi.Input<string>;
    index?: pulumi.Input<number>;
    ipFragmentPreventings?: pulumi.Input<pulumi.Input<string>[]>;
    lan?: pulumi.Input<inputs.WirelesscontrollerWtpLan>;
    ledState?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    loginPasswdChange?: pulumi.Input<string>;
    loginPasswds?: pulumi.Input<pulumi.Input<string>[]>;
    meshBridgeEnable?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    overrideAllowaccess?: pulumi.Input<string>;
    overrideIpFragment?: pulumi.Input<string>;
    overrideLan?: pulumi.Input<string>;
    overrideLedState?: pulumi.Input<string>;
    overrideLoginPasswdChange?: pulumi.Input<string>;
    overrideSplitTunnel?: pulumi.Input<string>;
    overrideWanPortMode?: pulumi.Input<string>;
    purdueLevel?: pulumi.Input<string>;
    radio1?: pulumi.Input<inputs.WirelesscontrollerWtpRadio1>;
    radio2?: pulumi.Input<inputs.WirelesscontrollerWtpRadio2>;
    radio3?: pulumi.Input<inputs.WirelesscontrollerWtpRadio3>;
    radio4?: pulumi.Input<inputs.WirelesscontrollerWtpRadio4>;
    regionX?: pulumi.Input<string>;
    regionY?: pulumi.Input<string>;
    regions?: pulumi.Input<pulumi.Input<string>[]>;
    splitTunnelingAclLocalApSubnet?: pulumi.Input<string>;
    splitTunnelingAclPath?: pulumi.Input<string>;
    splitTunnelingAcls?: pulumi.Input<pulumi.Input<inputs.WirelesscontrollerWtpSplitTunnelingAcl>[]>;
    tunMtuDownlink?: pulumi.Input<number>;
    tunMtuUplink?: pulumi.Input<number>;
    uuid?: pulumi.Input<string>;
    wanPortMode?: pulumi.Input<string>;
    wtpId?: pulumi.Input<string>;
    wtpMode?: pulumi.Input<string>;
    wtpProfiles?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a WirelesscontrollerWtp resource.
 */
export interface WirelesscontrollerWtpArgs {
    admin?: pulumi.Input<string>;
    allowaccesses?: pulumi.Input<pulumi.Input<string>[]>;
    apcfgProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    bleMajorId?: pulumi.Input<number>;
    bleMinorId?: pulumi.Input<number>;
    bonjourProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    coordinateLatitude?: pulumi.Input<string>;
    coordinateLongitude?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    firmwareProvision?: pulumi.Input<string>;
    firmwareProvisionLatest?: pulumi.Input<string>;
    imageDownload?: pulumi.Input<string>;
    index?: pulumi.Input<number>;
    ipFragmentPreventings?: pulumi.Input<pulumi.Input<string>[]>;
    lan?: pulumi.Input<inputs.WirelesscontrollerWtpLan>;
    ledState?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    loginPasswdChange?: pulumi.Input<string>;
    loginPasswds?: pulumi.Input<pulumi.Input<string>[]>;
    meshBridgeEnable?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    overrideAllowaccess?: pulumi.Input<string>;
    overrideIpFragment?: pulumi.Input<string>;
    overrideLan?: pulumi.Input<string>;
    overrideLedState?: pulumi.Input<string>;
    overrideLoginPasswdChange?: pulumi.Input<string>;
    overrideSplitTunnel?: pulumi.Input<string>;
    overrideWanPortMode?: pulumi.Input<string>;
    purdueLevel?: pulumi.Input<string>;
    radio1?: pulumi.Input<inputs.WirelesscontrollerWtpRadio1>;
    radio2?: pulumi.Input<inputs.WirelesscontrollerWtpRadio2>;
    radio3?: pulumi.Input<inputs.WirelesscontrollerWtpRadio3>;
    radio4?: pulumi.Input<inputs.WirelesscontrollerWtpRadio4>;
    regionX?: pulumi.Input<string>;
    regionY?: pulumi.Input<string>;
    regions?: pulumi.Input<pulumi.Input<string>[]>;
    splitTunnelingAclLocalApSubnet?: pulumi.Input<string>;
    splitTunnelingAclPath?: pulumi.Input<string>;
    splitTunnelingAcls?: pulumi.Input<pulumi.Input<inputs.WirelesscontrollerWtpSplitTunnelingAcl>[]>;
    tunMtuDownlink?: pulumi.Input<number>;
    tunMtuUplink?: pulumi.Input<number>;
    uuid?: pulumi.Input<string>;
    wanPortMode?: pulumi.Input<string>;
    wtpId?: pulumi.Input<string>;
    wtpMode?: pulumi.Input<string>;
    wtpProfiles?: pulumi.Input<pulumi.Input<string>[]>;
}
