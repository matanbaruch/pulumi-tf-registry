// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VpnSslClient extends pulumi.CustomResource {
    /**
     * Get an existing VpnSslClient resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpnSslClientState, opts?: pulumi.CustomResourceOptions): VpnSslClient {
        return new VpnSslClient(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/vpnSslClient:VpnSslClient';

    /**
     * Returns true if the given object is an instance of VpnSslClient.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpnSslClient {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpnSslClient.__pulumiType;
    }

    public readonly certificates!: pulumi.Output<string[]>;
    public readonly classIds!: pulumi.Output<string[]>;
    public readonly comment!: pulumi.Output<string | undefined>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly deviceVdom!: pulumi.Output<string>;
    public readonly distance!: pulumi.Output<number>;
    public readonly interfaces!: pulumi.Output<string[]>;
    public readonly ipv4Subnets!: pulumi.Output<string[]>;
    public readonly ipv6Subnets!: pulumi.Output<string[]>;
    public readonly name!: pulumi.Output<string>;
    public readonly peers!: pulumi.Output<string[]>;
    public readonly port!: pulumi.Output<number>;
    public readonly priority!: pulumi.Output<number>;
    public readonly psks!: pulumi.Output<string[]>;
    public readonly realm!: pulumi.Output<string | undefined>;
    public readonly server!: pulumi.Output<string | undefined>;
    public readonly sourceIp!: pulumi.Output<string | undefined>;
    public readonly status!: pulumi.Output<string>;
    public readonly user!: pulumi.Output<string | undefined>;

    /**
     * Create a VpnSslClient resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VpnSslClientArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpnSslClientArgs | VpnSslClientState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpnSslClientState | undefined;
            resourceInputs["certificates"] = state ? state.certificates : undefined;
            resourceInputs["classIds"] = state ? state.classIds : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["deviceVdom"] = state ? state.deviceVdom : undefined;
            resourceInputs["distance"] = state ? state.distance : undefined;
            resourceInputs["interfaces"] = state ? state.interfaces : undefined;
            resourceInputs["ipv4Subnets"] = state ? state.ipv4Subnets : undefined;
            resourceInputs["ipv6Subnets"] = state ? state.ipv6Subnets : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["peers"] = state ? state.peers : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["psks"] = state ? state.psks : undefined;
            resourceInputs["realm"] = state ? state.realm : undefined;
            resourceInputs["server"] = state ? state.server : undefined;
            resourceInputs["sourceIp"] = state ? state.sourceIp : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
        } else {
            const args = argsOrState as VpnSslClientArgs | undefined;
            resourceInputs["certificates"] = args ? args.certificates : undefined;
            resourceInputs["classIds"] = args ? args.classIds : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["deviceVdom"] = args ? args.deviceVdom : undefined;
            resourceInputs["distance"] = args ? args.distance : undefined;
            resourceInputs["interfaces"] = args ? args.interfaces : undefined;
            resourceInputs["ipv4Subnets"] = args ? args.ipv4Subnets : undefined;
            resourceInputs["ipv6Subnets"] = args ? args.ipv6Subnets : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["peers"] = args ? args.peers : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["psks"] = args?.psks ? pulumi.secret(args.psks) : undefined;
            resourceInputs["realm"] = args ? args.realm : undefined;
            resourceInputs["server"] = args ? args.server : undefined;
            resourceInputs["sourceIp"] = args ? args.sourceIp : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["psks"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(VpnSslClient.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpnSslClient resources.
 */
export interface VpnSslClientState {
    certificates?: pulumi.Input<pulumi.Input<string>[]>;
    classIds?: pulumi.Input<pulumi.Input<string>[]>;
    comment?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    distance?: pulumi.Input<number>;
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    ipv4Subnets?: pulumi.Input<pulumi.Input<string>[]>;
    ipv6Subnets?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    peers?: pulumi.Input<pulumi.Input<string>[]>;
    port?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    psks?: pulumi.Input<pulumi.Input<string>[]>;
    realm?: pulumi.Input<string>;
    server?: pulumi.Input<string>;
    sourceIp?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    user?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpnSslClient resource.
 */
export interface VpnSslClientArgs {
    certificates?: pulumi.Input<pulumi.Input<string>[]>;
    classIds?: pulumi.Input<pulumi.Input<string>[]>;
    comment?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    distance?: pulumi.Input<number>;
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    ipv4Subnets?: pulumi.Input<pulumi.Input<string>[]>;
    ipv6Subnets?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    peers?: pulumi.Input<pulumi.Input<string>[]>;
    port?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    psks?: pulumi.Input<pulumi.Input<string>[]>;
    realm?: pulumi.Input<string>;
    server?: pulumi.Input<string>;
    sourceIp?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    user?: pulumi.Input<string>;
}
