// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SystemNtpNtpserver extends pulumi.CustomResource {
    /**
     * Get an existing SystemNtpNtpserver resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemNtpNtpserverState, opts?: pulumi.CustomResourceOptions): SystemNtpNtpserver {
        return new SystemNtpNtpserver(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/systemNtpNtpserver:SystemNtpNtpserver';

    /**
     * Returns true if the given object is an instance of SystemNtpNtpserver.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemNtpNtpserver {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemNtpNtpserver.__pulumiType;
    }

    public readonly authentication!: pulumi.Output<string | undefined>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly fosid!: pulumi.Output<number>;
    public readonly interfaceSelectMethod!: pulumi.Output<string>;
    public readonly interfaces!: pulumi.Output<string[]>;
    public readonly ipType!: pulumi.Output<string>;
    public readonly keyId!: pulumi.Output<number | undefined>;
    public readonly keyType!: pulumi.Output<string>;
    public readonly keys!: pulumi.Output<string[]>;
    public readonly ntpv3!: pulumi.Output<string>;
    public readonly server!: pulumi.Output<string | undefined>;

    /**
     * Create a SystemNtpNtpserver resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemNtpNtpserverArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemNtpNtpserverArgs | SystemNtpNtpserverState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemNtpNtpserverState | undefined;
            resourceInputs["authentication"] = state ? state.authentication : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["fosid"] = state ? state.fosid : undefined;
            resourceInputs["interfaceSelectMethod"] = state ? state.interfaceSelectMethod : undefined;
            resourceInputs["interfaces"] = state ? state.interfaces : undefined;
            resourceInputs["ipType"] = state ? state.ipType : undefined;
            resourceInputs["keyId"] = state ? state.keyId : undefined;
            resourceInputs["keyType"] = state ? state.keyType : undefined;
            resourceInputs["keys"] = state ? state.keys : undefined;
            resourceInputs["ntpv3"] = state ? state.ntpv3 : undefined;
            resourceInputs["server"] = state ? state.server : undefined;
        } else {
            const args = argsOrState as SystemNtpNtpserverArgs | undefined;
            resourceInputs["authentication"] = args ? args.authentication : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["fosid"] = args ? args.fosid : undefined;
            resourceInputs["interfaceSelectMethod"] = args ? args.interfaceSelectMethod : undefined;
            resourceInputs["interfaces"] = args ? args.interfaces : undefined;
            resourceInputs["ipType"] = args ? args.ipType : undefined;
            resourceInputs["keyId"] = args ? args.keyId : undefined;
            resourceInputs["keyType"] = args ? args.keyType : undefined;
            resourceInputs["keys"] = args?.keys ? pulumi.secret(args.keys) : undefined;
            resourceInputs["ntpv3"] = args ? args.ntpv3 : undefined;
            resourceInputs["server"] = args ? args.server : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["keys"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SystemNtpNtpserver.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemNtpNtpserver resources.
 */
export interface SystemNtpNtpserverState {
    authentication?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    fosid?: pulumi.Input<number>;
    interfaceSelectMethod?: pulumi.Input<string>;
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    ipType?: pulumi.Input<string>;
    keyId?: pulumi.Input<number>;
    keyType?: pulumi.Input<string>;
    keys?: pulumi.Input<pulumi.Input<string>[]>;
    ntpv3?: pulumi.Input<string>;
    server?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SystemNtpNtpserver resource.
 */
export interface SystemNtpNtpserverArgs {
    authentication?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    fosid?: pulumi.Input<number>;
    interfaceSelectMethod?: pulumi.Input<string>;
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    ipType?: pulumi.Input<string>;
    keyId?: pulumi.Input<number>;
    keyType?: pulumi.Input<string>;
    keys?: pulumi.Input<pulumi.Input<string>[]>;
    ntpv3?: pulumi.Input<string>;
    server?: pulumi.Input<string>;
}
