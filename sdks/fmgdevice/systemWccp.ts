// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SystemWccp extends pulumi.CustomResource {
    /**
     * Get an existing SystemWccp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemWccpState, opts?: pulumi.CustomResourceOptions): SystemWccp {
        return new SystemWccp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/systemWccp:SystemWccp';

    /**
     * Returns true if the given object is an instance of SystemWccp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemWccp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemWccp.__pulumiType;
    }

    public readonly assignmentBucketFormat!: pulumi.Output<string>;
    public readonly assignmentDstaddrMask!: pulumi.Output<string>;
    public readonly assignmentMethod!: pulumi.Output<string>;
    public readonly assignmentSrcaddrMask!: pulumi.Output<string>;
    public readonly assignmentWeight!: pulumi.Output<number | undefined>;
    public readonly authentication!: pulumi.Output<string>;
    public readonly cacheEngineMethod!: pulumi.Output<string>;
    public readonly cacheId!: pulumi.Output<string>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly deviceVdom!: pulumi.Output<string>;
    public readonly forwardMethod!: pulumi.Output<string>;
    public readonly groupAddress!: pulumi.Output<string>;
    public readonly passwords!: pulumi.Output<string[]>;
    public readonly ports!: pulumi.Output<number[]>;
    public readonly portsDefined!: pulumi.Output<string | undefined>;
    public readonly primaryHashes!: pulumi.Output<string[]>;
    public readonly priority!: pulumi.Output<number | undefined>;
    public readonly protocol!: pulumi.Output<number | undefined>;
    public readonly returnMethod!: pulumi.Output<string>;
    public readonly routerId!: pulumi.Output<string>;
    public readonly routerLists!: pulumi.Output<string[]>;
    public readonly serverLists!: pulumi.Output<string[]>;
    public readonly serverType!: pulumi.Output<string>;
    public readonly serviceId!: pulumi.Output<string | undefined>;
    public readonly serviceType!: pulumi.Output<string>;

    /**
     * Create a SystemWccp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemWccpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemWccpArgs | SystemWccpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemWccpState | undefined;
            resourceInputs["assignmentBucketFormat"] = state ? state.assignmentBucketFormat : undefined;
            resourceInputs["assignmentDstaddrMask"] = state ? state.assignmentDstaddrMask : undefined;
            resourceInputs["assignmentMethod"] = state ? state.assignmentMethod : undefined;
            resourceInputs["assignmentSrcaddrMask"] = state ? state.assignmentSrcaddrMask : undefined;
            resourceInputs["assignmentWeight"] = state ? state.assignmentWeight : undefined;
            resourceInputs["authentication"] = state ? state.authentication : undefined;
            resourceInputs["cacheEngineMethod"] = state ? state.cacheEngineMethod : undefined;
            resourceInputs["cacheId"] = state ? state.cacheId : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["deviceVdom"] = state ? state.deviceVdom : undefined;
            resourceInputs["forwardMethod"] = state ? state.forwardMethod : undefined;
            resourceInputs["groupAddress"] = state ? state.groupAddress : undefined;
            resourceInputs["passwords"] = state ? state.passwords : undefined;
            resourceInputs["ports"] = state ? state.ports : undefined;
            resourceInputs["portsDefined"] = state ? state.portsDefined : undefined;
            resourceInputs["primaryHashes"] = state ? state.primaryHashes : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["returnMethod"] = state ? state.returnMethod : undefined;
            resourceInputs["routerId"] = state ? state.routerId : undefined;
            resourceInputs["routerLists"] = state ? state.routerLists : undefined;
            resourceInputs["serverLists"] = state ? state.serverLists : undefined;
            resourceInputs["serverType"] = state ? state.serverType : undefined;
            resourceInputs["serviceId"] = state ? state.serviceId : undefined;
            resourceInputs["serviceType"] = state ? state.serviceType : undefined;
        } else {
            const args = argsOrState as SystemWccpArgs | undefined;
            resourceInputs["assignmentBucketFormat"] = args ? args.assignmentBucketFormat : undefined;
            resourceInputs["assignmentDstaddrMask"] = args ? args.assignmentDstaddrMask : undefined;
            resourceInputs["assignmentMethod"] = args ? args.assignmentMethod : undefined;
            resourceInputs["assignmentSrcaddrMask"] = args ? args.assignmentSrcaddrMask : undefined;
            resourceInputs["assignmentWeight"] = args ? args.assignmentWeight : undefined;
            resourceInputs["authentication"] = args ? args.authentication : undefined;
            resourceInputs["cacheEngineMethod"] = args ? args.cacheEngineMethod : undefined;
            resourceInputs["cacheId"] = args ? args.cacheId : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["deviceVdom"] = args ? args.deviceVdom : undefined;
            resourceInputs["forwardMethod"] = args ? args.forwardMethod : undefined;
            resourceInputs["groupAddress"] = args ? args.groupAddress : undefined;
            resourceInputs["passwords"] = args?.passwords ? pulumi.secret(args.passwords) : undefined;
            resourceInputs["ports"] = args ? args.ports : undefined;
            resourceInputs["portsDefined"] = args ? args.portsDefined : undefined;
            resourceInputs["primaryHashes"] = args ? args.primaryHashes : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["returnMethod"] = args ? args.returnMethod : undefined;
            resourceInputs["routerId"] = args ? args.routerId : undefined;
            resourceInputs["routerLists"] = args ? args.routerLists : undefined;
            resourceInputs["serverLists"] = args ? args.serverLists : undefined;
            resourceInputs["serverType"] = args ? args.serverType : undefined;
            resourceInputs["serviceId"] = args ? args.serviceId : undefined;
            resourceInputs["serviceType"] = args ? args.serviceType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["passwords"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SystemWccp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemWccp resources.
 */
export interface SystemWccpState {
    assignmentBucketFormat?: pulumi.Input<string>;
    assignmentDstaddrMask?: pulumi.Input<string>;
    assignmentMethod?: pulumi.Input<string>;
    assignmentSrcaddrMask?: pulumi.Input<string>;
    assignmentWeight?: pulumi.Input<number>;
    authentication?: pulumi.Input<string>;
    cacheEngineMethod?: pulumi.Input<string>;
    cacheId?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    forwardMethod?: pulumi.Input<string>;
    groupAddress?: pulumi.Input<string>;
    passwords?: pulumi.Input<pulumi.Input<string>[]>;
    ports?: pulumi.Input<pulumi.Input<number>[]>;
    portsDefined?: pulumi.Input<string>;
    primaryHashes?: pulumi.Input<pulumi.Input<string>[]>;
    priority?: pulumi.Input<number>;
    protocol?: pulumi.Input<number>;
    returnMethod?: pulumi.Input<string>;
    routerId?: pulumi.Input<string>;
    routerLists?: pulumi.Input<pulumi.Input<string>[]>;
    serverLists?: pulumi.Input<pulumi.Input<string>[]>;
    serverType?: pulumi.Input<string>;
    serviceId?: pulumi.Input<string>;
    serviceType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SystemWccp resource.
 */
export interface SystemWccpArgs {
    assignmentBucketFormat?: pulumi.Input<string>;
    assignmentDstaddrMask?: pulumi.Input<string>;
    assignmentMethod?: pulumi.Input<string>;
    assignmentSrcaddrMask?: pulumi.Input<string>;
    assignmentWeight?: pulumi.Input<number>;
    authentication?: pulumi.Input<string>;
    cacheEngineMethod?: pulumi.Input<string>;
    cacheId?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    forwardMethod?: pulumi.Input<string>;
    groupAddress?: pulumi.Input<string>;
    passwords?: pulumi.Input<pulumi.Input<string>[]>;
    ports?: pulumi.Input<pulumi.Input<number>[]>;
    portsDefined?: pulumi.Input<string>;
    primaryHashes?: pulumi.Input<pulumi.Input<string>[]>;
    priority?: pulumi.Input<number>;
    protocol?: pulumi.Input<number>;
    returnMethod?: pulumi.Input<string>;
    routerId?: pulumi.Input<string>;
    routerLists?: pulumi.Input<pulumi.Input<string>[]>;
    serverLists?: pulumi.Input<pulumi.Input<string>[]>;
    serverType?: pulumi.Input<string>;
    serviceId?: pulumi.Input<string>;
    serviceType?: pulumi.Input<string>;
}
