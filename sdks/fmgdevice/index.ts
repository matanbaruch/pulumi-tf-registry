// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AlertemailSettingArgs, AlertemailSettingState } from "./alertemailSetting";
export type AlertemailSetting = import("./alertemailSetting").AlertemailSetting;
export const AlertemailSetting: typeof import("./alertemailSetting").AlertemailSetting = null as any;
utilities.lazyLoad(exports, ["AlertemailSetting"], () => require("./alertemailSetting"));

export { AntivirusExemptlistArgs, AntivirusExemptlistState } from "./antivirusExemptlist";
export type AntivirusExemptlist = import("./antivirusExemptlist").AntivirusExemptlist;
export const AntivirusExemptlist: typeof import("./antivirusExemptlist").AntivirusExemptlist = null as any;
utilities.lazyLoad(exports, ["AntivirusExemptlist"], () => require("./antivirusExemptlist"));

export { AntivirusQuarantineArgs, AntivirusQuarantineState } from "./antivirusQuarantine";
export type AntivirusQuarantine = import("./antivirusQuarantine").AntivirusQuarantine;
export const AntivirusQuarantine: typeof import("./antivirusQuarantine").AntivirusQuarantine = null as any;
utilities.lazyLoad(exports, ["AntivirusQuarantine"], () => require("./antivirusQuarantine"));

export { AntivirusSettingsArgs, AntivirusSettingsState } from "./antivirusSettings";
export type AntivirusSettings = import("./antivirusSettings").AntivirusSettings;
export const AntivirusSettings: typeof import("./antivirusSettings").AntivirusSettings = null as any;
utilities.lazyLoad(exports, ["AntivirusSettings"], () => require("./antivirusSettings"));

export { ApplicationNameArgs, ApplicationNameState } from "./applicationName";
export type ApplicationName = import("./applicationName").ApplicationName;
export const ApplicationName: typeof import("./applicationName").ApplicationName = null as any;
utilities.lazyLoad(exports, ["ApplicationName"], () => require("./applicationName"));

export { ApplicationRulesettingsArgs, ApplicationRulesettingsState } from "./applicationRulesettings";
export type ApplicationRulesettings = import("./applicationRulesettings").ApplicationRulesettings;
export const ApplicationRulesettings: typeof import("./applicationRulesettings").ApplicationRulesettings = null as any;
utilities.lazyLoad(exports, ["ApplicationRulesettings"], () => require("./applicationRulesettings"));

export { AutomationSettingArgs, AutomationSettingState } from "./automationSetting";
export type AutomationSetting = import("./automationSetting").AutomationSetting;
export const AutomationSetting: typeof import("./automationSetting").AutomationSetting = null as any;
utilities.lazyLoad(exports, ["AutomationSetting"], () => require("./automationSetting"));

export { CertificateRemoteArgs, CertificateRemoteState } from "./certificateRemote";
export type CertificateRemote = import("./certificateRemote").CertificateRemote;
export const CertificateRemote: typeof import("./certificateRemote").CertificateRemote = null as any;
utilities.lazyLoad(exports, ["CertificateRemote"], () => require("./certificateRemote"));

export { DlpExactdatamatchArgs, DlpExactdatamatchState } from "./dlpExactdatamatch";
export type DlpExactdatamatch = import("./dlpExactdatamatch").DlpExactdatamatch;
export const DlpExactdatamatch: typeof import("./dlpExactdatamatch").DlpExactdatamatch = null as any;
utilities.lazyLoad(exports, ["DlpExactdatamatch"], () => require("./dlpExactdatamatch"));

export { DlpExactdatamatchColumnsArgs, DlpExactdatamatchColumnsState } from "./dlpExactdatamatchColumns";
export type DlpExactdatamatchColumns = import("./dlpExactdatamatchColumns").DlpExactdatamatchColumns;
export const DlpExactdatamatchColumns: typeof import("./dlpExactdatamatchColumns").DlpExactdatamatchColumns = null as any;
utilities.lazyLoad(exports, ["DlpExactdatamatchColumns"], () => require("./dlpExactdatamatchColumns"));

export { DlpExactdatamatchColumnsMoveArgs, DlpExactdatamatchColumnsMoveState } from "./dlpExactdatamatchColumnsMove";
export type DlpExactdatamatchColumnsMove = import("./dlpExactdatamatchColumnsMove").DlpExactdatamatchColumnsMove;
export const DlpExactdatamatchColumnsMove: typeof import("./dlpExactdatamatchColumnsMove").DlpExactdatamatchColumnsMove = null as any;
utilities.lazyLoad(exports, ["DlpExactdatamatchColumnsMove"], () => require("./dlpExactdatamatchColumnsMove"));

export { DlpFpdocsourceArgs, DlpFpdocsourceState } from "./dlpFpdocsource";
export type DlpFpdocsource = import("./dlpFpdocsource").DlpFpdocsource;
export const DlpFpdocsource: typeof import("./dlpFpdocsource").DlpFpdocsource = null as any;
utilities.lazyLoad(exports, ["DlpFpdocsource"], () => require("./dlpFpdocsource"));

export { DlpSettingsArgs, DlpSettingsState } from "./dlpSettings";
export type DlpSettings = import("./dlpSettings").DlpSettings;
export const DlpSettings: typeof import("./dlpSettings").DlpSettings = null as any;
utilities.lazyLoad(exports, ["DlpSettings"], () => require("./dlpSettings"));

export { DpdkCpusArgs, DpdkCpusState } from "./dpdkCpus";
export type DpdkCpus = import("./dpdkCpus").DpdkCpus;
export const DpdkCpus: typeof import("./dpdkCpus").DpdkCpus = null as any;
utilities.lazyLoad(exports, ["DpdkCpus"], () => require("./dpdkCpus"));

export { DpdkGlobalArgs, DpdkGlobalState } from "./dpdkGlobal";
export type DpdkGlobal = import("./dpdkGlobal").DpdkGlobal;
export const DpdkGlobal: typeof import("./dpdkGlobal").DpdkGlobal = null as any;
utilities.lazyLoad(exports, ["DpdkGlobal"], () => require("./dpdkGlobal"));

export { EmailfilterFortiguardArgs, EmailfilterFortiguardState } from "./emailfilterFortiguard";
export type EmailfilterFortiguard = import("./emailfilterFortiguard").EmailfilterFortiguard;
export const EmailfilterFortiguard: typeof import("./emailfilterFortiguard").EmailfilterFortiguard = null as any;
utilities.lazyLoad(exports, ["EmailfilterFortiguard"], () => require("./emailfilterFortiguard"));

export { EndpointcontrolSettingsArgs, EndpointcontrolSettingsState } from "./endpointcontrolSettings";
export type EndpointcontrolSettings = import("./endpointcontrolSettings").EndpointcontrolSettings;
export const EndpointcontrolSettings: typeof import("./endpointcontrolSettings").EndpointcontrolSettings = null as any;
utilities.lazyLoad(exports, ["EndpointcontrolSettings"], () => require("./endpointcontrolSettings"));

export { ExecWorkspaceActionArgs, ExecWorkspaceActionState } from "./execWorkspaceAction";
export type ExecWorkspaceAction = import("./execWorkspaceAction").ExecWorkspaceAction;
export const ExecWorkspaceAction: typeof import("./execWorkspaceAction").ExecWorkspaceAction = null as any;
utilities.lazyLoad(exports, ["ExecWorkspaceAction"], () => require("./execWorkspaceAction"));

export { ExtendercontrollerExtenderArgs, ExtendercontrollerExtenderState } from "./extendercontrollerExtender";
export type ExtendercontrollerExtender = import("./extendercontrollerExtender").ExtendercontrollerExtender;
export const ExtendercontrollerExtender: typeof import("./extendercontrollerExtender").ExtendercontrollerExtender = null as any;
utilities.lazyLoad(exports, ["ExtendercontrollerExtender"], () => require("./extendercontrollerExtender"));

export { ExtendercontrollerExtenderWanextensionArgs, ExtendercontrollerExtenderWanextensionState } from "./extendercontrollerExtenderWanextension";
export type ExtendercontrollerExtenderWanextension = import("./extendercontrollerExtenderWanextension").ExtendercontrollerExtenderWanextension;
export const ExtendercontrollerExtenderWanextension: typeof import("./extendercontrollerExtenderWanextension").ExtendercontrollerExtenderWanextension = null as any;
utilities.lazyLoad(exports, ["ExtendercontrollerExtenderWanextension"], () => require("./extendercontrollerExtenderWanextension"));

export { ExtensioncontrollerExtenderArgs, ExtensioncontrollerExtenderState } from "./extensioncontrollerExtender";
export type ExtensioncontrollerExtender = import("./extensioncontrollerExtender").ExtensioncontrollerExtender;
export const ExtensioncontrollerExtender: typeof import("./extensioncontrollerExtender").ExtensioncontrollerExtender = null as any;
utilities.lazyLoad(exports, ["ExtensioncontrollerExtender"], () => require("./extensioncontrollerExtender"));

export { ExtensioncontrollerFortigateArgs, ExtensioncontrollerFortigateState } from "./extensioncontrollerFortigate";
export type ExtensioncontrollerFortigate = import("./extensioncontrollerFortigate").ExtensioncontrollerFortigate;
export const ExtensioncontrollerFortigate: typeof import("./extensioncontrollerFortigate").ExtensioncontrollerFortigate = null as any;
utilities.lazyLoad(exports, ["ExtensioncontrollerFortigate"], () => require("./extensioncontrollerFortigate"));

export { ExtensioncontrollerFortigateprofileArgs, ExtensioncontrollerFortigateprofileState } from "./extensioncontrollerFortigateprofile";
export type ExtensioncontrollerFortigateprofile = import("./extensioncontrollerFortigateprofile").ExtensioncontrollerFortigateprofile;
export const ExtensioncontrollerFortigateprofile: typeof import("./extensioncontrollerFortigateprofile").ExtensioncontrollerFortigateprofile = null as any;
utilities.lazyLoad(exports, ["ExtensioncontrollerFortigateprofile"], () => require("./extensioncontrollerFortigateprofile"));

export { ExtensioncontrollerFortigateprofileLanextensionArgs, ExtensioncontrollerFortigateprofileLanextensionState } from "./extensioncontrollerFortigateprofileLanextension";
export type ExtensioncontrollerFortigateprofileLanextension = import("./extensioncontrollerFortigateprofileLanextension").ExtensioncontrollerFortigateprofileLanextension;
export const ExtensioncontrollerFortigateprofileLanextension: typeof import("./extensioncontrollerFortigateprofileLanextension").ExtensioncontrollerFortigateprofileLanextension = null as any;
utilities.lazyLoad(exports, ["ExtensioncontrollerFortigateprofileLanextension"], () => require("./extensioncontrollerFortigateprofileLanextension"));

export { FirewallAuthportalArgs, FirewallAuthportalState } from "./firewallAuthportal";
export type FirewallAuthportal = import("./firewallAuthportal").FirewallAuthportal;
export const FirewallAuthportal: typeof import("./firewallAuthportal").FirewallAuthportal = null as any;
utilities.lazyLoad(exports, ["FirewallAuthportal"], () => require("./firewallAuthportal"));

export { FirewallDnstranslationArgs, FirewallDnstranslationState } from "./firewallDnstranslation";
export type FirewallDnstranslation = import("./firewallDnstranslation").FirewallDnstranslation;
export const FirewallDnstranslation: typeof import("./firewallDnstranslation").FirewallDnstranslation = null as any;
utilities.lazyLoad(exports, ["FirewallDnstranslation"], () => require("./firewallDnstranslation"));

export { FirewallGlobalArgs, FirewallGlobalState } from "./firewallGlobal";
export type FirewallGlobal = import("./firewallGlobal").FirewallGlobal;
export const FirewallGlobal: typeof import("./firewallGlobal").FirewallGlobal = null as any;
utilities.lazyLoad(exports, ["FirewallGlobal"], () => require("./firewallGlobal"));

export { FirewallInternetserviceappendArgs, FirewallInternetserviceappendState } from "./firewallInternetserviceappend";
export type FirewallInternetserviceappend = import("./firewallInternetserviceappend").FirewallInternetserviceappend;
export const FirewallInternetserviceappend: typeof import("./firewallInternetserviceappend").FirewallInternetserviceappend = null as any;
utilities.lazyLoad(exports, ["FirewallInternetserviceappend"], () => require("./firewallInternetserviceappend"));

export { FirewallInternetservicedefinitionArgs, FirewallInternetservicedefinitionState } from "./firewallInternetservicedefinition";
export type FirewallInternetservicedefinition = import("./firewallInternetservicedefinition").FirewallInternetservicedefinition;
export const FirewallInternetservicedefinition: typeof import("./firewallInternetservicedefinition").FirewallInternetservicedefinition = null as any;
utilities.lazyLoad(exports, ["FirewallInternetservicedefinition"], () => require("./firewallInternetservicedefinition"));

export { FirewallInternetservicedefinitionEntryArgs, FirewallInternetservicedefinitionEntryState } from "./firewallInternetservicedefinitionEntry";
export type FirewallInternetservicedefinitionEntry = import("./firewallInternetservicedefinitionEntry").FirewallInternetservicedefinitionEntry;
export const FirewallInternetservicedefinitionEntry: typeof import("./firewallInternetservicedefinitionEntry").FirewallInternetservicedefinitionEntry = null as any;
utilities.lazyLoad(exports, ["FirewallInternetservicedefinitionEntry"], () => require("./firewallInternetservicedefinitionEntry"));

export { FirewallInternetservicedefinitionEntryPortrangeArgs, FirewallInternetservicedefinitionEntryPortrangeState } from "./firewallInternetservicedefinitionEntryPortrange";
export type FirewallInternetservicedefinitionEntryPortrange = import("./firewallInternetservicedefinitionEntryPortrange").FirewallInternetservicedefinitionEntryPortrange;
export const FirewallInternetservicedefinitionEntryPortrange: typeof import("./firewallInternetservicedefinitionEntryPortrange").FirewallInternetservicedefinitionEntryPortrange = null as any;
utilities.lazyLoad(exports, ["FirewallInternetservicedefinitionEntryPortrange"], () => require("./firewallInternetservicedefinitionEntryPortrange"));

export { FirewallInternetserviceextensionArgs, FirewallInternetserviceextensionState } from "./firewallInternetserviceextension";
export type FirewallInternetserviceextension = import("./firewallInternetserviceextension").FirewallInternetserviceextension;
export const FirewallInternetserviceextension: typeof import("./firewallInternetserviceextension").FirewallInternetserviceextension = null as any;
utilities.lazyLoad(exports, ["FirewallInternetserviceextension"], () => require("./firewallInternetserviceextension"));

export { FirewallInternetserviceextensionEntryArgs, FirewallInternetserviceextensionEntryState } from "./firewallInternetserviceextensionEntry";
export type FirewallInternetserviceextensionEntry = import("./firewallInternetserviceextensionEntry").FirewallInternetserviceextensionEntry;
export const FirewallInternetserviceextensionEntry: typeof import("./firewallInternetserviceextensionEntry").FirewallInternetserviceextensionEntry = null as any;
utilities.lazyLoad(exports, ["FirewallInternetserviceextensionEntry"], () => require("./firewallInternetserviceextensionEntry"));

export { FirewallInternetserviceextensionEntryPortrangeArgs, FirewallInternetserviceextensionEntryPortrangeState } from "./firewallInternetserviceextensionEntryPortrange";
export type FirewallInternetserviceextensionEntryPortrange = import("./firewallInternetserviceextensionEntryPortrange").FirewallInternetserviceextensionEntryPortrange;
export const FirewallInternetserviceextensionEntryPortrange: typeof import("./firewallInternetserviceextensionEntryPortrange").FirewallInternetserviceextensionEntryPortrange = null as any;
utilities.lazyLoad(exports, ["FirewallInternetserviceextensionEntryPortrange"], () => require("./firewallInternetserviceextensionEntryPortrange"));

export { FirewallIpmacbindingSettingArgs, FirewallIpmacbindingSettingState } from "./firewallIpmacbindingSetting";
export type FirewallIpmacbindingSetting = import("./firewallIpmacbindingSetting").FirewallIpmacbindingSetting;
export const FirewallIpmacbindingSetting: typeof import("./firewallIpmacbindingSetting").FirewallIpmacbindingSetting = null as any;
utilities.lazyLoad(exports, ["FirewallIpmacbindingSetting"], () => require("./firewallIpmacbindingSetting"));

export { FirewallIpmacbindingTableArgs, FirewallIpmacbindingTableState } from "./firewallIpmacbindingTable";
export type FirewallIpmacbindingTable = import("./firewallIpmacbindingTable").FirewallIpmacbindingTable;
export const FirewallIpmacbindingTable: typeof import("./firewallIpmacbindingTable").FirewallIpmacbindingTable = null as any;
utilities.lazyLoad(exports, ["FirewallIpmacbindingTable"], () => require("./firewallIpmacbindingTable"));

export { FirewallIptranslationArgs, FirewallIptranslationState } from "./firewallIptranslation";
export type FirewallIptranslation = import("./firewallIptranslation").FirewallIptranslation;
export const FirewallIptranslation: typeof import("./firewallIptranslation").FirewallIptranslation = null as any;
utilities.lazyLoad(exports, ["FirewallIptranslation"], () => require("./firewallIptranslation"));

export { FirewallIpv6ehfilterArgs, FirewallIpv6ehfilterState } from "./firewallIpv6ehfilter";
export type FirewallIpv6ehfilter = import("./firewallIpv6ehfilter").FirewallIpv6ehfilter;
export const FirewallIpv6ehfilter: typeof import("./firewallIpv6ehfilter").FirewallIpv6ehfilter = null as any;
utilities.lazyLoad(exports, ["FirewallIpv6ehfilter"], () => require("./firewallIpv6ehfilter"));

export { FirewallOndemandsnifferArgs, FirewallOndemandsnifferState } from "./firewallOndemandsniffer";
export type FirewallOndemandsniffer = import("./firewallOndemandsniffer").FirewallOndemandsniffer;
export const FirewallOndemandsniffer: typeof import("./firewallOndemandsniffer").FirewallOndemandsniffer = null as any;
utilities.lazyLoad(exports, ["FirewallOndemandsniffer"], () => require("./firewallOndemandsniffer"));

export { FirewallSnifferArgs, FirewallSnifferState } from "./firewallSniffer";
export type FirewallSniffer = import("./firewallSniffer").FirewallSniffer;
export const FirewallSniffer: typeof import("./firewallSniffer").FirewallSniffer = null as any;
utilities.lazyLoad(exports, ["FirewallSniffer"], () => require("./firewallSniffer"));

export { FirewallSnifferMoveArgs, FirewallSnifferMoveState } from "./firewallSnifferMove";
export type FirewallSnifferMove = import("./firewallSnifferMove").FirewallSnifferMove;
export const FirewallSnifferMove: typeof import("./firewallSnifferMove").FirewallSnifferMove = null as any;
utilities.lazyLoad(exports, ["FirewallSnifferMove"], () => require("./firewallSnifferMove"));

export { FirewallSshHostkeyArgs, FirewallSshHostkeyState } from "./firewallSshHostkey";
export type FirewallSshHostkey = import("./firewallSshHostkey").FirewallSshHostkey;
export const FirewallSshHostkey: typeof import("./firewallSshHostkey").FirewallSshHostkey = null as any;
utilities.lazyLoad(exports, ["FirewallSshHostkey"], () => require("./firewallSshHostkey"));

export { FirewallSshLocalkeyArgs, FirewallSshLocalkeyState } from "./firewallSshLocalkey";
export type FirewallSshLocalkey = import("./firewallSshLocalkey").FirewallSshLocalkey;
export const FirewallSshLocalkey: typeof import("./firewallSshLocalkey").FirewallSshLocalkey = null as any;
utilities.lazyLoad(exports, ["FirewallSshLocalkey"], () => require("./firewallSshLocalkey"));

export { FirewallSshSettingArgs, FirewallSshSettingState } from "./firewallSshSetting";
export type FirewallSshSetting = import("./firewallSshSetting").FirewallSshSetting;
export const FirewallSshSetting: typeof import("./firewallSshSetting").FirewallSshSetting = null as any;
utilities.lazyLoad(exports, ["FirewallSshSetting"], () => require("./firewallSshSetting"));

export { FirewallSslSettingArgs, FirewallSslSettingState } from "./firewallSslSetting";
export type FirewallSslSetting = import("./firewallSslSetting").FirewallSslSetting;
export const FirewallSslSetting: typeof import("./firewallSslSetting").FirewallSslSetting = null as any;
utilities.lazyLoad(exports, ["FirewallSslSetting"], () => require("./firewallSslSetting"));

export { FirewallSslserverArgs, FirewallSslserverState } from "./firewallSslserver";
export type FirewallSslserver = import("./firewallSslserver").FirewallSslserver;
export const FirewallSslserver: typeof import("./firewallSslserver").FirewallSslserver = null as any;
utilities.lazyLoad(exports, ["FirewallSslserver"], () => require("./firewallSslserver"));

export { FirewallTtlpolicyArgs, FirewallTtlpolicyState } from "./firewallTtlpolicy";
export type FirewallTtlpolicy = import("./firewallTtlpolicy").FirewallTtlpolicy;
export const FirewallTtlpolicy: typeof import("./firewallTtlpolicy").FirewallTtlpolicy = null as any;
utilities.lazyLoad(exports, ["FirewallTtlpolicy"], () => require("./firewallTtlpolicy"));

export { FirewallTtlpolicyMoveArgs, FirewallTtlpolicyMoveState } from "./firewallTtlpolicyMove";
export type FirewallTtlpolicyMove = import("./firewallTtlpolicyMove").FirewallTtlpolicyMove;
export const FirewallTtlpolicyMove: typeof import("./firewallTtlpolicyMove").FirewallTtlpolicyMove = null as any;
utilities.lazyLoad(exports, ["FirewallTtlpolicyMove"], () => require("./firewallTtlpolicyMove"));

export { FtpproxyExplicitArgs, FtpproxyExplicitState } from "./ftpproxyExplicit";
export type FtpproxyExplicit = import("./ftpproxyExplicit").FtpproxyExplicit;
export const FtpproxyExplicit: typeof import("./ftpproxyExplicit").FtpproxyExplicit = null as any;
utilities.lazyLoad(exports, ["FtpproxyExplicit"], () => require("./ftpproxyExplicit"));

export { IcapServergroupArgs, IcapServergroupState } from "./icapServergroup";
export type IcapServergroup = import("./icapServergroup").IcapServergroup;
export const IcapServergroup: typeof import("./icapServergroup").IcapServergroup = null as any;
utilities.lazyLoad(exports, ["IcapServergroup"], () => require("./icapServergroup"));

export { IpsDecoderArgs, IpsDecoderState } from "./ipsDecoder";
export type IpsDecoder = import("./ipsDecoder").IpsDecoder;
export const IpsDecoder: typeof import("./ipsDecoder").IpsDecoder = null as any;
utilities.lazyLoad(exports, ["IpsDecoder"], () => require("./ipsDecoder"));

export { IpsDecoderParameterArgs, IpsDecoderParameterState } from "./ipsDecoderParameter";
export type IpsDecoderParameter = import("./ipsDecoderParameter").IpsDecoderParameter;
export const IpsDecoderParameter: typeof import("./ipsDecoderParameter").IpsDecoderParameter = null as any;
utilities.lazyLoad(exports, ["IpsDecoderParameter"], () => require("./ipsDecoderParameter"));

export { IpsGlobalArgs, IpsGlobalState } from "./ipsGlobal";
export type IpsGlobal = import("./ipsGlobal").IpsGlobal;
export const IpsGlobal: typeof import("./ipsGlobal").IpsGlobal = null as any;
utilities.lazyLoad(exports, ["IpsGlobal"], () => require("./ipsGlobal"));

export { IpsGlobalTlsactiveprobeArgs, IpsGlobalTlsactiveprobeState } from "./ipsGlobalTlsactiveprobe";
export type IpsGlobalTlsactiveprobe = import("./ipsGlobalTlsactiveprobe").IpsGlobalTlsactiveprobe;
export const IpsGlobalTlsactiveprobe: typeof import("./ipsGlobalTlsactiveprobe").IpsGlobalTlsactiveprobe = null as any;
utilities.lazyLoad(exports, ["IpsGlobalTlsactiveprobe"], () => require("./ipsGlobalTlsactiveprobe"));

export { IpsRuleArgs, IpsRuleState } from "./ipsRule";
export type IpsRule = import("./ipsRule").IpsRule;
export const IpsRule: typeof import("./ipsRule").IpsRule = null as any;
utilities.lazyLoad(exports, ["IpsRule"], () => require("./ipsRule"));

export { IpsRulesettingsArgs, IpsRulesettingsState } from "./ipsRulesettings";
export type IpsRulesettings = import("./ipsRulesettings").IpsRulesettings;
export const IpsRulesettings: typeof import("./ipsRulesettings").IpsRulesettings = null as any;
utilities.lazyLoad(exports, ["IpsRulesettings"], () => require("./ipsRulesettings"));

export { IpsSettingsArgs, IpsSettingsState } from "./ipsSettings";
export type IpsSettings = import("./ipsSettings").IpsSettings;
export const IpsSettings: typeof import("./ipsSettings").IpsSettings = null as any;
utilities.lazyLoad(exports, ["IpsSettings"], () => require("./ipsSettings"));

export { JsonGenericApiArgs, JsonGenericApiState } from "./jsonGenericApi";
export type JsonGenericApi = import("./jsonGenericApi").JsonGenericApi;
export const JsonGenericApi: typeof import("./jsonGenericApi").JsonGenericApi = null as any;
utilities.lazyLoad(exports, ["JsonGenericApi"], () => require("./jsonGenericApi"));

export { LoadbalanceSettingWorkersArgs, LoadbalanceSettingWorkersState } from "./loadbalanceSettingWorkers";
export type LoadbalanceSettingWorkers = import("./loadbalanceSettingWorkers").LoadbalanceSettingWorkers;
export const LoadbalanceSettingWorkers: typeof import("./loadbalanceSettingWorkers").LoadbalanceSettingWorkers = null as any;
utilities.lazyLoad(exports, ["LoadbalanceSettingWorkers"], () => require("./loadbalanceSettingWorkers"));

export { LogAzuresecuritycenter2FilterFreestyleArgs, LogAzuresecuritycenter2FilterFreestyleState } from "./logAzuresecuritycenter2FilterFreestyle";
export type LogAzuresecuritycenter2FilterFreestyle = import("./logAzuresecuritycenter2FilterFreestyle").LogAzuresecuritycenter2FilterFreestyle;
export const LogAzuresecuritycenter2FilterFreestyle: typeof import("./logAzuresecuritycenter2FilterFreestyle").LogAzuresecuritycenter2FilterFreestyle = null as any;
utilities.lazyLoad(exports, ["LogAzuresecuritycenter2FilterFreestyle"], () => require("./logAzuresecuritycenter2FilterFreestyle"));

export { LogAzuresecuritycenter2SettingCustomfieldnameArgs, LogAzuresecuritycenter2SettingCustomfieldnameState } from "./logAzuresecuritycenter2SettingCustomfieldname";
export type LogAzuresecuritycenter2SettingCustomfieldname = import("./logAzuresecuritycenter2SettingCustomfieldname").LogAzuresecuritycenter2SettingCustomfieldname;
export const LogAzuresecuritycenter2SettingCustomfieldname: typeof import("./logAzuresecuritycenter2SettingCustomfieldname").LogAzuresecuritycenter2SettingCustomfieldname = null as any;
utilities.lazyLoad(exports, ["LogAzuresecuritycenter2SettingCustomfieldname"], () => require("./logAzuresecuritycenter2SettingCustomfieldname"));

export { LogAzuresecuritycenterFilterFreestyleArgs, LogAzuresecuritycenterFilterFreestyleState } from "./logAzuresecuritycenterFilterFreestyle";
export type LogAzuresecuritycenterFilterFreestyle = import("./logAzuresecuritycenterFilterFreestyle").LogAzuresecuritycenterFilterFreestyle;
export const LogAzuresecuritycenterFilterFreestyle: typeof import("./logAzuresecuritycenterFilterFreestyle").LogAzuresecuritycenterFilterFreestyle = null as any;
utilities.lazyLoad(exports, ["LogAzuresecuritycenterFilterFreestyle"], () => require("./logAzuresecuritycenterFilterFreestyle"));

export { LogAzuresecuritycenterSettingCustomfieldnameArgs, LogAzuresecuritycenterSettingCustomfieldnameState } from "./logAzuresecuritycenterSettingCustomfieldname";
export type LogAzuresecuritycenterSettingCustomfieldname = import("./logAzuresecuritycenterSettingCustomfieldname").LogAzuresecuritycenterSettingCustomfieldname;
export const LogAzuresecuritycenterSettingCustomfieldname: typeof import("./logAzuresecuritycenterSettingCustomfieldname").LogAzuresecuritycenterSettingCustomfieldname = null as any;
utilities.lazyLoad(exports, ["LogAzuresecuritycenterSettingCustomfieldname"], () => require("./logAzuresecuritycenterSettingCustomfieldname"));

export { LogDiskFilterArgs, LogDiskFilterState } from "./logDiskFilter";
export type LogDiskFilter = import("./logDiskFilter").LogDiskFilter;
export const LogDiskFilter: typeof import("./logDiskFilter").LogDiskFilter = null as any;
utilities.lazyLoad(exports, ["LogDiskFilter"], () => require("./logDiskFilter"));

export { LogDiskFilterFreestyleArgs, LogDiskFilterFreestyleState } from "./logDiskFilterFreestyle";
export type LogDiskFilterFreestyle = import("./logDiskFilterFreestyle").LogDiskFilterFreestyle;
export const LogDiskFilterFreestyle: typeof import("./logDiskFilterFreestyle").LogDiskFilterFreestyle = null as any;
utilities.lazyLoad(exports, ["LogDiskFilterFreestyle"], () => require("./logDiskFilterFreestyle"));

export { LogDiskSettingArgs, LogDiskSettingState } from "./logDiskSetting";
export type LogDiskSetting = import("./logDiskSetting").LogDiskSetting;
export const LogDiskSetting: typeof import("./logDiskSetting").LogDiskSetting = null as any;
utilities.lazyLoad(exports, ["LogDiskSetting"], () => require("./logDiskSetting"));

export { LogEventfilterArgs, LogEventfilterState } from "./logEventfilter";
export type LogEventfilter = import("./logEventfilter").LogEventfilter;
export const LogEventfilter: typeof import("./logEventfilter").LogEventfilter = null as any;
utilities.lazyLoad(exports, ["LogEventfilter"], () => require("./logEventfilter"));

export { LogFortianalyzer2FilterFreestyleArgs, LogFortianalyzer2FilterFreestyleState } from "./logFortianalyzer2FilterFreestyle";
export type LogFortianalyzer2FilterFreestyle = import("./logFortianalyzer2FilterFreestyle").LogFortianalyzer2FilterFreestyle;
export const LogFortianalyzer2FilterFreestyle: typeof import("./logFortianalyzer2FilterFreestyle").LogFortianalyzer2FilterFreestyle = null as any;
utilities.lazyLoad(exports, ["LogFortianalyzer2FilterFreestyle"], () => require("./logFortianalyzer2FilterFreestyle"));

export { LogFortianalyzer2OverridefilterArgs, LogFortianalyzer2OverridefilterState } from "./logFortianalyzer2Overridefilter";
export type LogFortianalyzer2Overridefilter = import("./logFortianalyzer2Overridefilter").LogFortianalyzer2Overridefilter;
export const LogFortianalyzer2Overridefilter: typeof import("./logFortianalyzer2Overridefilter").LogFortianalyzer2Overridefilter = null as any;
utilities.lazyLoad(exports, ["LogFortianalyzer2Overridefilter"], () => require("./logFortianalyzer2Overridefilter"));

export { LogFortianalyzer2OverridefilterFreestyleArgs, LogFortianalyzer2OverridefilterFreestyleState } from "./logFortianalyzer2OverridefilterFreestyle";
export type LogFortianalyzer2OverridefilterFreestyle = import("./logFortianalyzer2OverridefilterFreestyle").LogFortianalyzer2OverridefilterFreestyle;
export const LogFortianalyzer2OverridefilterFreestyle: typeof import("./logFortianalyzer2OverridefilterFreestyle").LogFortianalyzer2OverridefilterFreestyle = null as any;
utilities.lazyLoad(exports, ["LogFortianalyzer2OverridefilterFreestyle"], () => require("./logFortianalyzer2OverridefilterFreestyle"));

export { LogFortianalyzer2OverridesettingArgs, LogFortianalyzer2OverridesettingState } from "./logFortianalyzer2Overridesetting";
export type LogFortianalyzer2Overridesetting = import("./logFortianalyzer2Overridesetting").LogFortianalyzer2Overridesetting;
export const LogFortianalyzer2Overridesetting: typeof import("./logFortianalyzer2Overridesetting").LogFortianalyzer2Overridesetting = null as any;
utilities.lazyLoad(exports, ["LogFortianalyzer2Overridesetting"], () => require("./logFortianalyzer2Overridesetting"));

export { LogFortianalyzer2SettingArgs, LogFortianalyzer2SettingState } from "./logFortianalyzer2Setting";
export type LogFortianalyzer2Setting = import("./logFortianalyzer2Setting").LogFortianalyzer2Setting;
export const LogFortianalyzer2Setting: typeof import("./logFortianalyzer2Setting").LogFortianalyzer2Setting = null as any;
utilities.lazyLoad(exports, ["LogFortianalyzer2Setting"], () => require("./logFortianalyzer2Setting"));

export { LogFortianalyzer3FilterFreestyleArgs, LogFortianalyzer3FilterFreestyleState } from "./logFortianalyzer3FilterFreestyle";
export type LogFortianalyzer3FilterFreestyle = import("./logFortianalyzer3FilterFreestyle").LogFortianalyzer3FilterFreestyle;
export const LogFortianalyzer3FilterFreestyle: typeof import("./logFortianalyzer3FilterFreestyle").LogFortianalyzer3FilterFreestyle = null as any;
utilities.lazyLoad(exports, ["LogFortianalyzer3FilterFreestyle"], () => require("./logFortianalyzer3FilterFreestyle"));

export { LogFortianalyzer3OverridefilterArgs, LogFortianalyzer3OverridefilterState } from "./logFortianalyzer3Overridefilter";
export type LogFortianalyzer3Overridefilter = import("./logFortianalyzer3Overridefilter").LogFortianalyzer3Overridefilter;
export const LogFortianalyzer3Overridefilter: typeof import("./logFortianalyzer3Overridefilter").LogFortianalyzer3Overridefilter = null as any;
utilities.lazyLoad(exports, ["LogFortianalyzer3Overridefilter"], () => require("./logFortianalyzer3Overridefilter"));

export { LogFortianalyzer3OverridefilterFreestyleArgs, LogFortianalyzer3OverridefilterFreestyleState } from "./logFortianalyzer3OverridefilterFreestyle";
export type LogFortianalyzer3OverridefilterFreestyle = import("./logFortianalyzer3OverridefilterFreestyle").LogFortianalyzer3OverridefilterFreestyle;
export const LogFortianalyzer3OverridefilterFreestyle: typeof import("./logFortianalyzer3OverridefilterFreestyle").LogFortianalyzer3OverridefilterFreestyle = null as any;
utilities.lazyLoad(exports, ["LogFortianalyzer3OverridefilterFreestyle"], () => require("./logFortianalyzer3OverridefilterFreestyle"));

export { LogFortianalyzer3OverridesettingArgs, LogFortianalyzer3OverridesettingState } from "./logFortianalyzer3Overridesetting";
export type LogFortianalyzer3Overridesetting = import("./logFortianalyzer3Overridesetting").LogFortianalyzer3Overridesetting;
export const LogFortianalyzer3Overridesetting: typeof import("./logFortianalyzer3Overridesetting").LogFortianalyzer3Overridesetting = null as any;
utilities.lazyLoad(exports, ["LogFortianalyzer3Overridesetting"], () => require("./logFortianalyzer3Overridesetting"));

export { LogFortianalyzer3SettingArgs, LogFortianalyzer3SettingState } from "./logFortianalyzer3Setting";
export type LogFortianalyzer3Setting = import("./logFortianalyzer3Setting").LogFortianalyzer3Setting;
export const LogFortianalyzer3Setting: typeof import("./logFortianalyzer3Setting").LogFortianalyzer3Setting = null as any;
utilities.lazyLoad(exports, ["LogFortianalyzer3Setting"], () => require("./logFortianalyzer3Setting"));

export { LogFortianalyzerFilterFreestyleArgs, LogFortianalyzerFilterFreestyleState } from "./logFortianalyzerFilterFreestyle";
export type LogFortianalyzerFilterFreestyle = import("./logFortianalyzerFilterFreestyle").LogFortianalyzerFilterFreestyle;
export const LogFortianalyzerFilterFreestyle: typeof import("./logFortianalyzerFilterFreestyle").LogFortianalyzerFilterFreestyle = null as any;
utilities.lazyLoad(exports, ["LogFortianalyzerFilterFreestyle"], () => require("./logFortianalyzerFilterFreestyle"));

export { LogFortianalyzerOverridefilterFreestyleArgs, LogFortianalyzerOverridefilterFreestyleState } from "./logFortianalyzerOverridefilterFreestyle";
export type LogFortianalyzerOverridefilterFreestyle = import("./logFortianalyzerOverridefilterFreestyle").LogFortianalyzerOverridefilterFreestyle;
export const LogFortianalyzerOverridefilterFreestyle: typeof import("./logFortianalyzerOverridefilterFreestyle").LogFortianalyzerOverridefilterFreestyle = null as any;
utilities.lazyLoad(exports, ["LogFortianalyzerOverridefilterFreestyle"], () => require("./logFortianalyzerOverridefilterFreestyle"));

export { LogFortianalyzerSettingArgs, LogFortianalyzerSettingState } from "./logFortianalyzerSetting";
export type LogFortianalyzerSetting = import("./logFortianalyzerSetting").LogFortianalyzerSetting;
export const LogFortianalyzerSetting: typeof import("./logFortianalyzerSetting").LogFortianalyzerSetting = null as any;
utilities.lazyLoad(exports, ["LogFortianalyzerSetting"], () => require("./logFortianalyzerSetting"));

export { LogFortianalyzercloudFilterFreestyleArgs, LogFortianalyzercloudFilterFreestyleState } from "./logFortianalyzercloudFilterFreestyle";
export type LogFortianalyzercloudFilterFreestyle = import("./logFortianalyzercloudFilterFreestyle").LogFortianalyzercloudFilterFreestyle;
export const LogFortianalyzercloudFilterFreestyle: typeof import("./logFortianalyzercloudFilterFreestyle").LogFortianalyzercloudFilterFreestyle = null as any;
utilities.lazyLoad(exports, ["LogFortianalyzercloudFilterFreestyle"], () => require("./logFortianalyzercloudFilterFreestyle"));

export { LogFortianalyzercloudOverridefilterArgs, LogFortianalyzercloudOverridefilterState } from "./logFortianalyzercloudOverridefilter";
export type LogFortianalyzercloudOverridefilter = import("./logFortianalyzercloudOverridefilter").LogFortianalyzercloudOverridefilter;
export const LogFortianalyzercloudOverridefilter: typeof import("./logFortianalyzercloudOverridefilter").LogFortianalyzercloudOverridefilter = null as any;
utilities.lazyLoad(exports, ["LogFortianalyzercloudOverridefilter"], () => require("./logFortianalyzercloudOverridefilter"));

export { LogFortianalyzercloudOverridefilterFreestyleArgs, LogFortianalyzercloudOverridefilterFreestyleState } from "./logFortianalyzercloudOverridefilterFreestyle";
export type LogFortianalyzercloudOverridefilterFreestyle = import("./logFortianalyzercloudOverridefilterFreestyle").LogFortianalyzercloudOverridefilterFreestyle;
export const LogFortianalyzercloudOverridefilterFreestyle: typeof import("./logFortianalyzercloudOverridefilterFreestyle").LogFortianalyzercloudOverridefilterFreestyle = null as any;
utilities.lazyLoad(exports, ["LogFortianalyzercloudOverridefilterFreestyle"], () => require("./logFortianalyzercloudOverridefilterFreestyle"));

export { LogFortianalyzercloudOverridesettingArgs, LogFortianalyzercloudOverridesettingState } from "./logFortianalyzercloudOverridesetting";
export type LogFortianalyzercloudOverridesetting = import("./logFortianalyzercloudOverridesetting").LogFortianalyzercloudOverridesetting;
export const LogFortianalyzercloudOverridesetting: typeof import("./logFortianalyzercloudOverridesetting").LogFortianalyzercloudOverridesetting = null as any;
utilities.lazyLoad(exports, ["LogFortianalyzercloudOverridesetting"], () => require("./logFortianalyzercloudOverridesetting"));

export { LogFortianalyzercloudSettingArgs, LogFortianalyzercloudSettingState } from "./logFortianalyzercloudSetting";
export type LogFortianalyzercloudSetting = import("./logFortianalyzercloudSetting").LogFortianalyzercloudSetting;
export const LogFortianalyzercloudSetting: typeof import("./logFortianalyzercloudSetting").LogFortianalyzercloudSetting = null as any;
utilities.lazyLoad(exports, ["LogFortianalyzercloudSetting"], () => require("./logFortianalyzercloudSetting"));

export { LogFortiguardFilterArgs, LogFortiguardFilterState } from "./logFortiguardFilter";
export type LogFortiguardFilter = import("./logFortiguardFilter").LogFortiguardFilter;
export const LogFortiguardFilter: typeof import("./logFortiguardFilter").LogFortiguardFilter = null as any;
utilities.lazyLoad(exports, ["LogFortiguardFilter"], () => require("./logFortiguardFilter"));

export { LogFortiguardFilterFreestyleArgs, LogFortiguardFilterFreestyleState } from "./logFortiguardFilterFreestyle";
export type LogFortiguardFilterFreestyle = import("./logFortiguardFilterFreestyle").LogFortiguardFilterFreestyle;
export const LogFortiguardFilterFreestyle: typeof import("./logFortiguardFilterFreestyle").LogFortiguardFilterFreestyle = null as any;
utilities.lazyLoad(exports, ["LogFortiguardFilterFreestyle"], () => require("./logFortiguardFilterFreestyle"));

export { LogFortiguardOverridefilterArgs, LogFortiguardOverridefilterState } from "./logFortiguardOverridefilter";
export type LogFortiguardOverridefilter = import("./logFortiguardOverridefilter").LogFortiguardOverridefilter;
export const LogFortiguardOverridefilter: typeof import("./logFortiguardOverridefilter").LogFortiguardOverridefilter = null as any;
utilities.lazyLoad(exports, ["LogFortiguardOverridefilter"], () => require("./logFortiguardOverridefilter"));

export { LogFortiguardOverridefilterFreestyleArgs, LogFortiguardOverridefilterFreestyleState } from "./logFortiguardOverridefilterFreestyle";
export type LogFortiguardOverridefilterFreestyle = import("./logFortiguardOverridefilterFreestyle").LogFortiguardOverridefilterFreestyle;
export const LogFortiguardOverridefilterFreestyle: typeof import("./logFortiguardOverridefilterFreestyle").LogFortiguardOverridefilterFreestyle = null as any;
utilities.lazyLoad(exports, ["LogFortiguardOverridefilterFreestyle"], () => require("./logFortiguardOverridefilterFreestyle"));

export { LogFortiguardOverridesettingArgs, LogFortiguardOverridesettingState } from "./logFortiguardOverridesetting";
export type LogFortiguardOverridesetting = import("./logFortiguardOverridesetting").LogFortiguardOverridesetting;
export const LogFortiguardOverridesetting: typeof import("./logFortiguardOverridesetting").LogFortiguardOverridesetting = null as any;
utilities.lazyLoad(exports, ["LogFortiguardOverridesetting"], () => require("./logFortiguardOverridesetting"));

export { LogFortiguardSettingArgs, LogFortiguardSettingState } from "./logFortiguardSetting";
export type LogFortiguardSetting = import("./logFortiguardSetting").LogFortiguardSetting;
export const LogFortiguardSetting: typeof import("./logFortiguardSetting").LogFortiguardSetting = null as any;
utilities.lazyLoad(exports, ["LogFortiguardSetting"], () => require("./logFortiguardSetting"));

export { LogGuidisplayArgs, LogGuidisplayState } from "./logGuidisplay";
export type LogGuidisplay = import("./logGuidisplay").LogGuidisplay;
export const LogGuidisplay: typeof import("./logGuidisplay").LogGuidisplay = null as any;
utilities.lazyLoad(exports, ["LogGuidisplay"], () => require("./logGuidisplay"));

export { LogMemoryFilterArgs, LogMemoryFilterState } from "./logMemoryFilter";
export type LogMemoryFilter = import("./logMemoryFilter").LogMemoryFilter;
export const LogMemoryFilter: typeof import("./logMemoryFilter").LogMemoryFilter = null as any;
utilities.lazyLoad(exports, ["LogMemoryFilter"], () => require("./logMemoryFilter"));

export { LogMemoryFilterFreestyleArgs, LogMemoryFilterFreestyleState } from "./logMemoryFilterFreestyle";
export type LogMemoryFilterFreestyle = import("./logMemoryFilterFreestyle").LogMemoryFilterFreestyle;
export const LogMemoryFilterFreestyle: typeof import("./logMemoryFilterFreestyle").LogMemoryFilterFreestyle = null as any;
utilities.lazyLoad(exports, ["LogMemoryFilterFreestyle"], () => require("./logMemoryFilterFreestyle"));

export { LogMemoryGlobalsettingArgs, LogMemoryGlobalsettingState } from "./logMemoryGlobalsetting";
export type LogMemoryGlobalsetting = import("./logMemoryGlobalsetting").LogMemoryGlobalsetting;
export const LogMemoryGlobalsetting: typeof import("./logMemoryGlobalsetting").LogMemoryGlobalsetting = null as any;
utilities.lazyLoad(exports, ["LogMemoryGlobalsetting"], () => require("./logMemoryGlobalsetting"));

export { LogMemorySettingArgs, LogMemorySettingState } from "./logMemorySetting";
export type LogMemorySetting = import("./logMemorySetting").LogMemorySetting;
export const LogMemorySetting: typeof import("./logMemorySetting").LogMemorySetting = null as any;
utilities.lazyLoad(exports, ["LogMemorySetting"], () => require("./logMemorySetting"));

export { LogNulldeviceFilterArgs, LogNulldeviceFilterState } from "./logNulldeviceFilter";
export type LogNulldeviceFilter = import("./logNulldeviceFilter").LogNulldeviceFilter;
export const LogNulldeviceFilter: typeof import("./logNulldeviceFilter").LogNulldeviceFilter = null as any;
utilities.lazyLoad(exports, ["LogNulldeviceFilter"], () => require("./logNulldeviceFilter"));

export { LogNulldeviceFilterFreestyleArgs, LogNulldeviceFilterFreestyleState } from "./logNulldeviceFilterFreestyle";
export type LogNulldeviceFilterFreestyle = import("./logNulldeviceFilterFreestyle").LogNulldeviceFilterFreestyle;
export const LogNulldeviceFilterFreestyle: typeof import("./logNulldeviceFilterFreestyle").LogNulldeviceFilterFreestyle = null as any;
utilities.lazyLoad(exports, ["LogNulldeviceFilterFreestyle"], () => require("./logNulldeviceFilterFreestyle"));

export { LogNulldeviceSettingArgs, LogNulldeviceSettingState } from "./logNulldeviceSetting";
export type LogNulldeviceSetting = import("./logNulldeviceSetting").LogNulldeviceSetting;
export const LogNulldeviceSetting: typeof import("./logNulldeviceSetting").LogNulldeviceSetting = null as any;
utilities.lazyLoad(exports, ["LogNulldeviceSetting"], () => require("./logNulldeviceSetting"));

export { LogSettingArgs, LogSettingState } from "./logSetting";
export type LogSetting = import("./logSetting").LogSetting;
export const LogSetting: typeof import("./logSetting").LogSetting = null as any;
utilities.lazyLoad(exports, ["LogSetting"], () => require("./logSetting"));

export { LogSyslogd2FilterArgs, LogSyslogd2FilterState } from "./logSyslogd2Filter";
export type LogSyslogd2Filter = import("./logSyslogd2Filter").LogSyslogd2Filter;
export const LogSyslogd2Filter: typeof import("./logSyslogd2Filter").LogSyslogd2Filter = null as any;
utilities.lazyLoad(exports, ["LogSyslogd2Filter"], () => require("./logSyslogd2Filter"));

export { LogSyslogd2FilterFreestyleArgs, LogSyslogd2FilterFreestyleState } from "./logSyslogd2FilterFreestyle";
export type LogSyslogd2FilterFreestyle = import("./logSyslogd2FilterFreestyle").LogSyslogd2FilterFreestyle;
export const LogSyslogd2FilterFreestyle: typeof import("./logSyslogd2FilterFreestyle").LogSyslogd2FilterFreestyle = null as any;
utilities.lazyLoad(exports, ["LogSyslogd2FilterFreestyle"], () => require("./logSyslogd2FilterFreestyle"));

export { LogSyslogd2OverridefilterArgs, LogSyslogd2OverridefilterState } from "./logSyslogd2Overridefilter";
export type LogSyslogd2Overridefilter = import("./logSyslogd2Overridefilter").LogSyslogd2Overridefilter;
export const LogSyslogd2Overridefilter: typeof import("./logSyslogd2Overridefilter").LogSyslogd2Overridefilter = null as any;
utilities.lazyLoad(exports, ["LogSyslogd2Overridefilter"], () => require("./logSyslogd2Overridefilter"));

export { LogSyslogd2OverridefilterFreestyleArgs, LogSyslogd2OverridefilterFreestyleState } from "./logSyslogd2OverridefilterFreestyle";
export type LogSyslogd2OverridefilterFreestyle = import("./logSyslogd2OverridefilterFreestyle").LogSyslogd2OverridefilterFreestyle;
export const LogSyslogd2OverridefilterFreestyle: typeof import("./logSyslogd2OverridefilterFreestyle").LogSyslogd2OverridefilterFreestyle = null as any;
utilities.lazyLoad(exports, ["LogSyslogd2OverridefilterFreestyle"], () => require("./logSyslogd2OverridefilterFreestyle"));

export { LogSyslogd2OverridesettingArgs, LogSyslogd2OverridesettingState } from "./logSyslogd2Overridesetting";
export type LogSyslogd2Overridesetting = import("./logSyslogd2Overridesetting").LogSyslogd2Overridesetting;
export const LogSyslogd2Overridesetting: typeof import("./logSyslogd2Overridesetting").LogSyslogd2Overridesetting = null as any;
utilities.lazyLoad(exports, ["LogSyslogd2Overridesetting"], () => require("./logSyslogd2Overridesetting"));

export { LogSyslogd2OverridesettingCustomfieldnameArgs, LogSyslogd2OverridesettingCustomfieldnameState } from "./logSyslogd2OverridesettingCustomfieldname";
export type LogSyslogd2OverridesettingCustomfieldname = import("./logSyslogd2OverridesettingCustomfieldname").LogSyslogd2OverridesettingCustomfieldname;
export const LogSyslogd2OverridesettingCustomfieldname: typeof import("./logSyslogd2OverridesettingCustomfieldname").LogSyslogd2OverridesettingCustomfieldname = null as any;
utilities.lazyLoad(exports, ["LogSyslogd2OverridesettingCustomfieldname"], () => require("./logSyslogd2OverridesettingCustomfieldname"));

export { LogSyslogd2SettingArgs, LogSyslogd2SettingState } from "./logSyslogd2Setting";
export type LogSyslogd2Setting = import("./logSyslogd2Setting").LogSyslogd2Setting;
export const LogSyslogd2Setting: typeof import("./logSyslogd2Setting").LogSyslogd2Setting = null as any;
utilities.lazyLoad(exports, ["LogSyslogd2Setting"], () => require("./logSyslogd2Setting"));

export { LogSyslogd2SettingCustomfieldnameArgs, LogSyslogd2SettingCustomfieldnameState } from "./logSyslogd2SettingCustomfieldname";
export type LogSyslogd2SettingCustomfieldname = import("./logSyslogd2SettingCustomfieldname").LogSyslogd2SettingCustomfieldname;
export const LogSyslogd2SettingCustomfieldname: typeof import("./logSyslogd2SettingCustomfieldname").LogSyslogd2SettingCustomfieldname = null as any;
utilities.lazyLoad(exports, ["LogSyslogd2SettingCustomfieldname"], () => require("./logSyslogd2SettingCustomfieldname"));

export { LogSyslogd3FilterArgs, LogSyslogd3FilterState } from "./logSyslogd3Filter";
export type LogSyslogd3Filter = import("./logSyslogd3Filter").LogSyslogd3Filter;
export const LogSyslogd3Filter: typeof import("./logSyslogd3Filter").LogSyslogd3Filter = null as any;
utilities.lazyLoad(exports, ["LogSyslogd3Filter"], () => require("./logSyslogd3Filter"));

export { LogSyslogd3FilterFreestyleArgs, LogSyslogd3FilterFreestyleState } from "./logSyslogd3FilterFreestyle";
export type LogSyslogd3FilterFreestyle = import("./logSyslogd3FilterFreestyle").LogSyslogd3FilterFreestyle;
export const LogSyslogd3FilterFreestyle: typeof import("./logSyslogd3FilterFreestyle").LogSyslogd3FilterFreestyle = null as any;
utilities.lazyLoad(exports, ["LogSyslogd3FilterFreestyle"], () => require("./logSyslogd3FilterFreestyle"));

export { LogSyslogd3OverridefilterArgs, LogSyslogd3OverridefilterState } from "./logSyslogd3Overridefilter";
export type LogSyslogd3Overridefilter = import("./logSyslogd3Overridefilter").LogSyslogd3Overridefilter;
export const LogSyslogd3Overridefilter: typeof import("./logSyslogd3Overridefilter").LogSyslogd3Overridefilter = null as any;
utilities.lazyLoad(exports, ["LogSyslogd3Overridefilter"], () => require("./logSyslogd3Overridefilter"));

export { LogSyslogd3OverridefilterFreestyleArgs, LogSyslogd3OverridefilterFreestyleState } from "./logSyslogd3OverridefilterFreestyle";
export type LogSyslogd3OverridefilterFreestyle = import("./logSyslogd3OverridefilterFreestyle").LogSyslogd3OverridefilterFreestyle;
export const LogSyslogd3OverridefilterFreestyle: typeof import("./logSyslogd3OverridefilterFreestyle").LogSyslogd3OverridefilterFreestyle = null as any;
utilities.lazyLoad(exports, ["LogSyslogd3OverridefilterFreestyle"], () => require("./logSyslogd3OverridefilterFreestyle"));

export { LogSyslogd3OverridesettingArgs, LogSyslogd3OverridesettingState } from "./logSyslogd3Overridesetting";
export type LogSyslogd3Overridesetting = import("./logSyslogd3Overridesetting").LogSyslogd3Overridesetting;
export const LogSyslogd3Overridesetting: typeof import("./logSyslogd3Overridesetting").LogSyslogd3Overridesetting = null as any;
utilities.lazyLoad(exports, ["LogSyslogd3Overridesetting"], () => require("./logSyslogd3Overridesetting"));

export { LogSyslogd3OverridesettingCustomfieldnameArgs, LogSyslogd3OverridesettingCustomfieldnameState } from "./logSyslogd3OverridesettingCustomfieldname";
export type LogSyslogd3OverridesettingCustomfieldname = import("./logSyslogd3OverridesettingCustomfieldname").LogSyslogd3OverridesettingCustomfieldname;
export const LogSyslogd3OverridesettingCustomfieldname: typeof import("./logSyslogd3OverridesettingCustomfieldname").LogSyslogd3OverridesettingCustomfieldname = null as any;
utilities.lazyLoad(exports, ["LogSyslogd3OverridesettingCustomfieldname"], () => require("./logSyslogd3OverridesettingCustomfieldname"));

export { LogSyslogd3SettingArgs, LogSyslogd3SettingState } from "./logSyslogd3Setting";
export type LogSyslogd3Setting = import("./logSyslogd3Setting").LogSyslogd3Setting;
export const LogSyslogd3Setting: typeof import("./logSyslogd3Setting").LogSyslogd3Setting = null as any;
utilities.lazyLoad(exports, ["LogSyslogd3Setting"], () => require("./logSyslogd3Setting"));

export { LogSyslogd3SettingCustomfieldnameArgs, LogSyslogd3SettingCustomfieldnameState } from "./logSyslogd3SettingCustomfieldname";
export type LogSyslogd3SettingCustomfieldname = import("./logSyslogd3SettingCustomfieldname").LogSyslogd3SettingCustomfieldname;
export const LogSyslogd3SettingCustomfieldname: typeof import("./logSyslogd3SettingCustomfieldname").LogSyslogd3SettingCustomfieldname = null as any;
utilities.lazyLoad(exports, ["LogSyslogd3SettingCustomfieldname"], () => require("./logSyslogd3SettingCustomfieldname"));

export { LogSyslogd4FilterArgs, LogSyslogd4FilterState } from "./logSyslogd4Filter";
export type LogSyslogd4Filter = import("./logSyslogd4Filter").LogSyslogd4Filter;
export const LogSyslogd4Filter: typeof import("./logSyslogd4Filter").LogSyslogd4Filter = null as any;
utilities.lazyLoad(exports, ["LogSyslogd4Filter"], () => require("./logSyslogd4Filter"));

export { LogSyslogd4FilterFreestyleArgs, LogSyslogd4FilterFreestyleState } from "./logSyslogd4FilterFreestyle";
export type LogSyslogd4FilterFreestyle = import("./logSyslogd4FilterFreestyle").LogSyslogd4FilterFreestyle;
export const LogSyslogd4FilterFreestyle: typeof import("./logSyslogd4FilterFreestyle").LogSyslogd4FilterFreestyle = null as any;
utilities.lazyLoad(exports, ["LogSyslogd4FilterFreestyle"], () => require("./logSyslogd4FilterFreestyle"));

export { LogSyslogd4OverridefilterArgs, LogSyslogd4OverridefilterState } from "./logSyslogd4Overridefilter";
export type LogSyslogd4Overridefilter = import("./logSyslogd4Overridefilter").LogSyslogd4Overridefilter;
export const LogSyslogd4Overridefilter: typeof import("./logSyslogd4Overridefilter").LogSyslogd4Overridefilter = null as any;
utilities.lazyLoad(exports, ["LogSyslogd4Overridefilter"], () => require("./logSyslogd4Overridefilter"));

export { LogSyslogd4OverridefilterFreestyleArgs, LogSyslogd4OverridefilterFreestyleState } from "./logSyslogd4OverridefilterFreestyle";
export type LogSyslogd4OverridefilterFreestyle = import("./logSyslogd4OverridefilterFreestyle").LogSyslogd4OverridefilterFreestyle;
export const LogSyslogd4OverridefilterFreestyle: typeof import("./logSyslogd4OverridefilterFreestyle").LogSyslogd4OverridefilterFreestyle = null as any;
utilities.lazyLoad(exports, ["LogSyslogd4OverridefilterFreestyle"], () => require("./logSyslogd4OverridefilterFreestyle"));

export { LogSyslogd4OverridesettingArgs, LogSyslogd4OverridesettingState } from "./logSyslogd4Overridesetting";
export type LogSyslogd4Overridesetting = import("./logSyslogd4Overridesetting").LogSyslogd4Overridesetting;
export const LogSyslogd4Overridesetting: typeof import("./logSyslogd4Overridesetting").LogSyslogd4Overridesetting = null as any;
utilities.lazyLoad(exports, ["LogSyslogd4Overridesetting"], () => require("./logSyslogd4Overridesetting"));

export { LogSyslogd4OverridesettingCustomfieldnameArgs, LogSyslogd4OverridesettingCustomfieldnameState } from "./logSyslogd4OverridesettingCustomfieldname";
export type LogSyslogd4OverridesettingCustomfieldname = import("./logSyslogd4OverridesettingCustomfieldname").LogSyslogd4OverridesettingCustomfieldname;
export const LogSyslogd4OverridesettingCustomfieldname: typeof import("./logSyslogd4OverridesettingCustomfieldname").LogSyslogd4OverridesettingCustomfieldname = null as any;
utilities.lazyLoad(exports, ["LogSyslogd4OverridesettingCustomfieldname"], () => require("./logSyslogd4OverridesettingCustomfieldname"));

export { LogSyslogd4SettingArgs, LogSyslogd4SettingState } from "./logSyslogd4Setting";
export type LogSyslogd4Setting = import("./logSyslogd4Setting").LogSyslogd4Setting;
export const LogSyslogd4Setting: typeof import("./logSyslogd4Setting").LogSyslogd4Setting = null as any;
utilities.lazyLoad(exports, ["LogSyslogd4Setting"], () => require("./logSyslogd4Setting"));

export { LogSyslogd4SettingCustomfieldnameArgs, LogSyslogd4SettingCustomfieldnameState } from "./logSyslogd4SettingCustomfieldname";
export type LogSyslogd4SettingCustomfieldname = import("./logSyslogd4SettingCustomfieldname").LogSyslogd4SettingCustomfieldname;
export const LogSyslogd4SettingCustomfieldname: typeof import("./logSyslogd4SettingCustomfieldname").LogSyslogd4SettingCustomfieldname = null as any;
utilities.lazyLoad(exports, ["LogSyslogd4SettingCustomfieldname"], () => require("./logSyslogd4SettingCustomfieldname"));

export { LogSyslogdFilterArgs, LogSyslogdFilterState } from "./logSyslogdFilter";
export type LogSyslogdFilter = import("./logSyslogdFilter").LogSyslogdFilter;
export const LogSyslogdFilter: typeof import("./logSyslogdFilter").LogSyslogdFilter = null as any;
utilities.lazyLoad(exports, ["LogSyslogdFilter"], () => require("./logSyslogdFilter"));

export { LogSyslogdFilterFreestyleArgs, LogSyslogdFilterFreestyleState } from "./logSyslogdFilterFreestyle";
export type LogSyslogdFilterFreestyle = import("./logSyslogdFilterFreestyle").LogSyslogdFilterFreestyle;
export const LogSyslogdFilterFreestyle: typeof import("./logSyslogdFilterFreestyle").LogSyslogdFilterFreestyle = null as any;
utilities.lazyLoad(exports, ["LogSyslogdFilterFreestyle"], () => require("./logSyslogdFilterFreestyle"));

export { LogSyslogdOverridefilterFreestyleArgs, LogSyslogdOverridefilterFreestyleState } from "./logSyslogdOverridefilterFreestyle";
export type LogSyslogdOverridefilterFreestyle = import("./logSyslogdOverridefilterFreestyle").LogSyslogdOverridefilterFreestyle;
export const LogSyslogdOverridefilterFreestyle: typeof import("./logSyslogdOverridefilterFreestyle").LogSyslogdOverridefilterFreestyle = null as any;
utilities.lazyLoad(exports, ["LogSyslogdOverridefilterFreestyle"], () => require("./logSyslogdOverridefilterFreestyle"));

export { LogSyslogdOverridesettingCustomfieldnameArgs, LogSyslogdOverridesettingCustomfieldnameState } from "./logSyslogdOverridesettingCustomfieldname";
export type LogSyslogdOverridesettingCustomfieldname = import("./logSyslogdOverridesettingCustomfieldname").LogSyslogdOverridesettingCustomfieldname;
export const LogSyslogdOverridesettingCustomfieldname: typeof import("./logSyslogdOverridesettingCustomfieldname").LogSyslogdOverridesettingCustomfieldname = null as any;
utilities.lazyLoad(exports, ["LogSyslogdOverridesettingCustomfieldname"], () => require("./logSyslogdOverridesettingCustomfieldname"));

export { LogSyslogdSettingArgs, LogSyslogdSettingState } from "./logSyslogdSetting";
export type LogSyslogdSetting = import("./logSyslogdSetting").LogSyslogdSetting;
export const LogSyslogdSetting: typeof import("./logSyslogdSetting").LogSyslogdSetting = null as any;
utilities.lazyLoad(exports, ["LogSyslogdSetting"], () => require("./logSyslogdSetting"));

export { LogSyslogdSettingCustomfieldnameArgs, LogSyslogdSettingCustomfieldnameState } from "./logSyslogdSettingCustomfieldname";
export type LogSyslogdSettingCustomfieldname = import("./logSyslogdSettingCustomfieldname").LogSyslogdSettingCustomfieldname;
export const LogSyslogdSettingCustomfieldname: typeof import("./logSyslogdSettingCustomfieldname").LogSyslogdSettingCustomfieldname = null as any;
utilities.lazyLoad(exports, ["LogSyslogdSettingCustomfieldname"], () => require("./logSyslogdSettingCustomfieldname"));

export { LogTacacsaccounting2FilterArgs, LogTacacsaccounting2FilterState } from "./logTacacsaccounting2Filter";
export type LogTacacsaccounting2Filter = import("./logTacacsaccounting2Filter").LogTacacsaccounting2Filter;
export const LogTacacsaccounting2Filter: typeof import("./logTacacsaccounting2Filter").LogTacacsaccounting2Filter = null as any;
utilities.lazyLoad(exports, ["LogTacacsaccounting2Filter"], () => require("./logTacacsaccounting2Filter"));

export { LogTacacsaccounting2SettingArgs, LogTacacsaccounting2SettingState } from "./logTacacsaccounting2Setting";
export type LogTacacsaccounting2Setting = import("./logTacacsaccounting2Setting").LogTacacsaccounting2Setting;
export const LogTacacsaccounting2Setting: typeof import("./logTacacsaccounting2Setting").LogTacacsaccounting2Setting = null as any;
utilities.lazyLoad(exports, ["LogTacacsaccounting2Setting"], () => require("./logTacacsaccounting2Setting"));

export { LogTacacsaccounting3FilterArgs, LogTacacsaccounting3FilterState } from "./logTacacsaccounting3Filter";
export type LogTacacsaccounting3Filter = import("./logTacacsaccounting3Filter").LogTacacsaccounting3Filter;
export const LogTacacsaccounting3Filter: typeof import("./logTacacsaccounting3Filter").LogTacacsaccounting3Filter = null as any;
utilities.lazyLoad(exports, ["LogTacacsaccounting3Filter"], () => require("./logTacacsaccounting3Filter"));

export { LogTacacsaccounting3SettingArgs, LogTacacsaccounting3SettingState } from "./logTacacsaccounting3Setting";
export type LogTacacsaccounting3Setting = import("./logTacacsaccounting3Setting").LogTacacsaccounting3Setting;
export const LogTacacsaccounting3Setting: typeof import("./logTacacsaccounting3Setting").LogTacacsaccounting3Setting = null as any;
utilities.lazyLoad(exports, ["LogTacacsaccounting3Setting"], () => require("./logTacacsaccounting3Setting"));

export { LogTacacsaccountingFilterArgs, LogTacacsaccountingFilterState } from "./logTacacsaccountingFilter";
export type LogTacacsaccountingFilter = import("./logTacacsaccountingFilter").LogTacacsaccountingFilter;
export const LogTacacsaccountingFilter: typeof import("./logTacacsaccountingFilter").LogTacacsaccountingFilter = null as any;
utilities.lazyLoad(exports, ["LogTacacsaccountingFilter"], () => require("./logTacacsaccountingFilter"));

export { LogTacacsaccountingSettingArgs, LogTacacsaccountingSettingState } from "./logTacacsaccountingSetting";
export type LogTacacsaccountingSetting = import("./logTacacsaccountingSetting").LogTacacsaccountingSetting;
export const LogTacacsaccountingSetting: typeof import("./logTacacsaccountingSetting").LogTacacsaccountingSetting = null as any;
utilities.lazyLoad(exports, ["LogTacacsaccountingSetting"], () => require("./logTacacsaccountingSetting"));

export { LogWebtrendsFilterArgs, LogWebtrendsFilterState } from "./logWebtrendsFilter";
export type LogWebtrendsFilter = import("./logWebtrendsFilter").LogWebtrendsFilter;
export const LogWebtrendsFilter: typeof import("./logWebtrendsFilter").LogWebtrendsFilter = null as any;
utilities.lazyLoad(exports, ["LogWebtrendsFilter"], () => require("./logWebtrendsFilter"));

export { LogWebtrendsFilterFreestyleArgs, LogWebtrendsFilterFreestyleState } from "./logWebtrendsFilterFreestyle";
export type LogWebtrendsFilterFreestyle = import("./logWebtrendsFilterFreestyle").LogWebtrendsFilterFreestyle;
export const LogWebtrendsFilterFreestyle: typeof import("./logWebtrendsFilterFreestyle").LogWebtrendsFilterFreestyle = null as any;
utilities.lazyLoad(exports, ["LogWebtrendsFilterFreestyle"], () => require("./logWebtrendsFilterFreestyle"));

export { LogWebtrendsSettingArgs, LogWebtrendsSettingState } from "./logWebtrendsSetting";
export type LogWebtrendsSetting = import("./logWebtrendsSetting").LogWebtrendsSetting;
export const LogWebtrendsSetting: typeof import("./logWebtrendsSetting").LogWebtrendsSetting = null as any;
utilities.lazyLoad(exports, ["LogWebtrendsSetting"], () => require("./logWebtrendsSetting"));

export { NsxtServicechainArgs, NsxtServicechainState } from "./nsxtServicechain";
export type NsxtServicechain = import("./nsxtServicechain").NsxtServicechain;
export const NsxtServicechain: typeof import("./nsxtServicechain").NsxtServicechain = null as any;
utilities.lazyLoad(exports, ["NsxtServicechain"], () => require("./nsxtServicechain"));

export { NsxtServicechainServiceindexArgs, NsxtServicechainServiceindexState } from "./nsxtServicechainServiceindex";
export type NsxtServicechainServiceindex = import("./nsxtServicechainServiceindex").NsxtServicechainServiceindex;
export const NsxtServicechainServiceindex: typeof import("./nsxtServicechainServiceindex").NsxtServicechainServiceindex = null as any;
utilities.lazyLoad(exports, ["NsxtServicechainServiceindex"], () => require("./nsxtServicechainServiceindex"));

export { NsxtServicechainServiceindexMoveArgs, NsxtServicechainServiceindexMoveState } from "./nsxtServicechainServiceindexMove";
export type NsxtServicechainServiceindexMove = import("./nsxtServicechainServiceindexMove").NsxtServicechainServiceindexMove;
export const NsxtServicechainServiceindexMove: typeof import("./nsxtServicechainServiceindexMove").NsxtServicechainServiceindexMove = null as any;
utilities.lazyLoad(exports, ["NsxtServicechainServiceindexMove"], () => require("./nsxtServicechainServiceindexMove"));

export { NsxtSettingArgs, NsxtSettingState } from "./nsxtSetting";
export type NsxtSetting = import("./nsxtSetting").NsxtSetting;
export const NsxtSetting: typeof import("./nsxtSetting").NsxtSetting = null as any;
utilities.lazyLoad(exports, ["NsxtSetting"], () => require("./nsxtSetting"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ReportLayoutArgs, ReportLayoutState } from "./reportLayout";
export type ReportLayout = import("./reportLayout").ReportLayout;
export const ReportLayout: typeof import("./reportLayout").ReportLayout = null as any;
utilities.lazyLoad(exports, ["ReportLayout"], () => require("./reportLayout"));

export { ReportLayoutBodyitemArgs, ReportLayoutBodyitemState } from "./reportLayoutBodyitem";
export type ReportLayoutBodyitem = import("./reportLayoutBodyitem").ReportLayoutBodyitem;
export const ReportLayoutBodyitem: typeof import("./reportLayoutBodyitem").ReportLayoutBodyitem = null as any;
utilities.lazyLoad(exports, ["ReportLayoutBodyitem"], () => require("./reportLayoutBodyitem"));

export { ReportLayoutBodyitemMoveArgs, ReportLayoutBodyitemMoveState } from "./reportLayoutBodyitemMove";
export type ReportLayoutBodyitemMove = import("./reportLayoutBodyitemMove").ReportLayoutBodyitemMove;
export const ReportLayoutBodyitemMove: typeof import("./reportLayoutBodyitemMove").ReportLayoutBodyitemMove = null as any;
utilities.lazyLoad(exports, ["ReportLayoutBodyitemMove"], () => require("./reportLayoutBodyitemMove"));

export { ReportLayoutBodyitemParametersArgs, ReportLayoutBodyitemParametersState } from "./reportLayoutBodyitemParameters";
export type ReportLayoutBodyitemParameters = import("./reportLayoutBodyitemParameters").ReportLayoutBodyitemParameters;
export const ReportLayoutBodyitemParameters: typeof import("./reportLayoutBodyitemParameters").ReportLayoutBodyitemParameters = null as any;
utilities.lazyLoad(exports, ["ReportLayoutBodyitemParameters"], () => require("./reportLayoutBodyitemParameters"));

export { ReportLayoutPageArgs, ReportLayoutPageState } from "./reportLayoutPage";
export type ReportLayoutPage = import("./reportLayoutPage").ReportLayoutPage;
export const ReportLayoutPage: typeof import("./reportLayoutPage").ReportLayoutPage = null as any;
utilities.lazyLoad(exports, ["ReportLayoutPage"], () => require("./reportLayoutPage"));

export { ReportLayoutPageFooterArgs, ReportLayoutPageFooterState } from "./reportLayoutPageFooter";
export type ReportLayoutPageFooter = import("./reportLayoutPageFooter").ReportLayoutPageFooter;
export const ReportLayoutPageFooter: typeof import("./reportLayoutPageFooter").ReportLayoutPageFooter = null as any;
utilities.lazyLoad(exports, ["ReportLayoutPageFooter"], () => require("./reportLayoutPageFooter"));

export { ReportLayoutPageFooterFooteritemArgs, ReportLayoutPageFooterFooteritemState } from "./reportLayoutPageFooterFooteritem";
export type ReportLayoutPageFooterFooteritem = import("./reportLayoutPageFooterFooteritem").ReportLayoutPageFooterFooteritem;
export const ReportLayoutPageFooterFooteritem: typeof import("./reportLayoutPageFooterFooteritem").ReportLayoutPageFooterFooteritem = null as any;
utilities.lazyLoad(exports, ["ReportLayoutPageFooterFooteritem"], () => require("./reportLayoutPageFooterFooteritem"));

export { ReportLayoutPageFooterFooteritemMoveArgs, ReportLayoutPageFooterFooteritemMoveState } from "./reportLayoutPageFooterFooteritemMove";
export type ReportLayoutPageFooterFooteritemMove = import("./reportLayoutPageFooterFooteritemMove").ReportLayoutPageFooterFooteritemMove;
export const ReportLayoutPageFooterFooteritemMove: typeof import("./reportLayoutPageFooterFooteritemMove").ReportLayoutPageFooterFooteritemMove = null as any;
utilities.lazyLoad(exports, ["ReportLayoutPageFooterFooteritemMove"], () => require("./reportLayoutPageFooterFooteritemMove"));

export { ReportLayoutPageHeaderArgs, ReportLayoutPageHeaderState } from "./reportLayoutPageHeader";
export type ReportLayoutPageHeader = import("./reportLayoutPageHeader").ReportLayoutPageHeader;
export const ReportLayoutPageHeader: typeof import("./reportLayoutPageHeader").ReportLayoutPageHeader = null as any;
utilities.lazyLoad(exports, ["ReportLayoutPageHeader"], () => require("./reportLayoutPageHeader"));

export { ReportLayoutPageHeaderHeaderitemArgs, ReportLayoutPageHeaderHeaderitemState } from "./reportLayoutPageHeaderHeaderitem";
export type ReportLayoutPageHeaderHeaderitem = import("./reportLayoutPageHeaderHeaderitem").ReportLayoutPageHeaderHeaderitem;
export const ReportLayoutPageHeaderHeaderitem: typeof import("./reportLayoutPageHeaderHeaderitem").ReportLayoutPageHeaderHeaderitem = null as any;
utilities.lazyLoad(exports, ["ReportLayoutPageHeaderHeaderitem"], () => require("./reportLayoutPageHeaderHeaderitem"));

export { ReportLayoutPageHeaderHeaderitemMoveArgs, ReportLayoutPageHeaderHeaderitemMoveState } from "./reportLayoutPageHeaderHeaderitemMove";
export type ReportLayoutPageHeaderHeaderitemMove = import("./reportLayoutPageHeaderHeaderitemMove").ReportLayoutPageHeaderHeaderitemMove;
export const ReportLayoutPageHeaderHeaderitemMove: typeof import("./reportLayoutPageHeaderHeaderitemMove").ReportLayoutPageHeaderHeaderitemMove = null as any;
utilities.lazyLoad(exports, ["ReportLayoutPageHeaderHeaderitemMove"], () => require("./reportLayoutPageHeaderHeaderitemMove"));

export { ReportSettingArgs, ReportSettingState } from "./reportSetting";
export type ReportSetting = import("./reportSetting").ReportSetting;
export const ReportSetting: typeof import("./reportSetting").ReportSetting = null as any;
utilities.lazyLoad(exports, ["ReportSetting"], () => require("./reportSetting"));

export { RouterAuthpathArgs, RouterAuthpathState } from "./routerAuthpath";
export type RouterAuthpath = import("./routerAuthpath").RouterAuthpath;
export const RouterAuthpath: typeof import("./routerAuthpath").RouterAuthpath = null as any;
utilities.lazyLoad(exports, ["RouterAuthpath"], () => require("./routerAuthpath"));

export { RouterBfdArgs, RouterBfdState } from "./routerBfd";
export type RouterBfd = import("./routerBfd").RouterBfd;
export const RouterBfd: typeof import("./routerBfd").RouterBfd = null as any;
utilities.lazyLoad(exports, ["RouterBfd"], () => require("./routerBfd"));

export { RouterBfd6Args, RouterBfd6State } from "./routerBfd6";
export type RouterBfd6 = import("./routerBfd6").RouterBfd6;
export const RouterBfd6: typeof import("./routerBfd6").RouterBfd6 = null as any;
utilities.lazyLoad(exports, ["RouterBfd6"], () => require("./routerBfd6"));

export { RouterBfd6MultihoptemplateArgs, RouterBfd6MultihoptemplateState } from "./routerBfd6Multihoptemplate";
export type RouterBfd6Multihoptemplate = import("./routerBfd6Multihoptemplate").RouterBfd6Multihoptemplate;
export const RouterBfd6Multihoptemplate: typeof import("./routerBfd6Multihoptemplate").RouterBfd6Multihoptemplate = null as any;
utilities.lazyLoad(exports, ["RouterBfd6Multihoptemplate"], () => require("./routerBfd6Multihoptemplate"));

export { RouterBfd6NeighborArgs, RouterBfd6NeighborState } from "./routerBfd6Neighbor";
export type RouterBfd6Neighbor = import("./routerBfd6Neighbor").RouterBfd6Neighbor;
export const RouterBfd6Neighbor: typeof import("./routerBfd6Neighbor").RouterBfd6Neighbor = null as any;
utilities.lazyLoad(exports, ["RouterBfd6Neighbor"], () => require("./routerBfd6Neighbor"));

export { RouterBfdMultihoptemplateArgs, RouterBfdMultihoptemplateState } from "./routerBfdMultihoptemplate";
export type RouterBfdMultihoptemplate = import("./routerBfdMultihoptemplate").RouterBfdMultihoptemplate;
export const RouterBfdMultihoptemplate: typeof import("./routerBfdMultihoptemplate").RouterBfdMultihoptemplate = null as any;
utilities.lazyLoad(exports, ["RouterBfdMultihoptemplate"], () => require("./routerBfdMultihoptemplate"));

export { RouterBfdNeighborArgs, RouterBfdNeighborState } from "./routerBfdNeighbor";
export type RouterBfdNeighbor = import("./routerBfdNeighbor").RouterBfdNeighbor;
export const RouterBfdNeighbor: typeof import("./routerBfdNeighbor").RouterBfdNeighbor = null as any;
utilities.lazyLoad(exports, ["RouterBfdNeighbor"], () => require("./routerBfdNeighbor"));

export { RouterBgpArgs, RouterBgpState } from "./routerBgp";
export type RouterBgp = import("./routerBgp").RouterBgp;
export const RouterBgp: typeof import("./routerBgp").RouterBgp = null as any;
utilities.lazyLoad(exports, ["RouterBgp"], () => require("./routerBgp"));

export { RouterBgpAdmindistanceArgs, RouterBgpAdmindistanceState } from "./routerBgpAdmindistance";
export type RouterBgpAdmindistance = import("./routerBgpAdmindistance").RouterBgpAdmindistance;
export const RouterBgpAdmindistance: typeof import("./routerBgpAdmindistance").RouterBgpAdmindistance = null as any;
utilities.lazyLoad(exports, ["RouterBgpAdmindistance"], () => require("./routerBgpAdmindistance"));

export { RouterBgpAggregateaddressArgs, RouterBgpAggregateaddressState } from "./routerBgpAggregateaddress";
export type RouterBgpAggregateaddress = import("./routerBgpAggregateaddress").RouterBgpAggregateaddress;
export const RouterBgpAggregateaddress: typeof import("./routerBgpAggregateaddress").RouterBgpAggregateaddress = null as any;
utilities.lazyLoad(exports, ["RouterBgpAggregateaddress"], () => require("./routerBgpAggregateaddress"));

export { RouterBgpAggregateaddress6Args, RouterBgpAggregateaddress6State } from "./routerBgpAggregateaddress6";
export type RouterBgpAggregateaddress6 = import("./routerBgpAggregateaddress6").RouterBgpAggregateaddress6;
export const RouterBgpAggregateaddress6: typeof import("./routerBgpAggregateaddress6").RouterBgpAggregateaddress6 = null as any;
utilities.lazyLoad(exports, ["RouterBgpAggregateaddress6"], () => require("./routerBgpAggregateaddress6"));

export { RouterBgpNeighborArgs, RouterBgpNeighborState } from "./routerBgpNeighbor";
export type RouterBgpNeighbor = import("./routerBgpNeighbor").RouterBgpNeighbor;
export const RouterBgpNeighbor: typeof import("./routerBgpNeighbor").RouterBgpNeighbor = null as any;
utilities.lazyLoad(exports, ["RouterBgpNeighbor"], () => require("./routerBgpNeighbor"));

export { RouterBgpNeighborConditionaladvertiseArgs, RouterBgpNeighborConditionaladvertiseState } from "./routerBgpNeighborConditionaladvertise";
export type RouterBgpNeighborConditionaladvertise = import("./routerBgpNeighborConditionaladvertise").RouterBgpNeighborConditionaladvertise;
export const RouterBgpNeighborConditionaladvertise: typeof import("./routerBgpNeighborConditionaladvertise").RouterBgpNeighborConditionaladvertise = null as any;
utilities.lazyLoad(exports, ["RouterBgpNeighborConditionaladvertise"], () => require("./routerBgpNeighborConditionaladvertise"));

export { RouterBgpNeighborConditionaladvertise6Args, RouterBgpNeighborConditionaladvertise6State } from "./routerBgpNeighborConditionaladvertise6";
export type RouterBgpNeighborConditionaladvertise6 = import("./routerBgpNeighborConditionaladvertise6").RouterBgpNeighborConditionaladvertise6;
export const RouterBgpNeighborConditionaladvertise6: typeof import("./routerBgpNeighborConditionaladvertise6").RouterBgpNeighborConditionaladvertise6 = null as any;
utilities.lazyLoad(exports, ["RouterBgpNeighborConditionaladvertise6"], () => require("./routerBgpNeighborConditionaladvertise6"));

export { RouterBgpNeighborgroupArgs, RouterBgpNeighborgroupState } from "./routerBgpNeighborgroup";
export type RouterBgpNeighborgroup = import("./routerBgpNeighborgroup").RouterBgpNeighborgroup;
export const RouterBgpNeighborgroup: typeof import("./routerBgpNeighborgroup").RouterBgpNeighborgroup = null as any;
utilities.lazyLoad(exports, ["RouterBgpNeighborgroup"], () => require("./routerBgpNeighborgroup"));

export { RouterBgpNeighborrangeArgs, RouterBgpNeighborrangeState } from "./routerBgpNeighborrange";
export type RouterBgpNeighborrange = import("./routerBgpNeighborrange").RouterBgpNeighborrange;
export const RouterBgpNeighborrange: typeof import("./routerBgpNeighborrange").RouterBgpNeighborrange = null as any;
utilities.lazyLoad(exports, ["RouterBgpNeighborrange"], () => require("./routerBgpNeighborrange"));

export { RouterBgpNeighborrange6Args, RouterBgpNeighborrange6State } from "./routerBgpNeighborrange6";
export type RouterBgpNeighborrange6 = import("./routerBgpNeighborrange6").RouterBgpNeighborrange6;
export const RouterBgpNeighborrange6: typeof import("./routerBgpNeighborrange6").RouterBgpNeighborrange6 = null as any;
utilities.lazyLoad(exports, ["RouterBgpNeighborrange6"], () => require("./routerBgpNeighborrange6"));

export { RouterBgpNetworkArgs, RouterBgpNetworkState } from "./routerBgpNetwork";
export type RouterBgpNetwork = import("./routerBgpNetwork").RouterBgpNetwork;
export const RouterBgpNetwork: typeof import("./routerBgpNetwork").RouterBgpNetwork = null as any;
utilities.lazyLoad(exports, ["RouterBgpNetwork"], () => require("./routerBgpNetwork"));

export { RouterBgpNetwork6Args, RouterBgpNetwork6State } from "./routerBgpNetwork6";
export type RouterBgpNetwork6 = import("./routerBgpNetwork6").RouterBgpNetwork6;
export const RouterBgpNetwork6: typeof import("./routerBgpNetwork6").RouterBgpNetwork6 = null as any;
utilities.lazyLoad(exports, ["RouterBgpNetwork6"], () => require("./routerBgpNetwork6"));

export { RouterBgpRedistributeArgs, RouterBgpRedistributeState } from "./routerBgpRedistribute";
export type RouterBgpRedistribute = import("./routerBgpRedistribute").RouterBgpRedistribute;
export const RouterBgpRedistribute: typeof import("./routerBgpRedistribute").RouterBgpRedistribute = null as any;
utilities.lazyLoad(exports, ["RouterBgpRedistribute"], () => require("./routerBgpRedistribute"));

export { RouterBgpRedistribute6Args, RouterBgpRedistribute6State } from "./routerBgpRedistribute6";
export type RouterBgpRedistribute6 = import("./routerBgpRedistribute6").RouterBgpRedistribute6;
export const RouterBgpRedistribute6: typeof import("./routerBgpRedistribute6").RouterBgpRedistribute6 = null as any;
utilities.lazyLoad(exports, ["RouterBgpRedistribute6"], () => require("./routerBgpRedistribute6"));

export { RouterBgpVrfArgs, RouterBgpVrfState } from "./routerBgpVrf";
export type RouterBgpVrf = import("./routerBgpVrf").RouterBgpVrf;
export const RouterBgpVrf: typeof import("./routerBgpVrf").RouterBgpVrf = null as any;
utilities.lazyLoad(exports, ["RouterBgpVrf"], () => require("./routerBgpVrf"));

export { RouterBgpVrf6Args, RouterBgpVrf6State } from "./routerBgpVrf6";
export type RouterBgpVrf6 = import("./routerBgpVrf6").RouterBgpVrf6;
export const RouterBgpVrf6: typeof import("./routerBgpVrf6").RouterBgpVrf6 = null as any;
utilities.lazyLoad(exports, ["RouterBgpVrf6"], () => require("./routerBgpVrf6"));

export { RouterExtcommunitylistArgs, RouterExtcommunitylistState } from "./routerExtcommunitylist";
export type RouterExtcommunitylist = import("./routerExtcommunitylist").RouterExtcommunitylist;
export const RouterExtcommunitylist: typeof import("./routerExtcommunitylist").RouterExtcommunitylist = null as any;
utilities.lazyLoad(exports, ["RouterExtcommunitylist"], () => require("./routerExtcommunitylist"));

export { RouterExtcommunitylistRuleArgs, RouterExtcommunitylistRuleState } from "./routerExtcommunitylistRule";
export type RouterExtcommunitylistRule = import("./routerExtcommunitylistRule").RouterExtcommunitylistRule;
export const RouterExtcommunitylistRule: typeof import("./routerExtcommunitylistRule").RouterExtcommunitylistRule = null as any;
utilities.lazyLoad(exports, ["RouterExtcommunitylistRule"], () => require("./routerExtcommunitylistRule"));

export { RouterIsisArgs, RouterIsisState } from "./routerIsis";
export type RouterIsis = import("./routerIsis").RouterIsis;
export const RouterIsis: typeof import("./routerIsis").RouterIsis = null as any;
utilities.lazyLoad(exports, ["RouterIsis"], () => require("./routerIsis"));

export { RouterIsisIsisinterfaceArgs, RouterIsisIsisinterfaceState } from "./routerIsisIsisinterface";
export type RouterIsisIsisinterface = import("./routerIsisIsisinterface").RouterIsisIsisinterface;
export const RouterIsisIsisinterface: typeof import("./routerIsisIsisinterface").RouterIsisIsisinterface = null as any;
utilities.lazyLoad(exports, ["RouterIsisIsisinterface"], () => require("./routerIsisIsisinterface"));

export { RouterIsisIsisnetArgs, RouterIsisIsisnetState } from "./routerIsisIsisnet";
export type RouterIsisIsisnet = import("./routerIsisIsisnet").RouterIsisIsisnet;
export const RouterIsisIsisnet: typeof import("./routerIsisIsisnet").RouterIsisIsisnet = null as any;
utilities.lazyLoad(exports, ["RouterIsisIsisnet"], () => require("./routerIsisIsisnet"));

export { RouterIsisRedistributeArgs, RouterIsisRedistributeState } from "./routerIsisRedistribute";
export type RouterIsisRedistribute = import("./routerIsisRedistribute").RouterIsisRedistribute;
export const RouterIsisRedistribute: typeof import("./routerIsisRedistribute").RouterIsisRedistribute = null as any;
utilities.lazyLoad(exports, ["RouterIsisRedistribute"], () => require("./routerIsisRedistribute"));

export { RouterIsisRedistribute6Args, RouterIsisRedistribute6State } from "./routerIsisRedistribute6";
export type RouterIsisRedistribute6 = import("./routerIsisRedistribute6").RouterIsisRedistribute6;
export const RouterIsisRedistribute6: typeof import("./routerIsisRedistribute6").RouterIsisRedistribute6 = null as any;
utilities.lazyLoad(exports, ["RouterIsisRedistribute6"], () => require("./routerIsisRedistribute6"));

export { RouterIsisSummaryaddressArgs, RouterIsisSummaryaddressState } from "./routerIsisSummaryaddress";
export type RouterIsisSummaryaddress = import("./routerIsisSummaryaddress").RouterIsisSummaryaddress;
export const RouterIsisSummaryaddress: typeof import("./routerIsisSummaryaddress").RouterIsisSummaryaddress = null as any;
utilities.lazyLoad(exports, ["RouterIsisSummaryaddress"], () => require("./routerIsisSummaryaddress"));

export { RouterIsisSummaryaddress6Args, RouterIsisSummaryaddress6State } from "./routerIsisSummaryaddress6";
export type RouterIsisSummaryaddress6 = import("./routerIsisSummaryaddress6").RouterIsisSummaryaddress6;
export const RouterIsisSummaryaddress6: typeof import("./routerIsisSummaryaddress6").RouterIsisSummaryaddress6 = null as any;
utilities.lazyLoad(exports, ["RouterIsisSummaryaddress6"], () => require("./routerIsisSummaryaddress6"));

export { RouterKeychainArgs, RouterKeychainState } from "./routerKeychain";
export type RouterKeychain = import("./routerKeychain").RouterKeychain;
export const RouterKeychain: typeof import("./routerKeychain").RouterKeychain = null as any;
utilities.lazyLoad(exports, ["RouterKeychain"], () => require("./routerKeychain"));

export { RouterMulticastArgs, RouterMulticastState } from "./routerMulticast";
export type RouterMulticast = import("./routerMulticast").RouterMulticast;
export const RouterMulticast: typeof import("./routerMulticast").RouterMulticast = null as any;
utilities.lazyLoad(exports, ["RouterMulticast"], () => require("./routerMulticast"));

export { RouterMulticast6Args, RouterMulticast6State } from "./routerMulticast6";
export type RouterMulticast6 = import("./routerMulticast6").RouterMulticast6;
export const RouterMulticast6: typeof import("./routerMulticast6").RouterMulticast6 = null as any;
utilities.lazyLoad(exports, ["RouterMulticast6"], () => require("./routerMulticast6"));

export { RouterMulticast6InterfaceArgs, RouterMulticast6InterfaceState } from "./routerMulticast6Interface";
export type RouterMulticast6Interface = import("./routerMulticast6Interface").RouterMulticast6Interface;
export const RouterMulticast6Interface: typeof import("./routerMulticast6Interface").RouterMulticast6Interface = null as any;
utilities.lazyLoad(exports, ["RouterMulticast6Interface"], () => require("./routerMulticast6Interface"));

export { RouterMulticast6PimsmglobalArgs, RouterMulticast6PimsmglobalState } from "./routerMulticast6Pimsmglobal";
export type RouterMulticast6Pimsmglobal = import("./routerMulticast6Pimsmglobal").RouterMulticast6Pimsmglobal;
export const RouterMulticast6Pimsmglobal: typeof import("./routerMulticast6Pimsmglobal").RouterMulticast6Pimsmglobal = null as any;
utilities.lazyLoad(exports, ["RouterMulticast6Pimsmglobal"], () => require("./routerMulticast6Pimsmglobal"));

export { RouterMulticast6PimsmglobalRpaddressArgs, RouterMulticast6PimsmglobalRpaddressState } from "./routerMulticast6PimsmglobalRpaddress";
export type RouterMulticast6PimsmglobalRpaddress = import("./routerMulticast6PimsmglobalRpaddress").RouterMulticast6PimsmglobalRpaddress;
export const RouterMulticast6PimsmglobalRpaddress: typeof import("./routerMulticast6PimsmglobalRpaddress").RouterMulticast6PimsmglobalRpaddress = null as any;
utilities.lazyLoad(exports, ["RouterMulticast6PimsmglobalRpaddress"], () => require("./routerMulticast6PimsmglobalRpaddress"));

export { RouterMulticastInterfaceArgs, RouterMulticastInterfaceState } from "./routerMulticastInterface";
export type RouterMulticastInterface = import("./routerMulticastInterface").RouterMulticastInterface;
export const RouterMulticastInterface: typeof import("./routerMulticastInterface").RouterMulticastInterface = null as any;
utilities.lazyLoad(exports, ["RouterMulticastInterface"], () => require("./routerMulticastInterface"));

export { RouterMulticastInterfaceIgmpArgs, RouterMulticastInterfaceIgmpState } from "./routerMulticastInterfaceIgmp";
export type RouterMulticastInterfaceIgmp = import("./routerMulticastInterfaceIgmp").RouterMulticastInterfaceIgmp;
export const RouterMulticastInterfaceIgmp: typeof import("./routerMulticastInterfaceIgmp").RouterMulticastInterfaceIgmp = null as any;
utilities.lazyLoad(exports, ["RouterMulticastInterfaceIgmp"], () => require("./routerMulticastInterfaceIgmp"));

export { RouterMulticastInterfaceJoingroupArgs, RouterMulticastInterfaceJoingroupState } from "./routerMulticastInterfaceJoingroup";
export type RouterMulticastInterfaceJoingroup = import("./routerMulticastInterfaceJoingroup").RouterMulticastInterfaceJoingroup;
export const RouterMulticastInterfaceJoingroup: typeof import("./routerMulticastInterfaceJoingroup").RouterMulticastInterfaceJoingroup = null as any;
utilities.lazyLoad(exports, ["RouterMulticastInterfaceJoingroup"], () => require("./routerMulticastInterfaceJoingroup"));

export { RouterMulticastPimsmglobalArgs, RouterMulticastPimsmglobalState } from "./routerMulticastPimsmglobal";
export type RouterMulticastPimsmglobal = import("./routerMulticastPimsmglobal").RouterMulticastPimsmglobal;
export const RouterMulticastPimsmglobal: typeof import("./routerMulticastPimsmglobal").RouterMulticastPimsmglobal = null as any;
utilities.lazyLoad(exports, ["RouterMulticastPimsmglobal"], () => require("./routerMulticastPimsmglobal"));

export { RouterMulticastPimsmglobalRpaddressArgs, RouterMulticastPimsmglobalRpaddressState } from "./routerMulticastPimsmglobalRpaddress";
export type RouterMulticastPimsmglobalRpaddress = import("./routerMulticastPimsmglobalRpaddress").RouterMulticastPimsmglobalRpaddress;
export const RouterMulticastPimsmglobalRpaddress: typeof import("./routerMulticastPimsmglobalRpaddress").RouterMulticastPimsmglobalRpaddress = null as any;
utilities.lazyLoad(exports, ["RouterMulticastPimsmglobalRpaddress"], () => require("./routerMulticastPimsmglobalRpaddress"));

export { RouterMulticastflowArgs, RouterMulticastflowState } from "./routerMulticastflow";
export type RouterMulticastflow = import("./routerMulticastflow").RouterMulticastflow;
export const RouterMulticastflow: typeof import("./routerMulticastflow").RouterMulticastflow = null as any;
utilities.lazyLoad(exports, ["RouterMulticastflow"], () => require("./routerMulticastflow"));

export { RouterMulticastflowFlowsArgs, RouterMulticastflowFlowsState } from "./routerMulticastflowFlows";
export type RouterMulticastflowFlows = import("./routerMulticastflowFlows").RouterMulticastflowFlows;
export const RouterMulticastflowFlows: typeof import("./routerMulticastflowFlows").RouterMulticastflowFlows = null as any;
utilities.lazyLoad(exports, ["RouterMulticastflowFlows"], () => require("./routerMulticastflowFlows"));

export { RouterOspfArgs, RouterOspfState } from "./routerOspf";
export type RouterOspf = import("./routerOspf").RouterOspf;
export const RouterOspf: typeof import("./routerOspf").RouterOspf = null as any;
utilities.lazyLoad(exports, ["RouterOspf"], () => require("./routerOspf"));

export { RouterOspf6Args, RouterOspf6State } from "./routerOspf6";
export type RouterOspf6 = import("./routerOspf6").RouterOspf6;
export const RouterOspf6: typeof import("./routerOspf6").RouterOspf6 = null as any;
utilities.lazyLoad(exports, ["RouterOspf6"], () => require("./routerOspf6"));

export { RouterOspf6AreaArgs, RouterOspf6AreaState } from "./routerOspf6Area";
export type RouterOspf6Area = import("./routerOspf6Area").RouterOspf6Area;
export const RouterOspf6Area: typeof import("./routerOspf6Area").RouterOspf6Area = null as any;
utilities.lazyLoad(exports, ["RouterOspf6Area"], () => require("./routerOspf6Area"));

export { RouterOspf6AreaIpseckeysArgs, RouterOspf6AreaIpseckeysState } from "./routerOspf6AreaIpseckeys";
export type RouterOspf6AreaIpseckeys = import("./routerOspf6AreaIpseckeys").RouterOspf6AreaIpseckeys;
export const RouterOspf6AreaIpseckeys: typeof import("./routerOspf6AreaIpseckeys").RouterOspf6AreaIpseckeys = null as any;
utilities.lazyLoad(exports, ["RouterOspf6AreaIpseckeys"], () => require("./routerOspf6AreaIpseckeys"));

export { RouterOspf6AreaRangeArgs, RouterOspf6AreaRangeState } from "./routerOspf6AreaRange";
export type RouterOspf6AreaRange = import("./routerOspf6AreaRange").RouterOspf6AreaRange;
export const RouterOspf6AreaRange: typeof import("./routerOspf6AreaRange").RouterOspf6AreaRange = null as any;
utilities.lazyLoad(exports, ["RouterOspf6AreaRange"], () => require("./routerOspf6AreaRange"));

export { RouterOspf6AreaVirtuallinkArgs, RouterOspf6AreaVirtuallinkState } from "./routerOspf6AreaVirtuallink";
export type RouterOspf6AreaVirtuallink = import("./routerOspf6AreaVirtuallink").RouterOspf6AreaVirtuallink;
export const RouterOspf6AreaVirtuallink: typeof import("./routerOspf6AreaVirtuallink").RouterOspf6AreaVirtuallink = null as any;
utilities.lazyLoad(exports, ["RouterOspf6AreaVirtuallink"], () => require("./routerOspf6AreaVirtuallink"));

export { RouterOspf6AreaVirtuallinkIpseckeysArgs, RouterOspf6AreaVirtuallinkIpseckeysState } from "./routerOspf6AreaVirtuallinkIpseckeys";
export type RouterOspf6AreaVirtuallinkIpseckeys = import("./routerOspf6AreaVirtuallinkIpseckeys").RouterOspf6AreaVirtuallinkIpseckeys;
export const RouterOspf6AreaVirtuallinkIpseckeys: typeof import("./routerOspf6AreaVirtuallinkIpseckeys").RouterOspf6AreaVirtuallinkIpseckeys = null as any;
utilities.lazyLoad(exports, ["RouterOspf6AreaVirtuallinkIpseckeys"], () => require("./routerOspf6AreaVirtuallinkIpseckeys"));

export { RouterOspf6Ospf6interfaceArgs, RouterOspf6Ospf6interfaceState } from "./routerOspf6Ospf6interface";
export type RouterOspf6Ospf6interface = import("./routerOspf6Ospf6interface").RouterOspf6Ospf6interface;
export const RouterOspf6Ospf6interface: typeof import("./routerOspf6Ospf6interface").RouterOspf6Ospf6interface = null as any;
utilities.lazyLoad(exports, ["RouterOspf6Ospf6interface"], () => require("./routerOspf6Ospf6interface"));

export { RouterOspf6Ospf6interfaceIpseckeysArgs, RouterOspf6Ospf6interfaceIpseckeysState } from "./routerOspf6Ospf6interfaceIpseckeys";
export type RouterOspf6Ospf6interfaceIpseckeys = import("./routerOspf6Ospf6interfaceIpseckeys").RouterOspf6Ospf6interfaceIpseckeys;
export const RouterOspf6Ospf6interfaceIpseckeys: typeof import("./routerOspf6Ospf6interfaceIpseckeys").RouterOspf6Ospf6interfaceIpseckeys = null as any;
utilities.lazyLoad(exports, ["RouterOspf6Ospf6interfaceIpseckeys"], () => require("./routerOspf6Ospf6interfaceIpseckeys"));

export { RouterOspf6Ospf6interfaceNeighborArgs, RouterOspf6Ospf6interfaceNeighborState } from "./routerOspf6Ospf6interfaceNeighbor";
export type RouterOspf6Ospf6interfaceNeighbor = import("./routerOspf6Ospf6interfaceNeighbor").RouterOspf6Ospf6interfaceNeighbor;
export const RouterOspf6Ospf6interfaceNeighbor: typeof import("./routerOspf6Ospf6interfaceNeighbor").RouterOspf6Ospf6interfaceNeighbor = null as any;
utilities.lazyLoad(exports, ["RouterOspf6Ospf6interfaceNeighbor"], () => require("./routerOspf6Ospf6interfaceNeighbor"));

export { RouterOspf6RedistributeArgs, RouterOspf6RedistributeState } from "./routerOspf6Redistribute";
export type RouterOspf6Redistribute = import("./routerOspf6Redistribute").RouterOspf6Redistribute;
export const RouterOspf6Redistribute: typeof import("./routerOspf6Redistribute").RouterOspf6Redistribute = null as any;
utilities.lazyLoad(exports, ["RouterOspf6Redistribute"], () => require("./routerOspf6Redistribute"));

export { RouterOspf6SummaryaddressArgs, RouterOspf6SummaryaddressState } from "./routerOspf6Summaryaddress";
export type RouterOspf6Summaryaddress = import("./routerOspf6Summaryaddress").RouterOspf6Summaryaddress;
export const RouterOspf6Summaryaddress: typeof import("./routerOspf6Summaryaddress").RouterOspf6Summaryaddress = null as any;
utilities.lazyLoad(exports, ["RouterOspf6Summaryaddress"], () => require("./routerOspf6Summaryaddress"));

export { RouterOspfAreaArgs, RouterOspfAreaState } from "./routerOspfArea";
export type RouterOspfArea = import("./routerOspfArea").RouterOspfArea;
export const RouterOspfArea: typeof import("./routerOspfArea").RouterOspfArea = null as any;
utilities.lazyLoad(exports, ["RouterOspfArea"], () => require("./routerOspfArea"));

export { RouterOspfAreaRangeArgs, RouterOspfAreaRangeState } from "./routerOspfAreaRange";
export type RouterOspfAreaRange = import("./routerOspfAreaRange").RouterOspfAreaRange;
export const RouterOspfAreaRange: typeof import("./routerOspfAreaRange").RouterOspfAreaRange = null as any;
utilities.lazyLoad(exports, ["RouterOspfAreaRange"], () => require("./routerOspfAreaRange"));

export { RouterOspfAreaVirtuallinkArgs, RouterOspfAreaVirtuallinkState } from "./routerOspfAreaVirtuallink";
export type RouterOspfAreaVirtuallink = import("./routerOspfAreaVirtuallink").RouterOspfAreaVirtuallink;
export const RouterOspfAreaVirtuallink: typeof import("./routerOspfAreaVirtuallink").RouterOspfAreaVirtuallink = null as any;
utilities.lazyLoad(exports, ["RouterOspfAreaVirtuallink"], () => require("./routerOspfAreaVirtuallink"));

export { RouterOspfAreaVirtuallinkMd5keysArgs, RouterOspfAreaVirtuallinkMd5keysState } from "./routerOspfAreaVirtuallinkMd5keys";
export type RouterOspfAreaVirtuallinkMd5keys = import("./routerOspfAreaVirtuallinkMd5keys").RouterOspfAreaVirtuallinkMd5keys;
export const RouterOspfAreaVirtuallinkMd5keys: typeof import("./routerOspfAreaVirtuallinkMd5keys").RouterOspfAreaVirtuallinkMd5keys = null as any;
utilities.lazyLoad(exports, ["RouterOspfAreaVirtuallinkMd5keys"], () => require("./routerOspfAreaVirtuallinkMd5keys"));

export { RouterOspfDistributelistArgs, RouterOspfDistributelistState } from "./routerOspfDistributelist";
export type RouterOspfDistributelist = import("./routerOspfDistributelist").RouterOspfDistributelist;
export const RouterOspfDistributelist: typeof import("./routerOspfDistributelist").RouterOspfDistributelist = null as any;
utilities.lazyLoad(exports, ["RouterOspfDistributelist"], () => require("./routerOspfDistributelist"));

export { RouterOspfNeighborArgs, RouterOspfNeighborState } from "./routerOspfNeighbor";
export type RouterOspfNeighbor = import("./routerOspfNeighbor").RouterOspfNeighbor;
export const RouterOspfNeighbor: typeof import("./routerOspfNeighbor").RouterOspfNeighbor = null as any;
utilities.lazyLoad(exports, ["RouterOspfNeighbor"], () => require("./routerOspfNeighbor"));

export { RouterOspfOspfinterfaceArgs, RouterOspfOspfinterfaceState } from "./routerOspfOspfinterface";
export type RouterOspfOspfinterface = import("./routerOspfOspfinterface").RouterOspfOspfinterface;
export const RouterOspfOspfinterface: typeof import("./routerOspfOspfinterface").RouterOspfOspfinterface = null as any;
utilities.lazyLoad(exports, ["RouterOspfOspfinterface"], () => require("./routerOspfOspfinterface"));

export { RouterOspfRedistributeArgs, RouterOspfRedistributeState } from "./routerOspfRedistribute";
export type RouterOspfRedistribute = import("./routerOspfRedistribute").RouterOspfRedistribute;
export const RouterOspfRedistribute: typeof import("./routerOspfRedistribute").RouterOspfRedistribute = null as any;
utilities.lazyLoad(exports, ["RouterOspfRedistribute"], () => require("./routerOspfRedistribute"));

export { RouterOspfSummaryaddressArgs, RouterOspfSummaryaddressState } from "./routerOspfSummaryaddress";
export type RouterOspfSummaryaddress = import("./routerOspfSummaryaddress").RouterOspfSummaryaddress;
export const RouterOspfSummaryaddress: typeof import("./routerOspfSummaryaddress").RouterOspfSummaryaddress = null as any;
utilities.lazyLoad(exports, ["RouterOspfSummaryaddress"], () => require("./routerOspfSummaryaddress"));

export { RouterPolicyArgs, RouterPolicyState } from "./routerPolicy";
export type RouterPolicy = import("./routerPolicy").RouterPolicy;
export const RouterPolicy: typeof import("./routerPolicy").RouterPolicy = null as any;
utilities.lazyLoad(exports, ["RouterPolicy"], () => require("./routerPolicy"));

export { RouterPolicy6Args, RouterPolicy6State } from "./routerPolicy6";
export type RouterPolicy6 = import("./routerPolicy6").RouterPolicy6;
export const RouterPolicy6: typeof import("./routerPolicy6").RouterPolicy6 = null as any;
utilities.lazyLoad(exports, ["RouterPolicy6"], () => require("./routerPolicy6"));

export { RouterPolicy6MoveArgs, RouterPolicy6MoveState } from "./routerPolicy6Move";
export type RouterPolicy6Move = import("./routerPolicy6Move").RouterPolicy6Move;
export const RouterPolicy6Move: typeof import("./routerPolicy6Move").RouterPolicy6Move = null as any;
utilities.lazyLoad(exports, ["RouterPolicy6Move"], () => require("./routerPolicy6Move"));

export { RouterPolicyMoveArgs, RouterPolicyMoveState } from "./routerPolicyMove";
export type RouterPolicyMove = import("./routerPolicyMove").RouterPolicyMove;
export const RouterPolicyMove: typeof import("./routerPolicyMove").RouterPolicyMove = null as any;
utilities.lazyLoad(exports, ["RouterPolicyMove"], () => require("./routerPolicyMove"));

export { RouterRipArgs, RouterRipState } from "./routerRip";
export type RouterRip = import("./routerRip").RouterRip;
export const RouterRip: typeof import("./routerRip").RouterRip = null as any;
utilities.lazyLoad(exports, ["RouterRip"], () => require("./routerRip"));

export { RouterRipDistanceArgs, RouterRipDistanceState } from "./routerRipDistance";
export type RouterRipDistance = import("./routerRipDistance").RouterRipDistance;
export const RouterRipDistance: typeof import("./routerRipDistance").RouterRipDistance = null as any;
utilities.lazyLoad(exports, ["RouterRipDistance"], () => require("./routerRipDistance"));

export { RouterRipInterfaceArgs, RouterRipInterfaceState } from "./routerRipInterface";
export type RouterRipInterface = import("./routerRipInterface").RouterRipInterface;
export const RouterRipInterface: typeof import("./routerRipInterface").RouterRipInterface = null as any;
utilities.lazyLoad(exports, ["RouterRipInterface"], () => require("./routerRipInterface"));

export { RouterRipNeighborArgs, RouterRipNeighborState } from "./routerRipNeighbor";
export type RouterRipNeighbor = import("./routerRipNeighbor").RouterRipNeighbor;
export const RouterRipNeighbor: typeof import("./routerRipNeighbor").RouterRipNeighbor = null as any;
utilities.lazyLoad(exports, ["RouterRipNeighbor"], () => require("./routerRipNeighbor"));

export { RouterRipNetworkArgs, RouterRipNetworkState } from "./routerRipNetwork";
export type RouterRipNetwork = import("./routerRipNetwork").RouterRipNetwork;
export const RouterRipNetwork: typeof import("./routerRipNetwork").RouterRipNetwork = null as any;
utilities.lazyLoad(exports, ["RouterRipNetwork"], () => require("./routerRipNetwork"));

export { RouterRipOffsetlistArgs, RouterRipOffsetlistState } from "./routerRipOffsetlist";
export type RouterRipOffsetlist = import("./routerRipOffsetlist").RouterRipOffsetlist;
export const RouterRipOffsetlist: typeof import("./routerRipOffsetlist").RouterRipOffsetlist = null as any;
utilities.lazyLoad(exports, ["RouterRipOffsetlist"], () => require("./routerRipOffsetlist"));

export { RouterRipRedistributeArgs, RouterRipRedistributeState } from "./routerRipRedistribute";
export type RouterRipRedistribute = import("./routerRipRedistribute").RouterRipRedistribute;
export const RouterRipRedistribute: typeof import("./routerRipRedistribute").RouterRipRedistribute = null as any;
utilities.lazyLoad(exports, ["RouterRipRedistribute"], () => require("./routerRipRedistribute"));

export { RouterRipngArgs, RouterRipngState } from "./routerRipng";
export type RouterRipng = import("./routerRipng").RouterRipng;
export const RouterRipng: typeof import("./routerRipng").RouterRipng = null as any;
utilities.lazyLoad(exports, ["RouterRipng"], () => require("./routerRipng"));

export { RouterRipngAggregateaddressArgs, RouterRipngAggregateaddressState } from "./routerRipngAggregateaddress";
export type RouterRipngAggregateaddress = import("./routerRipngAggregateaddress").RouterRipngAggregateaddress;
export const RouterRipngAggregateaddress: typeof import("./routerRipngAggregateaddress").RouterRipngAggregateaddress = null as any;
utilities.lazyLoad(exports, ["RouterRipngAggregateaddress"], () => require("./routerRipngAggregateaddress"));

export { RouterRipngDistanceArgs, RouterRipngDistanceState } from "./routerRipngDistance";
export type RouterRipngDistance = import("./routerRipngDistance").RouterRipngDistance;
export const RouterRipngDistance: typeof import("./routerRipngDistance").RouterRipngDistance = null as any;
utilities.lazyLoad(exports, ["RouterRipngDistance"], () => require("./routerRipngDistance"));

export { RouterRipngDistributelistArgs, RouterRipngDistributelistState } from "./routerRipngDistributelist";
export type RouterRipngDistributelist = import("./routerRipngDistributelist").RouterRipngDistributelist;
export const RouterRipngDistributelist: typeof import("./routerRipngDistributelist").RouterRipngDistributelist = null as any;
utilities.lazyLoad(exports, ["RouterRipngDistributelist"], () => require("./routerRipngDistributelist"));

export { RouterRipngInterfaceArgs, RouterRipngInterfaceState } from "./routerRipngInterface";
export type RouterRipngInterface = import("./routerRipngInterface").RouterRipngInterface;
export const RouterRipngInterface: typeof import("./routerRipngInterface").RouterRipngInterface = null as any;
utilities.lazyLoad(exports, ["RouterRipngInterface"], () => require("./routerRipngInterface"));

export { RouterRipngNeighborArgs, RouterRipngNeighborState } from "./routerRipngNeighbor";
export type RouterRipngNeighbor = import("./routerRipngNeighbor").RouterRipngNeighbor;
export const RouterRipngNeighbor: typeof import("./routerRipngNeighbor").RouterRipngNeighbor = null as any;
utilities.lazyLoad(exports, ["RouterRipngNeighbor"], () => require("./routerRipngNeighbor"));

export { RouterRipngNetworkArgs, RouterRipngNetworkState } from "./routerRipngNetwork";
export type RouterRipngNetwork = import("./routerRipngNetwork").RouterRipngNetwork;
export const RouterRipngNetwork: typeof import("./routerRipngNetwork").RouterRipngNetwork = null as any;
utilities.lazyLoad(exports, ["RouterRipngNetwork"], () => require("./routerRipngNetwork"));

export { RouterRipngOffsetlistArgs, RouterRipngOffsetlistState } from "./routerRipngOffsetlist";
export type RouterRipngOffsetlist = import("./routerRipngOffsetlist").RouterRipngOffsetlist;
export const RouterRipngOffsetlist: typeof import("./routerRipngOffsetlist").RouterRipngOffsetlist = null as any;
utilities.lazyLoad(exports, ["RouterRipngOffsetlist"], () => require("./routerRipngOffsetlist"));

export { RouterRipngRedistributeArgs, RouterRipngRedistributeState } from "./routerRipngRedistribute";
export type RouterRipngRedistribute = import("./routerRipngRedistribute").RouterRipngRedistribute;
export const RouterRipngRedistribute: typeof import("./routerRipngRedistribute").RouterRipngRedistribute = null as any;
utilities.lazyLoad(exports, ["RouterRipngRedistribute"], () => require("./routerRipngRedistribute"));

export { RouterSettingArgs, RouterSettingState } from "./routerSetting";
export type RouterSetting = import("./routerSetting").RouterSetting;
export const RouterSetting: typeof import("./routerSetting").RouterSetting = null as any;
utilities.lazyLoad(exports, ["RouterSetting"], () => require("./routerSetting"));

export { RouterStaticArgs, RouterStaticState } from "./routerStatic";
export type RouterStatic = import("./routerStatic").RouterStatic;
export const RouterStatic: typeof import("./routerStatic").RouterStatic = null as any;
utilities.lazyLoad(exports, ["RouterStatic"], () => require("./routerStatic"));

export { RouterStatic6Args, RouterStatic6State } from "./routerStatic6";
export type RouterStatic6 = import("./routerStatic6").RouterStatic6;
export const RouterStatic6: typeof import("./routerStatic6").RouterStatic6 = null as any;
utilities.lazyLoad(exports, ["RouterStatic6"], () => require("./routerStatic6"));

export { Switchcontroller8021xsettingsArgs, Switchcontroller8021xsettingsState } from "./switchcontroller8021xsettings";
export type Switchcontroller8021xsettings = import("./switchcontroller8021xsettings").Switchcontroller8021xsettings;
export const Switchcontroller8021xsettings: typeof import("./switchcontroller8021xsettings").Switchcontroller8021xsettings = null as any;
utilities.lazyLoad(exports, ["Switchcontroller8021xsettings"], () => require("./switchcontroller8021xsettings"));

export { SwitchcontrollerAclGroupArgs, SwitchcontrollerAclGroupState } from "./switchcontrollerAclGroup";
export type SwitchcontrollerAclGroup = import("./switchcontrollerAclGroup").SwitchcontrollerAclGroup;
export const SwitchcontrollerAclGroup: typeof import("./switchcontrollerAclGroup").SwitchcontrollerAclGroup = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerAclGroup"], () => require("./switchcontrollerAclGroup"));

export { SwitchcontrollerAclIngressArgs, SwitchcontrollerAclIngressState } from "./switchcontrollerAclIngress";
export type SwitchcontrollerAclIngress = import("./switchcontrollerAclIngress").SwitchcontrollerAclIngress;
export const SwitchcontrollerAclIngress: typeof import("./switchcontrollerAclIngress").SwitchcontrollerAclIngress = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerAclIngress"], () => require("./switchcontrollerAclIngress"));

export { SwitchcontrollerAclIngressActionArgs, SwitchcontrollerAclIngressActionState } from "./switchcontrollerAclIngressAction";
export type SwitchcontrollerAclIngressAction = import("./switchcontrollerAclIngressAction").SwitchcontrollerAclIngressAction;
export const SwitchcontrollerAclIngressAction: typeof import("./switchcontrollerAclIngressAction").SwitchcontrollerAclIngressAction = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerAclIngressAction"], () => require("./switchcontrollerAclIngressAction"));

export { SwitchcontrollerAclIngressClassifierArgs, SwitchcontrollerAclIngressClassifierState } from "./switchcontrollerAclIngressClassifier";
export type SwitchcontrollerAclIngressClassifier = import("./switchcontrollerAclIngressClassifier").SwitchcontrollerAclIngressClassifier;
export const SwitchcontrollerAclIngressClassifier: typeof import("./switchcontrollerAclIngressClassifier").SwitchcontrollerAclIngressClassifier = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerAclIngressClassifier"], () => require("./switchcontrollerAclIngressClassifier"));

export { SwitchcontrollerAutoconfigCustomArgs, SwitchcontrollerAutoconfigCustomState } from "./switchcontrollerAutoconfigCustom";
export type SwitchcontrollerAutoconfigCustom = import("./switchcontrollerAutoconfigCustom").SwitchcontrollerAutoconfigCustom;
export const SwitchcontrollerAutoconfigCustom: typeof import("./switchcontrollerAutoconfigCustom").SwitchcontrollerAutoconfigCustom = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerAutoconfigCustom"], () => require("./switchcontrollerAutoconfigCustom"));

export { SwitchcontrollerAutoconfigCustomSwitchbindingArgs, SwitchcontrollerAutoconfigCustomSwitchbindingState } from "./switchcontrollerAutoconfigCustomSwitchbinding";
export type SwitchcontrollerAutoconfigCustomSwitchbinding = import("./switchcontrollerAutoconfigCustomSwitchbinding").SwitchcontrollerAutoconfigCustomSwitchbinding;
export const SwitchcontrollerAutoconfigCustomSwitchbinding: typeof import("./switchcontrollerAutoconfigCustomSwitchbinding").SwitchcontrollerAutoconfigCustomSwitchbinding = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerAutoconfigCustomSwitchbinding"], () => require("./switchcontrollerAutoconfigCustomSwitchbinding"));

export { SwitchcontrollerAutoconfigDefaultArgs, SwitchcontrollerAutoconfigDefaultState } from "./switchcontrollerAutoconfigDefault";
export type SwitchcontrollerAutoconfigDefault = import("./switchcontrollerAutoconfigDefault").SwitchcontrollerAutoconfigDefault;
export const SwitchcontrollerAutoconfigDefault: typeof import("./switchcontrollerAutoconfigDefault").SwitchcontrollerAutoconfigDefault = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerAutoconfigDefault"], () => require("./switchcontrollerAutoconfigDefault"));

export { SwitchcontrollerAutoconfigPolicyArgs, SwitchcontrollerAutoconfigPolicyState } from "./switchcontrollerAutoconfigPolicy";
export type SwitchcontrollerAutoconfigPolicy = import("./switchcontrollerAutoconfigPolicy").SwitchcontrollerAutoconfigPolicy;
export const SwitchcontrollerAutoconfigPolicy: typeof import("./switchcontrollerAutoconfigPolicy").SwitchcontrollerAutoconfigPolicy = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerAutoconfigPolicy"], () => require("./switchcontrollerAutoconfigPolicy"));

export { SwitchcontrollerCustomcommandArgs, SwitchcontrollerCustomcommandState } from "./switchcontrollerCustomcommand";
export type SwitchcontrollerCustomcommand = import("./switchcontrollerCustomcommand").SwitchcontrollerCustomcommand;
export const SwitchcontrollerCustomcommand: typeof import("./switchcontrollerCustomcommand").SwitchcontrollerCustomcommand = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerCustomcommand"], () => require("./switchcontrollerCustomcommand"));

export { SwitchcontrollerDynamicportpolicyArgs, SwitchcontrollerDynamicportpolicyState } from "./switchcontrollerDynamicportpolicy";
export type SwitchcontrollerDynamicportpolicy = import("./switchcontrollerDynamicportpolicy").SwitchcontrollerDynamicportpolicy;
export const SwitchcontrollerDynamicportpolicy: typeof import("./switchcontrollerDynamicportpolicy").SwitchcontrollerDynamicportpolicy = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerDynamicportpolicy"], () => require("./switchcontrollerDynamicportpolicy"));

export { SwitchcontrollerDynamicportpolicyPolicyArgs, SwitchcontrollerDynamicportpolicyPolicyState } from "./switchcontrollerDynamicportpolicyPolicy";
export type SwitchcontrollerDynamicportpolicyPolicy = import("./switchcontrollerDynamicportpolicyPolicy").SwitchcontrollerDynamicportpolicyPolicy;
export const SwitchcontrollerDynamicportpolicyPolicy: typeof import("./switchcontrollerDynamicportpolicyPolicy").SwitchcontrollerDynamicportpolicyPolicy = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerDynamicportpolicyPolicy"], () => require("./switchcontrollerDynamicportpolicyPolicy"));

export { SwitchcontrollerDynamicportpolicyPolicyMoveArgs, SwitchcontrollerDynamicportpolicyPolicyMoveState } from "./switchcontrollerDynamicportpolicyPolicyMove";
export type SwitchcontrollerDynamicportpolicyPolicyMove = import("./switchcontrollerDynamicportpolicyPolicyMove").SwitchcontrollerDynamicportpolicyPolicyMove;
export const SwitchcontrollerDynamicportpolicyPolicyMove: typeof import("./switchcontrollerDynamicportpolicyPolicyMove").SwitchcontrollerDynamicportpolicyPolicyMove = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerDynamicportpolicyPolicyMove"], () => require("./switchcontrollerDynamicportpolicyPolicyMove"));

export { SwitchcontrollerFlowtrackingArgs, SwitchcontrollerFlowtrackingState } from "./switchcontrollerFlowtracking";
export type SwitchcontrollerFlowtracking = import("./switchcontrollerFlowtracking").SwitchcontrollerFlowtracking;
export const SwitchcontrollerFlowtracking: typeof import("./switchcontrollerFlowtracking").SwitchcontrollerFlowtracking = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerFlowtracking"], () => require("./switchcontrollerFlowtracking"));

export { SwitchcontrollerFlowtrackingAggregatesArgs, SwitchcontrollerFlowtrackingAggregatesState } from "./switchcontrollerFlowtrackingAggregates";
export type SwitchcontrollerFlowtrackingAggregates = import("./switchcontrollerFlowtrackingAggregates").SwitchcontrollerFlowtrackingAggregates;
export const SwitchcontrollerFlowtrackingAggregates: typeof import("./switchcontrollerFlowtrackingAggregates").SwitchcontrollerFlowtrackingAggregates = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerFlowtrackingAggregates"], () => require("./switchcontrollerFlowtrackingAggregates"));

export { SwitchcontrollerFlowtrackingCollectorsArgs, SwitchcontrollerFlowtrackingCollectorsState } from "./switchcontrollerFlowtrackingCollectors";
export type SwitchcontrollerFlowtrackingCollectors = import("./switchcontrollerFlowtrackingCollectors").SwitchcontrollerFlowtrackingCollectors;
export const SwitchcontrollerFlowtrackingCollectors: typeof import("./switchcontrollerFlowtrackingCollectors").SwitchcontrollerFlowtrackingCollectors = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerFlowtrackingCollectors"], () => require("./switchcontrollerFlowtrackingCollectors"));

export { SwitchcontrollerFortilinksettingsArgs, SwitchcontrollerFortilinksettingsState } from "./switchcontrollerFortilinksettings";
export type SwitchcontrollerFortilinksettings = import("./switchcontrollerFortilinksettings").SwitchcontrollerFortilinksettings;
export const SwitchcontrollerFortilinksettings: typeof import("./switchcontrollerFortilinksettings").SwitchcontrollerFortilinksettings = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerFortilinksettings"], () => require("./switchcontrollerFortilinksettings"));

export { SwitchcontrollerFortilinksettingsNacportsArgs, SwitchcontrollerFortilinksettingsNacportsState } from "./switchcontrollerFortilinksettingsNacports";
export type SwitchcontrollerFortilinksettingsNacports = import("./switchcontrollerFortilinksettingsNacports").SwitchcontrollerFortilinksettingsNacports;
export const SwitchcontrollerFortilinksettingsNacports: typeof import("./switchcontrollerFortilinksettingsNacports").SwitchcontrollerFortilinksettingsNacports = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerFortilinksettingsNacports"], () => require("./switchcontrollerFortilinksettingsNacports"));

export { SwitchcontrollerGlobalArgs, SwitchcontrollerGlobalState } from "./switchcontrollerGlobal";
export type SwitchcontrollerGlobal = import("./switchcontrollerGlobal").SwitchcontrollerGlobal;
export const SwitchcontrollerGlobal: typeof import("./switchcontrollerGlobal").SwitchcontrollerGlobal = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerGlobal"], () => require("./switchcontrollerGlobal"));

export { SwitchcontrollerGlobalCustomcommandArgs, SwitchcontrollerGlobalCustomcommandState } from "./switchcontrollerGlobalCustomcommand";
export type SwitchcontrollerGlobalCustomcommand = import("./switchcontrollerGlobalCustomcommand").SwitchcontrollerGlobalCustomcommand;
export const SwitchcontrollerGlobalCustomcommand: typeof import("./switchcontrollerGlobalCustomcommand").SwitchcontrollerGlobalCustomcommand = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerGlobalCustomcommand"], () => require("./switchcontrollerGlobalCustomcommand"));

export { SwitchcontrollerIgmpsnoopingArgs, SwitchcontrollerIgmpsnoopingState } from "./switchcontrollerIgmpsnooping";
export type SwitchcontrollerIgmpsnooping = import("./switchcontrollerIgmpsnooping").SwitchcontrollerIgmpsnooping;
export const SwitchcontrollerIgmpsnooping: typeof import("./switchcontrollerIgmpsnooping").SwitchcontrollerIgmpsnooping = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerIgmpsnooping"], () => require("./switchcontrollerIgmpsnooping"));

export { SwitchcontrollerInitialconfigTemplateArgs, SwitchcontrollerInitialconfigTemplateState } from "./switchcontrollerInitialconfigTemplate";
export type SwitchcontrollerInitialconfigTemplate = import("./switchcontrollerInitialconfigTemplate").SwitchcontrollerInitialconfigTemplate;
export const SwitchcontrollerInitialconfigTemplate: typeof import("./switchcontrollerInitialconfigTemplate").SwitchcontrollerInitialconfigTemplate = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerInitialconfigTemplate"], () => require("./switchcontrollerInitialconfigTemplate"));

export { SwitchcontrollerInitialconfigVlansArgs, SwitchcontrollerInitialconfigVlansState } from "./switchcontrollerInitialconfigVlans";
export type SwitchcontrollerInitialconfigVlans = import("./switchcontrollerInitialconfigVlans").SwitchcontrollerInitialconfigVlans;
export const SwitchcontrollerInitialconfigVlans: typeof import("./switchcontrollerInitialconfigVlans").SwitchcontrollerInitialconfigVlans = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerInitialconfigVlans"], () => require("./switchcontrollerInitialconfigVlans"));

export { SwitchcontrollerLldpprofileArgs, SwitchcontrollerLldpprofileState } from "./switchcontrollerLldpprofile";
export type SwitchcontrollerLldpprofile = import("./switchcontrollerLldpprofile").SwitchcontrollerLldpprofile;
export const SwitchcontrollerLldpprofile: typeof import("./switchcontrollerLldpprofile").SwitchcontrollerLldpprofile = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerLldpprofile"], () => require("./switchcontrollerLldpprofile"));

export { SwitchcontrollerLldpprofileCustomtlvsArgs, SwitchcontrollerLldpprofileCustomtlvsState } from "./switchcontrollerLldpprofileCustomtlvs";
export type SwitchcontrollerLldpprofileCustomtlvs = import("./switchcontrollerLldpprofileCustomtlvs").SwitchcontrollerLldpprofileCustomtlvs;
export const SwitchcontrollerLldpprofileCustomtlvs: typeof import("./switchcontrollerLldpprofileCustomtlvs").SwitchcontrollerLldpprofileCustomtlvs = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerLldpprofileCustomtlvs"], () => require("./switchcontrollerLldpprofileCustomtlvs"));

export { SwitchcontrollerLldpsettingsArgs, SwitchcontrollerLldpsettingsState } from "./switchcontrollerLldpsettings";
export type SwitchcontrollerLldpsettings = import("./switchcontrollerLldpsettings").SwitchcontrollerLldpsettings;
export const SwitchcontrollerLldpsettings: typeof import("./switchcontrollerLldpsettings").SwitchcontrollerLldpsettings = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerLldpsettings"], () => require("./switchcontrollerLldpsettings"));

export { SwitchcontrollerLocationArgs, SwitchcontrollerLocationState } from "./switchcontrollerLocation";
export type SwitchcontrollerLocation = import("./switchcontrollerLocation").SwitchcontrollerLocation;
export const SwitchcontrollerLocation: typeof import("./switchcontrollerLocation").SwitchcontrollerLocation = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerLocation"], () => require("./switchcontrollerLocation"));

export { SwitchcontrollerLocationAddresscivicArgs, SwitchcontrollerLocationAddresscivicState } from "./switchcontrollerLocationAddresscivic";
export type SwitchcontrollerLocationAddresscivic = import("./switchcontrollerLocationAddresscivic").SwitchcontrollerLocationAddresscivic;
export const SwitchcontrollerLocationAddresscivic: typeof import("./switchcontrollerLocationAddresscivic").SwitchcontrollerLocationAddresscivic = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerLocationAddresscivic"], () => require("./switchcontrollerLocationAddresscivic"));

export { SwitchcontrollerLocationCoordinatesArgs, SwitchcontrollerLocationCoordinatesState } from "./switchcontrollerLocationCoordinates";
export type SwitchcontrollerLocationCoordinates = import("./switchcontrollerLocationCoordinates").SwitchcontrollerLocationCoordinates;
export const SwitchcontrollerLocationCoordinates: typeof import("./switchcontrollerLocationCoordinates").SwitchcontrollerLocationCoordinates = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerLocationCoordinates"], () => require("./switchcontrollerLocationCoordinates"));

export { SwitchcontrollerLocationElinnumberArgs, SwitchcontrollerLocationElinnumberState } from "./switchcontrollerLocationElinnumber";
export type SwitchcontrollerLocationElinnumber = import("./switchcontrollerLocationElinnumber").SwitchcontrollerLocationElinnumber;
export const SwitchcontrollerLocationElinnumber: typeof import("./switchcontrollerLocationElinnumber").SwitchcontrollerLocationElinnumber = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerLocationElinnumber"], () => require("./switchcontrollerLocationElinnumber"));

export { SwitchcontrollerMacpolicyArgs, SwitchcontrollerMacpolicyState } from "./switchcontrollerMacpolicy";
export type SwitchcontrollerMacpolicy = import("./switchcontrollerMacpolicy").SwitchcontrollerMacpolicy;
export const SwitchcontrollerMacpolicy: typeof import("./switchcontrollerMacpolicy").SwitchcontrollerMacpolicy = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerMacpolicy"], () => require("./switchcontrollerMacpolicy"));

export { SwitchcontrollerManagedswitchArgs, SwitchcontrollerManagedswitchState } from "./switchcontrollerManagedswitch";
export type SwitchcontrollerManagedswitch = import("./switchcontrollerManagedswitch").SwitchcontrollerManagedswitch;
export const SwitchcontrollerManagedswitch: typeof import("./switchcontrollerManagedswitch").SwitchcontrollerManagedswitch = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerManagedswitch"], () => require("./switchcontrollerManagedswitch"));

export { SwitchcontrollerManagedswitch8021xsettingsArgs, SwitchcontrollerManagedswitch8021xsettingsState } from "./switchcontrollerManagedswitch8021xsettings";
export type SwitchcontrollerManagedswitch8021xsettings = import("./switchcontrollerManagedswitch8021xsettings").SwitchcontrollerManagedswitch8021xsettings;
export const SwitchcontrollerManagedswitch8021xsettings: typeof import("./switchcontrollerManagedswitch8021xsettings").SwitchcontrollerManagedswitch8021xsettings = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerManagedswitch8021xsettings"], () => require("./switchcontrollerManagedswitch8021xsettings"));

export { SwitchcontrollerManagedswitchCustomcommandArgs, SwitchcontrollerManagedswitchCustomcommandState } from "./switchcontrollerManagedswitchCustomcommand";
export type SwitchcontrollerManagedswitchCustomcommand = import("./switchcontrollerManagedswitchCustomcommand").SwitchcontrollerManagedswitchCustomcommand;
export const SwitchcontrollerManagedswitchCustomcommand: typeof import("./switchcontrollerManagedswitchCustomcommand").SwitchcontrollerManagedswitchCustomcommand = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerManagedswitchCustomcommand"], () => require("./switchcontrollerManagedswitchCustomcommand"));

export { SwitchcontrollerManagedswitchDhcpsnoopingstaticclientArgs, SwitchcontrollerManagedswitchDhcpsnoopingstaticclientState } from "./switchcontrollerManagedswitchDhcpsnoopingstaticclient";
export type SwitchcontrollerManagedswitchDhcpsnoopingstaticclient = import("./switchcontrollerManagedswitchDhcpsnoopingstaticclient").SwitchcontrollerManagedswitchDhcpsnoopingstaticclient;
export const SwitchcontrollerManagedswitchDhcpsnoopingstaticclient: typeof import("./switchcontrollerManagedswitchDhcpsnoopingstaticclient").SwitchcontrollerManagedswitchDhcpsnoopingstaticclient = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerManagedswitchDhcpsnoopingstaticclient"], () => require("./switchcontrollerManagedswitchDhcpsnoopingstaticclient"));

export { SwitchcontrollerManagedswitchIgmpsnoopingArgs, SwitchcontrollerManagedswitchIgmpsnoopingState } from "./switchcontrollerManagedswitchIgmpsnooping";
export type SwitchcontrollerManagedswitchIgmpsnooping = import("./switchcontrollerManagedswitchIgmpsnooping").SwitchcontrollerManagedswitchIgmpsnooping;
export const SwitchcontrollerManagedswitchIgmpsnooping: typeof import("./switchcontrollerManagedswitchIgmpsnooping").SwitchcontrollerManagedswitchIgmpsnooping = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerManagedswitchIgmpsnooping"], () => require("./switchcontrollerManagedswitchIgmpsnooping"));

export { SwitchcontrollerManagedswitchIgmpsnoopingVlansArgs, SwitchcontrollerManagedswitchIgmpsnoopingVlansState } from "./switchcontrollerManagedswitchIgmpsnoopingVlans";
export type SwitchcontrollerManagedswitchIgmpsnoopingVlans = import("./switchcontrollerManagedswitchIgmpsnoopingVlans").SwitchcontrollerManagedswitchIgmpsnoopingVlans;
export const SwitchcontrollerManagedswitchIgmpsnoopingVlans: typeof import("./switchcontrollerManagedswitchIgmpsnoopingVlans").SwitchcontrollerManagedswitchIgmpsnoopingVlans = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerManagedswitchIgmpsnoopingVlans"], () => require("./switchcontrollerManagedswitchIgmpsnoopingVlans"));

export { SwitchcontrollerManagedswitchIpsourceguardArgs, SwitchcontrollerManagedswitchIpsourceguardState } from "./switchcontrollerManagedswitchIpsourceguard";
export type SwitchcontrollerManagedswitchIpsourceguard = import("./switchcontrollerManagedswitchIpsourceguard").SwitchcontrollerManagedswitchIpsourceguard;
export const SwitchcontrollerManagedswitchIpsourceguard: typeof import("./switchcontrollerManagedswitchIpsourceguard").SwitchcontrollerManagedswitchIpsourceguard = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerManagedswitchIpsourceguard"], () => require("./switchcontrollerManagedswitchIpsourceguard"));

export { SwitchcontrollerManagedswitchIpsourceguardBindingentryArgs, SwitchcontrollerManagedswitchIpsourceguardBindingentryState } from "./switchcontrollerManagedswitchIpsourceguardBindingentry";
export type SwitchcontrollerManagedswitchIpsourceguardBindingentry = import("./switchcontrollerManagedswitchIpsourceguardBindingentry").SwitchcontrollerManagedswitchIpsourceguardBindingentry;
export const SwitchcontrollerManagedswitchIpsourceguardBindingentry: typeof import("./switchcontrollerManagedswitchIpsourceguardBindingentry").SwitchcontrollerManagedswitchIpsourceguardBindingentry = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerManagedswitchIpsourceguardBindingentry"], () => require("./switchcontrollerManagedswitchIpsourceguardBindingentry"));

export { SwitchcontrollerManagedswitchMirrorArgs, SwitchcontrollerManagedswitchMirrorState } from "./switchcontrollerManagedswitchMirror";
export type SwitchcontrollerManagedswitchMirror = import("./switchcontrollerManagedswitchMirror").SwitchcontrollerManagedswitchMirror;
export const SwitchcontrollerManagedswitchMirror: typeof import("./switchcontrollerManagedswitchMirror").SwitchcontrollerManagedswitchMirror = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerManagedswitchMirror"], () => require("./switchcontrollerManagedswitchMirror"));

export { SwitchcontrollerManagedswitchMoveArgs, SwitchcontrollerManagedswitchMoveState } from "./switchcontrollerManagedswitchMove";
export type SwitchcontrollerManagedswitchMove = import("./switchcontrollerManagedswitchMove").SwitchcontrollerManagedswitchMove;
export const SwitchcontrollerManagedswitchMove: typeof import("./switchcontrollerManagedswitchMove").SwitchcontrollerManagedswitchMove = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerManagedswitchMove"], () => require("./switchcontrollerManagedswitchMove"));

export { SwitchcontrollerManagedswitchPortsDhcpsnoopoption82overrideArgs, SwitchcontrollerManagedswitchPortsDhcpsnoopoption82overrideState } from "./switchcontrollerManagedswitchPortsDhcpsnoopoption82override";
export type SwitchcontrollerManagedswitchPortsDhcpsnoopoption82override = import("./switchcontrollerManagedswitchPortsDhcpsnoopoption82override").SwitchcontrollerManagedswitchPortsDhcpsnoopoption82override;
export const SwitchcontrollerManagedswitchPortsDhcpsnoopoption82override: typeof import("./switchcontrollerManagedswitchPortsDhcpsnoopoption82override").SwitchcontrollerManagedswitchPortsDhcpsnoopoption82override = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerManagedswitchPortsDhcpsnoopoption82override"], () => require("./switchcontrollerManagedswitchPortsDhcpsnoopoption82override"));

export { SwitchcontrollerManagedswitchRemotelogArgs, SwitchcontrollerManagedswitchRemotelogState } from "./switchcontrollerManagedswitchRemotelog";
export type SwitchcontrollerManagedswitchRemotelog = import("./switchcontrollerManagedswitchRemotelog").SwitchcontrollerManagedswitchRemotelog;
export const SwitchcontrollerManagedswitchRemotelog: typeof import("./switchcontrollerManagedswitchRemotelog").SwitchcontrollerManagedswitchRemotelog = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerManagedswitchRemotelog"], () => require("./switchcontrollerManagedswitchRemotelog"));

export { SwitchcontrollerManagedswitchRouteoffloadrouterArgs, SwitchcontrollerManagedswitchRouteoffloadrouterState } from "./switchcontrollerManagedswitchRouteoffloadrouter";
export type SwitchcontrollerManagedswitchRouteoffloadrouter = import("./switchcontrollerManagedswitchRouteoffloadrouter").SwitchcontrollerManagedswitchRouteoffloadrouter;
export const SwitchcontrollerManagedswitchRouteoffloadrouter: typeof import("./switchcontrollerManagedswitchRouteoffloadrouter").SwitchcontrollerManagedswitchRouteoffloadrouter = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerManagedswitchRouteoffloadrouter"], () => require("./switchcontrollerManagedswitchRouteoffloadrouter"));

export { SwitchcontrollerManagedswitchSnmpcommunityArgs, SwitchcontrollerManagedswitchSnmpcommunityState } from "./switchcontrollerManagedswitchSnmpcommunity";
export type SwitchcontrollerManagedswitchSnmpcommunity = import("./switchcontrollerManagedswitchSnmpcommunity").SwitchcontrollerManagedswitchSnmpcommunity;
export const SwitchcontrollerManagedswitchSnmpcommunity: typeof import("./switchcontrollerManagedswitchSnmpcommunity").SwitchcontrollerManagedswitchSnmpcommunity = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerManagedswitchSnmpcommunity"], () => require("./switchcontrollerManagedswitchSnmpcommunity"));

export { SwitchcontrollerManagedswitchSnmpcommunityHostsArgs, SwitchcontrollerManagedswitchSnmpcommunityHostsState } from "./switchcontrollerManagedswitchSnmpcommunityHosts";
export type SwitchcontrollerManagedswitchSnmpcommunityHosts = import("./switchcontrollerManagedswitchSnmpcommunityHosts").SwitchcontrollerManagedswitchSnmpcommunityHosts;
export const SwitchcontrollerManagedswitchSnmpcommunityHosts: typeof import("./switchcontrollerManagedswitchSnmpcommunityHosts").SwitchcontrollerManagedswitchSnmpcommunityHosts = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerManagedswitchSnmpcommunityHosts"], () => require("./switchcontrollerManagedswitchSnmpcommunityHosts"));

export { SwitchcontrollerManagedswitchSnmpsysinfoArgs, SwitchcontrollerManagedswitchSnmpsysinfoState } from "./switchcontrollerManagedswitchSnmpsysinfo";
export type SwitchcontrollerManagedswitchSnmpsysinfo = import("./switchcontrollerManagedswitchSnmpsysinfo").SwitchcontrollerManagedswitchSnmpsysinfo;
export const SwitchcontrollerManagedswitchSnmpsysinfo: typeof import("./switchcontrollerManagedswitchSnmpsysinfo").SwitchcontrollerManagedswitchSnmpsysinfo = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerManagedswitchSnmpsysinfo"], () => require("./switchcontrollerManagedswitchSnmpsysinfo"));

export { SwitchcontrollerManagedswitchSnmptrapthresholdArgs, SwitchcontrollerManagedswitchSnmptrapthresholdState } from "./switchcontrollerManagedswitchSnmptrapthreshold";
export type SwitchcontrollerManagedswitchSnmptrapthreshold = import("./switchcontrollerManagedswitchSnmptrapthreshold").SwitchcontrollerManagedswitchSnmptrapthreshold;
export const SwitchcontrollerManagedswitchSnmptrapthreshold: typeof import("./switchcontrollerManagedswitchSnmptrapthreshold").SwitchcontrollerManagedswitchSnmptrapthreshold = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerManagedswitchSnmptrapthreshold"], () => require("./switchcontrollerManagedswitchSnmptrapthreshold"));

export { SwitchcontrollerManagedswitchSnmpuserArgs, SwitchcontrollerManagedswitchSnmpuserState } from "./switchcontrollerManagedswitchSnmpuser";
export type SwitchcontrollerManagedswitchSnmpuser = import("./switchcontrollerManagedswitchSnmpuser").SwitchcontrollerManagedswitchSnmpuser;
export const SwitchcontrollerManagedswitchSnmpuser: typeof import("./switchcontrollerManagedswitchSnmpuser").SwitchcontrollerManagedswitchSnmpuser = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerManagedswitchSnmpuser"], () => require("./switchcontrollerManagedswitchSnmpuser"));

export { SwitchcontrollerManagedswitchStaticmacArgs, SwitchcontrollerManagedswitchStaticmacState } from "./switchcontrollerManagedswitchStaticmac";
export type SwitchcontrollerManagedswitchStaticmac = import("./switchcontrollerManagedswitchStaticmac").SwitchcontrollerManagedswitchStaticmac;
export const SwitchcontrollerManagedswitchStaticmac: typeof import("./switchcontrollerManagedswitchStaticmac").SwitchcontrollerManagedswitchStaticmac = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerManagedswitchStaticmac"], () => require("./switchcontrollerManagedswitchStaticmac"));

export { SwitchcontrollerManagedswitchStormcontrolArgs, SwitchcontrollerManagedswitchStormcontrolState } from "./switchcontrollerManagedswitchStormcontrol";
export type SwitchcontrollerManagedswitchStormcontrol = import("./switchcontrollerManagedswitchStormcontrol").SwitchcontrollerManagedswitchStormcontrol;
export const SwitchcontrollerManagedswitchStormcontrol: typeof import("./switchcontrollerManagedswitchStormcontrol").SwitchcontrollerManagedswitchStormcontrol = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerManagedswitchStormcontrol"], () => require("./switchcontrollerManagedswitchStormcontrol"));

export { SwitchcontrollerManagedswitchStpinstanceArgs, SwitchcontrollerManagedswitchStpinstanceState } from "./switchcontrollerManagedswitchStpinstance";
export type SwitchcontrollerManagedswitchStpinstance = import("./switchcontrollerManagedswitchStpinstance").SwitchcontrollerManagedswitchStpinstance;
export const SwitchcontrollerManagedswitchStpinstance: typeof import("./switchcontrollerManagedswitchStpinstance").SwitchcontrollerManagedswitchStpinstance = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerManagedswitchStpinstance"], () => require("./switchcontrollerManagedswitchStpinstance"));

export { SwitchcontrollerManagedswitchStpsettingsArgs, SwitchcontrollerManagedswitchStpsettingsState } from "./switchcontrollerManagedswitchStpsettings";
export type SwitchcontrollerManagedswitchStpsettings = import("./switchcontrollerManagedswitchStpsettings").SwitchcontrollerManagedswitchStpsettings;
export const SwitchcontrollerManagedswitchStpsettings: typeof import("./switchcontrollerManagedswitchStpsettings").SwitchcontrollerManagedswitchStpsettings = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerManagedswitchStpsettings"], () => require("./switchcontrollerManagedswitchStpsettings"));

export { SwitchcontrollerManagedswitchSwitchlogArgs, SwitchcontrollerManagedswitchSwitchlogState } from "./switchcontrollerManagedswitchSwitchlog";
export type SwitchcontrollerManagedswitchSwitchlog = import("./switchcontrollerManagedswitchSwitchlog").SwitchcontrollerManagedswitchSwitchlog;
export const SwitchcontrollerManagedswitchSwitchlog: typeof import("./switchcontrollerManagedswitchSwitchlog").SwitchcontrollerManagedswitchSwitchlog = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerManagedswitchSwitchlog"], () => require("./switchcontrollerManagedswitchSwitchlog"));

export { SwitchcontrollerManagedswitchVlanArgs, SwitchcontrollerManagedswitchVlanState } from "./switchcontrollerManagedswitchVlan";
export type SwitchcontrollerManagedswitchVlan = import("./switchcontrollerManagedswitchVlan").SwitchcontrollerManagedswitchVlan;
export const SwitchcontrollerManagedswitchVlan: typeof import("./switchcontrollerManagedswitchVlan").SwitchcontrollerManagedswitchVlan = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerManagedswitchVlan"], () => require("./switchcontrollerManagedswitchVlan"));

export { SwitchcontrollerNetworkmonitorsettingsArgs, SwitchcontrollerNetworkmonitorsettingsState } from "./switchcontrollerNetworkmonitorsettings";
export type SwitchcontrollerNetworkmonitorsettings = import("./switchcontrollerNetworkmonitorsettings").SwitchcontrollerNetworkmonitorsettings;
export const SwitchcontrollerNetworkmonitorsettings: typeof import("./switchcontrollerNetworkmonitorsettings").SwitchcontrollerNetworkmonitorsettings = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerNetworkmonitorsettings"], () => require("./switchcontrollerNetworkmonitorsettings"));

export { SwitchcontrollerPtpInterfacepolicyArgs, SwitchcontrollerPtpInterfacepolicyState } from "./switchcontrollerPtpInterfacepolicy";
export type SwitchcontrollerPtpInterfacepolicy = import("./switchcontrollerPtpInterfacepolicy").SwitchcontrollerPtpInterfacepolicy;
export const SwitchcontrollerPtpInterfacepolicy: typeof import("./switchcontrollerPtpInterfacepolicy").SwitchcontrollerPtpInterfacepolicy = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerPtpInterfacepolicy"], () => require("./switchcontrollerPtpInterfacepolicy"));

export { SwitchcontrollerPtpPolicyArgs, SwitchcontrollerPtpPolicyState } from "./switchcontrollerPtpPolicy";
export type SwitchcontrollerPtpPolicy = import("./switchcontrollerPtpPolicy").SwitchcontrollerPtpPolicy;
export const SwitchcontrollerPtpPolicy: typeof import("./switchcontrollerPtpPolicy").SwitchcontrollerPtpPolicy = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerPtpPolicy"], () => require("./switchcontrollerPtpPolicy"));

export { SwitchcontrollerPtpProfileArgs, SwitchcontrollerPtpProfileState } from "./switchcontrollerPtpProfile";
export type SwitchcontrollerPtpProfile = import("./switchcontrollerPtpProfile").SwitchcontrollerPtpProfile;
export const SwitchcontrollerPtpProfile: typeof import("./switchcontrollerPtpProfile").SwitchcontrollerPtpProfile = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerPtpProfile"], () => require("./switchcontrollerPtpProfile"));

export { SwitchcontrollerPtpSettingsArgs, SwitchcontrollerPtpSettingsState } from "./switchcontrollerPtpSettings";
export type SwitchcontrollerPtpSettings = import("./switchcontrollerPtpSettings").SwitchcontrollerPtpSettings;
export const SwitchcontrollerPtpSettings: typeof import("./switchcontrollerPtpSettings").SwitchcontrollerPtpSettings = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerPtpSettings"], () => require("./switchcontrollerPtpSettings"));

export { SwitchcontrollerQosDot1pmapArgs, SwitchcontrollerQosDot1pmapState } from "./switchcontrollerQosDot1pmap";
export type SwitchcontrollerQosDot1pmap = import("./switchcontrollerQosDot1pmap").SwitchcontrollerQosDot1pmap;
export const SwitchcontrollerQosDot1pmap: typeof import("./switchcontrollerQosDot1pmap").SwitchcontrollerQosDot1pmap = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerQosDot1pmap"], () => require("./switchcontrollerQosDot1pmap"));

export { SwitchcontrollerQosIpdscpmapArgs, SwitchcontrollerQosIpdscpmapState } from "./switchcontrollerQosIpdscpmap";
export type SwitchcontrollerQosIpdscpmap = import("./switchcontrollerQosIpdscpmap").SwitchcontrollerQosIpdscpmap;
export const SwitchcontrollerQosIpdscpmap: typeof import("./switchcontrollerQosIpdscpmap").SwitchcontrollerQosIpdscpmap = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerQosIpdscpmap"], () => require("./switchcontrollerQosIpdscpmap"));

export { SwitchcontrollerQosIpdscpmapMapArgs, SwitchcontrollerQosIpdscpmapMapState } from "./switchcontrollerQosIpdscpmapMap";
export type SwitchcontrollerQosIpdscpmapMap = import("./switchcontrollerQosIpdscpmapMap").SwitchcontrollerQosIpdscpmapMap;
export const SwitchcontrollerQosIpdscpmapMap: typeof import("./switchcontrollerQosIpdscpmapMap").SwitchcontrollerQosIpdscpmapMap = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerQosIpdscpmapMap"], () => require("./switchcontrollerQosIpdscpmapMap"));

export { SwitchcontrollerQosQospolicyArgs, SwitchcontrollerQosQospolicyState } from "./switchcontrollerQosQospolicy";
export type SwitchcontrollerQosQospolicy = import("./switchcontrollerQosQospolicy").SwitchcontrollerQosQospolicy;
export const SwitchcontrollerQosQospolicy: typeof import("./switchcontrollerQosQospolicy").SwitchcontrollerQosQospolicy = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerQosQospolicy"], () => require("./switchcontrollerQosQospolicy"));

export { SwitchcontrollerQosQueuepolicyArgs, SwitchcontrollerQosQueuepolicyState } from "./switchcontrollerQosQueuepolicy";
export type SwitchcontrollerQosQueuepolicy = import("./switchcontrollerQosQueuepolicy").SwitchcontrollerQosQueuepolicy;
export const SwitchcontrollerQosQueuepolicy: typeof import("./switchcontrollerQosQueuepolicy").SwitchcontrollerQosQueuepolicy = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerQosQueuepolicy"], () => require("./switchcontrollerQosQueuepolicy"));

export { SwitchcontrollerRemotelogArgs, SwitchcontrollerRemotelogState } from "./switchcontrollerRemotelog";
export type SwitchcontrollerRemotelog = import("./switchcontrollerRemotelog").SwitchcontrollerRemotelog;
export const SwitchcontrollerRemotelog: typeof import("./switchcontrollerRemotelog").SwitchcontrollerRemotelog = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerRemotelog"], () => require("./switchcontrollerRemotelog"));

export { SwitchcontrollerSecuritypolicy8021xArgs, SwitchcontrollerSecuritypolicy8021xState } from "./switchcontrollerSecuritypolicy8021x";
export type SwitchcontrollerSecuritypolicy8021x = import("./switchcontrollerSecuritypolicy8021x").SwitchcontrollerSecuritypolicy8021x;
export const SwitchcontrollerSecuritypolicy8021x: typeof import("./switchcontrollerSecuritypolicy8021x").SwitchcontrollerSecuritypolicy8021x = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerSecuritypolicy8021x"], () => require("./switchcontrollerSecuritypolicy8021x"));

export { SwitchcontrollerSecuritypolicyLocalaccessArgs, SwitchcontrollerSecuritypolicyLocalaccessState } from "./switchcontrollerSecuritypolicyLocalaccess";
export type SwitchcontrollerSecuritypolicyLocalaccess = import("./switchcontrollerSecuritypolicyLocalaccess").SwitchcontrollerSecuritypolicyLocalaccess;
export const SwitchcontrollerSecuritypolicyLocalaccess: typeof import("./switchcontrollerSecuritypolicyLocalaccess").SwitchcontrollerSecuritypolicyLocalaccess = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerSecuritypolicyLocalaccess"], () => require("./switchcontrollerSecuritypolicyLocalaccess"));

export { SwitchcontrollerSflowArgs, SwitchcontrollerSflowState } from "./switchcontrollerSflow";
export type SwitchcontrollerSflow = import("./switchcontrollerSflow").SwitchcontrollerSflow;
export const SwitchcontrollerSflow: typeof import("./switchcontrollerSflow").SwitchcontrollerSflow = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerSflow"], () => require("./switchcontrollerSflow"));

export { SwitchcontrollerSnmpcommunityArgs, SwitchcontrollerSnmpcommunityState } from "./switchcontrollerSnmpcommunity";
export type SwitchcontrollerSnmpcommunity = import("./switchcontrollerSnmpcommunity").SwitchcontrollerSnmpcommunity;
export const SwitchcontrollerSnmpcommunity: typeof import("./switchcontrollerSnmpcommunity").SwitchcontrollerSnmpcommunity = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerSnmpcommunity"], () => require("./switchcontrollerSnmpcommunity"));

export { SwitchcontrollerSnmpcommunityHostsArgs, SwitchcontrollerSnmpcommunityHostsState } from "./switchcontrollerSnmpcommunityHosts";
export type SwitchcontrollerSnmpcommunityHosts = import("./switchcontrollerSnmpcommunityHosts").SwitchcontrollerSnmpcommunityHosts;
export const SwitchcontrollerSnmpcommunityHosts: typeof import("./switchcontrollerSnmpcommunityHosts").SwitchcontrollerSnmpcommunityHosts = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerSnmpcommunityHosts"], () => require("./switchcontrollerSnmpcommunityHosts"));

export { SwitchcontrollerSnmpsysinfoArgs, SwitchcontrollerSnmpsysinfoState } from "./switchcontrollerSnmpsysinfo";
export type SwitchcontrollerSnmpsysinfo = import("./switchcontrollerSnmpsysinfo").SwitchcontrollerSnmpsysinfo;
export const SwitchcontrollerSnmpsysinfo: typeof import("./switchcontrollerSnmpsysinfo").SwitchcontrollerSnmpsysinfo = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerSnmpsysinfo"], () => require("./switchcontrollerSnmpsysinfo"));

export { SwitchcontrollerSnmptrapthresholdArgs, SwitchcontrollerSnmptrapthresholdState } from "./switchcontrollerSnmptrapthreshold";
export type SwitchcontrollerSnmptrapthreshold = import("./switchcontrollerSnmptrapthreshold").SwitchcontrollerSnmptrapthreshold;
export const SwitchcontrollerSnmptrapthreshold: typeof import("./switchcontrollerSnmptrapthreshold").SwitchcontrollerSnmptrapthreshold = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerSnmptrapthreshold"], () => require("./switchcontrollerSnmptrapthreshold"));

export { SwitchcontrollerSnmpuserArgs, SwitchcontrollerSnmpuserState } from "./switchcontrollerSnmpuser";
export type SwitchcontrollerSnmpuser = import("./switchcontrollerSnmpuser").SwitchcontrollerSnmpuser;
export const SwitchcontrollerSnmpuser: typeof import("./switchcontrollerSnmpuser").SwitchcontrollerSnmpuser = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerSnmpuser"], () => require("./switchcontrollerSnmpuser"));

export { SwitchcontrollerStormcontrolArgs, SwitchcontrollerStormcontrolState } from "./switchcontrollerStormcontrol";
export type SwitchcontrollerStormcontrol = import("./switchcontrollerStormcontrol").SwitchcontrollerStormcontrol;
export const SwitchcontrollerStormcontrol: typeof import("./switchcontrollerStormcontrol").SwitchcontrollerStormcontrol = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerStormcontrol"], () => require("./switchcontrollerStormcontrol"));

export { SwitchcontrollerStormcontrolpolicyArgs, SwitchcontrollerStormcontrolpolicyState } from "./switchcontrollerStormcontrolpolicy";
export type SwitchcontrollerStormcontrolpolicy = import("./switchcontrollerStormcontrolpolicy").SwitchcontrollerStormcontrolpolicy;
export const SwitchcontrollerStormcontrolpolicy: typeof import("./switchcontrollerStormcontrolpolicy").SwitchcontrollerStormcontrolpolicy = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerStormcontrolpolicy"], () => require("./switchcontrollerStormcontrolpolicy"));

export { SwitchcontrollerStpinstanceArgs, SwitchcontrollerStpinstanceState } from "./switchcontrollerStpinstance";
export type SwitchcontrollerStpinstance = import("./switchcontrollerStpinstance").SwitchcontrollerStpinstance;
export const SwitchcontrollerStpinstance: typeof import("./switchcontrollerStpinstance").SwitchcontrollerStpinstance = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerStpinstance"], () => require("./switchcontrollerStpinstance"));

export { SwitchcontrollerStpsettingsArgs, SwitchcontrollerStpsettingsState } from "./switchcontrollerStpsettings";
export type SwitchcontrollerStpsettings = import("./switchcontrollerStpsettings").SwitchcontrollerStpsettings;
export const SwitchcontrollerStpsettings: typeof import("./switchcontrollerStpsettings").SwitchcontrollerStpsettings = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerStpsettings"], () => require("./switchcontrollerStpsettings"));

export { SwitchcontrollerSwitchgroupArgs, SwitchcontrollerSwitchgroupState } from "./switchcontrollerSwitchgroup";
export type SwitchcontrollerSwitchgroup = import("./switchcontrollerSwitchgroup").SwitchcontrollerSwitchgroup;
export const SwitchcontrollerSwitchgroup: typeof import("./switchcontrollerSwitchgroup").SwitchcontrollerSwitchgroup = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerSwitchgroup"], () => require("./switchcontrollerSwitchgroup"));

export { SwitchcontrollerSwitchinterfacetagArgs, SwitchcontrollerSwitchinterfacetagState } from "./switchcontrollerSwitchinterfacetag";
export type SwitchcontrollerSwitchinterfacetag = import("./switchcontrollerSwitchinterfacetag").SwitchcontrollerSwitchinterfacetag;
export const SwitchcontrollerSwitchinterfacetag: typeof import("./switchcontrollerSwitchinterfacetag").SwitchcontrollerSwitchinterfacetag = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerSwitchinterfacetag"], () => require("./switchcontrollerSwitchinterfacetag"));

export { SwitchcontrollerSwitchlogArgs, SwitchcontrollerSwitchlogState } from "./switchcontrollerSwitchlog";
export type SwitchcontrollerSwitchlog = import("./switchcontrollerSwitchlog").SwitchcontrollerSwitchlog;
export const SwitchcontrollerSwitchlog: typeof import("./switchcontrollerSwitchlog").SwitchcontrollerSwitchlog = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerSwitchlog"], () => require("./switchcontrollerSwitchlog"));

export { SwitchcontrollerSwitchprofileArgs, SwitchcontrollerSwitchprofileState } from "./switchcontrollerSwitchprofile";
export type SwitchcontrollerSwitchprofile = import("./switchcontrollerSwitchprofile").SwitchcontrollerSwitchprofile;
export const SwitchcontrollerSwitchprofile: typeof import("./switchcontrollerSwitchprofile").SwitchcontrollerSwitchprofile = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerSwitchprofile"], () => require("./switchcontrollerSwitchprofile"));

export { SwitchcontrollerSystemArgs, SwitchcontrollerSystemState } from "./switchcontrollerSystem";
export type SwitchcontrollerSystem = import("./switchcontrollerSystem").SwitchcontrollerSystem;
export const SwitchcontrollerSystem: typeof import("./switchcontrollerSystem").SwitchcontrollerSystem = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerSystem"], () => require("./switchcontrollerSystem"));

export { SwitchcontrollerTrafficpolicyArgs, SwitchcontrollerTrafficpolicyState } from "./switchcontrollerTrafficpolicy";
export type SwitchcontrollerTrafficpolicy = import("./switchcontrollerTrafficpolicy").SwitchcontrollerTrafficpolicy;
export const SwitchcontrollerTrafficpolicy: typeof import("./switchcontrollerTrafficpolicy").SwitchcontrollerTrafficpolicy = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerTrafficpolicy"], () => require("./switchcontrollerTrafficpolicy"));

export { SwitchcontrollerTrafficsnifferArgs, SwitchcontrollerTrafficsnifferState } from "./switchcontrollerTrafficsniffer";
export type SwitchcontrollerTrafficsniffer = import("./switchcontrollerTrafficsniffer").SwitchcontrollerTrafficsniffer;
export const SwitchcontrollerTrafficsniffer: typeof import("./switchcontrollerTrafficsniffer").SwitchcontrollerTrafficsniffer = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerTrafficsniffer"], () => require("./switchcontrollerTrafficsniffer"));

export { SwitchcontrollerTrafficsnifferTargetipArgs, SwitchcontrollerTrafficsnifferTargetipState } from "./switchcontrollerTrafficsnifferTargetip";
export type SwitchcontrollerTrafficsnifferTargetip = import("./switchcontrollerTrafficsnifferTargetip").SwitchcontrollerTrafficsnifferTargetip;
export const SwitchcontrollerTrafficsnifferTargetip: typeof import("./switchcontrollerTrafficsnifferTargetip").SwitchcontrollerTrafficsnifferTargetip = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerTrafficsnifferTargetip"], () => require("./switchcontrollerTrafficsnifferTargetip"));

export { SwitchcontrollerTrafficsnifferTargetmacArgs, SwitchcontrollerTrafficsnifferTargetmacState } from "./switchcontrollerTrafficsnifferTargetmac";
export type SwitchcontrollerTrafficsnifferTargetmac = import("./switchcontrollerTrafficsnifferTargetmac").SwitchcontrollerTrafficsnifferTargetmac;
export const SwitchcontrollerTrafficsnifferTargetmac: typeof import("./switchcontrollerTrafficsnifferTargetmac").SwitchcontrollerTrafficsnifferTargetmac = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerTrafficsnifferTargetmac"], () => require("./switchcontrollerTrafficsnifferTargetmac"));

export { SwitchcontrollerTrafficsnifferTargetportArgs, SwitchcontrollerTrafficsnifferTargetportState } from "./switchcontrollerTrafficsnifferTargetport";
export type SwitchcontrollerTrafficsnifferTargetport = import("./switchcontrollerTrafficsnifferTargetport").SwitchcontrollerTrafficsnifferTargetport;
export const SwitchcontrollerTrafficsnifferTargetport: typeof import("./switchcontrollerTrafficsnifferTargetport").SwitchcontrollerTrafficsnifferTargetport = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerTrafficsnifferTargetport"], () => require("./switchcontrollerTrafficsnifferTargetport"));

export { SwitchcontrollerVirtualportpoolArgs, SwitchcontrollerVirtualportpoolState } from "./switchcontrollerVirtualportpool";
export type SwitchcontrollerVirtualportpool = import("./switchcontrollerVirtualportpool").SwitchcontrollerVirtualportpool;
export const SwitchcontrollerVirtualportpool: typeof import("./switchcontrollerVirtualportpool").SwitchcontrollerVirtualportpool = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerVirtualportpool"], () => require("./switchcontrollerVirtualportpool"));

export { SwitchcontrollerVlanpolicyArgs, SwitchcontrollerVlanpolicyState } from "./switchcontrollerVlanpolicy";
export type SwitchcontrollerVlanpolicy = import("./switchcontrollerVlanpolicy").SwitchcontrollerVlanpolicy;
export const SwitchcontrollerVlanpolicy: typeof import("./switchcontrollerVlanpolicy").SwitchcontrollerVlanpolicy = null as any;
utilities.lazyLoad(exports, ["SwitchcontrollerVlanpolicy"], () => require("./switchcontrollerVlanpolicy"));

export { System5gmodemModem1Args, System5gmodemModem1State } from "./system5gmodemModem1";
export type System5gmodemModem1 = import("./system5gmodemModem1").System5gmodemModem1;
export const System5gmodemModem1: typeof import("./system5gmodemModem1").System5gmodemModem1 = null as any;
utilities.lazyLoad(exports, ["System5gmodemModem1"], () => require("./system5gmodemModem1"));

export { SystemAccprofileArgs, SystemAccprofileState } from "./systemAccprofile";
export type SystemAccprofile = import("./systemAccprofile").SystemAccprofile;
export const SystemAccprofile: typeof import("./systemAccprofile").SystemAccprofile = null as any;
utilities.lazyLoad(exports, ["SystemAccprofile"], () => require("./systemAccprofile"));

export { SystemAcmeArgs, SystemAcmeState } from "./systemAcme";
export type SystemAcme = import("./systemAcme").SystemAcme;
export const SystemAcme: typeof import("./systemAcme").SystemAcme = null as any;
utilities.lazyLoad(exports, ["SystemAcme"], () => require("./systemAcme"));

export { SystemAcmeAccountsArgs, SystemAcmeAccountsState } from "./systemAcmeAccounts";
export type SystemAcmeAccounts = import("./systemAcmeAccounts").SystemAcmeAccounts;
export const SystemAcmeAccounts: typeof import("./systemAcmeAccounts").SystemAcmeAccounts = null as any;
utilities.lazyLoad(exports, ["SystemAcmeAccounts"], () => require("./systemAcmeAccounts"));

export { SystemAdminArgs, SystemAdminState } from "./systemAdmin";
export type SystemAdmin = import("./systemAdmin").SystemAdmin;
export const SystemAdmin: typeof import("./systemAdmin").SystemAdmin = null as any;
utilities.lazyLoad(exports, ["SystemAdmin"], () => require("./systemAdmin"));

export { SystemAffinityinterruptArgs, SystemAffinityinterruptState } from "./systemAffinityinterrupt";
export type SystemAffinityinterrupt = import("./systemAffinityinterrupt").SystemAffinityinterrupt;
export const SystemAffinityinterrupt: typeof import("./systemAffinityinterrupt").SystemAffinityinterrupt = null as any;
utilities.lazyLoad(exports, ["SystemAffinityinterrupt"], () => require("./systemAffinityinterrupt"));

export { SystemAffinitypacketredistributionArgs, SystemAffinitypacketredistributionState } from "./systemAffinitypacketredistribution";
export type SystemAffinitypacketredistribution = import("./systemAffinitypacketredistribution").SystemAffinitypacketredistribution;
export const SystemAffinitypacketredistribution: typeof import("./systemAffinitypacketredistribution").SystemAffinitypacketredistribution = null as any;
utilities.lazyLoad(exports, ["SystemAffinitypacketredistribution"], () => require("./systemAffinitypacketredistribution"));

export { SystemAliasArgs, SystemAliasState } from "./systemAlias";
export type SystemAlias = import("./systemAlias").SystemAlias;
export const SystemAlias: typeof import("./systemAlias").SystemAlias = null as any;
utilities.lazyLoad(exports, ["SystemAlias"], () => require("./systemAlias"));

export { SystemApiuserArgs, SystemApiuserState } from "./systemApiuser";
export type SystemApiuser = import("./systemApiuser").SystemApiuser;
export const SystemApiuser: typeof import("./systemApiuser").SystemApiuser = null as any;
utilities.lazyLoad(exports, ["SystemApiuser"], () => require("./systemApiuser"));

export { SystemApiuserTrusthostArgs, SystemApiuserTrusthostState } from "./systemApiuserTrusthost";
export type SystemApiuserTrusthost = import("./systemApiuserTrusthost").SystemApiuserTrusthost;
export const SystemApiuserTrusthost: typeof import("./systemApiuserTrusthost").SystemApiuserTrusthost = null as any;
utilities.lazyLoad(exports, ["SystemApiuserTrusthost"], () => require("./systemApiuserTrusthost"));

export { SystemArptableArgs, SystemArptableState } from "./systemArptable";
export type SystemArptable = import("./systemArptable").SystemArptable;
export const SystemArptable: typeof import("./systemArptable").SystemArptable = null as any;
utilities.lazyLoad(exports, ["SystemArptable"], () => require("./systemArptable"));

export { SystemAutoinstallArgs, SystemAutoinstallState } from "./systemAutoinstall";
export type SystemAutoinstall = import("./systemAutoinstall").SystemAutoinstall;
export const SystemAutoinstall: typeof import("./systemAutoinstall").SystemAutoinstall = null as any;
utilities.lazyLoad(exports, ["SystemAutoinstall"], () => require("./systemAutoinstall"));

export { SystemAutomationactionArgs, SystemAutomationactionState } from "./systemAutomationaction";
export type SystemAutomationaction = import("./systemAutomationaction").SystemAutomationaction;
export const SystemAutomationaction: typeof import("./systemAutomationaction").SystemAutomationaction = null as any;
utilities.lazyLoad(exports, ["SystemAutomationaction"], () => require("./systemAutomationaction"));

export { SystemAutomationactionHttpheadersArgs, SystemAutomationactionHttpheadersState } from "./systemAutomationactionHttpheaders";
export type SystemAutomationactionHttpheaders = import("./systemAutomationactionHttpheaders").SystemAutomationactionHttpheaders;
export const SystemAutomationactionHttpheaders: typeof import("./systemAutomationactionHttpheaders").SystemAutomationactionHttpheaders = null as any;
utilities.lazyLoad(exports, ["SystemAutomationactionHttpheaders"], () => require("./systemAutomationactionHttpheaders"));

export { SystemAutomationdestinationArgs, SystemAutomationdestinationState } from "./systemAutomationdestination";
export type SystemAutomationdestination = import("./systemAutomationdestination").SystemAutomationdestination;
export const SystemAutomationdestination: typeof import("./systemAutomationdestination").SystemAutomationdestination = null as any;
utilities.lazyLoad(exports, ["SystemAutomationdestination"], () => require("./systemAutomationdestination"));

export { SystemAutomationstitchArgs, SystemAutomationstitchState } from "./systemAutomationstitch";
export type SystemAutomationstitch = import("./systemAutomationstitch").SystemAutomationstitch;
export const SystemAutomationstitch: typeof import("./systemAutomationstitch").SystemAutomationstitch = null as any;
utilities.lazyLoad(exports, ["SystemAutomationstitch"], () => require("./systemAutomationstitch"));

export { SystemAutomationstitchActionsArgs, SystemAutomationstitchActionsState } from "./systemAutomationstitchActions";
export type SystemAutomationstitchActions = import("./systemAutomationstitchActions").SystemAutomationstitchActions;
export const SystemAutomationstitchActions: typeof import("./systemAutomationstitchActions").SystemAutomationstitchActions = null as any;
utilities.lazyLoad(exports, ["SystemAutomationstitchActions"], () => require("./systemAutomationstitchActions"));

export { SystemAutomationstitchActionsMoveArgs, SystemAutomationstitchActionsMoveState } from "./systemAutomationstitchActionsMove";
export type SystemAutomationstitchActionsMove = import("./systemAutomationstitchActionsMove").SystemAutomationstitchActionsMove;
export const SystemAutomationstitchActionsMove: typeof import("./systemAutomationstitchActionsMove").SystemAutomationstitchActionsMove = null as any;
utilities.lazyLoad(exports, ["SystemAutomationstitchActionsMove"], () => require("./systemAutomationstitchActionsMove"));

export { SystemAutomationtriggerArgs, SystemAutomationtriggerState } from "./systemAutomationtrigger";
export type SystemAutomationtrigger = import("./systemAutomationtrigger").SystemAutomationtrigger;
export const SystemAutomationtrigger: typeof import("./systemAutomationtrigger").SystemAutomationtrigger = null as any;
utilities.lazyLoad(exports, ["SystemAutomationtrigger"], () => require("./systemAutomationtrigger"));

export { SystemAutomationtriggerFieldsArgs, SystemAutomationtriggerFieldsState } from "./systemAutomationtriggerFields";
export type SystemAutomationtriggerFields = import("./systemAutomationtriggerFields").SystemAutomationtriggerFields;
export const SystemAutomationtriggerFields: typeof import("./systemAutomationtriggerFields").SystemAutomationtriggerFields = null as any;
utilities.lazyLoad(exports, ["SystemAutomationtriggerFields"], () => require("./systemAutomationtriggerFields"));

export { SystemAutoscriptArgs, SystemAutoscriptState } from "./systemAutoscript";
export type SystemAutoscript = import("./systemAutoscript").SystemAutoscript;
export const SystemAutoscript: typeof import("./systemAutoscript").SystemAutoscript = null as any;
utilities.lazyLoad(exports, ["SystemAutoscript"], () => require("./systemAutoscript"));

export { SystemAutoupdateScheduleArgs, SystemAutoupdateScheduleState } from "./systemAutoupdateSchedule";
export type SystemAutoupdateSchedule = import("./systemAutoupdateSchedule").SystemAutoupdateSchedule;
export const SystemAutoupdateSchedule: typeof import("./systemAutoupdateSchedule").SystemAutoupdateSchedule = null as any;
utilities.lazyLoad(exports, ["SystemAutoupdateSchedule"], () => require("./systemAutoupdateSchedule"));

export { SystemAutoupdateTunnelingArgs, SystemAutoupdateTunnelingState } from "./systemAutoupdateTunneling";
export type SystemAutoupdateTunneling = import("./systemAutoupdateTunneling").SystemAutoupdateTunneling;
export const SystemAutoupdateTunneling: typeof import("./systemAutoupdateTunneling").SystemAutoupdateTunneling = null as any;
utilities.lazyLoad(exports, ["SystemAutoupdateTunneling"], () => require("./systemAutoupdateTunneling"));

export { SystemCentralmanagementArgs, SystemCentralmanagementState } from "./systemCentralmanagement";
export type SystemCentralmanagement = import("./systemCentralmanagement").SystemCentralmanagement;
export const SystemCentralmanagement: typeof import("./systemCentralmanagement").SystemCentralmanagement = null as any;
utilities.lazyLoad(exports, ["SystemCentralmanagement"], () => require("./systemCentralmanagement"));

export { SystemCentralmanagementServerlistArgs, SystemCentralmanagementServerlistState } from "./systemCentralmanagementServerlist";
export type SystemCentralmanagementServerlist = import("./systemCentralmanagementServerlist").SystemCentralmanagementServerlist;
export const SystemCentralmanagementServerlist: typeof import("./systemCentralmanagementServerlist").SystemCentralmanagementServerlist = null as any;
utilities.lazyLoad(exports, ["SystemCentralmanagementServerlist"], () => require("./systemCentralmanagementServerlist"));

export { SystemClustersyncArgs, SystemClustersyncState } from "./systemClustersync";
export type SystemClustersync = import("./systemClustersync").SystemClustersync;
export const SystemClustersync: typeof import("./systemClustersync").SystemClustersync = null as any;
utilities.lazyLoad(exports, ["SystemClustersync"], () => require("./systemClustersync"));

export { SystemClustersyncSessionsyncfilterArgs, SystemClustersyncSessionsyncfilterState } from "./systemClustersyncSessionsyncfilter";
export type SystemClustersyncSessionsyncfilter = import("./systemClustersyncSessionsyncfilter").SystemClustersyncSessionsyncfilter;
export const SystemClustersyncSessionsyncfilter: typeof import("./systemClustersyncSessionsyncfilter").SystemClustersyncSessionsyncfilter = null as any;
utilities.lazyLoad(exports, ["SystemClustersyncSessionsyncfilter"], () => require("./systemClustersyncSessionsyncfilter"));

export { SystemClustersyncSessionsyncfilterCustomserviceArgs, SystemClustersyncSessionsyncfilterCustomserviceState } from "./systemClustersyncSessionsyncfilterCustomservice";
export type SystemClustersyncSessionsyncfilterCustomservice = import("./systemClustersyncSessionsyncfilterCustomservice").SystemClustersyncSessionsyncfilterCustomservice;
export const SystemClustersyncSessionsyncfilterCustomservice: typeof import("./systemClustersyncSessionsyncfilterCustomservice").SystemClustersyncSessionsyncfilterCustomservice = null as any;
utilities.lazyLoad(exports, ["SystemClustersyncSessionsyncfilterCustomservice"], () => require("./systemClustersyncSessionsyncfilterCustomservice"));

export { SystemConsoleArgs, SystemConsoleState } from "./systemConsole";
export type SystemConsole = import("./systemConsole").SystemConsole;
export const SystemConsole: typeof import("./systemConsole").SystemConsole = null as any;
utilities.lazyLoad(exports, ["SystemConsole"], () => require("./systemConsole"));

export { SystemConsoleserverEntriesArgs, SystemConsoleserverEntriesState } from "./systemConsoleserverEntries";
export type SystemConsoleserverEntries = import("./systemConsoleserverEntries").SystemConsoleserverEntries;
export const SystemConsoleserverEntries: typeof import("./systemConsoleserverEntries").SystemConsoleserverEntries = null as any;
utilities.lazyLoad(exports, ["SystemConsoleserverEntries"], () => require("./systemConsoleserverEntries"));

export { SystemCsfArgs, SystemCsfState } from "./systemCsf";
export type SystemCsf = import("./systemCsf").SystemCsf;
export const SystemCsf: typeof import("./systemCsf").SystemCsf = null as any;
utilities.lazyLoad(exports, ["SystemCsf"], () => require("./systemCsf"));

export { SystemCsfFabricconnectorArgs, SystemCsfFabricconnectorState } from "./systemCsfFabricconnector";
export type SystemCsfFabricconnector = import("./systemCsfFabricconnector").SystemCsfFabricconnector;
export const SystemCsfFabricconnector: typeof import("./systemCsfFabricconnector").SystemCsfFabricconnector = null as any;
utilities.lazyLoad(exports, ["SystemCsfFabricconnector"], () => require("./systemCsfFabricconnector"));

export { SystemCsfFabricdeviceArgs, SystemCsfFabricdeviceState } from "./systemCsfFabricdevice";
export type SystemCsfFabricdevice = import("./systemCsfFabricdevice").SystemCsfFabricdevice;
export const SystemCsfFabricdevice: typeof import("./systemCsfFabricdevice").SystemCsfFabricdevice = null as any;
utilities.lazyLoad(exports, ["SystemCsfFabricdevice"], () => require("./systemCsfFabricdevice"));

export { SystemDdnsArgs, SystemDdnsState } from "./systemDdns";
export type SystemDdns = import("./systemDdns").SystemDdns;
export const SystemDdns: typeof import("./systemDdns").SystemDdns = null as any;
utilities.lazyLoad(exports, ["SystemDdns"], () => require("./systemDdns"));

export { SystemDedicatedmgmtArgs, SystemDedicatedmgmtState } from "./systemDedicatedmgmt";
export type SystemDedicatedmgmt = import("./systemDedicatedmgmt").SystemDedicatedmgmt;
export const SystemDedicatedmgmt: typeof import("./systemDedicatedmgmt").SystemDedicatedmgmt = null as any;
utilities.lazyLoad(exports, ["SystemDedicatedmgmt"], () => require("./systemDedicatedmgmt"));

export { SystemDeviceupgradeArgs, SystemDeviceupgradeState } from "./systemDeviceupgrade";
export type SystemDeviceupgrade = import("./systemDeviceupgrade").SystemDeviceupgrade;
export const SystemDeviceupgrade: typeof import("./systemDeviceupgrade").SystemDeviceupgrade = null as any;
utilities.lazyLoad(exports, ["SystemDeviceupgrade"], () => require("./systemDeviceupgrade"));

export { SystemDeviceupgradeKnownhamembersArgs, SystemDeviceupgradeKnownhamembersState } from "./systemDeviceupgradeKnownhamembers";
export type SystemDeviceupgradeKnownhamembers = import("./systemDeviceupgradeKnownhamembers").SystemDeviceupgradeKnownhamembers;
export const SystemDeviceupgradeKnownhamembers: typeof import("./systemDeviceupgradeKnownhamembers").SystemDeviceupgradeKnownhamembers = null as any;
utilities.lazyLoad(exports, ["SystemDeviceupgradeKnownhamembers"], () => require("./systemDeviceupgradeKnownhamembers"));

export { SystemDhcp6ServerArgs, SystemDhcp6ServerState } from "./systemDhcp6Server";
export type SystemDhcp6Server = import("./systemDhcp6Server").SystemDhcp6Server;
export const SystemDhcp6Server: typeof import("./systemDhcp6Server").SystemDhcp6Server = null as any;
utilities.lazyLoad(exports, ["SystemDhcp6Server"], () => require("./systemDhcp6Server"));

export { SystemDhcp6ServerIprangeArgs, SystemDhcp6ServerIprangeState } from "./systemDhcp6ServerIprange";
export type SystemDhcp6ServerIprange = import("./systemDhcp6ServerIprange").SystemDhcp6ServerIprange;
export const SystemDhcp6ServerIprange: typeof import("./systemDhcp6ServerIprange").SystemDhcp6ServerIprange = null as any;
utilities.lazyLoad(exports, ["SystemDhcp6ServerIprange"], () => require("./systemDhcp6ServerIprange"));

export { SystemDhcp6ServerPrefixrangeArgs, SystemDhcp6ServerPrefixrangeState } from "./systemDhcp6ServerPrefixrange";
export type SystemDhcp6ServerPrefixrange = import("./systemDhcp6ServerPrefixrange").SystemDhcp6ServerPrefixrange;
export const SystemDhcp6ServerPrefixrange: typeof import("./systemDhcp6ServerPrefixrange").SystemDhcp6ServerPrefixrange = null as any;
utilities.lazyLoad(exports, ["SystemDhcp6ServerPrefixrange"], () => require("./systemDhcp6ServerPrefixrange"));

export { SystemDnsArgs, SystemDnsState } from "./systemDns";
export type SystemDns = import("./systemDns").SystemDns;
export const SystemDns: typeof import("./systemDns").SystemDns = null as any;
utilities.lazyLoad(exports, ["SystemDns"], () => require("./systemDns"));

export { SystemDns64Args, SystemDns64State } from "./systemDns64";
export type SystemDns64 = import("./systemDns64").SystemDns64;
export const SystemDns64: typeof import("./systemDns64").SystemDns64 = null as any;
utilities.lazyLoad(exports, ["SystemDns64"], () => require("./systemDns64"));

export { SystemDnsserverArgs, SystemDnsserverState } from "./systemDnsserver";
export type SystemDnsserver = import("./systemDnsserver").SystemDnsserver;
export const SystemDnsserver: typeof import("./systemDnsserver").SystemDnsserver = null as any;
utilities.lazyLoad(exports, ["SystemDnsserver"], () => require("./systemDnsserver"));

export { SystemDscpbasedpriorityArgs, SystemDscpbasedpriorityState } from "./systemDscpbasedpriority";
export type SystemDscpbasedpriority = import("./systemDscpbasedpriority").SystemDscpbasedpriority;
export const SystemDscpbasedpriority: typeof import("./systemDscpbasedpriority").SystemDscpbasedpriority = null as any;
utilities.lazyLoad(exports, ["SystemDscpbasedpriority"], () => require("./systemDscpbasedpriority"));

export { SystemEmailserverArgs, SystemEmailserverState } from "./systemEmailserver";
export type SystemEmailserver = import("./systemEmailserver").SystemEmailserver;
export const SystemEmailserver: typeof import("./systemEmailserver").SystemEmailserver = null as any;
utilities.lazyLoad(exports, ["SystemEmailserver"], () => require("./systemEmailserver"));

export { SystemEvpnArgs, SystemEvpnState } from "./systemEvpn";
export type SystemEvpn = import("./systemEvpn").SystemEvpn;
export const SystemEvpn: typeof import("./systemEvpn").SystemEvpn = null as any;
utilities.lazyLoad(exports, ["SystemEvpn"], () => require("./systemEvpn"));

export { SystemFabricvpnArgs, SystemFabricvpnState } from "./systemFabricvpn";
export type SystemFabricvpn = import("./systemFabricvpn").SystemFabricvpn;
export const SystemFabricvpn: typeof import("./systemFabricvpn").SystemFabricvpn = null as any;
utilities.lazyLoad(exports, ["SystemFabricvpn"], () => require("./systemFabricvpn"));

export { SystemFabricvpnAdvertisedsubnetsArgs, SystemFabricvpnAdvertisedsubnetsState } from "./systemFabricvpnAdvertisedsubnets";
export type SystemFabricvpnAdvertisedsubnets = import("./systemFabricvpnAdvertisedsubnets").SystemFabricvpnAdvertisedsubnets;
export const SystemFabricvpnAdvertisedsubnets: typeof import("./systemFabricvpnAdvertisedsubnets").SystemFabricvpnAdvertisedsubnets = null as any;
utilities.lazyLoad(exports, ["SystemFabricvpnAdvertisedsubnets"], () => require("./systemFabricvpnAdvertisedsubnets"));

export { SystemFabricvpnOverlaysArgs, SystemFabricvpnOverlaysState } from "./systemFabricvpnOverlays";
export type SystemFabricvpnOverlays = import("./systemFabricvpnOverlays").SystemFabricvpnOverlays;
export const SystemFabricvpnOverlays: typeof import("./systemFabricvpnOverlays").SystemFabricvpnOverlays = null as any;
utilities.lazyLoad(exports, ["SystemFabricvpnOverlays"], () => require("./systemFabricvpnOverlays"));

export { SystemFederatedupgradeArgs, SystemFederatedupgradeState } from "./systemFederatedupgrade";
export type SystemFederatedupgrade = import("./systemFederatedupgrade").SystemFederatedupgrade;
export const SystemFederatedupgrade: typeof import("./systemFederatedupgrade").SystemFederatedupgrade = null as any;
utilities.lazyLoad(exports, ["SystemFederatedupgrade"], () => require("./systemFederatedupgrade"));

export { SystemFederatedupgradeKnownhamembersArgs, SystemFederatedupgradeKnownhamembersState } from "./systemFederatedupgradeKnownhamembers";
export type SystemFederatedupgradeKnownhamembers = import("./systemFederatedupgradeKnownhamembers").SystemFederatedupgradeKnownhamembers;
export const SystemFederatedupgradeKnownhamembers: typeof import("./systemFederatedupgradeKnownhamembers").SystemFederatedupgradeKnownhamembers = null as any;
utilities.lazyLoad(exports, ["SystemFederatedupgradeKnownhamembers"], () => require("./systemFederatedupgradeKnownhamembers"));

export { SystemFederatedupgradeNodelistArgs, SystemFederatedupgradeNodelistState } from "./systemFederatedupgradeNodelist";
export type SystemFederatedupgradeNodelist = import("./systemFederatedupgradeNodelist").SystemFederatedupgradeNodelist;
export const SystemFederatedupgradeNodelist: typeof import("./systemFederatedupgradeNodelist").SystemFederatedupgradeNodelist = null as any;
utilities.lazyLoad(exports, ["SystemFederatedupgradeNodelist"], () => require("./systemFederatedupgradeNodelist"));

export { SystemFipsccArgs, SystemFipsccState } from "./systemFipscc";
export type SystemFipscc = import("./systemFipscc").SystemFipscc;
export const SystemFipscc: typeof import("./systemFipscc").SystemFipscc = null as any;
utilities.lazyLoad(exports, ["SystemFipscc"], () => require("./systemFipscc"));

export { SystemFortindrArgs, SystemFortindrState } from "./systemFortindr";
export type SystemFortindr = import("./systemFortindr").SystemFortindr;
export const SystemFortindr: typeof import("./systemFortindr").SystemFortindr = null as any;
utilities.lazyLoad(exports, ["SystemFortindr"], () => require("./systemFortindr"));

export { SystemFortisandboxArgs, SystemFortisandboxState } from "./systemFortisandbox";
export type SystemFortisandbox = import("./systemFortisandbox").SystemFortisandbox;
export const SystemFortisandbox: typeof import("./systemFortisandbox").SystemFortisandbox = null as any;
utilities.lazyLoad(exports, ["SystemFortisandbox"], () => require("./systemFortisandbox"));

export { SystemFssopollingArgs, SystemFssopollingState } from "./systemFssopolling";
export type SystemFssopolling = import("./systemFssopolling").SystemFssopolling;
export const SystemFssopolling: typeof import("./systemFssopolling").SystemFssopolling = null as any;
utilities.lazyLoad(exports, ["SystemFssopolling"], () => require("./systemFssopolling"));

export { SystemFtmpushArgs, SystemFtmpushState } from "./systemFtmpush";
export type SystemFtmpush = import("./systemFtmpush").SystemFtmpush;
export const SystemFtmpush: typeof import("./systemFtmpush").SystemFtmpush = null as any;
utilities.lazyLoad(exports, ["SystemFtmpush"], () => require("./systemFtmpush"));

export { SystemGeneveArgs, SystemGeneveState } from "./systemGeneve";
export type SystemGeneve = import("./systemGeneve").SystemGeneve;
export const SystemGeneve: typeof import("./systemGeneve").SystemGeneve = null as any;
utilities.lazyLoad(exports, ["SystemGeneve"], () => require("./systemGeneve"));

export { SystemGlobalArgs, SystemGlobalState } from "./systemGlobal";
export type SystemGlobal = import("./systemGlobal").SystemGlobal;
export const SystemGlobal: typeof import("./systemGlobal").SystemGlobal = null as any;
utilities.lazyLoad(exports, ["SystemGlobal"], () => require("./systemGlobal"));

export { SystemGretunnelArgs, SystemGretunnelState } from "./systemGretunnel";
export type SystemGretunnel = import("./systemGretunnel").SystemGretunnel;
export const SystemGretunnel: typeof import("./systemGretunnel").SystemGretunnel = null as any;
utilities.lazyLoad(exports, ["SystemGretunnel"], () => require("./systemGretunnel"));

export { SystemHaArgs, SystemHaState } from "./systemHa";
export type SystemHa = import("./systemHa").SystemHa;
export const SystemHa: typeof import("./systemHa").SystemHa = null as any;
utilities.lazyLoad(exports, ["SystemHa"], () => require("./systemHa"));

export { SystemHaHamgmtinterfacesArgs, SystemHaHamgmtinterfacesState } from "./systemHaHamgmtinterfaces";
export type SystemHaHamgmtinterfaces = import("./systemHaHamgmtinterfaces").SystemHaHamgmtinterfaces;
export const SystemHaHamgmtinterfaces: typeof import("./systemHaHamgmtinterfaces").SystemHaHamgmtinterfaces = null as any;
utilities.lazyLoad(exports, ["SystemHaHamgmtinterfaces"], () => require("./systemHaHamgmtinterfaces"));

export { SystemHaUnicastpeersArgs, SystemHaUnicastpeersState } from "./systemHaUnicastpeers";
export type SystemHaUnicastpeers = import("./systemHaUnicastpeers").SystemHaUnicastpeers;
export const SystemHaUnicastpeers: typeof import("./systemHaUnicastpeers").SystemHaUnicastpeers = null as any;
utilities.lazyLoad(exports, ["SystemHaUnicastpeers"], () => require("./systemHaUnicastpeers"));

export { SystemHaVclusterArgs, SystemHaVclusterState } from "./systemHaVcluster";
export type SystemHaVcluster = import("./systemHaVcluster").SystemHaVcluster;
export const SystemHaVcluster: typeof import("./systemHaVcluster").SystemHaVcluster = null as any;
utilities.lazyLoad(exports, ["SystemHaVcluster"], () => require("./systemHaVcluster"));

export { SystemHamonitorArgs, SystemHamonitorState } from "./systemHamonitor";
export type SystemHamonitor = import("./systemHamonitor").SystemHamonitor;
export const SystemHamonitor: typeof import("./systemHamonitor").SystemHamonitor = null as any;
utilities.lazyLoad(exports, ["SystemHamonitor"], () => require("./systemHamonitor"));

export { SystemIkeArgs, SystemIkeState } from "./systemIke";
export type SystemIke = import("./systemIke").SystemIke;
export const SystemIke: typeof import("./systemIke").SystemIke = null as any;
utilities.lazyLoad(exports, ["SystemIke"], () => require("./systemIke"));

export { SystemIkeDhgroup1Args, SystemIkeDhgroup1State } from "./systemIkeDhgroup1";
export type SystemIkeDhgroup1 = import("./systemIkeDhgroup1").SystemIkeDhgroup1;
export const SystemIkeDhgroup1: typeof import("./systemIkeDhgroup1").SystemIkeDhgroup1 = null as any;
utilities.lazyLoad(exports, ["SystemIkeDhgroup1"], () => require("./systemIkeDhgroup1"));

export { SystemIkeDhgroup14Args, SystemIkeDhgroup14State } from "./systemIkeDhgroup14";
export type SystemIkeDhgroup14 = import("./systemIkeDhgroup14").SystemIkeDhgroup14;
export const SystemIkeDhgroup14: typeof import("./systemIkeDhgroup14").SystemIkeDhgroup14 = null as any;
utilities.lazyLoad(exports, ["SystemIkeDhgroup14"], () => require("./systemIkeDhgroup14"));

export { SystemIkeDhgroup15Args, SystemIkeDhgroup15State } from "./systemIkeDhgroup15";
export type SystemIkeDhgroup15 = import("./systemIkeDhgroup15").SystemIkeDhgroup15;
export const SystemIkeDhgroup15: typeof import("./systemIkeDhgroup15").SystemIkeDhgroup15 = null as any;
utilities.lazyLoad(exports, ["SystemIkeDhgroup15"], () => require("./systemIkeDhgroup15"));

export { SystemIkeDhgroup16Args, SystemIkeDhgroup16State } from "./systemIkeDhgroup16";
export type SystemIkeDhgroup16 = import("./systemIkeDhgroup16").SystemIkeDhgroup16;
export const SystemIkeDhgroup16: typeof import("./systemIkeDhgroup16").SystemIkeDhgroup16 = null as any;
utilities.lazyLoad(exports, ["SystemIkeDhgroup16"], () => require("./systemIkeDhgroup16"));

export { SystemIkeDhgroup17Args, SystemIkeDhgroup17State } from "./systemIkeDhgroup17";
export type SystemIkeDhgroup17 = import("./systemIkeDhgroup17").SystemIkeDhgroup17;
export const SystemIkeDhgroup17: typeof import("./systemIkeDhgroup17").SystemIkeDhgroup17 = null as any;
utilities.lazyLoad(exports, ["SystemIkeDhgroup17"], () => require("./systemIkeDhgroup17"));

export { SystemIkeDhgroup18Args, SystemIkeDhgroup18State } from "./systemIkeDhgroup18";
export type SystemIkeDhgroup18 = import("./systemIkeDhgroup18").SystemIkeDhgroup18;
export const SystemIkeDhgroup18: typeof import("./systemIkeDhgroup18").SystemIkeDhgroup18 = null as any;
utilities.lazyLoad(exports, ["SystemIkeDhgroup18"], () => require("./systemIkeDhgroup18"));

export { SystemIkeDhgroup19Args, SystemIkeDhgroup19State } from "./systemIkeDhgroup19";
export type SystemIkeDhgroup19 = import("./systemIkeDhgroup19").SystemIkeDhgroup19;
export const SystemIkeDhgroup19: typeof import("./systemIkeDhgroup19").SystemIkeDhgroup19 = null as any;
utilities.lazyLoad(exports, ["SystemIkeDhgroup19"], () => require("./systemIkeDhgroup19"));

export { SystemIkeDhgroup2Args, SystemIkeDhgroup2State } from "./systemIkeDhgroup2";
export type SystemIkeDhgroup2 = import("./systemIkeDhgroup2").SystemIkeDhgroup2;
export const SystemIkeDhgroup2: typeof import("./systemIkeDhgroup2").SystemIkeDhgroup2 = null as any;
utilities.lazyLoad(exports, ["SystemIkeDhgroup2"], () => require("./systemIkeDhgroup2"));

export { SystemIkeDhgroup20Args, SystemIkeDhgroup20State } from "./systemIkeDhgroup20";
export type SystemIkeDhgroup20 = import("./systemIkeDhgroup20").SystemIkeDhgroup20;
export const SystemIkeDhgroup20: typeof import("./systemIkeDhgroup20").SystemIkeDhgroup20 = null as any;
utilities.lazyLoad(exports, ["SystemIkeDhgroup20"], () => require("./systemIkeDhgroup20"));

export { SystemIkeDhgroup21Args, SystemIkeDhgroup21State } from "./systemIkeDhgroup21";
export type SystemIkeDhgroup21 = import("./systemIkeDhgroup21").SystemIkeDhgroup21;
export const SystemIkeDhgroup21: typeof import("./systemIkeDhgroup21").SystemIkeDhgroup21 = null as any;
utilities.lazyLoad(exports, ["SystemIkeDhgroup21"], () => require("./systemIkeDhgroup21"));

export { SystemIkeDhgroup27Args, SystemIkeDhgroup27State } from "./systemIkeDhgroup27";
export type SystemIkeDhgroup27 = import("./systemIkeDhgroup27").SystemIkeDhgroup27;
export const SystemIkeDhgroup27: typeof import("./systemIkeDhgroup27").SystemIkeDhgroup27 = null as any;
utilities.lazyLoad(exports, ["SystemIkeDhgroup27"], () => require("./systemIkeDhgroup27"));

export { SystemIkeDhgroup28Args, SystemIkeDhgroup28State } from "./systemIkeDhgroup28";
export type SystemIkeDhgroup28 = import("./systemIkeDhgroup28").SystemIkeDhgroup28;
export const SystemIkeDhgroup28: typeof import("./systemIkeDhgroup28").SystemIkeDhgroup28 = null as any;
utilities.lazyLoad(exports, ["SystemIkeDhgroup28"], () => require("./systemIkeDhgroup28"));

export { SystemIkeDhgroup29Args, SystemIkeDhgroup29State } from "./systemIkeDhgroup29";
export type SystemIkeDhgroup29 = import("./systemIkeDhgroup29").SystemIkeDhgroup29;
export const SystemIkeDhgroup29: typeof import("./systemIkeDhgroup29").SystemIkeDhgroup29 = null as any;
utilities.lazyLoad(exports, ["SystemIkeDhgroup29"], () => require("./systemIkeDhgroup29"));

export { SystemIkeDhgroup30Args, SystemIkeDhgroup30State } from "./systemIkeDhgroup30";
export type SystemIkeDhgroup30 = import("./systemIkeDhgroup30").SystemIkeDhgroup30;
export const SystemIkeDhgroup30: typeof import("./systemIkeDhgroup30").SystemIkeDhgroup30 = null as any;
utilities.lazyLoad(exports, ["SystemIkeDhgroup30"], () => require("./systemIkeDhgroup30"));

export { SystemIkeDhgroup31Args, SystemIkeDhgroup31State } from "./systemIkeDhgroup31";
export type SystemIkeDhgroup31 = import("./systemIkeDhgroup31").SystemIkeDhgroup31;
export const SystemIkeDhgroup31: typeof import("./systemIkeDhgroup31").SystemIkeDhgroup31 = null as any;
utilities.lazyLoad(exports, ["SystemIkeDhgroup31"], () => require("./systemIkeDhgroup31"));

export { SystemIkeDhgroup32Args, SystemIkeDhgroup32State } from "./systemIkeDhgroup32";
export type SystemIkeDhgroup32 = import("./systemIkeDhgroup32").SystemIkeDhgroup32;
export const SystemIkeDhgroup32: typeof import("./systemIkeDhgroup32").SystemIkeDhgroup32 = null as any;
utilities.lazyLoad(exports, ["SystemIkeDhgroup32"], () => require("./systemIkeDhgroup32"));

export { SystemIkeDhgroup5Args, SystemIkeDhgroup5State } from "./systemIkeDhgroup5";
export type SystemIkeDhgroup5 = import("./systemIkeDhgroup5").SystemIkeDhgroup5;
export const SystemIkeDhgroup5: typeof import("./systemIkeDhgroup5").SystemIkeDhgroup5 = null as any;
utilities.lazyLoad(exports, ["SystemIkeDhgroup5"], () => require("./systemIkeDhgroup5"));

export { SystemInterfaceArgs, SystemInterfaceState } from "./systemInterface";
export type SystemInterface = import("./systemInterface").SystemInterface;
export const SystemInterface: typeof import("./systemInterface").SystemInterface = null as any;
utilities.lazyLoad(exports, ["SystemInterface"], () => require("./systemInterface"));

export { SystemInterfaceClientoptionsArgs, SystemInterfaceClientoptionsState } from "./systemInterfaceClientoptions";
export type SystemInterfaceClientoptions = import("./systemInterfaceClientoptions").SystemInterfaceClientoptions;
export const SystemInterfaceClientoptions: typeof import("./systemInterfaceClientoptions").SystemInterfaceClientoptions = null as any;
utilities.lazyLoad(exports, ["SystemInterfaceClientoptions"], () => require("./systemInterfaceClientoptions"));

export { SystemInterfaceDhcpsnoopingserverlistArgs, SystemInterfaceDhcpsnoopingserverlistState } from "./systemInterfaceDhcpsnoopingserverlist";
export type SystemInterfaceDhcpsnoopingserverlist = import("./systemInterfaceDhcpsnoopingserverlist").SystemInterfaceDhcpsnoopingserverlist;
export const SystemInterfaceDhcpsnoopingserverlist: typeof import("./systemInterfaceDhcpsnoopingserverlist").SystemInterfaceDhcpsnoopingserverlist = null as any;
utilities.lazyLoad(exports, ["SystemInterfaceDhcpsnoopingserverlist"], () => require("./systemInterfaceDhcpsnoopingserverlist"));

export { SystemInterfaceIpv6Args, SystemInterfaceIpv6State } from "./systemInterfaceIpv6";
export type SystemInterfaceIpv6 = import("./systemInterfaceIpv6").SystemInterfaceIpv6;
export const SystemInterfaceIpv6: typeof import("./systemInterfaceIpv6").SystemInterfaceIpv6 = null as any;
utilities.lazyLoad(exports, ["SystemInterfaceIpv6"], () => require("./systemInterfaceIpv6"));

export { SystemInterfaceIpv6Dhcp6iapdlistArgs, SystemInterfaceIpv6Dhcp6iapdlistState } from "./systemInterfaceIpv6Dhcp6iapdlist";
export type SystemInterfaceIpv6Dhcp6iapdlist = import("./systemInterfaceIpv6Dhcp6iapdlist").SystemInterfaceIpv6Dhcp6iapdlist;
export const SystemInterfaceIpv6Dhcp6iapdlist: typeof import("./systemInterfaceIpv6Dhcp6iapdlist").SystemInterfaceIpv6Dhcp6iapdlist = null as any;
utilities.lazyLoad(exports, ["SystemInterfaceIpv6Dhcp6iapdlist"], () => require("./systemInterfaceIpv6Dhcp6iapdlist"));

export { SystemInterfaceIpv6Vrrp6Args, SystemInterfaceIpv6Vrrp6State } from "./systemInterfaceIpv6Vrrp6";
export type SystemInterfaceIpv6Vrrp6 = import("./systemInterfaceIpv6Vrrp6").SystemInterfaceIpv6Vrrp6;
export const SystemInterfaceIpv6Vrrp6: typeof import("./systemInterfaceIpv6Vrrp6").SystemInterfaceIpv6Vrrp6 = null as any;
utilities.lazyLoad(exports, ["SystemInterfaceIpv6Vrrp6"], () => require("./systemInterfaceIpv6Vrrp6"));

export { SystemInterfaceTaggingArgs, SystemInterfaceTaggingState } from "./systemInterfaceTagging";
export type SystemInterfaceTagging = import("./systemInterfaceTagging").SystemInterfaceTagging;
export const SystemInterfaceTagging: typeof import("./systemInterfaceTagging").SystemInterfaceTagging = null as any;
utilities.lazyLoad(exports, ["SystemInterfaceTagging"], () => require("./systemInterfaceTagging"));

export { SystemInterfaceVrrpArgs, SystemInterfaceVrrpState } from "./systemInterfaceVrrp";
export type SystemInterfaceVrrp = import("./systemInterfaceVrrp").SystemInterfaceVrrp;
export const SystemInterfaceVrrp: typeof import("./systemInterfaceVrrp").SystemInterfaceVrrp = null as any;
utilities.lazyLoad(exports, ["SystemInterfaceVrrp"], () => require("./systemInterfaceVrrp"));

export { SystemInterfaceVrrpProxyarpArgs, SystemInterfaceVrrpProxyarpState } from "./systemInterfaceVrrpProxyarp";
export type SystemInterfaceVrrpProxyarp = import("./systemInterfaceVrrpProxyarp").SystemInterfaceVrrpProxyarp;
export const SystemInterfaceVrrpProxyarp: typeof import("./systemInterfaceVrrpProxyarp").SystemInterfaceVrrpProxyarp = null as any;
utilities.lazyLoad(exports, ["SystemInterfaceVrrpProxyarp"], () => require("./systemInterfaceVrrpProxyarp"));

export { SystemIpamArgs, SystemIpamState } from "./systemIpam";
export type SystemIpam = import("./systemIpam").SystemIpam;
export const SystemIpam: typeof import("./systemIpam").SystemIpam = null as any;
utilities.lazyLoad(exports, ["SystemIpam"], () => require("./systemIpam"));

export { SystemIpamPoolsArgs, SystemIpamPoolsState } from "./systemIpamPools";
export type SystemIpamPools = import("./systemIpamPools").SystemIpamPools;
export const SystemIpamPools: typeof import("./systemIpamPools").SystemIpamPools = null as any;
utilities.lazyLoad(exports, ["SystemIpamPools"], () => require("./systemIpamPools"));

export { SystemIpamPoolsExcludeArgs, SystemIpamPoolsExcludeState } from "./systemIpamPoolsExclude";
export type SystemIpamPoolsExclude = import("./systemIpamPoolsExclude").SystemIpamPoolsExclude;
export const SystemIpamPoolsExclude: typeof import("./systemIpamPoolsExclude").SystemIpamPoolsExclude = null as any;
utilities.lazyLoad(exports, ["SystemIpamPoolsExclude"], () => require("./systemIpamPoolsExclude"));

export { SystemIpamRulesArgs, SystemIpamRulesState } from "./systemIpamRules";
export type SystemIpamRules = import("./systemIpamRules").SystemIpamRules;
export const SystemIpamRules: typeof import("./systemIpamRules").SystemIpamRules = null as any;
utilities.lazyLoad(exports, ["SystemIpamRules"], () => require("./systemIpamRules"));

export { SystemIpamRulesMoveArgs, SystemIpamRulesMoveState } from "./systemIpamRulesMove";
export type SystemIpamRulesMove = import("./systemIpamRulesMove").SystemIpamRulesMove;
export const SystemIpamRulesMove: typeof import("./systemIpamRulesMove").SystemIpamRulesMove = null as any;
utilities.lazyLoad(exports, ["SystemIpamRulesMove"], () => require("./systemIpamRulesMove"));

export { SystemIpiptunnelArgs, SystemIpiptunnelState } from "./systemIpiptunnel";
export type SystemIpiptunnel = import("./systemIpiptunnel").SystemIpiptunnel;
export const SystemIpiptunnel: typeof import("./systemIpiptunnel").SystemIpiptunnel = null as any;
utilities.lazyLoad(exports, ["SystemIpiptunnel"], () => require("./systemIpiptunnel"));

export { SystemIpsArgs, SystemIpsState } from "./systemIps";
export type SystemIps = import("./systemIps").SystemIps;
export const SystemIps: typeof import("./systemIps").SystemIps = null as any;
utilities.lazyLoad(exports, ["SystemIps"], () => require("./systemIps"));

export { SystemIpsecaggregateArgs, SystemIpsecaggregateState } from "./systemIpsecaggregate";
export type SystemIpsecaggregate = import("./systemIpsecaggregate").SystemIpsecaggregate;
export const SystemIpsecaggregate: typeof import("./systemIpsecaggregate").SystemIpsecaggregate = null as any;
utilities.lazyLoad(exports, ["SystemIpsecaggregate"], () => require("./systemIpsecaggregate"));

export { SystemIpsurlfilterdnsArgs, SystemIpsurlfilterdnsState } from "./systemIpsurlfilterdns";
export type SystemIpsurlfilterdns = import("./systemIpsurlfilterdns").SystemIpsurlfilterdns;
export const SystemIpsurlfilterdns: typeof import("./systemIpsurlfilterdns").SystemIpsurlfilterdns = null as any;
utilities.lazyLoad(exports, ["SystemIpsurlfilterdns"], () => require("./systemIpsurlfilterdns"));

export { SystemIpsurlfilterdns6Args, SystemIpsurlfilterdns6State } from "./systemIpsurlfilterdns6";
export type SystemIpsurlfilterdns6 = import("./systemIpsurlfilterdns6").SystemIpsurlfilterdns6;
export const SystemIpsurlfilterdns6: typeof import("./systemIpsurlfilterdns6").SystemIpsurlfilterdns6 = null as any;
utilities.lazyLoad(exports, ["SystemIpsurlfilterdns6"], () => require("./systemIpsurlfilterdns6"));

export { SystemIpv6neighborcacheArgs, SystemIpv6neighborcacheState } from "./systemIpv6neighborcache";
export type SystemIpv6neighborcache = import("./systemIpv6neighborcache").SystemIpv6neighborcache;
export const SystemIpv6neighborcache: typeof import("./systemIpv6neighborcache").SystemIpv6neighborcache = null as any;
utilities.lazyLoad(exports, ["SystemIpv6neighborcache"], () => require("./systemIpv6neighborcache"));

export { SystemIpv6tunnelArgs, SystemIpv6tunnelState } from "./systemIpv6tunnel";
export type SystemIpv6tunnel = import("./systemIpv6tunnel").SystemIpv6tunnel;
export const SystemIpv6tunnel: typeof import("./systemIpv6tunnel").SystemIpv6tunnel = null as any;
utilities.lazyLoad(exports, ["SystemIpv6tunnel"], () => require("./systemIpv6tunnel"));

export { SystemLinkmonitorArgs, SystemLinkmonitorState } from "./systemLinkmonitor";
export type SystemLinkmonitor = import("./systemLinkmonitor").SystemLinkmonitor;
export const SystemLinkmonitor: typeof import("./systemLinkmonitor").SystemLinkmonitor = null as any;
utilities.lazyLoad(exports, ["SystemLinkmonitor"], () => require("./systemLinkmonitor"));

export { SystemLinkmonitorServerlistArgs, SystemLinkmonitorServerlistState } from "./systemLinkmonitorServerlist";
export type SystemLinkmonitorServerlist = import("./systemLinkmonitorServerlist").SystemLinkmonitorServerlist;
export const SystemLinkmonitorServerlist: typeof import("./systemLinkmonitorServerlist").SystemLinkmonitorServerlist = null as any;
utilities.lazyLoad(exports, ["SystemLinkmonitorServerlist"], () => require("./systemLinkmonitorServerlist"));

export { SystemLldpNetworkpolicyArgs, SystemLldpNetworkpolicyState } from "./systemLldpNetworkpolicy";
export type SystemLldpNetworkpolicy = import("./systemLldpNetworkpolicy").SystemLldpNetworkpolicy;
export const SystemLldpNetworkpolicy: typeof import("./systemLldpNetworkpolicy").SystemLldpNetworkpolicy = null as any;
utilities.lazyLoad(exports, ["SystemLldpNetworkpolicy"], () => require("./systemLldpNetworkpolicy"));

export { SystemLldpNetworkpolicyGuestArgs, SystemLldpNetworkpolicyGuestState } from "./systemLldpNetworkpolicyGuest";
export type SystemLldpNetworkpolicyGuest = import("./systemLldpNetworkpolicyGuest").SystemLldpNetworkpolicyGuest;
export const SystemLldpNetworkpolicyGuest: typeof import("./systemLldpNetworkpolicyGuest").SystemLldpNetworkpolicyGuest = null as any;
utilities.lazyLoad(exports, ["SystemLldpNetworkpolicyGuest"], () => require("./systemLldpNetworkpolicyGuest"));

export { SystemLldpNetworkpolicyGuestvoicesignalingArgs, SystemLldpNetworkpolicyGuestvoicesignalingState } from "./systemLldpNetworkpolicyGuestvoicesignaling";
export type SystemLldpNetworkpolicyGuestvoicesignaling = import("./systemLldpNetworkpolicyGuestvoicesignaling").SystemLldpNetworkpolicyGuestvoicesignaling;
export const SystemLldpNetworkpolicyGuestvoicesignaling: typeof import("./systemLldpNetworkpolicyGuestvoicesignaling").SystemLldpNetworkpolicyGuestvoicesignaling = null as any;
utilities.lazyLoad(exports, ["SystemLldpNetworkpolicyGuestvoicesignaling"], () => require("./systemLldpNetworkpolicyGuestvoicesignaling"));

export { SystemLldpNetworkpolicySoftphoneArgs, SystemLldpNetworkpolicySoftphoneState } from "./systemLldpNetworkpolicySoftphone";
export type SystemLldpNetworkpolicySoftphone = import("./systemLldpNetworkpolicySoftphone").SystemLldpNetworkpolicySoftphone;
export const SystemLldpNetworkpolicySoftphone: typeof import("./systemLldpNetworkpolicySoftphone").SystemLldpNetworkpolicySoftphone = null as any;
utilities.lazyLoad(exports, ["SystemLldpNetworkpolicySoftphone"], () => require("./systemLldpNetworkpolicySoftphone"));

export { SystemLldpNetworkpolicyStreamingvideoArgs, SystemLldpNetworkpolicyStreamingvideoState } from "./systemLldpNetworkpolicyStreamingvideo";
export type SystemLldpNetworkpolicyStreamingvideo = import("./systemLldpNetworkpolicyStreamingvideo").SystemLldpNetworkpolicyStreamingvideo;
export const SystemLldpNetworkpolicyStreamingvideo: typeof import("./systemLldpNetworkpolicyStreamingvideo").SystemLldpNetworkpolicyStreamingvideo = null as any;
utilities.lazyLoad(exports, ["SystemLldpNetworkpolicyStreamingvideo"], () => require("./systemLldpNetworkpolicyStreamingvideo"));

export { SystemLldpNetworkpolicyVideoconferencingArgs, SystemLldpNetworkpolicyVideoconferencingState } from "./systemLldpNetworkpolicyVideoconferencing";
export type SystemLldpNetworkpolicyVideoconferencing = import("./systemLldpNetworkpolicyVideoconferencing").SystemLldpNetworkpolicyVideoconferencing;
export const SystemLldpNetworkpolicyVideoconferencing: typeof import("./systemLldpNetworkpolicyVideoconferencing").SystemLldpNetworkpolicyVideoconferencing = null as any;
utilities.lazyLoad(exports, ["SystemLldpNetworkpolicyVideoconferencing"], () => require("./systemLldpNetworkpolicyVideoconferencing"));

export { SystemLldpNetworkpolicyVideosignalingArgs, SystemLldpNetworkpolicyVideosignalingState } from "./systemLldpNetworkpolicyVideosignaling";
export type SystemLldpNetworkpolicyVideosignaling = import("./systemLldpNetworkpolicyVideosignaling").SystemLldpNetworkpolicyVideosignaling;
export const SystemLldpNetworkpolicyVideosignaling: typeof import("./systemLldpNetworkpolicyVideosignaling").SystemLldpNetworkpolicyVideosignaling = null as any;
utilities.lazyLoad(exports, ["SystemLldpNetworkpolicyVideosignaling"], () => require("./systemLldpNetworkpolicyVideosignaling"));

export { SystemLldpNetworkpolicyVoiceArgs, SystemLldpNetworkpolicyVoiceState } from "./systemLldpNetworkpolicyVoice";
export type SystemLldpNetworkpolicyVoice = import("./systemLldpNetworkpolicyVoice").SystemLldpNetworkpolicyVoice;
export const SystemLldpNetworkpolicyVoice: typeof import("./systemLldpNetworkpolicyVoice").SystemLldpNetworkpolicyVoice = null as any;
utilities.lazyLoad(exports, ["SystemLldpNetworkpolicyVoice"], () => require("./systemLldpNetworkpolicyVoice"));

export { SystemLldpNetworkpolicyVoicesignalingArgs, SystemLldpNetworkpolicyVoicesignalingState } from "./systemLldpNetworkpolicyVoicesignaling";
export type SystemLldpNetworkpolicyVoicesignaling = import("./systemLldpNetworkpolicyVoicesignaling").SystemLldpNetworkpolicyVoicesignaling;
export const SystemLldpNetworkpolicyVoicesignaling: typeof import("./systemLldpNetworkpolicyVoicesignaling").SystemLldpNetworkpolicyVoicesignaling = null as any;
utilities.lazyLoad(exports, ["SystemLldpNetworkpolicyVoicesignaling"], () => require("./systemLldpNetworkpolicyVoicesignaling"));

export { SystemMobiletunnelArgs, SystemMobiletunnelState } from "./systemMobiletunnel";
export type SystemMobiletunnel = import("./systemMobiletunnel").SystemMobiletunnel;
export const SystemMobiletunnel: typeof import("./systemMobiletunnel").SystemMobiletunnel = null as any;
utilities.lazyLoad(exports, ["SystemMobiletunnel"], () => require("./systemMobiletunnel"));

export { SystemMobiletunnelNetworkArgs, SystemMobiletunnelNetworkState } from "./systemMobiletunnelNetwork";
export type SystemMobiletunnelNetwork = import("./systemMobiletunnelNetwork").SystemMobiletunnelNetwork;
export const SystemMobiletunnelNetwork: typeof import("./systemMobiletunnelNetwork").SystemMobiletunnelNetwork = null as any;
utilities.lazyLoad(exports, ["SystemMobiletunnelNetwork"], () => require("./systemMobiletunnelNetwork"));

export { SystemNat64SecondaryprefixArgs, SystemNat64SecondaryprefixState } from "./systemNat64Secondaryprefix";
export type SystemNat64Secondaryprefix = import("./systemNat64Secondaryprefix").SystemNat64Secondaryprefix;
export const SystemNat64Secondaryprefix: typeof import("./systemNat64Secondaryprefix").SystemNat64Secondaryprefix = null as any;
utilities.lazyLoad(exports, ["SystemNat64Secondaryprefix"], () => require("./systemNat64Secondaryprefix"));

export { SystemNdproxyArgs, SystemNdproxyState } from "./systemNdproxy";
export type SystemNdproxy = import("./systemNdproxy").SystemNdproxy;
export const SystemNdproxy: typeof import("./systemNdproxy").SystemNdproxy = null as any;
utilities.lazyLoad(exports, ["SystemNdproxy"], () => require("./systemNdproxy"));

export { SystemNetflowArgs, SystemNetflowState } from "./systemNetflow";
export type SystemNetflow = import("./systemNetflow").SystemNetflow;
export const SystemNetflow: typeof import("./systemNetflow").SystemNetflow = null as any;
utilities.lazyLoad(exports, ["SystemNetflow"], () => require("./systemNetflow"));

export { SystemNetflowCollectorsArgs, SystemNetflowCollectorsState } from "./systemNetflowCollectors";
export type SystemNetflowCollectors = import("./systemNetflowCollectors").SystemNetflowCollectors;
export const SystemNetflowCollectors: typeof import("./systemNetflowCollectors").SystemNetflowCollectors = null as any;
utilities.lazyLoad(exports, ["SystemNetflowCollectors"], () => require("./systemNetflowCollectors"));

export { SystemNetworkvisibilityArgs, SystemNetworkvisibilityState } from "./systemNetworkvisibility";
export type SystemNetworkvisibility = import("./systemNetworkvisibility").SystemNetworkvisibility;
export const SystemNetworkvisibility: typeof import("./systemNetworkvisibility").SystemNetworkvisibility = null as any;
utilities.lazyLoad(exports, ["SystemNetworkvisibility"], () => require("./systemNetworkvisibility"));

export { SystemNtpArgs, SystemNtpState } from "./systemNtp";
export type SystemNtp = import("./systemNtp").SystemNtp;
export const SystemNtp: typeof import("./systemNtp").SystemNtp = null as any;
utilities.lazyLoad(exports, ["SystemNtp"], () => require("./systemNtp"));

export { SystemNtpNtpserverArgs, SystemNtpNtpserverState } from "./systemNtpNtpserver";
export type SystemNtpNtpserver = import("./systemNtpNtpserver").SystemNtpNtpserver;
export const SystemNtpNtpserver: typeof import("./systemNtpNtpserver").SystemNtpNtpserver = null as any;
utilities.lazyLoad(exports, ["SystemNtpNtpserver"], () => require("./systemNtpNtpserver"));

export { SystemPasswordpolicyArgs, SystemPasswordpolicyState } from "./systemPasswordpolicy";
export type SystemPasswordpolicy = import("./systemPasswordpolicy").SystemPasswordpolicy;
export const SystemPasswordpolicy: typeof import("./systemPasswordpolicy").SystemPasswordpolicy = null as any;
utilities.lazyLoad(exports, ["SystemPasswordpolicy"], () => require("./systemPasswordpolicy"));

export { SystemPasswordpolicyguestadminArgs, SystemPasswordpolicyguestadminState } from "./systemPasswordpolicyguestadmin";
export type SystemPasswordpolicyguestadmin = import("./systemPasswordpolicyguestadmin").SystemPasswordpolicyguestadmin;
export const SystemPasswordpolicyguestadmin: typeof import("./systemPasswordpolicyguestadmin").SystemPasswordpolicyguestadmin = null as any;
utilities.lazyLoad(exports, ["SystemPasswordpolicyguestadmin"], () => require("./systemPasswordpolicyguestadmin"));

export { SystemPcpserverArgs, SystemPcpserverState } from "./systemPcpserver";
export type SystemPcpserver = import("./systemPcpserver").SystemPcpserver;
export const SystemPcpserver: typeof import("./systemPcpserver").SystemPcpserver = null as any;
utilities.lazyLoad(exports, ["SystemPcpserver"], () => require("./systemPcpserver"));

export { SystemPcpserverPoolsArgs, SystemPcpserverPoolsState } from "./systemPcpserverPools";
export type SystemPcpserverPools = import("./systemPcpserverPools").SystemPcpserverPools;
export const SystemPcpserverPools: typeof import("./systemPcpserverPools").SystemPcpserverPools = null as any;
utilities.lazyLoad(exports, ["SystemPcpserverPools"], () => require("./systemPcpserverPools"));

export { SystemPppoeinterfaceArgs, SystemPppoeinterfaceState } from "./systemPppoeinterface";
export type SystemPppoeinterface = import("./systemPppoeinterface").SystemPppoeinterface;
export const SystemPppoeinterface: typeof import("./systemPppoeinterface").SystemPppoeinterface = null as any;
utilities.lazyLoad(exports, ["SystemPppoeinterface"], () => require("./systemPppoeinterface"));

export { SystemProberesponseArgs, SystemProberesponseState } from "./systemProberesponse";
export type SystemProberesponse = import("./systemProberesponse").SystemProberesponse;
export const SystemProberesponse: typeof import("./systemProberesponse").SystemProberesponse = null as any;
utilities.lazyLoad(exports, ["SystemProberesponse"], () => require("./systemProberesponse"));

export { SystemProxyarpArgs, SystemProxyarpState } from "./systemProxyarp";
export type SystemProxyarp = import("./systemProxyarp").SystemProxyarp;
export const SystemProxyarp: typeof import("./systemProxyarp").SystemProxyarp = null as any;
utilities.lazyLoad(exports, ["SystemProxyarp"], () => require("./systemProxyarp"));

export { SystemPtpArgs, SystemPtpState } from "./systemPtp";
export type SystemPtp = import("./systemPtp").SystemPtp;
export const SystemPtp: typeof import("./systemPtp").SystemPtp = null as any;
utilities.lazyLoad(exports, ["SystemPtp"], () => require("./systemPtp"));

export { SystemPtpServerinterfaceArgs, SystemPtpServerinterfaceState } from "./systemPtpServerinterface";
export type SystemPtpServerinterface = import("./systemPtpServerinterface").SystemPtpServerinterface;
export const SystemPtpServerinterface: typeof import("./systemPtpServerinterface").SystemPtpServerinterface = null as any;
utilities.lazyLoad(exports, ["SystemPtpServerinterface"], () => require("./systemPtpServerinterface"));

export { SystemReplacemsgAdminArgs, SystemReplacemsgAdminState } from "./systemReplacemsgAdmin";
export type SystemReplacemsgAdmin = import("./systemReplacemsgAdmin").SystemReplacemsgAdmin;
export const SystemReplacemsgAdmin: typeof import("./systemReplacemsgAdmin").SystemReplacemsgAdmin = null as any;
utilities.lazyLoad(exports, ["SystemReplacemsgAdmin"], () => require("./systemReplacemsgAdmin"));

export { SystemReplacemsgAlertmailArgs, SystemReplacemsgAlertmailState } from "./systemReplacemsgAlertmail";
export type SystemReplacemsgAlertmail = import("./systemReplacemsgAlertmail").SystemReplacemsgAlertmail;
export const SystemReplacemsgAlertmail: typeof import("./systemReplacemsgAlertmail").SystemReplacemsgAlertmail = null as any;
utilities.lazyLoad(exports, ["SystemReplacemsgAlertmail"], () => require("./systemReplacemsgAlertmail"));

export { SystemReplacemsgAuthArgs, SystemReplacemsgAuthState } from "./systemReplacemsgAuth";
export type SystemReplacemsgAuth = import("./systemReplacemsgAuth").SystemReplacemsgAuth;
export const SystemReplacemsgAuth: typeof import("./systemReplacemsgAuth").SystemReplacemsgAuth = null as any;
utilities.lazyLoad(exports, ["SystemReplacemsgAuth"], () => require("./systemReplacemsgAuth"));

export { SystemReplacemsgAutomationArgs, SystemReplacemsgAutomationState } from "./systemReplacemsgAutomation";
export type SystemReplacemsgAutomation = import("./systemReplacemsgAutomation").SystemReplacemsgAutomation;
export const SystemReplacemsgAutomation: typeof import("./systemReplacemsgAutomation").SystemReplacemsgAutomation = null as any;
utilities.lazyLoad(exports, ["SystemReplacemsgAutomation"], () => require("./systemReplacemsgAutomation"));

export { SystemReplacemsgCustommessageArgs, SystemReplacemsgCustommessageState } from "./systemReplacemsgCustommessage";
export type SystemReplacemsgCustommessage = import("./systemReplacemsgCustommessage").SystemReplacemsgCustommessage;
export const SystemReplacemsgCustommessage: typeof import("./systemReplacemsgCustommessage").SystemReplacemsgCustommessage = null as any;
utilities.lazyLoad(exports, ["SystemReplacemsgCustommessage"], () => require("./systemReplacemsgCustommessage"));

export { SystemReplacemsgFortiguardwfArgs, SystemReplacemsgFortiguardwfState } from "./systemReplacemsgFortiguardwf";
export type SystemReplacemsgFortiguardwf = import("./systemReplacemsgFortiguardwf").SystemReplacemsgFortiguardwf;
export const SystemReplacemsgFortiguardwf: typeof import("./systemReplacemsgFortiguardwf").SystemReplacemsgFortiguardwf = null as any;
utilities.lazyLoad(exports, ["SystemReplacemsgFortiguardwf"], () => require("./systemReplacemsgFortiguardwf"));

export { SystemReplacemsgFtpArgs, SystemReplacemsgFtpState } from "./systemReplacemsgFtp";
export type SystemReplacemsgFtp = import("./systemReplacemsgFtp").SystemReplacemsgFtp;
export const SystemReplacemsgFtp: typeof import("./systemReplacemsgFtp").SystemReplacemsgFtp = null as any;
utilities.lazyLoad(exports, ["SystemReplacemsgFtp"], () => require("./systemReplacemsgFtp"));

export { SystemReplacemsgHttpArgs, SystemReplacemsgHttpState } from "./systemReplacemsgHttp";
export type SystemReplacemsgHttp = import("./systemReplacemsgHttp").SystemReplacemsgHttp;
export const SystemReplacemsgHttp: typeof import("./systemReplacemsgHttp").SystemReplacemsgHttp = null as any;
utilities.lazyLoad(exports, ["SystemReplacemsgHttp"], () => require("./systemReplacemsgHttp"));

export { SystemReplacemsgIcapArgs, SystemReplacemsgIcapState } from "./systemReplacemsgIcap";
export type SystemReplacemsgIcap = import("./systemReplacemsgIcap").SystemReplacemsgIcap;
export const SystemReplacemsgIcap: typeof import("./systemReplacemsgIcap").SystemReplacemsgIcap = null as any;
utilities.lazyLoad(exports, ["SystemReplacemsgIcap"], () => require("./systemReplacemsgIcap"));

export { SystemReplacemsgMailArgs, SystemReplacemsgMailState } from "./systemReplacemsgMail";
export type SystemReplacemsgMail = import("./systemReplacemsgMail").SystemReplacemsgMail;
export const SystemReplacemsgMail: typeof import("./systemReplacemsgMail").SystemReplacemsgMail = null as any;
utilities.lazyLoad(exports, ["SystemReplacemsgMail"], () => require("./systemReplacemsgMail"));

export { SystemReplacemsgNacquarArgs, SystemReplacemsgNacquarState } from "./systemReplacemsgNacquar";
export type SystemReplacemsgNacquar = import("./systemReplacemsgNacquar").SystemReplacemsgNacquar;
export const SystemReplacemsgNacquar: typeof import("./systemReplacemsgNacquar").SystemReplacemsgNacquar = null as any;
utilities.lazyLoad(exports, ["SystemReplacemsgNacquar"], () => require("./systemReplacemsgNacquar"));

export { SystemReplacemsgSpamArgs, SystemReplacemsgSpamState } from "./systemReplacemsgSpam";
export type SystemReplacemsgSpam = import("./systemReplacemsgSpam").SystemReplacemsgSpam;
export const SystemReplacemsgSpam: typeof import("./systemReplacemsgSpam").SystemReplacemsgSpam = null as any;
utilities.lazyLoad(exports, ["SystemReplacemsgSpam"], () => require("./systemReplacemsgSpam"));

export { SystemReplacemsgSslvpnArgs, SystemReplacemsgSslvpnState } from "./systemReplacemsgSslvpn";
export type SystemReplacemsgSslvpn = import("./systemReplacemsgSslvpn").SystemReplacemsgSslvpn;
export const SystemReplacemsgSslvpn: typeof import("./systemReplacemsgSslvpn").SystemReplacemsgSslvpn = null as any;
utilities.lazyLoad(exports, ["SystemReplacemsgSslvpn"], () => require("./systemReplacemsgSslvpn"));

export { SystemReplacemsgTrafficquotaArgs, SystemReplacemsgTrafficquotaState } from "./systemReplacemsgTrafficquota";
export type SystemReplacemsgTrafficquota = import("./systemReplacemsgTrafficquota").SystemReplacemsgTrafficquota;
export const SystemReplacemsgTrafficquota: typeof import("./systemReplacemsgTrafficquota").SystemReplacemsgTrafficquota = null as any;
utilities.lazyLoad(exports, ["SystemReplacemsgTrafficquota"], () => require("./systemReplacemsgTrafficquota"));

export { SystemReplacemsgUtmArgs, SystemReplacemsgUtmState } from "./systemReplacemsgUtm";
export type SystemReplacemsgUtm = import("./systemReplacemsgUtm").SystemReplacemsgUtm;
export const SystemReplacemsgUtm: typeof import("./systemReplacemsgUtm").SystemReplacemsgUtm = null as any;
utilities.lazyLoad(exports, ["SystemReplacemsgUtm"], () => require("./systemReplacemsgUtm"));

export { SystemReplacemsgWebproxyArgs, SystemReplacemsgWebproxyState } from "./systemReplacemsgWebproxy";
export type SystemReplacemsgWebproxy = import("./systemReplacemsgWebproxy").SystemReplacemsgWebproxy;
export const SystemReplacemsgWebproxy: typeof import("./systemReplacemsgWebproxy").SystemReplacemsgWebproxy = null as any;
utilities.lazyLoad(exports, ["SystemReplacemsgWebproxy"], () => require("./systemReplacemsgWebproxy"));

export { SystemSamlArgs, SystemSamlState } from "./systemSaml";
export type SystemSaml = import("./systemSaml").SystemSaml;
export const SystemSaml: typeof import("./systemSaml").SystemSaml = null as any;
utilities.lazyLoad(exports, ["SystemSaml"], () => require("./systemSaml"));

export { SystemSdwanArgs, SystemSdwanState } from "./systemSdwan";
export type SystemSdwan = import("./systemSdwan").SystemSdwan;
export const SystemSdwan: typeof import("./systemSdwan").SystemSdwan = null as any;
utilities.lazyLoad(exports, ["SystemSdwan"], () => require("./systemSdwan"));

export { SystemSdwanDuplicationArgs, SystemSdwanDuplicationState } from "./systemSdwanDuplication";
export type SystemSdwanDuplication = import("./systemSdwanDuplication").SystemSdwanDuplication;
export const SystemSdwanDuplication: typeof import("./systemSdwanDuplication").SystemSdwanDuplication = null as any;
utilities.lazyLoad(exports, ["SystemSdwanDuplication"], () => require("./systemSdwanDuplication"));

export { SystemSdwanHealthcheckArgs, SystemSdwanHealthcheckState } from "./systemSdwanHealthcheck";
export type SystemSdwanHealthcheck = import("./systemSdwanHealthcheck").SystemSdwanHealthcheck;
export const SystemSdwanHealthcheck: typeof import("./systemSdwanHealthcheck").SystemSdwanHealthcheck = null as any;
utilities.lazyLoad(exports, ["SystemSdwanHealthcheck"], () => require("./systemSdwanHealthcheck"));

export { SystemSdwanHealthcheckSlaArgs, SystemSdwanHealthcheckSlaState } from "./systemSdwanHealthcheckSla";
export type SystemSdwanHealthcheckSla = import("./systemSdwanHealthcheckSla").SystemSdwanHealthcheckSla;
export const SystemSdwanHealthcheckSla: typeof import("./systemSdwanHealthcheckSla").SystemSdwanHealthcheckSla = null as any;
utilities.lazyLoad(exports, ["SystemSdwanHealthcheckSla"], () => require("./systemSdwanHealthcheckSla"));

export { SystemSdwanMembersArgs, SystemSdwanMembersState } from "./systemSdwanMembers";
export type SystemSdwanMembers = import("./systemSdwanMembers").SystemSdwanMembers;
export const SystemSdwanMembers: typeof import("./systemSdwanMembers").SystemSdwanMembers = null as any;
utilities.lazyLoad(exports, ["SystemSdwanMembers"], () => require("./systemSdwanMembers"));

export { SystemSdwanMembersMoveArgs, SystemSdwanMembersMoveState } from "./systemSdwanMembersMove";
export type SystemSdwanMembersMove = import("./systemSdwanMembersMove").SystemSdwanMembersMove;
export const SystemSdwanMembersMove: typeof import("./systemSdwanMembersMove").SystemSdwanMembersMove = null as any;
utilities.lazyLoad(exports, ["SystemSdwanMembersMove"], () => require("./systemSdwanMembersMove"));

export { SystemSdwanServiceArgs, SystemSdwanServiceState } from "./systemSdwanService";
export type SystemSdwanService = import("./systemSdwanService").SystemSdwanService;
export const SystemSdwanService: typeof import("./systemSdwanService").SystemSdwanService = null as any;
utilities.lazyLoad(exports, ["SystemSdwanService"], () => require("./systemSdwanService"));

export { SystemSdwanServiceMoveArgs, SystemSdwanServiceMoveState } from "./systemSdwanServiceMove";
export type SystemSdwanServiceMove = import("./systemSdwanServiceMove").SystemSdwanServiceMove;
export const SystemSdwanServiceMove: typeof import("./systemSdwanServiceMove").SystemSdwanServiceMove = null as any;
utilities.lazyLoad(exports, ["SystemSdwanServiceMove"], () => require("./systemSdwanServiceMove"));

export { SystemSdwanZoneArgs, SystemSdwanZoneState } from "./systemSdwanZone";
export type SystemSdwanZone = import("./systemSdwanZone").SystemSdwanZone;
export const SystemSdwanZone: typeof import("./systemSdwanZone").SystemSdwanZone = null as any;
utilities.lazyLoad(exports, ["SystemSdwanZone"], () => require("./systemSdwanZone"));

export { SystemSdwanZoneMoveArgs, SystemSdwanZoneMoveState } from "./systemSdwanZoneMove";
export type SystemSdwanZoneMove = import("./systemSdwanZoneMove").SystemSdwanZoneMove;
export const SystemSdwanZoneMove: typeof import("./systemSdwanZoneMove").SystemSdwanZoneMove = null as any;
utilities.lazyLoad(exports, ["SystemSdwanZoneMove"], () => require("./systemSdwanZoneMove"));

export { SystemSessionhelperArgs, SystemSessionhelperState } from "./systemSessionhelper";
export type SystemSessionhelper = import("./systemSessionhelper").SystemSessionhelper;
export const SystemSessionhelper: typeof import("./systemSessionhelper").SystemSessionhelper = null as any;
utilities.lazyLoad(exports, ["SystemSessionhelper"], () => require("./systemSessionhelper"));

export { SystemSessionttlArgs, SystemSessionttlState } from "./systemSessionttl";
export type SystemSessionttl = import("./systemSessionttl").SystemSessionttl;
export const SystemSessionttl: typeof import("./systemSessionttl").SystemSessionttl = null as any;
utilities.lazyLoad(exports, ["SystemSessionttl"], () => require("./systemSessionttl"));

export { SystemSessionttlPortArgs, SystemSessionttlPortState } from "./systemSessionttlPort";
export type SystemSessionttlPort = import("./systemSessionttlPort").SystemSessionttlPort;
export const SystemSessionttlPort: typeof import("./systemSessionttlPort").SystemSessionttlPort = null as any;
utilities.lazyLoad(exports, ["SystemSessionttlPort"], () => require("./systemSessionttlPort"));

export { SystemSettingsArgs, SystemSettingsState } from "./systemSettings";
export type SystemSettings = import("./systemSettings").SystemSettings;
export const SystemSettings: typeof import("./systemSettings").SystemSettings = null as any;
utilities.lazyLoad(exports, ["SystemSettings"], () => require("./systemSettings"));

export { SystemSflowArgs, SystemSflowState } from "./systemSflow";
export type SystemSflow = import("./systemSflow").SystemSflow;
export const SystemSflow: typeof import("./systemSflow").SystemSflow = null as any;
utilities.lazyLoad(exports, ["SystemSflow"], () => require("./systemSflow"));

export { SystemSflowCollectorsArgs, SystemSflowCollectorsState } from "./systemSflowCollectors";
export type SystemSflowCollectors = import("./systemSflowCollectors").SystemSflowCollectors;
export const SystemSflowCollectors: typeof import("./systemSflowCollectors").SystemSflowCollectors = null as any;
utilities.lazyLoad(exports, ["SystemSflowCollectors"], () => require("./systemSflowCollectors"));

export { SystemSittunnelArgs, SystemSittunnelState } from "./systemSittunnel";
export type SystemSittunnel = import("./systemSittunnel").SystemSittunnel;
export const SystemSittunnel: typeof import("./systemSittunnel").SystemSittunnel = null as any;
utilities.lazyLoad(exports, ["SystemSittunnel"], () => require("./systemSittunnel"));

export { SystemSmcntpNtpserverArgs, SystemSmcntpNtpserverState } from "./systemSmcntpNtpserver";
export type SystemSmcntpNtpserver = import("./systemSmcntpNtpserver").SystemSmcntpNtpserver;
export const SystemSmcntpNtpserver: typeof import("./systemSmcntpNtpserver").SystemSmcntpNtpserver = null as any;
utilities.lazyLoad(exports, ["SystemSmcntpNtpserver"], () => require("./systemSmcntpNtpserver"));

export { SystemSnmpCommunityArgs, SystemSnmpCommunityState } from "./systemSnmpCommunity";
export type SystemSnmpCommunity = import("./systemSnmpCommunity").SystemSnmpCommunity;
export const SystemSnmpCommunity: typeof import("./systemSnmpCommunity").SystemSnmpCommunity = null as any;
utilities.lazyLoad(exports, ["SystemSnmpCommunity"], () => require("./systemSnmpCommunity"));

export { SystemSnmpCommunityHostsArgs, SystemSnmpCommunityHostsState } from "./systemSnmpCommunityHosts";
export type SystemSnmpCommunityHosts = import("./systemSnmpCommunityHosts").SystemSnmpCommunityHosts;
export const SystemSnmpCommunityHosts: typeof import("./systemSnmpCommunityHosts").SystemSnmpCommunityHosts = null as any;
utilities.lazyLoad(exports, ["SystemSnmpCommunityHosts"], () => require("./systemSnmpCommunityHosts"));

export { SystemSnmpCommunityHosts6Args, SystemSnmpCommunityHosts6State } from "./systemSnmpCommunityHosts6";
export type SystemSnmpCommunityHosts6 = import("./systemSnmpCommunityHosts6").SystemSnmpCommunityHosts6;
export const SystemSnmpCommunityHosts6: typeof import("./systemSnmpCommunityHosts6").SystemSnmpCommunityHosts6 = null as any;
utilities.lazyLoad(exports, ["SystemSnmpCommunityHosts6"], () => require("./systemSnmpCommunityHosts6"));

export { SystemSnmpMibviewArgs, SystemSnmpMibviewState } from "./systemSnmpMibview";
export type SystemSnmpMibview = import("./systemSnmpMibview").SystemSnmpMibview;
export const SystemSnmpMibview: typeof import("./systemSnmpMibview").SystemSnmpMibview = null as any;
utilities.lazyLoad(exports, ["SystemSnmpMibview"], () => require("./systemSnmpMibview"));

export { SystemSnmpSysinfoArgs, SystemSnmpSysinfoState } from "./systemSnmpSysinfo";
export type SystemSnmpSysinfo = import("./systemSnmpSysinfo").SystemSnmpSysinfo;
export const SystemSnmpSysinfo: typeof import("./systemSnmpSysinfo").SystemSnmpSysinfo = null as any;
utilities.lazyLoad(exports, ["SystemSnmpSysinfo"], () => require("./systemSnmpSysinfo"));

export { SystemSnmpUserArgs, SystemSnmpUserState } from "./systemSnmpUser";
export type SystemSnmpUser = import("./systemSnmpUser").SystemSnmpUser;
export const SystemSnmpUser: typeof import("./systemSnmpUser").SystemSnmpUser = null as any;
utilities.lazyLoad(exports, ["SystemSnmpUser"], () => require("./systemSnmpUser"));

export { SystemSpeedtestscheduleArgs, SystemSpeedtestscheduleState } from "./systemSpeedtestschedule";
export type SystemSpeedtestschedule = import("./systemSpeedtestschedule").SystemSpeedtestschedule;
export const SystemSpeedtestschedule: typeof import("./systemSpeedtestschedule").SystemSpeedtestschedule = null as any;
utilities.lazyLoad(exports, ["SystemSpeedtestschedule"], () => require("./systemSpeedtestschedule"));

export { SystemSpeedtestserverArgs, SystemSpeedtestserverState } from "./systemSpeedtestserver";
export type SystemSpeedtestserver = import("./systemSpeedtestserver").SystemSpeedtestserver;
export const SystemSpeedtestserver: typeof import("./systemSpeedtestserver").SystemSpeedtestserver = null as any;
utilities.lazyLoad(exports, ["SystemSpeedtestserver"], () => require("./systemSpeedtestserver"));

export { SystemSpeedtestserverHostArgs, SystemSpeedtestserverHostState } from "./systemSpeedtestserverHost";
export type SystemSpeedtestserverHost = import("./systemSpeedtestserverHost").SystemSpeedtestserverHost;
export const SystemSpeedtestserverHost: typeof import("./systemSpeedtestserverHost").SystemSpeedtestserverHost = null as any;
utilities.lazyLoad(exports, ["SystemSpeedtestserverHost"], () => require("./systemSpeedtestserverHost"));

export { SystemSpeedtestsettingArgs, SystemSpeedtestsettingState } from "./systemSpeedtestsetting";
export type SystemSpeedtestsetting = import("./systemSpeedtestsetting").SystemSpeedtestsetting;
export const SystemSpeedtestsetting: typeof import("./systemSpeedtestsetting").SystemSpeedtestsetting = null as any;
utilities.lazyLoad(exports, ["SystemSpeedtestsetting"], () => require("./systemSpeedtestsetting"));

export { SystemSshconfigArgs, SystemSshconfigState } from "./systemSshconfig";
export type SystemSshconfig = import("./systemSshconfig").SystemSshconfig;
export const SystemSshconfig: typeof import("./systemSshconfig").SystemSshconfig = null as any;
utilities.lazyLoad(exports, ["SystemSshconfig"], () => require("./systemSshconfig"));

export { SystemSsoadminArgs, SystemSsoadminState } from "./systemSsoadmin";
export type SystemSsoadmin = import("./systemSsoadmin").SystemSsoadmin;
export const SystemSsoadmin: typeof import("./systemSsoadmin").SystemSsoadmin = null as any;
utilities.lazyLoad(exports, ["SystemSsoadmin"], () => require("./systemSsoadmin"));

export { SystemSsoforticloudadminArgs, SystemSsoforticloudadminState } from "./systemSsoforticloudadmin";
export type SystemSsoforticloudadmin = import("./systemSsoforticloudadmin").SystemSsoforticloudadmin;
export const SystemSsoforticloudadmin: typeof import("./systemSsoforticloudadmin").SystemSsoforticloudadmin = null as any;
utilities.lazyLoad(exports, ["SystemSsoforticloudadmin"], () => require("./systemSsoforticloudadmin"));

export { SystemSsofortigatecloudadminArgs, SystemSsofortigatecloudadminState } from "./systemSsofortigatecloudadmin";
export type SystemSsofortigatecloudadmin = import("./systemSsofortigatecloudadmin").SystemSsofortigatecloudadmin;
export const SystemSsofortigatecloudadmin: typeof import("./systemSsofortigatecloudadmin").SystemSsofortigatecloudadmin = null as any;
utilities.lazyLoad(exports, ["SystemSsofortigatecloudadmin"], () => require("./systemSsofortigatecloudadmin"));

export { SystemStandaloneclusterArgs, SystemStandaloneclusterState } from "./systemStandalonecluster";
export type SystemStandalonecluster = import("./systemStandalonecluster").SystemStandalonecluster;
export const SystemStandalonecluster: typeof import("./systemStandalonecluster").SystemStandalonecluster = null as any;
utilities.lazyLoad(exports, ["SystemStandalonecluster"], () => require("./systemStandalonecluster"));

export { SystemStandaloneclusterClusterpeerArgs, SystemStandaloneclusterClusterpeerState } from "./systemStandaloneclusterClusterpeer";
export type SystemStandaloneclusterClusterpeer = import("./systemStandaloneclusterClusterpeer").SystemStandaloneclusterClusterpeer;
export const SystemStandaloneclusterClusterpeer: typeof import("./systemStandaloneclusterClusterpeer").SystemStandaloneclusterClusterpeer = null as any;
utilities.lazyLoad(exports, ["SystemStandaloneclusterClusterpeer"], () => require("./systemStandaloneclusterClusterpeer"));

export { SystemStandaloneclusterClusterpeerSessionsyncfilterArgs, SystemStandaloneclusterClusterpeerSessionsyncfilterState } from "./systemStandaloneclusterClusterpeerSessionsyncfilter";
export type SystemStandaloneclusterClusterpeerSessionsyncfilter = import("./systemStandaloneclusterClusterpeerSessionsyncfilter").SystemStandaloneclusterClusterpeerSessionsyncfilter;
export const SystemStandaloneclusterClusterpeerSessionsyncfilter: typeof import("./systemStandaloneclusterClusterpeerSessionsyncfilter").SystemStandaloneclusterClusterpeerSessionsyncfilter = null as any;
utilities.lazyLoad(exports, ["SystemStandaloneclusterClusterpeerSessionsyncfilter"], () => require("./systemStandaloneclusterClusterpeerSessionsyncfilter"));

export { SystemStandaloneclusterClusterpeerSessionsyncfilterCustomserviceArgs, SystemStandaloneclusterClusterpeerSessionsyncfilterCustomserviceState } from "./systemStandaloneclusterClusterpeerSessionsyncfilterCustomservice";
export type SystemStandaloneclusterClusterpeerSessionsyncfilterCustomservice = import("./systemStandaloneclusterClusterpeerSessionsyncfilterCustomservice").SystemStandaloneclusterClusterpeerSessionsyncfilterCustomservice;
export const SystemStandaloneclusterClusterpeerSessionsyncfilterCustomservice: typeof import("./systemStandaloneclusterClusterpeerSessionsyncfilterCustomservice").SystemStandaloneclusterClusterpeerSessionsyncfilterCustomservice = null as any;
utilities.lazyLoad(exports, ["SystemStandaloneclusterClusterpeerSessionsyncfilterCustomservice"], () => require("./systemStandaloneclusterClusterpeerSessionsyncfilterCustomservice"));

export { SystemStorageArgs, SystemStorageState } from "./systemStorage";
export type SystemStorage = import("./systemStorage").SystemStorage;
export const SystemStorage: typeof import("./systemStorage").SystemStorage = null as any;
utilities.lazyLoad(exports, ["SystemStorage"], () => require("./systemStorage"));

export { SystemSwitchinterfaceArgs, SystemSwitchinterfaceState } from "./systemSwitchinterface";
export type SystemSwitchinterface = import("./systemSwitchinterface").SystemSwitchinterface;
export const SystemSwitchinterface: typeof import("./systemSwitchinterface").SystemSwitchinterface = null as any;
utilities.lazyLoad(exports, ["SystemSwitchinterface"], () => require("./systemSwitchinterface"));

export { SystemTosbasedpriorityArgs, SystemTosbasedpriorityState } from "./systemTosbasedpriority";
export type SystemTosbasedpriority = import("./systemTosbasedpriority").SystemTosbasedpriority;
export const SystemTosbasedpriority: typeof import("./systemTosbasedpriority").SystemTosbasedpriority = null as any;
utilities.lazyLoad(exports, ["SystemTosbasedpriority"], () => require("./systemTosbasedpriority"));

export { SystemVdomArgs, SystemVdomState } from "./systemVdom";
export type SystemVdom = import("./systemVdom").SystemVdom;
export const SystemVdom: typeof import("./systemVdom").SystemVdom = null as any;
utilities.lazyLoad(exports, ["SystemVdom"], () => require("./systemVdom"));

export { SystemVdomdnsArgs, SystemVdomdnsState } from "./systemVdomdns";
export type SystemVdomdns = import("./systemVdomdns").SystemVdomdns;
export const SystemVdomdns: typeof import("./systemVdomdns").SystemVdomdns = null as any;
utilities.lazyLoad(exports, ["SystemVdomdns"], () => require("./systemVdomdns"));

export { SystemVdomexceptionArgs, SystemVdomexceptionState } from "./systemVdomexception";
export type SystemVdomexception = import("./systemVdomexception").SystemVdomexception;
export const SystemVdomexception: typeof import("./systemVdomexception").SystemVdomexception = null as any;
utilities.lazyLoad(exports, ["SystemVdomexception"], () => require("./systemVdomexception"));

export { SystemVdomlinkArgs, SystemVdomlinkState } from "./systemVdomlink";
export type SystemVdomlink = import("./systemVdomlink").SystemVdomlink;
export const SystemVdomlink: typeof import("./systemVdomlink").SystemVdomlink = null as any;
utilities.lazyLoad(exports, ["SystemVdomlink"], () => require("./systemVdomlink"));

export { SystemVdomnetflowArgs, SystemVdomnetflowState } from "./systemVdomnetflow";
export type SystemVdomnetflow = import("./systemVdomnetflow").SystemVdomnetflow;
export const SystemVdomnetflow: typeof import("./systemVdomnetflow").SystemVdomnetflow = null as any;
utilities.lazyLoad(exports, ["SystemVdomnetflow"], () => require("./systemVdomnetflow"));

export { SystemVdomnetflowCollectorsArgs, SystemVdomnetflowCollectorsState } from "./systemVdomnetflowCollectors";
export type SystemVdomnetflowCollectors = import("./systemVdomnetflowCollectors").SystemVdomnetflowCollectors;
export const SystemVdomnetflowCollectors: typeof import("./systemVdomnetflowCollectors").SystemVdomnetflowCollectors = null as any;
utilities.lazyLoad(exports, ["SystemVdomnetflowCollectors"], () => require("./systemVdomnetflowCollectors"));

export { SystemVdompropertyArgs, SystemVdompropertyState } from "./systemVdomproperty";
export type SystemVdomproperty = import("./systemVdomproperty").SystemVdomproperty;
export const SystemVdomproperty: typeof import("./systemVdomproperty").SystemVdomproperty = null as any;
utilities.lazyLoad(exports, ["SystemVdomproperty"], () => require("./systemVdomproperty"));

export { SystemVdomradiusserverArgs, SystemVdomradiusserverState } from "./systemVdomradiusserver";
export type SystemVdomradiusserver = import("./systemVdomradiusserver").SystemVdomradiusserver;
export const SystemVdomradiusserver: typeof import("./systemVdomradiusserver").SystemVdomradiusserver = null as any;
utilities.lazyLoad(exports, ["SystemVdomradiusserver"], () => require("./systemVdomradiusserver"));

export { SystemVdomsflowArgs, SystemVdomsflowState } from "./systemVdomsflow";
export type SystemVdomsflow = import("./systemVdomsflow").SystemVdomsflow;
export const SystemVdomsflow: typeof import("./systemVdomsflow").SystemVdomsflow = null as any;
utilities.lazyLoad(exports, ["SystemVdomsflow"], () => require("./systemVdomsflow"));

export { SystemVdomsflowCollectorsArgs, SystemVdomsflowCollectorsState } from "./systemVdomsflowCollectors";
export type SystemVdomsflowCollectors = import("./systemVdomsflowCollectors").SystemVdomsflowCollectors;
export const SystemVdomsflowCollectors: typeof import("./systemVdomsflowCollectors").SystemVdomsflowCollectors = null as any;
utilities.lazyLoad(exports, ["SystemVdomsflowCollectors"], () => require("./systemVdomsflowCollectors"));

export { SystemVnetunnelArgs, SystemVnetunnelState } from "./systemVnetunnel";
export type SystemVnetunnel = import("./systemVnetunnel").SystemVnetunnel;
export const SystemVnetunnel: typeof import("./systemVnetunnel").SystemVnetunnel = null as any;
utilities.lazyLoad(exports, ["SystemVnetunnel"], () => require("./systemVnetunnel"));

export { SystemVxlanArgs, SystemVxlanState } from "./systemVxlan";
export type SystemVxlan = import("./systemVxlan").SystemVxlan;
export const SystemVxlan: typeof import("./systemVxlan").SystemVxlan = null as any;
utilities.lazyLoad(exports, ["SystemVxlan"], () => require("./systemVxlan"));

export { SystemWccpArgs, SystemWccpState } from "./systemWccp";
export type SystemWccp = import("./systemWccp").SystemWccp;
export const SystemWccp: typeof import("./systemWccp").SystemWccp = null as any;
utilities.lazyLoad(exports, ["SystemWccp"], () => require("./systemWccp"));

export { SystemZoneArgs, SystemZoneState } from "./systemZone";
export type SystemZone = import("./systemZone").SystemZone;
export const SystemZone: typeof import("./systemZone").SystemZone = null as any;
utilities.lazyLoad(exports, ["SystemZone"], () => require("./systemZone"));

export { SystemZoneTaggingArgs, SystemZoneTaggingState } from "./systemZoneTagging";
export type SystemZoneTagging = import("./systemZoneTagging").SystemZoneTagging;
export const SystemZoneTagging: typeof import("./systemZoneTagging").SystemZoneTagging = null as any;
utilities.lazyLoad(exports, ["SystemZoneTagging"], () => require("./systemZoneTagging"));

export { UserNacpolicyArgs, UserNacpolicyState } from "./userNacpolicy";
export type UserNacpolicy = import("./userNacpolicy").UserNacpolicy;
export const UserNacpolicy: typeof import("./userNacpolicy").UserNacpolicy = null as any;
utilities.lazyLoad(exports, ["UserNacpolicy"], () => require("./userNacpolicy"));

export { UserNacpolicyMoveArgs, UserNacpolicyMoveState } from "./userNacpolicyMove";
export type UserNacpolicyMove = import("./userNacpolicyMove").UserNacpolicyMove;
export const UserNacpolicyMove: typeof import("./userNacpolicyMove").UserNacpolicyMove = null as any;
utilities.lazyLoad(exports, ["UserNacpolicyMove"], () => require("./userNacpolicyMove"));

export { UserQuarantineArgs, UserQuarantineState } from "./userQuarantine";
export type UserQuarantine = import("./userQuarantine").UserQuarantine;
export const UserQuarantine: typeof import("./userQuarantine").UserQuarantine = null as any;
utilities.lazyLoad(exports, ["UserQuarantine"], () => require("./userQuarantine"));

export { UserQuarantineTargetsArgs, UserQuarantineTargetsState } from "./userQuarantineTargets";
export type UserQuarantineTargets = import("./userQuarantineTargets").UserQuarantineTargets;
export const UserQuarantineTargets: typeof import("./userQuarantineTargets").UserQuarantineTargets = null as any;
utilities.lazyLoad(exports, ["UserQuarantineTargets"], () => require("./userQuarantineTargets"));

export { UserQuarantineTargetsMacsArgs, UserQuarantineTargetsMacsState } from "./userQuarantineTargetsMacs";
export type UserQuarantineTargetsMacs = import("./userQuarantineTargetsMacs").UserQuarantineTargetsMacs;
export const UserQuarantineTargetsMacs: typeof import("./userQuarantineTargetsMacs").UserQuarantineTargetsMacs = null as any;
utilities.lazyLoad(exports, ["UserQuarantineTargetsMacs"], () => require("./userQuarantineTargetsMacs"));

export { UserSettingArgs, UserSettingState } from "./userSetting";
export type UserSetting = import("./userSetting").UserSetting;
export const UserSetting: typeof import("./userSetting").UserSetting = null as any;
utilities.lazyLoad(exports, ["UserSetting"], () => require("./userSetting"));

export { UserSettingAuthportsArgs, UserSettingAuthportsState } from "./userSettingAuthports";
export type UserSettingAuthports = import("./userSettingAuthports").UserSettingAuthports;
export const UserSettingAuthports: typeof import("./userSettingAuthports").UserSettingAuthports = null as any;
utilities.lazyLoad(exports, ["UserSettingAuthports"], () => require("./userSettingAuthports"));

export { VpnCertificateCrlArgs, VpnCertificateCrlState } from "./vpnCertificateCrl";
export type VpnCertificateCrl = import("./vpnCertificateCrl").VpnCertificateCrl;
export const VpnCertificateCrl: typeof import("./vpnCertificateCrl").VpnCertificateCrl = null as any;
utilities.lazyLoad(exports, ["VpnCertificateCrl"], () => require("./vpnCertificateCrl"));

export { VpnCertificateLocalArgs, VpnCertificateLocalState } from "./vpnCertificateLocal";
export type VpnCertificateLocal = import("./vpnCertificateLocal").VpnCertificateLocal;
export const VpnCertificateLocal: typeof import("./vpnCertificateLocal").VpnCertificateLocal = null as any;
utilities.lazyLoad(exports, ["VpnCertificateLocal"], () => require("./vpnCertificateLocal"));

export { VpnCertificateSettingArgs, VpnCertificateSettingState } from "./vpnCertificateSetting";
export type VpnCertificateSetting = import("./vpnCertificateSetting").VpnCertificateSetting;
export const VpnCertificateSetting: typeof import("./vpnCertificateSetting").VpnCertificateSetting = null as any;
utilities.lazyLoad(exports, ["VpnCertificateSetting"], () => require("./vpnCertificateSetting"));

export { VpnCertificateSettingCrlverificationArgs, VpnCertificateSettingCrlverificationState } from "./vpnCertificateSettingCrlverification";
export type VpnCertificateSettingCrlverification = import("./vpnCertificateSettingCrlverification").VpnCertificateSettingCrlverification;
export const VpnCertificateSettingCrlverification: typeof import("./vpnCertificateSettingCrlverification").VpnCertificateSettingCrlverification = null as any;
utilities.lazyLoad(exports, ["VpnCertificateSettingCrlverification"], () => require("./vpnCertificateSettingCrlverification"));

export { VpnIpsecConcentratorArgs, VpnIpsecConcentratorState } from "./vpnIpsecConcentrator";
export type VpnIpsecConcentrator = import("./vpnIpsecConcentrator").VpnIpsecConcentrator;
export const VpnIpsecConcentrator: typeof import("./vpnIpsecConcentrator").VpnIpsecConcentrator = null as any;
utilities.lazyLoad(exports, ["VpnIpsecConcentrator"], () => require("./vpnIpsecConcentrator"));

export { VpnIpsecForticlientArgs, VpnIpsecForticlientState } from "./vpnIpsecForticlient";
export type VpnIpsecForticlient = import("./vpnIpsecForticlient").VpnIpsecForticlient;
export const VpnIpsecForticlient: typeof import("./vpnIpsecForticlient").VpnIpsecForticlient = null as any;
utilities.lazyLoad(exports, ["VpnIpsecForticlient"], () => require("./vpnIpsecForticlient"));

export { VpnIpsecPhase1Args, VpnIpsecPhase1State } from "./vpnIpsecPhase1";
export type VpnIpsecPhase1 = import("./vpnIpsecPhase1").VpnIpsecPhase1;
export const VpnIpsecPhase1: typeof import("./vpnIpsecPhase1").VpnIpsecPhase1 = null as any;
utilities.lazyLoad(exports, ["VpnIpsecPhase1"], () => require("./vpnIpsecPhase1"));

export { VpnIpsecPhase1interfaceArgs, VpnIpsecPhase1interfaceState } from "./vpnIpsecPhase1interface";
export type VpnIpsecPhase1interface = import("./vpnIpsecPhase1interface").VpnIpsecPhase1interface;
export const VpnIpsecPhase1interface: typeof import("./vpnIpsecPhase1interface").VpnIpsecPhase1interface = null as any;
utilities.lazyLoad(exports, ["VpnIpsecPhase1interface"], () => require("./vpnIpsecPhase1interface"));

export { VpnIpsecPhase2Args, VpnIpsecPhase2State } from "./vpnIpsecPhase2";
export type VpnIpsecPhase2 = import("./vpnIpsecPhase2").VpnIpsecPhase2;
export const VpnIpsecPhase2: typeof import("./vpnIpsecPhase2").VpnIpsecPhase2 = null as any;
utilities.lazyLoad(exports, ["VpnIpsecPhase2"], () => require("./vpnIpsecPhase2"));

export { VpnIpsecPhase2interfaceArgs, VpnIpsecPhase2interfaceState } from "./vpnIpsecPhase2interface";
export type VpnIpsecPhase2interface = import("./vpnIpsecPhase2interface").VpnIpsecPhase2interface;
export const VpnIpsecPhase2interface: typeof import("./vpnIpsecPhase2interface").VpnIpsecPhase2interface = null as any;
utilities.lazyLoad(exports, ["VpnIpsecPhase2interface"], () => require("./vpnIpsecPhase2interface"));

export { VpnKmipserverArgs, VpnKmipserverState } from "./vpnKmipserver";
export type VpnKmipserver = import("./vpnKmipserver").VpnKmipserver;
export const VpnKmipserver: typeof import("./vpnKmipserver").VpnKmipserver = null as any;
utilities.lazyLoad(exports, ["VpnKmipserver"], () => require("./vpnKmipserver"));

export { VpnKmipserverServerlistArgs, VpnKmipserverServerlistState } from "./vpnKmipserverServerlist";
export type VpnKmipserverServerlist = import("./vpnKmipserverServerlist").VpnKmipserverServerlist;
export const VpnKmipserverServerlist: typeof import("./vpnKmipserverServerlist").VpnKmipserverServerlist = null as any;
utilities.lazyLoad(exports, ["VpnKmipserverServerlist"], () => require("./vpnKmipserverServerlist"));

export { VpnKmipserverServerlistMoveArgs, VpnKmipserverServerlistMoveState } from "./vpnKmipserverServerlistMove";
export type VpnKmipserverServerlistMove = import("./vpnKmipserverServerlistMove").VpnKmipserverServerlistMove;
export const VpnKmipserverServerlistMove: typeof import("./vpnKmipserverServerlistMove").VpnKmipserverServerlistMove = null as any;
utilities.lazyLoad(exports, ["VpnKmipserverServerlistMove"], () => require("./vpnKmipserverServerlistMove"));

export { VpnL2tpArgs, VpnL2tpState } from "./vpnL2tp";
export type VpnL2tp = import("./vpnL2tp").VpnL2tp;
export const VpnL2tp: typeof import("./vpnL2tp").VpnL2tp = null as any;
utilities.lazyLoad(exports, ["VpnL2tp"], () => require("./vpnL2tp"));

export { VpnOcvpnArgs, VpnOcvpnState } from "./vpnOcvpn";
export type VpnOcvpn = import("./vpnOcvpn").VpnOcvpn;
export const VpnOcvpn: typeof import("./vpnOcvpn").VpnOcvpn = null as any;
utilities.lazyLoad(exports, ["VpnOcvpn"], () => require("./vpnOcvpn"));

export { VpnOcvpnForticlientaccessAuthgroupsArgs, VpnOcvpnForticlientaccessAuthgroupsState } from "./vpnOcvpnForticlientaccessAuthgroups";
export type VpnOcvpnForticlientaccessAuthgroups = import("./vpnOcvpnForticlientaccessAuthgroups").VpnOcvpnForticlientaccessAuthgroups;
export const VpnOcvpnForticlientaccessAuthgroups: typeof import("./vpnOcvpnForticlientaccessAuthgroups").VpnOcvpnForticlientaccessAuthgroups = null as any;
utilities.lazyLoad(exports, ["VpnOcvpnForticlientaccessAuthgroups"], () => require("./vpnOcvpnForticlientaccessAuthgroups"));

export { VpnOcvpnOverlaysArgs, VpnOcvpnOverlaysState } from "./vpnOcvpnOverlays";
export type VpnOcvpnOverlays = import("./vpnOcvpnOverlays").VpnOcvpnOverlays;
export const VpnOcvpnOverlays: typeof import("./vpnOcvpnOverlays").VpnOcvpnOverlays = null as any;
utilities.lazyLoad(exports, ["VpnOcvpnOverlays"], () => require("./vpnOcvpnOverlays"));

export { VpnOcvpnOverlaysSubnetsArgs, VpnOcvpnOverlaysSubnetsState } from "./vpnOcvpnOverlaysSubnets";
export type VpnOcvpnOverlaysSubnets = import("./vpnOcvpnOverlaysSubnets").VpnOcvpnOverlaysSubnets;
export const VpnOcvpnOverlaysSubnets: typeof import("./vpnOcvpnOverlaysSubnets").VpnOcvpnOverlaysSubnets = null as any;
utilities.lazyLoad(exports, ["VpnOcvpnOverlaysSubnets"], () => require("./vpnOcvpnOverlaysSubnets"));

export { VpnPptpArgs, VpnPptpState } from "./vpnPptp";
export type VpnPptp = import("./vpnPptp").VpnPptp;
export const VpnPptp: typeof import("./vpnPptp").VpnPptp = null as any;
utilities.lazyLoad(exports, ["VpnPptp"], () => require("./vpnPptp"));

export { VpnQkdArgs, VpnQkdState } from "./vpnQkd";
export type VpnQkd = import("./vpnQkd").VpnQkd;
export const VpnQkd: typeof import("./vpnQkd").VpnQkd = null as any;
utilities.lazyLoad(exports, ["VpnQkd"], () => require("./vpnQkd"));

export { VpnSslClientArgs, VpnSslClientState } from "./vpnSslClient";
export type VpnSslClient = import("./vpnSslClient").VpnSslClient;
export const VpnSslClient: typeof import("./vpnSslClient").VpnSslClient = null as any;
utilities.lazyLoad(exports, ["VpnSslClient"], () => require("./vpnSslClient"));

export { VpnSslSettingsArgs, VpnSslSettingsState } from "./vpnSslSettings";
export type VpnSslSettings = import("./vpnSslSettings").VpnSslSettings;
export const VpnSslSettings: typeof import("./vpnSslSettings").VpnSslSettings = null as any;
utilities.lazyLoad(exports, ["VpnSslSettings"], () => require("./vpnSslSettings"));

export { VpnSslSettingsAuthenticationruleArgs, VpnSslSettingsAuthenticationruleState } from "./vpnSslSettingsAuthenticationrule";
export type VpnSslSettingsAuthenticationrule = import("./vpnSslSettingsAuthenticationrule").VpnSslSettingsAuthenticationrule;
export const VpnSslSettingsAuthenticationrule: typeof import("./vpnSslSettingsAuthenticationrule").VpnSslSettingsAuthenticationrule = null as any;
utilities.lazyLoad(exports, ["VpnSslSettingsAuthenticationrule"], () => require("./vpnSslSettingsAuthenticationrule"));

export { VpnSslSettingsAuthenticationruleMoveArgs, VpnSslSettingsAuthenticationruleMoveState } from "./vpnSslSettingsAuthenticationruleMove";
export type VpnSslSettingsAuthenticationruleMove = import("./vpnSslSettingsAuthenticationruleMove").VpnSslSettingsAuthenticationruleMove;
export const VpnSslSettingsAuthenticationruleMove: typeof import("./vpnSslSettingsAuthenticationruleMove").VpnSslSettingsAuthenticationruleMove = null as any;
utilities.lazyLoad(exports, ["VpnSslSettingsAuthenticationruleMove"], () => require("./vpnSslSettingsAuthenticationruleMove"));

export { VpnSslWebUserbookmarkArgs, VpnSslWebUserbookmarkState } from "./vpnSslWebUserbookmark";
export type VpnSslWebUserbookmark = import("./vpnSslWebUserbookmark").VpnSslWebUserbookmark;
export const VpnSslWebUserbookmark: typeof import("./vpnSslWebUserbookmark").VpnSslWebUserbookmark = null as any;
utilities.lazyLoad(exports, ["VpnSslWebUserbookmark"], () => require("./vpnSslWebUserbookmark"));

export { VpnSslWebUserbookmarkBookmarksArgs, VpnSslWebUserbookmarkBookmarksState } from "./vpnSslWebUserbookmarkBookmarks";
export type VpnSslWebUserbookmarkBookmarks = import("./vpnSslWebUserbookmarkBookmarks").VpnSslWebUserbookmarkBookmarks;
export const VpnSslWebUserbookmarkBookmarks: typeof import("./vpnSslWebUserbookmarkBookmarks").VpnSslWebUserbookmarkBookmarks = null as any;
utilities.lazyLoad(exports, ["VpnSslWebUserbookmarkBookmarks"], () => require("./vpnSslWebUserbookmarkBookmarks"));

export { VpnSslWebUserbookmarkBookmarksFormdataArgs, VpnSslWebUserbookmarkBookmarksFormdataState } from "./vpnSslWebUserbookmarkBookmarksFormdata";
export type VpnSslWebUserbookmarkBookmarksFormdata = import("./vpnSslWebUserbookmarkBookmarksFormdata").VpnSslWebUserbookmarkBookmarksFormdata;
export const VpnSslWebUserbookmarkBookmarksFormdata: typeof import("./vpnSslWebUserbookmarkBookmarksFormdata").VpnSslWebUserbookmarkBookmarksFormdata = null as any;
utilities.lazyLoad(exports, ["VpnSslWebUserbookmarkBookmarksFormdata"], () => require("./vpnSslWebUserbookmarkBookmarksFormdata"));

export { VpnSslWebUserbookmarkBookmarksMoveArgs, VpnSslWebUserbookmarkBookmarksMoveState } from "./vpnSslWebUserbookmarkBookmarksMove";
export type VpnSslWebUserbookmarkBookmarksMove = import("./vpnSslWebUserbookmarkBookmarksMove").VpnSslWebUserbookmarkBookmarksMove;
export const VpnSslWebUserbookmarkBookmarksMove: typeof import("./vpnSslWebUserbookmarkBookmarksMove").VpnSslWebUserbookmarkBookmarksMove = null as any;
utilities.lazyLoad(exports, ["VpnSslWebUserbookmarkBookmarksMove"], () => require("./vpnSslWebUserbookmarkBookmarksMove"));

export { VpnSslWebUsergroupbookmarkArgs, VpnSslWebUsergroupbookmarkState } from "./vpnSslWebUsergroupbookmark";
export type VpnSslWebUsergroupbookmark = import("./vpnSslWebUsergroupbookmark").VpnSslWebUsergroupbookmark;
export const VpnSslWebUsergroupbookmark: typeof import("./vpnSslWebUsergroupbookmark").VpnSslWebUsergroupbookmark = null as any;
utilities.lazyLoad(exports, ["VpnSslWebUsergroupbookmark"], () => require("./vpnSslWebUsergroupbookmark"));

export { VpnSslWebUsergroupbookmarkBookmarksArgs, VpnSslWebUsergroupbookmarkBookmarksState } from "./vpnSslWebUsergroupbookmarkBookmarks";
export type VpnSslWebUsergroupbookmarkBookmarks = import("./vpnSslWebUsergroupbookmarkBookmarks").VpnSslWebUsergroupbookmarkBookmarks;
export const VpnSslWebUsergroupbookmarkBookmarks: typeof import("./vpnSslWebUsergroupbookmarkBookmarks").VpnSslWebUsergroupbookmarkBookmarks = null as any;
utilities.lazyLoad(exports, ["VpnSslWebUsergroupbookmarkBookmarks"], () => require("./vpnSslWebUsergroupbookmarkBookmarks"));

export { VpnSslWebUsergroupbookmarkBookmarksFormdataArgs, VpnSslWebUsergroupbookmarkBookmarksFormdataState } from "./vpnSslWebUsergroupbookmarkBookmarksFormdata";
export type VpnSslWebUsergroupbookmarkBookmarksFormdata = import("./vpnSslWebUsergroupbookmarkBookmarksFormdata").VpnSslWebUsergroupbookmarkBookmarksFormdata;
export const VpnSslWebUsergroupbookmarkBookmarksFormdata: typeof import("./vpnSslWebUsergroupbookmarkBookmarksFormdata").VpnSslWebUsergroupbookmarkBookmarksFormdata = null as any;
utilities.lazyLoad(exports, ["VpnSslWebUsergroupbookmarkBookmarksFormdata"], () => require("./vpnSslWebUsergroupbookmarkBookmarksFormdata"));

export { VpnSslWebUsergroupbookmarkBookmarksMoveArgs, VpnSslWebUsergroupbookmarkBookmarksMoveState } from "./vpnSslWebUsergroupbookmarkBookmarksMove";
export type VpnSslWebUsergroupbookmarkBookmarksMove = import("./vpnSslWebUsergroupbookmarkBookmarksMove").VpnSslWebUsergroupbookmarkBookmarksMove;
export const VpnSslWebUsergroupbookmarkBookmarksMove: typeof import("./vpnSslWebUsergroupbookmarkBookmarksMove").VpnSslWebUsergroupbookmarkBookmarksMove = null as any;
utilities.lazyLoad(exports, ["VpnSslWebUsergroupbookmarkBookmarksMove"], () => require("./vpnSslWebUsergroupbookmarkBookmarksMove"));

export { WanoptCacheserviceArgs, WanoptCacheserviceState } from "./wanoptCacheservice";
export type WanoptCacheservice = import("./wanoptCacheservice").WanoptCacheservice;
export const WanoptCacheservice: typeof import("./wanoptCacheservice").WanoptCacheservice = null as any;
utilities.lazyLoad(exports, ["WanoptCacheservice"], () => require("./wanoptCacheservice"));

export { WanoptCacheserviceDstpeerArgs, WanoptCacheserviceDstpeerState } from "./wanoptCacheserviceDstpeer";
export type WanoptCacheserviceDstpeer = import("./wanoptCacheserviceDstpeer").WanoptCacheserviceDstpeer;
export const WanoptCacheserviceDstpeer: typeof import("./wanoptCacheserviceDstpeer").WanoptCacheserviceDstpeer = null as any;
utilities.lazyLoad(exports, ["WanoptCacheserviceDstpeer"], () => require("./wanoptCacheserviceDstpeer"));

export { WanoptCacheserviceSrcpeerArgs, WanoptCacheserviceSrcpeerState } from "./wanoptCacheserviceSrcpeer";
export type WanoptCacheserviceSrcpeer = import("./wanoptCacheserviceSrcpeer").WanoptCacheserviceSrcpeer;
export const WanoptCacheserviceSrcpeer: typeof import("./wanoptCacheserviceSrcpeer").WanoptCacheserviceSrcpeer = null as any;
utilities.lazyLoad(exports, ["WanoptCacheserviceSrcpeer"], () => require("./wanoptCacheserviceSrcpeer"));

export { WanoptContentdeliverynetworkruleArgs, WanoptContentdeliverynetworkruleState } from "./wanoptContentdeliverynetworkrule";
export type WanoptContentdeliverynetworkrule = import("./wanoptContentdeliverynetworkrule").WanoptContentdeliverynetworkrule;
export const WanoptContentdeliverynetworkrule: typeof import("./wanoptContentdeliverynetworkrule").WanoptContentdeliverynetworkrule = null as any;
utilities.lazyLoad(exports, ["WanoptContentdeliverynetworkrule"], () => require("./wanoptContentdeliverynetworkrule"));

export { WanoptContentdeliverynetworkruleRulesArgs, WanoptContentdeliverynetworkruleRulesState } from "./wanoptContentdeliverynetworkruleRules";
export type WanoptContentdeliverynetworkruleRules = import("./wanoptContentdeliverynetworkruleRules").WanoptContentdeliverynetworkruleRules;
export const WanoptContentdeliverynetworkruleRules: typeof import("./wanoptContentdeliverynetworkruleRules").WanoptContentdeliverynetworkruleRules = null as any;
utilities.lazyLoad(exports, ["WanoptContentdeliverynetworkruleRules"], () => require("./wanoptContentdeliverynetworkruleRules"));

export { WanoptContentdeliverynetworkruleRulesContentidArgs, WanoptContentdeliverynetworkruleRulesContentidState } from "./wanoptContentdeliverynetworkruleRulesContentid";
export type WanoptContentdeliverynetworkruleRulesContentid = import("./wanoptContentdeliverynetworkruleRulesContentid").WanoptContentdeliverynetworkruleRulesContentid;
export const WanoptContentdeliverynetworkruleRulesContentid: typeof import("./wanoptContentdeliverynetworkruleRulesContentid").WanoptContentdeliverynetworkruleRulesContentid = null as any;
utilities.lazyLoad(exports, ["WanoptContentdeliverynetworkruleRulesContentid"], () => require("./wanoptContentdeliverynetworkruleRulesContentid"));

export { WanoptContentdeliverynetworkruleRulesMatchentriesArgs, WanoptContentdeliverynetworkruleRulesMatchentriesState } from "./wanoptContentdeliverynetworkruleRulesMatchentries";
export type WanoptContentdeliverynetworkruleRulesMatchentries = import("./wanoptContentdeliverynetworkruleRulesMatchentries").WanoptContentdeliverynetworkruleRulesMatchentries;
export const WanoptContentdeliverynetworkruleRulesMatchentries: typeof import("./wanoptContentdeliverynetworkruleRulesMatchentries").WanoptContentdeliverynetworkruleRulesMatchentries = null as any;
utilities.lazyLoad(exports, ["WanoptContentdeliverynetworkruleRulesMatchentries"], () => require("./wanoptContentdeliverynetworkruleRulesMatchentries"));

export { WanoptContentdeliverynetworkruleRulesSkipentriesArgs, WanoptContentdeliverynetworkruleRulesSkipentriesState } from "./wanoptContentdeliverynetworkruleRulesSkipentries";
export type WanoptContentdeliverynetworkruleRulesSkipentries = import("./wanoptContentdeliverynetworkruleRulesSkipentries").WanoptContentdeliverynetworkruleRulesSkipentries;
export const WanoptContentdeliverynetworkruleRulesSkipentries: typeof import("./wanoptContentdeliverynetworkruleRulesSkipentries").WanoptContentdeliverynetworkruleRulesSkipentries = null as any;
utilities.lazyLoad(exports, ["WanoptContentdeliverynetworkruleRulesSkipentries"], () => require("./wanoptContentdeliverynetworkruleRulesSkipentries"));

export { WanoptRemotestorageArgs, WanoptRemotestorageState } from "./wanoptRemotestorage";
export type WanoptRemotestorage = import("./wanoptRemotestorage").WanoptRemotestorage;
export const WanoptRemotestorage: typeof import("./wanoptRemotestorage").WanoptRemotestorage = null as any;
utilities.lazyLoad(exports, ["WanoptRemotestorage"], () => require("./wanoptRemotestorage"));

export { WanoptSettingsArgs, WanoptSettingsState } from "./wanoptSettings";
export type WanoptSettings = import("./wanoptSettings").WanoptSettings;
export const WanoptSettings: typeof import("./wanoptSettings").WanoptSettings = null as any;
utilities.lazyLoad(exports, ["WanoptSettings"], () => require("./wanoptSettings"));

export { WanoptWebcacheArgs, WanoptWebcacheState } from "./wanoptWebcache";
export type WanoptWebcache = import("./wanoptWebcache").WanoptWebcache;
export const WanoptWebcache: typeof import("./wanoptWebcache").WanoptWebcache = null as any;
utilities.lazyLoad(exports, ["WanoptWebcache"], () => require("./wanoptWebcache"));

export { WebfilterFortiguardArgs, WebfilterFortiguardState } from "./webfilterFortiguard";
export type WebfilterFortiguard = import("./webfilterFortiguard").WebfilterFortiguard;
export const WebfilterFortiguard: typeof import("./webfilterFortiguard").WebfilterFortiguard = null as any;
utilities.lazyLoad(exports, ["WebfilterFortiguard"], () => require("./webfilterFortiguard"));

export { WebfilterIpsurlfiltercachesettingArgs, WebfilterIpsurlfiltercachesettingState } from "./webfilterIpsurlfiltercachesetting";
export type WebfilterIpsurlfiltercachesetting = import("./webfilterIpsurlfiltercachesetting").WebfilterIpsurlfiltercachesetting;
export const WebfilterIpsurlfiltercachesetting: typeof import("./webfilterIpsurlfiltercachesetting").WebfilterIpsurlfiltercachesetting = null as any;
utilities.lazyLoad(exports, ["WebfilterIpsurlfiltercachesetting"], () => require("./webfilterIpsurlfiltercachesetting"));

export { WebfilterIpsurlfiltersettingArgs, WebfilterIpsurlfiltersettingState } from "./webfilterIpsurlfiltersetting";
export type WebfilterIpsurlfiltersetting = import("./webfilterIpsurlfiltersetting").WebfilterIpsurlfiltersetting;
export const WebfilterIpsurlfiltersetting: typeof import("./webfilterIpsurlfiltersetting").WebfilterIpsurlfiltersetting = null as any;
utilities.lazyLoad(exports, ["WebfilterIpsurlfiltersetting"], () => require("./webfilterIpsurlfiltersetting"));

export { WebfilterIpsurlfiltersetting6Args, WebfilterIpsurlfiltersetting6State } from "./webfilterIpsurlfiltersetting6";
export type WebfilterIpsurlfiltersetting6 = import("./webfilterIpsurlfiltersetting6").WebfilterIpsurlfiltersetting6;
export const WebfilterIpsurlfiltersetting6: typeof import("./webfilterIpsurlfiltersetting6").WebfilterIpsurlfiltersetting6 = null as any;
utilities.lazyLoad(exports, ["WebfilterIpsurlfiltersetting6"], () => require("./webfilterIpsurlfiltersetting6"));

export { WebfilterOverrideArgs, WebfilterOverrideState } from "./webfilterOverride";
export type WebfilterOverride = import("./webfilterOverride").WebfilterOverride;
export const WebfilterOverride: typeof import("./webfilterOverride").WebfilterOverride = null as any;
utilities.lazyLoad(exports, ["WebfilterOverride"], () => require("./webfilterOverride"));

export { WebfilterSearchengineArgs, WebfilterSearchengineState } from "./webfilterSearchengine";
export type WebfilterSearchengine = import("./webfilterSearchengine").WebfilterSearchengine;
export const WebfilterSearchengine: typeof import("./webfilterSearchengine").WebfilterSearchengine = null as any;
utilities.lazyLoad(exports, ["WebfilterSearchengine"], () => require("./webfilterSearchengine"));

export { WebproxyDebugurlArgs, WebproxyDebugurlState } from "./webproxyDebugurl";
export type WebproxyDebugurl = import("./webproxyDebugurl").WebproxyDebugurl;
export const WebproxyDebugurl: typeof import("./webproxyDebugurl").WebproxyDebugurl = null as any;
utilities.lazyLoad(exports, ["WebproxyDebugurl"], () => require("./webproxyDebugurl"));

export { WebproxyExplicitArgs, WebproxyExplicitState } from "./webproxyExplicit";
export type WebproxyExplicit = import("./webproxyExplicit").WebproxyExplicit;
export const WebproxyExplicit: typeof import("./webproxyExplicit").WebproxyExplicit = null as any;
utilities.lazyLoad(exports, ["WebproxyExplicit"], () => require("./webproxyExplicit"));

export { WebproxyExplicitPacpolicyArgs, WebproxyExplicitPacpolicyState } from "./webproxyExplicitPacpolicy";
export type WebproxyExplicitPacpolicy = import("./webproxyExplicitPacpolicy").WebproxyExplicitPacpolicy;
export const WebproxyExplicitPacpolicy: typeof import("./webproxyExplicitPacpolicy").WebproxyExplicitPacpolicy = null as any;
utilities.lazyLoad(exports, ["WebproxyExplicitPacpolicy"], () => require("./webproxyExplicitPacpolicy"));

export { WebproxyFastfallbackArgs, WebproxyFastfallbackState } from "./webproxyFastfallback";
export type WebproxyFastfallback = import("./webproxyFastfallback").WebproxyFastfallback;
export const WebproxyFastfallback: typeof import("./webproxyFastfallback").WebproxyFastfallback = null as any;
utilities.lazyLoad(exports, ["WebproxyFastfallback"], () => require("./webproxyFastfallback"));

export { WebproxyGlobalArgs, WebproxyGlobalState } from "./webproxyGlobal";
export type WebproxyGlobal = import("./webproxyGlobal").WebproxyGlobal;
export const WebproxyGlobal: typeof import("./webproxyGlobal").WebproxyGlobal = null as any;
utilities.lazyLoad(exports, ["WebproxyGlobal"], () => require("./webproxyGlobal"));

export { WebproxyUrlmatchArgs, WebproxyUrlmatchState } from "./webproxyUrlmatch";
export type WebproxyUrlmatch = import("./webproxyUrlmatch").WebproxyUrlmatch;
export const WebproxyUrlmatch: typeof import("./webproxyUrlmatch").WebproxyUrlmatch = null as any;
utilities.lazyLoad(exports, ["WebproxyUrlmatch"], () => require("./webproxyUrlmatch"));

export { WirelesscontrollerAccesscontrollistArgs, WirelesscontrollerAccesscontrollistState } from "./wirelesscontrollerAccesscontrollist";
export type WirelesscontrollerAccesscontrollist = import("./wirelesscontrollerAccesscontrollist").WirelesscontrollerAccesscontrollist;
export const WirelesscontrollerAccesscontrollist: typeof import("./wirelesscontrollerAccesscontrollist").WirelesscontrollerAccesscontrollist = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerAccesscontrollist"], () => require("./wirelesscontrollerAccesscontrollist"));

export { WirelesscontrollerAccesscontrollistLayer3ipv4rulesArgs, WirelesscontrollerAccesscontrollistLayer3ipv4rulesState } from "./wirelesscontrollerAccesscontrollistLayer3ipv4rules";
export type WirelesscontrollerAccesscontrollistLayer3ipv4rules = import("./wirelesscontrollerAccesscontrollistLayer3ipv4rules").WirelesscontrollerAccesscontrollistLayer3ipv4rules;
export const WirelesscontrollerAccesscontrollistLayer3ipv4rules: typeof import("./wirelesscontrollerAccesscontrollistLayer3ipv4rules").WirelesscontrollerAccesscontrollistLayer3ipv4rules = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerAccesscontrollistLayer3ipv4rules"], () => require("./wirelesscontrollerAccesscontrollistLayer3ipv4rules"));

export { WirelesscontrollerAccesscontrollistLayer3ipv4rulesMoveArgs, WirelesscontrollerAccesscontrollistLayer3ipv4rulesMoveState } from "./wirelesscontrollerAccesscontrollistLayer3ipv4rulesMove";
export type WirelesscontrollerAccesscontrollistLayer3ipv4rulesMove = import("./wirelesscontrollerAccesscontrollistLayer3ipv4rulesMove").WirelesscontrollerAccesscontrollistLayer3ipv4rulesMove;
export const WirelesscontrollerAccesscontrollistLayer3ipv4rulesMove: typeof import("./wirelesscontrollerAccesscontrollistLayer3ipv4rulesMove").WirelesscontrollerAccesscontrollistLayer3ipv4rulesMove = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerAccesscontrollistLayer3ipv4rulesMove"], () => require("./wirelesscontrollerAccesscontrollistLayer3ipv4rulesMove"));

export { WirelesscontrollerAccesscontrollistLayer3ipv6rulesArgs, WirelesscontrollerAccesscontrollistLayer3ipv6rulesState } from "./wirelesscontrollerAccesscontrollistLayer3ipv6rules";
export type WirelesscontrollerAccesscontrollistLayer3ipv6rules = import("./wirelesscontrollerAccesscontrollistLayer3ipv6rules").WirelesscontrollerAccesscontrollistLayer3ipv6rules;
export const WirelesscontrollerAccesscontrollistLayer3ipv6rules: typeof import("./wirelesscontrollerAccesscontrollistLayer3ipv6rules").WirelesscontrollerAccesscontrollistLayer3ipv6rules = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerAccesscontrollistLayer3ipv6rules"], () => require("./wirelesscontrollerAccesscontrollistLayer3ipv6rules"));

export { WirelesscontrollerAccesscontrollistLayer3ipv6rulesMoveArgs, WirelesscontrollerAccesscontrollistLayer3ipv6rulesMoveState } from "./wirelesscontrollerAccesscontrollistLayer3ipv6rulesMove";
export type WirelesscontrollerAccesscontrollistLayer3ipv6rulesMove = import("./wirelesscontrollerAccesscontrollistLayer3ipv6rulesMove").WirelesscontrollerAccesscontrollistLayer3ipv6rulesMove;
export const WirelesscontrollerAccesscontrollistLayer3ipv6rulesMove: typeof import("./wirelesscontrollerAccesscontrollistLayer3ipv6rulesMove").WirelesscontrollerAccesscontrollistLayer3ipv6rulesMove = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerAccesscontrollistLayer3ipv6rulesMove"], () => require("./wirelesscontrollerAccesscontrollistLayer3ipv6rulesMove"));

export { WirelesscontrollerApcfgprofileArgs, WirelesscontrollerApcfgprofileState } from "./wirelesscontrollerApcfgprofile";
export type WirelesscontrollerApcfgprofile = import("./wirelesscontrollerApcfgprofile").WirelesscontrollerApcfgprofile;
export const WirelesscontrollerApcfgprofile: typeof import("./wirelesscontrollerApcfgprofile").WirelesscontrollerApcfgprofile = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerApcfgprofile"], () => require("./wirelesscontrollerApcfgprofile"));

export { WirelesscontrollerApcfgprofileCommandlistArgs, WirelesscontrollerApcfgprofileCommandlistState } from "./wirelesscontrollerApcfgprofileCommandlist";
export type WirelesscontrollerApcfgprofileCommandlist = import("./wirelesscontrollerApcfgprofileCommandlist").WirelesscontrollerApcfgprofileCommandlist;
export const WirelesscontrollerApcfgprofileCommandlist: typeof import("./wirelesscontrollerApcfgprofileCommandlist").WirelesscontrollerApcfgprofileCommandlist = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerApcfgprofileCommandlist"], () => require("./wirelesscontrollerApcfgprofileCommandlist"));

export { WirelesscontrollerApcfgprofileCommandlistMoveArgs, WirelesscontrollerApcfgprofileCommandlistMoveState } from "./wirelesscontrollerApcfgprofileCommandlistMove";
export type WirelesscontrollerApcfgprofileCommandlistMove = import("./wirelesscontrollerApcfgprofileCommandlistMove").WirelesscontrollerApcfgprofileCommandlistMove;
export const WirelesscontrollerApcfgprofileCommandlistMove: typeof import("./wirelesscontrollerApcfgprofileCommandlistMove").WirelesscontrollerApcfgprofileCommandlistMove = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerApcfgprofileCommandlistMove"], () => require("./wirelesscontrollerApcfgprofileCommandlistMove"));

export { WirelesscontrollerApstatusArgs, WirelesscontrollerApstatusState } from "./wirelesscontrollerApstatus";
export type WirelesscontrollerApstatus = import("./wirelesscontrollerApstatus").WirelesscontrollerApstatus;
export const WirelesscontrollerApstatus: typeof import("./wirelesscontrollerApstatus").WirelesscontrollerApstatus = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerApstatus"], () => require("./wirelesscontrollerApstatus"));

export { WirelesscontrollerArrpprofileArgs, WirelesscontrollerArrpprofileState } from "./wirelesscontrollerArrpprofile";
export type WirelesscontrollerArrpprofile = import("./wirelesscontrollerArrpprofile").WirelesscontrollerArrpprofile;
export const WirelesscontrollerArrpprofile: typeof import("./wirelesscontrollerArrpprofile").WirelesscontrollerArrpprofile = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerArrpprofile"], () => require("./wirelesscontrollerArrpprofile"));

export { WirelesscontrollerBleprofileArgs, WirelesscontrollerBleprofileState } from "./wirelesscontrollerBleprofile";
export type WirelesscontrollerBleprofile = import("./wirelesscontrollerBleprofile").WirelesscontrollerBleprofile;
export const WirelesscontrollerBleprofile: typeof import("./wirelesscontrollerBleprofile").WirelesscontrollerBleprofile = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerBleprofile"], () => require("./wirelesscontrollerBleprofile"));

export { WirelesscontrollerBonjourprofileArgs, WirelesscontrollerBonjourprofileState } from "./wirelesscontrollerBonjourprofile";
export type WirelesscontrollerBonjourprofile = import("./wirelesscontrollerBonjourprofile").WirelesscontrollerBonjourprofile;
export const WirelesscontrollerBonjourprofile: typeof import("./wirelesscontrollerBonjourprofile").WirelesscontrollerBonjourprofile = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerBonjourprofile"], () => require("./wirelesscontrollerBonjourprofile"));

export { WirelesscontrollerBonjourprofilePolicylistArgs, WirelesscontrollerBonjourprofilePolicylistState } from "./wirelesscontrollerBonjourprofilePolicylist";
export type WirelesscontrollerBonjourprofilePolicylist = import("./wirelesscontrollerBonjourprofilePolicylist").WirelesscontrollerBonjourprofilePolicylist;
export const WirelesscontrollerBonjourprofilePolicylist: typeof import("./wirelesscontrollerBonjourprofilePolicylist").WirelesscontrollerBonjourprofilePolicylist = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerBonjourprofilePolicylist"], () => require("./wirelesscontrollerBonjourprofilePolicylist"));

export { WirelesscontrollerBonjourprofilePolicylistMoveArgs, WirelesscontrollerBonjourprofilePolicylistMoveState } from "./wirelesscontrollerBonjourprofilePolicylistMove";
export type WirelesscontrollerBonjourprofilePolicylistMove = import("./wirelesscontrollerBonjourprofilePolicylistMove").WirelesscontrollerBonjourprofilePolicylistMove;
export const WirelesscontrollerBonjourprofilePolicylistMove: typeof import("./wirelesscontrollerBonjourprofilePolicylistMove").WirelesscontrollerBonjourprofilePolicylistMove = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerBonjourprofilePolicylistMove"], () => require("./wirelesscontrollerBonjourprofilePolicylistMove"));

export { WirelesscontrollerGlobalArgs, WirelesscontrollerGlobalState } from "./wirelesscontrollerGlobal";
export type WirelesscontrollerGlobal = import("./wirelesscontrollerGlobal").WirelesscontrollerGlobal;
export const WirelesscontrollerGlobal: typeof import("./wirelesscontrollerGlobal").WirelesscontrollerGlobal = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerGlobal"], () => require("./wirelesscontrollerGlobal"));

export { WirelesscontrollerHotspot20Anqp3gppcellularArgs, WirelesscontrollerHotspot20Anqp3gppcellularState } from "./wirelesscontrollerHotspot20Anqp3gppcellular";
export type WirelesscontrollerHotspot20Anqp3gppcellular = import("./wirelesscontrollerHotspot20Anqp3gppcellular").WirelesscontrollerHotspot20Anqp3gppcellular;
export const WirelesscontrollerHotspot20Anqp3gppcellular: typeof import("./wirelesscontrollerHotspot20Anqp3gppcellular").WirelesscontrollerHotspot20Anqp3gppcellular = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerHotspot20Anqp3gppcellular"], () => require("./wirelesscontrollerHotspot20Anqp3gppcellular"));

export { WirelesscontrollerHotspot20Anqp3gppcellularMccmnclistArgs, WirelesscontrollerHotspot20Anqp3gppcellularMccmnclistState } from "./wirelesscontrollerHotspot20Anqp3gppcellularMccmnclist";
export type WirelesscontrollerHotspot20Anqp3gppcellularMccmnclist = import("./wirelesscontrollerHotspot20Anqp3gppcellularMccmnclist").WirelesscontrollerHotspot20Anqp3gppcellularMccmnclist;
export const WirelesscontrollerHotspot20Anqp3gppcellularMccmnclist: typeof import("./wirelesscontrollerHotspot20Anqp3gppcellularMccmnclist").WirelesscontrollerHotspot20Anqp3gppcellularMccmnclist = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerHotspot20Anqp3gppcellularMccmnclist"], () => require("./wirelesscontrollerHotspot20Anqp3gppcellularMccmnclist"));

export { WirelesscontrollerHotspot20AnqpipaddresstypeArgs, WirelesscontrollerHotspot20AnqpipaddresstypeState } from "./wirelesscontrollerHotspot20Anqpipaddresstype";
export type WirelesscontrollerHotspot20Anqpipaddresstype = import("./wirelesscontrollerHotspot20Anqpipaddresstype").WirelesscontrollerHotspot20Anqpipaddresstype;
export const WirelesscontrollerHotspot20Anqpipaddresstype: typeof import("./wirelesscontrollerHotspot20Anqpipaddresstype").WirelesscontrollerHotspot20Anqpipaddresstype = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerHotspot20Anqpipaddresstype"], () => require("./wirelesscontrollerHotspot20Anqpipaddresstype"));

export { WirelesscontrollerHotspot20AnqpnairealmArgs, WirelesscontrollerHotspot20AnqpnairealmState } from "./wirelesscontrollerHotspot20Anqpnairealm";
export type WirelesscontrollerHotspot20Anqpnairealm = import("./wirelesscontrollerHotspot20Anqpnairealm").WirelesscontrollerHotspot20Anqpnairealm;
export const WirelesscontrollerHotspot20Anqpnairealm: typeof import("./wirelesscontrollerHotspot20Anqpnairealm").WirelesscontrollerHotspot20Anqpnairealm = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerHotspot20Anqpnairealm"], () => require("./wirelesscontrollerHotspot20Anqpnairealm"));

export { WirelesscontrollerHotspot20AnqpnairealmNailistArgs, WirelesscontrollerHotspot20AnqpnairealmNailistState } from "./wirelesscontrollerHotspot20AnqpnairealmNailist";
export type WirelesscontrollerHotspot20AnqpnairealmNailist = import("./wirelesscontrollerHotspot20AnqpnairealmNailist").WirelesscontrollerHotspot20AnqpnairealmNailist;
export const WirelesscontrollerHotspot20AnqpnairealmNailist: typeof import("./wirelesscontrollerHotspot20AnqpnairealmNailist").WirelesscontrollerHotspot20AnqpnairealmNailist = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerHotspot20AnqpnairealmNailist"], () => require("./wirelesscontrollerHotspot20AnqpnairealmNailist"));

export { WirelesscontrollerHotspot20AnqpnairealmNailistEapmethodArgs, WirelesscontrollerHotspot20AnqpnairealmNailistEapmethodState } from "./wirelesscontrollerHotspot20AnqpnairealmNailistEapmethod";
export type WirelesscontrollerHotspot20AnqpnairealmNailistEapmethod = import("./wirelesscontrollerHotspot20AnqpnairealmNailistEapmethod").WirelesscontrollerHotspot20AnqpnairealmNailistEapmethod;
export const WirelesscontrollerHotspot20AnqpnairealmNailistEapmethod: typeof import("./wirelesscontrollerHotspot20AnqpnairealmNailistEapmethod").WirelesscontrollerHotspot20AnqpnairealmNailistEapmethod = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerHotspot20AnqpnairealmNailistEapmethod"], () => require("./wirelesscontrollerHotspot20AnqpnairealmNailistEapmethod"));

export { WirelesscontrollerHotspot20AnqpnairealmNailistEapmethodAuthparamArgs, WirelesscontrollerHotspot20AnqpnairealmNailistEapmethodAuthparamState } from "./wirelesscontrollerHotspot20AnqpnairealmNailistEapmethodAuthparam";
export type WirelesscontrollerHotspot20AnqpnairealmNailistEapmethodAuthparam = import("./wirelesscontrollerHotspot20AnqpnairealmNailistEapmethodAuthparam").WirelesscontrollerHotspot20AnqpnairealmNailistEapmethodAuthparam;
export const WirelesscontrollerHotspot20AnqpnairealmNailistEapmethodAuthparam: typeof import("./wirelesscontrollerHotspot20AnqpnairealmNailistEapmethodAuthparam").WirelesscontrollerHotspot20AnqpnairealmNailistEapmethodAuthparam = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerHotspot20AnqpnairealmNailistEapmethodAuthparam"], () => require("./wirelesscontrollerHotspot20AnqpnairealmNailistEapmethodAuthparam"));

export { WirelesscontrollerHotspot20AnqpnetworkauthtypeArgs, WirelesscontrollerHotspot20AnqpnetworkauthtypeState } from "./wirelesscontrollerHotspot20Anqpnetworkauthtype";
export type WirelesscontrollerHotspot20Anqpnetworkauthtype = import("./wirelesscontrollerHotspot20Anqpnetworkauthtype").WirelesscontrollerHotspot20Anqpnetworkauthtype;
export const WirelesscontrollerHotspot20Anqpnetworkauthtype: typeof import("./wirelesscontrollerHotspot20Anqpnetworkauthtype").WirelesscontrollerHotspot20Anqpnetworkauthtype = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerHotspot20Anqpnetworkauthtype"], () => require("./wirelesscontrollerHotspot20Anqpnetworkauthtype"));

export { WirelesscontrollerHotspot20AnqproamingconsortiumArgs, WirelesscontrollerHotspot20AnqproamingconsortiumState } from "./wirelesscontrollerHotspot20Anqproamingconsortium";
export type WirelesscontrollerHotspot20Anqproamingconsortium = import("./wirelesscontrollerHotspot20Anqproamingconsortium").WirelesscontrollerHotspot20Anqproamingconsortium;
export const WirelesscontrollerHotspot20Anqproamingconsortium: typeof import("./wirelesscontrollerHotspot20Anqproamingconsortium").WirelesscontrollerHotspot20Anqproamingconsortium = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerHotspot20Anqproamingconsortium"], () => require("./wirelesscontrollerHotspot20Anqproamingconsortium"));

export { WirelesscontrollerHotspot20AnqproamingconsortiumOilistArgs, WirelesscontrollerHotspot20AnqproamingconsortiumOilistState } from "./wirelesscontrollerHotspot20AnqproamingconsortiumOilist";
export type WirelesscontrollerHotspot20AnqproamingconsortiumOilist = import("./wirelesscontrollerHotspot20AnqproamingconsortiumOilist").WirelesscontrollerHotspot20AnqproamingconsortiumOilist;
export const WirelesscontrollerHotspot20AnqproamingconsortiumOilist: typeof import("./wirelesscontrollerHotspot20AnqproamingconsortiumOilist").WirelesscontrollerHotspot20AnqproamingconsortiumOilist = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerHotspot20AnqproamingconsortiumOilist"], () => require("./wirelesscontrollerHotspot20AnqproamingconsortiumOilist"));

export { WirelesscontrollerHotspot20AnqpvenuenameArgs, WirelesscontrollerHotspot20AnqpvenuenameState } from "./wirelesscontrollerHotspot20Anqpvenuename";
export type WirelesscontrollerHotspot20Anqpvenuename = import("./wirelesscontrollerHotspot20Anqpvenuename").WirelesscontrollerHotspot20Anqpvenuename;
export const WirelesscontrollerHotspot20Anqpvenuename: typeof import("./wirelesscontrollerHotspot20Anqpvenuename").WirelesscontrollerHotspot20Anqpvenuename = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerHotspot20Anqpvenuename"], () => require("./wirelesscontrollerHotspot20Anqpvenuename"));

export { WirelesscontrollerHotspot20AnqpvenuenameValuelistArgs, WirelesscontrollerHotspot20AnqpvenuenameValuelistState } from "./wirelesscontrollerHotspot20AnqpvenuenameValuelist";
export type WirelesscontrollerHotspot20AnqpvenuenameValuelist = import("./wirelesscontrollerHotspot20AnqpvenuenameValuelist").WirelesscontrollerHotspot20AnqpvenuenameValuelist;
export const WirelesscontrollerHotspot20AnqpvenuenameValuelist: typeof import("./wirelesscontrollerHotspot20AnqpvenuenameValuelist").WirelesscontrollerHotspot20AnqpvenuenameValuelist = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerHotspot20AnqpvenuenameValuelist"], () => require("./wirelesscontrollerHotspot20AnqpvenuenameValuelist"));

export { WirelesscontrollerHotspot20AnqpvenueurlArgs, WirelesscontrollerHotspot20AnqpvenueurlState } from "./wirelesscontrollerHotspot20Anqpvenueurl";
export type WirelesscontrollerHotspot20Anqpvenueurl = import("./wirelesscontrollerHotspot20Anqpvenueurl").WirelesscontrollerHotspot20Anqpvenueurl;
export const WirelesscontrollerHotspot20Anqpvenueurl: typeof import("./wirelesscontrollerHotspot20Anqpvenueurl").WirelesscontrollerHotspot20Anqpvenueurl = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerHotspot20Anqpvenueurl"], () => require("./wirelesscontrollerHotspot20Anqpvenueurl"));

export { WirelesscontrollerHotspot20AnqpvenueurlValuelistArgs, WirelesscontrollerHotspot20AnqpvenueurlValuelistState } from "./wirelesscontrollerHotspot20AnqpvenueurlValuelist";
export type WirelesscontrollerHotspot20AnqpvenueurlValuelist = import("./wirelesscontrollerHotspot20AnqpvenueurlValuelist").WirelesscontrollerHotspot20AnqpvenueurlValuelist;
export const WirelesscontrollerHotspot20AnqpvenueurlValuelist: typeof import("./wirelesscontrollerHotspot20AnqpvenueurlValuelist").WirelesscontrollerHotspot20AnqpvenueurlValuelist = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerHotspot20AnqpvenueurlValuelist"], () => require("./wirelesscontrollerHotspot20AnqpvenueurlValuelist"));

export { WirelesscontrollerHotspot20H2qpadviceofchargeArgs, WirelesscontrollerHotspot20H2qpadviceofchargeState } from "./wirelesscontrollerHotspot20H2qpadviceofcharge";
export type WirelesscontrollerHotspot20H2qpadviceofcharge = import("./wirelesscontrollerHotspot20H2qpadviceofcharge").WirelesscontrollerHotspot20H2qpadviceofcharge;
export const WirelesscontrollerHotspot20H2qpadviceofcharge: typeof import("./wirelesscontrollerHotspot20H2qpadviceofcharge").WirelesscontrollerHotspot20H2qpadviceofcharge = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerHotspot20H2qpadviceofcharge"], () => require("./wirelesscontrollerHotspot20H2qpadviceofcharge"));

export { WirelesscontrollerHotspot20H2qpadviceofchargeAoclistArgs, WirelesscontrollerHotspot20H2qpadviceofchargeAoclistState } from "./wirelesscontrollerHotspot20H2qpadviceofchargeAoclist";
export type WirelesscontrollerHotspot20H2qpadviceofchargeAoclist = import("./wirelesscontrollerHotspot20H2qpadviceofchargeAoclist").WirelesscontrollerHotspot20H2qpadviceofchargeAoclist;
export const WirelesscontrollerHotspot20H2qpadviceofchargeAoclist: typeof import("./wirelesscontrollerHotspot20H2qpadviceofchargeAoclist").WirelesscontrollerHotspot20H2qpadviceofchargeAoclist = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerHotspot20H2qpadviceofchargeAoclist"], () => require("./wirelesscontrollerHotspot20H2qpadviceofchargeAoclist"));

export { WirelesscontrollerHotspot20H2qpadviceofchargeAoclistPlaninfoArgs, WirelesscontrollerHotspot20H2qpadviceofchargeAoclistPlaninfoState } from "./wirelesscontrollerHotspot20H2qpadviceofchargeAoclistPlaninfo";
export type WirelesscontrollerHotspot20H2qpadviceofchargeAoclistPlaninfo = import("./wirelesscontrollerHotspot20H2qpadviceofchargeAoclistPlaninfo").WirelesscontrollerHotspot20H2qpadviceofchargeAoclistPlaninfo;
export const WirelesscontrollerHotspot20H2qpadviceofchargeAoclistPlaninfo: typeof import("./wirelesscontrollerHotspot20H2qpadviceofchargeAoclistPlaninfo").WirelesscontrollerHotspot20H2qpadviceofchargeAoclistPlaninfo = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerHotspot20H2qpadviceofchargeAoclistPlaninfo"], () => require("./wirelesscontrollerHotspot20H2qpadviceofchargeAoclistPlaninfo"));

export { WirelesscontrollerHotspot20H2qpconncapabilityArgs, WirelesscontrollerHotspot20H2qpconncapabilityState } from "./wirelesscontrollerHotspot20H2qpconncapability";
export type WirelesscontrollerHotspot20H2qpconncapability = import("./wirelesscontrollerHotspot20H2qpconncapability").WirelesscontrollerHotspot20H2qpconncapability;
export const WirelesscontrollerHotspot20H2qpconncapability: typeof import("./wirelesscontrollerHotspot20H2qpconncapability").WirelesscontrollerHotspot20H2qpconncapability = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerHotspot20H2qpconncapability"], () => require("./wirelesscontrollerHotspot20H2qpconncapability"));

export { WirelesscontrollerHotspot20H2qpoperatornameArgs, WirelesscontrollerHotspot20H2qpoperatornameState } from "./wirelesscontrollerHotspot20H2qpoperatorname";
export type WirelesscontrollerHotspot20H2qpoperatorname = import("./wirelesscontrollerHotspot20H2qpoperatorname").WirelesscontrollerHotspot20H2qpoperatorname;
export const WirelesscontrollerHotspot20H2qpoperatorname: typeof import("./wirelesscontrollerHotspot20H2qpoperatorname").WirelesscontrollerHotspot20H2qpoperatorname = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerHotspot20H2qpoperatorname"], () => require("./wirelesscontrollerHotspot20H2qpoperatorname"));

export { WirelesscontrollerHotspot20H2qpoperatornameValuelistArgs, WirelesscontrollerHotspot20H2qpoperatornameValuelistState } from "./wirelesscontrollerHotspot20H2qpoperatornameValuelist";
export type WirelesscontrollerHotspot20H2qpoperatornameValuelist = import("./wirelesscontrollerHotspot20H2qpoperatornameValuelist").WirelesscontrollerHotspot20H2qpoperatornameValuelist;
export const WirelesscontrollerHotspot20H2qpoperatornameValuelist: typeof import("./wirelesscontrollerHotspot20H2qpoperatornameValuelist").WirelesscontrollerHotspot20H2qpoperatornameValuelist = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerHotspot20H2qpoperatornameValuelist"], () => require("./wirelesscontrollerHotspot20H2qpoperatornameValuelist"));

export { WirelesscontrollerHotspot20H2qposuproviderArgs, WirelesscontrollerHotspot20H2qposuproviderState } from "./wirelesscontrollerHotspot20H2qposuprovider";
export type WirelesscontrollerHotspot20H2qposuprovider = import("./wirelesscontrollerHotspot20H2qposuprovider").WirelesscontrollerHotspot20H2qposuprovider;
export const WirelesscontrollerHotspot20H2qposuprovider: typeof import("./wirelesscontrollerHotspot20H2qposuprovider").WirelesscontrollerHotspot20H2qposuprovider = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerHotspot20H2qposuprovider"], () => require("./wirelesscontrollerHotspot20H2qposuprovider"));

export { WirelesscontrollerHotspot20H2qposuproviderFriendlynameArgs, WirelesscontrollerHotspot20H2qposuproviderFriendlynameState } from "./wirelesscontrollerHotspot20H2qposuproviderFriendlyname";
export type WirelesscontrollerHotspot20H2qposuproviderFriendlyname = import("./wirelesscontrollerHotspot20H2qposuproviderFriendlyname").WirelesscontrollerHotspot20H2qposuproviderFriendlyname;
export const WirelesscontrollerHotspot20H2qposuproviderFriendlyname: typeof import("./wirelesscontrollerHotspot20H2qposuproviderFriendlyname").WirelesscontrollerHotspot20H2qposuproviderFriendlyname = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerHotspot20H2qposuproviderFriendlyname"], () => require("./wirelesscontrollerHotspot20H2qposuproviderFriendlyname"));

export { WirelesscontrollerHotspot20H2qposuproviderServicedescriptionArgs, WirelesscontrollerHotspot20H2qposuproviderServicedescriptionState } from "./wirelesscontrollerHotspot20H2qposuproviderServicedescription";
export type WirelesscontrollerHotspot20H2qposuproviderServicedescription = import("./wirelesscontrollerHotspot20H2qposuproviderServicedescription").WirelesscontrollerHotspot20H2qposuproviderServicedescription;
export const WirelesscontrollerHotspot20H2qposuproviderServicedescription: typeof import("./wirelesscontrollerHotspot20H2qposuproviderServicedescription").WirelesscontrollerHotspot20H2qposuproviderServicedescription = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerHotspot20H2qposuproviderServicedescription"], () => require("./wirelesscontrollerHotspot20H2qposuproviderServicedescription"));

export { WirelesscontrollerHotspot20H2qposuprovidernaiArgs, WirelesscontrollerHotspot20H2qposuprovidernaiState } from "./wirelesscontrollerHotspot20H2qposuprovidernai";
export type WirelesscontrollerHotspot20H2qposuprovidernai = import("./wirelesscontrollerHotspot20H2qposuprovidernai").WirelesscontrollerHotspot20H2qposuprovidernai;
export const WirelesscontrollerHotspot20H2qposuprovidernai: typeof import("./wirelesscontrollerHotspot20H2qposuprovidernai").WirelesscontrollerHotspot20H2qposuprovidernai = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerHotspot20H2qposuprovidernai"], () => require("./wirelesscontrollerHotspot20H2qposuprovidernai"));

export { WirelesscontrollerHotspot20H2qposuprovidernaiNailistArgs, WirelesscontrollerHotspot20H2qposuprovidernaiNailistState } from "./wirelesscontrollerHotspot20H2qposuprovidernaiNailist";
export type WirelesscontrollerHotspot20H2qposuprovidernaiNailist = import("./wirelesscontrollerHotspot20H2qposuprovidernaiNailist").WirelesscontrollerHotspot20H2qposuprovidernaiNailist;
export const WirelesscontrollerHotspot20H2qposuprovidernaiNailist: typeof import("./wirelesscontrollerHotspot20H2qposuprovidernaiNailist").WirelesscontrollerHotspot20H2qposuprovidernaiNailist = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerHotspot20H2qposuprovidernaiNailist"], () => require("./wirelesscontrollerHotspot20H2qposuprovidernaiNailist"));

export { WirelesscontrollerHotspot20H2qptermsandconditionsArgs, WirelesscontrollerHotspot20H2qptermsandconditionsState } from "./wirelesscontrollerHotspot20H2qptermsandconditions";
export type WirelesscontrollerHotspot20H2qptermsandconditions = import("./wirelesscontrollerHotspot20H2qptermsandconditions").WirelesscontrollerHotspot20H2qptermsandconditions;
export const WirelesscontrollerHotspot20H2qptermsandconditions: typeof import("./wirelesscontrollerHotspot20H2qptermsandconditions").WirelesscontrollerHotspot20H2qptermsandconditions = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerHotspot20H2qptermsandconditions"], () => require("./wirelesscontrollerHotspot20H2qptermsandconditions"));

export { WirelesscontrollerHotspot20H2qpwanmetricArgs, WirelesscontrollerHotspot20H2qpwanmetricState } from "./wirelesscontrollerHotspot20H2qpwanmetric";
export type WirelesscontrollerHotspot20H2qpwanmetric = import("./wirelesscontrollerHotspot20H2qpwanmetric").WirelesscontrollerHotspot20H2qpwanmetric;
export const WirelesscontrollerHotspot20H2qpwanmetric: typeof import("./wirelesscontrollerHotspot20H2qpwanmetric").WirelesscontrollerHotspot20H2qpwanmetric = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerHotspot20H2qpwanmetric"], () => require("./wirelesscontrollerHotspot20H2qpwanmetric"));

export { WirelesscontrollerHotspot20HsprofileArgs, WirelesscontrollerHotspot20HsprofileState } from "./wirelesscontrollerHotspot20Hsprofile";
export type WirelesscontrollerHotspot20Hsprofile = import("./wirelesscontrollerHotspot20Hsprofile").WirelesscontrollerHotspot20Hsprofile;
export const WirelesscontrollerHotspot20Hsprofile: typeof import("./wirelesscontrollerHotspot20Hsprofile").WirelesscontrollerHotspot20Hsprofile = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerHotspot20Hsprofile"], () => require("./wirelesscontrollerHotspot20Hsprofile"));

export { WirelesscontrollerHotspot20IconArgs, WirelesscontrollerHotspot20IconState } from "./wirelesscontrollerHotspot20Icon";
export type WirelesscontrollerHotspot20Icon = import("./wirelesscontrollerHotspot20Icon").WirelesscontrollerHotspot20Icon;
export const WirelesscontrollerHotspot20Icon: typeof import("./wirelesscontrollerHotspot20Icon").WirelesscontrollerHotspot20Icon = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerHotspot20Icon"], () => require("./wirelesscontrollerHotspot20Icon"));

export { WirelesscontrollerHotspot20IconIconlistArgs, WirelesscontrollerHotspot20IconIconlistState } from "./wirelesscontrollerHotspot20IconIconlist";
export type WirelesscontrollerHotspot20IconIconlist = import("./wirelesscontrollerHotspot20IconIconlist").WirelesscontrollerHotspot20IconIconlist;
export const WirelesscontrollerHotspot20IconIconlist: typeof import("./wirelesscontrollerHotspot20IconIconlist").WirelesscontrollerHotspot20IconIconlist = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerHotspot20IconIconlist"], () => require("./wirelesscontrollerHotspot20IconIconlist"));

export { WirelesscontrollerHotspot20QosmapArgs, WirelesscontrollerHotspot20QosmapState } from "./wirelesscontrollerHotspot20Qosmap";
export type WirelesscontrollerHotspot20Qosmap = import("./wirelesscontrollerHotspot20Qosmap").WirelesscontrollerHotspot20Qosmap;
export const WirelesscontrollerHotspot20Qosmap: typeof import("./wirelesscontrollerHotspot20Qosmap").WirelesscontrollerHotspot20Qosmap = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerHotspot20Qosmap"], () => require("./wirelesscontrollerHotspot20Qosmap"));

export { WirelesscontrollerHotspot20QosmapDscpexceptArgs, WirelesscontrollerHotspot20QosmapDscpexceptState } from "./wirelesscontrollerHotspot20QosmapDscpexcept";
export type WirelesscontrollerHotspot20QosmapDscpexcept = import("./wirelesscontrollerHotspot20QosmapDscpexcept").WirelesscontrollerHotspot20QosmapDscpexcept;
export const WirelesscontrollerHotspot20QosmapDscpexcept: typeof import("./wirelesscontrollerHotspot20QosmapDscpexcept").WirelesscontrollerHotspot20QosmapDscpexcept = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerHotspot20QosmapDscpexcept"], () => require("./wirelesscontrollerHotspot20QosmapDscpexcept"));

export { WirelesscontrollerHotspot20QosmapDscprangeArgs, WirelesscontrollerHotspot20QosmapDscprangeState } from "./wirelesscontrollerHotspot20QosmapDscprange";
export type WirelesscontrollerHotspot20QosmapDscprange = import("./wirelesscontrollerHotspot20QosmapDscprange").WirelesscontrollerHotspot20QosmapDscprange;
export const WirelesscontrollerHotspot20QosmapDscprange: typeof import("./wirelesscontrollerHotspot20QosmapDscprange").WirelesscontrollerHotspot20QosmapDscprange = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerHotspot20QosmapDscprange"], () => require("./wirelesscontrollerHotspot20QosmapDscprange"));

export { WirelesscontrollerIntercontrollerArgs, WirelesscontrollerIntercontrollerState } from "./wirelesscontrollerIntercontroller";
export type WirelesscontrollerIntercontroller = import("./wirelesscontrollerIntercontroller").WirelesscontrollerIntercontroller;
export const WirelesscontrollerIntercontroller: typeof import("./wirelesscontrollerIntercontroller").WirelesscontrollerIntercontroller = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerIntercontroller"], () => require("./wirelesscontrollerIntercontroller"));

export { WirelesscontrollerIntercontrollerIntercontrollerpeerArgs, WirelesscontrollerIntercontrollerIntercontrollerpeerState } from "./wirelesscontrollerIntercontrollerIntercontrollerpeer";
export type WirelesscontrollerIntercontrollerIntercontrollerpeer = import("./wirelesscontrollerIntercontrollerIntercontrollerpeer").WirelesscontrollerIntercontrollerIntercontrollerpeer;
export const WirelesscontrollerIntercontrollerIntercontrollerpeer: typeof import("./wirelesscontrollerIntercontrollerIntercontrollerpeer").WirelesscontrollerIntercontrollerIntercontrollerpeer = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerIntercontrollerIntercontrollerpeer"], () => require("./wirelesscontrollerIntercontrollerIntercontrollerpeer"));

export { WirelesscontrollerLogArgs, WirelesscontrollerLogState } from "./wirelesscontrollerLog";
export type WirelesscontrollerLog = import("./wirelesscontrollerLog").WirelesscontrollerLog;
export const WirelesscontrollerLog: typeof import("./wirelesscontrollerLog").WirelesscontrollerLog = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerLog"], () => require("./wirelesscontrollerLog"));

export { WirelesscontrollerMpskprofileArgs, WirelesscontrollerMpskprofileState } from "./wirelesscontrollerMpskprofile";
export type WirelesscontrollerMpskprofile = import("./wirelesscontrollerMpskprofile").WirelesscontrollerMpskprofile;
export const WirelesscontrollerMpskprofile: typeof import("./wirelesscontrollerMpskprofile").WirelesscontrollerMpskprofile = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerMpskprofile"], () => require("./wirelesscontrollerMpskprofile"));

export { WirelesscontrollerMpskprofileMpskgroupArgs, WirelesscontrollerMpskprofileMpskgroupState } from "./wirelesscontrollerMpskprofileMpskgroup";
export type WirelesscontrollerMpskprofileMpskgroup = import("./wirelesscontrollerMpskprofileMpskgroup").WirelesscontrollerMpskprofileMpskgroup;
export const WirelesscontrollerMpskprofileMpskgroup: typeof import("./wirelesscontrollerMpskprofileMpskgroup").WirelesscontrollerMpskprofileMpskgroup = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerMpskprofileMpskgroup"], () => require("./wirelesscontrollerMpskprofileMpskgroup"));

export { WirelesscontrollerMpskprofileMpskgroupMpskkeyArgs, WirelesscontrollerMpskprofileMpskgroupMpskkeyState } from "./wirelesscontrollerMpskprofileMpskgroupMpskkey";
export type WirelesscontrollerMpskprofileMpskgroupMpskkey = import("./wirelesscontrollerMpskprofileMpskgroupMpskkey").WirelesscontrollerMpskprofileMpskgroupMpskkey;
export const WirelesscontrollerMpskprofileMpskgroupMpskkey: typeof import("./wirelesscontrollerMpskprofileMpskgroupMpskkey").WirelesscontrollerMpskprofileMpskgroupMpskkey = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerMpskprofileMpskgroupMpskkey"], () => require("./wirelesscontrollerMpskprofileMpskgroupMpskkey"));

export { WirelesscontrollerNacprofileArgs, WirelesscontrollerNacprofileState } from "./wirelesscontrollerNacprofile";
export type WirelesscontrollerNacprofile = import("./wirelesscontrollerNacprofile").WirelesscontrollerNacprofile;
export const WirelesscontrollerNacprofile: typeof import("./wirelesscontrollerNacprofile").WirelesscontrollerNacprofile = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerNacprofile"], () => require("./wirelesscontrollerNacprofile"));

export { WirelesscontrollerQosprofileArgs, WirelesscontrollerQosprofileState } from "./wirelesscontrollerQosprofile";
export type WirelesscontrollerQosprofile = import("./wirelesscontrollerQosprofile").WirelesscontrollerQosprofile;
export const WirelesscontrollerQosprofile: typeof import("./wirelesscontrollerQosprofile").WirelesscontrollerQosprofile = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerQosprofile"], () => require("./wirelesscontrollerQosprofile"));

export { WirelesscontrollerRegionArgs, WirelesscontrollerRegionState } from "./wirelesscontrollerRegion";
export type WirelesscontrollerRegion = import("./wirelesscontrollerRegion").WirelesscontrollerRegion;
export const WirelesscontrollerRegion: typeof import("./wirelesscontrollerRegion").WirelesscontrollerRegion = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerRegion"], () => require("./wirelesscontrollerRegion"));

export { WirelesscontrollerSettingArgs, WirelesscontrollerSettingState } from "./wirelesscontrollerSetting";
export type WirelesscontrollerSetting = import("./wirelesscontrollerSetting").WirelesscontrollerSetting;
export const WirelesscontrollerSetting: typeof import("./wirelesscontrollerSetting").WirelesscontrollerSetting = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerSetting"], () => require("./wirelesscontrollerSetting"));

export { WirelesscontrollerSettingOffendingssidArgs, WirelesscontrollerSettingOffendingssidState } from "./wirelesscontrollerSettingOffendingssid";
export type WirelesscontrollerSettingOffendingssid = import("./wirelesscontrollerSettingOffendingssid").WirelesscontrollerSettingOffendingssid;
export const WirelesscontrollerSettingOffendingssid: typeof import("./wirelesscontrollerSettingOffendingssid").WirelesscontrollerSettingOffendingssid = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerSettingOffendingssid"], () => require("./wirelesscontrollerSettingOffendingssid"));

export { WirelesscontrollerSnmpArgs, WirelesscontrollerSnmpState } from "./wirelesscontrollerSnmp";
export type WirelesscontrollerSnmp = import("./wirelesscontrollerSnmp").WirelesscontrollerSnmp;
export const WirelesscontrollerSnmp: typeof import("./wirelesscontrollerSnmp").WirelesscontrollerSnmp = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerSnmp"], () => require("./wirelesscontrollerSnmp"));

export { WirelesscontrollerSnmpCommunityArgs, WirelesscontrollerSnmpCommunityState } from "./wirelesscontrollerSnmpCommunity";
export type WirelesscontrollerSnmpCommunity = import("./wirelesscontrollerSnmpCommunity").WirelesscontrollerSnmpCommunity;
export const WirelesscontrollerSnmpCommunity: typeof import("./wirelesscontrollerSnmpCommunity").WirelesscontrollerSnmpCommunity = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerSnmpCommunity"], () => require("./wirelesscontrollerSnmpCommunity"));

export { WirelesscontrollerSnmpCommunityHostsArgs, WirelesscontrollerSnmpCommunityHostsState } from "./wirelesscontrollerSnmpCommunityHosts";
export type WirelesscontrollerSnmpCommunityHosts = import("./wirelesscontrollerSnmpCommunityHosts").WirelesscontrollerSnmpCommunityHosts;
export const WirelesscontrollerSnmpCommunityHosts: typeof import("./wirelesscontrollerSnmpCommunityHosts").WirelesscontrollerSnmpCommunityHosts = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerSnmpCommunityHosts"], () => require("./wirelesscontrollerSnmpCommunityHosts"));

export { WirelesscontrollerSnmpUserArgs, WirelesscontrollerSnmpUserState } from "./wirelesscontrollerSnmpUser";
export type WirelesscontrollerSnmpUser = import("./wirelesscontrollerSnmpUser").WirelesscontrollerSnmpUser;
export const WirelesscontrollerSnmpUser: typeof import("./wirelesscontrollerSnmpUser").WirelesscontrollerSnmpUser = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerSnmpUser"], () => require("./wirelesscontrollerSnmpUser"));

export { WirelesscontrollerSsidpolicyArgs, WirelesscontrollerSsidpolicyState } from "./wirelesscontrollerSsidpolicy";
export type WirelesscontrollerSsidpolicy = import("./wirelesscontrollerSsidpolicy").WirelesscontrollerSsidpolicy;
export const WirelesscontrollerSsidpolicy: typeof import("./wirelesscontrollerSsidpolicy").WirelesscontrollerSsidpolicy = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerSsidpolicy"], () => require("./wirelesscontrollerSsidpolicy"));

export { WirelesscontrollerSyslogprofileArgs, WirelesscontrollerSyslogprofileState } from "./wirelesscontrollerSyslogprofile";
export type WirelesscontrollerSyslogprofile = import("./wirelesscontrollerSyslogprofile").WirelesscontrollerSyslogprofile;
export const WirelesscontrollerSyslogprofile: typeof import("./wirelesscontrollerSyslogprofile").WirelesscontrollerSyslogprofile = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerSyslogprofile"], () => require("./wirelesscontrollerSyslogprofile"));

export { WirelesscontrollerTimersArgs, WirelesscontrollerTimersState } from "./wirelesscontrollerTimers";
export type WirelesscontrollerTimers = import("./wirelesscontrollerTimers").WirelesscontrollerTimers;
export const WirelesscontrollerTimers: typeof import("./wirelesscontrollerTimers").WirelesscontrollerTimers = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerTimers"], () => require("./wirelesscontrollerTimers"));

export { WirelesscontrollerUtmprofileArgs, WirelesscontrollerUtmprofileState } from "./wirelesscontrollerUtmprofile";
export type WirelesscontrollerUtmprofile = import("./wirelesscontrollerUtmprofile").WirelesscontrollerUtmprofile;
export const WirelesscontrollerUtmprofile: typeof import("./wirelesscontrollerUtmprofile").WirelesscontrollerUtmprofile = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerUtmprofile"], () => require("./wirelesscontrollerUtmprofile"));

export { WirelesscontrollerVapArgs, WirelesscontrollerVapState } from "./wirelesscontrollerVap";
export type WirelesscontrollerVap = import("./wirelesscontrollerVap").WirelesscontrollerVap;
export const WirelesscontrollerVap: typeof import("./wirelesscontrollerVap").WirelesscontrollerVap = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerVap"], () => require("./wirelesscontrollerVap"));

export { WirelesscontrollerVapPortalmessageoverridesArgs, WirelesscontrollerVapPortalmessageoverridesState } from "./wirelesscontrollerVapPortalmessageoverrides";
export type WirelesscontrollerVapPortalmessageoverrides = import("./wirelesscontrollerVapPortalmessageoverrides").WirelesscontrollerVapPortalmessageoverrides;
export const WirelesscontrollerVapPortalmessageoverrides: typeof import("./wirelesscontrollerVapPortalmessageoverrides").WirelesscontrollerVapPortalmessageoverrides = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerVapPortalmessageoverrides"], () => require("./wirelesscontrollerVapPortalmessageoverrides"));

export { WirelesscontrollerVapVlannameArgs, WirelesscontrollerVapVlannameState } from "./wirelesscontrollerVapVlanname";
export type WirelesscontrollerVapVlanname = import("./wirelesscontrollerVapVlanname").WirelesscontrollerVapVlanname;
export const WirelesscontrollerVapVlanname: typeof import("./wirelesscontrollerVapVlanname").WirelesscontrollerVapVlanname = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerVapVlanname"], () => require("./wirelesscontrollerVapVlanname"));

export { WirelesscontrollerVapVlannameMoveArgs, WirelesscontrollerVapVlannameMoveState } from "./wirelesscontrollerVapVlannameMove";
export type WirelesscontrollerVapVlannameMove = import("./wirelesscontrollerVapVlannameMove").WirelesscontrollerVapVlannameMove;
export const WirelesscontrollerVapVlannameMove: typeof import("./wirelesscontrollerVapVlannameMove").WirelesscontrollerVapVlannameMove = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerVapVlannameMove"], () => require("./wirelesscontrollerVapVlannameMove"));

export { WirelesscontrollerVapgroupArgs, WirelesscontrollerVapgroupState } from "./wirelesscontrollerVapgroup";
export type WirelesscontrollerVapgroup = import("./wirelesscontrollerVapgroup").WirelesscontrollerVapgroup;
export const WirelesscontrollerVapgroup: typeof import("./wirelesscontrollerVapgroup").WirelesscontrollerVapgroup = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerVapgroup"], () => require("./wirelesscontrollerVapgroup"));

export { WirelesscontrollerWagprofileArgs, WirelesscontrollerWagprofileState } from "./wirelesscontrollerWagprofile";
export type WirelesscontrollerWagprofile = import("./wirelesscontrollerWagprofile").WirelesscontrollerWagprofile;
export const WirelesscontrollerWagprofile: typeof import("./wirelesscontrollerWagprofile").WirelesscontrollerWagprofile = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerWagprofile"], () => require("./wirelesscontrollerWagprofile"));

export { WirelesscontrollerWidsprofileArgs, WirelesscontrollerWidsprofileState } from "./wirelesscontrollerWidsprofile";
export type WirelesscontrollerWidsprofile = import("./wirelesscontrollerWidsprofile").WirelesscontrollerWidsprofile;
export const WirelesscontrollerWidsprofile: typeof import("./wirelesscontrollerWidsprofile").WirelesscontrollerWidsprofile = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerWidsprofile"], () => require("./wirelesscontrollerWidsprofile"));

export { WirelesscontrollerWtpArgs, WirelesscontrollerWtpState } from "./wirelesscontrollerWtp";
export type WirelesscontrollerWtp = import("./wirelesscontrollerWtp").WirelesscontrollerWtp;
export const WirelesscontrollerWtp: typeof import("./wirelesscontrollerWtp").WirelesscontrollerWtp = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerWtp"], () => require("./wirelesscontrollerWtp"));

export { WirelesscontrollerWtpLanArgs, WirelesscontrollerWtpLanState } from "./wirelesscontrollerWtpLan";
export type WirelesscontrollerWtpLan = import("./wirelesscontrollerWtpLan").WirelesscontrollerWtpLan;
export const WirelesscontrollerWtpLan: typeof import("./wirelesscontrollerWtpLan").WirelesscontrollerWtpLan = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerWtpLan"], () => require("./wirelesscontrollerWtpLan"));

export { WirelesscontrollerWtpMoveArgs, WirelesscontrollerWtpMoveState } from "./wirelesscontrollerWtpMove";
export type WirelesscontrollerWtpMove = import("./wirelesscontrollerWtpMove").WirelesscontrollerWtpMove;
export const WirelesscontrollerWtpMove: typeof import("./wirelesscontrollerWtpMove").WirelesscontrollerWtpMove = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerWtpMove"], () => require("./wirelesscontrollerWtpMove"));

export { WirelesscontrollerWtpRadio1Args, WirelesscontrollerWtpRadio1State } from "./wirelesscontrollerWtpRadio1";
export type WirelesscontrollerWtpRadio1 = import("./wirelesscontrollerWtpRadio1").WirelesscontrollerWtpRadio1;
export const WirelesscontrollerWtpRadio1: typeof import("./wirelesscontrollerWtpRadio1").WirelesscontrollerWtpRadio1 = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerWtpRadio1"], () => require("./wirelesscontrollerWtpRadio1"));

export { WirelesscontrollerWtpRadio2Args, WirelesscontrollerWtpRadio2State } from "./wirelesscontrollerWtpRadio2";
export type WirelesscontrollerWtpRadio2 = import("./wirelesscontrollerWtpRadio2").WirelesscontrollerWtpRadio2;
export const WirelesscontrollerWtpRadio2: typeof import("./wirelesscontrollerWtpRadio2").WirelesscontrollerWtpRadio2 = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerWtpRadio2"], () => require("./wirelesscontrollerWtpRadio2"));

export { WirelesscontrollerWtpRadio3Args, WirelesscontrollerWtpRadio3State } from "./wirelesscontrollerWtpRadio3";
export type WirelesscontrollerWtpRadio3 = import("./wirelesscontrollerWtpRadio3").WirelesscontrollerWtpRadio3;
export const WirelesscontrollerWtpRadio3: typeof import("./wirelesscontrollerWtpRadio3").WirelesscontrollerWtpRadio3 = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerWtpRadio3"], () => require("./wirelesscontrollerWtpRadio3"));

export { WirelesscontrollerWtpRadio4Args, WirelesscontrollerWtpRadio4State } from "./wirelesscontrollerWtpRadio4";
export type WirelesscontrollerWtpRadio4 = import("./wirelesscontrollerWtpRadio4").WirelesscontrollerWtpRadio4;
export const WirelesscontrollerWtpRadio4: typeof import("./wirelesscontrollerWtpRadio4").WirelesscontrollerWtpRadio4 = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerWtpRadio4"], () => require("./wirelesscontrollerWtpRadio4"));

export { WirelesscontrollerWtpgroupArgs, WirelesscontrollerWtpgroupState } from "./wirelesscontrollerWtpgroup";
export type WirelesscontrollerWtpgroup = import("./wirelesscontrollerWtpgroup").WirelesscontrollerWtpgroup;
export const WirelesscontrollerWtpgroup: typeof import("./wirelesscontrollerWtpgroup").WirelesscontrollerWtpgroup = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerWtpgroup"], () => require("./wirelesscontrollerWtpgroup"));

export { WirelesscontrollerWtpprofileArgs, WirelesscontrollerWtpprofileState } from "./wirelesscontrollerWtpprofile";
export type WirelesscontrollerWtpprofile = import("./wirelesscontrollerWtpprofile").WirelesscontrollerWtpprofile;
export const WirelesscontrollerWtpprofile: typeof import("./wirelesscontrollerWtpprofile").WirelesscontrollerWtpprofile = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerWtpprofile"], () => require("./wirelesscontrollerWtpprofile"));

export { WirelesscontrollerWtpprofileDenymaclistArgs, WirelesscontrollerWtpprofileDenymaclistState } from "./wirelesscontrollerWtpprofileDenymaclist";
export type WirelesscontrollerWtpprofileDenymaclist = import("./wirelesscontrollerWtpprofileDenymaclist").WirelesscontrollerWtpprofileDenymaclist;
export const WirelesscontrollerWtpprofileDenymaclist: typeof import("./wirelesscontrollerWtpprofileDenymaclist").WirelesscontrollerWtpprofileDenymaclist = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerWtpprofileDenymaclist"], () => require("./wirelesscontrollerWtpprofileDenymaclist"));

export { WirelesscontrollerWtpprofileEslsesdongleArgs, WirelesscontrollerWtpprofileEslsesdongleState } from "./wirelesscontrollerWtpprofileEslsesdongle";
export type WirelesscontrollerWtpprofileEslsesdongle = import("./wirelesscontrollerWtpprofileEslsesdongle").WirelesscontrollerWtpprofileEslsesdongle;
export const WirelesscontrollerWtpprofileEslsesdongle: typeof import("./wirelesscontrollerWtpprofileEslsesdongle").WirelesscontrollerWtpprofileEslsesdongle = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerWtpprofileEslsesdongle"], () => require("./wirelesscontrollerWtpprofileEslsesdongle"));

export { WirelesscontrollerWtpprofileLbsArgs, WirelesscontrollerWtpprofileLbsState } from "./wirelesscontrollerWtpprofileLbs";
export type WirelesscontrollerWtpprofileLbs = import("./wirelesscontrollerWtpprofileLbs").WirelesscontrollerWtpprofileLbs;
export const WirelesscontrollerWtpprofileLbs: typeof import("./wirelesscontrollerWtpprofileLbs").WirelesscontrollerWtpprofileLbs = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerWtpprofileLbs"], () => require("./wirelesscontrollerWtpprofileLbs"));

export { WirelesscontrollerWtpprofilePlatformArgs, WirelesscontrollerWtpprofilePlatformState } from "./wirelesscontrollerWtpprofilePlatform";
export type WirelesscontrollerWtpprofilePlatform = import("./wirelesscontrollerWtpprofilePlatform").WirelesscontrollerWtpprofilePlatform;
export const WirelesscontrollerWtpprofilePlatform: typeof import("./wirelesscontrollerWtpprofilePlatform").WirelesscontrollerWtpprofilePlatform = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerWtpprofilePlatform"], () => require("./wirelesscontrollerWtpprofilePlatform"));

export { WirelesscontrollerWtpprofileRadio1Args, WirelesscontrollerWtpprofileRadio1State } from "./wirelesscontrollerWtpprofileRadio1";
export type WirelesscontrollerWtpprofileRadio1 = import("./wirelesscontrollerWtpprofileRadio1").WirelesscontrollerWtpprofileRadio1;
export const WirelesscontrollerWtpprofileRadio1: typeof import("./wirelesscontrollerWtpprofileRadio1").WirelesscontrollerWtpprofileRadio1 = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerWtpprofileRadio1"], () => require("./wirelesscontrollerWtpprofileRadio1"));

export { WirelesscontrollerWtpprofileRadio2Args, WirelesscontrollerWtpprofileRadio2State } from "./wirelesscontrollerWtpprofileRadio2";
export type WirelesscontrollerWtpprofileRadio2 = import("./wirelesscontrollerWtpprofileRadio2").WirelesscontrollerWtpprofileRadio2;
export const WirelesscontrollerWtpprofileRadio2: typeof import("./wirelesscontrollerWtpprofileRadio2").WirelesscontrollerWtpprofileRadio2 = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerWtpprofileRadio2"], () => require("./wirelesscontrollerWtpprofileRadio2"));

export { WirelesscontrollerWtpprofileSplittunnelingaclArgs, WirelesscontrollerWtpprofileSplittunnelingaclState } from "./wirelesscontrollerWtpprofileSplittunnelingacl";
export type WirelesscontrollerWtpprofileSplittunnelingacl = import("./wirelesscontrollerWtpprofileSplittunnelingacl").WirelesscontrollerWtpprofileSplittunnelingacl;
export const WirelesscontrollerWtpprofileSplittunnelingacl: typeof import("./wirelesscontrollerWtpprofileSplittunnelingacl").WirelesscontrollerWtpprofileSplittunnelingacl = null as any;
utilities.lazyLoad(exports, ["WirelesscontrollerWtpprofileSplittunnelingacl"], () => require("./wirelesscontrollerWtpprofileSplittunnelingacl"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "fmgdevice:index/alertemailSetting:AlertemailSetting":
                return new AlertemailSetting(name, <any>undefined, { urn })
            case "fmgdevice:index/antivirusExemptlist:AntivirusExemptlist":
                return new AntivirusExemptlist(name, <any>undefined, { urn })
            case "fmgdevice:index/antivirusQuarantine:AntivirusQuarantine":
                return new AntivirusQuarantine(name, <any>undefined, { urn })
            case "fmgdevice:index/antivirusSettings:AntivirusSettings":
                return new AntivirusSettings(name, <any>undefined, { urn })
            case "fmgdevice:index/applicationName:ApplicationName":
                return new ApplicationName(name, <any>undefined, { urn })
            case "fmgdevice:index/applicationRulesettings:ApplicationRulesettings":
                return new ApplicationRulesettings(name, <any>undefined, { urn })
            case "fmgdevice:index/automationSetting:AutomationSetting":
                return new AutomationSetting(name, <any>undefined, { urn })
            case "fmgdevice:index/certificateRemote:CertificateRemote":
                return new CertificateRemote(name, <any>undefined, { urn })
            case "fmgdevice:index/dlpExactdatamatch:DlpExactdatamatch":
                return new DlpExactdatamatch(name, <any>undefined, { urn })
            case "fmgdevice:index/dlpExactdatamatchColumns:DlpExactdatamatchColumns":
                return new DlpExactdatamatchColumns(name, <any>undefined, { urn })
            case "fmgdevice:index/dlpExactdatamatchColumnsMove:DlpExactdatamatchColumnsMove":
                return new DlpExactdatamatchColumnsMove(name, <any>undefined, { urn })
            case "fmgdevice:index/dlpFpdocsource:DlpFpdocsource":
                return new DlpFpdocsource(name, <any>undefined, { urn })
            case "fmgdevice:index/dlpSettings:DlpSettings":
                return new DlpSettings(name, <any>undefined, { urn })
            case "fmgdevice:index/dpdkCpus:DpdkCpus":
                return new DpdkCpus(name, <any>undefined, { urn })
            case "fmgdevice:index/dpdkGlobal:DpdkGlobal":
                return new DpdkGlobal(name, <any>undefined, { urn })
            case "fmgdevice:index/emailfilterFortiguard:EmailfilterFortiguard":
                return new EmailfilterFortiguard(name, <any>undefined, { urn })
            case "fmgdevice:index/endpointcontrolSettings:EndpointcontrolSettings":
                return new EndpointcontrolSettings(name, <any>undefined, { urn })
            case "fmgdevice:index/execWorkspaceAction:ExecWorkspaceAction":
                return new ExecWorkspaceAction(name, <any>undefined, { urn })
            case "fmgdevice:index/extendercontrollerExtender:ExtendercontrollerExtender":
                return new ExtendercontrollerExtender(name, <any>undefined, { urn })
            case "fmgdevice:index/extendercontrollerExtenderWanextension:ExtendercontrollerExtenderWanextension":
                return new ExtendercontrollerExtenderWanextension(name, <any>undefined, { urn })
            case "fmgdevice:index/extensioncontrollerExtender:ExtensioncontrollerExtender":
                return new ExtensioncontrollerExtender(name, <any>undefined, { urn })
            case "fmgdevice:index/extensioncontrollerFortigate:ExtensioncontrollerFortigate":
                return new ExtensioncontrollerFortigate(name, <any>undefined, { urn })
            case "fmgdevice:index/extensioncontrollerFortigateprofile:ExtensioncontrollerFortigateprofile":
                return new ExtensioncontrollerFortigateprofile(name, <any>undefined, { urn })
            case "fmgdevice:index/extensioncontrollerFortigateprofileLanextension:ExtensioncontrollerFortigateprofileLanextension":
                return new ExtensioncontrollerFortigateprofileLanextension(name, <any>undefined, { urn })
            case "fmgdevice:index/firewallAuthportal:FirewallAuthportal":
                return new FirewallAuthportal(name, <any>undefined, { urn })
            case "fmgdevice:index/firewallDnstranslation:FirewallDnstranslation":
                return new FirewallDnstranslation(name, <any>undefined, { urn })
            case "fmgdevice:index/firewallGlobal:FirewallGlobal":
                return new FirewallGlobal(name, <any>undefined, { urn })
            case "fmgdevice:index/firewallInternetserviceappend:FirewallInternetserviceappend":
                return new FirewallInternetserviceappend(name, <any>undefined, { urn })
            case "fmgdevice:index/firewallInternetservicedefinition:FirewallInternetservicedefinition":
                return new FirewallInternetservicedefinition(name, <any>undefined, { urn })
            case "fmgdevice:index/firewallInternetservicedefinitionEntry:FirewallInternetservicedefinitionEntry":
                return new FirewallInternetservicedefinitionEntry(name, <any>undefined, { urn })
            case "fmgdevice:index/firewallInternetservicedefinitionEntryPortrange:FirewallInternetservicedefinitionEntryPortrange":
                return new FirewallInternetservicedefinitionEntryPortrange(name, <any>undefined, { urn })
            case "fmgdevice:index/firewallInternetserviceextension:FirewallInternetserviceextension":
                return new FirewallInternetserviceextension(name, <any>undefined, { urn })
            case "fmgdevice:index/firewallInternetserviceextensionEntry:FirewallInternetserviceextensionEntry":
                return new FirewallInternetserviceextensionEntry(name, <any>undefined, { urn })
            case "fmgdevice:index/firewallInternetserviceextensionEntryPortrange:FirewallInternetserviceextensionEntryPortrange":
                return new FirewallInternetserviceextensionEntryPortrange(name, <any>undefined, { urn })
            case "fmgdevice:index/firewallIpmacbindingSetting:FirewallIpmacbindingSetting":
                return new FirewallIpmacbindingSetting(name, <any>undefined, { urn })
            case "fmgdevice:index/firewallIpmacbindingTable:FirewallIpmacbindingTable":
                return new FirewallIpmacbindingTable(name, <any>undefined, { urn })
            case "fmgdevice:index/firewallIptranslation:FirewallIptranslation":
                return new FirewallIptranslation(name, <any>undefined, { urn })
            case "fmgdevice:index/firewallIpv6ehfilter:FirewallIpv6ehfilter":
                return new FirewallIpv6ehfilter(name, <any>undefined, { urn })
            case "fmgdevice:index/firewallOndemandsniffer:FirewallOndemandsniffer":
                return new FirewallOndemandsniffer(name, <any>undefined, { urn })
            case "fmgdevice:index/firewallSniffer:FirewallSniffer":
                return new FirewallSniffer(name, <any>undefined, { urn })
            case "fmgdevice:index/firewallSnifferMove:FirewallSnifferMove":
                return new FirewallSnifferMove(name, <any>undefined, { urn })
            case "fmgdevice:index/firewallSshHostkey:FirewallSshHostkey":
                return new FirewallSshHostkey(name, <any>undefined, { urn })
            case "fmgdevice:index/firewallSshLocalkey:FirewallSshLocalkey":
                return new FirewallSshLocalkey(name, <any>undefined, { urn })
            case "fmgdevice:index/firewallSshSetting:FirewallSshSetting":
                return new FirewallSshSetting(name, <any>undefined, { urn })
            case "fmgdevice:index/firewallSslSetting:FirewallSslSetting":
                return new FirewallSslSetting(name, <any>undefined, { urn })
            case "fmgdevice:index/firewallSslserver:FirewallSslserver":
                return new FirewallSslserver(name, <any>undefined, { urn })
            case "fmgdevice:index/firewallTtlpolicy:FirewallTtlpolicy":
                return new FirewallTtlpolicy(name, <any>undefined, { urn })
            case "fmgdevice:index/firewallTtlpolicyMove:FirewallTtlpolicyMove":
                return new FirewallTtlpolicyMove(name, <any>undefined, { urn })
            case "fmgdevice:index/ftpproxyExplicit:FtpproxyExplicit":
                return new FtpproxyExplicit(name, <any>undefined, { urn })
            case "fmgdevice:index/icapServergroup:IcapServergroup":
                return new IcapServergroup(name, <any>undefined, { urn })
            case "fmgdevice:index/ipsDecoder:IpsDecoder":
                return new IpsDecoder(name, <any>undefined, { urn })
            case "fmgdevice:index/ipsDecoderParameter:IpsDecoderParameter":
                return new IpsDecoderParameter(name, <any>undefined, { urn })
            case "fmgdevice:index/ipsGlobal:IpsGlobal":
                return new IpsGlobal(name, <any>undefined, { urn })
            case "fmgdevice:index/ipsGlobalTlsactiveprobe:IpsGlobalTlsactiveprobe":
                return new IpsGlobalTlsactiveprobe(name, <any>undefined, { urn })
            case "fmgdevice:index/ipsRule:IpsRule":
                return new IpsRule(name, <any>undefined, { urn })
            case "fmgdevice:index/ipsRulesettings:IpsRulesettings":
                return new IpsRulesettings(name, <any>undefined, { urn })
            case "fmgdevice:index/ipsSettings:IpsSettings":
                return new IpsSettings(name, <any>undefined, { urn })
            case "fmgdevice:index/jsonGenericApi:JsonGenericApi":
                return new JsonGenericApi(name, <any>undefined, { urn })
            case "fmgdevice:index/loadbalanceSettingWorkers:LoadbalanceSettingWorkers":
                return new LoadbalanceSettingWorkers(name, <any>undefined, { urn })
            case "fmgdevice:index/logAzuresecuritycenter2FilterFreestyle:LogAzuresecuritycenter2FilterFreestyle":
                return new LogAzuresecuritycenter2FilterFreestyle(name, <any>undefined, { urn })
            case "fmgdevice:index/logAzuresecuritycenter2SettingCustomfieldname:LogAzuresecuritycenter2SettingCustomfieldname":
                return new LogAzuresecuritycenter2SettingCustomfieldname(name, <any>undefined, { urn })
            case "fmgdevice:index/logAzuresecuritycenterFilterFreestyle:LogAzuresecuritycenterFilterFreestyle":
                return new LogAzuresecuritycenterFilterFreestyle(name, <any>undefined, { urn })
            case "fmgdevice:index/logAzuresecuritycenterSettingCustomfieldname:LogAzuresecuritycenterSettingCustomfieldname":
                return new LogAzuresecuritycenterSettingCustomfieldname(name, <any>undefined, { urn })
            case "fmgdevice:index/logDiskFilter:LogDiskFilter":
                return new LogDiskFilter(name, <any>undefined, { urn })
            case "fmgdevice:index/logDiskFilterFreestyle:LogDiskFilterFreestyle":
                return new LogDiskFilterFreestyle(name, <any>undefined, { urn })
            case "fmgdevice:index/logDiskSetting:LogDiskSetting":
                return new LogDiskSetting(name, <any>undefined, { urn })
            case "fmgdevice:index/logEventfilter:LogEventfilter":
                return new LogEventfilter(name, <any>undefined, { urn })
            case "fmgdevice:index/logFortianalyzer2FilterFreestyle:LogFortianalyzer2FilterFreestyle":
                return new LogFortianalyzer2FilterFreestyle(name, <any>undefined, { urn })
            case "fmgdevice:index/logFortianalyzer2Overridefilter:LogFortianalyzer2Overridefilter":
                return new LogFortianalyzer2Overridefilter(name, <any>undefined, { urn })
            case "fmgdevice:index/logFortianalyzer2OverridefilterFreestyle:LogFortianalyzer2OverridefilterFreestyle":
                return new LogFortianalyzer2OverridefilterFreestyle(name, <any>undefined, { urn })
            case "fmgdevice:index/logFortianalyzer2Overridesetting:LogFortianalyzer2Overridesetting":
                return new LogFortianalyzer2Overridesetting(name, <any>undefined, { urn })
            case "fmgdevice:index/logFortianalyzer2Setting:LogFortianalyzer2Setting":
                return new LogFortianalyzer2Setting(name, <any>undefined, { urn })
            case "fmgdevice:index/logFortianalyzer3FilterFreestyle:LogFortianalyzer3FilterFreestyle":
                return new LogFortianalyzer3FilterFreestyle(name, <any>undefined, { urn })
            case "fmgdevice:index/logFortianalyzer3Overridefilter:LogFortianalyzer3Overridefilter":
                return new LogFortianalyzer3Overridefilter(name, <any>undefined, { urn })
            case "fmgdevice:index/logFortianalyzer3OverridefilterFreestyle:LogFortianalyzer3OverridefilterFreestyle":
                return new LogFortianalyzer3OverridefilterFreestyle(name, <any>undefined, { urn })
            case "fmgdevice:index/logFortianalyzer3Overridesetting:LogFortianalyzer3Overridesetting":
                return new LogFortianalyzer3Overridesetting(name, <any>undefined, { urn })
            case "fmgdevice:index/logFortianalyzer3Setting:LogFortianalyzer3Setting":
                return new LogFortianalyzer3Setting(name, <any>undefined, { urn })
            case "fmgdevice:index/logFortianalyzerFilterFreestyle:LogFortianalyzerFilterFreestyle":
                return new LogFortianalyzerFilterFreestyle(name, <any>undefined, { urn })
            case "fmgdevice:index/logFortianalyzerOverridefilterFreestyle:LogFortianalyzerOverridefilterFreestyle":
                return new LogFortianalyzerOverridefilterFreestyle(name, <any>undefined, { urn })
            case "fmgdevice:index/logFortianalyzerSetting:LogFortianalyzerSetting":
                return new LogFortianalyzerSetting(name, <any>undefined, { urn })
            case "fmgdevice:index/logFortianalyzercloudFilterFreestyle:LogFortianalyzercloudFilterFreestyle":
                return new LogFortianalyzercloudFilterFreestyle(name, <any>undefined, { urn })
            case "fmgdevice:index/logFortianalyzercloudOverridefilter:LogFortianalyzercloudOverridefilter":
                return new LogFortianalyzercloudOverridefilter(name, <any>undefined, { urn })
            case "fmgdevice:index/logFortianalyzercloudOverridefilterFreestyle:LogFortianalyzercloudOverridefilterFreestyle":
                return new LogFortianalyzercloudOverridefilterFreestyle(name, <any>undefined, { urn })
            case "fmgdevice:index/logFortianalyzercloudOverridesetting:LogFortianalyzercloudOverridesetting":
                return new LogFortianalyzercloudOverridesetting(name, <any>undefined, { urn })
            case "fmgdevice:index/logFortianalyzercloudSetting:LogFortianalyzercloudSetting":
                return new LogFortianalyzercloudSetting(name, <any>undefined, { urn })
            case "fmgdevice:index/logFortiguardFilter:LogFortiguardFilter":
                return new LogFortiguardFilter(name, <any>undefined, { urn })
            case "fmgdevice:index/logFortiguardFilterFreestyle:LogFortiguardFilterFreestyle":
                return new LogFortiguardFilterFreestyle(name, <any>undefined, { urn })
            case "fmgdevice:index/logFortiguardOverridefilter:LogFortiguardOverridefilter":
                return new LogFortiguardOverridefilter(name, <any>undefined, { urn })
            case "fmgdevice:index/logFortiguardOverridefilterFreestyle:LogFortiguardOverridefilterFreestyle":
                return new LogFortiguardOverridefilterFreestyle(name, <any>undefined, { urn })
            case "fmgdevice:index/logFortiguardOverridesetting:LogFortiguardOverridesetting":
                return new LogFortiguardOverridesetting(name, <any>undefined, { urn })
            case "fmgdevice:index/logFortiguardSetting:LogFortiguardSetting":
                return new LogFortiguardSetting(name, <any>undefined, { urn })
            case "fmgdevice:index/logGuidisplay:LogGuidisplay":
                return new LogGuidisplay(name, <any>undefined, { urn })
            case "fmgdevice:index/logMemoryFilter:LogMemoryFilter":
                return new LogMemoryFilter(name, <any>undefined, { urn })
            case "fmgdevice:index/logMemoryFilterFreestyle:LogMemoryFilterFreestyle":
                return new LogMemoryFilterFreestyle(name, <any>undefined, { urn })
            case "fmgdevice:index/logMemoryGlobalsetting:LogMemoryGlobalsetting":
                return new LogMemoryGlobalsetting(name, <any>undefined, { urn })
            case "fmgdevice:index/logMemorySetting:LogMemorySetting":
                return new LogMemorySetting(name, <any>undefined, { urn })
            case "fmgdevice:index/logNulldeviceFilter:LogNulldeviceFilter":
                return new LogNulldeviceFilter(name, <any>undefined, { urn })
            case "fmgdevice:index/logNulldeviceFilterFreestyle:LogNulldeviceFilterFreestyle":
                return new LogNulldeviceFilterFreestyle(name, <any>undefined, { urn })
            case "fmgdevice:index/logNulldeviceSetting:LogNulldeviceSetting":
                return new LogNulldeviceSetting(name, <any>undefined, { urn })
            case "fmgdevice:index/logSetting:LogSetting":
                return new LogSetting(name, <any>undefined, { urn })
            case "fmgdevice:index/logSyslogd2Filter:LogSyslogd2Filter":
                return new LogSyslogd2Filter(name, <any>undefined, { urn })
            case "fmgdevice:index/logSyslogd2FilterFreestyle:LogSyslogd2FilterFreestyle":
                return new LogSyslogd2FilterFreestyle(name, <any>undefined, { urn })
            case "fmgdevice:index/logSyslogd2Overridefilter:LogSyslogd2Overridefilter":
                return new LogSyslogd2Overridefilter(name, <any>undefined, { urn })
            case "fmgdevice:index/logSyslogd2OverridefilterFreestyle:LogSyslogd2OverridefilterFreestyle":
                return new LogSyslogd2OverridefilterFreestyle(name, <any>undefined, { urn })
            case "fmgdevice:index/logSyslogd2Overridesetting:LogSyslogd2Overridesetting":
                return new LogSyslogd2Overridesetting(name, <any>undefined, { urn })
            case "fmgdevice:index/logSyslogd2OverridesettingCustomfieldname:LogSyslogd2OverridesettingCustomfieldname":
                return new LogSyslogd2OverridesettingCustomfieldname(name, <any>undefined, { urn })
            case "fmgdevice:index/logSyslogd2Setting:LogSyslogd2Setting":
                return new LogSyslogd2Setting(name, <any>undefined, { urn })
            case "fmgdevice:index/logSyslogd2SettingCustomfieldname:LogSyslogd2SettingCustomfieldname":
                return new LogSyslogd2SettingCustomfieldname(name, <any>undefined, { urn })
            case "fmgdevice:index/logSyslogd3Filter:LogSyslogd3Filter":
                return new LogSyslogd3Filter(name, <any>undefined, { urn })
            case "fmgdevice:index/logSyslogd3FilterFreestyle:LogSyslogd3FilterFreestyle":
                return new LogSyslogd3FilterFreestyle(name, <any>undefined, { urn })
            case "fmgdevice:index/logSyslogd3Overridefilter:LogSyslogd3Overridefilter":
                return new LogSyslogd3Overridefilter(name, <any>undefined, { urn })
            case "fmgdevice:index/logSyslogd3OverridefilterFreestyle:LogSyslogd3OverridefilterFreestyle":
                return new LogSyslogd3OverridefilterFreestyle(name, <any>undefined, { urn })
            case "fmgdevice:index/logSyslogd3Overridesetting:LogSyslogd3Overridesetting":
                return new LogSyslogd3Overridesetting(name, <any>undefined, { urn })
            case "fmgdevice:index/logSyslogd3OverridesettingCustomfieldname:LogSyslogd3OverridesettingCustomfieldname":
                return new LogSyslogd3OverridesettingCustomfieldname(name, <any>undefined, { urn })
            case "fmgdevice:index/logSyslogd3Setting:LogSyslogd3Setting":
                return new LogSyslogd3Setting(name, <any>undefined, { urn })
            case "fmgdevice:index/logSyslogd3SettingCustomfieldname:LogSyslogd3SettingCustomfieldname":
                return new LogSyslogd3SettingCustomfieldname(name, <any>undefined, { urn })
            case "fmgdevice:index/logSyslogd4Filter:LogSyslogd4Filter":
                return new LogSyslogd4Filter(name, <any>undefined, { urn })
            case "fmgdevice:index/logSyslogd4FilterFreestyle:LogSyslogd4FilterFreestyle":
                return new LogSyslogd4FilterFreestyle(name, <any>undefined, { urn })
            case "fmgdevice:index/logSyslogd4Overridefilter:LogSyslogd4Overridefilter":
                return new LogSyslogd4Overridefilter(name, <any>undefined, { urn })
            case "fmgdevice:index/logSyslogd4OverridefilterFreestyle:LogSyslogd4OverridefilterFreestyle":
                return new LogSyslogd4OverridefilterFreestyle(name, <any>undefined, { urn })
            case "fmgdevice:index/logSyslogd4Overridesetting:LogSyslogd4Overridesetting":
                return new LogSyslogd4Overridesetting(name, <any>undefined, { urn })
            case "fmgdevice:index/logSyslogd4OverridesettingCustomfieldname:LogSyslogd4OverridesettingCustomfieldname":
                return new LogSyslogd4OverridesettingCustomfieldname(name, <any>undefined, { urn })
            case "fmgdevice:index/logSyslogd4Setting:LogSyslogd4Setting":
                return new LogSyslogd4Setting(name, <any>undefined, { urn })
            case "fmgdevice:index/logSyslogd4SettingCustomfieldname:LogSyslogd4SettingCustomfieldname":
                return new LogSyslogd4SettingCustomfieldname(name, <any>undefined, { urn })
            case "fmgdevice:index/logSyslogdFilter:LogSyslogdFilter":
                return new LogSyslogdFilter(name, <any>undefined, { urn })
            case "fmgdevice:index/logSyslogdFilterFreestyle:LogSyslogdFilterFreestyle":
                return new LogSyslogdFilterFreestyle(name, <any>undefined, { urn })
            case "fmgdevice:index/logSyslogdOverridefilterFreestyle:LogSyslogdOverridefilterFreestyle":
                return new LogSyslogdOverridefilterFreestyle(name, <any>undefined, { urn })
            case "fmgdevice:index/logSyslogdOverridesettingCustomfieldname:LogSyslogdOverridesettingCustomfieldname":
                return new LogSyslogdOverridesettingCustomfieldname(name, <any>undefined, { urn })
            case "fmgdevice:index/logSyslogdSetting:LogSyslogdSetting":
                return new LogSyslogdSetting(name, <any>undefined, { urn })
            case "fmgdevice:index/logSyslogdSettingCustomfieldname:LogSyslogdSettingCustomfieldname":
                return new LogSyslogdSettingCustomfieldname(name, <any>undefined, { urn })
            case "fmgdevice:index/logTacacsaccounting2Filter:LogTacacsaccounting2Filter":
                return new LogTacacsaccounting2Filter(name, <any>undefined, { urn })
            case "fmgdevice:index/logTacacsaccounting2Setting:LogTacacsaccounting2Setting":
                return new LogTacacsaccounting2Setting(name, <any>undefined, { urn })
            case "fmgdevice:index/logTacacsaccounting3Filter:LogTacacsaccounting3Filter":
                return new LogTacacsaccounting3Filter(name, <any>undefined, { urn })
            case "fmgdevice:index/logTacacsaccounting3Setting:LogTacacsaccounting3Setting":
                return new LogTacacsaccounting3Setting(name, <any>undefined, { urn })
            case "fmgdevice:index/logTacacsaccountingFilter:LogTacacsaccountingFilter":
                return new LogTacacsaccountingFilter(name, <any>undefined, { urn })
            case "fmgdevice:index/logTacacsaccountingSetting:LogTacacsaccountingSetting":
                return new LogTacacsaccountingSetting(name, <any>undefined, { urn })
            case "fmgdevice:index/logWebtrendsFilter:LogWebtrendsFilter":
                return new LogWebtrendsFilter(name, <any>undefined, { urn })
            case "fmgdevice:index/logWebtrendsFilterFreestyle:LogWebtrendsFilterFreestyle":
                return new LogWebtrendsFilterFreestyle(name, <any>undefined, { urn })
            case "fmgdevice:index/logWebtrendsSetting:LogWebtrendsSetting":
                return new LogWebtrendsSetting(name, <any>undefined, { urn })
            case "fmgdevice:index/nsxtServicechain:NsxtServicechain":
                return new NsxtServicechain(name, <any>undefined, { urn })
            case "fmgdevice:index/nsxtServicechainServiceindex:NsxtServicechainServiceindex":
                return new NsxtServicechainServiceindex(name, <any>undefined, { urn })
            case "fmgdevice:index/nsxtServicechainServiceindexMove:NsxtServicechainServiceindexMove":
                return new NsxtServicechainServiceindexMove(name, <any>undefined, { urn })
            case "fmgdevice:index/nsxtSetting:NsxtSetting":
                return new NsxtSetting(name, <any>undefined, { urn })
            case "fmgdevice:index/reportLayout:ReportLayout":
                return new ReportLayout(name, <any>undefined, { urn })
            case "fmgdevice:index/reportLayoutBodyitem:ReportLayoutBodyitem":
                return new ReportLayoutBodyitem(name, <any>undefined, { urn })
            case "fmgdevice:index/reportLayoutBodyitemMove:ReportLayoutBodyitemMove":
                return new ReportLayoutBodyitemMove(name, <any>undefined, { urn })
            case "fmgdevice:index/reportLayoutBodyitemParameters:ReportLayoutBodyitemParameters":
                return new ReportLayoutBodyitemParameters(name, <any>undefined, { urn })
            case "fmgdevice:index/reportLayoutPage:ReportLayoutPage":
                return new ReportLayoutPage(name, <any>undefined, { urn })
            case "fmgdevice:index/reportLayoutPageFooter:ReportLayoutPageFooter":
                return new ReportLayoutPageFooter(name, <any>undefined, { urn })
            case "fmgdevice:index/reportLayoutPageFooterFooteritem:ReportLayoutPageFooterFooteritem":
                return new ReportLayoutPageFooterFooteritem(name, <any>undefined, { urn })
            case "fmgdevice:index/reportLayoutPageFooterFooteritemMove:ReportLayoutPageFooterFooteritemMove":
                return new ReportLayoutPageFooterFooteritemMove(name, <any>undefined, { urn })
            case "fmgdevice:index/reportLayoutPageHeader:ReportLayoutPageHeader":
                return new ReportLayoutPageHeader(name, <any>undefined, { urn })
            case "fmgdevice:index/reportLayoutPageHeaderHeaderitem:ReportLayoutPageHeaderHeaderitem":
                return new ReportLayoutPageHeaderHeaderitem(name, <any>undefined, { urn })
            case "fmgdevice:index/reportLayoutPageHeaderHeaderitemMove:ReportLayoutPageHeaderHeaderitemMove":
                return new ReportLayoutPageHeaderHeaderitemMove(name, <any>undefined, { urn })
            case "fmgdevice:index/reportSetting:ReportSetting":
                return new ReportSetting(name, <any>undefined, { urn })
            case "fmgdevice:index/routerAuthpath:RouterAuthpath":
                return new RouterAuthpath(name, <any>undefined, { urn })
            case "fmgdevice:index/routerBfd6:RouterBfd6":
                return new RouterBfd6(name, <any>undefined, { urn })
            case "fmgdevice:index/routerBfd6Multihoptemplate:RouterBfd6Multihoptemplate":
                return new RouterBfd6Multihoptemplate(name, <any>undefined, { urn })
            case "fmgdevice:index/routerBfd6Neighbor:RouterBfd6Neighbor":
                return new RouterBfd6Neighbor(name, <any>undefined, { urn })
            case "fmgdevice:index/routerBfd:RouterBfd":
                return new RouterBfd(name, <any>undefined, { urn })
            case "fmgdevice:index/routerBfdMultihoptemplate:RouterBfdMultihoptemplate":
                return new RouterBfdMultihoptemplate(name, <any>undefined, { urn })
            case "fmgdevice:index/routerBfdNeighbor:RouterBfdNeighbor":
                return new RouterBfdNeighbor(name, <any>undefined, { urn })
            case "fmgdevice:index/routerBgp:RouterBgp":
                return new RouterBgp(name, <any>undefined, { urn })
            case "fmgdevice:index/routerBgpAdmindistance:RouterBgpAdmindistance":
                return new RouterBgpAdmindistance(name, <any>undefined, { urn })
            case "fmgdevice:index/routerBgpAggregateaddress6:RouterBgpAggregateaddress6":
                return new RouterBgpAggregateaddress6(name, <any>undefined, { urn })
            case "fmgdevice:index/routerBgpAggregateaddress:RouterBgpAggregateaddress":
                return new RouterBgpAggregateaddress(name, <any>undefined, { urn })
            case "fmgdevice:index/routerBgpNeighbor:RouterBgpNeighbor":
                return new RouterBgpNeighbor(name, <any>undefined, { urn })
            case "fmgdevice:index/routerBgpNeighborConditionaladvertise6:RouterBgpNeighborConditionaladvertise6":
                return new RouterBgpNeighborConditionaladvertise6(name, <any>undefined, { urn })
            case "fmgdevice:index/routerBgpNeighborConditionaladvertise:RouterBgpNeighborConditionaladvertise":
                return new RouterBgpNeighborConditionaladvertise(name, <any>undefined, { urn })
            case "fmgdevice:index/routerBgpNeighborgroup:RouterBgpNeighborgroup":
                return new RouterBgpNeighborgroup(name, <any>undefined, { urn })
            case "fmgdevice:index/routerBgpNeighborrange6:RouterBgpNeighborrange6":
                return new RouterBgpNeighborrange6(name, <any>undefined, { urn })
            case "fmgdevice:index/routerBgpNeighborrange:RouterBgpNeighborrange":
                return new RouterBgpNeighborrange(name, <any>undefined, { urn })
            case "fmgdevice:index/routerBgpNetwork6:RouterBgpNetwork6":
                return new RouterBgpNetwork6(name, <any>undefined, { urn })
            case "fmgdevice:index/routerBgpNetwork:RouterBgpNetwork":
                return new RouterBgpNetwork(name, <any>undefined, { urn })
            case "fmgdevice:index/routerBgpRedistribute6:RouterBgpRedistribute6":
                return new RouterBgpRedistribute6(name, <any>undefined, { urn })
            case "fmgdevice:index/routerBgpRedistribute:RouterBgpRedistribute":
                return new RouterBgpRedistribute(name, <any>undefined, { urn })
            case "fmgdevice:index/routerBgpVrf6:RouterBgpVrf6":
                return new RouterBgpVrf6(name, <any>undefined, { urn })
            case "fmgdevice:index/routerBgpVrf:RouterBgpVrf":
                return new RouterBgpVrf(name, <any>undefined, { urn })
            case "fmgdevice:index/routerExtcommunitylist:RouterExtcommunitylist":
                return new RouterExtcommunitylist(name, <any>undefined, { urn })
            case "fmgdevice:index/routerExtcommunitylistRule:RouterExtcommunitylistRule":
                return new RouterExtcommunitylistRule(name, <any>undefined, { urn })
            case "fmgdevice:index/routerIsis:RouterIsis":
                return new RouterIsis(name, <any>undefined, { urn })
            case "fmgdevice:index/routerIsisIsisinterface:RouterIsisIsisinterface":
                return new RouterIsisIsisinterface(name, <any>undefined, { urn })
            case "fmgdevice:index/routerIsisIsisnet:RouterIsisIsisnet":
                return new RouterIsisIsisnet(name, <any>undefined, { urn })
            case "fmgdevice:index/routerIsisRedistribute6:RouterIsisRedistribute6":
                return new RouterIsisRedistribute6(name, <any>undefined, { urn })
            case "fmgdevice:index/routerIsisRedistribute:RouterIsisRedistribute":
                return new RouterIsisRedistribute(name, <any>undefined, { urn })
            case "fmgdevice:index/routerIsisSummaryaddress6:RouterIsisSummaryaddress6":
                return new RouterIsisSummaryaddress6(name, <any>undefined, { urn })
            case "fmgdevice:index/routerIsisSummaryaddress:RouterIsisSummaryaddress":
                return new RouterIsisSummaryaddress(name, <any>undefined, { urn })
            case "fmgdevice:index/routerKeychain:RouterKeychain":
                return new RouterKeychain(name, <any>undefined, { urn })
            case "fmgdevice:index/routerMulticast6:RouterMulticast6":
                return new RouterMulticast6(name, <any>undefined, { urn })
            case "fmgdevice:index/routerMulticast6Interface:RouterMulticast6Interface":
                return new RouterMulticast6Interface(name, <any>undefined, { urn })
            case "fmgdevice:index/routerMulticast6Pimsmglobal:RouterMulticast6Pimsmglobal":
                return new RouterMulticast6Pimsmglobal(name, <any>undefined, { urn })
            case "fmgdevice:index/routerMulticast6PimsmglobalRpaddress:RouterMulticast6PimsmglobalRpaddress":
                return new RouterMulticast6PimsmglobalRpaddress(name, <any>undefined, { urn })
            case "fmgdevice:index/routerMulticast:RouterMulticast":
                return new RouterMulticast(name, <any>undefined, { urn })
            case "fmgdevice:index/routerMulticastInterface:RouterMulticastInterface":
                return new RouterMulticastInterface(name, <any>undefined, { urn })
            case "fmgdevice:index/routerMulticastInterfaceIgmp:RouterMulticastInterfaceIgmp":
                return new RouterMulticastInterfaceIgmp(name, <any>undefined, { urn })
            case "fmgdevice:index/routerMulticastInterfaceJoingroup:RouterMulticastInterfaceJoingroup":
                return new RouterMulticastInterfaceJoingroup(name, <any>undefined, { urn })
            case "fmgdevice:index/routerMulticastPimsmglobal:RouterMulticastPimsmglobal":
                return new RouterMulticastPimsmglobal(name, <any>undefined, { urn })
            case "fmgdevice:index/routerMulticastPimsmglobalRpaddress:RouterMulticastPimsmglobalRpaddress":
                return new RouterMulticastPimsmglobalRpaddress(name, <any>undefined, { urn })
            case "fmgdevice:index/routerMulticastflow:RouterMulticastflow":
                return new RouterMulticastflow(name, <any>undefined, { urn })
            case "fmgdevice:index/routerMulticastflowFlows:RouterMulticastflowFlows":
                return new RouterMulticastflowFlows(name, <any>undefined, { urn })
            case "fmgdevice:index/routerOspf6:RouterOspf6":
                return new RouterOspf6(name, <any>undefined, { urn })
            case "fmgdevice:index/routerOspf6Area:RouterOspf6Area":
                return new RouterOspf6Area(name, <any>undefined, { urn })
            case "fmgdevice:index/routerOspf6AreaIpseckeys:RouterOspf6AreaIpseckeys":
                return new RouterOspf6AreaIpseckeys(name, <any>undefined, { urn })
            case "fmgdevice:index/routerOspf6AreaRange:RouterOspf6AreaRange":
                return new RouterOspf6AreaRange(name, <any>undefined, { urn })
            case "fmgdevice:index/routerOspf6AreaVirtuallink:RouterOspf6AreaVirtuallink":
                return new RouterOspf6AreaVirtuallink(name, <any>undefined, { urn })
            case "fmgdevice:index/routerOspf6AreaVirtuallinkIpseckeys:RouterOspf6AreaVirtuallinkIpseckeys":
                return new RouterOspf6AreaVirtuallinkIpseckeys(name, <any>undefined, { urn })
            case "fmgdevice:index/routerOspf6Ospf6interface:RouterOspf6Ospf6interface":
                return new RouterOspf6Ospf6interface(name, <any>undefined, { urn })
            case "fmgdevice:index/routerOspf6Ospf6interfaceIpseckeys:RouterOspf6Ospf6interfaceIpseckeys":
                return new RouterOspf6Ospf6interfaceIpseckeys(name, <any>undefined, { urn })
            case "fmgdevice:index/routerOspf6Ospf6interfaceNeighbor:RouterOspf6Ospf6interfaceNeighbor":
                return new RouterOspf6Ospf6interfaceNeighbor(name, <any>undefined, { urn })
            case "fmgdevice:index/routerOspf6Redistribute:RouterOspf6Redistribute":
                return new RouterOspf6Redistribute(name, <any>undefined, { urn })
            case "fmgdevice:index/routerOspf6Summaryaddress:RouterOspf6Summaryaddress":
                return new RouterOspf6Summaryaddress(name, <any>undefined, { urn })
            case "fmgdevice:index/routerOspf:RouterOspf":
                return new RouterOspf(name, <any>undefined, { urn })
            case "fmgdevice:index/routerOspfArea:RouterOspfArea":
                return new RouterOspfArea(name, <any>undefined, { urn })
            case "fmgdevice:index/routerOspfAreaRange:RouterOspfAreaRange":
                return new RouterOspfAreaRange(name, <any>undefined, { urn })
            case "fmgdevice:index/routerOspfAreaVirtuallink:RouterOspfAreaVirtuallink":
                return new RouterOspfAreaVirtuallink(name, <any>undefined, { urn })
            case "fmgdevice:index/routerOspfAreaVirtuallinkMd5keys:RouterOspfAreaVirtuallinkMd5keys":
                return new RouterOspfAreaVirtuallinkMd5keys(name, <any>undefined, { urn })
            case "fmgdevice:index/routerOspfDistributelist:RouterOspfDistributelist":
                return new RouterOspfDistributelist(name, <any>undefined, { urn })
            case "fmgdevice:index/routerOspfNeighbor:RouterOspfNeighbor":
                return new RouterOspfNeighbor(name, <any>undefined, { urn })
            case "fmgdevice:index/routerOspfOspfinterface:RouterOspfOspfinterface":
                return new RouterOspfOspfinterface(name, <any>undefined, { urn })
            case "fmgdevice:index/routerOspfRedistribute:RouterOspfRedistribute":
                return new RouterOspfRedistribute(name, <any>undefined, { urn })
            case "fmgdevice:index/routerOspfSummaryaddress:RouterOspfSummaryaddress":
                return new RouterOspfSummaryaddress(name, <any>undefined, { urn })
            case "fmgdevice:index/routerPolicy6:RouterPolicy6":
                return new RouterPolicy6(name, <any>undefined, { urn })
            case "fmgdevice:index/routerPolicy6Move:RouterPolicy6Move":
                return new RouterPolicy6Move(name, <any>undefined, { urn })
            case "fmgdevice:index/routerPolicy:RouterPolicy":
                return new RouterPolicy(name, <any>undefined, { urn })
            case "fmgdevice:index/routerPolicyMove:RouterPolicyMove":
                return new RouterPolicyMove(name, <any>undefined, { urn })
            case "fmgdevice:index/routerRip:RouterRip":
                return new RouterRip(name, <any>undefined, { urn })
            case "fmgdevice:index/routerRipDistance:RouterRipDistance":
                return new RouterRipDistance(name, <any>undefined, { urn })
            case "fmgdevice:index/routerRipInterface:RouterRipInterface":
                return new RouterRipInterface(name, <any>undefined, { urn })
            case "fmgdevice:index/routerRipNeighbor:RouterRipNeighbor":
                return new RouterRipNeighbor(name, <any>undefined, { urn })
            case "fmgdevice:index/routerRipNetwork:RouterRipNetwork":
                return new RouterRipNetwork(name, <any>undefined, { urn })
            case "fmgdevice:index/routerRipOffsetlist:RouterRipOffsetlist":
                return new RouterRipOffsetlist(name, <any>undefined, { urn })
            case "fmgdevice:index/routerRipRedistribute:RouterRipRedistribute":
                return new RouterRipRedistribute(name, <any>undefined, { urn })
            case "fmgdevice:index/routerRipng:RouterRipng":
                return new RouterRipng(name, <any>undefined, { urn })
            case "fmgdevice:index/routerRipngAggregateaddress:RouterRipngAggregateaddress":
                return new RouterRipngAggregateaddress(name, <any>undefined, { urn })
            case "fmgdevice:index/routerRipngDistance:RouterRipngDistance":
                return new RouterRipngDistance(name, <any>undefined, { urn })
            case "fmgdevice:index/routerRipngDistributelist:RouterRipngDistributelist":
                return new RouterRipngDistributelist(name, <any>undefined, { urn })
            case "fmgdevice:index/routerRipngInterface:RouterRipngInterface":
                return new RouterRipngInterface(name, <any>undefined, { urn })
            case "fmgdevice:index/routerRipngNeighbor:RouterRipngNeighbor":
                return new RouterRipngNeighbor(name, <any>undefined, { urn })
            case "fmgdevice:index/routerRipngNetwork:RouterRipngNetwork":
                return new RouterRipngNetwork(name, <any>undefined, { urn })
            case "fmgdevice:index/routerRipngOffsetlist:RouterRipngOffsetlist":
                return new RouterRipngOffsetlist(name, <any>undefined, { urn })
            case "fmgdevice:index/routerRipngRedistribute:RouterRipngRedistribute":
                return new RouterRipngRedistribute(name, <any>undefined, { urn })
            case "fmgdevice:index/routerSetting:RouterSetting":
                return new RouterSetting(name, <any>undefined, { urn })
            case "fmgdevice:index/routerStatic6:RouterStatic6":
                return new RouterStatic6(name, <any>undefined, { urn })
            case "fmgdevice:index/routerStatic:RouterStatic":
                return new RouterStatic(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontroller8021xsettings:Switchcontroller8021xsettings":
                return new Switchcontroller8021xsettings(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerAclGroup:SwitchcontrollerAclGroup":
                return new SwitchcontrollerAclGroup(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerAclIngress:SwitchcontrollerAclIngress":
                return new SwitchcontrollerAclIngress(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerAclIngressAction:SwitchcontrollerAclIngressAction":
                return new SwitchcontrollerAclIngressAction(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerAclIngressClassifier:SwitchcontrollerAclIngressClassifier":
                return new SwitchcontrollerAclIngressClassifier(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerAutoconfigCustom:SwitchcontrollerAutoconfigCustom":
                return new SwitchcontrollerAutoconfigCustom(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerAutoconfigCustomSwitchbinding:SwitchcontrollerAutoconfigCustomSwitchbinding":
                return new SwitchcontrollerAutoconfigCustomSwitchbinding(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerAutoconfigDefault:SwitchcontrollerAutoconfigDefault":
                return new SwitchcontrollerAutoconfigDefault(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerAutoconfigPolicy:SwitchcontrollerAutoconfigPolicy":
                return new SwitchcontrollerAutoconfigPolicy(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerCustomcommand:SwitchcontrollerCustomcommand":
                return new SwitchcontrollerCustomcommand(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerDynamicportpolicy:SwitchcontrollerDynamicportpolicy":
                return new SwitchcontrollerDynamicportpolicy(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerDynamicportpolicyPolicy:SwitchcontrollerDynamicportpolicyPolicy":
                return new SwitchcontrollerDynamicportpolicyPolicy(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerDynamicportpolicyPolicyMove:SwitchcontrollerDynamicportpolicyPolicyMove":
                return new SwitchcontrollerDynamicportpolicyPolicyMove(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerFlowtracking:SwitchcontrollerFlowtracking":
                return new SwitchcontrollerFlowtracking(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerFlowtrackingAggregates:SwitchcontrollerFlowtrackingAggregates":
                return new SwitchcontrollerFlowtrackingAggregates(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerFlowtrackingCollectors:SwitchcontrollerFlowtrackingCollectors":
                return new SwitchcontrollerFlowtrackingCollectors(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerFortilinksettings:SwitchcontrollerFortilinksettings":
                return new SwitchcontrollerFortilinksettings(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerFortilinksettingsNacports:SwitchcontrollerFortilinksettingsNacports":
                return new SwitchcontrollerFortilinksettingsNacports(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerGlobal:SwitchcontrollerGlobal":
                return new SwitchcontrollerGlobal(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerGlobalCustomcommand:SwitchcontrollerGlobalCustomcommand":
                return new SwitchcontrollerGlobalCustomcommand(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerIgmpsnooping:SwitchcontrollerIgmpsnooping":
                return new SwitchcontrollerIgmpsnooping(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerInitialconfigTemplate:SwitchcontrollerInitialconfigTemplate":
                return new SwitchcontrollerInitialconfigTemplate(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerInitialconfigVlans:SwitchcontrollerInitialconfigVlans":
                return new SwitchcontrollerInitialconfigVlans(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerLldpprofile:SwitchcontrollerLldpprofile":
                return new SwitchcontrollerLldpprofile(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerLldpprofileCustomtlvs:SwitchcontrollerLldpprofileCustomtlvs":
                return new SwitchcontrollerLldpprofileCustomtlvs(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerLldpsettings:SwitchcontrollerLldpsettings":
                return new SwitchcontrollerLldpsettings(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerLocation:SwitchcontrollerLocation":
                return new SwitchcontrollerLocation(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerLocationAddresscivic:SwitchcontrollerLocationAddresscivic":
                return new SwitchcontrollerLocationAddresscivic(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerLocationCoordinates:SwitchcontrollerLocationCoordinates":
                return new SwitchcontrollerLocationCoordinates(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerLocationElinnumber:SwitchcontrollerLocationElinnumber":
                return new SwitchcontrollerLocationElinnumber(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerMacpolicy:SwitchcontrollerMacpolicy":
                return new SwitchcontrollerMacpolicy(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerManagedswitch8021xsettings:SwitchcontrollerManagedswitch8021xsettings":
                return new SwitchcontrollerManagedswitch8021xsettings(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerManagedswitch:SwitchcontrollerManagedswitch":
                return new SwitchcontrollerManagedswitch(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerManagedswitchCustomcommand:SwitchcontrollerManagedswitchCustomcommand":
                return new SwitchcontrollerManagedswitchCustomcommand(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerManagedswitchDhcpsnoopingstaticclient:SwitchcontrollerManagedswitchDhcpsnoopingstaticclient":
                return new SwitchcontrollerManagedswitchDhcpsnoopingstaticclient(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerManagedswitchIgmpsnooping:SwitchcontrollerManagedswitchIgmpsnooping":
                return new SwitchcontrollerManagedswitchIgmpsnooping(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerManagedswitchIgmpsnoopingVlans:SwitchcontrollerManagedswitchIgmpsnoopingVlans":
                return new SwitchcontrollerManagedswitchIgmpsnoopingVlans(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerManagedswitchIpsourceguard:SwitchcontrollerManagedswitchIpsourceguard":
                return new SwitchcontrollerManagedswitchIpsourceguard(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerManagedswitchIpsourceguardBindingentry:SwitchcontrollerManagedswitchIpsourceguardBindingentry":
                return new SwitchcontrollerManagedswitchIpsourceguardBindingentry(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerManagedswitchMirror:SwitchcontrollerManagedswitchMirror":
                return new SwitchcontrollerManagedswitchMirror(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerManagedswitchMove:SwitchcontrollerManagedswitchMove":
                return new SwitchcontrollerManagedswitchMove(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerManagedswitchPortsDhcpsnoopoption82override:SwitchcontrollerManagedswitchPortsDhcpsnoopoption82override":
                return new SwitchcontrollerManagedswitchPortsDhcpsnoopoption82override(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerManagedswitchRemotelog:SwitchcontrollerManagedswitchRemotelog":
                return new SwitchcontrollerManagedswitchRemotelog(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerManagedswitchRouteoffloadrouter:SwitchcontrollerManagedswitchRouteoffloadrouter":
                return new SwitchcontrollerManagedswitchRouteoffloadrouter(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerManagedswitchSnmpcommunity:SwitchcontrollerManagedswitchSnmpcommunity":
                return new SwitchcontrollerManagedswitchSnmpcommunity(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerManagedswitchSnmpcommunityHosts:SwitchcontrollerManagedswitchSnmpcommunityHosts":
                return new SwitchcontrollerManagedswitchSnmpcommunityHosts(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerManagedswitchSnmpsysinfo:SwitchcontrollerManagedswitchSnmpsysinfo":
                return new SwitchcontrollerManagedswitchSnmpsysinfo(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerManagedswitchSnmptrapthreshold:SwitchcontrollerManagedswitchSnmptrapthreshold":
                return new SwitchcontrollerManagedswitchSnmptrapthreshold(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerManagedswitchSnmpuser:SwitchcontrollerManagedswitchSnmpuser":
                return new SwitchcontrollerManagedswitchSnmpuser(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerManagedswitchStaticmac:SwitchcontrollerManagedswitchStaticmac":
                return new SwitchcontrollerManagedswitchStaticmac(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerManagedswitchStormcontrol:SwitchcontrollerManagedswitchStormcontrol":
                return new SwitchcontrollerManagedswitchStormcontrol(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerManagedswitchStpinstance:SwitchcontrollerManagedswitchStpinstance":
                return new SwitchcontrollerManagedswitchStpinstance(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerManagedswitchStpsettings:SwitchcontrollerManagedswitchStpsettings":
                return new SwitchcontrollerManagedswitchStpsettings(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerManagedswitchSwitchlog:SwitchcontrollerManagedswitchSwitchlog":
                return new SwitchcontrollerManagedswitchSwitchlog(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerManagedswitchVlan:SwitchcontrollerManagedswitchVlan":
                return new SwitchcontrollerManagedswitchVlan(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerNetworkmonitorsettings:SwitchcontrollerNetworkmonitorsettings":
                return new SwitchcontrollerNetworkmonitorsettings(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerPtpInterfacepolicy:SwitchcontrollerPtpInterfacepolicy":
                return new SwitchcontrollerPtpInterfacepolicy(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerPtpPolicy:SwitchcontrollerPtpPolicy":
                return new SwitchcontrollerPtpPolicy(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerPtpProfile:SwitchcontrollerPtpProfile":
                return new SwitchcontrollerPtpProfile(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerPtpSettings:SwitchcontrollerPtpSettings":
                return new SwitchcontrollerPtpSettings(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerQosDot1pmap:SwitchcontrollerQosDot1pmap":
                return new SwitchcontrollerQosDot1pmap(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerQosIpdscpmap:SwitchcontrollerQosIpdscpmap":
                return new SwitchcontrollerQosIpdscpmap(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerQosIpdscpmapMap:SwitchcontrollerQosIpdscpmapMap":
                return new SwitchcontrollerQosIpdscpmapMap(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerQosQospolicy:SwitchcontrollerQosQospolicy":
                return new SwitchcontrollerQosQospolicy(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerQosQueuepolicy:SwitchcontrollerQosQueuepolicy":
                return new SwitchcontrollerQosQueuepolicy(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerRemotelog:SwitchcontrollerRemotelog":
                return new SwitchcontrollerRemotelog(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerSecuritypolicy8021x:SwitchcontrollerSecuritypolicy8021x":
                return new SwitchcontrollerSecuritypolicy8021x(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerSecuritypolicyLocalaccess:SwitchcontrollerSecuritypolicyLocalaccess":
                return new SwitchcontrollerSecuritypolicyLocalaccess(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerSflow:SwitchcontrollerSflow":
                return new SwitchcontrollerSflow(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerSnmpcommunity:SwitchcontrollerSnmpcommunity":
                return new SwitchcontrollerSnmpcommunity(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerSnmpcommunityHosts:SwitchcontrollerSnmpcommunityHosts":
                return new SwitchcontrollerSnmpcommunityHosts(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerSnmpsysinfo:SwitchcontrollerSnmpsysinfo":
                return new SwitchcontrollerSnmpsysinfo(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerSnmptrapthreshold:SwitchcontrollerSnmptrapthreshold":
                return new SwitchcontrollerSnmptrapthreshold(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerSnmpuser:SwitchcontrollerSnmpuser":
                return new SwitchcontrollerSnmpuser(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerStormcontrol:SwitchcontrollerStormcontrol":
                return new SwitchcontrollerStormcontrol(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerStormcontrolpolicy:SwitchcontrollerStormcontrolpolicy":
                return new SwitchcontrollerStormcontrolpolicy(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerStpinstance:SwitchcontrollerStpinstance":
                return new SwitchcontrollerStpinstance(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerStpsettings:SwitchcontrollerStpsettings":
                return new SwitchcontrollerStpsettings(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerSwitchgroup:SwitchcontrollerSwitchgroup":
                return new SwitchcontrollerSwitchgroup(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerSwitchinterfacetag:SwitchcontrollerSwitchinterfacetag":
                return new SwitchcontrollerSwitchinterfacetag(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerSwitchlog:SwitchcontrollerSwitchlog":
                return new SwitchcontrollerSwitchlog(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerSwitchprofile:SwitchcontrollerSwitchprofile":
                return new SwitchcontrollerSwitchprofile(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerSystem:SwitchcontrollerSystem":
                return new SwitchcontrollerSystem(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerTrafficpolicy:SwitchcontrollerTrafficpolicy":
                return new SwitchcontrollerTrafficpolicy(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerTrafficsniffer:SwitchcontrollerTrafficsniffer":
                return new SwitchcontrollerTrafficsniffer(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerTrafficsnifferTargetip:SwitchcontrollerTrafficsnifferTargetip":
                return new SwitchcontrollerTrafficsnifferTargetip(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerTrafficsnifferTargetmac:SwitchcontrollerTrafficsnifferTargetmac":
                return new SwitchcontrollerTrafficsnifferTargetmac(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerTrafficsnifferTargetport:SwitchcontrollerTrafficsnifferTargetport":
                return new SwitchcontrollerTrafficsnifferTargetport(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerVirtualportpool:SwitchcontrollerVirtualportpool":
                return new SwitchcontrollerVirtualportpool(name, <any>undefined, { urn })
            case "fmgdevice:index/switchcontrollerVlanpolicy:SwitchcontrollerVlanpolicy":
                return new SwitchcontrollerVlanpolicy(name, <any>undefined, { urn })
            case "fmgdevice:index/system5gmodemModem1:System5gmodemModem1":
                return new System5gmodemModem1(name, <any>undefined, { urn })
            case "fmgdevice:index/systemAccprofile:SystemAccprofile":
                return new SystemAccprofile(name, <any>undefined, { urn })
            case "fmgdevice:index/systemAcme:SystemAcme":
                return new SystemAcme(name, <any>undefined, { urn })
            case "fmgdevice:index/systemAcmeAccounts:SystemAcmeAccounts":
                return new SystemAcmeAccounts(name, <any>undefined, { urn })
            case "fmgdevice:index/systemAdmin:SystemAdmin":
                return new SystemAdmin(name, <any>undefined, { urn })
            case "fmgdevice:index/systemAffinityinterrupt:SystemAffinityinterrupt":
                return new SystemAffinityinterrupt(name, <any>undefined, { urn })
            case "fmgdevice:index/systemAffinitypacketredistribution:SystemAffinitypacketredistribution":
                return new SystemAffinitypacketredistribution(name, <any>undefined, { urn })
            case "fmgdevice:index/systemAlias:SystemAlias":
                return new SystemAlias(name, <any>undefined, { urn })
            case "fmgdevice:index/systemApiuser:SystemApiuser":
                return new SystemApiuser(name, <any>undefined, { urn })
            case "fmgdevice:index/systemApiuserTrusthost:SystemApiuserTrusthost":
                return new SystemApiuserTrusthost(name, <any>undefined, { urn })
            case "fmgdevice:index/systemArptable:SystemArptable":
                return new SystemArptable(name, <any>undefined, { urn })
            case "fmgdevice:index/systemAutoinstall:SystemAutoinstall":
                return new SystemAutoinstall(name, <any>undefined, { urn })
            case "fmgdevice:index/systemAutomationaction:SystemAutomationaction":
                return new SystemAutomationaction(name, <any>undefined, { urn })
            case "fmgdevice:index/systemAutomationactionHttpheaders:SystemAutomationactionHttpheaders":
                return new SystemAutomationactionHttpheaders(name, <any>undefined, { urn })
            case "fmgdevice:index/systemAutomationdestination:SystemAutomationdestination":
                return new SystemAutomationdestination(name, <any>undefined, { urn })
            case "fmgdevice:index/systemAutomationstitch:SystemAutomationstitch":
                return new SystemAutomationstitch(name, <any>undefined, { urn })
            case "fmgdevice:index/systemAutomationstitchActions:SystemAutomationstitchActions":
                return new SystemAutomationstitchActions(name, <any>undefined, { urn })
            case "fmgdevice:index/systemAutomationstitchActionsMove:SystemAutomationstitchActionsMove":
                return new SystemAutomationstitchActionsMove(name, <any>undefined, { urn })
            case "fmgdevice:index/systemAutomationtrigger:SystemAutomationtrigger":
                return new SystemAutomationtrigger(name, <any>undefined, { urn })
            case "fmgdevice:index/systemAutomationtriggerFields:SystemAutomationtriggerFields":
                return new SystemAutomationtriggerFields(name, <any>undefined, { urn })
            case "fmgdevice:index/systemAutoscript:SystemAutoscript":
                return new SystemAutoscript(name, <any>undefined, { urn })
            case "fmgdevice:index/systemAutoupdateSchedule:SystemAutoupdateSchedule":
                return new SystemAutoupdateSchedule(name, <any>undefined, { urn })
            case "fmgdevice:index/systemAutoupdateTunneling:SystemAutoupdateTunneling":
                return new SystemAutoupdateTunneling(name, <any>undefined, { urn })
            case "fmgdevice:index/systemCentralmanagement:SystemCentralmanagement":
                return new SystemCentralmanagement(name, <any>undefined, { urn })
            case "fmgdevice:index/systemCentralmanagementServerlist:SystemCentralmanagementServerlist":
                return new SystemCentralmanagementServerlist(name, <any>undefined, { urn })
            case "fmgdevice:index/systemClustersync:SystemClustersync":
                return new SystemClustersync(name, <any>undefined, { urn })
            case "fmgdevice:index/systemClustersyncSessionsyncfilter:SystemClustersyncSessionsyncfilter":
                return new SystemClustersyncSessionsyncfilter(name, <any>undefined, { urn })
            case "fmgdevice:index/systemClustersyncSessionsyncfilterCustomservice:SystemClustersyncSessionsyncfilterCustomservice":
                return new SystemClustersyncSessionsyncfilterCustomservice(name, <any>undefined, { urn })
            case "fmgdevice:index/systemConsole:SystemConsole":
                return new SystemConsole(name, <any>undefined, { urn })
            case "fmgdevice:index/systemConsoleserverEntries:SystemConsoleserverEntries":
                return new SystemConsoleserverEntries(name, <any>undefined, { urn })
            case "fmgdevice:index/systemCsf:SystemCsf":
                return new SystemCsf(name, <any>undefined, { urn })
            case "fmgdevice:index/systemCsfFabricconnector:SystemCsfFabricconnector":
                return new SystemCsfFabricconnector(name, <any>undefined, { urn })
            case "fmgdevice:index/systemCsfFabricdevice:SystemCsfFabricdevice":
                return new SystemCsfFabricdevice(name, <any>undefined, { urn })
            case "fmgdevice:index/systemDdns:SystemDdns":
                return new SystemDdns(name, <any>undefined, { urn })
            case "fmgdevice:index/systemDedicatedmgmt:SystemDedicatedmgmt":
                return new SystemDedicatedmgmt(name, <any>undefined, { urn })
            case "fmgdevice:index/systemDeviceupgrade:SystemDeviceupgrade":
                return new SystemDeviceupgrade(name, <any>undefined, { urn })
            case "fmgdevice:index/systemDeviceupgradeKnownhamembers:SystemDeviceupgradeKnownhamembers":
                return new SystemDeviceupgradeKnownhamembers(name, <any>undefined, { urn })
            case "fmgdevice:index/systemDhcp6Server:SystemDhcp6Server":
                return new SystemDhcp6Server(name, <any>undefined, { urn })
            case "fmgdevice:index/systemDhcp6ServerIprange:SystemDhcp6ServerIprange":
                return new SystemDhcp6ServerIprange(name, <any>undefined, { urn })
            case "fmgdevice:index/systemDhcp6ServerPrefixrange:SystemDhcp6ServerPrefixrange":
                return new SystemDhcp6ServerPrefixrange(name, <any>undefined, { urn })
            case "fmgdevice:index/systemDns64:SystemDns64":
                return new SystemDns64(name, <any>undefined, { urn })
            case "fmgdevice:index/systemDns:SystemDns":
                return new SystemDns(name, <any>undefined, { urn })
            case "fmgdevice:index/systemDnsserver:SystemDnsserver":
                return new SystemDnsserver(name, <any>undefined, { urn })
            case "fmgdevice:index/systemDscpbasedpriority:SystemDscpbasedpriority":
                return new SystemDscpbasedpriority(name, <any>undefined, { urn })
            case "fmgdevice:index/systemEmailserver:SystemEmailserver":
                return new SystemEmailserver(name, <any>undefined, { urn })
            case "fmgdevice:index/systemEvpn:SystemEvpn":
                return new SystemEvpn(name, <any>undefined, { urn })
            case "fmgdevice:index/systemFabricvpn:SystemFabricvpn":
                return new SystemFabricvpn(name, <any>undefined, { urn })
            case "fmgdevice:index/systemFabricvpnAdvertisedsubnets:SystemFabricvpnAdvertisedsubnets":
                return new SystemFabricvpnAdvertisedsubnets(name, <any>undefined, { urn })
            case "fmgdevice:index/systemFabricvpnOverlays:SystemFabricvpnOverlays":
                return new SystemFabricvpnOverlays(name, <any>undefined, { urn })
            case "fmgdevice:index/systemFederatedupgrade:SystemFederatedupgrade":
                return new SystemFederatedupgrade(name, <any>undefined, { urn })
            case "fmgdevice:index/systemFederatedupgradeKnownhamembers:SystemFederatedupgradeKnownhamembers":
                return new SystemFederatedupgradeKnownhamembers(name, <any>undefined, { urn })
            case "fmgdevice:index/systemFederatedupgradeNodelist:SystemFederatedupgradeNodelist":
                return new SystemFederatedupgradeNodelist(name, <any>undefined, { urn })
            case "fmgdevice:index/systemFipscc:SystemFipscc":
                return new SystemFipscc(name, <any>undefined, { urn })
            case "fmgdevice:index/systemFortindr:SystemFortindr":
                return new SystemFortindr(name, <any>undefined, { urn })
            case "fmgdevice:index/systemFortisandbox:SystemFortisandbox":
                return new SystemFortisandbox(name, <any>undefined, { urn })
            case "fmgdevice:index/systemFssopolling:SystemFssopolling":
                return new SystemFssopolling(name, <any>undefined, { urn })
            case "fmgdevice:index/systemFtmpush:SystemFtmpush":
                return new SystemFtmpush(name, <any>undefined, { urn })
            case "fmgdevice:index/systemGeneve:SystemGeneve":
                return new SystemGeneve(name, <any>undefined, { urn })
            case "fmgdevice:index/systemGlobal:SystemGlobal":
                return new SystemGlobal(name, <any>undefined, { urn })
            case "fmgdevice:index/systemGretunnel:SystemGretunnel":
                return new SystemGretunnel(name, <any>undefined, { urn })
            case "fmgdevice:index/systemHa:SystemHa":
                return new SystemHa(name, <any>undefined, { urn })
            case "fmgdevice:index/systemHaHamgmtinterfaces:SystemHaHamgmtinterfaces":
                return new SystemHaHamgmtinterfaces(name, <any>undefined, { urn })
            case "fmgdevice:index/systemHaUnicastpeers:SystemHaUnicastpeers":
                return new SystemHaUnicastpeers(name, <any>undefined, { urn })
            case "fmgdevice:index/systemHaVcluster:SystemHaVcluster":
                return new SystemHaVcluster(name, <any>undefined, { urn })
            case "fmgdevice:index/systemHamonitor:SystemHamonitor":
                return new SystemHamonitor(name, <any>undefined, { urn })
            case "fmgdevice:index/systemIke:SystemIke":
                return new SystemIke(name, <any>undefined, { urn })
            case "fmgdevice:index/systemIkeDhgroup14:SystemIkeDhgroup14":
                return new SystemIkeDhgroup14(name, <any>undefined, { urn })
            case "fmgdevice:index/systemIkeDhgroup15:SystemIkeDhgroup15":
                return new SystemIkeDhgroup15(name, <any>undefined, { urn })
            case "fmgdevice:index/systemIkeDhgroup16:SystemIkeDhgroup16":
                return new SystemIkeDhgroup16(name, <any>undefined, { urn })
            case "fmgdevice:index/systemIkeDhgroup17:SystemIkeDhgroup17":
                return new SystemIkeDhgroup17(name, <any>undefined, { urn })
            case "fmgdevice:index/systemIkeDhgroup18:SystemIkeDhgroup18":
                return new SystemIkeDhgroup18(name, <any>undefined, { urn })
            case "fmgdevice:index/systemIkeDhgroup19:SystemIkeDhgroup19":
                return new SystemIkeDhgroup19(name, <any>undefined, { urn })
            case "fmgdevice:index/systemIkeDhgroup1:SystemIkeDhgroup1":
                return new SystemIkeDhgroup1(name, <any>undefined, { urn })
            case "fmgdevice:index/systemIkeDhgroup20:SystemIkeDhgroup20":
                return new SystemIkeDhgroup20(name, <any>undefined, { urn })
            case "fmgdevice:index/systemIkeDhgroup21:SystemIkeDhgroup21":
                return new SystemIkeDhgroup21(name, <any>undefined, { urn })
            case "fmgdevice:index/systemIkeDhgroup27:SystemIkeDhgroup27":
                return new SystemIkeDhgroup27(name, <any>undefined, { urn })
            case "fmgdevice:index/systemIkeDhgroup28:SystemIkeDhgroup28":
                return new SystemIkeDhgroup28(name, <any>undefined, { urn })
            case "fmgdevice:index/systemIkeDhgroup29:SystemIkeDhgroup29":
                return new SystemIkeDhgroup29(name, <any>undefined, { urn })
            case "fmgdevice:index/systemIkeDhgroup2:SystemIkeDhgroup2":
                return new SystemIkeDhgroup2(name, <any>undefined, { urn })
            case "fmgdevice:index/systemIkeDhgroup30:SystemIkeDhgroup30":
                return new SystemIkeDhgroup30(name, <any>undefined, { urn })
            case "fmgdevice:index/systemIkeDhgroup31:SystemIkeDhgroup31":
                return new SystemIkeDhgroup31(name, <any>undefined, { urn })
            case "fmgdevice:index/systemIkeDhgroup32:SystemIkeDhgroup32":
                return new SystemIkeDhgroup32(name, <any>undefined, { urn })
            case "fmgdevice:index/systemIkeDhgroup5:SystemIkeDhgroup5":
                return new SystemIkeDhgroup5(name, <any>undefined, { urn })
            case "fmgdevice:index/systemInterface:SystemInterface":
                return new SystemInterface(name, <any>undefined, { urn })
            case "fmgdevice:index/systemInterfaceClientoptions:SystemInterfaceClientoptions":
                return new SystemInterfaceClientoptions(name, <any>undefined, { urn })
            case "fmgdevice:index/systemInterfaceDhcpsnoopingserverlist:SystemInterfaceDhcpsnoopingserverlist":
                return new SystemInterfaceDhcpsnoopingserverlist(name, <any>undefined, { urn })
            case "fmgdevice:index/systemInterfaceIpv6:SystemInterfaceIpv6":
                return new SystemInterfaceIpv6(name, <any>undefined, { urn })
            case "fmgdevice:index/systemInterfaceIpv6Dhcp6iapdlist:SystemInterfaceIpv6Dhcp6iapdlist":
                return new SystemInterfaceIpv6Dhcp6iapdlist(name, <any>undefined, { urn })
            case "fmgdevice:index/systemInterfaceIpv6Vrrp6:SystemInterfaceIpv6Vrrp6":
                return new SystemInterfaceIpv6Vrrp6(name, <any>undefined, { urn })
            case "fmgdevice:index/systemInterfaceTagging:SystemInterfaceTagging":
                return new SystemInterfaceTagging(name, <any>undefined, { urn })
            case "fmgdevice:index/systemInterfaceVrrp:SystemInterfaceVrrp":
                return new SystemInterfaceVrrp(name, <any>undefined, { urn })
            case "fmgdevice:index/systemInterfaceVrrpProxyarp:SystemInterfaceVrrpProxyarp":
                return new SystemInterfaceVrrpProxyarp(name, <any>undefined, { urn })
            case "fmgdevice:index/systemIpam:SystemIpam":
                return new SystemIpam(name, <any>undefined, { urn })
            case "fmgdevice:index/systemIpamPools:SystemIpamPools":
                return new SystemIpamPools(name, <any>undefined, { urn })
            case "fmgdevice:index/systemIpamPoolsExclude:SystemIpamPoolsExclude":
                return new SystemIpamPoolsExclude(name, <any>undefined, { urn })
            case "fmgdevice:index/systemIpamRules:SystemIpamRules":
                return new SystemIpamRules(name, <any>undefined, { urn })
            case "fmgdevice:index/systemIpamRulesMove:SystemIpamRulesMove":
                return new SystemIpamRulesMove(name, <any>undefined, { urn })
            case "fmgdevice:index/systemIpiptunnel:SystemIpiptunnel":
                return new SystemIpiptunnel(name, <any>undefined, { urn })
            case "fmgdevice:index/systemIps:SystemIps":
                return new SystemIps(name, <any>undefined, { urn })
            case "fmgdevice:index/systemIpsecaggregate:SystemIpsecaggregate":
                return new SystemIpsecaggregate(name, <any>undefined, { urn })
            case "fmgdevice:index/systemIpsurlfilterdns6:SystemIpsurlfilterdns6":
                return new SystemIpsurlfilterdns6(name, <any>undefined, { urn })
            case "fmgdevice:index/systemIpsurlfilterdns:SystemIpsurlfilterdns":
                return new SystemIpsurlfilterdns(name, <any>undefined, { urn })
            case "fmgdevice:index/systemIpv6neighborcache:SystemIpv6neighborcache":
                return new SystemIpv6neighborcache(name, <any>undefined, { urn })
            case "fmgdevice:index/systemIpv6tunnel:SystemIpv6tunnel":
                return new SystemIpv6tunnel(name, <any>undefined, { urn })
            case "fmgdevice:index/systemLinkmonitor:SystemLinkmonitor":
                return new SystemLinkmonitor(name, <any>undefined, { urn })
            case "fmgdevice:index/systemLinkmonitorServerlist:SystemLinkmonitorServerlist":
                return new SystemLinkmonitorServerlist(name, <any>undefined, { urn })
            case "fmgdevice:index/systemLldpNetworkpolicy:SystemLldpNetworkpolicy":
                return new SystemLldpNetworkpolicy(name, <any>undefined, { urn })
            case "fmgdevice:index/systemLldpNetworkpolicyGuest:SystemLldpNetworkpolicyGuest":
                return new SystemLldpNetworkpolicyGuest(name, <any>undefined, { urn })
            case "fmgdevice:index/systemLldpNetworkpolicyGuestvoicesignaling:SystemLldpNetworkpolicyGuestvoicesignaling":
                return new SystemLldpNetworkpolicyGuestvoicesignaling(name, <any>undefined, { urn })
            case "fmgdevice:index/systemLldpNetworkpolicySoftphone:SystemLldpNetworkpolicySoftphone":
                return new SystemLldpNetworkpolicySoftphone(name, <any>undefined, { urn })
            case "fmgdevice:index/systemLldpNetworkpolicyStreamingvideo:SystemLldpNetworkpolicyStreamingvideo":
                return new SystemLldpNetworkpolicyStreamingvideo(name, <any>undefined, { urn })
            case "fmgdevice:index/systemLldpNetworkpolicyVideoconferencing:SystemLldpNetworkpolicyVideoconferencing":
                return new SystemLldpNetworkpolicyVideoconferencing(name, <any>undefined, { urn })
            case "fmgdevice:index/systemLldpNetworkpolicyVideosignaling:SystemLldpNetworkpolicyVideosignaling":
                return new SystemLldpNetworkpolicyVideosignaling(name, <any>undefined, { urn })
            case "fmgdevice:index/systemLldpNetworkpolicyVoice:SystemLldpNetworkpolicyVoice":
                return new SystemLldpNetworkpolicyVoice(name, <any>undefined, { urn })
            case "fmgdevice:index/systemLldpNetworkpolicyVoicesignaling:SystemLldpNetworkpolicyVoicesignaling":
                return new SystemLldpNetworkpolicyVoicesignaling(name, <any>undefined, { urn })
            case "fmgdevice:index/systemMobiletunnel:SystemMobiletunnel":
                return new SystemMobiletunnel(name, <any>undefined, { urn })
            case "fmgdevice:index/systemMobiletunnelNetwork:SystemMobiletunnelNetwork":
                return new SystemMobiletunnelNetwork(name, <any>undefined, { urn })
            case "fmgdevice:index/systemNat64Secondaryprefix:SystemNat64Secondaryprefix":
                return new SystemNat64Secondaryprefix(name, <any>undefined, { urn })
            case "fmgdevice:index/systemNdproxy:SystemNdproxy":
                return new SystemNdproxy(name, <any>undefined, { urn })
            case "fmgdevice:index/systemNetflow:SystemNetflow":
                return new SystemNetflow(name, <any>undefined, { urn })
            case "fmgdevice:index/systemNetflowCollectors:SystemNetflowCollectors":
                return new SystemNetflowCollectors(name, <any>undefined, { urn })
            case "fmgdevice:index/systemNetworkvisibility:SystemNetworkvisibility":
                return new SystemNetworkvisibility(name, <any>undefined, { urn })
            case "fmgdevice:index/systemNtp:SystemNtp":
                return new SystemNtp(name, <any>undefined, { urn })
            case "fmgdevice:index/systemNtpNtpserver:SystemNtpNtpserver":
                return new SystemNtpNtpserver(name, <any>undefined, { urn })
            case "fmgdevice:index/systemPasswordpolicy:SystemPasswordpolicy":
                return new SystemPasswordpolicy(name, <any>undefined, { urn })
            case "fmgdevice:index/systemPasswordpolicyguestadmin:SystemPasswordpolicyguestadmin":
                return new SystemPasswordpolicyguestadmin(name, <any>undefined, { urn })
            case "fmgdevice:index/systemPcpserver:SystemPcpserver":
                return new SystemPcpserver(name, <any>undefined, { urn })
            case "fmgdevice:index/systemPcpserverPools:SystemPcpserverPools":
                return new SystemPcpserverPools(name, <any>undefined, { urn })
            case "fmgdevice:index/systemPppoeinterface:SystemPppoeinterface":
                return new SystemPppoeinterface(name, <any>undefined, { urn })
            case "fmgdevice:index/systemProberesponse:SystemProberesponse":
                return new SystemProberesponse(name, <any>undefined, { urn })
            case "fmgdevice:index/systemProxyarp:SystemProxyarp":
                return new SystemProxyarp(name, <any>undefined, { urn })
            case "fmgdevice:index/systemPtp:SystemPtp":
                return new SystemPtp(name, <any>undefined, { urn })
            case "fmgdevice:index/systemPtpServerinterface:SystemPtpServerinterface":
                return new SystemPtpServerinterface(name, <any>undefined, { urn })
            case "fmgdevice:index/systemReplacemsgAdmin:SystemReplacemsgAdmin":
                return new SystemReplacemsgAdmin(name, <any>undefined, { urn })
            case "fmgdevice:index/systemReplacemsgAlertmail:SystemReplacemsgAlertmail":
                return new SystemReplacemsgAlertmail(name, <any>undefined, { urn })
            case "fmgdevice:index/systemReplacemsgAuth:SystemReplacemsgAuth":
                return new SystemReplacemsgAuth(name, <any>undefined, { urn })
            case "fmgdevice:index/systemReplacemsgAutomation:SystemReplacemsgAutomation":
                return new SystemReplacemsgAutomation(name, <any>undefined, { urn })
            case "fmgdevice:index/systemReplacemsgCustommessage:SystemReplacemsgCustommessage":
                return new SystemReplacemsgCustommessage(name, <any>undefined, { urn })
            case "fmgdevice:index/systemReplacemsgFortiguardwf:SystemReplacemsgFortiguardwf":
                return new SystemReplacemsgFortiguardwf(name, <any>undefined, { urn })
            case "fmgdevice:index/systemReplacemsgFtp:SystemReplacemsgFtp":
                return new SystemReplacemsgFtp(name, <any>undefined, { urn })
            case "fmgdevice:index/systemReplacemsgHttp:SystemReplacemsgHttp":
                return new SystemReplacemsgHttp(name, <any>undefined, { urn })
            case "fmgdevice:index/systemReplacemsgIcap:SystemReplacemsgIcap":
                return new SystemReplacemsgIcap(name, <any>undefined, { urn })
            case "fmgdevice:index/systemReplacemsgMail:SystemReplacemsgMail":
                return new SystemReplacemsgMail(name, <any>undefined, { urn })
            case "fmgdevice:index/systemReplacemsgNacquar:SystemReplacemsgNacquar":
                return new SystemReplacemsgNacquar(name, <any>undefined, { urn })
            case "fmgdevice:index/systemReplacemsgSpam:SystemReplacemsgSpam":
                return new SystemReplacemsgSpam(name, <any>undefined, { urn })
            case "fmgdevice:index/systemReplacemsgSslvpn:SystemReplacemsgSslvpn":
                return new SystemReplacemsgSslvpn(name, <any>undefined, { urn })
            case "fmgdevice:index/systemReplacemsgTrafficquota:SystemReplacemsgTrafficquota":
                return new SystemReplacemsgTrafficquota(name, <any>undefined, { urn })
            case "fmgdevice:index/systemReplacemsgUtm:SystemReplacemsgUtm":
                return new SystemReplacemsgUtm(name, <any>undefined, { urn })
            case "fmgdevice:index/systemReplacemsgWebproxy:SystemReplacemsgWebproxy":
                return new SystemReplacemsgWebproxy(name, <any>undefined, { urn })
            case "fmgdevice:index/systemSaml:SystemSaml":
                return new SystemSaml(name, <any>undefined, { urn })
            case "fmgdevice:index/systemSdwan:SystemSdwan":
                return new SystemSdwan(name, <any>undefined, { urn })
            case "fmgdevice:index/systemSdwanDuplication:SystemSdwanDuplication":
                return new SystemSdwanDuplication(name, <any>undefined, { urn })
            case "fmgdevice:index/systemSdwanHealthcheck:SystemSdwanHealthcheck":
                return new SystemSdwanHealthcheck(name, <any>undefined, { urn })
            case "fmgdevice:index/systemSdwanHealthcheckSla:SystemSdwanHealthcheckSla":
                return new SystemSdwanHealthcheckSla(name, <any>undefined, { urn })
            case "fmgdevice:index/systemSdwanMembers:SystemSdwanMembers":
                return new SystemSdwanMembers(name, <any>undefined, { urn })
            case "fmgdevice:index/systemSdwanMembersMove:SystemSdwanMembersMove":
                return new SystemSdwanMembersMove(name, <any>undefined, { urn })
            case "fmgdevice:index/systemSdwanService:SystemSdwanService":
                return new SystemSdwanService(name, <any>undefined, { urn })
            case "fmgdevice:index/systemSdwanServiceMove:SystemSdwanServiceMove":
                return new SystemSdwanServiceMove(name, <any>undefined, { urn })
            case "fmgdevice:index/systemSdwanZone:SystemSdwanZone":
                return new SystemSdwanZone(name, <any>undefined, { urn })
            case "fmgdevice:index/systemSdwanZoneMove:SystemSdwanZoneMove":
                return new SystemSdwanZoneMove(name, <any>undefined, { urn })
            case "fmgdevice:index/systemSessionhelper:SystemSessionhelper":
                return new SystemSessionhelper(name, <any>undefined, { urn })
            case "fmgdevice:index/systemSessionttl:SystemSessionttl":
                return new SystemSessionttl(name, <any>undefined, { urn })
            case "fmgdevice:index/systemSessionttlPort:SystemSessionttlPort":
                return new SystemSessionttlPort(name, <any>undefined, { urn })
            case "fmgdevice:index/systemSettings:SystemSettings":
                return new SystemSettings(name, <any>undefined, { urn })
            case "fmgdevice:index/systemSflow:SystemSflow":
                return new SystemSflow(name, <any>undefined, { urn })
            case "fmgdevice:index/systemSflowCollectors:SystemSflowCollectors":
                return new SystemSflowCollectors(name, <any>undefined, { urn })
            case "fmgdevice:index/systemSittunnel:SystemSittunnel":
                return new SystemSittunnel(name, <any>undefined, { urn })
            case "fmgdevice:index/systemSmcntpNtpserver:SystemSmcntpNtpserver":
                return new SystemSmcntpNtpserver(name, <any>undefined, { urn })
            case "fmgdevice:index/systemSnmpCommunity:SystemSnmpCommunity":
                return new SystemSnmpCommunity(name, <any>undefined, { urn })
            case "fmgdevice:index/systemSnmpCommunityHosts6:SystemSnmpCommunityHosts6":
                return new SystemSnmpCommunityHosts6(name, <any>undefined, { urn })
            case "fmgdevice:index/systemSnmpCommunityHosts:SystemSnmpCommunityHosts":
                return new SystemSnmpCommunityHosts(name, <any>undefined, { urn })
            case "fmgdevice:index/systemSnmpMibview:SystemSnmpMibview":
                return new SystemSnmpMibview(name, <any>undefined, { urn })
            case "fmgdevice:index/systemSnmpSysinfo:SystemSnmpSysinfo":
                return new SystemSnmpSysinfo(name, <any>undefined, { urn })
            case "fmgdevice:index/systemSnmpUser:SystemSnmpUser":
                return new SystemSnmpUser(name, <any>undefined, { urn })
            case "fmgdevice:index/systemSpeedtestschedule:SystemSpeedtestschedule":
                return new SystemSpeedtestschedule(name, <any>undefined, { urn })
            case "fmgdevice:index/systemSpeedtestserver:SystemSpeedtestserver":
                return new SystemSpeedtestserver(name, <any>undefined, { urn })
            case "fmgdevice:index/systemSpeedtestserverHost:SystemSpeedtestserverHost":
                return new SystemSpeedtestserverHost(name, <any>undefined, { urn })
            case "fmgdevice:index/systemSpeedtestsetting:SystemSpeedtestsetting":
                return new SystemSpeedtestsetting(name, <any>undefined, { urn })
            case "fmgdevice:index/systemSshconfig:SystemSshconfig":
                return new SystemSshconfig(name, <any>undefined, { urn })
            case "fmgdevice:index/systemSsoadmin:SystemSsoadmin":
                return new SystemSsoadmin(name, <any>undefined, { urn })
            case "fmgdevice:index/systemSsoforticloudadmin:SystemSsoforticloudadmin":
                return new SystemSsoforticloudadmin(name, <any>undefined, { urn })
            case "fmgdevice:index/systemSsofortigatecloudadmin:SystemSsofortigatecloudadmin":
                return new SystemSsofortigatecloudadmin(name, <any>undefined, { urn })
            case "fmgdevice:index/systemStandalonecluster:SystemStandalonecluster":
                return new SystemStandalonecluster(name, <any>undefined, { urn })
            case "fmgdevice:index/systemStandaloneclusterClusterpeer:SystemStandaloneclusterClusterpeer":
                return new SystemStandaloneclusterClusterpeer(name, <any>undefined, { urn })
            case "fmgdevice:index/systemStandaloneclusterClusterpeerSessionsyncfilter:SystemStandaloneclusterClusterpeerSessionsyncfilter":
                return new SystemStandaloneclusterClusterpeerSessionsyncfilter(name, <any>undefined, { urn })
            case "fmgdevice:index/systemStandaloneclusterClusterpeerSessionsyncfilterCustomservice:SystemStandaloneclusterClusterpeerSessionsyncfilterCustomservice":
                return new SystemStandaloneclusterClusterpeerSessionsyncfilterCustomservice(name, <any>undefined, { urn })
            case "fmgdevice:index/systemStorage:SystemStorage":
                return new SystemStorage(name, <any>undefined, { urn })
            case "fmgdevice:index/systemSwitchinterface:SystemSwitchinterface":
                return new SystemSwitchinterface(name, <any>undefined, { urn })
            case "fmgdevice:index/systemTosbasedpriority:SystemTosbasedpriority":
                return new SystemTosbasedpriority(name, <any>undefined, { urn })
            case "fmgdevice:index/systemVdom:SystemVdom":
                return new SystemVdom(name, <any>undefined, { urn })
            case "fmgdevice:index/systemVdomdns:SystemVdomdns":
                return new SystemVdomdns(name, <any>undefined, { urn })
            case "fmgdevice:index/systemVdomexception:SystemVdomexception":
                return new SystemVdomexception(name, <any>undefined, { urn })
            case "fmgdevice:index/systemVdomlink:SystemVdomlink":
                return new SystemVdomlink(name, <any>undefined, { urn })
            case "fmgdevice:index/systemVdomnetflow:SystemVdomnetflow":
                return new SystemVdomnetflow(name, <any>undefined, { urn })
            case "fmgdevice:index/systemVdomnetflowCollectors:SystemVdomnetflowCollectors":
                return new SystemVdomnetflowCollectors(name, <any>undefined, { urn })
            case "fmgdevice:index/systemVdomproperty:SystemVdomproperty":
                return new SystemVdomproperty(name, <any>undefined, { urn })
            case "fmgdevice:index/systemVdomradiusserver:SystemVdomradiusserver":
                return new SystemVdomradiusserver(name, <any>undefined, { urn })
            case "fmgdevice:index/systemVdomsflow:SystemVdomsflow":
                return new SystemVdomsflow(name, <any>undefined, { urn })
            case "fmgdevice:index/systemVdomsflowCollectors:SystemVdomsflowCollectors":
                return new SystemVdomsflowCollectors(name, <any>undefined, { urn })
            case "fmgdevice:index/systemVnetunnel:SystemVnetunnel":
                return new SystemVnetunnel(name, <any>undefined, { urn })
            case "fmgdevice:index/systemVxlan:SystemVxlan":
                return new SystemVxlan(name, <any>undefined, { urn })
            case "fmgdevice:index/systemWccp:SystemWccp":
                return new SystemWccp(name, <any>undefined, { urn })
            case "fmgdevice:index/systemZone:SystemZone":
                return new SystemZone(name, <any>undefined, { urn })
            case "fmgdevice:index/systemZoneTagging:SystemZoneTagging":
                return new SystemZoneTagging(name, <any>undefined, { urn })
            case "fmgdevice:index/userNacpolicy:UserNacpolicy":
                return new UserNacpolicy(name, <any>undefined, { urn })
            case "fmgdevice:index/userNacpolicyMove:UserNacpolicyMove":
                return new UserNacpolicyMove(name, <any>undefined, { urn })
            case "fmgdevice:index/userQuarantine:UserQuarantine":
                return new UserQuarantine(name, <any>undefined, { urn })
            case "fmgdevice:index/userQuarantineTargets:UserQuarantineTargets":
                return new UserQuarantineTargets(name, <any>undefined, { urn })
            case "fmgdevice:index/userQuarantineTargetsMacs:UserQuarantineTargetsMacs":
                return new UserQuarantineTargetsMacs(name, <any>undefined, { urn })
            case "fmgdevice:index/userSetting:UserSetting":
                return new UserSetting(name, <any>undefined, { urn })
            case "fmgdevice:index/userSettingAuthports:UserSettingAuthports":
                return new UserSettingAuthports(name, <any>undefined, { urn })
            case "fmgdevice:index/vpnCertificateCrl:VpnCertificateCrl":
                return new VpnCertificateCrl(name, <any>undefined, { urn })
            case "fmgdevice:index/vpnCertificateLocal:VpnCertificateLocal":
                return new VpnCertificateLocal(name, <any>undefined, { urn })
            case "fmgdevice:index/vpnCertificateSetting:VpnCertificateSetting":
                return new VpnCertificateSetting(name, <any>undefined, { urn })
            case "fmgdevice:index/vpnCertificateSettingCrlverification:VpnCertificateSettingCrlverification":
                return new VpnCertificateSettingCrlverification(name, <any>undefined, { urn })
            case "fmgdevice:index/vpnIpsecConcentrator:VpnIpsecConcentrator":
                return new VpnIpsecConcentrator(name, <any>undefined, { urn })
            case "fmgdevice:index/vpnIpsecForticlient:VpnIpsecForticlient":
                return new VpnIpsecForticlient(name, <any>undefined, { urn })
            case "fmgdevice:index/vpnIpsecPhase1:VpnIpsecPhase1":
                return new VpnIpsecPhase1(name, <any>undefined, { urn })
            case "fmgdevice:index/vpnIpsecPhase1interface:VpnIpsecPhase1interface":
                return new VpnIpsecPhase1interface(name, <any>undefined, { urn })
            case "fmgdevice:index/vpnIpsecPhase2:VpnIpsecPhase2":
                return new VpnIpsecPhase2(name, <any>undefined, { urn })
            case "fmgdevice:index/vpnIpsecPhase2interface:VpnIpsecPhase2interface":
                return new VpnIpsecPhase2interface(name, <any>undefined, { urn })
            case "fmgdevice:index/vpnKmipserver:VpnKmipserver":
                return new VpnKmipserver(name, <any>undefined, { urn })
            case "fmgdevice:index/vpnKmipserverServerlist:VpnKmipserverServerlist":
                return new VpnKmipserverServerlist(name, <any>undefined, { urn })
            case "fmgdevice:index/vpnKmipserverServerlistMove:VpnKmipserverServerlistMove":
                return new VpnKmipserverServerlistMove(name, <any>undefined, { urn })
            case "fmgdevice:index/vpnL2tp:VpnL2tp":
                return new VpnL2tp(name, <any>undefined, { urn })
            case "fmgdevice:index/vpnOcvpn:VpnOcvpn":
                return new VpnOcvpn(name, <any>undefined, { urn })
            case "fmgdevice:index/vpnOcvpnForticlientaccessAuthgroups:VpnOcvpnForticlientaccessAuthgroups":
                return new VpnOcvpnForticlientaccessAuthgroups(name, <any>undefined, { urn })
            case "fmgdevice:index/vpnOcvpnOverlays:VpnOcvpnOverlays":
                return new VpnOcvpnOverlays(name, <any>undefined, { urn })
            case "fmgdevice:index/vpnOcvpnOverlaysSubnets:VpnOcvpnOverlaysSubnets":
                return new VpnOcvpnOverlaysSubnets(name, <any>undefined, { urn })
            case "fmgdevice:index/vpnPptp:VpnPptp":
                return new VpnPptp(name, <any>undefined, { urn })
            case "fmgdevice:index/vpnQkd:VpnQkd":
                return new VpnQkd(name, <any>undefined, { urn })
            case "fmgdevice:index/vpnSslClient:VpnSslClient":
                return new VpnSslClient(name, <any>undefined, { urn })
            case "fmgdevice:index/vpnSslSettings:VpnSslSettings":
                return new VpnSslSettings(name, <any>undefined, { urn })
            case "fmgdevice:index/vpnSslSettingsAuthenticationrule:VpnSslSettingsAuthenticationrule":
                return new VpnSslSettingsAuthenticationrule(name, <any>undefined, { urn })
            case "fmgdevice:index/vpnSslSettingsAuthenticationruleMove:VpnSslSettingsAuthenticationruleMove":
                return new VpnSslSettingsAuthenticationruleMove(name, <any>undefined, { urn })
            case "fmgdevice:index/vpnSslWebUserbookmark:VpnSslWebUserbookmark":
                return new VpnSslWebUserbookmark(name, <any>undefined, { urn })
            case "fmgdevice:index/vpnSslWebUserbookmarkBookmarks:VpnSslWebUserbookmarkBookmarks":
                return new VpnSslWebUserbookmarkBookmarks(name, <any>undefined, { urn })
            case "fmgdevice:index/vpnSslWebUserbookmarkBookmarksFormdata:VpnSslWebUserbookmarkBookmarksFormdata":
                return new VpnSslWebUserbookmarkBookmarksFormdata(name, <any>undefined, { urn })
            case "fmgdevice:index/vpnSslWebUserbookmarkBookmarksMove:VpnSslWebUserbookmarkBookmarksMove":
                return new VpnSslWebUserbookmarkBookmarksMove(name, <any>undefined, { urn })
            case "fmgdevice:index/vpnSslWebUsergroupbookmark:VpnSslWebUsergroupbookmark":
                return new VpnSslWebUsergroupbookmark(name, <any>undefined, { urn })
            case "fmgdevice:index/vpnSslWebUsergroupbookmarkBookmarks:VpnSslWebUsergroupbookmarkBookmarks":
                return new VpnSslWebUsergroupbookmarkBookmarks(name, <any>undefined, { urn })
            case "fmgdevice:index/vpnSslWebUsergroupbookmarkBookmarksFormdata:VpnSslWebUsergroupbookmarkBookmarksFormdata":
                return new VpnSslWebUsergroupbookmarkBookmarksFormdata(name, <any>undefined, { urn })
            case "fmgdevice:index/vpnSslWebUsergroupbookmarkBookmarksMove:VpnSslWebUsergroupbookmarkBookmarksMove":
                return new VpnSslWebUsergroupbookmarkBookmarksMove(name, <any>undefined, { urn })
            case "fmgdevice:index/wanoptCacheservice:WanoptCacheservice":
                return new WanoptCacheservice(name, <any>undefined, { urn })
            case "fmgdevice:index/wanoptCacheserviceDstpeer:WanoptCacheserviceDstpeer":
                return new WanoptCacheserviceDstpeer(name, <any>undefined, { urn })
            case "fmgdevice:index/wanoptCacheserviceSrcpeer:WanoptCacheserviceSrcpeer":
                return new WanoptCacheserviceSrcpeer(name, <any>undefined, { urn })
            case "fmgdevice:index/wanoptContentdeliverynetworkrule:WanoptContentdeliverynetworkrule":
                return new WanoptContentdeliverynetworkrule(name, <any>undefined, { urn })
            case "fmgdevice:index/wanoptContentdeliverynetworkruleRules:WanoptContentdeliverynetworkruleRules":
                return new WanoptContentdeliverynetworkruleRules(name, <any>undefined, { urn })
            case "fmgdevice:index/wanoptContentdeliverynetworkruleRulesContentid:WanoptContentdeliverynetworkruleRulesContentid":
                return new WanoptContentdeliverynetworkruleRulesContentid(name, <any>undefined, { urn })
            case "fmgdevice:index/wanoptContentdeliverynetworkruleRulesMatchentries:WanoptContentdeliverynetworkruleRulesMatchentries":
                return new WanoptContentdeliverynetworkruleRulesMatchentries(name, <any>undefined, { urn })
            case "fmgdevice:index/wanoptContentdeliverynetworkruleRulesSkipentries:WanoptContentdeliverynetworkruleRulesSkipentries":
                return new WanoptContentdeliverynetworkruleRulesSkipentries(name, <any>undefined, { urn })
            case "fmgdevice:index/wanoptRemotestorage:WanoptRemotestorage":
                return new WanoptRemotestorage(name, <any>undefined, { urn })
            case "fmgdevice:index/wanoptSettings:WanoptSettings":
                return new WanoptSettings(name, <any>undefined, { urn })
            case "fmgdevice:index/wanoptWebcache:WanoptWebcache":
                return new WanoptWebcache(name, <any>undefined, { urn })
            case "fmgdevice:index/webfilterFortiguard:WebfilterFortiguard":
                return new WebfilterFortiguard(name, <any>undefined, { urn })
            case "fmgdevice:index/webfilterIpsurlfiltercachesetting:WebfilterIpsurlfiltercachesetting":
                return new WebfilterIpsurlfiltercachesetting(name, <any>undefined, { urn })
            case "fmgdevice:index/webfilterIpsurlfiltersetting6:WebfilterIpsurlfiltersetting6":
                return new WebfilterIpsurlfiltersetting6(name, <any>undefined, { urn })
            case "fmgdevice:index/webfilterIpsurlfiltersetting:WebfilterIpsurlfiltersetting":
                return new WebfilterIpsurlfiltersetting(name, <any>undefined, { urn })
            case "fmgdevice:index/webfilterOverride:WebfilterOverride":
                return new WebfilterOverride(name, <any>undefined, { urn })
            case "fmgdevice:index/webfilterSearchengine:WebfilterSearchengine":
                return new WebfilterSearchengine(name, <any>undefined, { urn })
            case "fmgdevice:index/webproxyDebugurl:WebproxyDebugurl":
                return new WebproxyDebugurl(name, <any>undefined, { urn })
            case "fmgdevice:index/webproxyExplicit:WebproxyExplicit":
                return new WebproxyExplicit(name, <any>undefined, { urn })
            case "fmgdevice:index/webproxyExplicitPacpolicy:WebproxyExplicitPacpolicy":
                return new WebproxyExplicitPacpolicy(name, <any>undefined, { urn })
            case "fmgdevice:index/webproxyFastfallback:WebproxyFastfallback":
                return new WebproxyFastfallback(name, <any>undefined, { urn })
            case "fmgdevice:index/webproxyGlobal:WebproxyGlobal":
                return new WebproxyGlobal(name, <any>undefined, { urn })
            case "fmgdevice:index/webproxyUrlmatch:WebproxyUrlmatch":
                return new WebproxyUrlmatch(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerAccesscontrollist:WirelesscontrollerAccesscontrollist":
                return new WirelesscontrollerAccesscontrollist(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerAccesscontrollistLayer3ipv4rules:WirelesscontrollerAccesscontrollistLayer3ipv4rules":
                return new WirelesscontrollerAccesscontrollistLayer3ipv4rules(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerAccesscontrollistLayer3ipv4rulesMove:WirelesscontrollerAccesscontrollistLayer3ipv4rulesMove":
                return new WirelesscontrollerAccesscontrollistLayer3ipv4rulesMove(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerAccesscontrollistLayer3ipv6rules:WirelesscontrollerAccesscontrollistLayer3ipv6rules":
                return new WirelesscontrollerAccesscontrollistLayer3ipv6rules(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerAccesscontrollistLayer3ipv6rulesMove:WirelesscontrollerAccesscontrollistLayer3ipv6rulesMove":
                return new WirelesscontrollerAccesscontrollistLayer3ipv6rulesMove(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerApcfgprofile:WirelesscontrollerApcfgprofile":
                return new WirelesscontrollerApcfgprofile(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerApcfgprofileCommandlist:WirelesscontrollerApcfgprofileCommandlist":
                return new WirelesscontrollerApcfgprofileCommandlist(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerApcfgprofileCommandlistMove:WirelesscontrollerApcfgprofileCommandlistMove":
                return new WirelesscontrollerApcfgprofileCommandlistMove(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerApstatus:WirelesscontrollerApstatus":
                return new WirelesscontrollerApstatus(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerArrpprofile:WirelesscontrollerArrpprofile":
                return new WirelesscontrollerArrpprofile(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerBleprofile:WirelesscontrollerBleprofile":
                return new WirelesscontrollerBleprofile(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerBonjourprofile:WirelesscontrollerBonjourprofile":
                return new WirelesscontrollerBonjourprofile(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerBonjourprofilePolicylist:WirelesscontrollerBonjourprofilePolicylist":
                return new WirelesscontrollerBonjourprofilePolicylist(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerBonjourprofilePolicylistMove:WirelesscontrollerBonjourprofilePolicylistMove":
                return new WirelesscontrollerBonjourprofilePolicylistMove(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerGlobal:WirelesscontrollerGlobal":
                return new WirelesscontrollerGlobal(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerHotspot20Anqp3gppcellular:WirelesscontrollerHotspot20Anqp3gppcellular":
                return new WirelesscontrollerHotspot20Anqp3gppcellular(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerHotspot20Anqp3gppcellularMccmnclist:WirelesscontrollerHotspot20Anqp3gppcellularMccmnclist":
                return new WirelesscontrollerHotspot20Anqp3gppcellularMccmnclist(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerHotspot20Anqpipaddresstype:WirelesscontrollerHotspot20Anqpipaddresstype":
                return new WirelesscontrollerHotspot20Anqpipaddresstype(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerHotspot20Anqpnairealm:WirelesscontrollerHotspot20Anqpnairealm":
                return new WirelesscontrollerHotspot20Anqpnairealm(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerHotspot20AnqpnairealmNailist:WirelesscontrollerHotspot20AnqpnairealmNailist":
                return new WirelesscontrollerHotspot20AnqpnairealmNailist(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerHotspot20AnqpnairealmNailistEapmethod:WirelesscontrollerHotspot20AnqpnairealmNailistEapmethod":
                return new WirelesscontrollerHotspot20AnqpnairealmNailistEapmethod(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerHotspot20AnqpnairealmNailistEapmethodAuthparam:WirelesscontrollerHotspot20AnqpnairealmNailistEapmethodAuthparam":
                return new WirelesscontrollerHotspot20AnqpnairealmNailistEapmethodAuthparam(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerHotspot20Anqpnetworkauthtype:WirelesscontrollerHotspot20Anqpnetworkauthtype":
                return new WirelesscontrollerHotspot20Anqpnetworkauthtype(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerHotspot20Anqproamingconsortium:WirelesscontrollerHotspot20Anqproamingconsortium":
                return new WirelesscontrollerHotspot20Anqproamingconsortium(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerHotspot20AnqproamingconsortiumOilist:WirelesscontrollerHotspot20AnqproamingconsortiumOilist":
                return new WirelesscontrollerHotspot20AnqproamingconsortiumOilist(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerHotspot20Anqpvenuename:WirelesscontrollerHotspot20Anqpvenuename":
                return new WirelesscontrollerHotspot20Anqpvenuename(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerHotspot20AnqpvenuenameValuelist:WirelesscontrollerHotspot20AnqpvenuenameValuelist":
                return new WirelesscontrollerHotspot20AnqpvenuenameValuelist(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerHotspot20Anqpvenueurl:WirelesscontrollerHotspot20Anqpvenueurl":
                return new WirelesscontrollerHotspot20Anqpvenueurl(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerHotspot20AnqpvenueurlValuelist:WirelesscontrollerHotspot20AnqpvenueurlValuelist":
                return new WirelesscontrollerHotspot20AnqpvenueurlValuelist(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerHotspot20H2qpadviceofcharge:WirelesscontrollerHotspot20H2qpadviceofcharge":
                return new WirelesscontrollerHotspot20H2qpadviceofcharge(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerHotspot20H2qpadviceofchargeAoclist:WirelesscontrollerHotspot20H2qpadviceofchargeAoclist":
                return new WirelesscontrollerHotspot20H2qpadviceofchargeAoclist(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerHotspot20H2qpadviceofchargeAoclistPlaninfo:WirelesscontrollerHotspot20H2qpadviceofchargeAoclistPlaninfo":
                return new WirelesscontrollerHotspot20H2qpadviceofchargeAoclistPlaninfo(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerHotspot20H2qpconncapability:WirelesscontrollerHotspot20H2qpconncapability":
                return new WirelesscontrollerHotspot20H2qpconncapability(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerHotspot20H2qpoperatorname:WirelesscontrollerHotspot20H2qpoperatorname":
                return new WirelesscontrollerHotspot20H2qpoperatorname(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerHotspot20H2qpoperatornameValuelist:WirelesscontrollerHotspot20H2qpoperatornameValuelist":
                return new WirelesscontrollerHotspot20H2qpoperatornameValuelist(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerHotspot20H2qposuprovider:WirelesscontrollerHotspot20H2qposuprovider":
                return new WirelesscontrollerHotspot20H2qposuprovider(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerHotspot20H2qposuproviderFriendlyname:WirelesscontrollerHotspot20H2qposuproviderFriendlyname":
                return new WirelesscontrollerHotspot20H2qposuproviderFriendlyname(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerHotspot20H2qposuproviderServicedescription:WirelesscontrollerHotspot20H2qposuproviderServicedescription":
                return new WirelesscontrollerHotspot20H2qposuproviderServicedescription(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerHotspot20H2qposuprovidernai:WirelesscontrollerHotspot20H2qposuprovidernai":
                return new WirelesscontrollerHotspot20H2qposuprovidernai(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerHotspot20H2qposuprovidernaiNailist:WirelesscontrollerHotspot20H2qposuprovidernaiNailist":
                return new WirelesscontrollerHotspot20H2qposuprovidernaiNailist(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerHotspot20H2qptermsandconditions:WirelesscontrollerHotspot20H2qptermsandconditions":
                return new WirelesscontrollerHotspot20H2qptermsandconditions(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerHotspot20H2qpwanmetric:WirelesscontrollerHotspot20H2qpwanmetric":
                return new WirelesscontrollerHotspot20H2qpwanmetric(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerHotspot20Hsprofile:WirelesscontrollerHotspot20Hsprofile":
                return new WirelesscontrollerHotspot20Hsprofile(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerHotspot20Icon:WirelesscontrollerHotspot20Icon":
                return new WirelesscontrollerHotspot20Icon(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerHotspot20IconIconlist:WirelesscontrollerHotspot20IconIconlist":
                return new WirelesscontrollerHotspot20IconIconlist(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerHotspot20Qosmap:WirelesscontrollerHotspot20Qosmap":
                return new WirelesscontrollerHotspot20Qosmap(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerHotspot20QosmapDscpexcept:WirelesscontrollerHotspot20QosmapDscpexcept":
                return new WirelesscontrollerHotspot20QosmapDscpexcept(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerHotspot20QosmapDscprange:WirelesscontrollerHotspot20QosmapDscprange":
                return new WirelesscontrollerHotspot20QosmapDscprange(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerIntercontroller:WirelesscontrollerIntercontroller":
                return new WirelesscontrollerIntercontroller(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerIntercontrollerIntercontrollerpeer:WirelesscontrollerIntercontrollerIntercontrollerpeer":
                return new WirelesscontrollerIntercontrollerIntercontrollerpeer(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerLog:WirelesscontrollerLog":
                return new WirelesscontrollerLog(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerMpskprofile:WirelesscontrollerMpskprofile":
                return new WirelesscontrollerMpskprofile(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerMpskprofileMpskgroup:WirelesscontrollerMpskprofileMpskgroup":
                return new WirelesscontrollerMpskprofileMpskgroup(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerMpskprofileMpskgroupMpskkey:WirelesscontrollerMpskprofileMpskgroupMpskkey":
                return new WirelesscontrollerMpskprofileMpskgroupMpskkey(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerNacprofile:WirelesscontrollerNacprofile":
                return new WirelesscontrollerNacprofile(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerQosprofile:WirelesscontrollerQosprofile":
                return new WirelesscontrollerQosprofile(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerRegion:WirelesscontrollerRegion":
                return new WirelesscontrollerRegion(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerSetting:WirelesscontrollerSetting":
                return new WirelesscontrollerSetting(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerSettingOffendingssid:WirelesscontrollerSettingOffendingssid":
                return new WirelesscontrollerSettingOffendingssid(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerSnmp:WirelesscontrollerSnmp":
                return new WirelesscontrollerSnmp(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerSnmpCommunity:WirelesscontrollerSnmpCommunity":
                return new WirelesscontrollerSnmpCommunity(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerSnmpCommunityHosts:WirelesscontrollerSnmpCommunityHosts":
                return new WirelesscontrollerSnmpCommunityHosts(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerSnmpUser:WirelesscontrollerSnmpUser":
                return new WirelesscontrollerSnmpUser(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerSsidpolicy:WirelesscontrollerSsidpolicy":
                return new WirelesscontrollerSsidpolicy(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerSyslogprofile:WirelesscontrollerSyslogprofile":
                return new WirelesscontrollerSyslogprofile(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerTimers:WirelesscontrollerTimers":
                return new WirelesscontrollerTimers(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerUtmprofile:WirelesscontrollerUtmprofile":
                return new WirelesscontrollerUtmprofile(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerVap:WirelesscontrollerVap":
                return new WirelesscontrollerVap(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerVapPortalmessageoverrides:WirelesscontrollerVapPortalmessageoverrides":
                return new WirelesscontrollerVapPortalmessageoverrides(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerVapVlanname:WirelesscontrollerVapVlanname":
                return new WirelesscontrollerVapVlanname(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerVapVlannameMove:WirelesscontrollerVapVlannameMove":
                return new WirelesscontrollerVapVlannameMove(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerVapgroup:WirelesscontrollerVapgroup":
                return new WirelesscontrollerVapgroup(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerWagprofile:WirelesscontrollerWagprofile":
                return new WirelesscontrollerWagprofile(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerWidsprofile:WirelesscontrollerWidsprofile":
                return new WirelesscontrollerWidsprofile(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerWtp:WirelesscontrollerWtp":
                return new WirelesscontrollerWtp(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerWtpLan:WirelesscontrollerWtpLan":
                return new WirelesscontrollerWtpLan(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerWtpMove:WirelesscontrollerWtpMove":
                return new WirelesscontrollerWtpMove(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerWtpRadio1:WirelesscontrollerWtpRadio1":
                return new WirelesscontrollerWtpRadio1(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerWtpRadio2:WirelesscontrollerWtpRadio2":
                return new WirelesscontrollerWtpRadio2(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerWtpRadio3:WirelesscontrollerWtpRadio3":
                return new WirelesscontrollerWtpRadio3(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerWtpRadio4:WirelesscontrollerWtpRadio4":
                return new WirelesscontrollerWtpRadio4(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerWtpgroup:WirelesscontrollerWtpgroup":
                return new WirelesscontrollerWtpgroup(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerWtpprofile:WirelesscontrollerWtpprofile":
                return new WirelesscontrollerWtpprofile(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerWtpprofileDenymaclist:WirelesscontrollerWtpprofileDenymaclist":
                return new WirelesscontrollerWtpprofileDenymaclist(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerWtpprofileEslsesdongle:WirelesscontrollerWtpprofileEslsesdongle":
                return new WirelesscontrollerWtpprofileEslsesdongle(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerWtpprofileLbs:WirelesscontrollerWtpprofileLbs":
                return new WirelesscontrollerWtpprofileLbs(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerWtpprofilePlatform:WirelesscontrollerWtpprofilePlatform":
                return new WirelesscontrollerWtpprofilePlatform(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerWtpprofileRadio1:WirelesscontrollerWtpprofileRadio1":
                return new WirelesscontrollerWtpprofileRadio1(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerWtpprofileRadio2:WirelesscontrollerWtpprofileRadio2":
                return new WirelesscontrollerWtpprofileRadio2(name, <any>undefined, { urn })
            case "fmgdevice:index/wirelesscontrollerWtpprofileSplittunnelingacl:WirelesscontrollerWtpprofileSplittunnelingacl":
                return new WirelesscontrollerWtpprofileSplittunnelingacl(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("fmgdevice", "index/alertemailSetting", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/antivirusExemptlist", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/antivirusQuarantine", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/antivirusSettings", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/applicationName", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/applicationRulesettings", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/automationSetting", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/certificateRemote", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/dlpExactdatamatch", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/dlpExactdatamatchColumns", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/dlpExactdatamatchColumnsMove", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/dlpFpdocsource", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/dlpSettings", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/dpdkCpus", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/dpdkGlobal", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/emailfilterFortiguard", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/endpointcontrolSettings", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/execWorkspaceAction", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/extendercontrollerExtender", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/extendercontrollerExtenderWanextension", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/extensioncontrollerExtender", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/extensioncontrollerFortigate", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/extensioncontrollerFortigateprofile", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/extensioncontrollerFortigateprofileLanextension", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/firewallAuthportal", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/firewallDnstranslation", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/firewallGlobal", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/firewallInternetserviceappend", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/firewallInternetservicedefinition", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/firewallInternetservicedefinitionEntry", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/firewallInternetservicedefinitionEntryPortrange", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/firewallInternetserviceextension", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/firewallInternetserviceextensionEntry", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/firewallInternetserviceextensionEntryPortrange", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/firewallIpmacbindingSetting", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/firewallIpmacbindingTable", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/firewallIptranslation", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/firewallIpv6ehfilter", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/firewallOndemandsniffer", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/firewallSniffer", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/firewallSnifferMove", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/firewallSshHostkey", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/firewallSshLocalkey", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/firewallSshSetting", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/firewallSslSetting", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/firewallSslserver", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/firewallTtlpolicy", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/firewallTtlpolicyMove", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/ftpproxyExplicit", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/icapServergroup", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/ipsDecoder", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/ipsDecoderParameter", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/ipsGlobal", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/ipsGlobalTlsactiveprobe", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/ipsRule", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/ipsRulesettings", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/ipsSettings", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/jsonGenericApi", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/loadbalanceSettingWorkers", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logAzuresecuritycenter2FilterFreestyle", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logAzuresecuritycenter2SettingCustomfieldname", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logAzuresecuritycenterFilterFreestyle", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logAzuresecuritycenterSettingCustomfieldname", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logDiskFilter", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logDiskFilterFreestyle", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logDiskSetting", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logEventfilter", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logFortianalyzer2FilterFreestyle", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logFortianalyzer2Overridefilter", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logFortianalyzer2OverridefilterFreestyle", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logFortianalyzer2Overridesetting", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logFortianalyzer2Setting", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logFortianalyzer3FilterFreestyle", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logFortianalyzer3Overridefilter", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logFortianalyzer3OverridefilterFreestyle", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logFortianalyzer3Overridesetting", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logFortianalyzer3Setting", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logFortianalyzerFilterFreestyle", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logFortianalyzerOverridefilterFreestyle", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logFortianalyzerSetting", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logFortianalyzercloudFilterFreestyle", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logFortianalyzercloudOverridefilter", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logFortianalyzercloudOverridefilterFreestyle", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logFortianalyzercloudOverridesetting", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logFortianalyzercloudSetting", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logFortiguardFilter", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logFortiguardFilterFreestyle", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logFortiguardOverridefilter", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logFortiguardOverridefilterFreestyle", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logFortiguardOverridesetting", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logFortiguardSetting", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logGuidisplay", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logMemoryFilter", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logMemoryFilterFreestyle", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logMemoryGlobalsetting", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logMemorySetting", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logNulldeviceFilter", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logNulldeviceFilterFreestyle", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logNulldeviceSetting", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logSetting", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logSyslogd2Filter", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logSyslogd2FilterFreestyle", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logSyslogd2Overridefilter", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logSyslogd2OverridefilterFreestyle", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logSyslogd2Overridesetting", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logSyslogd2OverridesettingCustomfieldname", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logSyslogd2Setting", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logSyslogd2SettingCustomfieldname", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logSyslogd3Filter", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logSyslogd3FilterFreestyle", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logSyslogd3Overridefilter", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logSyslogd3OverridefilterFreestyle", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logSyslogd3Overridesetting", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logSyslogd3OverridesettingCustomfieldname", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logSyslogd3Setting", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logSyslogd3SettingCustomfieldname", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logSyslogd4Filter", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logSyslogd4FilterFreestyle", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logSyslogd4Overridefilter", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logSyslogd4OverridefilterFreestyle", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logSyslogd4Overridesetting", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logSyslogd4OverridesettingCustomfieldname", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logSyslogd4Setting", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logSyslogd4SettingCustomfieldname", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logSyslogdFilter", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logSyslogdFilterFreestyle", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logSyslogdOverridefilterFreestyle", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logSyslogdOverridesettingCustomfieldname", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logSyslogdSetting", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logSyslogdSettingCustomfieldname", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logTacacsaccounting2Filter", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logTacacsaccounting2Setting", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logTacacsaccounting3Filter", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logTacacsaccounting3Setting", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logTacacsaccountingFilter", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logTacacsaccountingSetting", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logWebtrendsFilter", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logWebtrendsFilterFreestyle", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/logWebtrendsSetting", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/nsxtServicechain", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/nsxtServicechainServiceindex", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/nsxtServicechainServiceindexMove", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/nsxtSetting", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/reportLayout", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/reportLayoutBodyitem", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/reportLayoutBodyitemMove", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/reportLayoutBodyitemParameters", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/reportLayoutPage", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/reportLayoutPageFooter", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/reportLayoutPageFooterFooteritem", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/reportLayoutPageFooterFooteritemMove", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/reportLayoutPageHeader", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/reportLayoutPageHeaderHeaderitem", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/reportLayoutPageHeaderHeaderitemMove", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/reportSetting", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerAuthpath", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerBfd", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerBfd6", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerBfd6Multihoptemplate", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerBfd6Neighbor", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerBfdMultihoptemplate", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerBfdNeighbor", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerBgp", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerBgpAdmindistance", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerBgpAggregateaddress", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerBgpAggregateaddress6", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerBgpNeighbor", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerBgpNeighborConditionaladvertise", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerBgpNeighborConditionaladvertise6", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerBgpNeighborgroup", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerBgpNeighborrange", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerBgpNeighborrange6", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerBgpNetwork", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerBgpNetwork6", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerBgpRedistribute", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerBgpRedistribute6", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerBgpVrf", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerBgpVrf6", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerExtcommunitylist", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerExtcommunitylistRule", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerIsis", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerIsisIsisinterface", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerIsisIsisnet", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerIsisRedistribute", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerIsisRedistribute6", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerIsisSummaryaddress", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerIsisSummaryaddress6", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerKeychain", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerMulticast", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerMulticast6", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerMulticast6Interface", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerMulticast6Pimsmglobal", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerMulticast6PimsmglobalRpaddress", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerMulticastInterface", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerMulticastInterfaceIgmp", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerMulticastInterfaceJoingroup", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerMulticastPimsmglobal", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerMulticastPimsmglobalRpaddress", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerMulticastflow", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerMulticastflowFlows", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerOspf", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerOspf6", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerOspf6Area", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerOspf6AreaIpseckeys", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerOspf6AreaRange", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerOspf6AreaVirtuallink", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerOspf6AreaVirtuallinkIpseckeys", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerOspf6Ospf6interface", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerOspf6Ospf6interfaceIpseckeys", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerOspf6Ospf6interfaceNeighbor", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerOspf6Redistribute", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerOspf6Summaryaddress", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerOspfArea", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerOspfAreaRange", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerOspfAreaVirtuallink", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerOspfAreaVirtuallinkMd5keys", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerOspfDistributelist", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerOspfNeighbor", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerOspfOspfinterface", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerOspfRedistribute", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerOspfSummaryaddress", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerPolicy", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerPolicy6", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerPolicy6Move", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerPolicyMove", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerRip", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerRipDistance", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerRipInterface", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerRipNeighbor", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerRipNetwork", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerRipOffsetlist", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerRipRedistribute", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerRipng", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerRipngAggregateaddress", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerRipngDistance", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerRipngDistributelist", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerRipngInterface", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerRipngNeighbor", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerRipngNetwork", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerRipngOffsetlist", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerRipngRedistribute", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerSetting", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerStatic", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/routerStatic6", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontroller8021xsettings", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerAclGroup", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerAclIngress", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerAclIngressAction", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerAclIngressClassifier", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerAutoconfigCustom", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerAutoconfigCustomSwitchbinding", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerAutoconfigDefault", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerAutoconfigPolicy", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerCustomcommand", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerDynamicportpolicy", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerDynamicportpolicyPolicy", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerDynamicportpolicyPolicyMove", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerFlowtracking", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerFlowtrackingAggregates", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerFlowtrackingCollectors", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerFortilinksettings", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerFortilinksettingsNacports", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerGlobal", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerGlobalCustomcommand", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerIgmpsnooping", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerInitialconfigTemplate", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerInitialconfigVlans", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerLldpprofile", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerLldpprofileCustomtlvs", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerLldpsettings", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerLocation", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerLocationAddresscivic", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerLocationCoordinates", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerLocationElinnumber", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerMacpolicy", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerManagedswitch", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerManagedswitch8021xsettings", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerManagedswitchCustomcommand", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerManagedswitchDhcpsnoopingstaticclient", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerManagedswitchIgmpsnooping", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerManagedswitchIgmpsnoopingVlans", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerManagedswitchIpsourceguard", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerManagedswitchIpsourceguardBindingentry", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerManagedswitchMirror", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerManagedswitchMove", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerManagedswitchPortsDhcpsnoopoption82override", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerManagedswitchRemotelog", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerManagedswitchRouteoffloadrouter", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerManagedswitchSnmpcommunity", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerManagedswitchSnmpcommunityHosts", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerManagedswitchSnmpsysinfo", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerManagedswitchSnmptrapthreshold", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerManagedswitchSnmpuser", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerManagedswitchStaticmac", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerManagedswitchStormcontrol", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerManagedswitchStpinstance", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerManagedswitchStpsettings", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerManagedswitchSwitchlog", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerManagedswitchVlan", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerNetworkmonitorsettings", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerPtpInterfacepolicy", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerPtpPolicy", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerPtpProfile", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerPtpSettings", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerQosDot1pmap", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerQosIpdscpmap", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerQosIpdscpmapMap", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerQosQospolicy", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerQosQueuepolicy", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerRemotelog", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerSecuritypolicy8021x", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerSecuritypolicyLocalaccess", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerSflow", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerSnmpcommunity", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerSnmpcommunityHosts", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerSnmpsysinfo", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerSnmptrapthreshold", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerSnmpuser", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerStormcontrol", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerStormcontrolpolicy", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerStpinstance", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerStpsettings", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerSwitchgroup", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerSwitchinterfacetag", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerSwitchlog", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerSwitchprofile", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerSystem", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerTrafficpolicy", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerTrafficsniffer", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerTrafficsnifferTargetip", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerTrafficsnifferTargetmac", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerTrafficsnifferTargetport", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerVirtualportpool", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/switchcontrollerVlanpolicy", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/system5gmodemModem1", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemAccprofile", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemAcme", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemAcmeAccounts", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemAdmin", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemAffinityinterrupt", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemAffinitypacketredistribution", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemAlias", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemApiuser", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemApiuserTrusthost", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemArptable", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemAutoinstall", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemAutomationaction", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemAutomationactionHttpheaders", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemAutomationdestination", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemAutomationstitch", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemAutomationstitchActions", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemAutomationstitchActionsMove", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemAutomationtrigger", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemAutomationtriggerFields", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemAutoscript", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemAutoupdateSchedule", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemAutoupdateTunneling", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemCentralmanagement", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemCentralmanagementServerlist", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemClustersync", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemClustersyncSessionsyncfilter", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemClustersyncSessionsyncfilterCustomservice", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemConsole", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemConsoleserverEntries", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemCsf", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemCsfFabricconnector", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemCsfFabricdevice", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemDdns", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemDedicatedmgmt", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemDeviceupgrade", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemDeviceupgradeKnownhamembers", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemDhcp6Server", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemDhcp6ServerIprange", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemDhcp6ServerPrefixrange", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemDns", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemDns64", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemDnsserver", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemDscpbasedpriority", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemEmailserver", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemEvpn", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemFabricvpn", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemFabricvpnAdvertisedsubnets", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemFabricvpnOverlays", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemFederatedupgrade", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemFederatedupgradeKnownhamembers", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemFederatedupgradeNodelist", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemFipscc", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemFortindr", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemFortisandbox", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemFssopolling", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemFtmpush", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemGeneve", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemGlobal", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemGretunnel", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemHa", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemHaHamgmtinterfaces", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemHaUnicastpeers", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemHaVcluster", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemHamonitor", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemIke", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemIkeDhgroup1", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemIkeDhgroup14", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemIkeDhgroup15", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemIkeDhgroup16", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemIkeDhgroup17", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemIkeDhgroup18", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemIkeDhgroup19", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemIkeDhgroup2", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemIkeDhgroup20", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemIkeDhgroup21", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemIkeDhgroup27", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemIkeDhgroup28", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemIkeDhgroup29", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemIkeDhgroup30", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemIkeDhgroup31", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemIkeDhgroup32", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemIkeDhgroup5", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemInterface", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemInterfaceClientoptions", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemInterfaceDhcpsnoopingserverlist", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemInterfaceIpv6", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemInterfaceIpv6Dhcp6iapdlist", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemInterfaceIpv6Vrrp6", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemInterfaceTagging", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemInterfaceVrrp", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemInterfaceVrrpProxyarp", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemIpam", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemIpamPools", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemIpamPoolsExclude", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemIpamRules", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemIpamRulesMove", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemIpiptunnel", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemIps", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemIpsecaggregate", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemIpsurlfilterdns", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemIpsurlfilterdns6", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemIpv6neighborcache", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemIpv6tunnel", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemLinkmonitor", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemLinkmonitorServerlist", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemLldpNetworkpolicy", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemLldpNetworkpolicyGuest", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemLldpNetworkpolicyGuestvoicesignaling", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemLldpNetworkpolicySoftphone", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemLldpNetworkpolicyStreamingvideo", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemLldpNetworkpolicyVideoconferencing", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemLldpNetworkpolicyVideosignaling", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemLldpNetworkpolicyVoice", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemLldpNetworkpolicyVoicesignaling", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemMobiletunnel", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemMobiletunnelNetwork", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemNat64Secondaryprefix", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemNdproxy", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemNetflow", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemNetflowCollectors", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemNetworkvisibility", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemNtp", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemNtpNtpserver", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemPasswordpolicy", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemPasswordpolicyguestadmin", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemPcpserver", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemPcpserverPools", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemPppoeinterface", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemProberesponse", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemProxyarp", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemPtp", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemPtpServerinterface", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemReplacemsgAdmin", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemReplacemsgAlertmail", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemReplacemsgAuth", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemReplacemsgAutomation", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemReplacemsgCustommessage", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemReplacemsgFortiguardwf", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemReplacemsgFtp", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemReplacemsgHttp", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemReplacemsgIcap", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemReplacemsgMail", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemReplacemsgNacquar", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemReplacemsgSpam", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemReplacemsgSslvpn", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemReplacemsgTrafficquota", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemReplacemsgUtm", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemReplacemsgWebproxy", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemSaml", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemSdwan", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemSdwanDuplication", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemSdwanHealthcheck", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemSdwanHealthcheckSla", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemSdwanMembers", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemSdwanMembersMove", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemSdwanService", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemSdwanServiceMove", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemSdwanZone", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemSdwanZoneMove", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemSessionhelper", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemSessionttl", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemSessionttlPort", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemSettings", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemSflow", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemSflowCollectors", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemSittunnel", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemSmcntpNtpserver", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemSnmpCommunity", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemSnmpCommunityHosts", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemSnmpCommunityHosts6", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemSnmpMibview", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemSnmpSysinfo", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemSnmpUser", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemSpeedtestschedule", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemSpeedtestserver", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemSpeedtestserverHost", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemSpeedtestsetting", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemSshconfig", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemSsoadmin", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemSsoforticloudadmin", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemSsofortigatecloudadmin", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemStandalonecluster", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemStandaloneclusterClusterpeer", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemStandaloneclusterClusterpeerSessionsyncfilter", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemStandaloneclusterClusterpeerSessionsyncfilterCustomservice", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemStorage", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemSwitchinterface", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemTosbasedpriority", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemVdom", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemVdomdns", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemVdomexception", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemVdomlink", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemVdomnetflow", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemVdomnetflowCollectors", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemVdomproperty", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemVdomradiusserver", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemVdomsflow", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemVdomsflowCollectors", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemVnetunnel", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemVxlan", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemWccp", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemZone", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/systemZoneTagging", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/userNacpolicy", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/userNacpolicyMove", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/userQuarantine", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/userQuarantineTargets", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/userQuarantineTargetsMacs", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/userSetting", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/userSettingAuthports", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/vpnCertificateCrl", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/vpnCertificateLocal", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/vpnCertificateSetting", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/vpnCertificateSettingCrlverification", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/vpnIpsecConcentrator", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/vpnIpsecForticlient", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/vpnIpsecPhase1", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/vpnIpsecPhase1interface", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/vpnIpsecPhase2", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/vpnIpsecPhase2interface", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/vpnKmipserver", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/vpnKmipserverServerlist", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/vpnKmipserverServerlistMove", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/vpnL2tp", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/vpnOcvpn", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/vpnOcvpnForticlientaccessAuthgroups", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/vpnOcvpnOverlays", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/vpnOcvpnOverlaysSubnets", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/vpnPptp", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/vpnQkd", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/vpnSslClient", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/vpnSslSettings", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/vpnSslSettingsAuthenticationrule", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/vpnSslSettingsAuthenticationruleMove", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/vpnSslWebUserbookmark", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/vpnSslWebUserbookmarkBookmarks", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/vpnSslWebUserbookmarkBookmarksFormdata", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/vpnSslWebUserbookmarkBookmarksMove", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/vpnSslWebUsergroupbookmark", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/vpnSslWebUsergroupbookmarkBookmarks", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/vpnSslWebUsergroupbookmarkBookmarksFormdata", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/vpnSslWebUsergroupbookmarkBookmarksMove", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wanoptCacheservice", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wanoptCacheserviceDstpeer", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wanoptCacheserviceSrcpeer", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wanoptContentdeliverynetworkrule", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wanoptContentdeliverynetworkruleRules", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wanoptContentdeliverynetworkruleRulesContentid", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wanoptContentdeliverynetworkruleRulesMatchentries", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wanoptContentdeliverynetworkruleRulesSkipentries", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wanoptRemotestorage", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wanoptSettings", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wanoptWebcache", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/webfilterFortiguard", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/webfilterIpsurlfiltercachesetting", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/webfilterIpsurlfiltersetting", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/webfilterIpsurlfiltersetting6", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/webfilterOverride", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/webfilterSearchengine", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/webproxyDebugurl", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/webproxyExplicit", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/webproxyExplicitPacpolicy", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/webproxyFastfallback", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/webproxyGlobal", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/webproxyUrlmatch", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerAccesscontrollist", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerAccesscontrollistLayer3ipv4rules", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerAccesscontrollistLayer3ipv4rulesMove", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerAccesscontrollistLayer3ipv6rules", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerAccesscontrollistLayer3ipv6rulesMove", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerApcfgprofile", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerApcfgprofileCommandlist", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerApcfgprofileCommandlistMove", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerApstatus", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerArrpprofile", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerBleprofile", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerBonjourprofile", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerBonjourprofilePolicylist", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerBonjourprofilePolicylistMove", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerGlobal", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerHotspot20Anqp3gppcellular", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerHotspot20Anqp3gppcellularMccmnclist", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerHotspot20Anqpipaddresstype", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerHotspot20Anqpnairealm", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerHotspot20AnqpnairealmNailist", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerHotspot20AnqpnairealmNailistEapmethod", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerHotspot20AnqpnairealmNailistEapmethodAuthparam", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerHotspot20Anqpnetworkauthtype", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerHotspot20Anqproamingconsortium", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerHotspot20AnqproamingconsortiumOilist", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerHotspot20Anqpvenuename", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerHotspot20AnqpvenuenameValuelist", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerHotspot20Anqpvenueurl", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerHotspot20AnqpvenueurlValuelist", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerHotspot20H2qpadviceofcharge", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerHotspot20H2qpadviceofchargeAoclist", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerHotspot20H2qpadviceofchargeAoclistPlaninfo", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerHotspot20H2qpconncapability", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerHotspot20H2qpoperatorname", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerHotspot20H2qpoperatornameValuelist", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerHotspot20H2qposuprovider", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerHotspot20H2qposuproviderFriendlyname", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerHotspot20H2qposuproviderServicedescription", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerHotspot20H2qposuprovidernai", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerHotspot20H2qposuprovidernaiNailist", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerHotspot20H2qptermsandconditions", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerHotspot20H2qpwanmetric", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerHotspot20Hsprofile", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerHotspot20Icon", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerHotspot20IconIconlist", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerHotspot20Qosmap", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerHotspot20QosmapDscpexcept", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerHotspot20QosmapDscprange", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerIntercontroller", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerIntercontrollerIntercontrollerpeer", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerLog", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerMpskprofile", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerMpskprofileMpskgroup", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerMpskprofileMpskgroupMpskkey", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerNacprofile", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerQosprofile", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerRegion", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerSetting", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerSettingOffendingssid", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerSnmp", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerSnmpCommunity", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerSnmpCommunityHosts", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerSnmpUser", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerSsidpolicy", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerSyslogprofile", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerTimers", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerUtmprofile", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerVap", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerVapPortalmessageoverrides", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerVapVlanname", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerVapVlannameMove", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerVapgroup", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerWagprofile", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerWidsprofile", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerWtp", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerWtpLan", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerWtpMove", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerWtpRadio1", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerWtpRadio2", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerWtpRadio3", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerWtpRadio4", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerWtpgroup", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerWtpprofile", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerWtpprofileDenymaclist", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerWtpprofileEslsesdongle", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerWtpprofileLbs", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerWtpprofilePlatform", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerWtpprofileRadio1", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerWtpprofileRadio2", _module)
pulumi.runtime.registerResourceModule("fmgdevice", "index/wirelesscontrollerWtpprofileSplittunnelingacl", _module)
pulumi.runtime.registerResourcePackage("fmgdevice", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:fmgdevice") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
