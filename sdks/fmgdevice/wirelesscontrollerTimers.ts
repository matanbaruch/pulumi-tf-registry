// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class WirelesscontrollerTimers extends pulumi.CustomResource {
    /**
     * Get an existing WirelesscontrollerTimers resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WirelesscontrollerTimersState, opts?: pulumi.CustomResourceOptions): WirelesscontrollerTimers {
        return new WirelesscontrollerTimers(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/wirelesscontrollerTimers:WirelesscontrollerTimers';

    /**
     * Returns true if the given object is an instance of WirelesscontrollerTimers.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WirelesscontrollerTimers {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WirelesscontrollerTimers.__pulumiType;
    }

    public readonly apRebootWaitInterval1!: pulumi.Output<number | undefined>;
    public readonly apRebootWaitInterval2!: pulumi.Output<number | undefined>;
    public readonly apRebootWaitTime!: pulumi.Output<string | undefined>;
    public readonly authTimeout!: pulumi.Output<number>;
    public readonly bleDeviceCleanup!: pulumi.Output<number>;
    public readonly bleScanReportIntv!: pulumi.Output<number>;
    public readonly clientIdleRehomeTimeout!: pulumi.Output<number>;
    public readonly clientIdleTimeout!: pulumi.Output<number>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly discoveryInterval!: pulumi.Output<number>;
    public readonly drmaInterval!: pulumi.Output<number>;
    public readonly echoInterval!: pulumi.Output<number>;
    public readonly fakeApLog!: pulumi.Output<number>;
    public readonly ipsecIntfCleanup!: pulumi.Output<number>;
    public readonly natSessionKeepAlive!: pulumi.Output<number | undefined>;
    public readonly radioStatsInterval!: pulumi.Output<number>;
    public readonly rogueApCleanup!: pulumi.Output<number | undefined>;
    public readonly rogueApLog!: pulumi.Output<number | undefined>;
    public readonly rogueStaCleanup!: pulumi.Output<number | undefined>;
    public readonly staCapCleanup!: pulumi.Output<number | undefined>;
    public readonly staCapabilityInterval!: pulumi.Output<number>;
    public readonly staLocateTimer!: pulumi.Output<number>;
    public readonly staStatsInterval!: pulumi.Output<number>;
    public readonly vapStatsInterval!: pulumi.Output<number>;

    /**
     * Create a WirelesscontrollerTimers resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: WirelesscontrollerTimersArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WirelesscontrollerTimersArgs | WirelesscontrollerTimersState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WirelesscontrollerTimersState | undefined;
            resourceInputs["apRebootWaitInterval1"] = state ? state.apRebootWaitInterval1 : undefined;
            resourceInputs["apRebootWaitInterval2"] = state ? state.apRebootWaitInterval2 : undefined;
            resourceInputs["apRebootWaitTime"] = state ? state.apRebootWaitTime : undefined;
            resourceInputs["authTimeout"] = state ? state.authTimeout : undefined;
            resourceInputs["bleDeviceCleanup"] = state ? state.bleDeviceCleanup : undefined;
            resourceInputs["bleScanReportIntv"] = state ? state.bleScanReportIntv : undefined;
            resourceInputs["clientIdleRehomeTimeout"] = state ? state.clientIdleRehomeTimeout : undefined;
            resourceInputs["clientIdleTimeout"] = state ? state.clientIdleTimeout : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["discoveryInterval"] = state ? state.discoveryInterval : undefined;
            resourceInputs["drmaInterval"] = state ? state.drmaInterval : undefined;
            resourceInputs["echoInterval"] = state ? state.echoInterval : undefined;
            resourceInputs["fakeApLog"] = state ? state.fakeApLog : undefined;
            resourceInputs["ipsecIntfCleanup"] = state ? state.ipsecIntfCleanup : undefined;
            resourceInputs["natSessionKeepAlive"] = state ? state.natSessionKeepAlive : undefined;
            resourceInputs["radioStatsInterval"] = state ? state.radioStatsInterval : undefined;
            resourceInputs["rogueApCleanup"] = state ? state.rogueApCleanup : undefined;
            resourceInputs["rogueApLog"] = state ? state.rogueApLog : undefined;
            resourceInputs["rogueStaCleanup"] = state ? state.rogueStaCleanup : undefined;
            resourceInputs["staCapCleanup"] = state ? state.staCapCleanup : undefined;
            resourceInputs["staCapabilityInterval"] = state ? state.staCapabilityInterval : undefined;
            resourceInputs["staLocateTimer"] = state ? state.staLocateTimer : undefined;
            resourceInputs["staStatsInterval"] = state ? state.staStatsInterval : undefined;
            resourceInputs["vapStatsInterval"] = state ? state.vapStatsInterval : undefined;
        } else {
            const args = argsOrState as WirelesscontrollerTimersArgs | undefined;
            resourceInputs["apRebootWaitInterval1"] = args ? args.apRebootWaitInterval1 : undefined;
            resourceInputs["apRebootWaitInterval2"] = args ? args.apRebootWaitInterval2 : undefined;
            resourceInputs["apRebootWaitTime"] = args ? args.apRebootWaitTime : undefined;
            resourceInputs["authTimeout"] = args ? args.authTimeout : undefined;
            resourceInputs["bleDeviceCleanup"] = args ? args.bleDeviceCleanup : undefined;
            resourceInputs["bleScanReportIntv"] = args ? args.bleScanReportIntv : undefined;
            resourceInputs["clientIdleRehomeTimeout"] = args ? args.clientIdleRehomeTimeout : undefined;
            resourceInputs["clientIdleTimeout"] = args ? args.clientIdleTimeout : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["discoveryInterval"] = args ? args.discoveryInterval : undefined;
            resourceInputs["drmaInterval"] = args ? args.drmaInterval : undefined;
            resourceInputs["echoInterval"] = args ? args.echoInterval : undefined;
            resourceInputs["fakeApLog"] = args ? args.fakeApLog : undefined;
            resourceInputs["ipsecIntfCleanup"] = args ? args.ipsecIntfCleanup : undefined;
            resourceInputs["natSessionKeepAlive"] = args ? args.natSessionKeepAlive : undefined;
            resourceInputs["radioStatsInterval"] = args ? args.radioStatsInterval : undefined;
            resourceInputs["rogueApCleanup"] = args ? args.rogueApCleanup : undefined;
            resourceInputs["rogueApLog"] = args ? args.rogueApLog : undefined;
            resourceInputs["rogueStaCleanup"] = args ? args.rogueStaCleanup : undefined;
            resourceInputs["staCapCleanup"] = args ? args.staCapCleanup : undefined;
            resourceInputs["staCapabilityInterval"] = args ? args.staCapabilityInterval : undefined;
            resourceInputs["staLocateTimer"] = args ? args.staLocateTimer : undefined;
            resourceInputs["staStatsInterval"] = args ? args.staStatsInterval : undefined;
            resourceInputs["vapStatsInterval"] = args ? args.vapStatsInterval : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WirelesscontrollerTimers.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WirelesscontrollerTimers resources.
 */
export interface WirelesscontrollerTimersState {
    apRebootWaitInterval1?: pulumi.Input<number>;
    apRebootWaitInterval2?: pulumi.Input<number>;
    apRebootWaitTime?: pulumi.Input<string>;
    authTimeout?: pulumi.Input<number>;
    bleDeviceCleanup?: pulumi.Input<number>;
    bleScanReportIntv?: pulumi.Input<number>;
    clientIdleRehomeTimeout?: pulumi.Input<number>;
    clientIdleTimeout?: pulumi.Input<number>;
    deviceName?: pulumi.Input<string>;
    discoveryInterval?: pulumi.Input<number>;
    drmaInterval?: pulumi.Input<number>;
    echoInterval?: pulumi.Input<number>;
    fakeApLog?: pulumi.Input<number>;
    ipsecIntfCleanup?: pulumi.Input<number>;
    natSessionKeepAlive?: pulumi.Input<number>;
    radioStatsInterval?: pulumi.Input<number>;
    rogueApCleanup?: pulumi.Input<number>;
    rogueApLog?: pulumi.Input<number>;
    rogueStaCleanup?: pulumi.Input<number>;
    staCapCleanup?: pulumi.Input<number>;
    staCapabilityInterval?: pulumi.Input<number>;
    staLocateTimer?: pulumi.Input<number>;
    staStatsInterval?: pulumi.Input<number>;
    vapStatsInterval?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a WirelesscontrollerTimers resource.
 */
export interface WirelesscontrollerTimersArgs {
    apRebootWaitInterval1?: pulumi.Input<number>;
    apRebootWaitInterval2?: pulumi.Input<number>;
    apRebootWaitTime?: pulumi.Input<string>;
    authTimeout?: pulumi.Input<number>;
    bleDeviceCleanup?: pulumi.Input<number>;
    bleScanReportIntv?: pulumi.Input<number>;
    clientIdleRehomeTimeout?: pulumi.Input<number>;
    clientIdleTimeout?: pulumi.Input<number>;
    deviceName?: pulumi.Input<string>;
    discoveryInterval?: pulumi.Input<number>;
    drmaInterval?: pulumi.Input<number>;
    echoInterval?: pulumi.Input<number>;
    fakeApLog?: pulumi.Input<number>;
    ipsecIntfCleanup?: pulumi.Input<number>;
    natSessionKeepAlive?: pulumi.Input<number>;
    radioStatsInterval?: pulumi.Input<number>;
    rogueApCleanup?: pulumi.Input<number>;
    rogueApLog?: pulumi.Input<number>;
    rogueStaCleanup?: pulumi.Input<number>;
    staCapCleanup?: pulumi.Input<number>;
    staCapabilityInterval?: pulumi.Input<number>;
    staLocateTimer?: pulumi.Input<number>;
    staStatsInterval?: pulumi.Input<number>;
    vapStatsInterval?: pulumi.Input<number>;
}
