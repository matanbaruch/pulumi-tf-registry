// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SystemSpeedtestschedule extends pulumi.CustomResource {
    /**
     * Get an existing SystemSpeedtestschedule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemSpeedtestscheduleState, opts?: pulumi.CustomResourceOptions): SystemSpeedtestschedule {
        return new SystemSpeedtestschedule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/systemSpeedtestschedule:SystemSpeedtestschedule';

    /**
     * Returns true if the given object is an instance of SystemSpeedtestschedule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemSpeedtestschedule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemSpeedtestschedule.__pulumiType;
    }

    public readonly ctrlPort!: pulumi.Output<number>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly deviceVdom!: pulumi.Output<string>;
    public readonly diffserv!: pulumi.Output<string>;
    public readonly dynamicServer!: pulumi.Output<string>;
    public readonly interface!: pulumi.Output<string | undefined>;
    public readonly mode!: pulumi.Output<string>;
    public readonly schedules!: pulumi.Output<string[]>;
    public readonly serverName!: pulumi.Output<string | undefined>;
    public readonly serverPort!: pulumi.Output<number>;
    public readonly status!: pulumi.Output<string>;
    public readonly updateInbandwidth!: pulumi.Output<string>;
    public readonly updateInbandwidthMaximum!: pulumi.Output<number | undefined>;
    public readonly updateInbandwidthMinimum!: pulumi.Output<number | undefined>;
    public readonly updateOutbandwidth!: pulumi.Output<string>;
    public readonly updateOutbandwidthMaximum!: pulumi.Output<number | undefined>;
    public readonly updateOutbandwidthMinimum!: pulumi.Output<number | undefined>;
    public readonly updateShaper!: pulumi.Output<string>;

    /**
     * Create a SystemSpeedtestschedule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemSpeedtestscheduleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemSpeedtestscheduleArgs | SystemSpeedtestscheduleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemSpeedtestscheduleState | undefined;
            resourceInputs["ctrlPort"] = state ? state.ctrlPort : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["deviceVdom"] = state ? state.deviceVdom : undefined;
            resourceInputs["diffserv"] = state ? state.diffserv : undefined;
            resourceInputs["dynamicServer"] = state ? state.dynamicServer : undefined;
            resourceInputs["interface"] = state ? state.interface : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["schedules"] = state ? state.schedules : undefined;
            resourceInputs["serverName"] = state ? state.serverName : undefined;
            resourceInputs["serverPort"] = state ? state.serverPort : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["updateInbandwidth"] = state ? state.updateInbandwidth : undefined;
            resourceInputs["updateInbandwidthMaximum"] = state ? state.updateInbandwidthMaximum : undefined;
            resourceInputs["updateInbandwidthMinimum"] = state ? state.updateInbandwidthMinimum : undefined;
            resourceInputs["updateOutbandwidth"] = state ? state.updateOutbandwidth : undefined;
            resourceInputs["updateOutbandwidthMaximum"] = state ? state.updateOutbandwidthMaximum : undefined;
            resourceInputs["updateOutbandwidthMinimum"] = state ? state.updateOutbandwidthMinimum : undefined;
            resourceInputs["updateShaper"] = state ? state.updateShaper : undefined;
        } else {
            const args = argsOrState as SystemSpeedtestscheduleArgs | undefined;
            resourceInputs["ctrlPort"] = args ? args.ctrlPort : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["deviceVdom"] = args ? args.deviceVdom : undefined;
            resourceInputs["diffserv"] = args ? args.diffserv : undefined;
            resourceInputs["dynamicServer"] = args ? args.dynamicServer : undefined;
            resourceInputs["interface"] = args ? args.interface : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["schedules"] = args ? args.schedules : undefined;
            resourceInputs["serverName"] = args ? args.serverName : undefined;
            resourceInputs["serverPort"] = args ? args.serverPort : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["updateInbandwidth"] = args ? args.updateInbandwidth : undefined;
            resourceInputs["updateInbandwidthMaximum"] = args ? args.updateInbandwidthMaximum : undefined;
            resourceInputs["updateInbandwidthMinimum"] = args ? args.updateInbandwidthMinimum : undefined;
            resourceInputs["updateOutbandwidth"] = args ? args.updateOutbandwidth : undefined;
            resourceInputs["updateOutbandwidthMaximum"] = args ? args.updateOutbandwidthMaximum : undefined;
            resourceInputs["updateOutbandwidthMinimum"] = args ? args.updateOutbandwidthMinimum : undefined;
            resourceInputs["updateShaper"] = args ? args.updateShaper : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SystemSpeedtestschedule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemSpeedtestschedule resources.
 */
export interface SystemSpeedtestscheduleState {
    ctrlPort?: pulumi.Input<number>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    diffserv?: pulumi.Input<string>;
    dynamicServer?: pulumi.Input<string>;
    interface?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    schedules?: pulumi.Input<pulumi.Input<string>[]>;
    serverName?: pulumi.Input<string>;
    serverPort?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    updateInbandwidth?: pulumi.Input<string>;
    updateInbandwidthMaximum?: pulumi.Input<number>;
    updateInbandwidthMinimum?: pulumi.Input<number>;
    updateOutbandwidth?: pulumi.Input<string>;
    updateOutbandwidthMaximum?: pulumi.Input<number>;
    updateOutbandwidthMinimum?: pulumi.Input<number>;
    updateShaper?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SystemSpeedtestschedule resource.
 */
export interface SystemSpeedtestscheduleArgs {
    ctrlPort?: pulumi.Input<number>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    diffserv?: pulumi.Input<string>;
    dynamicServer?: pulumi.Input<string>;
    interface?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    schedules?: pulumi.Input<pulumi.Input<string>[]>;
    serverName?: pulumi.Input<string>;
    serverPort?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    updateInbandwidth?: pulumi.Input<string>;
    updateInbandwidthMaximum?: pulumi.Input<number>;
    updateInbandwidthMinimum?: pulumi.Input<number>;
    updateOutbandwidth?: pulumi.Input<string>;
    updateOutbandwidthMaximum?: pulumi.Input<number>;
    updateOutbandwidthMinimum?: pulumi.Input<number>;
    updateShaper?: pulumi.Input<string>;
}
