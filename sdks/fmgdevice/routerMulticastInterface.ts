// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RouterMulticastInterface extends pulumi.CustomResource {
    /**
     * Get an existing RouterMulticastInterface resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouterMulticastInterfaceState, opts?: pulumi.CustomResourceOptions): RouterMulticastInterface {
        return new RouterMulticastInterface(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/routerMulticastInterface:RouterMulticastInterface';

    /**
     * Returns true if the given object is an instance of RouterMulticastInterface.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RouterMulticastInterface {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RouterMulticastInterface.__pulumiType;
    }

    public readonly bfd!: pulumi.Output<string>;
    public readonly ciscoExcludeGenid!: pulumi.Output<string>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly deviceVdom!: pulumi.Output<string>;
    public readonly drPriority!: pulumi.Output<number>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly helloHoldtime!: pulumi.Output<number>;
    public readonly helloInterval!: pulumi.Output<number>;
    public readonly igmp!: pulumi.Output<outputs.RouterMulticastInterfaceIgmp | undefined>;
    public readonly joinGroups!: pulumi.Output<outputs.RouterMulticastInterfaceJoinGroup[] | undefined>;
    public readonly multicastFlows!: pulumi.Output<string[]>;
    public readonly name!: pulumi.Output<string>;
    public readonly neighbourFilters!: pulumi.Output<string[]>;
    public readonly passive!: pulumi.Output<string>;
    public readonly pimMode!: pulumi.Output<string>;
    public readonly propagationDelay!: pulumi.Output<number | undefined>;
    public readonly rpCandidate!: pulumi.Output<string>;
    public readonly rpCandidateGroups!: pulumi.Output<string[]>;
    public readonly rpCandidateInterval!: pulumi.Output<number | undefined>;
    public readonly rpCandidatePriority!: pulumi.Output<number | undefined>;
    public readonly rpfNbrFailBack!: pulumi.Output<string>;
    public readonly rpfNbrFailBackFilters!: pulumi.Output<string[]>;
    public readonly stateRefreshInterval!: pulumi.Output<number | undefined>;
    public readonly staticGroups!: pulumi.Output<string[]>;
    public readonly ttlThreshold!: pulumi.Output<number>;

    /**
     * Create a RouterMulticastInterface resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RouterMulticastInterfaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RouterMulticastInterfaceArgs | RouterMulticastInterfaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RouterMulticastInterfaceState | undefined;
            resourceInputs["bfd"] = state ? state.bfd : undefined;
            resourceInputs["ciscoExcludeGenid"] = state ? state.ciscoExcludeGenid : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["deviceVdom"] = state ? state.deviceVdom : undefined;
            resourceInputs["drPriority"] = state ? state.drPriority : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["helloHoldtime"] = state ? state.helloHoldtime : undefined;
            resourceInputs["helloInterval"] = state ? state.helloInterval : undefined;
            resourceInputs["igmp"] = state ? state.igmp : undefined;
            resourceInputs["joinGroups"] = state ? state.joinGroups : undefined;
            resourceInputs["multicastFlows"] = state ? state.multicastFlows : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["neighbourFilters"] = state ? state.neighbourFilters : undefined;
            resourceInputs["passive"] = state ? state.passive : undefined;
            resourceInputs["pimMode"] = state ? state.pimMode : undefined;
            resourceInputs["propagationDelay"] = state ? state.propagationDelay : undefined;
            resourceInputs["rpCandidate"] = state ? state.rpCandidate : undefined;
            resourceInputs["rpCandidateGroups"] = state ? state.rpCandidateGroups : undefined;
            resourceInputs["rpCandidateInterval"] = state ? state.rpCandidateInterval : undefined;
            resourceInputs["rpCandidatePriority"] = state ? state.rpCandidatePriority : undefined;
            resourceInputs["rpfNbrFailBack"] = state ? state.rpfNbrFailBack : undefined;
            resourceInputs["rpfNbrFailBackFilters"] = state ? state.rpfNbrFailBackFilters : undefined;
            resourceInputs["stateRefreshInterval"] = state ? state.stateRefreshInterval : undefined;
            resourceInputs["staticGroups"] = state ? state.staticGroups : undefined;
            resourceInputs["ttlThreshold"] = state ? state.ttlThreshold : undefined;
        } else {
            const args = argsOrState as RouterMulticastInterfaceArgs | undefined;
            resourceInputs["bfd"] = args ? args.bfd : undefined;
            resourceInputs["ciscoExcludeGenid"] = args ? args.ciscoExcludeGenid : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["deviceVdom"] = args ? args.deviceVdom : undefined;
            resourceInputs["drPriority"] = args ? args.drPriority : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["helloHoldtime"] = args ? args.helloHoldtime : undefined;
            resourceInputs["helloInterval"] = args ? args.helloInterval : undefined;
            resourceInputs["igmp"] = args ? args.igmp : undefined;
            resourceInputs["joinGroups"] = args ? args.joinGroups : undefined;
            resourceInputs["multicastFlows"] = args ? args.multicastFlows : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["neighbourFilters"] = args ? args.neighbourFilters : undefined;
            resourceInputs["passive"] = args ? args.passive : undefined;
            resourceInputs["pimMode"] = args ? args.pimMode : undefined;
            resourceInputs["propagationDelay"] = args ? args.propagationDelay : undefined;
            resourceInputs["rpCandidate"] = args ? args.rpCandidate : undefined;
            resourceInputs["rpCandidateGroups"] = args ? args.rpCandidateGroups : undefined;
            resourceInputs["rpCandidateInterval"] = args ? args.rpCandidateInterval : undefined;
            resourceInputs["rpCandidatePriority"] = args ? args.rpCandidatePriority : undefined;
            resourceInputs["rpfNbrFailBack"] = args ? args.rpfNbrFailBack : undefined;
            resourceInputs["rpfNbrFailBackFilters"] = args ? args.rpfNbrFailBackFilters : undefined;
            resourceInputs["stateRefreshInterval"] = args ? args.stateRefreshInterval : undefined;
            resourceInputs["staticGroups"] = args ? args.staticGroups : undefined;
            resourceInputs["ttlThreshold"] = args ? args.ttlThreshold : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RouterMulticastInterface.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RouterMulticastInterface resources.
 */
export interface RouterMulticastInterfaceState {
    bfd?: pulumi.Input<string>;
    ciscoExcludeGenid?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    drPriority?: pulumi.Input<number>;
    dynamicSortSubtable?: pulumi.Input<string>;
    helloHoldtime?: pulumi.Input<number>;
    helloInterval?: pulumi.Input<number>;
    igmp?: pulumi.Input<inputs.RouterMulticastInterfaceIgmp>;
    joinGroups?: pulumi.Input<pulumi.Input<inputs.RouterMulticastInterfaceJoinGroup>[]>;
    multicastFlows?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    neighbourFilters?: pulumi.Input<pulumi.Input<string>[]>;
    passive?: pulumi.Input<string>;
    pimMode?: pulumi.Input<string>;
    propagationDelay?: pulumi.Input<number>;
    rpCandidate?: pulumi.Input<string>;
    rpCandidateGroups?: pulumi.Input<pulumi.Input<string>[]>;
    rpCandidateInterval?: pulumi.Input<number>;
    rpCandidatePriority?: pulumi.Input<number>;
    rpfNbrFailBack?: pulumi.Input<string>;
    rpfNbrFailBackFilters?: pulumi.Input<pulumi.Input<string>[]>;
    stateRefreshInterval?: pulumi.Input<number>;
    staticGroups?: pulumi.Input<pulumi.Input<string>[]>;
    ttlThreshold?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a RouterMulticastInterface resource.
 */
export interface RouterMulticastInterfaceArgs {
    bfd?: pulumi.Input<string>;
    ciscoExcludeGenid?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    drPriority?: pulumi.Input<number>;
    dynamicSortSubtable?: pulumi.Input<string>;
    helloHoldtime?: pulumi.Input<number>;
    helloInterval?: pulumi.Input<number>;
    igmp?: pulumi.Input<inputs.RouterMulticastInterfaceIgmp>;
    joinGroups?: pulumi.Input<pulumi.Input<inputs.RouterMulticastInterfaceJoinGroup>[]>;
    multicastFlows?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    neighbourFilters?: pulumi.Input<pulumi.Input<string>[]>;
    passive?: pulumi.Input<string>;
    pimMode?: pulumi.Input<string>;
    propagationDelay?: pulumi.Input<number>;
    rpCandidate?: pulumi.Input<string>;
    rpCandidateGroups?: pulumi.Input<pulumi.Input<string>[]>;
    rpCandidateInterval?: pulumi.Input<number>;
    rpCandidatePriority?: pulumi.Input<number>;
    rpfNbrFailBack?: pulumi.Input<string>;
    rpfNbrFailBackFilters?: pulumi.Input<pulumi.Input<string>[]>;
    stateRefreshInterval?: pulumi.Input<number>;
    staticGroups?: pulumi.Input<pulumi.Input<string>[]>;
    ttlThreshold?: pulumi.Input<number>;
}
