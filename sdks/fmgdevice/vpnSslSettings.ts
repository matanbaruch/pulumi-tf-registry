// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VpnSslSettings extends pulumi.CustomResource {
    /**
     * Get an existing VpnSslSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpnSslSettingsState, opts?: pulumi.CustomResourceOptions): VpnSslSettings {
        return new VpnSslSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/vpnSslSettings:VpnSslSettings';

    /**
     * Returns true if the given object is an instance of VpnSslSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpnSslSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpnSslSettings.__pulumiType;
    }

    public readonly algorithm!: pulumi.Output<string>;
    public readonly authSessionCheckSourceIp!: pulumi.Output<string>;
    public readonly authTimeout!: pulumi.Output<number>;
    public readonly authenticationRules!: pulumi.Output<outputs.VpnSslSettingsAuthenticationRule[] | undefined>;
    public readonly autoTunnelStaticRoute!: pulumi.Output<string>;
    public readonly bannedCiphers!: pulumi.Output<string[]>;
    public readonly browserLanguageDetection!: pulumi.Output<string>;
    public readonly checkReferer!: pulumi.Output<string>;
    public readonly ciphersuites!: pulumi.Output<string[]>;
    public readonly clientSigalgs!: pulumi.Output<string>;
    public readonly defaultPortals!: pulumi.Output<string[]>;
    public readonly deflateCompressionLevel!: pulumi.Output<number>;
    public readonly deflateMinDataSize!: pulumi.Output<number>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly deviceVdom!: pulumi.Output<string>;
    public readonly dnsServer1!: pulumi.Output<string>;
    public readonly dnsServer2!: pulumi.Output<string>;
    public readonly dnsSuffix!: pulumi.Output<string | undefined>;
    public readonly dtlsHeartbeatFailCount!: pulumi.Output<number>;
    public readonly dtlsHeartbeatIdleTimeout!: pulumi.Output<number>;
    public readonly dtlsHeartbeatInterval!: pulumi.Output<number>;
    public readonly dtlsHelloTimeout!: pulumi.Output<number>;
    public readonly dtlsMaxProtoVer!: pulumi.Output<string>;
    public readonly dtlsMinProtoVer!: pulumi.Output<string>;
    public readonly dtlsTunnel!: pulumi.Output<string>;
    public readonly dualStackMode!: pulumi.Output<string>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly encode2fSequence!: pulumi.Output<string>;
    public readonly encryptAndStorePassword!: pulumi.Output<string>;
    public readonly forceTwoFactorAuth!: pulumi.Output<string>;
    public readonly headerXForwardedFor!: pulumi.Output<string>;
    public readonly hstsIncludeSubdomains!: pulumi.Output<string>;
    public readonly httpCompression!: pulumi.Output<string>;
    public readonly httpOnlyCookie!: pulumi.Output<string>;
    public readonly httpRequestBodyTimeout!: pulumi.Output<number>;
    public readonly httpRequestHeaderTimeout!: pulumi.Output<number>;
    public readonly httpsRedirect!: pulumi.Output<string>;
    public readonly idleTimeout!: pulumi.Output<number>;
    public readonly ipv6DnsServer1!: pulumi.Output<string>;
    public readonly ipv6DnsServer2!: pulumi.Output<string>;
    public readonly ipv6WinsServer1!: pulumi.Output<string>;
    public readonly ipv6WinsServer2!: pulumi.Output<string>;
    public readonly loginAttemptLimit!: pulumi.Output<number>;
    public readonly loginBlockTime!: pulumi.Output<number>;
    public readonly loginTimeout!: pulumi.Output<number>;
    public readonly port!: pulumi.Output<number>;
    public readonly portPrecedence!: pulumi.Output<string>;
    public readonly reqclientcert!: pulumi.Output<string>;
    public readonly samlRedirectPort!: pulumi.Output<number>;
    public readonly serverHostname!: pulumi.Output<string | undefined>;
    public readonly servercerts!: pulumi.Output<string[]>;
    public readonly sourceAddress6Negate!: pulumi.Output<string | undefined>;
    public readonly sourceAddress6s!: pulumi.Output<string[]>;
    public readonly sourceAddressNegate!: pulumi.Output<string | undefined>;
    public readonly sourceAddresses!: pulumi.Output<string[]>;
    public readonly sourceInterfaces!: pulumi.Output<string[]>;
    public readonly sslClientRenegotiation!: pulumi.Output<string>;
    public readonly sslInsertEmptyFragment!: pulumi.Output<string>;
    public readonly sslMaxProtoVer!: pulumi.Output<string>;
    public readonly sslMinProtoVer!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly transformBackwardSlashes!: pulumi.Output<string>;
    public readonly tunnelAddrAssignedMethod!: pulumi.Output<string>;
    public readonly tunnelConnectWithoutReauth!: pulumi.Output<string>;
    public readonly tunnelIpPools!: pulumi.Output<string[]>;
    public readonly tunnelIpv6Pools!: pulumi.Output<string[]>;
    public readonly tunnelUserSessionTimeout!: pulumi.Output<number>;
    public readonly unsafeLegacyRenegotiation!: pulumi.Output<string>;
    public readonly urlObscuration!: pulumi.Output<string>;
    public readonly userPeers!: pulumi.Output<string[]>;
    public readonly webModeSnat!: pulumi.Output<string | undefined>;
    public readonly winsServer1!: pulumi.Output<string>;
    public readonly winsServer2!: pulumi.Output<string>;
    public readonly xContentTypeOptions!: pulumi.Output<string>;
    public readonly ztnaTrustedClient!: pulumi.Output<string>;

    /**
     * Create a VpnSslSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VpnSslSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpnSslSettingsArgs | VpnSslSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpnSslSettingsState | undefined;
            resourceInputs["algorithm"] = state ? state.algorithm : undefined;
            resourceInputs["authSessionCheckSourceIp"] = state ? state.authSessionCheckSourceIp : undefined;
            resourceInputs["authTimeout"] = state ? state.authTimeout : undefined;
            resourceInputs["authenticationRules"] = state ? state.authenticationRules : undefined;
            resourceInputs["autoTunnelStaticRoute"] = state ? state.autoTunnelStaticRoute : undefined;
            resourceInputs["bannedCiphers"] = state ? state.bannedCiphers : undefined;
            resourceInputs["browserLanguageDetection"] = state ? state.browserLanguageDetection : undefined;
            resourceInputs["checkReferer"] = state ? state.checkReferer : undefined;
            resourceInputs["ciphersuites"] = state ? state.ciphersuites : undefined;
            resourceInputs["clientSigalgs"] = state ? state.clientSigalgs : undefined;
            resourceInputs["defaultPortals"] = state ? state.defaultPortals : undefined;
            resourceInputs["deflateCompressionLevel"] = state ? state.deflateCompressionLevel : undefined;
            resourceInputs["deflateMinDataSize"] = state ? state.deflateMinDataSize : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["deviceVdom"] = state ? state.deviceVdom : undefined;
            resourceInputs["dnsServer1"] = state ? state.dnsServer1 : undefined;
            resourceInputs["dnsServer2"] = state ? state.dnsServer2 : undefined;
            resourceInputs["dnsSuffix"] = state ? state.dnsSuffix : undefined;
            resourceInputs["dtlsHeartbeatFailCount"] = state ? state.dtlsHeartbeatFailCount : undefined;
            resourceInputs["dtlsHeartbeatIdleTimeout"] = state ? state.dtlsHeartbeatIdleTimeout : undefined;
            resourceInputs["dtlsHeartbeatInterval"] = state ? state.dtlsHeartbeatInterval : undefined;
            resourceInputs["dtlsHelloTimeout"] = state ? state.dtlsHelloTimeout : undefined;
            resourceInputs["dtlsMaxProtoVer"] = state ? state.dtlsMaxProtoVer : undefined;
            resourceInputs["dtlsMinProtoVer"] = state ? state.dtlsMinProtoVer : undefined;
            resourceInputs["dtlsTunnel"] = state ? state.dtlsTunnel : undefined;
            resourceInputs["dualStackMode"] = state ? state.dualStackMode : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["encode2fSequence"] = state ? state.encode2fSequence : undefined;
            resourceInputs["encryptAndStorePassword"] = state ? state.encryptAndStorePassword : undefined;
            resourceInputs["forceTwoFactorAuth"] = state ? state.forceTwoFactorAuth : undefined;
            resourceInputs["headerXForwardedFor"] = state ? state.headerXForwardedFor : undefined;
            resourceInputs["hstsIncludeSubdomains"] = state ? state.hstsIncludeSubdomains : undefined;
            resourceInputs["httpCompression"] = state ? state.httpCompression : undefined;
            resourceInputs["httpOnlyCookie"] = state ? state.httpOnlyCookie : undefined;
            resourceInputs["httpRequestBodyTimeout"] = state ? state.httpRequestBodyTimeout : undefined;
            resourceInputs["httpRequestHeaderTimeout"] = state ? state.httpRequestHeaderTimeout : undefined;
            resourceInputs["httpsRedirect"] = state ? state.httpsRedirect : undefined;
            resourceInputs["idleTimeout"] = state ? state.idleTimeout : undefined;
            resourceInputs["ipv6DnsServer1"] = state ? state.ipv6DnsServer1 : undefined;
            resourceInputs["ipv6DnsServer2"] = state ? state.ipv6DnsServer2 : undefined;
            resourceInputs["ipv6WinsServer1"] = state ? state.ipv6WinsServer1 : undefined;
            resourceInputs["ipv6WinsServer2"] = state ? state.ipv6WinsServer2 : undefined;
            resourceInputs["loginAttemptLimit"] = state ? state.loginAttemptLimit : undefined;
            resourceInputs["loginBlockTime"] = state ? state.loginBlockTime : undefined;
            resourceInputs["loginTimeout"] = state ? state.loginTimeout : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["portPrecedence"] = state ? state.portPrecedence : undefined;
            resourceInputs["reqclientcert"] = state ? state.reqclientcert : undefined;
            resourceInputs["samlRedirectPort"] = state ? state.samlRedirectPort : undefined;
            resourceInputs["serverHostname"] = state ? state.serverHostname : undefined;
            resourceInputs["servercerts"] = state ? state.servercerts : undefined;
            resourceInputs["sourceAddress6Negate"] = state ? state.sourceAddress6Negate : undefined;
            resourceInputs["sourceAddress6s"] = state ? state.sourceAddress6s : undefined;
            resourceInputs["sourceAddressNegate"] = state ? state.sourceAddressNegate : undefined;
            resourceInputs["sourceAddresses"] = state ? state.sourceAddresses : undefined;
            resourceInputs["sourceInterfaces"] = state ? state.sourceInterfaces : undefined;
            resourceInputs["sslClientRenegotiation"] = state ? state.sslClientRenegotiation : undefined;
            resourceInputs["sslInsertEmptyFragment"] = state ? state.sslInsertEmptyFragment : undefined;
            resourceInputs["sslMaxProtoVer"] = state ? state.sslMaxProtoVer : undefined;
            resourceInputs["sslMinProtoVer"] = state ? state.sslMinProtoVer : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["transformBackwardSlashes"] = state ? state.transformBackwardSlashes : undefined;
            resourceInputs["tunnelAddrAssignedMethod"] = state ? state.tunnelAddrAssignedMethod : undefined;
            resourceInputs["tunnelConnectWithoutReauth"] = state ? state.tunnelConnectWithoutReauth : undefined;
            resourceInputs["tunnelIpPools"] = state ? state.tunnelIpPools : undefined;
            resourceInputs["tunnelIpv6Pools"] = state ? state.tunnelIpv6Pools : undefined;
            resourceInputs["tunnelUserSessionTimeout"] = state ? state.tunnelUserSessionTimeout : undefined;
            resourceInputs["unsafeLegacyRenegotiation"] = state ? state.unsafeLegacyRenegotiation : undefined;
            resourceInputs["urlObscuration"] = state ? state.urlObscuration : undefined;
            resourceInputs["userPeers"] = state ? state.userPeers : undefined;
            resourceInputs["webModeSnat"] = state ? state.webModeSnat : undefined;
            resourceInputs["winsServer1"] = state ? state.winsServer1 : undefined;
            resourceInputs["winsServer2"] = state ? state.winsServer2 : undefined;
            resourceInputs["xContentTypeOptions"] = state ? state.xContentTypeOptions : undefined;
            resourceInputs["ztnaTrustedClient"] = state ? state.ztnaTrustedClient : undefined;
        } else {
            const args = argsOrState as VpnSslSettingsArgs | undefined;
            resourceInputs["algorithm"] = args ? args.algorithm : undefined;
            resourceInputs["authSessionCheckSourceIp"] = args ? args.authSessionCheckSourceIp : undefined;
            resourceInputs["authTimeout"] = args ? args.authTimeout : undefined;
            resourceInputs["authenticationRules"] = args ? args.authenticationRules : undefined;
            resourceInputs["autoTunnelStaticRoute"] = args ? args.autoTunnelStaticRoute : undefined;
            resourceInputs["bannedCiphers"] = args ? args.bannedCiphers : undefined;
            resourceInputs["browserLanguageDetection"] = args ? args.browserLanguageDetection : undefined;
            resourceInputs["checkReferer"] = args ? args.checkReferer : undefined;
            resourceInputs["ciphersuites"] = args ? args.ciphersuites : undefined;
            resourceInputs["clientSigalgs"] = args ? args.clientSigalgs : undefined;
            resourceInputs["defaultPortals"] = args ? args.defaultPortals : undefined;
            resourceInputs["deflateCompressionLevel"] = args ? args.deflateCompressionLevel : undefined;
            resourceInputs["deflateMinDataSize"] = args ? args.deflateMinDataSize : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["deviceVdom"] = args ? args.deviceVdom : undefined;
            resourceInputs["dnsServer1"] = args ? args.dnsServer1 : undefined;
            resourceInputs["dnsServer2"] = args ? args.dnsServer2 : undefined;
            resourceInputs["dnsSuffix"] = args ? args.dnsSuffix : undefined;
            resourceInputs["dtlsHeartbeatFailCount"] = args ? args.dtlsHeartbeatFailCount : undefined;
            resourceInputs["dtlsHeartbeatIdleTimeout"] = args ? args.dtlsHeartbeatIdleTimeout : undefined;
            resourceInputs["dtlsHeartbeatInterval"] = args ? args.dtlsHeartbeatInterval : undefined;
            resourceInputs["dtlsHelloTimeout"] = args ? args.dtlsHelloTimeout : undefined;
            resourceInputs["dtlsMaxProtoVer"] = args ? args.dtlsMaxProtoVer : undefined;
            resourceInputs["dtlsMinProtoVer"] = args ? args.dtlsMinProtoVer : undefined;
            resourceInputs["dtlsTunnel"] = args ? args.dtlsTunnel : undefined;
            resourceInputs["dualStackMode"] = args ? args.dualStackMode : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["encode2fSequence"] = args ? args.encode2fSequence : undefined;
            resourceInputs["encryptAndStorePassword"] = args ? args.encryptAndStorePassword : undefined;
            resourceInputs["forceTwoFactorAuth"] = args ? args.forceTwoFactorAuth : undefined;
            resourceInputs["headerXForwardedFor"] = args ? args.headerXForwardedFor : undefined;
            resourceInputs["hstsIncludeSubdomains"] = args ? args.hstsIncludeSubdomains : undefined;
            resourceInputs["httpCompression"] = args ? args.httpCompression : undefined;
            resourceInputs["httpOnlyCookie"] = args ? args.httpOnlyCookie : undefined;
            resourceInputs["httpRequestBodyTimeout"] = args ? args.httpRequestBodyTimeout : undefined;
            resourceInputs["httpRequestHeaderTimeout"] = args ? args.httpRequestHeaderTimeout : undefined;
            resourceInputs["httpsRedirect"] = args ? args.httpsRedirect : undefined;
            resourceInputs["idleTimeout"] = args ? args.idleTimeout : undefined;
            resourceInputs["ipv6DnsServer1"] = args ? args.ipv6DnsServer1 : undefined;
            resourceInputs["ipv6DnsServer2"] = args ? args.ipv6DnsServer2 : undefined;
            resourceInputs["ipv6WinsServer1"] = args ? args.ipv6WinsServer1 : undefined;
            resourceInputs["ipv6WinsServer2"] = args ? args.ipv6WinsServer2 : undefined;
            resourceInputs["loginAttemptLimit"] = args ? args.loginAttemptLimit : undefined;
            resourceInputs["loginBlockTime"] = args ? args.loginBlockTime : undefined;
            resourceInputs["loginTimeout"] = args ? args.loginTimeout : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["portPrecedence"] = args ? args.portPrecedence : undefined;
            resourceInputs["reqclientcert"] = args ? args.reqclientcert : undefined;
            resourceInputs["samlRedirectPort"] = args ? args.samlRedirectPort : undefined;
            resourceInputs["serverHostname"] = args ? args.serverHostname : undefined;
            resourceInputs["servercerts"] = args ? args.servercerts : undefined;
            resourceInputs["sourceAddress6Negate"] = args ? args.sourceAddress6Negate : undefined;
            resourceInputs["sourceAddress6s"] = args ? args.sourceAddress6s : undefined;
            resourceInputs["sourceAddressNegate"] = args ? args.sourceAddressNegate : undefined;
            resourceInputs["sourceAddresses"] = args ? args.sourceAddresses : undefined;
            resourceInputs["sourceInterfaces"] = args ? args.sourceInterfaces : undefined;
            resourceInputs["sslClientRenegotiation"] = args ? args.sslClientRenegotiation : undefined;
            resourceInputs["sslInsertEmptyFragment"] = args ? args.sslInsertEmptyFragment : undefined;
            resourceInputs["sslMaxProtoVer"] = args ? args.sslMaxProtoVer : undefined;
            resourceInputs["sslMinProtoVer"] = args ? args.sslMinProtoVer : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["transformBackwardSlashes"] = args ? args.transformBackwardSlashes : undefined;
            resourceInputs["tunnelAddrAssignedMethod"] = args ? args.tunnelAddrAssignedMethod : undefined;
            resourceInputs["tunnelConnectWithoutReauth"] = args ? args.tunnelConnectWithoutReauth : undefined;
            resourceInputs["tunnelIpPools"] = args ? args.tunnelIpPools : undefined;
            resourceInputs["tunnelIpv6Pools"] = args ? args.tunnelIpv6Pools : undefined;
            resourceInputs["tunnelUserSessionTimeout"] = args ? args.tunnelUserSessionTimeout : undefined;
            resourceInputs["unsafeLegacyRenegotiation"] = args ? args.unsafeLegacyRenegotiation : undefined;
            resourceInputs["urlObscuration"] = args ? args.urlObscuration : undefined;
            resourceInputs["userPeers"] = args ? args.userPeers : undefined;
            resourceInputs["webModeSnat"] = args ? args.webModeSnat : undefined;
            resourceInputs["winsServer1"] = args ? args.winsServer1 : undefined;
            resourceInputs["winsServer2"] = args ? args.winsServer2 : undefined;
            resourceInputs["xContentTypeOptions"] = args ? args.xContentTypeOptions : undefined;
            resourceInputs["ztnaTrustedClient"] = args ? args.ztnaTrustedClient : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpnSslSettings.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpnSslSettings resources.
 */
export interface VpnSslSettingsState {
    algorithm?: pulumi.Input<string>;
    authSessionCheckSourceIp?: pulumi.Input<string>;
    authTimeout?: pulumi.Input<number>;
    authenticationRules?: pulumi.Input<pulumi.Input<inputs.VpnSslSettingsAuthenticationRule>[]>;
    autoTunnelStaticRoute?: pulumi.Input<string>;
    bannedCiphers?: pulumi.Input<pulumi.Input<string>[]>;
    browserLanguageDetection?: pulumi.Input<string>;
    checkReferer?: pulumi.Input<string>;
    ciphersuites?: pulumi.Input<pulumi.Input<string>[]>;
    clientSigalgs?: pulumi.Input<string>;
    defaultPortals?: pulumi.Input<pulumi.Input<string>[]>;
    deflateCompressionLevel?: pulumi.Input<number>;
    deflateMinDataSize?: pulumi.Input<number>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    dnsServer1?: pulumi.Input<string>;
    dnsServer2?: pulumi.Input<string>;
    dnsSuffix?: pulumi.Input<string>;
    dtlsHeartbeatFailCount?: pulumi.Input<number>;
    dtlsHeartbeatIdleTimeout?: pulumi.Input<number>;
    dtlsHeartbeatInterval?: pulumi.Input<number>;
    dtlsHelloTimeout?: pulumi.Input<number>;
    dtlsMaxProtoVer?: pulumi.Input<string>;
    dtlsMinProtoVer?: pulumi.Input<string>;
    dtlsTunnel?: pulumi.Input<string>;
    dualStackMode?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    encode2fSequence?: pulumi.Input<string>;
    encryptAndStorePassword?: pulumi.Input<string>;
    forceTwoFactorAuth?: pulumi.Input<string>;
    headerXForwardedFor?: pulumi.Input<string>;
    hstsIncludeSubdomains?: pulumi.Input<string>;
    httpCompression?: pulumi.Input<string>;
    httpOnlyCookie?: pulumi.Input<string>;
    httpRequestBodyTimeout?: pulumi.Input<number>;
    httpRequestHeaderTimeout?: pulumi.Input<number>;
    httpsRedirect?: pulumi.Input<string>;
    idleTimeout?: pulumi.Input<number>;
    ipv6DnsServer1?: pulumi.Input<string>;
    ipv6DnsServer2?: pulumi.Input<string>;
    ipv6WinsServer1?: pulumi.Input<string>;
    ipv6WinsServer2?: pulumi.Input<string>;
    loginAttemptLimit?: pulumi.Input<number>;
    loginBlockTime?: pulumi.Input<number>;
    loginTimeout?: pulumi.Input<number>;
    port?: pulumi.Input<number>;
    portPrecedence?: pulumi.Input<string>;
    reqclientcert?: pulumi.Input<string>;
    samlRedirectPort?: pulumi.Input<number>;
    serverHostname?: pulumi.Input<string>;
    servercerts?: pulumi.Input<pulumi.Input<string>[]>;
    sourceAddress6Negate?: pulumi.Input<string>;
    sourceAddress6s?: pulumi.Input<pulumi.Input<string>[]>;
    sourceAddressNegate?: pulumi.Input<string>;
    sourceAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    sourceInterfaces?: pulumi.Input<pulumi.Input<string>[]>;
    sslClientRenegotiation?: pulumi.Input<string>;
    sslInsertEmptyFragment?: pulumi.Input<string>;
    sslMaxProtoVer?: pulumi.Input<string>;
    sslMinProtoVer?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    transformBackwardSlashes?: pulumi.Input<string>;
    tunnelAddrAssignedMethod?: pulumi.Input<string>;
    tunnelConnectWithoutReauth?: pulumi.Input<string>;
    tunnelIpPools?: pulumi.Input<pulumi.Input<string>[]>;
    tunnelIpv6Pools?: pulumi.Input<pulumi.Input<string>[]>;
    tunnelUserSessionTimeout?: pulumi.Input<number>;
    unsafeLegacyRenegotiation?: pulumi.Input<string>;
    urlObscuration?: pulumi.Input<string>;
    userPeers?: pulumi.Input<pulumi.Input<string>[]>;
    webModeSnat?: pulumi.Input<string>;
    winsServer1?: pulumi.Input<string>;
    winsServer2?: pulumi.Input<string>;
    xContentTypeOptions?: pulumi.Input<string>;
    ztnaTrustedClient?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpnSslSettings resource.
 */
export interface VpnSslSettingsArgs {
    algorithm?: pulumi.Input<string>;
    authSessionCheckSourceIp?: pulumi.Input<string>;
    authTimeout?: pulumi.Input<number>;
    authenticationRules?: pulumi.Input<pulumi.Input<inputs.VpnSslSettingsAuthenticationRule>[]>;
    autoTunnelStaticRoute?: pulumi.Input<string>;
    bannedCiphers?: pulumi.Input<pulumi.Input<string>[]>;
    browserLanguageDetection?: pulumi.Input<string>;
    checkReferer?: pulumi.Input<string>;
    ciphersuites?: pulumi.Input<pulumi.Input<string>[]>;
    clientSigalgs?: pulumi.Input<string>;
    defaultPortals?: pulumi.Input<pulumi.Input<string>[]>;
    deflateCompressionLevel?: pulumi.Input<number>;
    deflateMinDataSize?: pulumi.Input<number>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    dnsServer1?: pulumi.Input<string>;
    dnsServer2?: pulumi.Input<string>;
    dnsSuffix?: pulumi.Input<string>;
    dtlsHeartbeatFailCount?: pulumi.Input<number>;
    dtlsHeartbeatIdleTimeout?: pulumi.Input<number>;
    dtlsHeartbeatInterval?: pulumi.Input<number>;
    dtlsHelloTimeout?: pulumi.Input<number>;
    dtlsMaxProtoVer?: pulumi.Input<string>;
    dtlsMinProtoVer?: pulumi.Input<string>;
    dtlsTunnel?: pulumi.Input<string>;
    dualStackMode?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    encode2fSequence?: pulumi.Input<string>;
    encryptAndStorePassword?: pulumi.Input<string>;
    forceTwoFactorAuth?: pulumi.Input<string>;
    headerXForwardedFor?: pulumi.Input<string>;
    hstsIncludeSubdomains?: pulumi.Input<string>;
    httpCompression?: pulumi.Input<string>;
    httpOnlyCookie?: pulumi.Input<string>;
    httpRequestBodyTimeout?: pulumi.Input<number>;
    httpRequestHeaderTimeout?: pulumi.Input<number>;
    httpsRedirect?: pulumi.Input<string>;
    idleTimeout?: pulumi.Input<number>;
    ipv6DnsServer1?: pulumi.Input<string>;
    ipv6DnsServer2?: pulumi.Input<string>;
    ipv6WinsServer1?: pulumi.Input<string>;
    ipv6WinsServer2?: pulumi.Input<string>;
    loginAttemptLimit?: pulumi.Input<number>;
    loginBlockTime?: pulumi.Input<number>;
    loginTimeout?: pulumi.Input<number>;
    port?: pulumi.Input<number>;
    portPrecedence?: pulumi.Input<string>;
    reqclientcert?: pulumi.Input<string>;
    samlRedirectPort?: pulumi.Input<number>;
    serverHostname?: pulumi.Input<string>;
    servercerts?: pulumi.Input<pulumi.Input<string>[]>;
    sourceAddress6Negate?: pulumi.Input<string>;
    sourceAddress6s?: pulumi.Input<pulumi.Input<string>[]>;
    sourceAddressNegate?: pulumi.Input<string>;
    sourceAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    sourceInterfaces?: pulumi.Input<pulumi.Input<string>[]>;
    sslClientRenegotiation?: pulumi.Input<string>;
    sslInsertEmptyFragment?: pulumi.Input<string>;
    sslMaxProtoVer?: pulumi.Input<string>;
    sslMinProtoVer?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    transformBackwardSlashes?: pulumi.Input<string>;
    tunnelAddrAssignedMethod?: pulumi.Input<string>;
    tunnelConnectWithoutReauth?: pulumi.Input<string>;
    tunnelIpPools?: pulumi.Input<pulumi.Input<string>[]>;
    tunnelIpv6Pools?: pulumi.Input<pulumi.Input<string>[]>;
    tunnelUserSessionTimeout?: pulumi.Input<number>;
    unsafeLegacyRenegotiation?: pulumi.Input<string>;
    urlObscuration?: pulumi.Input<string>;
    userPeers?: pulumi.Input<pulumi.Input<string>[]>;
    webModeSnat?: pulumi.Input<string>;
    winsServer1?: pulumi.Input<string>;
    winsServer2?: pulumi.Input<string>;
    xContentTypeOptions?: pulumi.Input<string>;
    ztnaTrustedClient?: pulumi.Input<string>;
}
