// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SwitchcontrollerLocationCoordinates extends pulumi.CustomResource {
    /**
     * Get an existing SwitchcontrollerLocationCoordinates resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SwitchcontrollerLocationCoordinatesState, opts?: pulumi.CustomResourceOptions): SwitchcontrollerLocationCoordinates {
        return new SwitchcontrollerLocationCoordinates(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/switchcontrollerLocationCoordinates:SwitchcontrollerLocationCoordinates';

    /**
     * Returns true if the given object is an instance of SwitchcontrollerLocationCoordinates.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SwitchcontrollerLocationCoordinates {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SwitchcontrollerLocationCoordinates.__pulumiType;
    }

    public readonly altitude!: pulumi.Output<string | undefined>;
    public readonly altitudeUnit!: pulumi.Output<string>;
    public readonly datum!: pulumi.Output<string>;
    public readonly deviceName!: pulumi.Output<string>;
    public readonly deviceVdom!: pulumi.Output<string>;
    public readonly latitude!: pulumi.Output<string | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly longitude!: pulumi.Output<string | undefined>;
    public readonly parentKey!: pulumi.Output<string | undefined>;

    /**
     * Create a SwitchcontrollerLocationCoordinates resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SwitchcontrollerLocationCoordinatesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SwitchcontrollerLocationCoordinatesArgs | SwitchcontrollerLocationCoordinatesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SwitchcontrollerLocationCoordinatesState | undefined;
            resourceInputs["altitude"] = state ? state.altitude : undefined;
            resourceInputs["altitudeUnit"] = state ? state.altitudeUnit : undefined;
            resourceInputs["datum"] = state ? state.datum : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["deviceVdom"] = state ? state.deviceVdom : undefined;
            resourceInputs["latitude"] = state ? state.latitude : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["longitude"] = state ? state.longitude : undefined;
            resourceInputs["parentKey"] = state ? state.parentKey : undefined;
        } else {
            const args = argsOrState as SwitchcontrollerLocationCoordinatesArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["altitude"] = args ? args.altitude : undefined;
            resourceInputs["altitudeUnit"] = args ? args.altitudeUnit : undefined;
            resourceInputs["datum"] = args ? args.datum : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["deviceVdom"] = args ? args.deviceVdom : undefined;
            resourceInputs["latitude"] = args ? args.latitude : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["longitude"] = args ? args.longitude : undefined;
            resourceInputs["parentKey"] = args ? args.parentKey : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SwitchcontrollerLocationCoordinates.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SwitchcontrollerLocationCoordinates resources.
 */
export interface SwitchcontrollerLocationCoordinatesState {
    altitude?: pulumi.Input<string>;
    altitudeUnit?: pulumi.Input<string>;
    datum?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    latitude?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    longitude?: pulumi.Input<string>;
    parentKey?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SwitchcontrollerLocationCoordinates resource.
 */
export interface SwitchcontrollerLocationCoordinatesArgs {
    altitude?: pulumi.Input<string>;
    altitudeUnit?: pulumi.Input<string>;
    datum?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    deviceVdom?: pulumi.Input<string>;
    latitude?: pulumi.Input<string>;
    location: pulumi.Input<string>;
    longitude?: pulumi.Input<string>;
    parentKey?: pulumi.Input<string>;
}
