// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SystemStandaloneclusterClusterpeer extends pulumi.CustomResource {
    /**
     * Get an existing SystemStandaloneclusterClusterpeer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemStandaloneclusterClusterpeerState, opts?: pulumi.CustomResourceOptions): SystemStandaloneclusterClusterpeer {
        return new SystemStandaloneclusterClusterpeer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fmgdevice:index/systemStandaloneclusterClusterpeer:SystemStandaloneclusterClusterpeer';

    /**
     * Returns true if the given object is an instance of SystemStandaloneclusterClusterpeer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemStandaloneclusterClusterpeer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemStandaloneclusterClusterpeer.__pulumiType;
    }

    public readonly deviceName!: pulumi.Output<string>;
    public readonly downIntfsBeforeSessSyncs!: pulumi.Output<string[]>;
    public readonly hbInterval!: pulumi.Output<number>;
    public readonly hbLostThreshold!: pulumi.Output<number>;
    public readonly ikeHeartbeatInterval!: pulumi.Output<number | undefined>;
    public readonly ikeMonitor!: pulumi.Output<string | undefined>;
    public readonly ikeMonitorInterval!: pulumi.Output<number | undefined>;
    public readonly ikeUseRfc6311!: pulumi.Output<string | undefined>;
    public readonly ipsecTunnelSync!: pulumi.Output<string>;
    public readonly peerip!: pulumi.Output<string>;
    public readonly peervds!: pulumi.Output<string[]>;
    public readonly secondaryAddIpsecRoutes!: pulumi.Output<string>;
    public readonly sessionSyncFilter!: pulumi.Output<outputs.SystemStandaloneclusterClusterpeerSessionSyncFilter | undefined>;
    public readonly syncId!: pulumi.Output<number>;
    public readonly syncvds!: pulumi.Output<string[]>;

    /**
     * Create a SystemStandaloneclusterClusterpeer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemStandaloneclusterClusterpeerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemStandaloneclusterClusterpeerArgs | SystemStandaloneclusterClusterpeerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemStandaloneclusterClusterpeerState | undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["downIntfsBeforeSessSyncs"] = state ? state.downIntfsBeforeSessSyncs : undefined;
            resourceInputs["hbInterval"] = state ? state.hbInterval : undefined;
            resourceInputs["hbLostThreshold"] = state ? state.hbLostThreshold : undefined;
            resourceInputs["ikeHeartbeatInterval"] = state ? state.ikeHeartbeatInterval : undefined;
            resourceInputs["ikeMonitor"] = state ? state.ikeMonitor : undefined;
            resourceInputs["ikeMonitorInterval"] = state ? state.ikeMonitorInterval : undefined;
            resourceInputs["ikeUseRfc6311"] = state ? state.ikeUseRfc6311 : undefined;
            resourceInputs["ipsecTunnelSync"] = state ? state.ipsecTunnelSync : undefined;
            resourceInputs["peerip"] = state ? state.peerip : undefined;
            resourceInputs["peervds"] = state ? state.peervds : undefined;
            resourceInputs["secondaryAddIpsecRoutes"] = state ? state.secondaryAddIpsecRoutes : undefined;
            resourceInputs["sessionSyncFilter"] = state ? state.sessionSyncFilter : undefined;
            resourceInputs["syncId"] = state ? state.syncId : undefined;
            resourceInputs["syncvds"] = state ? state.syncvds : undefined;
        } else {
            const args = argsOrState as SystemStandaloneclusterClusterpeerArgs | undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["downIntfsBeforeSessSyncs"] = args ? args.downIntfsBeforeSessSyncs : undefined;
            resourceInputs["hbInterval"] = args ? args.hbInterval : undefined;
            resourceInputs["hbLostThreshold"] = args ? args.hbLostThreshold : undefined;
            resourceInputs["ikeHeartbeatInterval"] = args ? args.ikeHeartbeatInterval : undefined;
            resourceInputs["ikeMonitor"] = args ? args.ikeMonitor : undefined;
            resourceInputs["ikeMonitorInterval"] = args ? args.ikeMonitorInterval : undefined;
            resourceInputs["ikeUseRfc6311"] = args ? args.ikeUseRfc6311 : undefined;
            resourceInputs["ipsecTunnelSync"] = args ? args.ipsecTunnelSync : undefined;
            resourceInputs["peerip"] = args ? args.peerip : undefined;
            resourceInputs["peervds"] = args ? args.peervds : undefined;
            resourceInputs["secondaryAddIpsecRoutes"] = args ? args.secondaryAddIpsecRoutes : undefined;
            resourceInputs["sessionSyncFilter"] = args ? args.sessionSyncFilter : undefined;
            resourceInputs["syncId"] = args ? args.syncId : undefined;
            resourceInputs["syncvds"] = args ? args.syncvds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SystemStandaloneclusterClusterpeer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemStandaloneclusterClusterpeer resources.
 */
export interface SystemStandaloneclusterClusterpeerState {
    deviceName?: pulumi.Input<string>;
    downIntfsBeforeSessSyncs?: pulumi.Input<pulumi.Input<string>[]>;
    hbInterval?: pulumi.Input<number>;
    hbLostThreshold?: pulumi.Input<number>;
    ikeHeartbeatInterval?: pulumi.Input<number>;
    ikeMonitor?: pulumi.Input<string>;
    ikeMonitorInterval?: pulumi.Input<number>;
    ikeUseRfc6311?: pulumi.Input<string>;
    ipsecTunnelSync?: pulumi.Input<string>;
    peerip?: pulumi.Input<string>;
    peervds?: pulumi.Input<pulumi.Input<string>[]>;
    secondaryAddIpsecRoutes?: pulumi.Input<string>;
    sessionSyncFilter?: pulumi.Input<inputs.SystemStandaloneclusterClusterpeerSessionSyncFilter>;
    syncId?: pulumi.Input<number>;
    syncvds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a SystemStandaloneclusterClusterpeer resource.
 */
export interface SystemStandaloneclusterClusterpeerArgs {
    deviceName?: pulumi.Input<string>;
    downIntfsBeforeSessSyncs?: pulumi.Input<pulumi.Input<string>[]>;
    hbInterval?: pulumi.Input<number>;
    hbLostThreshold?: pulumi.Input<number>;
    ikeHeartbeatInterval?: pulumi.Input<number>;
    ikeMonitor?: pulumi.Input<string>;
    ikeMonitorInterval?: pulumi.Input<number>;
    ikeUseRfc6311?: pulumi.Input<string>;
    ipsecTunnelSync?: pulumi.Input<string>;
    peerip?: pulumi.Input<string>;
    peervds?: pulumi.Input<pulumi.Input<string>[]>;
    secondaryAddIpsecRoutes?: pulumi.Input<string>;
    sessionSyncFilter?: pulumi.Input<inputs.SystemStandaloneclusterClusterpeerSessionSyncFilter>;
    syncId?: pulumi.Input<number>;
    syncvds?: pulumi.Input<pulumi.Input<string>[]>;
}
