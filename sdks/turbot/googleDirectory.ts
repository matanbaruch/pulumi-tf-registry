// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class GoogleDirectory extends pulumi.CustomResource {
    /**
     * Get an existing GoogleDirectory resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GoogleDirectoryState, opts?: pulumi.CustomResourceOptions): GoogleDirectory {
        return new GoogleDirectory(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'turbot:index/googleDirectory:GoogleDirectory';

    /**
     * Returns true if the given object is an instance of GoogleDirectory.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GoogleDirectory {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GoogleDirectory.__pulumiType;
    }

    public readonly clientId!: pulumi.Output<string>;
    public readonly clientSecret!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly directoryType!: pulumi.Output<string>;
    public readonly groupIdTemplate!: pulumi.Output<string | undefined>;
    public readonly hostedName!: pulumi.Output<string | undefined>;
    public /*out*/ readonly keyFingerprint!: pulumi.Output<string>;
    public readonly loginNameTemplate!: pulumi.Output<string | undefined>;
    public readonly parent!: pulumi.Output<string>;
    public /*out*/ readonly parentAkas!: pulumi.Output<string[]>;
    public readonly pgpKey!: pulumi.Output<string | undefined>;
    public readonly poolId!: pulumi.Output<string | undefined>;
    public readonly profileIdTemplate!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly title!: pulumi.Output<string>;

    /**
     * Create a GoogleDirectory resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GoogleDirectoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GoogleDirectoryArgs | GoogleDirectoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GoogleDirectoryState | undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["clientSecret"] = state ? state.clientSecret : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["directoryType"] = state ? state.directoryType : undefined;
            resourceInputs["groupIdTemplate"] = state ? state.groupIdTemplate : undefined;
            resourceInputs["hostedName"] = state ? state.hostedName : undefined;
            resourceInputs["keyFingerprint"] = state ? state.keyFingerprint : undefined;
            resourceInputs["loginNameTemplate"] = state ? state.loginNameTemplate : undefined;
            resourceInputs["parent"] = state ? state.parent : undefined;
            resourceInputs["parentAkas"] = state ? state.parentAkas : undefined;
            resourceInputs["pgpKey"] = state ? state.pgpKey : undefined;
            resourceInputs["poolId"] = state ? state.poolId : undefined;
            resourceInputs["profileIdTemplate"] = state ? state.profileIdTemplate : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
        } else {
            const args = argsOrState as GoogleDirectoryArgs | undefined;
            if ((!args || args.clientId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientId'");
            }
            if ((!args || args.clientSecret === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientSecret'");
            }
            if ((!args || args.parent === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parent'");
            }
            if ((!args || args.profileIdTemplate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'profileIdTemplate'");
            }
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["clientSecret"] = args ? args.clientSecret : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["groupIdTemplate"] = args ? args.groupIdTemplate : undefined;
            resourceInputs["hostedName"] = args ? args.hostedName : undefined;
            resourceInputs["loginNameTemplate"] = args ? args.loginNameTemplate : undefined;
            resourceInputs["parent"] = args ? args.parent : undefined;
            resourceInputs["pgpKey"] = args ? args.pgpKey : undefined;
            resourceInputs["poolId"] = args ? args.poolId : undefined;
            resourceInputs["profileIdTemplate"] = args ? args.profileIdTemplate : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["directoryType"] = undefined /*out*/;
            resourceInputs["keyFingerprint"] = undefined /*out*/;
            resourceInputs["parentAkas"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GoogleDirectory.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GoogleDirectory resources.
 */
export interface GoogleDirectoryState {
    clientId?: pulumi.Input<string>;
    clientSecret?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    directoryType?: pulumi.Input<string>;
    groupIdTemplate?: pulumi.Input<string>;
    hostedName?: pulumi.Input<string>;
    keyFingerprint?: pulumi.Input<string>;
    loginNameTemplate?: pulumi.Input<string>;
    parent?: pulumi.Input<string>;
    parentAkas?: pulumi.Input<pulumi.Input<string>[]>;
    pgpKey?: pulumi.Input<string>;
    poolId?: pulumi.Input<string>;
    profileIdTemplate?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    title?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GoogleDirectory resource.
 */
export interface GoogleDirectoryArgs {
    clientId: pulumi.Input<string>;
    clientSecret: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    groupIdTemplate?: pulumi.Input<string>;
    hostedName?: pulumi.Input<string>;
    loginNameTemplate?: pulumi.Input<string>;
    parent: pulumi.Input<string>;
    pgpKey?: pulumi.Input<string>;
    poolId?: pulumi.Input<string>;
    profileIdTemplate: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    title: pulumi.Input<string>;
}
