// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PolicySetting extends pulumi.CustomResource {
    /**
     * Get an existing PolicySetting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicySettingState, opts?: pulumi.CustomResourceOptions): PolicySetting {
        return new PolicySetting(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'turbot:index/policySetting:PolicySetting';

    /**
     * Returns true if the given object is an instance of PolicySetting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PolicySetting {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PolicySetting.__pulumiType;
    }

    public readonly note!: pulumi.Output<string | undefined>;
    public readonly pgpKey!: pulumi.Output<string | undefined>;
    public readonly precedence!: pulumi.Output<string | undefined>;
    public readonly resource!: pulumi.Output<string>;
    public /*out*/ readonly resourceAkas!: pulumi.Output<string[]>;
    public readonly template!: pulumi.Output<string | undefined>;
    public readonly templateInput!: pulumi.Output<string | undefined>;
    public readonly type!: pulumi.Output<string>;
    public readonly validFromTimestamp!: pulumi.Output<string | undefined>;
    public readonly validToTimestamp!: pulumi.Output<string | undefined>;
    public readonly value!: pulumi.Output<string | undefined>;
    public /*out*/ readonly valueKeyFingerprint!: pulumi.Output<string>;
    public /*out*/ readonly valueSource!: pulumi.Output<string>;
    public /*out*/ readonly valueSourceKeyFingerprint!: pulumi.Output<string>;
    public /*out*/ readonly valueSourceUsed!: pulumi.Output<boolean>;

    /**
     * Create a PolicySetting resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicySettingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicySettingArgs | PolicySettingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicySettingState | undefined;
            resourceInputs["note"] = state ? state.note : undefined;
            resourceInputs["pgpKey"] = state ? state.pgpKey : undefined;
            resourceInputs["precedence"] = state ? state.precedence : undefined;
            resourceInputs["resource"] = state ? state.resource : undefined;
            resourceInputs["resourceAkas"] = state ? state.resourceAkas : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["templateInput"] = state ? state.templateInput : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["validFromTimestamp"] = state ? state.validFromTimestamp : undefined;
            resourceInputs["validToTimestamp"] = state ? state.validToTimestamp : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
            resourceInputs["valueKeyFingerprint"] = state ? state.valueKeyFingerprint : undefined;
            resourceInputs["valueSource"] = state ? state.valueSource : undefined;
            resourceInputs["valueSourceKeyFingerprint"] = state ? state.valueSourceKeyFingerprint : undefined;
            resourceInputs["valueSourceUsed"] = state ? state.valueSourceUsed : undefined;
        } else {
            const args = argsOrState as PolicySettingArgs | undefined;
            if ((!args || args.resource === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resource'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["note"] = args ? args.note : undefined;
            resourceInputs["pgpKey"] = args ? args.pgpKey : undefined;
            resourceInputs["precedence"] = args ? args.precedence : undefined;
            resourceInputs["resource"] = args ? args.resource : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["templateInput"] = args ? args.templateInput : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["validFromTimestamp"] = args ? args.validFromTimestamp : undefined;
            resourceInputs["validToTimestamp"] = args ? args.validToTimestamp : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
            resourceInputs["resourceAkas"] = undefined /*out*/;
            resourceInputs["valueKeyFingerprint"] = undefined /*out*/;
            resourceInputs["valueSource"] = undefined /*out*/;
            resourceInputs["valueSourceKeyFingerprint"] = undefined /*out*/;
            resourceInputs["valueSourceUsed"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PolicySetting.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PolicySetting resources.
 */
export interface PolicySettingState {
    note?: pulumi.Input<string>;
    pgpKey?: pulumi.Input<string>;
    precedence?: pulumi.Input<string>;
    resource?: pulumi.Input<string>;
    resourceAkas?: pulumi.Input<pulumi.Input<string>[]>;
    template?: pulumi.Input<string>;
    templateInput?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    validFromTimestamp?: pulumi.Input<string>;
    validToTimestamp?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    valueKeyFingerprint?: pulumi.Input<string>;
    valueSource?: pulumi.Input<string>;
    valueSourceKeyFingerprint?: pulumi.Input<string>;
    valueSourceUsed?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a PolicySetting resource.
 */
export interface PolicySettingArgs {
    note?: pulumi.Input<string>;
    pgpKey?: pulumi.Input<string>;
    precedence?: pulumi.Input<string>;
    resource: pulumi.Input<string>;
    template?: pulumi.Input<string>;
    templateInput?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    validFromTimestamp?: pulumi.Input<string>;
    validToTimestamp?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}
