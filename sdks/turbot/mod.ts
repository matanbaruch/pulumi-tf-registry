// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Mod extends pulumi.CustomResource {
    /**
     * Get an existing Mod resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ModState, opts?: pulumi.CustomResourceOptions): Mod {
        return new Mod(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'turbot:index/mod:Mod';

    /**
     * Returns true if the given object is an instance of Mod.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Mod {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Mod.__pulumiType;
    }

    public readonly mod!: pulumi.Output<string>;
    public readonly org!: pulumi.Output<string>;
    public readonly parent!: pulumi.Output<string | undefined>;
    public /*out*/ readonly parentAkas!: pulumi.Output<string[]>;
    public readonly timeouts!: pulumi.Output<outputs.ModTimeouts | undefined>;
    public /*out*/ readonly uri!: pulumi.Output<string>;
    public readonly version!: pulumi.Output<string | undefined>;
    public /*out*/ readonly versionCurrent!: pulumi.Output<string>;
    public /*out*/ readonly versionLatest!: pulumi.Output<string>;

    /**
     * Create a Mod resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ModArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ModArgs | ModState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ModState | undefined;
            resourceInputs["mod"] = state ? state.mod : undefined;
            resourceInputs["org"] = state ? state.org : undefined;
            resourceInputs["parent"] = state ? state.parent : undefined;
            resourceInputs["parentAkas"] = state ? state.parentAkas : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["uri"] = state ? state.uri : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["versionCurrent"] = state ? state.versionCurrent : undefined;
            resourceInputs["versionLatest"] = state ? state.versionLatest : undefined;
        } else {
            const args = argsOrState as ModArgs | undefined;
            if ((!args || args.mod === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mod'");
            }
            if ((!args || args.org === undefined) && !opts.urn) {
                throw new Error("Missing required property 'org'");
            }
            resourceInputs["mod"] = args ? args.mod : undefined;
            resourceInputs["org"] = args ? args.org : undefined;
            resourceInputs["parent"] = args ? args.parent : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["parentAkas"] = undefined /*out*/;
            resourceInputs["uri"] = undefined /*out*/;
            resourceInputs["versionCurrent"] = undefined /*out*/;
            resourceInputs["versionLatest"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Mod.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Mod resources.
 */
export interface ModState {
    mod?: pulumi.Input<string>;
    org?: pulumi.Input<string>;
    parent?: pulumi.Input<string>;
    parentAkas?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.ModTimeouts>;
    uri?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
    versionCurrent?: pulumi.Input<string>;
    versionLatest?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Mod resource.
 */
export interface ModArgs {
    mod: pulumi.Input<string>;
    org: pulumi.Input<string>;
    parent?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ModTimeouts>;
    version?: pulumi.Input<string>;
}
