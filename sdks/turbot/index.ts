// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { FileArgs, FileState } from "./file";
export type File = import("./file").File;
export const File: typeof import("./file").File = null as any;
utilities.lazyLoad(exports, ["File"], () => require("./file"));

export { FolderArgs, FolderState } from "./folder";
export type Folder = import("./folder").Folder;
export const Folder: typeof import("./folder").Folder = null as any;
utilities.lazyLoad(exports, ["Folder"], () => require("./folder"));

export { GetControlArgs, GetControlResult, GetControlOutputArgs } from "./getControl";
export const getControl: typeof import("./getControl").getControl = null as any;
export const getControlOutput: typeof import("./getControl").getControlOutput = null as any;
utilities.lazyLoad(exports, ["getControl","getControlOutput"], () => require("./getControl"));

export { GetPolicyValueArgs, GetPolicyValueResult, GetPolicyValueOutputArgs } from "./getPolicyValue";
export const getPolicyValue: typeof import("./getPolicyValue").getPolicyValue = null as any;
export const getPolicyValueOutput: typeof import("./getPolicyValue").getPolicyValueOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyValue","getPolicyValueOutput"], () => require("./getPolicyValue"));

export { GetResourceArgs, GetResourceResult, GetResourceOutputArgs } from "./getResource";
export const getResource: typeof import("./getResource").getResource = null as any;
export const getResourceOutput: typeof import("./getResource").getResourceOutput = null as any;
utilities.lazyLoad(exports, ["getResource","getResourceOutput"], () => require("./getResource"));

export { GoogleDirectoryArgs, GoogleDirectoryState } from "./googleDirectory";
export type GoogleDirectory = import("./googleDirectory").GoogleDirectory;
export const GoogleDirectory: typeof import("./googleDirectory").GoogleDirectory = null as any;
utilities.lazyLoad(exports, ["GoogleDirectory"], () => require("./googleDirectory"));

export { GrantArgs, GrantState } from "./grant";
export type Grant = import("./grant").Grant;
export const Grant: typeof import("./grant").Grant = null as any;
utilities.lazyLoad(exports, ["Grant"], () => require("./grant"));

export { GrantActivationArgs, GrantActivationState } from "./grantActivation";
export type GrantActivation = import("./grantActivation").GrantActivation;
export const GrantActivation: typeof import("./grantActivation").GrantActivation = null as any;
utilities.lazyLoad(exports, ["GrantActivation"], () => require("./grantActivation"));

export { LdapDirectoryArgs, LdapDirectoryState } from "./ldapDirectory";
export type LdapDirectory = import("./ldapDirectory").LdapDirectory;
export const LdapDirectory: typeof import("./ldapDirectory").LdapDirectory = null as any;
utilities.lazyLoad(exports, ["LdapDirectory"], () => require("./ldapDirectory"));

export { LocalDirectoryArgs, LocalDirectoryState } from "./localDirectory";
export type LocalDirectory = import("./localDirectory").LocalDirectory;
export const LocalDirectory: typeof import("./localDirectory").LocalDirectory = null as any;
utilities.lazyLoad(exports, ["LocalDirectory"], () => require("./localDirectory"));

export { LocalDirectoryUserArgs, LocalDirectoryUserState } from "./localDirectoryUser";
export type LocalDirectoryUser = import("./localDirectoryUser").LocalDirectoryUser;
export const LocalDirectoryUser: typeof import("./localDirectoryUser").LocalDirectoryUser = null as any;
utilities.lazyLoad(exports, ["LocalDirectoryUser"], () => require("./localDirectoryUser"));

export { ModArgs, ModState } from "./mod";
export type Mod = import("./mod").Mod;
export const Mod: typeof import("./mod").Mod = null as any;
utilities.lazyLoad(exports, ["Mod"], () => require("./mod"));

export { PolicyPackArgs, PolicyPackState } from "./policyPack";
export type PolicyPack = import("./policyPack").PolicyPack;
export const PolicyPack: typeof import("./policyPack").PolicyPack = null as any;
utilities.lazyLoad(exports, ["PolicyPack"], () => require("./policyPack"));

export { PolicyPackAttachmentArgs, PolicyPackAttachmentState } from "./policyPackAttachment";
export type PolicyPackAttachment = import("./policyPackAttachment").PolicyPackAttachment;
export const PolicyPackAttachment: typeof import("./policyPackAttachment").PolicyPackAttachment = null as any;
utilities.lazyLoad(exports, ["PolicyPackAttachment"], () => require("./policyPackAttachment"));

export { PolicySettingArgs, PolicySettingState } from "./policySetting";
export type PolicySetting = import("./policySetting").PolicySetting;
export const PolicySetting: typeof import("./policySetting").PolicySetting = null as any;
utilities.lazyLoad(exports, ["PolicySetting"], () => require("./policySetting"));

export { ProfileArgs, ProfileState } from "./profile";
export type Profile = import("./profile").Profile;
export const Profile: typeof import("./profile").Profile = null as any;
utilities.lazyLoad(exports, ["Profile"], () => require("./profile"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ResourceArgs, ResourceState } from "./resource";
export type Resource = import("./resource").Resource;
export const Resource: typeof import("./resource").Resource = null as any;
utilities.lazyLoad(exports, ["Resource"], () => require("./resource"));

export { SamlDirectoryArgs, SamlDirectoryState } from "./samlDirectory";
export type SamlDirectory = import("./samlDirectory").SamlDirectory;
export const SamlDirectory: typeof import("./samlDirectory").SamlDirectory = null as any;
utilities.lazyLoad(exports, ["SamlDirectory"], () => require("./samlDirectory"));

export { ShadowResourceArgs, ShadowResourceState } from "./shadowResource";
export type ShadowResource = import("./shadowResource").ShadowResource;
export const ShadowResource: typeof import("./shadowResource").ShadowResource = null as any;
utilities.lazyLoad(exports, ["ShadowResource"], () => require("./shadowResource"));

export { SmartFolderArgs, SmartFolderState } from "./smartFolder";
export type SmartFolder = import("./smartFolder").SmartFolder;
export const SmartFolder: typeof import("./smartFolder").SmartFolder = null as any;
utilities.lazyLoad(exports, ["SmartFolder"], () => require("./smartFolder"));

export { SmartFolderAttachmentArgs, SmartFolderAttachmentState } from "./smartFolderAttachment";
export type SmartFolderAttachment = import("./smartFolderAttachment").SmartFolderAttachment;
export const SmartFolderAttachment: typeof import("./smartFolderAttachment").SmartFolderAttachment = null as any;
utilities.lazyLoad(exports, ["SmartFolderAttachment"], () => require("./smartFolderAttachment"));

export { TurbotDirectoryArgs, TurbotDirectoryState } from "./turbotDirectory";
export type TurbotDirectory = import("./turbotDirectory").TurbotDirectory;
export const TurbotDirectory: typeof import("./turbotDirectory").TurbotDirectory = null as any;
utilities.lazyLoad(exports, ["TurbotDirectory"], () => require("./turbotDirectory"));

export { WatchArgs, WatchState } from "./watch";
export type Watch = import("./watch").Watch;
export const Watch: typeof import("./watch").Watch = null as any;
utilities.lazyLoad(exports, ["Watch"], () => require("./watch"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "turbot:index/file:File":
                return new File(name, <any>undefined, { urn })
            case "turbot:index/folder:Folder":
                return new Folder(name, <any>undefined, { urn })
            case "turbot:index/googleDirectory:GoogleDirectory":
                return new GoogleDirectory(name, <any>undefined, { urn })
            case "turbot:index/grant:Grant":
                return new Grant(name, <any>undefined, { urn })
            case "turbot:index/grantActivation:GrantActivation":
                return new GrantActivation(name, <any>undefined, { urn })
            case "turbot:index/ldapDirectory:LdapDirectory":
                return new LdapDirectory(name, <any>undefined, { urn })
            case "turbot:index/localDirectory:LocalDirectory":
                return new LocalDirectory(name, <any>undefined, { urn })
            case "turbot:index/localDirectoryUser:LocalDirectoryUser":
                return new LocalDirectoryUser(name, <any>undefined, { urn })
            case "turbot:index/mod:Mod":
                return new Mod(name, <any>undefined, { urn })
            case "turbot:index/policyPack:PolicyPack":
                return new PolicyPack(name, <any>undefined, { urn })
            case "turbot:index/policyPackAttachment:PolicyPackAttachment":
                return new PolicyPackAttachment(name, <any>undefined, { urn })
            case "turbot:index/policySetting:PolicySetting":
                return new PolicySetting(name, <any>undefined, { urn })
            case "turbot:index/profile:Profile":
                return new Profile(name, <any>undefined, { urn })
            case "turbot:index/resource:Resource":
                return new Resource(name, <any>undefined, { urn })
            case "turbot:index/samlDirectory:SamlDirectory":
                return new SamlDirectory(name, <any>undefined, { urn })
            case "turbot:index/shadowResource:ShadowResource":
                return new ShadowResource(name, <any>undefined, { urn })
            case "turbot:index/smartFolder:SmartFolder":
                return new SmartFolder(name, <any>undefined, { urn })
            case "turbot:index/smartFolderAttachment:SmartFolderAttachment":
                return new SmartFolderAttachment(name, <any>undefined, { urn })
            case "turbot:index/turbotDirectory:TurbotDirectory":
                return new TurbotDirectory(name, <any>undefined, { urn })
            case "turbot:index/watch:Watch":
                return new Watch(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("turbot", "index/file", _module)
pulumi.runtime.registerResourceModule("turbot", "index/folder", _module)
pulumi.runtime.registerResourceModule("turbot", "index/googleDirectory", _module)
pulumi.runtime.registerResourceModule("turbot", "index/grant", _module)
pulumi.runtime.registerResourceModule("turbot", "index/grantActivation", _module)
pulumi.runtime.registerResourceModule("turbot", "index/ldapDirectory", _module)
pulumi.runtime.registerResourceModule("turbot", "index/localDirectory", _module)
pulumi.runtime.registerResourceModule("turbot", "index/localDirectoryUser", _module)
pulumi.runtime.registerResourceModule("turbot", "index/mod", _module)
pulumi.runtime.registerResourceModule("turbot", "index/policyPack", _module)
pulumi.runtime.registerResourceModule("turbot", "index/policyPackAttachment", _module)
pulumi.runtime.registerResourceModule("turbot", "index/policySetting", _module)
pulumi.runtime.registerResourceModule("turbot", "index/profile", _module)
pulumi.runtime.registerResourceModule("turbot", "index/resource", _module)
pulumi.runtime.registerResourceModule("turbot", "index/samlDirectory", _module)
pulumi.runtime.registerResourceModule("turbot", "index/shadowResource", _module)
pulumi.runtime.registerResourceModule("turbot", "index/smartFolder", _module)
pulumi.runtime.registerResourceModule("turbot", "index/smartFolderAttachment", _module)
pulumi.runtime.registerResourceModule("turbot", "index/turbotDirectory", _module)
pulumi.runtime.registerResourceModule("turbot", "index/watch", _module)
pulumi.runtime.registerResourcePackage("turbot", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:turbot") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
