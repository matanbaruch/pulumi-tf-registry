// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Connector extends pulumi.CustomResource {
    /**
     * Get an existing Connector resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectorState, opts?: pulumi.CustomResourceOptions): Connector {
        return new Connector(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ilert:index/connector:Connector';

    /**
     * Returns true if the given object is an instance of Connector.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Connector {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Connector.__pulumiType;
    }

    public readonly autotask!: pulumi.Output<outputs.ConnectorAutotask | undefined>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly dingtalk!: pulumi.Output<outputs.ConnectorDingtalk | undefined>;
    public readonly discord!: pulumi.Output<outputs.ConnectorDiscord | undefined>;
    public readonly github!: pulumi.Output<outputs.ConnectorGithub | undefined>;
    public readonly jira!: pulumi.Output<outputs.ConnectorJira | undefined>;
    public readonly mattermost!: pulumi.Output<outputs.ConnectorMattermost | undefined>;
    public readonly microsoftTeams!: pulumi.Output<outputs.ConnectorMicrosoftTeams | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly servicenow!: pulumi.Output<outputs.ConnectorServicenow | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ConnectorTimeouts | undefined>;
    public readonly topdesk!: pulumi.Output<outputs.ConnectorTopdesk | undefined>;
    public readonly type!: pulumi.Output<string>;
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    public readonly zammad!: pulumi.Output<outputs.ConnectorZammad | undefined>;
    public readonly zendesk!: pulumi.Output<outputs.ConnectorZendesk | undefined>;

    /**
     * Create a Connector resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectorArgs | ConnectorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectorState | undefined;
            resourceInputs["autotask"] = state ? state.autotask : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["dingtalk"] = state ? state.dingtalk : undefined;
            resourceInputs["discord"] = state ? state.discord : undefined;
            resourceInputs["github"] = state ? state.github : undefined;
            resourceInputs["jira"] = state ? state.jira : undefined;
            resourceInputs["mattermost"] = state ? state.mattermost : undefined;
            resourceInputs["microsoftTeams"] = state ? state.microsoftTeams : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["servicenow"] = state ? state.servicenow : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["topdesk"] = state ? state.topdesk : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["zammad"] = state ? state.zammad : undefined;
            resourceInputs["zendesk"] = state ? state.zendesk : undefined;
        } else {
            const args = argsOrState as ConnectorArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["autotask"] = args ? args.autotask : undefined;
            resourceInputs["dingtalk"] = args ? args.dingtalk : undefined;
            resourceInputs["discord"] = args ? args.discord : undefined;
            resourceInputs["github"] = args ? args.github : undefined;
            resourceInputs["jira"] = args ? args.jira : undefined;
            resourceInputs["mattermost"] = args ? args.mattermost : undefined;
            resourceInputs["microsoftTeams"] = args ? args.microsoftTeams : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["servicenow"] = args ? args.servicenow : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["topdesk"] = args ? args.topdesk : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["zammad"] = args ? args.zammad : undefined;
            resourceInputs["zendesk"] = args ? args.zendesk : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Connector.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Connector resources.
 */
export interface ConnectorState {
    autotask?: pulumi.Input<inputs.ConnectorAutotask>;
    createdAt?: pulumi.Input<string>;
    dingtalk?: pulumi.Input<inputs.ConnectorDingtalk>;
    discord?: pulumi.Input<inputs.ConnectorDiscord>;
    github?: pulumi.Input<inputs.ConnectorGithub>;
    jira?: pulumi.Input<inputs.ConnectorJira>;
    mattermost?: pulumi.Input<inputs.ConnectorMattermost>;
    microsoftTeams?: pulumi.Input<inputs.ConnectorMicrosoftTeams>;
    name?: pulumi.Input<string>;
    servicenow?: pulumi.Input<inputs.ConnectorServicenow>;
    timeouts?: pulumi.Input<inputs.ConnectorTimeouts>;
    topdesk?: pulumi.Input<inputs.ConnectorTopdesk>;
    type?: pulumi.Input<string>;
    updatedAt?: pulumi.Input<string>;
    zammad?: pulumi.Input<inputs.ConnectorZammad>;
    zendesk?: pulumi.Input<inputs.ConnectorZendesk>;
}

/**
 * The set of arguments for constructing a Connector resource.
 */
export interface ConnectorArgs {
    autotask?: pulumi.Input<inputs.ConnectorAutotask>;
    dingtalk?: pulumi.Input<inputs.ConnectorDingtalk>;
    discord?: pulumi.Input<inputs.ConnectorDiscord>;
    github?: pulumi.Input<inputs.ConnectorGithub>;
    jira?: pulumi.Input<inputs.ConnectorJira>;
    mattermost?: pulumi.Input<inputs.ConnectorMattermost>;
    microsoftTeams?: pulumi.Input<inputs.ConnectorMicrosoftTeams>;
    name?: pulumi.Input<string>;
    servicenow?: pulumi.Input<inputs.ConnectorServicenow>;
    timeouts?: pulumi.Input<inputs.ConnectorTimeouts>;
    topdesk?: pulumi.Input<inputs.ConnectorTopdesk>;
    type: pulumi.Input<string>;
    zammad?: pulumi.Input<inputs.ConnectorZammad>;
    zendesk?: pulumi.Input<inputs.ConnectorZendesk>;
}
