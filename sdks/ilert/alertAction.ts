// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AlertAction extends pulumi.CustomResource {
    /**
     * Get an existing AlertAction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlertActionState, opts?: pulumi.CustomResourceOptions): AlertAction {
        return new AlertAction(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ilert:index/alertAction:AlertAction';

    /**
     * Returns true if the given object is an instance of AlertAction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AlertAction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlertAction.__pulumiType;
    }

    public readonly alertFilter!: pulumi.Output<outputs.AlertActionAlertFilter | undefined>;
    public readonly alertSources!: pulumi.Output<outputs.AlertActionAlertSource[]>;
    public readonly automationRule!: pulumi.Output<outputs.AlertActionAutomationRule | undefined>;
    public readonly autotask!: pulumi.Output<outputs.AlertActionAutotask | undefined>;
    public readonly connector!: pulumi.Output<outputs.AlertActionConnector>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly delaySec!: pulumi.Output<number | undefined>;
    public readonly dingtalk!: pulumi.Output<outputs.AlertActionDingtalk | undefined>;
    public readonly dingtalkAction!: pulumi.Output<outputs.AlertActionDingtalkAction | undefined>;
    public readonly email!: pulumi.Output<outputs.AlertActionEmail | undefined>;
    public readonly escalationEndedDelaySec!: pulumi.Output<number | undefined>;
    public readonly github!: pulumi.Output<outputs.AlertActionGithub | undefined>;
    public readonly jira!: pulumi.Output<outputs.AlertActionJira | undefined>;
    public readonly microsoftTeamsBot!: pulumi.Output<outputs.AlertActionMicrosoftTeamsBot | undefined>;
    public readonly microsoftTeamsWebhook!: pulumi.Output<outputs.AlertActionMicrosoftTeamsWebhook | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly notResolvedDelaySec!: pulumi.Output<number | undefined>;
    public readonly servicenow!: pulumi.Output<outputs.AlertActionServicenow | undefined>;
    public readonly slack!: pulumi.Output<outputs.AlertActionSlack | undefined>;
    public readonly slackWebhook!: pulumi.Output<outputs.AlertActionSlackWebhook | undefined>;
    public readonly teams!: pulumi.Output<outputs.AlertActionTeam[] | undefined>;
    public readonly telegram!: pulumi.Output<outputs.AlertActionTelegram | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.AlertActionTimeouts | undefined>;
    public readonly topdesk!: pulumi.Output<outputs.AlertActionTopdesk | undefined>;
    public readonly triggerMode!: pulumi.Output<string | undefined>;
    public readonly triggerTypes!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    public readonly webhook!: pulumi.Output<outputs.AlertActionWebhook | undefined>;
    public readonly zammad!: pulumi.Output<outputs.AlertActionZammad | undefined>;
    public readonly zendesk!: pulumi.Output<outputs.AlertActionZendesk | undefined>;

    /**
     * Create a AlertAction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlertActionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlertActionArgs | AlertActionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlertActionState | undefined;
            resourceInputs["alertFilter"] = state ? state.alertFilter : undefined;
            resourceInputs["alertSources"] = state ? state.alertSources : undefined;
            resourceInputs["automationRule"] = state ? state.automationRule : undefined;
            resourceInputs["autotask"] = state ? state.autotask : undefined;
            resourceInputs["connector"] = state ? state.connector : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["delaySec"] = state ? state.delaySec : undefined;
            resourceInputs["dingtalk"] = state ? state.dingtalk : undefined;
            resourceInputs["dingtalkAction"] = state ? state.dingtalkAction : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["escalationEndedDelaySec"] = state ? state.escalationEndedDelaySec : undefined;
            resourceInputs["github"] = state ? state.github : undefined;
            resourceInputs["jira"] = state ? state.jira : undefined;
            resourceInputs["microsoftTeamsBot"] = state ? state.microsoftTeamsBot : undefined;
            resourceInputs["microsoftTeamsWebhook"] = state ? state.microsoftTeamsWebhook : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notResolvedDelaySec"] = state ? state.notResolvedDelaySec : undefined;
            resourceInputs["servicenow"] = state ? state.servicenow : undefined;
            resourceInputs["slack"] = state ? state.slack : undefined;
            resourceInputs["slackWebhook"] = state ? state.slackWebhook : undefined;
            resourceInputs["teams"] = state ? state.teams : undefined;
            resourceInputs["telegram"] = state ? state.telegram : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["topdesk"] = state ? state.topdesk : undefined;
            resourceInputs["triggerMode"] = state ? state.triggerMode : undefined;
            resourceInputs["triggerTypes"] = state ? state.triggerTypes : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["webhook"] = state ? state.webhook : undefined;
            resourceInputs["zammad"] = state ? state.zammad : undefined;
            resourceInputs["zendesk"] = state ? state.zendesk : undefined;
        } else {
            const args = argsOrState as AlertActionArgs | undefined;
            if ((!args || args.alertSources === undefined) && !opts.urn) {
                throw new Error("Missing required property 'alertSources'");
            }
            if ((!args || args.connector === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connector'");
            }
            resourceInputs["alertFilter"] = args ? args.alertFilter : undefined;
            resourceInputs["alertSources"] = args ? args.alertSources : undefined;
            resourceInputs["automationRule"] = args ? args.automationRule : undefined;
            resourceInputs["autotask"] = args ? args.autotask : undefined;
            resourceInputs["connector"] = args ? args.connector : undefined;
            resourceInputs["delaySec"] = args ? args.delaySec : undefined;
            resourceInputs["dingtalk"] = args ? args.dingtalk : undefined;
            resourceInputs["dingtalkAction"] = args ? args.dingtalkAction : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["escalationEndedDelaySec"] = args ? args.escalationEndedDelaySec : undefined;
            resourceInputs["github"] = args ? args.github : undefined;
            resourceInputs["jira"] = args ? args.jira : undefined;
            resourceInputs["microsoftTeamsBot"] = args ? args.microsoftTeamsBot : undefined;
            resourceInputs["microsoftTeamsWebhook"] = args ? args.microsoftTeamsWebhook : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notResolvedDelaySec"] = args ? args.notResolvedDelaySec : undefined;
            resourceInputs["servicenow"] = args ? args.servicenow : undefined;
            resourceInputs["slack"] = args ? args.slack : undefined;
            resourceInputs["slackWebhook"] = args ? args.slackWebhook : undefined;
            resourceInputs["teams"] = args ? args.teams : undefined;
            resourceInputs["telegram"] = args ? args.telegram : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["topdesk"] = args ? args.topdesk : undefined;
            resourceInputs["triggerMode"] = args ? args.triggerMode : undefined;
            resourceInputs["triggerTypes"] = args ? args.triggerTypes : undefined;
            resourceInputs["webhook"] = args ? args.webhook : undefined;
            resourceInputs["zammad"] = args ? args.zammad : undefined;
            resourceInputs["zendesk"] = args ? args.zendesk : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AlertAction.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AlertAction resources.
 */
export interface AlertActionState {
    alertFilter?: pulumi.Input<inputs.AlertActionAlertFilter>;
    alertSources?: pulumi.Input<pulumi.Input<inputs.AlertActionAlertSource>[]>;
    automationRule?: pulumi.Input<inputs.AlertActionAutomationRule>;
    autotask?: pulumi.Input<inputs.AlertActionAutotask>;
    connector?: pulumi.Input<inputs.AlertActionConnector>;
    createdAt?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    delaySec?: pulumi.Input<number>;
    dingtalk?: pulumi.Input<inputs.AlertActionDingtalk>;
    dingtalkAction?: pulumi.Input<inputs.AlertActionDingtalkAction>;
    email?: pulumi.Input<inputs.AlertActionEmail>;
    escalationEndedDelaySec?: pulumi.Input<number>;
    github?: pulumi.Input<inputs.AlertActionGithub>;
    jira?: pulumi.Input<inputs.AlertActionJira>;
    microsoftTeamsBot?: pulumi.Input<inputs.AlertActionMicrosoftTeamsBot>;
    microsoftTeamsWebhook?: pulumi.Input<inputs.AlertActionMicrosoftTeamsWebhook>;
    name?: pulumi.Input<string>;
    notResolvedDelaySec?: pulumi.Input<number>;
    servicenow?: pulumi.Input<inputs.AlertActionServicenow>;
    slack?: pulumi.Input<inputs.AlertActionSlack>;
    slackWebhook?: pulumi.Input<inputs.AlertActionSlackWebhook>;
    teams?: pulumi.Input<pulumi.Input<inputs.AlertActionTeam>[]>;
    telegram?: pulumi.Input<inputs.AlertActionTelegram>;
    timeouts?: pulumi.Input<inputs.AlertActionTimeouts>;
    topdesk?: pulumi.Input<inputs.AlertActionTopdesk>;
    triggerMode?: pulumi.Input<string>;
    triggerTypes?: pulumi.Input<pulumi.Input<string>[]>;
    updatedAt?: pulumi.Input<string>;
    webhook?: pulumi.Input<inputs.AlertActionWebhook>;
    zammad?: pulumi.Input<inputs.AlertActionZammad>;
    zendesk?: pulumi.Input<inputs.AlertActionZendesk>;
}

/**
 * The set of arguments for constructing a AlertAction resource.
 */
export interface AlertActionArgs {
    alertFilter?: pulumi.Input<inputs.AlertActionAlertFilter>;
    alertSources: pulumi.Input<pulumi.Input<inputs.AlertActionAlertSource>[]>;
    automationRule?: pulumi.Input<inputs.AlertActionAutomationRule>;
    autotask?: pulumi.Input<inputs.AlertActionAutotask>;
    connector: pulumi.Input<inputs.AlertActionConnector>;
    /**
     * @deprecated Deprecated
     */
    delaySec?: pulumi.Input<number>;
    dingtalk?: pulumi.Input<inputs.AlertActionDingtalk>;
    dingtalkAction?: pulumi.Input<inputs.AlertActionDingtalkAction>;
    email?: pulumi.Input<inputs.AlertActionEmail>;
    escalationEndedDelaySec?: pulumi.Input<number>;
    github?: pulumi.Input<inputs.AlertActionGithub>;
    jira?: pulumi.Input<inputs.AlertActionJira>;
    microsoftTeamsBot?: pulumi.Input<inputs.AlertActionMicrosoftTeamsBot>;
    microsoftTeamsWebhook?: pulumi.Input<inputs.AlertActionMicrosoftTeamsWebhook>;
    name?: pulumi.Input<string>;
    notResolvedDelaySec?: pulumi.Input<number>;
    servicenow?: pulumi.Input<inputs.AlertActionServicenow>;
    slack?: pulumi.Input<inputs.AlertActionSlack>;
    slackWebhook?: pulumi.Input<inputs.AlertActionSlackWebhook>;
    teams?: pulumi.Input<pulumi.Input<inputs.AlertActionTeam>[]>;
    telegram?: pulumi.Input<inputs.AlertActionTelegram>;
    timeouts?: pulumi.Input<inputs.AlertActionTimeouts>;
    topdesk?: pulumi.Input<inputs.AlertActionTopdesk>;
    triggerMode?: pulumi.Input<string>;
    triggerTypes?: pulumi.Input<pulumi.Input<string>[]>;
    webhook?: pulumi.Input<inputs.AlertActionWebhook>;
    zammad?: pulumi.Input<inputs.AlertActionZammad>;
    zendesk?: pulumi.Input<inputs.AlertActionZendesk>;
}
