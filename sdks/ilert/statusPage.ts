// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class StatusPage extends pulumi.CustomResource {
    /**
     * Get an existing StatusPage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StatusPageState, opts?: pulumi.CustomResourceOptions): StatusPage {
        return new StatusPage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ilert:index/statusPage:StatusPage';

    /**
     * Returns true if the given object is an instance of StatusPage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StatusPage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StatusPage.__pulumiType;
    }

    public readonly accountWideView!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly activated!: pulumi.Output<boolean>;
    public readonly announcement!: pulumi.Output<string | undefined>;
    public readonly announcementInWidget!: pulumi.Output<boolean | undefined>;
    public readonly announcementOnPage!: pulumi.Output<boolean | undefined>;
    public readonly appearance!: pulumi.Output<string | undefined>;
    /**
     * Don't use this field yet.
     */
    public readonly customCss!: pulumi.Output<string | undefined>;
    public readonly domain!: pulumi.Output<string | undefined>;
    public readonly emailWhitelists!: pulumi.Output<string[] | undefined>;
    public readonly faviconUrl!: pulumi.Output<string | undefined>;
    public readonly hiddenFromSearch!: pulumi.Output<boolean | undefined>;
    public readonly ipWhitelists!: pulumi.Output<string[] | undefined>;
    public readonly logoRedirectUrl!: pulumi.Output<string | undefined>;
    public readonly logoUrl!: pulumi.Output<string | undefined>;
    public readonly metrics!: pulumi.Output<outputs.StatusPageMetric[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly pageDescription!: pulumi.Output<string | undefined>;
    public readonly pageLayout!: pulumi.Output<string | undefined>;
    public readonly pageTitle!: pulumi.Output<string | undefined>;
    public readonly services!: pulumi.Output<outputs.StatusPageService[]>;
    public readonly showIncidentHistoryOption!: pulumi.Output<boolean | undefined>;
    public readonly showSubscribeAction!: pulumi.Output<boolean | undefined>;
    public readonly structure!: pulumi.Output<outputs.StatusPageStructure | undefined>;
    public readonly subdomain!: pulumi.Output<string>;
    public readonly teams!: pulumi.Output<outputs.StatusPageTeam[] | undefined>;
    /**
     * Please use `appearance` instead.
     */
    public readonly themeMode!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.StatusPageTimeouts | undefined>;
    public readonly timezone!: pulumi.Output<string | undefined>;
    public readonly visibility!: pulumi.Output<string>;

    /**
     * Create a StatusPage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StatusPageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StatusPageArgs | StatusPageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StatusPageState | undefined;
            resourceInputs["accountWideView"] = state ? state.accountWideView : undefined;
            resourceInputs["activated"] = state ? state.activated : undefined;
            resourceInputs["announcement"] = state ? state.announcement : undefined;
            resourceInputs["announcementInWidget"] = state ? state.announcementInWidget : undefined;
            resourceInputs["announcementOnPage"] = state ? state.announcementOnPage : undefined;
            resourceInputs["appearance"] = state ? state.appearance : undefined;
            resourceInputs["customCss"] = state ? state.customCss : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["emailWhitelists"] = state ? state.emailWhitelists : undefined;
            resourceInputs["faviconUrl"] = state ? state.faviconUrl : undefined;
            resourceInputs["hiddenFromSearch"] = state ? state.hiddenFromSearch : undefined;
            resourceInputs["ipWhitelists"] = state ? state.ipWhitelists : undefined;
            resourceInputs["logoRedirectUrl"] = state ? state.logoRedirectUrl : undefined;
            resourceInputs["logoUrl"] = state ? state.logoUrl : undefined;
            resourceInputs["metrics"] = state ? state.metrics : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pageDescription"] = state ? state.pageDescription : undefined;
            resourceInputs["pageLayout"] = state ? state.pageLayout : undefined;
            resourceInputs["pageTitle"] = state ? state.pageTitle : undefined;
            resourceInputs["services"] = state ? state.services : undefined;
            resourceInputs["showIncidentHistoryOption"] = state ? state.showIncidentHistoryOption : undefined;
            resourceInputs["showSubscribeAction"] = state ? state.showSubscribeAction : undefined;
            resourceInputs["structure"] = state ? state.structure : undefined;
            resourceInputs["subdomain"] = state ? state.subdomain : undefined;
            resourceInputs["teams"] = state ? state.teams : undefined;
            resourceInputs["themeMode"] = state ? state.themeMode : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["timezone"] = state ? state.timezone : undefined;
            resourceInputs["visibility"] = state ? state.visibility : undefined;
        } else {
            const args = argsOrState as StatusPageArgs | undefined;
            if ((!args || args.services === undefined) && !opts.urn) {
                throw new Error("Missing required property 'services'");
            }
            if ((!args || args.subdomain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subdomain'");
            }
            if ((!args || args.visibility === undefined) && !opts.urn) {
                throw new Error("Missing required property 'visibility'");
            }
            resourceInputs["accountWideView"] = args ? args.accountWideView : undefined;
            resourceInputs["announcement"] = args ? args.announcement : undefined;
            resourceInputs["announcementInWidget"] = args ? args.announcementInWidget : undefined;
            resourceInputs["announcementOnPage"] = args ? args.announcementOnPage : undefined;
            resourceInputs["appearance"] = args ? args.appearance : undefined;
            resourceInputs["customCss"] = args ? args.customCss : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["emailWhitelists"] = args ? args.emailWhitelists : undefined;
            resourceInputs["faviconUrl"] = args ? args.faviconUrl : undefined;
            resourceInputs["hiddenFromSearch"] = args ? args.hiddenFromSearch : undefined;
            resourceInputs["ipWhitelists"] = args ? args.ipWhitelists : undefined;
            resourceInputs["logoRedirectUrl"] = args ? args.logoRedirectUrl : undefined;
            resourceInputs["logoUrl"] = args ? args.logoUrl : undefined;
            resourceInputs["metrics"] = args ? args.metrics : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pageDescription"] = args ? args.pageDescription : undefined;
            resourceInputs["pageLayout"] = args ? args.pageLayout : undefined;
            resourceInputs["pageTitle"] = args ? args.pageTitle : undefined;
            resourceInputs["services"] = args ? args.services : undefined;
            resourceInputs["showIncidentHistoryOption"] = args ? args.showIncidentHistoryOption : undefined;
            resourceInputs["showSubscribeAction"] = args ? args.showSubscribeAction : undefined;
            resourceInputs["structure"] = args ? args.structure : undefined;
            resourceInputs["subdomain"] = args ? args.subdomain : undefined;
            resourceInputs["teams"] = args ? args.teams : undefined;
            resourceInputs["themeMode"] = args ? args.themeMode : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["timezone"] = args ? args.timezone : undefined;
            resourceInputs["visibility"] = args ? args.visibility : undefined;
            resourceInputs["activated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StatusPage.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StatusPage resources.
 */
export interface StatusPageState {
    accountWideView?: pulumi.Input<boolean>;
    activated?: pulumi.Input<boolean>;
    announcement?: pulumi.Input<string>;
    announcementInWidget?: pulumi.Input<boolean>;
    announcementOnPage?: pulumi.Input<boolean>;
    appearance?: pulumi.Input<string>;
    /**
     * Don't use this field yet.
     */
    customCss?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    emailWhitelists?: pulumi.Input<pulumi.Input<string>[]>;
    faviconUrl?: pulumi.Input<string>;
    hiddenFromSearch?: pulumi.Input<boolean>;
    ipWhitelists?: pulumi.Input<pulumi.Input<string>[]>;
    logoRedirectUrl?: pulumi.Input<string>;
    logoUrl?: pulumi.Input<string>;
    metrics?: pulumi.Input<pulumi.Input<inputs.StatusPageMetric>[]>;
    name?: pulumi.Input<string>;
    pageDescription?: pulumi.Input<string>;
    pageLayout?: pulumi.Input<string>;
    pageTitle?: pulumi.Input<string>;
    services?: pulumi.Input<pulumi.Input<inputs.StatusPageService>[]>;
    showIncidentHistoryOption?: pulumi.Input<boolean>;
    showSubscribeAction?: pulumi.Input<boolean>;
    structure?: pulumi.Input<inputs.StatusPageStructure>;
    subdomain?: pulumi.Input<string>;
    teams?: pulumi.Input<pulumi.Input<inputs.StatusPageTeam>[]>;
    /**
     * Please use `appearance` instead.
     */
    themeMode?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.StatusPageTimeouts>;
    timezone?: pulumi.Input<string>;
    visibility?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StatusPage resource.
 */
export interface StatusPageArgs {
    accountWideView?: pulumi.Input<boolean>;
    announcement?: pulumi.Input<string>;
    announcementInWidget?: pulumi.Input<boolean>;
    announcementOnPage?: pulumi.Input<boolean>;
    appearance?: pulumi.Input<string>;
    /**
     * Don't use this field yet.
     */
    customCss?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    emailWhitelists?: pulumi.Input<pulumi.Input<string>[]>;
    faviconUrl?: pulumi.Input<string>;
    hiddenFromSearch?: pulumi.Input<boolean>;
    ipWhitelists?: pulumi.Input<pulumi.Input<string>[]>;
    logoRedirectUrl?: pulumi.Input<string>;
    logoUrl?: pulumi.Input<string>;
    metrics?: pulumi.Input<pulumi.Input<inputs.StatusPageMetric>[]>;
    name?: pulumi.Input<string>;
    pageDescription?: pulumi.Input<string>;
    pageLayout?: pulumi.Input<string>;
    pageTitle?: pulumi.Input<string>;
    services: pulumi.Input<pulumi.Input<inputs.StatusPageService>[]>;
    showIncidentHistoryOption?: pulumi.Input<boolean>;
    showSubscribeAction?: pulumi.Input<boolean>;
    structure?: pulumi.Input<inputs.StatusPageStructure>;
    subdomain: pulumi.Input<string>;
    teams?: pulumi.Input<pulumi.Input<inputs.StatusPageTeam>[]>;
    /**
     * Please use `appearance` instead.
     */
    themeMode?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.StatusPageTimeouts>;
    timezone?: pulumi.Input<string>;
    visibility: pulumi.Input<string>;
}
