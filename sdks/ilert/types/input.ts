// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AlertActionAlertFilter {
    operator: pulumi.Input<string>;
    predicates: pulumi.Input<pulumi.Input<inputs.AlertActionAlertFilterPredicate>[]>;
}

export interface AlertActionAlertFilterPredicate {
    criteria: pulumi.Input<string>;
    field: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface AlertActionAlertSource {
    id: pulumi.Input<string>;
}

export interface AlertActionAutomationRule {
    alertType: pulumi.Input<string>;
    resolveIncident?: pulumi.Input<boolean>;
    sendNotification?: pulumi.Input<boolean>;
    serviceIds: pulumi.Input<pulumi.Input<number>[]>;
    serviceStatus: pulumi.Input<string>;
    templateId?: pulumi.Input<number>;
}

export interface AlertActionAutotask {
    companyId?: pulumi.Input<string>;
    issueType?: pulumi.Input<string>;
    queueId: pulumi.Input<number>;
    ticketCategory?: pulumi.Input<string>;
    ticketType?: pulumi.Input<string>;
}

export interface AlertActionConnector {
    id?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface AlertActionDingtalk {
    atMobiles?: pulumi.Input<pulumi.Input<string>[]>;
    isAtAll?: pulumi.Input<boolean>;
}

export interface AlertActionDingtalkAction {
    atMobiles?: pulumi.Input<pulumi.Input<string>[]>;
    isAtAll?: pulumi.Input<boolean>;
    secret?: pulumi.Input<string>;
    url: pulumi.Input<string>;
}

export interface AlertActionEmail {
    bodyTemplate?: pulumi.Input<string>;
    recipients: pulumi.Input<pulumi.Input<string>[]>;
    subject: pulumi.Input<string>;
}

export interface AlertActionGithub {
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    owner: pulumi.Input<string>;
    repository: pulumi.Input<string>;
}

export interface AlertActionJira {
    bodyTemplate?: pulumi.Input<string>;
    issueType?: pulumi.Input<string>;
    project: pulumi.Input<string>;
}

export interface AlertActionMicrosoftTeamsBot {
    channelId: pulumi.Input<string>;
    channelName?: pulumi.Input<string>;
    teamId: pulumi.Input<string>;
    teamName?: pulumi.Input<string>;
    /**
     * chat | meeting
     */
    type: pulumi.Input<string>;
}

export interface AlertActionMicrosoftTeamsWebhook {
    url: pulumi.Input<string>;
}

export interface AlertActionServicenow {
    callerId?: pulumi.Input<string>;
    impact?: pulumi.Input<string>;
    urgency?: pulumi.Input<string>;
}

export interface AlertActionSlack {
    channelId: pulumi.Input<string>;
    channelName?: pulumi.Input<string>;
    teamDomain?: pulumi.Input<string>;
    teamId: pulumi.Input<string>;
}

export interface AlertActionSlackWebhook {
    url: pulumi.Input<string>;
}

export interface AlertActionTeam {
    id: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface AlertActionTelegram {
    channelId: pulumi.Input<string>;
}

export interface AlertActionTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface AlertActionTopdesk {
    status?: pulumi.Input<string>;
}

export interface AlertActionWebhook {
    bodyTemplate?: pulumi.Input<string>;
    url: pulumi.Input<string>;
}

export interface AlertActionZammad {
    email?: pulumi.Input<string>;
}

export interface AlertActionZendesk {
    priority?: pulumi.Input<string>;
}

export interface AlertSourceAutotaskMetadata {
    secret: pulumi.Input<string>;
    username: pulumi.Input<string>;
    webServer?: pulumi.Input<string>;
}

export interface AlertSourceDetailsTemplate {
    textTemplate: pulumi.Input<string>;
}

export interface AlertSourceEmailPredicate {
    criteria: pulumi.Input<string>;
    field: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AlertSourceEmailResolvePredicate {
    criteria: pulumi.Input<string>;
    field: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AlertSourceHeartbeat {
    /**
     * The interval after which the heartbeat alert source will create an alert if it does not receive a ping
     */
    intervalSec?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    /**
     * This text will be used as the alert summary, when alerts are created by this alert source
     */
    summary?: pulumi.Input<string>;
}

export interface AlertSourceLinkTemplate {
    hrefTemplate: pulumi.Input<inputs.AlertSourceLinkTemplateHrefTemplate>;
    text: pulumi.Input<string>;
}

export interface AlertSourceLinkTemplateHrefTemplate {
    textTemplate: pulumi.Input<string>;
}

export interface AlertSourcePriorityTemplate {
    mappings: pulumi.Input<pulumi.Input<inputs.AlertSourcePriorityTemplateMapping>[]>;
    valueTemplate: pulumi.Input<inputs.AlertSourcePriorityTemplateValueTemplate>;
}

export interface AlertSourcePriorityTemplateMapping {
    priority: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface AlertSourcePriorityTemplateValueTemplate {
    textTemplate: pulumi.Input<string>;
}

export interface AlertSourceResolveKeyExtractor {
    criteria: pulumi.Input<string>;
    field: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AlertSourceRoutingTemplate {
    textTemplate: pulumi.Input<string>;
}

export interface AlertSourceSummaryTemplate {
    textTemplate: pulumi.Input<string>;
}

export interface AlertSourceSupportHours {
    /**
     * @deprecated Deprecated
     */
    autoRaiseAlerts?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    autoRaiseIncidents?: pulumi.Input<boolean>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    supportDays?: pulumi.Input<inputs.AlertSourceSupportHoursSupportDays>;
    /**
     * @deprecated Deprecated
     */
    timezone?: pulumi.Input<string>;
}

export interface AlertSourceSupportHoursSupportDays {
    friday?: pulumi.Input<inputs.AlertSourceSupportHoursSupportDaysFriday>;
    monday?: pulumi.Input<inputs.AlertSourceSupportHoursSupportDaysMonday>;
    saturday?: pulumi.Input<inputs.AlertSourceSupportHoursSupportDaysSaturday>;
    sunday?: pulumi.Input<inputs.AlertSourceSupportHoursSupportDaysSunday>;
    thursday?: pulumi.Input<inputs.AlertSourceSupportHoursSupportDaysThursday>;
    tuesday?: pulumi.Input<inputs.AlertSourceSupportHoursSupportDaysTuesday>;
    wednesday?: pulumi.Input<inputs.AlertSourceSupportHoursSupportDaysWednesday>;
}

export interface AlertSourceSupportHoursSupportDaysFriday {
    end?: pulumi.Input<string>;
    start?: pulumi.Input<string>;
}

export interface AlertSourceSupportHoursSupportDaysMonday {
    end?: pulumi.Input<string>;
    start?: pulumi.Input<string>;
}

export interface AlertSourceSupportHoursSupportDaysSaturday {
    end?: pulumi.Input<string>;
    start?: pulumi.Input<string>;
}

export interface AlertSourceSupportHoursSupportDaysSunday {
    end?: pulumi.Input<string>;
    start?: pulumi.Input<string>;
}

export interface AlertSourceSupportHoursSupportDaysThursday {
    end?: pulumi.Input<string>;
    start?: pulumi.Input<string>;
}

export interface AlertSourceSupportHoursSupportDaysTuesday {
    end?: pulumi.Input<string>;
    start?: pulumi.Input<string>;
}

export interface AlertSourceSupportHoursSupportDaysWednesday {
    end?: pulumi.Input<string>;
    start?: pulumi.Input<string>;
}

export interface AlertSourceTeam {
    id: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface AlertSourceTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface AutomationRuleAlertSource {
    id: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface AutomationRuleService {
    id: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface AutomationRuleTemplate {
    id: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface AutomationRuleTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface ConnectionAlertSource {
    id: pulumi.Input<string>;
}

export interface ConnectionAutotask {
    companyId?: pulumi.Input<string>;
    issueType?: pulumi.Input<string>;
    queueId: pulumi.Input<number>;
    ticketCategory?: pulumi.Input<string>;
    ticketType?: pulumi.Input<string>;
}

export interface ConnectionAwsLambda {
    bodyTemplate?: pulumi.Input<string>;
    url: pulumi.Input<string>;
}

export interface ConnectionAzureFaas {
    bodyTemplate?: pulumi.Input<string>;
    url: pulumi.Input<string>;
}

export interface ConnectionConnector {
    id?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ConnectionDatadog {
    priority?: pulumi.Input<string>;
    site?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ConnectionEmail {
    bodyTemplate?: pulumi.Input<string>;
    recipients: pulumi.Input<pulumi.Input<string>[]>;
    subject: pulumi.Input<string>;
}

export interface ConnectionGithub {
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    owner: pulumi.Input<string>;
    repository: pulumi.Input<string>;
}

export interface ConnectionGoogleFaas {
    bodyTemplate?: pulumi.Input<string>;
    url: pulumi.Input<string>;
}

export interface ConnectionJira {
    bodyTemplate?: pulumi.Input<string>;
    issueType?: pulumi.Input<string>;
    project: pulumi.Input<string>;
}

export interface ConnectionServicenow {
    callerId?: pulumi.Input<string>;
    impact?: pulumi.Input<string>;
    urgency?: pulumi.Input<string>;
}

export interface ConnectionSlack {
    channelId: pulumi.Input<string>;
    channelName?: pulumi.Input<string>;
    teamDomain?: pulumi.Input<string>;
    teamId: pulumi.Input<string>;
}

export interface ConnectionStatusPageIo {
    pageId?: pulumi.Input<string>;
}

export interface ConnectionSysdig {
    eventFilter?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ConnectionTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface ConnectionTopdesk {
    status?: pulumi.Input<string>;
}

export interface ConnectionWebhook {
    bodyTemplate?: pulumi.Input<string>;
    url: pulumi.Input<string>;
}

export interface ConnectionZammad {
    email?: pulumi.Input<string>;
}

export interface ConnectionZapier {
    url: pulumi.Input<string>;
}

export interface ConnectionZendesk {
    priority?: pulumi.Input<string>;
}

export interface ConnectorAutotask {
    email: pulumi.Input<string>;
    password: pulumi.Input<string>;
    url: pulumi.Input<string>;
}

export interface ConnectorDingtalk {
    secret: pulumi.Input<string>;
    url: pulumi.Input<string>;
}

export interface ConnectorDiscord {
    url: pulumi.Input<string>;
}

export interface ConnectorGithub {
    apiKey: pulumi.Input<string>;
}

export interface ConnectorJira {
    email: pulumi.Input<string>;
    password: pulumi.Input<string>;
    url: pulumi.Input<string>;
}

export interface ConnectorMattermost {
    url: pulumi.Input<string>;
}

export interface ConnectorMicrosoftTeams {
    url: pulumi.Input<string>;
}

export interface ConnectorServicenow {
    password: pulumi.Input<string>;
    url: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface ConnectorTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface ConnectorTopdesk {
    password: pulumi.Input<string>;
    url: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface ConnectorZammad {
    apiKey: pulumi.Input<string>;
    url: pulumi.Input<string>;
}

export interface ConnectorZendesk {
    apiKey: pulumi.Input<string>;
    email: pulumi.Input<string>;
    url: pulumi.Input<string>;
}

export interface EscalationPolicyEscalationRule {
    escalationTimeout: pulumi.Input<number>;
    schedule?: pulumi.Input<string>;
    schedules?: pulumi.Input<pulumi.Input<inputs.EscalationPolicyEscalationRuleSchedule>[]>;
    user?: pulumi.Input<string>;
    users?: pulumi.Input<pulumi.Input<inputs.EscalationPolicyEscalationRuleUser>[]>;
}

export interface EscalationPolicyEscalationRuleSchedule {
    id: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface EscalationPolicyEscalationRuleUser {
    firstName?: pulumi.Input<string>;
    id: pulumi.Input<string>;
    lastName?: pulumi.Input<string>;
}

export interface EscalationPolicyTeam {
    id: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface EscalationPolicyTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface GetStatusPageGroupStatusPage {
    id: number;
}

export interface GetStatusPageGroupStatusPageArgs {
    id: pulumi.Input<number>;
}

export interface GetUserEmailContactUser {
    id: number;
}

export interface GetUserEmailContactUserArgs {
    id: pulumi.Input<number>;
}

export interface GetUserPhoneNumberContactUser {
    id: number;
}

export interface GetUserPhoneNumberContactUserArgs {
    id: pulumi.Input<number>;
}

export interface IncidentTemplateTeam {
    id: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface IncidentTemplateTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface MetricDataSource {
    id: pulumi.Input<number>;
}

export interface MetricDataSourceMetadata {
    /**
     * Used for Datadog
     */
    apiKey?: pulumi.Input<string>;
    /**
     * Used for Datadog
     */
    applicationKey?: pulumi.Input<string>;
    /**
     * Used for Prometheus
     */
    authType?: pulumi.Input<string>;
    /**
     * Used for Prometheus
     */
    basicPass?: pulumi.Input<string>;
    /**
     * Used for Prometheus
     */
    basicUser?: pulumi.Input<string>;
    /**
     * Used for Prometheus
     */
    headerKey?: pulumi.Input<string>;
    /**
     * Used for Prometheus
     */
    headerValue?: pulumi.Input<string>;
    /**
     * Used for Datadog
     */
    region?: pulumi.Input<string>;
    /**
     * Used for Prometheus
     */
    url?: pulumi.Input<string>;
}

export interface MetricDataSourceTeam {
    id: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface MetricDataSourceTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface MetricMetadata {
    /**
     * Used for Datadog, Prometheus
     */
    query: pulumi.Input<string>;
}

export interface MetricTeam {
    id: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface MetricTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface ScheduleCurrentShift {
    end: pulumi.Input<string>;
    start: pulumi.Input<string>;
    user: pulumi.Input<string>;
}

export interface ScheduleNextShift {
    end: pulumi.Input<string>;
    start: pulumi.Input<string>;
    user: pulumi.Input<string>;
}

export interface ScheduleScheduleLayer {
    endsOn?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    restrictionType?: pulumi.Input<string>;
    restrictions?: pulumi.Input<pulumi.Input<inputs.ScheduleScheduleLayerRestriction>[]>;
    rotation: pulumi.Input<string>;
    startsOn: pulumi.Input<string>;
    users: pulumi.Input<pulumi.Input<inputs.ScheduleScheduleLayerUser>[]>;
}

export interface ScheduleScheduleLayerRestriction {
    from: pulumi.Input<inputs.ScheduleScheduleLayerRestrictionFrom>;
    to: pulumi.Input<inputs.ScheduleScheduleLayerRestrictionTo>;
}

export interface ScheduleScheduleLayerRestrictionFrom {
    dayOfWeek: pulumi.Input<string>;
    time: pulumi.Input<string>;
}

export interface ScheduleScheduleLayerRestrictionTo {
    dayOfWeek: pulumi.Input<string>;
    time: pulumi.Input<string>;
}

export interface ScheduleScheduleLayerUser {
    firstName?: pulumi.Input<string>;
    id: pulumi.Input<string>;
    lastName?: pulumi.Input<string>;
}

export interface ScheduleShift {
    end: pulumi.Input<string>;
    start: pulumi.Input<string>;
    user: pulumi.Input<string>;
}

export interface ScheduleTeam {
    id: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface ScheduleTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface ServiceTeam {
    id: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface ServiceTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface StatusPageGroupStatusPage {
    id: pulumi.Input<number>;
}

export interface StatusPageGroupTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface StatusPageMetric {
    id: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface StatusPageService {
    id: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface StatusPageStructure {
    elements: pulumi.Input<pulumi.Input<inputs.StatusPageStructureElement>[]>;
}

export interface StatusPageStructureElement {
    children?: pulumi.Input<pulumi.Input<inputs.StatusPageStructureElementChild>[]>;
    id: pulumi.Input<string>;
    options?: pulumi.Input<pulumi.Input<string>[]>;
    type: pulumi.Input<string>;
}

export interface StatusPageStructureElementChild {
    id: pulumi.Input<string>;
    options?: pulumi.Input<pulumi.Input<string>[]>;
    type: pulumi.Input<string>;
}

export interface StatusPageTeam {
    id: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface StatusPageTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface SupportHourSupportDays {
    friday?: pulumi.Input<inputs.SupportHourSupportDaysFriday>;
    monday?: pulumi.Input<inputs.SupportHourSupportDaysMonday>;
    saturday?: pulumi.Input<inputs.SupportHourSupportDaysSaturday>;
    sunday?: pulumi.Input<inputs.SupportHourSupportDaysSunday>;
    thursday?: pulumi.Input<inputs.SupportHourSupportDaysThursday>;
    tuesday?: pulumi.Input<inputs.SupportHourSupportDaysTuesday>;
    wednesday?: pulumi.Input<inputs.SupportHourSupportDaysWednesday>;
}

export interface SupportHourSupportDaysFriday {
    end?: pulumi.Input<string>;
    start?: pulumi.Input<string>;
}

export interface SupportHourSupportDaysMonday {
    end?: pulumi.Input<string>;
    start?: pulumi.Input<string>;
}

export interface SupportHourSupportDaysSaturday {
    end?: pulumi.Input<string>;
    start?: pulumi.Input<string>;
}

export interface SupportHourSupportDaysSunday {
    end?: pulumi.Input<string>;
    start?: pulumi.Input<string>;
}

export interface SupportHourSupportDaysThursday {
    end?: pulumi.Input<string>;
    start?: pulumi.Input<string>;
}

export interface SupportHourSupportDaysTuesday {
    end?: pulumi.Input<string>;
    start?: pulumi.Input<string>;
}

export interface SupportHourSupportDaysWednesday {
    end?: pulumi.Input<string>;
    start?: pulumi.Input<string>;
}

export interface SupportHourTeam {
    id: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface SupportHourTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface TeamMember {
    role?: pulumi.Input<string>;
    user: pulumi.Input<string>;
}

export interface TeamTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface UptimeMonitorCheckParams {
    alertBeforeSec?: pulumi.Input<number>;
    alertOnFingerprintChange?: pulumi.Input<boolean>;
    host?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    responseKeywords?: pulumi.Input<pulumi.Input<string>[]>;
    url?: pulumi.Input<string>;
}

export interface UptimeMonitorTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface UserAlertPreferenceContact {
    id: pulumi.Input<number>;
}

export interface UserAlertPreferenceTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface UserAlertPreferenceUser {
    id: pulumi.Input<number>;
}

export interface UserDutyPreferenceContact {
    id: pulumi.Input<number>;
}

export interface UserDutyPreferenceTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface UserDutyPreferenceUser {
    id: pulumi.Input<number>;
}

export interface UserEmailContactTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface UserEmailContactUser {
    id: pulumi.Input<number>;
}

export interface UserPhoneNumberContactTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface UserPhoneNumberContactUser {
    id: pulumi.Input<number>;
}

export interface UserSubscriptionPreferenceContact {
    id: pulumi.Input<number>;
}

export interface UserSubscriptionPreferenceTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface UserSubscriptionPreferenceUser {
    id: pulumi.Input<number>;
}

export interface UserTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface UserUpdatePreferenceContact {
    id: pulumi.Input<number>;
}

export interface UserUpdatePreferenceTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface UserUpdatePreferenceUser {
    id: pulumi.Input<number>;
}
