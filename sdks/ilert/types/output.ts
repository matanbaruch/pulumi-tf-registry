// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AlertActionAlertFilter {
    operator: string;
    predicates: outputs.AlertActionAlertFilterPredicate[];
}

export interface AlertActionAlertFilterPredicate {
    criteria: string;
    field: string;
    value: string;
}

export interface AlertActionAlertSource {
    id: string;
}

export interface AlertActionAutomationRule {
    alertType: string;
    resolveIncident?: boolean;
    sendNotification?: boolean;
    serviceIds: number[];
    serviceStatus: string;
    templateId?: number;
}

export interface AlertActionAutotask {
    companyId?: string;
    issueType?: string;
    queueId: number;
    ticketCategory?: string;
    ticketType?: string;
}

export interface AlertActionConnector {
    id?: string;
    type: string;
}

export interface AlertActionDingtalk {
    atMobiles?: string[];
    isAtAll?: boolean;
}

export interface AlertActionDingtalkAction {
    atMobiles?: string[];
    isAtAll?: boolean;
    secret?: string;
    url: string;
}

export interface AlertActionEmail {
    bodyTemplate?: string;
    recipients: string[];
    subject: string;
}

export interface AlertActionGithub {
    labels?: string[];
    owner: string;
    repository: string;
}

export interface AlertActionJira {
    bodyTemplate?: string;
    issueType?: string;
    project: string;
}

export interface AlertActionMicrosoftTeamsBot {
    channelId: string;
    channelName?: string;
    teamId: string;
    teamName?: string;
    /**
     * chat | meeting
     */
    type: string;
}

export interface AlertActionMicrosoftTeamsWebhook {
    url: string;
}

export interface AlertActionServicenow {
    callerId?: string;
    impact?: string;
    urgency?: string;
}

export interface AlertActionSlack {
    channelId: string;
    channelName?: string;
    teamDomain?: string;
    teamId: string;
}

export interface AlertActionSlackWebhook {
    url: string;
}

export interface AlertActionTeam {
    id: number;
    name?: string;
}

export interface AlertActionTelegram {
    channelId: string;
}

export interface AlertActionTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface AlertActionTopdesk {
    status?: string;
}

export interface AlertActionWebhook {
    bodyTemplate?: string;
    url: string;
}

export interface AlertActionZammad {
    email?: string;
}

export interface AlertActionZendesk {
    priority?: string;
}

export interface AlertSourceAutotaskMetadata {
    secret: string;
    username: string;
    webServer?: string;
}

export interface AlertSourceDetailsTemplate {
    textTemplate: string;
}

export interface AlertSourceEmailPredicate {
    criteria: string;
    field: string;
    value?: string;
}

export interface AlertSourceEmailResolvePredicate {
    criteria: string;
    field: string;
    value?: string;
}

export interface AlertSourceHeartbeat {
    /**
     * The interval after which the heartbeat alert source will create an alert if it does not receive a ping
     */
    intervalSec?: number;
    status: string;
    /**
     * This text will be used as the alert summary, when alerts are created by this alert source
     */
    summary?: string;
}

export interface AlertSourceLinkTemplate {
    hrefTemplate: outputs.AlertSourceLinkTemplateHrefTemplate;
    text: string;
}

export interface AlertSourceLinkTemplateHrefTemplate {
    textTemplate: string;
}

export interface AlertSourcePriorityTemplate {
    mappings: outputs.AlertSourcePriorityTemplateMapping[];
    valueTemplate: outputs.AlertSourcePriorityTemplateValueTemplate;
}

export interface AlertSourcePriorityTemplateMapping {
    priority: string;
    value: string;
}

export interface AlertSourcePriorityTemplateValueTemplate {
    textTemplate: string;
}

export interface AlertSourceResolveKeyExtractor {
    criteria: string;
    field: string;
    value?: string;
}

export interface AlertSourceRoutingTemplate {
    textTemplate: string;
}

export interface AlertSourceSummaryTemplate {
    textTemplate: string;
}

export interface AlertSourceSupportHours {
    /**
     * @deprecated Deprecated
     */
    autoRaiseAlerts?: boolean;
    /**
     * @deprecated Deprecated
     */
    autoRaiseIncidents?: boolean;
    id?: number;
    name: string;
    /**
     * @deprecated Deprecated
     */
    supportDays?: outputs.AlertSourceSupportHoursSupportDays;
    /**
     * @deprecated Deprecated
     */
    timezone?: string;
}

export interface AlertSourceSupportHoursSupportDays {
    friday?: outputs.AlertSourceSupportHoursSupportDaysFriday;
    monday?: outputs.AlertSourceSupportHoursSupportDaysMonday;
    saturday?: outputs.AlertSourceSupportHoursSupportDaysSaturday;
    sunday?: outputs.AlertSourceSupportHoursSupportDaysSunday;
    thursday?: outputs.AlertSourceSupportHoursSupportDaysThursday;
    tuesday?: outputs.AlertSourceSupportHoursSupportDaysTuesday;
    wednesday?: outputs.AlertSourceSupportHoursSupportDaysWednesday;
}

export interface AlertSourceSupportHoursSupportDaysFriday {
    end?: string;
    start?: string;
}

export interface AlertSourceSupportHoursSupportDaysMonday {
    end?: string;
    start?: string;
}

export interface AlertSourceSupportHoursSupportDaysSaturday {
    end?: string;
    start?: string;
}

export interface AlertSourceSupportHoursSupportDaysSunday {
    end?: string;
    start?: string;
}

export interface AlertSourceSupportHoursSupportDaysThursday {
    end?: string;
    start?: string;
}

export interface AlertSourceSupportHoursSupportDaysTuesday {
    end?: string;
    start?: string;
}

export interface AlertSourceSupportHoursSupportDaysWednesday {
    end?: string;
    start?: string;
}

export interface AlertSourceTeam {
    id: number;
    name?: string;
}

export interface AlertSourceTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface AutomationRuleAlertSource {
    id: number;
    name?: string;
}

export interface AutomationRuleService {
    id: number;
    name?: string;
}

export interface AutomationRuleTemplate {
    id: number;
    name?: string;
}

export interface AutomationRuleTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface ConnectionAlertSource {
    id: string;
}

export interface ConnectionAutotask {
    companyId?: string;
    issueType?: string;
    queueId: number;
    ticketCategory?: string;
    ticketType?: string;
}

export interface ConnectionAwsLambda {
    bodyTemplate?: string;
    url: string;
}

export interface ConnectionAzureFaas {
    bodyTemplate?: string;
    url: string;
}

export interface ConnectionConnector {
    id?: string;
    type: string;
}

export interface ConnectionDatadog {
    priority?: string;
    site?: string;
    tags?: string[];
}

export interface ConnectionEmail {
    bodyTemplate?: string;
    recipients: string[];
    subject: string;
}

export interface ConnectionGithub {
    labels?: string[];
    owner: string;
    repository: string;
}

export interface ConnectionGoogleFaas {
    bodyTemplate?: string;
    url: string;
}

export interface ConnectionJira {
    bodyTemplate?: string;
    issueType?: string;
    project: string;
}

export interface ConnectionServicenow {
    callerId?: string;
    impact?: string;
    urgency?: string;
}

export interface ConnectionSlack {
    channelId: string;
    channelName?: string;
    teamDomain?: string;
    teamId: string;
}

export interface ConnectionStatusPageIo {
    pageId?: string;
}

export interface ConnectionSysdig {
    eventFilter?: string;
    tags?: string[];
}

export interface ConnectionTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface ConnectionTopdesk {
    status?: string;
}

export interface ConnectionWebhook {
    bodyTemplate?: string;
    url: string;
}

export interface ConnectionZammad {
    email?: string;
}

export interface ConnectionZapier {
    url: string;
}

export interface ConnectionZendesk {
    priority?: string;
}

export interface ConnectorAutotask {
    email: string;
    password: string;
    url: string;
}

export interface ConnectorDingtalk {
    secret: string;
    url: string;
}

export interface ConnectorDiscord {
    url: string;
}

export interface ConnectorGithub {
    apiKey: string;
}

export interface ConnectorJira {
    email: string;
    password: string;
    url: string;
}

export interface ConnectorMattermost {
    url: string;
}

export interface ConnectorMicrosoftTeams {
    url: string;
}

export interface ConnectorServicenow {
    password: string;
    url: string;
    username: string;
}

export interface ConnectorTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface ConnectorTopdesk {
    password: string;
    url: string;
    username: string;
}

export interface ConnectorZammad {
    apiKey: string;
    url: string;
}

export interface ConnectorZendesk {
    apiKey: string;
    email: string;
    url: string;
}

export interface EscalationPolicyEscalationRule {
    escalationTimeout: number;
    schedule?: string;
    schedules?: outputs.EscalationPolicyEscalationRuleSchedule[];
    user?: string;
    users?: outputs.EscalationPolicyEscalationRuleUser[];
}

export interface EscalationPolicyEscalationRuleSchedule {
    id: string;
    name?: string;
}

export interface EscalationPolicyEscalationRuleUser {
    firstName?: string;
    id: string;
    lastName?: string;
}

export interface EscalationPolicyTeam {
    id: number;
    name?: string;
}

export interface EscalationPolicyTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface GetStatusPageGroupStatusPage {
    id: number;
}

export interface GetUserEmailContactUser {
    id: number;
}

export interface GetUserPhoneNumberContactUser {
    id: number;
}

export interface IncidentTemplateTeam {
    id: number;
    name?: string;
}

export interface IncidentTemplateTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface MetricDataSource {
    id: number;
}

export interface MetricDataSourceMetadata {
    /**
     * Used for Datadog
     */
    apiKey?: string;
    /**
     * Used for Datadog
     */
    applicationKey?: string;
    /**
     * Used for Prometheus
     */
    authType?: string;
    /**
     * Used for Prometheus
     */
    basicPass?: string;
    /**
     * Used for Prometheus
     */
    basicUser?: string;
    /**
     * Used for Prometheus
     */
    headerKey?: string;
    /**
     * Used for Prometheus
     */
    headerValue?: string;
    /**
     * Used for Datadog
     */
    region?: string;
    /**
     * Used for Prometheus
     */
    url?: string;
}

export interface MetricDataSourceTeam {
    id: number;
    name?: string;
}

export interface MetricDataSourceTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface MetricMetadata {
    /**
     * Used for Datadog, Prometheus
     */
    query: string;
}

export interface MetricTeam {
    id: number;
    name?: string;
}

export interface MetricTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface ScheduleCurrentShift {
    end: string;
    start: string;
    user: string;
}

export interface ScheduleNextShift {
    end: string;
    start: string;
    user: string;
}

export interface ScheduleScheduleLayer {
    endsOn?: string;
    name: string;
    restrictionType?: string;
    restrictions?: outputs.ScheduleScheduleLayerRestriction[];
    rotation: string;
    startsOn: string;
    users: outputs.ScheduleScheduleLayerUser[];
}

export interface ScheduleScheduleLayerRestriction {
    from: outputs.ScheduleScheduleLayerRestrictionFrom;
    to: outputs.ScheduleScheduleLayerRestrictionTo;
}

export interface ScheduleScheduleLayerRestrictionFrom {
    dayOfWeek: string;
    time: string;
}

export interface ScheduleScheduleLayerRestrictionTo {
    dayOfWeek: string;
    time: string;
}

export interface ScheduleScheduleLayerUser {
    firstName?: string;
    id: string;
    lastName?: string;
}

export interface ScheduleShift {
    end: string;
    start: string;
    user: string;
}

export interface ScheduleTeam {
    id: number;
    name?: string;
}

export interface ScheduleTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface ServiceTeam {
    id: number;
    name?: string;
}

export interface ServiceTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface StatusPageGroupStatusPage {
    id: number;
}

export interface StatusPageGroupTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface StatusPageMetric {
    id: number;
    name?: string;
}

export interface StatusPageService {
    id: number;
    name?: string;
}

export interface StatusPageStructure {
    elements: outputs.StatusPageStructureElement[];
}

export interface StatusPageStructureElement {
    children?: outputs.StatusPageStructureElementChild[];
    id: string;
    options?: string[];
    type: string;
}

export interface StatusPageStructureElementChild {
    id: string;
    options?: string[];
    type: string;
}

export interface StatusPageTeam {
    id: number;
    name?: string;
}

export interface StatusPageTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface SupportHourSupportDays {
    friday?: outputs.SupportHourSupportDaysFriday;
    monday?: outputs.SupportHourSupportDaysMonday;
    saturday?: outputs.SupportHourSupportDaysSaturday;
    sunday?: outputs.SupportHourSupportDaysSunday;
    thursday?: outputs.SupportHourSupportDaysThursday;
    tuesday?: outputs.SupportHourSupportDaysTuesday;
    wednesday?: outputs.SupportHourSupportDaysWednesday;
}

export interface SupportHourSupportDaysFriday {
    end?: string;
    start?: string;
}

export interface SupportHourSupportDaysMonday {
    end?: string;
    start?: string;
}

export interface SupportHourSupportDaysSaturday {
    end?: string;
    start?: string;
}

export interface SupportHourSupportDaysSunday {
    end?: string;
    start?: string;
}

export interface SupportHourSupportDaysThursday {
    end?: string;
    start?: string;
}

export interface SupportHourSupportDaysTuesday {
    end?: string;
    start?: string;
}

export interface SupportHourSupportDaysWednesday {
    end?: string;
    start?: string;
}

export interface SupportHourTeam {
    id: number;
    name?: string;
}

export interface SupportHourTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface TeamMember {
    role?: string;
    user: string;
}

export interface TeamTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface UptimeMonitorCheckParams {
    alertBeforeSec?: number;
    alertOnFingerprintChange?: boolean;
    host?: string;
    port?: number;
    responseKeywords?: string[];
    url?: string;
}

export interface UptimeMonitorTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface UserAlertPreferenceContact {
    id: number;
}

export interface UserAlertPreferenceTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface UserAlertPreferenceUser {
    id: number;
}

export interface UserDutyPreferenceContact {
    id: number;
}

export interface UserDutyPreferenceTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface UserDutyPreferenceUser {
    id: number;
}

export interface UserEmailContactTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface UserEmailContactUser {
    id: number;
}

export interface UserPhoneNumberContactTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface UserPhoneNumberContactUser {
    id: number;
}

export interface UserSubscriptionPreferenceContact {
    id: number;
}

export interface UserSubscriptionPreferenceTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface UserSubscriptionPreferenceUser {
    id: number;
}

export interface UserTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface UserUpdatePreferenceContact {
    id: number;
}

export interface UserUpdatePreferenceTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface UserUpdatePreferenceUser {
    id: number;
}

