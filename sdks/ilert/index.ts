// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AlertActionArgs, AlertActionState } from "./alertAction";
export type AlertAction = import("./alertAction").AlertAction;
export const AlertAction: typeof import("./alertAction").AlertAction = null as any;
utilities.lazyLoad(exports, ["AlertAction"], () => require("./alertAction"));

export { AlertSourceArgs, AlertSourceState } from "./alertSource";
export type AlertSource = import("./alertSource").AlertSource;
export const AlertSource: typeof import("./alertSource").AlertSource = null as any;
utilities.lazyLoad(exports, ["AlertSource"], () => require("./alertSource"));

export { AutomationRuleArgs, AutomationRuleState } from "./automationRule";
export type AutomationRule = import("./automationRule").AutomationRule;
export const AutomationRule: typeof import("./automationRule").AutomationRule = null as any;
utilities.lazyLoad(exports, ["AutomationRule"], () => require("./automationRule"));

export { ConnectionArgs, ConnectionState } from "./connection";
export type Connection = import("./connection").Connection;
export const Connection: typeof import("./connection").Connection = null as any;
utilities.lazyLoad(exports, ["Connection"], () => require("./connection"));

export { ConnectorArgs, ConnectorState } from "./connector";
export type Connector = import("./connector").Connector;
export const Connector: typeof import("./connector").Connector = null as any;
utilities.lazyLoad(exports, ["Connector"], () => require("./connector"));

export { EscalationPolicyArgs, EscalationPolicyState } from "./escalationPolicy";
export type EscalationPolicy = import("./escalationPolicy").EscalationPolicy;
export const EscalationPolicy: typeof import("./escalationPolicy").EscalationPolicy = null as any;
utilities.lazyLoad(exports, ["EscalationPolicy"], () => require("./escalationPolicy"));

export { GetAlertActionArgs, GetAlertActionResult, GetAlertActionOutputArgs } from "./getAlertAction";
export const getAlertAction: typeof import("./getAlertAction").getAlertAction = null as any;
export const getAlertActionOutput: typeof import("./getAlertAction").getAlertActionOutput = null as any;
utilities.lazyLoad(exports, ["getAlertAction","getAlertActionOutput"], () => require("./getAlertAction"));

export { GetAlertSourceArgs, GetAlertSourceResult, GetAlertSourceOutputArgs } from "./getAlertSource";
export const getAlertSource: typeof import("./getAlertSource").getAlertSource = null as any;
export const getAlertSourceOutput: typeof import("./getAlertSource").getAlertSourceOutput = null as any;
utilities.lazyLoad(exports, ["getAlertSource","getAlertSourceOutput"], () => require("./getAlertSource"));

export { GetConnectionArgs, GetConnectionResult, GetConnectionOutputArgs } from "./getConnection";
export const getConnection: typeof import("./getConnection").getConnection = null as any;
export const getConnectionOutput: typeof import("./getConnection").getConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getConnection","getConnectionOutput"], () => require("./getConnection"));

export { GetConnectorArgs, GetConnectorResult, GetConnectorOutputArgs } from "./getConnector";
export const getConnector: typeof import("./getConnector").getConnector = null as any;
export const getConnectorOutput: typeof import("./getConnector").getConnectorOutput = null as any;
utilities.lazyLoad(exports, ["getConnector","getConnectorOutput"], () => require("./getConnector"));

export { GetEscalationPolicyArgs, GetEscalationPolicyResult, GetEscalationPolicyOutputArgs } from "./getEscalationPolicy";
export const getEscalationPolicy: typeof import("./getEscalationPolicy").getEscalationPolicy = null as any;
export const getEscalationPolicyOutput: typeof import("./getEscalationPolicy").getEscalationPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getEscalationPolicy","getEscalationPolicyOutput"], () => require("./getEscalationPolicy"));

export { GetIncidentTemplateArgs, GetIncidentTemplateResult, GetIncidentTemplateOutputArgs } from "./getIncidentTemplate";
export const getIncidentTemplate: typeof import("./getIncidentTemplate").getIncidentTemplate = null as any;
export const getIncidentTemplateOutput: typeof import("./getIncidentTemplate").getIncidentTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getIncidentTemplate","getIncidentTemplateOutput"], () => require("./getIncidentTemplate"));

export { GetMetricArgs, GetMetricResult, GetMetricOutputArgs } from "./getMetric";
export const getMetric: typeof import("./getMetric").getMetric = null as any;
export const getMetricOutput: typeof import("./getMetric").getMetricOutput = null as any;
utilities.lazyLoad(exports, ["getMetric","getMetricOutput"], () => require("./getMetric"));

export { GetMetricDataSourceArgs, GetMetricDataSourceResult, GetMetricDataSourceOutputArgs } from "./getMetricDataSource";
export const getMetricDataSource: typeof import("./getMetricDataSource").getMetricDataSource = null as any;
export const getMetricDataSourceOutput: typeof import("./getMetricDataSource").getMetricDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getMetricDataSource","getMetricDataSourceOutput"], () => require("./getMetricDataSource"));

export { GetScheduleArgs, GetScheduleResult, GetScheduleOutputArgs } from "./getSchedule";
export const getSchedule: typeof import("./getSchedule").getSchedule = null as any;
export const getScheduleOutput: typeof import("./getSchedule").getScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getSchedule","getScheduleOutput"], () => require("./getSchedule"));

export { GetServiceArgs, GetServiceResult, GetServiceOutputArgs } from "./getService";
export const getService: typeof import("./getService").getService = null as any;
export const getServiceOutput: typeof import("./getService").getServiceOutput = null as any;
utilities.lazyLoad(exports, ["getService","getServiceOutput"], () => require("./getService"));

export { GetStatusPageArgs, GetStatusPageResult, GetStatusPageOutputArgs } from "./getStatusPage";
export const getStatusPage: typeof import("./getStatusPage").getStatusPage = null as any;
export const getStatusPageOutput: typeof import("./getStatusPage").getStatusPageOutput = null as any;
utilities.lazyLoad(exports, ["getStatusPage","getStatusPageOutput"], () => require("./getStatusPage"));

export { GetStatusPageGroupArgs, GetStatusPageGroupResult, GetStatusPageGroupOutputArgs } from "./getStatusPageGroup";
export const getStatusPageGroup: typeof import("./getStatusPageGroup").getStatusPageGroup = null as any;
export const getStatusPageGroupOutput: typeof import("./getStatusPageGroup").getStatusPageGroupOutput = null as any;
utilities.lazyLoad(exports, ["getStatusPageGroup","getStatusPageGroupOutput"], () => require("./getStatusPageGroup"));

export { GetSupportHourArgs, GetSupportHourResult, GetSupportHourOutputArgs } from "./getSupportHour";
export const getSupportHour: typeof import("./getSupportHour").getSupportHour = null as any;
export const getSupportHourOutput: typeof import("./getSupportHour").getSupportHourOutput = null as any;
utilities.lazyLoad(exports, ["getSupportHour","getSupportHourOutput"], () => require("./getSupportHour"));

export { GetTeamArgs, GetTeamResult, GetTeamOutputArgs } from "./getTeam";
export const getTeam: typeof import("./getTeam").getTeam = null as any;
export const getTeamOutput: typeof import("./getTeam").getTeamOutput = null as any;
utilities.lazyLoad(exports, ["getTeam","getTeamOutput"], () => require("./getTeam"));

export { GetUptimeMonitorArgs, GetUptimeMonitorResult, GetUptimeMonitorOutputArgs } from "./getUptimeMonitor";
export const getUptimeMonitor: typeof import("./getUptimeMonitor").getUptimeMonitor = null as any;
export const getUptimeMonitorOutput: typeof import("./getUptimeMonitor").getUptimeMonitorOutput = null as any;
utilities.lazyLoad(exports, ["getUptimeMonitor","getUptimeMonitorOutput"], () => require("./getUptimeMonitor"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetUserEmailContactArgs, GetUserEmailContactResult, GetUserEmailContactOutputArgs } from "./getUserEmailContact";
export const getUserEmailContact: typeof import("./getUserEmailContact").getUserEmailContact = null as any;
export const getUserEmailContactOutput: typeof import("./getUserEmailContact").getUserEmailContactOutput = null as any;
utilities.lazyLoad(exports, ["getUserEmailContact","getUserEmailContactOutput"], () => require("./getUserEmailContact"));

export { GetUserPhoneNumberContactArgs, GetUserPhoneNumberContactResult, GetUserPhoneNumberContactOutputArgs } from "./getUserPhoneNumberContact";
export const getUserPhoneNumberContact: typeof import("./getUserPhoneNumberContact").getUserPhoneNumberContact = null as any;
export const getUserPhoneNumberContactOutput: typeof import("./getUserPhoneNumberContact").getUserPhoneNumberContactOutput = null as any;
utilities.lazyLoad(exports, ["getUserPhoneNumberContact","getUserPhoneNumberContactOutput"], () => require("./getUserPhoneNumberContact"));

export { IncidentTemplateArgs, IncidentTemplateState } from "./incidentTemplate";
export type IncidentTemplate = import("./incidentTemplate").IncidentTemplate;
export const IncidentTemplate: typeof import("./incidentTemplate").IncidentTemplate = null as any;
utilities.lazyLoad(exports, ["IncidentTemplate"], () => require("./incidentTemplate"));

export { MetricArgs, MetricState } from "./metric";
export type Metric = import("./metric").Metric;
export const Metric: typeof import("./metric").Metric = null as any;
utilities.lazyLoad(exports, ["Metric"], () => require("./metric"));

export { MetricDataSourceArgs, MetricDataSourceState } from "./metricDataSource";
export type MetricDataSource = import("./metricDataSource").MetricDataSource;
export const MetricDataSource: typeof import("./metricDataSource").MetricDataSource = null as any;
utilities.lazyLoad(exports, ["MetricDataSource"], () => require("./metricDataSource"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ScheduleArgs, ScheduleState } from "./schedule";
export type Schedule = import("./schedule").Schedule;
export const Schedule: typeof import("./schedule").Schedule = null as any;
utilities.lazyLoad(exports, ["Schedule"], () => require("./schedule"));

export { ServiceArgs, ServiceState } from "./service";
export type Service = import("./service").Service;
export const Service: typeof import("./service").Service = null as any;
utilities.lazyLoad(exports, ["Service"], () => require("./service"));

export { StatusPageArgs, StatusPageState } from "./statusPage";
export type StatusPage = import("./statusPage").StatusPage;
export const StatusPage: typeof import("./statusPage").StatusPage = null as any;
utilities.lazyLoad(exports, ["StatusPage"], () => require("./statusPage"));

export { StatusPageGroupArgs, StatusPageGroupState } from "./statusPageGroup";
export type StatusPageGroup = import("./statusPageGroup").StatusPageGroup;
export const StatusPageGroup: typeof import("./statusPageGroup").StatusPageGroup = null as any;
utilities.lazyLoad(exports, ["StatusPageGroup"], () => require("./statusPageGroup"));

export { SupportHourArgs, SupportHourState } from "./supportHour";
export type SupportHour = import("./supportHour").SupportHour;
export const SupportHour: typeof import("./supportHour").SupportHour = null as any;
utilities.lazyLoad(exports, ["SupportHour"], () => require("./supportHour"));

export { TeamArgs, TeamState } from "./team";
export type Team = import("./team").Team;
export const Team: typeof import("./team").Team = null as any;
utilities.lazyLoad(exports, ["Team"], () => require("./team"));

export { UptimeMonitorArgs, UptimeMonitorState } from "./uptimeMonitor";
export type UptimeMonitor = import("./uptimeMonitor").UptimeMonitor;
export const UptimeMonitor: typeof import("./uptimeMonitor").UptimeMonitor = null as any;
utilities.lazyLoad(exports, ["UptimeMonitor"], () => require("./uptimeMonitor"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { UserAlertPreferenceArgs, UserAlertPreferenceState } from "./userAlertPreference";
export type UserAlertPreference = import("./userAlertPreference").UserAlertPreference;
export const UserAlertPreference: typeof import("./userAlertPreference").UserAlertPreference = null as any;
utilities.lazyLoad(exports, ["UserAlertPreference"], () => require("./userAlertPreference"));

export { UserDutyPreferenceArgs, UserDutyPreferenceState } from "./userDutyPreference";
export type UserDutyPreference = import("./userDutyPreference").UserDutyPreference;
export const UserDutyPreference: typeof import("./userDutyPreference").UserDutyPreference = null as any;
utilities.lazyLoad(exports, ["UserDutyPreference"], () => require("./userDutyPreference"));

export { UserEmailContactArgs, UserEmailContactState } from "./userEmailContact";
export type UserEmailContact = import("./userEmailContact").UserEmailContact;
export const UserEmailContact: typeof import("./userEmailContact").UserEmailContact = null as any;
utilities.lazyLoad(exports, ["UserEmailContact"], () => require("./userEmailContact"));

export { UserPhoneNumberContactArgs, UserPhoneNumberContactState } from "./userPhoneNumberContact";
export type UserPhoneNumberContact = import("./userPhoneNumberContact").UserPhoneNumberContact;
export const UserPhoneNumberContact: typeof import("./userPhoneNumberContact").UserPhoneNumberContact = null as any;
utilities.lazyLoad(exports, ["UserPhoneNumberContact"], () => require("./userPhoneNumberContact"));

export { UserSubscriptionPreferenceArgs, UserSubscriptionPreferenceState } from "./userSubscriptionPreference";
export type UserSubscriptionPreference = import("./userSubscriptionPreference").UserSubscriptionPreference;
export const UserSubscriptionPreference: typeof import("./userSubscriptionPreference").UserSubscriptionPreference = null as any;
utilities.lazyLoad(exports, ["UserSubscriptionPreference"], () => require("./userSubscriptionPreference"));

export { UserUpdatePreferenceArgs, UserUpdatePreferenceState } from "./userUpdatePreference";
export type UserUpdatePreference = import("./userUpdatePreference").UserUpdatePreference;
export const UserUpdatePreference: typeof import("./userUpdatePreference").UserUpdatePreference = null as any;
utilities.lazyLoad(exports, ["UserUpdatePreference"], () => require("./userUpdatePreference"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "ilert:index/alertAction:AlertAction":
                return new AlertAction(name, <any>undefined, { urn })
            case "ilert:index/alertSource:AlertSource":
                return new AlertSource(name, <any>undefined, { urn })
            case "ilert:index/automationRule:AutomationRule":
                return new AutomationRule(name, <any>undefined, { urn })
            case "ilert:index/connection:Connection":
                return new Connection(name, <any>undefined, { urn })
            case "ilert:index/connector:Connector":
                return new Connector(name, <any>undefined, { urn })
            case "ilert:index/escalationPolicy:EscalationPolicy":
                return new EscalationPolicy(name, <any>undefined, { urn })
            case "ilert:index/incidentTemplate:IncidentTemplate":
                return new IncidentTemplate(name, <any>undefined, { urn })
            case "ilert:index/metric:Metric":
                return new Metric(name, <any>undefined, { urn })
            case "ilert:index/metricDataSource:MetricDataSource":
                return new MetricDataSource(name, <any>undefined, { urn })
            case "ilert:index/schedule:Schedule":
                return new Schedule(name, <any>undefined, { urn })
            case "ilert:index/service:Service":
                return new Service(name, <any>undefined, { urn })
            case "ilert:index/statusPage:StatusPage":
                return new StatusPage(name, <any>undefined, { urn })
            case "ilert:index/statusPageGroup:StatusPageGroup":
                return new StatusPageGroup(name, <any>undefined, { urn })
            case "ilert:index/supportHour:SupportHour":
                return new SupportHour(name, <any>undefined, { urn })
            case "ilert:index/team:Team":
                return new Team(name, <any>undefined, { urn })
            case "ilert:index/uptimeMonitor:UptimeMonitor":
                return new UptimeMonitor(name, <any>undefined, { urn })
            case "ilert:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "ilert:index/userAlertPreference:UserAlertPreference":
                return new UserAlertPreference(name, <any>undefined, { urn })
            case "ilert:index/userDutyPreference:UserDutyPreference":
                return new UserDutyPreference(name, <any>undefined, { urn })
            case "ilert:index/userEmailContact:UserEmailContact":
                return new UserEmailContact(name, <any>undefined, { urn })
            case "ilert:index/userPhoneNumberContact:UserPhoneNumberContact":
                return new UserPhoneNumberContact(name, <any>undefined, { urn })
            case "ilert:index/userSubscriptionPreference:UserSubscriptionPreference":
                return new UserSubscriptionPreference(name, <any>undefined, { urn })
            case "ilert:index/userUpdatePreference:UserUpdatePreference":
                return new UserUpdatePreference(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("ilert", "index/alertAction", _module)
pulumi.runtime.registerResourceModule("ilert", "index/alertSource", _module)
pulumi.runtime.registerResourceModule("ilert", "index/automationRule", _module)
pulumi.runtime.registerResourceModule("ilert", "index/connection", _module)
pulumi.runtime.registerResourceModule("ilert", "index/connector", _module)
pulumi.runtime.registerResourceModule("ilert", "index/escalationPolicy", _module)
pulumi.runtime.registerResourceModule("ilert", "index/incidentTemplate", _module)
pulumi.runtime.registerResourceModule("ilert", "index/metric", _module)
pulumi.runtime.registerResourceModule("ilert", "index/metricDataSource", _module)
pulumi.runtime.registerResourceModule("ilert", "index/schedule", _module)
pulumi.runtime.registerResourceModule("ilert", "index/service", _module)
pulumi.runtime.registerResourceModule("ilert", "index/statusPage", _module)
pulumi.runtime.registerResourceModule("ilert", "index/statusPageGroup", _module)
pulumi.runtime.registerResourceModule("ilert", "index/supportHour", _module)
pulumi.runtime.registerResourceModule("ilert", "index/team", _module)
pulumi.runtime.registerResourceModule("ilert", "index/uptimeMonitor", _module)
pulumi.runtime.registerResourceModule("ilert", "index/user", _module)
pulumi.runtime.registerResourceModule("ilert", "index/userAlertPreference", _module)
pulumi.runtime.registerResourceModule("ilert", "index/userDutyPreference", _module)
pulumi.runtime.registerResourceModule("ilert", "index/userEmailContact", _module)
pulumi.runtime.registerResourceModule("ilert", "index/userPhoneNumberContact", _module)
pulumi.runtime.registerResourceModule("ilert", "index/userSubscriptionPreference", _module)
pulumi.runtime.registerResourceModule("ilert", "index/userUpdatePreference", _module)
pulumi.runtime.registerResourcePackage("ilert", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:ilert") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
