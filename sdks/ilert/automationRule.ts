// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AutomationRule extends pulumi.CustomResource {
    /**
     * Get an existing AutomationRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AutomationRuleState, opts?: pulumi.CustomResourceOptions): AutomationRule {
        return new AutomationRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ilert:index/automationRule:AutomationRule';

    /**
     * Returns true if the given object is an instance of AutomationRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AutomationRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AutomationRule.__pulumiType;
    }

    public readonly alertSource!: pulumi.Output<outputs.AutomationRuleAlertSource>;
    public readonly alertType!: pulumi.Output<string>;
    public readonly resolveIncident!: pulumi.Output<boolean | undefined>;
    public readonly resolveService!: pulumi.Output<boolean | undefined>;
    public readonly sendNotification!: pulumi.Output<boolean | undefined>;
    public readonly service!: pulumi.Output<outputs.AutomationRuleService>;
    public readonly serviceStatus!: pulumi.Output<string>;
    public readonly template!: pulumi.Output<outputs.AutomationRuleTemplate | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.AutomationRuleTimeouts | undefined>;

    /**
     * Create a AutomationRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AutomationRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AutomationRuleArgs | AutomationRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AutomationRuleState | undefined;
            resourceInputs["alertSource"] = state ? state.alertSource : undefined;
            resourceInputs["alertType"] = state ? state.alertType : undefined;
            resourceInputs["resolveIncident"] = state ? state.resolveIncident : undefined;
            resourceInputs["resolveService"] = state ? state.resolveService : undefined;
            resourceInputs["sendNotification"] = state ? state.sendNotification : undefined;
            resourceInputs["service"] = state ? state.service : undefined;
            resourceInputs["serviceStatus"] = state ? state.serviceStatus : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as AutomationRuleArgs | undefined;
            if ((!args || args.alertSource === undefined) && !opts.urn) {
                throw new Error("Missing required property 'alertSource'");
            }
            if ((!args || args.alertType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'alertType'");
            }
            if ((!args || args.service === undefined) && !opts.urn) {
                throw new Error("Missing required property 'service'");
            }
            if ((!args || args.serviceStatus === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceStatus'");
            }
            resourceInputs["alertSource"] = args ? args.alertSource : undefined;
            resourceInputs["alertType"] = args ? args.alertType : undefined;
            resourceInputs["resolveIncident"] = args ? args.resolveIncident : undefined;
            resourceInputs["resolveService"] = args ? args.resolveService : undefined;
            resourceInputs["sendNotification"] = args ? args.sendNotification : undefined;
            resourceInputs["service"] = args ? args.service : undefined;
            resourceInputs["serviceStatus"] = args ? args.serviceStatus : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AutomationRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AutomationRule resources.
 */
export interface AutomationRuleState {
    alertSource?: pulumi.Input<inputs.AutomationRuleAlertSource>;
    alertType?: pulumi.Input<string>;
    resolveIncident?: pulumi.Input<boolean>;
    resolveService?: pulumi.Input<boolean>;
    sendNotification?: pulumi.Input<boolean>;
    service?: pulumi.Input<inputs.AutomationRuleService>;
    serviceStatus?: pulumi.Input<string>;
    template?: pulumi.Input<inputs.AutomationRuleTemplate>;
    timeouts?: pulumi.Input<inputs.AutomationRuleTimeouts>;
}

/**
 * The set of arguments for constructing a AutomationRule resource.
 */
export interface AutomationRuleArgs {
    alertSource: pulumi.Input<inputs.AutomationRuleAlertSource>;
    alertType: pulumi.Input<string>;
    resolveIncident?: pulumi.Input<boolean>;
    resolveService?: pulumi.Input<boolean>;
    sendNotification?: pulumi.Input<boolean>;
    service: pulumi.Input<inputs.AutomationRuleService>;
    serviceStatus: pulumi.Input<string>;
    template?: pulumi.Input<inputs.AutomationRuleTemplate>;
    timeouts?: pulumi.Input<inputs.AutomationRuleTimeouts>;
}
