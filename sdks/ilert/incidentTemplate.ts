// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IncidentTemplate extends pulumi.CustomResource {
    /**
     * Get an existing IncidentTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IncidentTemplateState, opts?: pulumi.CustomResourceOptions): IncidentTemplate {
        return new IncidentTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ilert:index/incidentTemplate:IncidentTemplate';

    /**
     * Returns true if the given object is an instance of IncidentTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IncidentTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IncidentTemplate.__pulumiType;
    }

    public readonly message!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly sendNotification!: pulumi.Output<boolean | undefined>;
    public readonly status!: pulumi.Output<string>;
    public readonly summary!: pulumi.Output<string>;
    public readonly teams!: pulumi.Output<outputs.IncidentTemplateTeam[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.IncidentTemplateTimeouts | undefined>;

    /**
     * Create a IncidentTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IncidentTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IncidentTemplateArgs | IncidentTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IncidentTemplateState | undefined;
            resourceInputs["message"] = state ? state.message : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["sendNotification"] = state ? state.sendNotification : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["summary"] = state ? state.summary : undefined;
            resourceInputs["teams"] = state ? state.teams : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as IncidentTemplateArgs | undefined;
            if ((!args || args.status === undefined) && !opts.urn) {
                throw new Error("Missing required property 'status'");
            }
            if ((!args || args.summary === undefined) && !opts.urn) {
                throw new Error("Missing required property 'summary'");
            }
            resourceInputs["message"] = args ? args.message : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["sendNotification"] = args ? args.sendNotification : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["summary"] = args ? args.summary : undefined;
            resourceInputs["teams"] = args ? args.teams : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IncidentTemplate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IncidentTemplate resources.
 */
export interface IncidentTemplateState {
    message?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    sendNotification?: pulumi.Input<boolean>;
    status?: pulumi.Input<string>;
    summary?: pulumi.Input<string>;
    teams?: pulumi.Input<pulumi.Input<inputs.IncidentTemplateTeam>[]>;
    timeouts?: pulumi.Input<inputs.IncidentTemplateTimeouts>;
}

/**
 * The set of arguments for constructing a IncidentTemplate resource.
 */
export interface IncidentTemplateArgs {
    message?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    sendNotification?: pulumi.Input<boolean>;
    status: pulumi.Input<string>;
    summary: pulumi.Input<string>;
    teams?: pulumi.Input<pulumi.Input<inputs.IncidentTemplateTeam>[]>;
    timeouts?: pulumi.Input<inputs.IncidentTemplateTimeouts>;
}
