// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class UptimeMonitor extends pulumi.CustomResource {
    /**
     * Get an existing UptimeMonitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UptimeMonitorState, opts?: pulumi.CustomResourceOptions): UptimeMonitor {
        return new UptimeMonitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ilert:index/uptimeMonitor:UptimeMonitor';

    /**
     * Returns true if the given object is an instance of UptimeMonitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UptimeMonitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UptimeMonitor.__pulumiType;
    }

    public readonly checkParams!: pulumi.Output<outputs.UptimeMonitorCheckParams>;
    public readonly checkType!: pulumi.Output<string>;
    public readonly createAlertAfterFailedChecks!: pulumi.Output<number | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly createIncidentAfterFailedChecks!: pulumi.Output<number | undefined>;
    public /*out*/ readonly embedUrl!: pulumi.Output<string>;
    public readonly escalationPolicy!: pulumi.Output<string>;
    public readonly intervalSec!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly paused!: pulumi.Output<boolean | undefined>;
    public readonly region!: pulumi.Output<string | undefined>;
    public /*out*/ readonly shareUrl!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeoutMs!: pulumi.Output<number | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.UptimeMonitorTimeouts | undefined>;

    /**
     * Create a UptimeMonitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UptimeMonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UptimeMonitorArgs | UptimeMonitorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UptimeMonitorState | undefined;
            resourceInputs["checkParams"] = state ? state.checkParams : undefined;
            resourceInputs["checkType"] = state ? state.checkType : undefined;
            resourceInputs["createAlertAfterFailedChecks"] = state ? state.createAlertAfterFailedChecks : undefined;
            resourceInputs["createIncidentAfterFailedChecks"] = state ? state.createIncidentAfterFailedChecks : undefined;
            resourceInputs["embedUrl"] = state ? state.embedUrl : undefined;
            resourceInputs["escalationPolicy"] = state ? state.escalationPolicy : undefined;
            resourceInputs["intervalSec"] = state ? state.intervalSec : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["paused"] = state ? state.paused : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["shareUrl"] = state ? state.shareUrl : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeoutMs"] = state ? state.timeoutMs : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as UptimeMonitorArgs | undefined;
            if ((!args || args.checkParams === undefined) && !opts.urn) {
                throw new Error("Missing required property 'checkParams'");
            }
            if ((!args || args.checkType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'checkType'");
            }
            if ((!args || args.escalationPolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'escalationPolicy'");
            }
            resourceInputs["checkParams"] = args ? args.checkParams : undefined;
            resourceInputs["checkType"] = args ? args.checkType : undefined;
            resourceInputs["createAlertAfterFailedChecks"] = args ? args.createAlertAfterFailedChecks : undefined;
            resourceInputs["createIncidentAfterFailedChecks"] = args ? args.createIncidentAfterFailedChecks : undefined;
            resourceInputs["escalationPolicy"] = args ? args.escalationPolicy : undefined;
            resourceInputs["intervalSec"] = args ? args.intervalSec : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["paused"] = args ? args.paused : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["timeoutMs"] = args ? args.timeoutMs : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["embedUrl"] = undefined /*out*/;
            resourceInputs["shareUrl"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UptimeMonitor.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering UptimeMonitor resources.
 */
export interface UptimeMonitorState {
    checkParams?: pulumi.Input<inputs.UptimeMonitorCheckParams>;
    checkType?: pulumi.Input<string>;
    createAlertAfterFailedChecks?: pulumi.Input<number>;
    /**
     * @deprecated Deprecated
     */
    createIncidentAfterFailedChecks?: pulumi.Input<number>;
    embedUrl?: pulumi.Input<string>;
    escalationPolicy?: pulumi.Input<string>;
    intervalSec?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    paused?: pulumi.Input<boolean>;
    region?: pulumi.Input<string>;
    shareUrl?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeoutMs?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.UptimeMonitorTimeouts>;
}

/**
 * The set of arguments for constructing a UptimeMonitor resource.
 */
export interface UptimeMonitorArgs {
    checkParams: pulumi.Input<inputs.UptimeMonitorCheckParams>;
    checkType: pulumi.Input<string>;
    createAlertAfterFailedChecks?: pulumi.Input<number>;
    /**
     * @deprecated Deprecated
     */
    createIncidentAfterFailedChecks?: pulumi.Input<number>;
    escalationPolicy: pulumi.Input<string>;
    intervalSec?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    paused?: pulumi.Input<boolean>;
    region?: pulumi.Input<string>;
    timeoutMs?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.UptimeMonitorTimeouts>;
}
