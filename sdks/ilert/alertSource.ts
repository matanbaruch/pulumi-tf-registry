// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AlertSource extends pulumi.CustomResource {
    /**
     * Get an existing AlertSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlertSourceState, opts?: pulumi.CustomResourceOptions): AlertSource {
        return new AlertSource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ilert:index/alertSource:AlertSource';

    /**
     * Returns true if the given object is an instance of AlertSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AlertSource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlertSource.__pulumiType;
    }

    public readonly active!: pulumi.Output<boolean | undefined>;
    public readonly alertCreation!: pulumi.Output<string | undefined>;
    public readonly alertGroupingWindow!: pulumi.Output<string | undefined>;
    public readonly alertPriorityRule!: pulumi.Output<string | undefined>;
    public readonly autoResolutionTimeout!: pulumi.Output<string | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly autotaskMetadata!: pulumi.Output<outputs.AlertSourceAutotaskMetadata | undefined>;
    public readonly detailsTemplate!: pulumi.Output<outputs.AlertSourceDetailsTemplate | undefined>;
    public readonly email!: pulumi.Output<string | undefined>;
    public readonly emailFiltered!: pulumi.Output<boolean | undefined>;
    public readonly emailPredicates!: pulumi.Output<outputs.AlertSourceEmailPredicate[] | undefined>;
    public readonly emailResolveFiltered!: pulumi.Output<boolean | undefined>;
    public readonly emailResolvePredicates!: pulumi.Output<outputs.AlertSourceEmailResolvePredicate[] | undefined>;
    /**
     * The escalation policy specifies who will be notified when an alert is created by this alert source
     */
    public readonly escalationPolicy!: pulumi.Output<string>;
    public readonly eventFilter!: pulumi.Output<string | undefined>;
    public readonly filterOperator!: pulumi.Output<string | undefined>;
    /**
     * A heartbeat alert source will automatically create an alert if it does not receive a heartbeat signal from your app at
     * regular intervals.
     */
    public readonly heartbeat!: pulumi.Output<outputs.AlertSourceHeartbeat | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly incidentCreation!: pulumi.Output<string | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly incidentPriorityRule!: pulumi.Output<string | undefined>;
    public /*out*/ readonly integrationKey!: pulumi.Output<string>;
    public readonly integrationType!: pulumi.Output<string>;
    public /*out*/ readonly integrationUrl!: pulumi.Output<string>;
    public readonly linkTemplates!: pulumi.Output<outputs.AlertSourceLinkTemplate[] | undefined>;
    /**
     * The name of the resource, also acts as it's unique ID
     */
    public readonly name!: pulumi.Output<string>;
    public readonly priorityTemplate!: pulumi.Output<outputs.AlertSourcePriorityTemplate | undefined>;
    public readonly resolveFilterOperator!: pulumi.Output<string | undefined>;
    public readonly resolveKeyExtractor!: pulumi.Output<outputs.AlertSourceResolveKeyExtractor | undefined>;
    public readonly routingTemplate!: pulumi.Output<outputs.AlertSourceRoutingTemplate | undefined>;
    public readonly scoreThreshold!: pulumi.Output<number | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly summaryTemplate!: pulumi.Output<outputs.AlertSourceSummaryTemplate | undefined>;
    public readonly supportHours!: pulumi.Output<outputs.AlertSourceSupportHours | undefined>;
    public readonly team!: pulumi.Output<outputs.AlertSourceTeam[] | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly teams!: pulumi.Output<number[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.AlertSourceTimeouts | undefined>;

    /**
     * Create a AlertSource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlertSourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlertSourceArgs | AlertSourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlertSourceState | undefined;
            resourceInputs["active"] = state ? state.active : undefined;
            resourceInputs["alertCreation"] = state ? state.alertCreation : undefined;
            resourceInputs["alertGroupingWindow"] = state ? state.alertGroupingWindow : undefined;
            resourceInputs["alertPriorityRule"] = state ? state.alertPriorityRule : undefined;
            resourceInputs["autoResolutionTimeout"] = state ? state.autoResolutionTimeout : undefined;
            resourceInputs["autotaskMetadata"] = state ? state.autotaskMetadata : undefined;
            resourceInputs["detailsTemplate"] = state ? state.detailsTemplate : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["emailFiltered"] = state ? state.emailFiltered : undefined;
            resourceInputs["emailPredicates"] = state ? state.emailPredicates : undefined;
            resourceInputs["emailResolveFiltered"] = state ? state.emailResolveFiltered : undefined;
            resourceInputs["emailResolvePredicates"] = state ? state.emailResolvePredicates : undefined;
            resourceInputs["escalationPolicy"] = state ? state.escalationPolicy : undefined;
            resourceInputs["eventFilter"] = state ? state.eventFilter : undefined;
            resourceInputs["filterOperator"] = state ? state.filterOperator : undefined;
            resourceInputs["heartbeat"] = state ? state.heartbeat : undefined;
            resourceInputs["incidentCreation"] = state ? state.incidentCreation : undefined;
            resourceInputs["incidentPriorityRule"] = state ? state.incidentPriorityRule : undefined;
            resourceInputs["integrationKey"] = state ? state.integrationKey : undefined;
            resourceInputs["integrationType"] = state ? state.integrationType : undefined;
            resourceInputs["integrationUrl"] = state ? state.integrationUrl : undefined;
            resourceInputs["linkTemplates"] = state ? state.linkTemplates : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["priorityTemplate"] = state ? state.priorityTemplate : undefined;
            resourceInputs["resolveFilterOperator"] = state ? state.resolveFilterOperator : undefined;
            resourceInputs["resolveKeyExtractor"] = state ? state.resolveKeyExtractor : undefined;
            resourceInputs["routingTemplate"] = state ? state.routingTemplate : undefined;
            resourceInputs["scoreThreshold"] = state ? state.scoreThreshold : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["summaryTemplate"] = state ? state.summaryTemplate : undefined;
            resourceInputs["supportHours"] = state ? state.supportHours : undefined;
            resourceInputs["team"] = state ? state.team : undefined;
            resourceInputs["teams"] = state ? state.teams : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as AlertSourceArgs | undefined;
            if ((!args || args.escalationPolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'escalationPolicy'");
            }
            if ((!args || args.integrationType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'integrationType'");
            }
            resourceInputs["active"] = args ? args.active : undefined;
            resourceInputs["alertCreation"] = args ? args.alertCreation : undefined;
            resourceInputs["alertGroupingWindow"] = args ? args.alertGroupingWindow : undefined;
            resourceInputs["alertPriorityRule"] = args ? args.alertPriorityRule : undefined;
            resourceInputs["autoResolutionTimeout"] = args ? args.autoResolutionTimeout : undefined;
            resourceInputs["autotaskMetadata"] = args ? args.autotaskMetadata : undefined;
            resourceInputs["detailsTemplate"] = args ? args.detailsTemplate : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["emailFiltered"] = args ? args.emailFiltered : undefined;
            resourceInputs["emailPredicates"] = args ? args.emailPredicates : undefined;
            resourceInputs["emailResolveFiltered"] = args ? args.emailResolveFiltered : undefined;
            resourceInputs["emailResolvePredicates"] = args ? args.emailResolvePredicates : undefined;
            resourceInputs["escalationPolicy"] = args ? args.escalationPolicy : undefined;
            resourceInputs["eventFilter"] = args ? args.eventFilter : undefined;
            resourceInputs["filterOperator"] = args ? args.filterOperator : undefined;
            resourceInputs["heartbeat"] = args ? args.heartbeat : undefined;
            resourceInputs["incidentCreation"] = args ? args.incidentCreation : undefined;
            resourceInputs["incidentPriorityRule"] = args ? args.incidentPriorityRule : undefined;
            resourceInputs["integrationType"] = args ? args.integrationType : undefined;
            resourceInputs["linkTemplates"] = args ? args.linkTemplates : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["priorityTemplate"] = args ? args.priorityTemplate : undefined;
            resourceInputs["resolveFilterOperator"] = args ? args.resolveFilterOperator : undefined;
            resourceInputs["resolveKeyExtractor"] = args ? args.resolveKeyExtractor : undefined;
            resourceInputs["routingTemplate"] = args ? args.routingTemplate : undefined;
            resourceInputs["scoreThreshold"] = args ? args.scoreThreshold : undefined;
            resourceInputs["summaryTemplate"] = args ? args.summaryTemplate : undefined;
            resourceInputs["supportHours"] = args ? args.supportHours : undefined;
            resourceInputs["team"] = args ? args.team : undefined;
            resourceInputs["teams"] = args ? args.teams : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["integrationKey"] = undefined /*out*/;
            resourceInputs["integrationUrl"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["integrationKey", "integrationUrl"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AlertSource.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AlertSource resources.
 */
export interface AlertSourceState {
    active?: pulumi.Input<boolean>;
    alertCreation?: pulumi.Input<string>;
    alertGroupingWindow?: pulumi.Input<string>;
    alertPriorityRule?: pulumi.Input<string>;
    autoResolutionTimeout?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    autotaskMetadata?: pulumi.Input<inputs.AlertSourceAutotaskMetadata>;
    detailsTemplate?: pulumi.Input<inputs.AlertSourceDetailsTemplate>;
    email?: pulumi.Input<string>;
    emailFiltered?: pulumi.Input<boolean>;
    emailPredicates?: pulumi.Input<pulumi.Input<inputs.AlertSourceEmailPredicate>[]>;
    emailResolveFiltered?: pulumi.Input<boolean>;
    emailResolvePredicates?: pulumi.Input<pulumi.Input<inputs.AlertSourceEmailResolvePredicate>[]>;
    /**
     * The escalation policy specifies who will be notified when an alert is created by this alert source
     */
    escalationPolicy?: pulumi.Input<string>;
    eventFilter?: pulumi.Input<string>;
    filterOperator?: pulumi.Input<string>;
    /**
     * A heartbeat alert source will automatically create an alert if it does not receive a heartbeat signal from your app at
     * regular intervals.
     */
    heartbeat?: pulumi.Input<inputs.AlertSourceHeartbeat>;
    /**
     * @deprecated Deprecated
     */
    incidentCreation?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    incidentPriorityRule?: pulumi.Input<string>;
    integrationKey?: pulumi.Input<string>;
    integrationType?: pulumi.Input<string>;
    integrationUrl?: pulumi.Input<string>;
    linkTemplates?: pulumi.Input<pulumi.Input<inputs.AlertSourceLinkTemplate>[]>;
    /**
     * The name of the resource, also acts as it's unique ID
     */
    name?: pulumi.Input<string>;
    priorityTemplate?: pulumi.Input<inputs.AlertSourcePriorityTemplate>;
    resolveFilterOperator?: pulumi.Input<string>;
    resolveKeyExtractor?: pulumi.Input<inputs.AlertSourceResolveKeyExtractor>;
    routingTemplate?: pulumi.Input<inputs.AlertSourceRoutingTemplate>;
    scoreThreshold?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    summaryTemplate?: pulumi.Input<inputs.AlertSourceSummaryTemplate>;
    supportHours?: pulumi.Input<inputs.AlertSourceSupportHours>;
    team?: pulumi.Input<pulumi.Input<inputs.AlertSourceTeam>[]>;
    /**
     * @deprecated Deprecated
     */
    teams?: pulumi.Input<pulumi.Input<number>[]>;
    timeouts?: pulumi.Input<inputs.AlertSourceTimeouts>;
}

/**
 * The set of arguments for constructing a AlertSource resource.
 */
export interface AlertSourceArgs {
    active?: pulumi.Input<boolean>;
    alertCreation?: pulumi.Input<string>;
    alertGroupingWindow?: pulumi.Input<string>;
    alertPriorityRule?: pulumi.Input<string>;
    autoResolutionTimeout?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    autotaskMetadata?: pulumi.Input<inputs.AlertSourceAutotaskMetadata>;
    detailsTemplate?: pulumi.Input<inputs.AlertSourceDetailsTemplate>;
    email?: pulumi.Input<string>;
    emailFiltered?: pulumi.Input<boolean>;
    emailPredicates?: pulumi.Input<pulumi.Input<inputs.AlertSourceEmailPredicate>[]>;
    emailResolveFiltered?: pulumi.Input<boolean>;
    emailResolvePredicates?: pulumi.Input<pulumi.Input<inputs.AlertSourceEmailResolvePredicate>[]>;
    /**
     * The escalation policy specifies who will be notified when an alert is created by this alert source
     */
    escalationPolicy: pulumi.Input<string>;
    eventFilter?: pulumi.Input<string>;
    filterOperator?: pulumi.Input<string>;
    /**
     * A heartbeat alert source will automatically create an alert if it does not receive a heartbeat signal from your app at
     * regular intervals.
     */
    heartbeat?: pulumi.Input<inputs.AlertSourceHeartbeat>;
    /**
     * @deprecated Deprecated
     */
    incidentCreation?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    incidentPriorityRule?: pulumi.Input<string>;
    integrationType: pulumi.Input<string>;
    linkTemplates?: pulumi.Input<pulumi.Input<inputs.AlertSourceLinkTemplate>[]>;
    /**
     * The name of the resource, also acts as it's unique ID
     */
    name?: pulumi.Input<string>;
    priorityTemplate?: pulumi.Input<inputs.AlertSourcePriorityTemplate>;
    resolveFilterOperator?: pulumi.Input<string>;
    resolveKeyExtractor?: pulumi.Input<inputs.AlertSourceResolveKeyExtractor>;
    routingTemplate?: pulumi.Input<inputs.AlertSourceRoutingTemplate>;
    scoreThreshold?: pulumi.Input<number>;
    summaryTemplate?: pulumi.Input<inputs.AlertSourceSummaryTemplate>;
    supportHours?: pulumi.Input<inputs.AlertSourceSupportHours>;
    team?: pulumi.Input<pulumi.Input<inputs.AlertSourceTeam>[]>;
    /**
     * @deprecated Deprecated
     */
    teams?: pulumi.Input<pulumi.Input<number>[]>;
    timeouts?: pulumi.Input<inputs.AlertSourceTimeouts>;
}
