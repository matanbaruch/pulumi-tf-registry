// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Metric extends pulumi.CustomResource {
    /**
     * Get an existing Metric resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MetricState, opts?: pulumi.CustomResourceOptions): Metric {
        return new Metric(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ilert:index/metric:Metric';

    /**
     * Returns true if the given object is an instance of Metric.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Metric {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Metric.__pulumiType;
    }

    public readonly aggregationType!: pulumi.Output<string>;
    public readonly dataSource!: pulumi.Output<outputs.MetricDataSource | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly displayType!: pulumi.Output<string>;
    public readonly interpolateGaps!: pulumi.Output<boolean | undefined>;
    public readonly lockYAxisMax!: pulumi.Output<number | undefined>;
    public readonly lockYAxisMin!: pulumi.Output<number | undefined>;
    public readonly metadata!: pulumi.Output<outputs.MetricMetadata | undefined>;
    public readonly mouseOverDecimal!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly showValuesOnMouseOver!: pulumi.Output<boolean | undefined>;
    public readonly teams!: pulumi.Output<outputs.MetricTeam[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.MetricTimeouts | undefined>;
    public readonly unitLabel!: pulumi.Output<string | undefined>;

    /**
     * Create a Metric resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MetricArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MetricArgs | MetricState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MetricState | undefined;
            resourceInputs["aggregationType"] = state ? state.aggregationType : undefined;
            resourceInputs["dataSource"] = state ? state.dataSource : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayType"] = state ? state.displayType : undefined;
            resourceInputs["interpolateGaps"] = state ? state.interpolateGaps : undefined;
            resourceInputs["lockYAxisMax"] = state ? state.lockYAxisMax : undefined;
            resourceInputs["lockYAxisMin"] = state ? state.lockYAxisMin : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["mouseOverDecimal"] = state ? state.mouseOverDecimal : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["showValuesOnMouseOver"] = state ? state.showValuesOnMouseOver : undefined;
            resourceInputs["teams"] = state ? state.teams : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["unitLabel"] = state ? state.unitLabel : undefined;
        } else {
            const args = argsOrState as MetricArgs | undefined;
            if ((!args || args.aggregationType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aggregationType'");
            }
            if ((!args || args.displayType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayType'");
            }
            resourceInputs["aggregationType"] = args ? args.aggregationType : undefined;
            resourceInputs["dataSource"] = args ? args.dataSource : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayType"] = args ? args.displayType : undefined;
            resourceInputs["interpolateGaps"] = args ? args.interpolateGaps : undefined;
            resourceInputs["lockYAxisMax"] = args ? args.lockYAxisMax : undefined;
            resourceInputs["lockYAxisMin"] = args ? args.lockYAxisMin : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["mouseOverDecimal"] = args ? args.mouseOverDecimal : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["showValuesOnMouseOver"] = args ? args.showValuesOnMouseOver : undefined;
            resourceInputs["teams"] = args ? args.teams : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["unitLabel"] = args ? args.unitLabel : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Metric.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Metric resources.
 */
export interface MetricState {
    aggregationType?: pulumi.Input<string>;
    dataSource?: pulumi.Input<inputs.MetricDataSource>;
    description?: pulumi.Input<string>;
    displayType?: pulumi.Input<string>;
    interpolateGaps?: pulumi.Input<boolean>;
    lockYAxisMax?: pulumi.Input<number>;
    lockYAxisMin?: pulumi.Input<number>;
    metadata?: pulumi.Input<inputs.MetricMetadata>;
    mouseOverDecimal?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    showValuesOnMouseOver?: pulumi.Input<boolean>;
    teams?: pulumi.Input<pulumi.Input<inputs.MetricTeam>[]>;
    timeouts?: pulumi.Input<inputs.MetricTimeouts>;
    unitLabel?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Metric resource.
 */
export interface MetricArgs {
    aggregationType: pulumi.Input<string>;
    dataSource?: pulumi.Input<inputs.MetricDataSource>;
    description?: pulumi.Input<string>;
    displayType: pulumi.Input<string>;
    interpolateGaps?: pulumi.Input<boolean>;
    lockYAxisMax?: pulumi.Input<number>;
    lockYAxisMin?: pulumi.Input<number>;
    metadata?: pulumi.Input<inputs.MetricMetadata>;
    mouseOverDecimal?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    showValuesOnMouseOver?: pulumi.Input<boolean>;
    teams?: pulumi.Input<pulumi.Input<inputs.MetricTeam>[]>;
    timeouts?: pulumi.Input<inputs.MetricTimeouts>;
    unitLabel?: pulumi.Input<string>;
}
