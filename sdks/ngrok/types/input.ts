// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AgentIngressCertificateManagementPolicy {
    /**
     * certificate authority to request certificates from. The only supported value is letsencrypt.
     */
    authority?: pulumi.Input<string>;
    /**
     * type of private key to use when requesting certificates. Defaults to rsa, can be either rsa or ecdsa.
     */
    privateKeyType?: pulumi.Input<string>;
}

export interface EventDestinationTarget {
    /**
     * Configuration used to send events to Amazon CloudWatch Logs.
     */
    cloudwatchLogs?: pulumi.Input<pulumi.Input<inputs.EventDestinationTargetCloudwatchLog>[]>;
    /**
     * Configuration used to send events to Datadog.
     */
    datadogs?: pulumi.Input<pulumi.Input<inputs.EventDestinationTargetDatadog>[]>;
    /**
     * Configuration used for internal debugging.
     */
    debugs?: pulumi.Input<pulumi.Input<inputs.EventDestinationTargetDebug>[]>;
    /**
     * Configuration used to send events to Amazon Kinesis Data Firehose.
     */
    firehoses?: pulumi.Input<pulumi.Input<inputs.EventDestinationTargetFirehose>[]>;
    /**
     * Configuration used to send events to Amazon Kinesis.
     */
    kineses?: pulumi.Input<pulumi.Input<inputs.EventDestinationTargetKinese>[]>;
}

export interface EventDestinationTargetCloudwatchLog {
    /**
     * Configuration for how to authenticate into your AWS account. Exactly one of `role` or `creds` should be configured.
     */
    auths?: pulumi.Input<pulumi.Input<inputs.EventDestinationTargetCloudwatchLogAuth>[]>;
    /**
     * An Amazon Resource Name specifying the CloudWatch Logs group to deposit events into.
     */
    logGroupArn?: pulumi.Input<string>;
}

export interface EventDestinationTargetCloudwatchLogAuth {
    /**
     * Credentials to your AWS account if you prefer ngrok to sign in with long-term access keys.
     */
    creds?: pulumi.Input<pulumi.Input<inputs.EventDestinationTargetCloudwatchLogAuthCred>[]>;
    /**
     * A role for ngrok to assume on your behalf to deposit events into your AWS account.
     */
    roles?: pulumi.Input<pulumi.Input<inputs.EventDestinationTargetCloudwatchLogAuthRole>[]>;
}

export interface EventDestinationTargetCloudwatchLogAuthCred {
    /**
     * The ID portion of an AWS access key.
     */
    awsAccessKeyId: pulumi.Input<string>;
    /**
     * The secret portion of an AWS access key.
     */
    awsSecretAccessKey: pulumi.Input<string>;
}

export interface EventDestinationTargetCloudwatchLogAuthRole {
    /**
     * An ARN that specifies the role that ngrok should use to deliver to the configured target.
     */
    roleArn: pulumi.Input<string>;
}

export interface EventDestinationTargetDatadog {
    /**
     * Datadog API key to use.
     */
    apiKey?: pulumi.Input<string>;
    /**
     * Datadog site to send event to.
     */
    ddsite?: pulumi.Input<string>;
    /**
     * Tags to send with the event.
     */
    ddtags?: pulumi.Input<string>;
    /**
     * Service name to send with the event.
     */
    service?: pulumi.Input<string>;
}

export interface EventDestinationTargetDebug {
    /**
     * URL to send events to.
     */
    callbackUrl?: pulumi.Input<string>;
    /**
     * Whether or not to output to publisher service logs.
     */
    log?: pulumi.Input<boolean>;
}

export interface EventDestinationTargetFirehose {
    /**
     * Configuration for how to authenticate into your AWS account. Exactly one of `role` or `creds` should be configured.
     */
    auths?: pulumi.Input<pulumi.Input<inputs.EventDestinationTargetFirehoseAuth>[]>;
    /**
     * An Amazon Resource Name specifying the Firehose delivery stream to deposit events into.
     */
    deliveryStreamArn?: pulumi.Input<string>;
}

export interface EventDestinationTargetFirehoseAuth {
    /**
     * Credentials to your AWS account if you prefer ngrok to sign in with long-term access keys.
     */
    creds?: pulumi.Input<pulumi.Input<inputs.EventDestinationTargetFirehoseAuthCred>[]>;
    /**
     * A role for ngrok to assume on your behalf to deposit events into your AWS account.
     */
    roles?: pulumi.Input<pulumi.Input<inputs.EventDestinationTargetFirehoseAuthRole>[]>;
}

export interface EventDestinationTargetFirehoseAuthCred {
    /**
     * The ID portion of an AWS access key.
     */
    awsAccessKeyId: pulumi.Input<string>;
    /**
     * The secret portion of an AWS access key.
     */
    awsSecretAccessKey: pulumi.Input<string>;
}

export interface EventDestinationTargetFirehoseAuthRole {
    /**
     * An ARN that specifies the role that ngrok should use to deliver to the configured target.
     */
    roleArn: pulumi.Input<string>;
}

export interface EventDestinationTargetKinese {
    /**
     * Configuration for how to authenticate into your AWS account. Exactly one of `role` or `creds` should be configured.
     */
    auths?: pulumi.Input<pulumi.Input<inputs.EventDestinationTargetKineseAuth>[]>;
    /**
     * An Amazon Resource Name specifying the Kinesis stream to deposit events into.
     */
    streamArn?: pulumi.Input<string>;
}

export interface EventDestinationTargetKineseAuth {
    /**
     * Credentials to your AWS account if you prefer ngrok to sign in with long-term access keys.
     */
    creds?: pulumi.Input<pulumi.Input<inputs.EventDestinationTargetKineseAuthCred>[]>;
    /**
     * A role for ngrok to assume on your behalf to deposit events into your AWS account.
     */
    roles?: pulumi.Input<pulumi.Input<inputs.EventDestinationTargetKineseAuthRole>[]>;
}

export interface EventDestinationTargetKineseAuthCred {
    /**
     * The ID portion of an AWS access key.
     */
    awsAccessKeyId: pulumi.Input<string>;
    /**
     * The secret portion of an AWS access key.
     */
    awsSecretAccessKey: pulumi.Input<string>;
}

export interface EventDestinationTargetKineseAuthRole {
    /**
     * An ARN that specifies the role that ngrok should use to deliver to the configured target.
     */
    roleArn: pulumi.Input<string>;
}

export interface EventSubscriptionSource {
    /**
     * TODO
     */
    fields?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * TODO
     */
    filter?: pulumi.Input<string>;
    /**
     * Type of event for which an event subscription will trigger
     */
    type?: pulumi.Input<string>;
    /**
     * URI of the Event Source API resource.
     */
    uri?: pulumi.Input<string>;
}

export interface ReservedDomainCertificateManagementPolicy {
    /**
     * certificate authority to request certificates from. The only supported value is letsencrypt.
     */
    authority?: pulumi.Input<string>;
    /**
     * type of private key to use when requesting certificates. Defaults to rsa, can be either rsa or ecdsa.
     */
    privateKeyType?: pulumi.Input<string>;
}

export interface TlsCertificateSubjectAlternativeName {
    dnsNames: pulumi.Input<pulumi.Input<string>[]>;
    ips: pulumi.Input<pulumi.Input<string>[]>;
}

export interface TunnelGroupBackendTunnel {
    id: pulumi.Input<string>;
    uri: pulumi.Input<string>;
}
