// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class TlsCertificate extends pulumi.CustomResource {
    /**
     * Get an existing TlsCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TlsCertificateState, opts?: pulumi.CustomResourceOptions): TlsCertificate {
        return new TlsCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ngrok:index/tlsCertificate:TlsCertificate';

    /**
     * Returns true if the given object is an instance of TlsCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TlsCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TlsCertificate.__pulumiType;
    }

    /**
     * chain of PEM-encoded certificates, leaf first. See [Certificate
     * Bundles](https://ngrok.com/docs/cloud-edge/endpoints#certificate-chains).
     */
    public readonly certificatePem!: pulumi.Output<string>;
    /**
     * human-readable description of this TLS certificate. optional, max 255 bytes.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * arbitrary user-defined machine-readable data of this TLS certificate. optional, max 4096 bytes.
     */
    public readonly metadata!: pulumi.Output<string | undefined>;
    /**
     * private key for the TLS certificate, PEM-encoded. See [Private
     * Keys](https://ngrok.com/docs/cloud-edge/endpoints#private-keys).
     */
    public readonly privateKeyPem!: pulumi.Output<string>;
    /**
     * subject alternative names (SANs) from the leaf of this TLS certificate
     */
    public /*out*/ readonly subjectAlternativeNames!: pulumi.Output<outputs.TlsCertificateSubjectAlternativeName[]>;

    /**
     * Create a TlsCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TlsCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TlsCertificateArgs | TlsCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TlsCertificateState | undefined;
            resourceInputs["certificatePem"] = state ? state.certificatePem : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["privateKeyPem"] = state ? state.privateKeyPem : undefined;
            resourceInputs["subjectAlternativeNames"] = state ? state.subjectAlternativeNames : undefined;
        } else {
            const args = argsOrState as TlsCertificateArgs | undefined;
            if ((!args || args.certificatePem === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificatePem'");
            }
            if ((!args || args.privateKeyPem === undefined) && !opts.urn) {
                throw new Error("Missing required property 'privateKeyPem'");
            }
            resourceInputs["certificatePem"] = args ? args.certificatePem : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["privateKeyPem"] = args ? args.privateKeyPem : undefined;
            resourceInputs["subjectAlternativeNames"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TlsCertificate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering TlsCertificate resources.
 */
export interface TlsCertificateState {
    /**
     * chain of PEM-encoded certificates, leaf first. See [Certificate
     * Bundles](https://ngrok.com/docs/cloud-edge/endpoints#certificate-chains).
     */
    certificatePem?: pulumi.Input<string>;
    /**
     * human-readable description of this TLS certificate. optional, max 255 bytes.
     */
    description?: pulumi.Input<string>;
    /**
     * arbitrary user-defined machine-readable data of this TLS certificate. optional, max 4096 bytes.
     */
    metadata?: pulumi.Input<string>;
    /**
     * private key for the TLS certificate, PEM-encoded. See [Private
     * Keys](https://ngrok.com/docs/cloud-edge/endpoints#private-keys).
     */
    privateKeyPem?: pulumi.Input<string>;
    /**
     * subject alternative names (SANs) from the leaf of this TLS certificate
     */
    subjectAlternativeNames?: pulumi.Input<pulumi.Input<inputs.TlsCertificateSubjectAlternativeName>[]>;
}

/**
 * The set of arguments for constructing a TlsCertificate resource.
 */
export interface TlsCertificateArgs {
    /**
     * chain of PEM-encoded certificates, leaf first. See [Certificate
     * Bundles](https://ngrok.com/docs/cloud-edge/endpoints#certificate-chains).
     */
    certificatePem: pulumi.Input<string>;
    /**
     * human-readable description of this TLS certificate. optional, max 255 bytes.
     */
    description?: pulumi.Input<string>;
    /**
     * arbitrary user-defined machine-readable data of this TLS certificate. optional, max 4096 bytes.
     */
    metadata?: pulumi.Input<string>;
    /**
     * private key for the TLS certificate, PEM-encoded. See [Private
     * Keys](https://ngrok.com/docs/cloud-edge/endpoints#private-keys).
     */
    privateKeyPem: pulumi.Input<string>;
}
