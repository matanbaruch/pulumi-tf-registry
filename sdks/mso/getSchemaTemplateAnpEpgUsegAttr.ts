// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getSchemaTemplateAnpEpgUsegAttr(args: GetSchemaTemplateAnpEpgUsegAttrArgs, opts?: pulumi.InvokeOptions): Promise<GetSchemaTemplateAnpEpgUsegAttrResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mso:index/getSchemaTemplateAnpEpgUsegAttr:getSchemaTemplateAnpEpgUsegAttr", {
        "anpName": args.anpName,
        "epgName": args.epgName,
        "id": args.id,
        "name": args.name,
        "schemaId": args.schemaId,
        "templateName": args.templateName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSchemaTemplateAnpEpgUsegAttr.
 */
export interface GetSchemaTemplateAnpEpgUsegAttrArgs {
    anpName: string;
    epgName: string;
    id?: string;
    name: string;
    schemaId: string;
    templateName: string;
}

/**
 * A collection of values returned by getSchemaTemplateAnpEpgUsegAttr.
 */
export interface GetSchemaTemplateAnpEpgUsegAttrResult {
    readonly anpName: string;
    readonly category: string;
    readonly description: string;
    readonly epgName: string;
    readonly id: string;
    readonly name: string;
    readonly operator: string;
    readonly schemaId: string;
    readonly templateName: string;
    readonly usegSubnet: boolean;
    readonly usegType: string;
    readonly value: string;
}
export function getSchemaTemplateAnpEpgUsegAttrOutput(args: GetSchemaTemplateAnpEpgUsegAttrOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSchemaTemplateAnpEpgUsegAttrResult> {
    return pulumi.output(args).apply((a: any) => getSchemaTemplateAnpEpgUsegAttr(a, opts))
}

/**
 * A collection of arguments for invoking getSchemaTemplateAnpEpgUsegAttr.
 */
export interface GetSchemaTemplateAnpEpgUsegAttrOutputArgs {
    anpName: pulumi.Input<string>;
    epgName: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    schemaId: pulumi.Input<string>;
    templateName: pulumi.Input<string>;
}
