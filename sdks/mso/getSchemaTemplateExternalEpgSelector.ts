// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getSchemaTemplateExternalEpgSelector(args: GetSchemaTemplateExternalEpgSelectorArgs, opts?: pulumi.InvokeOptions): Promise<GetSchemaTemplateExternalEpgSelectorResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mso:index/getSchemaTemplateExternalEpgSelector:getSchemaTemplateExternalEpgSelector", {
        "externalEpgName": args.externalEpgName,
        "id": args.id,
        "name": args.name,
        "schemaId": args.schemaId,
        "templateName": args.templateName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSchemaTemplateExternalEpgSelector.
 */
export interface GetSchemaTemplateExternalEpgSelectorArgs {
    externalEpgName: string;
    id?: string;
    name: string;
    schemaId: string;
    templateName: string;
}

/**
 * A collection of values returned by getSchemaTemplateExternalEpgSelector.
 */
export interface GetSchemaTemplateExternalEpgSelectorResult {
    readonly expressions: outputs.GetSchemaTemplateExternalEpgSelectorExpression[];
    readonly externalEpgName: string;
    readonly id: string;
    readonly name: string;
    readonly schemaId: string;
    readonly templateName: string;
}
export function getSchemaTemplateExternalEpgSelectorOutput(args: GetSchemaTemplateExternalEpgSelectorOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSchemaTemplateExternalEpgSelectorResult> {
    return pulumi.output(args).apply((a: any) => getSchemaTemplateExternalEpgSelector(a, opts))
}

/**
 * A collection of arguments for invoking getSchemaTemplateExternalEpgSelector.
 */
export interface GetSchemaTemplateExternalEpgSelectorOutputArgs {
    externalEpgName: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    schemaId: pulumi.Input<string>;
    templateName: pulumi.Input<string>;
}
