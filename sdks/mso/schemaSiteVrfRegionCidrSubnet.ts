// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SchemaSiteVrfRegionCidrSubnet extends pulumi.CustomResource {
    /**
     * Get an existing SchemaSiteVrfRegionCidrSubnet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SchemaSiteVrfRegionCidrSubnetState, opts?: pulumi.CustomResourceOptions): SchemaSiteVrfRegionCidrSubnet {
        return new SchemaSiteVrfRegionCidrSubnet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mso:index/schemaSiteVrfRegionCidrSubnet:SchemaSiteVrfRegionCidrSubnet';

    /**
     * Returns true if the given object is an instance of SchemaSiteVrfRegionCidrSubnet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SchemaSiteVrfRegionCidrSubnet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SchemaSiteVrfRegionCidrSubnet.__pulumiType;
    }

    public readonly cidrIp!: pulumi.Output<string>;
    public readonly ip!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly regionName!: pulumi.Output<string>;
    public readonly schemaId!: pulumi.Output<string>;
    public readonly siteId!: pulumi.Output<string>;
    public readonly subnetGroup!: pulumi.Output<string>;
    public readonly templateName!: pulumi.Output<string>;
    public readonly usage!: pulumi.Output<string | undefined>;
    public readonly vrfName!: pulumi.Output<string>;
    public readonly zone!: pulumi.Output<string | undefined>;

    /**
     * Create a SchemaSiteVrfRegionCidrSubnet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SchemaSiteVrfRegionCidrSubnetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SchemaSiteVrfRegionCidrSubnetArgs | SchemaSiteVrfRegionCidrSubnetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SchemaSiteVrfRegionCidrSubnetState | undefined;
            resourceInputs["cidrIp"] = state ? state.cidrIp : undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["regionName"] = state ? state.regionName : undefined;
            resourceInputs["schemaId"] = state ? state.schemaId : undefined;
            resourceInputs["siteId"] = state ? state.siteId : undefined;
            resourceInputs["subnetGroup"] = state ? state.subnetGroup : undefined;
            resourceInputs["templateName"] = state ? state.templateName : undefined;
            resourceInputs["usage"] = state ? state.usage : undefined;
            resourceInputs["vrfName"] = state ? state.vrfName : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as SchemaSiteVrfRegionCidrSubnetArgs | undefined;
            if ((!args || args.cidrIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cidrIp'");
            }
            if ((!args || args.ip === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ip'");
            }
            if ((!args || args.regionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'regionName'");
            }
            if ((!args || args.schemaId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemaId'");
            }
            if ((!args || args.siteId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteId'");
            }
            if ((!args || args.templateName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'templateName'");
            }
            if ((!args || args.vrfName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vrfName'");
            }
            resourceInputs["cidrIp"] = args ? args.cidrIp : undefined;
            resourceInputs["ip"] = args ? args.ip : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["regionName"] = args ? args.regionName : undefined;
            resourceInputs["schemaId"] = args ? args.schemaId : undefined;
            resourceInputs["siteId"] = args ? args.siteId : undefined;
            resourceInputs["subnetGroup"] = args ? args.subnetGroup : undefined;
            resourceInputs["templateName"] = args ? args.templateName : undefined;
            resourceInputs["usage"] = args ? args.usage : undefined;
            resourceInputs["vrfName"] = args ? args.vrfName : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SchemaSiteVrfRegionCidrSubnet.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SchemaSiteVrfRegionCidrSubnet resources.
 */
export interface SchemaSiteVrfRegionCidrSubnetState {
    cidrIp?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    regionName?: pulumi.Input<string>;
    schemaId?: pulumi.Input<string>;
    siteId?: pulumi.Input<string>;
    subnetGroup?: pulumi.Input<string>;
    templateName?: pulumi.Input<string>;
    usage?: pulumi.Input<string>;
    vrfName?: pulumi.Input<string>;
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SchemaSiteVrfRegionCidrSubnet resource.
 */
export interface SchemaSiteVrfRegionCidrSubnetArgs {
    cidrIp: pulumi.Input<string>;
    ip: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    regionName: pulumi.Input<string>;
    schemaId: pulumi.Input<string>;
    siteId: pulumi.Input<string>;
    subnetGroup?: pulumi.Input<string>;
    templateName: pulumi.Input<string>;
    usage?: pulumi.Input<string>;
    vrfName: pulumi.Input<string>;
    zone?: pulumi.Input<string>;
}
