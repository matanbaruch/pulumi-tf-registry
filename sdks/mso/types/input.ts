// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface SchemaSiteAnpEpgBulkStaticportStaticPort {
    deploymentImmediacy?: pulumi.Input<string>;
    fex?: pulumi.Input<string>;
    leaf?: pulumi.Input<string>;
    microSegVlan?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    path: pulumi.Input<string>;
    pathType?: pulumi.Input<string>;
    pod: pulumi.Input<string>;
    vlan: pulumi.Input<number>;
}

export interface SchemaSiteAnpEpgSelectorExpression {
    key: pulumi.Input<string>;
    operator: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface SchemaSiteContractServiceGraphListenerRule {
    action?: pulumi.Input<string>;
    actionType: pulumi.Input<string>;
    contentType?: pulumi.Input<string>;
    customUrl?: pulumi.Input<string>;
    floatingIp?: pulumi.Input<string>;
    healthCheck?: pulumi.Input<inputs.SchemaSiteContractServiceGraphListenerRuleHealthCheck>;
    host?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    port: pulumi.Input<number>;
    priority: pulumi.Input<number>;
    protocol: pulumi.Input<string>;
    providerEpgRef?: pulumi.Input<inputs.SchemaSiteContractServiceGraphListenerRuleProviderEpgRef>;
    redirectCode?: pulumi.Input<string>;
    redirectHostName?: pulumi.Input<string>;
    redirectPath?: pulumi.Input<string>;
    redirectPort?: pulumi.Input<number>;
    redirectProtocol?: pulumi.Input<string>;
    redirectQuery?: pulumi.Input<string>;
    responseBody?: pulumi.Input<string>;
    responseCode?: pulumi.Input<string>;
    targetIpType?: pulumi.Input<string>;
    urlType?: pulumi.Input<string>;
}

export interface SchemaSiteContractServiceGraphListenerRuleHealthCheck {
    host?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
    path?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    successCode?: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
    unhealthyThreshold?: pulumi.Input<number>;
    useHostFromRule?: pulumi.Input<boolean>;
}

export interface SchemaSiteContractServiceGraphListenerRuleProviderEpgRef {
    anpName: pulumi.Input<string>;
    epgName: pulumi.Input<string>;
    schemaId?: pulumi.Input<string>;
    templateName?: pulumi.Input<string>;
}

export interface SchemaSiteContractServiceGraphListenerSslCertificate {
    certificateStore: pulumi.Input<string>;
    name: pulumi.Input<string>;
    targetDn: pulumi.Input<string>;
}

export interface SchemaSiteContractServiceGraphNodeRelationship {
    consumerConnectorClusterInterface: pulumi.Input<string>;
    consumerConnectorRedirectPolicy?: pulumi.Input<string>;
    consumerConnectorRedirectPolicyTenant?: pulumi.Input<string>;
    consumerSubnetIps?: pulumi.Input<pulumi.Input<string>[]>;
    providerConnectorClusterInterface: pulumi.Input<string>;
    providerConnectorRedirectPolicy?: pulumi.Input<string>;
    providerConnectorRedirectPolicyTenant?: pulumi.Input<string>;
}

export interface SchemaSiteServiceGraphNodeSiteNode {
    nodeName?: pulumi.Input<string>;
    siteId?: pulumi.Input<string>;
    tenantName?: pulumi.Input<string>;
}

export interface SchemaSiteServiceGraphServiceNode {
    consumerConnectorType?: pulumi.Input<string>;
    consumerInterface?: pulumi.Input<string>;
    deviceDn: pulumi.Input<string>;
    providerConnectorType?: pulumi.Input<string>;
    providerInterface?: pulumi.Input<string>;
}

export interface SchemaSiteVrfRegionCidr {
    cidrIp: pulumi.Input<string>;
    primary: pulumi.Input<boolean>;
    subnets: pulumi.Input<pulumi.Input<inputs.SchemaSiteVrfRegionCidrSubnet>[]>;
}

export interface SchemaSiteVrfRegionCidrSubnet {
    ip: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    subnetGroup?: pulumi.Input<string>;
    usage?: pulumi.Input<string>;
    zone?: pulumi.Input<string>;
}

export interface SchemaTemplate {
    description?: pulumi.Input<string>;
    displayName: pulumi.Input<string>;
    name: pulumi.Input<string>;
    templateType?: pulumi.Input<string>;
    tenantId: pulumi.Input<string>;
}

export interface SchemaTemplateAnpEpgSelectorExpression {
    key: pulumi.Input<string>;
    operator: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface SchemaTemplateBdDhcpPolicy {
    dhcpOptionPolicyName?: pulumi.Input<string>;
    dhcpOptionPolicyVersion?: pulumi.Input<number>;
    name: pulumi.Input<string>;
    version?: pulumi.Input<number>;
}

export interface SchemaTemplateContractFilterRelationship {
    action?: pulumi.Input<string>;
    directives?: pulumi.Input<pulumi.Input<string>[]>;
    filterName: pulumi.Input<string>;
    filterSchemaId?: pulumi.Input<string>;
    filterTemplateName?: pulumi.Input<string>;
    filterType: pulumi.Input<string>;
    priority?: pulumi.Input<string>;
}

export interface SchemaTemplateContractServiceGraphNodeRelationship {
    consumerConnectorBdName: pulumi.Input<string>;
    consumerConnectorBdSchemaId?: pulumi.Input<string>;
    consumerConnectorBdTemplateName?: pulumi.Input<string>;
    providerConnectorBdName: pulumi.Input<string>;
    providerConnectorBdSchemaId?: pulumi.Input<string>;
    providerConnectorBdTemplateName?: pulumi.Input<string>;
}

export interface SchemaTemplateExternalEpgSelectorExpression {
    key?: pulumi.Input<string>;
    operator?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface SchemaTemplateServiceGraphServiceNode {
    type: pulumi.Input<string>;
}

export interface SystemConfigBanner {
    message: pulumi.Input<string>;
    state: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface TenantSiteAssociation {
    awsAccessKeyId?: pulumi.Input<string>;
    awsAccountId?: pulumi.Input<string>;
    awsSecretKey?: pulumi.Input<string>;
    azureAccessType?: pulumi.Input<string>;
    azureActiveDirectoryId?: pulumi.Input<string>;
    azureApplicationId?: pulumi.Input<string>;
    azureClientSecret?: pulumi.Input<string>;
    azureSharedAccountId?: pulumi.Input<string>;
    azureSubscriptionId?: pulumi.Input<string>;
    gcpAccessType?: pulumi.Input<string>;
    gcpClientId?: pulumi.Input<string>;
    gcpEmail?: pulumi.Input<string>;
    gcpKeyId?: pulumi.Input<string>;
    gcpName?: pulumi.Input<string>;
    gcpPrivateKey?: pulumi.Input<string>;
    gcpProjectId?: pulumi.Input<string>;
    isAwsAccountTrusted?: pulumi.Input<boolean>;
    securityDomains?: pulumi.Input<pulumi.Input<string>[]>;
    siteId?: pulumi.Input<string>;
    vendor?: pulumi.Input<string>;
}

export interface TenantUserAssociation {
    userId?: pulumi.Input<string>;
}

export interface UserRole {
    accessType?: pulumi.Input<string>;
    roleid: pulumi.Input<string>;
}
