// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface GetSchemaSiteAnpEpgBulkStaticportStaticPort {
    deploymentImmediacy: string;
    fex: string;
    leaf: string;
    microSegVlan: number;
    mode: string;
    path: string;
    pathType: string;
    pod: string;
    vlan: number;
}

export interface GetSchemaSiteAnpEpgSelectorExpression {
    key: string;
    operator: string;
    value: string;
}

export interface GetSchemaSiteContractServiceGraphListenerRule {
    action: string;
    actionType: string;
    contentType: string;
    customUrl: string;
    floatingIp: string;
    healthChecks: outputs.GetSchemaSiteContractServiceGraphListenerRuleHealthCheck[];
    host: string;
    name: string;
    path: string;
    port: number;
    priority: number;
    protocol: string;
    providerEpgReves: outputs.GetSchemaSiteContractServiceGraphListenerRuleProviderEpgRef[];
    redirectCode: string;
    redirectHostName: string;
    redirectPath: string;
    redirectPort: number;
    redirectProtocol: string;
    redirectQuery: string;
    responseBody: string;
    responseCode: string;
    targetIpType: string;
    urlType: string;
}

export interface GetSchemaSiteContractServiceGraphListenerRuleHealthCheck {
    host: string;
    interval: number;
    path: string;
    port: number;
    protocol: string;
    successCode: string;
    timeout: number;
    unhealthyThreshold: number;
    useHostFromRule: boolean;
}

export interface GetSchemaSiteContractServiceGraphListenerRuleProviderEpgRef {
    anpName: string;
    epgName: string;
    schemaId: string;
    templateName: string;
}

export interface GetSchemaSiteContractServiceGraphListenerSslCertificate {
    certificateStore: string;
    name: string;
    targetDn: string;
}

export interface GetSchemaSiteContractServiceGraphNodeRelationship {
    consumerConnectorClusterInterface: string;
    consumerConnectorRedirectPolicy: string;
    consumerConnectorRedirectPolicyTenant: string;
    consumerSubnetIps: string[];
    providerConnectorClusterInterface: string;
    providerConnectorRedirectPolicy: string;
    providerConnectorRedirectPolicyTenant: string;
}

export interface GetSchemaSiteServiceGraphServiceNode {
    consumerConnectorType: string;
    consumerInterface: string;
    deviceDn: string;
    providerConnectorType: string;
    providerInterface: string;
}

export interface GetSchemaSiteVrfRegionCidr {
    cidrIp: string;
    primary: boolean;
    subnets: outputs.GetSchemaSiteVrfRegionCidrSubnet[];
}

export interface GetSchemaSiteVrfRegionCidrSubnet {
    ip: string;
    name: string;
    subnetGroup: string;
    usage: string;
    zone: string;
}

export interface GetSchemaTemplate {
    description: string;
    displayName: string;
    name: string;
    templateType: string;
    tenantId: string;
}

export interface GetSchemaTemplateAnpEpgSelectorExpression {
    key: string;
    operator: string;
    value: string;
}

export interface GetSchemaTemplateBdDhcpPolicy {
    dhcpOptionPolicyName: string;
    dhcpOptionPolicyVersion: number;
    name: string;
    version: number;
}

export interface GetSchemaTemplateContractFilterRelationship {
    action: string;
    directives: string[];
    filterName: string;
    filterSchemaId: string;
    filterTemplateName: string;
    filterType: string;
    priority: string;
}

export interface GetSchemaTemplateContractServiceGraphNodeRelationship {
    consumerConnectorBdName: string;
    consumerConnectorBdSchemaId: string;
    consumerConnectorBdTemplateName: string;
    providerConnectorBdName: string;
    providerConnectorBdSchemaId: string;
    providerConnectorBdTemplateName: string;
}

export interface GetSchemaTemplateExternalEpgSelectorExpression {
    key: string;
    operator: string;
    value: string;
}

export interface GetSchemaTemplateServiceGraphServiceNode {
    type: string;
}

export interface GetSystemConfigBanner {
    message: string;
    state: string;
    type: string;
}

export interface GetTenantSiteAssociation {
    awsAccessKeyId: string;
    awsAccountId: string;
    awsSecretKey: string;
    azureAccessType: string;
    azureActiveDirectoryId: string;
    azureApplicationId: string;
    azureClientSecret: string;
    azureSharedAccountId: string;
    azureSubscriptionId: string;
    gcpAccessType: string;
    gcpClientId: string;
    gcpEmail: string;
    gcpKeyId: string;
    gcpName: string;
    gcpPrivateKey: string;
    gcpProjectId: string;
    isAwsAccountTrusted: boolean;
    securityDomains: string[];
    siteId: string;
    vendor: string;
}

export interface GetTenantUserAssociation {
    userId: string;
}

export interface GetUserRole {
    accessType: string;
    roleid: string;
}

export interface GetUserUserRbac {
    name: string;
    userPriv: string;
}

export interface SchemaSiteAnpEpgBulkStaticportStaticPort {
    deploymentImmediacy: string;
    fex: string;
    leaf: string;
    microSegVlan: number;
    mode: string;
    path: string;
    pathType?: string;
    pod: string;
    vlan: number;
}

export interface SchemaSiteAnpEpgSelectorExpression {
    key: string;
    operator: string;
    value: string;
}

export interface SchemaSiteContractServiceGraphListenerRule {
    action: string;
    actionType: string;
    contentType: string;
    customUrl: string;
    floatingIp: string;
    healthCheck?: outputs.SchemaSiteContractServiceGraphListenerRuleHealthCheck;
    host: string;
    name: string;
    path: string;
    port: number;
    priority: number;
    protocol: string;
    providerEpgRef?: outputs.SchemaSiteContractServiceGraphListenerRuleProviderEpgRef;
    redirectCode: string;
    redirectHostName: string;
    redirectPath: string;
    redirectPort: number;
    redirectProtocol: string;
    redirectQuery: string;
    responseBody: string;
    responseCode: string;
    targetIpType: string;
    urlType: string;
}

export interface SchemaSiteContractServiceGraphListenerRuleHealthCheck {
    host: string;
    interval: number;
    path: string;
    port: number;
    protocol: string;
    successCode: string;
    timeout: number;
    unhealthyThreshold: number;
    useHostFromRule: boolean;
}

export interface SchemaSiteContractServiceGraphListenerRuleProviderEpgRef {
    anpName: string;
    epgName: string;
    schemaId: string;
    templateName: string;
}

export interface SchemaSiteContractServiceGraphListenerSslCertificate {
    certificateStore: string;
    name: string;
    targetDn: string;
}

export interface SchemaSiteContractServiceGraphNodeRelationship {
    consumerConnectorClusterInterface: string;
    consumerConnectorRedirectPolicy: string;
    consumerConnectorRedirectPolicyTenant: string;
    consumerSubnetIps: string[];
    providerConnectorClusterInterface: string;
    providerConnectorRedirectPolicy: string;
    providerConnectorRedirectPolicyTenant: string;
}

export interface SchemaSiteServiceGraphNodeSiteNode {
    nodeName: string;
    siteId: string;
    tenantName: string;
}

export interface SchemaSiteServiceGraphServiceNode {
    consumerConnectorType?: string;
    consumerInterface: string;
    deviceDn: string;
    providerConnectorType?: string;
    providerInterface: string;
}

export interface SchemaSiteVrfRegionCidr {
    cidrIp: string;
    primary: boolean;
    subnets: outputs.SchemaSiteVrfRegionCidrSubnet[];
}

export interface SchemaSiteVrfRegionCidrSubnet {
    ip: string;
    name: string;
    subnetGroup: string;
    usage: string;
    zone: string;
}

export interface SchemaTemplate {
    description: string;
    displayName: string;
    name: string;
    templateType?: string;
    tenantId: string;
}

export interface SchemaTemplateAnpEpgSelectorExpression {
    key: string;
    operator: string;
    value: string;
}

export interface SchemaTemplateBdDhcpPolicy {
    dhcpOptionPolicyName: string;
    dhcpOptionPolicyVersion: number;
    name: string;
    version: number;
}

export interface SchemaTemplateContractFilterRelationship {
    action: string;
    directives: string[];
    filterName: string;
    filterSchemaId: string;
    filterTemplateName: string;
    filterType: string;
    priority: string;
}

export interface SchemaTemplateContractServiceGraphNodeRelationship {
    consumerConnectorBdName: string;
    consumerConnectorBdSchemaId: string;
    consumerConnectorBdTemplateName: string;
    providerConnectorBdName: string;
    providerConnectorBdSchemaId: string;
    providerConnectorBdTemplateName: string;
}

export interface SchemaTemplateExternalEpgSelectorExpression {
    key: string;
    operator: string;
    value: string;
}

export interface SchemaTemplateServiceGraphServiceNode {
    type: string;
}

export interface SystemConfigBanner {
    message: string;
    state: string;
    type: string;
}

export interface TenantSiteAssociation {
    awsAccessKeyId: string;
    awsAccountId: string;
    awsSecretKey: string;
    azureAccessType: string;
    azureActiveDirectoryId: string;
    azureApplicationId: string;
    azureClientSecret: string;
    azureSharedAccountId: string;
    azureSubscriptionId: string;
    gcpAccessType: string;
    gcpClientId: string;
    gcpEmail: string;
    gcpKeyId: string;
    gcpName: string;
    gcpPrivateKey: string;
    gcpProjectId: string;
    isAwsAccountTrusted: boolean;
    securityDomains?: string[];
    siteId?: string;
    vendor: string;
}

export interface TenantUserAssociation {
    userId?: string;
}

export interface UserRole {
    accessType?: string;
    roleid: string;
}

