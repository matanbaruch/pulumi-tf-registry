// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SchemaTemplateExternalEpg extends pulumi.CustomResource {
    /**
     * Get an existing SchemaTemplateExternalEpg resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SchemaTemplateExternalEpgState, opts?: pulumi.CustomResourceOptions): SchemaTemplateExternalEpg {
        return new SchemaTemplateExternalEpg(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mso:index/schemaTemplateExternalEpg:SchemaTemplateExternalEpg';

    /**
     * Returns true if the given object is an instance of SchemaTemplateExternalEpg.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SchemaTemplateExternalEpg {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SchemaTemplateExternalEpg.__pulumiType;
    }

    public readonly anpName!: pulumi.Output<string>;
    public readonly anpSchemaId!: pulumi.Output<string>;
    public readonly anpTemplateName!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly externalEpgName!: pulumi.Output<string>;
    public readonly externalEpgType!: pulumi.Output<string>;
    public readonly includeInPreferredGroup!: pulumi.Output<boolean | undefined>;
    public readonly l3outName!: pulumi.Output<string>;
    public readonly l3outSchemaId!: pulumi.Output<string>;
    public readonly l3outTemplateName!: pulumi.Output<string>;
    public readonly schemaId!: pulumi.Output<string>;
    public readonly selectorIp!: pulumi.Output<string>;
    public readonly selectorName!: pulumi.Output<string>;
    public readonly siteIds!: pulumi.Output<string[] | undefined>;
    public readonly templateName!: pulumi.Output<string>;
    public readonly vrfName!: pulumi.Output<string>;
    public readonly vrfSchemaId!: pulumi.Output<string>;
    public readonly vrfTemplateName!: pulumi.Output<string>;

    /**
     * Create a SchemaTemplateExternalEpg resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SchemaTemplateExternalEpgArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SchemaTemplateExternalEpgArgs | SchemaTemplateExternalEpgState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SchemaTemplateExternalEpgState | undefined;
            resourceInputs["anpName"] = state ? state.anpName : undefined;
            resourceInputs["anpSchemaId"] = state ? state.anpSchemaId : undefined;
            resourceInputs["anpTemplateName"] = state ? state.anpTemplateName : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["externalEpgName"] = state ? state.externalEpgName : undefined;
            resourceInputs["externalEpgType"] = state ? state.externalEpgType : undefined;
            resourceInputs["includeInPreferredGroup"] = state ? state.includeInPreferredGroup : undefined;
            resourceInputs["l3outName"] = state ? state.l3outName : undefined;
            resourceInputs["l3outSchemaId"] = state ? state.l3outSchemaId : undefined;
            resourceInputs["l3outTemplateName"] = state ? state.l3outTemplateName : undefined;
            resourceInputs["schemaId"] = state ? state.schemaId : undefined;
            resourceInputs["selectorIp"] = state ? state.selectorIp : undefined;
            resourceInputs["selectorName"] = state ? state.selectorName : undefined;
            resourceInputs["siteIds"] = state ? state.siteIds : undefined;
            resourceInputs["templateName"] = state ? state.templateName : undefined;
            resourceInputs["vrfName"] = state ? state.vrfName : undefined;
            resourceInputs["vrfSchemaId"] = state ? state.vrfSchemaId : undefined;
            resourceInputs["vrfTemplateName"] = state ? state.vrfTemplateName : undefined;
        } else {
            const args = argsOrState as SchemaTemplateExternalEpgArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.externalEpgName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'externalEpgName'");
            }
            if ((!args || args.schemaId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemaId'");
            }
            if ((!args || args.templateName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'templateName'");
            }
            if ((!args || args.vrfName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vrfName'");
            }
            resourceInputs["anpName"] = args ? args.anpName : undefined;
            resourceInputs["anpSchemaId"] = args ? args.anpSchemaId : undefined;
            resourceInputs["anpTemplateName"] = args ? args.anpTemplateName : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["externalEpgName"] = args ? args.externalEpgName : undefined;
            resourceInputs["externalEpgType"] = args ? args.externalEpgType : undefined;
            resourceInputs["includeInPreferredGroup"] = args ? args.includeInPreferredGroup : undefined;
            resourceInputs["l3outName"] = args ? args.l3outName : undefined;
            resourceInputs["l3outSchemaId"] = args ? args.l3outSchemaId : undefined;
            resourceInputs["l3outTemplateName"] = args ? args.l3outTemplateName : undefined;
            resourceInputs["schemaId"] = args ? args.schemaId : undefined;
            resourceInputs["selectorIp"] = args ? args.selectorIp : undefined;
            resourceInputs["selectorName"] = args ? args.selectorName : undefined;
            resourceInputs["siteIds"] = args ? args.siteIds : undefined;
            resourceInputs["templateName"] = args ? args.templateName : undefined;
            resourceInputs["vrfName"] = args ? args.vrfName : undefined;
            resourceInputs["vrfSchemaId"] = args ? args.vrfSchemaId : undefined;
            resourceInputs["vrfTemplateName"] = args ? args.vrfTemplateName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SchemaTemplateExternalEpg.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SchemaTemplateExternalEpg resources.
 */
export interface SchemaTemplateExternalEpgState {
    anpName?: pulumi.Input<string>;
    anpSchemaId?: pulumi.Input<string>;
    anpTemplateName?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    externalEpgName?: pulumi.Input<string>;
    externalEpgType?: pulumi.Input<string>;
    includeInPreferredGroup?: pulumi.Input<boolean>;
    l3outName?: pulumi.Input<string>;
    l3outSchemaId?: pulumi.Input<string>;
    l3outTemplateName?: pulumi.Input<string>;
    schemaId?: pulumi.Input<string>;
    selectorIp?: pulumi.Input<string>;
    selectorName?: pulumi.Input<string>;
    siteIds?: pulumi.Input<pulumi.Input<string>[]>;
    templateName?: pulumi.Input<string>;
    vrfName?: pulumi.Input<string>;
    vrfSchemaId?: pulumi.Input<string>;
    vrfTemplateName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SchemaTemplateExternalEpg resource.
 */
export interface SchemaTemplateExternalEpgArgs {
    anpName?: pulumi.Input<string>;
    anpSchemaId?: pulumi.Input<string>;
    anpTemplateName?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    displayName: pulumi.Input<string>;
    externalEpgName: pulumi.Input<string>;
    externalEpgType?: pulumi.Input<string>;
    includeInPreferredGroup?: pulumi.Input<boolean>;
    l3outName?: pulumi.Input<string>;
    l3outSchemaId?: pulumi.Input<string>;
    l3outTemplateName?: pulumi.Input<string>;
    schemaId: pulumi.Input<string>;
    selectorIp?: pulumi.Input<string>;
    selectorName?: pulumi.Input<string>;
    siteIds?: pulumi.Input<pulumi.Input<string>[]>;
    templateName: pulumi.Input<string>;
    vrfName: pulumi.Input<string>;
    vrfSchemaId?: pulumi.Input<string>;
    vrfTemplateName?: pulumi.Input<string>;
}
