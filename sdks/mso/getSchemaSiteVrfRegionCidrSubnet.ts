// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getSchemaSiteVrfRegionCidrSubnet(args: GetSchemaSiteVrfRegionCidrSubnetArgs, opts?: pulumi.InvokeOptions): Promise<GetSchemaSiteVrfRegionCidrSubnetResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mso:index/getSchemaSiteVrfRegionCidrSubnet:getSchemaSiteVrfRegionCidrSubnet", {
        "cidrIp": args.cidrIp,
        "id": args.id,
        "ip": args.ip,
        "regionName": args.regionName,
        "schemaId": args.schemaId,
        "siteId": args.siteId,
        "templateName": args.templateName,
        "vrfName": args.vrfName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSchemaSiteVrfRegionCidrSubnet.
 */
export interface GetSchemaSiteVrfRegionCidrSubnetArgs {
    cidrIp: string;
    id?: string;
    ip: string;
    regionName: string;
    schemaId: string;
    siteId: string;
    templateName: string;
    vrfName: string;
}

/**
 * A collection of values returned by getSchemaSiteVrfRegionCidrSubnet.
 */
export interface GetSchemaSiteVrfRegionCidrSubnetResult {
    readonly cidrIp: string;
    readonly id: string;
    readonly ip: string;
    readonly name: string;
    readonly regionName: string;
    readonly schemaId: string;
    readonly siteId: string;
    readonly subnetGroup: string;
    readonly templateName: string;
    readonly usage: string;
    readonly vrfName: string;
    readonly zone: string;
}
export function getSchemaSiteVrfRegionCidrSubnetOutput(args: GetSchemaSiteVrfRegionCidrSubnetOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSchemaSiteVrfRegionCidrSubnetResult> {
    return pulumi.output(args).apply((a: any) => getSchemaSiteVrfRegionCidrSubnet(a, opts))
}

/**
 * A collection of arguments for invoking getSchemaSiteVrfRegionCidrSubnet.
 */
export interface GetSchemaSiteVrfRegionCidrSubnetOutputArgs {
    cidrIp: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    ip: pulumi.Input<string>;
    regionName: pulumi.Input<string>;
    schemaId: pulumi.Input<string>;
    siteId: pulumi.Input<string>;
    templateName: pulumi.Input<string>;
    vrfName: pulumi.Input<string>;
}
