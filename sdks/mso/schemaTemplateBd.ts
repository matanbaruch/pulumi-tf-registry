// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SchemaTemplateBd extends pulumi.CustomResource {
    /**
     * Get an existing SchemaTemplateBd resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SchemaTemplateBdState, opts?: pulumi.CustomResourceOptions): SchemaTemplateBd {
        return new SchemaTemplateBd(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mso:index/schemaTemplateBd:SchemaTemplateBd';

    /**
     * Returns true if the given object is an instance of SchemaTemplateBd.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SchemaTemplateBd {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SchemaTemplateBd.__pulumiType;
    }

    public readonly arpFlooding!: pulumi.Output<boolean>;
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Configure dhcp policies in versions NDO 3.2 and higher
     */
    public readonly dhcpPolicies!: pulumi.Output<outputs.SchemaTemplateBdDhcpPolicy[] | undefined>;
    /**
     * Configure dhcp policy in versions before NDO 3.2
     */
    public readonly dhcpPolicy!: pulumi.Output<{[key: string]: string}>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly intersiteBumTraffic!: pulumi.Output<boolean>;
    public readonly ipv6UnknownMulticastFlooding!: pulumi.Output<string>;
    public readonly layer2Stretch!: pulumi.Output<boolean>;
    public readonly layer2UnknownUnicast!: pulumi.Output<string>;
    public readonly layer3Multicast!: pulumi.Output<boolean>;
    public readonly multiDestinationFlooding!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly optimizeWanBandwidth!: pulumi.Output<boolean>;
    public readonly schemaId!: pulumi.Output<string>;
    public readonly templateName!: pulumi.Output<string>;
    public readonly unicastRouting!: pulumi.Output<boolean>;
    public readonly unknownMulticastFlooding!: pulumi.Output<string>;
    public readonly virtualMacAddress!: pulumi.Output<string>;
    public readonly vrfName!: pulumi.Output<string>;
    public readonly vrfSchemaId!: pulumi.Output<string>;
    public readonly vrfTemplateName!: pulumi.Output<string>;

    /**
     * Create a SchemaTemplateBd resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SchemaTemplateBdArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SchemaTemplateBdArgs | SchemaTemplateBdState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SchemaTemplateBdState | undefined;
            resourceInputs["arpFlooding"] = state ? state.arpFlooding : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dhcpPolicies"] = state ? state.dhcpPolicies : undefined;
            resourceInputs["dhcpPolicy"] = state ? state.dhcpPolicy : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["intersiteBumTraffic"] = state ? state.intersiteBumTraffic : undefined;
            resourceInputs["ipv6UnknownMulticastFlooding"] = state ? state.ipv6UnknownMulticastFlooding : undefined;
            resourceInputs["layer2Stretch"] = state ? state.layer2Stretch : undefined;
            resourceInputs["layer2UnknownUnicast"] = state ? state.layer2UnknownUnicast : undefined;
            resourceInputs["layer3Multicast"] = state ? state.layer3Multicast : undefined;
            resourceInputs["multiDestinationFlooding"] = state ? state.multiDestinationFlooding : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["optimizeWanBandwidth"] = state ? state.optimizeWanBandwidth : undefined;
            resourceInputs["schemaId"] = state ? state.schemaId : undefined;
            resourceInputs["templateName"] = state ? state.templateName : undefined;
            resourceInputs["unicastRouting"] = state ? state.unicastRouting : undefined;
            resourceInputs["unknownMulticastFlooding"] = state ? state.unknownMulticastFlooding : undefined;
            resourceInputs["virtualMacAddress"] = state ? state.virtualMacAddress : undefined;
            resourceInputs["vrfName"] = state ? state.vrfName : undefined;
            resourceInputs["vrfSchemaId"] = state ? state.vrfSchemaId : undefined;
            resourceInputs["vrfTemplateName"] = state ? state.vrfTemplateName : undefined;
        } else {
            const args = argsOrState as SchemaTemplateBdArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.schemaId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemaId'");
            }
            if ((!args || args.templateName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'templateName'");
            }
            if ((!args || args.vrfName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vrfName'");
            }
            resourceInputs["arpFlooding"] = args ? args.arpFlooding : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dhcpPolicies"] = args ? args.dhcpPolicies : undefined;
            resourceInputs["dhcpPolicy"] = args ? args.dhcpPolicy : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["intersiteBumTraffic"] = args ? args.intersiteBumTraffic : undefined;
            resourceInputs["ipv6UnknownMulticastFlooding"] = args ? args.ipv6UnknownMulticastFlooding : undefined;
            resourceInputs["layer2Stretch"] = args ? args.layer2Stretch : undefined;
            resourceInputs["layer2UnknownUnicast"] = args ? args.layer2UnknownUnicast : undefined;
            resourceInputs["layer3Multicast"] = args ? args.layer3Multicast : undefined;
            resourceInputs["multiDestinationFlooding"] = args ? args.multiDestinationFlooding : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["optimizeWanBandwidth"] = args ? args.optimizeWanBandwidth : undefined;
            resourceInputs["schemaId"] = args ? args.schemaId : undefined;
            resourceInputs["templateName"] = args ? args.templateName : undefined;
            resourceInputs["unicastRouting"] = args ? args.unicastRouting : undefined;
            resourceInputs["unknownMulticastFlooding"] = args ? args.unknownMulticastFlooding : undefined;
            resourceInputs["virtualMacAddress"] = args ? args.virtualMacAddress : undefined;
            resourceInputs["vrfName"] = args ? args.vrfName : undefined;
            resourceInputs["vrfSchemaId"] = args ? args.vrfSchemaId : undefined;
            resourceInputs["vrfTemplateName"] = args ? args.vrfTemplateName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SchemaTemplateBd.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SchemaTemplateBd resources.
 */
export interface SchemaTemplateBdState {
    arpFlooding?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    /**
     * Configure dhcp policies in versions NDO 3.2 and higher
     */
    dhcpPolicies?: pulumi.Input<pulumi.Input<inputs.SchemaTemplateBdDhcpPolicy>[]>;
    /**
     * Configure dhcp policy in versions before NDO 3.2
     */
    dhcpPolicy?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName?: pulumi.Input<string>;
    intersiteBumTraffic?: pulumi.Input<boolean>;
    ipv6UnknownMulticastFlooding?: pulumi.Input<string>;
    layer2Stretch?: pulumi.Input<boolean>;
    layer2UnknownUnicast?: pulumi.Input<string>;
    layer3Multicast?: pulumi.Input<boolean>;
    multiDestinationFlooding?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    optimizeWanBandwidth?: pulumi.Input<boolean>;
    schemaId?: pulumi.Input<string>;
    templateName?: pulumi.Input<string>;
    unicastRouting?: pulumi.Input<boolean>;
    unknownMulticastFlooding?: pulumi.Input<string>;
    virtualMacAddress?: pulumi.Input<string>;
    vrfName?: pulumi.Input<string>;
    vrfSchemaId?: pulumi.Input<string>;
    vrfTemplateName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SchemaTemplateBd resource.
 */
export interface SchemaTemplateBdArgs {
    arpFlooding?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    /**
     * Configure dhcp policies in versions NDO 3.2 and higher
     */
    dhcpPolicies?: pulumi.Input<pulumi.Input<inputs.SchemaTemplateBdDhcpPolicy>[]>;
    /**
     * Configure dhcp policy in versions before NDO 3.2
     */
    dhcpPolicy?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayName: pulumi.Input<string>;
    intersiteBumTraffic?: pulumi.Input<boolean>;
    ipv6UnknownMulticastFlooding?: pulumi.Input<string>;
    layer2Stretch?: pulumi.Input<boolean>;
    layer2UnknownUnicast?: pulumi.Input<string>;
    layer3Multicast?: pulumi.Input<boolean>;
    multiDestinationFlooding?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    optimizeWanBandwidth?: pulumi.Input<boolean>;
    schemaId: pulumi.Input<string>;
    templateName: pulumi.Input<string>;
    unicastRouting?: pulumi.Input<boolean>;
    unknownMulticastFlooding?: pulumi.Input<string>;
    virtualMacAddress?: pulumi.Input<string>;
    vrfName: pulumi.Input<string>;
    vrfSchemaId?: pulumi.Input<string>;
    vrfTemplateName?: pulumi.Input<string>;
}
