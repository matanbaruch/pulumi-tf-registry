// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SchemaTemplateVrf extends pulumi.CustomResource {
    /**
     * Get an existing SchemaTemplateVrf resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SchemaTemplateVrfState, opts?: pulumi.CustomResourceOptions): SchemaTemplateVrf {
        return new SchemaTemplateVrf(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mso:index/schemaTemplateVrf:SchemaTemplateVrf';

    /**
     * Returns true if the given object is an instance of SchemaTemplateVrf.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SchemaTemplateVrf {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SchemaTemplateVrf.__pulumiType;
    }

    public readonly description!: pulumi.Output<string>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly ipDataPlaneLearning!: pulumi.Output<string>;
    public readonly layer3Multicast!: pulumi.Output<boolean>;
    public readonly name!: pulumi.Output<string>;
    public readonly preferredGroup!: pulumi.Output<boolean>;
    public readonly schemaId!: pulumi.Output<string>;
    public readonly siteAwarePolicyEnforcement!: pulumi.Output<boolean>;
    public readonly template!: pulumi.Output<string>;
    public readonly vzany!: pulumi.Output<boolean>;

    /**
     * Create a SchemaTemplateVrf resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SchemaTemplateVrfArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SchemaTemplateVrfArgs | SchemaTemplateVrfState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SchemaTemplateVrfState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["ipDataPlaneLearning"] = state ? state.ipDataPlaneLearning : undefined;
            resourceInputs["layer3Multicast"] = state ? state.layer3Multicast : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["preferredGroup"] = state ? state.preferredGroup : undefined;
            resourceInputs["schemaId"] = state ? state.schemaId : undefined;
            resourceInputs["siteAwarePolicyEnforcement"] = state ? state.siteAwarePolicyEnforcement : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["vzany"] = state ? state.vzany : undefined;
        } else {
            const args = argsOrState as SchemaTemplateVrfArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.schemaId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemaId'");
            }
            if ((!args || args.template === undefined) && !opts.urn) {
                throw new Error("Missing required property 'template'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["ipDataPlaneLearning"] = args ? args.ipDataPlaneLearning : undefined;
            resourceInputs["layer3Multicast"] = args ? args.layer3Multicast : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["preferredGroup"] = args ? args.preferredGroup : undefined;
            resourceInputs["schemaId"] = args ? args.schemaId : undefined;
            resourceInputs["siteAwarePolicyEnforcement"] = args ? args.siteAwarePolicyEnforcement : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["vzany"] = args ? args.vzany : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SchemaTemplateVrf.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SchemaTemplateVrf resources.
 */
export interface SchemaTemplateVrfState {
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    ipDataPlaneLearning?: pulumi.Input<string>;
    layer3Multicast?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    preferredGroup?: pulumi.Input<boolean>;
    schemaId?: pulumi.Input<string>;
    siteAwarePolicyEnforcement?: pulumi.Input<boolean>;
    template?: pulumi.Input<string>;
    vzany?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a SchemaTemplateVrf resource.
 */
export interface SchemaTemplateVrfArgs {
    description?: pulumi.Input<string>;
    displayName: pulumi.Input<string>;
    ipDataPlaneLearning?: pulumi.Input<string>;
    layer3Multicast?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    preferredGroup?: pulumi.Input<boolean>;
    schemaId: pulumi.Input<string>;
    siteAwarePolicyEnforcement?: pulumi.Input<boolean>;
    template: pulumi.Input<string>;
    vzany?: pulumi.Input<boolean>;
}
