// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getSchemaTemplateAnpEpg(args: GetSchemaTemplateAnpEpgArgs, opts?: pulumi.InvokeOptions): Promise<GetSchemaTemplateAnpEpgResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mso:index/getSchemaTemplateAnpEpg:getSchemaTemplateAnpEpg", {
        "anpName": args.anpName,
        "id": args.id,
        "name": args.name,
        "schemaId": args.schemaId,
        "templateName": args.templateName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSchemaTemplateAnpEpg.
 */
export interface GetSchemaTemplateAnpEpgArgs {
    anpName: string;
    id?: string;
    name: string;
    schemaId: string;
    templateName: string;
}

/**
 * A collection of values returned by getSchemaTemplateAnpEpg.
 */
export interface GetSchemaTemplateAnpEpgResult {
    readonly accessType: string;
    readonly anpName: string;
    readonly bdName: string;
    readonly bdSchemaId: string;
    readonly bdTemplateName: string;
    readonly customServiceType: string;
    readonly deploymentType: string;
    readonly description: string;
    readonly displayName: string;
    readonly epgType: string;
    readonly id: string;
    readonly intersiteMulticastSource: boolean;
    readonly intraEpg: string;
    readonly name: string;
    readonly preferredGroup: boolean;
    readonly proxyArp: boolean;
    readonly schemaId: string;
    readonly serviceType: string;
    readonly templateName: string;
    readonly usegEpg: boolean;
    readonly vrfName: string;
    readonly vrfSchemaId: string;
    readonly vrfTemplateName: string;
}
export function getSchemaTemplateAnpEpgOutput(args: GetSchemaTemplateAnpEpgOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSchemaTemplateAnpEpgResult> {
    return pulumi.output(args).apply((a: any) => getSchemaTemplateAnpEpg(a, opts))
}

/**
 * A collection of arguments for invoking getSchemaTemplateAnpEpg.
 */
export interface GetSchemaTemplateAnpEpgOutputArgs {
    anpName: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    schemaId: pulumi.Input<string>;
    templateName: pulumi.Input<string>;
}
