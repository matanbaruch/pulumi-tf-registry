// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SchemaSiteAnpEpgDomain extends pulumi.CustomResource {
    /**
     * Get an existing SchemaSiteAnpEpgDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SchemaSiteAnpEpgDomainState, opts?: pulumi.CustomResourceOptions): SchemaSiteAnpEpgDomain {
        return new SchemaSiteAnpEpgDomain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mso:index/schemaSiteAnpEpgDomain:SchemaSiteAnpEpgDomain';

    /**
     * Returns true if the given object is an instance of SchemaSiteAnpEpgDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SchemaSiteAnpEpgDomain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SchemaSiteAnpEpgDomain.__pulumiType;
    }

    public readonly allowMicroSegmentation!: pulumi.Output<boolean>;
    public readonly allowPromiscuous!: pulumi.Output<string>;
    public readonly anpName!: pulumi.Output<string>;
    public readonly bindingType!: pulumi.Output<string>;
    public readonly customEpgName!: pulumi.Output<string>;
    public readonly delimiter!: pulumi.Output<string>;
    public readonly deployImmediacy!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly dn!: pulumi.Output<string | undefined>;
    public readonly domainDn!: pulumi.Output<string | undefined>;
    public readonly domainName!: pulumi.Output<string | undefined>;
    public readonly domainType!: pulumi.Output<string | undefined>;
    public readonly enhancedLagPolicyDn!: pulumi.Output<string>;
    public readonly enhancedLagPolicyName!: pulumi.Output<string>;
    public readonly epgName!: pulumi.Output<string>;
    public readonly forgedTransmits!: pulumi.Output<string>;
    public readonly macChanges!: pulumi.Output<string>;
    public readonly microSegVlan!: pulumi.Output<number>;
    public readonly microSegVlanType!: pulumi.Output<string>;
    public readonly netflow!: pulumi.Output<string>;
    public readonly numPorts!: pulumi.Output<number>;
    public readonly portAllocation!: pulumi.Output<string>;
    public readonly portEncapVlan!: pulumi.Output<number>;
    public readonly portEncapVlanType!: pulumi.Output<string>;
    public readonly resolutionImmediacy!: pulumi.Output<string>;
    public readonly schemaId!: pulumi.Output<string>;
    public readonly siteId!: pulumi.Output<string>;
    public readonly switchType!: pulumi.Output<string>;
    public readonly switchingMode!: pulumi.Output<string>;
    public readonly templateName!: pulumi.Output<string>;
    public readonly vlanEncapMode!: pulumi.Output<string>;
    public readonly vmmDomainType!: pulumi.Output<string | undefined>;

    /**
     * Create a SchemaSiteAnpEpgDomain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SchemaSiteAnpEpgDomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SchemaSiteAnpEpgDomainArgs | SchemaSiteAnpEpgDomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SchemaSiteAnpEpgDomainState | undefined;
            resourceInputs["allowMicroSegmentation"] = state ? state.allowMicroSegmentation : undefined;
            resourceInputs["allowPromiscuous"] = state ? state.allowPromiscuous : undefined;
            resourceInputs["anpName"] = state ? state.anpName : undefined;
            resourceInputs["bindingType"] = state ? state.bindingType : undefined;
            resourceInputs["customEpgName"] = state ? state.customEpgName : undefined;
            resourceInputs["delimiter"] = state ? state.delimiter : undefined;
            resourceInputs["deployImmediacy"] = state ? state.deployImmediacy : undefined;
            resourceInputs["dn"] = state ? state.dn : undefined;
            resourceInputs["domainDn"] = state ? state.domainDn : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["domainType"] = state ? state.domainType : undefined;
            resourceInputs["enhancedLagPolicyDn"] = state ? state.enhancedLagPolicyDn : undefined;
            resourceInputs["enhancedLagPolicyName"] = state ? state.enhancedLagPolicyName : undefined;
            resourceInputs["epgName"] = state ? state.epgName : undefined;
            resourceInputs["forgedTransmits"] = state ? state.forgedTransmits : undefined;
            resourceInputs["macChanges"] = state ? state.macChanges : undefined;
            resourceInputs["microSegVlan"] = state ? state.microSegVlan : undefined;
            resourceInputs["microSegVlanType"] = state ? state.microSegVlanType : undefined;
            resourceInputs["netflow"] = state ? state.netflow : undefined;
            resourceInputs["numPorts"] = state ? state.numPorts : undefined;
            resourceInputs["portAllocation"] = state ? state.portAllocation : undefined;
            resourceInputs["portEncapVlan"] = state ? state.portEncapVlan : undefined;
            resourceInputs["portEncapVlanType"] = state ? state.portEncapVlanType : undefined;
            resourceInputs["resolutionImmediacy"] = state ? state.resolutionImmediacy : undefined;
            resourceInputs["schemaId"] = state ? state.schemaId : undefined;
            resourceInputs["siteId"] = state ? state.siteId : undefined;
            resourceInputs["switchType"] = state ? state.switchType : undefined;
            resourceInputs["switchingMode"] = state ? state.switchingMode : undefined;
            resourceInputs["templateName"] = state ? state.templateName : undefined;
            resourceInputs["vlanEncapMode"] = state ? state.vlanEncapMode : undefined;
            resourceInputs["vmmDomainType"] = state ? state.vmmDomainType : undefined;
        } else {
            const args = argsOrState as SchemaSiteAnpEpgDomainArgs | undefined;
            if ((!args || args.anpName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'anpName'");
            }
            if ((!args || args.deployImmediacy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deployImmediacy'");
            }
            if ((!args || args.epgName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'epgName'");
            }
            if ((!args || args.resolutionImmediacy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resolutionImmediacy'");
            }
            if ((!args || args.schemaId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemaId'");
            }
            if ((!args || args.siteId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteId'");
            }
            if ((!args || args.templateName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'templateName'");
            }
            resourceInputs["allowMicroSegmentation"] = args ? args.allowMicroSegmentation : undefined;
            resourceInputs["allowPromiscuous"] = args ? args.allowPromiscuous : undefined;
            resourceInputs["anpName"] = args ? args.anpName : undefined;
            resourceInputs["bindingType"] = args ? args.bindingType : undefined;
            resourceInputs["customEpgName"] = args ? args.customEpgName : undefined;
            resourceInputs["delimiter"] = args ? args.delimiter : undefined;
            resourceInputs["deployImmediacy"] = args ? args.deployImmediacy : undefined;
            resourceInputs["dn"] = args ? args.dn : undefined;
            resourceInputs["domainDn"] = args ? args.domainDn : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["domainType"] = args ? args.domainType : undefined;
            resourceInputs["enhancedLagPolicyDn"] = args ? args.enhancedLagPolicyDn : undefined;
            resourceInputs["enhancedLagPolicyName"] = args ? args.enhancedLagPolicyName : undefined;
            resourceInputs["epgName"] = args ? args.epgName : undefined;
            resourceInputs["forgedTransmits"] = args ? args.forgedTransmits : undefined;
            resourceInputs["macChanges"] = args ? args.macChanges : undefined;
            resourceInputs["microSegVlan"] = args ? args.microSegVlan : undefined;
            resourceInputs["microSegVlanType"] = args ? args.microSegVlanType : undefined;
            resourceInputs["netflow"] = args ? args.netflow : undefined;
            resourceInputs["numPorts"] = args ? args.numPorts : undefined;
            resourceInputs["portAllocation"] = args ? args.portAllocation : undefined;
            resourceInputs["portEncapVlan"] = args ? args.portEncapVlan : undefined;
            resourceInputs["portEncapVlanType"] = args ? args.portEncapVlanType : undefined;
            resourceInputs["resolutionImmediacy"] = args ? args.resolutionImmediacy : undefined;
            resourceInputs["schemaId"] = args ? args.schemaId : undefined;
            resourceInputs["siteId"] = args ? args.siteId : undefined;
            resourceInputs["switchType"] = args ? args.switchType : undefined;
            resourceInputs["switchingMode"] = args ? args.switchingMode : undefined;
            resourceInputs["templateName"] = args ? args.templateName : undefined;
            resourceInputs["vlanEncapMode"] = args ? args.vlanEncapMode : undefined;
            resourceInputs["vmmDomainType"] = args ? args.vmmDomainType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SchemaSiteAnpEpgDomain.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SchemaSiteAnpEpgDomain resources.
 */
export interface SchemaSiteAnpEpgDomainState {
    allowMicroSegmentation?: pulumi.Input<boolean>;
    allowPromiscuous?: pulumi.Input<string>;
    anpName?: pulumi.Input<string>;
    bindingType?: pulumi.Input<string>;
    customEpgName?: pulumi.Input<string>;
    delimiter?: pulumi.Input<string>;
    deployImmediacy?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    dn?: pulumi.Input<string>;
    domainDn?: pulumi.Input<string>;
    domainName?: pulumi.Input<string>;
    domainType?: pulumi.Input<string>;
    enhancedLagPolicyDn?: pulumi.Input<string>;
    enhancedLagPolicyName?: pulumi.Input<string>;
    epgName?: pulumi.Input<string>;
    forgedTransmits?: pulumi.Input<string>;
    macChanges?: pulumi.Input<string>;
    microSegVlan?: pulumi.Input<number>;
    microSegVlanType?: pulumi.Input<string>;
    netflow?: pulumi.Input<string>;
    numPorts?: pulumi.Input<number>;
    portAllocation?: pulumi.Input<string>;
    portEncapVlan?: pulumi.Input<number>;
    portEncapVlanType?: pulumi.Input<string>;
    resolutionImmediacy?: pulumi.Input<string>;
    schemaId?: pulumi.Input<string>;
    siteId?: pulumi.Input<string>;
    switchType?: pulumi.Input<string>;
    switchingMode?: pulumi.Input<string>;
    templateName?: pulumi.Input<string>;
    vlanEncapMode?: pulumi.Input<string>;
    vmmDomainType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SchemaSiteAnpEpgDomain resource.
 */
export interface SchemaSiteAnpEpgDomainArgs {
    allowMicroSegmentation?: pulumi.Input<boolean>;
    allowPromiscuous?: pulumi.Input<string>;
    anpName: pulumi.Input<string>;
    bindingType?: pulumi.Input<string>;
    customEpgName?: pulumi.Input<string>;
    delimiter?: pulumi.Input<string>;
    deployImmediacy: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    dn?: pulumi.Input<string>;
    domainDn?: pulumi.Input<string>;
    domainName?: pulumi.Input<string>;
    domainType?: pulumi.Input<string>;
    enhancedLagPolicyDn?: pulumi.Input<string>;
    enhancedLagPolicyName?: pulumi.Input<string>;
    epgName: pulumi.Input<string>;
    forgedTransmits?: pulumi.Input<string>;
    macChanges?: pulumi.Input<string>;
    microSegVlan?: pulumi.Input<number>;
    microSegVlanType?: pulumi.Input<string>;
    netflow?: pulumi.Input<string>;
    numPorts?: pulumi.Input<number>;
    portAllocation?: pulumi.Input<string>;
    portEncapVlan?: pulumi.Input<number>;
    portEncapVlanType?: pulumi.Input<string>;
    resolutionImmediacy: pulumi.Input<string>;
    schemaId: pulumi.Input<string>;
    siteId: pulumi.Input<string>;
    switchType?: pulumi.Input<string>;
    switchingMode?: pulumi.Input<string>;
    templateName: pulumi.Input<string>;
    vlanEncapMode?: pulumi.Input<string>;
    vmmDomainType?: pulumi.Input<string>;
}
