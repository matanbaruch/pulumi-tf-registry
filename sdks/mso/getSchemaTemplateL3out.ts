// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getSchemaTemplateL3out(args: GetSchemaTemplateL3outArgs, opts?: pulumi.InvokeOptions): Promise<GetSchemaTemplateL3outResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mso:index/getSchemaTemplateL3out:getSchemaTemplateL3out", {
        "id": args.id,
        "l3outName": args.l3outName,
        "schemaId": args.schemaId,
        "templateName": args.templateName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSchemaTemplateL3out.
 */
export interface GetSchemaTemplateL3outArgs {
    id?: string;
    l3outName: string;
    schemaId: string;
    templateName: string;
}

/**
 * A collection of values returned by getSchemaTemplateL3out.
 */
export interface GetSchemaTemplateL3outResult {
    readonly description: string;
    readonly displayName: string;
    readonly id: string;
    readonly l3outName: string;
    readonly schemaId: string;
    readonly templateName: string;
    readonly vrfName: string;
    readonly vrfSchemaId: string;
    readonly vrfTemplateName: string;
}
export function getSchemaTemplateL3outOutput(args: GetSchemaTemplateL3outOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSchemaTemplateL3outResult> {
    return pulumi.output(args).apply((a: any) => getSchemaTemplateL3out(a, opts))
}

/**
 * A collection of arguments for invoking getSchemaTemplateL3out.
 */
export interface GetSchemaTemplateL3outOutputArgs {
    id?: pulumi.Input<string>;
    l3outName: pulumi.Input<string>;
    schemaId: pulumi.Input<string>;
    templateName: pulumi.Input<string>;
}
