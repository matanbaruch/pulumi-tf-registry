// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getSchemaSite(args: GetSchemaSiteArgs, opts?: pulumi.InvokeOptions): Promise<GetSchemaSiteResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mso:index/getSchemaSite:getSchemaSite", {
        "id": args.id,
        "name": args.name,
        "schemaId": args.schemaId,
        "templateName": args.templateName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSchemaSite.
 */
export interface GetSchemaSiteArgs {
    id?: string;
    name: string;
    schemaId: string;
    templateName: string;
}

/**
 * A collection of values returned by getSchemaSite.
 */
export interface GetSchemaSiteResult {
    readonly id: string;
    readonly name: string;
    readonly schemaId: string;
    readonly siteId: string;
    readonly templateName: string;
}
export function getSchemaSiteOutput(args: GetSchemaSiteOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSchemaSiteResult> {
    return pulumi.output(args).apply((a: any) => getSchemaSite(a, opts))
}

/**
 * A collection of arguments for invoking getSchemaSite.
 */
export interface GetSchemaSiteOutputArgs {
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    schemaId: pulumi.Input<string>;
    templateName: pulumi.Input<string>;
}
