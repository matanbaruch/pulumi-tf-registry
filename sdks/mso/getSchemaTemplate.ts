// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getSchemaTemplate(args: GetSchemaTemplateArgs, opts?: pulumi.InvokeOptions): Promise<GetSchemaTemplateResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mso:index/getSchemaTemplate:getSchemaTemplate", {
        "id": args.id,
        "name": args.name,
        "schemaId": args.schemaId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSchemaTemplate.
 */
export interface GetSchemaTemplateArgs {
    id?: string;
    name: string;
    schemaId: string;
}

/**
 * A collection of values returned by getSchemaTemplate.
 */
export interface GetSchemaTemplateResult {
    readonly description: string;
    readonly displayName: string;
    readonly id: string;
    readonly name: string;
    readonly schemaId: string;
    readonly templateType: string;
    readonly tenantId: string;
}
export function getSchemaTemplateOutput(args: GetSchemaTemplateOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSchemaTemplateResult> {
    return pulumi.output(args).apply((a: any) => getSchemaTemplate(a, opts))
}

/**
 * A collection of arguments for invoking getSchemaTemplate.
 */
export interface GetSchemaTemplateOutputArgs {
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    schemaId: pulumi.Input<string>;
}
