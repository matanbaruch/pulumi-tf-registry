// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Site extends pulumi.CustomResource {
    /**
     * Get an existing Site resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SiteState, opts?: pulumi.CustomResourceOptions): Site {
        return new Site(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mso:index/site:Site';

    /**
     * Returns true if the given object is an instance of Site.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Site {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Site.__pulumiType;
    }

    public readonly apicSiteId!: pulumi.Output<string>;
    public readonly cloudProviders!: pulumi.Output<string[]>;
    public readonly labels!: pulumi.Output<string[]>;
    public readonly location!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly loginDomain!: pulumi.Output<string>;
    public readonly maintenanceMode!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly password!: pulumi.Output<string>;
    public readonly platform!: pulumi.Output<string>;
    public readonly urls!: pulumi.Output<string[]>;
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a Site resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SiteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SiteArgs | SiteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SiteState | undefined;
            resourceInputs["apicSiteId"] = state ? state.apicSiteId : undefined;
            resourceInputs["cloudProviders"] = state ? state.cloudProviders : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["loginDomain"] = state ? state.loginDomain : undefined;
            resourceInputs["maintenanceMode"] = state ? state.maintenanceMode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["platform"] = state ? state.platform : undefined;
            resourceInputs["urls"] = state ? state.urls : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as SiteArgs | undefined;
            if ((!args || args.apicSiteId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apicSiteId'");
            }
            resourceInputs["apicSiteId"] = args ? args.apicSiteId : undefined;
            resourceInputs["cloudProviders"] = args ? args.cloudProviders : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["loginDomain"] = args ? args.loginDomain : undefined;
            resourceInputs["maintenanceMode"] = args ? args.maintenanceMode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["platform"] = args ? args.platform : undefined;
            resourceInputs["urls"] = args ? args.urls : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Site.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Site resources.
 */
export interface SiteState {
    apicSiteId?: pulumi.Input<string>;
    cloudProviders?: pulumi.Input<pulumi.Input<string>[]>;
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    location?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    loginDomain?: pulumi.Input<string>;
    maintenanceMode?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    platform?: pulumi.Input<string>;
    urls?: pulumi.Input<pulumi.Input<string>[]>;
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Site resource.
 */
export interface SiteArgs {
    apicSiteId: pulumi.Input<string>;
    cloudProviders?: pulumi.Input<pulumi.Input<string>[]>;
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    location?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    loginDomain?: pulumi.Input<string>;
    maintenanceMode?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    platform?: pulumi.Input<string>;
    urls?: pulumi.Input<pulumi.Input<string>[]>;
    username?: pulumi.Input<string>;
}
