// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SchemaSiteContractServiceGraphListener extends pulumi.CustomResource {
    /**
     * Get an existing SchemaSiteContractServiceGraphListener resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SchemaSiteContractServiceGraphListenerState, opts?: pulumi.CustomResourceOptions): SchemaSiteContractServiceGraphListener {
        return new SchemaSiteContractServiceGraphListener(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mso:index/schemaSiteContractServiceGraphListener:SchemaSiteContractServiceGraphListener';

    /**
     * Returns true if the given object is an instance of SchemaSiteContractServiceGraphListener.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SchemaSiteContractServiceGraphListener {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SchemaSiteContractServiceGraphListener.__pulumiType;
    }

    public readonly contractName!: pulumi.Output<string>;
    public readonly frontendIpDn!: pulumi.Output<string>;
    public readonly listenerName!: pulumi.Output<string>;
    public readonly port!: pulumi.Output<number>;
    public readonly protocol!: pulumi.Output<string>;
    public readonly rules!: pulumi.Output<outputs.SchemaSiteContractServiceGraphListenerRule[] | undefined>;
    public readonly schemaId!: pulumi.Output<string>;
    public readonly securityPolicy!: pulumi.Output<string>;
    public readonly serviceNodeIndex!: pulumi.Output<number>;
    public readonly siteId!: pulumi.Output<string>;
    public readonly sslCertificates!: pulumi.Output<outputs.SchemaSiteContractServiceGraphListenerSslCertificate[] | undefined>;
    public readonly templateName!: pulumi.Output<string>;

    /**
     * Create a SchemaSiteContractServiceGraphListener resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SchemaSiteContractServiceGraphListenerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SchemaSiteContractServiceGraphListenerArgs | SchemaSiteContractServiceGraphListenerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SchemaSiteContractServiceGraphListenerState | undefined;
            resourceInputs["contractName"] = state ? state.contractName : undefined;
            resourceInputs["frontendIpDn"] = state ? state.frontendIpDn : undefined;
            resourceInputs["listenerName"] = state ? state.listenerName : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["schemaId"] = state ? state.schemaId : undefined;
            resourceInputs["securityPolicy"] = state ? state.securityPolicy : undefined;
            resourceInputs["serviceNodeIndex"] = state ? state.serviceNodeIndex : undefined;
            resourceInputs["siteId"] = state ? state.siteId : undefined;
            resourceInputs["sslCertificates"] = state ? state.sslCertificates : undefined;
            resourceInputs["templateName"] = state ? state.templateName : undefined;
        } else {
            const args = argsOrState as SchemaSiteContractServiceGraphListenerArgs | undefined;
            if ((!args || args.contractName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'contractName'");
            }
            if ((!args || args.listenerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'listenerName'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if ((!args || args.schemaId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemaId'");
            }
            if ((!args || args.serviceNodeIndex === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceNodeIndex'");
            }
            if ((!args || args.siteId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteId'");
            }
            if ((!args || args.templateName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'templateName'");
            }
            resourceInputs["contractName"] = args ? args.contractName : undefined;
            resourceInputs["frontendIpDn"] = args ? args.frontendIpDn : undefined;
            resourceInputs["listenerName"] = args ? args.listenerName : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["schemaId"] = args ? args.schemaId : undefined;
            resourceInputs["securityPolicy"] = args ? args.securityPolicy : undefined;
            resourceInputs["serviceNodeIndex"] = args ? args.serviceNodeIndex : undefined;
            resourceInputs["siteId"] = args ? args.siteId : undefined;
            resourceInputs["sslCertificates"] = args ? args.sslCertificates : undefined;
            resourceInputs["templateName"] = args ? args.templateName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SchemaSiteContractServiceGraphListener.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SchemaSiteContractServiceGraphListener resources.
 */
export interface SchemaSiteContractServiceGraphListenerState {
    contractName?: pulumi.Input<string>;
    frontendIpDn?: pulumi.Input<string>;
    listenerName?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    rules?: pulumi.Input<pulumi.Input<inputs.SchemaSiteContractServiceGraphListenerRule>[]>;
    schemaId?: pulumi.Input<string>;
    securityPolicy?: pulumi.Input<string>;
    serviceNodeIndex?: pulumi.Input<number>;
    siteId?: pulumi.Input<string>;
    sslCertificates?: pulumi.Input<pulumi.Input<inputs.SchemaSiteContractServiceGraphListenerSslCertificate>[]>;
    templateName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SchemaSiteContractServiceGraphListener resource.
 */
export interface SchemaSiteContractServiceGraphListenerArgs {
    contractName: pulumi.Input<string>;
    frontendIpDn?: pulumi.Input<string>;
    listenerName: pulumi.Input<string>;
    port: pulumi.Input<number>;
    protocol: pulumi.Input<string>;
    rules?: pulumi.Input<pulumi.Input<inputs.SchemaSiteContractServiceGraphListenerRule>[]>;
    schemaId: pulumi.Input<string>;
    securityPolicy?: pulumi.Input<string>;
    serviceNodeIndex: pulumi.Input<number>;
    siteId: pulumi.Input<string>;
    sslCertificates?: pulumi.Input<pulumi.Input<inputs.SchemaSiteContractServiceGraphListenerSslCertificate>[]>;
    templateName: pulumi.Input<string>;
}
