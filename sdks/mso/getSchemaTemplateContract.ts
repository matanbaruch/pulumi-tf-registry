// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getSchemaTemplateContract(args: GetSchemaTemplateContractArgs, opts?: pulumi.InvokeOptions): Promise<GetSchemaTemplateContractResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mso:index/getSchemaTemplateContract:getSchemaTemplateContract", {
        "contractName": args.contractName,
        "id": args.id,
        "schemaId": args.schemaId,
        "templateName": args.templateName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSchemaTemplateContract.
 */
export interface GetSchemaTemplateContractArgs {
    contractName: string;
    id?: string;
    schemaId: string;
    templateName: string;
}

/**
 * A collection of values returned by getSchemaTemplateContract.
 */
export interface GetSchemaTemplateContractResult {
    readonly contractName: string;
    readonly description: string;
    readonly directives: string[];
    readonly displayName: string;
    readonly filterRelationship: outputs.GetSchemaTemplateContractFilterRelationship[];
    readonly filterRelationships: {[key: string]: string};
    readonly filterType: string;
    readonly id: string;
    readonly priority: string;
    readonly schemaId: string;
    readonly scope: string;
    readonly targetDscp: string;
    readonly templateName: string;
}
export function getSchemaTemplateContractOutput(args: GetSchemaTemplateContractOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSchemaTemplateContractResult> {
    return pulumi.output(args).apply((a: any) => getSchemaTemplateContract(a, opts))
}

/**
 * A collection of arguments for invoking getSchemaTemplateContract.
 */
export interface GetSchemaTemplateContractOutputArgs {
    contractName: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    schemaId: pulumi.Input<string>;
    templateName: pulumi.Input<string>;
}
