// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RemoteLocation extends pulumi.CustomResource {
    /**
     * Get an existing RemoteLocation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RemoteLocationState, opts?: pulumi.CustomResourceOptions): RemoteLocation {
        return new RemoteLocation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mso:index/remoteLocation:RemoteLocation';

    /**
     * Returns true if the given object is an instance of RemoteLocation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RemoteLocation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RemoteLocation.__pulumiType;
    }

    public readonly description!: pulumi.Output<string>;
    public readonly hostname!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly passphrase!: pulumi.Output<string>;
    public readonly password!: pulumi.Output<string>;
    public readonly path!: pulumi.Output<string>;
    public readonly port!: pulumi.Output<number | undefined>;
    public readonly protocol!: pulumi.Output<string>;
    public readonly sshKey!: pulumi.Output<string>;
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a RemoteLocation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RemoteLocationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RemoteLocationArgs | RemoteLocationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RemoteLocationState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["passphrase"] = state ? state.passphrase : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["sshKey"] = state ? state.sshKey : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as RemoteLocationArgs | undefined;
            if ((!args || args.hostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostname'");
            }
            if ((!args || args.path === undefined) && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["passphrase"] = args?.passphrase ? pulumi.secret(args.passphrase) : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["sshKey"] = args?.sshKey ? pulumi.secret(args.sshKey) : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["passphrase", "password", "sshKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(RemoteLocation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RemoteLocation resources.
 */
export interface RemoteLocationState {
    description?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    passphrase?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    sshKey?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RemoteLocation resource.
 */
export interface RemoteLocationArgs {
    description?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    passphrase?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    path: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    protocol: pulumi.Input<string>;
    sshKey?: pulumi.Input<string>;
    username: pulumi.Input<string>;
}
