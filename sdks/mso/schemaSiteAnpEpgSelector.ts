// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SchemaSiteAnpEpgSelector extends pulumi.CustomResource {
    /**
     * Get an existing SchemaSiteAnpEpgSelector resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SchemaSiteAnpEpgSelectorState, opts?: pulumi.CustomResourceOptions): SchemaSiteAnpEpgSelector {
        return new SchemaSiteAnpEpgSelector(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mso:index/schemaSiteAnpEpgSelector:SchemaSiteAnpEpgSelector';

    /**
     * Returns true if the given object is an instance of SchemaSiteAnpEpgSelector.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SchemaSiteAnpEpgSelector {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SchemaSiteAnpEpgSelector.__pulumiType;
    }

    public readonly anpName!: pulumi.Output<string>;
    public readonly epgName!: pulumi.Output<string>;
    public readonly expressions!: pulumi.Output<outputs.SchemaSiteAnpEpgSelectorExpression[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly schemaId!: pulumi.Output<string>;
    public readonly siteId!: pulumi.Output<string>;
    public readonly templateName!: pulumi.Output<string>;

    /**
     * Create a SchemaSiteAnpEpgSelector resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SchemaSiteAnpEpgSelectorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SchemaSiteAnpEpgSelectorArgs | SchemaSiteAnpEpgSelectorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SchemaSiteAnpEpgSelectorState | undefined;
            resourceInputs["anpName"] = state ? state.anpName : undefined;
            resourceInputs["epgName"] = state ? state.epgName : undefined;
            resourceInputs["expressions"] = state ? state.expressions : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["schemaId"] = state ? state.schemaId : undefined;
            resourceInputs["siteId"] = state ? state.siteId : undefined;
            resourceInputs["templateName"] = state ? state.templateName : undefined;
        } else {
            const args = argsOrState as SchemaSiteAnpEpgSelectorArgs | undefined;
            if ((!args || args.anpName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'anpName'");
            }
            if ((!args || args.epgName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'epgName'");
            }
            if ((!args || args.schemaId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemaId'");
            }
            if ((!args || args.siteId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteId'");
            }
            if ((!args || args.templateName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'templateName'");
            }
            resourceInputs["anpName"] = args ? args.anpName : undefined;
            resourceInputs["epgName"] = args ? args.epgName : undefined;
            resourceInputs["expressions"] = args ? args.expressions : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["schemaId"] = args ? args.schemaId : undefined;
            resourceInputs["siteId"] = args ? args.siteId : undefined;
            resourceInputs["templateName"] = args ? args.templateName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SchemaSiteAnpEpgSelector.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SchemaSiteAnpEpgSelector resources.
 */
export interface SchemaSiteAnpEpgSelectorState {
    anpName?: pulumi.Input<string>;
    epgName?: pulumi.Input<string>;
    expressions?: pulumi.Input<pulumi.Input<inputs.SchemaSiteAnpEpgSelectorExpression>[]>;
    name?: pulumi.Input<string>;
    schemaId?: pulumi.Input<string>;
    siteId?: pulumi.Input<string>;
    templateName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SchemaSiteAnpEpgSelector resource.
 */
export interface SchemaSiteAnpEpgSelectorArgs {
    anpName: pulumi.Input<string>;
    epgName: pulumi.Input<string>;
    expressions?: pulumi.Input<pulumi.Input<inputs.SchemaSiteAnpEpgSelectorExpression>[]>;
    name?: pulumi.Input<string>;
    schemaId: pulumi.Input<string>;
    siteId: pulumi.Input<string>;
    templateName: pulumi.Input<string>;
}
