// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SchemaTemplateL3out extends pulumi.CustomResource {
    /**
     * Get an existing SchemaTemplateL3out resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SchemaTemplateL3outState, opts?: pulumi.CustomResourceOptions): SchemaTemplateL3out {
        return new SchemaTemplateL3out(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mso:index/schemaTemplateL3out:SchemaTemplateL3out';

    /**
     * Returns true if the given object is an instance of SchemaTemplateL3out.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SchemaTemplateL3out {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SchemaTemplateL3out.__pulumiType;
    }

    public readonly description!: pulumi.Output<string>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly l3outName!: pulumi.Output<string>;
    public readonly schemaId!: pulumi.Output<string>;
    public readonly templateName!: pulumi.Output<string>;
    public readonly vrfName!: pulumi.Output<string>;
    public readonly vrfSchemaId!: pulumi.Output<string>;
    public readonly vrfTemplateName!: pulumi.Output<string>;

    /**
     * Create a SchemaTemplateL3out resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SchemaTemplateL3outArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SchemaTemplateL3outArgs | SchemaTemplateL3outState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SchemaTemplateL3outState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["l3outName"] = state ? state.l3outName : undefined;
            resourceInputs["schemaId"] = state ? state.schemaId : undefined;
            resourceInputs["templateName"] = state ? state.templateName : undefined;
            resourceInputs["vrfName"] = state ? state.vrfName : undefined;
            resourceInputs["vrfSchemaId"] = state ? state.vrfSchemaId : undefined;
            resourceInputs["vrfTemplateName"] = state ? state.vrfTemplateName : undefined;
        } else {
            const args = argsOrState as SchemaTemplateL3outArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.l3outName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'l3outName'");
            }
            if ((!args || args.schemaId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemaId'");
            }
            if ((!args || args.templateName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'templateName'");
            }
            if ((!args || args.vrfName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vrfName'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["l3outName"] = args ? args.l3outName : undefined;
            resourceInputs["schemaId"] = args ? args.schemaId : undefined;
            resourceInputs["templateName"] = args ? args.templateName : undefined;
            resourceInputs["vrfName"] = args ? args.vrfName : undefined;
            resourceInputs["vrfSchemaId"] = args ? args.vrfSchemaId : undefined;
            resourceInputs["vrfTemplateName"] = args ? args.vrfTemplateName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SchemaTemplateL3out.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SchemaTemplateL3out resources.
 */
export interface SchemaTemplateL3outState {
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    l3outName?: pulumi.Input<string>;
    schemaId?: pulumi.Input<string>;
    templateName?: pulumi.Input<string>;
    vrfName?: pulumi.Input<string>;
    vrfSchemaId?: pulumi.Input<string>;
    vrfTemplateName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SchemaTemplateL3out resource.
 */
export interface SchemaTemplateL3outArgs {
    description?: pulumi.Input<string>;
    displayName: pulumi.Input<string>;
    l3outName: pulumi.Input<string>;
    schemaId: pulumi.Input<string>;
    templateName: pulumi.Input<string>;
    vrfName: pulumi.Input<string>;
    vrfSchemaId?: pulumi.Input<string>;
    vrfTemplateName?: pulumi.Input<string>;
}
