// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SchemaTemplateAnpEpg extends pulumi.CustomResource {
    /**
     * Get an existing SchemaTemplateAnpEpg resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SchemaTemplateAnpEpgState, opts?: pulumi.CustomResourceOptions): SchemaTemplateAnpEpg {
        return new SchemaTemplateAnpEpg(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mso:index/schemaTemplateAnpEpg:SchemaTemplateAnpEpg';

    /**
     * Returns true if the given object is an instance of SchemaTemplateAnpEpg.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SchemaTemplateAnpEpg {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SchemaTemplateAnpEpg.__pulumiType;
    }

    public readonly accessType!: pulumi.Output<string | undefined>;
    public readonly anpName!: pulumi.Output<string>;
    public readonly bdName!: pulumi.Output<string | undefined>;
    public readonly bdSchemaId!: pulumi.Output<string>;
    public readonly bdTemplateName!: pulumi.Output<string>;
    public readonly customServiceType!: pulumi.Output<string | undefined>;
    public readonly deploymentType!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly epgType!: pulumi.Output<string | undefined>;
    public readonly intersiteMulticastSource!: pulumi.Output<boolean | undefined>;
    public readonly intraEpg!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly preferredGroup!: pulumi.Output<boolean>;
    public readonly proxyArp!: pulumi.Output<boolean | undefined>;
    public readonly schemaId!: pulumi.Output<string>;
    public readonly serviceType!: pulumi.Output<string | undefined>;
    public readonly templateName!: pulumi.Output<string>;
    public readonly usegEpg!: pulumi.Output<boolean>;
    public readonly vrfName!: pulumi.Output<string | undefined>;
    public readonly vrfSchemaId!: pulumi.Output<string>;
    public readonly vrfTemplateName!: pulumi.Output<string>;

    /**
     * Create a SchemaTemplateAnpEpg resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SchemaTemplateAnpEpgArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SchemaTemplateAnpEpgArgs | SchemaTemplateAnpEpgState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SchemaTemplateAnpEpgState | undefined;
            resourceInputs["accessType"] = state ? state.accessType : undefined;
            resourceInputs["anpName"] = state ? state.anpName : undefined;
            resourceInputs["bdName"] = state ? state.bdName : undefined;
            resourceInputs["bdSchemaId"] = state ? state.bdSchemaId : undefined;
            resourceInputs["bdTemplateName"] = state ? state.bdTemplateName : undefined;
            resourceInputs["customServiceType"] = state ? state.customServiceType : undefined;
            resourceInputs["deploymentType"] = state ? state.deploymentType : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["epgType"] = state ? state.epgType : undefined;
            resourceInputs["intersiteMulticastSource"] = state ? state.intersiteMulticastSource : undefined;
            resourceInputs["intraEpg"] = state ? state.intraEpg : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["preferredGroup"] = state ? state.preferredGroup : undefined;
            resourceInputs["proxyArp"] = state ? state.proxyArp : undefined;
            resourceInputs["schemaId"] = state ? state.schemaId : undefined;
            resourceInputs["serviceType"] = state ? state.serviceType : undefined;
            resourceInputs["templateName"] = state ? state.templateName : undefined;
            resourceInputs["usegEpg"] = state ? state.usegEpg : undefined;
            resourceInputs["vrfName"] = state ? state.vrfName : undefined;
            resourceInputs["vrfSchemaId"] = state ? state.vrfSchemaId : undefined;
            resourceInputs["vrfTemplateName"] = state ? state.vrfTemplateName : undefined;
        } else {
            const args = argsOrState as SchemaTemplateAnpEpgArgs | undefined;
            if ((!args || args.anpName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'anpName'");
            }
            if ((!args || args.schemaId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemaId'");
            }
            if ((!args || args.templateName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'templateName'");
            }
            resourceInputs["accessType"] = args ? args.accessType : undefined;
            resourceInputs["anpName"] = args ? args.anpName : undefined;
            resourceInputs["bdName"] = args ? args.bdName : undefined;
            resourceInputs["bdSchemaId"] = args ? args.bdSchemaId : undefined;
            resourceInputs["bdTemplateName"] = args ? args.bdTemplateName : undefined;
            resourceInputs["customServiceType"] = args ? args.customServiceType : undefined;
            resourceInputs["deploymentType"] = args ? args.deploymentType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["epgType"] = args ? args.epgType : undefined;
            resourceInputs["intersiteMulticastSource"] = args ? args.intersiteMulticastSource : undefined;
            resourceInputs["intraEpg"] = args ? args.intraEpg : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["preferredGroup"] = args ? args.preferredGroup : undefined;
            resourceInputs["proxyArp"] = args ? args.proxyArp : undefined;
            resourceInputs["schemaId"] = args ? args.schemaId : undefined;
            resourceInputs["serviceType"] = args ? args.serviceType : undefined;
            resourceInputs["templateName"] = args ? args.templateName : undefined;
            resourceInputs["usegEpg"] = args ? args.usegEpg : undefined;
            resourceInputs["vrfName"] = args ? args.vrfName : undefined;
            resourceInputs["vrfSchemaId"] = args ? args.vrfSchemaId : undefined;
            resourceInputs["vrfTemplateName"] = args ? args.vrfTemplateName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SchemaTemplateAnpEpg.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SchemaTemplateAnpEpg resources.
 */
export interface SchemaTemplateAnpEpgState {
    accessType?: pulumi.Input<string>;
    anpName?: pulumi.Input<string>;
    bdName?: pulumi.Input<string>;
    bdSchemaId?: pulumi.Input<string>;
    bdTemplateName?: pulumi.Input<string>;
    customServiceType?: pulumi.Input<string>;
    deploymentType?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    epgType?: pulumi.Input<string>;
    intersiteMulticastSource?: pulumi.Input<boolean>;
    intraEpg?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    preferredGroup?: pulumi.Input<boolean>;
    proxyArp?: pulumi.Input<boolean>;
    schemaId?: pulumi.Input<string>;
    serviceType?: pulumi.Input<string>;
    templateName?: pulumi.Input<string>;
    usegEpg?: pulumi.Input<boolean>;
    vrfName?: pulumi.Input<string>;
    vrfSchemaId?: pulumi.Input<string>;
    vrfTemplateName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SchemaTemplateAnpEpg resource.
 */
export interface SchemaTemplateAnpEpgArgs {
    accessType?: pulumi.Input<string>;
    anpName: pulumi.Input<string>;
    bdName?: pulumi.Input<string>;
    bdSchemaId?: pulumi.Input<string>;
    bdTemplateName?: pulumi.Input<string>;
    customServiceType?: pulumi.Input<string>;
    deploymentType?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    epgType?: pulumi.Input<string>;
    intersiteMulticastSource?: pulumi.Input<boolean>;
    intraEpg?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    preferredGroup?: pulumi.Input<boolean>;
    proxyArp?: pulumi.Input<boolean>;
    schemaId: pulumi.Input<string>;
    serviceType?: pulumi.Input<string>;
    templateName: pulumi.Input<string>;
    usegEpg?: pulumi.Input<boolean>;
    vrfName?: pulumi.Input<string>;
    vrfSchemaId?: pulumi.Input<string>;
    vrfTemplateName?: pulumi.Input<string>;
}
