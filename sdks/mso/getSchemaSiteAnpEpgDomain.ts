// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getSchemaSiteAnpEpgDomain(args: GetSchemaSiteAnpEpgDomainArgs, opts?: pulumi.InvokeOptions): Promise<GetSchemaSiteAnpEpgDomainResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mso:index/getSchemaSiteAnpEpgDomain:getSchemaSiteAnpEpgDomain", {
        "anpName": args.anpName,
        "domainDn": args.domainDn,
        "domainName": args.domainName,
        "domainType": args.domainType,
        "epgName": args.epgName,
        "id": args.id,
        "schemaId": args.schemaId,
        "siteId": args.siteId,
        "templateName": args.templateName,
        "vmmDomainType": args.vmmDomainType,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSchemaSiteAnpEpgDomain.
 */
export interface GetSchemaSiteAnpEpgDomainArgs {
    anpName: string;
    domainDn?: string;
    domainName?: string;
    domainType?: string;
    epgName: string;
    id?: string;
    schemaId: string;
    siteId: string;
    templateName: string;
    vmmDomainType?: string;
}

/**
 * A collection of values returned by getSchemaSiteAnpEpgDomain.
 */
export interface GetSchemaSiteAnpEpgDomainResult {
    readonly allowMicroSegmentation: boolean;
    readonly allowPromiscuous: string;
    readonly anpName: string;
    readonly bindingType: string;
    readonly customEpgName: string;
    readonly delimiter: string;
    readonly deployImmediacy: string;
    readonly dn: string;
    readonly domainDn: string;
    readonly domainName: string;
    readonly domainType: string;
    readonly enhancedLagPolicyDn: string;
    readonly enhancedLagPolicyName: string;
    readonly epgName: string;
    readonly forgedTransmits: string;
    readonly id: string;
    readonly macChanges: string;
    readonly microSegVlan: number;
    readonly microSegVlanType: string;
    readonly netflow: string;
    readonly numPorts: number;
    readonly portAllocation: string;
    readonly portEncapVlan: number;
    readonly portEncapVlanType: string;
    readonly resolutionImmediacy: string;
    readonly schemaId: string;
    readonly siteId: string;
    readonly switchType: string;
    readonly switchingMode: string;
    readonly templateName: string;
    readonly vlanEncapMode: string;
    readonly vmmDomainType: string;
}
export function getSchemaSiteAnpEpgDomainOutput(args: GetSchemaSiteAnpEpgDomainOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSchemaSiteAnpEpgDomainResult> {
    return pulumi.output(args).apply((a: any) => getSchemaSiteAnpEpgDomain(a, opts))
}

/**
 * A collection of arguments for invoking getSchemaSiteAnpEpgDomain.
 */
export interface GetSchemaSiteAnpEpgDomainOutputArgs {
    anpName: pulumi.Input<string>;
    domainDn?: pulumi.Input<string>;
    domainName?: pulumi.Input<string>;
    domainType?: pulumi.Input<string>;
    epgName: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    schemaId: pulumi.Input<string>;
    siteId: pulumi.Input<string>;
    templateName: pulumi.Input<string>;
    vmmDomainType?: pulumi.Input<string>;
}
