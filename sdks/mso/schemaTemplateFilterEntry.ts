// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SchemaTemplateFilterEntry extends pulumi.CustomResource {
    /**
     * Get an existing SchemaTemplateFilterEntry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SchemaTemplateFilterEntryState, opts?: pulumi.CustomResourceOptions): SchemaTemplateFilterEntry {
        return new SchemaTemplateFilterEntry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mso:index/schemaTemplateFilterEntry:SchemaTemplateFilterEntry';

    /**
     * Returns true if the given object is an instance of SchemaTemplateFilterEntry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SchemaTemplateFilterEntry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SchemaTemplateFilterEntry.__pulumiType;
    }

    public readonly arpFlag!: pulumi.Output<string>;
    public readonly destinationFrom!: pulumi.Output<string>;
    public readonly destinationTo!: pulumi.Output<string>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly entryDescription!: pulumi.Output<string>;
    public readonly entryDisplayName!: pulumi.Output<string>;
    public readonly entryName!: pulumi.Output<string>;
    public readonly etherType!: pulumi.Output<string>;
    public readonly ipProtocol!: pulumi.Output<string>;
    public readonly matchOnlyFragments!: pulumi.Output<boolean>;
    public readonly name!: pulumi.Output<string>;
    public readonly schemaId!: pulumi.Output<string>;
    public readonly sourceFrom!: pulumi.Output<string>;
    public readonly sourceTo!: pulumi.Output<string>;
    public readonly stateful!: pulumi.Output<boolean>;
    public readonly tcpSessionRules!: pulumi.Output<string[]>;
    public readonly templateName!: pulumi.Output<string>;

    /**
     * Create a SchemaTemplateFilterEntry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SchemaTemplateFilterEntryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SchemaTemplateFilterEntryArgs | SchemaTemplateFilterEntryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SchemaTemplateFilterEntryState | undefined;
            resourceInputs["arpFlag"] = state ? state.arpFlag : undefined;
            resourceInputs["destinationFrom"] = state ? state.destinationFrom : undefined;
            resourceInputs["destinationTo"] = state ? state.destinationTo : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["entryDescription"] = state ? state.entryDescription : undefined;
            resourceInputs["entryDisplayName"] = state ? state.entryDisplayName : undefined;
            resourceInputs["entryName"] = state ? state.entryName : undefined;
            resourceInputs["etherType"] = state ? state.etherType : undefined;
            resourceInputs["ipProtocol"] = state ? state.ipProtocol : undefined;
            resourceInputs["matchOnlyFragments"] = state ? state.matchOnlyFragments : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["schemaId"] = state ? state.schemaId : undefined;
            resourceInputs["sourceFrom"] = state ? state.sourceFrom : undefined;
            resourceInputs["sourceTo"] = state ? state.sourceTo : undefined;
            resourceInputs["stateful"] = state ? state.stateful : undefined;
            resourceInputs["tcpSessionRules"] = state ? state.tcpSessionRules : undefined;
            resourceInputs["templateName"] = state ? state.templateName : undefined;
        } else {
            const args = argsOrState as SchemaTemplateFilterEntryArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.entryDisplayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'entryDisplayName'");
            }
            if ((!args || args.entryName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'entryName'");
            }
            if ((!args || args.schemaId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemaId'");
            }
            if ((!args || args.templateName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'templateName'");
            }
            resourceInputs["arpFlag"] = args ? args.arpFlag : undefined;
            resourceInputs["destinationFrom"] = args ? args.destinationFrom : undefined;
            resourceInputs["destinationTo"] = args ? args.destinationTo : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["entryDescription"] = args ? args.entryDescription : undefined;
            resourceInputs["entryDisplayName"] = args ? args.entryDisplayName : undefined;
            resourceInputs["entryName"] = args ? args.entryName : undefined;
            resourceInputs["etherType"] = args ? args.etherType : undefined;
            resourceInputs["ipProtocol"] = args ? args.ipProtocol : undefined;
            resourceInputs["matchOnlyFragments"] = args ? args.matchOnlyFragments : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["schemaId"] = args ? args.schemaId : undefined;
            resourceInputs["sourceFrom"] = args ? args.sourceFrom : undefined;
            resourceInputs["sourceTo"] = args ? args.sourceTo : undefined;
            resourceInputs["stateful"] = args ? args.stateful : undefined;
            resourceInputs["tcpSessionRules"] = args ? args.tcpSessionRules : undefined;
            resourceInputs["templateName"] = args ? args.templateName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SchemaTemplateFilterEntry.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SchemaTemplateFilterEntry resources.
 */
export interface SchemaTemplateFilterEntryState {
    arpFlag?: pulumi.Input<string>;
    destinationFrom?: pulumi.Input<string>;
    destinationTo?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    entryDescription?: pulumi.Input<string>;
    entryDisplayName?: pulumi.Input<string>;
    entryName?: pulumi.Input<string>;
    etherType?: pulumi.Input<string>;
    ipProtocol?: pulumi.Input<string>;
    matchOnlyFragments?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    schemaId?: pulumi.Input<string>;
    sourceFrom?: pulumi.Input<string>;
    sourceTo?: pulumi.Input<string>;
    stateful?: pulumi.Input<boolean>;
    tcpSessionRules?: pulumi.Input<pulumi.Input<string>[]>;
    templateName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SchemaTemplateFilterEntry resource.
 */
export interface SchemaTemplateFilterEntryArgs {
    arpFlag?: pulumi.Input<string>;
    destinationFrom?: pulumi.Input<string>;
    destinationTo?: pulumi.Input<string>;
    displayName: pulumi.Input<string>;
    entryDescription?: pulumi.Input<string>;
    entryDisplayName: pulumi.Input<string>;
    entryName: pulumi.Input<string>;
    etherType?: pulumi.Input<string>;
    ipProtocol?: pulumi.Input<string>;
    matchOnlyFragments?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    schemaId: pulumi.Input<string>;
    sourceFrom?: pulumi.Input<string>;
    sourceTo?: pulumi.Input<string>;
    stateful?: pulumi.Input<boolean>;
    tcpSessionRules?: pulumi.Input<pulumi.Input<string>[]>;
    templateName: pulumi.Input<string>;
}
