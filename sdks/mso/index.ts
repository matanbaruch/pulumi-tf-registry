// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { GetLabelArgs, GetLabelResult, GetLabelOutputArgs } from "./getLabel";
export const getLabel: typeof import("./getLabel").getLabel = null as any;
export const getLabelOutput: typeof import("./getLabel").getLabelOutput = null as any;
utilities.lazyLoad(exports, ["getLabel","getLabelOutput"], () => require("./getLabel"));

export { GetRemoteLocationArgs, GetRemoteLocationResult, GetRemoteLocationOutputArgs } from "./getRemoteLocation";
export const getRemoteLocation: typeof import("./getRemoteLocation").getRemoteLocation = null as any;
export const getRemoteLocationOutput: typeof import("./getRemoteLocation").getRemoteLocationOutput = null as any;
utilities.lazyLoad(exports, ["getRemoteLocation","getRemoteLocationOutput"], () => require("./getRemoteLocation"));

export { GetRestArgs, GetRestResult, GetRestOutputArgs } from "./getRest";
export const getRest: typeof import("./getRest").getRest = null as any;
export const getRestOutput: typeof import("./getRest").getRestOutput = null as any;
utilities.lazyLoad(exports, ["getRest","getRestOutput"], () => require("./getRest"));

export { GetRoleArgs, GetRoleResult, GetRoleOutputArgs } from "./getRole";
export const getRole: typeof import("./getRole").getRole = null as any;
export const getRoleOutput: typeof import("./getRole").getRoleOutput = null as any;
utilities.lazyLoad(exports, ["getRole","getRoleOutput"], () => require("./getRole"));

export { GetSchemaArgs, GetSchemaResult, GetSchemaOutputArgs } from "./getSchema";
export const getSchema: typeof import("./getSchema").getSchema = null as any;
export const getSchemaOutput: typeof import("./getSchema").getSchemaOutput = null as any;
utilities.lazyLoad(exports, ["getSchema","getSchemaOutput"], () => require("./getSchema"));

export { GetSchemaSiteArgs, GetSchemaSiteResult, GetSchemaSiteOutputArgs } from "./getSchemaSite";
export const getSchemaSite: typeof import("./getSchemaSite").getSchemaSite = null as any;
export const getSchemaSiteOutput: typeof import("./getSchemaSite").getSchemaSiteOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaSite","getSchemaSiteOutput"], () => require("./getSchemaSite"));

export { GetSchemaSiteAnpArgs, GetSchemaSiteAnpResult, GetSchemaSiteAnpOutputArgs } from "./getSchemaSiteAnp";
export const getSchemaSiteAnp: typeof import("./getSchemaSiteAnp").getSchemaSiteAnp = null as any;
export const getSchemaSiteAnpOutput: typeof import("./getSchemaSiteAnp").getSchemaSiteAnpOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaSiteAnp","getSchemaSiteAnpOutput"], () => require("./getSchemaSiteAnp"));

export { GetSchemaSiteAnpEpgArgs, GetSchemaSiteAnpEpgResult, GetSchemaSiteAnpEpgOutputArgs } from "./getSchemaSiteAnpEpg";
export const getSchemaSiteAnpEpg: typeof import("./getSchemaSiteAnpEpg").getSchemaSiteAnpEpg = null as any;
export const getSchemaSiteAnpEpgOutput: typeof import("./getSchemaSiteAnpEpg").getSchemaSiteAnpEpgOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaSiteAnpEpg","getSchemaSiteAnpEpgOutput"], () => require("./getSchemaSiteAnpEpg"));

export { GetSchemaSiteAnpEpgBulkStaticportArgs, GetSchemaSiteAnpEpgBulkStaticportResult, GetSchemaSiteAnpEpgBulkStaticportOutputArgs } from "./getSchemaSiteAnpEpgBulkStaticport";
export const getSchemaSiteAnpEpgBulkStaticport: typeof import("./getSchemaSiteAnpEpgBulkStaticport").getSchemaSiteAnpEpgBulkStaticport = null as any;
export const getSchemaSiteAnpEpgBulkStaticportOutput: typeof import("./getSchemaSiteAnpEpgBulkStaticport").getSchemaSiteAnpEpgBulkStaticportOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaSiteAnpEpgBulkStaticport","getSchemaSiteAnpEpgBulkStaticportOutput"], () => require("./getSchemaSiteAnpEpgBulkStaticport"));

export { GetSchemaSiteAnpEpgDomainArgs, GetSchemaSiteAnpEpgDomainResult, GetSchemaSiteAnpEpgDomainOutputArgs } from "./getSchemaSiteAnpEpgDomain";
export const getSchemaSiteAnpEpgDomain: typeof import("./getSchemaSiteAnpEpgDomain").getSchemaSiteAnpEpgDomain = null as any;
export const getSchemaSiteAnpEpgDomainOutput: typeof import("./getSchemaSiteAnpEpgDomain").getSchemaSiteAnpEpgDomainOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaSiteAnpEpgDomain","getSchemaSiteAnpEpgDomainOutput"], () => require("./getSchemaSiteAnpEpgDomain"));

export { GetSchemaSiteAnpEpgSelectorArgs, GetSchemaSiteAnpEpgSelectorResult, GetSchemaSiteAnpEpgSelectorOutputArgs } from "./getSchemaSiteAnpEpgSelector";
export const getSchemaSiteAnpEpgSelector: typeof import("./getSchemaSiteAnpEpgSelector").getSchemaSiteAnpEpgSelector = null as any;
export const getSchemaSiteAnpEpgSelectorOutput: typeof import("./getSchemaSiteAnpEpgSelector").getSchemaSiteAnpEpgSelectorOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaSiteAnpEpgSelector","getSchemaSiteAnpEpgSelectorOutput"], () => require("./getSchemaSiteAnpEpgSelector"));

export { GetSchemaSiteAnpEpgStaticLeafArgs, GetSchemaSiteAnpEpgStaticLeafResult, GetSchemaSiteAnpEpgStaticLeafOutputArgs } from "./getSchemaSiteAnpEpgStaticLeaf";
export const getSchemaSiteAnpEpgStaticLeaf: typeof import("./getSchemaSiteAnpEpgStaticLeaf").getSchemaSiteAnpEpgStaticLeaf = null as any;
export const getSchemaSiteAnpEpgStaticLeafOutput: typeof import("./getSchemaSiteAnpEpgStaticLeaf").getSchemaSiteAnpEpgStaticLeafOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaSiteAnpEpgStaticLeaf","getSchemaSiteAnpEpgStaticLeafOutput"], () => require("./getSchemaSiteAnpEpgStaticLeaf"));

export { GetSchemaSiteAnpEpgStaticPortArgs, GetSchemaSiteAnpEpgStaticPortResult, GetSchemaSiteAnpEpgStaticPortOutputArgs } from "./getSchemaSiteAnpEpgStaticPort";
export const getSchemaSiteAnpEpgStaticPort: typeof import("./getSchemaSiteAnpEpgStaticPort").getSchemaSiteAnpEpgStaticPort = null as any;
export const getSchemaSiteAnpEpgStaticPortOutput: typeof import("./getSchemaSiteAnpEpgStaticPort").getSchemaSiteAnpEpgStaticPortOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaSiteAnpEpgStaticPort","getSchemaSiteAnpEpgStaticPortOutput"], () => require("./getSchemaSiteAnpEpgStaticPort"));

export { GetSchemaSiteAnpEpgSubnetArgs, GetSchemaSiteAnpEpgSubnetResult, GetSchemaSiteAnpEpgSubnetOutputArgs } from "./getSchemaSiteAnpEpgSubnet";
export const getSchemaSiteAnpEpgSubnet: typeof import("./getSchemaSiteAnpEpgSubnet").getSchemaSiteAnpEpgSubnet = null as any;
export const getSchemaSiteAnpEpgSubnetOutput: typeof import("./getSchemaSiteAnpEpgSubnet").getSchemaSiteAnpEpgSubnetOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaSiteAnpEpgSubnet","getSchemaSiteAnpEpgSubnetOutput"], () => require("./getSchemaSiteAnpEpgSubnet"));

export { GetSchemaSiteBdArgs, GetSchemaSiteBdResult, GetSchemaSiteBdOutputArgs } from "./getSchemaSiteBd";
export const getSchemaSiteBd: typeof import("./getSchemaSiteBd").getSchemaSiteBd = null as any;
export const getSchemaSiteBdOutput: typeof import("./getSchemaSiteBd").getSchemaSiteBdOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaSiteBd","getSchemaSiteBdOutput"], () => require("./getSchemaSiteBd"));

export { GetSchemaSiteBdL3outArgs, GetSchemaSiteBdL3outResult, GetSchemaSiteBdL3outOutputArgs } from "./getSchemaSiteBdL3out";
export const getSchemaSiteBdL3out: typeof import("./getSchemaSiteBdL3out").getSchemaSiteBdL3out = null as any;
export const getSchemaSiteBdL3outOutput: typeof import("./getSchemaSiteBdL3out").getSchemaSiteBdL3outOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaSiteBdL3out","getSchemaSiteBdL3outOutput"], () => require("./getSchemaSiteBdL3out"));

export { GetSchemaSiteBdSubnetArgs, GetSchemaSiteBdSubnetResult, GetSchemaSiteBdSubnetOutputArgs } from "./getSchemaSiteBdSubnet";
export const getSchemaSiteBdSubnet: typeof import("./getSchemaSiteBdSubnet").getSchemaSiteBdSubnet = null as any;
export const getSchemaSiteBdSubnetOutput: typeof import("./getSchemaSiteBdSubnet").getSchemaSiteBdSubnetOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaSiteBdSubnet","getSchemaSiteBdSubnetOutput"], () => require("./getSchemaSiteBdSubnet"));

export { GetSchemaSiteContractServiceGraphArgs, GetSchemaSiteContractServiceGraphResult, GetSchemaSiteContractServiceGraphOutputArgs } from "./getSchemaSiteContractServiceGraph";
export const getSchemaSiteContractServiceGraph: typeof import("./getSchemaSiteContractServiceGraph").getSchemaSiteContractServiceGraph = null as any;
export const getSchemaSiteContractServiceGraphOutput: typeof import("./getSchemaSiteContractServiceGraph").getSchemaSiteContractServiceGraphOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaSiteContractServiceGraph","getSchemaSiteContractServiceGraphOutput"], () => require("./getSchemaSiteContractServiceGraph"));

export { GetSchemaSiteContractServiceGraphListenerArgs, GetSchemaSiteContractServiceGraphListenerResult, GetSchemaSiteContractServiceGraphListenerOutputArgs } from "./getSchemaSiteContractServiceGraphListener";
export const getSchemaSiteContractServiceGraphListener: typeof import("./getSchemaSiteContractServiceGraphListener").getSchemaSiteContractServiceGraphListener = null as any;
export const getSchemaSiteContractServiceGraphListenerOutput: typeof import("./getSchemaSiteContractServiceGraphListener").getSchemaSiteContractServiceGraphListenerOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaSiteContractServiceGraphListener","getSchemaSiteContractServiceGraphListenerOutput"], () => require("./getSchemaSiteContractServiceGraphListener"));

export { GetSchemaSiteExternalEpgArgs, GetSchemaSiteExternalEpgResult, GetSchemaSiteExternalEpgOutputArgs } from "./getSchemaSiteExternalEpg";
export const getSchemaSiteExternalEpg: typeof import("./getSchemaSiteExternalEpg").getSchemaSiteExternalEpg = null as any;
export const getSchemaSiteExternalEpgOutput: typeof import("./getSchemaSiteExternalEpg").getSchemaSiteExternalEpgOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaSiteExternalEpg","getSchemaSiteExternalEpgOutput"], () => require("./getSchemaSiteExternalEpg"));

export { GetSchemaSiteExternalEpgSelectorArgs, GetSchemaSiteExternalEpgSelectorResult, GetSchemaSiteExternalEpgSelectorOutputArgs } from "./getSchemaSiteExternalEpgSelector";
export const getSchemaSiteExternalEpgSelector: typeof import("./getSchemaSiteExternalEpgSelector").getSchemaSiteExternalEpgSelector = null as any;
export const getSchemaSiteExternalEpgSelectorOutput: typeof import("./getSchemaSiteExternalEpgSelector").getSchemaSiteExternalEpgSelectorOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaSiteExternalEpgSelector","getSchemaSiteExternalEpgSelectorOutput"], () => require("./getSchemaSiteExternalEpgSelector"));

export { GetSchemaSiteServiceGraphArgs, GetSchemaSiteServiceGraphResult, GetSchemaSiteServiceGraphOutputArgs } from "./getSchemaSiteServiceGraph";
export const getSchemaSiteServiceGraph: typeof import("./getSchemaSiteServiceGraph").getSchemaSiteServiceGraph = null as any;
export const getSchemaSiteServiceGraphOutput: typeof import("./getSchemaSiteServiceGraph").getSchemaSiteServiceGraphOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaSiteServiceGraph","getSchemaSiteServiceGraphOutput"], () => require("./getSchemaSiteServiceGraph"));

export { GetSchemaSiteVrfArgs, GetSchemaSiteVrfResult, GetSchemaSiteVrfOutputArgs } from "./getSchemaSiteVrf";
export const getSchemaSiteVrf: typeof import("./getSchemaSiteVrf").getSchemaSiteVrf = null as any;
export const getSchemaSiteVrfOutput: typeof import("./getSchemaSiteVrf").getSchemaSiteVrfOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaSiteVrf","getSchemaSiteVrfOutput"], () => require("./getSchemaSiteVrf"));

export { GetSchemaSiteVrfRegionArgs, GetSchemaSiteVrfRegionResult, GetSchemaSiteVrfRegionOutputArgs } from "./getSchemaSiteVrfRegion";
export const getSchemaSiteVrfRegion: typeof import("./getSchemaSiteVrfRegion").getSchemaSiteVrfRegion = null as any;
export const getSchemaSiteVrfRegionOutput: typeof import("./getSchemaSiteVrfRegion").getSchemaSiteVrfRegionOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaSiteVrfRegion","getSchemaSiteVrfRegionOutput"], () => require("./getSchemaSiteVrfRegion"));

export { GetSchemaSiteVrfRegionCidrArgs, GetSchemaSiteVrfRegionCidrResult, GetSchemaSiteVrfRegionCidrOutputArgs } from "./getSchemaSiteVrfRegionCidr";
export const getSchemaSiteVrfRegionCidr: typeof import("./getSchemaSiteVrfRegionCidr").getSchemaSiteVrfRegionCidr = null as any;
export const getSchemaSiteVrfRegionCidrOutput: typeof import("./getSchemaSiteVrfRegionCidr").getSchemaSiteVrfRegionCidrOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaSiteVrfRegionCidr","getSchemaSiteVrfRegionCidrOutput"], () => require("./getSchemaSiteVrfRegionCidr"));

export { GetSchemaSiteVrfRegionCidrSubnetArgs, GetSchemaSiteVrfRegionCidrSubnetResult, GetSchemaSiteVrfRegionCidrSubnetOutputArgs } from "./getSchemaSiteVrfRegionCidrSubnet";
export const getSchemaSiteVrfRegionCidrSubnet: typeof import("./getSchemaSiteVrfRegionCidrSubnet").getSchemaSiteVrfRegionCidrSubnet = null as any;
export const getSchemaSiteVrfRegionCidrSubnetOutput: typeof import("./getSchemaSiteVrfRegionCidrSubnet").getSchemaSiteVrfRegionCidrSubnetOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaSiteVrfRegionCidrSubnet","getSchemaSiteVrfRegionCidrSubnetOutput"], () => require("./getSchemaSiteVrfRegionCidrSubnet"));

export { GetSchemaSiteVrfRouteLeakArgs, GetSchemaSiteVrfRouteLeakResult, GetSchemaSiteVrfRouteLeakOutputArgs } from "./getSchemaSiteVrfRouteLeak";
export const getSchemaSiteVrfRouteLeak: typeof import("./getSchemaSiteVrfRouteLeak").getSchemaSiteVrfRouteLeak = null as any;
export const getSchemaSiteVrfRouteLeakOutput: typeof import("./getSchemaSiteVrfRouteLeak").getSchemaSiteVrfRouteLeakOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaSiteVrfRouteLeak","getSchemaSiteVrfRouteLeakOutput"], () => require("./getSchemaSiteVrfRouteLeak"));

export { GetSchemaTemplateArgs, GetSchemaTemplateResult, GetSchemaTemplateOutputArgs } from "./getSchemaTemplate";
export const getSchemaTemplate: typeof import("./getSchemaTemplate").getSchemaTemplate = null as any;
export const getSchemaTemplateOutput: typeof import("./getSchemaTemplate").getSchemaTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaTemplate","getSchemaTemplateOutput"], () => require("./getSchemaTemplate"));

export { GetSchemaTemplateAnpArgs, GetSchemaTemplateAnpResult, GetSchemaTemplateAnpOutputArgs } from "./getSchemaTemplateAnp";
export const getSchemaTemplateAnp: typeof import("./getSchemaTemplateAnp").getSchemaTemplateAnp = null as any;
export const getSchemaTemplateAnpOutput: typeof import("./getSchemaTemplateAnp").getSchemaTemplateAnpOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaTemplateAnp","getSchemaTemplateAnpOutput"], () => require("./getSchemaTemplateAnp"));

export { GetSchemaTemplateAnpEpgArgs, GetSchemaTemplateAnpEpgResult, GetSchemaTemplateAnpEpgOutputArgs } from "./getSchemaTemplateAnpEpg";
export const getSchemaTemplateAnpEpg: typeof import("./getSchemaTemplateAnpEpg").getSchemaTemplateAnpEpg = null as any;
export const getSchemaTemplateAnpEpgOutput: typeof import("./getSchemaTemplateAnpEpg").getSchemaTemplateAnpEpgOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaTemplateAnpEpg","getSchemaTemplateAnpEpgOutput"], () => require("./getSchemaTemplateAnpEpg"));

export { GetSchemaTemplateAnpEpgContractArgs, GetSchemaTemplateAnpEpgContractResult, GetSchemaTemplateAnpEpgContractOutputArgs } from "./getSchemaTemplateAnpEpgContract";
export const getSchemaTemplateAnpEpgContract: typeof import("./getSchemaTemplateAnpEpgContract").getSchemaTemplateAnpEpgContract = null as any;
export const getSchemaTemplateAnpEpgContractOutput: typeof import("./getSchemaTemplateAnpEpgContract").getSchemaTemplateAnpEpgContractOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaTemplateAnpEpgContract","getSchemaTemplateAnpEpgContractOutput"], () => require("./getSchemaTemplateAnpEpgContract"));

export { GetSchemaTemplateAnpEpgSelectorArgs, GetSchemaTemplateAnpEpgSelectorResult, GetSchemaTemplateAnpEpgSelectorOutputArgs } from "./getSchemaTemplateAnpEpgSelector";
export const getSchemaTemplateAnpEpgSelector: typeof import("./getSchemaTemplateAnpEpgSelector").getSchemaTemplateAnpEpgSelector = null as any;
export const getSchemaTemplateAnpEpgSelectorOutput: typeof import("./getSchemaTemplateAnpEpgSelector").getSchemaTemplateAnpEpgSelectorOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaTemplateAnpEpgSelector","getSchemaTemplateAnpEpgSelectorOutput"], () => require("./getSchemaTemplateAnpEpgSelector"));

export { GetSchemaTemplateAnpEpgSubnetArgs, GetSchemaTemplateAnpEpgSubnetResult, GetSchemaTemplateAnpEpgSubnetOutputArgs } from "./getSchemaTemplateAnpEpgSubnet";
export const getSchemaTemplateAnpEpgSubnet: typeof import("./getSchemaTemplateAnpEpgSubnet").getSchemaTemplateAnpEpgSubnet = null as any;
export const getSchemaTemplateAnpEpgSubnetOutput: typeof import("./getSchemaTemplateAnpEpgSubnet").getSchemaTemplateAnpEpgSubnetOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaTemplateAnpEpgSubnet","getSchemaTemplateAnpEpgSubnetOutput"], () => require("./getSchemaTemplateAnpEpgSubnet"));

export { GetSchemaTemplateAnpEpgUsegAttrArgs, GetSchemaTemplateAnpEpgUsegAttrResult, GetSchemaTemplateAnpEpgUsegAttrOutputArgs } from "./getSchemaTemplateAnpEpgUsegAttr";
export const getSchemaTemplateAnpEpgUsegAttr: typeof import("./getSchemaTemplateAnpEpgUsegAttr").getSchemaTemplateAnpEpgUsegAttr = null as any;
export const getSchemaTemplateAnpEpgUsegAttrOutput: typeof import("./getSchemaTemplateAnpEpgUsegAttr").getSchemaTemplateAnpEpgUsegAttrOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaTemplateAnpEpgUsegAttr","getSchemaTemplateAnpEpgUsegAttrOutput"], () => require("./getSchemaTemplateAnpEpgUsegAttr"));

export { GetSchemaTemplateBdArgs, GetSchemaTemplateBdResult, GetSchemaTemplateBdOutputArgs } from "./getSchemaTemplateBd";
export const getSchemaTemplateBd: typeof import("./getSchemaTemplateBd").getSchemaTemplateBd = null as any;
export const getSchemaTemplateBdOutput: typeof import("./getSchemaTemplateBd").getSchemaTemplateBdOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaTemplateBd","getSchemaTemplateBdOutput"], () => require("./getSchemaTemplateBd"));

export { GetSchemaTemplateBdSubnetArgs, GetSchemaTemplateBdSubnetResult, GetSchemaTemplateBdSubnetOutputArgs } from "./getSchemaTemplateBdSubnet";
export const getSchemaTemplateBdSubnet: typeof import("./getSchemaTemplateBdSubnet").getSchemaTemplateBdSubnet = null as any;
export const getSchemaTemplateBdSubnetOutput: typeof import("./getSchemaTemplateBdSubnet").getSchemaTemplateBdSubnetOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaTemplateBdSubnet","getSchemaTemplateBdSubnetOutput"], () => require("./getSchemaTemplateBdSubnet"));

export { GetSchemaTemplateContractArgs, GetSchemaTemplateContractResult, GetSchemaTemplateContractOutputArgs } from "./getSchemaTemplateContract";
export const getSchemaTemplateContract: typeof import("./getSchemaTemplateContract").getSchemaTemplateContract = null as any;
export const getSchemaTemplateContractOutput: typeof import("./getSchemaTemplateContract").getSchemaTemplateContractOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaTemplateContract","getSchemaTemplateContractOutput"], () => require("./getSchemaTemplateContract"));

export { GetSchemaTemplateContractFilterArgs, GetSchemaTemplateContractFilterResult, GetSchemaTemplateContractFilterOutputArgs } from "./getSchemaTemplateContractFilter";
export const getSchemaTemplateContractFilter: typeof import("./getSchemaTemplateContractFilter").getSchemaTemplateContractFilter = null as any;
export const getSchemaTemplateContractFilterOutput: typeof import("./getSchemaTemplateContractFilter").getSchemaTemplateContractFilterOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaTemplateContractFilter","getSchemaTemplateContractFilterOutput"], () => require("./getSchemaTemplateContractFilter"));

export { GetSchemaTemplateContractServiceGraphArgs, GetSchemaTemplateContractServiceGraphResult, GetSchemaTemplateContractServiceGraphOutputArgs } from "./getSchemaTemplateContractServiceGraph";
export const getSchemaTemplateContractServiceGraph: typeof import("./getSchemaTemplateContractServiceGraph").getSchemaTemplateContractServiceGraph = null as any;
export const getSchemaTemplateContractServiceGraphOutput: typeof import("./getSchemaTemplateContractServiceGraph").getSchemaTemplateContractServiceGraphOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaTemplateContractServiceGraph","getSchemaTemplateContractServiceGraphOutput"], () => require("./getSchemaTemplateContractServiceGraph"));

export { GetSchemaTemplateExternalEpgArgs, GetSchemaTemplateExternalEpgResult, GetSchemaTemplateExternalEpgOutputArgs } from "./getSchemaTemplateExternalEpg";
export const getSchemaTemplateExternalEpg: typeof import("./getSchemaTemplateExternalEpg").getSchemaTemplateExternalEpg = null as any;
export const getSchemaTemplateExternalEpgOutput: typeof import("./getSchemaTemplateExternalEpg").getSchemaTemplateExternalEpgOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaTemplateExternalEpg","getSchemaTemplateExternalEpgOutput"], () => require("./getSchemaTemplateExternalEpg"));

export { GetSchemaTemplateExternalEpgContractArgs, GetSchemaTemplateExternalEpgContractResult, GetSchemaTemplateExternalEpgContractOutputArgs } from "./getSchemaTemplateExternalEpgContract";
export const getSchemaTemplateExternalEpgContract: typeof import("./getSchemaTemplateExternalEpgContract").getSchemaTemplateExternalEpgContract = null as any;
export const getSchemaTemplateExternalEpgContractOutput: typeof import("./getSchemaTemplateExternalEpgContract").getSchemaTemplateExternalEpgContractOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaTemplateExternalEpgContract","getSchemaTemplateExternalEpgContractOutput"], () => require("./getSchemaTemplateExternalEpgContract"));

export { GetSchemaTemplateExternalEpgSelectorArgs, GetSchemaTemplateExternalEpgSelectorResult, GetSchemaTemplateExternalEpgSelectorOutputArgs } from "./getSchemaTemplateExternalEpgSelector";
export const getSchemaTemplateExternalEpgSelector: typeof import("./getSchemaTemplateExternalEpgSelector").getSchemaTemplateExternalEpgSelector = null as any;
export const getSchemaTemplateExternalEpgSelectorOutput: typeof import("./getSchemaTemplateExternalEpgSelector").getSchemaTemplateExternalEpgSelectorOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaTemplateExternalEpgSelector","getSchemaTemplateExternalEpgSelectorOutput"], () => require("./getSchemaTemplateExternalEpgSelector"));

export { GetSchemaTemplateExternalEpgSubnetArgs, GetSchemaTemplateExternalEpgSubnetResult, GetSchemaTemplateExternalEpgSubnetOutputArgs } from "./getSchemaTemplateExternalEpgSubnet";
export const getSchemaTemplateExternalEpgSubnet: typeof import("./getSchemaTemplateExternalEpgSubnet").getSchemaTemplateExternalEpgSubnet = null as any;
export const getSchemaTemplateExternalEpgSubnetOutput: typeof import("./getSchemaTemplateExternalEpgSubnet").getSchemaTemplateExternalEpgSubnetOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaTemplateExternalEpgSubnet","getSchemaTemplateExternalEpgSubnetOutput"], () => require("./getSchemaTemplateExternalEpgSubnet"));

export { GetSchemaTemplateFilterEntryArgs, GetSchemaTemplateFilterEntryResult, GetSchemaTemplateFilterEntryOutputArgs } from "./getSchemaTemplateFilterEntry";
export const getSchemaTemplateFilterEntry: typeof import("./getSchemaTemplateFilterEntry").getSchemaTemplateFilterEntry = null as any;
export const getSchemaTemplateFilterEntryOutput: typeof import("./getSchemaTemplateFilterEntry").getSchemaTemplateFilterEntryOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaTemplateFilterEntry","getSchemaTemplateFilterEntryOutput"], () => require("./getSchemaTemplateFilterEntry"));

export { GetSchemaTemplateL3outArgs, GetSchemaTemplateL3outResult, GetSchemaTemplateL3outOutputArgs } from "./getSchemaTemplateL3out";
export const getSchemaTemplateL3out: typeof import("./getSchemaTemplateL3out").getSchemaTemplateL3out = null as any;
export const getSchemaTemplateL3outOutput: typeof import("./getSchemaTemplateL3out").getSchemaTemplateL3outOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaTemplateL3out","getSchemaTemplateL3outOutput"], () => require("./getSchemaTemplateL3out"));

export { GetSchemaTemplateServiceGraphArgs, GetSchemaTemplateServiceGraphResult, GetSchemaTemplateServiceGraphOutputArgs } from "./getSchemaTemplateServiceGraph";
export const getSchemaTemplateServiceGraph: typeof import("./getSchemaTemplateServiceGraph").getSchemaTemplateServiceGraph = null as any;
export const getSchemaTemplateServiceGraphOutput: typeof import("./getSchemaTemplateServiceGraph").getSchemaTemplateServiceGraphOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaTemplateServiceGraph","getSchemaTemplateServiceGraphOutput"], () => require("./getSchemaTemplateServiceGraph"));

export { GetSchemaTemplateVrfArgs, GetSchemaTemplateVrfResult, GetSchemaTemplateVrfOutputArgs } from "./getSchemaTemplateVrf";
export const getSchemaTemplateVrf: typeof import("./getSchemaTemplateVrf").getSchemaTemplateVrf = null as any;
export const getSchemaTemplateVrfOutput: typeof import("./getSchemaTemplateVrf").getSchemaTemplateVrfOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaTemplateVrf","getSchemaTemplateVrfOutput"], () => require("./getSchemaTemplateVrf"));

export { GetSchemaTemplateVrfContractArgs, GetSchemaTemplateVrfContractResult, GetSchemaTemplateVrfContractOutputArgs } from "./getSchemaTemplateVrfContract";
export const getSchemaTemplateVrfContract: typeof import("./getSchemaTemplateVrfContract").getSchemaTemplateVrfContract = null as any;
export const getSchemaTemplateVrfContractOutput: typeof import("./getSchemaTemplateVrfContract").getSchemaTemplateVrfContractOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaTemplateVrfContract","getSchemaTemplateVrfContractOutput"], () => require("./getSchemaTemplateVrfContract"));

export { GetServiceNodeTypeArgs, GetServiceNodeTypeResult, GetServiceNodeTypeOutputArgs } from "./getServiceNodeType";
export const getServiceNodeType: typeof import("./getServiceNodeType").getServiceNodeType = null as any;
export const getServiceNodeTypeOutput: typeof import("./getServiceNodeType").getServiceNodeTypeOutput = null as any;
utilities.lazyLoad(exports, ["getServiceNodeType","getServiceNodeTypeOutput"], () => require("./getServiceNodeType"));

export { GetSiteArgs, GetSiteResult, GetSiteOutputArgs } from "./getSite";
export const getSite: typeof import("./getSite").getSite = null as any;
export const getSiteOutput: typeof import("./getSite").getSiteOutput = null as any;
utilities.lazyLoad(exports, ["getSite","getSiteOutput"], () => require("./getSite"));

export { GetSystemConfigArgs, GetSystemConfigResult, GetSystemConfigOutputArgs } from "./getSystemConfig";
export const getSystemConfig: typeof import("./getSystemConfig").getSystemConfig = null as any;
export const getSystemConfigOutput: typeof import("./getSystemConfig").getSystemConfigOutput = null as any;
utilities.lazyLoad(exports, ["getSystemConfig","getSystemConfigOutput"], () => require("./getSystemConfig"));

export { GetTenantArgs, GetTenantResult, GetTenantOutputArgs } from "./getTenant";
export const getTenant: typeof import("./getTenant").getTenant = null as any;
export const getTenantOutput: typeof import("./getTenant").getTenantOutput = null as any;
utilities.lazyLoad(exports, ["getTenant","getTenantOutput"], () => require("./getTenant"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { LabelArgs, LabelState } from "./label";
export type Label = import("./label").Label;
export const Label: typeof import("./label").Label = null as any;
utilities.lazyLoad(exports, ["Label"], () => require("./label"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RemoteLocationArgs, RemoteLocationState } from "./remoteLocation";
export type RemoteLocation = import("./remoteLocation").RemoteLocation;
export const RemoteLocation: typeof import("./remoteLocation").RemoteLocation = null as any;
utilities.lazyLoad(exports, ["RemoteLocation"], () => require("./remoteLocation"));

export { RestArgs, RestState } from "./rest";
export type Rest = import("./rest").Rest;
export const Rest: typeof import("./rest").Rest = null as any;
utilities.lazyLoad(exports, ["Rest"], () => require("./rest"));

export { SchemaArgs, SchemaState } from "./schema";
export type Schema = import("./schema").Schema;
export const Schema: typeof import("./schema").Schema = null as any;
utilities.lazyLoad(exports, ["Schema"], () => require("./schema"));

export { SchemaSiteArgs, SchemaSiteState } from "./schemaSite";
export type SchemaSite = import("./schemaSite").SchemaSite;
export const SchemaSite: typeof import("./schemaSite").SchemaSite = null as any;
utilities.lazyLoad(exports, ["SchemaSite"], () => require("./schemaSite"));

export { SchemaSiteAnpArgs, SchemaSiteAnpState } from "./schemaSiteAnp";
export type SchemaSiteAnp = import("./schemaSiteAnp").SchemaSiteAnp;
export const SchemaSiteAnp: typeof import("./schemaSiteAnp").SchemaSiteAnp = null as any;
utilities.lazyLoad(exports, ["SchemaSiteAnp"], () => require("./schemaSiteAnp"));

export { SchemaSiteAnpEpgArgs, SchemaSiteAnpEpgState } from "./schemaSiteAnpEpg";
export type SchemaSiteAnpEpg = import("./schemaSiteAnpEpg").SchemaSiteAnpEpg;
export const SchemaSiteAnpEpg: typeof import("./schemaSiteAnpEpg").SchemaSiteAnpEpg = null as any;
utilities.lazyLoad(exports, ["SchemaSiteAnpEpg"], () => require("./schemaSiteAnpEpg"));

export { SchemaSiteAnpEpgBulkStaticportArgs, SchemaSiteAnpEpgBulkStaticportState } from "./schemaSiteAnpEpgBulkStaticport";
export type SchemaSiteAnpEpgBulkStaticport = import("./schemaSiteAnpEpgBulkStaticport").SchemaSiteAnpEpgBulkStaticport;
export const SchemaSiteAnpEpgBulkStaticport: typeof import("./schemaSiteAnpEpgBulkStaticport").SchemaSiteAnpEpgBulkStaticport = null as any;
utilities.lazyLoad(exports, ["SchemaSiteAnpEpgBulkStaticport"], () => require("./schemaSiteAnpEpgBulkStaticport"));

export { SchemaSiteAnpEpgDomainArgs, SchemaSiteAnpEpgDomainState } from "./schemaSiteAnpEpgDomain";
export type SchemaSiteAnpEpgDomain = import("./schemaSiteAnpEpgDomain").SchemaSiteAnpEpgDomain;
export const SchemaSiteAnpEpgDomain: typeof import("./schemaSiteAnpEpgDomain").SchemaSiteAnpEpgDomain = null as any;
utilities.lazyLoad(exports, ["SchemaSiteAnpEpgDomain"], () => require("./schemaSiteAnpEpgDomain"));

export { SchemaSiteAnpEpgSelectorArgs, SchemaSiteAnpEpgSelectorState } from "./schemaSiteAnpEpgSelector";
export type SchemaSiteAnpEpgSelector = import("./schemaSiteAnpEpgSelector").SchemaSiteAnpEpgSelector;
export const SchemaSiteAnpEpgSelector: typeof import("./schemaSiteAnpEpgSelector").SchemaSiteAnpEpgSelector = null as any;
utilities.lazyLoad(exports, ["SchemaSiteAnpEpgSelector"], () => require("./schemaSiteAnpEpgSelector"));

export { SchemaSiteAnpEpgStaticLeafArgs, SchemaSiteAnpEpgStaticLeafState } from "./schemaSiteAnpEpgStaticLeaf";
export type SchemaSiteAnpEpgStaticLeaf = import("./schemaSiteAnpEpgStaticLeaf").SchemaSiteAnpEpgStaticLeaf;
export const SchemaSiteAnpEpgStaticLeaf: typeof import("./schemaSiteAnpEpgStaticLeaf").SchemaSiteAnpEpgStaticLeaf = null as any;
utilities.lazyLoad(exports, ["SchemaSiteAnpEpgStaticLeaf"], () => require("./schemaSiteAnpEpgStaticLeaf"));

export { SchemaSiteAnpEpgStaticPortArgs, SchemaSiteAnpEpgStaticPortState } from "./schemaSiteAnpEpgStaticPort";
export type SchemaSiteAnpEpgStaticPort = import("./schemaSiteAnpEpgStaticPort").SchemaSiteAnpEpgStaticPort;
export const SchemaSiteAnpEpgStaticPort: typeof import("./schemaSiteAnpEpgStaticPort").SchemaSiteAnpEpgStaticPort = null as any;
utilities.lazyLoad(exports, ["SchemaSiteAnpEpgStaticPort"], () => require("./schemaSiteAnpEpgStaticPort"));

export { SchemaSiteAnpEpgSubnetArgs, SchemaSiteAnpEpgSubnetState } from "./schemaSiteAnpEpgSubnet";
export type SchemaSiteAnpEpgSubnet = import("./schemaSiteAnpEpgSubnet").SchemaSiteAnpEpgSubnet;
export const SchemaSiteAnpEpgSubnet: typeof import("./schemaSiteAnpEpgSubnet").SchemaSiteAnpEpgSubnet = null as any;
utilities.lazyLoad(exports, ["SchemaSiteAnpEpgSubnet"], () => require("./schemaSiteAnpEpgSubnet"));

export { SchemaSiteBdArgs, SchemaSiteBdState } from "./schemaSiteBd";
export type SchemaSiteBd = import("./schemaSiteBd").SchemaSiteBd;
export const SchemaSiteBd: typeof import("./schemaSiteBd").SchemaSiteBd = null as any;
utilities.lazyLoad(exports, ["SchemaSiteBd"], () => require("./schemaSiteBd"));

export { SchemaSiteBdL3outArgs, SchemaSiteBdL3outState } from "./schemaSiteBdL3out";
export type SchemaSiteBdL3out = import("./schemaSiteBdL3out").SchemaSiteBdL3out;
export const SchemaSiteBdL3out: typeof import("./schemaSiteBdL3out").SchemaSiteBdL3out = null as any;
utilities.lazyLoad(exports, ["SchemaSiteBdL3out"], () => require("./schemaSiteBdL3out"));

export { SchemaSiteBdSubnetArgs, SchemaSiteBdSubnetState } from "./schemaSiteBdSubnet";
export type SchemaSiteBdSubnet = import("./schemaSiteBdSubnet").SchemaSiteBdSubnet;
export const SchemaSiteBdSubnet: typeof import("./schemaSiteBdSubnet").SchemaSiteBdSubnet = null as any;
utilities.lazyLoad(exports, ["SchemaSiteBdSubnet"], () => require("./schemaSiteBdSubnet"));

export { SchemaSiteContractServiceGraphArgs, SchemaSiteContractServiceGraphState } from "./schemaSiteContractServiceGraph";
export type SchemaSiteContractServiceGraph = import("./schemaSiteContractServiceGraph").SchemaSiteContractServiceGraph;
export const SchemaSiteContractServiceGraph: typeof import("./schemaSiteContractServiceGraph").SchemaSiteContractServiceGraph = null as any;
utilities.lazyLoad(exports, ["SchemaSiteContractServiceGraph"], () => require("./schemaSiteContractServiceGraph"));

export { SchemaSiteContractServiceGraphListenerArgs, SchemaSiteContractServiceGraphListenerState } from "./schemaSiteContractServiceGraphListener";
export type SchemaSiteContractServiceGraphListener = import("./schemaSiteContractServiceGraphListener").SchemaSiteContractServiceGraphListener;
export const SchemaSiteContractServiceGraphListener: typeof import("./schemaSiteContractServiceGraphListener").SchemaSiteContractServiceGraphListener = null as any;
utilities.lazyLoad(exports, ["SchemaSiteContractServiceGraphListener"], () => require("./schemaSiteContractServiceGraphListener"));

export { SchemaSiteExternalEpgArgs, SchemaSiteExternalEpgState } from "./schemaSiteExternalEpg";
export type SchemaSiteExternalEpg = import("./schemaSiteExternalEpg").SchemaSiteExternalEpg;
export const SchemaSiteExternalEpg: typeof import("./schemaSiteExternalEpg").SchemaSiteExternalEpg = null as any;
utilities.lazyLoad(exports, ["SchemaSiteExternalEpg"], () => require("./schemaSiteExternalEpg"));

export { SchemaSiteExternalEpgSelectorArgs, SchemaSiteExternalEpgSelectorState } from "./schemaSiteExternalEpgSelector";
export type SchemaSiteExternalEpgSelector = import("./schemaSiteExternalEpgSelector").SchemaSiteExternalEpgSelector;
export const SchemaSiteExternalEpgSelector: typeof import("./schemaSiteExternalEpgSelector").SchemaSiteExternalEpgSelector = null as any;
utilities.lazyLoad(exports, ["SchemaSiteExternalEpgSelector"], () => require("./schemaSiteExternalEpgSelector"));

export { SchemaSiteServiceGraphArgs, SchemaSiteServiceGraphState } from "./schemaSiteServiceGraph";
export type SchemaSiteServiceGraph = import("./schemaSiteServiceGraph").SchemaSiteServiceGraph;
export const SchemaSiteServiceGraph: typeof import("./schemaSiteServiceGraph").SchemaSiteServiceGraph = null as any;
utilities.lazyLoad(exports, ["SchemaSiteServiceGraph"], () => require("./schemaSiteServiceGraph"));

export { SchemaSiteServiceGraphNodeArgs, SchemaSiteServiceGraphNodeState } from "./schemaSiteServiceGraphNode";
export type SchemaSiteServiceGraphNode = import("./schemaSiteServiceGraphNode").SchemaSiteServiceGraphNode;
export const SchemaSiteServiceGraphNode: typeof import("./schemaSiteServiceGraphNode").SchemaSiteServiceGraphNode = null as any;
utilities.lazyLoad(exports, ["SchemaSiteServiceGraphNode"], () => require("./schemaSiteServiceGraphNode"));

export { SchemaSiteVrfArgs, SchemaSiteVrfState } from "./schemaSiteVrf";
export type SchemaSiteVrf = import("./schemaSiteVrf").SchemaSiteVrf;
export const SchemaSiteVrf: typeof import("./schemaSiteVrf").SchemaSiteVrf = null as any;
utilities.lazyLoad(exports, ["SchemaSiteVrf"], () => require("./schemaSiteVrf"));

export { SchemaSiteVrfRegionArgs, SchemaSiteVrfRegionState } from "./schemaSiteVrfRegion";
export type SchemaSiteVrfRegion = import("./schemaSiteVrfRegion").SchemaSiteVrfRegion;
export const SchemaSiteVrfRegion: typeof import("./schemaSiteVrfRegion").SchemaSiteVrfRegion = null as any;
utilities.lazyLoad(exports, ["SchemaSiteVrfRegion"], () => require("./schemaSiteVrfRegion"));

export { SchemaSiteVrfRegionCidrArgs, SchemaSiteVrfRegionCidrState } from "./schemaSiteVrfRegionCidr";
export type SchemaSiteVrfRegionCidr = import("./schemaSiteVrfRegionCidr").SchemaSiteVrfRegionCidr;
export const SchemaSiteVrfRegionCidr: typeof import("./schemaSiteVrfRegionCidr").SchemaSiteVrfRegionCidr = null as any;
utilities.lazyLoad(exports, ["SchemaSiteVrfRegionCidr"], () => require("./schemaSiteVrfRegionCidr"));

export { SchemaSiteVrfRegionCidrSubnetArgs, SchemaSiteVrfRegionCidrSubnetState } from "./schemaSiteVrfRegionCidrSubnet";
export type SchemaSiteVrfRegionCidrSubnet = import("./schemaSiteVrfRegionCidrSubnet").SchemaSiteVrfRegionCidrSubnet;
export const SchemaSiteVrfRegionCidrSubnet: typeof import("./schemaSiteVrfRegionCidrSubnet").SchemaSiteVrfRegionCidrSubnet = null as any;
utilities.lazyLoad(exports, ["SchemaSiteVrfRegionCidrSubnet"], () => require("./schemaSiteVrfRegionCidrSubnet"));

export { SchemaSiteVrfRouteLeakArgs, SchemaSiteVrfRouteLeakState } from "./schemaSiteVrfRouteLeak";
export type SchemaSiteVrfRouteLeak = import("./schemaSiteVrfRouteLeak").SchemaSiteVrfRouteLeak;
export const SchemaSiteVrfRouteLeak: typeof import("./schemaSiteVrfRouteLeak").SchemaSiteVrfRouteLeak = null as any;
utilities.lazyLoad(exports, ["SchemaSiteVrfRouteLeak"], () => require("./schemaSiteVrfRouteLeak"));

export { SchemaTemplateArgs, SchemaTemplateState } from "./schemaTemplate";
export type SchemaTemplate = import("./schemaTemplate").SchemaTemplate;
export const SchemaTemplate: typeof import("./schemaTemplate").SchemaTemplate = null as any;
utilities.lazyLoad(exports, ["SchemaTemplate"], () => require("./schemaTemplate"));

export { SchemaTemplateAnpArgs, SchemaTemplateAnpState } from "./schemaTemplateAnp";
export type SchemaTemplateAnp = import("./schemaTemplateAnp").SchemaTemplateAnp;
export const SchemaTemplateAnp: typeof import("./schemaTemplateAnp").SchemaTemplateAnp = null as any;
utilities.lazyLoad(exports, ["SchemaTemplateAnp"], () => require("./schemaTemplateAnp"));

export { SchemaTemplateAnpEpgArgs, SchemaTemplateAnpEpgState } from "./schemaTemplateAnpEpg";
export type SchemaTemplateAnpEpg = import("./schemaTemplateAnpEpg").SchemaTemplateAnpEpg;
export const SchemaTemplateAnpEpg: typeof import("./schemaTemplateAnpEpg").SchemaTemplateAnpEpg = null as any;
utilities.lazyLoad(exports, ["SchemaTemplateAnpEpg"], () => require("./schemaTemplateAnpEpg"));

export { SchemaTemplateAnpEpgContractArgs, SchemaTemplateAnpEpgContractState } from "./schemaTemplateAnpEpgContract";
export type SchemaTemplateAnpEpgContract = import("./schemaTemplateAnpEpgContract").SchemaTemplateAnpEpgContract;
export const SchemaTemplateAnpEpgContract: typeof import("./schemaTemplateAnpEpgContract").SchemaTemplateAnpEpgContract = null as any;
utilities.lazyLoad(exports, ["SchemaTemplateAnpEpgContract"], () => require("./schemaTemplateAnpEpgContract"));

export { SchemaTemplateAnpEpgSelectorArgs, SchemaTemplateAnpEpgSelectorState } from "./schemaTemplateAnpEpgSelector";
export type SchemaTemplateAnpEpgSelector = import("./schemaTemplateAnpEpgSelector").SchemaTemplateAnpEpgSelector;
export const SchemaTemplateAnpEpgSelector: typeof import("./schemaTemplateAnpEpgSelector").SchemaTemplateAnpEpgSelector = null as any;
utilities.lazyLoad(exports, ["SchemaTemplateAnpEpgSelector"], () => require("./schemaTemplateAnpEpgSelector"));

export { SchemaTemplateAnpEpgSubnetArgs, SchemaTemplateAnpEpgSubnetState } from "./schemaTemplateAnpEpgSubnet";
export type SchemaTemplateAnpEpgSubnet = import("./schemaTemplateAnpEpgSubnet").SchemaTemplateAnpEpgSubnet;
export const SchemaTemplateAnpEpgSubnet: typeof import("./schemaTemplateAnpEpgSubnet").SchemaTemplateAnpEpgSubnet = null as any;
utilities.lazyLoad(exports, ["SchemaTemplateAnpEpgSubnet"], () => require("./schemaTemplateAnpEpgSubnet"));

export { SchemaTemplateAnpEpgUsegAttrArgs, SchemaTemplateAnpEpgUsegAttrState } from "./schemaTemplateAnpEpgUsegAttr";
export type SchemaTemplateAnpEpgUsegAttr = import("./schemaTemplateAnpEpgUsegAttr").SchemaTemplateAnpEpgUsegAttr;
export const SchemaTemplateAnpEpgUsegAttr: typeof import("./schemaTemplateAnpEpgUsegAttr").SchemaTemplateAnpEpgUsegAttr = null as any;
utilities.lazyLoad(exports, ["SchemaTemplateAnpEpgUsegAttr"], () => require("./schemaTemplateAnpEpgUsegAttr"));

export { SchemaTemplateBdArgs, SchemaTemplateBdState } from "./schemaTemplateBd";
export type SchemaTemplateBd = import("./schemaTemplateBd").SchemaTemplateBd;
export const SchemaTemplateBd: typeof import("./schemaTemplateBd").SchemaTemplateBd = null as any;
utilities.lazyLoad(exports, ["SchemaTemplateBd"], () => require("./schemaTemplateBd"));

export { SchemaTemplateBdSubnetArgs, SchemaTemplateBdSubnetState } from "./schemaTemplateBdSubnet";
export type SchemaTemplateBdSubnet = import("./schemaTemplateBdSubnet").SchemaTemplateBdSubnet;
export const SchemaTemplateBdSubnet: typeof import("./schemaTemplateBdSubnet").SchemaTemplateBdSubnet = null as any;
utilities.lazyLoad(exports, ["SchemaTemplateBdSubnet"], () => require("./schemaTemplateBdSubnet"));

export { SchemaTemplateContractArgs, SchemaTemplateContractState } from "./schemaTemplateContract";
export type SchemaTemplateContract = import("./schemaTemplateContract").SchemaTemplateContract;
export const SchemaTemplateContract: typeof import("./schemaTemplateContract").SchemaTemplateContract = null as any;
utilities.lazyLoad(exports, ["SchemaTemplateContract"], () => require("./schemaTemplateContract"));

export { SchemaTemplateContractFilterArgs, SchemaTemplateContractFilterState } from "./schemaTemplateContractFilter";
export type SchemaTemplateContractFilter = import("./schemaTemplateContractFilter").SchemaTemplateContractFilter;
export const SchemaTemplateContractFilter: typeof import("./schemaTemplateContractFilter").SchemaTemplateContractFilter = null as any;
utilities.lazyLoad(exports, ["SchemaTemplateContractFilter"], () => require("./schemaTemplateContractFilter"));

export { SchemaTemplateContractServiceGraphArgs, SchemaTemplateContractServiceGraphState } from "./schemaTemplateContractServiceGraph";
export type SchemaTemplateContractServiceGraph = import("./schemaTemplateContractServiceGraph").SchemaTemplateContractServiceGraph;
export const SchemaTemplateContractServiceGraph: typeof import("./schemaTemplateContractServiceGraph").SchemaTemplateContractServiceGraph = null as any;
utilities.lazyLoad(exports, ["SchemaTemplateContractServiceGraph"], () => require("./schemaTemplateContractServiceGraph"));

export { SchemaTemplateDeployArgs, SchemaTemplateDeployState } from "./schemaTemplateDeploy";
export type SchemaTemplateDeploy = import("./schemaTemplateDeploy").SchemaTemplateDeploy;
export const SchemaTemplateDeploy: typeof import("./schemaTemplateDeploy").SchemaTemplateDeploy = null as any;
utilities.lazyLoad(exports, ["SchemaTemplateDeploy"], () => require("./schemaTemplateDeploy"));

export { SchemaTemplateDeployNdoArgs, SchemaTemplateDeployNdoState } from "./schemaTemplateDeployNdo";
export type SchemaTemplateDeployNdo = import("./schemaTemplateDeployNdo").SchemaTemplateDeployNdo;
export const SchemaTemplateDeployNdo: typeof import("./schemaTemplateDeployNdo").SchemaTemplateDeployNdo = null as any;
utilities.lazyLoad(exports, ["SchemaTemplateDeployNdo"], () => require("./schemaTemplateDeployNdo"));

export { SchemaTemplateExternalEpgArgs, SchemaTemplateExternalEpgState } from "./schemaTemplateExternalEpg";
export type SchemaTemplateExternalEpg = import("./schemaTemplateExternalEpg").SchemaTemplateExternalEpg;
export const SchemaTemplateExternalEpg: typeof import("./schemaTemplateExternalEpg").SchemaTemplateExternalEpg = null as any;
utilities.lazyLoad(exports, ["SchemaTemplateExternalEpg"], () => require("./schemaTemplateExternalEpg"));

export { SchemaTemplateExternalEpgContractArgs, SchemaTemplateExternalEpgContractState } from "./schemaTemplateExternalEpgContract";
export type SchemaTemplateExternalEpgContract = import("./schemaTemplateExternalEpgContract").SchemaTemplateExternalEpgContract;
export const SchemaTemplateExternalEpgContract: typeof import("./schemaTemplateExternalEpgContract").SchemaTemplateExternalEpgContract = null as any;
utilities.lazyLoad(exports, ["SchemaTemplateExternalEpgContract"], () => require("./schemaTemplateExternalEpgContract"));

export { SchemaTemplateExternalEpgSelectorArgs, SchemaTemplateExternalEpgSelectorState } from "./schemaTemplateExternalEpgSelector";
export type SchemaTemplateExternalEpgSelector = import("./schemaTemplateExternalEpgSelector").SchemaTemplateExternalEpgSelector;
export const SchemaTemplateExternalEpgSelector: typeof import("./schemaTemplateExternalEpgSelector").SchemaTemplateExternalEpgSelector = null as any;
utilities.lazyLoad(exports, ["SchemaTemplateExternalEpgSelector"], () => require("./schemaTemplateExternalEpgSelector"));

export { SchemaTemplateExternalEpgSubnetArgs, SchemaTemplateExternalEpgSubnetState } from "./schemaTemplateExternalEpgSubnet";
export type SchemaTemplateExternalEpgSubnet = import("./schemaTemplateExternalEpgSubnet").SchemaTemplateExternalEpgSubnet;
export const SchemaTemplateExternalEpgSubnet: typeof import("./schemaTemplateExternalEpgSubnet").SchemaTemplateExternalEpgSubnet = null as any;
utilities.lazyLoad(exports, ["SchemaTemplateExternalEpgSubnet"], () => require("./schemaTemplateExternalEpgSubnet"));

export { SchemaTemplateFilterEntryArgs, SchemaTemplateFilterEntryState } from "./schemaTemplateFilterEntry";
export type SchemaTemplateFilterEntry = import("./schemaTemplateFilterEntry").SchemaTemplateFilterEntry;
export const SchemaTemplateFilterEntry: typeof import("./schemaTemplateFilterEntry").SchemaTemplateFilterEntry = null as any;
utilities.lazyLoad(exports, ["SchemaTemplateFilterEntry"], () => require("./schemaTemplateFilterEntry"));

export { SchemaTemplateL3outArgs, SchemaTemplateL3outState } from "./schemaTemplateL3out";
export type SchemaTemplateL3out = import("./schemaTemplateL3out").SchemaTemplateL3out;
export const SchemaTemplateL3out: typeof import("./schemaTemplateL3out").SchemaTemplateL3out = null as any;
utilities.lazyLoad(exports, ["SchemaTemplateL3out"], () => require("./schemaTemplateL3out"));

export { SchemaTemplateServiceGraphArgs, SchemaTemplateServiceGraphState } from "./schemaTemplateServiceGraph";
export type SchemaTemplateServiceGraph = import("./schemaTemplateServiceGraph").SchemaTemplateServiceGraph;
export const SchemaTemplateServiceGraph: typeof import("./schemaTemplateServiceGraph").SchemaTemplateServiceGraph = null as any;
utilities.lazyLoad(exports, ["SchemaTemplateServiceGraph"], () => require("./schemaTemplateServiceGraph"));

export { SchemaTemplateVrfArgs, SchemaTemplateVrfState } from "./schemaTemplateVrf";
export type SchemaTemplateVrf = import("./schemaTemplateVrf").SchemaTemplateVrf;
export const SchemaTemplateVrf: typeof import("./schemaTemplateVrf").SchemaTemplateVrf = null as any;
utilities.lazyLoad(exports, ["SchemaTemplateVrf"], () => require("./schemaTemplateVrf"));

export { SchemaTemplateVrfContractArgs, SchemaTemplateVrfContractState } from "./schemaTemplateVrfContract";
export type SchemaTemplateVrfContract = import("./schemaTemplateVrfContract").SchemaTemplateVrfContract;
export const SchemaTemplateVrfContract: typeof import("./schemaTemplateVrfContract").SchemaTemplateVrfContract = null as any;
utilities.lazyLoad(exports, ["SchemaTemplateVrfContract"], () => require("./schemaTemplateVrfContract"));

export { ServiceNodeTypeArgs, ServiceNodeTypeState } from "./serviceNodeType";
export type ServiceNodeType = import("./serviceNodeType").ServiceNodeType;
export const ServiceNodeType: typeof import("./serviceNodeType").ServiceNodeType = null as any;
utilities.lazyLoad(exports, ["ServiceNodeType"], () => require("./serviceNodeType"));

export { SiteArgs, SiteState } from "./site";
export type Site = import("./site").Site;
export const Site: typeof import("./site").Site = null as any;
utilities.lazyLoad(exports, ["Site"], () => require("./site"));

export { SystemConfigArgs, SystemConfigState } from "./systemConfig";
export type SystemConfig = import("./systemConfig").SystemConfig;
export const SystemConfig: typeof import("./systemConfig").SystemConfig = null as any;
utilities.lazyLoad(exports, ["SystemConfig"], () => require("./systemConfig"));

export { TenantArgs, TenantState } from "./tenant";
export type Tenant = import("./tenant").Tenant;
export const Tenant: typeof import("./tenant").Tenant = null as any;
utilities.lazyLoad(exports, ["Tenant"], () => require("./tenant"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "mso:index/label:Label":
                return new Label(name, <any>undefined, { urn })
            case "mso:index/remoteLocation:RemoteLocation":
                return new RemoteLocation(name, <any>undefined, { urn })
            case "mso:index/rest:Rest":
                return new Rest(name, <any>undefined, { urn })
            case "mso:index/schema:Schema":
                return new Schema(name, <any>undefined, { urn })
            case "mso:index/schemaSite:SchemaSite":
                return new SchemaSite(name, <any>undefined, { urn })
            case "mso:index/schemaSiteAnp:SchemaSiteAnp":
                return new SchemaSiteAnp(name, <any>undefined, { urn })
            case "mso:index/schemaSiteAnpEpg:SchemaSiteAnpEpg":
                return new SchemaSiteAnpEpg(name, <any>undefined, { urn })
            case "mso:index/schemaSiteAnpEpgBulkStaticport:SchemaSiteAnpEpgBulkStaticport":
                return new SchemaSiteAnpEpgBulkStaticport(name, <any>undefined, { urn })
            case "mso:index/schemaSiteAnpEpgDomain:SchemaSiteAnpEpgDomain":
                return new SchemaSiteAnpEpgDomain(name, <any>undefined, { urn })
            case "mso:index/schemaSiteAnpEpgSelector:SchemaSiteAnpEpgSelector":
                return new SchemaSiteAnpEpgSelector(name, <any>undefined, { urn })
            case "mso:index/schemaSiteAnpEpgStaticLeaf:SchemaSiteAnpEpgStaticLeaf":
                return new SchemaSiteAnpEpgStaticLeaf(name, <any>undefined, { urn })
            case "mso:index/schemaSiteAnpEpgStaticPort:SchemaSiteAnpEpgStaticPort":
                return new SchemaSiteAnpEpgStaticPort(name, <any>undefined, { urn })
            case "mso:index/schemaSiteAnpEpgSubnet:SchemaSiteAnpEpgSubnet":
                return new SchemaSiteAnpEpgSubnet(name, <any>undefined, { urn })
            case "mso:index/schemaSiteBd:SchemaSiteBd":
                return new SchemaSiteBd(name, <any>undefined, { urn })
            case "mso:index/schemaSiteBdL3out:SchemaSiteBdL3out":
                return new SchemaSiteBdL3out(name, <any>undefined, { urn })
            case "mso:index/schemaSiteBdSubnet:SchemaSiteBdSubnet":
                return new SchemaSiteBdSubnet(name, <any>undefined, { urn })
            case "mso:index/schemaSiteContractServiceGraph:SchemaSiteContractServiceGraph":
                return new SchemaSiteContractServiceGraph(name, <any>undefined, { urn })
            case "mso:index/schemaSiteContractServiceGraphListener:SchemaSiteContractServiceGraphListener":
                return new SchemaSiteContractServiceGraphListener(name, <any>undefined, { urn })
            case "mso:index/schemaSiteExternalEpg:SchemaSiteExternalEpg":
                return new SchemaSiteExternalEpg(name, <any>undefined, { urn })
            case "mso:index/schemaSiteExternalEpgSelector:SchemaSiteExternalEpgSelector":
                return new SchemaSiteExternalEpgSelector(name, <any>undefined, { urn })
            case "mso:index/schemaSiteServiceGraph:SchemaSiteServiceGraph":
                return new SchemaSiteServiceGraph(name, <any>undefined, { urn })
            case "mso:index/schemaSiteServiceGraphNode:SchemaSiteServiceGraphNode":
                return new SchemaSiteServiceGraphNode(name, <any>undefined, { urn })
            case "mso:index/schemaSiteVrf:SchemaSiteVrf":
                return new SchemaSiteVrf(name, <any>undefined, { urn })
            case "mso:index/schemaSiteVrfRegion:SchemaSiteVrfRegion":
                return new SchemaSiteVrfRegion(name, <any>undefined, { urn })
            case "mso:index/schemaSiteVrfRegionCidr:SchemaSiteVrfRegionCidr":
                return new SchemaSiteVrfRegionCidr(name, <any>undefined, { urn })
            case "mso:index/schemaSiteVrfRegionCidrSubnet:SchemaSiteVrfRegionCidrSubnet":
                return new SchemaSiteVrfRegionCidrSubnet(name, <any>undefined, { urn })
            case "mso:index/schemaSiteVrfRouteLeak:SchemaSiteVrfRouteLeak":
                return new SchemaSiteVrfRouteLeak(name, <any>undefined, { urn })
            case "mso:index/schemaTemplate:SchemaTemplate":
                return new SchemaTemplate(name, <any>undefined, { urn })
            case "mso:index/schemaTemplateAnp:SchemaTemplateAnp":
                return new SchemaTemplateAnp(name, <any>undefined, { urn })
            case "mso:index/schemaTemplateAnpEpg:SchemaTemplateAnpEpg":
                return new SchemaTemplateAnpEpg(name, <any>undefined, { urn })
            case "mso:index/schemaTemplateAnpEpgContract:SchemaTemplateAnpEpgContract":
                return new SchemaTemplateAnpEpgContract(name, <any>undefined, { urn })
            case "mso:index/schemaTemplateAnpEpgSelector:SchemaTemplateAnpEpgSelector":
                return new SchemaTemplateAnpEpgSelector(name, <any>undefined, { urn })
            case "mso:index/schemaTemplateAnpEpgSubnet:SchemaTemplateAnpEpgSubnet":
                return new SchemaTemplateAnpEpgSubnet(name, <any>undefined, { urn })
            case "mso:index/schemaTemplateAnpEpgUsegAttr:SchemaTemplateAnpEpgUsegAttr":
                return new SchemaTemplateAnpEpgUsegAttr(name, <any>undefined, { urn })
            case "mso:index/schemaTemplateBd:SchemaTemplateBd":
                return new SchemaTemplateBd(name, <any>undefined, { urn })
            case "mso:index/schemaTemplateBdSubnet:SchemaTemplateBdSubnet":
                return new SchemaTemplateBdSubnet(name, <any>undefined, { urn })
            case "mso:index/schemaTemplateContract:SchemaTemplateContract":
                return new SchemaTemplateContract(name, <any>undefined, { urn })
            case "mso:index/schemaTemplateContractFilter:SchemaTemplateContractFilter":
                return new SchemaTemplateContractFilter(name, <any>undefined, { urn })
            case "mso:index/schemaTemplateContractServiceGraph:SchemaTemplateContractServiceGraph":
                return new SchemaTemplateContractServiceGraph(name, <any>undefined, { urn })
            case "mso:index/schemaTemplateDeploy:SchemaTemplateDeploy":
                return new SchemaTemplateDeploy(name, <any>undefined, { urn })
            case "mso:index/schemaTemplateDeployNdo:SchemaTemplateDeployNdo":
                return new SchemaTemplateDeployNdo(name, <any>undefined, { urn })
            case "mso:index/schemaTemplateExternalEpg:SchemaTemplateExternalEpg":
                return new SchemaTemplateExternalEpg(name, <any>undefined, { urn })
            case "mso:index/schemaTemplateExternalEpgContract:SchemaTemplateExternalEpgContract":
                return new SchemaTemplateExternalEpgContract(name, <any>undefined, { urn })
            case "mso:index/schemaTemplateExternalEpgSelector:SchemaTemplateExternalEpgSelector":
                return new SchemaTemplateExternalEpgSelector(name, <any>undefined, { urn })
            case "mso:index/schemaTemplateExternalEpgSubnet:SchemaTemplateExternalEpgSubnet":
                return new SchemaTemplateExternalEpgSubnet(name, <any>undefined, { urn })
            case "mso:index/schemaTemplateFilterEntry:SchemaTemplateFilterEntry":
                return new SchemaTemplateFilterEntry(name, <any>undefined, { urn })
            case "mso:index/schemaTemplateL3out:SchemaTemplateL3out":
                return new SchemaTemplateL3out(name, <any>undefined, { urn })
            case "mso:index/schemaTemplateServiceGraph:SchemaTemplateServiceGraph":
                return new SchemaTemplateServiceGraph(name, <any>undefined, { urn })
            case "mso:index/schemaTemplateVrf:SchemaTemplateVrf":
                return new SchemaTemplateVrf(name, <any>undefined, { urn })
            case "mso:index/schemaTemplateVrfContract:SchemaTemplateVrfContract":
                return new SchemaTemplateVrfContract(name, <any>undefined, { urn })
            case "mso:index/serviceNodeType:ServiceNodeType":
                return new ServiceNodeType(name, <any>undefined, { urn })
            case "mso:index/site:Site":
                return new Site(name, <any>undefined, { urn })
            case "mso:index/systemConfig:SystemConfig":
                return new SystemConfig(name, <any>undefined, { urn })
            case "mso:index/tenant:Tenant":
                return new Tenant(name, <any>undefined, { urn })
            case "mso:index/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("mso", "index/label", _module)
pulumi.runtime.registerResourceModule("mso", "index/remoteLocation", _module)
pulumi.runtime.registerResourceModule("mso", "index/rest", _module)
pulumi.runtime.registerResourceModule("mso", "index/schema", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaSite", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaSiteAnp", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaSiteAnpEpg", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaSiteAnpEpgBulkStaticport", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaSiteAnpEpgDomain", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaSiteAnpEpgSelector", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaSiteAnpEpgStaticLeaf", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaSiteAnpEpgStaticPort", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaSiteAnpEpgSubnet", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaSiteBd", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaSiteBdL3out", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaSiteBdSubnet", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaSiteContractServiceGraph", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaSiteContractServiceGraphListener", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaSiteExternalEpg", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaSiteExternalEpgSelector", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaSiteServiceGraph", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaSiteServiceGraphNode", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaSiteVrf", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaSiteVrfRegion", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaSiteVrfRegionCidr", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaSiteVrfRegionCidrSubnet", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaSiteVrfRouteLeak", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaTemplate", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaTemplateAnp", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaTemplateAnpEpg", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaTemplateAnpEpgContract", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaTemplateAnpEpgSelector", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaTemplateAnpEpgSubnet", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaTemplateAnpEpgUsegAttr", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaTemplateBd", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaTemplateBdSubnet", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaTemplateContract", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaTemplateContractFilter", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaTemplateContractServiceGraph", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaTemplateDeploy", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaTemplateDeployNdo", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaTemplateExternalEpg", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaTemplateExternalEpgContract", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaTemplateExternalEpgSelector", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaTemplateExternalEpgSubnet", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaTemplateFilterEntry", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaTemplateL3out", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaTemplateServiceGraph", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaTemplateVrf", _module)
pulumi.runtime.registerResourceModule("mso", "index/schemaTemplateVrfContract", _module)
pulumi.runtime.registerResourceModule("mso", "index/serviceNodeType", _module)
pulumi.runtime.registerResourceModule("mso", "index/site", _module)
pulumi.runtime.registerResourceModule("mso", "index/systemConfig", _module)
pulumi.runtime.registerResourceModule("mso", "index/tenant", _module)
pulumi.runtime.registerResourceModule("mso", "index/user", _module)
pulumi.runtime.registerResourcePackage("mso", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:mso") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
