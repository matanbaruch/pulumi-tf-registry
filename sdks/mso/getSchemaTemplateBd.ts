// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getSchemaTemplateBd(args: GetSchemaTemplateBdArgs, opts?: pulumi.InvokeOptions): Promise<GetSchemaTemplateBdResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mso:index/getSchemaTemplateBd:getSchemaTemplateBd", {
        "id": args.id,
        "name": args.name,
        "schemaId": args.schemaId,
        "templateName": args.templateName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSchemaTemplateBd.
 */
export interface GetSchemaTemplateBdArgs {
    id?: string;
    name: string;
    schemaId: string;
    templateName: string;
}

/**
 * A collection of values returned by getSchemaTemplateBd.
 */
export interface GetSchemaTemplateBdResult {
    readonly arpFlooding: boolean;
    readonly description: string;
    readonly dhcpPolicies: outputs.GetSchemaTemplateBdDhcpPolicy[];
    readonly dhcpPolicy: {[key: string]: string};
    readonly displayName: string;
    readonly id: string;
    readonly intersiteBumTraffic: boolean;
    readonly ipv6UnknownMulticastFlooding: string;
    readonly layer2Stretch: boolean;
    readonly layer2UnknownUnicast: string;
    readonly layer3Multicast: boolean;
    readonly multiDestinationFlooding: string;
    readonly name: string;
    readonly optimizeWanBandwidth: boolean;
    readonly schemaId: string;
    readonly templateName: string;
    readonly unicastRouting: boolean;
    readonly unknownMulticastFlooding: string;
    readonly virtualMacAddress: string;
    readonly vrfName: string;
    readonly vrfSchemaId: string;
    readonly vrfTemplateName: string;
}
export function getSchemaTemplateBdOutput(args: GetSchemaTemplateBdOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSchemaTemplateBdResult> {
    return pulumi.output(args).apply((a: any) => getSchemaTemplateBd(a, opts))
}

/**
 * A collection of arguments for invoking getSchemaTemplateBd.
 */
export interface GetSchemaTemplateBdOutputArgs {
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    schemaId: pulumi.Input<string>;
    templateName: pulumi.Input<string>;
}
