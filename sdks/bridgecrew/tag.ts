// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Tag extends pulumi.CustomResource {
    /**
     * Get an existing Tag resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TagState, opts?: pulumi.CustomResourceOptions): Tag {
        return new Tag(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bridgecrew:index/tag:Tag';

    /**
     * Returns true if the given object is an instance of Tag.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Tag {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Tag.__pulumiType;
    }

    /**
     * candoactions
     */
    public /*out*/ readonly candoactions!: pulumi.Output<boolean>;
    /**
     * Record created by
     */
    public /*out*/ readonly createdby!: pulumi.Output<string>;
    /**
     * Record created date
     */
    public /*out*/ readonly creationdate!: pulumi.Output<string>;
    /**
     * Tag Definition
     */
    public readonly definition!: pulumi.Output<outputs.TagDefinition>;
    /**
     * Tag rule description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Tag is enabled
     */
    public readonly isenabled!: pulumi.Output<boolean | undefined>;
    /**
     * Record created modified
     */
    public /*out*/ readonly lastUpdated!: pulumi.Output<string>;
    /**
     * Name of the rule
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A list of repository IDs
     */
    public readonly repositories!: pulumi.Output<string[]>;
    /**
     * tagRuleOOTBId
     */
    public readonly tagruleootbid!: pulumi.Output<string | undefined>;

    /**
     * Create a Tag resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TagArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TagArgs | TagState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TagState | undefined;
            resourceInputs["candoactions"] = state ? state.candoactions : undefined;
            resourceInputs["createdby"] = state ? state.createdby : undefined;
            resourceInputs["creationdate"] = state ? state.creationdate : undefined;
            resourceInputs["definition"] = state ? state.definition : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["isenabled"] = state ? state.isenabled : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["repositories"] = state ? state.repositories : undefined;
            resourceInputs["tagruleootbid"] = state ? state.tagruleootbid : undefined;
        } else {
            const args = argsOrState as TagArgs | undefined;
            if ((!args || args.definition === undefined) && !opts.urn) {
                throw new Error("Missing required property 'definition'");
            }
            if ((!args || args.repositories === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repositories'");
            }
            resourceInputs["definition"] = args ? args.definition : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["isenabled"] = args ? args.isenabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["repositories"] = args ? args.repositories : undefined;
            resourceInputs["tagruleootbid"] = args ? args.tagruleootbid : undefined;
            resourceInputs["candoactions"] = undefined /*out*/;
            resourceInputs["createdby"] = undefined /*out*/;
            resourceInputs["creationdate"] = undefined /*out*/;
            resourceInputs["lastUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Tag.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Tag resources.
 */
export interface TagState {
    /**
     * candoactions
     */
    candoactions?: pulumi.Input<boolean>;
    /**
     * Record created by
     */
    createdby?: pulumi.Input<string>;
    /**
     * Record created date
     */
    creationdate?: pulumi.Input<string>;
    /**
     * Tag Definition
     */
    definition?: pulumi.Input<inputs.TagDefinition>;
    /**
     * Tag rule description
     */
    description?: pulumi.Input<string>;
    /**
     * Tag is enabled
     */
    isenabled?: pulumi.Input<boolean>;
    /**
     * Record created modified
     */
    lastUpdated?: pulumi.Input<string>;
    /**
     * Name of the rule
     */
    name?: pulumi.Input<string>;
    /**
     * A list of repository IDs
     */
    repositories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * tagRuleOOTBId
     */
    tagruleootbid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Tag resource.
 */
export interface TagArgs {
    /**
     * Tag Definition
     */
    definition: pulumi.Input<inputs.TagDefinition>;
    /**
     * Tag rule description
     */
    description?: pulumi.Input<string>;
    /**
     * Tag is enabled
     */
    isenabled?: pulumi.Input<boolean>;
    /**
     * Name of the rule
     */
    name?: pulumi.Input<string>;
    /**
     * A list of repository IDs
     */
    repositories: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * tagRuleOOTBId
     */
    tagruleootbid?: pulumi.Input<string>;
}
