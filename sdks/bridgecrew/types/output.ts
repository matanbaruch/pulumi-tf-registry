// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ComplexPolicyBenchmarks {
    cisAwsV12s?: string[];
    cisAwsV13s?: string[];
    cisAzureV11s?: string[];
    cisAzureV12s?: string[];
    cisAzureV13s?: string[];
    cisDockerV11s?: string[];
    cisEksV11s?: string[];
    cisGcpV11s?: string[];
    cisGkeV11s?: string[];
    cisKubernetesV15s?: string[];
    cisKubernetesV16s?: string[];
}

export interface ComplexPolicyConditionquery {
    /**
     * Conditions captures the actual check logic. Do not add resource_types and an or statement in the same block
     */
    ands: outputs.ComplexPolicyConditionqueryAnd[];
}

export interface ComplexPolicyConditionqueryAnd {
    /**
     * The field that you want the condition on
     */
    attribute?: string;
    condType?: string;
    /**
     * The logic operator
     */
    operator?: string;
    /**
     * Conditions captures the actual check logic
     */
    ors?: outputs.ComplexPolicyConditionqueryAndOr[];
    /**
     * The resource type
     */
    resourceTypes?: string[];
    /**
     * The value to check against
     */
    value?: string;
}

export interface ComplexPolicyConditionqueryAndOr {
    /**
     * The field that you want the condition on
     */
    attribute: string;
    condType: string;
    /**
     * The logic operator
     */
    operator: string;
    /**
     * The resource type
     */
    resourceTypes: string[];
    /**
     * The Value to check
     */
    value: string;
}

export interface EnforcementRuleCodeCategory {
    iacs: outputs.EnforcementRuleCodeCategoryIac[];
    images: outputs.EnforcementRuleCodeCategoryImage[];
    openSources: outputs.EnforcementRuleCodeCategoryOpenSource[];
    secrets: outputs.EnforcementRuleCodeCategorySecret[];
    supplyChains: outputs.EnforcementRuleCodeCategorySupplyChain[];
}

export interface EnforcementRuleCodeCategoryIac {
    commentsBotThreshold: string;
    hardFailThreshold: string;
    softFailThreshold: string;
}

export interface EnforcementRuleCodeCategoryImage {
    commentsBotThreshold: string;
    hardFailThreshold: string;
    softFailThreshold: string;
}

export interface EnforcementRuleCodeCategoryOpenSource {
    commentsBotThreshold: string;
    hardFailThreshold: string;
    softFailThreshold: string;
}

export interface EnforcementRuleCodeCategorySecret {
    commentsBotThreshold: string;
    hardFailThreshold: string;
    softFailThreshold: string;
}

export interface EnforcementRuleCodeCategorySupplyChain {
    commentsBotThreshold: string;
    hardFailThreshold: string;
    softFailThreshold: string;
}

export interface EnforcementRuleRepository {
    accountId: string;
    accountName: string;
}

export interface GetApitokensApitoken {
    alias: string;
    createdon: string;
    description: string;
    userid: string;
    uuid: string;
}

export interface GetApitokensCustomerApitoken {
    alias: string;
    createdon: string;
    description: string;
    userid: string;
    uuid: string;
}

export interface GetCodeReviewsCodereview {
    commitId: string;
    creationdate: string;
    customerName: string;
    gitUser: string;
    id: number;
    lastscandate: string;
    organization: string;
    prs: outputs.GetCodeReviewsCodereviewPr[];
    repoId: string;
    repository: string;
    results: outputs.GetCodeReviewsCodereviewResult[];
    runId: number;
    scanStatus: string;
    sourceType: string;
    status: string;
}

export interface GetCodeReviewsCodereviewPr {
    enforcementRules: outputs.GetCodeReviewsCodereviewPrEnforcementRule[];
    fromBranch: string;
    intoBranch: string;
    prNumber: string;
    title: string;
}

export interface GetCodeReviewsCodereviewPrEnforcementRule {
    iacs: outputs.GetCodeReviewsCodereviewPrEnforcementRuleIac[];
    images: outputs.GetCodeReviewsCodereviewPrEnforcementRuleImage[];
    openSources: outputs.GetCodeReviewsCodereviewPrEnforcementRuleOpenSource[];
    secrets: outputs.GetCodeReviewsCodereviewPrEnforcementRuleSecret[];
    supplyChains: outputs.GetCodeReviewsCodereviewPrEnforcementRuleSupplyChain[];
}

export interface GetCodeReviewsCodereviewPrEnforcementRuleIac {
    commentsBotThreshold: string;
    hardFailThreshold: string;
    softFailThreshold: string;
}

export interface GetCodeReviewsCodereviewPrEnforcementRuleImage {
    commentsBotThreshold: string;
    hardFailThreshold: string;
    softFailThreshold: string;
}

export interface GetCodeReviewsCodereviewPrEnforcementRuleOpenSource {
    commentsBotThreshold: string;
    hardFailThreshold: string;
    softFailThreshold: string;
}

export interface GetCodeReviewsCodereviewPrEnforcementRuleSecret {
    commentsBotThreshold: string;
    hardFailThreshold: string;
    softFailThreshold: string;
}

export interface GetCodeReviewsCodereviewPrEnforcementRuleSupplyChain {
    commentsBotThreshold: string;
    hardFailThreshold: string;
    softFailThreshold: string;
}

export interface GetCodeReviewsCodereviewResult {
    critical: number;
    high: number;
    low: number;
    medium: number;
}

export interface GetEnforcementAccountsAccount {
    accountId: string;
    accountName: string;
    source: string;
}

export interface GetEnforcementRuleCodecategory {
    iacs: outputs.GetEnforcementRuleCodecategoryIac[];
    images: outputs.GetEnforcementRuleCodecategoryImage[];
    openSources: outputs.GetEnforcementRuleCodecategoryOpenSource[];
    secrets: outputs.GetEnforcementRuleCodecategorySecret[];
    supplyChains: outputs.GetEnforcementRuleCodecategorySupplyChain[];
}

export interface GetEnforcementRuleCodecategoryIac {
    commentsBotThreshold: string;
    hardFailThreshold: string;
    softFailThreshold: string;
}

export interface GetEnforcementRuleCodecategoryImage {
    commentsBotThreshold: string;
    hardFailThreshold: string;
    softFailThreshold: string;
}

export interface GetEnforcementRuleCodecategoryOpenSource {
    commentsBotThreshold: string;
    hardFailThreshold: string;
    softFailThreshold: string;
}

export interface GetEnforcementRuleCodecategorySecret {
    commentsBotThreshold: string;
    hardFailThreshold: string;
    softFailThreshold: string;
}

export interface GetEnforcementRuleCodecategorySupplyChain {
    commentsBotThreshold: string;
    hardFailThreshold: string;
    softFailThreshold: string;
}

export interface GetEnforcementRulesAccountsnotinmainrule {
    accountId: string;
    accountName: string;
}

export interface GetEnforcementRulesRule {
    codecategories: outputs.GetEnforcementRulesRuleCodecategory[];
    createdby: string;
    creationdate: string;
    editable: boolean;
    id: string;
    mainrule: boolean;
    name: string;
    repositories: string[];
}

export interface GetEnforcementRulesRuleCodecategory {
    iacs: outputs.GetEnforcementRulesRuleCodecategoryIac[];
    images: outputs.GetEnforcementRulesRuleCodecategoryImage[];
    openSources: outputs.GetEnforcementRulesRuleCodecategoryOpenSource[];
    secrets: outputs.GetEnforcementRulesRuleCodecategorySecret[];
    supplyChains: outputs.GetEnforcementRulesRuleCodecategorySupplyChain[];
}

export interface GetEnforcementRulesRuleCodecategoryIac {
    commentsBotThreshold: string;
    hardFailThreshold: string;
    softFailThreshold: string;
}

export interface GetEnforcementRulesRuleCodecategoryImage {
    commentsBotThreshold: string;
    hardFailThreshold: string;
    softFailThreshold: string;
}

export interface GetEnforcementRulesRuleCodecategoryOpenSource {
    commentsBotThreshold: string;
    hardFailThreshold: string;
    softFailThreshold: string;
}

export interface GetEnforcementRulesRuleCodecategorySecret {
    commentsBotThreshold: string;
    hardFailThreshold: string;
    softFailThreshold: string;
}

export interface GetEnforcementRulesRuleCodecategorySupplyChain {
    commentsBotThreshold: string;
    hardFailThreshold: string;
    softFailThreshold: string;
}

export interface GetIncidentsIncident {
    benchmarks: string[];
    category: string;
    constructiveTitle: string;
    guideline: string;
    incidentId: string;
    iscustom: boolean;
    provider: string;
    remediationIds: string[];
    resourceTypes: string[];
    runtimeRemediations: outputs.GetIncidentsIncidentRuntimeRemediation[];
    severity: string;
    title: string;
}

export interface GetIncidentsIncidentRuntimeRemediation {
    description: string;
    id: string;
    params: string[];
    warning: string;
}

export interface GetIncidentsInfoEncryption {
    encrypted: number;
    noencryption: number;
    unencrypted: number;
}

export interface GetIncidentsInfoReachability {
    noreachability: number;
    private: number;
    public: number;
}

export interface GetIncidentsInfoStatus {
    open: number;
    passed: number;
    suppressed: number;
}

export interface GetIncidentsInfoTraced {
    nottraced: number;
    traced: number;
}

export interface GetIncidentsPresetPreset {
    counter: number;
    description: string;
    filters: outputs.GetIncidentsPresetPresetFilter[];
    id: string;
    isselected: boolean;
    name: string;
}

export interface GetIncidentsPresetPresetFilter {
    benchmarks: string[];
    categories: string[];
    encryption: string;
    istraced: boolean;
    ranges: outputs.GetIncidentsPresetPresetFilterRange[];
    reachability: string;
    search: string;
    severities: string[];
    sort: string;
    sources: string[];
    status: string;
    tags: string[];
}

export interface GetIncidentsPresetPresetFilterRange {
    from: string;
    to: string;
    type: string;
}

export interface GetIntegrationsIntegration {
    enable: boolean;
    id: string;
    integrationDetails: string;
    params: string;
    sfExecutionName: string;
    status: string;
    type: string;
}

export interface GetJustificationsJustification {
    active: boolean;
    comment: string;
    customer: string;
    date: number;
    id: string;
    origin: string;
    owner: string;
    suppressionType: string;
    type: string;
    violationId: string;
}

export interface GetMappingsGuideline {
    check: string;
    guideline: string;
}

export interface GetMappingsIdmapping {
    bcid: string;
    checkovid: string;
}

export interface GetPoliciesPolicy {
    accountsdatas: outputs.GetPoliciesPolicyAccountsdata[];
    benchmarks: outputs.GetPoliciesPolicyBenchmark[];
    category: string;
    cloudProvider: string;
    code: string;
    conditionQuery: string;
    constructiveTitle: string;
    createdby: string;
    descriptiveTitle: string;
    frameworks: string[];
    guideline: string;
    id: string;
    iscustom: boolean;
    pcseverity: string;
    resourceTypes: string[];
    severity: string;
    title: string;
}

export interface GetPoliciesPolicyAccountsdata {
    amounts: {[key: string]: number};
    lastupdatedate: string;
    repository: string;
}

export interface GetPoliciesPolicyBenchmark {
    benchmark: string;
    versions: string[];
}

export interface GetRepositoriesRepository {
    creationdate: string;
    defaultbranch: string;
    id: string;
    ispublic: boolean;
    lastscandate: string;
    owner: string;
    repository: string;
    runs: number;
    source: string;
}

export interface GetRepositoryBranchesBranch {
    creationdate: string;
    defaultbranch: boolean;
    name: string;
}

export interface GetSuppressionsSuppression {
    comment: string;
    creationdate: string;
    id: string;
    policyid: string;
    resources: outputs.GetSuppressionsSuppressionResource[];
    suppressiontype: string;
}

export interface GetSuppressionsSuppressionResource {
    accountId: string;
    resourceid: string;
}

export interface GetTagRepository {
    defaultbranch: string;
    id: string;
    name: string;
    owner: string;
    repo: string;
    source: string;
}

export interface GetTagsTag {
    candoactions: boolean;
    createdby: string;
    creationdate: string;
    definition: string;
    description: string;
    id: string;
    isenabled: boolean;
    name: string;
    repositories: outputs.GetTagsTagRepository[];
    tagruleootbid: string;
}

export interface GetTagsTagRepository {
    defaultbranch: string;
    id: string;
    name: string;
    owner: string;
    repo: string;
    source: string;
}

export interface GetUsersUser {
    accounts: outputs.GetUsersUserAccount[];
    allaccountsaccess: boolean;
    customername: string;
    email: string;
    lastmodified: number;
    role: string;
}

export interface GetUsersUserAccount {
    alias: string;
    id: string;
}

export interface PolicyBenchmarks {
    cisAwsV12s?: string[];
    cisAwsV13s?: string[];
    cisAzureV11s?: string[];
    cisAzureV12s?: string[];
    cisAzureV13s?: string[];
    cisDockerV11s?: string[];
    cisEksV11s?: string[];
    cisGcpV11s?: string[];
    cisGkeV11s?: string[];
    cisKubernetesV15s?: string[];
    cisKubernetesV16s?: string[];
}

export interface SimplePolicyBenchmarks {
    cisAwsV12s?: string[];
    cisAwsV13s?: string[];
    cisAzureV11s?: string[];
    cisAzureV12s?: string[];
    cisAzureV13s?: string[];
    cisDockerV11s?: string[];
    cisEksV11s?: string[];
    cisGcpV11s?: string[];
    cisGkeV11s?: string[];
    cisKubernetesV15s?: string[];
    cisKubernetesV16s?: string[];
}

export interface SimplePolicyConditions {
    /**
     * The field that you want the condition on
     */
    attribute: string;
    condType: string;
    /**
     * The logic Operator
     */
    operator: string;
    /**
     * The resource type
     */
    resourceTypes: string[];
    /**
     * The Value to Check
     */
    value: string;
}

export interface TagDefinition {
    /**
     * Tag group
     */
    tagGroups: outputs.TagDefinitionTagGroup[];
}

export interface TagDefinitionTagGroup {
    /**
     * Tag group name
     */
    name: string;
    tags: outputs.TagDefinitionTagGroupTags;
}

export interface TagDefinitionTagGroupTags {
    name: string;
    value: {[key: string]: string};
}

