// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ComplexPolicyArgs, ComplexPolicyState } from "./complexPolicy";
export type ComplexPolicy = import("./complexPolicy").ComplexPolicy;
export const ComplexPolicy: typeof import("./complexPolicy").ComplexPolicy = null as any;
utilities.lazyLoad(exports, ["ComplexPolicy"], () => require("./complexPolicy"));

export { EnforcementRuleArgs, EnforcementRuleState } from "./enforcementRule";
export type EnforcementRule = import("./enforcementRule").EnforcementRule;
export const EnforcementRule: typeof import("./enforcementRule").EnforcementRule = null as any;
utilities.lazyLoad(exports, ["EnforcementRule"], () => require("./enforcementRule"));

export { GetApitokensArgs, GetApitokensResult, GetApitokensOutputArgs } from "./getApitokens";
export const getApitokens: typeof import("./getApitokens").getApitokens = null as any;
export const getApitokensOutput: typeof import("./getApitokens").getApitokensOutput = null as any;
utilities.lazyLoad(exports, ["getApitokens","getApitokensOutput"], () => require("./getApitokens"));

export { GetApitokensCustomerArgs, GetApitokensCustomerResult, GetApitokensCustomerOutputArgs } from "./getApitokensCustomer";
export const getApitokensCustomer: typeof import("./getApitokensCustomer").getApitokensCustomer = null as any;
export const getApitokensCustomerOutput: typeof import("./getApitokensCustomer").getApitokensCustomerOutput = null as any;
utilities.lazyLoad(exports, ["getApitokensCustomer","getApitokensCustomerOutput"], () => require("./getApitokensCustomer"));

export { GetAuthorsArgs, GetAuthorsResult, GetAuthorsOutputArgs } from "./getAuthors";
export const getAuthors: typeof import("./getAuthors").getAuthors = null as any;
export const getAuthorsOutput: typeof import("./getAuthors").getAuthorsOutput = null as any;
utilities.lazyLoad(exports, ["getAuthors","getAuthorsOutput"], () => require("./getAuthors"));

export { GetCodeReviewsArgs, GetCodeReviewsResult, GetCodeReviewsOutputArgs } from "./getCodeReviews";
export const getCodeReviews: typeof import("./getCodeReviews").getCodeReviews = null as any;
export const getCodeReviewsOutput: typeof import("./getCodeReviews").getCodeReviewsOutput = null as any;
utilities.lazyLoad(exports, ["getCodeReviews","getCodeReviewsOutput"], () => require("./getCodeReviews"));

export { GetEnforcementAccountsArgs, GetEnforcementAccountsResult, GetEnforcementAccountsOutputArgs } from "./getEnforcementAccounts";
export const getEnforcementAccounts: typeof import("./getEnforcementAccounts").getEnforcementAccounts = null as any;
export const getEnforcementAccountsOutput: typeof import("./getEnforcementAccounts").getEnforcementAccountsOutput = null as any;
utilities.lazyLoad(exports, ["getEnforcementAccounts","getEnforcementAccountsOutput"], () => require("./getEnforcementAccounts"));

export { GetEnforcementRuleArgs, GetEnforcementRuleResult, GetEnforcementRuleOutputArgs } from "./getEnforcementRule";
export const getEnforcementRule: typeof import("./getEnforcementRule").getEnforcementRule = null as any;
export const getEnforcementRuleOutput: typeof import("./getEnforcementRule").getEnforcementRuleOutput = null as any;
utilities.lazyLoad(exports, ["getEnforcementRule","getEnforcementRuleOutput"], () => require("./getEnforcementRule"));

export { GetEnforcementRulesArgs, GetEnforcementRulesResult, GetEnforcementRulesOutputArgs } from "./getEnforcementRules";
export const getEnforcementRules: typeof import("./getEnforcementRules").getEnforcementRules = null as any;
export const getEnforcementRulesOutput: typeof import("./getEnforcementRules").getEnforcementRulesOutput = null as any;
utilities.lazyLoad(exports, ["getEnforcementRules","getEnforcementRulesOutput"], () => require("./getEnforcementRules"));

export { GetIncidentsArgs, GetIncidentsResult, GetIncidentsOutputArgs } from "./getIncidents";
export const getIncidents: typeof import("./getIncidents").getIncidents = null as any;
export const getIncidentsOutput: typeof import("./getIncidents").getIncidentsOutput = null as any;
utilities.lazyLoad(exports, ["getIncidents","getIncidentsOutput"], () => require("./getIncidents"));

export { GetIncidentsInfoArgs, GetIncidentsInfoResult, GetIncidentsInfoOutputArgs } from "./getIncidentsInfo";
export const getIncidentsInfo: typeof import("./getIncidentsInfo").getIncidentsInfo = null as any;
export const getIncidentsInfoOutput: typeof import("./getIncidentsInfo").getIncidentsInfoOutput = null as any;
utilities.lazyLoad(exports, ["getIncidentsInfo","getIncidentsInfoOutput"], () => require("./getIncidentsInfo"));

export { GetIncidentsPresetArgs, GetIncidentsPresetResult, GetIncidentsPresetOutputArgs } from "./getIncidentsPreset";
export const getIncidentsPreset: typeof import("./getIncidentsPreset").getIncidentsPreset = null as any;
export const getIncidentsPresetOutput: typeof import("./getIncidentsPreset").getIncidentsPresetOutput = null as any;
utilities.lazyLoad(exports, ["getIncidentsPreset","getIncidentsPresetOutput"], () => require("./getIncidentsPreset"));

export { GetIntegrationsArgs, GetIntegrationsResult, GetIntegrationsOutputArgs } from "./getIntegrations";
export const getIntegrations: typeof import("./getIntegrations").getIntegrations = null as any;
export const getIntegrationsOutput: typeof import("./getIntegrations").getIntegrationsOutput = null as any;
utilities.lazyLoad(exports, ["getIntegrations","getIntegrationsOutput"], () => require("./getIntegrations"));

export { GetJustificationsArgs, GetJustificationsResult, GetJustificationsOutputArgs } from "./getJustifications";
export const getJustifications: typeof import("./getJustifications").getJustifications = null as any;
export const getJustificationsOutput: typeof import("./getJustifications").getJustificationsOutput = null as any;
utilities.lazyLoad(exports, ["getJustifications","getJustificationsOutput"], () => require("./getJustifications"));

export { GetMappingsArgs, GetMappingsResult, GetMappingsOutputArgs } from "./getMappings";
export const getMappings: typeof import("./getMappings").getMappings = null as any;
export const getMappingsOutput: typeof import("./getMappings").getMappingsOutput = null as any;
utilities.lazyLoad(exports, ["getMappings","getMappingsOutput"], () => require("./getMappings"));

export { GetOrganisationArgs, GetOrganisationResult, GetOrganisationOutputArgs } from "./getOrganisation";
export const getOrganisation: typeof import("./getOrganisation").getOrganisation = null as any;
export const getOrganisationOutput: typeof import("./getOrganisation").getOrganisationOutput = null as any;
utilities.lazyLoad(exports, ["getOrganisation","getOrganisationOutput"], () => require("./getOrganisation"));

export { GetPoliciesArgs, GetPoliciesResult, GetPoliciesOutputArgs } from "./getPolicies";
export const getPolicies: typeof import("./getPolicies").getPolicies = null as any;
export const getPoliciesOutput: typeof import("./getPolicies").getPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getPolicies","getPoliciesOutput"], () => require("./getPolicies"));

export { GetRepositoriesArgs, GetRepositoriesResult, GetRepositoriesOutputArgs } from "./getRepositories";
export const getRepositories: typeof import("./getRepositories").getRepositories = null as any;
export const getRepositoriesOutput: typeof import("./getRepositories").getRepositoriesOutput = null as any;
utilities.lazyLoad(exports, ["getRepositories","getRepositoriesOutput"], () => require("./getRepositories"));

export { GetRepositoryBranchesArgs, GetRepositoryBranchesResult, GetRepositoryBranchesOutputArgs } from "./getRepositoryBranches";
export const getRepositoryBranches: typeof import("./getRepositoryBranches").getRepositoryBranches = null as any;
export const getRepositoryBranchesOutput: typeof import("./getRepositoryBranches").getRepositoryBranchesOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryBranches","getRepositoryBranchesOutput"], () => require("./getRepositoryBranches"));

export { GetSuppressionsArgs, GetSuppressionsResult, GetSuppressionsOutputArgs } from "./getSuppressions";
export const getSuppressions: typeof import("./getSuppressions").getSuppressions = null as any;
export const getSuppressionsOutput: typeof import("./getSuppressions").getSuppressionsOutput = null as any;
utilities.lazyLoad(exports, ["getSuppressions","getSuppressionsOutput"], () => require("./getSuppressions"));

export { GetTagArgs, GetTagResult, GetTagOutputArgs } from "./getTag";
export const getTag: typeof import("./getTag").getTag = null as any;
export const getTagOutput: typeof import("./getTag").getTagOutput = null as any;
utilities.lazyLoad(exports, ["getTag","getTagOutput"], () => require("./getTag"));

export { GetTagsArgs, GetTagsResult, GetTagsOutputArgs } from "./getTags";
export const getTags: typeof import("./getTags").getTags = null as any;
export const getTagsOutput: typeof import("./getTags").getTagsOutput = null as any;
utilities.lazyLoad(exports, ["getTags","getTagsOutput"], () => require("./getTags"));

export { GetUsersArgs, GetUsersResult, GetUsersOutputArgs } from "./getUsers";
export const getUsers: typeof import("./getUsers").getUsers = null as any;
export const getUsersOutput: typeof import("./getUsers").getUsersOutput = null as any;
utilities.lazyLoad(exports, ["getUsers","getUsersOutput"], () => require("./getUsers"));

export { PolicyArgs, PolicyState } from "./policy";
export type Policy = import("./policy").Policy;
export const Policy: typeof import("./policy").Policy = null as any;
utilities.lazyLoad(exports, ["Policy"], () => require("./policy"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SimplePolicyArgs, SimplePolicyState } from "./simplePolicy";
export type SimplePolicy = import("./simplePolicy").SimplePolicy;
export const SimplePolicy: typeof import("./simplePolicy").SimplePolicy = null as any;
utilities.lazyLoad(exports, ["SimplePolicy"], () => require("./simplePolicy"));

export { TagArgs, TagState } from "./tag";
export type Tag = import("./tag").Tag;
export const Tag: typeof import("./tag").Tag = null as any;
utilities.lazyLoad(exports, ["Tag"], () => require("./tag"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "bridgecrew:index/complexPolicy:ComplexPolicy":
                return new ComplexPolicy(name, <any>undefined, { urn })
            case "bridgecrew:index/enforcementRule:EnforcementRule":
                return new EnforcementRule(name, <any>undefined, { urn })
            case "bridgecrew:index/policy:Policy":
                return new Policy(name, <any>undefined, { urn })
            case "bridgecrew:index/simplePolicy:SimplePolicy":
                return new SimplePolicy(name, <any>undefined, { urn })
            case "bridgecrew:index/tag:Tag":
                return new Tag(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("bridgecrew", "index/complexPolicy", _module)
pulumi.runtime.registerResourceModule("bridgecrew", "index/enforcementRule", _module)
pulumi.runtime.registerResourceModule("bridgecrew", "index/policy", _module)
pulumi.runtime.registerResourceModule("bridgecrew", "index/simplePolicy", _module)
pulumi.runtime.registerResourceModule("bridgecrew", "index/tag", _module)
pulumi.runtime.registerResourcePackage("bridgecrew", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:bridgecrew") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
