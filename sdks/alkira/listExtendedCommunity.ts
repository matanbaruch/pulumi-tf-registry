// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ListExtendedCommunity extends pulumi.CustomResource {
    /**
     * Get an existing ListExtendedCommunity resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ListExtendedCommunityState, opts?: pulumi.CustomResourceOptions): ListExtendedCommunity {
        return new ListExtendedCommunity(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alkira:index/listExtendedCommunity:ListExtendedCommunity';

    /**
     * Returns true if the given object is an instance of ListExtendedCommunity.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ListExtendedCommunity {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ListExtendedCommunity.__pulumiType;
    }

    /**
     * description for the list.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * name of the list.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The provisioning state of the resource.
     */
    public /*out*/ readonly provisionState!: pulumi.Output<string>;
    /**
     * extended-community values to match on routes. Each extended-community in this set is a structured tag value in the
     * format of `type:AA:NN` format (where AA is `0-65535` and NN is `0-4294967295`) `AA` denotes a AS number or it could be
     * in the format of `IPaddr:nn` where IPaddr is a `x.x.x.x` IPv4 address and nn is a 2 byte value `0-65535`. Type will only
     * be`soo` for now.
     */
    public readonly values!: pulumi.Output<string[]>;

    /**
     * Create a ListExtendedCommunity resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ListExtendedCommunityArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ListExtendedCommunityArgs | ListExtendedCommunityState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ListExtendedCommunityState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["provisionState"] = state ? state.provisionState : undefined;
            resourceInputs["values"] = state ? state.values : undefined;
        } else {
            const args = argsOrState as ListExtendedCommunityArgs | undefined;
            if ((!args || args.values === undefined) && !opts.urn) {
                throw new Error("Missing required property 'values'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["values"] = args ? args.values : undefined;
            resourceInputs["provisionState"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ListExtendedCommunity.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ListExtendedCommunity resources.
 */
export interface ListExtendedCommunityState {
    /**
     * description for the list.
     */
    description?: pulumi.Input<string>;
    /**
     * name of the list.
     */
    name?: pulumi.Input<string>;
    /**
     * The provisioning state of the resource.
     */
    provisionState?: pulumi.Input<string>;
    /**
     * extended-community values to match on routes. Each extended-community in this set is a structured tag value in the
     * format of `type:AA:NN` format (where AA is `0-65535` and NN is `0-4294967295`) `AA` denotes a AS number or it could be
     * in the format of `IPaddr:nn` where IPaddr is a `x.x.x.x` IPv4 address and nn is a 2 byte value `0-65535`. Type will only
     * be`soo` for now.
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ListExtendedCommunity resource.
 */
export interface ListExtendedCommunityArgs {
    /**
     * description for the list.
     */
    description?: pulumi.Input<string>;
    /**
     * name of the list.
     */
    name?: pulumi.Input<string>;
    /**
     * extended-community values to match on routes. Each extended-community in this set is a structured tag value in the
     * format of `type:AA:NN` format (where AA is `0-65535` and NN is `0-4294967295`) `AA` denotes a AS number or it could be
     * in the format of `IPaddr:nn` where IPaddr is a `x.x.x.x` IPv4 address and nn is a 2 byte value `0-65535`. Type will only
     * be`soo` for now.
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}
