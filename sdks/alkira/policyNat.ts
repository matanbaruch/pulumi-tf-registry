// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PolicyNat extends pulumi.CustomResource {
    /**
     * Get an existing PolicyNat resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyNatState, opts?: pulumi.CustomResourceOptions): PolicyNat {
        return new PolicyNat(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alkira:index/policyNat:PolicyNat';

    /**
     * Returns true if the given object is an instance of PolicyNat.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PolicyNat {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PolicyNat.__pulumiType;
    }

    /**
     * Allow overlapping translated source address. Default value is `false`. (**BETA**)
     */
    public readonly allowOverlappingTranslatedSourceAddresses!: pulumi.Output<boolean | undefined>;
    /**
     * The category of NAT policy. The vaule could be `DEFAULT` or `INTERNET_CONNECTOR`. Default value is `DEFAULT`.
     */
    public readonly category!: pulumi.Output<string | undefined>;
    /**
     * The description of the policy.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Excludes given associated connector from `included_groups`. Implicit group of a branch or on-premise connector for which
     * a user defined group is used in `included_groups` can be used here.
     */
    public readonly excludedGroupIds!: pulumi.Output<number[] | undefined>;
    /**
     * Defines the scope for the policy. Connectors associated with groups defined here is where this policy would be applied.
     */
    public readonly includedGroupIds!: pulumi.Output<number[]>;
    /**
     * The name of the policy.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The list of NAT rules to be applied by the policy.
     */
    public readonly natRuleIds!: pulumi.Output<number[]>;
    /**
     * IDs of the segment that will define the policyscope.
     */
    public readonly segmentId!: pulumi.Output<string>;
    /**
     * The type of NAT policy, currently only `INTRA_SEGMENT` is supported.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a PolicyNat resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyNatArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyNatArgs | PolicyNatState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyNatState | undefined;
            resourceInputs["allowOverlappingTranslatedSourceAddresses"] = state ? state.allowOverlappingTranslatedSourceAddresses : undefined;
            resourceInputs["category"] = state ? state.category : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["excludedGroupIds"] = state ? state.excludedGroupIds : undefined;
            resourceInputs["includedGroupIds"] = state ? state.includedGroupIds : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["natRuleIds"] = state ? state.natRuleIds : undefined;
            resourceInputs["segmentId"] = state ? state.segmentId : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as PolicyNatArgs | undefined;
            if ((!args || args.includedGroupIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'includedGroupIds'");
            }
            if ((!args || args.natRuleIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'natRuleIds'");
            }
            if ((!args || args.segmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'segmentId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["allowOverlappingTranslatedSourceAddresses"] = args ? args.allowOverlappingTranslatedSourceAddresses : undefined;
            resourceInputs["category"] = args ? args.category : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["excludedGroupIds"] = args ? args.excludedGroupIds : undefined;
            resourceInputs["includedGroupIds"] = args ? args.includedGroupIds : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["natRuleIds"] = args ? args.natRuleIds : undefined;
            resourceInputs["segmentId"] = args ? args.segmentId : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PolicyNat.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PolicyNat resources.
 */
export interface PolicyNatState {
    /**
     * Allow overlapping translated source address. Default value is `false`. (**BETA**)
     */
    allowOverlappingTranslatedSourceAddresses?: pulumi.Input<boolean>;
    /**
     * The category of NAT policy. The vaule could be `DEFAULT` or `INTERNET_CONNECTOR`. Default value is `DEFAULT`.
     */
    category?: pulumi.Input<string>;
    /**
     * The description of the policy.
     */
    description?: pulumi.Input<string>;
    /**
     * Excludes given associated connector from `included_groups`. Implicit group of a branch or on-premise connector for which
     * a user defined group is used in `included_groups` can be used here.
     */
    excludedGroupIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Defines the scope for the policy. Connectors associated with groups defined here is where this policy would be applied.
     */
    includedGroupIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The name of the policy.
     */
    name?: pulumi.Input<string>;
    /**
     * The list of NAT rules to be applied by the policy.
     */
    natRuleIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * IDs of the segment that will define the policyscope.
     */
    segmentId?: pulumi.Input<string>;
    /**
     * The type of NAT policy, currently only `INTRA_SEGMENT` is supported.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PolicyNat resource.
 */
export interface PolicyNatArgs {
    /**
     * Allow overlapping translated source address. Default value is `false`. (**BETA**)
     */
    allowOverlappingTranslatedSourceAddresses?: pulumi.Input<boolean>;
    /**
     * The category of NAT policy. The vaule could be `DEFAULT` or `INTERNET_CONNECTOR`. Default value is `DEFAULT`.
     */
    category?: pulumi.Input<string>;
    /**
     * The description of the policy.
     */
    description?: pulumi.Input<string>;
    /**
     * Excludes given associated connector from `included_groups`. Implicit group of a branch or on-premise connector for which
     * a user defined group is used in `included_groups` can be used here.
     */
    excludedGroupIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Defines the scope for the policy. Connectors associated with groups defined here is where this policy would be applied.
     */
    includedGroupIds: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The name of the policy.
     */
    name?: pulumi.Input<string>;
    /**
     * The list of NAT rules to be applied by the policy.
     */
    natRuleIds: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * IDs of the segment that will define the policyscope.
     */
    segmentId: pulumi.Input<string>;
    /**
     * The type of NAT policy, currently only `INTRA_SEGMENT` is supported.
     */
    type: pulumi.Input<string>;
}
