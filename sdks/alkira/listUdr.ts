// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ListUdr extends pulumi.CustomResource {
    /**
     * Get an existing ListUdr resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ListUdrState, opts?: pulumi.CustomResourceOptions): ListUdr {
        return new ListUdr(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alkira:index/listUdr:ListUdr';

    /**
     * Returns true if the given object is an instance of ListUdr.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ListUdr {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ListUdr.__pulumiType;
    }

    /**
     * Cloud provider. Only `AZURE` is supported for now.
     */
    public readonly cloudProvider!: pulumi.Output<string | undefined>;
    /**
     * Description for the list.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Name of the list.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The provisioning state of the resource.
     */
    public /*out*/ readonly provisionState!: pulumi.Output<string>;
    /**
     * ID of `list_dns_server` resource.
     */
    public readonly routes!: pulumi.Output<outputs.ListUdrRoute[]>;

    /**
     * Create a ListUdr resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ListUdrArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ListUdrArgs | ListUdrState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ListUdrState | undefined;
            resourceInputs["cloudProvider"] = state ? state.cloudProvider : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["provisionState"] = state ? state.provisionState : undefined;
            resourceInputs["routes"] = state ? state.routes : undefined;
        } else {
            const args = argsOrState as ListUdrArgs | undefined;
            if ((!args || args.routes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routes'");
            }
            resourceInputs["cloudProvider"] = args ? args.cloudProvider : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["routes"] = args ? args.routes : undefined;
            resourceInputs["provisionState"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ListUdr.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ListUdr resources.
 */
export interface ListUdrState {
    /**
     * Cloud provider. Only `AZURE` is supported for now.
     */
    cloudProvider?: pulumi.Input<string>;
    /**
     * Description for the list.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the list.
     */
    name?: pulumi.Input<string>;
    /**
     * The provisioning state of the resource.
     */
    provisionState?: pulumi.Input<string>;
    /**
     * ID of `list_dns_server` resource.
     */
    routes?: pulumi.Input<pulumi.Input<inputs.ListUdrRoute>[]>;
}

/**
 * The set of arguments for constructing a ListUdr resource.
 */
export interface ListUdrArgs {
    /**
     * Cloud provider. Only `AZURE` is supported for now.
     */
    cloudProvider?: pulumi.Input<string>;
    /**
     * Description for the list.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the list.
     */
    name?: pulumi.Input<string>;
    /**
     * ID of `list_dns_server` resource.
     */
    routes: pulumi.Input<pulumi.Input<inputs.ListUdrRoute>[]>;
}
