// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ConnectorFortinetSdwan extends pulumi.CustomResource {
    /**
     * Get an existing ConnectorFortinetSdwan resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectorFortinetSdwanState, opts?: pulumi.CustomResourceOptions): ConnectorFortinetSdwan {
        return new ConnectorFortinetSdwan(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alkira:index/connectorFortinetSdwan:ConnectorFortinetSdwan';

    /**
     * Returns true if the given object is an instance of ConnectorFortinetSdwan.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConnectorFortinetSdwan {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConnectorFortinetSdwan.__pulumiType;
    }

    /**
     * This list allows the IP addresses or subnets to be whitelisted so that they can communicate with the Fortinet SD-WAN
     * instance. The value could be `/32` IPs or can also be a mask.
     */
    public readonly allowLists!: pulumi.Output<string[] | undefined>;
    /**
     * IDs of Billing Tags to be associated with the connector.
     */
    public readonly billingTagIds!: pulumi.Output<number[] | undefined>;
    /**
     * The CXP where the connector should be provisioned.
     */
    public readonly cxp!: pulumi.Output<string>;
    /**
     * Is the connector enabled. Default is `true`.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The group of the connector.
     */
    public readonly group!: pulumi.Output<string | undefined>;
    /**
     * The ID of implicit group automaticaly created with the connector.
     */
    public /*out*/ readonly implicitGroupId!: pulumi.Output<number>;
    /**
     * The name of the connector.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The provision state of the connector.
     */
    public /*out*/ readonly provisionState!: pulumi.Output<string>;
    /**
     * The size of the connector, one of `SMALL`, `MEDIUM` and `LARGE`, `2LARGE`, `5LARGE`.
     */
    public readonly size!: pulumi.Output<string>;
    /**
     * Specify target segment.
     */
    public readonly targetSegments!: pulumi.Output<outputs.ConnectorFortinetSdwanTargetSegment[]>;
    /**
     * The tunnel protocol. It could be either `IPSEC`or `GRE`. Default value is `IPSEC`.
     */
    public readonly tunnelProtocol!: pulumi.Output<string | undefined>;
    /**
     * WAN Edge
     */
    public readonly wanEdges!: pulumi.Output<outputs.ConnectorFortinetSdwanWanEdge[]>;

    /**
     * Create a ConnectorFortinetSdwan resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectorFortinetSdwanArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectorFortinetSdwanArgs | ConnectorFortinetSdwanState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectorFortinetSdwanState | undefined;
            resourceInputs["allowLists"] = state ? state.allowLists : undefined;
            resourceInputs["billingTagIds"] = state ? state.billingTagIds : undefined;
            resourceInputs["cxp"] = state ? state.cxp : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["implicitGroupId"] = state ? state.implicitGroupId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["provisionState"] = state ? state.provisionState : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["targetSegments"] = state ? state.targetSegments : undefined;
            resourceInputs["tunnelProtocol"] = state ? state.tunnelProtocol : undefined;
            resourceInputs["wanEdges"] = state ? state.wanEdges : undefined;
        } else {
            const args = argsOrState as ConnectorFortinetSdwanArgs | undefined;
            if ((!args || args.cxp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cxp'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            if ((!args || args.targetSegments === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetSegments'");
            }
            if ((!args || args.wanEdges === undefined) && !opts.urn) {
                throw new Error("Missing required property 'wanEdges'");
            }
            resourceInputs["allowLists"] = args ? args.allowLists : undefined;
            resourceInputs["billingTagIds"] = args ? args.billingTagIds : undefined;
            resourceInputs["cxp"] = args ? args.cxp : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["targetSegments"] = args ? args.targetSegments : undefined;
            resourceInputs["tunnelProtocol"] = args ? args.tunnelProtocol : undefined;
            resourceInputs["wanEdges"] = args ? args.wanEdges : undefined;
            resourceInputs["implicitGroupId"] = undefined /*out*/;
            resourceInputs["provisionState"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConnectorFortinetSdwan.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ConnectorFortinetSdwan resources.
 */
export interface ConnectorFortinetSdwanState {
    /**
     * This list allows the IP addresses or subnets to be whitelisted so that they can communicate with the Fortinet SD-WAN
     * instance. The value could be `/32` IPs or can also be a mask.
     */
    allowLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * IDs of Billing Tags to be associated with the connector.
     */
    billingTagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The CXP where the connector should be provisioned.
     */
    cxp?: pulumi.Input<string>;
    /**
     * Is the connector enabled. Default is `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The group of the connector.
     */
    group?: pulumi.Input<string>;
    /**
     * The ID of implicit group automaticaly created with the connector.
     */
    implicitGroupId?: pulumi.Input<number>;
    /**
     * The name of the connector.
     */
    name?: pulumi.Input<string>;
    /**
     * The provision state of the connector.
     */
    provisionState?: pulumi.Input<string>;
    /**
     * The size of the connector, one of `SMALL`, `MEDIUM` and `LARGE`, `2LARGE`, `5LARGE`.
     */
    size?: pulumi.Input<string>;
    /**
     * Specify target segment.
     */
    targetSegments?: pulumi.Input<pulumi.Input<inputs.ConnectorFortinetSdwanTargetSegment>[]>;
    /**
     * The tunnel protocol. It could be either `IPSEC`or `GRE`. Default value is `IPSEC`.
     */
    tunnelProtocol?: pulumi.Input<string>;
    /**
     * WAN Edge
     */
    wanEdges?: pulumi.Input<pulumi.Input<inputs.ConnectorFortinetSdwanWanEdge>[]>;
}

/**
 * The set of arguments for constructing a ConnectorFortinetSdwan resource.
 */
export interface ConnectorFortinetSdwanArgs {
    /**
     * This list allows the IP addresses or subnets to be whitelisted so that they can communicate with the Fortinet SD-WAN
     * instance. The value could be `/32` IPs or can also be a mask.
     */
    allowLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * IDs of Billing Tags to be associated with the connector.
     */
    billingTagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The CXP where the connector should be provisioned.
     */
    cxp: pulumi.Input<string>;
    /**
     * Is the connector enabled. Default is `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The group of the connector.
     */
    group?: pulumi.Input<string>;
    /**
     * The name of the connector.
     */
    name?: pulumi.Input<string>;
    /**
     * The size of the connector, one of `SMALL`, `MEDIUM` and `LARGE`, `2LARGE`, `5LARGE`.
     */
    size: pulumi.Input<string>;
    /**
     * Specify target segment.
     */
    targetSegments: pulumi.Input<pulumi.Input<inputs.ConnectorFortinetSdwanTargetSegment>[]>;
    /**
     * The tunnel protocol. It could be either `IPSEC`or `GRE`. Default value is `IPSEC`.
     */
    tunnelProtocol?: pulumi.Input<string>;
    /**
     * WAN Edge
     */
    wanEdges: pulumi.Input<pulumi.Input<inputs.ConnectorFortinetSdwanWanEdge>[]>;
}
