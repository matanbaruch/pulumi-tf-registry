// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ConnectorArubaEdge extends pulumi.CustomResource {
    /**
     * Get an existing ConnectorArubaEdge resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectorArubaEdgeState, opts?: pulumi.CustomResourceOptions): ConnectorArubaEdge {
        return new ConnectorArubaEdge(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alkira:index/connectorArubaEdge:ConnectorArubaEdge';

    /**
     * Returns true if the given object is an instance of ConnectorArubaEdge.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConnectorArubaEdge {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConnectorArubaEdge.__pulumiType;
    }

    /**
     * The connector will accept multiple segments as a part of VRF mappings.
     */
    public readonly arubaEdgeVrfMappings!: pulumi.Output<outputs.ConnectorArubaEdgeArubaEdgeVrfMapping[] | undefined>;
    /**
     * IDs of billing tags.
     */
    public readonly billingTagIds!: pulumi.Output<number[] | undefined>;
    /**
     * If enabled the Aruba Edge Connect image supporting the boost mode for given size(or bandwidth) would be deployed in
     * Alkira CXP. The default value is false.
     */
    public readonly boostMode!: pulumi.Output<boolean | undefined>;
    /**
     * The CXP where the connector should be provisioned.
     */
    public readonly cxp!: pulumi.Output<string>;
    /**
     * Whether the connector is enabled. Default is `true`.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The gateway BGP ASN.
     */
    public readonly gatewayGbpAsn!: pulumi.Output<number>;
    /**
     * The group of the connector.
     */
    public readonly group!: pulumi.Output<string | undefined>;
    /**
     * The ID of implicit group automaticaly created with the connector.
     */
    public /*out*/ readonly implicitGroupId!: pulumi.Output<number>;
    /**
     * The Aruba Edge connector instances.
     */
    public readonly instances!: pulumi.Output<outputs.ConnectorArubaEdgeInstance[]>;
    /**
     * The name of the connector.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The provision state of the connector.
     */
    public /*out*/ readonly provisionState!: pulumi.Output<string>;
    /**
     * The IDs of the segments associated with theAruba Edge connector.
     */
    public readonly segmentIds!: pulumi.Output<string[]>;
    /**
     * The size of the connector, one of `SMALL`, `MEDIUM` or `LARGE`.
     */
    public readonly size!: pulumi.Output<string>;
    /**
     * The tunnel protocol to be used. IPSEC and GRE are the only valid options. IPSEC can only be used with azure. GRE can
     * only be used with AWS. IPSEC is the default selection.
     */
    public readonly tunnelProtocol!: pulumi.Output<string | undefined>;
    /**
     * The version of the Aruba Edge. Please check Alkira Portal for all supported versions.
     */
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a ConnectorArubaEdge resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectorArubaEdgeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectorArubaEdgeArgs | ConnectorArubaEdgeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectorArubaEdgeState | undefined;
            resourceInputs["arubaEdgeVrfMappings"] = state ? state.arubaEdgeVrfMappings : undefined;
            resourceInputs["billingTagIds"] = state ? state.billingTagIds : undefined;
            resourceInputs["boostMode"] = state ? state.boostMode : undefined;
            resourceInputs["cxp"] = state ? state.cxp : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["gatewayGbpAsn"] = state ? state.gatewayGbpAsn : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["implicitGroupId"] = state ? state.implicitGroupId : undefined;
            resourceInputs["instances"] = state ? state.instances : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["provisionState"] = state ? state.provisionState : undefined;
            resourceInputs["segmentIds"] = state ? state.segmentIds : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["tunnelProtocol"] = state ? state.tunnelProtocol : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as ConnectorArubaEdgeArgs | undefined;
            if ((!args || args.cxp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cxp'");
            }
            if ((!args || args.gatewayGbpAsn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gatewayGbpAsn'");
            }
            if ((!args || args.instances === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instances'");
            }
            if ((!args || args.segmentIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'segmentIds'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["arubaEdgeVrfMappings"] = args ? args.arubaEdgeVrfMappings : undefined;
            resourceInputs["billingTagIds"] = args ? args.billingTagIds : undefined;
            resourceInputs["boostMode"] = args ? args.boostMode : undefined;
            resourceInputs["cxp"] = args ? args.cxp : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["gatewayGbpAsn"] = args ? args.gatewayGbpAsn : undefined;
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["instances"] = args ? args.instances : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["segmentIds"] = args ? args.segmentIds : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["tunnelProtocol"] = args ? args.tunnelProtocol : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["implicitGroupId"] = undefined /*out*/;
            resourceInputs["provisionState"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConnectorArubaEdge.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ConnectorArubaEdge resources.
 */
export interface ConnectorArubaEdgeState {
    /**
     * The connector will accept multiple segments as a part of VRF mappings.
     */
    arubaEdgeVrfMappings?: pulumi.Input<pulumi.Input<inputs.ConnectorArubaEdgeArubaEdgeVrfMapping>[]>;
    /**
     * IDs of billing tags.
     */
    billingTagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * If enabled the Aruba Edge Connect image supporting the boost mode for given size(or bandwidth) would be deployed in
     * Alkira CXP. The default value is false.
     */
    boostMode?: pulumi.Input<boolean>;
    /**
     * The CXP where the connector should be provisioned.
     */
    cxp?: pulumi.Input<string>;
    /**
     * Whether the connector is enabled. Default is `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The gateway BGP ASN.
     */
    gatewayGbpAsn?: pulumi.Input<number>;
    /**
     * The group of the connector.
     */
    group?: pulumi.Input<string>;
    /**
     * The ID of implicit group automaticaly created with the connector.
     */
    implicitGroupId?: pulumi.Input<number>;
    /**
     * The Aruba Edge connector instances.
     */
    instances?: pulumi.Input<pulumi.Input<inputs.ConnectorArubaEdgeInstance>[]>;
    /**
     * The name of the connector.
     */
    name?: pulumi.Input<string>;
    /**
     * The provision state of the connector.
     */
    provisionState?: pulumi.Input<string>;
    /**
     * The IDs of the segments associated with theAruba Edge connector.
     */
    segmentIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The size of the connector, one of `SMALL`, `MEDIUM` or `LARGE`.
     */
    size?: pulumi.Input<string>;
    /**
     * The tunnel protocol to be used. IPSEC and GRE are the only valid options. IPSEC can only be used with azure. GRE can
     * only be used with AWS. IPSEC is the default selection.
     */
    tunnelProtocol?: pulumi.Input<string>;
    /**
     * The version of the Aruba Edge. Please check Alkira Portal for all supported versions.
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ConnectorArubaEdge resource.
 */
export interface ConnectorArubaEdgeArgs {
    /**
     * The connector will accept multiple segments as a part of VRF mappings.
     */
    arubaEdgeVrfMappings?: pulumi.Input<pulumi.Input<inputs.ConnectorArubaEdgeArubaEdgeVrfMapping>[]>;
    /**
     * IDs of billing tags.
     */
    billingTagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * If enabled the Aruba Edge Connect image supporting the boost mode for given size(or bandwidth) would be deployed in
     * Alkira CXP. The default value is false.
     */
    boostMode?: pulumi.Input<boolean>;
    /**
     * The CXP where the connector should be provisioned.
     */
    cxp: pulumi.Input<string>;
    /**
     * Whether the connector is enabled. Default is `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The gateway BGP ASN.
     */
    gatewayGbpAsn: pulumi.Input<number>;
    /**
     * The group of the connector.
     */
    group?: pulumi.Input<string>;
    /**
     * The Aruba Edge connector instances.
     */
    instances: pulumi.Input<pulumi.Input<inputs.ConnectorArubaEdgeInstance>[]>;
    /**
     * The name of the connector.
     */
    name?: pulumi.Input<string>;
    /**
     * The IDs of the segments associated with theAruba Edge connector.
     */
    segmentIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The size of the connector, one of `SMALL`, `MEDIUM` or `LARGE`.
     */
    size: pulumi.Input<string>;
    /**
     * The tunnel protocol to be used. IPSEC and GRE are the only valid options. IPSEC can only be used with azure. GRE can
     * only be used with AWS. IPSEC is the default selection.
     */
    tunnelProtocol?: pulumi.Input<string>;
    /**
     * The version of the Aruba Edge. Please check Alkira Portal for all supported versions.
     */
    version: pulumi.Input<string>;
}
