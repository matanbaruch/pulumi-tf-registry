// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PolicyRouting extends pulumi.CustomResource {
    /**
     * Get an existing PolicyRouting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyRoutingState, opts?: pulumi.CustomResourceOptions): PolicyRouting {
        return new PolicyRouting(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alkira:index/policyRouting:PolicyRouting';

    /**
     * Returns true if the given object is an instance of PolicyRouting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PolicyRouting {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PolicyRouting.__pulumiType;
    }

    /**
     * Prefix list ID to send aggregates out towards on-prem connectors.
     */
    public readonly advertiseCustomRoutesPrefixId!: pulumi.Output<number | undefined>;
    /**
     * Advertise Alkira’s Internet Connector to selected scope. This only applies to `OUTBOUND` policy. Default value is
     * `true`.
     */
    public readonly advertiseInternetExit!: pulumi.Output<boolean | undefined>;
    /**
     * Advertise routes from other on premise connectors to selected scope. Default value is `false`.
     */
    public readonly advertiseOnPremRoutes!: pulumi.Output<boolean | undefined>;
    /**
     * The description of the routing policy.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The direction of the route, `INBOUND` or `OUTBOUND`.
     */
    public readonly direction!: pulumi.Output<string>;
    /**
     * Whether enable AS-override on associated connectors. Default value is `true`.
     */
    public readonly enableAsOverride!: pulumi.Output<boolean | undefined>;
    /**
     * Whether the routing policy is enabled. By default, it is set to `false`.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Excludes given associated connector from `included_groups`. Implicit group ID of a branch/on-premise connector for which
     * a user defined group is used in `included_groups` can be used here.
     */
    public readonly excludedGroupIds!: pulumi.Output<number[] | undefined>;
    /**
     * Defines the scope for the policy. Connector associated with group IDs metioned here is where this policy would be
     * applied. Group IDs that associated with branch/on-premise connectors can be used here. These group should not contain
     * any cloud connector.
     */
    public readonly includedGroupIds!: pulumi.Output<number[]>;
    /**
     * The name of the routing policy.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The provision state of the resource.
     */
    public /*out*/ readonly provisionState!: pulumi.Output<string>;
    public readonly rules!: pulumi.Output<outputs.PolicyRoutingRule[] | undefined>;
    /**
     * IDs of segments that will define the policy scope.
     */
    public readonly segmentId!: pulumi.Output<string>;

    /**
     * Create a PolicyRouting resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyRoutingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyRoutingArgs | PolicyRoutingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyRoutingState | undefined;
            resourceInputs["advertiseCustomRoutesPrefixId"] = state ? state.advertiseCustomRoutesPrefixId : undefined;
            resourceInputs["advertiseInternetExit"] = state ? state.advertiseInternetExit : undefined;
            resourceInputs["advertiseOnPremRoutes"] = state ? state.advertiseOnPremRoutes : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["direction"] = state ? state.direction : undefined;
            resourceInputs["enableAsOverride"] = state ? state.enableAsOverride : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["excludedGroupIds"] = state ? state.excludedGroupIds : undefined;
            resourceInputs["includedGroupIds"] = state ? state.includedGroupIds : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["provisionState"] = state ? state.provisionState : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["segmentId"] = state ? state.segmentId : undefined;
        } else {
            const args = argsOrState as PolicyRoutingArgs | undefined;
            if ((!args || args.direction === undefined) && !opts.urn) {
                throw new Error("Missing required property 'direction'");
            }
            if ((!args || args.includedGroupIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'includedGroupIds'");
            }
            if ((!args || args.segmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'segmentId'");
            }
            resourceInputs["advertiseCustomRoutesPrefixId"] = args ? args.advertiseCustomRoutesPrefixId : undefined;
            resourceInputs["advertiseInternetExit"] = args ? args.advertiseInternetExit : undefined;
            resourceInputs["advertiseOnPremRoutes"] = args ? args.advertiseOnPremRoutes : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["direction"] = args ? args.direction : undefined;
            resourceInputs["enableAsOverride"] = args ? args.enableAsOverride : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["excludedGroupIds"] = args ? args.excludedGroupIds : undefined;
            resourceInputs["includedGroupIds"] = args ? args.includedGroupIds : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["segmentId"] = args ? args.segmentId : undefined;
            resourceInputs["provisionState"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PolicyRouting.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PolicyRouting resources.
 */
export interface PolicyRoutingState {
    /**
     * Prefix list ID to send aggregates out towards on-prem connectors.
     */
    advertiseCustomRoutesPrefixId?: pulumi.Input<number>;
    /**
     * Advertise Alkira’s Internet Connector to selected scope. This only applies to `OUTBOUND` policy. Default value is
     * `true`.
     */
    advertiseInternetExit?: pulumi.Input<boolean>;
    /**
     * Advertise routes from other on premise connectors to selected scope. Default value is `false`.
     */
    advertiseOnPremRoutes?: pulumi.Input<boolean>;
    /**
     * The description of the routing policy.
     */
    description?: pulumi.Input<string>;
    /**
     * The direction of the route, `INBOUND` or `OUTBOUND`.
     */
    direction?: pulumi.Input<string>;
    /**
     * Whether enable AS-override on associated connectors. Default value is `true`.
     */
    enableAsOverride?: pulumi.Input<boolean>;
    /**
     * Whether the routing policy is enabled. By default, it is set to `false`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Excludes given associated connector from `included_groups`. Implicit group ID of a branch/on-premise connector for which
     * a user defined group is used in `included_groups` can be used here.
     */
    excludedGroupIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Defines the scope for the policy. Connector associated with group IDs metioned here is where this policy would be
     * applied. Group IDs that associated with branch/on-premise connectors can be used here. These group should not contain
     * any cloud connector.
     */
    includedGroupIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The name of the routing policy.
     */
    name?: pulumi.Input<string>;
    /**
     * The provision state of the resource.
     */
    provisionState?: pulumi.Input<string>;
    rules?: pulumi.Input<pulumi.Input<inputs.PolicyRoutingRule>[]>;
    /**
     * IDs of segments that will define the policy scope.
     */
    segmentId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PolicyRouting resource.
 */
export interface PolicyRoutingArgs {
    /**
     * Prefix list ID to send aggregates out towards on-prem connectors.
     */
    advertiseCustomRoutesPrefixId?: pulumi.Input<number>;
    /**
     * Advertise Alkira’s Internet Connector to selected scope. This only applies to `OUTBOUND` policy. Default value is
     * `true`.
     */
    advertiseInternetExit?: pulumi.Input<boolean>;
    /**
     * Advertise routes from other on premise connectors to selected scope. Default value is `false`.
     */
    advertiseOnPremRoutes?: pulumi.Input<boolean>;
    /**
     * The description of the routing policy.
     */
    description?: pulumi.Input<string>;
    /**
     * The direction of the route, `INBOUND` or `OUTBOUND`.
     */
    direction: pulumi.Input<string>;
    /**
     * Whether enable AS-override on associated connectors. Default value is `true`.
     */
    enableAsOverride?: pulumi.Input<boolean>;
    /**
     * Whether the routing policy is enabled. By default, it is set to `false`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Excludes given associated connector from `included_groups`. Implicit group ID of a branch/on-premise connector for which
     * a user defined group is used in `included_groups` can be used here.
     */
    excludedGroupIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Defines the scope for the policy. Connector associated with group IDs metioned here is where this policy would be
     * applied. Group IDs that associated with branch/on-premise connectors can be used here. These group should not contain
     * any cloud connector.
     */
    includedGroupIds: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The name of the routing policy.
     */
    name?: pulumi.Input<string>;
    rules?: pulumi.Input<pulumi.Input<inputs.PolicyRoutingRule>[]>;
    /**
     * IDs of segments that will define the policy scope.
     */
    segmentId: pulumi.Input<string>;
}
