// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ConnectorAwsVpc extends pulumi.CustomResource {
    /**
     * Get an existing ConnectorAwsVpc resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectorAwsVpcState, opts?: pulumi.CustomResourceOptions): ConnectorAwsVpc {
        return new ConnectorAwsVpc(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alkira:index/connectorAwsVpc:ConnectorAwsVpc';

    /**
     * Returns true if the given object is an instance of ConnectorAwsVpc.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConnectorAwsVpc {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConnectorAwsVpc.__pulumiType;
    }

    /**
     * AWS Account ID.
     */
    public readonly awsAccountId!: pulumi.Output<string>;
    /**
     * AWS Region where VPC resides.
     */
    public readonly awsRegion!: pulumi.Output<string>;
    /**
     * Tags for billing.
     */
    public readonly billingTagIds!: pulumi.Output<number[] | undefined>;
    /**
     * ID of resource `credential_aws_vpc`.
     */
    public readonly credentialId!: pulumi.Output<string>;
    /**
     * The CXP where the connector should be provisioned.
     */
    public readonly cxp!: pulumi.Output<string>;
    /**
     * Enable direct inter-vpc communication. Default is set to `false`.
     */
    public readonly directInterVpcCommunicationEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Direct inter-vpc communication group.
     */
    public readonly directInterVpcCommunicationGroup!: pulumi.Output<string | undefined>;
    /**
     * Whether the connector is enabled. Default is `true`.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * A list of additional CXPs where the connector should be provisioned for failover.
     */
    public readonly failoverCxps!: pulumi.Output<string[] | undefined>;
    /**
     * The group of the connector.
     */
    public readonly group!: pulumi.Output<string | undefined>;
    /**
     * The ID of implicit group automaticaly created with the connector.
     */
    public /*out*/ readonly implicitGroupId!: pulumi.Output<number>;
    /**
     * The name of the connector.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Overlay subnet.
     */
    public readonly overlaySubnets!: pulumi.Output<string[] | undefined>;
    /**
     * The provisioning state of connector.
     */
    public /*out*/ readonly provisionState!: pulumi.Output<string>;
    /**
     * The ID of the scale group associated with the connector.
     */
    public readonly scaleGroupId!: pulumi.Output<string | undefined>;
    /**
     * The ID of segments associated with the connector. Currently, only `1` segment is allowed.
     */
    public readonly segmentId!: pulumi.Output<string>;
    /**
     * The size of the connector, one of `SMALL`, `MEDIUM`, `LARGE`, `2LARGE`, `4LARGE`, `5LARGE`, `10LARGE`, `20LARGE`.
     */
    public readonly size!: pulumi.Output<string>;
    /**
     * TGW attachment.
     */
    public readonly tgwAttachments!: pulumi.Output<outputs.ConnectorAwsVpcTgwAttachment[] | undefined>;
    /**
     * When it's set to `true`, Alkira will use TGW Connect attachments to build connection to AWS Transit Gateway. Connect
     * Attachments suppport GRE tunnel protocol for high performance and BGP for dynamic routing. This applies to all TGW
     * attachments. This field can be set to `true` only if the VPC is in the same AWS region as the Alkira CXP it is being
     * deployed onto.
     */
    public readonly tgwConnectEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The list of CIDR attached to the target VPC for routing purpose. It could be only specified if `vpc_subnet` is not
     * specified.
     */
    public readonly vpcCidrs!: pulumi.Output<string[] | undefined>;
    /**
     * The ID of the target VPC.
     */
    public readonly vpcId!: pulumi.Output<string>;
    /**
     * VPC route table
     */
    public readonly vpcRouteTables!: pulumi.Output<outputs.ConnectorAwsVpcVpcRouteTable[] | undefined>;
    /**
     * The list of subnets of the target VPC for routing purpose. It could only specified if `vpc_cidr` is not specified.
     */
    public readonly vpcSubnets!: pulumi.Output<outputs.ConnectorAwsVpcVpcSubnet[] | undefined>;

    /**
     * Create a ConnectorAwsVpc resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectorAwsVpcArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectorAwsVpcArgs | ConnectorAwsVpcState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectorAwsVpcState | undefined;
            resourceInputs["awsAccountId"] = state ? state.awsAccountId : undefined;
            resourceInputs["awsRegion"] = state ? state.awsRegion : undefined;
            resourceInputs["billingTagIds"] = state ? state.billingTagIds : undefined;
            resourceInputs["credentialId"] = state ? state.credentialId : undefined;
            resourceInputs["cxp"] = state ? state.cxp : undefined;
            resourceInputs["directInterVpcCommunicationEnabled"] = state ? state.directInterVpcCommunicationEnabled : undefined;
            resourceInputs["directInterVpcCommunicationGroup"] = state ? state.directInterVpcCommunicationGroup : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["failoverCxps"] = state ? state.failoverCxps : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["implicitGroupId"] = state ? state.implicitGroupId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["overlaySubnets"] = state ? state.overlaySubnets : undefined;
            resourceInputs["provisionState"] = state ? state.provisionState : undefined;
            resourceInputs["scaleGroupId"] = state ? state.scaleGroupId : undefined;
            resourceInputs["segmentId"] = state ? state.segmentId : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["tgwAttachments"] = state ? state.tgwAttachments : undefined;
            resourceInputs["tgwConnectEnabled"] = state ? state.tgwConnectEnabled : undefined;
            resourceInputs["vpcCidrs"] = state ? state.vpcCidrs : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vpcRouteTables"] = state ? state.vpcRouteTables : undefined;
            resourceInputs["vpcSubnets"] = state ? state.vpcSubnets : undefined;
        } else {
            const args = argsOrState as ConnectorAwsVpcArgs | undefined;
            if ((!args || args.awsAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'awsAccountId'");
            }
            if ((!args || args.awsRegion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'awsRegion'");
            }
            if ((!args || args.credentialId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'credentialId'");
            }
            if ((!args || args.cxp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cxp'");
            }
            if ((!args || args.segmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'segmentId'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["awsAccountId"] = args ? args.awsAccountId : undefined;
            resourceInputs["awsRegion"] = args ? args.awsRegion : undefined;
            resourceInputs["billingTagIds"] = args ? args.billingTagIds : undefined;
            resourceInputs["credentialId"] = args ? args.credentialId : undefined;
            resourceInputs["cxp"] = args ? args.cxp : undefined;
            resourceInputs["directInterVpcCommunicationEnabled"] = args ? args.directInterVpcCommunicationEnabled : undefined;
            resourceInputs["directInterVpcCommunicationGroup"] = args ? args.directInterVpcCommunicationGroup : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["failoverCxps"] = args ? args.failoverCxps : undefined;
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["overlaySubnets"] = args ? args.overlaySubnets : undefined;
            resourceInputs["scaleGroupId"] = args ? args.scaleGroupId : undefined;
            resourceInputs["segmentId"] = args ? args.segmentId : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["tgwAttachments"] = args ? args.tgwAttachments : undefined;
            resourceInputs["tgwConnectEnabled"] = args ? args.tgwConnectEnabled : undefined;
            resourceInputs["vpcCidrs"] = args ? args.vpcCidrs : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["vpcRouteTables"] = args ? args.vpcRouteTables : undefined;
            resourceInputs["vpcSubnets"] = args ? args.vpcSubnets : undefined;
            resourceInputs["implicitGroupId"] = undefined /*out*/;
            resourceInputs["provisionState"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConnectorAwsVpc.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ConnectorAwsVpc resources.
 */
export interface ConnectorAwsVpcState {
    /**
     * AWS Account ID.
     */
    awsAccountId?: pulumi.Input<string>;
    /**
     * AWS Region where VPC resides.
     */
    awsRegion?: pulumi.Input<string>;
    /**
     * Tags for billing.
     */
    billingTagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * ID of resource `credential_aws_vpc`.
     */
    credentialId?: pulumi.Input<string>;
    /**
     * The CXP where the connector should be provisioned.
     */
    cxp?: pulumi.Input<string>;
    /**
     * Enable direct inter-vpc communication. Default is set to `false`.
     */
    directInterVpcCommunicationEnabled?: pulumi.Input<boolean>;
    /**
     * Direct inter-vpc communication group.
     */
    directInterVpcCommunicationGroup?: pulumi.Input<string>;
    /**
     * Whether the connector is enabled. Default is `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * A list of additional CXPs where the connector should be provisioned for failover.
     */
    failoverCxps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The group of the connector.
     */
    group?: pulumi.Input<string>;
    /**
     * The ID of implicit group automaticaly created with the connector.
     */
    implicitGroupId?: pulumi.Input<number>;
    /**
     * The name of the connector.
     */
    name?: pulumi.Input<string>;
    /**
     * Overlay subnet.
     */
    overlaySubnets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The provisioning state of connector.
     */
    provisionState?: pulumi.Input<string>;
    /**
     * The ID of the scale group associated with the connector.
     */
    scaleGroupId?: pulumi.Input<string>;
    /**
     * The ID of segments associated with the connector. Currently, only `1` segment is allowed.
     */
    segmentId?: pulumi.Input<string>;
    /**
     * The size of the connector, one of `SMALL`, `MEDIUM`, `LARGE`, `2LARGE`, `4LARGE`, `5LARGE`, `10LARGE`, `20LARGE`.
     */
    size?: pulumi.Input<string>;
    /**
     * TGW attachment.
     */
    tgwAttachments?: pulumi.Input<pulumi.Input<inputs.ConnectorAwsVpcTgwAttachment>[]>;
    /**
     * When it's set to `true`, Alkira will use TGW Connect attachments to build connection to AWS Transit Gateway. Connect
     * Attachments suppport GRE tunnel protocol for high performance and BGP for dynamic routing. This applies to all TGW
     * attachments. This field can be set to `true` only if the VPC is in the same AWS region as the Alkira CXP it is being
     * deployed onto.
     */
    tgwConnectEnabled?: pulumi.Input<boolean>;
    /**
     * The list of CIDR attached to the target VPC for routing purpose. It could be only specified if `vpc_subnet` is not
     * specified.
     */
    vpcCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the target VPC.
     */
    vpcId?: pulumi.Input<string>;
    /**
     * VPC route table
     */
    vpcRouteTables?: pulumi.Input<pulumi.Input<inputs.ConnectorAwsVpcVpcRouteTable>[]>;
    /**
     * The list of subnets of the target VPC for routing purpose. It could only specified if `vpc_cidr` is not specified.
     */
    vpcSubnets?: pulumi.Input<pulumi.Input<inputs.ConnectorAwsVpcVpcSubnet>[]>;
}

/**
 * The set of arguments for constructing a ConnectorAwsVpc resource.
 */
export interface ConnectorAwsVpcArgs {
    /**
     * AWS Account ID.
     */
    awsAccountId: pulumi.Input<string>;
    /**
     * AWS Region where VPC resides.
     */
    awsRegion: pulumi.Input<string>;
    /**
     * Tags for billing.
     */
    billingTagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * ID of resource `credential_aws_vpc`.
     */
    credentialId: pulumi.Input<string>;
    /**
     * The CXP where the connector should be provisioned.
     */
    cxp: pulumi.Input<string>;
    /**
     * Enable direct inter-vpc communication. Default is set to `false`.
     */
    directInterVpcCommunicationEnabled?: pulumi.Input<boolean>;
    /**
     * Direct inter-vpc communication group.
     */
    directInterVpcCommunicationGroup?: pulumi.Input<string>;
    /**
     * Whether the connector is enabled. Default is `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * A list of additional CXPs where the connector should be provisioned for failover.
     */
    failoverCxps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The group of the connector.
     */
    group?: pulumi.Input<string>;
    /**
     * The name of the connector.
     */
    name?: pulumi.Input<string>;
    /**
     * Overlay subnet.
     */
    overlaySubnets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the scale group associated with the connector.
     */
    scaleGroupId?: pulumi.Input<string>;
    /**
     * The ID of segments associated with the connector. Currently, only `1` segment is allowed.
     */
    segmentId: pulumi.Input<string>;
    /**
     * The size of the connector, one of `SMALL`, `MEDIUM`, `LARGE`, `2LARGE`, `4LARGE`, `5LARGE`, `10LARGE`, `20LARGE`.
     */
    size: pulumi.Input<string>;
    /**
     * TGW attachment.
     */
    tgwAttachments?: pulumi.Input<pulumi.Input<inputs.ConnectorAwsVpcTgwAttachment>[]>;
    /**
     * When it's set to `true`, Alkira will use TGW Connect attachments to build connection to AWS Transit Gateway. Connect
     * Attachments suppport GRE tunnel protocol for high performance and BGP for dynamic routing. This applies to all TGW
     * attachments. This field can be set to `true` only if the VPC is in the same AWS region as the Alkira CXP it is being
     * deployed onto.
     */
    tgwConnectEnabled?: pulumi.Input<boolean>;
    /**
     * The list of CIDR attached to the target VPC for routing purpose. It could be only specified if `vpc_subnet` is not
     * specified.
     */
    vpcCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the target VPC.
     */
    vpcId: pulumi.Input<string>;
    /**
     * VPC route table
     */
    vpcRouteTables?: pulumi.Input<pulumi.Input<inputs.ConnectorAwsVpcVpcRouteTable>[]>;
    /**
     * The list of subnets of the target VPC for routing purpose. It could only specified if `vpc_cidr` is not specified.
     */
    vpcSubnets?: pulumi.Input<pulumi.Input<inputs.ConnectorAwsVpcVpcSubnet>[]>;
}
