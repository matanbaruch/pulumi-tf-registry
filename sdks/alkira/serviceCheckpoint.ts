// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ServiceCheckpoint extends pulumi.CustomResource {
    /**
     * Get an existing ServiceCheckpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceCheckpointState, opts?: pulumi.CustomResourceOptions): ServiceCheckpoint {
        return new ServiceCheckpoint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alkira:index/serviceCheckpoint:ServiceCheckpoint';

    /**
     * Returns true if the given object is an instance of ServiceCheckpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceCheckpoint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceCheckpoint.__pulumiType;
    }

    /**
     * Indicate if `auto_scale` should be enabled for your checkpoint firewall. `ON` and `OFF` are accepted values. `OFF` is
     * the default if field is omitted
     */
    public readonly autoScale!: pulumi.Output<string | undefined>;
    /**
     * IDs of billing tags to be associate with the service.
     */
    public readonly billingTagIds!: pulumi.Output<number[] | undefined>;
    /**
     * ID of Checkpoint Firewall credential.
     */
    public /*out*/ readonly credentialId!: pulumi.Output<string>;
    /**
     * CXP region.
     */
    public readonly cxp!: pulumi.Output<string>;
    /**
     * The description of the checkpoint service.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * An array containing properties for each Checkpoint Firewall instance that needs to be deployed. The number of instances
     * should be equal to `max_instance_count`.
     */
    public readonly instances!: pulumi.Output<outputs.ServiceCheckpointInstance[]>;
    /**
     * Checkpoint license type, either `BRING_YOUR_OWN` or `PAY_AS_YOU_GO`.
     */
    public readonly licenseType!: pulumi.Output<string>;
    public readonly managementServers!: pulumi.Output<outputs.ServiceCheckpointManagementServer[]>;
    /**
     * The maximum number of Checkpoint Firewall instances that should be deployed when auto-scale is enabled. Note that
     * auto-scale is not supported with Checkpoint at this time. `max_instance_count` must be greater than or equal to
     * `min_instance_count`. (**BETA**)
     */
    public readonly maxInstanceCount!: pulumi.Output<number>;
    /**
     * The minimum number of Checkpoint Firewall instances that should be deployed at any point in time. If auto-scale is OFF,
     * min_instance_count must equal max_instance_count.
     */
    public readonly minInstanceCount!: pulumi.Output<number | undefined>;
    /**
     * Name of the Checkpoint Firewall service.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The Checkpoint Firewall service password.
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * The IPs of the PDP Brokers.
     */
    public readonly pdpIps!: pulumi.Output<string[] | undefined>;
    /**
     * The provision state of the resource.
     */
    public /*out*/ readonly provisionState!: pulumi.Output<string>;
    /**
     * The ID of the segments associated with the service.
     */
    public readonly segmentId!: pulumi.Output<string>;
    /**
     * The segment options as used by your Checkpoint firewall. No more than one segment option will be accepted.
     */
    public readonly segmentOptions!: pulumi.Output<outputs.ServiceCheckpointSegmentOption[] | undefined>;
    /**
     * The size of the service, one of `SMALL`, `MEDIUM`, `LARGE`.
     */
    public readonly size!: pulumi.Output<string>;
    /**
     * Tunnel Protocol, default to `IPSEC`, could be either `IPSEC` or `GRE`.
     */
    public readonly tunnelProtocol!: pulumi.Output<string | undefined>;
    /**
     * The version of the Checkpoint Firewall. Please check all supported versions from Alkira Portal.
     */
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a ServiceCheckpoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceCheckpointArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceCheckpointArgs | ServiceCheckpointState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceCheckpointState | undefined;
            resourceInputs["autoScale"] = state ? state.autoScale : undefined;
            resourceInputs["billingTagIds"] = state ? state.billingTagIds : undefined;
            resourceInputs["credentialId"] = state ? state.credentialId : undefined;
            resourceInputs["cxp"] = state ? state.cxp : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["instances"] = state ? state.instances : undefined;
            resourceInputs["licenseType"] = state ? state.licenseType : undefined;
            resourceInputs["managementServers"] = state ? state.managementServers : undefined;
            resourceInputs["maxInstanceCount"] = state ? state.maxInstanceCount : undefined;
            resourceInputs["minInstanceCount"] = state ? state.minInstanceCount : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["pdpIps"] = state ? state.pdpIps : undefined;
            resourceInputs["provisionState"] = state ? state.provisionState : undefined;
            resourceInputs["segmentId"] = state ? state.segmentId : undefined;
            resourceInputs["segmentOptions"] = state ? state.segmentOptions : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["tunnelProtocol"] = state ? state.tunnelProtocol : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as ServiceCheckpointArgs | undefined;
            if ((!args || args.cxp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cxp'");
            }
            if ((!args || args.instances === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instances'");
            }
            if ((!args || args.licenseType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'licenseType'");
            }
            if ((!args || args.managementServers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managementServers'");
            }
            if ((!args || args.maxInstanceCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maxInstanceCount'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.segmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'segmentId'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["autoScale"] = args ? args.autoScale : undefined;
            resourceInputs["billingTagIds"] = args ? args.billingTagIds : undefined;
            resourceInputs["cxp"] = args ? args.cxp : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["instances"] = args ? args.instances : undefined;
            resourceInputs["licenseType"] = args ? args.licenseType : undefined;
            resourceInputs["managementServers"] = args ? args.managementServers : undefined;
            resourceInputs["maxInstanceCount"] = args ? args.maxInstanceCount : undefined;
            resourceInputs["minInstanceCount"] = args ? args.minInstanceCount : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["pdpIps"] = args ? args.pdpIps : undefined;
            resourceInputs["segmentId"] = args ? args.segmentId : undefined;
            resourceInputs["segmentOptions"] = args ? args.segmentOptions : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["tunnelProtocol"] = args ? args.tunnelProtocol : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["credentialId"] = undefined /*out*/;
            resourceInputs["provisionState"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceCheckpoint.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ServiceCheckpoint resources.
 */
export interface ServiceCheckpointState {
    /**
     * Indicate if `auto_scale` should be enabled for your checkpoint firewall. `ON` and `OFF` are accepted values. `OFF` is
     * the default if field is omitted
     */
    autoScale?: pulumi.Input<string>;
    /**
     * IDs of billing tags to be associate with the service.
     */
    billingTagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * ID of Checkpoint Firewall credential.
     */
    credentialId?: pulumi.Input<string>;
    /**
     * CXP region.
     */
    cxp?: pulumi.Input<string>;
    /**
     * The description of the checkpoint service.
     */
    description?: pulumi.Input<string>;
    /**
     * An array containing properties for each Checkpoint Firewall instance that needs to be deployed. The number of instances
     * should be equal to `max_instance_count`.
     */
    instances?: pulumi.Input<pulumi.Input<inputs.ServiceCheckpointInstance>[]>;
    /**
     * Checkpoint license type, either `BRING_YOUR_OWN` or `PAY_AS_YOU_GO`.
     */
    licenseType?: pulumi.Input<string>;
    managementServers?: pulumi.Input<pulumi.Input<inputs.ServiceCheckpointManagementServer>[]>;
    /**
     * The maximum number of Checkpoint Firewall instances that should be deployed when auto-scale is enabled. Note that
     * auto-scale is not supported with Checkpoint at this time. `max_instance_count` must be greater than or equal to
     * `min_instance_count`. (**BETA**)
     */
    maxInstanceCount?: pulumi.Input<number>;
    /**
     * The minimum number of Checkpoint Firewall instances that should be deployed at any point in time. If auto-scale is OFF,
     * min_instance_count must equal max_instance_count.
     */
    minInstanceCount?: pulumi.Input<number>;
    /**
     * Name of the Checkpoint Firewall service.
     */
    name?: pulumi.Input<string>;
    /**
     * The Checkpoint Firewall service password.
     */
    password?: pulumi.Input<string>;
    /**
     * The IPs of the PDP Brokers.
     */
    pdpIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The provision state of the resource.
     */
    provisionState?: pulumi.Input<string>;
    /**
     * The ID of the segments associated with the service.
     */
    segmentId?: pulumi.Input<string>;
    /**
     * The segment options as used by your Checkpoint firewall. No more than one segment option will be accepted.
     */
    segmentOptions?: pulumi.Input<pulumi.Input<inputs.ServiceCheckpointSegmentOption>[]>;
    /**
     * The size of the service, one of `SMALL`, `MEDIUM`, `LARGE`.
     */
    size?: pulumi.Input<string>;
    /**
     * Tunnel Protocol, default to `IPSEC`, could be either `IPSEC` or `GRE`.
     */
    tunnelProtocol?: pulumi.Input<string>;
    /**
     * The version of the Checkpoint Firewall. Please check all supported versions from Alkira Portal.
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceCheckpoint resource.
 */
export interface ServiceCheckpointArgs {
    /**
     * Indicate if `auto_scale` should be enabled for your checkpoint firewall. `ON` and `OFF` are accepted values. `OFF` is
     * the default if field is omitted
     */
    autoScale?: pulumi.Input<string>;
    /**
     * IDs of billing tags to be associate with the service.
     */
    billingTagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * CXP region.
     */
    cxp: pulumi.Input<string>;
    /**
     * The description of the checkpoint service.
     */
    description?: pulumi.Input<string>;
    /**
     * An array containing properties for each Checkpoint Firewall instance that needs to be deployed. The number of instances
     * should be equal to `max_instance_count`.
     */
    instances: pulumi.Input<pulumi.Input<inputs.ServiceCheckpointInstance>[]>;
    /**
     * Checkpoint license type, either `BRING_YOUR_OWN` or `PAY_AS_YOU_GO`.
     */
    licenseType: pulumi.Input<string>;
    managementServers: pulumi.Input<pulumi.Input<inputs.ServiceCheckpointManagementServer>[]>;
    /**
     * The maximum number of Checkpoint Firewall instances that should be deployed when auto-scale is enabled. Note that
     * auto-scale is not supported with Checkpoint at this time. `max_instance_count` must be greater than or equal to
     * `min_instance_count`. (**BETA**)
     */
    maxInstanceCount: pulumi.Input<number>;
    /**
     * The minimum number of Checkpoint Firewall instances that should be deployed at any point in time. If auto-scale is OFF,
     * min_instance_count must equal max_instance_count.
     */
    minInstanceCount?: pulumi.Input<number>;
    /**
     * Name of the Checkpoint Firewall service.
     */
    name?: pulumi.Input<string>;
    /**
     * The Checkpoint Firewall service password.
     */
    password: pulumi.Input<string>;
    /**
     * The IPs of the PDP Brokers.
     */
    pdpIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the segments associated with the service.
     */
    segmentId: pulumi.Input<string>;
    /**
     * The segment options as used by your Checkpoint firewall. No more than one segment option will be accepted.
     */
    segmentOptions?: pulumi.Input<pulumi.Input<inputs.ServiceCheckpointSegmentOption>[]>;
    /**
     * The size of the service, one of `SMALL`, `MEDIUM`, `LARGE`.
     */
    size: pulumi.Input<string>;
    /**
     * Tunnel Protocol, default to `IPSEC`, could be either `IPSEC` or `GRE`.
     */
    tunnelProtocol?: pulumi.Input<string>;
    /**
     * The version of the Checkpoint Firewall. Please check all supported versions from Alkira Portal.
     */
    version: pulumi.Input<string>;
}
