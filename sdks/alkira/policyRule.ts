// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PolicyRule extends pulumi.CustomResource {
    /**
     * Get an existing PolicyRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyRuleState, opts?: pulumi.CustomResourceOptions): PolicyRule {
        return new PolicyRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alkira:index/policyRule:PolicyRule';

    /**
     * Returns true if the given object is an instance of PolicyRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PolicyRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PolicyRule.__pulumiType;
    }

    public readonly applicationIds!: pulumi.Output<number[] | undefined>;
    /**
     * The description of the policy rule.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The dscp value can be `any` or between `0` to `63` inclusive.
     */
    public readonly dscp!: pulumi.Output<string>;
    /**
     * A single destination IP as The match condition of the rule.
     */
    public readonly dstIp!: pulumi.Output<string | undefined>;
    /**
     * Destination ports that can take values: `any` or `1` to `65535`.
     */
    public readonly dstPorts!: pulumi.Output<string[] | undefined>;
    /**
     * The ID of prefix list as destination associated with the rule.
     */
    public readonly dstPrefixListId!: pulumi.Output<number | undefined>;
    /**
     * The ID of the `internet_application` associated with the rule. When an internet applciation is selected, destination IP
     * and port will be the private IP and port of the application.
     */
    public readonly internetApplicationId!: pulumi.Output<number | undefined>;
    /**
     * The name of the policy rule.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The following protocols are supported, `icmp`, `tcp`, `udp` or `any`.
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * The provision state of the resource.
     */
    public /*out*/ readonly provisionState!: pulumi.Output<string>;
    /**
     * The action that is applied on matched traffic, either `ALLOW` or `DROP`. The default value is `ALLOW`.
     */
    public readonly ruleAction!: pulumi.Output<string | undefined>;
    /**
     * Based on the flow collector IDs, flows observed would be collected and sent to configured destination.
     */
    public readonly ruleActionFlowCollectorIds!: pulumi.Output<number[] | undefined>;
    /**
     * Based on the service IDs, traffic is routed to the specified services. For service chaining, both `service_pan` and
     * `service_zscaler`'s IDs can be added here, but ID of `service_pan` must be by followed by ID of `service_zscaler`.
     */
    public readonly ruleActionServiceIds!: pulumi.Output<number[] | undefined>;
    /**
     * Based on the service type, traffic is routed to service of the given type. For service chaining, both PAN and ZIA
     * service types can be selected but must follow order.
     */
    public readonly ruleActionServiceTypes!: pulumi.Output<string[] | undefined>;
    /**
     * A single source IP as The match condition of the rule.
     */
    public readonly srcIp!: pulumi.Output<string | undefined>;
    /**
     * Source ports that can take values: `any` or `1` to `65535`.
     */
    public readonly srcPorts!: pulumi.Output<string[] | undefined>;
    /**
     * The ID of prefix list as source associated with the rule.
     */
    public readonly srcPrefixListId!: pulumi.Output<number | undefined>;

    /**
     * Create a PolicyRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyRuleArgs | PolicyRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyRuleState | undefined;
            resourceInputs["applicationIds"] = state ? state.applicationIds : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dscp"] = state ? state.dscp : undefined;
            resourceInputs["dstIp"] = state ? state.dstIp : undefined;
            resourceInputs["dstPorts"] = state ? state.dstPorts : undefined;
            resourceInputs["dstPrefixListId"] = state ? state.dstPrefixListId : undefined;
            resourceInputs["internetApplicationId"] = state ? state.internetApplicationId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["provisionState"] = state ? state.provisionState : undefined;
            resourceInputs["ruleAction"] = state ? state.ruleAction : undefined;
            resourceInputs["ruleActionFlowCollectorIds"] = state ? state.ruleActionFlowCollectorIds : undefined;
            resourceInputs["ruleActionServiceIds"] = state ? state.ruleActionServiceIds : undefined;
            resourceInputs["ruleActionServiceTypes"] = state ? state.ruleActionServiceTypes : undefined;
            resourceInputs["srcIp"] = state ? state.srcIp : undefined;
            resourceInputs["srcPorts"] = state ? state.srcPorts : undefined;
            resourceInputs["srcPrefixListId"] = state ? state.srcPrefixListId : undefined;
        } else {
            const args = argsOrState as PolicyRuleArgs | undefined;
            if ((!args || args.dscp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dscp'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            resourceInputs["applicationIds"] = args ? args.applicationIds : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dscp"] = args ? args.dscp : undefined;
            resourceInputs["dstIp"] = args ? args.dstIp : undefined;
            resourceInputs["dstPorts"] = args ? args.dstPorts : undefined;
            resourceInputs["dstPrefixListId"] = args ? args.dstPrefixListId : undefined;
            resourceInputs["internetApplicationId"] = args ? args.internetApplicationId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["ruleAction"] = args ? args.ruleAction : undefined;
            resourceInputs["ruleActionFlowCollectorIds"] = args ? args.ruleActionFlowCollectorIds : undefined;
            resourceInputs["ruleActionServiceIds"] = args ? args.ruleActionServiceIds : undefined;
            resourceInputs["ruleActionServiceTypes"] = args ? args.ruleActionServiceTypes : undefined;
            resourceInputs["srcIp"] = args ? args.srcIp : undefined;
            resourceInputs["srcPorts"] = args ? args.srcPorts : undefined;
            resourceInputs["srcPrefixListId"] = args ? args.srcPrefixListId : undefined;
            resourceInputs["provisionState"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PolicyRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PolicyRule resources.
 */
export interface PolicyRuleState {
    applicationIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The description of the policy rule.
     */
    description?: pulumi.Input<string>;
    /**
     * The dscp value can be `any` or between `0` to `63` inclusive.
     */
    dscp?: pulumi.Input<string>;
    /**
     * A single destination IP as The match condition of the rule.
     */
    dstIp?: pulumi.Input<string>;
    /**
     * Destination ports that can take values: `any` or `1` to `65535`.
     */
    dstPorts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of prefix list as destination associated with the rule.
     */
    dstPrefixListId?: pulumi.Input<number>;
    /**
     * The ID of the `internet_application` associated with the rule. When an internet applciation is selected, destination IP
     * and port will be the private IP and port of the application.
     */
    internetApplicationId?: pulumi.Input<number>;
    /**
     * The name of the policy rule.
     */
    name?: pulumi.Input<string>;
    /**
     * The following protocols are supported, `icmp`, `tcp`, `udp` or `any`.
     */
    protocol?: pulumi.Input<string>;
    /**
     * The provision state of the resource.
     */
    provisionState?: pulumi.Input<string>;
    /**
     * The action that is applied on matched traffic, either `ALLOW` or `DROP`. The default value is `ALLOW`.
     */
    ruleAction?: pulumi.Input<string>;
    /**
     * Based on the flow collector IDs, flows observed would be collected and sent to configured destination.
     */
    ruleActionFlowCollectorIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Based on the service IDs, traffic is routed to the specified services. For service chaining, both `service_pan` and
     * `service_zscaler`'s IDs can be added here, but ID of `service_pan` must be by followed by ID of `service_zscaler`.
     */
    ruleActionServiceIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Based on the service type, traffic is routed to service of the given type. For service chaining, both PAN and ZIA
     * service types can be selected but must follow order.
     */
    ruleActionServiceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A single source IP as The match condition of the rule.
     */
    srcIp?: pulumi.Input<string>;
    /**
     * Source ports that can take values: `any` or `1` to `65535`.
     */
    srcPorts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of prefix list as source associated with the rule.
     */
    srcPrefixListId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a PolicyRule resource.
 */
export interface PolicyRuleArgs {
    applicationIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The description of the policy rule.
     */
    description?: pulumi.Input<string>;
    /**
     * The dscp value can be `any` or between `0` to `63` inclusive.
     */
    dscp: pulumi.Input<string>;
    /**
     * A single destination IP as The match condition of the rule.
     */
    dstIp?: pulumi.Input<string>;
    /**
     * Destination ports that can take values: `any` or `1` to `65535`.
     */
    dstPorts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of prefix list as destination associated with the rule.
     */
    dstPrefixListId?: pulumi.Input<number>;
    /**
     * The ID of the `internet_application` associated with the rule. When an internet applciation is selected, destination IP
     * and port will be the private IP and port of the application.
     */
    internetApplicationId?: pulumi.Input<number>;
    /**
     * The name of the policy rule.
     */
    name?: pulumi.Input<string>;
    /**
     * The following protocols are supported, `icmp`, `tcp`, `udp` or `any`.
     */
    protocol: pulumi.Input<string>;
    /**
     * The action that is applied on matched traffic, either `ALLOW` or `DROP`. The default value is `ALLOW`.
     */
    ruleAction?: pulumi.Input<string>;
    /**
     * Based on the flow collector IDs, flows observed would be collected and sent to configured destination.
     */
    ruleActionFlowCollectorIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Based on the service IDs, traffic is routed to the specified services. For service chaining, both `service_pan` and
     * `service_zscaler`'s IDs can be added here, but ID of `service_pan` must be by followed by ID of `service_zscaler`.
     */
    ruleActionServiceIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Based on the service type, traffic is routed to service of the given type. For service chaining, both PAN and ZIA
     * service types can be selected but must follow order.
     */
    ruleActionServiceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A single source IP as The match condition of the rule.
     */
    srcIp?: pulumi.Input<string>;
    /**
     * Source ports that can take values: `any` or `1` to `65535`.
     */
    srcPorts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of prefix list as source associated with the rule.
     */
    srcPrefixListId?: pulumi.Input<number>;
}
