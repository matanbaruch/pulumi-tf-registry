// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class InternetApplication extends pulumi.CustomResource {
    /**
     * Get an existing InternetApplication resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InternetApplicationState, opts?: pulumi.CustomResourceOptions): InternetApplication {
        return new InternetApplication(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alkira:index/internetApplication:InternetApplication';

    /**
     * Returns true if the given object is an instance of InternetApplication.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InternetApplication {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InternetApplication.__pulumiType;
    }

    /**
     * Bi-directional IFA AZ. The value could be either `AZ0` or `AZ1`
     */
    public readonly biDirectionalAz!: pulumi.Output<string | undefined>;
    /**
     * IDs of billing tags to be associated.
     */
    public readonly billingTagIds!: pulumi.Output<number[] | undefined>;
    /**
     * BYOIP ID.
     */
    public readonly byoipId!: pulumi.Output<number | undefined>;
    /**
     * Connector ID.
     */
    public readonly connectorId!: pulumi.Output<number>;
    /**
     * Connector Type.The value could be `AWS_VPC`, `AZURE_VNET`, `GCP_VPC`, `OCI_VCN`, `SD_WAN`, `IP_SEC`
     * `ARUBA_EDGE_CONNECT`, `EXPRESS_ROUTE`.
     */
    public readonly connectorType!: pulumi.Output<string>;
    /**
     * User provided FQDN prefix that will be published on AWS Route 53.
     */
    public readonly fqdnPrefix!: pulumi.Output<string>;
    /**
     * ID of the auto generated system group.
     */
    public /*out*/ readonly groupId!: pulumi.Output<number>;
    /**
     * Inbound connector ID.
     */
    public readonly inboundConnectorId!: pulumi.Output<string | undefined>;
    /**
     * The inbound connector type specifies how the internet application is to be opened up to the external world. By `DEFAULT`
     * the native cloud internet connector is used. In this scenario, Alkira takes care of creating this inbound internet
     * connector implicitly. If instead inbound access is via the `AKAMAI_PROLEXIC` connector, then you need to create and
     * configure that connector and use it with the internet application.
     */
    public readonly inboundConnectorType!: pulumi.Output<string | undefined>;
    /**
     * Internet Protocol to be associated with the internet application. The value could be: `IPV4`, `IPV6` or `BOTH`. In order
     * to use the option `IPV6` or `BOTH`, `enable_ipv6_to_ipv4_translation` should be enabled on the associated segment and a
     * valid IP pool range should be provided. `IPV6` and `BOTH` options are only available to Internet Applications on AWS
     * CXPs. (**BETA**)
     */
    public readonly internetProtocol!: pulumi.Output<string | undefined>;
    /**
     * The name of the internet application.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The provision state of the resource.
     */
    public /*out*/ readonly provisionState!: pulumi.Output<string>;
    /**
     * This option pertains to the `AKAMAI_PROLEXIC` `inbound_connector_type`. The public IPs are to be used to access the
     * internet application. These public IPs must belong to one of the BYOIP ranges configured for the
     * connector-akamai-prolexic.
     */
    public readonly publicIps!: pulumi.Output<string[] | undefined>;
    /**
     * The ID of segment associated with the internet application.
     */
    public readonly segmentId!: pulumi.Output<string>;
    /**
     * The size of the internet application, one of `SMALL`, `MEDIUM` and `LARGE`.
     */
    public readonly size!: pulumi.Output<string>;
    /**
     * A IP range to use for source NAT with this internet application. It could be only one defined for now. The endpoints of
     * each range are inclusive. Source NAT can only be used if `inbound_connector_type` is `DEFAULT`.
     */
    public readonly sourceNatIpPools!: pulumi.Output<outputs.InternetApplicationSourceNatIpPool[] | undefined>;
    public readonly targets!: pulumi.Output<outputs.InternetApplicationTarget[]>;

    /**
     * Create a InternetApplication resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InternetApplicationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InternetApplicationArgs | InternetApplicationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InternetApplicationState | undefined;
            resourceInputs["biDirectionalAz"] = state ? state.biDirectionalAz : undefined;
            resourceInputs["billingTagIds"] = state ? state.billingTagIds : undefined;
            resourceInputs["byoipId"] = state ? state.byoipId : undefined;
            resourceInputs["connectorId"] = state ? state.connectorId : undefined;
            resourceInputs["connectorType"] = state ? state.connectorType : undefined;
            resourceInputs["fqdnPrefix"] = state ? state.fqdnPrefix : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["inboundConnectorId"] = state ? state.inboundConnectorId : undefined;
            resourceInputs["inboundConnectorType"] = state ? state.inboundConnectorType : undefined;
            resourceInputs["internetProtocol"] = state ? state.internetProtocol : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["provisionState"] = state ? state.provisionState : undefined;
            resourceInputs["publicIps"] = state ? state.publicIps : undefined;
            resourceInputs["segmentId"] = state ? state.segmentId : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["sourceNatIpPools"] = state ? state.sourceNatIpPools : undefined;
            resourceInputs["targets"] = state ? state.targets : undefined;
        } else {
            const args = argsOrState as InternetApplicationArgs | undefined;
            if ((!args || args.connectorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectorId'");
            }
            if ((!args || args.connectorType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectorType'");
            }
            if ((!args || args.fqdnPrefix === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fqdnPrefix'");
            }
            if ((!args || args.segmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'segmentId'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            if ((!args || args.targets === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targets'");
            }
            resourceInputs["biDirectionalAz"] = args ? args.biDirectionalAz : undefined;
            resourceInputs["billingTagIds"] = args ? args.billingTagIds : undefined;
            resourceInputs["byoipId"] = args ? args.byoipId : undefined;
            resourceInputs["connectorId"] = args ? args.connectorId : undefined;
            resourceInputs["connectorType"] = args ? args.connectorType : undefined;
            resourceInputs["fqdnPrefix"] = args ? args.fqdnPrefix : undefined;
            resourceInputs["inboundConnectorId"] = args ? args.inboundConnectorId : undefined;
            resourceInputs["inboundConnectorType"] = args ? args.inboundConnectorType : undefined;
            resourceInputs["internetProtocol"] = args ? args.internetProtocol : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["publicIps"] = args ? args.publicIps : undefined;
            resourceInputs["segmentId"] = args ? args.segmentId : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["sourceNatIpPools"] = args ? args.sourceNatIpPools : undefined;
            resourceInputs["targets"] = args ? args.targets : undefined;
            resourceInputs["groupId"] = undefined /*out*/;
            resourceInputs["provisionState"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InternetApplication.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering InternetApplication resources.
 */
export interface InternetApplicationState {
    /**
     * Bi-directional IFA AZ. The value could be either `AZ0` or `AZ1`
     */
    biDirectionalAz?: pulumi.Input<string>;
    /**
     * IDs of billing tags to be associated.
     */
    billingTagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * BYOIP ID.
     */
    byoipId?: pulumi.Input<number>;
    /**
     * Connector ID.
     */
    connectorId?: pulumi.Input<number>;
    /**
     * Connector Type.The value could be `AWS_VPC`, `AZURE_VNET`, `GCP_VPC`, `OCI_VCN`, `SD_WAN`, `IP_SEC`
     * `ARUBA_EDGE_CONNECT`, `EXPRESS_ROUTE`.
     */
    connectorType?: pulumi.Input<string>;
    /**
     * User provided FQDN prefix that will be published on AWS Route 53.
     */
    fqdnPrefix?: pulumi.Input<string>;
    /**
     * ID of the auto generated system group.
     */
    groupId?: pulumi.Input<number>;
    /**
     * Inbound connector ID.
     */
    inboundConnectorId?: pulumi.Input<string>;
    /**
     * The inbound connector type specifies how the internet application is to be opened up to the external world. By `DEFAULT`
     * the native cloud internet connector is used. In this scenario, Alkira takes care of creating this inbound internet
     * connector implicitly. If instead inbound access is via the `AKAMAI_PROLEXIC` connector, then you need to create and
     * configure that connector and use it with the internet application.
     */
    inboundConnectorType?: pulumi.Input<string>;
    /**
     * Internet Protocol to be associated with the internet application. The value could be: `IPV4`, `IPV6` or `BOTH`. In order
     * to use the option `IPV6` or `BOTH`, `enable_ipv6_to_ipv4_translation` should be enabled on the associated segment and a
     * valid IP pool range should be provided. `IPV6` and `BOTH` options are only available to Internet Applications on AWS
     * CXPs. (**BETA**)
     */
    internetProtocol?: pulumi.Input<string>;
    /**
     * The name of the internet application.
     */
    name?: pulumi.Input<string>;
    /**
     * The provision state of the resource.
     */
    provisionState?: pulumi.Input<string>;
    /**
     * This option pertains to the `AKAMAI_PROLEXIC` `inbound_connector_type`. The public IPs are to be used to access the
     * internet application. These public IPs must belong to one of the BYOIP ranges configured for the
     * connector-akamai-prolexic.
     */
    publicIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of segment associated with the internet application.
     */
    segmentId?: pulumi.Input<string>;
    /**
     * The size of the internet application, one of `SMALL`, `MEDIUM` and `LARGE`.
     */
    size?: pulumi.Input<string>;
    /**
     * A IP range to use for source NAT with this internet application. It could be only one defined for now. The endpoints of
     * each range are inclusive. Source NAT can only be used if `inbound_connector_type` is `DEFAULT`.
     */
    sourceNatIpPools?: pulumi.Input<pulumi.Input<inputs.InternetApplicationSourceNatIpPool>[]>;
    targets?: pulumi.Input<pulumi.Input<inputs.InternetApplicationTarget>[]>;
}

/**
 * The set of arguments for constructing a InternetApplication resource.
 */
export interface InternetApplicationArgs {
    /**
     * Bi-directional IFA AZ. The value could be either `AZ0` or `AZ1`
     */
    biDirectionalAz?: pulumi.Input<string>;
    /**
     * IDs of billing tags to be associated.
     */
    billingTagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * BYOIP ID.
     */
    byoipId?: pulumi.Input<number>;
    /**
     * Connector ID.
     */
    connectorId: pulumi.Input<number>;
    /**
     * Connector Type.The value could be `AWS_VPC`, `AZURE_VNET`, `GCP_VPC`, `OCI_VCN`, `SD_WAN`, `IP_SEC`
     * `ARUBA_EDGE_CONNECT`, `EXPRESS_ROUTE`.
     */
    connectorType: pulumi.Input<string>;
    /**
     * User provided FQDN prefix that will be published on AWS Route 53.
     */
    fqdnPrefix: pulumi.Input<string>;
    /**
     * Inbound connector ID.
     */
    inboundConnectorId?: pulumi.Input<string>;
    /**
     * The inbound connector type specifies how the internet application is to be opened up to the external world. By `DEFAULT`
     * the native cloud internet connector is used. In this scenario, Alkira takes care of creating this inbound internet
     * connector implicitly. If instead inbound access is via the `AKAMAI_PROLEXIC` connector, then you need to create and
     * configure that connector and use it with the internet application.
     */
    inboundConnectorType?: pulumi.Input<string>;
    /**
     * Internet Protocol to be associated with the internet application. The value could be: `IPV4`, `IPV6` or `BOTH`. In order
     * to use the option `IPV6` or `BOTH`, `enable_ipv6_to_ipv4_translation` should be enabled on the associated segment and a
     * valid IP pool range should be provided. `IPV6` and `BOTH` options are only available to Internet Applications on AWS
     * CXPs. (**BETA**)
     */
    internetProtocol?: pulumi.Input<string>;
    /**
     * The name of the internet application.
     */
    name?: pulumi.Input<string>;
    /**
     * This option pertains to the `AKAMAI_PROLEXIC` `inbound_connector_type`. The public IPs are to be used to access the
     * internet application. These public IPs must belong to one of the BYOIP ranges configured for the
     * connector-akamai-prolexic.
     */
    publicIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of segment associated with the internet application.
     */
    segmentId: pulumi.Input<string>;
    /**
     * The size of the internet application, one of `SMALL`, `MEDIUM` and `LARGE`.
     */
    size: pulumi.Input<string>;
    /**
     * A IP range to use for source NAT with this internet application. It could be only one defined for now. The endpoints of
     * each range are inclusive. Source NAT can only be used if `inbound_connector_type` is `DEFAULT`.
     */
    sourceNatIpPools?: pulumi.Input<pulumi.Input<inputs.InternetApplicationSourceNatIpPool>[]>;
    targets: pulumi.Input<pulumi.Input<inputs.InternetApplicationTarget>[]>;
}
