// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CredentialGcpVpc extends pulumi.CustomResource {
    /**
     * Get an existing CredentialGcpVpc resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CredentialGcpVpcState, opts?: pulumi.CustomResourceOptions): CredentialGcpVpc {
        return new CredentialGcpVpc(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alkira:index/credentialGcpVpc:CredentialGcpVpc';

    /**
     * Returns true if the given object is an instance of CredentialGcpVpc.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CredentialGcpVpc {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CredentialGcpVpc.__pulumiType;
    }

    /**
     * GCP Authentication Provider
     */
    public readonly authProvider!: pulumi.Output<string | undefined>;
    /**
     * GCP Authentication URI
     */
    public readonly authUri!: pulumi.Output<string | undefined>;
    /**
     * GCP Client email
     */
    public readonly clientEmail!: pulumi.Output<string>;
    /**
     * GCP Client ID
     */
    public readonly clientId!: pulumi.Output<string>;
    /**
     * GCP Client X509 Cert URL
     */
    public readonly clientX509CertUrl!: pulumi.Output<string>;
    /**
     * The name of the credential
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * GCP Private Key
     */
    public readonly privateKey!: pulumi.Output<string>;
    /**
     * GCP Private Key ID
     */
    public readonly privateKeyId!: pulumi.Output<string>;
    /**
     * GCP Project ID
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Token URI
     */
    public readonly tokenUri!: pulumi.Output<string | undefined>;
    /**
     * GCP Auth Type, default value is `service_account`.
     */
    public readonly type!: pulumi.Output<string | undefined>;

    /**
     * Create a CredentialGcpVpc resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CredentialGcpVpcArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CredentialGcpVpcArgs | CredentialGcpVpcState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CredentialGcpVpcState | undefined;
            resourceInputs["authProvider"] = state ? state.authProvider : undefined;
            resourceInputs["authUri"] = state ? state.authUri : undefined;
            resourceInputs["clientEmail"] = state ? state.clientEmail : undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["clientX509CertUrl"] = state ? state.clientX509CertUrl : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["privateKeyId"] = state ? state.privateKeyId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["tokenUri"] = state ? state.tokenUri : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as CredentialGcpVpcArgs | undefined;
            if ((!args || args.clientEmail === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientEmail'");
            }
            if ((!args || args.clientId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientId'");
            }
            if ((!args || args.clientX509CertUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientX509CertUrl'");
            }
            if ((!args || args.privateKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'privateKey'");
            }
            if ((!args || args.privateKeyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'privateKeyId'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["authProvider"] = args ? args.authProvider : undefined;
            resourceInputs["authUri"] = args ? args.authUri : undefined;
            resourceInputs["clientEmail"] = args ? args.clientEmail : undefined;
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["clientX509CertUrl"] = args ? args.clientX509CertUrl : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["privateKey"] = args ? args.privateKey : undefined;
            resourceInputs["privateKeyId"] = args ? args.privateKeyId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["tokenUri"] = args ? args.tokenUri : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CredentialGcpVpc.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CredentialGcpVpc resources.
 */
export interface CredentialGcpVpcState {
    /**
     * GCP Authentication Provider
     */
    authProvider?: pulumi.Input<string>;
    /**
     * GCP Authentication URI
     */
    authUri?: pulumi.Input<string>;
    /**
     * GCP Client email
     */
    clientEmail?: pulumi.Input<string>;
    /**
     * GCP Client ID
     */
    clientId?: pulumi.Input<string>;
    /**
     * GCP Client X509 Cert URL
     */
    clientX509CertUrl?: pulumi.Input<string>;
    /**
     * The name of the credential
     */
    name?: pulumi.Input<string>;
    /**
     * GCP Private Key
     */
    privateKey?: pulumi.Input<string>;
    /**
     * GCP Private Key ID
     */
    privateKeyId?: pulumi.Input<string>;
    /**
     * GCP Project ID
     */
    projectId?: pulumi.Input<string>;
    /**
     * Token URI
     */
    tokenUri?: pulumi.Input<string>;
    /**
     * GCP Auth Type, default value is `service_account`.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CredentialGcpVpc resource.
 */
export interface CredentialGcpVpcArgs {
    /**
     * GCP Authentication Provider
     */
    authProvider?: pulumi.Input<string>;
    /**
     * GCP Authentication URI
     */
    authUri?: pulumi.Input<string>;
    /**
     * GCP Client email
     */
    clientEmail: pulumi.Input<string>;
    /**
     * GCP Client ID
     */
    clientId: pulumi.Input<string>;
    /**
     * GCP Client X509 Cert URL
     */
    clientX509CertUrl: pulumi.Input<string>;
    /**
     * The name of the credential
     */
    name?: pulumi.Input<string>;
    /**
     * GCP Private Key
     */
    privateKey: pulumi.Input<string>;
    /**
     * GCP Private Key ID
     */
    privateKeyId: pulumi.Input<string>;
    /**
     * GCP Project ID
     */
    projectId: pulumi.Input<string>;
    /**
     * Token URI
     */
    tokenUri?: pulumi.Input<string>;
    /**
     * GCP Auth Type, default value is `service_account`.
     */
    type?: pulumi.Input<string>;
}
