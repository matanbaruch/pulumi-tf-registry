// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ConnectorInternetExit extends pulumi.CustomResource {
    /**
     * Get an existing ConnectorInternetExit resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectorInternetExitState, opts?: pulumi.CustomResourceOptions): ConnectorInternetExit {
        return new ConnectorInternetExit(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alkira:index/connectorInternetExit:ConnectorInternetExit';

    /**
     * Returns true if the given object is an instance of ConnectorInternetExit.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConnectorInternetExit {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConnectorInternetExit.__pulumiType;
    }

    /**
     * IDs of billing tags to be associated with the connector.
     */
    public readonly billingTagIds!: pulumi.Output<number[] | undefined>;
    /**
     * ID of the BYOIP to be associated with the connector.
     */
    public readonly byoipId!: pulumi.Output<number | undefined>;
    /**
     * The CXP where the connector should be provisioned.
     */
    public readonly cxp!: pulumi.Output<string>;
    /**
     * The description of the connector.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The types of egress IPs to use with the connector. Current options are `ALKIRA_PUBLIC_IP` or `BYOIP`. If `BYOIP` is one
     * of the options provided `byoip_id` must also be set.
     */
    public readonly egressIps!: pulumi.Output<string[] | undefined>;
    /**
     * Is the connector enabled. Default is `true`.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The group of the connector.
     */
    public readonly group!: pulumi.Output<string | undefined>;
    /**
     * The ID of implicit group automaticaly created with the connector.
     */
    public /*out*/ readonly implicitGroupId!: pulumi.Output<number>;
    /**
     * The name of the connector.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The provision state of the connector.
     */
    public /*out*/ readonly provisionState!: pulumi.Output<string>;
    /**
     * The number of the public IPs to the connector. Default is `2`.
     */
    public readonly publicIpNumber!: pulumi.Output<number | undefined>;
    /**
     * ID of segment associated with the connector.
     */
    public readonly segmentId!: pulumi.Output<string>;
    /**
     * The type of the algorithm to be used for traffic distribution.Currently, only `HASHING` is supported.
     */
    public readonly trafficDistributionAlgorithm!: pulumi.Output<string | undefined>;
    /**
     * The attributes depends on the algorithm. For now, it's either `DEFAULT` or `SRC_IP`.
     */
    public readonly trafficDistributionAlgorithmAttribute!: pulumi.Output<string | undefined>;

    /**
     * Create a ConnectorInternetExit resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectorInternetExitArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectorInternetExitArgs | ConnectorInternetExitState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectorInternetExitState | undefined;
            resourceInputs["billingTagIds"] = state ? state.billingTagIds : undefined;
            resourceInputs["byoipId"] = state ? state.byoipId : undefined;
            resourceInputs["cxp"] = state ? state.cxp : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["egressIps"] = state ? state.egressIps : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["implicitGroupId"] = state ? state.implicitGroupId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["provisionState"] = state ? state.provisionState : undefined;
            resourceInputs["publicIpNumber"] = state ? state.publicIpNumber : undefined;
            resourceInputs["segmentId"] = state ? state.segmentId : undefined;
            resourceInputs["trafficDistributionAlgorithm"] = state ? state.trafficDistributionAlgorithm : undefined;
            resourceInputs["trafficDistributionAlgorithmAttribute"] = state ? state.trafficDistributionAlgorithmAttribute : undefined;
        } else {
            const args = argsOrState as ConnectorInternetExitArgs | undefined;
            if ((!args || args.cxp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cxp'");
            }
            if ((!args || args.segmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'segmentId'");
            }
            resourceInputs["billingTagIds"] = args ? args.billingTagIds : undefined;
            resourceInputs["byoipId"] = args ? args.byoipId : undefined;
            resourceInputs["cxp"] = args ? args.cxp : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["egressIps"] = args ? args.egressIps : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["publicIpNumber"] = args ? args.publicIpNumber : undefined;
            resourceInputs["segmentId"] = args ? args.segmentId : undefined;
            resourceInputs["trafficDistributionAlgorithm"] = args ? args.trafficDistributionAlgorithm : undefined;
            resourceInputs["trafficDistributionAlgorithmAttribute"] = args ? args.trafficDistributionAlgorithmAttribute : undefined;
            resourceInputs["implicitGroupId"] = undefined /*out*/;
            resourceInputs["provisionState"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConnectorInternetExit.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ConnectorInternetExit resources.
 */
export interface ConnectorInternetExitState {
    /**
     * IDs of billing tags to be associated with the connector.
     */
    billingTagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * ID of the BYOIP to be associated with the connector.
     */
    byoipId?: pulumi.Input<number>;
    /**
     * The CXP where the connector should be provisioned.
     */
    cxp?: pulumi.Input<string>;
    /**
     * The description of the connector.
     */
    description?: pulumi.Input<string>;
    /**
     * The types of egress IPs to use with the connector. Current options are `ALKIRA_PUBLIC_IP` or `BYOIP`. If `BYOIP` is one
     * of the options provided `byoip_id` must also be set.
     */
    egressIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Is the connector enabled. Default is `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The group of the connector.
     */
    group?: pulumi.Input<string>;
    /**
     * The ID of implicit group automaticaly created with the connector.
     */
    implicitGroupId?: pulumi.Input<number>;
    /**
     * The name of the connector.
     */
    name?: pulumi.Input<string>;
    /**
     * The provision state of the connector.
     */
    provisionState?: pulumi.Input<string>;
    /**
     * The number of the public IPs to the connector. Default is `2`.
     */
    publicIpNumber?: pulumi.Input<number>;
    /**
     * ID of segment associated with the connector.
     */
    segmentId?: pulumi.Input<string>;
    /**
     * The type of the algorithm to be used for traffic distribution.Currently, only `HASHING` is supported.
     */
    trafficDistributionAlgorithm?: pulumi.Input<string>;
    /**
     * The attributes depends on the algorithm. For now, it's either `DEFAULT` or `SRC_IP`.
     */
    trafficDistributionAlgorithmAttribute?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ConnectorInternetExit resource.
 */
export interface ConnectorInternetExitArgs {
    /**
     * IDs of billing tags to be associated with the connector.
     */
    billingTagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * ID of the BYOIP to be associated with the connector.
     */
    byoipId?: pulumi.Input<number>;
    /**
     * The CXP where the connector should be provisioned.
     */
    cxp: pulumi.Input<string>;
    /**
     * The description of the connector.
     */
    description?: pulumi.Input<string>;
    /**
     * The types of egress IPs to use with the connector. Current options are `ALKIRA_PUBLIC_IP` or `BYOIP`. If `BYOIP` is one
     * of the options provided `byoip_id` must also be set.
     */
    egressIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Is the connector enabled. Default is `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The group of the connector.
     */
    group?: pulumi.Input<string>;
    /**
     * The name of the connector.
     */
    name?: pulumi.Input<string>;
    /**
     * The number of the public IPs to the connector. Default is `2`.
     */
    publicIpNumber?: pulumi.Input<number>;
    /**
     * ID of segment associated with the connector.
     */
    segmentId: pulumi.Input<string>;
    /**
     * The type of the algorithm to be used for traffic distribution.Currently, only `HASHING` is supported.
     */
    trafficDistributionAlgorithm?: pulumi.Input<string>;
    /**
     * The attributes depends on the algorithm. For now, it's either `DEFAULT` or `SRC_IP`.
     */
    trafficDistributionAlgorithmAttribute?: pulumi.Input<string>;
}
