// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PeeringGatewayAwsTgw extends pulumi.CustomResource {
    /**
     * Get an existing PeeringGatewayAwsTgw resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PeeringGatewayAwsTgwState, opts?: pulumi.CustomResourceOptions): PeeringGatewayAwsTgw {
        return new PeeringGatewayAwsTgw(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alkira:index/peeringGatewayAwsTgw:PeeringGatewayAwsTgw';

    /**
     * Returns true if the given object is an instance of PeeringGatewayAwsTgw.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PeeringGatewayAwsTgw {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PeeringGatewayAwsTgw.__pulumiType;
    }

    /**
     * Initiator of transit gateway attachment.
     */
    public readonly asn!: pulumi.Output<number>;
    /**
     * AWS region of TGW.
     */
    public readonly awsRegion!: pulumi.Output<string>;
    /**
     * The ID of AWS TGW.
     */
    public /*out*/ readonly awsTgwId!: pulumi.Output<string>;
    /**
     * The AWS region of the peer TGW.
     */
    public readonly cxp!: pulumi.Output<string>;
    /**
     * Description of the attachment.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The name of the attachment.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The state of the resource.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;

    /**
     * Create a PeeringGatewayAwsTgw resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PeeringGatewayAwsTgwArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PeeringGatewayAwsTgwArgs | PeeringGatewayAwsTgwState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PeeringGatewayAwsTgwState | undefined;
            resourceInputs["asn"] = state ? state.asn : undefined;
            resourceInputs["awsRegion"] = state ? state.awsRegion : undefined;
            resourceInputs["awsTgwId"] = state ? state.awsTgwId : undefined;
            resourceInputs["cxp"] = state ? state.cxp : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
        } else {
            const args = argsOrState as PeeringGatewayAwsTgwArgs | undefined;
            if ((!args || args.asn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'asn'");
            }
            if ((!args || args.awsRegion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'awsRegion'");
            }
            if ((!args || args.cxp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cxp'");
            }
            resourceInputs["asn"] = args ? args.asn : undefined;
            resourceInputs["awsRegion"] = args ? args.awsRegion : undefined;
            resourceInputs["cxp"] = args ? args.cxp : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["awsTgwId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PeeringGatewayAwsTgw.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PeeringGatewayAwsTgw resources.
 */
export interface PeeringGatewayAwsTgwState {
    /**
     * Initiator of transit gateway attachment.
     */
    asn?: pulumi.Input<number>;
    /**
     * AWS region of TGW.
     */
    awsRegion?: pulumi.Input<string>;
    /**
     * The ID of AWS TGW.
     */
    awsTgwId?: pulumi.Input<string>;
    /**
     * The AWS region of the peer TGW.
     */
    cxp?: pulumi.Input<string>;
    /**
     * Description of the attachment.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the attachment.
     */
    name?: pulumi.Input<string>;
    /**
     * The state of the resource.
     */
    state?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PeeringGatewayAwsTgw resource.
 */
export interface PeeringGatewayAwsTgwArgs {
    /**
     * Initiator of transit gateway attachment.
     */
    asn: pulumi.Input<number>;
    /**
     * AWS region of TGW.
     */
    awsRegion: pulumi.Input<string>;
    /**
     * The AWS region of the peer TGW.
     */
    cxp: pulumi.Input<string>;
    /**
     * Description of the attachment.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the attachment.
     */
    name?: pulumi.Input<string>;
}
