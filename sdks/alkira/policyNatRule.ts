// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PolicyNatRule extends pulumi.CustomResource {
    /**
     * Get an existing PolicyNatRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyNatRuleState, opts?: pulumi.CustomResourceOptions): PolicyNatRule {
        return new PolicyNatRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alkira:index/policyNatRule:PolicyNatRule';

    /**
     * Returns true if the given object is an instance of PolicyNatRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PolicyNatRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PolicyNatRule.__pulumiType;
    }

    /**
     * The action of the rule.
     */
    public readonly actions!: pulumi.Output<outputs.PolicyNatRuleAction[]>;
    /**
     * The category of NAT rule. The value could be `DEFAULT` or `INTERNET_CONNECTOR`. Default value is `DEFAULT`.
     */
    public readonly category!: pulumi.Output<string | undefined>;
    /**
     * The description of the policy rule.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Enable the rule or not.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Match condition for the rule.
     */
    public readonly matches!: pulumi.Output<outputs.PolicyNatRuleMatch[]>;
    /**
     * The name of the policy rule.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * the provision state of the resource.
     */
    public /*out*/ readonly provisionState!: pulumi.Output<string>;

    /**
     * Create a PolicyNatRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyNatRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyNatRuleArgs | PolicyNatRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyNatRuleState | undefined;
            resourceInputs["actions"] = state ? state.actions : undefined;
            resourceInputs["category"] = state ? state.category : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["matches"] = state ? state.matches : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["provisionState"] = state ? state.provisionState : undefined;
        } else {
            const args = argsOrState as PolicyNatRuleArgs | undefined;
            if ((!args || args.actions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'actions'");
            }
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.matches === undefined) && !opts.urn) {
                throw new Error("Missing required property 'matches'");
            }
            resourceInputs["actions"] = args ? args.actions : undefined;
            resourceInputs["category"] = args ? args.category : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["matches"] = args ? args.matches : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["provisionState"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PolicyNatRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PolicyNatRule resources.
 */
export interface PolicyNatRuleState {
    /**
     * The action of the rule.
     */
    actions?: pulumi.Input<pulumi.Input<inputs.PolicyNatRuleAction>[]>;
    /**
     * The category of NAT rule. The value could be `DEFAULT` or `INTERNET_CONNECTOR`. Default value is `DEFAULT`.
     */
    category?: pulumi.Input<string>;
    /**
     * The description of the policy rule.
     */
    description?: pulumi.Input<string>;
    /**
     * Enable the rule or not.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Match condition for the rule.
     */
    matches?: pulumi.Input<pulumi.Input<inputs.PolicyNatRuleMatch>[]>;
    /**
     * The name of the policy rule.
     */
    name?: pulumi.Input<string>;
    /**
     * the provision state of the resource.
     */
    provisionState?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PolicyNatRule resource.
 */
export interface PolicyNatRuleArgs {
    /**
     * The action of the rule.
     */
    actions: pulumi.Input<pulumi.Input<inputs.PolicyNatRuleAction>[]>;
    /**
     * The category of NAT rule. The value could be `DEFAULT` or `INTERNET_CONNECTOR`. Default value is `DEFAULT`.
     */
    category?: pulumi.Input<string>;
    /**
     * The description of the policy rule.
     */
    description?: pulumi.Input<string>;
    /**
     * Enable the rule or not.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Match condition for the rule.
     */
    matches: pulumi.Input<pulumi.Input<inputs.PolicyNatRuleMatch>[]>;
    /**
     * The name of the policy rule.
     */
    name?: pulumi.Input<string>;
}
