// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ServiceInfoblox extends pulumi.CustomResource {
    /**
     * Get an existing ServiceInfoblox resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceInfobloxState, opts?: pulumi.CustomResourceOptions): ServiceInfoblox {
        return new ServiceInfoblox(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alkira:index/serviceInfoblox:ServiceInfoblox';

    /**
     * Returns true if the given object is an instance of ServiceInfoblox.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceInfoblox {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceInfoblox.__pulumiType;
    }

    /**
     * The ID of the `alkira.PolicyPrefixList` to be used to whitelist prefixes for the service.
     */
    public readonly allowListId!: pulumi.Output<number | undefined>;
    /**
     * Defines the AnyCast policy.
     */
    public readonly anycasts!: pulumi.Output<outputs.ServiceInfobloxAnycast[]>;
    /**
     * IDs of billing tags to be associated with the service.
     */
    public readonly billingTagIds!: pulumi.Output<number[] | undefined>;
    /**
     * The CXP where the service should be provisioned.
     */
    public readonly cxp!: pulumi.Output<string>;
    /**
     * The description of the Infoblox service.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The ID of the global cidr list to be associated with the Infoblox service.
     */
    public readonly globalCidrListId!: pulumi.Output<number>;
    /**
     * Defines the properties of the Infoblox grid master.
     */
    public readonly gridMasters!: pulumi.Output<outputs.ServiceInfobloxGridMaster[]>;
    /**
     * The properties pertaining to each individual instance of the Infoblox service.
     */
    public readonly instances!: pulumi.Output<outputs.ServiceInfobloxInstance[]>;
    /**
     * Infoblox license type, only `BRING_YOUR_OWN` is supported right now.
     */
    public readonly licenseType!: pulumi.Output<string>;
    /**
     * Name of the Infoblox service.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The provision state of the resource.
     */
    public /*out*/ readonly provisionState!: pulumi.Output<string>;
    /**
     * IDs of segments associated with the service.
     */
    public readonly segmentIds!: pulumi.Output<string[]>;
    /**
     * The name of the service group to be associated with the service. A service group represents the service in traffic
     * policies, route policies and when configuring segment resource shares.
     */
    public readonly serviceGroupName!: pulumi.Output<string>;
    /**
     * Shared Secret of the InfoBlox grid. This cannot be empty.
     */
    public readonly sharedSecret!: pulumi.Output<string>;

    /**
     * Create a ServiceInfoblox resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceInfobloxArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceInfobloxArgs | ServiceInfobloxState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceInfobloxState | undefined;
            resourceInputs["allowListId"] = state ? state.allowListId : undefined;
            resourceInputs["anycasts"] = state ? state.anycasts : undefined;
            resourceInputs["billingTagIds"] = state ? state.billingTagIds : undefined;
            resourceInputs["cxp"] = state ? state.cxp : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["globalCidrListId"] = state ? state.globalCidrListId : undefined;
            resourceInputs["gridMasters"] = state ? state.gridMasters : undefined;
            resourceInputs["instances"] = state ? state.instances : undefined;
            resourceInputs["licenseType"] = state ? state.licenseType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["provisionState"] = state ? state.provisionState : undefined;
            resourceInputs["segmentIds"] = state ? state.segmentIds : undefined;
            resourceInputs["serviceGroupName"] = state ? state.serviceGroupName : undefined;
            resourceInputs["sharedSecret"] = state ? state.sharedSecret : undefined;
        } else {
            const args = argsOrState as ServiceInfobloxArgs | undefined;
            if ((!args || args.anycasts === undefined) && !opts.urn) {
                throw new Error("Missing required property 'anycasts'");
            }
            if ((!args || args.cxp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cxp'");
            }
            if ((!args || args.globalCidrListId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'globalCidrListId'");
            }
            if ((!args || args.gridMasters === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gridMasters'");
            }
            if ((!args || args.instances === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instances'");
            }
            if ((!args || args.licenseType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'licenseType'");
            }
            if ((!args || args.segmentIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'segmentIds'");
            }
            if ((!args || args.serviceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceGroupName'");
            }
            if ((!args || args.sharedSecret === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sharedSecret'");
            }
            resourceInputs["allowListId"] = args ? args.allowListId : undefined;
            resourceInputs["anycasts"] = args ? args.anycasts : undefined;
            resourceInputs["billingTagIds"] = args ? args.billingTagIds : undefined;
            resourceInputs["cxp"] = args ? args.cxp : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["globalCidrListId"] = args ? args.globalCidrListId : undefined;
            resourceInputs["gridMasters"] = args ? args.gridMasters : undefined;
            resourceInputs["instances"] = args ? args.instances : undefined;
            resourceInputs["licenseType"] = args ? args.licenseType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["segmentIds"] = args ? args.segmentIds : undefined;
            resourceInputs["serviceGroupName"] = args ? args.serviceGroupName : undefined;
            resourceInputs["sharedSecret"] = args ? args.sharedSecret : undefined;
            resourceInputs["provisionState"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceInfoblox.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ServiceInfoblox resources.
 */
export interface ServiceInfobloxState {
    /**
     * The ID of the `alkira.PolicyPrefixList` to be used to whitelist prefixes for the service.
     */
    allowListId?: pulumi.Input<number>;
    /**
     * Defines the AnyCast policy.
     */
    anycasts?: pulumi.Input<pulumi.Input<inputs.ServiceInfobloxAnycast>[]>;
    /**
     * IDs of billing tags to be associated with the service.
     */
    billingTagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The CXP where the service should be provisioned.
     */
    cxp?: pulumi.Input<string>;
    /**
     * The description of the Infoblox service.
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the global cidr list to be associated with the Infoblox service.
     */
    globalCidrListId?: pulumi.Input<number>;
    /**
     * Defines the properties of the Infoblox grid master.
     */
    gridMasters?: pulumi.Input<pulumi.Input<inputs.ServiceInfobloxGridMaster>[]>;
    /**
     * The properties pertaining to each individual instance of the Infoblox service.
     */
    instances?: pulumi.Input<pulumi.Input<inputs.ServiceInfobloxInstance>[]>;
    /**
     * Infoblox license type, only `BRING_YOUR_OWN` is supported right now.
     */
    licenseType?: pulumi.Input<string>;
    /**
     * Name of the Infoblox service.
     */
    name?: pulumi.Input<string>;
    /**
     * The provision state of the resource.
     */
    provisionState?: pulumi.Input<string>;
    /**
     * IDs of segments associated with the service.
     */
    segmentIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the service group to be associated with the service. A service group represents the service in traffic
     * policies, route policies and when configuring segment resource shares.
     */
    serviceGroupName?: pulumi.Input<string>;
    /**
     * Shared Secret of the InfoBlox grid. This cannot be empty.
     */
    sharedSecret?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceInfoblox resource.
 */
export interface ServiceInfobloxArgs {
    /**
     * The ID of the `alkira.PolicyPrefixList` to be used to whitelist prefixes for the service.
     */
    allowListId?: pulumi.Input<number>;
    /**
     * Defines the AnyCast policy.
     */
    anycasts: pulumi.Input<pulumi.Input<inputs.ServiceInfobloxAnycast>[]>;
    /**
     * IDs of billing tags to be associated with the service.
     */
    billingTagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The CXP where the service should be provisioned.
     */
    cxp: pulumi.Input<string>;
    /**
     * The description of the Infoblox service.
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the global cidr list to be associated with the Infoblox service.
     */
    globalCidrListId: pulumi.Input<number>;
    /**
     * Defines the properties of the Infoblox grid master.
     */
    gridMasters: pulumi.Input<pulumi.Input<inputs.ServiceInfobloxGridMaster>[]>;
    /**
     * The properties pertaining to each individual instance of the Infoblox service.
     */
    instances: pulumi.Input<pulumi.Input<inputs.ServiceInfobloxInstance>[]>;
    /**
     * Infoblox license type, only `BRING_YOUR_OWN` is supported right now.
     */
    licenseType: pulumi.Input<string>;
    /**
     * Name of the Infoblox service.
     */
    name?: pulumi.Input<string>;
    /**
     * IDs of segments associated with the service.
     */
    segmentIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the service group to be associated with the service. A service group represents the service in traffic
     * policies, route policies and when configuring segment resource shares.
     */
    serviceGroupName: pulumi.Input<string>;
    /**
     * Shared Secret of the InfoBlox grid. This cannot be empty.
     */
    sharedSecret: pulumi.Input<string>;
}
