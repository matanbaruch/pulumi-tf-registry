// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ConnectorAkamaiProlexicByoipOption {
    /**
     * BYOIP prefix ID.
     */
    byoipPrefixId: pulumi.Input<number>;
    /**
     * Whether enabling route advertisement.
     */
    enableRouteAdvertisement: pulumi.Input<boolean>;
}

export interface ConnectorAkamaiProlexicTunnelConfiguration {
    /**
     * Alkira public IP.
     */
    alkiraPublicIp: pulumi.Input<string>;
    /**
     * Tunnel IPs.
     */
    tunnelIps: pulumi.Input<pulumi.Input<inputs.ConnectorAkamaiProlexicTunnelConfigurationTunnelIp>[]>;
}

export interface ConnectorAkamaiProlexicTunnelConfigurationTunnelIp {
    /**
     * The overlay IP of the GRE tunnel on the Alkira side.
     */
    akamaiOverlayTunnelIp: pulumi.Input<string>;
    /**
     * The overlay IP of the GRE tunnel on the Alkira side.
     */
    alkiraOverlayTunnelIp: pulumi.Input<string>;
    /**
     * The underlay tunnel IP on the Akamai side to be used to configure tunnels between the Alkira CXP and the Akamai Prolexic service. A RAN (Routed Access Network) is the unit of availability for the Route GRE 3.0 service.
     */
    ranTunnelIp: pulumi.Input<string>;
}

export interface ConnectorArubaEdgeArubaEdgeVrfMapping {
    /**
     * Enables or disables access to the internet when traffic arrives via this connector. The default value is `false`.
     */
    advertiseDefaultRoute?: pulumi.Input<boolean>;
    /**
     * Allow routes from the branch/premises to be advertised to the cloud. The default value is False.
     */
    advertiseOnPremRoutes?: pulumi.Input<boolean>;
    /**
     * The segment of the Aruba Edge connector.
     */
    arubaEdgeConnectSegment: pulumi.Input<string>;
    /**
     * The gateway BGP ASN.
     */
    gatewayGbpAsn: pulumi.Input<number>;
    /**
     * The segment ID associated with the Aruba Edge connector.
     */
    segmentId: pulumi.Input<string>;
}

export interface ConnectorArubaEdgeInstance {
    /**
     * The account key generated in Silver Peak orchestrator account.
     */
    accountKey: pulumi.Input<string>;
    /**
     * The account name given in Silver Peak orchestrator registration.
     */
    accountName: pulumi.Input<string>;
    /**
     * The host name given to the Aruba SD-WAN appliance that appears in Silver Peak orchestrator.
     */
    hostName: pulumi.Input<string>;
    /**
     * The ID of the endpoint.
     */
    id?: pulumi.Input<number>;
    /**
     * The instance name associated with Aruba Edge Connect instance.
     */
    name: pulumi.Input<string>;
    /**
     * The site tag that appears on the SD-WAN appliance on Silver Peak orchestrator
     */
    siteTag: pulumi.Input<string>;
}

export interface ConnectorAwsVpcTgwAttachment {
    /**
     * The availability zone of the subnet.
     */
    az: pulumi.Input<string>;
    /**
     * The Id of the subnet.
     */
    subnetId: pulumi.Input<string>;
}

export interface ConnectorAwsVpcVpcRouteTable {
    /**
     * The Id of the route table
     */
    id?: pulumi.Input<string>;
    /**
     * Routing options, one of `ADVERTISE_DEFAULT_ROUTE`, `OVERRIDE_DEFAULT_ROUTE` or `ADVERTISE_CUSTOM_PREFIX`.
     */
    options?: pulumi.Input<string>;
    /**
     * Prefix List IDs
     */
    prefixListIds?: pulumi.Input<pulumi.Input<number>[]>;
}

export interface ConnectorAwsVpcVpcSubnet {
    /**
     * The CIDR of the subnet.
     */
    cidr?: pulumi.Input<string>;
    /**
     * The Id of the subnet.
     */
    id?: pulumi.Input<string>;
}

export interface ConnectorAzureExpressrouteInstance {
    /**
     * An opaque identifier generated when storing Azure VNET credentials.
     */
    credentialId: pulumi.Input<string>;
    /**
     * ExpressRoute circuit ID from Azure. ExpresRoute Circuit should have a private peering connection provisioned, also an valid authorization key associated with it.
     */
    expressrouteCircuitId: pulumi.Input<string>;
    /**
     * An array containing the mac addresses of VXLAN gateways reachable through ExpressRoute circuit. The field is only expected if VXLAN tunnel protocol is selected, and 2 gateway MAC addresses are expected only if `redundant_router` is enabled.
     */
    gatewayMacAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    id?: pulumi.Input<number>;
    /**
     * A `/26` subnet from which loopback IPs would be used to establish underlay VXLAN GPE tunnels.
     */
    loopbackSubnet: pulumi.Input<string>;
    /**
     * User provided connector instance name.
     */
    name: pulumi.Input<string>;
    /**
     * Indicates if ExpressRoute Circuit terminates on redundant routers on customer side.
     */
    redundantRouter?: pulumi.Input<boolean>;
    /**
     * This is an optional field if the `tunnel_protocol` is `VXLAN`. If not specified Alkira allocates unique VNI from the range `[16773023, 16777215]`.
     */
    virtualNetworkInterfaces?: pulumi.Input<pulumi.Input<number>[]>;
}

export interface ConnectorAzureExpressrouteSegmentOption {
    /**
     * Allow routes from the branch/premises to be advertised to the cloud.
     */
    advertiseOnPremRoutes?: pulumi.Input<boolean>;
    /**
     * ASN on the customer premise side.
     */
    customerAsn: pulumi.Input<number>;
    /**
     * Enable or disable access to the internet when traffic arrives via this connector.
     */
    disableInternetExit?: pulumi.Input<boolean>;
    /**
     * The ID of the segment.
     */
    segmentId?: pulumi.Input<number>;
    /**
     * The name of an existing segment.
     */
    segmentName: pulumi.Input<string>;
}

export interface ConnectorAzureVnetVnetCidr {
    /**
     * VNET CIDR.
     */
    cidr: pulumi.Input<string>;
    /**
     * Prefix List IDs.
     */
    prefixListIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Routing options for the CIDR, either `ADVERTISE_DEFAULT_ROUTE` or `ADVERTISE_CUSTOM_PREFIX`.
     */
    routingOptions?: pulumi.Input<string>;
    /**
     * List of service tags provided by Azure.
     */
    serviceTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * User defined routes list (`list_udr`).
     */
    udrListIds?: pulumi.Input<pulumi.Input<number>[]>;
}

export interface ConnectorAzureVnetVnetSubnet {
    /**
     * Prefix List IDs.
     */
    prefixListIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Routing options for the subnet, either `ADVERTISE_DEFAULT_ROUTE` or `ADVERTISE_CUSTOM_PREFIX`.
     */
    routingOptions?: pulumi.Input<string>;
    /**
     * List of service tags provided by Azure.
     */
    serviceTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * VNET subnet CIDR.
     */
    subnetCidr?: pulumi.Input<string>;
    /**
     * VNET subnet ID.
     */
    subnetId: pulumi.Input<string>;
    /**
     * User defined routes list (`list_udr`).
     */
    udrListIds?: pulumi.Input<pulumi.Input<number>[]>;
}

export interface ConnectorCiscoSdwanVedge {
    /**
     * The cloud-init file for the vEdge.
     */
    cloudInitFile: pulumi.Input<string>;
    /**
     * The generated credential ID for Cisco SD-WAN.
     */
    credentialId?: pulumi.Input<string>;
    /**
     * The ID of the credential for SSH Key Pair.
     */
    credentialSshKeyPairId?: pulumi.Input<string>;
    /**
     * The hostname of the vEdge.
     */
    hostname: pulumi.Input<string>;
    /**
     * The ID of the vEdge instance.
     */
    id?: pulumi.Input<number>;
    /**
     * Cisco SD-WAN password. It could be also set by environment variable `AK_CISCO_SDWAN_PASSWORD`.
     */
    password: pulumi.Input<string>;
    /**
     * Cisco SD-WAN username. It could be also set by environment variable `AK_CISCO_SDWAN_USERNAME`.
     */
    username: pulumi.Input<string>;
}

export interface ConnectorCiscoSdwanVrfSegmentMapping {
    /**
     * Whether advertise default route of internet connector. Default value is `false`.
     */
    advertiseDefaultRoute?: pulumi.Input<boolean>;
    /**
     * Advertise On Prem Routes. Default value is `false`.
     */
    advertiseOnPremRoutes?: pulumi.Input<boolean>;
    /**
     * BGP ASN on the customer premise side. A typical value for 2 byte segment is `64523` and `4200064523` for 4 byte segment.
     */
    customerAsn: pulumi.Input<number>;
    /**
     * Segment ID.
     */
    segmentId: pulumi.Input<number>;
    /**
     * VRF ID.
     */
    vrfId: pulumi.Input<number>;
}

export interface ConnectorFortinetSdwanTargetSegment {
    /**
     * Whether advertise default route of internet connector. Default value is `false`.
     */
    advertiseDefaultRoute?: pulumi.Input<boolean>;
    /**
     * Whether advertising On Prem Routes. Default value is `false`.
     */
    advertiseOnPremRoutes?: pulumi.Input<boolean>;
    /**
     * BGP ASN on the customer premise side. A typical value for 2 byte segment is `64523` and `4200064523` for 4 byte segment.
     */
    gatewayBgpAsn?: pulumi.Input<number>;
    /**
     * Alkira Segment ID.
     */
    segmentId: pulumi.Input<number>;
    /**
     * Fortinet SD-WAN Segment name for correlating with Alkria segment.
     */
    vrfId: pulumi.Input<number>;
}

export interface ConnectorFortinetSdwanWanEdge {
    /**
     * The generated credential ID.
     */
    credentialId?: pulumi.Input<string>;
    /**
     * The hostname of the WAN Edge.
     */
    hostname: pulumi.Input<string>;
    /**
     * The ID of the WAN Edge instance.
     */
    id?: pulumi.Input<number>;
    /**
     * The type of license. Either `PAY_AS_YOU_GO` or `BRING_YOUR_OWN`.
     */
    licenseType: pulumi.Input<string>;
    /**
     * The password of the WAN Edge instance.
     */
    password: pulumi.Input<string>;
    /**
     * Serial Number of the WAN Edge. It's only required when `license_type` is `BRING_YOUR_OWN`. It could be set by ENV variable `AK_FORTINET_SDWAN_SERIAL_NUMBER`.
     */
    serialNumber?: pulumi.Input<string>;
    /**
     * The username of the WAN Edge instance.The default value is `admin`.
     */
    username?: pulumi.Input<string>;
    /**
     * The version of Fortinet WAN Edge. Please check Alkira Portal for all supported versions.
     */
    version: pulumi.Input<string>;
}

export interface ConnectorGcpVpcGcpRouting {
    /**
     * Specifies the source of the routes that need to be imported. The value could be `ADVERTISE_DEFAULT_ROUTE` and `ADVERTISE_CUSTOM_PREFIX`.
     */
    customPrefix: pulumi.Input<string>;
    /**
     * IDs of prefix lists defined on the network.
     */
    prefixListIds: pulumi.Input<pulumi.Input<number>[]>;
}

export interface ConnectorGcpVpcVpcSubnet {
    /**
     * The CIDR of the subnet.
     */
    cidr?: pulumi.Input<string>;
    /**
     * An identifier for the subnetwork resource with format `projects/{{project}}/regions/{{region}}/subnetworks/{{name}}`.
     */
    id?: pulumi.Input<string>;
}

export interface ConnectorIpsecAdvGateway {
    /**
     * The IP address of the customer gateway. This should be `0.0.0.0` to indicate that this is a dynamic gateway.
     */
    customerGatewayIp: pulumi.Input<string>;
    /**
     * The value could be `ACTIVE` or`STANDBY`. A gateway in `STANDBY` mode will not be used for traffic unless all other gateways for the connector are down. There can only be one gateway in `STANDBY` mode per connector and there must be at least one gateway that isn't in `STANDBY` mode per connector.
     */
    haMode?: pulumi.Input<string>;
    /**
     * The ID of the gateway.
     */
    id?: pulumi.Input<number>;
    /**
     * The name of the endpoint.
     */
    name: pulumi.Input<string>;
    /**
     * Tunnel of the gateway. The number of the tunnels should be equal to `tunnel_per_gateway`.
     */
    tunnels: pulumi.Input<pulumi.Input<inputs.ConnectorIpsecAdvGatewayTunnel>[]>;
}

export interface ConnectorIpsecAdvGatewayTunnel {
    /**
     * Advanced options for the IPSec gateway.
     */
    advancedOptions?: pulumi.Input<inputs.ConnectorIpsecAdvGatewayTunnelAdvancedOptions>;
    /**
     * The overlay IP address of the customer end of the tunnel.
     */
    customerEndOverlayIp?: pulumi.Input<string>;
    /**
     * The overlay IP reservation ID of the customer end of the tunnel.
     */
    customerEndOverlayIpReservationId: pulumi.Input<string>;
    /**
     * The overlay IP reservation ID of the CXP end of the tunnel.
     */
    cxpEndOverlayIpReservationId: pulumi.Input<string>;
    /**
     * The public IP reservation ID of the CXP end of the tunnel.
     */
    cxpEndPublicIpReservationId: pulumi.Input<string>;
    /**
     * The ID of the tunnel.
     */
    id?: pulumi.Input<string>;
    /**
     * The number of the tunnel.
     */
    number?: pulumi.Input<number>;
    /**
     * The pre-shared key of the tunnel.
     */
    presharedKey: pulumi.Input<string>;
    /**
     * The ID of the IPSec Tunnel Profile (`connector_ipsec_tunnel_profile`). `advanced_options` block is required when this is used.
     */
    profileId?: pulumi.Input<number>;
}

export interface ConnectorIpsecAdvGatewayTunnelAdvancedOptions {
    /**
     * IKE version, either `IKEv1` or `IKEv2`
     */
    ikeVersion: pulumi.Input<string>;
    /**
     * When true CXP will initiate the IKE connection and if false then the customer gateway should initiate IKE. When `gateway_ip_type` is `DYNAMIC`,initiator must be `true`.
     */
    initiator: pulumi.Input<boolean>;
    /**
     * Remote-ID type - IKE identity to use for authentication round, one of `FQDN`, `USER_FQDN`, `KEYID`, `IP_ADDR`.
     */
    remoteAuthType: pulumi.Input<string>;
    /**
     * Remote-ID value.
     */
    remoteAuthValue: pulumi.Input<string>;
}

export interface ConnectorIpsecAdvPolicyOption {
    /**
     * CXP Prefix List IDs.
     */
    cxpPrefixListIds: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * On-Prem Prefix List IDs.
     */
    onPremPrefixListIds: pulumi.Input<pulumi.Input<number>[]>;
}

export interface ConnectorIpsecAdvRoutingOption {
    /**
     * The method to determine the availability of the routes. The value could be `IKE_STATUS` or `IPSEC_INTERFACE_PING`. Default value is `IPSEC_INTERFACE_PING`.
     */
    availability?: pulumi.Input<string>;
    /**
     * BGP MD5 auth key for Alkira to authenticate Alkira CXP (On Premise Gateway).
     */
    bgpAuthKey?: pulumi.Input<string>;
    /**
     * The customer gateway ASN to use for dynamic route propagation.
     */
    customerGatewayAsn?: pulumi.Input<string>;
    /**
     * The ID of prefix list to use for static route propagation.
     */
    prefixListId?: pulumi.Input<number>;
    /**
     * Routing type, one of `STATIC`, `DYNAMIC`, or `BOTH`.
     */
    type: pulumi.Input<string>;
}

export interface ConnectorIpsecEndpoint {
    /**
     * Advanced options for IPSec endpoint.
     */
    advancedOptions?: pulumi.Input<pulumi.Input<inputs.ConnectorIpsecEndpointAdvancedOption>[]>;
    /**
     * A list of IDs of billing tag associated with the endpoint.
     */
    billingTagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The IP address of the customer gateway.
     */
    customerGatewayIp: pulumi.Input<string>;
    /**
     * Disable this if all tunnels will not be configured or enabled on the on-premise device. If it's set to `false`, connector health will be shown as `UP` if at least one of the tunnels is `UP`. If enabled, all tunnels need to be `UP` for the connectorhealth to be shown as `UP`.
     */
    enableTunnelRedundancy?: pulumi.Input<boolean>;
    /**
     * The value could be `ACTIVE` or `STANDBY`. A endpoint in `STANDBY` mode will not be used for traffic unless all other endpoints for the connector are down. There can only be one endpoint in `STANDBY` mode per connector and there must be at least one endpoint that isn't in `STANDBY` mode per connector.
     */
    haMode?: pulumi.Input<string>;
    /**
     * The ID of the endpoint.
     */
    id?: pulumi.Input<number>;
    /**
     * The name of the endpoint.
     */
    name: pulumi.Input<string>;
    /**
     * An array of preshared keys, one per tunnel. The value needs to be provided explictly unlike portal.
     */
    presharedKeys: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ConnectorIpsecEndpointAdvancedOption {
    /**
     * Diffie Hellman groups to use for IPsec SA. Value could `MODP1024`, `MODP2048`, `MODP3072`, `MODP4096`, `MODP6144`, `MODP8192`, `ECP256`, `ECP384`, `ECP521`, `CURVE25519` and `NONE`.
     */
    espDhGroupNumbers: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Encryption algorithms to use for IPsec SA. Value could be `AES256CBC`, `AES192CBC`, `AES128CBC`, `AES256GCM16` `3DESCBC`, or `NULL`.
     */
    espEncryptionAlgorithms: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Integrity algorithms to use for IPsec SA. Value could `SHA1`, `SHA256`, `SHA384`, `SHA512` or `MD5`.
     */
    espIntegrityAlgorithms: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Diffie Hellman groups to use for IKE SA, one of `MODP1024`, `MODP2048`, `MODP3072`, `MODP4096`, `MODP6144`, `MODP8192`, `ECP256`, `ECP384`, `ECP521`, `CURVE25519`.
     */
    ikeDhGroupNumbers: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Encryption algorithms to use for IKE SA, one of `AES256CBC`, `AES192CBC`, `AES128CBC` and `3DESCBC`.
     */
    ikeEncryptionAlgorithms: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Integrity algorithms to use for IKE SA, one of `SHA1`, `SHA256`, `SHA384`, `SHA512`.
     */
    ikeIntegrityAlgorithms: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * IKE version, either `IKEv1` or `IKEv2`
     */
    ikeVersion: pulumi.Input<string>;
    /**
     * When true CXP will initiate the IKE connection and if false then the customer gateway should initiate IKE. When `gateway_ip_type` is `DYNAMIC`, initiator must be `true`.
     */
    initiator: pulumi.Input<boolean>;
    /**
     * Remote-ID type - IKE identity to use for authentication round, one of `FQDN`, `USER_FQDN`, `KEYID`, `IP_ADDR`.
     */
    remoteAuthType: pulumi.Input<string>;
    /**
     * Remote-ID value.
     */
    remoteAuthValue: pulumi.Input<string>;
}

export interface ConnectorIpsecPolicyOption {
    /**
     * CXP Prefix List IDs.
     */
    cxpPrefixListIds: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * On Prem Prefix List IDs.
     */
    onPremPrefixListIds: pulumi.Input<pulumi.Input<number>[]>;
}

export interface ConnectorIpsecRoutingOption {
    /**
     * The method to determine the availability of the routes. The value could be `IKE_STATUS` or `IPSEC_INTERFACE_PING`. Default value is `IPSEC_INTERFACE_PING`.
     */
    availability?: pulumi.Input<string>;
    /**
     * BGP MD5 auth key for Alkira to authenticate Alkira CXP (On Premise Gateway).
     */
    bgpAuthKey?: pulumi.Input<string>;
    /**
     * The customer gateway ASN to use for dynamic route propagation.
     */
    customerGatewayAsn?: pulumi.Input<string>;
    /**
     * The ID of prefix list to use for static route propagation.
     */
    prefixListId?: pulumi.Input<number>;
    /**
     * Routing type, one of `STATIC`, `DYNAMIC`, or `BOTH`.
     */
    type: pulumi.Input<string>;
}

export interface ConnectorIpsecSegmentOption {
    /**
     * Enable or disable access to the internet when traffic arrives via this connector. Default is `false`.
     */
    advertiseDefaultRoute?: pulumi.Input<boolean>;
    /**
     * Additional options for each segment associated with the connector. Default is `false`.
     */
    advertiseOnPremRoutes?: pulumi.Input<boolean>;
    /**
     * Segment Name.
     */
    name: pulumi.Input<string>;
}

export interface ConnectorOciVcnVcnRouteTable {
    /**
     * The ID of the route table.
     */
    id?: pulumi.Input<string>;
    /**
     * Routing options, one of `ADVERTISE_DEFAULT_ROUTE`, `OVERRIDE_DEFAULT_ROUTE` and `ADVERTISE_CUSTOM_PREFIX`.
     */
    options?: pulumi.Input<string>;
    /**
     * Prefix List IDs.
     */
    prefixListIds?: pulumi.Input<pulumi.Input<number>[]>;
}

export interface ConnectorOciVcnVcnSubnet {
    /**
     * The CIDR of the subnet.
     */
    cidr?: pulumi.Input<string>;
    /**
     * The Id of the subnet.
     */
    id?: pulumi.Input<string>;
}

export interface ConnectorRemoteAccessAuthorization {
    /**
     * Billing tag (`alkira.BillingTag`).
     */
    billingTagId?: pulumi.Input<number>;
    /**
     * The ID of the prefix list (`alkira.PolicyPrefixList`).
     */
    prefixListId?: pulumi.Input<number>;
    /**
     * The segment (`alkira.Segment`) to be mapped.
     */
    segmentId: pulumi.Input<number>;
    /**
     * Enable split tunneling to send traffic destined to only IP addresses in the prefix list over the VPN tunnel. Default is `false`
     */
    splitTunneling?: pulumi.Input<boolean>;
    /**
     * The client subnet.
     */
    subnet: pulumi.Input<string>;
    /**
     * User group (`alkira.GroupUser`) name.
     */
    userGroupName: pulumi.Input<string>;
}

export interface ConnectorRemoteAccessLdapSetting {
    /**
     * The domain.
     */
    bindUserDomain: pulumi.Input<string>;
    /**
     * Destination dddress.
     */
    destinationAddress: pulumi.Input<string>;
    /**
     * The LDAP type.
     */
    ldapType: pulumi.Input<string>;
    /**
     * The management segment.
     */
    managementSegmentId: pulumi.Input<number>;
    /**
     * Base DN to query and validate remote users that will connect to the connector.
     */
    searchScopeDomain: pulumi.Input<string>;
}

export interface ConnectorVersaSdwanVersaVosDevice {
    /**
     * The hostname of the VOS Device.
     */
    hostname: pulumi.Input<string>;
    /**
     * The ID of the VOS device.
     */
    id?: pulumi.Input<number>;
    /**
     * Local device serial number.
     */
    localDeviceSerialNumber: pulumi.Input<string>;
    /**
     * Versa version.
     */
    version: pulumi.Input<string>;
}

export interface ConnectorVersaSdwanVrfSegmentMapping {
    /**
     * Whether advertise default route of internet connector. Default value is `false`.
     */
    advertiseDefaultRoute?: pulumi.Input<boolean>;
    /**
     * Advertise On Prem Routes. Default value is `false`.
     */
    advertiseOnPremRoutes?: pulumi.Input<boolean>;
    /**
     * Segment ID.
     */
    segmentId: pulumi.Input<number>;
    /**
     * BGP ASN on the Versa. A typical value for 2 byte segment is `64523` and `4200064523` for 4 byte segment.
     */
    versaBgpAsn: pulumi.Input<number>;
    /**
     * VRF Name.
     */
    vrfName: pulumi.Input<string>;
}

export interface ConnectorVmwareSdwanTargetSegment {
    /**
     * Whether advertise default route of internet connector. Default value is `false`.
     */
    advertiseDefaultRoute?: pulumi.Input<boolean>;
    /**
     * Whether advertising On Prem Routes. Default value is `false`.
     */
    advertiseOnPremRoutes?: pulumi.Input<boolean>;
    /**
     * BGP ASN on the customer premise side. A typical value for 2 byte segment is `64523` and `4200064523` for 4 byte segment.
     */
    gatewayBgpAsn?: pulumi.Input<number>;
    /**
     * Alkira Segment ID.
     */
    segmentId: pulumi.Input<number>;
    /**
     * VMWare SD-WAN Segment name for correlating with Alkria segment.
     */
    vmwareSdwanSegmentName: pulumi.Input<string>;
}

export interface ConnectorVmwareSdwanVirtualEdge {
    /**
     * Activation code generated in VMWare orchestrator account.
     */
    activationCode: pulumi.Input<string>;
    /**
     * The generated credential ID.
     */
    credentialId?: pulumi.Input<string>;
    /**
     * The hostname of the virtual edge.
     */
    hostname: pulumi.Input<string>;
    /**
     * The ID of the virtual edge.
     */
    id?: pulumi.Input<number>;
}

export interface InternetApplicationSourceNatIpPool {
    /**
     * The end IP of the range.
     */
    endIp: pulumi.Input<string>;
    /**
     * The start IP of the range.
     */
    startIp: pulumi.Input<string>;
}

export interface InternetApplicationTarget {
    /**
     * list of ports or port ranges. Values can be mixed i.e. `["20", "100-200"]`. An array with only the value `-1` means any port.
     */
    portRanges: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of the target, one of `IP` or `ILB_NAME`.
     */
    type: pulumi.Input<string>;
    /**
     * IFA ILB name or private IP.
     */
    value: pulumi.Input<string>;
}

export interface ListUdrRoute {
    /**
     * Description for the route.
     */
    description?: pulumi.Input<string>;
    /**
     * The prefix of the route. This prefix must be in the CIDR format (`x.x.x.x/mask`). The mask can be between `8-32`.
     */
    prefix: pulumi.Input<string>;
}

export interface PolicyNatRuleAction {
    /**
     * Whether the destination address should be advertised to connector.
     */
    dstAddrTranslationAdvertiseToConnector?: pulumi.Input<boolean>;
    /**
     * The ID of policy FQDN list.
     */
    dstAddrTranslationListPolicyFqdnId?: pulumi.Input<number>;
    /**
     * The port list to translate the destination prefixes to.
     */
    dstAddrTranslationPorts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of prefix list IDs.
     */
    dstAddrTranslationPrefixListIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The list of prefixes.
     */
    dstAddrTranslationPrefixes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The translation type are: `STATIC_IP`, `STATIC_IP_AND_PORT` , `STATIC_PORT` and `NONE`. Default value is `NONE`.
     */
    dstAddrTranslationType?: pulumi.Input<string>;
    /**
     * The egress type to use with the match. Options are are `ALKIRA_PUBLIC_IP` or `BYOIP`.
     */
    egressType?: pulumi.Input<string>;
    /**
     * Whether the translation match and invalidate. Default is `true`.
     */
    srcAddrTranslationMatchAndInvalidate?: pulumi.Input<boolean>;
    /**
     * The list of prefix list IDs.
     */
    srcAddrTranslationPrefixListIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The list of prefixes.
     */
    srcAddrTranslationPrefixes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to invalidate the track prefixes.
     */
    srcAddrTranslationRoutingTrackInvalidatePrefixes?: pulumi.Input<boolean>;
    /**
     * The list of prefix list IDs.
     */
    srcAddrTranslationRoutingTrackPrefixListIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The list of prefixes to track.
     */
    srcAddrTranslationRoutingTrackPrefixes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The translation type are: `STATIC_IP`, `DYNAMIC_IP_AND_PORT` and `NONE`. Default value is `NONE`.
     */
    srcAddrTranslationType?: pulumi.Input<string>;
}

export interface PolicyNatRuleMatch {
    /**
     * The list of ports for destination.
     */
    dstPorts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of prefix IDs as destination.
     */
    dstPrefixListIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The list of prefixes for destination.
     */
    dstPrefixes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The following protocols are supported, `icmp`, `tcp`, `udp` or `any`.
     */
    protocol: pulumi.Input<string>;
    /**
     * The list of ports for source.
     */
    srcPorts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of prefix IDs as source.
     */
    srcPrefixListIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The list of prefixes for source.
     */
    srcPrefixes?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PolicyPrefixListPrefixRange {
    /**
     * Integer less than `32` but greater than mask `m` in prefix and less than `le`.
     */
    ge?: pulumi.Input<number>;
    /**
     * Integer less than `32` but greater than mask `m` in prefix
     */
    le?: pulumi.Input<number>;
    /**
     * A valid CIDR as prefix in `x.x.x.x/m` format.
     */
    prefix: pulumi.Input<string>;
}

export interface PolicyRoutingRule {
    /**
     * Action to be set on matched routes. Value could be `ALLOW`, `DENY` and `ALLOW_W_SET`.
     */
    action: pulumi.Input<string>;
    /**
     * This acts as match all if enabledand should be used as exlusive match option.
     */
    matchAll?: pulumi.Input<boolean>;
    /**
     * IDs of a AS Path Lists.
     */
    matchAsPathListIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * IDs of Community Lists.
     */
    matchCommunityListIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * List of CXPs.
     */
    matchCxps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * IDs of Extended Community Lists.
     */
    matchExtendedCommunityListIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * IDs of groups.
     */
    matchGroupIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * IDs of Prefix Lists.
     */
    matchPrefixListIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * IDs of segment resources.
     */
    matchSegmentResourceIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The name of the rule.
     */
    name: pulumi.Input<string>;
    /**
     * This allows to redistribute routes with lower preference to the restrictedCxps. Hence, this option can only be used with `RESTRICTED_CXPS` distribution_type. Also only 1 CXP is allowed in restricted_cxps, when this is set to `true`.
     */
    routesDistributionAsSecondary?: pulumi.Input<boolean>;
    /**
     * List of cxps to which routes distribution is restricted. Should be used only with distributionType `RESTRICTED_CXPS`.
     */
    routesDistributionRestrictedCxps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Redistribute routes that match with this rule match codition to. The value could be `ALL`, `LOCAL_ONLY` and `RESTRICTED_CXPS`.
     */
    routesDistributionType?: pulumi.Input<string>;
    /**
     * System assigned number for each rule starting with `1000`. It defines the order of the rules.
     */
    sequenceNo?: pulumi.Input<number>;
    /**
     * Allows to prepend one or more AS numbers to the current AS PATH. Each AS number can be a value from 0 through 65535. Example - 100 100 100.
     */
    setAsPathPrepend?: pulumi.Input<string>;
    /**
     * Allows to add one or more community attributes to the existing communities on the route. Community attribute is specified in this format: `as-number:community-value`. as-number and community-value can be a value from `0` through `65535`. Example: `65512:20 65512:21`.
     */
    setCommunity?: pulumi.Input<string>;
    /**
     * Allows to add one or more extended community attributes to the existing extended communities on the route. Extended community attribute is specified in this format: `type:administrator:assigned-number`. Currently only type origin(soo) is supported.
     */
    setExtendedCommunity?: pulumi.Input<string>;
}

export interface PolicyRuleListRule {
    priority: pulumi.Input<number>;
    ruleId: pulumi.Input<number>;
}

export interface SegmentResourceGroupPrefix {
    /**
     * The connector group ID associated with the segment resource.
     */
    groupId?: pulumi.Input<number>;
    /**
     * The Prefix List ID associated with the segment resource.
     */
    prefixListId?: pulumi.Input<number>;
}

export interface ServiceCheckpointInstance {
    /**
     * ID of Checkpoint Firewall Instance credential.
     */
    credentialId?: pulumi.Input<string>;
    /**
     * The ID of the checkpoint instance.
     */
    id?: pulumi.Input<number>;
    /**
     * The name of the checkpoint instance.
     */
    name: pulumi.Input<string>;
    /**
     * The checkpoint instance sic keys.
     */
    sicKey: pulumi.Input<string>;
}

export interface ServiceCheckpointManagementServer {
    /**
     * The configuration_mode specifies whether the firewall is to be automatically configured by Alkira or not. To automatically configure the firewall Alkira needs access to the CheckPoint management server. If you choose to use manual configuration Alkira will provide the customer information about the Checkpoint instances so that you can manually configure the firewall.
     */
    configurationMode: pulumi.Input<string>;
    /**
     * ID of Checkpoint Firewall Managment server credential.
     */
    credentialId?: pulumi.Input<string>;
    /**
     * Management server domain.
     */
    domain?: pulumi.Input<string>;
    /**
     * The ID of the global cidr list to be associated with the management server.
     */
    globalCidrListId: pulumi.Input<number>;
    /**
     * Management server IPs.
     */
    ips: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The password of the management server.
     */
    password?: pulumi.Input<string>;
    /**
     * Specifies whether the management server is publicly reachable or not. If the reachability is private then you need to provide the segment to be used to access the management server. Default value is `PUBLIC`.
     */
    reachability?: pulumi.Input<string>;
    /**
     * The IDs of the segment to be used to access the management server.
     */
    segmentId?: pulumi.Input<string>;
    /**
     * The type of the management server. either `SMS` or `MDS`.
     */
    type: pulumi.Input<string>;
    /**
     * The username of the management server.
     */
    username?: pulumi.Input<string>;
}

export interface ServiceCheckpointSegmentOption {
    /**
     * The list of Groups associated with the zone.
     */
    groups: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the segment.
     */
    segmentId: pulumi.Input<string>;
    /**
     * The name of the associated zone. Default value is `DEFAULT`.
     */
    zoneName?: pulumi.Input<string>;
}

export interface ServiceCiscoFtdvFirepowerManagementCenter {
    /**
     * An opaque identifier generated when storing firepower_management_center credentials.
     */
    credentialId?: pulumi.Input<string>;
    /**
     * List of IP addresses and CIDRs to access the Firepower Management Center.
     */
    ipAllowLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Firepower Management Center (FMC) password.
     */
    password: pulumi.Input<string>;
    /**
     * ID of the segment accociated with the Firepower Management Center.
     */
    segmentId: pulumi.Input<string>;
    /**
     * IP address of the Firepower Management Center.
     */
    serverIp: pulumi.Input<string>;
    /**
     * Firepower Management Center (FMC) username.
     */
    username: pulumi.Input<string>;
}

export interface ServiceCiscoFtdvInstance {
    /**
     * Firepower Firewall Admin Password.
     */
    adminPassword: pulumi.Input<string>;
    /**
     * An opaque identifier generated when storing Cisco Firepower Firewall instance credentials.
     */
    credentialId?: pulumi.Input<string>;
    /**
     * FMC Registration Key.
     */
    fmcRegistrationKey: pulumi.Input<string>;
    /**
     * FTDv NAT ID.
     */
    ftdvNatId?: pulumi.Input<string>;
    /**
     * Hostname of the Firepower Firewall.
     */
    hostname: pulumi.Input<string>;
    /**
     * ID of the Cisco Firepower Firewall instance.
     */
    id?: pulumi.Input<number>;
    /**
     * Cisco Firepower Firewall license type, either `BRING_YOUR_OWN` or `PAY_AS_YOU_GO`.
     */
    licenseType: pulumi.Input<string>;
    /**
     * Cisco Firepower Firewall version. Please check Alkira Portal for all supported versions.
     */
    version: pulumi.Input<string>;
}

export interface ServiceCiscoFtdvSegmentOption {
    /**
     * The list of Groups associated with the zone.
     */
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of the segment.
     */
    segmentId: pulumi.Input<string>;
    /**
     * The name of the associated zone.
     */
    zoneName: pulumi.Input<string>;
}

export interface ServiceFortinetInstance {
    /**
     * The ID of the Fortinet Firewall instance credentials. Required only when `license_type` is `BRING_YOUR_OWN`.
     */
    credentialId?: pulumi.Input<string>;
    /**
     * The ID of the Fortinet Firewall instance.
     */
    id?: pulumi.Input<number>;
    licenseKey?: pulumi.Input<string>;
    /**
     * Fortinet license key file path. The path to the desired license key. 
     *
     *
     * There are two options for providing the required license key for Fortinet instance credentials. You can either input the value directly into the `license_key` field or provide the file path for the license key file using the `license_key_file_path`. Either `license_key` or `license_key_file_path` must have an input. If both are provided, the Alkira provider will treat the `license_key` field with precedence.
     */
    licenseKeyFilePath?: pulumi.Input<string>;
    /**
     * The name of the Fortinet Firewall instance.
     */
    name?: pulumi.Input<string>;
    /**
     * The serial_number of the Fortinet Firewall instance. Required only when `license_type` is `BRING_YOUR_OWN.
     */
    serialNumber?: pulumi.Input<string>;
}

export interface ServiceFortinetSegmentOption {
    /**
     * The list of groups associated with the zone.
     */
    groups: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the segment.
     */
    segmentId: pulumi.Input<string>;
    /**
     * The name of the associated zone.
     */
    zoneName: pulumi.Input<string>;
}

export interface ServiceInfobloxAnycast {
    /**
     * The `backup_cxps` to be used when the current Infoblox service is not available. It also needs to have a configured Infoblox service in order to take advantage of this feature. It is NOT required that the `backup_cxps` should have a configured Infoblox service before it can be designated as a backup.
     */
    backupCxps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Defines if AnyCast should be enabled. Default value is `false`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The IPs to be used when AnyCast is enabled. When AnyCast is enabled this list cannot be empty. The IPs used for AnyCast MUST NOT overlap the CIDR of `alkira.Segment` resource associated with the service.
     */
    ips?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ServiceInfobloxGridMaster {
    /**
     * The credential ID of the Grid Master.
     */
    credentialId?: pulumi.Input<string>;
    /**
     * External indicates if a new grid master should be created or if an existing grid master should be used. Default value is `false`.
     */
    external?: pulumi.Input<boolean>;
    /**
     * The IP address of the grid master.
     */
    ip?: pulumi.Input<string>;
    /**
     * Name of the grid master.
     */
    name: pulumi.Input<string>;
    /**
     * The Grid Master password.
     */
    password: pulumi.Input<string>;
    /**
     * The Grid Master user name.
     */
    username: pulumi.Input<string>;
}

export interface ServiceInfobloxInstance {
    /**
     * This knob controls whether AnyCast is to be enabled for this instance or not. AnyCast can only be enabled on an instance if it is also enabled on the service. The default value is `false`.
     */
    anycastEnabled?: pulumi.Input<boolean>;
    /**
     * The credential ID of the Infoblox instance.
     */
    credentialId?: pulumi.Input<string>;
    /**
     * The host name of the instance. The host name MUST always have a suffix `.localdomain`.
     */
    hostname: pulumi.Input<string>;
    /**
     * The ID of the Infoblox instance.
     */
    id?: pulumi.Input<number>;
    /**
     * The model of the Infoblox instance.
     */
    model: pulumi.Input<string>;
    /**
     * The password associated with the infoblox instance.
     */
    password: pulumi.Input<string>;
    /**
     * The type of the Infoblox instance that is to be provisioned. The value could be `MASTER`, `MASTER_CANDIDATE` and `MEMBER`.
     */
    type: pulumi.Input<string>;
    /**
     * The version of the Infoblox to be used. Please check Alkira Portal for all supported versions
     */
    version: pulumi.Input<string>;
}

export interface ServicePanGlobalProtectSegmentOption {
    /**
     * Prefix for the global protect portal FQDN, this would be prepended to customer specific alkira domain For Example: if prefix is abc and tenant name is example then the FQDN would be abc.example.gpportal.alkira.com
     */
    portalFqdnPrefix: pulumi.Input<string>;
    /**
     * Firewall security zone is created using the zone name for remote user sessions.
     */
    remoteUserZoneName: pulumi.Input<string>;
    /**
     * The name of the segment to which the global protect options should apply
     */
    segmentId: pulumi.Input<string>;
    /**
     * The name of the service group. A group with the same name will be created.
     */
    serviceGroupName: pulumi.Input<string>;
}

export interface ServicePanInstance {
    /**
     * PAN instance auth code. Only required when `license_type` is `BRING_YOUR_OWN`.
     */
    authCode?: pulumi.Input<string>;
    /**
     * PAN instance auth key. This is only required when `panorama_enabled` is set to `true`.
     */
    authKey?: pulumi.Input<string>;
    /**
     * ID of PAN instance credential.
     */
    credentialId?: pulumi.Input<string>;
    /**
     * These options should be set only when global protect is enabled on service. These are set per segment. It is expected that on a segment where global protect is enabled at least 1 instance should be set with portal_enabled and at least one with gateway_enabled. It can be on the same instance or a different instance under the segment.
     */
    globalProtectSegmentOptions?: pulumi.Input<pulumi.Input<inputs.ServicePanInstanceGlobalProtectSegmentOption>[]>;
    /**
     * The ID of the PAN instance.
     */
    id?: pulumi.Input<number>;
    /**
     * The name of the PAN instance.
     */
    name?: pulumi.Input<string>;
}

export interface ServicePanInstanceGlobalProtectSegmentOption {
    /**
     * indicates if the Global Protect Gateway is enabled on this PAN instance
     */
    gatewayEnabled: pulumi.Input<boolean>;
    /**
     * indicates if the GlobalProtect Portal is enabled on this PAN instance
     */
    portalEnabled: pulumi.Input<boolean>;
    /**
     * Prefix List with Client IP Pool.
     */
    prefixListId: pulumi.Input<number>;
    /**
     * The segment ID for Global Protect options.
     */
    segmentId: pulumi.Input<string>;
}

export interface ServicePanSegmentOption {
    /**
     * The list of groups associated with the zone.
     */
    groups: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the segment.
     */
    segmentId: pulumi.Input<string>;
    /**
     * The name of the associated firewall zone.
     */
    zoneName: pulumi.Input<string>;
}

export interface ServiceZscalerIpsecConfiguration {
    /**
     * The IPSEC phase 2 DH Group to be used. Input value must be either `MODP1024`or `MODP2048`. The default value is `MODP1024`
     */
    espDhGroupNumber?: pulumi.Input<string>;
    /**
     * The IPSEC phase 2 Encryption Algorithm to be used. Input value must be either `NULL` or `AES256CBC`. The default value is `NULL`
     */
    espEncryptionAlgorithm?: pulumi.Input<string>;
    /**
     * The IPSEC phase 2 Integrity Algorithm to be used. Input value must be either `MD5` or `SHA256`. The default value is `MD5`.
     */
    espIntegrityAlgorithm?: pulumi.Input<string>;
    /**
     * The type of health check. Input values must be either `IKE_STATUS` `PING_PROBE` or `HTTP_PROBE`
     */
    healthCheckType: pulumi.Input<string>;
    /**
     * The url to check connection to health, should be provided when health check type is 'HTTP_PROBE'
     */
    httpProbeUrl?: pulumi.Input<string>;
    /**
     * The IPSEC phase 1 DH Group to be used. Input value must either be `MODP1024` or `MODP2048`. The default is `MODP1024`
     */
    ikeDhGroupNumber?: pulumi.Input<string>;
    /**
     * The IPSEC phase 1 Encryption Algorithm to be used. Only `AES256CBC` is allowed. The default value is `AES256CBC`.
     */
    ikeEncryptionAlgorithm?: pulumi.Input<string>;
    /**
     * The IPSEC phase 1 Integrity Algorithm to be used. Only `SHA256` is allowed. The default value is `SHA256`.
     */
    ikeIntegrityAlgorithm?: pulumi.Input<string>;
    /**
     * The local FQDN Id.
     */
    localFpdnId: pulumi.Input<string>;
    /**
     * The ping destination to check connection health. It should be provided when `health_check_type` is `PING_PROBE`
     */
    pingProbeIp?: pulumi.Input<string>;
    /**
     * The preshared key.
     */
    preSharedKey: pulumi.Input<string>;
}
