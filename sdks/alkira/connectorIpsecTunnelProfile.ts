// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ConnectorIpsecTunnelProfile extends pulumi.CustomResource {
    /**
     * Get an existing ConnectorIpsecTunnelProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectorIpsecTunnelProfileState, opts?: pulumi.CustomResourceOptions): ConnectorIpsecTunnelProfile {
        return new ConnectorIpsecTunnelProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alkira:index/connectorIpsecTunnelProfile:ConnectorIpsecTunnelProfile';

    /**
     * Returns true if the given object is an instance of ConnectorIpsecTunnelProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConnectorIpsecTunnelProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConnectorIpsecTunnelProfile.__pulumiType;
    }

    /**
     * The description of the tunnel profile.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * IKE DH group number of the IPSec tunnel. The value could be: `MODP1024`, `MODP2048`, `MODP3072`, `MODP4096`, `MODP6144`,
     * `MODP8192`, `ECP256`, `ECP384`, `ECP521`, `CURVE25519`.
     */
    public readonly ikeDhGroup!: pulumi.Output<string>;
    /**
     * IKE encryption algorithm used with IPSec tunnel. The value could be: `AES256CBC`, `AES192CBC`, `AES128CBC`, `3DESCBC`,
     * `AES256GCM16`, `AES192GCM16`, `AES128GCM16`.
     */
    public readonly ikeEncryptionAlgorithm!: pulumi.Output<string>;
    /**
     * IKE integrity algorithm used with IPSec tunnel. The value could be: `SHA1`, `SHA256`, `SHA384`, `SHA512` and `MD5`.
     */
    public readonly ikeIntegrityAlgorithm!: pulumi.Output<string>;
    /**
     * ESP DH group number of the IPSec tunnel. The value could be: `MODP1024`, `MODP2048`, `MODP3072`, `MODP4096`, `MODP6144`,
     * `MODP8192`, `ECP256`, `ECP384`, `ECP521`, `CURVE25519` and `NONE`.
     */
    public readonly ipsecDhGroup!: pulumi.Output<string>;
    /**
     * ESP encryption algorithm of the IPSec Tunnel. The value could be: `AES256CBC`, `AES192CBC`, `AES128CBC`, `3DESCBC`,
     * `AES256GCM16`, `AES192GCM16`, `AES128GCM16`.
     */
    public readonly ipsecEncryptionAlgorithm!: pulumi.Output<string>;
    /**
     * ESP integrity algorithm of the IPSec tunnel. The value could be: `SHA1`, `SHA256`, `SHA384`, `SHA512` and `MD5`.
     */
    public readonly ipsecIntegrityAlgorithm!: pulumi.Output<string | undefined>;
    /**
     * The name of the profile.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The provisioning state of the resource.
     */
    public /*out*/ readonly provisionState!: pulumi.Output<string>;

    /**
     * Create a ConnectorIpsecTunnelProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectorIpsecTunnelProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectorIpsecTunnelProfileArgs | ConnectorIpsecTunnelProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectorIpsecTunnelProfileState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["ikeDhGroup"] = state ? state.ikeDhGroup : undefined;
            resourceInputs["ikeEncryptionAlgorithm"] = state ? state.ikeEncryptionAlgorithm : undefined;
            resourceInputs["ikeIntegrityAlgorithm"] = state ? state.ikeIntegrityAlgorithm : undefined;
            resourceInputs["ipsecDhGroup"] = state ? state.ipsecDhGroup : undefined;
            resourceInputs["ipsecEncryptionAlgorithm"] = state ? state.ipsecEncryptionAlgorithm : undefined;
            resourceInputs["ipsecIntegrityAlgorithm"] = state ? state.ipsecIntegrityAlgorithm : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["provisionState"] = state ? state.provisionState : undefined;
        } else {
            const args = argsOrState as ConnectorIpsecTunnelProfileArgs | undefined;
            if ((!args || args.ikeDhGroup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ikeDhGroup'");
            }
            if ((!args || args.ikeEncryptionAlgorithm === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ikeEncryptionAlgorithm'");
            }
            if ((!args || args.ikeIntegrityAlgorithm === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ikeIntegrityAlgorithm'");
            }
            if ((!args || args.ipsecDhGroup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipsecDhGroup'");
            }
            if ((!args || args.ipsecEncryptionAlgorithm === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipsecEncryptionAlgorithm'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["ikeDhGroup"] = args ? args.ikeDhGroup : undefined;
            resourceInputs["ikeEncryptionAlgorithm"] = args ? args.ikeEncryptionAlgorithm : undefined;
            resourceInputs["ikeIntegrityAlgorithm"] = args ? args.ikeIntegrityAlgorithm : undefined;
            resourceInputs["ipsecDhGroup"] = args ? args.ipsecDhGroup : undefined;
            resourceInputs["ipsecEncryptionAlgorithm"] = args ? args.ipsecEncryptionAlgorithm : undefined;
            resourceInputs["ipsecIntegrityAlgorithm"] = args ? args.ipsecIntegrityAlgorithm : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["provisionState"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConnectorIpsecTunnelProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ConnectorIpsecTunnelProfile resources.
 */
export interface ConnectorIpsecTunnelProfileState {
    /**
     * The description of the tunnel profile.
     */
    description?: pulumi.Input<string>;
    /**
     * IKE DH group number of the IPSec tunnel. The value could be: `MODP1024`, `MODP2048`, `MODP3072`, `MODP4096`, `MODP6144`,
     * `MODP8192`, `ECP256`, `ECP384`, `ECP521`, `CURVE25519`.
     */
    ikeDhGroup?: pulumi.Input<string>;
    /**
     * IKE encryption algorithm used with IPSec tunnel. The value could be: `AES256CBC`, `AES192CBC`, `AES128CBC`, `3DESCBC`,
     * `AES256GCM16`, `AES192GCM16`, `AES128GCM16`.
     */
    ikeEncryptionAlgorithm?: pulumi.Input<string>;
    /**
     * IKE integrity algorithm used with IPSec tunnel. The value could be: `SHA1`, `SHA256`, `SHA384`, `SHA512` and `MD5`.
     */
    ikeIntegrityAlgorithm?: pulumi.Input<string>;
    /**
     * ESP DH group number of the IPSec tunnel. The value could be: `MODP1024`, `MODP2048`, `MODP3072`, `MODP4096`, `MODP6144`,
     * `MODP8192`, `ECP256`, `ECP384`, `ECP521`, `CURVE25519` and `NONE`.
     */
    ipsecDhGroup?: pulumi.Input<string>;
    /**
     * ESP encryption algorithm of the IPSec Tunnel. The value could be: `AES256CBC`, `AES192CBC`, `AES128CBC`, `3DESCBC`,
     * `AES256GCM16`, `AES192GCM16`, `AES128GCM16`.
     */
    ipsecEncryptionAlgorithm?: pulumi.Input<string>;
    /**
     * ESP integrity algorithm of the IPSec tunnel. The value could be: `SHA1`, `SHA256`, `SHA384`, `SHA512` and `MD5`.
     */
    ipsecIntegrityAlgorithm?: pulumi.Input<string>;
    /**
     * The name of the profile.
     */
    name?: pulumi.Input<string>;
    /**
     * The provisioning state of the resource.
     */
    provisionState?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ConnectorIpsecTunnelProfile resource.
 */
export interface ConnectorIpsecTunnelProfileArgs {
    /**
     * The description of the tunnel profile.
     */
    description?: pulumi.Input<string>;
    /**
     * IKE DH group number of the IPSec tunnel. The value could be: `MODP1024`, `MODP2048`, `MODP3072`, `MODP4096`, `MODP6144`,
     * `MODP8192`, `ECP256`, `ECP384`, `ECP521`, `CURVE25519`.
     */
    ikeDhGroup: pulumi.Input<string>;
    /**
     * IKE encryption algorithm used with IPSec tunnel. The value could be: `AES256CBC`, `AES192CBC`, `AES128CBC`, `3DESCBC`,
     * `AES256GCM16`, `AES192GCM16`, `AES128GCM16`.
     */
    ikeEncryptionAlgorithm: pulumi.Input<string>;
    /**
     * IKE integrity algorithm used with IPSec tunnel. The value could be: `SHA1`, `SHA256`, `SHA384`, `SHA512` and `MD5`.
     */
    ikeIntegrityAlgorithm: pulumi.Input<string>;
    /**
     * ESP DH group number of the IPSec tunnel. The value could be: `MODP1024`, `MODP2048`, `MODP3072`, `MODP4096`, `MODP6144`,
     * `MODP8192`, `ECP256`, `ECP384`, `ECP521`, `CURVE25519` and `NONE`.
     */
    ipsecDhGroup: pulumi.Input<string>;
    /**
     * ESP encryption algorithm of the IPSec Tunnel. The value could be: `AES256CBC`, `AES192CBC`, `AES128CBC`, `3DESCBC`,
     * `AES256GCM16`, `AES192GCM16`, `AES128GCM16`.
     */
    ipsecEncryptionAlgorithm: pulumi.Input<string>;
    /**
     * ESP integrity algorithm of the IPSec tunnel. The value could be: `SHA1`, `SHA256`, `SHA384`, `SHA512` and `MD5`.
     */
    ipsecIntegrityAlgorithm?: pulumi.Input<string>;
    /**
     * The name of the profile.
     */
    name?: pulumi.Input<string>;
}
