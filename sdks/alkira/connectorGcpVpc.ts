// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ConnectorGcpVpc extends pulumi.CustomResource {
    /**
     * Get an existing ConnectorGcpVpc resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectorGcpVpcState, opts?: pulumi.CustomResourceOptions): ConnectorGcpVpc {
        return new ConnectorGcpVpc(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alkira:index/connectorGcpVpc:ConnectorGcpVpc';

    /**
     * Returns true if the given object is an instance of ConnectorGcpVpc.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConnectorGcpVpc {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConnectorGcpVpc.__pulumiType;
    }

    /**
     * IDs of billing tags associated with the connector.
     */
    public readonly billingTagIds!: pulumi.Output<number[] | undefined>;
    /**
     * ID of resource `credential_gcp_vpc`.
     */
    public readonly credentialId!: pulumi.Output<string>;
    /**
     * A specific BGP ASN for the connector. This field cannot be updated once the connector has been provisioned. The ASN can
     * be any private ASN (`64512 - 65534`, `4200000000 - 4294967294`) that is not used elsewhere in the network.
     */
    public readonly customerAsn!: pulumi.Output<number | undefined>;
    /**
     * The CXP where the connector should be provisioned.
     */
    public readonly cxp!: pulumi.Output<string>;
    /**
     * Is the connector enabled. Default is `true`.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * A list of additional CXPs where the connector should be provisioned for failover.
     */
    public readonly failoverCxps!: pulumi.Output<string[] | undefined>;
    /**
     * GCP Project ID.
     */
    public readonly gcpProjectId!: pulumi.Output<string | undefined>;
    /**
     * GCP region where VPC resides.
     */
    public readonly gcpRegion!: pulumi.Output<string>;
    /**
     * GCP Routing describes the routes that are to be imported to the VPC from the CXP. This essentially controls how traffic
     * is routed between the CXP and the VPC. When routing option is not provided, the traffic exiting the VPC will be sent to
     * the CXP (i.e a default route to CXP will be added to all route tables on that VPC)
     */
    public readonly gcpRoutings!: pulumi.Output<outputs.ConnectorGcpVpcGcpRouting[] | undefined>;
    /**
     * GCP VPC name.
     */
    public readonly gcpVpcName!: pulumi.Output<string>;
    /**
     * The group of the connector.
     */
    public readonly group!: pulumi.Output<string | undefined>;
    /**
     * The ID of implicit group automaticaly created with the connector.
     */
    public /*out*/ readonly implicitGroupId!: pulumi.Output<number>;
    /**
     * The name of the connector.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The provision state of the connector.
     */
    public /*out*/ readonly provisionState!: pulumi.Output<string>;
    /**
     * The ID of the scale group associated with the connector.
     */
    public readonly scaleGroupId!: pulumi.Output<string | undefined>;
    /**
     * The ID of the segment associated with the connector.
     */
    public readonly segmentId!: pulumi.Output<string>;
    /**
     * The size of the connector, one of `SMALL`, `MEDIUM` or `LARGE`, `2LARGE`, `4LARGE`, `5LARGE`, `10LARGE`, `20LARGE`.
     */
    public readonly size!: pulumi.Output<string>;
    /**
     * The list of subnets of the target GCP VPC for routing purpose. Given connector supports multiple prefixes per subnet,
     * each prefix under a subnet will be a new entry.
     */
    public readonly vpcSubnets!: pulumi.Output<outputs.ConnectorGcpVpcVpcSubnet[] | undefined>;

    /**
     * Create a ConnectorGcpVpc resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectorGcpVpcArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectorGcpVpcArgs | ConnectorGcpVpcState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectorGcpVpcState | undefined;
            resourceInputs["billingTagIds"] = state ? state.billingTagIds : undefined;
            resourceInputs["credentialId"] = state ? state.credentialId : undefined;
            resourceInputs["customerAsn"] = state ? state.customerAsn : undefined;
            resourceInputs["cxp"] = state ? state.cxp : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["failoverCxps"] = state ? state.failoverCxps : undefined;
            resourceInputs["gcpProjectId"] = state ? state.gcpProjectId : undefined;
            resourceInputs["gcpRegion"] = state ? state.gcpRegion : undefined;
            resourceInputs["gcpRoutings"] = state ? state.gcpRoutings : undefined;
            resourceInputs["gcpVpcName"] = state ? state.gcpVpcName : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["implicitGroupId"] = state ? state.implicitGroupId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["provisionState"] = state ? state.provisionState : undefined;
            resourceInputs["scaleGroupId"] = state ? state.scaleGroupId : undefined;
            resourceInputs["segmentId"] = state ? state.segmentId : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["vpcSubnets"] = state ? state.vpcSubnets : undefined;
        } else {
            const args = argsOrState as ConnectorGcpVpcArgs | undefined;
            if ((!args || args.credentialId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'credentialId'");
            }
            if ((!args || args.cxp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cxp'");
            }
            if ((!args || args.gcpRegion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gcpRegion'");
            }
            if ((!args || args.gcpVpcName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gcpVpcName'");
            }
            if ((!args || args.segmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'segmentId'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            resourceInputs["billingTagIds"] = args ? args.billingTagIds : undefined;
            resourceInputs["credentialId"] = args ? args.credentialId : undefined;
            resourceInputs["customerAsn"] = args ? args.customerAsn : undefined;
            resourceInputs["cxp"] = args ? args.cxp : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["failoverCxps"] = args ? args.failoverCxps : undefined;
            resourceInputs["gcpProjectId"] = args ? args.gcpProjectId : undefined;
            resourceInputs["gcpRegion"] = args ? args.gcpRegion : undefined;
            resourceInputs["gcpRoutings"] = args ? args.gcpRoutings : undefined;
            resourceInputs["gcpVpcName"] = args ? args.gcpVpcName : undefined;
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["scaleGroupId"] = args ? args.scaleGroupId : undefined;
            resourceInputs["segmentId"] = args ? args.segmentId : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["vpcSubnets"] = args ? args.vpcSubnets : undefined;
            resourceInputs["implicitGroupId"] = undefined /*out*/;
            resourceInputs["provisionState"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConnectorGcpVpc.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ConnectorGcpVpc resources.
 */
export interface ConnectorGcpVpcState {
    /**
     * IDs of billing tags associated with the connector.
     */
    billingTagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * ID of resource `credential_gcp_vpc`.
     */
    credentialId?: pulumi.Input<string>;
    /**
     * A specific BGP ASN for the connector. This field cannot be updated once the connector has been provisioned. The ASN can
     * be any private ASN (`64512 - 65534`, `4200000000 - 4294967294`) that is not used elsewhere in the network.
     */
    customerAsn?: pulumi.Input<number>;
    /**
     * The CXP where the connector should be provisioned.
     */
    cxp?: pulumi.Input<string>;
    /**
     * Is the connector enabled. Default is `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * A list of additional CXPs where the connector should be provisioned for failover.
     */
    failoverCxps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * GCP Project ID.
     */
    gcpProjectId?: pulumi.Input<string>;
    /**
     * GCP region where VPC resides.
     */
    gcpRegion?: pulumi.Input<string>;
    /**
     * GCP Routing describes the routes that are to be imported to the VPC from the CXP. This essentially controls how traffic
     * is routed between the CXP and the VPC. When routing option is not provided, the traffic exiting the VPC will be sent to
     * the CXP (i.e a default route to CXP will be added to all route tables on that VPC)
     */
    gcpRoutings?: pulumi.Input<pulumi.Input<inputs.ConnectorGcpVpcGcpRouting>[]>;
    /**
     * GCP VPC name.
     */
    gcpVpcName?: pulumi.Input<string>;
    /**
     * The group of the connector.
     */
    group?: pulumi.Input<string>;
    /**
     * The ID of implicit group automaticaly created with the connector.
     */
    implicitGroupId?: pulumi.Input<number>;
    /**
     * The name of the connector.
     */
    name?: pulumi.Input<string>;
    /**
     * The provision state of the connector.
     */
    provisionState?: pulumi.Input<string>;
    /**
     * The ID of the scale group associated with the connector.
     */
    scaleGroupId?: pulumi.Input<string>;
    /**
     * The ID of the segment associated with the connector.
     */
    segmentId?: pulumi.Input<string>;
    /**
     * The size of the connector, one of `SMALL`, `MEDIUM` or `LARGE`, `2LARGE`, `4LARGE`, `5LARGE`, `10LARGE`, `20LARGE`.
     */
    size?: pulumi.Input<string>;
    /**
     * The list of subnets of the target GCP VPC for routing purpose. Given connector supports multiple prefixes per subnet,
     * each prefix under a subnet will be a new entry.
     */
    vpcSubnets?: pulumi.Input<pulumi.Input<inputs.ConnectorGcpVpcVpcSubnet>[]>;
}

/**
 * The set of arguments for constructing a ConnectorGcpVpc resource.
 */
export interface ConnectorGcpVpcArgs {
    /**
     * IDs of billing tags associated with the connector.
     */
    billingTagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * ID of resource `credential_gcp_vpc`.
     */
    credentialId: pulumi.Input<string>;
    /**
     * A specific BGP ASN for the connector. This field cannot be updated once the connector has been provisioned. The ASN can
     * be any private ASN (`64512 - 65534`, `4200000000 - 4294967294`) that is not used elsewhere in the network.
     */
    customerAsn?: pulumi.Input<number>;
    /**
     * The CXP where the connector should be provisioned.
     */
    cxp: pulumi.Input<string>;
    /**
     * Is the connector enabled. Default is `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * A list of additional CXPs where the connector should be provisioned for failover.
     */
    failoverCxps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * GCP Project ID.
     */
    gcpProjectId?: pulumi.Input<string>;
    /**
     * GCP region where VPC resides.
     */
    gcpRegion: pulumi.Input<string>;
    /**
     * GCP Routing describes the routes that are to be imported to the VPC from the CXP. This essentially controls how traffic
     * is routed between the CXP and the VPC. When routing option is not provided, the traffic exiting the VPC will be sent to
     * the CXP (i.e a default route to CXP will be added to all route tables on that VPC)
     */
    gcpRoutings?: pulumi.Input<pulumi.Input<inputs.ConnectorGcpVpcGcpRouting>[]>;
    /**
     * GCP VPC name.
     */
    gcpVpcName: pulumi.Input<string>;
    /**
     * The group of the connector.
     */
    group?: pulumi.Input<string>;
    /**
     * The name of the connector.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the scale group associated with the connector.
     */
    scaleGroupId?: pulumi.Input<string>;
    /**
     * The ID of the segment associated with the connector.
     */
    segmentId: pulumi.Input<string>;
    /**
     * The size of the connector, one of `SMALL`, `MEDIUM` or `LARGE`, `2LARGE`, `4LARGE`, `5LARGE`, `10LARGE`, `20LARGE`.
     */
    size: pulumi.Input<string>;
    /**
     * The list of subnets of the target GCP VPC for routing purpose. Given connector supports multiple prefixes per subnet,
     * each prefix under a subnet will be a new entry.
     */
    vpcSubnets?: pulumi.Input<pulumi.Input<inputs.ConnectorGcpVpcVpcSubnet>[]>;
}
