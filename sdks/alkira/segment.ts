// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Segment extends pulumi.CustomResource {
    /**
     * Get an existing Segment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SegmentState, opts?: pulumi.CustomResourceOptions): Segment {
        return new Segment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alkira:index/segment:Segment';

    /**
     * Returns true if the given object is an instance of Segment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Segment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Segment.__pulumiType;
    }

    /**
     * The BGP ASN for the segment. Default value is `65514`.
     */
    public readonly asn!: pulumi.Output<number | undefined>;
    /**
     * The list of CIDR blocks.
     */
    public readonly cidrs!: pulumi.Output<string[]>;
    /**
     * The description of the segment.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Enable IPv6 to IPv4 translation in the segment for internet application traffic. Default is `false`. (**BETA**)
     */
    public readonly enableIpv6ToIpv4Translation!: pulumi.Output<boolean | undefined>;
    /**
     * Enable overlapping route validation. Default is `true`. (**BETA**)
     */
    public readonly enableOverlappingRouteValidation!: pulumi.Output<boolean | undefined>;
    /**
     * The IP of the DNS server used within the segment. This DNS server may be used by the Alkira CXP to resolve the names of
     * LDAP servers for example which are configured on the Remote Access Connector. (**BETA**)
     */
    public readonly enterpriseDnsServerIp!: pulumi.Output<string | undefined>;
    /**
     * The name of the segment.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The provisioning state of the resource.
     */
    public /*out*/ readonly provisionState!: pulumi.Output<string>;
    /**
     * Default value is `false`. When this is set to `true`. Alkira reserves public IPs which can be used to create underlay
     * tunnels between an external service and Alkira. For example the reserved public IPs may be used to create tunnels to the
     * Akamai Prolexic. (**BETA**)
     */
    public readonly reservePublicIps!: pulumi.Output<boolean | undefined>;
    /**
     * Alkira reserves public IPs which can be used to create underlay tunnels between an external service to the specified
     * Alkira CXPs. (**BETA**)
     */
    public readonly reservePublicIpsForCxps!: pulumi.Output<string[] | undefined>;
    /**
     * Enable traffic distribution in a segment to instances in a service using source IP hashing. When enabled, traffic will
     * be hashed and distributed only by source IP of the packet. Default behavior is based on 5 tuples in a network packet.
     * Default is `false`. (**BETA**)
     */
    public readonly serviceTrafficDistribution!: pulumi.Output<boolean | undefined>;
    /**
     * The end IP address of IPv4 pool.
     */
    public readonly srcIpv4PoolEndIp!: pulumi.Output<string | undefined>;
    /**
     * The start IP address of IPv4 pool.
     */
    public readonly srcIpv4PoolStartIp!: pulumi.Output<string | undefined>;

    /**
     * Create a Segment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SegmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SegmentArgs | SegmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SegmentState | undefined;
            resourceInputs["asn"] = state ? state.asn : undefined;
            resourceInputs["cidrs"] = state ? state.cidrs : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enableIpv6ToIpv4Translation"] = state ? state.enableIpv6ToIpv4Translation : undefined;
            resourceInputs["enableOverlappingRouteValidation"] = state ? state.enableOverlappingRouteValidation : undefined;
            resourceInputs["enterpriseDnsServerIp"] = state ? state.enterpriseDnsServerIp : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["provisionState"] = state ? state.provisionState : undefined;
            resourceInputs["reservePublicIps"] = state ? state.reservePublicIps : undefined;
            resourceInputs["reservePublicIpsForCxps"] = state ? state.reservePublicIpsForCxps : undefined;
            resourceInputs["serviceTrafficDistribution"] = state ? state.serviceTrafficDistribution : undefined;
            resourceInputs["srcIpv4PoolEndIp"] = state ? state.srcIpv4PoolEndIp : undefined;
            resourceInputs["srcIpv4PoolStartIp"] = state ? state.srcIpv4PoolStartIp : undefined;
        } else {
            const args = argsOrState as SegmentArgs | undefined;
            if ((!args || args.cidrs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cidrs'");
            }
            resourceInputs["asn"] = args ? args.asn : undefined;
            resourceInputs["cidrs"] = args ? args.cidrs : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enableIpv6ToIpv4Translation"] = args ? args.enableIpv6ToIpv4Translation : undefined;
            resourceInputs["enableOverlappingRouteValidation"] = args ? args.enableOverlappingRouteValidation : undefined;
            resourceInputs["enterpriseDnsServerIp"] = args ? args.enterpriseDnsServerIp : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["reservePublicIps"] = args ? args.reservePublicIps : undefined;
            resourceInputs["reservePublicIpsForCxps"] = args ? args.reservePublicIpsForCxps : undefined;
            resourceInputs["serviceTrafficDistribution"] = args ? args.serviceTrafficDistribution : undefined;
            resourceInputs["srcIpv4PoolEndIp"] = args ? args.srcIpv4PoolEndIp : undefined;
            resourceInputs["srcIpv4PoolStartIp"] = args ? args.srcIpv4PoolStartIp : undefined;
            resourceInputs["provisionState"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Segment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Segment resources.
 */
export interface SegmentState {
    /**
     * The BGP ASN for the segment. Default value is `65514`.
     */
    asn?: pulumi.Input<number>;
    /**
     * The list of CIDR blocks.
     */
    cidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The description of the segment.
     */
    description?: pulumi.Input<string>;
    /**
     * Enable IPv6 to IPv4 translation in the segment for internet application traffic. Default is `false`. (**BETA**)
     */
    enableIpv6ToIpv4Translation?: pulumi.Input<boolean>;
    /**
     * Enable overlapping route validation. Default is `true`. (**BETA**)
     */
    enableOverlappingRouteValidation?: pulumi.Input<boolean>;
    /**
     * The IP of the DNS server used within the segment. This DNS server may be used by the Alkira CXP to resolve the names of
     * LDAP servers for example which are configured on the Remote Access Connector. (**BETA**)
     */
    enterpriseDnsServerIp?: pulumi.Input<string>;
    /**
     * The name of the segment.
     */
    name?: pulumi.Input<string>;
    /**
     * The provisioning state of the resource.
     */
    provisionState?: pulumi.Input<string>;
    /**
     * Default value is `false`. When this is set to `true`. Alkira reserves public IPs which can be used to create underlay
     * tunnels between an external service and Alkira. For example the reserved public IPs may be used to create tunnels to the
     * Akamai Prolexic. (**BETA**)
     */
    reservePublicIps?: pulumi.Input<boolean>;
    /**
     * Alkira reserves public IPs which can be used to create underlay tunnels between an external service to the specified
     * Alkira CXPs. (**BETA**)
     */
    reservePublicIpsForCxps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable traffic distribution in a segment to instances in a service using source IP hashing. When enabled, traffic will
     * be hashed and distributed only by source IP of the packet. Default behavior is based on 5 tuples in a network packet.
     * Default is `false`. (**BETA**)
     */
    serviceTrafficDistribution?: pulumi.Input<boolean>;
    /**
     * The end IP address of IPv4 pool.
     */
    srcIpv4PoolEndIp?: pulumi.Input<string>;
    /**
     * The start IP address of IPv4 pool.
     */
    srcIpv4PoolStartIp?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Segment resource.
 */
export interface SegmentArgs {
    /**
     * The BGP ASN for the segment. Default value is `65514`.
     */
    asn?: pulumi.Input<number>;
    /**
     * The list of CIDR blocks.
     */
    cidrs: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The description of the segment.
     */
    description?: pulumi.Input<string>;
    /**
     * Enable IPv6 to IPv4 translation in the segment for internet application traffic. Default is `false`. (**BETA**)
     */
    enableIpv6ToIpv4Translation?: pulumi.Input<boolean>;
    /**
     * Enable overlapping route validation. Default is `true`. (**BETA**)
     */
    enableOverlappingRouteValidation?: pulumi.Input<boolean>;
    /**
     * The IP of the DNS server used within the segment. This DNS server may be used by the Alkira CXP to resolve the names of
     * LDAP servers for example which are configured on the Remote Access Connector. (**BETA**)
     */
    enterpriseDnsServerIp?: pulumi.Input<string>;
    /**
     * The name of the segment.
     */
    name?: pulumi.Input<string>;
    /**
     * Default value is `false`. When this is set to `true`. Alkira reserves public IPs which can be used to create underlay
     * tunnels between an external service and Alkira. For example the reserved public IPs may be used to create tunnels to the
     * Akamai Prolexic. (**BETA**)
     */
    reservePublicIps?: pulumi.Input<boolean>;
    /**
     * Alkira reserves public IPs which can be used to create underlay tunnels between an external service to the specified
     * Alkira CXPs. (**BETA**)
     */
    reservePublicIpsForCxps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable traffic distribution in a segment to instances in a service using source IP hashing. When enabled, traffic will
     * be hashed and distributed only by source IP of the packet. Default behavior is based on 5 tuples in a network packet.
     * Default is `false`. (**BETA**)
     */
    serviceTrafficDistribution?: pulumi.Input<boolean>;
    /**
     * The end IP address of IPv4 pool.
     */
    srcIpv4PoolEndIp?: pulumi.Input<string>;
    /**
     * The start IP address of IPv4 pool.
     */
    srcIpv4PoolStartIp?: pulumi.Input<string>;
}
