// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PeeringGatewayCxp extends pulumi.CustomResource {
    /**
     * Get an existing PeeringGatewayCxp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PeeringGatewayCxpState, opts?: pulumi.CustomResourceOptions): PeeringGatewayCxp {
        return new PeeringGatewayCxp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alkira:index/peeringGatewayCxp:PeeringGatewayCxp';

    /**
     * Returns true if the given object is an instance of PeeringGatewayCxp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PeeringGatewayCxp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PeeringGatewayCxp.__pulumiType;
    }

    /**
     * The cloud provider where this resource will be created. The default value is `AZURE` and only `AZURE` is supported for
     * now.
     */
    public readonly cloudProvider!: pulumi.Output<string | undefined>;
    /**
     * The region of the specified cloud provider on which the resource should be created. E.g. if `cloud_provider` is `AZURE`,
     * the region could be like `eastus`.
     */
    public readonly cloudRegion!: pulumi.Output<string>;
    /**
     * The CXP to which the Gateway is attached.
     */
    public readonly cxp!: pulumi.Output<string>;
    /**
     * Description of the resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The name of the Peering Gateway.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the segment that is associated with the resource.
     */
    public readonly segmentId!: pulumi.Output<string>;
    /**
     * The state of the resource.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;

    /**
     * Create a PeeringGatewayCxp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PeeringGatewayCxpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PeeringGatewayCxpArgs | PeeringGatewayCxpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PeeringGatewayCxpState | undefined;
            resourceInputs["cloudProvider"] = state ? state.cloudProvider : undefined;
            resourceInputs["cloudRegion"] = state ? state.cloudRegion : undefined;
            resourceInputs["cxp"] = state ? state.cxp : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["segmentId"] = state ? state.segmentId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
        } else {
            const args = argsOrState as PeeringGatewayCxpArgs | undefined;
            if ((!args || args.cloudRegion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudRegion'");
            }
            if ((!args || args.cxp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cxp'");
            }
            if ((!args || args.segmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'segmentId'");
            }
            resourceInputs["cloudProvider"] = args ? args.cloudProvider : undefined;
            resourceInputs["cloudRegion"] = args ? args.cloudRegion : undefined;
            resourceInputs["cxp"] = args ? args.cxp : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["segmentId"] = args ? args.segmentId : undefined;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PeeringGatewayCxp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PeeringGatewayCxp resources.
 */
export interface PeeringGatewayCxpState {
    /**
     * The cloud provider where this resource will be created. The default value is `AZURE` and only `AZURE` is supported for
     * now.
     */
    cloudProvider?: pulumi.Input<string>;
    /**
     * The region of the specified cloud provider on which the resource should be created. E.g. if `cloud_provider` is `AZURE`,
     * the region could be like `eastus`.
     */
    cloudRegion?: pulumi.Input<string>;
    /**
     * The CXP to which the Gateway is attached.
     */
    cxp?: pulumi.Input<string>;
    /**
     * Description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the Peering Gateway.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the segment that is associated with the resource.
     */
    segmentId?: pulumi.Input<string>;
    /**
     * The state of the resource.
     */
    state?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PeeringGatewayCxp resource.
 */
export interface PeeringGatewayCxpArgs {
    /**
     * The cloud provider where this resource will be created. The default value is `AZURE` and only `AZURE` is supported for
     * now.
     */
    cloudProvider?: pulumi.Input<string>;
    /**
     * The region of the specified cloud provider on which the resource should be created. E.g. if `cloud_provider` is `AZURE`,
     * the region could be like `eastus`.
     */
    cloudRegion: pulumi.Input<string>;
    /**
     * The CXP to which the Gateway is attached.
     */
    cxp: pulumi.Input<string>;
    /**
     * Description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the Peering Gateway.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the segment that is associated with the resource.
     */
    segmentId: pulumi.Input<string>;
}
