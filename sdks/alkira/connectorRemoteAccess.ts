// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ConnectorRemoteAccess extends pulumi.CustomResource {
    /**
     * Get an existing ConnectorRemoteAccess resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectorRemoteAccessState, opts?: pulumi.CustomResourceOptions): ConnectorRemoteAccess {
        return new ConnectorRemoteAccess(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alkira:index/connectorRemoteAccess:ConnectorRemoteAccess';

    /**
     * Returns true if the given object is an instance of ConnectorRemoteAccess.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConnectorRemoteAccess {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConnectorRemoteAccess.__pulumiType;
    }

    /**
     * Authentication mode, the value could be `LOCAL`, `LDAP` and `SAML`.
     */
    public readonly authenticationMode!: pulumi.Output<string>;
    /**
     * Map Segments of the selected CXP regions to one or more User Groups and client subnets.
     */
    public readonly authorizations!: pulumi.Output<outputs.ConnectorRemoteAccessAuthorization[]>;
    /**
     * The user provided connectors banner text.
     */
    public readonly bannerText!: pulumi.Output<string | undefined>;
    /**
     * Billing tags associated with the connector.
     */
    public readonly billingTagIds!: pulumi.Output<number[] | undefined>;
    /**
     * The threshhold for concurrent sessions alert.
     */
    public readonly concurrentSessionsAlertThreshold!: pulumi.Output<number | undefined>;
    /**
     * The CXP where the connector should be provisioned.
     */
    public readonly cxp!: pulumi.Output<string>;
    /**
     * Enable dynamic region mapping. Default value is `true`.
     */
    public readonly enableDynamicRegionMapping!: pulumi.Output<boolean | undefined>;
    /**
     * LDAP Settings when `authentication_mode` is `LDAP`.
     */
    public readonly ldapSettings!: pulumi.Output<outputs.ConnectorRemoteAccessLdapSetting[] | undefined>;
    /**
     * The name of the connector.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Name server.
     */
    public readonly nameServer!: pulumi.Output<string | undefined>;
    /**
     * The provisioning state of the connector.
     */
    public /*out*/ readonly provisionState!: pulumi.Output<string>;
    /**
     * Segments that are associated with the connector.
     */
    public readonly segmentIds!: pulumi.Output<string[]>;
    /**
     * The size of the connector, one of `SMALL`, `MEDIUM`, `LARGE`.
     */
    public readonly size!: pulumi.Output<string>;

    /**
     * Create a ConnectorRemoteAccess resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectorRemoteAccessArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectorRemoteAccessArgs | ConnectorRemoteAccessState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectorRemoteAccessState | undefined;
            resourceInputs["authenticationMode"] = state ? state.authenticationMode : undefined;
            resourceInputs["authorizations"] = state ? state.authorizations : undefined;
            resourceInputs["bannerText"] = state ? state.bannerText : undefined;
            resourceInputs["billingTagIds"] = state ? state.billingTagIds : undefined;
            resourceInputs["concurrentSessionsAlertThreshold"] = state ? state.concurrentSessionsAlertThreshold : undefined;
            resourceInputs["cxp"] = state ? state.cxp : undefined;
            resourceInputs["enableDynamicRegionMapping"] = state ? state.enableDynamicRegionMapping : undefined;
            resourceInputs["ldapSettings"] = state ? state.ldapSettings : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nameServer"] = state ? state.nameServer : undefined;
            resourceInputs["provisionState"] = state ? state.provisionState : undefined;
            resourceInputs["segmentIds"] = state ? state.segmentIds : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
        } else {
            const args = argsOrState as ConnectorRemoteAccessArgs | undefined;
            if ((!args || args.authenticationMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authenticationMode'");
            }
            if ((!args || args.authorizations === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authorizations'");
            }
            if ((!args || args.cxp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cxp'");
            }
            if ((!args || args.segmentIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'segmentIds'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            resourceInputs["authenticationMode"] = args ? args.authenticationMode : undefined;
            resourceInputs["authorizations"] = args ? args.authorizations : undefined;
            resourceInputs["bannerText"] = args ? args.bannerText : undefined;
            resourceInputs["billingTagIds"] = args ? args.billingTagIds : undefined;
            resourceInputs["concurrentSessionsAlertThreshold"] = args ? args.concurrentSessionsAlertThreshold : undefined;
            resourceInputs["cxp"] = args ? args.cxp : undefined;
            resourceInputs["enableDynamicRegionMapping"] = args ? args.enableDynamicRegionMapping : undefined;
            resourceInputs["ldapSettings"] = args ? args.ldapSettings : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nameServer"] = args ? args.nameServer : undefined;
            resourceInputs["segmentIds"] = args ? args.segmentIds : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["provisionState"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConnectorRemoteAccess.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ConnectorRemoteAccess resources.
 */
export interface ConnectorRemoteAccessState {
    /**
     * Authentication mode, the value could be `LOCAL`, `LDAP` and `SAML`.
     */
    authenticationMode?: pulumi.Input<string>;
    /**
     * Map Segments of the selected CXP regions to one or more User Groups and client subnets.
     */
    authorizations?: pulumi.Input<pulumi.Input<inputs.ConnectorRemoteAccessAuthorization>[]>;
    /**
     * The user provided connectors banner text.
     */
    bannerText?: pulumi.Input<string>;
    /**
     * Billing tags associated with the connector.
     */
    billingTagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The threshhold for concurrent sessions alert.
     */
    concurrentSessionsAlertThreshold?: pulumi.Input<number>;
    /**
     * The CXP where the connector should be provisioned.
     */
    cxp?: pulumi.Input<string>;
    /**
     * Enable dynamic region mapping. Default value is `true`.
     */
    enableDynamicRegionMapping?: pulumi.Input<boolean>;
    /**
     * LDAP Settings when `authentication_mode` is `LDAP`.
     */
    ldapSettings?: pulumi.Input<pulumi.Input<inputs.ConnectorRemoteAccessLdapSetting>[]>;
    /**
     * The name of the connector.
     */
    name?: pulumi.Input<string>;
    /**
     * Name server.
     */
    nameServer?: pulumi.Input<string>;
    /**
     * The provisioning state of the connector.
     */
    provisionState?: pulumi.Input<string>;
    /**
     * Segments that are associated with the connector.
     */
    segmentIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The size of the connector, one of `SMALL`, `MEDIUM`, `LARGE`.
     */
    size?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ConnectorRemoteAccess resource.
 */
export interface ConnectorRemoteAccessArgs {
    /**
     * Authentication mode, the value could be `LOCAL`, `LDAP` and `SAML`.
     */
    authenticationMode: pulumi.Input<string>;
    /**
     * Map Segments of the selected CXP regions to one or more User Groups and client subnets.
     */
    authorizations: pulumi.Input<pulumi.Input<inputs.ConnectorRemoteAccessAuthorization>[]>;
    /**
     * The user provided connectors banner text.
     */
    bannerText?: pulumi.Input<string>;
    /**
     * Billing tags associated with the connector.
     */
    billingTagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The threshhold for concurrent sessions alert.
     */
    concurrentSessionsAlertThreshold?: pulumi.Input<number>;
    /**
     * The CXP where the connector should be provisioned.
     */
    cxp: pulumi.Input<string>;
    /**
     * Enable dynamic region mapping. Default value is `true`.
     */
    enableDynamicRegionMapping?: pulumi.Input<boolean>;
    /**
     * LDAP Settings when `authentication_mode` is `LDAP`.
     */
    ldapSettings?: pulumi.Input<pulumi.Input<inputs.ConnectorRemoteAccessLdapSetting>[]>;
    /**
     * The name of the connector.
     */
    name?: pulumi.Input<string>;
    /**
     * Name server.
     */
    nameServer?: pulumi.Input<string>;
    /**
     * Segments that are associated with the connector.
     */
    segmentIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The size of the connector, one of `SMALL`, `MEDIUM`, `LARGE`.
     */
    size: pulumi.Input<string>;
}
