// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CloudvisorAccount extends pulumi.CustomResource {
    /**
     * Get an existing CloudvisorAccount resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudvisorAccountState, opts?: pulumi.CustomResourceOptions): CloudvisorAccount {
        return new CloudvisorAccount(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alkira:index/cloudvisorAccount:CloudvisorAccount';

    /**
     * Returns true if the given object is an instance of CloudvisorAccount.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudvisorAccount {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudvisorAccount.__pulumiType;
    }

    /**
     * The interval at which the account should be auto synced. The value could be `NONE`, `DAILY`, `WEEKLY` and `MONTHLY`.
     */
    public readonly autoSync!: pulumi.Output<string>;
    /**
     * Cloud provider of the account, currently, `AWS` and `AZURE` are supported.
     */
    public readonly cloudProvider!: pulumi.Output<string>;
    /**
     * Credential Id to be used for the account.
     */
    public readonly credentialId!: pulumi.Output<string>;
    /**
     * The name of the account.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The native cloud provider account Id.
     */
    public readonly nativeId!: pulumi.Output<string | undefined>;

    /**
     * Create a CloudvisorAccount resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudvisorAccountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudvisorAccountArgs | CloudvisorAccountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudvisorAccountState | undefined;
            resourceInputs["autoSync"] = state ? state.autoSync : undefined;
            resourceInputs["cloudProvider"] = state ? state.cloudProvider : undefined;
            resourceInputs["credentialId"] = state ? state.credentialId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nativeId"] = state ? state.nativeId : undefined;
        } else {
            const args = argsOrState as CloudvisorAccountArgs | undefined;
            if ((!args || args.autoSync === undefined) && !opts.urn) {
                throw new Error("Missing required property 'autoSync'");
            }
            if ((!args || args.cloudProvider === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudProvider'");
            }
            if ((!args || args.credentialId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'credentialId'");
            }
            resourceInputs["autoSync"] = args ? args.autoSync : undefined;
            resourceInputs["cloudProvider"] = args ? args.cloudProvider : undefined;
            resourceInputs["credentialId"] = args ? args.credentialId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nativeId"] = args ? args.nativeId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudvisorAccount.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CloudvisorAccount resources.
 */
export interface CloudvisorAccountState {
    /**
     * The interval at which the account should be auto synced. The value could be `NONE`, `DAILY`, `WEEKLY` and `MONTHLY`.
     */
    autoSync?: pulumi.Input<string>;
    /**
     * Cloud provider of the account, currently, `AWS` and `AZURE` are supported.
     */
    cloudProvider?: pulumi.Input<string>;
    /**
     * Credential Id to be used for the account.
     */
    credentialId?: pulumi.Input<string>;
    /**
     * The name of the account.
     */
    name?: pulumi.Input<string>;
    /**
     * The native cloud provider account Id.
     */
    nativeId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CloudvisorAccount resource.
 */
export interface CloudvisorAccountArgs {
    /**
     * The interval at which the account should be auto synced. The value could be `NONE`, `DAILY`, `WEEKLY` and `MONTHLY`.
     */
    autoSync: pulumi.Input<string>;
    /**
     * Cloud provider of the account, currently, `AWS` and `AZURE` are supported.
     */
    cloudProvider: pulumi.Input<string>;
    /**
     * Credential Id to be used for the account.
     */
    credentialId: pulumi.Input<string>;
    /**
     * The name of the account.
     */
    name?: pulumi.Input<string>;
    /**
     * The native cloud provider account Id.
     */
    nativeId?: pulumi.Input<string>;
}
