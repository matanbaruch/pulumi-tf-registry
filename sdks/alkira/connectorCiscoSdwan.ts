// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ConnectorCiscoSdwan extends pulumi.CustomResource {
    /**
     * Get an existing ConnectorCiscoSdwan resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectorCiscoSdwanState, opts?: pulumi.CustomResourceOptions): ConnectorCiscoSdwan {
        return new ConnectorCiscoSdwan(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alkira:index/connectorCiscoSdwan:ConnectorCiscoSdwan';

    /**
     * Returns true if the given object is an instance of ConnectorCiscoSdwan.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConnectorCiscoSdwan {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConnectorCiscoSdwan.__pulumiType;
    }

    /**
     * Billing Tag IDs to be associated with the connector.
     */
    public readonly billingTagIds!: pulumi.Output<number[] | undefined>;
    /**
     * The CXP where the connector should be provisioned.
     */
    public readonly cxp!: pulumi.Output<string>;
    /**
     * Is the connector enabled. Default is `true`.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The group of the connector.
     */
    public readonly group!: pulumi.Output<string | undefined>;
    /**
     * The ID of implicit group automaticaly created with the connector.
     */
    public /*out*/ readonly implicitGroupId!: pulumi.Output<number>;
    /**
     * The name of the connector.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The provision state of the connector.
     */
    public /*out*/ readonly provisionState!: pulumi.Output<string>;
    /**
     * The size of the connector, one of `SMALL`, `MEDIUM` and `LARGE`, `2LARGE`, `4LARGE`, `5LARGE`, `10LARGE` and `20LARGE`.
     */
    public readonly size!: pulumi.Output<string>;
    /**
     * The type of Cisco SD-WAN. Default value is `VEDGE`.
     */
    public readonly type!: pulumi.Output<string | undefined>;
    /**
     * Cisco vEdge
     */
    public readonly vedges!: pulumi.Output<outputs.ConnectorCiscoSdwanVedge[]>;
    /**
     * The version of Cisco SD-WAN. Please check Alkira Portal for all supported versions.
     */
    public readonly version!: pulumi.Output<string>;
    /**
     * Specify target segment for VRF.
     */
    public readonly vrfSegmentMappings!: pulumi.Output<outputs.ConnectorCiscoSdwanVrfSegmentMapping[]>;

    /**
     * Create a ConnectorCiscoSdwan resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectorCiscoSdwanArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectorCiscoSdwanArgs | ConnectorCiscoSdwanState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectorCiscoSdwanState | undefined;
            resourceInputs["billingTagIds"] = state ? state.billingTagIds : undefined;
            resourceInputs["cxp"] = state ? state.cxp : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["implicitGroupId"] = state ? state.implicitGroupId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["provisionState"] = state ? state.provisionState : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vedges"] = state ? state.vedges : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["vrfSegmentMappings"] = state ? state.vrfSegmentMappings : undefined;
        } else {
            const args = argsOrState as ConnectorCiscoSdwanArgs | undefined;
            if ((!args || args.cxp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cxp'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            if ((!args || args.vedges === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vedges'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            if ((!args || args.vrfSegmentMappings === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vrfSegmentMappings'");
            }
            resourceInputs["billingTagIds"] = args ? args.billingTagIds : undefined;
            resourceInputs["cxp"] = args ? args.cxp : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["vedges"] = args ? args.vedges : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["vrfSegmentMappings"] = args ? args.vrfSegmentMappings : undefined;
            resourceInputs["implicitGroupId"] = undefined /*out*/;
            resourceInputs["provisionState"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConnectorCiscoSdwan.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ConnectorCiscoSdwan resources.
 */
export interface ConnectorCiscoSdwanState {
    /**
     * Billing Tag IDs to be associated with the connector.
     */
    billingTagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The CXP where the connector should be provisioned.
     */
    cxp?: pulumi.Input<string>;
    /**
     * Is the connector enabled. Default is `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The group of the connector.
     */
    group?: pulumi.Input<string>;
    /**
     * The ID of implicit group automaticaly created with the connector.
     */
    implicitGroupId?: pulumi.Input<number>;
    /**
     * The name of the connector.
     */
    name?: pulumi.Input<string>;
    /**
     * The provision state of the connector.
     */
    provisionState?: pulumi.Input<string>;
    /**
     * The size of the connector, one of `SMALL`, `MEDIUM` and `LARGE`, `2LARGE`, `4LARGE`, `5LARGE`, `10LARGE` and `20LARGE`.
     */
    size?: pulumi.Input<string>;
    /**
     * The type of Cisco SD-WAN. Default value is `VEDGE`.
     */
    type?: pulumi.Input<string>;
    /**
     * Cisco vEdge
     */
    vedges?: pulumi.Input<pulumi.Input<inputs.ConnectorCiscoSdwanVedge>[]>;
    /**
     * The version of Cisco SD-WAN. Please check Alkira Portal for all supported versions.
     */
    version?: pulumi.Input<string>;
    /**
     * Specify target segment for VRF.
     */
    vrfSegmentMappings?: pulumi.Input<pulumi.Input<inputs.ConnectorCiscoSdwanVrfSegmentMapping>[]>;
}

/**
 * The set of arguments for constructing a ConnectorCiscoSdwan resource.
 */
export interface ConnectorCiscoSdwanArgs {
    /**
     * Billing Tag IDs to be associated with the connector.
     */
    billingTagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The CXP where the connector should be provisioned.
     */
    cxp: pulumi.Input<string>;
    /**
     * Is the connector enabled. Default is `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The group of the connector.
     */
    group?: pulumi.Input<string>;
    /**
     * The name of the connector.
     */
    name?: pulumi.Input<string>;
    /**
     * The size of the connector, one of `SMALL`, `MEDIUM` and `LARGE`, `2LARGE`, `4LARGE`, `5LARGE`, `10LARGE` and `20LARGE`.
     */
    size: pulumi.Input<string>;
    /**
     * The type of Cisco SD-WAN. Default value is `VEDGE`.
     */
    type?: pulumi.Input<string>;
    /**
     * Cisco vEdge
     */
    vedges: pulumi.Input<pulumi.Input<inputs.ConnectorCiscoSdwanVedge>[]>;
    /**
     * The version of Cisco SD-WAN. Please check Alkira Portal for all supported versions.
     */
    version: pulumi.Input<string>;
    /**
     * Specify target segment for VRF.
     */
    vrfSegmentMappings: pulumi.Input<pulumi.Input<inputs.ConnectorCiscoSdwanVrfSegmentMapping>[]>;
}
