// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ServiceZscaler extends pulumi.CustomResource {
    /**
     * Get an existing ServiceZscaler resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceZscalerState, opts?: pulumi.CustomResourceOptions): ServiceZscaler {
        return new ServiceZscaler(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alkira:index/serviceZscaler:ServiceZscaler';

    /**
     * Returns true if the given object is an instance of ServiceZscaler.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceZscaler {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceZscaler.__pulumiType;
    }

    /**
     * IDs of billing tags to be associated with the service.
     */
    public readonly billingTagIds!: pulumi.Output<number[] | undefined>;
    /**
     * The ID of the `connector_internet_exit` associated with the zscaler service.
     */
    public readonly connectorInternetExitId!: pulumi.Output<string>;
    /**
     * The CXP where the service should be provisioned.
     */
    public readonly cxp!: pulumi.Output<string>;
    /**
     * The description of the Zscaler service.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The IPSEC tunnel configuration. This field should only be set when `tunnel_type` is `IPSEC`.
     */
    public readonly ipsecConfigurations!: pulumi.Output<outputs.ServiceZscalerIpsecConfiguration[]>;
    /**
     * The name of the zscaler firewall.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The IP for closest Zscaler PoP to CXP region.
     */
    public readonly primaryPublicEdgeIp!: pulumi.Output<string>;
    /**
     * The provision state of the resource.
     */
    public /*out*/ readonly provisionState!: pulumi.Output<string>;
    /**
     * The IP for standby Zscaler PoP to CXP region.
     */
    public readonly secondaryPublicEdgeIp!: pulumi.Output<string>;
    /**
     * IDs of segment associated with the service.
     */
    public readonly segmentIds!: pulumi.Output<string[]>;
    /**
     * The size of the service one of `SMALL`, `MEDIUM`, `LARGE`.
     */
    public readonly size!: pulumi.Output<string>;
    /**
     * The type of tunnel protocol to be used to connect to Zscaler PoP.
     */
    public readonly tunnelProtocol!: pulumi.Output<string | undefined>;

    /**
     * Create a ServiceZscaler resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceZscalerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceZscalerArgs | ServiceZscalerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceZscalerState | undefined;
            resourceInputs["billingTagIds"] = state ? state.billingTagIds : undefined;
            resourceInputs["connectorInternetExitId"] = state ? state.connectorInternetExitId : undefined;
            resourceInputs["cxp"] = state ? state.cxp : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["ipsecConfigurations"] = state ? state.ipsecConfigurations : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["primaryPublicEdgeIp"] = state ? state.primaryPublicEdgeIp : undefined;
            resourceInputs["provisionState"] = state ? state.provisionState : undefined;
            resourceInputs["secondaryPublicEdgeIp"] = state ? state.secondaryPublicEdgeIp : undefined;
            resourceInputs["segmentIds"] = state ? state.segmentIds : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["tunnelProtocol"] = state ? state.tunnelProtocol : undefined;
        } else {
            const args = argsOrState as ServiceZscalerArgs | undefined;
            if ((!args || args.connectorInternetExitId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectorInternetExitId'");
            }
            if ((!args || args.cxp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cxp'");
            }
            if ((!args || args.ipsecConfigurations === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipsecConfigurations'");
            }
            if ((!args || args.primaryPublicEdgeIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'primaryPublicEdgeIp'");
            }
            if ((!args || args.secondaryPublicEdgeIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secondaryPublicEdgeIp'");
            }
            if ((!args || args.segmentIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'segmentIds'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            resourceInputs["billingTagIds"] = args ? args.billingTagIds : undefined;
            resourceInputs["connectorInternetExitId"] = args ? args.connectorInternetExitId : undefined;
            resourceInputs["cxp"] = args ? args.cxp : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["ipsecConfigurations"] = args ? args.ipsecConfigurations : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["primaryPublicEdgeIp"] = args ? args.primaryPublicEdgeIp : undefined;
            resourceInputs["secondaryPublicEdgeIp"] = args ? args.secondaryPublicEdgeIp : undefined;
            resourceInputs["segmentIds"] = args ? args.segmentIds : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["tunnelProtocol"] = args ? args.tunnelProtocol : undefined;
            resourceInputs["provisionState"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceZscaler.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ServiceZscaler resources.
 */
export interface ServiceZscalerState {
    /**
     * IDs of billing tags to be associated with the service.
     */
    billingTagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The ID of the `connector_internet_exit` associated with the zscaler service.
     */
    connectorInternetExitId?: pulumi.Input<string>;
    /**
     * The CXP where the service should be provisioned.
     */
    cxp?: pulumi.Input<string>;
    /**
     * The description of the Zscaler service.
     */
    description?: pulumi.Input<string>;
    /**
     * The IPSEC tunnel configuration. This field should only be set when `tunnel_type` is `IPSEC`.
     */
    ipsecConfigurations?: pulumi.Input<pulumi.Input<inputs.ServiceZscalerIpsecConfiguration>[]>;
    /**
     * The name of the zscaler firewall.
     */
    name?: pulumi.Input<string>;
    /**
     * The IP for closest Zscaler PoP to CXP region.
     */
    primaryPublicEdgeIp?: pulumi.Input<string>;
    /**
     * The provision state of the resource.
     */
    provisionState?: pulumi.Input<string>;
    /**
     * The IP for standby Zscaler PoP to CXP region.
     */
    secondaryPublicEdgeIp?: pulumi.Input<string>;
    /**
     * IDs of segment associated with the service.
     */
    segmentIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The size of the service one of `SMALL`, `MEDIUM`, `LARGE`.
     */
    size?: pulumi.Input<string>;
    /**
     * The type of tunnel protocol to be used to connect to Zscaler PoP.
     */
    tunnelProtocol?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceZscaler resource.
 */
export interface ServiceZscalerArgs {
    /**
     * IDs of billing tags to be associated with the service.
     */
    billingTagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The ID of the `connector_internet_exit` associated with the zscaler service.
     */
    connectorInternetExitId: pulumi.Input<string>;
    /**
     * The CXP where the service should be provisioned.
     */
    cxp: pulumi.Input<string>;
    /**
     * The description of the Zscaler service.
     */
    description?: pulumi.Input<string>;
    /**
     * The IPSEC tunnel configuration. This field should only be set when `tunnel_type` is `IPSEC`.
     */
    ipsecConfigurations: pulumi.Input<pulumi.Input<inputs.ServiceZscalerIpsecConfiguration>[]>;
    /**
     * The name of the zscaler firewall.
     */
    name?: pulumi.Input<string>;
    /**
     * The IP for closest Zscaler PoP to CXP region.
     */
    primaryPublicEdgeIp: pulumi.Input<string>;
    /**
     * The IP for standby Zscaler PoP to CXP region.
     */
    secondaryPublicEdgeIp: pulumi.Input<string>;
    /**
     * IDs of segment associated with the service.
     */
    segmentIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The size of the service one of `SMALL`, `MEDIUM`, `LARGE`.
     */
    size: pulumi.Input<string>;
    /**
     * The type of tunnel protocol to be used to connect to Zscaler PoP.
     */
    tunnelProtocol?: pulumi.Input<string>;
}
