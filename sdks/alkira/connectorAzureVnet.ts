// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ConnectorAzureVnet extends pulumi.CustomResource {
    /**
     * Get an existing ConnectorAzureVnet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectorAzureVnetState, opts?: pulumi.CustomResourceOptions): ConnectorAzureVnet {
        return new ConnectorAzureVnet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alkira:index/connectorAzureVnet:ConnectorAzureVnet';

    /**
     * Returns true if the given object is an instance of ConnectorAzureVnet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConnectorAzureVnet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConnectorAzureVnet.__pulumiType;
    }

    /**
     * Azure Virtual Network Id.
     */
    public readonly azureVnetId!: pulumi.Output<string>;
    /**
     * Tags for billing.
     */
    public readonly billingTagIds!: pulumi.Output<number[] | undefined>;
    /**
     * The mode that connector will use to connect to the Alkira CXP. `VNET_GATEWAY` will connect with a Virtual Gateway,
     * `VNET_PEERING` will connect using an Alkira Transit Hub (ATH).
     */
    public readonly connectionMode!: pulumi.Output<string | undefined>;
    /**
     * ID of resource `credential_azure_vnet`.
     */
    public readonly credentialId!: pulumi.Output<string>;
    /**
     * A specific BGP ASN for the connector. This cannot be specified when `connection_mode` is `VNET_PEERING`. This field
     * cannot be updated once the connector has been provisioned. The ASN cannot be value that is [restricted by
     * Azure](https://learn.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-vpn-faq#bgp).
     */
    public readonly customerAsn!: pulumi.Output<number | undefined>;
    /**
     * The CXP where the connector should be provisioned.
     */
    public readonly cxp!: pulumi.Output<string>;
    /**
     * Is the connector enabled. Default is `true`.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * A list of additional CXPs where the connector should be provisioned for failover.
     */
    public readonly failoverCxps!: pulumi.Output<string[] | undefined>;
    /**
     * The group of the connector.
     */
    public readonly group!: pulumi.Output<string | undefined>;
    /**
     * The direct inter connector group associated with the connector
     */
    public readonly groupDirectInterConnector!: pulumi.Output<string | undefined>;
    /**
     * The ID of implicit group automaticaly created with the connector.
     */
    public /*out*/ readonly implicitGroupId!: pulumi.Output<number>;
    /**
     * The name of the connector.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the CXP peering gateway associated with the connector.
     */
    public readonly peeringGatewayCxpId!: pulumi.Output<number | undefined>;
    /**
     * The provision state of the connector.
     */
    public /*out*/ readonly provisionState!: pulumi.Output<string>;
    /**
     * Routing options for the entire VNET, either `ADVERTISE_DEFAULT_ROUTE` or `ADVERTISE_CUSTOM_PREFIX`. Default value is
     * `AVERTISE_DEFAULT_ROUTE`.
     */
    public readonly routingOptions!: pulumi.Output<string | undefined>;
    /**
     * Prefix List IDs.
     */
    public readonly routingPrefixListIds!: pulumi.Output<number[] | undefined>;
    /**
     * The ID of the scale group associated with the connector.
     */
    public readonly scaleGroupId!: pulumi.Output<string | undefined>;
    /**
     * The ID of the segment assoicated with the connector.
     */
    public readonly segmentId!: pulumi.Output<string>;
    /**
     * list of service tags from Azure. Providing a service tag here would result in service tag route configuration on VNET
     * route table, so that the traffic toward the service would directly steer towards those services, and would not go via
     * Alkira network.
     */
    public readonly serviceTags!: pulumi.Output<string[] | undefined>;
    /**
     * The size of the connector, one of `SMALL`, `MEDIUM`, `LARGE`, `2LARGE`, `4LARGE`, `5LARGE`, `10LARGE`, `20LARGE`.
     */
    public readonly size!: pulumi.Output<string>;
    /**
     * Configure routing options on specified VNET CIDR.
     */
    public readonly vnetCidrs!: pulumi.Output<outputs.ConnectorAzureVnetVnetCidr[] | undefined>;
    /**
     * Configure routing options on the specified VNET subnet.
     */
    public readonly vnetSubnets!: pulumi.Output<outputs.ConnectorAzureVnetVnetSubnet[] | undefined>;

    /**
     * Create a ConnectorAzureVnet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectorAzureVnetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectorAzureVnetArgs | ConnectorAzureVnetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectorAzureVnetState | undefined;
            resourceInputs["azureVnetId"] = state ? state.azureVnetId : undefined;
            resourceInputs["billingTagIds"] = state ? state.billingTagIds : undefined;
            resourceInputs["connectionMode"] = state ? state.connectionMode : undefined;
            resourceInputs["credentialId"] = state ? state.credentialId : undefined;
            resourceInputs["customerAsn"] = state ? state.customerAsn : undefined;
            resourceInputs["cxp"] = state ? state.cxp : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["failoverCxps"] = state ? state.failoverCxps : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["groupDirectInterConnector"] = state ? state.groupDirectInterConnector : undefined;
            resourceInputs["implicitGroupId"] = state ? state.implicitGroupId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["peeringGatewayCxpId"] = state ? state.peeringGatewayCxpId : undefined;
            resourceInputs["provisionState"] = state ? state.provisionState : undefined;
            resourceInputs["routingOptions"] = state ? state.routingOptions : undefined;
            resourceInputs["routingPrefixListIds"] = state ? state.routingPrefixListIds : undefined;
            resourceInputs["scaleGroupId"] = state ? state.scaleGroupId : undefined;
            resourceInputs["segmentId"] = state ? state.segmentId : undefined;
            resourceInputs["serviceTags"] = state ? state.serviceTags : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["vnetCidrs"] = state ? state.vnetCidrs : undefined;
            resourceInputs["vnetSubnets"] = state ? state.vnetSubnets : undefined;
        } else {
            const args = argsOrState as ConnectorAzureVnetArgs | undefined;
            if ((!args || args.azureVnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'azureVnetId'");
            }
            if ((!args || args.credentialId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'credentialId'");
            }
            if ((!args || args.cxp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cxp'");
            }
            if ((!args || args.segmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'segmentId'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            resourceInputs["azureVnetId"] = args ? args.azureVnetId : undefined;
            resourceInputs["billingTagIds"] = args ? args.billingTagIds : undefined;
            resourceInputs["connectionMode"] = args ? args.connectionMode : undefined;
            resourceInputs["credentialId"] = args ? args.credentialId : undefined;
            resourceInputs["customerAsn"] = args ? args.customerAsn : undefined;
            resourceInputs["cxp"] = args ? args.cxp : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["failoverCxps"] = args ? args.failoverCxps : undefined;
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["groupDirectInterConnector"] = args ? args.groupDirectInterConnector : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["peeringGatewayCxpId"] = args ? args.peeringGatewayCxpId : undefined;
            resourceInputs["routingOptions"] = args ? args.routingOptions : undefined;
            resourceInputs["routingPrefixListIds"] = args ? args.routingPrefixListIds : undefined;
            resourceInputs["scaleGroupId"] = args ? args.scaleGroupId : undefined;
            resourceInputs["segmentId"] = args ? args.segmentId : undefined;
            resourceInputs["serviceTags"] = args ? args.serviceTags : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["vnetCidrs"] = args ? args.vnetCidrs : undefined;
            resourceInputs["vnetSubnets"] = args ? args.vnetSubnets : undefined;
            resourceInputs["implicitGroupId"] = undefined /*out*/;
            resourceInputs["provisionState"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConnectorAzureVnet.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ConnectorAzureVnet resources.
 */
export interface ConnectorAzureVnetState {
    /**
     * Azure Virtual Network Id.
     */
    azureVnetId?: pulumi.Input<string>;
    /**
     * Tags for billing.
     */
    billingTagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The mode that connector will use to connect to the Alkira CXP. `VNET_GATEWAY` will connect with a Virtual Gateway,
     * `VNET_PEERING` will connect using an Alkira Transit Hub (ATH).
     */
    connectionMode?: pulumi.Input<string>;
    /**
     * ID of resource `credential_azure_vnet`.
     */
    credentialId?: pulumi.Input<string>;
    /**
     * A specific BGP ASN for the connector. This cannot be specified when `connection_mode` is `VNET_PEERING`. This field
     * cannot be updated once the connector has been provisioned. The ASN cannot be value that is [restricted by
     * Azure](https://learn.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-vpn-faq#bgp).
     */
    customerAsn?: pulumi.Input<number>;
    /**
     * The CXP where the connector should be provisioned.
     */
    cxp?: pulumi.Input<string>;
    /**
     * Is the connector enabled. Default is `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * A list of additional CXPs where the connector should be provisioned for failover.
     */
    failoverCxps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The group of the connector.
     */
    group?: pulumi.Input<string>;
    /**
     * The direct inter connector group associated with the connector
     */
    groupDirectInterConnector?: pulumi.Input<string>;
    /**
     * The ID of implicit group automaticaly created with the connector.
     */
    implicitGroupId?: pulumi.Input<number>;
    /**
     * The name of the connector.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the CXP peering gateway associated with the connector.
     */
    peeringGatewayCxpId?: pulumi.Input<number>;
    /**
     * The provision state of the connector.
     */
    provisionState?: pulumi.Input<string>;
    /**
     * Routing options for the entire VNET, either `ADVERTISE_DEFAULT_ROUTE` or `ADVERTISE_CUSTOM_PREFIX`. Default value is
     * `AVERTISE_DEFAULT_ROUTE`.
     */
    routingOptions?: pulumi.Input<string>;
    /**
     * Prefix List IDs.
     */
    routingPrefixListIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The ID of the scale group associated with the connector.
     */
    scaleGroupId?: pulumi.Input<string>;
    /**
     * The ID of the segment assoicated with the connector.
     */
    segmentId?: pulumi.Input<string>;
    /**
     * list of service tags from Azure. Providing a service tag here would result in service tag route configuration on VNET
     * route table, so that the traffic toward the service would directly steer towards those services, and would not go via
     * Alkira network.
     */
    serviceTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The size of the connector, one of `SMALL`, `MEDIUM`, `LARGE`, `2LARGE`, `4LARGE`, `5LARGE`, `10LARGE`, `20LARGE`.
     */
    size?: pulumi.Input<string>;
    /**
     * Configure routing options on specified VNET CIDR.
     */
    vnetCidrs?: pulumi.Input<pulumi.Input<inputs.ConnectorAzureVnetVnetCidr>[]>;
    /**
     * Configure routing options on the specified VNET subnet.
     */
    vnetSubnets?: pulumi.Input<pulumi.Input<inputs.ConnectorAzureVnetVnetSubnet>[]>;
}

/**
 * The set of arguments for constructing a ConnectorAzureVnet resource.
 */
export interface ConnectorAzureVnetArgs {
    /**
     * Azure Virtual Network Id.
     */
    azureVnetId: pulumi.Input<string>;
    /**
     * Tags for billing.
     */
    billingTagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The mode that connector will use to connect to the Alkira CXP. `VNET_GATEWAY` will connect with a Virtual Gateway,
     * `VNET_PEERING` will connect using an Alkira Transit Hub (ATH).
     */
    connectionMode?: pulumi.Input<string>;
    /**
     * ID of resource `credential_azure_vnet`.
     */
    credentialId: pulumi.Input<string>;
    /**
     * A specific BGP ASN for the connector. This cannot be specified when `connection_mode` is `VNET_PEERING`. This field
     * cannot be updated once the connector has been provisioned. The ASN cannot be value that is [restricted by
     * Azure](https://learn.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-vpn-faq#bgp).
     */
    customerAsn?: pulumi.Input<number>;
    /**
     * The CXP where the connector should be provisioned.
     */
    cxp: pulumi.Input<string>;
    /**
     * Is the connector enabled. Default is `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * A list of additional CXPs where the connector should be provisioned for failover.
     */
    failoverCxps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The group of the connector.
     */
    group?: pulumi.Input<string>;
    /**
     * The direct inter connector group associated with the connector
     */
    groupDirectInterConnector?: pulumi.Input<string>;
    /**
     * The name of the connector.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the CXP peering gateway associated with the connector.
     */
    peeringGatewayCxpId?: pulumi.Input<number>;
    /**
     * Routing options for the entire VNET, either `ADVERTISE_DEFAULT_ROUTE` or `ADVERTISE_CUSTOM_PREFIX`. Default value is
     * `AVERTISE_DEFAULT_ROUTE`.
     */
    routingOptions?: pulumi.Input<string>;
    /**
     * Prefix List IDs.
     */
    routingPrefixListIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The ID of the scale group associated with the connector.
     */
    scaleGroupId?: pulumi.Input<string>;
    /**
     * The ID of the segment assoicated with the connector.
     */
    segmentId: pulumi.Input<string>;
    /**
     * list of service tags from Azure. Providing a service tag here would result in service tag route configuration on VNET
     * route table, so that the traffic toward the service would directly steer towards those services, and would not go via
     * Alkira network.
     */
    serviceTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The size of the connector, one of `SMALL`, `MEDIUM`, `LARGE`, `2LARGE`, `4LARGE`, `5LARGE`, `10LARGE`, `20LARGE`.
     */
    size: pulumi.Input<string>;
    /**
     * Configure routing options on specified VNET CIDR.
     */
    vnetCidrs?: pulumi.Input<pulumi.Input<inputs.ConnectorAzureVnetVnetCidr>[]>;
    /**
     * Configure routing options on the specified VNET subnet.
     */
    vnetSubnets?: pulumi.Input<pulumi.Input<inputs.ConnectorAzureVnetVnetSubnet>[]>;
}
