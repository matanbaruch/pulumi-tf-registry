// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ServiceCiscoFtdv extends pulumi.CustomResource {
    /**
     * Get an existing ServiceCiscoFtdv resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceCiscoFtdvState, opts?: pulumi.CustomResourceOptions): ServiceCiscoFtdv {
        return new ServiceCiscoFtdv(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alkira:index/serviceCiscoFtdv:ServiceCiscoFtdv';

    /**
     * Returns true if the given object is an instance of ServiceCiscoFtdv.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceCiscoFtdv {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceCiscoFtdv.__pulumiType;
    }

    /**
     * Indicate if `auto_scale` should be enabled for your Cisco FTDv service. `ON` and `OFF` are accepted values. Default is
     * `OFF`.
     */
    public readonly autoScale!: pulumi.Output<string | undefined>;
    /**
     * IDs of billing tags.
     */
    public readonly billingTagIds!: pulumi.Output<number[] | undefined>;
    /**
     * The CXP where the service should be provisioned.
     */
    public readonly cxp!: pulumi.Output<string>;
    /**
     * The Firepower Management Center options.
     */
    public readonly firepowerManagementCenters!: pulumi.Output<outputs.ServiceCiscoFtdvFirepowerManagementCenter[]>;
    /**
     * The ID of the `alkira.ListGlobalCidr` to be associated with the service. The list must be tagged with `CISCO FTDV`. CIDR
     * must be at least `/25`.
     */
    public readonly globalCidrListId!: pulumi.Output<number>;
    public readonly instances!: pulumi.Output<outputs.ServiceCiscoFtdvInstance[]>;
    /**
     * The maximum number of instances that should be deployed.
     */
    public readonly maxInstanceCount!: pulumi.Output<number>;
    /**
     * The minimum number of instances that should be deployed.
     */
    public readonly minInstanceCount!: pulumi.Output<number | undefined>;
    /**
     * The name of the service.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The provision state of the resource.
     */
    public /*out*/ readonly provisionState!: pulumi.Output<string>;
    /**
     * IDs of segments associated with the service.
     */
    public readonly segmentIds!: pulumi.Output<string[]>;
    /**
     * The segment options used by the Cisco FTDv.
     */
    public readonly segmentOptions!: pulumi.Output<outputs.ServiceCiscoFtdvSegmentOption[] | undefined>;
    /**
     * The size of the service, one of `SMALL`, `MEDIUM`, `LARGE`, `2LARGE`.
     */
    public readonly size!: pulumi.Output<string>;
    /**
     * The tunnel protocol. Default is `IPSEC`.
     */
    public readonly tunnelProtocol!: pulumi.Output<string | undefined>;

    /**
     * Create a ServiceCiscoFtdv resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceCiscoFtdvArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceCiscoFtdvArgs | ServiceCiscoFtdvState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceCiscoFtdvState | undefined;
            resourceInputs["autoScale"] = state ? state.autoScale : undefined;
            resourceInputs["billingTagIds"] = state ? state.billingTagIds : undefined;
            resourceInputs["cxp"] = state ? state.cxp : undefined;
            resourceInputs["firepowerManagementCenters"] = state ? state.firepowerManagementCenters : undefined;
            resourceInputs["globalCidrListId"] = state ? state.globalCidrListId : undefined;
            resourceInputs["instances"] = state ? state.instances : undefined;
            resourceInputs["maxInstanceCount"] = state ? state.maxInstanceCount : undefined;
            resourceInputs["minInstanceCount"] = state ? state.minInstanceCount : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["provisionState"] = state ? state.provisionState : undefined;
            resourceInputs["segmentIds"] = state ? state.segmentIds : undefined;
            resourceInputs["segmentOptions"] = state ? state.segmentOptions : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["tunnelProtocol"] = state ? state.tunnelProtocol : undefined;
        } else {
            const args = argsOrState as ServiceCiscoFtdvArgs | undefined;
            if ((!args || args.cxp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cxp'");
            }
            if ((!args || args.firepowerManagementCenters === undefined) && !opts.urn) {
                throw new Error("Missing required property 'firepowerManagementCenters'");
            }
            if ((!args || args.globalCidrListId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'globalCidrListId'");
            }
            if ((!args || args.instances === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instances'");
            }
            if ((!args || args.maxInstanceCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maxInstanceCount'");
            }
            if ((!args || args.segmentIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'segmentIds'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            resourceInputs["autoScale"] = args ? args.autoScale : undefined;
            resourceInputs["billingTagIds"] = args ? args.billingTagIds : undefined;
            resourceInputs["cxp"] = args ? args.cxp : undefined;
            resourceInputs["firepowerManagementCenters"] = args ? args.firepowerManagementCenters : undefined;
            resourceInputs["globalCidrListId"] = args ? args.globalCidrListId : undefined;
            resourceInputs["instances"] = args ? args.instances : undefined;
            resourceInputs["maxInstanceCount"] = args ? args.maxInstanceCount : undefined;
            resourceInputs["minInstanceCount"] = args ? args.minInstanceCount : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["segmentIds"] = args ? args.segmentIds : undefined;
            resourceInputs["segmentOptions"] = args ? args.segmentOptions : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["tunnelProtocol"] = args ? args.tunnelProtocol : undefined;
            resourceInputs["provisionState"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceCiscoFtdv.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ServiceCiscoFtdv resources.
 */
export interface ServiceCiscoFtdvState {
    /**
     * Indicate if `auto_scale` should be enabled for your Cisco FTDv service. `ON` and `OFF` are accepted values. Default is
     * `OFF`.
     */
    autoScale?: pulumi.Input<string>;
    /**
     * IDs of billing tags.
     */
    billingTagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The CXP where the service should be provisioned.
     */
    cxp?: pulumi.Input<string>;
    /**
     * The Firepower Management Center options.
     */
    firepowerManagementCenters?: pulumi.Input<pulumi.Input<inputs.ServiceCiscoFtdvFirepowerManagementCenter>[]>;
    /**
     * The ID of the `alkira.ListGlobalCidr` to be associated with the service. The list must be tagged with `CISCO FTDV`. CIDR
     * must be at least `/25`.
     */
    globalCidrListId?: pulumi.Input<number>;
    instances?: pulumi.Input<pulumi.Input<inputs.ServiceCiscoFtdvInstance>[]>;
    /**
     * The maximum number of instances that should be deployed.
     */
    maxInstanceCount?: pulumi.Input<number>;
    /**
     * The minimum number of instances that should be deployed.
     */
    minInstanceCount?: pulumi.Input<number>;
    /**
     * The name of the service.
     */
    name?: pulumi.Input<string>;
    /**
     * The provision state of the resource.
     */
    provisionState?: pulumi.Input<string>;
    /**
     * IDs of segments associated with the service.
     */
    segmentIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The segment options used by the Cisco FTDv.
     */
    segmentOptions?: pulumi.Input<pulumi.Input<inputs.ServiceCiscoFtdvSegmentOption>[]>;
    /**
     * The size of the service, one of `SMALL`, `MEDIUM`, `LARGE`, `2LARGE`.
     */
    size?: pulumi.Input<string>;
    /**
     * The tunnel protocol. Default is `IPSEC`.
     */
    tunnelProtocol?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceCiscoFtdv resource.
 */
export interface ServiceCiscoFtdvArgs {
    /**
     * Indicate if `auto_scale` should be enabled for your Cisco FTDv service. `ON` and `OFF` are accepted values. Default is
     * `OFF`.
     */
    autoScale?: pulumi.Input<string>;
    /**
     * IDs of billing tags.
     */
    billingTagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The CXP where the service should be provisioned.
     */
    cxp: pulumi.Input<string>;
    /**
     * The Firepower Management Center options.
     */
    firepowerManagementCenters: pulumi.Input<pulumi.Input<inputs.ServiceCiscoFtdvFirepowerManagementCenter>[]>;
    /**
     * The ID of the `alkira.ListGlobalCidr` to be associated with the service. The list must be tagged with `CISCO FTDV`. CIDR
     * must be at least `/25`.
     */
    globalCidrListId: pulumi.Input<number>;
    instances: pulumi.Input<pulumi.Input<inputs.ServiceCiscoFtdvInstance>[]>;
    /**
     * The maximum number of instances that should be deployed.
     */
    maxInstanceCount: pulumi.Input<number>;
    /**
     * The minimum number of instances that should be deployed.
     */
    minInstanceCount?: pulumi.Input<number>;
    /**
     * The name of the service.
     */
    name?: pulumi.Input<string>;
    /**
     * IDs of segments associated with the service.
     */
    segmentIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The segment options used by the Cisco FTDv.
     */
    segmentOptions?: pulumi.Input<pulumi.Input<inputs.ServiceCiscoFtdvSegmentOption>[]>;
    /**
     * The size of the service, one of `SMALL`, `MEDIUM`, `LARGE`, `2LARGE`.
     */
    size: pulumi.Input<string>;
    /**
     * The tunnel protocol. Default is `IPSEC`.
     */
    tunnelProtocol?: pulumi.Input<string>;
}
