// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ServicePan extends pulumi.CustomResource {
    /**
     * Get an existing ServicePan resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServicePanState, opts?: pulumi.CustomResourceOptions): ServicePan {
        return new ServicePan(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alkira:index/servicePan:ServicePan';

    /**
     * Returns true if the given object is an instance of ServicePan.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServicePan {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServicePan.__pulumiType;
    }

    /**
     * IDs of billing tags to be associated with the service.
     */
    public readonly billingTagIds!: pulumi.Output<number[] | undefined>;
    /**
     * The software image bundle that would be used forPAN instance deployment. This is applicable for
     * licenseType`PAY_AS_YOU_GO` only. If not provided, the default`PAN_VM_300_BUNDLE_2` would be used. However
     * `PAN_VM_300_BUNDLE_2`is legacy bundle and is not supported on AWS. It is recommendedto use `VM_SERIES_BUNDLE_1` and
     * `VM_SERIES_BUNDLE_2` (supports Global Protect).
     */
    public readonly bundle!: pulumi.Output<string | undefined>;
    /**
     * ID of PAN credential.
     */
    public /*out*/ readonly credentialId!: pulumi.Output<string>;
    /**
     * The CXP where the service should be provisioned.
     */
    public readonly cxp!: pulumi.Output<string>;
    /**
     * Enable global protect option or not. Default is `false`
     */
    public readonly globalProtectEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Segment options for segments that are already associated with the service. Options should apply. If
     * `global_protect_enabled` is set to false, `global_protect_segment_options` shound not be included in your request.
     */
    public readonly globalProtectSegmentOptions!: pulumi.Output<outputs.ServicePanGlobalProtectSegmentOption[] | undefined>;
    public readonly instances!: pulumi.Output<outputs.ServicePanInstance[]>;
    /**
     * PAN sub license type, either `CREDIT_BASED` or `MODEL_BASED`. (BETA)
     */
    public readonly licenseSubType!: pulumi.Output<string | undefined>;
    /**
     * PAN license type, either `BRING_YOUR_OWN` or `PAY_AS_YOU_GO`.
     */
    public readonly licenseType!: pulumi.Output<string>;
    /**
     * Management Segment ID.
     */
    public readonly managementSegmentId!: pulumi.Output<number>;
    /**
     * Master Key for PAN instances.
     */
    public readonly masterKey!: pulumi.Output<string | undefined>;
    /**
     * Enable Master Key for PAN instances or not. It's default to `false`.
     */
    public readonly masterKeyEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * PAN Master Key Expiry. The date should be in format of `YYYY-MM-DD`, e.g. `2000-01-01`.
     */
    public readonly masterKeyExpiry!: pulumi.Output<string | undefined>;
    /**
     * Max number of Panorama instances for auto scale.
     */
    public readonly maxInstanceCount!: pulumi.Output<number>;
    /**
     * Minimal number of Panorama instances for auto scale. Default value is `0`.
     */
    public readonly minInstanceCount!: pulumi.Output<number | undefined>;
    /**
     * Name of the PAN service.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * PAN Panorama license Key.
     */
    public readonly panLicenseKey!: pulumi.Output<string | undefined>;
    /**
     * PAN Panorama password.
     */
    public readonly panPassword!: pulumi.Output<string>;
    /**
     * PAN Panorama username. For AWS, username should be `admin`. For AZURE, it should be `akadmin`.
     */
    public readonly panUsername!: pulumi.Output<string>;
    /**
     * Panorama device group.
     */
    public readonly panoramaDeviceGroup!: pulumi.Output<string | undefined>;
    /**
     * Enable Panorama or not. Default value is `false`.
     */
    public readonly panoramaEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Panorama IP addresses.
     */
    public readonly panoramaIpAddresses!: pulumi.Output<string[] | undefined>;
    /**
     * Panorama Template.
     */
    public readonly panoramaTemplate!: pulumi.Output<string | undefined>;
    /**
     * The provision state of the service.
     */
    public /*out*/ readonly provisionState!: pulumi.Output<string>;
    /**
     * PAN Registration PIN Expiry. The date should be in format of `YYYY-MM-DD`, e.g. `2000-01-01`.
     */
    public readonly registrationPinExpiry!: pulumi.Output<string>;
    /**
     * PAN Registration PIN ID.
     */
    public readonly registrationPinId!: pulumi.Output<string>;
    /**
     * PAN Registration PIN Value.
     */
    public readonly registrationPinValue!: pulumi.Output<string>;
    /**
     * IDs of segments associated with the service.
     */
    public readonly segmentIds!: pulumi.Output<number[]>;
    /**
     * The segment options as used by your PAN firewall.
     */
    public readonly segmentOptions!: pulumi.Output<outputs.ServicePanSegmentOption[] | undefined>;
    /**
     * The size of the service, one of `SMALL`, `MEDIUM`, `LARGE`, `2LARGE`, `4LARGE`, `5LARGE`, `10LARGE`, `20LARGE`.
     */
    public readonly size!: pulumi.Output<string>;
    /**
     * Tunnel Protocol, default to `IPSEC`, could be either `IPSEC` or `GRE`.
     */
    public readonly tunnelProtocol!: pulumi.Output<string | undefined>;
    /**
     * The type of the PAN firewall. Either 'VM-300', 'VM-500' or 'VM-700'
     */
    public readonly type!: pulumi.Output<string | undefined>;
    /**
     * The version of the PAN firewall. Please check Alkira Portal for all supported versions.
     */
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a ServicePan resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServicePanArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServicePanArgs | ServicePanState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServicePanState | undefined;
            resourceInputs["billingTagIds"] = state ? state.billingTagIds : undefined;
            resourceInputs["bundle"] = state ? state.bundle : undefined;
            resourceInputs["credentialId"] = state ? state.credentialId : undefined;
            resourceInputs["cxp"] = state ? state.cxp : undefined;
            resourceInputs["globalProtectEnabled"] = state ? state.globalProtectEnabled : undefined;
            resourceInputs["globalProtectSegmentOptions"] = state ? state.globalProtectSegmentOptions : undefined;
            resourceInputs["instances"] = state ? state.instances : undefined;
            resourceInputs["licenseSubType"] = state ? state.licenseSubType : undefined;
            resourceInputs["licenseType"] = state ? state.licenseType : undefined;
            resourceInputs["managementSegmentId"] = state ? state.managementSegmentId : undefined;
            resourceInputs["masterKey"] = state ? state.masterKey : undefined;
            resourceInputs["masterKeyEnabled"] = state ? state.masterKeyEnabled : undefined;
            resourceInputs["masterKeyExpiry"] = state ? state.masterKeyExpiry : undefined;
            resourceInputs["maxInstanceCount"] = state ? state.maxInstanceCount : undefined;
            resourceInputs["minInstanceCount"] = state ? state.minInstanceCount : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["panLicenseKey"] = state ? state.panLicenseKey : undefined;
            resourceInputs["panPassword"] = state ? state.panPassword : undefined;
            resourceInputs["panUsername"] = state ? state.panUsername : undefined;
            resourceInputs["panoramaDeviceGroup"] = state ? state.panoramaDeviceGroup : undefined;
            resourceInputs["panoramaEnabled"] = state ? state.panoramaEnabled : undefined;
            resourceInputs["panoramaIpAddresses"] = state ? state.panoramaIpAddresses : undefined;
            resourceInputs["panoramaTemplate"] = state ? state.panoramaTemplate : undefined;
            resourceInputs["provisionState"] = state ? state.provisionState : undefined;
            resourceInputs["registrationPinExpiry"] = state ? state.registrationPinExpiry : undefined;
            resourceInputs["registrationPinId"] = state ? state.registrationPinId : undefined;
            resourceInputs["registrationPinValue"] = state ? state.registrationPinValue : undefined;
            resourceInputs["segmentIds"] = state ? state.segmentIds : undefined;
            resourceInputs["segmentOptions"] = state ? state.segmentOptions : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["tunnelProtocol"] = state ? state.tunnelProtocol : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as ServicePanArgs | undefined;
            if ((!args || args.cxp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cxp'");
            }
            if ((!args || args.instances === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instances'");
            }
            if ((!args || args.licenseType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'licenseType'");
            }
            if ((!args || args.managementSegmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managementSegmentId'");
            }
            if ((!args || args.maxInstanceCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maxInstanceCount'");
            }
            if ((!args || args.panPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'panPassword'");
            }
            if ((!args || args.panUsername === undefined) && !opts.urn) {
                throw new Error("Missing required property 'panUsername'");
            }
            if ((!args || args.registrationPinExpiry === undefined) && !opts.urn) {
                throw new Error("Missing required property 'registrationPinExpiry'");
            }
            if ((!args || args.registrationPinId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'registrationPinId'");
            }
            if ((!args || args.registrationPinValue === undefined) && !opts.urn) {
                throw new Error("Missing required property 'registrationPinValue'");
            }
            if ((!args || args.segmentIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'segmentIds'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["billingTagIds"] = args ? args.billingTagIds : undefined;
            resourceInputs["bundle"] = args ? args.bundle : undefined;
            resourceInputs["cxp"] = args ? args.cxp : undefined;
            resourceInputs["globalProtectEnabled"] = args ? args.globalProtectEnabled : undefined;
            resourceInputs["globalProtectSegmentOptions"] = args ? args.globalProtectSegmentOptions : undefined;
            resourceInputs["instances"] = args ? args.instances : undefined;
            resourceInputs["licenseSubType"] = args ? args.licenseSubType : undefined;
            resourceInputs["licenseType"] = args ? args.licenseType : undefined;
            resourceInputs["managementSegmentId"] = args ? args.managementSegmentId : undefined;
            resourceInputs["masterKey"] = args ? args.masterKey : undefined;
            resourceInputs["masterKeyEnabled"] = args ? args.masterKeyEnabled : undefined;
            resourceInputs["masterKeyExpiry"] = args ? args.masterKeyExpiry : undefined;
            resourceInputs["maxInstanceCount"] = args ? args.maxInstanceCount : undefined;
            resourceInputs["minInstanceCount"] = args ? args.minInstanceCount : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["panLicenseKey"] = args ? args.panLicenseKey : undefined;
            resourceInputs["panPassword"] = args ? args.panPassword : undefined;
            resourceInputs["panUsername"] = args ? args.panUsername : undefined;
            resourceInputs["panoramaDeviceGroup"] = args ? args.panoramaDeviceGroup : undefined;
            resourceInputs["panoramaEnabled"] = args ? args.panoramaEnabled : undefined;
            resourceInputs["panoramaIpAddresses"] = args ? args.panoramaIpAddresses : undefined;
            resourceInputs["panoramaTemplate"] = args ? args.panoramaTemplate : undefined;
            resourceInputs["registrationPinExpiry"] = args ? args.registrationPinExpiry : undefined;
            resourceInputs["registrationPinId"] = args ? args.registrationPinId : undefined;
            resourceInputs["registrationPinValue"] = args ? args.registrationPinValue : undefined;
            resourceInputs["segmentIds"] = args ? args.segmentIds : undefined;
            resourceInputs["segmentOptions"] = args ? args.segmentOptions : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["tunnelProtocol"] = args ? args.tunnelProtocol : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["credentialId"] = undefined /*out*/;
            resourceInputs["provisionState"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServicePan.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ServicePan resources.
 */
export interface ServicePanState {
    /**
     * IDs of billing tags to be associated with the service.
     */
    billingTagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The software image bundle that would be used forPAN instance deployment. This is applicable for
     * licenseType`PAY_AS_YOU_GO` only. If not provided, the default`PAN_VM_300_BUNDLE_2` would be used. However
     * `PAN_VM_300_BUNDLE_2`is legacy bundle and is not supported on AWS. It is recommendedto use `VM_SERIES_BUNDLE_1` and
     * `VM_SERIES_BUNDLE_2` (supports Global Protect).
     */
    bundle?: pulumi.Input<string>;
    /**
     * ID of PAN credential.
     */
    credentialId?: pulumi.Input<string>;
    /**
     * The CXP where the service should be provisioned.
     */
    cxp?: pulumi.Input<string>;
    /**
     * Enable global protect option or not. Default is `false`
     */
    globalProtectEnabled?: pulumi.Input<boolean>;
    /**
     * Segment options for segments that are already associated with the service. Options should apply. If
     * `global_protect_enabled` is set to false, `global_protect_segment_options` shound not be included in your request.
     */
    globalProtectSegmentOptions?: pulumi.Input<pulumi.Input<inputs.ServicePanGlobalProtectSegmentOption>[]>;
    instances?: pulumi.Input<pulumi.Input<inputs.ServicePanInstance>[]>;
    /**
     * PAN sub license type, either `CREDIT_BASED` or `MODEL_BASED`. (BETA)
     */
    licenseSubType?: pulumi.Input<string>;
    /**
     * PAN license type, either `BRING_YOUR_OWN` or `PAY_AS_YOU_GO`.
     */
    licenseType?: pulumi.Input<string>;
    /**
     * Management Segment ID.
     */
    managementSegmentId?: pulumi.Input<number>;
    /**
     * Master Key for PAN instances.
     */
    masterKey?: pulumi.Input<string>;
    /**
     * Enable Master Key for PAN instances or not. It's default to `false`.
     */
    masterKeyEnabled?: pulumi.Input<boolean>;
    /**
     * PAN Master Key Expiry. The date should be in format of `YYYY-MM-DD`, e.g. `2000-01-01`.
     */
    masterKeyExpiry?: pulumi.Input<string>;
    /**
     * Max number of Panorama instances for auto scale.
     */
    maxInstanceCount?: pulumi.Input<number>;
    /**
     * Minimal number of Panorama instances for auto scale. Default value is `0`.
     */
    minInstanceCount?: pulumi.Input<number>;
    /**
     * Name of the PAN service.
     */
    name?: pulumi.Input<string>;
    /**
     * PAN Panorama license Key.
     */
    panLicenseKey?: pulumi.Input<string>;
    /**
     * PAN Panorama password.
     */
    panPassword?: pulumi.Input<string>;
    /**
     * PAN Panorama username. For AWS, username should be `admin`. For AZURE, it should be `akadmin`.
     */
    panUsername?: pulumi.Input<string>;
    /**
     * Panorama device group.
     */
    panoramaDeviceGroup?: pulumi.Input<string>;
    /**
     * Enable Panorama or not. Default value is `false`.
     */
    panoramaEnabled?: pulumi.Input<boolean>;
    /**
     * Panorama IP addresses.
     */
    panoramaIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Panorama Template.
     */
    panoramaTemplate?: pulumi.Input<string>;
    /**
     * The provision state of the service.
     */
    provisionState?: pulumi.Input<string>;
    /**
     * PAN Registration PIN Expiry. The date should be in format of `YYYY-MM-DD`, e.g. `2000-01-01`.
     */
    registrationPinExpiry?: pulumi.Input<string>;
    /**
     * PAN Registration PIN ID.
     */
    registrationPinId?: pulumi.Input<string>;
    /**
     * PAN Registration PIN Value.
     */
    registrationPinValue?: pulumi.Input<string>;
    /**
     * IDs of segments associated with the service.
     */
    segmentIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The segment options as used by your PAN firewall.
     */
    segmentOptions?: pulumi.Input<pulumi.Input<inputs.ServicePanSegmentOption>[]>;
    /**
     * The size of the service, one of `SMALL`, `MEDIUM`, `LARGE`, `2LARGE`, `4LARGE`, `5LARGE`, `10LARGE`, `20LARGE`.
     */
    size?: pulumi.Input<string>;
    /**
     * Tunnel Protocol, default to `IPSEC`, could be either `IPSEC` or `GRE`.
     */
    tunnelProtocol?: pulumi.Input<string>;
    /**
     * The type of the PAN firewall. Either 'VM-300', 'VM-500' or 'VM-700'
     */
    type?: pulumi.Input<string>;
    /**
     * The version of the PAN firewall. Please check Alkira Portal for all supported versions.
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServicePan resource.
 */
export interface ServicePanArgs {
    /**
     * IDs of billing tags to be associated with the service.
     */
    billingTagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The software image bundle that would be used forPAN instance deployment. This is applicable for
     * licenseType`PAY_AS_YOU_GO` only. If not provided, the default`PAN_VM_300_BUNDLE_2` would be used. However
     * `PAN_VM_300_BUNDLE_2`is legacy bundle and is not supported on AWS. It is recommendedto use `VM_SERIES_BUNDLE_1` and
     * `VM_SERIES_BUNDLE_2` (supports Global Protect).
     */
    bundle?: pulumi.Input<string>;
    /**
     * The CXP where the service should be provisioned.
     */
    cxp: pulumi.Input<string>;
    /**
     * Enable global protect option or not. Default is `false`
     */
    globalProtectEnabled?: pulumi.Input<boolean>;
    /**
     * Segment options for segments that are already associated with the service. Options should apply. If
     * `global_protect_enabled` is set to false, `global_protect_segment_options` shound not be included in your request.
     */
    globalProtectSegmentOptions?: pulumi.Input<pulumi.Input<inputs.ServicePanGlobalProtectSegmentOption>[]>;
    instances: pulumi.Input<pulumi.Input<inputs.ServicePanInstance>[]>;
    /**
     * PAN sub license type, either `CREDIT_BASED` or `MODEL_BASED`. (BETA)
     */
    licenseSubType?: pulumi.Input<string>;
    /**
     * PAN license type, either `BRING_YOUR_OWN` or `PAY_AS_YOU_GO`.
     */
    licenseType: pulumi.Input<string>;
    /**
     * Management Segment ID.
     */
    managementSegmentId: pulumi.Input<number>;
    /**
     * Master Key for PAN instances.
     */
    masterKey?: pulumi.Input<string>;
    /**
     * Enable Master Key for PAN instances or not. It's default to `false`.
     */
    masterKeyEnabled?: pulumi.Input<boolean>;
    /**
     * PAN Master Key Expiry. The date should be in format of `YYYY-MM-DD`, e.g. `2000-01-01`.
     */
    masterKeyExpiry?: pulumi.Input<string>;
    /**
     * Max number of Panorama instances for auto scale.
     */
    maxInstanceCount: pulumi.Input<number>;
    /**
     * Minimal number of Panorama instances for auto scale. Default value is `0`.
     */
    minInstanceCount?: pulumi.Input<number>;
    /**
     * Name of the PAN service.
     */
    name?: pulumi.Input<string>;
    /**
     * PAN Panorama license Key.
     */
    panLicenseKey?: pulumi.Input<string>;
    /**
     * PAN Panorama password.
     */
    panPassword: pulumi.Input<string>;
    /**
     * PAN Panorama username. For AWS, username should be `admin`. For AZURE, it should be `akadmin`.
     */
    panUsername: pulumi.Input<string>;
    /**
     * Panorama device group.
     */
    panoramaDeviceGroup?: pulumi.Input<string>;
    /**
     * Enable Panorama or not. Default value is `false`.
     */
    panoramaEnabled?: pulumi.Input<boolean>;
    /**
     * Panorama IP addresses.
     */
    panoramaIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Panorama Template.
     */
    panoramaTemplate?: pulumi.Input<string>;
    /**
     * PAN Registration PIN Expiry. The date should be in format of `YYYY-MM-DD`, e.g. `2000-01-01`.
     */
    registrationPinExpiry: pulumi.Input<string>;
    /**
     * PAN Registration PIN ID.
     */
    registrationPinId: pulumi.Input<string>;
    /**
     * PAN Registration PIN Value.
     */
    registrationPinValue: pulumi.Input<string>;
    /**
     * IDs of segments associated with the service.
     */
    segmentIds: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The segment options as used by your PAN firewall.
     */
    segmentOptions?: pulumi.Input<pulumi.Input<inputs.ServicePanSegmentOption>[]>;
    /**
     * The size of the service, one of `SMALL`, `MEDIUM`, `LARGE`, `2LARGE`, `4LARGE`, `5LARGE`, `10LARGE`, `20LARGE`.
     */
    size: pulumi.Input<string>;
    /**
     * Tunnel Protocol, default to `IPSEC`, could be either `IPSEC` or `GRE`.
     */
    tunnelProtocol?: pulumi.Input<string>;
    /**
     * The type of the PAN firewall. Either 'VM-300', 'VM-500' or 'VM-700'
     */
    type?: pulumi.Input<string>;
    /**
     * The version of the PAN firewall. Please check Alkira Portal for all supported versions.
     */
    version: pulumi.Input<string>;
}
