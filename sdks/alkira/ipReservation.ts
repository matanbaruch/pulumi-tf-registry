// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class IpReservation extends pulumi.CustomResource {
    /**
     * Get an existing IpReservation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IpReservationState, opts?: pulumi.CustomResourceOptions): IpReservation {
        return new IpReservation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alkira:index/ipReservation:IpReservation';

    /**
     * Returns true if the given object is an instance of IpReservation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IpReservation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IpReservation.__pulumiType;
    }

    /**
     * The CXP of the IP Reservation.
     */
    public readonly cxp!: pulumi.Output<string>;
    /**
     * The value could be either `CUSTOMER` or `CXP`. This is required when `prefix_len` is `30` or the `prefix` is a `/30`.
     * This field determines which IP from the given or the computed `/30` prefix is assigned to the customer end of the tunnel
     * and which IP is assigned to the CXP end of the tunnel.
     */
    public readonly firstIpAssignment!: pulumi.Output<string | undefined>;
    /**
     * The name of the IP Reservation.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the node that the IP Reservation is assigned to. This must be provided when the given or computed `prefix` is
     * `/30`. When the `prefix` is `/32`then this field determines whether the IP address will be assigned to the customer end
     * or the CXP end.
     */
    public readonly nodeId!: pulumi.Output<string | undefined>;
    /**
     * The IP Prefix of the IP Reservation. If this is specified, both `prefix_type` and `prefix_len` will be ignored.
     */
    public readonly prefix!: pulumi.Output<string | undefined>;
    /**
     * The IP Prefix length of the IP Reservation.
     */
    public readonly prefixLen!: pulumi.Output<number | undefined>;
    /**
     * The IP Prefix type of the IP Reservation. The value could be `SEGMENT`, `APIPA`, `AZURE_APIPA` and `PUBLIC`.
     */
    public readonly prefixType!: pulumi.Output<string>;
    /**
     * The provisioning state of the resource.
     */
    public /*out*/ readonly provisionState!: pulumi.Output<string>;
    /**
     * The ID of the Scale Group.
     */
    public readonly scaleGroupId!: pulumi.Output<string>;
    /**
     * The segment ID which the IP Reservation is to be used.
     */
    public readonly segmentId!: pulumi.Output<string>;
    /**
     * The type of the IP Reservation. The value could be either `PUBLIC` or `OVERLAY`. `PUBLIC` could be only created by
     * Alkira.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a IpReservation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IpReservationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IpReservationArgs | IpReservationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IpReservationState | undefined;
            resourceInputs["cxp"] = state ? state.cxp : undefined;
            resourceInputs["firstIpAssignment"] = state ? state.firstIpAssignment : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeId"] = state ? state.nodeId : undefined;
            resourceInputs["prefix"] = state ? state.prefix : undefined;
            resourceInputs["prefixLen"] = state ? state.prefixLen : undefined;
            resourceInputs["prefixType"] = state ? state.prefixType : undefined;
            resourceInputs["provisionState"] = state ? state.provisionState : undefined;
            resourceInputs["scaleGroupId"] = state ? state.scaleGroupId : undefined;
            resourceInputs["segmentId"] = state ? state.segmentId : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as IpReservationArgs | undefined;
            if ((!args || args.cxp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cxp'");
            }
            if ((!args || args.prefixType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'prefixType'");
            }
            if ((!args || args.scaleGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scaleGroupId'");
            }
            if ((!args || args.segmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'segmentId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["cxp"] = args ? args.cxp : undefined;
            resourceInputs["firstIpAssignment"] = args ? args.firstIpAssignment : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeId"] = args ? args.nodeId : undefined;
            resourceInputs["prefix"] = args ? args.prefix : undefined;
            resourceInputs["prefixLen"] = args ? args.prefixLen : undefined;
            resourceInputs["prefixType"] = args ? args.prefixType : undefined;
            resourceInputs["scaleGroupId"] = args ? args.scaleGroupId : undefined;
            resourceInputs["segmentId"] = args ? args.segmentId : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["provisionState"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IpReservation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IpReservation resources.
 */
export interface IpReservationState {
    /**
     * The CXP of the IP Reservation.
     */
    cxp?: pulumi.Input<string>;
    /**
     * The value could be either `CUSTOMER` or `CXP`. This is required when `prefix_len` is `30` or the `prefix` is a `/30`.
     * This field determines which IP from the given or the computed `/30` prefix is assigned to the customer end of the tunnel
     * and which IP is assigned to the CXP end of the tunnel.
     */
    firstIpAssignment?: pulumi.Input<string>;
    /**
     * The name of the IP Reservation.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the node that the IP Reservation is assigned to. This must be provided when the given or computed `prefix` is
     * `/30`. When the `prefix` is `/32`then this field determines whether the IP address will be assigned to the customer end
     * or the CXP end.
     */
    nodeId?: pulumi.Input<string>;
    /**
     * The IP Prefix of the IP Reservation. If this is specified, both `prefix_type` and `prefix_len` will be ignored.
     */
    prefix?: pulumi.Input<string>;
    /**
     * The IP Prefix length of the IP Reservation.
     */
    prefixLen?: pulumi.Input<number>;
    /**
     * The IP Prefix type of the IP Reservation. The value could be `SEGMENT`, `APIPA`, `AZURE_APIPA` and `PUBLIC`.
     */
    prefixType?: pulumi.Input<string>;
    /**
     * The provisioning state of the resource.
     */
    provisionState?: pulumi.Input<string>;
    /**
     * The ID of the Scale Group.
     */
    scaleGroupId?: pulumi.Input<string>;
    /**
     * The segment ID which the IP Reservation is to be used.
     */
    segmentId?: pulumi.Input<string>;
    /**
     * The type of the IP Reservation. The value could be either `PUBLIC` or `OVERLAY`. `PUBLIC` could be only created by
     * Alkira.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IpReservation resource.
 */
export interface IpReservationArgs {
    /**
     * The CXP of the IP Reservation.
     */
    cxp: pulumi.Input<string>;
    /**
     * The value could be either `CUSTOMER` or `CXP`. This is required when `prefix_len` is `30` or the `prefix` is a `/30`.
     * This field determines which IP from the given or the computed `/30` prefix is assigned to the customer end of the tunnel
     * and which IP is assigned to the CXP end of the tunnel.
     */
    firstIpAssignment?: pulumi.Input<string>;
    /**
     * The name of the IP Reservation.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the node that the IP Reservation is assigned to. This must be provided when the given or computed `prefix` is
     * `/30`. When the `prefix` is `/32`then this field determines whether the IP address will be assigned to the customer end
     * or the CXP end.
     */
    nodeId?: pulumi.Input<string>;
    /**
     * The IP Prefix of the IP Reservation. If this is specified, both `prefix_type` and `prefix_len` will be ignored.
     */
    prefix?: pulumi.Input<string>;
    /**
     * The IP Prefix length of the IP Reservation.
     */
    prefixLen?: pulumi.Input<number>;
    /**
     * The IP Prefix type of the IP Reservation. The value could be `SEGMENT`, `APIPA`, `AZURE_APIPA` and `PUBLIC`.
     */
    prefixType: pulumi.Input<string>;
    /**
     * The ID of the Scale Group.
     */
    scaleGroupId: pulumi.Input<string>;
    /**
     * The segment ID which the IP Reservation is to be used.
     */
    segmentId: pulumi.Input<string>;
    /**
     * The type of the IP Reservation. The value could be either `PUBLIC` or `OVERLAY`. `PUBLIC` could be only created by
     * Alkira.
     */
    type: pulumi.Input<string>;
}
