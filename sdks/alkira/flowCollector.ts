// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class FlowCollector extends pulumi.CustomResource {
    /**
     * Get an existing FlowCollector resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FlowCollectorState, opts?: pulumi.CustomResourceOptions): FlowCollector {
        return new FlowCollector(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alkira:index/flowCollector:FlowCollector';

    /**
     * Returns true if the given object is an instance of FlowCollector.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FlowCollector {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FlowCollector.__pulumiType;
    }

    /**
     * The type of the flow collector.
     */
    public readonly collectorType!: pulumi.Output<string | undefined>;
    /**
     * A list of CXPs where the collector should be provisioned for flow collecting.
     */
    public readonly cxps!: pulumi.Output<string[]>;
    /**
     * The description of the flow collector.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The destination FQDN of the flow collector where flow would be sent. Either `destination_ip` or `destination_fqdn` are
     * required.
     */
    public readonly destinationFqdn!: pulumi.Output<string | undefined>;
    /**
     * The destination IP of the flow collector where flow would be sent. Either `destination_ip` or `destination_fqdn` are
     * required.
     */
    public readonly destinationIp!: pulumi.Output<string | undefined>;
    /**
     * The destination port of the flow collector where flow would be sent.
     */
    public readonly destinationPort!: pulumi.Output<number>;
    /**
     * Whether the flow collector is enabled.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The flow records export type. Only `IPFIX` is supported for now.
     */
    public readonly exportType!: pulumi.Output<string | undefined>;
    /**
     * The flow records template ID. Currently only default template ID `1` is supported
     */
    public readonly flowRecordTemplateId!: pulumi.Output<number | undefined>;
    /**
     * The name of the flow collector.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The provisioning state of the resource.
     */
    public /*out*/ readonly provisionState!: pulumi.Output<string>;
    /**
     * The segment on which flow export destination is reachable. This should not be specified when destination is reachable
     * via internet. Also, segment can only be used when `destination_ip` is provided, `destination_fqdn` is not supported.
     */
    public readonly segmentId!: pulumi.Output<string | undefined>;
    /**
     * The transport protocol to send the flow records to destination.
     */
    public readonly transportProtocol!: pulumi.Output<string | undefined>;

    /**
     * Create a FlowCollector resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FlowCollectorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FlowCollectorArgs | FlowCollectorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FlowCollectorState | undefined;
            resourceInputs["collectorType"] = state ? state.collectorType : undefined;
            resourceInputs["cxps"] = state ? state.cxps : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destinationFqdn"] = state ? state.destinationFqdn : undefined;
            resourceInputs["destinationIp"] = state ? state.destinationIp : undefined;
            resourceInputs["destinationPort"] = state ? state.destinationPort : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["exportType"] = state ? state.exportType : undefined;
            resourceInputs["flowRecordTemplateId"] = state ? state.flowRecordTemplateId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["provisionState"] = state ? state.provisionState : undefined;
            resourceInputs["segmentId"] = state ? state.segmentId : undefined;
            resourceInputs["transportProtocol"] = state ? state.transportProtocol : undefined;
        } else {
            const args = argsOrState as FlowCollectorArgs | undefined;
            if ((!args || args.cxps === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cxps'");
            }
            if ((!args || args.destinationPort === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationPort'");
            }
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            resourceInputs["collectorType"] = args ? args.collectorType : undefined;
            resourceInputs["cxps"] = args ? args.cxps : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destinationFqdn"] = args ? args.destinationFqdn : undefined;
            resourceInputs["destinationIp"] = args ? args.destinationIp : undefined;
            resourceInputs["destinationPort"] = args ? args.destinationPort : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["exportType"] = args ? args.exportType : undefined;
            resourceInputs["flowRecordTemplateId"] = args ? args.flowRecordTemplateId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["segmentId"] = args ? args.segmentId : undefined;
            resourceInputs["transportProtocol"] = args ? args.transportProtocol : undefined;
            resourceInputs["provisionState"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FlowCollector.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FlowCollector resources.
 */
export interface FlowCollectorState {
    /**
     * The type of the flow collector.
     */
    collectorType?: pulumi.Input<string>;
    /**
     * A list of CXPs where the collector should be provisioned for flow collecting.
     */
    cxps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The description of the flow collector.
     */
    description?: pulumi.Input<string>;
    /**
     * The destination FQDN of the flow collector where flow would be sent. Either `destination_ip` or `destination_fqdn` are
     * required.
     */
    destinationFqdn?: pulumi.Input<string>;
    /**
     * The destination IP of the flow collector where flow would be sent. Either `destination_ip` or `destination_fqdn` are
     * required.
     */
    destinationIp?: pulumi.Input<string>;
    /**
     * The destination port of the flow collector where flow would be sent.
     */
    destinationPort?: pulumi.Input<number>;
    /**
     * Whether the flow collector is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The flow records export type. Only `IPFIX` is supported for now.
     */
    exportType?: pulumi.Input<string>;
    /**
     * The flow records template ID. Currently only default template ID `1` is supported
     */
    flowRecordTemplateId?: pulumi.Input<number>;
    /**
     * The name of the flow collector.
     */
    name?: pulumi.Input<string>;
    /**
     * The provisioning state of the resource.
     */
    provisionState?: pulumi.Input<string>;
    /**
     * The segment on which flow export destination is reachable. This should not be specified when destination is reachable
     * via internet. Also, segment can only be used when `destination_ip` is provided, `destination_fqdn` is not supported.
     */
    segmentId?: pulumi.Input<string>;
    /**
     * The transport protocol to send the flow records to destination.
     */
    transportProtocol?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FlowCollector resource.
 */
export interface FlowCollectorArgs {
    /**
     * The type of the flow collector.
     */
    collectorType?: pulumi.Input<string>;
    /**
     * A list of CXPs where the collector should be provisioned for flow collecting.
     */
    cxps: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The description of the flow collector.
     */
    description?: pulumi.Input<string>;
    /**
     * The destination FQDN of the flow collector where flow would be sent. Either `destination_ip` or `destination_fqdn` are
     * required.
     */
    destinationFqdn?: pulumi.Input<string>;
    /**
     * The destination IP of the flow collector where flow would be sent. Either `destination_ip` or `destination_fqdn` are
     * required.
     */
    destinationIp?: pulumi.Input<string>;
    /**
     * The destination port of the flow collector where flow would be sent.
     */
    destinationPort: pulumi.Input<number>;
    /**
     * Whether the flow collector is enabled.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * The flow records export type. Only `IPFIX` is supported for now.
     */
    exportType?: pulumi.Input<string>;
    /**
     * The flow records template ID. Currently only default template ID `1` is supported
     */
    flowRecordTemplateId?: pulumi.Input<number>;
    /**
     * The name of the flow collector.
     */
    name?: pulumi.Input<string>;
    /**
     * The segment on which flow export destination is reachable. This should not be specified when destination is reachable
     * via internet. Also, segment can only be used when `destination_ip` is provided, `destination_fqdn` is not supported.
     */
    segmentId?: pulumi.Input<string>;
    /**
     * The transport protocol to send the flow records to destination.
     */
    transportProtocol?: pulumi.Input<string>;
}
