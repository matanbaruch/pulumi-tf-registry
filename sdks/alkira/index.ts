// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { BillingTagArgs, BillingTagState } from "./billingTag";
export type BillingTag = import("./billingTag").BillingTag;
export const BillingTag: typeof import("./billingTag").BillingTag = null as any;
utilities.lazyLoad(exports, ["BillingTag"], () => require("./billingTag"));

export { ByoipPrefixArgs, ByoipPrefixState } from "./byoipPrefix";
export type ByoipPrefix = import("./byoipPrefix").ByoipPrefix;
export const ByoipPrefix: typeof import("./byoipPrefix").ByoipPrefix = null as any;
utilities.lazyLoad(exports, ["ByoipPrefix"], () => require("./byoipPrefix"));

export { CloudvisorAccountArgs, CloudvisorAccountState } from "./cloudvisorAccount";
export type CloudvisorAccount = import("./cloudvisorAccount").CloudvisorAccount;
export const CloudvisorAccount: typeof import("./cloudvisorAccount").CloudvisorAccount = null as any;
utilities.lazyLoad(exports, ["CloudvisorAccount"], () => require("./cloudvisorAccount"));

export { ConnectorAkamaiProlexicArgs, ConnectorAkamaiProlexicState } from "./connectorAkamaiProlexic";
export type ConnectorAkamaiProlexic = import("./connectorAkamaiProlexic").ConnectorAkamaiProlexic;
export const ConnectorAkamaiProlexic: typeof import("./connectorAkamaiProlexic").ConnectorAkamaiProlexic = null as any;
utilities.lazyLoad(exports, ["ConnectorAkamaiProlexic"], () => require("./connectorAkamaiProlexic"));

export { ConnectorArubaEdgeArgs, ConnectorArubaEdgeState } from "./connectorArubaEdge";
export type ConnectorArubaEdge = import("./connectorArubaEdge").ConnectorArubaEdge;
export const ConnectorArubaEdge: typeof import("./connectorArubaEdge").ConnectorArubaEdge = null as any;
utilities.lazyLoad(exports, ["ConnectorArubaEdge"], () => require("./connectorArubaEdge"));

export { ConnectorAwsTgwArgs, ConnectorAwsTgwState } from "./connectorAwsTgw";
export type ConnectorAwsTgw = import("./connectorAwsTgw").ConnectorAwsTgw;
export const ConnectorAwsTgw: typeof import("./connectorAwsTgw").ConnectorAwsTgw = null as any;
utilities.lazyLoad(exports, ["ConnectorAwsTgw"], () => require("./connectorAwsTgw"));

export { ConnectorAwsVpcArgs, ConnectorAwsVpcState } from "./connectorAwsVpc";
export type ConnectorAwsVpc = import("./connectorAwsVpc").ConnectorAwsVpc;
export const ConnectorAwsVpc: typeof import("./connectorAwsVpc").ConnectorAwsVpc = null as any;
utilities.lazyLoad(exports, ["ConnectorAwsVpc"], () => require("./connectorAwsVpc"));

export { ConnectorAzureExpressrouteArgs, ConnectorAzureExpressrouteState } from "./connectorAzureExpressroute";
export type ConnectorAzureExpressroute = import("./connectorAzureExpressroute").ConnectorAzureExpressroute;
export const ConnectorAzureExpressroute: typeof import("./connectorAzureExpressroute").ConnectorAzureExpressroute = null as any;
utilities.lazyLoad(exports, ["ConnectorAzureExpressroute"], () => require("./connectorAzureExpressroute"));

export { ConnectorAzureVnetArgs, ConnectorAzureVnetState } from "./connectorAzureVnet";
export type ConnectorAzureVnet = import("./connectorAzureVnet").ConnectorAzureVnet;
export const ConnectorAzureVnet: typeof import("./connectorAzureVnet").ConnectorAzureVnet = null as any;
utilities.lazyLoad(exports, ["ConnectorAzureVnet"], () => require("./connectorAzureVnet"));

export { ConnectorCiscoSdwanArgs, ConnectorCiscoSdwanState } from "./connectorCiscoSdwan";
export type ConnectorCiscoSdwan = import("./connectorCiscoSdwan").ConnectorCiscoSdwan;
export const ConnectorCiscoSdwan: typeof import("./connectorCiscoSdwan").ConnectorCiscoSdwan = null as any;
utilities.lazyLoad(exports, ["ConnectorCiscoSdwan"], () => require("./connectorCiscoSdwan"));

export { ConnectorFortinetSdwanArgs, ConnectorFortinetSdwanState } from "./connectorFortinetSdwan";
export type ConnectorFortinetSdwan = import("./connectorFortinetSdwan").ConnectorFortinetSdwan;
export const ConnectorFortinetSdwan: typeof import("./connectorFortinetSdwan").ConnectorFortinetSdwan = null as any;
utilities.lazyLoad(exports, ["ConnectorFortinetSdwan"], () => require("./connectorFortinetSdwan"));

export { ConnectorGcpVpcArgs, ConnectorGcpVpcState } from "./connectorGcpVpc";
export type ConnectorGcpVpc = import("./connectorGcpVpc").ConnectorGcpVpc;
export const ConnectorGcpVpc: typeof import("./connectorGcpVpc").ConnectorGcpVpc = null as any;
utilities.lazyLoad(exports, ["ConnectorGcpVpc"], () => require("./connectorGcpVpc"));

export { ConnectorInternetExitArgs, ConnectorInternetExitState } from "./connectorInternetExit";
export type ConnectorInternetExit = import("./connectorInternetExit").ConnectorInternetExit;
export const ConnectorInternetExit: typeof import("./connectorInternetExit").ConnectorInternetExit = null as any;
utilities.lazyLoad(exports, ["ConnectorInternetExit"], () => require("./connectorInternetExit"));

export { ConnectorIpsecArgs, ConnectorIpsecState } from "./connectorIpsec";
export type ConnectorIpsec = import("./connectorIpsec").ConnectorIpsec;
export const ConnectorIpsec: typeof import("./connectorIpsec").ConnectorIpsec = null as any;
utilities.lazyLoad(exports, ["ConnectorIpsec"], () => require("./connectorIpsec"));

export { ConnectorIpsecAdvArgs, ConnectorIpsecAdvState } from "./connectorIpsecAdv";
export type ConnectorIpsecAdv = import("./connectorIpsecAdv").ConnectorIpsecAdv;
export const ConnectorIpsecAdv: typeof import("./connectorIpsecAdv").ConnectorIpsecAdv = null as any;
utilities.lazyLoad(exports, ["ConnectorIpsecAdv"], () => require("./connectorIpsecAdv"));

export { ConnectorIpsecTunnelProfileArgs, ConnectorIpsecTunnelProfileState } from "./connectorIpsecTunnelProfile";
export type ConnectorIpsecTunnelProfile = import("./connectorIpsecTunnelProfile").ConnectorIpsecTunnelProfile;
export const ConnectorIpsecTunnelProfile: typeof import("./connectorIpsecTunnelProfile").ConnectorIpsecTunnelProfile = null as any;
utilities.lazyLoad(exports, ["ConnectorIpsecTunnelProfile"], () => require("./connectorIpsecTunnelProfile"));

export { ConnectorOciVcnArgs, ConnectorOciVcnState } from "./connectorOciVcn";
export type ConnectorOciVcn = import("./connectorOciVcn").ConnectorOciVcn;
export const ConnectorOciVcn: typeof import("./connectorOciVcn").ConnectorOciVcn = null as any;
utilities.lazyLoad(exports, ["ConnectorOciVcn"], () => require("./connectorOciVcn"));

export { ConnectorRemoteAccessArgs, ConnectorRemoteAccessState } from "./connectorRemoteAccess";
export type ConnectorRemoteAccess = import("./connectorRemoteAccess").ConnectorRemoteAccess;
export const ConnectorRemoteAccess: typeof import("./connectorRemoteAccess").ConnectorRemoteAccess = null as any;
utilities.lazyLoad(exports, ["ConnectorRemoteAccess"], () => require("./connectorRemoteAccess"));

export { ConnectorVersaSdwanArgs, ConnectorVersaSdwanState } from "./connectorVersaSdwan";
export type ConnectorVersaSdwan = import("./connectorVersaSdwan").ConnectorVersaSdwan;
export const ConnectorVersaSdwan: typeof import("./connectorVersaSdwan").ConnectorVersaSdwan = null as any;
utilities.lazyLoad(exports, ["ConnectorVersaSdwan"], () => require("./connectorVersaSdwan"));

export { ConnectorVmwareSdwanArgs, ConnectorVmwareSdwanState } from "./connectorVmwareSdwan";
export type ConnectorVmwareSdwan = import("./connectorVmwareSdwan").ConnectorVmwareSdwan;
export const ConnectorVmwareSdwan: typeof import("./connectorVmwareSdwan").ConnectorVmwareSdwan = null as any;
utilities.lazyLoad(exports, ["ConnectorVmwareSdwan"], () => require("./connectorVmwareSdwan"));

export { CredentialAwsVpcArgs, CredentialAwsVpcState } from "./credentialAwsVpc";
export type CredentialAwsVpc = import("./credentialAwsVpc").CredentialAwsVpc;
export const CredentialAwsVpc: typeof import("./credentialAwsVpc").CredentialAwsVpc = null as any;
utilities.lazyLoad(exports, ["CredentialAwsVpc"], () => require("./credentialAwsVpc"));

export { CredentialAzureVnetArgs, CredentialAzureVnetState } from "./credentialAzureVnet";
export type CredentialAzureVnet = import("./credentialAzureVnet").CredentialAzureVnet;
export const CredentialAzureVnet: typeof import("./credentialAzureVnet").CredentialAzureVnet = null as any;
utilities.lazyLoad(exports, ["CredentialAzureVnet"], () => require("./credentialAzureVnet"));

export { CredentialGcpVpcArgs, CredentialGcpVpcState } from "./credentialGcpVpc";
export type CredentialGcpVpc = import("./credentialGcpVpc").CredentialGcpVpc;
export const CredentialGcpVpc: typeof import("./credentialGcpVpc").CredentialGcpVpc = null as any;
utilities.lazyLoad(exports, ["CredentialGcpVpc"], () => require("./credentialGcpVpc"));

export { CredentialOciVcnArgs, CredentialOciVcnState } from "./credentialOciVcn";
export type CredentialOciVcn = import("./credentialOciVcn").CredentialOciVcn;
export const CredentialOciVcn: typeof import("./credentialOciVcn").CredentialOciVcn = null as any;
utilities.lazyLoad(exports, ["CredentialOciVcn"], () => require("./credentialOciVcn"));

export { CredentialSshKeyPairArgs, CredentialSshKeyPairState } from "./credentialSshKeyPair";
export type CredentialSshKeyPair = import("./credentialSshKeyPair").CredentialSshKeyPair;
export const CredentialSshKeyPair: typeof import("./credentialSshKeyPair").CredentialSshKeyPair = null as any;
utilities.lazyLoad(exports, ["CredentialSshKeyPair"], () => require("./credentialSshKeyPair"));

export { FlowCollectorArgs, FlowCollectorState } from "./flowCollector";
export type FlowCollector = import("./flowCollector").FlowCollector;
export const FlowCollector: typeof import("./flowCollector").FlowCollector = null as any;
utilities.lazyLoad(exports, ["FlowCollector"], () => require("./flowCollector"));

export { GetBillingTagArgs, GetBillingTagResult, GetBillingTagOutputArgs } from "./getBillingTag";
export const getBillingTag: typeof import("./getBillingTag").getBillingTag = null as any;
export const getBillingTagOutput: typeof import("./getBillingTag").getBillingTagOutput = null as any;
utilities.lazyLoad(exports, ["getBillingTag","getBillingTagOutput"], () => require("./getBillingTag"));

export { GetByoipArgs, GetByoipResult, GetByoipOutputArgs } from "./getByoip";
export const getByoip: typeof import("./getByoip").getByoip = null as any;
export const getByoipOutput: typeof import("./getByoip").getByoipOutput = null as any;
utilities.lazyLoad(exports, ["getByoip","getByoipOutput"], () => require("./getByoip"));

export { GetConnectorAkamaiProlexicArgs, GetConnectorAkamaiProlexicResult, GetConnectorAkamaiProlexicOutputArgs } from "./getConnectorAkamaiProlexic";
export const getConnectorAkamaiProlexic: typeof import("./getConnectorAkamaiProlexic").getConnectorAkamaiProlexic = null as any;
export const getConnectorAkamaiProlexicOutput: typeof import("./getConnectorAkamaiProlexic").getConnectorAkamaiProlexicOutput = null as any;
utilities.lazyLoad(exports, ["getConnectorAkamaiProlexic","getConnectorAkamaiProlexicOutput"], () => require("./getConnectorAkamaiProlexic"));

export { GetConnectorArubaEdgeArgs, GetConnectorArubaEdgeResult, GetConnectorArubaEdgeOutputArgs } from "./getConnectorArubaEdge";
export const getConnectorArubaEdge: typeof import("./getConnectorArubaEdge").getConnectorArubaEdge = null as any;
export const getConnectorArubaEdgeOutput: typeof import("./getConnectorArubaEdge").getConnectorArubaEdgeOutput = null as any;
utilities.lazyLoad(exports, ["getConnectorArubaEdge","getConnectorArubaEdgeOutput"], () => require("./getConnectorArubaEdge"));

export { GetConnectorAwsTgwArgs, GetConnectorAwsTgwResult, GetConnectorAwsTgwOutputArgs } from "./getConnectorAwsTgw";
export const getConnectorAwsTgw: typeof import("./getConnectorAwsTgw").getConnectorAwsTgw = null as any;
export const getConnectorAwsTgwOutput: typeof import("./getConnectorAwsTgw").getConnectorAwsTgwOutput = null as any;
utilities.lazyLoad(exports, ["getConnectorAwsTgw","getConnectorAwsTgwOutput"], () => require("./getConnectorAwsTgw"));

export { GetConnectorAwsVpcArgs, GetConnectorAwsVpcResult, GetConnectorAwsVpcOutputArgs } from "./getConnectorAwsVpc";
export const getConnectorAwsVpc: typeof import("./getConnectorAwsVpc").getConnectorAwsVpc = null as any;
export const getConnectorAwsVpcOutput: typeof import("./getConnectorAwsVpc").getConnectorAwsVpcOutput = null as any;
utilities.lazyLoad(exports, ["getConnectorAwsVpc","getConnectorAwsVpcOutput"], () => require("./getConnectorAwsVpc"));

export { GetConnectorAzureExpressrouteArgs, GetConnectorAzureExpressrouteResult, GetConnectorAzureExpressrouteOutputArgs } from "./getConnectorAzureExpressroute";
export const getConnectorAzureExpressroute: typeof import("./getConnectorAzureExpressroute").getConnectorAzureExpressroute = null as any;
export const getConnectorAzureExpressrouteOutput: typeof import("./getConnectorAzureExpressroute").getConnectorAzureExpressrouteOutput = null as any;
utilities.lazyLoad(exports, ["getConnectorAzureExpressroute","getConnectorAzureExpressrouteOutput"], () => require("./getConnectorAzureExpressroute"));

export { GetConnectorAzureVnetArgs, GetConnectorAzureVnetResult, GetConnectorAzureVnetOutputArgs } from "./getConnectorAzureVnet";
export const getConnectorAzureVnet: typeof import("./getConnectorAzureVnet").getConnectorAzureVnet = null as any;
export const getConnectorAzureVnetOutput: typeof import("./getConnectorAzureVnet").getConnectorAzureVnetOutput = null as any;
utilities.lazyLoad(exports, ["getConnectorAzureVnet","getConnectorAzureVnetOutput"], () => require("./getConnectorAzureVnet"));

export { GetConnectorCiscoSdwanArgs, GetConnectorCiscoSdwanResult, GetConnectorCiscoSdwanOutputArgs } from "./getConnectorCiscoSdwan";
export const getConnectorCiscoSdwan: typeof import("./getConnectorCiscoSdwan").getConnectorCiscoSdwan = null as any;
export const getConnectorCiscoSdwanOutput: typeof import("./getConnectorCiscoSdwan").getConnectorCiscoSdwanOutput = null as any;
utilities.lazyLoad(exports, ["getConnectorCiscoSdwan","getConnectorCiscoSdwanOutput"], () => require("./getConnectorCiscoSdwan"));

export { GetConnectorGcpVpcArgs, GetConnectorGcpVpcResult, GetConnectorGcpVpcOutputArgs } from "./getConnectorGcpVpc";
export const getConnectorGcpVpc: typeof import("./getConnectorGcpVpc").getConnectorGcpVpc = null as any;
export const getConnectorGcpVpcOutput: typeof import("./getConnectorGcpVpc").getConnectorGcpVpcOutput = null as any;
utilities.lazyLoad(exports, ["getConnectorGcpVpc","getConnectorGcpVpcOutput"], () => require("./getConnectorGcpVpc"));

export { GetConnectorInternetExitArgs, GetConnectorInternetExitResult, GetConnectorInternetExitOutputArgs } from "./getConnectorInternetExit";
export const getConnectorInternetExit: typeof import("./getConnectorInternetExit").getConnectorInternetExit = null as any;
export const getConnectorInternetExitOutput: typeof import("./getConnectorInternetExit").getConnectorInternetExitOutput = null as any;
utilities.lazyLoad(exports, ["getConnectorInternetExit","getConnectorInternetExitOutput"], () => require("./getConnectorInternetExit"));

export { GetConnectorIpsecArgs, GetConnectorIpsecResult, GetConnectorIpsecOutputArgs } from "./getConnectorIpsec";
export const getConnectorIpsec: typeof import("./getConnectorIpsec").getConnectorIpsec = null as any;
export const getConnectorIpsecOutput: typeof import("./getConnectorIpsec").getConnectorIpsecOutput = null as any;
utilities.lazyLoad(exports, ["getConnectorIpsec","getConnectorIpsecOutput"], () => require("./getConnectorIpsec"));

export { GetConnectorIpsecAdvArgs, GetConnectorIpsecAdvResult, GetConnectorIpsecAdvOutputArgs } from "./getConnectorIpsecAdv";
export const getConnectorIpsecAdv: typeof import("./getConnectorIpsecAdv").getConnectorIpsecAdv = null as any;
export const getConnectorIpsecAdvOutput: typeof import("./getConnectorIpsecAdv").getConnectorIpsecAdvOutput = null as any;
utilities.lazyLoad(exports, ["getConnectorIpsecAdv","getConnectorIpsecAdvOutput"], () => require("./getConnectorIpsecAdv"));

export { GetConnectorOciVcnArgs, GetConnectorOciVcnResult, GetConnectorOciVcnOutputArgs } from "./getConnectorOciVcn";
export const getConnectorOciVcn: typeof import("./getConnectorOciVcn").getConnectorOciVcn = null as any;
export const getConnectorOciVcnOutput: typeof import("./getConnectorOciVcn").getConnectorOciVcnOutput = null as any;
utilities.lazyLoad(exports, ["getConnectorOciVcn","getConnectorOciVcnOutput"], () => require("./getConnectorOciVcn"));

export { GetConnectorRemoteAccessArgs, GetConnectorRemoteAccessResult, GetConnectorRemoteAccessOutputArgs } from "./getConnectorRemoteAccess";
export const getConnectorRemoteAccess: typeof import("./getConnectorRemoteAccess").getConnectorRemoteAccess = null as any;
export const getConnectorRemoteAccessOutput: typeof import("./getConnectorRemoteAccess").getConnectorRemoteAccessOutput = null as any;
utilities.lazyLoad(exports, ["getConnectorRemoteAccess","getConnectorRemoteAccessOutput"], () => require("./getConnectorRemoteAccess"));

export { GetConnectorVmwareSdwanArgs, GetConnectorVmwareSdwanResult, GetConnectorVmwareSdwanOutputArgs } from "./getConnectorVmwareSdwan";
export const getConnectorVmwareSdwan: typeof import("./getConnectorVmwareSdwan").getConnectorVmwareSdwan = null as any;
export const getConnectorVmwareSdwanOutput: typeof import("./getConnectorVmwareSdwan").getConnectorVmwareSdwanOutput = null as any;
utilities.lazyLoad(exports, ["getConnectorVmwareSdwan","getConnectorVmwareSdwanOutput"], () => require("./getConnectorVmwareSdwan"));

export { GetCredentialArgs, GetCredentialResult, GetCredentialOutputArgs } from "./getCredential";
export const getCredential: typeof import("./getCredential").getCredential = null as any;
export const getCredentialOutput: typeof import("./getCredential").getCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getCredential","getCredentialOutput"], () => require("./getCredential"));

export { GetGroupArgs, GetGroupResult, GetGroupOutputArgs } from "./getGroup";
export const getGroup: typeof import("./getGroup").getGroup = null as any;
export const getGroupOutput: typeof import("./getGroup").getGroupOutput = null as any;
utilities.lazyLoad(exports, ["getGroup","getGroupOutput"], () => require("./getGroup"));

export { GetGroupUserArgs, GetGroupUserResult, GetGroupUserOutputArgs } from "./getGroupUser";
export const getGroupUser: typeof import("./getGroupUser").getGroupUser = null as any;
export const getGroupUserOutput: typeof import("./getGroupUser").getGroupUserOutput = null as any;
utilities.lazyLoad(exports, ["getGroupUser","getGroupUserOutput"], () => require("./getGroupUser"));

export { GetInternetApplicationArgs, GetInternetApplicationResult, GetInternetApplicationOutputArgs } from "./getInternetApplication";
export const getInternetApplication: typeof import("./getInternetApplication").getInternetApplication = null as any;
export const getInternetApplicationOutput: typeof import("./getInternetApplication").getInternetApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getInternetApplication","getInternetApplicationOutput"], () => require("./getInternetApplication"));

export { GetIpReservationArgs, GetIpReservationResult, GetIpReservationOutputArgs } from "./getIpReservation";
export const getIpReservation: typeof import("./getIpReservation").getIpReservation = null as any;
export const getIpReservationOutput: typeof import("./getIpReservation").getIpReservationOutput = null as any;
utilities.lazyLoad(exports, ["getIpReservation","getIpReservationOutput"], () => require("./getIpReservation"));

export { GetListAsPathArgs, GetListAsPathResult, GetListAsPathOutputArgs } from "./getListAsPath";
export const getListAsPath: typeof import("./getListAsPath").getListAsPath = null as any;
export const getListAsPathOutput: typeof import("./getListAsPath").getListAsPathOutput = null as any;
utilities.lazyLoad(exports, ["getListAsPath","getListAsPathOutput"], () => require("./getListAsPath"));

export { GetListCommunityArgs, GetListCommunityResult, GetListCommunityOutputArgs } from "./getListCommunity";
export const getListCommunity: typeof import("./getListCommunity").getListCommunity = null as any;
export const getListCommunityOutput: typeof import("./getListCommunity").getListCommunityOutput = null as any;
utilities.lazyLoad(exports, ["getListCommunity","getListCommunityOutput"], () => require("./getListCommunity"));

export { GetListExtendedCommunityArgs, GetListExtendedCommunityResult, GetListExtendedCommunityOutputArgs } from "./getListExtendedCommunity";
export const getListExtendedCommunity: typeof import("./getListExtendedCommunity").getListExtendedCommunity = null as any;
export const getListExtendedCommunityOutput: typeof import("./getListExtendedCommunity").getListExtendedCommunityOutput = null as any;
utilities.lazyLoad(exports, ["getListExtendedCommunity","getListExtendedCommunityOutput"], () => require("./getListExtendedCommunity"));

export { GetListGlobalCidrArgs, GetListGlobalCidrResult, GetListGlobalCidrOutputArgs } from "./getListGlobalCidr";
export const getListGlobalCidr: typeof import("./getListGlobalCidr").getListGlobalCidr = null as any;
export const getListGlobalCidrOutput: typeof import("./getListGlobalCidr").getListGlobalCidrOutput = null as any;
utilities.lazyLoad(exports, ["getListGlobalCidr","getListGlobalCidrOutput"], () => require("./getListGlobalCidr"));

export { GetListUdrArgs, GetListUdrResult, GetListUdrOutputArgs } from "./getListUdr";
export const getListUdr: typeof import("./getListUdr").getListUdr = null as any;
export const getListUdrOutput: typeof import("./getListUdr").getListUdrOutput = null as any;
utilities.lazyLoad(exports, ["getListUdr","getListUdrOutput"], () => require("./getListUdr"));

export { GetPeeringGatewayAwsTgwArgs, GetPeeringGatewayAwsTgwResult, GetPeeringGatewayAwsTgwOutputArgs } from "./getPeeringGatewayAwsTgw";
export const getPeeringGatewayAwsTgw: typeof import("./getPeeringGatewayAwsTgw").getPeeringGatewayAwsTgw = null as any;
export const getPeeringGatewayAwsTgwOutput: typeof import("./getPeeringGatewayAwsTgw").getPeeringGatewayAwsTgwOutput = null as any;
utilities.lazyLoad(exports, ["getPeeringGatewayAwsTgw","getPeeringGatewayAwsTgwOutput"], () => require("./getPeeringGatewayAwsTgw"));

export { GetPeeringGatewayAwsTgwAttachmentArgs, GetPeeringGatewayAwsTgwAttachmentResult, GetPeeringGatewayAwsTgwAttachmentOutputArgs } from "./getPeeringGatewayAwsTgwAttachment";
export const getPeeringGatewayAwsTgwAttachment: typeof import("./getPeeringGatewayAwsTgwAttachment").getPeeringGatewayAwsTgwAttachment = null as any;
export const getPeeringGatewayAwsTgwAttachmentOutput: typeof import("./getPeeringGatewayAwsTgwAttachment").getPeeringGatewayAwsTgwAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getPeeringGatewayAwsTgwAttachment","getPeeringGatewayAwsTgwAttachmentOutput"], () => require("./getPeeringGatewayAwsTgwAttachment"));

export { GetPeeringGatewayCxpArgs, GetPeeringGatewayCxpResult, GetPeeringGatewayCxpOutputArgs } from "./getPeeringGatewayCxp";
export const getPeeringGatewayCxp: typeof import("./getPeeringGatewayCxp").getPeeringGatewayCxp = null as any;
export const getPeeringGatewayCxpOutput: typeof import("./getPeeringGatewayCxp").getPeeringGatewayCxpOutput = null as any;
utilities.lazyLoad(exports, ["getPeeringGatewayCxp","getPeeringGatewayCxpOutput"], () => require("./getPeeringGatewayCxp"));

export { GetPolicyArgs, GetPolicyResult, GetPolicyOutputArgs } from "./getPolicy";
export const getPolicy: typeof import("./getPolicy").getPolicy = null as any;
export const getPolicyOutput: typeof import("./getPolicy").getPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getPolicy","getPolicyOutput"], () => require("./getPolicy"));

export { GetPolicyNatRuleArgs, GetPolicyNatRuleResult, GetPolicyNatRuleOutputArgs } from "./getPolicyNatRule";
export const getPolicyNatRule: typeof import("./getPolicyNatRule").getPolicyNatRule = null as any;
export const getPolicyNatRuleOutput: typeof import("./getPolicyNatRule").getPolicyNatRuleOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyNatRule","getPolicyNatRuleOutput"], () => require("./getPolicyNatRule"));

export { GetPolicyPrefixListArgs, GetPolicyPrefixListResult, GetPolicyPrefixListOutputArgs } from "./getPolicyPrefixList";
export const getPolicyPrefixList: typeof import("./getPolicyPrefixList").getPolicyPrefixList = null as any;
export const getPolicyPrefixListOutput: typeof import("./getPolicyPrefixList").getPolicyPrefixListOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyPrefixList","getPolicyPrefixListOutput"], () => require("./getPolicyPrefixList"));

export { GetPolicyRuleArgs, GetPolicyRuleResult, GetPolicyRuleOutputArgs } from "./getPolicyRule";
export const getPolicyRule: typeof import("./getPolicyRule").getPolicyRule = null as any;
export const getPolicyRuleOutput: typeof import("./getPolicyRule").getPolicyRuleOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyRule","getPolicyRuleOutput"], () => require("./getPolicyRule"));

export { GetPolicyRuleListArgs, GetPolicyRuleListResult, GetPolicyRuleListOutputArgs } from "./getPolicyRuleList";
export const getPolicyRuleList: typeof import("./getPolicyRuleList").getPolicyRuleList = null as any;
export const getPolicyRuleListOutput: typeof import("./getPolicyRuleList").getPolicyRuleListOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyRuleList","getPolicyRuleListOutput"], () => require("./getPolicyRuleList"));

export { GetSegmentArgs, GetSegmentResult, GetSegmentOutputArgs } from "./getSegment";
export const getSegment: typeof import("./getSegment").getSegment = null as any;
export const getSegmentOutput: typeof import("./getSegment").getSegmentOutput = null as any;
utilities.lazyLoad(exports, ["getSegment","getSegmentOutput"], () => require("./getSegment"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { GroupDirectInterConnectorArgs, GroupDirectInterConnectorState } from "./groupDirectInterConnector";
export type GroupDirectInterConnector = import("./groupDirectInterConnector").GroupDirectInterConnector;
export const GroupDirectInterConnector: typeof import("./groupDirectInterConnector").GroupDirectInterConnector = null as any;
utilities.lazyLoad(exports, ["GroupDirectInterConnector"], () => require("./groupDirectInterConnector"));

export { GroupUserArgs, GroupUserState } from "./groupUser";
export type GroupUser = import("./groupUser").GroupUser;
export const GroupUser: typeof import("./groupUser").GroupUser = null as any;
utilities.lazyLoad(exports, ["GroupUser"], () => require("./groupUser"));

export { InternetApplicationArgs, InternetApplicationState } from "./internetApplication";
export type InternetApplication = import("./internetApplication").InternetApplication;
export const InternetApplication: typeof import("./internetApplication").InternetApplication = null as any;
utilities.lazyLoad(exports, ["InternetApplication"], () => require("./internetApplication"));

export { IpReservationArgs, IpReservationState } from "./ipReservation";
export type IpReservation = import("./ipReservation").IpReservation;
export const IpReservation: typeof import("./ipReservation").IpReservation = null as any;
utilities.lazyLoad(exports, ["IpReservation"], () => require("./ipReservation"));

export { ListAsPathArgs, ListAsPathState } from "./listAsPath";
export type ListAsPath = import("./listAsPath").ListAsPath;
export const ListAsPath: typeof import("./listAsPath").ListAsPath = null as any;
utilities.lazyLoad(exports, ["ListAsPath"], () => require("./listAsPath"));

export { ListCommunityArgs, ListCommunityState } from "./listCommunity";
export type ListCommunity = import("./listCommunity").ListCommunity;
export const ListCommunity: typeof import("./listCommunity").ListCommunity = null as any;
utilities.lazyLoad(exports, ["ListCommunity"], () => require("./listCommunity"));

export { ListDnsServerArgs, ListDnsServerState } from "./listDnsServer";
export type ListDnsServer = import("./listDnsServer").ListDnsServer;
export const ListDnsServer: typeof import("./listDnsServer").ListDnsServer = null as any;
utilities.lazyLoad(exports, ["ListDnsServer"], () => require("./listDnsServer"));

export { ListExtendedCommunityArgs, ListExtendedCommunityState } from "./listExtendedCommunity";
export type ListExtendedCommunity = import("./listExtendedCommunity").ListExtendedCommunity;
export const ListExtendedCommunity: typeof import("./listExtendedCommunity").ListExtendedCommunity = null as any;
utilities.lazyLoad(exports, ["ListExtendedCommunity"], () => require("./listExtendedCommunity"));

export { ListGlobalCidrArgs, ListGlobalCidrState } from "./listGlobalCidr";
export type ListGlobalCidr = import("./listGlobalCidr").ListGlobalCidr;
export const ListGlobalCidr: typeof import("./listGlobalCidr").ListGlobalCidr = null as any;
utilities.lazyLoad(exports, ["ListGlobalCidr"], () => require("./listGlobalCidr"));

export { ListPolicyFqdnArgs, ListPolicyFqdnState } from "./listPolicyFqdn";
export type ListPolicyFqdn = import("./listPolicyFqdn").ListPolicyFqdn;
export const ListPolicyFqdn: typeof import("./listPolicyFqdn").ListPolicyFqdn = null as any;
utilities.lazyLoad(exports, ["ListPolicyFqdn"], () => require("./listPolicyFqdn"));

export { ListUdrArgs, ListUdrState } from "./listUdr";
export type ListUdr = import("./listUdr").ListUdr;
export const ListUdr: typeof import("./listUdr").ListUdr = null as any;
utilities.lazyLoad(exports, ["ListUdr"], () => require("./listUdr"));

export { PeeringGatewayAwsTgwArgs, PeeringGatewayAwsTgwState } from "./peeringGatewayAwsTgw";
export type PeeringGatewayAwsTgw = import("./peeringGatewayAwsTgw").PeeringGatewayAwsTgw;
export const PeeringGatewayAwsTgw: typeof import("./peeringGatewayAwsTgw").PeeringGatewayAwsTgw = null as any;
utilities.lazyLoad(exports, ["PeeringGatewayAwsTgw"], () => require("./peeringGatewayAwsTgw"));

export { PeeringGatewayAwsTgwAttachmentArgs, PeeringGatewayAwsTgwAttachmentState } from "./peeringGatewayAwsTgwAttachment";
export type PeeringGatewayAwsTgwAttachment = import("./peeringGatewayAwsTgwAttachment").PeeringGatewayAwsTgwAttachment;
export const PeeringGatewayAwsTgwAttachment: typeof import("./peeringGatewayAwsTgwAttachment").PeeringGatewayAwsTgwAttachment = null as any;
utilities.lazyLoad(exports, ["PeeringGatewayAwsTgwAttachment"], () => require("./peeringGatewayAwsTgwAttachment"));

export { PeeringGatewayCxpArgs, PeeringGatewayCxpState } from "./peeringGatewayCxp";
export type PeeringGatewayCxp = import("./peeringGatewayCxp").PeeringGatewayCxp;
export const PeeringGatewayCxp: typeof import("./peeringGatewayCxp").PeeringGatewayCxp = null as any;
utilities.lazyLoad(exports, ["PeeringGatewayCxp"], () => require("./peeringGatewayCxp"));

export { PolicyArgs, PolicyState } from "./policy";
export type Policy = import("./policy").Policy;
export const Policy: typeof import("./policy").Policy = null as any;
utilities.lazyLoad(exports, ["Policy"], () => require("./policy"));

export { PolicyNatArgs, PolicyNatState } from "./policyNat";
export type PolicyNat = import("./policyNat").PolicyNat;
export const PolicyNat: typeof import("./policyNat").PolicyNat = null as any;
utilities.lazyLoad(exports, ["PolicyNat"], () => require("./policyNat"));

export { PolicyNatRuleArgs, PolicyNatRuleState } from "./policyNatRule";
export type PolicyNatRule = import("./policyNatRule").PolicyNatRule;
export const PolicyNatRule: typeof import("./policyNatRule").PolicyNatRule = null as any;
utilities.lazyLoad(exports, ["PolicyNatRule"], () => require("./policyNatRule"));

export { PolicyPrefixListArgs, PolicyPrefixListState } from "./policyPrefixList";
export type PolicyPrefixList = import("./policyPrefixList").PolicyPrefixList;
export const PolicyPrefixList: typeof import("./policyPrefixList").PolicyPrefixList = null as any;
utilities.lazyLoad(exports, ["PolicyPrefixList"], () => require("./policyPrefixList"));

export { PolicyRoutingArgs, PolicyRoutingState } from "./policyRouting";
export type PolicyRouting = import("./policyRouting").PolicyRouting;
export const PolicyRouting: typeof import("./policyRouting").PolicyRouting = null as any;
utilities.lazyLoad(exports, ["PolicyRouting"], () => require("./policyRouting"));

export { PolicyRuleArgs, PolicyRuleState } from "./policyRule";
export type PolicyRule = import("./policyRule").PolicyRule;
export const PolicyRule: typeof import("./policyRule").PolicyRule = null as any;
utilities.lazyLoad(exports, ["PolicyRule"], () => require("./policyRule"));

export { PolicyRuleListArgs, PolicyRuleListState } from "./policyRuleList";
export type PolicyRuleList = import("./policyRuleList").PolicyRuleList;
export const PolicyRuleList: typeof import("./policyRuleList").PolicyRuleList = null as any;
utilities.lazyLoad(exports, ["PolicyRuleList"], () => require("./policyRuleList"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SegmentArgs, SegmentState } from "./segment";
export type Segment = import("./segment").Segment;
export const Segment: typeof import("./segment").Segment = null as any;
utilities.lazyLoad(exports, ["Segment"], () => require("./segment"));

export { SegmentResourceArgs, SegmentResourceState } from "./segmentResource";
export type SegmentResource = import("./segmentResource").SegmentResource;
export const SegmentResource: typeof import("./segmentResource").SegmentResource = null as any;
utilities.lazyLoad(exports, ["SegmentResource"], () => require("./segmentResource"));

export { SegmentResourceShareArgs, SegmentResourceShareState } from "./segmentResourceShare";
export type SegmentResourceShare = import("./segmentResourceShare").SegmentResourceShare;
export const SegmentResourceShare: typeof import("./segmentResourceShare").SegmentResourceShare = null as any;
utilities.lazyLoad(exports, ["SegmentResourceShare"], () => require("./segmentResourceShare"));

export { ServiceCheckpointArgs, ServiceCheckpointState } from "./serviceCheckpoint";
export type ServiceCheckpoint = import("./serviceCheckpoint").ServiceCheckpoint;
export const ServiceCheckpoint: typeof import("./serviceCheckpoint").ServiceCheckpoint = null as any;
utilities.lazyLoad(exports, ["ServiceCheckpoint"], () => require("./serviceCheckpoint"));

export { ServiceCiscoFtdvArgs, ServiceCiscoFtdvState } from "./serviceCiscoFtdv";
export type ServiceCiscoFtdv = import("./serviceCiscoFtdv").ServiceCiscoFtdv;
export const ServiceCiscoFtdv: typeof import("./serviceCiscoFtdv").ServiceCiscoFtdv = null as any;
utilities.lazyLoad(exports, ["ServiceCiscoFtdv"], () => require("./serviceCiscoFtdv"));

export { ServiceFortinetArgs, ServiceFortinetState } from "./serviceFortinet";
export type ServiceFortinet = import("./serviceFortinet").ServiceFortinet;
export const ServiceFortinet: typeof import("./serviceFortinet").ServiceFortinet = null as any;
utilities.lazyLoad(exports, ["ServiceFortinet"], () => require("./serviceFortinet"));

export { ServiceInfobloxArgs, ServiceInfobloxState } from "./serviceInfoblox";
export type ServiceInfoblox = import("./serviceInfoblox").ServiceInfoblox;
export const ServiceInfoblox: typeof import("./serviceInfoblox").ServiceInfoblox = null as any;
utilities.lazyLoad(exports, ["ServiceInfoblox"], () => require("./serviceInfoblox"));

export { ServicePanArgs, ServicePanState } from "./servicePan";
export type ServicePan = import("./servicePan").ServicePan;
export const ServicePan: typeof import("./servicePan").ServicePan = null as any;
utilities.lazyLoad(exports, ["ServicePan"], () => require("./servicePan"));

export { ServiceZscalerArgs, ServiceZscalerState } from "./serviceZscaler";
export type ServiceZscaler = import("./serviceZscaler").ServiceZscaler;
export const ServiceZscaler: typeof import("./serviceZscaler").ServiceZscaler = null as any;
utilities.lazyLoad(exports, ["ServiceZscaler"], () => require("./serviceZscaler"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "alkira:index/billingTag:BillingTag":
                return new BillingTag(name, <any>undefined, { urn })
            case "alkira:index/byoipPrefix:ByoipPrefix":
                return new ByoipPrefix(name, <any>undefined, { urn })
            case "alkira:index/cloudvisorAccount:CloudvisorAccount":
                return new CloudvisorAccount(name, <any>undefined, { urn })
            case "alkira:index/connectorAkamaiProlexic:ConnectorAkamaiProlexic":
                return new ConnectorAkamaiProlexic(name, <any>undefined, { urn })
            case "alkira:index/connectorArubaEdge:ConnectorArubaEdge":
                return new ConnectorArubaEdge(name, <any>undefined, { urn })
            case "alkira:index/connectorAwsTgw:ConnectorAwsTgw":
                return new ConnectorAwsTgw(name, <any>undefined, { urn })
            case "alkira:index/connectorAwsVpc:ConnectorAwsVpc":
                return new ConnectorAwsVpc(name, <any>undefined, { urn })
            case "alkira:index/connectorAzureExpressroute:ConnectorAzureExpressroute":
                return new ConnectorAzureExpressroute(name, <any>undefined, { urn })
            case "alkira:index/connectorAzureVnet:ConnectorAzureVnet":
                return new ConnectorAzureVnet(name, <any>undefined, { urn })
            case "alkira:index/connectorCiscoSdwan:ConnectorCiscoSdwan":
                return new ConnectorCiscoSdwan(name, <any>undefined, { urn })
            case "alkira:index/connectorFortinetSdwan:ConnectorFortinetSdwan":
                return new ConnectorFortinetSdwan(name, <any>undefined, { urn })
            case "alkira:index/connectorGcpVpc:ConnectorGcpVpc":
                return new ConnectorGcpVpc(name, <any>undefined, { urn })
            case "alkira:index/connectorInternetExit:ConnectorInternetExit":
                return new ConnectorInternetExit(name, <any>undefined, { urn })
            case "alkira:index/connectorIpsec:ConnectorIpsec":
                return new ConnectorIpsec(name, <any>undefined, { urn })
            case "alkira:index/connectorIpsecAdv:ConnectorIpsecAdv":
                return new ConnectorIpsecAdv(name, <any>undefined, { urn })
            case "alkira:index/connectorIpsecTunnelProfile:ConnectorIpsecTunnelProfile":
                return new ConnectorIpsecTunnelProfile(name, <any>undefined, { urn })
            case "alkira:index/connectorOciVcn:ConnectorOciVcn":
                return new ConnectorOciVcn(name, <any>undefined, { urn })
            case "alkira:index/connectorRemoteAccess:ConnectorRemoteAccess":
                return new ConnectorRemoteAccess(name, <any>undefined, { urn })
            case "alkira:index/connectorVersaSdwan:ConnectorVersaSdwan":
                return new ConnectorVersaSdwan(name, <any>undefined, { urn })
            case "alkira:index/connectorVmwareSdwan:ConnectorVmwareSdwan":
                return new ConnectorVmwareSdwan(name, <any>undefined, { urn })
            case "alkira:index/credentialAwsVpc:CredentialAwsVpc":
                return new CredentialAwsVpc(name, <any>undefined, { urn })
            case "alkira:index/credentialAzureVnet:CredentialAzureVnet":
                return new CredentialAzureVnet(name, <any>undefined, { urn })
            case "alkira:index/credentialGcpVpc:CredentialGcpVpc":
                return new CredentialGcpVpc(name, <any>undefined, { urn })
            case "alkira:index/credentialOciVcn:CredentialOciVcn":
                return new CredentialOciVcn(name, <any>undefined, { urn })
            case "alkira:index/credentialSshKeyPair:CredentialSshKeyPair":
                return new CredentialSshKeyPair(name, <any>undefined, { urn })
            case "alkira:index/flowCollector:FlowCollector":
                return new FlowCollector(name, <any>undefined, { urn })
            case "alkira:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "alkira:index/groupDirectInterConnector:GroupDirectInterConnector":
                return new GroupDirectInterConnector(name, <any>undefined, { urn })
            case "alkira:index/groupUser:GroupUser":
                return new GroupUser(name, <any>undefined, { urn })
            case "alkira:index/internetApplication:InternetApplication":
                return new InternetApplication(name, <any>undefined, { urn })
            case "alkira:index/ipReservation:IpReservation":
                return new IpReservation(name, <any>undefined, { urn })
            case "alkira:index/listAsPath:ListAsPath":
                return new ListAsPath(name, <any>undefined, { urn })
            case "alkira:index/listCommunity:ListCommunity":
                return new ListCommunity(name, <any>undefined, { urn })
            case "alkira:index/listDnsServer:ListDnsServer":
                return new ListDnsServer(name, <any>undefined, { urn })
            case "alkira:index/listExtendedCommunity:ListExtendedCommunity":
                return new ListExtendedCommunity(name, <any>undefined, { urn })
            case "alkira:index/listGlobalCidr:ListGlobalCidr":
                return new ListGlobalCidr(name, <any>undefined, { urn })
            case "alkira:index/listPolicyFqdn:ListPolicyFqdn":
                return new ListPolicyFqdn(name, <any>undefined, { urn })
            case "alkira:index/listUdr:ListUdr":
                return new ListUdr(name, <any>undefined, { urn })
            case "alkira:index/peeringGatewayAwsTgw:PeeringGatewayAwsTgw":
                return new PeeringGatewayAwsTgw(name, <any>undefined, { urn })
            case "alkira:index/peeringGatewayAwsTgwAttachment:PeeringGatewayAwsTgwAttachment":
                return new PeeringGatewayAwsTgwAttachment(name, <any>undefined, { urn })
            case "alkira:index/peeringGatewayCxp:PeeringGatewayCxp":
                return new PeeringGatewayCxp(name, <any>undefined, { urn })
            case "alkira:index/policy:Policy":
                return new Policy(name, <any>undefined, { urn })
            case "alkira:index/policyNat:PolicyNat":
                return new PolicyNat(name, <any>undefined, { urn })
            case "alkira:index/policyNatRule:PolicyNatRule":
                return new PolicyNatRule(name, <any>undefined, { urn })
            case "alkira:index/policyPrefixList:PolicyPrefixList":
                return new PolicyPrefixList(name, <any>undefined, { urn })
            case "alkira:index/policyRouting:PolicyRouting":
                return new PolicyRouting(name, <any>undefined, { urn })
            case "alkira:index/policyRule:PolicyRule":
                return new PolicyRule(name, <any>undefined, { urn })
            case "alkira:index/policyRuleList:PolicyRuleList":
                return new PolicyRuleList(name, <any>undefined, { urn })
            case "alkira:index/segment:Segment":
                return new Segment(name, <any>undefined, { urn })
            case "alkira:index/segmentResource:SegmentResource":
                return new SegmentResource(name, <any>undefined, { urn })
            case "alkira:index/segmentResourceShare:SegmentResourceShare":
                return new SegmentResourceShare(name, <any>undefined, { urn })
            case "alkira:index/serviceCheckpoint:ServiceCheckpoint":
                return new ServiceCheckpoint(name, <any>undefined, { urn })
            case "alkira:index/serviceCiscoFtdv:ServiceCiscoFtdv":
                return new ServiceCiscoFtdv(name, <any>undefined, { urn })
            case "alkira:index/serviceFortinet:ServiceFortinet":
                return new ServiceFortinet(name, <any>undefined, { urn })
            case "alkira:index/serviceInfoblox:ServiceInfoblox":
                return new ServiceInfoblox(name, <any>undefined, { urn })
            case "alkira:index/servicePan:ServicePan":
                return new ServicePan(name, <any>undefined, { urn })
            case "alkira:index/serviceZscaler:ServiceZscaler":
                return new ServiceZscaler(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("alkira", "index/billingTag", _module)
pulumi.runtime.registerResourceModule("alkira", "index/byoipPrefix", _module)
pulumi.runtime.registerResourceModule("alkira", "index/cloudvisorAccount", _module)
pulumi.runtime.registerResourceModule("alkira", "index/connectorAkamaiProlexic", _module)
pulumi.runtime.registerResourceModule("alkira", "index/connectorArubaEdge", _module)
pulumi.runtime.registerResourceModule("alkira", "index/connectorAwsTgw", _module)
pulumi.runtime.registerResourceModule("alkira", "index/connectorAwsVpc", _module)
pulumi.runtime.registerResourceModule("alkira", "index/connectorAzureExpressroute", _module)
pulumi.runtime.registerResourceModule("alkira", "index/connectorAzureVnet", _module)
pulumi.runtime.registerResourceModule("alkira", "index/connectorCiscoSdwan", _module)
pulumi.runtime.registerResourceModule("alkira", "index/connectorFortinetSdwan", _module)
pulumi.runtime.registerResourceModule("alkira", "index/connectorGcpVpc", _module)
pulumi.runtime.registerResourceModule("alkira", "index/connectorInternetExit", _module)
pulumi.runtime.registerResourceModule("alkira", "index/connectorIpsec", _module)
pulumi.runtime.registerResourceModule("alkira", "index/connectorIpsecAdv", _module)
pulumi.runtime.registerResourceModule("alkira", "index/connectorIpsecTunnelProfile", _module)
pulumi.runtime.registerResourceModule("alkira", "index/connectorOciVcn", _module)
pulumi.runtime.registerResourceModule("alkira", "index/connectorRemoteAccess", _module)
pulumi.runtime.registerResourceModule("alkira", "index/connectorVersaSdwan", _module)
pulumi.runtime.registerResourceModule("alkira", "index/connectorVmwareSdwan", _module)
pulumi.runtime.registerResourceModule("alkira", "index/credentialAwsVpc", _module)
pulumi.runtime.registerResourceModule("alkira", "index/credentialAzureVnet", _module)
pulumi.runtime.registerResourceModule("alkira", "index/credentialGcpVpc", _module)
pulumi.runtime.registerResourceModule("alkira", "index/credentialOciVcn", _module)
pulumi.runtime.registerResourceModule("alkira", "index/credentialSshKeyPair", _module)
pulumi.runtime.registerResourceModule("alkira", "index/flowCollector", _module)
pulumi.runtime.registerResourceModule("alkira", "index/group", _module)
pulumi.runtime.registerResourceModule("alkira", "index/groupDirectInterConnector", _module)
pulumi.runtime.registerResourceModule("alkira", "index/groupUser", _module)
pulumi.runtime.registerResourceModule("alkira", "index/internetApplication", _module)
pulumi.runtime.registerResourceModule("alkira", "index/ipReservation", _module)
pulumi.runtime.registerResourceModule("alkira", "index/listAsPath", _module)
pulumi.runtime.registerResourceModule("alkira", "index/listCommunity", _module)
pulumi.runtime.registerResourceModule("alkira", "index/listDnsServer", _module)
pulumi.runtime.registerResourceModule("alkira", "index/listExtendedCommunity", _module)
pulumi.runtime.registerResourceModule("alkira", "index/listGlobalCidr", _module)
pulumi.runtime.registerResourceModule("alkira", "index/listPolicyFqdn", _module)
pulumi.runtime.registerResourceModule("alkira", "index/listUdr", _module)
pulumi.runtime.registerResourceModule("alkira", "index/peeringGatewayAwsTgw", _module)
pulumi.runtime.registerResourceModule("alkira", "index/peeringGatewayAwsTgwAttachment", _module)
pulumi.runtime.registerResourceModule("alkira", "index/peeringGatewayCxp", _module)
pulumi.runtime.registerResourceModule("alkira", "index/policy", _module)
pulumi.runtime.registerResourceModule("alkira", "index/policyNat", _module)
pulumi.runtime.registerResourceModule("alkira", "index/policyNatRule", _module)
pulumi.runtime.registerResourceModule("alkira", "index/policyPrefixList", _module)
pulumi.runtime.registerResourceModule("alkira", "index/policyRouting", _module)
pulumi.runtime.registerResourceModule("alkira", "index/policyRule", _module)
pulumi.runtime.registerResourceModule("alkira", "index/policyRuleList", _module)
pulumi.runtime.registerResourceModule("alkira", "index/segment", _module)
pulumi.runtime.registerResourceModule("alkira", "index/segmentResource", _module)
pulumi.runtime.registerResourceModule("alkira", "index/segmentResourceShare", _module)
pulumi.runtime.registerResourceModule("alkira", "index/serviceCheckpoint", _module)
pulumi.runtime.registerResourceModule("alkira", "index/serviceCiscoFtdv", _module)
pulumi.runtime.registerResourceModule("alkira", "index/serviceFortinet", _module)
pulumi.runtime.registerResourceModule("alkira", "index/serviceInfoblox", _module)
pulumi.runtime.registerResourceModule("alkira", "index/servicePan", _module)
pulumi.runtime.registerResourceModule("alkira", "index/serviceZscaler", _module)
pulumi.runtime.registerResourcePackage("alkira", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:alkira") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
