// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ConnectorAkamaiProlexic extends pulumi.CustomResource {
    /**
     * Get an existing ConnectorAkamaiProlexic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectorAkamaiProlexicState, opts?: pulumi.CustomResourceOptions): ConnectorAkamaiProlexic {
        return new ConnectorAkamaiProlexic(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alkira:index/connectorAkamaiProlexic:ConnectorAkamaiProlexic';

    /**
     * Returns true if the given object is an instance of ConnectorAkamaiProlexic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConnectorAkamaiProlexic {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConnectorAkamaiProlexic.__pulumiType;
    }

    /**
     * The Akamai BGP ASN.
     */
    public readonly akamaiBgpAsn!: pulumi.Output<number>;
    /**
     * The Akamai BGP Authentication Key.
     */
    public readonly akamaiBgpAuthenticationKey!: pulumi.Output<string>;
    /**
     * A list of Billing Tag by ID associated with the connector.
     */
    public readonly billingTagIds!: pulumi.Output<number[] | undefined>;
    /**
     * BYOIP options.
     */
    public readonly byoipOptions!: pulumi.Output<outputs.ConnectorAkamaiProlexicByoipOption[]>;
    /**
     * The credential ID for storing Akamai BGP authentication key.
     */
    public /*out*/ readonly credentialId!: pulumi.Output<string>;
    /**
     * The CXP where the connector should be provisioned.
     */
    public readonly cxp!: pulumi.Output<string>;
    /**
     * Is the connector enabled. Default is `true`.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The group of the connector.
     */
    public readonly group!: pulumi.Output<string | undefined>;
    /**
     * The ID of implicit group automaticaly created with the connector.
     */
    public /*out*/ readonly implicitGroupId!: pulumi.Output<number>;
    /**
     * The name of the connector.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The provision state of the connector.
     */
    public /*out*/ readonly provisionState!: pulumi.Output<string>;
    /**
     * The ID of segments associated with the connector. Currently, only `1` segment is allowed.
     */
    public readonly segmentId!: pulumi.Output<string>;
    /**
     * The size of the connector, one of `SMALL`, `MEDIUM`, `LARGE`, `2LARGE`, `4LARGE`, `5LARGE`, `10LARGE`, `20LARGE`.
     */
    public readonly size!: pulumi.Output<string>;
    /**
     * Tunnel Configurations.
     */
    public readonly tunnelConfigurations!: pulumi.Output<outputs.ConnectorAkamaiProlexicTunnelConfiguration[]>;

    /**
     * Create a ConnectorAkamaiProlexic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectorAkamaiProlexicArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectorAkamaiProlexicArgs | ConnectorAkamaiProlexicState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectorAkamaiProlexicState | undefined;
            resourceInputs["akamaiBgpAsn"] = state ? state.akamaiBgpAsn : undefined;
            resourceInputs["akamaiBgpAuthenticationKey"] = state ? state.akamaiBgpAuthenticationKey : undefined;
            resourceInputs["billingTagIds"] = state ? state.billingTagIds : undefined;
            resourceInputs["byoipOptions"] = state ? state.byoipOptions : undefined;
            resourceInputs["credentialId"] = state ? state.credentialId : undefined;
            resourceInputs["cxp"] = state ? state.cxp : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["implicitGroupId"] = state ? state.implicitGroupId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["provisionState"] = state ? state.provisionState : undefined;
            resourceInputs["segmentId"] = state ? state.segmentId : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["tunnelConfigurations"] = state ? state.tunnelConfigurations : undefined;
        } else {
            const args = argsOrState as ConnectorAkamaiProlexicArgs | undefined;
            if ((!args || args.akamaiBgpAsn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'akamaiBgpAsn'");
            }
            if ((!args || args.akamaiBgpAuthenticationKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'akamaiBgpAuthenticationKey'");
            }
            if ((!args || args.byoipOptions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'byoipOptions'");
            }
            if ((!args || args.cxp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cxp'");
            }
            if ((!args || args.segmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'segmentId'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            if ((!args || args.tunnelConfigurations === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tunnelConfigurations'");
            }
            resourceInputs["akamaiBgpAsn"] = args ? args.akamaiBgpAsn : undefined;
            resourceInputs["akamaiBgpAuthenticationKey"] = args ? args.akamaiBgpAuthenticationKey : undefined;
            resourceInputs["billingTagIds"] = args ? args.billingTagIds : undefined;
            resourceInputs["byoipOptions"] = args ? args.byoipOptions : undefined;
            resourceInputs["cxp"] = args ? args.cxp : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["segmentId"] = args ? args.segmentId : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["tunnelConfigurations"] = args ? args.tunnelConfigurations : undefined;
            resourceInputs["credentialId"] = undefined /*out*/;
            resourceInputs["implicitGroupId"] = undefined /*out*/;
            resourceInputs["provisionState"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConnectorAkamaiProlexic.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ConnectorAkamaiProlexic resources.
 */
export interface ConnectorAkamaiProlexicState {
    /**
     * The Akamai BGP ASN.
     */
    akamaiBgpAsn?: pulumi.Input<number>;
    /**
     * The Akamai BGP Authentication Key.
     */
    akamaiBgpAuthenticationKey?: pulumi.Input<string>;
    /**
     * A list of Billing Tag by ID associated with the connector.
     */
    billingTagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * BYOIP options.
     */
    byoipOptions?: pulumi.Input<pulumi.Input<inputs.ConnectorAkamaiProlexicByoipOption>[]>;
    /**
     * The credential ID for storing Akamai BGP authentication key.
     */
    credentialId?: pulumi.Input<string>;
    /**
     * The CXP where the connector should be provisioned.
     */
    cxp?: pulumi.Input<string>;
    /**
     * Is the connector enabled. Default is `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The group of the connector.
     */
    group?: pulumi.Input<string>;
    /**
     * The ID of implicit group automaticaly created with the connector.
     */
    implicitGroupId?: pulumi.Input<number>;
    /**
     * The name of the connector.
     */
    name?: pulumi.Input<string>;
    /**
     * The provision state of the connector.
     */
    provisionState?: pulumi.Input<string>;
    /**
     * The ID of segments associated with the connector. Currently, only `1` segment is allowed.
     */
    segmentId?: pulumi.Input<string>;
    /**
     * The size of the connector, one of `SMALL`, `MEDIUM`, `LARGE`, `2LARGE`, `4LARGE`, `5LARGE`, `10LARGE`, `20LARGE`.
     */
    size?: pulumi.Input<string>;
    /**
     * Tunnel Configurations.
     */
    tunnelConfigurations?: pulumi.Input<pulumi.Input<inputs.ConnectorAkamaiProlexicTunnelConfiguration>[]>;
}

/**
 * The set of arguments for constructing a ConnectorAkamaiProlexic resource.
 */
export interface ConnectorAkamaiProlexicArgs {
    /**
     * The Akamai BGP ASN.
     */
    akamaiBgpAsn: pulumi.Input<number>;
    /**
     * The Akamai BGP Authentication Key.
     */
    akamaiBgpAuthenticationKey: pulumi.Input<string>;
    /**
     * A list of Billing Tag by ID associated with the connector.
     */
    billingTagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * BYOIP options.
     */
    byoipOptions: pulumi.Input<pulumi.Input<inputs.ConnectorAkamaiProlexicByoipOption>[]>;
    /**
     * The CXP where the connector should be provisioned.
     */
    cxp: pulumi.Input<string>;
    /**
     * Is the connector enabled. Default is `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The group of the connector.
     */
    group?: pulumi.Input<string>;
    /**
     * The name of the connector.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of segments associated with the connector. Currently, only `1` segment is allowed.
     */
    segmentId: pulumi.Input<string>;
    /**
     * The size of the connector, one of `SMALL`, `MEDIUM`, `LARGE`, `2LARGE`, `4LARGE`, `5LARGE`, `10LARGE`, `20LARGE`.
     */
    size: pulumi.Input<string>;
    /**
     * Tunnel Configurations.
     */
    tunnelConfigurations: pulumi.Input<pulumi.Input<inputs.ConnectorAkamaiProlexicTunnelConfiguration>[]>;
}
