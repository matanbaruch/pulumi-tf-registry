// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SegmentResource extends pulumi.CustomResource {
    /**
     * Get an existing SegmentResource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SegmentResourceState, opts?: pulumi.CustomResourceOptions): SegmentResource {
        return new SegmentResource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'alkira:index/segmentResource:SegmentResource';

    /**
     * Returns true if the given object is an instance of SegmentResource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SegmentResource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SegmentResource.__pulumiType;
    }

    /**
     * The description of the segment resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly groupPrefixes!: pulumi.Output<outputs.SegmentResourceGroupPrefix[]>;
    /**
     * The ID of automatically created implicit group.
     */
    public /*out*/ readonly implicitGroupId!: pulumi.Output<number>;
    /**
     * The name of the segment resource.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The provision state of the resource.
     */
    public /*out*/ readonly provisionState!: pulumi.Output<string>;
    /**
     * The segment ID.
     */
    public readonly segmentId!: pulumi.Output<string | undefined>;

    /**
     * Create a SegmentResource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SegmentResourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SegmentResourceArgs | SegmentResourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SegmentResourceState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["groupPrefixes"] = state ? state.groupPrefixes : undefined;
            resourceInputs["implicitGroupId"] = state ? state.implicitGroupId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["provisionState"] = state ? state.provisionState : undefined;
            resourceInputs["segmentId"] = state ? state.segmentId : undefined;
        } else {
            const args = argsOrState as SegmentResourceArgs | undefined;
            if ((!args || args.groupPrefixes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupPrefixes'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["groupPrefixes"] = args ? args.groupPrefixes : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["segmentId"] = args ? args.segmentId : undefined;
            resourceInputs["implicitGroupId"] = undefined /*out*/;
            resourceInputs["provisionState"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SegmentResource.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SegmentResource resources.
 */
export interface SegmentResourceState {
    /**
     * The description of the segment resource.
     */
    description?: pulumi.Input<string>;
    groupPrefixes?: pulumi.Input<pulumi.Input<inputs.SegmentResourceGroupPrefix>[]>;
    /**
     * The ID of automatically created implicit group.
     */
    implicitGroupId?: pulumi.Input<number>;
    /**
     * The name of the segment resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The provision state of the resource.
     */
    provisionState?: pulumi.Input<string>;
    /**
     * The segment ID.
     */
    segmentId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SegmentResource resource.
 */
export interface SegmentResourceArgs {
    /**
     * The description of the segment resource.
     */
    description?: pulumi.Input<string>;
    groupPrefixes: pulumi.Input<pulumi.Input<inputs.SegmentResourceGroupPrefix>[]>;
    /**
     * The name of the segment resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The segment ID.
     */
    segmentId?: pulumi.Input<string>;
}
