// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getMirrormakerReplicationFlow(args: GetMirrormakerReplicationFlowArgs, opts?: pulumi.InvokeOptions): Promise<GetMirrormakerReplicationFlowResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aiven:index/getMirrormakerReplicationFlow:getMirrormakerReplicationFlow", {
        "id": args.id,
        "project": args.project,
        "serviceName": args.serviceName,
        "sourceCluster": args.sourceCluster,
        "targetCluster": args.targetCluster,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMirrormakerReplicationFlow.
 */
export interface GetMirrormakerReplicationFlowArgs {
    id?: string;
    project: string;
    serviceName: string;
    sourceCluster: string;
    targetCluster: string;
}

/**
 * A collection of values returned by getMirrormakerReplicationFlow.
 */
export interface GetMirrormakerReplicationFlowResult {
    readonly configPropertiesExcludes: string[];
    readonly emitBackwardHeartbeatsEnabled: boolean;
    readonly emitHeartbeatsEnabled: boolean;
    readonly enable: boolean;
    readonly id: string;
    readonly offsetSyncsTopicLocation: string;
    readonly project: string;
    readonly replicationFactor: number;
    readonly replicationPolicyClass: string;
    readonly serviceName: string;
    readonly sourceCluster: string;
    readonly syncGroupOffsetsEnabled: boolean;
    readonly syncGroupOffsetsIntervalSeconds: number;
    readonly targetCluster: string;
    readonly topics: string[];
    readonly topicsBlacklists: string[];
}
export function getMirrormakerReplicationFlowOutput(args: GetMirrormakerReplicationFlowOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMirrormakerReplicationFlowResult> {
    return pulumi.output(args).apply((a: any) => getMirrormakerReplicationFlow(a, opts))
}

/**
 * A collection of arguments for invoking getMirrormakerReplicationFlow.
 */
export interface GetMirrormakerReplicationFlowOutputArgs {
    id?: pulumi.Input<string>;
    project: pulumi.Input<string>;
    serviceName: pulumi.Input<string>;
    sourceCluster: pulumi.Input<string>;
    targetCluster: pulumi.Input<string>;
}
