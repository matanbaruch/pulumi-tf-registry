// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getKafkaMirrormaker(args: GetKafkaMirrormakerArgs, opts?: pulumi.InvokeOptions): Promise<GetKafkaMirrormakerResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aiven:index/getKafkaMirrormaker:getKafkaMirrormaker", {
        "id": args.id,
        "project": args.project,
        "serviceName": args.serviceName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getKafkaMirrormaker.
 */
export interface GetKafkaMirrormakerArgs {
    id?: string;
    project: string;
    serviceName: string;
}

/**
 * A collection of values returned by getKafkaMirrormaker.
 */
export interface GetKafkaMirrormakerResult {
    readonly additionalDiskSpace: string;
    readonly cloudName: string;
    readonly components: outputs.GetKafkaMirrormakerComponent[];
    readonly diskSpace: string;
    readonly diskSpaceCap: string;
    readonly diskSpaceDefault: string;
    readonly diskSpaceStep: string;
    readonly diskSpaceUsed: string;
    readonly id: string;
    readonly kafkaMirrormakerUserConfigs: outputs.GetKafkaMirrormakerKafkaMirrormakerUserConfig[];
    readonly maintenanceWindowDow: string;
    readonly maintenanceWindowTime: string;
    readonly plan: string;
    readonly project: string;
    readonly projectVpcId: string;
    readonly serviceHost: string;
    readonly serviceIntegrations: outputs.GetKafkaMirrormakerServiceIntegration[];
    readonly serviceName: string;
    readonly servicePassword: string;
    readonly servicePort: number;
    readonly serviceType: string;
    readonly serviceUri: string;
    readonly serviceUsername: string;
    readonly state: string;
    readonly staticIps: string[];
    readonly tags: outputs.GetKafkaMirrormakerTag[];
    readonly techEmails: outputs.GetKafkaMirrormakerTechEmail[];
    readonly terminationProtection: boolean;
}
export function getKafkaMirrormakerOutput(args: GetKafkaMirrormakerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetKafkaMirrormakerResult> {
    return pulumi.output(args).apply((a: any) => getKafkaMirrormaker(a, opts))
}

/**
 * A collection of arguments for invoking getKafkaMirrormaker.
 */
export interface GetKafkaMirrormakerOutputArgs {
    id?: pulumi.Input<string>;
    project: pulumi.Input<string>;
    serviceName: pulumi.Input<string>;
}
