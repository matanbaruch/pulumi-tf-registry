// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getServiceComponent(args: GetServiceComponentArgs, opts?: pulumi.InvokeOptions): Promise<GetServiceComponentResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aiven:index/getServiceComponent:getServiceComponent", {
        "component": args.component,
        "id": args.id,
        "kafkaAuthenticationMethod": args.kafkaAuthenticationMethod,
        "project": args.project,
        "route": args.route,
        "serviceName": args.serviceName,
        "ssl": args.ssl,
        "usage": args.usage,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getServiceComponent.
 */
export interface GetServiceComponentArgs {
    component: string;
    id?: string;
    kafkaAuthenticationMethod?: string;
    project: string;
    route?: string;
    serviceName?: string;
    ssl?: boolean;
    usage?: string;
}

/**
 * A collection of values returned by getServiceComponent.
 */
export interface GetServiceComponentResult {
    readonly component: string;
    readonly host: string;
    readonly id: string;
    readonly kafkaAuthenticationMethod?: string;
    readonly port: number;
    readonly project: string;
    readonly route?: string;
    readonly serviceName?: string;
    readonly ssl?: boolean;
    readonly usage?: string;
}
export function getServiceComponentOutput(args: GetServiceComponentOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServiceComponentResult> {
    return pulumi.output(args).apply((a: any) => getServiceComponent(a, opts))
}

/**
 * A collection of arguments for invoking getServiceComponent.
 */
export interface GetServiceComponentOutputArgs {
    component: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    kafkaAuthenticationMethod?: pulumi.Input<string>;
    project: pulumi.Input<string>;
    route?: pulumi.Input<string>;
    serviceName?: pulumi.Input<string>;
    ssl?: pulumi.Input<boolean>;
    usage?: pulumi.Input<string>;
}
