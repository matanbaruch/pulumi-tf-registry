// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getGcpVpcPeeringConnection(args: GetGcpVpcPeeringConnectionArgs, opts?: pulumi.InvokeOptions): Promise<GetGcpVpcPeeringConnectionResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aiven:index/getGcpVpcPeeringConnection:getGcpVpcPeeringConnection", {
        "gcpProjectId": args.gcpProjectId,
        "id": args.id,
        "peerVpc": args.peerVpc,
        "vpcId": args.vpcId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getGcpVpcPeeringConnection.
 */
export interface GetGcpVpcPeeringConnectionArgs {
    gcpProjectId: string;
    id?: string;
    peerVpc: string;
    vpcId: string;
}

/**
 * A collection of values returned by getGcpVpcPeeringConnection.
 */
export interface GetGcpVpcPeeringConnectionResult {
    readonly gcpProjectId: string;
    readonly id: string;
    readonly peerVpc: string;
    readonly selfLink: string;
    readonly state: string;
    readonly stateInfo: {[key: string]: string};
    readonly vpcId: string;
}
export function getGcpVpcPeeringConnectionOutput(args: GetGcpVpcPeeringConnectionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGcpVpcPeeringConnectionResult> {
    return pulumi.output(args).apply((a: any) => getGcpVpcPeeringConnection(a, opts))
}

/**
 * A collection of arguments for invoking getGcpVpcPeeringConnection.
 */
export interface GetGcpVpcPeeringConnectionOutputArgs {
    gcpProjectId: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    peerVpc: pulumi.Input<string>;
    vpcId: pulumi.Input<string>;
}
