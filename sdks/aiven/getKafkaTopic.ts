// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getKafkaTopic(args: GetKafkaTopicArgs, opts?: pulumi.InvokeOptions): Promise<GetKafkaTopicResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aiven:index/getKafkaTopic:getKafkaTopic", {
        "id": args.id,
        "project": args.project,
        "serviceName": args.serviceName,
        "topicName": args.topicName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getKafkaTopic.
 */
export interface GetKafkaTopicArgs {
    id?: string;
    project: string;
    serviceName: string;
    topicName: string;
}

/**
 * A collection of values returned by getKafkaTopic.
 */
export interface GetKafkaTopicResult {
    readonly configs: outputs.GetKafkaTopicConfig[];
    readonly id: string;
    readonly partitions: number;
    readonly project: string;
    readonly replication: number;
    readonly serviceName: string;
    readonly tags: outputs.GetKafkaTopicTag[];
    readonly terminationProtection: boolean;
    readonly topicName: string;
}
export function getKafkaTopicOutput(args: GetKafkaTopicOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetKafkaTopicResult> {
    return pulumi.output(args).apply((a: any) => getKafkaTopic(a, opts))
}

/**
 * A collection of arguments for invoking getKafkaTopic.
 */
export interface GetKafkaTopicOutputArgs {
    id?: pulumi.Input<string>;
    project: pulumi.Input<string>;
    serviceName: pulumi.Input<string>;
    topicName: pulumi.Input<string>;
}
