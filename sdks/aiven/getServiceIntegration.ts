// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getServiceIntegration(args: GetServiceIntegrationArgs, opts?: pulumi.InvokeOptions): Promise<GetServiceIntegrationResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aiven:index/getServiceIntegration:getServiceIntegration", {
        "destinationServiceName": args.destinationServiceName,
        "id": args.id,
        "integrationType": args.integrationType,
        "project": args.project,
        "sourceServiceName": args.sourceServiceName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getServiceIntegration.
 */
export interface GetServiceIntegrationArgs {
    destinationServiceName: string;
    id?: string;
    integrationType: string;
    project: string;
    sourceServiceName: string;
}

/**
 * A collection of values returned by getServiceIntegration.
 */
export interface GetServiceIntegrationResult {
    readonly clickhouseKafkaUserConfigs: outputs.GetServiceIntegrationClickhouseKafkaUserConfig[];
    readonly clickhousePostgresqlUserConfigs: outputs.GetServiceIntegrationClickhousePostgresqlUserConfig[];
    readonly datadogUserConfigs: outputs.GetServiceIntegrationDatadogUserConfig[];
    readonly destinationEndpointId: string;
    readonly destinationServiceName: string;
    readonly externalAwsCloudwatchLogsUserConfigs: outputs.GetServiceIntegrationExternalAwsCloudwatchLogsUserConfig[];
    readonly externalAwsCloudwatchMetricsUserConfigs: outputs.GetServiceIntegrationExternalAwsCloudwatchMetricsUserConfig[];
    readonly externalElasticsearchLogsUserConfigs: outputs.GetServiceIntegrationExternalElasticsearchLogsUserConfig[];
    readonly externalOpensearchLogsUserConfigs: outputs.GetServiceIntegrationExternalOpensearchLogsUserConfig[];
    readonly id: string;
    readonly integrationId: string;
    readonly integrationType: string;
    readonly kafkaConnectUserConfigs: outputs.GetServiceIntegrationKafkaConnectUserConfig[];
    readonly kafkaLogsUserConfigs: outputs.GetServiceIntegrationKafkaLogsUserConfig[];
    readonly kafkaMirrormakerUserConfigs: outputs.GetServiceIntegrationKafkaMirrormakerUserConfig[];
    readonly logsUserConfigs: outputs.GetServiceIntegrationLogsUserConfig[];
    readonly metricsUserConfigs: outputs.GetServiceIntegrationMetricsUserConfig[];
    readonly project: string;
    readonly prometheusUserConfigs: outputs.GetServiceIntegrationPrometheusUserConfig[];
    readonly sourceEndpointId: string;
    readonly sourceServiceName: string;
}
export function getServiceIntegrationOutput(args: GetServiceIntegrationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServiceIntegrationResult> {
    return pulumi.output(args).apply((a: any) => getServiceIntegration(a, opts))
}

/**
 * A collection of arguments for invoking getServiceIntegration.
 */
export interface GetServiceIntegrationOutputArgs {
    destinationServiceName: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    integrationType: pulumi.Input<string>;
    project: pulumi.Input<string>;
    sourceServiceName: pulumi.Input<string>;
}
