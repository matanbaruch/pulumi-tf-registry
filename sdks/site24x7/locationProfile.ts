// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LocationProfile extends pulumi.CustomResource {
    /**
     * Get an existing LocationProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LocationProfileState, opts?: pulumi.CustomResourceOptions): LocationProfile {
        return new LocationProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'site24x7:index/locationProfile:LocationProfile';

    /**
     * Returns true if the given object is an instance of LocationProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LocationProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LocationProfile.__pulumiType;
    }

    /**
     * Consent is mandatory for monitoring from countries outside the European Economic Area (EEA) and the Adequate countries.
     * To provide your consent, set outer_regions_location_consent as true.
     */
    public readonly outerRegionsLocationConsent!: pulumi.Output<boolean | undefined>;
    /**
     * Primary location for monitoring.
     */
    public readonly primaryLocation!: pulumi.Output<string>;
    /**
     * Display name for the location profile.
     */
    public readonly profileName!: pulumi.Output<string>;
    /**
     * Restricts polling of the resource from the selected locations alone in the Location Profile, overrides the alternate
     * location poll logic.
     */
    public readonly restrictAlternateLocationPolling!: pulumi.Output<boolean | undefined>;
    /**
     * List of secondary locations for monitoring
     */
    public readonly secondaryLocations!: pulumi.Output<string[]>;

    /**
     * Create a LocationProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LocationProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LocationProfileArgs | LocationProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LocationProfileState | undefined;
            resourceInputs["outerRegionsLocationConsent"] = state ? state.outerRegionsLocationConsent : undefined;
            resourceInputs["primaryLocation"] = state ? state.primaryLocation : undefined;
            resourceInputs["profileName"] = state ? state.profileName : undefined;
            resourceInputs["restrictAlternateLocationPolling"] = state ? state.restrictAlternateLocationPolling : undefined;
            resourceInputs["secondaryLocations"] = state ? state.secondaryLocations : undefined;
        } else {
            const args = argsOrState as LocationProfileArgs | undefined;
            if ((!args || args.primaryLocation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'primaryLocation'");
            }
            if ((!args || args.profileName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'profileName'");
            }
            if ((!args || args.secondaryLocations === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secondaryLocations'");
            }
            resourceInputs["outerRegionsLocationConsent"] = args ? args.outerRegionsLocationConsent : undefined;
            resourceInputs["primaryLocation"] = args ? args.primaryLocation : undefined;
            resourceInputs["profileName"] = args ? args.profileName : undefined;
            resourceInputs["restrictAlternateLocationPolling"] = args ? args.restrictAlternateLocationPolling : undefined;
            resourceInputs["secondaryLocations"] = args ? args.secondaryLocations : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LocationProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LocationProfile resources.
 */
export interface LocationProfileState {
    /**
     * Consent is mandatory for monitoring from countries outside the European Economic Area (EEA) and the Adequate countries.
     * To provide your consent, set outer_regions_location_consent as true.
     */
    outerRegionsLocationConsent?: pulumi.Input<boolean>;
    /**
     * Primary location for monitoring.
     */
    primaryLocation?: pulumi.Input<string>;
    /**
     * Display name for the location profile.
     */
    profileName?: pulumi.Input<string>;
    /**
     * Restricts polling of the resource from the selected locations alone in the Location Profile, overrides the alternate
     * location poll logic.
     */
    restrictAlternateLocationPolling?: pulumi.Input<boolean>;
    /**
     * List of secondary locations for monitoring
     */
    secondaryLocations?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a LocationProfile resource.
 */
export interface LocationProfileArgs {
    /**
     * Consent is mandatory for monitoring from countries outside the European Economic Area (EEA) and the Adequate countries.
     * To provide your consent, set outer_regions_location_consent as true.
     */
    outerRegionsLocationConsent?: pulumi.Input<boolean>;
    /**
     * Primary location for monitoring.
     */
    primaryLocation: pulumi.Input<string>;
    /**
     * Display name for the location profile.
     */
    profileName: pulumi.Input<string>;
    /**
     * Restricts polling of the resource from the selected locations alone in the Location Profile, overrides the alternate
     * location poll logic.
     */
    restrictAlternateLocationPolling?: pulumi.Input<boolean>;
    /**
     * List of secondary locations for monitoring
     */
    secondaryLocations: pulumi.Input<pulumi.Input<string>[]>;
}
