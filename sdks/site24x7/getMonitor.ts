// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getMonitor(args?: GetMonitorArgs, opts?: pulumi.InvokeOptions): Promise<GetMonitorResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("site24x7:index/getMonitor:getMonitor", {
        "displayName": args.displayName,
        "id": args.id,
        "locationProfileId": args.locationProfileId,
        "monitorGroups": args.monitorGroups,
        "monitorType": args.monitorType,
        "nameRegex": args.nameRegex,
        "notificationProfileId": args.notificationProfileId,
        "tagIds": args.tagIds,
        "thirdPartyServiceIds": args.thirdPartyServiceIds,
        "thresholdProfileId": args.thresholdProfileId,
        "userGroupIds": args.userGroupIds,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMonitor.
 */
export interface GetMonitorArgs {
    displayName?: string;
    id?: string;
    locationProfileId?: string;
    monitorGroups?: string[];
    monitorType?: string;
    nameRegex?: string;
    notificationProfileId?: string;
    tagIds?: string[];
    thirdPartyServiceIds?: string[];
    thresholdProfileId?: string;
    userGroupIds?: string[];
}

/**
 * A collection of values returned by getMonitor.
 */
export interface GetMonitorResult {
    readonly displayName: string;
    readonly id: string;
    readonly locationProfileId: string;
    readonly monitorGroups?: string[];
    readonly monitorType?: string;
    readonly nameRegex?: string;
    readonly notificationProfileId: string;
    readonly tagIds: string[];
    readonly thirdPartyServiceIds?: string[];
    readonly thresholdProfileId: string;
    readonly userGroupIds: string[];
}
export function getMonitorOutput(args?: GetMonitorOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMonitorResult> {
    return pulumi.output(args).apply((a: any) => getMonitor(a, opts))
}

/**
 * A collection of arguments for invoking getMonitor.
 */
export interface GetMonitorOutputArgs {
    displayName?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    locationProfileId?: pulumi.Input<string>;
    monitorGroups?: pulumi.Input<pulumi.Input<string>[]>;
    monitorType?: pulumi.Input<string>;
    nameRegex?: pulumi.Input<string>;
    notificationProfileId?: pulumi.Input<string>;
    tagIds?: pulumi.Input<pulumi.Input<string>[]>;
    thirdPartyServiceIds?: pulumi.Input<pulumi.Input<string>[]>;
    thresholdProfileId?: pulumi.Input<string>;
    userGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
}
