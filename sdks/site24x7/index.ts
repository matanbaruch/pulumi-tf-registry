// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AmazonMonitorArgs, AmazonMonitorState } from "./amazonMonitor";
export type AmazonMonitor = import("./amazonMonitor").AmazonMonitor;
export const AmazonMonitor: typeof import("./amazonMonitor").AmazonMonitor = null as any;
utilities.lazyLoad(exports, ["AmazonMonitor"], () => require("./amazonMonitor"));

export { ConnectwiseIntegrationArgs, ConnectwiseIntegrationState } from "./connectwiseIntegration";
export type ConnectwiseIntegration = import("./connectwiseIntegration").ConnectwiseIntegration;
export const ConnectwiseIntegration: typeof import("./connectwiseIntegration").ConnectwiseIntegration = null as any;
utilities.lazyLoad(exports, ["ConnectwiseIntegration"], () => require("./connectwiseIntegration"));

export { CredentialProfileArgs, CredentialProfileState } from "./credentialProfile";
export type CredentialProfile = import("./credentialProfile").CredentialProfile;
export const CredentialProfile: typeof import("./credentialProfile").CredentialProfile = null as any;
utilities.lazyLoad(exports, ["CredentialProfile"], () => require("./credentialProfile"));

export { CronMonitorArgs, CronMonitorState } from "./cronMonitor";
export type CronMonitor = import("./cronMonitor").CronMonitor;
export const CronMonitor: typeof import("./cronMonitor").CronMonitor = null as any;
utilities.lazyLoad(exports, ["CronMonitor"], () => require("./cronMonitor"));

export { DnsServerMonitorArgs, DnsServerMonitorState } from "./dnsServerMonitor";
export type DnsServerMonitor = import("./dnsServerMonitor").DnsServerMonitor;
export const DnsServerMonitor: typeof import("./dnsServerMonitor").DnsServerMonitor = null as any;
utilities.lazyLoad(exports, ["DnsServerMonitor"], () => require("./dnsServerMonitor"));

export { DomainExpiryMonitorArgs, DomainExpiryMonitorState } from "./domainExpiryMonitor";
export type DomainExpiryMonitor = import("./domainExpiryMonitor").DomainExpiryMonitor;
export const DomainExpiryMonitor: typeof import("./domainExpiryMonitor").DomainExpiryMonitor = null as any;
utilities.lazyLoad(exports, ["DomainExpiryMonitor"], () => require("./domainExpiryMonitor"));

export { FtpTransferMonitorArgs, FtpTransferMonitorState } from "./ftpTransferMonitor";
export type FtpTransferMonitor = import("./ftpTransferMonitor").FtpTransferMonitor;
export const FtpTransferMonitor: typeof import("./ftpTransferMonitor").FtpTransferMonitor = null as any;
utilities.lazyLoad(exports, ["FtpTransferMonitor"], () => require("./ftpTransferMonitor"));

export { GetAwsExternalIdArgs, GetAwsExternalIdResult, GetAwsExternalIdOutputArgs } from "./getAwsExternalId";
export const getAwsExternalId: typeof import("./getAwsExternalId").getAwsExternalId = null as any;
export const getAwsExternalIdOutput: typeof import("./getAwsExternalId").getAwsExternalIdOutput = null as any;
utilities.lazyLoad(exports, ["getAwsExternalId","getAwsExternalIdOutput"], () => require("./getAwsExternalId"));

export { GetCredentialProfileArgs, GetCredentialProfileResult, GetCredentialProfileOutputArgs } from "./getCredentialProfile";
export const getCredentialProfile: typeof import("./getCredentialProfile").getCredentialProfile = null as any;
export const getCredentialProfileOutput: typeof import("./getCredentialProfile").getCredentialProfileOutput = null as any;
utilities.lazyLoad(exports, ["getCredentialProfile","getCredentialProfileOutput"], () => require("./getCredentialProfile"));

export { GetDeviceKeyArgs, GetDeviceKeyResult, GetDeviceKeyOutputArgs } from "./getDeviceKey";
export const getDeviceKey: typeof import("./getDeviceKey").getDeviceKey = null as any;
export const getDeviceKeyOutput: typeof import("./getDeviceKey").getDeviceKeyOutput = null as any;
utilities.lazyLoad(exports, ["getDeviceKey","getDeviceKeyOutput"], () => require("./getDeviceKey"));

export { GetItAutomationArgs, GetItAutomationResult, GetItAutomationOutputArgs } from "./getItAutomation";
export const getItAutomation: typeof import("./getItAutomation").getItAutomation = null as any;
export const getItAutomationOutput: typeof import("./getItAutomation").getItAutomationOutput = null as any;
utilities.lazyLoad(exports, ["getItAutomation","getItAutomationOutput"], () => require("./getItAutomation"));

export { GetLocationProfileArgs, GetLocationProfileResult, GetLocationProfileOutputArgs } from "./getLocationProfile";
export const getLocationProfile: typeof import("./getLocationProfile").getLocationProfile = null as any;
export const getLocationProfileOutput: typeof import("./getLocationProfile").getLocationProfileOutput = null as any;
utilities.lazyLoad(exports, ["getLocationProfile","getLocationProfileOutput"], () => require("./getLocationProfile"));

export { GetMonitorArgs, GetMonitorResult, GetMonitorOutputArgs } from "./getMonitor";
export const getMonitor: typeof import("./getMonitor").getMonitor = null as any;
export const getMonitorOutput: typeof import("./getMonitor").getMonitorOutput = null as any;
utilities.lazyLoad(exports, ["getMonitor","getMonitorOutput"], () => require("./getMonitor"));

export { GetMonitorGroupArgs, GetMonitorGroupResult, GetMonitorGroupOutputArgs } from "./getMonitorGroup";
export const getMonitorGroup: typeof import("./getMonitorGroup").getMonitorGroup = null as any;
export const getMonitorGroupOutput: typeof import("./getMonitorGroup").getMonitorGroupOutput = null as any;
utilities.lazyLoad(exports, ["getMonitorGroup","getMonitorGroupOutput"], () => require("./getMonitorGroup"));

export { GetMonitorsArgs, GetMonitorsResult, GetMonitorsOutputArgs } from "./getMonitors";
export const getMonitors: typeof import("./getMonitors").getMonitors = null as any;
export const getMonitorsOutput: typeof import("./getMonitors").getMonitorsOutput = null as any;
utilities.lazyLoad(exports, ["getMonitors","getMonitorsOutput"], () => require("./getMonitors"));

export { GetMspArgs, GetMspResult, GetMspOutputArgs } from "./getMsp";
export const getMsp: typeof import("./getMsp").getMsp = null as any;
export const getMspOutput: typeof import("./getMsp").getMspOutput = null as any;
utilities.lazyLoad(exports, ["getMsp","getMspOutput"], () => require("./getMsp"));

export { GetNotificationProfileArgs, GetNotificationProfileResult, GetNotificationProfileOutputArgs } from "./getNotificationProfile";
export const getNotificationProfile: typeof import("./getNotificationProfile").getNotificationProfile = null as any;
export const getNotificationProfileOutput: typeof import("./getNotificationProfile").getNotificationProfileOutput = null as any;
utilities.lazyLoad(exports, ["getNotificationProfile","getNotificationProfileOutput"], () => require("./getNotificationProfile"));

export { GetTagArgs, GetTagResult, GetTagOutputArgs } from "./getTag";
export const getTag: typeof import("./getTag").getTag = null as any;
export const getTagOutput: typeof import("./getTag").getTagOutput = null as any;
utilities.lazyLoad(exports, ["getTag","getTagOutput"], () => require("./getTag"));

export { GetThresholdProfileArgs, GetThresholdProfileResult, GetThresholdProfileOutputArgs } from "./getThresholdProfile";
export const getThresholdProfile: typeof import("./getThresholdProfile").getThresholdProfile = null as any;
export const getThresholdProfileOutput: typeof import("./getThresholdProfile").getThresholdProfileOutput = null as any;
utilities.lazyLoad(exports, ["getThresholdProfile","getThresholdProfileOutput"], () => require("./getThresholdProfile"));

export { GetUserGroupArgs, GetUserGroupResult, GetUserGroupOutputArgs } from "./getUserGroup";
export const getUserGroup: typeof import("./getUserGroup").getUserGroup = null as any;
export const getUserGroupOutput: typeof import("./getUserGroup").getUserGroupOutput = null as any;
utilities.lazyLoad(exports, ["getUserGroup","getUserGroupOutput"], () => require("./getUserGroup"));

export { HeartbeatMonitorArgs, HeartbeatMonitorState } from "./heartbeatMonitor";
export type HeartbeatMonitor = import("./heartbeatMonitor").HeartbeatMonitor;
export const HeartbeatMonitor: typeof import("./heartbeatMonitor").HeartbeatMonitor = null as any;
utilities.lazyLoad(exports, ["HeartbeatMonitor"], () => require("./heartbeatMonitor"));

export { IspMonitorArgs, IspMonitorState } from "./ispMonitor";
export type IspMonitor = import("./ispMonitor").IspMonitor;
export const IspMonitor: typeof import("./ispMonitor").IspMonitor = null as any;
utilities.lazyLoad(exports, ["IspMonitor"], () => require("./ispMonitor"));

export { LocationProfileArgs, LocationProfileState } from "./locationProfile";
export type LocationProfile = import("./locationProfile").LocationProfile;
export const LocationProfile: typeof import("./locationProfile").LocationProfile = null as any;
utilities.lazyLoad(exports, ["LocationProfile"], () => require("./locationProfile"));

export { MonitorGroupArgs, MonitorGroupState } from "./monitorGroup";
export type MonitorGroup = import("./monitorGroup").MonitorGroup;
export const MonitorGroup: typeof import("./monitorGroup").MonitorGroup = null as any;
utilities.lazyLoad(exports, ["MonitorGroup"], () => require("./monitorGroup"));

export { NotificationProfileArgs, NotificationProfileState } from "./notificationProfile";
export type NotificationProfile = import("./notificationProfile").NotificationProfile;
export const NotificationProfile: typeof import("./notificationProfile").NotificationProfile = null as any;
utilities.lazyLoad(exports, ["NotificationProfile"], () => require("./notificationProfile"));

export { OpsgenieIntegrationArgs, OpsgenieIntegrationState } from "./opsgenieIntegration";
export type OpsgenieIntegration = import("./opsgenieIntegration").OpsgenieIntegration;
export const OpsgenieIntegration: typeof import("./opsgenieIntegration").OpsgenieIntegration = null as any;
utilities.lazyLoad(exports, ["OpsgenieIntegration"], () => require("./opsgenieIntegration"));

export { PagerdutyIntegrationArgs, PagerdutyIntegrationState } from "./pagerdutyIntegration";
export type PagerdutyIntegration = import("./pagerdutyIntegration").PagerdutyIntegration;
export const PagerdutyIntegration: typeof import("./pagerdutyIntegration").PagerdutyIntegration = null as any;
utilities.lazyLoad(exports, ["PagerdutyIntegration"], () => require("./pagerdutyIntegration"));

export { PingMonitorArgs, PingMonitorState } from "./pingMonitor";
export type PingMonitor = import("./pingMonitor").PingMonitor;
export const PingMonitor: typeof import("./pingMonitor").PingMonitor = null as any;
utilities.lazyLoad(exports, ["PingMonitor"], () => require("./pingMonitor"));

export { PortMonitorArgs, PortMonitorState } from "./portMonitor";
export type PortMonitor = import("./portMonitor").PortMonitor;
export const PortMonitor: typeof import("./portMonitor").PortMonitor = null as any;
utilities.lazyLoad(exports, ["PortMonitor"], () => require("./portMonitor"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RestApiMonitorArgs, RestApiMonitorState } from "./restApiMonitor";
export type RestApiMonitor = import("./restApiMonitor").RestApiMonitor;
export const RestApiMonitor: typeof import("./restApiMonitor").RestApiMonitor = null as any;
utilities.lazyLoad(exports, ["RestApiMonitor"], () => require("./restApiMonitor"));

export { RestApiTransactionMonitorArgs, RestApiTransactionMonitorState } from "./restApiTransactionMonitor";
export type RestApiTransactionMonitor = import("./restApiTransactionMonitor").RestApiTransactionMonitor;
export const RestApiTransactionMonitor: typeof import("./restApiTransactionMonitor").RestApiTransactionMonitor = null as any;
utilities.lazyLoad(exports, ["RestApiTransactionMonitor"], () => require("./restApiTransactionMonitor"));

export { ScheduleMaintenanceArgs, ScheduleMaintenanceState } from "./scheduleMaintenance";
export type ScheduleMaintenance = import("./scheduleMaintenance").ScheduleMaintenance;
export const ScheduleMaintenance: typeof import("./scheduleMaintenance").ScheduleMaintenance = null as any;
utilities.lazyLoad(exports, ["ScheduleMaintenance"], () => require("./scheduleMaintenance"));

export { ServerMonitorArgs, ServerMonitorState } from "./serverMonitor";
export type ServerMonitor = import("./serverMonitor").ServerMonitor;
export const ServerMonitor: typeof import("./serverMonitor").ServerMonitor = null as any;
utilities.lazyLoad(exports, ["ServerMonitor"], () => require("./serverMonitor"));

export { ServicenowIntegrationArgs, ServicenowIntegrationState } from "./servicenowIntegration";
export type ServicenowIntegration = import("./servicenowIntegration").ServicenowIntegration;
export const ServicenowIntegration: typeof import("./servicenowIntegration").ServicenowIntegration = null as any;
utilities.lazyLoad(exports, ["ServicenowIntegration"], () => require("./servicenowIntegration"));

export { SlackIntegrationArgs, SlackIntegrationState } from "./slackIntegration";
export type SlackIntegration = import("./slackIntegration").SlackIntegration;
export const SlackIntegration: typeof import("./slackIntegration").SlackIntegration = null as any;
utilities.lazyLoad(exports, ["SlackIntegration"], () => require("./slackIntegration"));

export { SslMonitorArgs, SslMonitorState } from "./sslMonitor";
export type SslMonitor = import("./sslMonitor").SslMonitor;
export const SslMonitor: typeof import("./sslMonitor").SslMonitor = null as any;
utilities.lazyLoad(exports, ["SslMonitor"], () => require("./sslMonitor"));

export { SubgroupArgs, SubgroupState } from "./subgroup";
export type Subgroup = import("./subgroup").Subgroup;
export const Subgroup: typeof import("./subgroup").Subgroup = null as any;
utilities.lazyLoad(exports, ["Subgroup"], () => require("./subgroup"));

export { TagArgs, TagState } from "./tag";
export type Tag = import("./tag").Tag;
export const Tag: typeof import("./tag").Tag = null as any;
utilities.lazyLoad(exports, ["Tag"], () => require("./tag"));

export { TelegramIntegrationArgs, TelegramIntegrationState } from "./telegramIntegration";
export type TelegramIntegration = import("./telegramIntegration").TelegramIntegration;
export const TelegramIntegration: typeof import("./telegramIntegration").TelegramIntegration = null as any;
utilities.lazyLoad(exports, ["TelegramIntegration"], () => require("./telegramIntegration"));

export { ThresholdProfileArgs, ThresholdProfileState } from "./thresholdProfile";
export type ThresholdProfile = import("./thresholdProfile").ThresholdProfile;
export const ThresholdProfile: typeof import("./thresholdProfile").ThresholdProfile = null as any;
utilities.lazyLoad(exports, ["ThresholdProfile"], () => require("./thresholdProfile"));

export { UrlActionArgs, UrlActionState } from "./urlAction";
export type UrlAction = import("./urlAction").UrlAction;
export const UrlAction: typeof import("./urlAction").UrlAction = null as any;
utilities.lazyLoad(exports, ["UrlAction"], () => require("./urlAction"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { UserGroupArgs, UserGroupState } from "./userGroup";
export type UserGroup = import("./userGroup").UserGroup;
export const UserGroup: typeof import("./userGroup").UserGroup = null as any;
utilities.lazyLoad(exports, ["UserGroup"], () => require("./userGroup"));

export { WebPageSpeedMonitorArgs, WebPageSpeedMonitorState } from "./webPageSpeedMonitor";
export type WebPageSpeedMonitor = import("./webPageSpeedMonitor").WebPageSpeedMonitor;
export const WebPageSpeedMonitor: typeof import("./webPageSpeedMonitor").WebPageSpeedMonitor = null as any;
utilities.lazyLoad(exports, ["WebPageSpeedMonitor"], () => require("./webPageSpeedMonitor"));

export { WebTransactionBrowserMonitorArgs, WebTransactionBrowserMonitorState } from "./webTransactionBrowserMonitor";
export type WebTransactionBrowserMonitor = import("./webTransactionBrowserMonitor").WebTransactionBrowserMonitor;
export const WebTransactionBrowserMonitor: typeof import("./webTransactionBrowserMonitor").WebTransactionBrowserMonitor = null as any;
utilities.lazyLoad(exports, ["WebTransactionBrowserMonitor"], () => require("./webTransactionBrowserMonitor"));

export { WebhookIntegrationArgs, WebhookIntegrationState } from "./webhookIntegration";
export type WebhookIntegration = import("./webhookIntegration").WebhookIntegration;
export const WebhookIntegration: typeof import("./webhookIntegration").WebhookIntegration = null as any;
utilities.lazyLoad(exports, ["WebhookIntegration"], () => require("./webhookIntegration"));

export { WebsiteMonitorArgs, WebsiteMonitorState } from "./websiteMonitor";
export type WebsiteMonitor = import("./websiteMonitor").WebsiteMonitor;
export const WebsiteMonitor: typeof import("./websiteMonitor").WebsiteMonitor = null as any;
utilities.lazyLoad(exports, ["WebsiteMonitor"], () => require("./websiteMonitor"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "site24x7:index/amazonMonitor:AmazonMonitor":
                return new AmazonMonitor(name, <any>undefined, { urn })
            case "site24x7:index/connectwiseIntegration:ConnectwiseIntegration":
                return new ConnectwiseIntegration(name, <any>undefined, { urn })
            case "site24x7:index/credentialProfile:CredentialProfile":
                return new CredentialProfile(name, <any>undefined, { urn })
            case "site24x7:index/cronMonitor:CronMonitor":
                return new CronMonitor(name, <any>undefined, { urn })
            case "site24x7:index/dnsServerMonitor:DnsServerMonitor":
                return new DnsServerMonitor(name, <any>undefined, { urn })
            case "site24x7:index/domainExpiryMonitor:DomainExpiryMonitor":
                return new DomainExpiryMonitor(name, <any>undefined, { urn })
            case "site24x7:index/ftpTransferMonitor:FtpTransferMonitor":
                return new FtpTransferMonitor(name, <any>undefined, { urn })
            case "site24x7:index/heartbeatMonitor:HeartbeatMonitor":
                return new HeartbeatMonitor(name, <any>undefined, { urn })
            case "site24x7:index/ispMonitor:IspMonitor":
                return new IspMonitor(name, <any>undefined, { urn })
            case "site24x7:index/locationProfile:LocationProfile":
                return new LocationProfile(name, <any>undefined, { urn })
            case "site24x7:index/monitorGroup:MonitorGroup":
                return new MonitorGroup(name, <any>undefined, { urn })
            case "site24x7:index/notificationProfile:NotificationProfile":
                return new NotificationProfile(name, <any>undefined, { urn })
            case "site24x7:index/opsgenieIntegration:OpsgenieIntegration":
                return new OpsgenieIntegration(name, <any>undefined, { urn })
            case "site24x7:index/pagerdutyIntegration:PagerdutyIntegration":
                return new PagerdutyIntegration(name, <any>undefined, { urn })
            case "site24x7:index/pingMonitor:PingMonitor":
                return new PingMonitor(name, <any>undefined, { urn })
            case "site24x7:index/portMonitor:PortMonitor":
                return new PortMonitor(name, <any>undefined, { urn })
            case "site24x7:index/restApiMonitor:RestApiMonitor":
                return new RestApiMonitor(name, <any>undefined, { urn })
            case "site24x7:index/restApiTransactionMonitor:RestApiTransactionMonitor":
                return new RestApiTransactionMonitor(name, <any>undefined, { urn })
            case "site24x7:index/scheduleMaintenance:ScheduleMaintenance":
                return new ScheduleMaintenance(name, <any>undefined, { urn })
            case "site24x7:index/serverMonitor:ServerMonitor":
                return new ServerMonitor(name, <any>undefined, { urn })
            case "site24x7:index/servicenowIntegration:ServicenowIntegration":
                return new ServicenowIntegration(name, <any>undefined, { urn })
            case "site24x7:index/slackIntegration:SlackIntegration":
                return new SlackIntegration(name, <any>undefined, { urn })
            case "site24x7:index/sslMonitor:SslMonitor":
                return new SslMonitor(name, <any>undefined, { urn })
            case "site24x7:index/subgroup:Subgroup":
                return new Subgroup(name, <any>undefined, { urn })
            case "site24x7:index/tag:Tag":
                return new Tag(name, <any>undefined, { urn })
            case "site24x7:index/telegramIntegration:TelegramIntegration":
                return new TelegramIntegration(name, <any>undefined, { urn })
            case "site24x7:index/thresholdProfile:ThresholdProfile":
                return new ThresholdProfile(name, <any>undefined, { urn })
            case "site24x7:index/urlAction:UrlAction":
                return new UrlAction(name, <any>undefined, { urn })
            case "site24x7:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "site24x7:index/userGroup:UserGroup":
                return new UserGroup(name, <any>undefined, { urn })
            case "site24x7:index/webPageSpeedMonitor:WebPageSpeedMonitor":
                return new WebPageSpeedMonitor(name, <any>undefined, { urn })
            case "site24x7:index/webTransactionBrowserMonitor:WebTransactionBrowserMonitor":
                return new WebTransactionBrowserMonitor(name, <any>undefined, { urn })
            case "site24x7:index/webhookIntegration:WebhookIntegration":
                return new WebhookIntegration(name, <any>undefined, { urn })
            case "site24x7:index/websiteMonitor:WebsiteMonitor":
                return new WebsiteMonitor(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("site24x7", "index/amazonMonitor", _module)
pulumi.runtime.registerResourceModule("site24x7", "index/connectwiseIntegration", _module)
pulumi.runtime.registerResourceModule("site24x7", "index/credentialProfile", _module)
pulumi.runtime.registerResourceModule("site24x7", "index/cronMonitor", _module)
pulumi.runtime.registerResourceModule("site24x7", "index/dnsServerMonitor", _module)
pulumi.runtime.registerResourceModule("site24x7", "index/domainExpiryMonitor", _module)
pulumi.runtime.registerResourceModule("site24x7", "index/ftpTransferMonitor", _module)
pulumi.runtime.registerResourceModule("site24x7", "index/heartbeatMonitor", _module)
pulumi.runtime.registerResourceModule("site24x7", "index/ispMonitor", _module)
pulumi.runtime.registerResourceModule("site24x7", "index/locationProfile", _module)
pulumi.runtime.registerResourceModule("site24x7", "index/monitorGroup", _module)
pulumi.runtime.registerResourceModule("site24x7", "index/notificationProfile", _module)
pulumi.runtime.registerResourceModule("site24x7", "index/opsgenieIntegration", _module)
pulumi.runtime.registerResourceModule("site24x7", "index/pagerdutyIntegration", _module)
pulumi.runtime.registerResourceModule("site24x7", "index/pingMonitor", _module)
pulumi.runtime.registerResourceModule("site24x7", "index/portMonitor", _module)
pulumi.runtime.registerResourceModule("site24x7", "index/restApiMonitor", _module)
pulumi.runtime.registerResourceModule("site24x7", "index/restApiTransactionMonitor", _module)
pulumi.runtime.registerResourceModule("site24x7", "index/scheduleMaintenance", _module)
pulumi.runtime.registerResourceModule("site24x7", "index/serverMonitor", _module)
pulumi.runtime.registerResourceModule("site24x7", "index/servicenowIntegration", _module)
pulumi.runtime.registerResourceModule("site24x7", "index/slackIntegration", _module)
pulumi.runtime.registerResourceModule("site24x7", "index/sslMonitor", _module)
pulumi.runtime.registerResourceModule("site24x7", "index/subgroup", _module)
pulumi.runtime.registerResourceModule("site24x7", "index/tag", _module)
pulumi.runtime.registerResourceModule("site24x7", "index/telegramIntegration", _module)
pulumi.runtime.registerResourceModule("site24x7", "index/thresholdProfile", _module)
pulumi.runtime.registerResourceModule("site24x7", "index/urlAction", _module)
pulumi.runtime.registerResourceModule("site24x7", "index/user", _module)
pulumi.runtime.registerResourceModule("site24x7", "index/userGroup", _module)
pulumi.runtime.registerResourceModule("site24x7", "index/webPageSpeedMonitor", _module)
pulumi.runtime.registerResourceModule("site24x7", "index/webTransactionBrowserMonitor", _module)
pulumi.runtime.registerResourceModule("site24x7", "index/webhookIntegration", _module)
pulumi.runtime.registerResourceModule("site24x7", "index/websiteMonitor", _module)
pulumi.runtime.registerResourcePackage("site24x7", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:site24x7") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
