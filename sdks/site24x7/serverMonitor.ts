// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ServerMonitor extends pulumi.CustomResource {
    /**
     * Get an existing ServerMonitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerMonitorState, opts?: pulumi.CustomResourceOptions): ServerMonitor {
        return new ServerMonitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'site24x7:index/serverMonitor:ServerMonitor';

    /**
     * Returns true if the given object is an instance of ServerMonitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServerMonitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServerMonitor.__pulumiType;
    }

    /**
     * Display name for the monitor.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Boolean to enable/disable Event Log/Syslog monitoring.
     */
    public readonly logNeeded!: pulumi.Output<boolean | undefined>;
    /**
     * List of monitor groups to which the monitor has to be associated.
     */
    public readonly monitorGroups!: pulumi.Output<string[]>;
    /**
     * Notification profile to be associated with the monitor.
     */
    public readonly notificationProfileId!: pulumi.Output<string>;
    /**
     * Name of the notification profile to be associated with the monitor.
     */
    public readonly notificationProfileName!: pulumi.Output<string | undefined>;
    /**
     * Execute IT Automation during scheduled maintenance.
     */
    public readonly performAutomation!: pulumi.Output<boolean | undefined>;
    /**
     * Frequency at which data has to be collected for the server monitor.
     */
    public readonly pollInterval!: pulumi.Output<number | undefined>;
    /**
     * List of tag IDs to be associated to the monitor.
     */
    public readonly tagIds!: pulumi.Output<string[]>;
    /**
     * List of tag names to be associated to the monitor.
     */
    public readonly tagNames!: pulumi.Output<string[] | undefined>;
    /**
     * List of Third Party Service IDs to be associated to the monitor.
     */
    public readonly thirdPartyServiceIds!: pulumi.Output<string[] | undefined>;
    /**
     * Threshold profile to be associated with the monitor.
     */
    public readonly thresholdProfileId!: pulumi.Output<string>;
    /**
     * List of user groups to be notified when the monitor is down.
     */
    public readonly userGroupIds!: pulumi.Output<string[]>;
    /**
     * Name of the user groups to be associated with the monitor.
     */
    public readonly userGroupNames!: pulumi.Output<string[] | undefined>;

    /**
     * Create a ServerMonitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerMonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerMonitorArgs | ServerMonitorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerMonitorState | undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["logNeeded"] = state ? state.logNeeded : undefined;
            resourceInputs["monitorGroups"] = state ? state.monitorGroups : undefined;
            resourceInputs["notificationProfileId"] = state ? state.notificationProfileId : undefined;
            resourceInputs["notificationProfileName"] = state ? state.notificationProfileName : undefined;
            resourceInputs["performAutomation"] = state ? state.performAutomation : undefined;
            resourceInputs["pollInterval"] = state ? state.pollInterval : undefined;
            resourceInputs["tagIds"] = state ? state.tagIds : undefined;
            resourceInputs["tagNames"] = state ? state.tagNames : undefined;
            resourceInputs["thirdPartyServiceIds"] = state ? state.thirdPartyServiceIds : undefined;
            resourceInputs["thresholdProfileId"] = state ? state.thresholdProfileId : undefined;
            resourceInputs["userGroupIds"] = state ? state.userGroupIds : undefined;
            resourceInputs["userGroupNames"] = state ? state.userGroupNames : undefined;
        } else {
            const args = argsOrState as ServerMonitorArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["logNeeded"] = args ? args.logNeeded : undefined;
            resourceInputs["monitorGroups"] = args ? args.monitorGroups : undefined;
            resourceInputs["notificationProfileId"] = args ? args.notificationProfileId : undefined;
            resourceInputs["notificationProfileName"] = args ? args.notificationProfileName : undefined;
            resourceInputs["performAutomation"] = args ? args.performAutomation : undefined;
            resourceInputs["pollInterval"] = args ? args.pollInterval : undefined;
            resourceInputs["tagIds"] = args ? args.tagIds : undefined;
            resourceInputs["tagNames"] = args ? args.tagNames : undefined;
            resourceInputs["thirdPartyServiceIds"] = args ? args.thirdPartyServiceIds : undefined;
            resourceInputs["thresholdProfileId"] = args ? args.thresholdProfileId : undefined;
            resourceInputs["userGroupIds"] = args ? args.userGroupIds : undefined;
            resourceInputs["userGroupNames"] = args ? args.userGroupNames : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServerMonitor.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ServerMonitor resources.
 */
export interface ServerMonitorState {
    /**
     * Display name for the monitor.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Boolean to enable/disable Event Log/Syslog monitoring.
     */
    logNeeded?: pulumi.Input<boolean>;
    /**
     * List of monitor groups to which the monitor has to be associated.
     */
    monitorGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Notification profile to be associated with the monitor.
     */
    notificationProfileId?: pulumi.Input<string>;
    /**
     * Name of the notification profile to be associated with the monitor.
     */
    notificationProfileName?: pulumi.Input<string>;
    /**
     * Execute IT Automation during scheduled maintenance.
     */
    performAutomation?: pulumi.Input<boolean>;
    /**
     * Frequency at which data has to be collected for the server monitor.
     */
    pollInterval?: pulumi.Input<number>;
    /**
     * List of tag IDs to be associated to the monitor.
     */
    tagIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of tag names to be associated to the monitor.
     */
    tagNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of Third Party Service IDs to be associated to the monitor.
     */
    thirdPartyServiceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Threshold profile to be associated with the monitor.
     */
    thresholdProfileId?: pulumi.Input<string>;
    /**
     * List of user groups to be notified when the monitor is down.
     */
    userGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the user groups to be associated with the monitor.
     */
    userGroupNames?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ServerMonitor resource.
 */
export interface ServerMonitorArgs {
    /**
     * Display name for the monitor.
     */
    displayName: pulumi.Input<string>;
    /**
     * Boolean to enable/disable Event Log/Syslog monitoring.
     */
    logNeeded?: pulumi.Input<boolean>;
    /**
     * List of monitor groups to which the monitor has to be associated.
     */
    monitorGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Notification profile to be associated with the monitor.
     */
    notificationProfileId?: pulumi.Input<string>;
    /**
     * Name of the notification profile to be associated with the monitor.
     */
    notificationProfileName?: pulumi.Input<string>;
    /**
     * Execute IT Automation during scheduled maintenance.
     */
    performAutomation?: pulumi.Input<boolean>;
    /**
     * Frequency at which data has to be collected for the server monitor.
     */
    pollInterval?: pulumi.Input<number>;
    /**
     * List of tag IDs to be associated to the monitor.
     */
    tagIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of tag names to be associated to the monitor.
     */
    tagNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of Third Party Service IDs to be associated to the monitor.
     */
    thirdPartyServiceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Threshold profile to be associated with the monitor.
     */
    thresholdProfileId?: pulumi.Input<string>;
    /**
     * List of user groups to be notified when the monitor is down.
     */
    userGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the user groups to be associated with the monitor.
     */
    userGroupNames?: pulumi.Input<pulumi.Input<string>[]>;
}
