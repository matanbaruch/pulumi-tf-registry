// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PagerdutyIntegration extends pulumi.CustomResource {
    /**
     * Get an existing PagerdutyIntegration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PagerdutyIntegrationState, opts?: pulumi.CustomResourceOptions): PagerdutyIntegration {
        return new PagerdutyIntegration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'site24x7:index/pagerdutyIntegration:PagerdutyIntegration';

    /**
     * Returns true if the given object is an instance of PagerdutyIntegration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PagerdutyIntegration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PagerdutyIntegration.__pulumiType;
    }

    /**
     * Tag id’s to be associated with the integration.
     */
    public readonly alertTagsIds!: pulumi.Output<string[] | undefined>;
    /**
     * Setting this to 'true' will send alert notifications to this third-party integration when the monitor status changes to
     * 'Critical'. One among trouble_alert|critical_alert|down_alert should be set to true for receiving notifications.
     */
    public readonly criticalAlert!: pulumi.Output<boolean | undefined>;
    /**
     * Mandatory, if send_custom_parameters is set as true. Custom parameters to be passed while accessing the URL.
     */
    public readonly customParameters!: pulumi.Output<string | undefined>;
    /**
     * Setting this to 'true' will send alert notifications to this third-party integration when the monitor status changes to
     * 'Down'. One among trouble_alert|critical_alert|down_alert should be set to true for receiving notifications.
     */
    public readonly downAlert!: pulumi.Output<boolean | undefined>;
    /**
     * Configuration to resolve the incidents manually when the monitor changes to UP status.
     */
    public readonly manualResolve!: pulumi.Output<boolean | undefined>;
    /**
     * Monitors to be associated with the integration when the selection_type = 2.
     */
    public readonly monitors!: pulumi.Output<string[] | undefined>;
    /**
     * Display name for the PagerDuty Integration.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Resource Type associated with this integration. Default value is '0'. Can take values 0|2|3. '0' denotes 'All Monitors',
     * '2' denotes 'Monitors', '3' denotes 'Tags'
     */
    public readonly selectionType!: pulumi.Output<number | undefined>;
    /**
     * Configuration to send custom parameters while executing the action.
     */
    public readonly sendCustomParameters!: pulumi.Output<boolean | undefined>;
    /**
     * Name of the service who posted the incident.
     */
    public readonly senderName!: pulumi.Output<string>;
    /**
     * Unique integration key provided by PagerDuty to facilitate incident creation in PagerDuty.
     */
    public readonly serviceKey!: pulumi.Output<string>;
    /**
     * Tags to be associated with the integration when the selection_type = 3.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * Title of the incident.
     */
    public readonly title!: pulumi.Output<string>;
    /**
     * Setting this to 'true' will send alert notifications to this third-party integration when the monitor status changes to
     * 'Trouble'. One among trouble_alert|critical_alert|down_alert should be set to true for receiving notifications. Default
     * value is 'true'
     */
    public readonly troubleAlert!: pulumi.Output<boolean | undefined>;

    /**
     * Create a PagerdutyIntegration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PagerdutyIntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PagerdutyIntegrationArgs | PagerdutyIntegrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PagerdutyIntegrationState | undefined;
            resourceInputs["alertTagsIds"] = state ? state.alertTagsIds : undefined;
            resourceInputs["criticalAlert"] = state ? state.criticalAlert : undefined;
            resourceInputs["customParameters"] = state ? state.customParameters : undefined;
            resourceInputs["downAlert"] = state ? state.downAlert : undefined;
            resourceInputs["manualResolve"] = state ? state.manualResolve : undefined;
            resourceInputs["monitors"] = state ? state.monitors : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["selectionType"] = state ? state.selectionType : undefined;
            resourceInputs["sendCustomParameters"] = state ? state.sendCustomParameters : undefined;
            resourceInputs["senderName"] = state ? state.senderName : undefined;
            resourceInputs["serviceKey"] = state ? state.serviceKey : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["troubleAlert"] = state ? state.troubleAlert : undefined;
        } else {
            const args = argsOrState as PagerdutyIntegrationArgs | undefined;
            if ((!args || args.senderName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'senderName'");
            }
            if ((!args || args.serviceKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceKey'");
            }
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            resourceInputs["alertTagsIds"] = args ? args.alertTagsIds : undefined;
            resourceInputs["criticalAlert"] = args ? args.criticalAlert : undefined;
            resourceInputs["customParameters"] = args ? args.customParameters : undefined;
            resourceInputs["downAlert"] = args ? args.downAlert : undefined;
            resourceInputs["manualResolve"] = args ? args.manualResolve : undefined;
            resourceInputs["monitors"] = args ? args.monitors : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["selectionType"] = args ? args.selectionType : undefined;
            resourceInputs["sendCustomParameters"] = args ? args.sendCustomParameters : undefined;
            resourceInputs["senderName"] = args ? args.senderName : undefined;
            resourceInputs["serviceKey"] = args ? args.serviceKey : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["troubleAlert"] = args ? args.troubleAlert : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PagerdutyIntegration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PagerdutyIntegration resources.
 */
export interface PagerdutyIntegrationState {
    /**
     * Tag id’s to be associated with the integration.
     */
    alertTagsIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Setting this to 'true' will send alert notifications to this third-party integration when the monitor status changes to
     * 'Critical'. One among trouble_alert|critical_alert|down_alert should be set to true for receiving notifications.
     */
    criticalAlert?: pulumi.Input<boolean>;
    /**
     * Mandatory, if send_custom_parameters is set as true. Custom parameters to be passed while accessing the URL.
     */
    customParameters?: pulumi.Input<string>;
    /**
     * Setting this to 'true' will send alert notifications to this third-party integration when the monitor status changes to
     * 'Down'. One among trouble_alert|critical_alert|down_alert should be set to true for receiving notifications.
     */
    downAlert?: pulumi.Input<boolean>;
    /**
     * Configuration to resolve the incidents manually when the monitor changes to UP status.
     */
    manualResolve?: pulumi.Input<boolean>;
    /**
     * Monitors to be associated with the integration when the selection_type = 2.
     */
    monitors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Display name for the PagerDuty Integration.
     */
    name?: pulumi.Input<string>;
    /**
     * Resource Type associated with this integration. Default value is '0'. Can take values 0|2|3. '0' denotes 'All Monitors',
     * '2' denotes 'Monitors', '3' denotes 'Tags'
     */
    selectionType?: pulumi.Input<number>;
    /**
     * Configuration to send custom parameters while executing the action.
     */
    sendCustomParameters?: pulumi.Input<boolean>;
    /**
     * Name of the service who posted the incident.
     */
    senderName?: pulumi.Input<string>;
    /**
     * Unique integration key provided by PagerDuty to facilitate incident creation in PagerDuty.
     */
    serviceKey?: pulumi.Input<string>;
    /**
     * Tags to be associated with the integration when the selection_type = 3.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Title of the incident.
     */
    title?: pulumi.Input<string>;
    /**
     * Setting this to 'true' will send alert notifications to this third-party integration when the monitor status changes to
     * 'Trouble'. One among trouble_alert|critical_alert|down_alert should be set to true for receiving notifications. Default
     * value is 'true'
     */
    troubleAlert?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a PagerdutyIntegration resource.
 */
export interface PagerdutyIntegrationArgs {
    /**
     * Tag id’s to be associated with the integration.
     */
    alertTagsIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Setting this to 'true' will send alert notifications to this third-party integration when the monitor status changes to
     * 'Critical'. One among trouble_alert|critical_alert|down_alert should be set to true for receiving notifications.
     */
    criticalAlert?: pulumi.Input<boolean>;
    /**
     * Mandatory, if send_custom_parameters is set as true. Custom parameters to be passed while accessing the URL.
     */
    customParameters?: pulumi.Input<string>;
    /**
     * Setting this to 'true' will send alert notifications to this third-party integration when the monitor status changes to
     * 'Down'. One among trouble_alert|critical_alert|down_alert should be set to true for receiving notifications.
     */
    downAlert?: pulumi.Input<boolean>;
    /**
     * Configuration to resolve the incidents manually when the monitor changes to UP status.
     */
    manualResolve?: pulumi.Input<boolean>;
    /**
     * Monitors to be associated with the integration when the selection_type = 2.
     */
    monitors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Display name for the PagerDuty Integration.
     */
    name?: pulumi.Input<string>;
    /**
     * Resource Type associated with this integration. Default value is '0'. Can take values 0|2|3. '0' denotes 'All Monitors',
     * '2' denotes 'Monitors', '3' denotes 'Tags'
     */
    selectionType?: pulumi.Input<number>;
    /**
     * Configuration to send custom parameters while executing the action.
     */
    sendCustomParameters?: pulumi.Input<boolean>;
    /**
     * Name of the service who posted the incident.
     */
    senderName: pulumi.Input<string>;
    /**
     * Unique integration key provided by PagerDuty to facilitate incident creation in PagerDuty.
     */
    serviceKey: pulumi.Input<string>;
    /**
     * Tags to be associated with the integration when the selection_type = 3.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Title of the incident.
     */
    title: pulumi.Input<string>;
    /**
     * Setting this to 'true' will send alert notifications to this third-party integration when the monitor status changes to
     * 'Trouble'. One among trouble_alert|critical_alert|down_alert should be set to true for receiving notifications. Default
     * value is 'true'
     */
    troubleAlert?: pulumi.Input<boolean>;
}
