// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getMonitorGroup(args: GetMonitorGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetMonitorGroupResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("site24x7:index/getMonitorGroup:getMonitorGroup", {
        "dependencyResourceIds": args.dependencyResourceIds,
        "description": args.description,
        "displayName": args.displayName,
        "healthThresholdCount": args.healthThresholdCount,
        "id": args.id,
        "monitors": args.monitors,
        "nameRegex": args.nameRegex,
        "suppressAlert": args.suppressAlert,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMonitorGroup.
 */
export interface GetMonitorGroupArgs {
    dependencyResourceIds?: string[];
    description?: string;
    displayName?: string;
    healthThresholdCount?: number;
    id?: string;
    monitors?: string[];
    nameRegex: string;
    suppressAlert?: boolean;
}

/**
 * A collection of values returned by getMonitorGroup.
 */
export interface GetMonitorGroupResult {
    readonly dependencyResourceIds: string[];
    readonly description: string;
    readonly displayName: string;
    readonly healthThresholdCount: number;
    readonly id: string;
    readonly monitors: string[];
    readonly nameRegex: string;
    readonly suppressAlert: boolean;
}
export function getMonitorGroupOutput(args: GetMonitorGroupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMonitorGroupResult> {
    return pulumi.output(args).apply((a: any) => getMonitorGroup(a, opts))
}

/**
 * A collection of arguments for invoking getMonitorGroup.
 */
export interface GetMonitorGroupOutputArgs {
    dependencyResourceIds?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    healthThresholdCount?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    monitors?: pulumi.Input<pulumi.Input<string>[]>;
    nameRegex: pulumi.Input<string>;
    suppressAlert?: pulumi.Input<boolean>;
}
