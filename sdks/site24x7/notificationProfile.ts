// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NotificationProfile extends pulumi.CustomResource {
    /**
     * Get an existing NotificationProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NotificationProfileState, opts?: pulumi.CustomResourceOptions): NotificationProfile {
        return new NotificationProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'site24x7:index/notificationProfile:NotificationProfile';

    /**
     * Returns true if the given object is an instance of NotificationProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NotificationProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NotificationProfile.__pulumiType;
    }

    public readonly alertConfigurations!: pulumi.Output<outputs.NotificationProfileAlertConfiguration[] | undefined>;
    /**
     * Execute configured IT automations during an escalation.
     */
    public readonly escalationAutomations!: pulumi.Output<string[] | undefined>;
    public readonly escalationLevels!: pulumi.Output<outputs.NotificationProfileEscalationLevel[] | undefined>;
    public readonly notificationDelayConfigurations!: pulumi.Output<outputs.NotificationProfileNotificationDelayConfiguration[] | undefined>;
    /**
     * Configuration to raise alerts for downtime only after executing the pre-configured monitor actions. Default is false.
     */
    public readonly notifyAfterExecutingActions!: pulumi.Output<boolean | undefined>;
    public readonly persistentAlertConfigurations!: pulumi.Output<outputs.NotificationProfilePersistentAlertConfiguration[] | undefined>;
    /**
     * Display Name for the notification profile.
     */
    public readonly profileName!: pulumi.Output<string>;
    /**
     * Configuration to send root cause analysis when the monitor is down. Default is true.
     */
    public readonly rcaNeeded!: pulumi.Output<boolean | undefined>;
    /**
     * Configuration to stop automation from being executed on the dependent monitors. Default is true.
     */
    public readonly suppressAutomation!: pulumi.Output<boolean | undefined>;
    /**
     * Email template ID for notification.
     */
    public readonly templateId!: pulumi.Output<string | undefined>;

    /**
     * Create a NotificationProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NotificationProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NotificationProfileArgs | NotificationProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NotificationProfileState | undefined;
            resourceInputs["alertConfigurations"] = state ? state.alertConfigurations : undefined;
            resourceInputs["escalationAutomations"] = state ? state.escalationAutomations : undefined;
            resourceInputs["escalationLevels"] = state ? state.escalationLevels : undefined;
            resourceInputs["notificationDelayConfigurations"] = state ? state.notificationDelayConfigurations : undefined;
            resourceInputs["notifyAfterExecutingActions"] = state ? state.notifyAfterExecutingActions : undefined;
            resourceInputs["persistentAlertConfigurations"] = state ? state.persistentAlertConfigurations : undefined;
            resourceInputs["profileName"] = state ? state.profileName : undefined;
            resourceInputs["rcaNeeded"] = state ? state.rcaNeeded : undefined;
            resourceInputs["suppressAutomation"] = state ? state.suppressAutomation : undefined;
            resourceInputs["templateId"] = state ? state.templateId : undefined;
        } else {
            const args = argsOrState as NotificationProfileArgs | undefined;
            if ((!args || args.profileName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'profileName'");
            }
            resourceInputs["alertConfigurations"] = args ? args.alertConfigurations : undefined;
            resourceInputs["escalationAutomations"] = args ? args.escalationAutomations : undefined;
            resourceInputs["escalationLevels"] = args ? args.escalationLevels : undefined;
            resourceInputs["notificationDelayConfigurations"] = args ? args.notificationDelayConfigurations : undefined;
            resourceInputs["notifyAfterExecutingActions"] = args ? args.notifyAfterExecutingActions : undefined;
            resourceInputs["persistentAlertConfigurations"] = args ? args.persistentAlertConfigurations : undefined;
            resourceInputs["profileName"] = args ? args.profileName : undefined;
            resourceInputs["rcaNeeded"] = args ? args.rcaNeeded : undefined;
            resourceInputs["suppressAutomation"] = args ? args.suppressAutomation : undefined;
            resourceInputs["templateId"] = args ? args.templateId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NotificationProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NotificationProfile resources.
 */
export interface NotificationProfileState {
    alertConfigurations?: pulumi.Input<pulumi.Input<inputs.NotificationProfileAlertConfiguration>[]>;
    /**
     * Execute configured IT automations during an escalation.
     */
    escalationAutomations?: pulumi.Input<pulumi.Input<string>[]>;
    escalationLevels?: pulumi.Input<pulumi.Input<inputs.NotificationProfileEscalationLevel>[]>;
    notificationDelayConfigurations?: pulumi.Input<pulumi.Input<inputs.NotificationProfileNotificationDelayConfiguration>[]>;
    /**
     * Configuration to raise alerts for downtime only after executing the pre-configured monitor actions. Default is false.
     */
    notifyAfterExecutingActions?: pulumi.Input<boolean>;
    persistentAlertConfigurations?: pulumi.Input<pulumi.Input<inputs.NotificationProfilePersistentAlertConfiguration>[]>;
    /**
     * Display Name for the notification profile.
     */
    profileName?: pulumi.Input<string>;
    /**
     * Configuration to send root cause analysis when the monitor is down. Default is true.
     */
    rcaNeeded?: pulumi.Input<boolean>;
    /**
     * Configuration to stop automation from being executed on the dependent monitors. Default is true.
     */
    suppressAutomation?: pulumi.Input<boolean>;
    /**
     * Email template ID for notification.
     */
    templateId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NotificationProfile resource.
 */
export interface NotificationProfileArgs {
    alertConfigurations?: pulumi.Input<pulumi.Input<inputs.NotificationProfileAlertConfiguration>[]>;
    /**
     * Execute configured IT automations during an escalation.
     */
    escalationAutomations?: pulumi.Input<pulumi.Input<string>[]>;
    escalationLevels?: pulumi.Input<pulumi.Input<inputs.NotificationProfileEscalationLevel>[]>;
    notificationDelayConfigurations?: pulumi.Input<pulumi.Input<inputs.NotificationProfileNotificationDelayConfiguration>[]>;
    /**
     * Configuration to raise alerts for downtime only after executing the pre-configured monitor actions. Default is false.
     */
    notifyAfterExecutingActions?: pulumi.Input<boolean>;
    persistentAlertConfigurations?: pulumi.Input<pulumi.Input<inputs.NotificationProfilePersistentAlertConfiguration>[]>;
    /**
     * Display Name for the notification profile.
     */
    profileName: pulumi.Input<string>;
    /**
     * Configuration to send root cause analysis when the monitor is down. Default is true.
     */
    rcaNeeded?: pulumi.Input<boolean>;
    /**
     * Configuration to stop automation from being executed on the dependent monitors. Default is true.
     */
    suppressAutomation?: pulumi.Input<boolean>;
    /**
     * Email template ID for notification.
     */
    templateId?: pulumi.Input<string>;
}
