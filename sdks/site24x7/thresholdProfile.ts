// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ThresholdProfile extends pulumi.CustomResource {
    /**
     * Get an existing ThresholdProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ThresholdProfileState, opts?: pulumi.CustomResourceOptions): ThresholdProfile {
        return new ThresholdProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'site24x7:index/thresholdProfile:ThresholdProfile';

    /**
     * Returns true if the given object is an instance of ThresholdProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ThresholdProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ThresholdProfile.__pulumiType;
    }

    /**
     * Generate Trouble Alert if not pinged for more than x seconds.
     */
    public readonly cronDurationAlert!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Triggers Alert, if job does not start on schedule
     */
    public readonly cronNoRunAlert!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Generate Down Alert if not pinged for more than x mins.
     */
    public readonly downIfNotPingedMoreThan!: pulumi.Output<number | undefined>;
    /**
     * Triggers alert when the monitor is down from configured number of locations. Default value is '3'
     */
    public readonly downLocationThreshold!: pulumi.Output<number | undefined>;
    /**
     * Response time critical threshold for the primary monitoring location. Anomaly Enabled Attribute
     */
    public readonly primaryResponseTimeCriticalThreshold!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Response time trouble threshold for the primary monitoring location. Anomaly Enabled Attribute
     */
    public readonly primaryResponseTimeTroubleThreshold!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Display Name for the threshold profile
     */
    public readonly profileName!: pulumi.Output<string>;
    /**
     * Static Threshold(1) or AI-based Threshold(2)
     */
    public readonly profileType!: pulumi.Output<number | undefined>;
    /**
     * Static Threshold(1) or AI-based Threshold(2)
     */
    public readonly profileTypeName!: pulumi.Output<number | undefined>;
    /**
     * Triggers alert when not receiving the website entire HTTP response within 30 seconds.
     */
    public readonly readTimeOut!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Response time critical threshold for the secondary monitoring location. Anomaly Enabled Attribute
     */
    public readonly secondaryResponseTimeCriticalThreshold!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Response time trouble threshold for the secondary monitoring location. Anomaly Enabled Attribute
     */
    public readonly secondaryResponseTimeTroubleThreshold!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Triggers critical alert before the SSL certificate expires within the configured number of days.
     */
    public readonly sslCertDaysUntilExpiryCriticalThreshold!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Triggers trouble alert before the SSL certificate expires within the configured number of days.
     */
    public readonly sslCertDaysUntilExpiryTroubleThreshold!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Triggers alert when the ssl certificate is modified.
     */
    public readonly sslCertFingerprintModified!: pulumi.Output<boolean | undefined>;
    /**
     * Generate Trouble Alert if not pinged for more than x mins.
     */
    public readonly troubleIfNotPingedMoreThan!: pulumi.Output<number | undefined>;
    /**
     * Generate Trouble Alert if pinged within x mins
     */
    public readonly troubleIfPingedWithin!: pulumi.Output<number | undefined>;
    /**
     * Type of the monitor for which the threshold profile is being created.
     */
    public readonly type!: pulumi.Output<string>;
    public readonly websiteContentChanges!: pulumi.Output<outputs.ThresholdProfileWebsiteContentChange[] | undefined>;
    /**
     * Triggers alert when the website content is modified.
     */
    public readonly websiteContentModified!: pulumi.Output<boolean | undefined>;

    /**
     * Create a ThresholdProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ThresholdProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ThresholdProfileArgs | ThresholdProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ThresholdProfileState | undefined;
            resourceInputs["cronDurationAlert"] = state ? state.cronDurationAlert : undefined;
            resourceInputs["cronNoRunAlert"] = state ? state.cronNoRunAlert : undefined;
            resourceInputs["downIfNotPingedMoreThan"] = state ? state.downIfNotPingedMoreThan : undefined;
            resourceInputs["downLocationThreshold"] = state ? state.downLocationThreshold : undefined;
            resourceInputs["primaryResponseTimeCriticalThreshold"] = state ? state.primaryResponseTimeCriticalThreshold : undefined;
            resourceInputs["primaryResponseTimeTroubleThreshold"] = state ? state.primaryResponseTimeTroubleThreshold : undefined;
            resourceInputs["profileName"] = state ? state.profileName : undefined;
            resourceInputs["profileType"] = state ? state.profileType : undefined;
            resourceInputs["profileTypeName"] = state ? state.profileTypeName : undefined;
            resourceInputs["readTimeOut"] = state ? state.readTimeOut : undefined;
            resourceInputs["secondaryResponseTimeCriticalThreshold"] = state ? state.secondaryResponseTimeCriticalThreshold : undefined;
            resourceInputs["secondaryResponseTimeTroubleThreshold"] = state ? state.secondaryResponseTimeTroubleThreshold : undefined;
            resourceInputs["sslCertDaysUntilExpiryCriticalThreshold"] = state ? state.sslCertDaysUntilExpiryCriticalThreshold : undefined;
            resourceInputs["sslCertDaysUntilExpiryTroubleThreshold"] = state ? state.sslCertDaysUntilExpiryTroubleThreshold : undefined;
            resourceInputs["sslCertFingerprintModified"] = state ? state.sslCertFingerprintModified : undefined;
            resourceInputs["troubleIfNotPingedMoreThan"] = state ? state.troubleIfNotPingedMoreThan : undefined;
            resourceInputs["troubleIfPingedWithin"] = state ? state.troubleIfPingedWithin : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["websiteContentChanges"] = state ? state.websiteContentChanges : undefined;
            resourceInputs["websiteContentModified"] = state ? state.websiteContentModified : undefined;
        } else {
            const args = argsOrState as ThresholdProfileArgs | undefined;
            if ((!args || args.profileName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'profileName'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["cronDurationAlert"] = args ? args.cronDurationAlert : undefined;
            resourceInputs["cronNoRunAlert"] = args ? args.cronNoRunAlert : undefined;
            resourceInputs["downIfNotPingedMoreThan"] = args ? args.downIfNotPingedMoreThan : undefined;
            resourceInputs["downLocationThreshold"] = args ? args.downLocationThreshold : undefined;
            resourceInputs["primaryResponseTimeCriticalThreshold"] = args ? args.primaryResponseTimeCriticalThreshold : undefined;
            resourceInputs["primaryResponseTimeTroubleThreshold"] = args ? args.primaryResponseTimeTroubleThreshold : undefined;
            resourceInputs["profileName"] = args ? args.profileName : undefined;
            resourceInputs["profileType"] = args ? args.profileType : undefined;
            resourceInputs["profileTypeName"] = args ? args.profileTypeName : undefined;
            resourceInputs["readTimeOut"] = args ? args.readTimeOut : undefined;
            resourceInputs["secondaryResponseTimeCriticalThreshold"] = args ? args.secondaryResponseTimeCriticalThreshold : undefined;
            resourceInputs["secondaryResponseTimeTroubleThreshold"] = args ? args.secondaryResponseTimeTroubleThreshold : undefined;
            resourceInputs["sslCertDaysUntilExpiryCriticalThreshold"] = args ? args.sslCertDaysUntilExpiryCriticalThreshold : undefined;
            resourceInputs["sslCertDaysUntilExpiryTroubleThreshold"] = args ? args.sslCertDaysUntilExpiryTroubleThreshold : undefined;
            resourceInputs["sslCertFingerprintModified"] = args ? args.sslCertFingerprintModified : undefined;
            resourceInputs["troubleIfNotPingedMoreThan"] = args ? args.troubleIfNotPingedMoreThan : undefined;
            resourceInputs["troubleIfPingedWithin"] = args ? args.troubleIfPingedWithin : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["websiteContentChanges"] = args ? args.websiteContentChanges : undefined;
            resourceInputs["websiteContentModified"] = args ? args.websiteContentModified : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ThresholdProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ThresholdProfile resources.
 */
export interface ThresholdProfileState {
    /**
     * Generate Trouble Alert if not pinged for more than x seconds.
     */
    cronDurationAlert?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Triggers Alert, if job does not start on schedule
     */
    cronNoRunAlert?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Generate Down Alert if not pinged for more than x mins.
     */
    downIfNotPingedMoreThan?: pulumi.Input<number>;
    /**
     * Triggers alert when the monitor is down from configured number of locations. Default value is '3'
     */
    downLocationThreshold?: pulumi.Input<number>;
    /**
     * Response time critical threshold for the primary monitoring location. Anomaly Enabled Attribute
     */
    primaryResponseTimeCriticalThreshold?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Response time trouble threshold for the primary monitoring location. Anomaly Enabled Attribute
     */
    primaryResponseTimeTroubleThreshold?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Display Name for the threshold profile
     */
    profileName?: pulumi.Input<string>;
    /**
     * Static Threshold(1) or AI-based Threshold(2)
     */
    profileType?: pulumi.Input<number>;
    /**
     * Static Threshold(1) or AI-based Threshold(2)
     */
    profileTypeName?: pulumi.Input<number>;
    /**
     * Triggers alert when not receiving the website entire HTTP response within 30 seconds.
     */
    readTimeOut?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Response time critical threshold for the secondary monitoring location. Anomaly Enabled Attribute
     */
    secondaryResponseTimeCriticalThreshold?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Response time trouble threshold for the secondary monitoring location. Anomaly Enabled Attribute
     */
    secondaryResponseTimeTroubleThreshold?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Triggers critical alert before the SSL certificate expires within the configured number of days.
     */
    sslCertDaysUntilExpiryCriticalThreshold?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Triggers trouble alert before the SSL certificate expires within the configured number of days.
     */
    sslCertDaysUntilExpiryTroubleThreshold?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Triggers alert when the ssl certificate is modified.
     */
    sslCertFingerprintModified?: pulumi.Input<boolean>;
    /**
     * Generate Trouble Alert if not pinged for more than x mins.
     */
    troubleIfNotPingedMoreThan?: pulumi.Input<number>;
    /**
     * Generate Trouble Alert if pinged within x mins
     */
    troubleIfPingedWithin?: pulumi.Input<number>;
    /**
     * Type of the monitor for which the threshold profile is being created.
     */
    type?: pulumi.Input<string>;
    websiteContentChanges?: pulumi.Input<pulumi.Input<inputs.ThresholdProfileWebsiteContentChange>[]>;
    /**
     * Triggers alert when the website content is modified.
     */
    websiteContentModified?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ThresholdProfile resource.
 */
export interface ThresholdProfileArgs {
    /**
     * Generate Trouble Alert if not pinged for more than x seconds.
     */
    cronDurationAlert?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Triggers Alert, if job does not start on schedule
     */
    cronNoRunAlert?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Generate Down Alert if not pinged for more than x mins.
     */
    downIfNotPingedMoreThan?: pulumi.Input<number>;
    /**
     * Triggers alert when the monitor is down from configured number of locations. Default value is '3'
     */
    downLocationThreshold?: pulumi.Input<number>;
    /**
     * Response time critical threshold for the primary monitoring location. Anomaly Enabled Attribute
     */
    primaryResponseTimeCriticalThreshold?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Response time trouble threshold for the primary monitoring location. Anomaly Enabled Attribute
     */
    primaryResponseTimeTroubleThreshold?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Display Name for the threshold profile
     */
    profileName: pulumi.Input<string>;
    /**
     * Static Threshold(1) or AI-based Threshold(2)
     */
    profileType?: pulumi.Input<number>;
    /**
     * Static Threshold(1) or AI-based Threshold(2)
     */
    profileTypeName?: pulumi.Input<number>;
    /**
     * Triggers alert when not receiving the website entire HTTP response within 30 seconds.
     */
    readTimeOut?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Response time critical threshold for the secondary monitoring location. Anomaly Enabled Attribute
     */
    secondaryResponseTimeCriticalThreshold?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Response time trouble threshold for the secondary monitoring location. Anomaly Enabled Attribute
     */
    secondaryResponseTimeTroubleThreshold?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Triggers critical alert before the SSL certificate expires within the configured number of days.
     */
    sslCertDaysUntilExpiryCriticalThreshold?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Triggers trouble alert before the SSL certificate expires within the configured number of days.
     */
    sslCertDaysUntilExpiryTroubleThreshold?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Triggers alert when the ssl certificate is modified.
     */
    sslCertFingerprintModified?: pulumi.Input<boolean>;
    /**
     * Generate Trouble Alert if not pinged for more than x mins.
     */
    troubleIfNotPingedMoreThan?: pulumi.Input<number>;
    /**
     * Generate Trouble Alert if pinged within x mins
     */
    troubleIfPingedWithin?: pulumi.Input<number>;
    /**
     * Type of the monitor for which the threshold profile is being created.
     */
    type: pulumi.Input<string>;
    websiteContentChanges?: pulumi.Input<pulumi.Input<inputs.ThresholdProfileWebsiteContentChange>[]>;
    /**
     * Triggers alert when the website content is modified.
     */
    websiteContentModified?: pulumi.Input<boolean>;
}
