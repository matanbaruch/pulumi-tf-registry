// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CredentialProfile extends pulumi.CustomResource {
    /**
     * Get an existing CredentialProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CredentialProfileState, opts?: pulumi.CustomResourceOptions): CredentialProfile {
        return new CredentialProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'site24x7:index/credentialProfile:CredentialProfile';

    /**
     * Returns true if the given object is an instance of CredentialProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CredentialProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CredentialProfile.__pulumiType;
    }

    /**
     * Credential Profile Name.
     */
    public readonly credentialName!: pulumi.Output<string>;
    /**
     * Type of the Credential Profile.
     */
    public readonly credentialType!: pulumi.Output<number>;
    /**
     * Password for the Credential Profile.
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * Username for the Credential Profile.
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a CredentialProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CredentialProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CredentialProfileArgs | CredentialProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CredentialProfileState | undefined;
            resourceInputs["credentialName"] = state ? state.credentialName : undefined;
            resourceInputs["credentialType"] = state ? state.credentialType : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as CredentialProfileArgs | undefined;
            if ((!args || args.credentialName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'credentialName'");
            }
            if ((!args || args.credentialType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'credentialType'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["credentialName"] = args ? args.credentialName : undefined;
            resourceInputs["credentialType"] = args ? args.credentialType : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CredentialProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CredentialProfile resources.
 */
export interface CredentialProfileState {
    /**
     * Credential Profile Name.
     */
    credentialName?: pulumi.Input<string>;
    /**
     * Type of the Credential Profile.
     */
    credentialType?: pulumi.Input<number>;
    /**
     * Password for the Credential Profile.
     */
    password?: pulumi.Input<string>;
    /**
     * Username for the Credential Profile.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CredentialProfile resource.
 */
export interface CredentialProfileArgs {
    /**
     * Credential Profile Name.
     */
    credentialName: pulumi.Input<string>;
    /**
     * Type of the Credential Profile.
     */
    credentialType: pulumi.Input<number>;
    /**
     * Password for the Credential Profile.
     */
    password: pulumi.Input<string>;
    /**
     * Username for the Credential Profile.
     */
    username: pulumi.Input<string>;
}
