// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class WebhookIntegration extends pulumi.CustomResource {
    /**
     * Get an existing WebhookIntegration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WebhookIntegrationState, opts?: pulumi.CustomResourceOptions): WebhookIntegration {
        return new WebhookIntegration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'site24x7:index/webhookIntegration:WebhookIntegration';

    /**
     * Returns true if the given object is an instance of WebhookIntegration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WebhookIntegration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WebhookIntegration.__pulumiType;
    }

    /**
     * Tag idâ€™s to be associated with the integration.
     */
    public readonly alertTagsIds!: pulumi.Output<string[] | undefined>;
    /**
     * Authentication method to access the action url.
     */
    public readonly authMethod!: pulumi.Output<string | undefined>;
    /**
     * Mandatory, When close_send_custom_parameters is set as true.Custom parameters to be passed while accessing the URL.
     */
    public readonly closeCustomParameters!: pulumi.Output<string | undefined>;
    /**
     * HTTP Method to access the URL.
     */
    public readonly closeMethod!: pulumi.Output<string | undefined>;
    /**
     * Configuration to send custom parameters while closing the ticket.
     */
    public readonly closeSendCustomParameters!: pulumi.Output<boolean | undefined>;
    /**
     * Configuration to post in JSON format while closing the ticket.
     */
    public readonly closeSendInJsonFormat!: pulumi.Output<boolean | undefined>;
    /**
     * Configuration to send incident parameters while closing the ticket.
     */
    public readonly closeSendIncidentParameters!: pulumi.Output<boolean | undefined>;
    /**
     * URL to be invoked to close the request.
     */
    public readonly closeUrl!: pulumi.Output<string | undefined>;
    /**
     * Setting this to 'true' will send alert notifications to this third-party integration when the monitor status changes to
     * 'Critical'. One among trouble_alert|critical_alert|down_alert should be set to true for receiving notifications.
     */
    public readonly criticalAlert!: pulumi.Output<boolean | undefined>;
    /**
     * A Map of Header name and value.
     */
    public readonly customHeaders!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Mandatory, if send_custom_parameters is set as true.Custom parameters to be passed while accessing the URL.
     */
    public readonly customParameters!: pulumi.Output<string | undefined>;
    /**
     * Setting this to 'true' will send alert notifications to this third-party integration when the monitor status changes to
     * 'Down'. One among trouble_alert|critical_alert|down_alert should be set to true for receiving notifications.
     */
    public readonly downAlert!: pulumi.Output<boolean | undefined>;
    /**
     * Boolean indicating whether it is an On-Premise Poller based Webhook.
     */
    public readonly isPollerWebhook!: pulumi.Output<boolean | undefined>;
    /**
     * Configuration to handle ticketing based integration.
     */
    public readonly manageTickets!: pulumi.Output<boolean | undefined>;
    /**
     * HTTP Method to be used for accessing the website. PUT, PATCH and DELETE are not supported. Default value is 'G'.
     */
    public readonly method!: pulumi.Output<string | undefined>;
    /**
     * Monitors to be associated with the integration when the selection_type = 2.
     */
    public readonly monitors!: pulumi.Output<string[] | undefined>;
    /**
     * Display name for the OpsGenie Integration.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Provider ID of the OAuth Provider to be associated with the action.
     */
    public readonly oauth2Provider!: pulumi.Output<string | undefined>;
    /**
     * Password for authentication.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Mandatory, if is_poller_webhook is set as true. Denotes On-Premise Poller ID.
     */
    public readonly poller!: pulumi.Output<string | undefined>;
    /**
     * Resource Type associated with this integration. Default value is '0'. Can take values 0|2|3. '0' denotes 'All Monitors',
     * '2' denotes 'Monitors', '3' denotes 'Tags'
     */
    public readonly selectionType!: pulumi.Output<number | undefined>;
    /**
     * Configuration to send custom parameters while executing the action.
     */
    public readonly sendCustomParameters!: pulumi.Output<boolean | undefined>;
    /**
     * Configuration to enable JSON format for post parameters.
     */
    public readonly sendInJsonFormat!: pulumi.Output<boolean | undefined>;
    /**
     * Configuration to send incident parameters while executing the action.
     */
    public readonly sendIncidentParameters!: pulumi.Output<boolean | undefined>;
    /**
     * Tags to be associated with the integration when the selection_type = 3.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * The amount of time a connection waits to time out. Default value is 30. Range 1 - 45.
     */
    public readonly timeout!: pulumi.Output<number | undefined>;
    /**
     * Setting this to 'true' will send alert notifications to this third-party integration when the monitor status changes to
     * 'Trouble'. One among trouble_alert|critical_alert|down_alert should be set to true for receiving notifications. Default
     * value is 'true'
     */
    public readonly troubleAlert!: pulumi.Output<boolean | undefined>;
    /**
     * Configuration to send custom parameters while updating the ticket.
     */
    public readonly updateCustomParameters!: pulumi.Output<string | undefined>;
    /**
     * HTTP Method to access the URL.
     */
    public readonly updateMethod!: pulumi.Output<string | undefined>;
    /**
     * Configuration to send custom parameters while updating the ticket.
     */
    public readonly updateSendCustomParameters!: pulumi.Output<boolean | undefined>;
    /**
     * Configuration to post in JSON format while updating the ticket.
     */
    public readonly updateSendInJsonFormat!: pulumi.Output<boolean | undefined>;
    /**
     * Configuration to send incident parameters while updating the ticket.
     */
    public readonly updateSendIncidentParameters!: pulumi.Output<boolean | undefined>;
    /**
     * URL to be invoked to update the request.
     */
    public readonly updateUrl!: pulumi.Output<string | undefined>;
    /**
     * URL to be invoked for action execution.
     */
    public readonly url!: pulumi.Output<string>;
    /**
     * User Agent to be used while monitoring the website.
     */
    public readonly userAgent!: pulumi.Output<string | undefined>;
    /**
     * User name for authentication.
     */
    public readonly userName!: pulumi.Output<string | undefined>;

    /**
     * Create a WebhookIntegration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WebhookIntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WebhookIntegrationArgs | WebhookIntegrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WebhookIntegrationState | undefined;
            resourceInputs["alertTagsIds"] = state ? state.alertTagsIds : undefined;
            resourceInputs["authMethod"] = state ? state.authMethod : undefined;
            resourceInputs["closeCustomParameters"] = state ? state.closeCustomParameters : undefined;
            resourceInputs["closeMethod"] = state ? state.closeMethod : undefined;
            resourceInputs["closeSendCustomParameters"] = state ? state.closeSendCustomParameters : undefined;
            resourceInputs["closeSendInJsonFormat"] = state ? state.closeSendInJsonFormat : undefined;
            resourceInputs["closeSendIncidentParameters"] = state ? state.closeSendIncidentParameters : undefined;
            resourceInputs["closeUrl"] = state ? state.closeUrl : undefined;
            resourceInputs["criticalAlert"] = state ? state.criticalAlert : undefined;
            resourceInputs["customHeaders"] = state ? state.customHeaders : undefined;
            resourceInputs["customParameters"] = state ? state.customParameters : undefined;
            resourceInputs["downAlert"] = state ? state.downAlert : undefined;
            resourceInputs["isPollerWebhook"] = state ? state.isPollerWebhook : undefined;
            resourceInputs["manageTickets"] = state ? state.manageTickets : undefined;
            resourceInputs["method"] = state ? state.method : undefined;
            resourceInputs["monitors"] = state ? state.monitors : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["oauth2Provider"] = state ? state.oauth2Provider : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["poller"] = state ? state.poller : undefined;
            resourceInputs["selectionType"] = state ? state.selectionType : undefined;
            resourceInputs["sendCustomParameters"] = state ? state.sendCustomParameters : undefined;
            resourceInputs["sendInJsonFormat"] = state ? state.sendInJsonFormat : undefined;
            resourceInputs["sendIncidentParameters"] = state ? state.sendIncidentParameters : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["troubleAlert"] = state ? state.troubleAlert : undefined;
            resourceInputs["updateCustomParameters"] = state ? state.updateCustomParameters : undefined;
            resourceInputs["updateMethod"] = state ? state.updateMethod : undefined;
            resourceInputs["updateSendCustomParameters"] = state ? state.updateSendCustomParameters : undefined;
            resourceInputs["updateSendInJsonFormat"] = state ? state.updateSendInJsonFormat : undefined;
            resourceInputs["updateSendIncidentParameters"] = state ? state.updateSendIncidentParameters : undefined;
            resourceInputs["updateUrl"] = state ? state.updateUrl : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["userAgent"] = state ? state.userAgent : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
        } else {
            const args = argsOrState as WebhookIntegrationArgs | undefined;
            if ((!args || args.url === undefined) && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["alertTagsIds"] = args ? args.alertTagsIds : undefined;
            resourceInputs["authMethod"] = args ? args.authMethod : undefined;
            resourceInputs["closeCustomParameters"] = args ? args.closeCustomParameters : undefined;
            resourceInputs["closeMethod"] = args ? args.closeMethod : undefined;
            resourceInputs["closeSendCustomParameters"] = args ? args.closeSendCustomParameters : undefined;
            resourceInputs["closeSendInJsonFormat"] = args ? args.closeSendInJsonFormat : undefined;
            resourceInputs["closeSendIncidentParameters"] = args ? args.closeSendIncidentParameters : undefined;
            resourceInputs["closeUrl"] = args ? args.closeUrl : undefined;
            resourceInputs["criticalAlert"] = args ? args.criticalAlert : undefined;
            resourceInputs["customHeaders"] = args ? args.customHeaders : undefined;
            resourceInputs["customParameters"] = args ? args.customParameters : undefined;
            resourceInputs["downAlert"] = args ? args.downAlert : undefined;
            resourceInputs["isPollerWebhook"] = args ? args.isPollerWebhook : undefined;
            resourceInputs["manageTickets"] = args ? args.manageTickets : undefined;
            resourceInputs["method"] = args ? args.method : undefined;
            resourceInputs["monitors"] = args ? args.monitors : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["oauth2Provider"] = args ? args.oauth2Provider : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["poller"] = args ? args.poller : undefined;
            resourceInputs["selectionType"] = args ? args.selectionType : undefined;
            resourceInputs["sendCustomParameters"] = args ? args.sendCustomParameters : undefined;
            resourceInputs["sendInJsonFormat"] = args ? args.sendInJsonFormat : undefined;
            resourceInputs["sendIncidentParameters"] = args ? args.sendIncidentParameters : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["troubleAlert"] = args ? args.troubleAlert : undefined;
            resourceInputs["updateCustomParameters"] = args ? args.updateCustomParameters : undefined;
            resourceInputs["updateMethod"] = args ? args.updateMethod : undefined;
            resourceInputs["updateSendCustomParameters"] = args ? args.updateSendCustomParameters : undefined;
            resourceInputs["updateSendInJsonFormat"] = args ? args.updateSendInJsonFormat : undefined;
            resourceInputs["updateSendIncidentParameters"] = args ? args.updateSendIncidentParameters : undefined;
            resourceInputs["updateUrl"] = args ? args.updateUrl : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["userAgent"] = args ? args.userAgent : undefined;
            resourceInputs["userName"] = args ? args.userName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WebhookIntegration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WebhookIntegration resources.
 */
export interface WebhookIntegrationState {
    /**
     * Tag idâ€™s to be associated with the integration.
     */
    alertTagsIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Authentication method to access the action url.
     */
    authMethod?: pulumi.Input<string>;
    /**
     * Mandatory, When close_send_custom_parameters is set as true.Custom parameters to be passed while accessing the URL.
     */
    closeCustomParameters?: pulumi.Input<string>;
    /**
     * HTTP Method to access the URL.
     */
    closeMethod?: pulumi.Input<string>;
    /**
     * Configuration to send custom parameters while closing the ticket.
     */
    closeSendCustomParameters?: pulumi.Input<boolean>;
    /**
     * Configuration to post in JSON format while closing the ticket.
     */
    closeSendInJsonFormat?: pulumi.Input<boolean>;
    /**
     * Configuration to send incident parameters while closing the ticket.
     */
    closeSendIncidentParameters?: pulumi.Input<boolean>;
    /**
     * URL to be invoked to close the request.
     */
    closeUrl?: pulumi.Input<string>;
    /**
     * Setting this to 'true' will send alert notifications to this third-party integration when the monitor status changes to
     * 'Critical'. One among trouble_alert|critical_alert|down_alert should be set to true for receiving notifications.
     */
    criticalAlert?: pulumi.Input<boolean>;
    /**
     * A Map of Header name and value.
     */
    customHeaders?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Mandatory, if send_custom_parameters is set as true.Custom parameters to be passed while accessing the URL.
     */
    customParameters?: pulumi.Input<string>;
    /**
     * Setting this to 'true' will send alert notifications to this third-party integration when the monitor status changes to
     * 'Down'. One among trouble_alert|critical_alert|down_alert should be set to true for receiving notifications.
     */
    downAlert?: pulumi.Input<boolean>;
    /**
     * Boolean indicating whether it is an On-Premise Poller based Webhook.
     */
    isPollerWebhook?: pulumi.Input<boolean>;
    /**
     * Configuration to handle ticketing based integration.
     */
    manageTickets?: pulumi.Input<boolean>;
    /**
     * HTTP Method to be used for accessing the website. PUT, PATCH and DELETE are not supported. Default value is 'G'.
     */
    method?: pulumi.Input<string>;
    /**
     * Monitors to be associated with the integration when the selection_type = 2.
     */
    monitors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Display name for the OpsGenie Integration.
     */
    name?: pulumi.Input<string>;
    /**
     * Provider ID of the OAuth Provider to be associated with the action.
     */
    oauth2Provider?: pulumi.Input<string>;
    /**
     * Password for authentication.
     */
    password?: pulumi.Input<string>;
    /**
     * Mandatory, if is_poller_webhook is set as true. Denotes On-Premise Poller ID.
     */
    poller?: pulumi.Input<string>;
    /**
     * Resource Type associated with this integration. Default value is '0'. Can take values 0|2|3. '0' denotes 'All Monitors',
     * '2' denotes 'Monitors', '3' denotes 'Tags'
     */
    selectionType?: pulumi.Input<number>;
    /**
     * Configuration to send custom parameters while executing the action.
     */
    sendCustomParameters?: pulumi.Input<boolean>;
    /**
     * Configuration to enable JSON format for post parameters.
     */
    sendInJsonFormat?: pulumi.Input<boolean>;
    /**
     * Configuration to send incident parameters while executing the action.
     */
    sendIncidentParameters?: pulumi.Input<boolean>;
    /**
     * Tags to be associated with the integration when the selection_type = 3.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The amount of time a connection waits to time out. Default value is 30. Range 1 - 45.
     */
    timeout?: pulumi.Input<number>;
    /**
     * Setting this to 'true' will send alert notifications to this third-party integration when the monitor status changes to
     * 'Trouble'. One among trouble_alert|critical_alert|down_alert should be set to true for receiving notifications. Default
     * value is 'true'
     */
    troubleAlert?: pulumi.Input<boolean>;
    /**
     * Configuration to send custom parameters while updating the ticket.
     */
    updateCustomParameters?: pulumi.Input<string>;
    /**
     * HTTP Method to access the URL.
     */
    updateMethod?: pulumi.Input<string>;
    /**
     * Configuration to send custom parameters while updating the ticket.
     */
    updateSendCustomParameters?: pulumi.Input<boolean>;
    /**
     * Configuration to post in JSON format while updating the ticket.
     */
    updateSendInJsonFormat?: pulumi.Input<boolean>;
    /**
     * Configuration to send incident parameters while updating the ticket.
     */
    updateSendIncidentParameters?: pulumi.Input<boolean>;
    /**
     * URL to be invoked to update the request.
     */
    updateUrl?: pulumi.Input<string>;
    /**
     * URL to be invoked for action execution.
     */
    url?: pulumi.Input<string>;
    /**
     * User Agent to be used while monitoring the website.
     */
    userAgent?: pulumi.Input<string>;
    /**
     * User name for authentication.
     */
    userName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WebhookIntegration resource.
 */
export interface WebhookIntegrationArgs {
    /**
     * Tag idâ€™s to be associated with the integration.
     */
    alertTagsIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Authentication method to access the action url.
     */
    authMethod?: pulumi.Input<string>;
    /**
     * Mandatory, When close_send_custom_parameters is set as true.Custom parameters to be passed while accessing the URL.
     */
    closeCustomParameters?: pulumi.Input<string>;
    /**
     * HTTP Method to access the URL.
     */
    closeMethod?: pulumi.Input<string>;
    /**
     * Configuration to send custom parameters while closing the ticket.
     */
    closeSendCustomParameters?: pulumi.Input<boolean>;
    /**
     * Configuration to post in JSON format while closing the ticket.
     */
    closeSendInJsonFormat?: pulumi.Input<boolean>;
    /**
     * Configuration to send incident parameters while closing the ticket.
     */
    closeSendIncidentParameters?: pulumi.Input<boolean>;
    /**
     * URL to be invoked to close the request.
     */
    closeUrl?: pulumi.Input<string>;
    /**
     * Setting this to 'true' will send alert notifications to this third-party integration when the monitor status changes to
     * 'Critical'. One among trouble_alert|critical_alert|down_alert should be set to true for receiving notifications.
     */
    criticalAlert?: pulumi.Input<boolean>;
    /**
     * A Map of Header name and value.
     */
    customHeaders?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Mandatory, if send_custom_parameters is set as true.Custom parameters to be passed while accessing the URL.
     */
    customParameters?: pulumi.Input<string>;
    /**
     * Setting this to 'true' will send alert notifications to this third-party integration when the monitor status changes to
     * 'Down'. One among trouble_alert|critical_alert|down_alert should be set to true for receiving notifications.
     */
    downAlert?: pulumi.Input<boolean>;
    /**
     * Boolean indicating whether it is an On-Premise Poller based Webhook.
     */
    isPollerWebhook?: pulumi.Input<boolean>;
    /**
     * Configuration to handle ticketing based integration.
     */
    manageTickets?: pulumi.Input<boolean>;
    /**
     * HTTP Method to be used for accessing the website. PUT, PATCH and DELETE are not supported. Default value is 'G'.
     */
    method?: pulumi.Input<string>;
    /**
     * Monitors to be associated with the integration when the selection_type = 2.
     */
    monitors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Display name for the OpsGenie Integration.
     */
    name?: pulumi.Input<string>;
    /**
     * Provider ID of the OAuth Provider to be associated with the action.
     */
    oauth2Provider?: pulumi.Input<string>;
    /**
     * Password for authentication.
     */
    password?: pulumi.Input<string>;
    /**
     * Mandatory, if is_poller_webhook is set as true. Denotes On-Premise Poller ID.
     */
    poller?: pulumi.Input<string>;
    /**
     * Resource Type associated with this integration. Default value is '0'. Can take values 0|2|3. '0' denotes 'All Monitors',
     * '2' denotes 'Monitors', '3' denotes 'Tags'
     */
    selectionType?: pulumi.Input<number>;
    /**
     * Configuration to send custom parameters while executing the action.
     */
    sendCustomParameters?: pulumi.Input<boolean>;
    /**
     * Configuration to enable JSON format for post parameters.
     */
    sendInJsonFormat?: pulumi.Input<boolean>;
    /**
     * Configuration to send incident parameters while executing the action.
     */
    sendIncidentParameters?: pulumi.Input<boolean>;
    /**
     * Tags to be associated with the integration when the selection_type = 3.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The amount of time a connection waits to time out. Default value is 30. Range 1 - 45.
     */
    timeout?: pulumi.Input<number>;
    /**
     * Setting this to 'true' will send alert notifications to this third-party integration when the monitor status changes to
     * 'Trouble'. One among trouble_alert|critical_alert|down_alert should be set to true for receiving notifications. Default
     * value is 'true'
     */
    troubleAlert?: pulumi.Input<boolean>;
    /**
     * Configuration to send custom parameters while updating the ticket.
     */
    updateCustomParameters?: pulumi.Input<string>;
    /**
     * HTTP Method to access the URL.
     */
    updateMethod?: pulumi.Input<string>;
    /**
     * Configuration to send custom parameters while updating the ticket.
     */
    updateSendCustomParameters?: pulumi.Input<boolean>;
    /**
     * Configuration to post in JSON format while updating the ticket.
     */
    updateSendInJsonFormat?: pulumi.Input<boolean>;
    /**
     * Configuration to send incident parameters while updating the ticket.
     */
    updateSendIncidentParameters?: pulumi.Input<boolean>;
    /**
     * URL to be invoked to update the request.
     */
    updateUrl?: pulumi.Input<string>;
    /**
     * URL to be invoked for action execution.
     */
    url: pulumi.Input<string>;
    /**
     * User Agent to be used while monitoring the website.
     */
    userAgent?: pulumi.Input<string>;
    /**
     * User name for authentication.
     */
    userName?: pulumi.Input<string>;
}
