// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Subgroup extends pulumi.CustomResource {
    /**
     * Get an existing Subgroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SubgroupState, opts?: pulumi.CustomResourceOptions): Subgroup {
        return new Subgroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'site24x7:index/subgroup:Subgroup';

    /**
     * Returns true if the given object is an instance of Subgroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Subgroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Subgroup.__pulumiType;
    }

    /**
     * Description for the Subgroup.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Display Name for the Subgroup.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Denotes the type of monitors that can be associated. ‘1’ implies that all type of monitors can be associated with
     * this subgroup. Default value is 1. '2' - Web, '3' - Port/Ping, '4' - Server, '5' - Database, '6' - Synthetic
     * Transaction, '7' - Web API, '8' - APM Insight,'9' - Network Devices, '10' - RUM, '11' - AppLogs Monitor
     */
    public readonly groupType!: pulumi.Output<number | undefined>;
    /**
     * Number of monitors' health that decide the group status. ‘0’ implies that all the monitors are considered for
     * determining the group status. Default value is 1.
     */
    public readonly healthThresholdCount!: pulumi.Output<number | undefined>;
    /**
     * Monitors to be associated with the Subgroup.
     */
    public readonly monitors!: pulumi.Output<string[] | undefined>;
    /**
     * Unique ID of the parent group under which subgroup has to be configured. It can be a subgroup or Monitor group. (In case
     * of level 1 subgroup, top_group_id is monitor group id. In other cases it will be subgroup id. You can get the subgroup
     * Ids configured for top_group_id by using business view API).
     */
    public readonly parentGroupId!: pulumi.Output<string>;
    /**
     * Unique ID of the top monitor group for which business view has been configured.
     */
    public readonly topGroupId!: pulumi.Output<string>;

    /**
     * Create a Subgroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SubgroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SubgroupArgs | SubgroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SubgroupState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["groupType"] = state ? state.groupType : undefined;
            resourceInputs["healthThresholdCount"] = state ? state.healthThresholdCount : undefined;
            resourceInputs["monitors"] = state ? state.monitors : undefined;
            resourceInputs["parentGroupId"] = state ? state.parentGroupId : undefined;
            resourceInputs["topGroupId"] = state ? state.topGroupId : undefined;
        } else {
            const args = argsOrState as SubgroupArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.parentGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parentGroupId'");
            }
            if ((!args || args.topGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topGroupId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["groupType"] = args ? args.groupType : undefined;
            resourceInputs["healthThresholdCount"] = args ? args.healthThresholdCount : undefined;
            resourceInputs["monitors"] = args ? args.monitors : undefined;
            resourceInputs["parentGroupId"] = args ? args.parentGroupId : undefined;
            resourceInputs["topGroupId"] = args ? args.topGroupId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Subgroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Subgroup resources.
 */
export interface SubgroupState {
    /**
     * Description for the Subgroup.
     */
    description?: pulumi.Input<string>;
    /**
     * Display Name for the Subgroup.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Denotes the type of monitors that can be associated. ‘1’ implies that all type of monitors can be associated with
     * this subgroup. Default value is 1. '2' - Web, '3' - Port/Ping, '4' - Server, '5' - Database, '6' - Synthetic
     * Transaction, '7' - Web API, '8' - APM Insight,'9' - Network Devices, '10' - RUM, '11' - AppLogs Monitor
     */
    groupType?: pulumi.Input<number>;
    /**
     * Number of monitors' health that decide the group status. ‘0’ implies that all the monitors are considered for
     * determining the group status. Default value is 1.
     */
    healthThresholdCount?: pulumi.Input<number>;
    /**
     * Monitors to be associated with the Subgroup.
     */
    monitors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unique ID of the parent group under which subgroup has to be configured. It can be a subgroup or Monitor group. (In case
     * of level 1 subgroup, top_group_id is monitor group id. In other cases it will be subgroup id. You can get the subgroup
     * Ids configured for top_group_id by using business view API).
     */
    parentGroupId?: pulumi.Input<string>;
    /**
     * Unique ID of the top monitor group for which business view has been configured.
     */
    topGroupId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Subgroup resource.
 */
export interface SubgroupArgs {
    /**
     * Description for the Subgroup.
     */
    description?: pulumi.Input<string>;
    /**
     * Display Name for the Subgroup.
     */
    displayName: pulumi.Input<string>;
    /**
     * Denotes the type of monitors that can be associated. ‘1’ implies that all type of monitors can be associated with
     * this subgroup. Default value is 1. '2' - Web, '3' - Port/Ping, '4' - Server, '5' - Database, '6' - Synthetic
     * Transaction, '7' - Web API, '8' - APM Insight,'9' - Network Devices, '10' - RUM, '11' - AppLogs Monitor
     */
    groupType?: pulumi.Input<number>;
    /**
     * Number of monitors' health that decide the group status. ‘0’ implies that all the monitors are considered for
     * determining the group status. Default value is 1.
     */
    healthThresholdCount?: pulumi.Input<number>;
    /**
     * Monitors to be associated with the Subgroup.
     */
    monitors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unique ID of the parent group under which subgroup has to be configured. It can be a subgroup or Monitor group. (In case
     * of level 1 subgroup, top_group_id is monitor group id. In other cases it will be subgroup id. You can get the subgroup
     * Ids configured for top_group_id by using business view API).
     */
    parentGroupId: pulumi.Input<string>;
    /**
     * Unique ID of the top monitor group for which business view has been configured.
     */
    topGroupId: pulumi.Input<string>;
}
