// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class MonitorGroup extends pulumi.CustomResource {
    /**
     * Get an existing MonitorGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MonitorGroupState, opts?: pulumi.CustomResourceOptions): MonitorGroup {
        return new MonitorGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'site24x7:index/monitorGroup:MonitorGroup';

    /**
     * Returns true if the given object is an instance of MonitorGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MonitorGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MonitorGroup.__pulumiType;
    }

    /**
     * Alert frequency for the incident.
     */
    public readonly alertFrequency!: pulumi.Output<number | undefined>;
    /**
     * Enable periodic alerting.
     */
    public readonly alertPeriodically!: pulumi.Output<boolean | undefined>;
    /**
     * List of dependent resource IDs. Suppress alert when dependent monitor(s) is down.
     */
    public readonly dependencyResourceIds!: pulumi.Output<string[] | undefined>;
    /**
     * Description for the Monitor Group.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Display Name for the Monitor Group.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Enable incident management. Default value is false.
     */
    public readonly enableIncidentManagement!: pulumi.Output<boolean | undefined>;
    /**
     * Healing period for the incident.
     */
    public readonly healingPeriod!: pulumi.Output<number | undefined>;
    /**
     * Number of monitors' health that decide the group status. ‘0’ implies that all the monitors are considered for
     * determining the group status. Default value is 1.
     */
    public readonly healthThresholdCount!: pulumi.Output<number | undefined>;
    /**
     * Health check profile to be associated with the monitor group.
     */
    public readonly healthcheckProfileId!: pulumi.Output<string>;
    /**
     * Notification profile to be associated with the monitor group.
     */
    public readonly notificationProfileId!: pulumi.Output<string>;
    /**
     * Boolean value indicating whether to suppress alert when the dependent monitor is down. Setting suppress_alert = true
     * with an empty dependency_resource_id is meaningless.
     */
    public readonly suppressAlert!: pulumi.Output<boolean | undefined>;
    /**
     * List of tag IDs to be associated to the monitor group.
     */
    public readonly tagIds!: pulumi.Output<string[]>;
    /**
     * List of Third Party Service IDs to be associated to the monitor group.
     */
    public readonly thirdPartyServiceIds!: pulumi.Output<string[] | undefined>;
    /**
     * List of user groups to be notified when the monitor group is down.
     */
    public readonly userGroupIds!: pulumi.Output<string[]>;

    /**
     * Create a MonitorGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MonitorGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MonitorGroupArgs | MonitorGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MonitorGroupState | undefined;
            resourceInputs["alertFrequency"] = state ? state.alertFrequency : undefined;
            resourceInputs["alertPeriodically"] = state ? state.alertPeriodically : undefined;
            resourceInputs["dependencyResourceIds"] = state ? state.dependencyResourceIds : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["enableIncidentManagement"] = state ? state.enableIncidentManagement : undefined;
            resourceInputs["healingPeriod"] = state ? state.healingPeriod : undefined;
            resourceInputs["healthThresholdCount"] = state ? state.healthThresholdCount : undefined;
            resourceInputs["healthcheckProfileId"] = state ? state.healthcheckProfileId : undefined;
            resourceInputs["notificationProfileId"] = state ? state.notificationProfileId : undefined;
            resourceInputs["suppressAlert"] = state ? state.suppressAlert : undefined;
            resourceInputs["tagIds"] = state ? state.tagIds : undefined;
            resourceInputs["thirdPartyServiceIds"] = state ? state.thirdPartyServiceIds : undefined;
            resourceInputs["userGroupIds"] = state ? state.userGroupIds : undefined;
        } else {
            const args = argsOrState as MonitorGroupArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            resourceInputs["alertFrequency"] = args ? args.alertFrequency : undefined;
            resourceInputs["alertPeriodically"] = args ? args.alertPeriodically : undefined;
            resourceInputs["dependencyResourceIds"] = args ? args.dependencyResourceIds : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["enableIncidentManagement"] = args ? args.enableIncidentManagement : undefined;
            resourceInputs["healingPeriod"] = args ? args.healingPeriod : undefined;
            resourceInputs["healthThresholdCount"] = args ? args.healthThresholdCount : undefined;
            resourceInputs["healthcheckProfileId"] = args ? args.healthcheckProfileId : undefined;
            resourceInputs["notificationProfileId"] = args ? args.notificationProfileId : undefined;
            resourceInputs["suppressAlert"] = args ? args.suppressAlert : undefined;
            resourceInputs["tagIds"] = args ? args.tagIds : undefined;
            resourceInputs["thirdPartyServiceIds"] = args ? args.thirdPartyServiceIds : undefined;
            resourceInputs["userGroupIds"] = args ? args.userGroupIds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MonitorGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MonitorGroup resources.
 */
export interface MonitorGroupState {
    /**
     * Alert frequency for the incident.
     */
    alertFrequency?: pulumi.Input<number>;
    /**
     * Enable periodic alerting.
     */
    alertPeriodically?: pulumi.Input<boolean>;
    /**
     * List of dependent resource IDs. Suppress alert when dependent monitor(s) is down.
     */
    dependencyResourceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Description for the Monitor Group.
     */
    description?: pulumi.Input<string>;
    /**
     * Display Name for the Monitor Group.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Enable incident management. Default value is false.
     */
    enableIncidentManagement?: pulumi.Input<boolean>;
    /**
     * Healing period for the incident.
     */
    healingPeriod?: pulumi.Input<number>;
    /**
     * Number of monitors' health that decide the group status. ‘0’ implies that all the monitors are considered for
     * determining the group status. Default value is 1.
     */
    healthThresholdCount?: pulumi.Input<number>;
    /**
     * Health check profile to be associated with the monitor group.
     */
    healthcheckProfileId?: pulumi.Input<string>;
    /**
     * Notification profile to be associated with the monitor group.
     */
    notificationProfileId?: pulumi.Input<string>;
    /**
     * Boolean value indicating whether to suppress alert when the dependent monitor is down. Setting suppress_alert = true
     * with an empty dependency_resource_id is meaningless.
     */
    suppressAlert?: pulumi.Input<boolean>;
    /**
     * List of tag IDs to be associated to the monitor group.
     */
    tagIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of Third Party Service IDs to be associated to the monitor group.
     */
    thirdPartyServiceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of user groups to be notified when the monitor group is down.
     */
    userGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a MonitorGroup resource.
 */
export interface MonitorGroupArgs {
    /**
     * Alert frequency for the incident.
     */
    alertFrequency?: pulumi.Input<number>;
    /**
     * Enable periodic alerting.
     */
    alertPeriodically?: pulumi.Input<boolean>;
    /**
     * List of dependent resource IDs. Suppress alert when dependent monitor(s) is down.
     */
    dependencyResourceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Description for the Monitor Group.
     */
    description?: pulumi.Input<string>;
    /**
     * Display Name for the Monitor Group.
     */
    displayName: pulumi.Input<string>;
    /**
     * Enable incident management. Default value is false.
     */
    enableIncidentManagement?: pulumi.Input<boolean>;
    /**
     * Healing period for the incident.
     */
    healingPeriod?: pulumi.Input<number>;
    /**
     * Number of monitors' health that decide the group status. ‘0’ implies that all the monitors are considered for
     * determining the group status. Default value is 1.
     */
    healthThresholdCount?: pulumi.Input<number>;
    /**
     * Health check profile to be associated with the monitor group.
     */
    healthcheckProfileId?: pulumi.Input<string>;
    /**
     * Notification profile to be associated with the monitor group.
     */
    notificationProfileId?: pulumi.Input<string>;
    /**
     * Boolean value indicating whether to suppress alert when the dependent monitor is down. Setting suppress_alert = true
     * with an empty dependency_resource_id is meaningless.
     */
    suppressAlert?: pulumi.Input<boolean>;
    /**
     * List of tag IDs to be associated to the monitor group.
     */
    tagIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of Third Party Service IDs to be associated to the monitor group.
     */
    thirdPartyServiceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of user groups to be notified when the monitor group is down.
     */
    userGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
}
