// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface DnsServerMonitorSearchConfig {
    addr?: pulumi.Input<string>;
    admin?: pulumi.Input<string>;
    certAuth?: pulumi.Input<string>;
    expt?: pulumi.Input<number>;
    flg?: pulumi.Input<number>;
    halg?: pulumi.Input<number>;
    hash?: pulumi.Input<string>;
    kalg?: pulumi.Input<number>;
    key?: pulumi.Input<string>;
    kid?: pulumi.Input<number>;
    lookupType: pulumi.Input<string>;
    mttl?: pulumi.Input<number>;
    pns?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    prtcl?: pulumi.Input<number>;
    rcvd?: pulumi.Input<number>;
    rff?: pulumi.Input<number>;
    rtf?: pulumi.Input<number>;
    serial?: pulumi.Input<number>;
    tag?: pulumi.Input<string>;
    target?: pulumi.Input<string>;
    ttl?: pulumi.Input<number>;
    ttlo?: pulumi.Input<number>;
    wt?: pulumi.Input<number>;
}

export interface NotificationProfileAlertConfiguration {
    /**
     * Alerting Period - Predefined business hours during which alerts should be sent. Default value is '-1' and it denotes 'All Hours'.
     */
    businessHoursId?: pulumi.Input<string>;
    /**
     * Medium through which you’d wish to receive the notifications. Default value is 1. '1' denotes 'Email', '2' denotes 'SMS', '3' denotes 'Voice Call' and '6' denotes 'Mobile push notification'.
     */
    notificationMedia: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * To specify whether the user would receive alerts within or beyond business hours. Default value is '0' and it denotes 'Time within the business_hours_id configured', '1' denotes 'Time outside the business_hours_id configured'.
     */
    outsideBusinessHours?: pulumi.Input<string>;
    /**
     * Status for which alerts should be raised. '-1' denotes 'Any', '0' denotes 'Down', '1' denotes 'Up', '2' denotes 'Trouble' and '3' denotes 'Critical'.
     */
    status?: pulumi.Input<number>;
}

export interface NotificationProfileEscalationLevel {
    /**
     * Mandatory, if any User Alert Group is added for escalation Downtime duration for escalation in mins.
     */
    escalationWaitTime: pulumi.Input<number>;
    /**
     * Medium through which you’d wish to receive the notifications. Default value is 1. '1' denotes 'Email', '2' denotes 'SMS', '3' denotes 'Voice Call' and '6' denotes 'Mobile push notification'.
     */
    notificationMedia: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Third-party services through which you’d wish to receive the notification.
     */
    thirdPartyServices?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * User group ID for downtime escalation.
     */
    userGroupId: pulumi.Input<string>;
}

export interface NotificationProfileNotificationDelayConfiguration {
    /**
     * Alerting Period - Predefined business hours during which alerts should be sent. Default value is '-1' and it denotes 'All Hours'.
     */
    businessHoursId?: pulumi.Input<string>;
    /**
     * Notify based on the downtime delay constants define here - https://www.site24x7.com/help/api/#notification-profile-constants. Default value is '1' and it denotes 'Notify immediately after failure'.
     */
    notificationDelay?: pulumi.Input<number>;
    /**
     * To specify whether the user would receive alerts within or beyond business hours. Default value is '0' and it denotes 'Time within the business_hours_id configured', '1' denotes 'Time outside the business_hours_id configured'.
     */
    outsideBusinessHours?: pulumi.Input<string>;
    /**
     * Status for which alerts should be raised. '0' denotes 'Down', '2' denotes 'Trouble' and '3' denotes 'Critical'.
     */
    status?: pulumi.Input<number>;
}

export interface NotificationProfilePersistentAlertConfiguration {
    /**
     * Medium through which you’d wish to receive the notifications. Default value is 1. '1' denotes 'Email', '2' denotes 'SMS', '3' denotes 'Voice Call' and '6' denotes 'Mobile push notification'.
     */
    notificationMedia: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Denotes the number of times the error has to be ignored before sending a notification. Value ranges from 0-60.
     */
    notifyEvery: pulumi.Input<number>;
    /**
     * Third-party services through which you’d wish to receive the notification.
     */
    thirdPartyServices?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RestApiTransactionMonitorStep {
    /**
     * Display Name for the monitor.
     */
    displayName: pulumi.Input<string>;
    stepDetails?: pulumi.Input<pulumi.Input<inputs.RestApiTransactionMonitorStepStepDetail>[]>;
}

export interface RestApiTransactionMonitorStepStepDetail {
    /**
     * Authentication method to access the website. Default value is 'B'. 'B' denotes Basic/NTLM. 'O' denotes OAuth 2 and 'W' denotes Web Token.
     */
    authMethod?: pulumi.Input<string>;
    /**
     * Authentication password to access the website.
     */
    authPass?: pulumi.Input<string>;
    /**
     * Authentication user name to access the website.
     */
    authUser?: pulumi.Input<string>;
    /**
     * Password of the client certificate.
     */
    clientCertificatePassword?: pulumi.Input<string>;
    /**
     * Provide the Response Header/Cookies for parameter forwarding in Map format.
     */
    dynamicHeaderParams?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Store the Response Format of Parameter forwarding
     */
    dynamicParamResponseType?: pulumi.Input<string>;
    /**
     * Provide the GraphQL query to get specific response from GraphQL based API service.
     */
    graphqlQuery?: pulumi.Input<string>;
    /**
     * Provide the GraphQL variables to get specific response from GraphQL based API service.
     */
    graphqlVariables?: pulumi.Input<string>;
    /**
     * HTTP Method to be used for accessing the website. Default value is 'G'. 'G' denotes GET, 'P' denotes POST, 'U' denotes PUT and 'D' denotes DELETE. HEAD is not supported.
     */
    httpMethod?: pulumi.Input<string>;
    /**
     * Specify the version of the HTTP protocol. Default value is H1.1.
     */
    httpProtocol?: pulumi.Input<string>;
    /**
     * JSON schema to be validated against the JSON response.
     */
    jsonSchema?: pulumi.Input<string>;
    /**
     * JSON Schema check allows you to annotate and validate all JSON endpoints for your web service.
     */
    jsonSchemaCheck?: pulumi.Input<boolean>;
    /**
     * Trigger an alert when the JSON schema assertion fails during a test. Alert type constant. Can be either 0 or 2. '0' denotes Down and '2' denotes Trouble. Default value is 2.
     */
    jsonSchemaSeverity?: pulumi.Input<number>;
    /**
     * Token ID of the Web Token to be associated with the monitor.
     */
    jwtId?: pulumi.Input<string>;
    /**
     * Perform case sensitive keyword search or not.
     */
    matchCase?: pulumi.Input<boolean>;
    /**
     * Trigger an alert when the JSON path assertion fails during a test. Alert type constant. Can be either 0 or 2. '0' denotes Down and '2' denotes Trouble. Default value is 2.
     */
    matchJsonPathSeverity?: pulumi.Input<number>;
    /**
     * Provide multiple JSON Path expressions to enable evaluation of JSON Path expression assertions. The assertions must successfully parse the JSON Path in the JSON. JSON expression assertions fails if the expressions does not match.
     */
    matchJsonPaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Match the regular expression in the website response.
     */
    matchRegex?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Check for the keyword in the website response.
     */
    matchingKeyword?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Provider ID of the OAuth Provider to be associated with the monitor.
     */
    oauth2Provider?: pulumi.Input<string>;
    /**
     * Stop on Error severity for the step. '0' means Stop and Notify, '1' means Proceed , '2' means Notify and Proceed
     */
    onError?: pulumi.Input<number>;
    /**
     * Provide the content to be passed in the request body while accessing the website.
     */
    requestBody?: pulumi.Input<string>;
    /**
     * Provide content type for request params when http_method is 'P'. 'J' denotes JSON, 'T' denotes TEXT, 'X' denotes XML and 'F' denotes FORM
     */
    requestContentType?: pulumi.Input<string>;
    /**
     * A Map of request header name and value.
     */
    requestHeaders?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Response content type. Default value is 'T'. 'J' denotes JSON, 'T' denotes TEXT, 'X' denotes XML
     */
    responseContentType?: pulumi.Input<string>;
    /**
     * A Map of Header name and value.
     */
    responseHeaders?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Alert type constant. Can be either 0 or 2. '0' denotes Down and '2' denotes Trouble
     */
    responseHeadersSeverity?: pulumi.Input<number>;
    /**
     * Provide the Response Variable for parameter forwarding in Map format.
     */
    responseVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specify the version of the SSL protocol. If you are not sure about the version, use Auto.
     */
    sslProtocol?: pulumi.Input<string>;
    /**
     * Rest API Url to monitors
     */
    stepUrl: pulumi.Input<string>;
    /**
     * Timeout for connecting to website. Default value is 10. Range 1 - 45.
     */
    timeout?: pulumi.Input<string>;
    /**
     * Check for non existence of keyword in the website response.
     */
    unmatchingKeyword?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Provide a comma-separated list of HTTP status codes that indicate a successful response. You can specify individual status codes, as well as ranges separated with a colon.
     */
    upStatusCodes?: pulumi.Input<string>;
    /**
     * Enable ALPN to send supported protocols as part of the TLS handshake.
     */
    useAlpn?: pulumi.Input<boolean>;
    /**
     * Monitoring is performed over IPv6 from supported locations. IPv6 locations do not fall back to IPv4 on failure.
     */
    useIpv6?: pulumi.Input<boolean>;
    /**
     * Resolve the IP address using Domain Name Server.
     */
    useNameServer?: pulumi.Input<boolean>;
    /**
     * User Agent to be used while monitoring the website.
     */
    userAgent?: pulumi.Input<string>;
}

export interface ThresholdProfileWebsiteContentChange {
    comparisonOperator?: pulumi.Input<number>;
    severity: pulumi.Input<number>;
    value: pulumi.Input<number>;
}
