// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PingMonitor extends pulumi.CustomResource {
    /**
     * Get an existing PingMonitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PingMonitorState, opts?: pulumi.CustomResourceOptions): PingMonitor {
        return new PingMonitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'site24x7:index/pingMonitor:PingMonitor';

    /**
     * Returns true if the given object is an instance of PingMonitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PingMonitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PingMonitor.__pulumiType;
    }

    /**
     * Action to be performed on monitor status changes
     */
    public readonly actions!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Interval at which your website has to be monitored. Default value is 5 minute.
     */
    public readonly checkFrequency!: pulumi.Output<string | undefined>;
    /**
     * List of dependent resource IDs. Suppress alert when dependent monitor(s) is down.
     */
    public readonly dependencyResourceIds!: pulumi.Output<string[] | undefined>;
    /**
     * Name for the monitor
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Registered domain name.
     */
    public readonly hostName!: pulumi.Output<string>;
    /**
     * Location profile to be associated with the monitor
     */
    public readonly locationProfileId!: pulumi.Output<string>;
    /**
     * Name of the location profile to be associated with the monitor
     */
    public readonly locationProfileName!: pulumi.Output<string>;
    /**
     * List of monitor groups to which the monitor has to be associated
     */
    public readonly monitorGroups!: pulumi.Output<string[] | undefined>;
    /**
     * Notification profile to be associated with the monitor
     */
    public readonly notificationProfileId!: pulumi.Output<string>;
    /**
     * Name of the notification profile to be associated with the monitor
     */
    public readonly notificationProfileName!: pulumi.Output<string | undefined>;
    /**
     * A new On Call schedule to be associated with monitors when user group id is not chosen
     */
    public readonly onCallScheduleId!: pulumi.Output<string | undefined>;
    /**
     * To perform automation or not
     */
    public readonly performAutomation!: pulumi.Output<boolean | undefined>;
    /**
     * List of tag IDs to be associated to the monitor
     */
    public readonly tagIds!: pulumi.Output<string[]>;
    /**
     * List of tag names to be associated to the monitor
     */
    public readonly tagNames!: pulumi.Output<string[] | undefined>;
    /**
     * List of Third Party Service IDs to be associated to the monitor
     */
    public readonly thirdPartyServiceIds!: pulumi.Output<string[] | undefined>;
    /**
     * Threshold profile to be associated with the monitor.
     */
    public readonly thresholdProfileId!: pulumi.Output<string | undefined>;
    /**
     * Timeout for connecting to website. Default value is 10. Range 1 - 45
     */
    public readonly timeout!: pulumi.Output<number | undefined>;
    /**
     * Monitoring is performed over IPv6 from supported locations. IPv6 locations do not fall back to IPv4 on failure.
     */
    public readonly useIpv6!: pulumi.Output<boolean | undefined>;
    /**
     * List of user groups to be notified when the monitor is down
     */
    public readonly userGroupIds!: pulumi.Output<string[]>;
    /**
     * Name of the user groups to be associated with the monitor
     */
    public readonly userGroupNames!: pulumi.Output<string[] | undefined>;

    /**
     * Create a PingMonitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PingMonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PingMonitorArgs | PingMonitorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PingMonitorState | undefined;
            resourceInputs["actions"] = state ? state.actions : undefined;
            resourceInputs["checkFrequency"] = state ? state.checkFrequency : undefined;
            resourceInputs["dependencyResourceIds"] = state ? state.dependencyResourceIds : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["hostName"] = state ? state.hostName : undefined;
            resourceInputs["locationProfileId"] = state ? state.locationProfileId : undefined;
            resourceInputs["locationProfileName"] = state ? state.locationProfileName : undefined;
            resourceInputs["monitorGroups"] = state ? state.monitorGroups : undefined;
            resourceInputs["notificationProfileId"] = state ? state.notificationProfileId : undefined;
            resourceInputs["notificationProfileName"] = state ? state.notificationProfileName : undefined;
            resourceInputs["onCallScheduleId"] = state ? state.onCallScheduleId : undefined;
            resourceInputs["performAutomation"] = state ? state.performAutomation : undefined;
            resourceInputs["tagIds"] = state ? state.tagIds : undefined;
            resourceInputs["tagNames"] = state ? state.tagNames : undefined;
            resourceInputs["thirdPartyServiceIds"] = state ? state.thirdPartyServiceIds : undefined;
            resourceInputs["thresholdProfileId"] = state ? state.thresholdProfileId : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["useIpv6"] = state ? state.useIpv6 : undefined;
            resourceInputs["userGroupIds"] = state ? state.userGroupIds : undefined;
            resourceInputs["userGroupNames"] = state ? state.userGroupNames : undefined;
        } else {
            const args = argsOrState as PingMonitorArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.hostName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostName'");
            }
            resourceInputs["actions"] = args ? args.actions : undefined;
            resourceInputs["checkFrequency"] = args ? args.checkFrequency : undefined;
            resourceInputs["dependencyResourceIds"] = args ? args.dependencyResourceIds : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["hostName"] = args ? args.hostName : undefined;
            resourceInputs["locationProfileId"] = args ? args.locationProfileId : undefined;
            resourceInputs["locationProfileName"] = args ? args.locationProfileName : undefined;
            resourceInputs["monitorGroups"] = args ? args.monitorGroups : undefined;
            resourceInputs["notificationProfileId"] = args ? args.notificationProfileId : undefined;
            resourceInputs["notificationProfileName"] = args ? args.notificationProfileName : undefined;
            resourceInputs["onCallScheduleId"] = args ? args.onCallScheduleId : undefined;
            resourceInputs["performAutomation"] = args ? args.performAutomation : undefined;
            resourceInputs["tagIds"] = args ? args.tagIds : undefined;
            resourceInputs["tagNames"] = args ? args.tagNames : undefined;
            resourceInputs["thirdPartyServiceIds"] = args ? args.thirdPartyServiceIds : undefined;
            resourceInputs["thresholdProfileId"] = args ? args.thresholdProfileId : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["useIpv6"] = args ? args.useIpv6 : undefined;
            resourceInputs["userGroupIds"] = args ? args.userGroupIds : undefined;
            resourceInputs["userGroupNames"] = args ? args.userGroupNames : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PingMonitor.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PingMonitor resources.
 */
export interface PingMonitorState {
    /**
     * Action to be performed on monitor status changes
     */
    actions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Interval at which your website has to be monitored. Default value is 5 minute.
     */
    checkFrequency?: pulumi.Input<string>;
    /**
     * List of dependent resource IDs. Suppress alert when dependent monitor(s) is down.
     */
    dependencyResourceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name for the monitor
     */
    displayName?: pulumi.Input<string>;
    /**
     * Registered domain name.
     */
    hostName?: pulumi.Input<string>;
    /**
     * Location profile to be associated with the monitor
     */
    locationProfileId?: pulumi.Input<string>;
    /**
     * Name of the location profile to be associated with the monitor
     */
    locationProfileName?: pulumi.Input<string>;
    /**
     * List of monitor groups to which the monitor has to be associated
     */
    monitorGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Notification profile to be associated with the monitor
     */
    notificationProfileId?: pulumi.Input<string>;
    /**
     * Name of the notification profile to be associated with the monitor
     */
    notificationProfileName?: pulumi.Input<string>;
    /**
     * A new On Call schedule to be associated with monitors when user group id is not chosen
     */
    onCallScheduleId?: pulumi.Input<string>;
    /**
     * To perform automation or not
     */
    performAutomation?: pulumi.Input<boolean>;
    /**
     * List of tag IDs to be associated to the monitor
     */
    tagIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of tag names to be associated to the monitor
     */
    tagNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of Third Party Service IDs to be associated to the monitor
     */
    thirdPartyServiceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Threshold profile to be associated with the monitor.
     */
    thresholdProfileId?: pulumi.Input<string>;
    /**
     * Timeout for connecting to website. Default value is 10. Range 1 - 45
     */
    timeout?: pulumi.Input<number>;
    /**
     * Monitoring is performed over IPv6 from supported locations. IPv6 locations do not fall back to IPv4 on failure.
     */
    useIpv6?: pulumi.Input<boolean>;
    /**
     * List of user groups to be notified when the monitor is down
     */
    userGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the user groups to be associated with the monitor
     */
    userGroupNames?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a PingMonitor resource.
 */
export interface PingMonitorArgs {
    /**
     * Action to be performed on monitor status changes
     */
    actions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Interval at which your website has to be monitored. Default value is 5 minute.
     */
    checkFrequency?: pulumi.Input<string>;
    /**
     * List of dependent resource IDs. Suppress alert when dependent monitor(s) is down.
     */
    dependencyResourceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name for the monitor
     */
    displayName: pulumi.Input<string>;
    /**
     * Registered domain name.
     */
    hostName: pulumi.Input<string>;
    /**
     * Location profile to be associated with the monitor
     */
    locationProfileId?: pulumi.Input<string>;
    /**
     * Name of the location profile to be associated with the monitor
     */
    locationProfileName?: pulumi.Input<string>;
    /**
     * List of monitor groups to which the monitor has to be associated
     */
    monitorGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Notification profile to be associated with the monitor
     */
    notificationProfileId?: pulumi.Input<string>;
    /**
     * Name of the notification profile to be associated with the monitor
     */
    notificationProfileName?: pulumi.Input<string>;
    /**
     * A new On Call schedule to be associated with monitors when user group id is not chosen
     */
    onCallScheduleId?: pulumi.Input<string>;
    /**
     * To perform automation or not
     */
    performAutomation?: pulumi.Input<boolean>;
    /**
     * List of tag IDs to be associated to the monitor
     */
    tagIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of tag names to be associated to the monitor
     */
    tagNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of Third Party Service IDs to be associated to the monitor
     */
    thirdPartyServiceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Threshold profile to be associated with the monitor.
     */
    thresholdProfileId?: pulumi.Input<string>;
    /**
     * Timeout for connecting to website. Default value is 10. Range 1 - 45
     */
    timeout?: pulumi.Input<number>;
    /**
     * Monitoring is performed over IPv6 from supported locations. IPv6 locations do not fall back to IPv4 on failure.
     */
    useIpv6?: pulumi.Input<boolean>;
    /**
     * List of user groups to be notified when the monitor is down
     */
    userGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the user groups to be associated with the monitor
     */
    userGroupNames?: pulumi.Input<pulumi.Input<string>[]>;
}
