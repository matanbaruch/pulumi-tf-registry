// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class MachineLearningAlert extends pulumi.CustomResource {
    /**
     * Get an existing MachineLearningAlert resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MachineLearningAlertState, opts?: pulumi.CustomResourceOptions): MachineLearningAlert {
        return new MachineLearningAlert(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'grafana:index/machineLearningAlert:MachineLearningAlert';

    /**
     * Returns true if the given object is an instance of MachineLearningAlert.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MachineLearningAlert {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MachineLearningAlert.__pulumiType;
    }

    /**
     * Annotations to add to the alert generated in Grafana.
     */
    public readonly annotations!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The condition for when to consider a point as anomalous.
     */
    public readonly anomalyCondition!: pulumi.Output<string | undefined>;
    /**
     * How long values must be anomalous before firing an alert.
     */
    public readonly for!: pulumi.Output<string>;
    /**
     * The forecast this alert belongs to.
     */
    public readonly jobId!: pulumi.Output<string | undefined>;
    /**
     * Labels to add to the alert generated in Grafana.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * How the alert should be processed when no data is returned by the underlying series
     */
    public readonly noDataState!: pulumi.Output<string | undefined>;
    /**
     * The forecast this alert belongs to.
     */
    public readonly outlierId!: pulumi.Output<string | undefined>;
    /**
     * The threshold of points over the window that need to be anomalous to alert.
     */
    public readonly threshold!: pulumi.Output<string | undefined>;
    /**
     * The title of the alert.
     */
    public readonly title!: pulumi.Output<string>;
    /**
     * How much time to average values over
     */
    public readonly window!: pulumi.Output<string>;

    /**
     * Create a MachineLearningAlert resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MachineLearningAlertArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MachineLearningAlertArgs | MachineLearningAlertState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MachineLearningAlertState | undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["anomalyCondition"] = state ? state.anomalyCondition : undefined;
            resourceInputs["for"] = state ? state.for : undefined;
            resourceInputs["jobId"] = state ? state.jobId : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["noDataState"] = state ? state.noDataState : undefined;
            resourceInputs["outlierId"] = state ? state.outlierId : undefined;
            resourceInputs["threshold"] = state ? state.threshold : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["window"] = state ? state.window : undefined;
        } else {
            const args = argsOrState as MachineLearningAlertArgs | undefined;
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["anomalyCondition"] = args ? args.anomalyCondition : undefined;
            resourceInputs["for"] = args ? args.for : undefined;
            resourceInputs["jobId"] = args ? args.jobId : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["noDataState"] = args ? args.noDataState : undefined;
            resourceInputs["outlierId"] = args ? args.outlierId : undefined;
            resourceInputs["threshold"] = args ? args.threshold : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["window"] = args ? args.window : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MachineLearningAlert.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MachineLearningAlert resources.
 */
export interface MachineLearningAlertState {
    /**
     * Annotations to add to the alert generated in Grafana.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The condition for when to consider a point as anomalous.
     */
    anomalyCondition?: pulumi.Input<string>;
    /**
     * How long values must be anomalous before firing an alert.
     */
    for?: pulumi.Input<string>;
    /**
     * The forecast this alert belongs to.
     */
    jobId?: pulumi.Input<string>;
    /**
     * Labels to add to the alert generated in Grafana.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * How the alert should be processed when no data is returned by the underlying series
     */
    noDataState?: pulumi.Input<string>;
    /**
     * The forecast this alert belongs to.
     */
    outlierId?: pulumi.Input<string>;
    /**
     * The threshold of points over the window that need to be anomalous to alert.
     */
    threshold?: pulumi.Input<string>;
    /**
     * The title of the alert.
     */
    title?: pulumi.Input<string>;
    /**
     * How much time to average values over
     */
    window?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MachineLearningAlert resource.
 */
export interface MachineLearningAlertArgs {
    /**
     * Annotations to add to the alert generated in Grafana.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The condition for when to consider a point as anomalous.
     */
    anomalyCondition?: pulumi.Input<string>;
    /**
     * How long values must be anomalous before firing an alert.
     */
    for?: pulumi.Input<string>;
    /**
     * The forecast this alert belongs to.
     */
    jobId?: pulumi.Input<string>;
    /**
     * Labels to add to the alert generated in Grafana.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * How the alert should be processed when no data is returned by the underlying series
     */
    noDataState?: pulumi.Input<string>;
    /**
     * The forecast this alert belongs to.
     */
    outlierId?: pulumi.Input<string>;
    /**
     * The threshold of points over the window that need to be anomalous to alert.
     */
    threshold?: pulumi.Input<string>;
    /**
     * The title of the alert.
     */
    title: pulumi.Input<string>;
    /**
     * How much time to average values over
     */
    window?: pulumi.Input<string>;
}
