// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Slo extends pulumi.CustomResource {
    /**
     * Get an existing Slo resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SloState, opts?: pulumi.CustomResourceOptions): Slo {
        return new Slo(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'grafana:index/slo:Slo';

    /**
     * Returns true if the given object is an instance of Slo.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Slo {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Slo.__pulumiType;
    }

    /**
     * Configures the alerting rules that will be generated for each time window associated with the SLO. Grafana SLOs can
     * generate alerts when the short-term error budget burn is very high, the long-term error budget burn rate is high, or
     * when the remaining error budget is below a certain threshold. Annotations and Labels support templating.
     */
    public readonly alerting!: pulumi.Output<outputs.SloAlerting | undefined>;
    /**
     * Description is a free-text field that can provide more context to an SLO.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Destination Datasource sets the datasource defined for an SLO
     */
    public readonly destinationDatasource!: pulumi.Output<outputs.SloDestinationDatasource | undefined>;
    /**
     * UID for the SLO folder
     */
    public readonly folderUid!: pulumi.Output<string | undefined>;
    /**
     * Additional labels that will be attached to all metrics generated from the query. These labels are useful for grouping
     * SLOs in dashboard views that you create by hand. Labels must adhere to Prometheus label name schema -
     * "^[a-zA-Z_][a-zA-Z0-9_]*$"
     */
    public readonly labels!: pulumi.Output<outputs.SloLabel[] | undefined>;
    /**
     * Name should be a short description of your indicator. Consider names like "API Availability"
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Over each rolling time window, the remaining error budget will be calculated, and separate alerts can be generated for
     * each time window based on the SLO burn rate or remaining error budget.
     */
    public readonly objectives!: pulumi.Output<outputs.SloObjective[]>;
    /**
     * Query describes the indicator that will be measured against the objective. Freeform Query types are currently supported.
     */
    public readonly queries!: pulumi.Output<outputs.SloQuery[]>;
    /**
     * The name of a search expression in Grafana Asserts. This is used in the SLO UI to open the Asserts RCA workbench and in
     * alerts to link to the RCA workbench.
     */
    public readonly searchExpression!: pulumi.Output<string | undefined>;

    /**
     * Create a Slo resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SloArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SloArgs | SloState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SloState | undefined;
            resourceInputs["alerting"] = state ? state.alerting : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destinationDatasource"] = state ? state.destinationDatasource : undefined;
            resourceInputs["folderUid"] = state ? state.folderUid : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["objectives"] = state ? state.objectives : undefined;
            resourceInputs["queries"] = state ? state.queries : undefined;
            resourceInputs["searchExpression"] = state ? state.searchExpression : undefined;
        } else {
            const args = argsOrState as SloArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.objectives === undefined) && !opts.urn) {
                throw new Error("Missing required property 'objectives'");
            }
            if ((!args || args.queries === undefined) && !opts.urn) {
                throw new Error("Missing required property 'queries'");
            }
            resourceInputs["alerting"] = args ? args.alerting : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destinationDatasource"] = args ? args.destinationDatasource : undefined;
            resourceInputs["folderUid"] = args ? args.folderUid : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["objectives"] = args ? args.objectives : undefined;
            resourceInputs["queries"] = args ? args.queries : undefined;
            resourceInputs["searchExpression"] = args ? args.searchExpression : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Slo.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Slo resources.
 */
export interface SloState {
    /**
     * Configures the alerting rules that will be generated for each time window associated with the SLO. Grafana SLOs can
     * generate alerts when the short-term error budget burn is very high, the long-term error budget burn rate is high, or
     * when the remaining error budget is below a certain threshold. Annotations and Labels support templating.
     */
    alerting?: pulumi.Input<inputs.SloAlerting>;
    /**
     * Description is a free-text field that can provide more context to an SLO.
     */
    description?: pulumi.Input<string>;
    /**
     * Destination Datasource sets the datasource defined for an SLO
     */
    destinationDatasource?: pulumi.Input<inputs.SloDestinationDatasource>;
    /**
     * UID for the SLO folder
     */
    folderUid?: pulumi.Input<string>;
    /**
     * Additional labels that will be attached to all metrics generated from the query. These labels are useful for grouping
     * SLOs in dashboard views that you create by hand. Labels must adhere to Prometheus label name schema -
     * "^[a-zA-Z_][a-zA-Z0-9_]*$"
     */
    labels?: pulumi.Input<pulumi.Input<inputs.SloLabel>[]>;
    /**
     * Name should be a short description of your indicator. Consider names like "API Availability"
     */
    name?: pulumi.Input<string>;
    /**
     * Over each rolling time window, the remaining error budget will be calculated, and separate alerts can be generated for
     * each time window based on the SLO burn rate or remaining error budget.
     */
    objectives?: pulumi.Input<pulumi.Input<inputs.SloObjective>[]>;
    /**
     * Query describes the indicator that will be measured against the objective. Freeform Query types are currently supported.
     */
    queries?: pulumi.Input<pulumi.Input<inputs.SloQuery>[]>;
    /**
     * The name of a search expression in Grafana Asserts. This is used in the SLO UI to open the Asserts RCA workbench and in
     * alerts to link to the RCA workbench.
     */
    searchExpression?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Slo resource.
 */
export interface SloArgs {
    /**
     * Configures the alerting rules that will be generated for each time window associated with the SLO. Grafana SLOs can
     * generate alerts when the short-term error budget burn is very high, the long-term error budget burn rate is high, or
     * when the remaining error budget is below a certain threshold. Annotations and Labels support templating.
     */
    alerting?: pulumi.Input<inputs.SloAlerting>;
    /**
     * Description is a free-text field that can provide more context to an SLO.
     */
    description: pulumi.Input<string>;
    /**
     * Destination Datasource sets the datasource defined for an SLO
     */
    destinationDatasource?: pulumi.Input<inputs.SloDestinationDatasource>;
    /**
     * UID for the SLO folder
     */
    folderUid?: pulumi.Input<string>;
    /**
     * Additional labels that will be attached to all metrics generated from the query. These labels are useful for grouping
     * SLOs in dashboard views that you create by hand. Labels must adhere to Prometheus label name schema -
     * "^[a-zA-Z_][a-zA-Z0-9_]*$"
     */
    labels?: pulumi.Input<pulumi.Input<inputs.SloLabel>[]>;
    /**
     * Name should be a short description of your indicator. Consider names like "API Availability"
     */
    name?: pulumi.Input<string>;
    /**
     * Over each rolling time window, the remaining error budget will be calculated, and separate alerts can be generated for
     * each time window based on the SLO burn rate or remaining error budget.
     */
    objectives: pulumi.Input<pulumi.Input<inputs.SloObjective>[]>;
    /**
     * Query describes the indicator that will be measured against the objective. Freeform Query types are currently supported.
     */
    queries: pulumi.Input<pulumi.Input<inputs.SloQuery>[]>;
    /**
     * The name of a search expression in Grafana Asserts. This is used in the SLO UI to open the Asserts RCA workbench and in
     * alerts to link to the RCA workbench.
     */
    searchExpression?: pulumi.Input<string>;
}
