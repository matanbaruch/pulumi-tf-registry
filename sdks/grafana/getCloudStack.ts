// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getCloudStack(args: GetCloudStackArgs, opts?: pulumi.InvokeOptions): Promise<GetCloudStackResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("grafana:index/getCloudStack:getCloudStack", {
        "slug": args.slug,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCloudStack.
 */
export interface GetCloudStackArgs {
    slug: string;
}

/**
 * A collection of values returned by getCloudStack.
 */
export interface GetCloudStackResult {
    readonly alertmanagerName: string;
    readonly alertmanagerStatus: string;
    readonly alertmanagerUrl: string;
    readonly alertmanagerUserId: number;
    readonly description: string;
    readonly graphiteName: string;
    readonly graphiteStatus: string;
    readonly graphiteUrl: string;
    readonly graphiteUserId: number;
    readonly id: string;
    readonly influxUrl: string;
    readonly labels: {[key: string]: string};
    readonly logsName: string;
    readonly logsStatus: string;
    readonly logsUrl: string;
    readonly logsUserId: number;
    readonly name: string;
    readonly orgId: number;
    readonly orgName: string;
    readonly orgSlug: string;
    readonly otlpUrl: string;
    readonly profilesName: string;
    readonly profilesStatus: string;
    readonly profilesUrl: string;
    readonly profilesUserId: number;
    readonly prometheusName: string;
    readonly prometheusRemoteEndpoint: string;
    readonly prometheusRemoteWriteEndpoint: string;
    readonly prometheusStatus: string;
    readonly prometheusUrl: string;
    readonly prometheusUserId: number;
    readonly regionSlug: string;
    readonly slug: string;
    readonly status: string;
    readonly tracesName: string;
    readonly tracesStatus: string;
    readonly tracesUrl: string;
    readonly tracesUserId: number;
    readonly url: string;
}
export function getCloudStackOutput(args: GetCloudStackOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCloudStackResult> {
    return pulumi.output(args).apply((a: any) => getCloudStack(a, opts))
}

/**
 * A collection of arguments for invoking getCloudStack.
 */
export interface GetCloudStackOutputArgs {
    slug: pulumi.Input<string>;
}
