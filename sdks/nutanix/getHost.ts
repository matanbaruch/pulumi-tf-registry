// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getHost(args: GetHostArgs, opts?: pulumi.InvokeOptions): Promise<GetHostResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nutanix:index/getHost:getHost", {
        "categories": args.categories,
        "hostId": args.hostId,
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getHost.
 */
export interface GetHostArgs {
    categories?: inputs.GetHostCategory[];
    hostId: string;
    id?: string;
}

/**
 * A collection of values returned by getHost.
 */
export interface GetHostResult {
    readonly apiVersion: string;
    readonly block: {[key: string]: string};
    readonly categories?: outputs.GetHostCategory[];
    readonly clusterReference: {[key: string]: string};
    readonly controllerVm: {[key: string]: string};
    readonly cpuCapacityHz: number;
    readonly cpuModel: string;
    readonly failoverCluster: {[key: string]: string};
    readonly gpuDriverVersion: string;
    readonly gpuLists: outputs.GetHostGpuList[];
    readonly hostDisksReferenceLists: outputs.GetHostHostDisksReferenceList[];
    readonly hostId: string;
    readonly hostNicsIdLists: string[];
    readonly hostType: string;
    readonly hypervisor: {[key: string]: string};
    readonly id: string;
    readonly ipmi: {[key: string]: string};
    readonly memoryCapacityMib: number;
    readonly metadata: {[key: string]: string};
    readonly monitoringState: string;
    readonly name: string;
    readonly numCpuCores: number;
    readonly numCpuSockets: number;
    readonly ownerReference: {[key: string]: string};
    readonly projectReference: {[key: string]: string};
    readonly rackableUnitReference: {[key: string]: string};
    readonly serialNumber: string;
    readonly windowsDomain: {[key: string]: string};
}
export function getHostOutput(args: GetHostOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetHostResult> {
    return pulumi.output(args).apply((a: any) => getHost(a, opts))
}

/**
 * A collection of arguments for invoking getHost.
 */
export interface GetHostOutputArgs {
    categories?: pulumi.Input<pulumi.Input<inputs.GetHostCategoryArgs>[]>;
    hostId: pulumi.Input<string>;
    id?: pulumi.Input<string>;
}
