// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getAccessControlPolicy(args?: GetAccessControlPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetAccessControlPolicyResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nutanix:index/getAccessControlPolicy:getAccessControlPolicy", {
        "accessControlPolicyId": args.accessControlPolicyId,
        "accessControlPolicyName": args.accessControlPolicyName,
        "categories": args.categories,
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getAccessControlPolicy.
 */
export interface GetAccessControlPolicyArgs {
    accessControlPolicyId?: string;
    accessControlPolicyName?: string;
    categories?: inputs.GetAccessControlPolicyCategory[];
    id?: string;
}

/**
 * A collection of values returned by getAccessControlPolicy.
 */
export interface GetAccessControlPolicyResult {
    readonly accessControlPolicyId?: string;
    readonly accessControlPolicyName?: string;
    readonly apiVersion: string;
    readonly categories?: outputs.GetAccessControlPolicyCategory[];
    readonly contextFilterLists: outputs.GetAccessControlPolicyContextFilterList[];
    readonly description: string;
    readonly id: string;
    readonly metadata: {[key: string]: string};
    readonly name: string;
    readonly ownerReference: {[key: string]: string};
    readonly projectReference: {[key: string]: string};
    readonly roleReferences: outputs.GetAccessControlPolicyRoleReference[];
    readonly state: string;
    readonly userGroupReferenceLists: outputs.GetAccessControlPolicyUserGroupReferenceList[];
    readonly userReferenceLists: outputs.GetAccessControlPolicyUserReferenceList[];
}
export function getAccessControlPolicyOutput(args?: GetAccessControlPolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAccessControlPolicyResult> {
    return pulumi.output(args).apply((a: any) => getAccessControlPolicy(a, opts))
}

/**
 * A collection of arguments for invoking getAccessControlPolicy.
 */
export interface GetAccessControlPolicyOutputArgs {
    accessControlPolicyId?: pulumi.Input<string>;
    accessControlPolicyName?: pulumi.Input<string>;
    categories?: pulumi.Input<pulumi.Input<inputs.GetAccessControlPolicyCategoryArgs>[]>;
    id?: pulumi.Input<string>;
}
