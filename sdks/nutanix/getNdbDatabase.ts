// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getNdbDatabase(args: GetNdbDatabaseArgs, opts?: pulumi.InvokeOptions): Promise<GetNdbDatabaseResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nutanix:index/getNdbDatabase:getNdbDatabase", {
        "databaseId": args.databaseId,
        "tags": args.tags,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNdbDatabase.
 */
export interface GetNdbDatabaseArgs {
    databaseId: string;
    tags?: inputs.GetNdbDatabaseTag[];
}

/**
 * A collection of values returned by getNdbDatabase.
 */
export interface GetNdbDatabaseResult {
    readonly clone: boolean;
    readonly clustered: boolean;
    readonly databaseClusterType: string;
    readonly databaseId: string;
    readonly databaseName: string;
    readonly databaseNodes: outputs.GetNdbDatabaseDatabaseNode[];
    readonly databases: {[key: string]: string};
    readonly dateCreated: string;
    readonly dateModified: string;
    readonly dbserverLogicalCluster: {[key: string]: string};
    readonly dbserverLogicalClusterId: string;
    readonly description: string;
    readonly eraCreated: boolean;
    readonly id: string;
    readonly infos: outputs.GetNdbDatabaseInfo[];
    readonly lcmConfigs: outputs.GetNdbDatabaseLcmConfig[];
    readonly linkedDatabases: outputs.GetNdbDatabaseLinkedDatabase[];
    readonly metric: {[key: string]: string};
    readonly name: string;
    readonly parentDatabaseId: string;
    readonly properties: outputs.GetNdbDatabaseProperty[];
    readonly status: string;
    readonly tags?: outputs.GetNdbDatabaseTag[];
    readonly timeMachineId: string;
    readonly timeMachines: outputs.GetNdbDatabaseTimeMachine[];
    readonly timeZone: string;
    readonly type: string;
}
export function getNdbDatabaseOutput(args: GetNdbDatabaseOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNdbDatabaseResult> {
    return pulumi.output(args).apply((a: any) => getNdbDatabase(a, opts))
}

/**
 * A collection of arguments for invoking getNdbDatabase.
 */
export interface GetNdbDatabaseOutputArgs {
    databaseId: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetNdbDatabaseTagArgs>[]>;
}
