// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NdbRegisterDatabase extends pulumi.CustomResource {
    /**
     * Get an existing NdbRegisterDatabase resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NdbRegisterDatabaseState, opts?: pulumi.CustomResourceOptions): NdbRegisterDatabase {
        return new NdbRegisterDatabase(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/ndbRegisterDatabase:NdbRegisterDatabase';

    /**
     * Returns true if the given object is an instance of NdbRegisterDatabase.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NdbRegisterDatabase {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NdbRegisterDatabase.__pulumiType;
    }

    /**
     * description of action arguments
     */
    public readonly actionarguments!: pulumi.Output<outputs.NdbRegisterDatabaseActionargument[] | undefined>;
    public readonly autoTuneStagingDrive!: pulumi.Output<boolean | undefined>;
    public readonly category!: pulumi.Output<string | undefined>;
    public /*out*/ readonly clone!: pulumi.Output<boolean>;
    public readonly clustered!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly databaseClusterType!: pulumi.Output<string>;
    public readonly databaseName!: pulumi.Output<string>;
    public /*out*/ readonly databaseNodes!: pulumi.Output<outputs.NdbRegisterDatabaseDatabaseNode[]>;
    public /*out*/ readonly databaseStatus!: pulumi.Output<string>;
    public readonly databaseType!: pulumi.Output<string>;
    public /*out*/ readonly dateCreated!: pulumi.Output<string>;
    public /*out*/ readonly dateModified!: pulumi.Output<string>;
    public /*out*/ readonly dbserverLogicalCluster!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly dbserverLogicalClusterId!: pulumi.Output<string>;
    public readonly delete!: pulumi.Output<boolean | undefined>;
    public readonly deleteLogicalCluster!: pulumi.Output<boolean | undefined>;
    public readonly deleteTimeMachine!: pulumi.Output<boolean | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly forced!: pulumi.Output<boolean | undefined>;
    public readonly forcedInstall!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly groupInfo!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly infos!: pulumi.Output<outputs.NdbRegisterDatabaseInfo[]>;
    public /*out*/ readonly lcmConfigs!: pulumi.Output<outputs.NdbRegisterDatabaseLcmConfig[]>;
    public /*out*/ readonly linkedDatabases!: pulumi.Output<outputs.NdbRegisterDatabaseLinkedDatabase[]>;
    public /*out*/ readonly metric!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly name!: pulumi.Output<string>;
    public readonly nxClusterId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly parentDatabaseId!: pulumi.Output<string>;
    public /*out*/ readonly parentSourceDatabaseId!: pulumi.Output<string>;
    public /*out*/ readonly parentTimeMachineId!: pulumi.Output<string>;
    public readonly postgressInfos!: pulumi.Output<outputs.NdbRegisterDatabasePostgressInfo[] | undefined>;
    /**
     * List of all the properties
     */
    public /*out*/ readonly properties!: pulumi.Output<outputs.NdbRegisterDatabaseProperty[]>;
    public readonly remove!: pulumi.Output<boolean | undefined>;
    public readonly resetDescriptionInNxCluster!: pulumi.Output<boolean | undefined>;
    public readonly softRemove!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.NdbRegisterDatabaseTag[] | undefined>;
    public /*out*/ readonly timeMachineId!: pulumi.Output<string>;
    /**
     * sample description for time machine info
     */
    public readonly timeMachineInfo!: pulumi.Output<outputs.NdbRegisterDatabaseTimeMachineInfo | undefined>;
    public /*out*/ readonly timeMachines!: pulumi.Output<outputs.NdbRegisterDatabaseTimeMachine[]>;
    public /*out*/ readonly timeZone!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.NdbRegisterDatabaseTimeouts | undefined>;
    public /*out*/ readonly type!: pulumi.Output<string>;
    public readonly vmDescription!: pulumi.Output<string | undefined>;
    public readonly vmIp!: pulumi.Output<string>;
    public readonly vmPassword!: pulumi.Output<string | undefined>;
    public readonly vmSshkey!: pulumi.Output<string | undefined>;
    public readonly vmUsername!: pulumi.Output<string | undefined>;
    public readonly workingDirectory!: pulumi.Output<string | undefined>;

    /**
     * Create a NdbRegisterDatabase resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NdbRegisterDatabaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NdbRegisterDatabaseArgs | NdbRegisterDatabaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NdbRegisterDatabaseState | undefined;
            resourceInputs["actionarguments"] = state ? state.actionarguments : undefined;
            resourceInputs["autoTuneStagingDrive"] = state ? state.autoTuneStagingDrive : undefined;
            resourceInputs["category"] = state ? state.category : undefined;
            resourceInputs["clone"] = state ? state.clone : undefined;
            resourceInputs["clustered"] = state ? state.clustered : undefined;
            resourceInputs["databaseClusterType"] = state ? state.databaseClusterType : undefined;
            resourceInputs["databaseName"] = state ? state.databaseName : undefined;
            resourceInputs["databaseNodes"] = state ? state.databaseNodes : undefined;
            resourceInputs["databaseStatus"] = state ? state.databaseStatus : undefined;
            resourceInputs["databaseType"] = state ? state.databaseType : undefined;
            resourceInputs["dateCreated"] = state ? state.dateCreated : undefined;
            resourceInputs["dateModified"] = state ? state.dateModified : undefined;
            resourceInputs["dbserverLogicalCluster"] = state ? state.dbserverLogicalCluster : undefined;
            resourceInputs["dbserverLogicalClusterId"] = state ? state.dbserverLogicalClusterId : undefined;
            resourceInputs["delete"] = state ? state.delete : undefined;
            resourceInputs["deleteLogicalCluster"] = state ? state.deleteLogicalCluster : undefined;
            resourceInputs["deleteTimeMachine"] = state ? state.deleteTimeMachine : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["forced"] = state ? state.forced : undefined;
            resourceInputs["forcedInstall"] = state ? state.forcedInstall : undefined;
            resourceInputs["groupInfo"] = state ? state.groupInfo : undefined;
            resourceInputs["infos"] = state ? state.infos : undefined;
            resourceInputs["lcmConfigs"] = state ? state.lcmConfigs : undefined;
            resourceInputs["linkedDatabases"] = state ? state.linkedDatabases : undefined;
            resourceInputs["metric"] = state ? state.metric : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nxClusterId"] = state ? state.nxClusterId : undefined;
            resourceInputs["parentDatabaseId"] = state ? state.parentDatabaseId : undefined;
            resourceInputs["parentSourceDatabaseId"] = state ? state.parentSourceDatabaseId : undefined;
            resourceInputs["parentTimeMachineId"] = state ? state.parentTimeMachineId : undefined;
            resourceInputs["postgressInfos"] = state ? state.postgressInfos : undefined;
            resourceInputs["properties"] = state ? state.properties : undefined;
            resourceInputs["remove"] = state ? state.remove : undefined;
            resourceInputs["resetDescriptionInNxCluster"] = state ? state.resetDescriptionInNxCluster : undefined;
            resourceInputs["softRemove"] = state ? state.softRemove : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeMachineId"] = state ? state.timeMachineId : undefined;
            resourceInputs["timeMachineInfo"] = state ? state.timeMachineInfo : undefined;
            resourceInputs["timeMachines"] = state ? state.timeMachines : undefined;
            resourceInputs["timeZone"] = state ? state.timeZone : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vmDescription"] = state ? state.vmDescription : undefined;
            resourceInputs["vmIp"] = state ? state.vmIp : undefined;
            resourceInputs["vmPassword"] = state ? state.vmPassword : undefined;
            resourceInputs["vmSshkey"] = state ? state.vmSshkey : undefined;
            resourceInputs["vmUsername"] = state ? state.vmUsername : undefined;
            resourceInputs["workingDirectory"] = state ? state.workingDirectory : undefined;
        } else {
            const args = argsOrState as NdbRegisterDatabaseArgs | undefined;
            if ((!args || args.databaseName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseName'");
            }
            if ((!args || args.databaseType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseType'");
            }
            if ((!args || args.vmIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vmIp'");
            }
            resourceInputs["actionarguments"] = args ? args.actionarguments : undefined;
            resourceInputs["autoTuneStagingDrive"] = args ? args.autoTuneStagingDrive : undefined;
            resourceInputs["category"] = args ? args.category : undefined;
            resourceInputs["clustered"] = args ? args.clustered : undefined;
            resourceInputs["databaseName"] = args ? args.databaseName : undefined;
            resourceInputs["databaseType"] = args ? args.databaseType : undefined;
            resourceInputs["delete"] = args ? args.delete : undefined;
            resourceInputs["deleteLogicalCluster"] = args ? args.deleteLogicalCluster : undefined;
            resourceInputs["deleteTimeMachine"] = args ? args.deleteTimeMachine : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["forced"] = args ? args.forced : undefined;
            resourceInputs["forcedInstall"] = args ? args.forcedInstall : undefined;
            resourceInputs["nxClusterId"] = args ? args.nxClusterId : undefined;
            resourceInputs["postgressInfos"] = args ? args.postgressInfos : undefined;
            resourceInputs["remove"] = args ? args.remove : undefined;
            resourceInputs["resetDescriptionInNxCluster"] = args ? args.resetDescriptionInNxCluster : undefined;
            resourceInputs["softRemove"] = args ? args.softRemove : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeMachineInfo"] = args ? args.timeMachineInfo : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vmDescription"] = args ? args.vmDescription : undefined;
            resourceInputs["vmIp"] = args ? args.vmIp : undefined;
            resourceInputs["vmPassword"] = args?.vmPassword ? pulumi.secret(args.vmPassword) : undefined;
            resourceInputs["vmSshkey"] = args?.vmSshkey ? pulumi.secret(args.vmSshkey) : undefined;
            resourceInputs["vmUsername"] = args ? args.vmUsername : undefined;
            resourceInputs["workingDirectory"] = args ? args.workingDirectory : undefined;
            resourceInputs["clone"] = undefined /*out*/;
            resourceInputs["databaseClusterType"] = undefined /*out*/;
            resourceInputs["databaseNodes"] = undefined /*out*/;
            resourceInputs["databaseStatus"] = undefined /*out*/;
            resourceInputs["dateCreated"] = undefined /*out*/;
            resourceInputs["dateModified"] = undefined /*out*/;
            resourceInputs["dbserverLogicalCluster"] = undefined /*out*/;
            resourceInputs["dbserverLogicalClusterId"] = undefined /*out*/;
            resourceInputs["groupInfo"] = undefined /*out*/;
            resourceInputs["infos"] = undefined /*out*/;
            resourceInputs["lcmConfigs"] = undefined /*out*/;
            resourceInputs["linkedDatabases"] = undefined /*out*/;
            resourceInputs["metric"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["parentDatabaseId"] = undefined /*out*/;
            resourceInputs["parentSourceDatabaseId"] = undefined /*out*/;
            resourceInputs["parentTimeMachineId"] = undefined /*out*/;
            resourceInputs["properties"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["timeMachineId"] = undefined /*out*/;
            resourceInputs["timeMachines"] = undefined /*out*/;
            resourceInputs["timeZone"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["vmPassword", "vmSshkey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(NdbRegisterDatabase.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NdbRegisterDatabase resources.
 */
export interface NdbRegisterDatabaseState {
    /**
     * description of action arguments
     */
    actionarguments?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseActionargument>[]>;
    autoTuneStagingDrive?: pulumi.Input<boolean>;
    category?: pulumi.Input<string>;
    clone?: pulumi.Input<boolean>;
    clustered?: pulumi.Input<boolean>;
    databaseClusterType?: pulumi.Input<string>;
    databaseName?: pulumi.Input<string>;
    databaseNodes?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseDatabaseNode>[]>;
    databaseStatus?: pulumi.Input<string>;
    databaseType?: pulumi.Input<string>;
    dateCreated?: pulumi.Input<string>;
    dateModified?: pulumi.Input<string>;
    dbserverLogicalCluster?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    dbserverLogicalClusterId?: pulumi.Input<string>;
    delete?: pulumi.Input<boolean>;
    deleteLogicalCluster?: pulumi.Input<boolean>;
    deleteTimeMachine?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    forced?: pulumi.Input<boolean>;
    forcedInstall?: pulumi.Input<boolean>;
    groupInfo?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    infos?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseInfo>[]>;
    lcmConfigs?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseLcmConfig>[]>;
    linkedDatabases?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseLinkedDatabase>[]>;
    metric?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    nxClusterId?: pulumi.Input<string>;
    parentDatabaseId?: pulumi.Input<string>;
    parentSourceDatabaseId?: pulumi.Input<string>;
    parentTimeMachineId?: pulumi.Input<string>;
    postgressInfos?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabasePostgressInfo>[]>;
    /**
     * List of all the properties
     */
    properties?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseProperty>[]>;
    remove?: pulumi.Input<boolean>;
    resetDescriptionInNxCluster?: pulumi.Input<boolean>;
    softRemove?: pulumi.Input<boolean>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseTag>[]>;
    timeMachineId?: pulumi.Input<string>;
    /**
     * sample description for time machine info
     */
    timeMachineInfo?: pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineInfo>;
    timeMachines?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseTimeMachine>[]>;
    timeZone?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NdbRegisterDatabaseTimeouts>;
    type?: pulumi.Input<string>;
    vmDescription?: pulumi.Input<string>;
    vmIp?: pulumi.Input<string>;
    vmPassword?: pulumi.Input<string>;
    vmSshkey?: pulumi.Input<string>;
    vmUsername?: pulumi.Input<string>;
    workingDirectory?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NdbRegisterDatabase resource.
 */
export interface NdbRegisterDatabaseArgs {
    /**
     * description of action arguments
     */
    actionarguments?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseActionargument>[]>;
    autoTuneStagingDrive?: pulumi.Input<boolean>;
    category?: pulumi.Input<string>;
    clustered?: pulumi.Input<boolean>;
    databaseName: pulumi.Input<string>;
    databaseType: pulumi.Input<string>;
    delete?: pulumi.Input<boolean>;
    deleteLogicalCluster?: pulumi.Input<boolean>;
    deleteTimeMachine?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    forced?: pulumi.Input<boolean>;
    forcedInstall?: pulumi.Input<boolean>;
    nxClusterId?: pulumi.Input<string>;
    postgressInfos?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabasePostgressInfo>[]>;
    remove?: pulumi.Input<boolean>;
    resetDescriptionInNxCluster?: pulumi.Input<boolean>;
    softRemove?: pulumi.Input<boolean>;
    tags?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseTag>[]>;
    /**
     * sample description for time machine info
     */
    timeMachineInfo?: pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineInfo>;
    timeouts?: pulumi.Input<inputs.NdbRegisterDatabaseTimeouts>;
    vmDescription?: pulumi.Input<string>;
    vmIp: pulumi.Input<string>;
    vmPassword?: pulumi.Input<string>;
    vmSshkey?: pulumi.Input<string>;
    vmUsername?: pulumi.Input<string>;
    workingDirectory?: pulumi.Input<string>;
}
