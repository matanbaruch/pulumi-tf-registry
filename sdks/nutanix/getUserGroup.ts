// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getUserGroup(args?: GetUserGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetUserGroupResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nutanix:index/getUserGroup:getUserGroup", {
        "categories": args.categories,
        "id": args.id,
        "ownerReference": args.ownerReference,
        "projectReference": args.projectReference,
        "userGroupDistinguishedName": args.userGroupDistinguishedName,
        "userGroupId": args.userGroupId,
        "userGroupName": args.userGroupName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getUserGroup.
 */
export interface GetUserGroupArgs {
    categories?: inputs.GetUserGroupCategory[];
    id?: string;
    ownerReference?: {[key: string]: string};
    projectReference?: {[key: string]: string};
    userGroupDistinguishedName?: string;
    userGroupId?: string;
    userGroupName?: string;
}

/**
 * A collection of values returned by getUserGroup.
 */
export interface GetUserGroupResult {
    readonly accessControlPolicyReferenceLists: outputs.GetUserGroupAccessControlPolicyReferenceList[];
    readonly apiVersion: string;
    readonly categories?: outputs.GetUserGroupCategory[];
    readonly directoryServiceUserGroups: outputs.GetUserGroupDirectoryServiceUserGroup[];
    readonly displayName: string;
    readonly id: string;
    readonly metadata: {[key: string]: string};
    readonly ownerReference: {[key: string]: string};
    readonly projectReference?: {[key: string]: string};
    readonly projectReferenceLists: outputs.GetUserGroupProjectReferenceList[];
    readonly state: string;
    readonly userGroupDistinguishedName?: string;
    readonly userGroupId?: string;
    readonly userGroupName?: string;
    readonly userGroupType: string;
}
export function getUserGroupOutput(args?: GetUserGroupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetUserGroupResult> {
    return pulumi.output(args).apply((a: any) => getUserGroup(a, opts))
}

/**
 * A collection of arguments for invoking getUserGroup.
 */
export interface GetUserGroupOutputArgs {
    categories?: pulumi.Input<pulumi.Input<inputs.GetUserGroupCategoryArgs>[]>;
    id?: pulumi.Input<string>;
    ownerReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    projectReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    userGroupDistinguishedName?: pulumi.Input<string>;
    userGroupId?: pulumi.Input<string>;
    userGroupName?: pulumi.Input<string>;
}
