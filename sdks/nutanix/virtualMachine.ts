// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VirtualMachine extends pulumi.CustomResource {
    /**
     * Get an existing VirtualMachine resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualMachineState, opts?: pulumi.CustomResourceOptions): VirtualMachine {
        return new VirtualMachine(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/virtualMachine:VirtualMachine';

    /**
     * Returns true if the given object is an instance of VirtualMachine.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualMachine {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualMachine.__pulumiType;
    }

    public /*out*/ readonly apiVersion!: pulumi.Output<string>;
    public readonly availabilityZoneReference!: pulumi.Output<{[key: string]: string}>;
    public readonly bootDeviceDiskAddress!: pulumi.Output<{[key: string]: string}>;
    public readonly bootDeviceMacAddress!: pulumi.Output<string>;
    public readonly bootDeviceOrderLists!: pulumi.Output<string[]>;
    public readonly bootType!: pulumi.Output<string>;
    public readonly categories!: pulumi.Output<outputs.VirtualMachineCategory[] | undefined>;
    public readonly cloudInitCdromUuid!: pulumi.Output<string>;
    public /*out*/ readonly clusterName!: pulumi.Output<string>;
    public readonly clusterUuid!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly diskLists!: pulumi.Output<outputs.VirtualMachineDiskList[] | undefined>;
    public readonly enableCpuPassthrough!: pulumi.Output<boolean | undefined>;
    public readonly enableScriptExec!: pulumi.Output<boolean>;
    public readonly gpuLists!: pulumi.Output<outputs.VirtualMachineGpuList[] | undefined>;
    public readonly guestCustomizationCloudInitCustomKeyValues!: pulumi.Output<{[key: string]: string}>;
    public readonly guestCustomizationCloudInitMetaData!: pulumi.Output<string>;
    public readonly guestCustomizationCloudInitUserData!: pulumi.Output<string>;
    public readonly guestCustomizationIsOverridable!: pulumi.Output<boolean>;
    public readonly guestCustomizationSysprep!: pulumi.Output<{[key: string]: string}>;
    public readonly guestCustomizationSysprepCustomKeyValues!: pulumi.Output<{[key: string]: string}>;
    public readonly guestOsId!: pulumi.Output<string>;
    public readonly hardwareClockTimezone!: pulumi.Output<string>;
    public /*out*/ readonly hostReference!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly hypervisorType!: pulumi.Output<string>;
    public readonly isVcpuHardPinned!: pulumi.Output<boolean | undefined>;
    public readonly machineType!: pulumi.Output<string>;
    public readonly memorySizeMib!: pulumi.Output<number>;
    public /*out*/ readonly metadata!: pulumi.Output<{[key: string]: string}>;
    public readonly name!: pulumi.Output<string>;
    public readonly ngtCredentials!: pulumi.Output<{[key: string]: string}>;
    public readonly ngtEnabledCapabilityLists!: pulumi.Output<string[]>;
    public /*out*/ readonly nicListStatuses!: pulumi.Output<outputs.VirtualMachineNicListStatus[]>;
    public readonly nicLists!: pulumi.Output<outputs.VirtualMachineNicList[] | undefined>;
    public readonly numSockets!: pulumi.Output<number>;
    public readonly numVcpusPerSocket!: pulumi.Output<number>;
    public readonly numVnumaNodes!: pulumi.Output<number>;
    public readonly nutanixGuestTools!: pulumi.Output<{[key: string]: string}>;
    public readonly ownerReference!: pulumi.Output<{[key: string]: string}>;
    public readonly parentReference!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly powerState!: pulumi.Output<string>;
    public readonly powerStateMechanism!: pulumi.Output<string>;
    public readonly projectReference!: pulumi.Output<{[key: string]: string}>;
    public readonly serialPortLists!: pulumi.Output<outputs.VirtualMachineSerialPortList[] | undefined>;
    public readonly shouldFailOnScriptFailure!: pulumi.Output<boolean>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.VirtualMachineTimeouts | undefined>;
    public readonly useHotAdd!: pulumi.Output<boolean | undefined>;
    public readonly vgaConsoleEnabled!: pulumi.Output<boolean>;

    /**
     * Create a VirtualMachine resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualMachineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VirtualMachineArgs | VirtualMachineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VirtualMachineState | undefined;
            resourceInputs["apiVersion"] = state ? state.apiVersion : undefined;
            resourceInputs["availabilityZoneReference"] = state ? state.availabilityZoneReference : undefined;
            resourceInputs["bootDeviceDiskAddress"] = state ? state.bootDeviceDiskAddress : undefined;
            resourceInputs["bootDeviceMacAddress"] = state ? state.bootDeviceMacAddress : undefined;
            resourceInputs["bootDeviceOrderLists"] = state ? state.bootDeviceOrderLists : undefined;
            resourceInputs["bootType"] = state ? state.bootType : undefined;
            resourceInputs["categories"] = state ? state.categories : undefined;
            resourceInputs["cloudInitCdromUuid"] = state ? state.cloudInitCdromUuid : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["clusterUuid"] = state ? state.clusterUuid : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["diskLists"] = state ? state.diskLists : undefined;
            resourceInputs["enableCpuPassthrough"] = state ? state.enableCpuPassthrough : undefined;
            resourceInputs["enableScriptExec"] = state ? state.enableScriptExec : undefined;
            resourceInputs["gpuLists"] = state ? state.gpuLists : undefined;
            resourceInputs["guestCustomizationCloudInitCustomKeyValues"] = state ? state.guestCustomizationCloudInitCustomKeyValues : undefined;
            resourceInputs["guestCustomizationCloudInitMetaData"] = state ? state.guestCustomizationCloudInitMetaData : undefined;
            resourceInputs["guestCustomizationCloudInitUserData"] = state ? state.guestCustomizationCloudInitUserData : undefined;
            resourceInputs["guestCustomizationIsOverridable"] = state ? state.guestCustomizationIsOverridable : undefined;
            resourceInputs["guestCustomizationSysprep"] = state ? state.guestCustomizationSysprep : undefined;
            resourceInputs["guestCustomizationSysprepCustomKeyValues"] = state ? state.guestCustomizationSysprepCustomKeyValues : undefined;
            resourceInputs["guestOsId"] = state ? state.guestOsId : undefined;
            resourceInputs["hardwareClockTimezone"] = state ? state.hardwareClockTimezone : undefined;
            resourceInputs["hostReference"] = state ? state.hostReference : undefined;
            resourceInputs["hypervisorType"] = state ? state.hypervisorType : undefined;
            resourceInputs["isVcpuHardPinned"] = state ? state.isVcpuHardPinned : undefined;
            resourceInputs["machineType"] = state ? state.machineType : undefined;
            resourceInputs["memorySizeMib"] = state ? state.memorySizeMib : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ngtCredentials"] = state ? state.ngtCredentials : undefined;
            resourceInputs["ngtEnabledCapabilityLists"] = state ? state.ngtEnabledCapabilityLists : undefined;
            resourceInputs["nicListStatuses"] = state ? state.nicListStatuses : undefined;
            resourceInputs["nicLists"] = state ? state.nicLists : undefined;
            resourceInputs["numSockets"] = state ? state.numSockets : undefined;
            resourceInputs["numVcpusPerSocket"] = state ? state.numVcpusPerSocket : undefined;
            resourceInputs["numVnumaNodes"] = state ? state.numVnumaNodes : undefined;
            resourceInputs["nutanixGuestTools"] = state ? state.nutanixGuestTools : undefined;
            resourceInputs["ownerReference"] = state ? state.ownerReference : undefined;
            resourceInputs["parentReference"] = state ? state.parentReference : undefined;
            resourceInputs["powerState"] = state ? state.powerState : undefined;
            resourceInputs["powerStateMechanism"] = state ? state.powerStateMechanism : undefined;
            resourceInputs["projectReference"] = state ? state.projectReference : undefined;
            resourceInputs["serialPortLists"] = state ? state.serialPortLists : undefined;
            resourceInputs["shouldFailOnScriptFailure"] = state ? state.shouldFailOnScriptFailure : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["useHotAdd"] = state ? state.useHotAdd : undefined;
            resourceInputs["vgaConsoleEnabled"] = state ? state.vgaConsoleEnabled : undefined;
        } else {
            const args = argsOrState as VirtualMachineArgs | undefined;
            if ((!args || args.clusterUuid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterUuid'");
            }
            resourceInputs["availabilityZoneReference"] = args ? args.availabilityZoneReference : undefined;
            resourceInputs["bootDeviceDiskAddress"] = args ? args.bootDeviceDiskAddress : undefined;
            resourceInputs["bootDeviceMacAddress"] = args ? args.bootDeviceMacAddress : undefined;
            resourceInputs["bootDeviceOrderLists"] = args ? args.bootDeviceOrderLists : undefined;
            resourceInputs["bootType"] = args ? args.bootType : undefined;
            resourceInputs["categories"] = args ? args.categories : undefined;
            resourceInputs["cloudInitCdromUuid"] = args ? args.cloudInitCdromUuid : undefined;
            resourceInputs["clusterUuid"] = args ? args.clusterUuid : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["diskLists"] = args ? args.diskLists : undefined;
            resourceInputs["enableCpuPassthrough"] = args ? args.enableCpuPassthrough : undefined;
            resourceInputs["enableScriptExec"] = args ? args.enableScriptExec : undefined;
            resourceInputs["gpuLists"] = args ? args.gpuLists : undefined;
            resourceInputs["guestCustomizationCloudInitCustomKeyValues"] = args ? args.guestCustomizationCloudInitCustomKeyValues : undefined;
            resourceInputs["guestCustomizationCloudInitMetaData"] = args ? args.guestCustomizationCloudInitMetaData : undefined;
            resourceInputs["guestCustomizationCloudInitUserData"] = args ? args.guestCustomizationCloudInitUserData : undefined;
            resourceInputs["guestCustomizationIsOverridable"] = args ? args.guestCustomizationIsOverridable : undefined;
            resourceInputs["guestCustomizationSysprep"] = args ? args.guestCustomizationSysprep : undefined;
            resourceInputs["guestCustomizationSysprepCustomKeyValues"] = args ? args.guestCustomizationSysprepCustomKeyValues : undefined;
            resourceInputs["guestOsId"] = args ? args.guestOsId : undefined;
            resourceInputs["hardwareClockTimezone"] = args ? args.hardwareClockTimezone : undefined;
            resourceInputs["isVcpuHardPinned"] = args ? args.isVcpuHardPinned : undefined;
            resourceInputs["machineType"] = args ? args.machineType : undefined;
            resourceInputs["memorySizeMib"] = args ? args.memorySizeMib : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ngtCredentials"] = args ? args.ngtCredentials : undefined;
            resourceInputs["ngtEnabledCapabilityLists"] = args ? args.ngtEnabledCapabilityLists : undefined;
            resourceInputs["nicLists"] = args ? args.nicLists : undefined;
            resourceInputs["numSockets"] = args ? args.numSockets : undefined;
            resourceInputs["numVcpusPerSocket"] = args ? args.numVcpusPerSocket : undefined;
            resourceInputs["numVnumaNodes"] = args ? args.numVnumaNodes : undefined;
            resourceInputs["nutanixGuestTools"] = args ? args.nutanixGuestTools : undefined;
            resourceInputs["ownerReference"] = args ? args.ownerReference : undefined;
            resourceInputs["parentReference"] = args ? args.parentReference : undefined;
            resourceInputs["powerStateMechanism"] = args ? args.powerStateMechanism : undefined;
            resourceInputs["projectReference"] = args ? args.projectReference : undefined;
            resourceInputs["serialPortLists"] = args ? args.serialPortLists : undefined;
            resourceInputs["shouldFailOnScriptFailure"] = args ? args.shouldFailOnScriptFailure : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["useHotAdd"] = args ? args.useHotAdd : undefined;
            resourceInputs["vgaConsoleEnabled"] = args ? args.vgaConsoleEnabled : undefined;
            resourceInputs["apiVersion"] = undefined /*out*/;
            resourceInputs["clusterName"] = undefined /*out*/;
            resourceInputs["hostReference"] = undefined /*out*/;
            resourceInputs["hypervisorType"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["nicListStatuses"] = undefined /*out*/;
            resourceInputs["powerState"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VirtualMachine.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VirtualMachine resources.
 */
export interface VirtualMachineState {
    apiVersion?: pulumi.Input<string>;
    availabilityZoneReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    bootDeviceDiskAddress?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    bootDeviceMacAddress?: pulumi.Input<string>;
    bootDeviceOrderLists?: pulumi.Input<pulumi.Input<string>[]>;
    bootType?: pulumi.Input<string>;
    categories?: pulumi.Input<pulumi.Input<inputs.VirtualMachineCategory>[]>;
    cloudInitCdromUuid?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    clusterUuid?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    diskLists?: pulumi.Input<pulumi.Input<inputs.VirtualMachineDiskList>[]>;
    enableCpuPassthrough?: pulumi.Input<boolean>;
    enableScriptExec?: pulumi.Input<boolean>;
    gpuLists?: pulumi.Input<pulumi.Input<inputs.VirtualMachineGpuList>[]>;
    guestCustomizationCloudInitCustomKeyValues?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    guestCustomizationCloudInitMetaData?: pulumi.Input<string>;
    guestCustomizationCloudInitUserData?: pulumi.Input<string>;
    guestCustomizationIsOverridable?: pulumi.Input<boolean>;
    guestCustomizationSysprep?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    guestCustomizationSysprepCustomKeyValues?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    guestOsId?: pulumi.Input<string>;
    hardwareClockTimezone?: pulumi.Input<string>;
    hostReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    hypervisorType?: pulumi.Input<string>;
    isVcpuHardPinned?: pulumi.Input<boolean>;
    machineType?: pulumi.Input<string>;
    memorySizeMib?: pulumi.Input<number>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    ngtCredentials?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    ngtEnabledCapabilityLists?: pulumi.Input<pulumi.Input<string>[]>;
    nicListStatuses?: pulumi.Input<pulumi.Input<inputs.VirtualMachineNicListStatus>[]>;
    nicLists?: pulumi.Input<pulumi.Input<inputs.VirtualMachineNicList>[]>;
    numSockets?: pulumi.Input<number>;
    numVcpusPerSocket?: pulumi.Input<number>;
    numVnumaNodes?: pulumi.Input<number>;
    nutanixGuestTools?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    ownerReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    parentReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    powerState?: pulumi.Input<string>;
    powerStateMechanism?: pulumi.Input<string>;
    projectReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    serialPortLists?: pulumi.Input<pulumi.Input<inputs.VirtualMachineSerialPortList>[]>;
    shouldFailOnScriptFailure?: pulumi.Input<boolean>;
    state?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VirtualMachineTimeouts>;
    useHotAdd?: pulumi.Input<boolean>;
    vgaConsoleEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a VirtualMachine resource.
 */
export interface VirtualMachineArgs {
    availabilityZoneReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    bootDeviceDiskAddress?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    bootDeviceMacAddress?: pulumi.Input<string>;
    bootDeviceOrderLists?: pulumi.Input<pulumi.Input<string>[]>;
    bootType?: pulumi.Input<string>;
    categories?: pulumi.Input<pulumi.Input<inputs.VirtualMachineCategory>[]>;
    cloudInitCdromUuid?: pulumi.Input<string>;
    clusterUuid: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    diskLists?: pulumi.Input<pulumi.Input<inputs.VirtualMachineDiskList>[]>;
    enableCpuPassthrough?: pulumi.Input<boolean>;
    enableScriptExec?: pulumi.Input<boolean>;
    gpuLists?: pulumi.Input<pulumi.Input<inputs.VirtualMachineGpuList>[]>;
    guestCustomizationCloudInitCustomKeyValues?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    guestCustomizationCloudInitMetaData?: pulumi.Input<string>;
    guestCustomizationCloudInitUserData?: pulumi.Input<string>;
    guestCustomizationIsOverridable?: pulumi.Input<boolean>;
    guestCustomizationSysprep?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    guestCustomizationSysprepCustomKeyValues?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    guestOsId?: pulumi.Input<string>;
    hardwareClockTimezone?: pulumi.Input<string>;
    isVcpuHardPinned?: pulumi.Input<boolean>;
    machineType?: pulumi.Input<string>;
    memorySizeMib?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    ngtCredentials?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    ngtEnabledCapabilityLists?: pulumi.Input<pulumi.Input<string>[]>;
    nicLists?: pulumi.Input<pulumi.Input<inputs.VirtualMachineNicList>[]>;
    numSockets?: pulumi.Input<number>;
    numVcpusPerSocket?: pulumi.Input<number>;
    numVnumaNodes?: pulumi.Input<number>;
    nutanixGuestTools?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    ownerReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    parentReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    powerStateMechanism?: pulumi.Input<string>;
    projectReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    serialPortLists?: pulumi.Input<pulumi.Input<inputs.VirtualMachineSerialPortList>[]>;
    shouldFailOnScriptFailure?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.VirtualMachineTimeouts>;
    useHotAdd?: pulumi.Input<boolean>;
    vgaConsoleEnabled?: pulumi.Input<boolean>;
}
