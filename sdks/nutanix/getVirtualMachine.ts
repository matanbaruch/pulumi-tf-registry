// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVirtualMachine(args: GetVirtualMachineArgs, opts?: pulumi.InvokeOptions): Promise<GetVirtualMachineResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nutanix:index/getVirtualMachine:getVirtualMachine", {
        "bootDeviceDiskAddress": args.bootDeviceDiskAddress,
        "bootDeviceMacAddress": args.bootDeviceMacAddress,
        "categories": args.categories,
        "id": args.id,
        "vmId": args.vmId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVirtualMachine.
 */
export interface GetVirtualMachineArgs {
    bootDeviceDiskAddress?: {[key: string]: string};
    bootDeviceMacAddress?: string;
    categories?: inputs.GetVirtualMachineCategory[];
    id?: string;
    vmId: string;
}

/**
 * A collection of values returned by getVirtualMachine.
 */
export interface GetVirtualMachineResult {
    readonly apiVersion: string;
    readonly availabilityZoneReference: {[key: string]: string};
    readonly bootDeviceDiskAddress: {[key: string]: string};
    readonly bootDeviceMacAddress: string;
    readonly bootDeviceOrderLists: string[];
    readonly bootType: string;
    readonly categories?: outputs.GetVirtualMachineCategory[];
    readonly clusterName: string;
    readonly clusterUuid: string;
    readonly description: string;
    readonly diskLists: outputs.GetVirtualMachineDiskList[];
    readonly enableCpuPassthrough: boolean;
    readonly enableScriptExec: boolean;
    readonly gpuLists: outputs.GetVirtualMachineGpuList[];
    readonly guestCustomizationCloudInitCustomKeyValues: {[key: string]: string};
    readonly guestCustomizationCloudInitMetaData: string;
    readonly guestCustomizationCloudInitUserData: string;
    readonly guestCustomizationIsOverridable: boolean;
    readonly guestCustomizationSysprep: {[key: string]: string};
    readonly guestCustomizationSysprepCustomKeyValues: {[key: string]: string};
    readonly guestOsId: string;
    readonly hardwareClockTimezone: string;
    readonly hostReference: {[key: string]: string};
    readonly hypervisorType: string;
    readonly id: string;
    readonly isVcpuHardPinned: boolean;
    readonly machineType: string;
    readonly memorySizeMib: number;
    readonly messageLists: outputs.GetVirtualMachineMessageList[];
    readonly metadata: {[key: string]: string};
    readonly name: string;
    readonly ngtCredentials: {[key: string]: string};
    readonly ngtEnabledCapabilityLists: string[];
    readonly nicLists: outputs.GetVirtualMachineNicList[];
    readonly numSockets: number;
    readonly numVcpusPerSocket: number;
    readonly numVnumaNodes: number;
    readonly nutanixGuestTools: {[key: string]: string};
    readonly ownerReference: {[key: string]: string};
    readonly parentReference: {[key: string]: string};
    readonly powerState: string;
    readonly powerStateMechanism: string;
    readonly projectReference: {[key: string]: string};
    readonly serialPortLists: outputs.GetVirtualMachineSerialPortList[];
    readonly shouldFailOnScriptFailure: boolean;
    readonly state: string;
    readonly vgaConsoleEnabled: boolean;
    readonly vmId: string;
}
export function getVirtualMachineOutput(args: GetVirtualMachineOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVirtualMachineResult> {
    return pulumi.output(args).apply((a: any) => getVirtualMachine(a, opts))
}

/**
 * A collection of arguments for invoking getVirtualMachine.
 */
export interface GetVirtualMachineOutputArgs {
    bootDeviceDiskAddress?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    bootDeviceMacAddress?: pulumi.Input<string>;
    categories?: pulumi.Input<pulumi.Input<inputs.GetVirtualMachineCategoryArgs>[]>;
    id?: pulumi.Input<string>;
    vmId: pulumi.Input<string>;
}
