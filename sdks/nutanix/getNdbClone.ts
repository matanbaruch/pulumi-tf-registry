// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getNdbClone(args?: GetNdbCloneArgs, opts?: pulumi.InvokeOptions): Promise<GetNdbCloneResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nutanix:index/getNdbClone:getNdbClone", {
        "cloneId": args.cloneId,
        "cloneName": args.cloneName,
        "filters": args.filters,
        "tags": args.tags,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNdbClone.
 */
export interface GetNdbCloneArgs {
    cloneId?: string;
    cloneName?: string;
    filters?: inputs.GetNdbCloneFilter[];
    tags?: inputs.GetNdbCloneTag[];
}

/**
 * A collection of values returned by getNdbClone.
 */
export interface GetNdbCloneResult {
    readonly clone: boolean;
    readonly cloneId?: string;
    readonly cloneName?: string;
    readonly clustered: boolean;
    readonly databaseClusterType: string;
    readonly databaseName: string;
    readonly databaseNodes: outputs.GetNdbCloneDatabaseNode[];
    readonly databaseStatus: string;
    readonly databases: {[key: string]: string};
    readonly dateCreated: string;
    readonly dateModified: string;
    readonly dbserverLogicalCluster: {[key: string]: string};
    readonly dbserverLogicalClusterId: string;
    readonly description: string;
    readonly filters?: outputs.GetNdbCloneFilter[];
    readonly id: string;
    readonly infos: outputs.GetNdbCloneInfo[];
    readonly lcmConfigs: outputs.GetNdbCloneLcmConfig[];
    readonly linkedDatabases: outputs.GetNdbCloneLinkedDatabase[];
    readonly metric: {[key: string]: string};
    readonly name: string;
    readonly parentDatabaseId: string;
    readonly parentSourceDatabaseId: string;
    readonly parentTimeMachineId: string;
    readonly properties: outputs.GetNdbCloneProperty[];
    readonly status: string;
    readonly tags?: outputs.GetNdbCloneTag[];
    readonly timeMachineId: string;
    readonly timeMachines: outputs.GetNdbCloneTimeMachine[];
    readonly timeZone: string;
    readonly type: string;
}
export function getNdbCloneOutput(args?: GetNdbCloneOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNdbCloneResult> {
    return pulumi.output(args).apply((a: any) => getNdbClone(a, opts))
}

/**
 * A collection of arguments for invoking getNdbClone.
 */
export interface GetNdbCloneOutputArgs {
    cloneId?: pulumi.Input<string>;
    cloneName?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetNdbCloneFilterArgs>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetNdbCloneTagArgs>[]>;
}
