// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AccessControlPolicyCategory {
    name: string;
    value: string;
}

export interface AccessControlPolicyContextFilterList {
    entityFilterExpressionLists: outputs.AccessControlPolicyContextFilterListEntityFilterExpressionList[];
    scopeFilterExpressionLists?: outputs.AccessControlPolicyContextFilterListScopeFilterExpressionList[];
}

export interface AccessControlPolicyContextFilterListEntityFilterExpressionList {
    leftHandSideEntityType: string;
    operator: string;
    rightHandSide: outputs.AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide;
}

export interface AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide {
    categories?: outputs.AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategories;
    collection: string;
    uuidLists: string[];
}

export interface AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategories {
    name: string;
    values: string[];
}

export interface AccessControlPolicyContextFilterListScopeFilterExpressionList {
    leftHandSide: string;
    operator: string;
    rightHandSide: outputs.AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide;
}

export interface AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide {
    categories?: outputs.AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategories;
    collection: string;
    uuidLists: string[];
}

export interface AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategories {
    name: string;
    values: string[];
}

export interface AccessControlPolicyOwnerReference {
    kind?: string;
    name?: string;
    uuid?: string;
}

export interface AccessControlPolicyRoleReference {
    kind: string;
    name: string;
    uuid: string;
}

export interface AccessControlPolicyTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface AccessControlPolicyUserGroupReferenceList {
    kind: string;
    name: string;
    uuid: string;
}

export interface AccessControlPolicyUserReferenceList {
    kind: string;
    name: string;
    uuid: string;
}

export interface AddressGroupIpAddressBlockList {
    ip: string;
    prefixLength: number;
}

export interface FoundationCentralImageClusterClusterStatus {
    aggregatePercentComplete: number;
    clusterCreationStarted: boolean;
    clusterProgressDetails: outputs.FoundationCentralImageClusterClusterStatusClusterProgressDetail[];
    currentFoundationIp: string;
    foundationSessionId: string;
    imagingStopped: boolean;
    intentPickedUp: boolean;
    nodeProgressDetails: outputs.FoundationCentralImageClusterClusterStatusNodeProgressDetail[];
}

export interface FoundationCentralImageClusterClusterStatusClusterProgressDetail {
    clusterName: string;
    messageLists: string[];
    percentComplete: number;
    status: string;
}

export interface FoundationCentralImageClusterClusterStatusNodeProgressDetail {
    imagedNodeUuid: string;
    imagingStopped: boolean;
    intentPickedUp: boolean;
    messageLists: string[];
    percentComplete: number;
    status: string;
}

export interface FoundationCentralImageClusterCommonNetworkSettings {
    cvmDnsServers: string[];
    cvmNtpServers: string[];
    hypervisorDnsServers: string[];
    hypervisorNtpServers: string[];
}

export interface FoundationCentralImageClusterFoundationInitConfig {
    blocks: outputs.FoundationCentralImageClusterFoundationInitConfigBlock[];
    clusters: outputs.FoundationCentralImageClusterFoundationInitConfigCluster[];
    cvmGateway: string;
    cvmNetmask: string;
    dnsServers: string;
    hypervProductKey: string;
    hypervSku: string;
    hypervisorGateway: string;
    hypervisorIsoUrl: {[key: string]: string};
    hypervisorIsos: outputs.FoundationCentralImageClusterFoundationInitConfigHypervisorIso[];
    hypervisorNetmask: string;
    ipmiGateway: string;
    ipmiNetmask: string;
    nosPackageUrls: outputs.FoundationCentralImageClusterFoundationInitConfigNosPackageUrl[];
}

export interface FoundationCentralImageClusterFoundationInitConfigBlock {
    blockId: string;
    nodes: outputs.FoundationCentralImageClusterFoundationInitConfigBlockNode[];
}

export interface FoundationCentralImageClusterFoundationInitConfigBlockNode {
    cvmIp: string;
    cvmVlanId: number;
    fcImagedNodeUuid: string;
    hardwareAttributesOverride: {[key: string]: string};
    hypervisor: string;
    hypervisorHostname: string;
    hypervisorIp: string;
    imageNow: boolean;
    ipmiIp: string;
    ipv6Address: string;
    nodePosition: string;
    nodeSerial: string;
}

export interface FoundationCentralImageClusterFoundationInitConfigCluster {
    clusterExternalIp: string;
    clusterInitNow: boolean;
    clusterInitSuccessful: boolean;
    clusterMembers: string[];
    clusterName: string;
    cvmDnsServers: string;
    cvmNtpServers: string;
    redundancyFactor: number;
    timezone: string;
}

export interface FoundationCentralImageClusterFoundationInitConfigHypervisorIso {
    hypervisorType: string;
    sha256sum: string;
    url: string;
}

export interface FoundationCentralImageClusterFoundationInitConfigNosPackageUrl {
    sha256sum: string;
    url: string;
}

export interface FoundationCentralImageClusterHypervisorIsoDetails {
    hypervProductKey: string;
    hypervSku: string;
    sha256sum: string;
    url?: string;
}

export interface FoundationCentralImageClusterNodeList {
    cvmGateway: string;
    cvmIp: string;
    cvmNetmask?: string;
    cvmRamGb?: number;
    cvmVlanId: number;
    hardwareAttributesOverride: {[key: string]: string};
    hypervisorGateway: string;
    hypervisorHostname: string;
    hypervisorIp: string;
    hypervisorNetmask: string;
    hypervisorType?: string;
    imageNow: boolean;
    imagedNodeUuid: string;
    ipmiGateway: string;
    ipmiIp: string;
    ipmiNetmask?: string;
    rdmaPassthrough?: boolean;
    useExistingNetworkSettings?: boolean;
}

export interface FoundationCentralImageClusterTimeouts {
    create?: string;
}

export interface FoundationImageNodesBlock {
    blockId?: string;
    nodes: outputs.FoundationImageNodesBlockNode[];
}

export interface FoundationImageNodesBlockNode {
    bondLacpRate?: string;
    bondMode?: string;
    bondUplinks?: string[];
    clusterId?: string;
    currentCvmVlanTag?: number;
    currentNetworkInterface?: string;
    cvmGbRam?: number;
    cvmIp?: string;
    cvmNumVcpus?: number;
    deviceHint?: string;
    exludeBootSerial?: string;
    hypervisor?: string;
    hypervisorHostname: string;
    hypervisorIp: string;
    imageDelay?: number;
    imageNow?: boolean;
    imageSuccessful?: boolean;
    ipmiConfigureNow?: boolean;
    ipmiGateway?: string;
    ipmiIp?: string;
    ipmiMac?: string;
    ipmiNetmask?: string;
    ipmiPassword?: string;
    ipmiUser?: string;
    ipv6Address?: string;
    ipv6Interface?: string;
    mitigateLowBootSpace?: boolean;
    nodePosition: string;
    nodeSerial?: string;
    rdmaMacAddr?: string;
    rdmaPassthrough?: boolean;
    ucsmManagedMode?: string;
    ucsmNodeSerial?: string;
    ucsmParams?: outputs.FoundationImageNodesBlockNodeUcsmParams;
    vswitches?: outputs.FoundationImageNodesBlockNodeVswitch[];
}

export interface FoundationImageNodesBlockNodeUcsmParams {
    keepUcsmSettings?: boolean;
    macPool?: string;
    nativeVlan?: boolean;
    vlanName?: string;
}

export interface FoundationImageNodesBlockNodeVswitch {
    bondMode?: string;
    lacp?: string;
    mtu?: number;
    name?: string;
    otherConfigs?: string[];
    uplinks?: string[];
}

export interface FoundationImageNodesCluster {
    backplaneNetmask?: string;
    backplaneSubnet?: string;
    backplaneVlan?: string;
    clusterExternalIp?: string;
    clusterInitNow?: boolean;
    clusterInitSuccessful?: boolean;
    clusterMembers: string[];
    clusterName: string;
    cvmDnsServers?: string;
    cvmNtpServers?: string;
    enableNs?: boolean;
    hypervisorNtpServers?: string;
    redundancyFactor: number;
    singleNodeCluster?: boolean;
    timezone?: string;
}

export interface FoundationImageNodesClusterUrl {
    clusterName: string;
    clusterUrl: string;
}

export interface FoundationImageNodesEosMetadata {
    accountNames?: string[];
    configId?: string;
    email?: string;
}

export interface FoundationImageNodesFcSettings {
    fcMetadata: outputs.FoundationImageNodesFcSettingsFcMetadata;
    foundationCentral: boolean;
}

export interface FoundationImageNodesFcSettingsFcMetadata {
    apiKey: string;
    fcIp: string;
}

export interface FoundationImageNodesHypervisorIso {
    esx?: outputs.FoundationImageNodesHypervisorIsoEsx;
    hyperv?: outputs.FoundationImageNodesHypervisorIsoHyperv;
    kvm?: outputs.FoundationImageNodesHypervisorIsoKvm;
    xen?: outputs.FoundationImageNodesHypervisorIsoXen;
}

export interface FoundationImageNodesHypervisorIsoEsx {
    checksum: string;
    filename: string;
}

export interface FoundationImageNodesHypervisorIsoHyperv {
    checksum: string;
    filename: string;
}

export interface FoundationImageNodesHypervisorIsoKvm {
    checksum: string;
    filename: string;
}

export interface FoundationImageNodesHypervisorIsoXen {
    checksum: string;
    filename: string;
}

export interface FoundationImageNodesTests {
    runNcc?: boolean;
    runSyscheck?: boolean;
}

export interface FoundationImageNodesTimeouts {
    create?: string;
}

export interface FoundationIpmiConfigBlock {
    blockId?: string;
    nodes: outputs.FoundationIpmiConfigBlockNode[];
}

export interface FoundationIpmiConfigBlockNode {
    ipmiConfigureNow: boolean;
    ipmiConfigureSuccessful: boolean;
    ipmiIp: string;
    ipmiMac: string;
    ipmiMessage: string;
}

export interface GetAccessControlPoliciesEntity {
    accessControlPolicyId: string;
    apiVersion: string;
    categories: outputs.GetAccessControlPoliciesEntityCategory[];
    contextFilterLists: outputs.GetAccessControlPoliciesEntityContextFilterList[];
    description: string;
    metadata: {[key: string]: string};
    name: string;
    ownerReference: {[key: string]: string};
    projectReference: {[key: string]: string};
    roleReferences: outputs.GetAccessControlPoliciesEntityRoleReference[];
    state: string;
    userGroupReferenceLists: outputs.GetAccessControlPoliciesEntityUserGroupReferenceList[];
    userReferenceLists: outputs.GetAccessControlPoliciesEntityUserReferenceList[];
}

export interface GetAccessControlPoliciesEntityCategory {
    name: string;
    value: string;
}

export interface GetAccessControlPoliciesEntityContextFilterList {
    entityFilterExpressionLists: outputs.GetAccessControlPoliciesEntityContextFilterListEntityFilterExpressionList[];
    scopeFilterExpressionLists: outputs.GetAccessControlPoliciesEntityContextFilterListScopeFilterExpressionList[];
}

export interface GetAccessControlPoliciesEntityContextFilterListEntityFilterExpressionList {
    leftHandSideEntityType: string;
    operator: string;
    rightHandSides: outputs.GetAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListRightHandSide[];
}

export interface GetAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListRightHandSide {
    categories: outputs.GetAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListRightHandSideCategory[];
    collection: string;
    uuidLists: string[];
}

export interface GetAccessControlPoliciesEntityContextFilterListEntityFilterExpressionListRightHandSideCategory {
    name: string;
    values: string[];
}

export interface GetAccessControlPoliciesEntityContextFilterListScopeFilterExpressionList {
    leftHandSide: string;
    operator: string;
    rightHandSides: outputs.GetAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListRightHandSide[];
}

export interface GetAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListRightHandSide {
    categories: outputs.GetAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListRightHandSideCategory[];
    collection: string;
    uuidLists: string[];
}

export interface GetAccessControlPoliciesEntityContextFilterListScopeFilterExpressionListRightHandSideCategory {
    name: string;
    values: string[];
}

export interface GetAccessControlPoliciesEntityRoleReference {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetAccessControlPoliciesEntityUserGroupReferenceList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetAccessControlPoliciesEntityUserReferenceList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetAccessControlPoliciesMetadata {
    filter: string;
    kind: string;
    length: number;
    offset: number;
    sortAttribute: string;
    sortOrder: string;
}

export interface GetAccessControlPolicyCategory {
    name: string;
    value: string;
}

export interface GetAccessControlPolicyContextFilterList {
    entityFilterExpressionLists: outputs.GetAccessControlPolicyContextFilterListEntityFilterExpressionList[];
    scopeFilterExpressionLists: outputs.GetAccessControlPolicyContextFilterListScopeFilterExpressionList[];
}

export interface GetAccessControlPolicyContextFilterListEntityFilterExpressionList {
    leftHandSideEntityType: string;
    operator: string;
    rightHandSides: outputs.GetAccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide[];
}

export interface GetAccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide {
    categories: outputs.GetAccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategory[];
    collection: string;
    uuidLists: string[];
}

export interface GetAccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategory {
    name: string;
    values: string[];
}

export interface GetAccessControlPolicyContextFilterListScopeFilterExpressionList {
    leftHandSide: string;
    operator: string;
    rightHandSides: outputs.GetAccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide[];
}

export interface GetAccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide {
    categories: outputs.GetAccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategory[];
    collection: string;
    uuidLists: string[];
}

export interface GetAccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategory {
    name: string;
    values: string[];
}

export interface GetAccessControlPolicyRoleReference {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetAccessControlPolicyUserGroupReferenceList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetAccessControlPolicyUserReferenceList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetAddressGroupIpAddressBlockList {
    ip: string;
    prefixLength: number;
}

export interface GetAddressGroupsEntity {
    addressGroups: outputs.GetAddressGroupsEntityAddressGroup[];
    associatedPoliciesLists: outputs.GetAddressGroupsEntityAssociatedPoliciesList[];
    uuid: string;
}

export interface GetAddressGroupsEntityAddressGroup {
    addressGroupString: string;
    description: string;
    ipAddressBlockLists: outputs.GetAddressGroupsEntityAddressGroupIpAddressBlockList[];
    name: string;
}

export interface GetAddressGroupsEntityAddressGroupIpAddressBlockList {
    ip: string;
    prefixLength: number;
}

export interface GetAddressGroupsEntityAssociatedPoliciesList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetAddressGroupsMetadata {
    filter: string;
    kind: string;
    length: number;
    offset: number;
    sortAttribute: string;
    sortOrder: string;
}

export interface GetAssertHelperCheck {
    condition: boolean;
    errorMessage: string;
}

export interface GetClusterAuthorizedPublicKeyList {
    key: string;
    name: string;
}

export interface GetClusterCaCertificateList {
    caName: string;
    certificate: string;
}

export interface GetClusterCategory {
    name: string;
    value: string;
}

export interface GetClusterHttpProxyList {
    address: {[key: string]: string};
    credentials: {[key: string]: string};
    proxyTypeLists: string[];
}

export interface GetClusterHttpProxyWhitelist {
    target: string;
    targetType: string;
}

export interface GetClusterManagementServerList {
    drsEnabled: boolean;
    ip: string;
    statusLists: string[];
    type: string;
}

export interface GetClusterNode {
    ip: string;
    type: string;
    version: string;
}

export interface GetClustersEntity {
    analysisVmEfficiencyMap: {[key: string]: string};
    apiVersion: string;
    authorizedPublicKeyLists: outputs.GetClustersEntityAuthorizedPublicKeyList[];
    build: {[key: string]: string};
    caCertificateLists: outputs.GetClustersEntityCaCertificateList[];
    categories: outputs.GetClustersEntityCategory[];
    certificationSigningInfo: {[key: string]: string};
    clientAuth: {[key: string]: string};
    clusterArch: string;
    domainServerCredentials: {[key: string]: string};
    domainServerName: string;
    domainServerNameserver: string;
    enabledFeatureLists: string[];
    encryptionStatus: string;
    externalDataServicesIp: string;
    externalIp: string;
    externalSubnet: string;
    gpuDriverVersion: string;
    httpProxyLists: outputs.GetClustersEntityHttpProxyList[];
    httpProxyWhitelists: outputs.GetClustersEntityHttpProxyWhitelist[];
    internalSubnet: string;
    isAvailable: boolean;
    managementServerLists: outputs.GetClustersEntityManagementServerList[];
    masqueradingIp: string;
    masqueradingPort: number;
    metadata: {[key: string]: string};
    name: string;
    nameServerIpLists: string[];
    nfsSubnetWhitelists: string[];
    nodes: outputs.GetClustersEntityNode[];
    ntpServerIpLists: string[];
    operationMode: string;
    ownerReference: {[key: string]: string};
    projectReference: {[key: string]: string};
    serviceLists: string[];
    smtpServerAddress: {[key: string]: string};
    smtpServerCredentials: {[key: string]: string};
    smtpServerEmailAddress: string;
    smtpServerProxyTypeLists: string[];
    smtpServerType: string;
    softwareMapNcc: {[key: string]: string};
    softwareMapNos: {[key: string]: string};
    sslKeyExpireDatetime: string;
    sslKeyName: string;
    sslKeySigningInfo: {[key: string]: string};
    sslKeyType: string;
    state: string;
    supportedInformationVerbosity: string;
    timezone: string;
}

export interface GetClustersEntityAuthorizedPublicKeyList {
    key: string;
    name: string;
}

export interface GetClustersEntityCaCertificateList {
    caName: string;
    certificate: string;
}

export interface GetClustersEntityCategory {
    name: string;
    value: string;
}

export interface GetClustersEntityHttpProxyList {
    address: {[key: string]: string};
    credentials: {[key: string]: string};
    proxyTypeLists: string[];
}

export interface GetClustersEntityHttpProxyWhitelist {
    target: string;
    targetType: string;
}

export interface GetClustersEntityManagementServerList {
    drsEnabled: boolean;
    ip: string;
    statusLists: string[];
    type: string;
}

export interface GetClustersEntityNode {
    ip: string;
    type: string;
    version: string;
}

export interface GetFloatingIpSpec {
    resources: outputs.GetFloatingIpSpecResource[];
}

export interface GetFloatingIpSpecResource {
    externalSubnetReference: {[key: string]: string};
    vmNicReference: {[key: string]: string};
    vpcReference: {[key: string]: string};
}

export interface GetFloatingIpStatus {
    executionContexts: outputs.GetFloatingIpStatusExecutionContext[];
    name: string;
    resources: outputs.GetFloatingIpStatusResource[];
    state: string;
}

export interface GetFloatingIpStatusExecutionContext {
    taskUuids: string[];
}

export interface GetFloatingIpStatusResource {
    externalSubnetReference: {[key: string]: string};
    floatingIp: string;
    vmNicReference: {[key: string]: string};
    vpcReference: {[key: string]: string};
}

export interface GetFloatingIpsEntity {
    metadata: {[key: string]: string};
    specs: outputs.GetFloatingIpsEntitySpec[];
    statuses: outputs.GetFloatingIpsEntityStatus[];
}

export interface GetFloatingIpsEntitySpec {
    resources: outputs.GetFloatingIpsEntitySpecResource[];
}

export interface GetFloatingIpsEntitySpecResource {
    externalSubnetReference: {[key: string]: string};
    vmNicReference: {[key: string]: string};
    vpcReference: {[key: string]: string};
}

export interface GetFloatingIpsEntityStatus {
    executionContexts: outputs.GetFloatingIpsEntityStatusExecutionContext[];
    name: string;
    resources: outputs.GetFloatingIpsEntityStatusResource[];
    state: string;
}

export interface GetFloatingIpsEntityStatusExecutionContext {
    taskUuids: string[];
}

export interface GetFloatingIpsEntityStatusResource {
    externalSubnetReference: {[key: string]: string};
    floatingIp: string;
    vmNicReference: {[key: string]: string};
    vpcReference: {[key: string]: string};
}

export interface GetFloatingIpsMetadata {
    filter: string;
    kind: string;
    length: number;
    offset: number;
    sortAttribute: string;
    sortOrder: string;
    totalMatches: number;
}

export interface GetFoundationCentralClusterDetailsClusterStatus {
    aggregatePercentComplete: number;
    clusterCreationStarted: boolean;
    clusterProgressDetails: outputs.GetFoundationCentralClusterDetailsClusterStatusClusterProgressDetail[];
    currentFoundationIp: string;
    foundationSessionId: string;
    imagingStopped: boolean;
    intentPickedUp: boolean;
    nodeProgressDetails: outputs.GetFoundationCentralClusterDetailsClusterStatusNodeProgressDetail[];
}

export interface GetFoundationCentralClusterDetailsClusterStatusClusterProgressDetail {
    clusterName: string;
    messageLists: string[];
    percentComplete: number;
    status: string;
}

export interface GetFoundationCentralClusterDetailsClusterStatusNodeProgressDetail {
    imagedNodeUuid: string;
    imagingStopped: boolean;
    intentPickedUp: boolean;
    messageLists: string[];
    percentComplete: number;
    status: string;
}

export interface GetFoundationCentralClusterDetailsCommonNetworkSettings {
    cvmDnsServers: string[];
    cvmNtpServers: string[];
    hypervisorDnsServers: string[];
    hypervisorNtpServers: string[];
}

export interface GetFoundationCentralClusterDetailsFoundationInitConfig {
    blocks: outputs.GetFoundationCentralClusterDetailsFoundationInitConfigBlock[];
    clusters: outputs.GetFoundationCentralClusterDetailsFoundationInitConfigCluster[];
    cvmGateway: string;
    cvmNetmask: string;
    dnsServers: string;
    hypervProductKey: string;
    hypervSku: string;
    hypervisorGateway: string;
    hypervisorIsoUrl: {[key: string]: string};
    hypervisorIsos: outputs.GetFoundationCentralClusterDetailsFoundationInitConfigHypervisorIso[];
    hypervisorNetmask: string;
    ipmiGateway: string;
    ipmiNetmask: string;
    nosPackageUrls: outputs.GetFoundationCentralClusterDetailsFoundationInitConfigNosPackageUrl[];
}

export interface GetFoundationCentralClusterDetailsFoundationInitConfigBlock {
    blockId: string;
    nodes: outputs.GetFoundationCentralClusterDetailsFoundationInitConfigBlockNode[];
}

export interface GetFoundationCentralClusterDetailsFoundationInitConfigBlockNode {
    cvmIp: string;
    cvmVlanId: number;
    fcImagedNodeUuid: string;
    hardwareAttributesOverride: {[key: string]: string};
    hypervisor: string;
    hypervisorHostname: string;
    hypervisorIp: string;
    imageNow: boolean;
    ipmiIp: string;
    ipv6Address: string;
    nodePosition: string;
    nodeSerial: string;
}

export interface GetFoundationCentralClusterDetailsFoundationInitConfigCluster {
    clusterExternalIp: string;
    clusterInitNow: boolean;
    clusterInitSuccessful: boolean;
    clusterMembers: string[];
    clusterName: string;
    cvmDnsServers: string;
    cvmNtpServers: string;
    redundancyFactor: number;
    timezone: string;
}

export interface GetFoundationCentralClusterDetailsFoundationInitConfigHypervisorIso {
    hypervisorType: string;
    sha256sum: string;
    url: string;
}

export interface GetFoundationCentralClusterDetailsFoundationInitConfigNosPackageUrl {
    sha256sum: string;
    url: string;
}

export interface GetFoundationCentralImagedClustersListFilters {
    archived?: boolean;
}

export interface GetFoundationCentralImagedClustersListImagedCluster {
    archived: boolean;
    clusterExternalIp: string;
    clusterName: string;
    clusterSize: number;
    clusterStatuses: outputs.GetFoundationCentralImagedClustersListImagedClusterClusterStatus[];
    commonNetworkSettings: outputs.GetFoundationCentralImagedClustersListImagedClusterCommonNetworkSetting[];
    createdTimestamp: string;
    currentTime: string;
    destroyed: boolean;
    foundationInitConfigs: outputs.GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfig[];
    foundationInitNodeUuid: string;
    imagedClusterUuid: string;
    imagedNodeUuidLists: string[];
    redundancyFactor: number;
    storageNodeCount: number;
    workflowType: string;
}

export interface GetFoundationCentralImagedClustersListImagedClusterClusterStatus {
    aggregatePercentComplete: number;
    clusterCreationStarted: boolean;
    clusterProgressDetails: outputs.GetFoundationCentralImagedClustersListImagedClusterClusterStatusClusterProgressDetail[];
    currentFoundationIp: string;
    foundationSessionId: string;
    imagingStopped: boolean;
    intentPickedUp: boolean;
    nodeProgressDetails: outputs.GetFoundationCentralImagedClustersListImagedClusterClusterStatusNodeProgressDetail[];
}

export interface GetFoundationCentralImagedClustersListImagedClusterClusterStatusClusterProgressDetail {
    clusterName: string;
    messageLists: string[];
    percentComplete: number;
    status: string;
}

export interface GetFoundationCentralImagedClustersListImagedClusterClusterStatusNodeProgressDetail {
    imagedNodeUuid: string;
    imagingStopped: boolean;
    intentPickedUp: boolean;
    messageLists: string[];
    percentComplete: number;
    status: string;
}

export interface GetFoundationCentralImagedClustersListImagedClusterCommonNetworkSetting {
    cvmDnsServers: string[];
    cvmNtpServers: string[];
    hypervisorDnsServers: string[];
    hypervisorNtpServers: string[];
}

export interface GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfig {
    blocks: outputs.GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigBlock[];
    clusters: outputs.GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigCluster[];
    cvmGateway: string;
    cvmNetmask: string;
    dnsServers: string;
    hypervProductKey: string;
    hypervSku: string;
    hypervisorGateway: string;
    hypervisorIsoUrl: {[key: string]: string};
    hypervisorIsos: outputs.GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigHypervisorIso[];
    hypervisorNetmask: string;
    ipmiGateway: string;
    ipmiNetmask: string;
    nosPackageUrls: outputs.GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigNosPackageUrl[];
}

export interface GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigBlock {
    blockId: string;
    nodes: outputs.GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigBlockNode[];
}

export interface GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigBlockNode {
    cvmIp: string;
    cvmVlanId: number;
    fcImagedNodeUuid: string;
    hardwareAttributesOverride: {[key: string]: string};
    hypervisor: string;
    hypervisorHostname: string;
    hypervisorIp: string;
    imageNow: boolean;
    ipmiIp: string;
    ipv6Address: string;
    nodePosition: string;
    nodeSerial: string;
}

export interface GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigCluster {
    clusterExternalIp: string;
    clusterInitNow: boolean;
    clusterInitSuccessful: boolean;
    clusterMembers: string[];
    clusterName: string;
    cvmDnsServers: string;
    cvmNtpServers: string;
    redundancyFactor: number;
    timezone: string;
}

export interface GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigHypervisorIso {
    hypervisorType: string;
    sha256sum: string;
    url: string;
}

export interface GetFoundationCentralImagedClustersListImagedClusterFoundationInitConfigNosPackageUrl {
    sha256sum: string;
    url: string;
}

export interface GetFoundationCentralImagedClustersListMetadata {
    length: number;
    offset: number;
    totalMatches: number;
}

export interface GetFoundationCentralImagedNodesListFilters {
    nodeState?: string;
}

export interface GetFoundationCentralImagedNodesListImagedNode {
    aosVersion: string;
    apiKeyUuid: string;
    available: boolean;
    blockSerial: string;
    createdTimestamp: string;
    currentTime: string;
    cvmGateway: string;
    cvmIp: string;
    cvmIpv6: string;
    cvmNetmask: string;
    cvmUp: boolean;
    cvmUuid: string;
    cvmVlanId: number;
    foundationVersion: string;
    hardwareAttributes: {[key: string]: string};
    hypervisorGateway: string;
    hypervisorHostname: string;
    hypervisorIp: string;
    hypervisorNetmask: string;
    hypervisorType: string;
    hypervisorVersion: string;
    imagedClusterUuid: string;
    imagedNodeUuid: string;
    ipmiGateway: string;
    ipmiIp: string;
    ipmiNetmask: string;
    ipv6Interface: string;
    latestHbTsLists: string[];
    model: string;
    nodePosition: string;
    nodeSerial: string;
    nodeState: string;
    nodeType: string;
    objectVersion: number;
    supportedFeatures: string[];
}

export interface GetFoundationCentralImagedNodesListMetadata {
    length: number;
    offset: number;
    totalMatches: number;
}

export interface GetFoundationCentralListApiKeysApiKey {
    alias: string;
    apiKey: string;
    createdTimestamp: string;
    currentTime: string;
    keyUuid: string;
}

export interface GetFoundationCentralListApiKeysMetadata {
    length: number;
    offset: number;
    totalMatches: number;
}

export interface GetFoundationDiscoverNodesEntity {
    blockId: string;
    chassisN: number;
    model: string;
    nodes: outputs.GetFoundationDiscoverNodesEntityNode[];
}

export interface GetFoundationDiscoverNodesEntityNode {
    clusterId: string;
    configured: boolean;
    currentCvmVlanTag: string;
    currentNetworkInterface: string;
    foundationVersion: string;
    hypervisor: string;
    hypervisorVersion: string;
    ipv6Address: string;
    model: string;
    nodePosition: string;
    nodeSerial: string;
    nodeUuid: string;
    nosVersion: string;
    svmIp: string;
}

export interface GetFoundationHypervisorIsosEsx {
    filename: string;
    supported: boolean;
}

export interface GetFoundationHypervisorIsosHyperv {
    filename: string;
    supported: boolean;
}

export interface GetFoundationHypervisorIsosKvm {
    filename: string;
    supported: boolean;
}

export interface GetFoundationHypervisorIsosLinux {
    filename: string;
    supported: boolean;
}

export interface GetFoundationHypervisorIsosXen {
    filename: string;
    supported: boolean;
}

export interface GetFoundationNodeNetworkDetailsNode {
    cvmGateway: string;
    cvmIp: string;
    cvmNetmask: string;
    cvmVlanId: string;
    error: string;
    hypervisorGateway: string;
    hypervisorHostname: string;
    hypervisorIp: string;
    hypervisorNetmask: string;
    ipmiGateway: string;
    ipmiIp: string;
    ipmiNetmask: string;
    ipv6Address: string;
    nodeSerial: string;
}

export interface GetHostCategory {
    name: string;
    value: string;
}

export interface GetHostGpuList {
    assignable: boolean;
    consumerReference: {[key: string]: string};
    deviceId: number;
    fraction: number;
    frameBufferSizeMib: number;
    guestDriverVersion: string;
    index: number;
    licenseLists: string[];
    maxResolution: string;
    mode: string;
    name: string;
    numVgpusAllocated: number;
    numVirtualDisplayHeads: number;
    numaNode: number;
    pciAddress: string;
    status: string;
    uuid: string;
    vendor: string;
}

export interface GetHostHostDisksReferenceList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetHostsEntity {
    apiVersion: string;
    block: {[key: string]: string};
    categories: outputs.GetHostsEntityCategory[];
    clusterReference: {[key: string]: string};
    controllerVm: {[key: string]: string};
    cpuCapacityHz: number;
    cpuModel: string;
    failoverCluster: {[key: string]: string};
    gpuDriverVersion: string;
    gpuLists: outputs.GetHostsEntityGpuList[];
    hostDisksReferenceLists: outputs.GetHostsEntityHostDisksReferenceList[];
    hostNicsIdLists: string[];
    hostType: string;
    hypervisor: {[key: string]: string};
    ipmi: {[key: string]: string};
    memoryCapacityMib: number;
    metadata: {[key: string]: string};
    monitoringState: string;
    name: string;
    numCpuCores: number;
    numCpuSockets: number;
    ownerReference: {[key: string]: string};
    projectReference: {[key: string]: string};
    rackableUnitReference: {[key: string]: string};
    serialNumber: string;
    windowsDomain: {[key: string]: string};
}

export interface GetHostsEntityCategory {
    name: string;
    value: string;
}

export interface GetHostsEntityGpuList {
    assignable: boolean;
    consumerReference: {[key: string]: string};
    deviceId: number;
    fraction: number;
    frameBufferSizeMib: number;
    guestDriverVersion: string;
    index: number;
    licenseLists: string[];
    maxResolution: string;
    mode: string;
    name: string;
    numVgpusAllocated: number;
    numVirtualDisplayHeads: number;
    numaNode: number;
    pciAddress: string;
    status: string;
    uuid: string;
    vendor: string;
}

export interface GetHostsEntityHostDisksReferenceList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetImageCategory {
    name: string;
    value: string;
}

export interface GetImageClusterReference {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetImageCurrentClusterReferenceList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetKarbonClusterEtcdNodePool {
    ahvConfigs: outputs.GetKarbonClusterEtcdNodePoolAhvConfig[];
    name: string;
    nodeOsVersion: string;
    nodes: outputs.GetKarbonClusterEtcdNodePoolNode[];
    numInstances: number;
}

export interface GetKarbonClusterEtcdNodePoolAhvConfig {
    cpu: number;
    diskMib: number;
    memoryMib: number;
    networkUuid: string;
    prismElementClusterUuid: string;
}

export interface GetKarbonClusterEtcdNodePoolNode {
    hostname: string;
    ipv4Address: string;
}

export interface GetKarbonClusterMasterNodePool {
    ahvConfigs: outputs.GetKarbonClusterMasterNodePoolAhvConfig[];
    name: string;
    nodeOsVersion: string;
    nodes: outputs.GetKarbonClusterMasterNodePoolNode[];
    numInstances: number;
}

export interface GetKarbonClusterMasterNodePoolAhvConfig {
    cpu: number;
    diskMib: number;
    memoryMib: number;
    networkUuid: string;
    prismElementClusterUuid: string;
}

export interface GetKarbonClusterMasterNodePoolNode {
    hostname: string;
    ipv4Address: string;
}

export interface GetKarbonClusterWorkerNodePool {
    ahvConfigs: outputs.GetKarbonClusterWorkerNodePoolAhvConfig[];
    name: string;
    nodeOsVersion: string;
    nodes: outputs.GetKarbonClusterWorkerNodePoolNode[];
    numInstances: number;
}

export interface GetKarbonClusterWorkerNodePoolAhvConfig {
    cpu: number;
    diskMib: number;
    memoryMib: number;
    networkUuid: string;
    prismElementClusterUuid: string;
}

export interface GetKarbonClusterWorkerNodePoolNode {
    hostname: string;
    ipv4Address: string;
}

export interface GetKarbonClustersCluster {
    deploymentType: string;
    etcdNodePools: outputs.GetKarbonClustersClusterEtcdNodePool[];
    kubeapiServerIpv4Address: string;
    masterNodePools: outputs.GetKarbonClustersClusterMasterNodePool[];
    name: string;
    status: string;
    uuid: string;
    version: string;
    workerNodePools: outputs.GetKarbonClustersClusterWorkerNodePool[];
}

export interface GetKarbonClustersClusterEtcdNodePool {
    ahvConfigs: outputs.GetKarbonClustersClusterEtcdNodePoolAhvConfig[];
    name: string;
    nodeOsVersion: string;
    nodes: outputs.GetKarbonClustersClusterEtcdNodePoolNode[];
    numInstances: number;
}

export interface GetKarbonClustersClusterEtcdNodePoolAhvConfig {
    cpu: number;
    diskMib: number;
    memoryMib: number;
    networkUuid: string;
    prismElementClusterUuid: string;
}

export interface GetKarbonClustersClusterEtcdNodePoolNode {
    hostname: string;
    ipv4Address: string;
}

export interface GetKarbonClustersClusterMasterNodePool {
    ahvConfigs: outputs.GetKarbonClustersClusterMasterNodePoolAhvConfig[];
    name: string;
    nodeOsVersion: string;
    nodes: outputs.GetKarbonClustersClusterMasterNodePoolNode[];
    numInstances: number;
}

export interface GetKarbonClustersClusterMasterNodePoolAhvConfig {
    cpu: number;
    diskMib: number;
    memoryMib: number;
    networkUuid: string;
    prismElementClusterUuid: string;
}

export interface GetKarbonClustersClusterMasterNodePoolNode {
    hostname: string;
    ipv4Address: string;
}

export interface GetKarbonClustersClusterWorkerNodePool {
    ahvConfigs: outputs.GetKarbonClustersClusterWorkerNodePoolAhvConfig[];
    name: string;
    nodeOsVersion: string;
    nodes: outputs.GetKarbonClustersClusterWorkerNodePoolNode[];
    numInstances: number;
}

export interface GetKarbonClustersClusterWorkerNodePoolAhvConfig {
    cpu: number;
    diskMib: number;
    memoryMib: number;
    networkUuid: string;
    prismElementClusterUuid: string;
}

export interface GetKarbonClustersClusterWorkerNodePoolNode {
    hostname: string;
    ipv4Address: string;
}

export interface GetKarbonPrivateRegistriesPrivateRegistry {
    endpoint: string;
    name: string;
    uuid: string;
}

export interface GetNdbCloneDatabaseNode {
    accessLevel: {[key: string]: string};
    databaseId: string;
    databaseStatus: string;
    dateCreated: string;
    dateModified: string;
    dbserver: {[key: string]: string};
    dbserverId: string;
    description: string;
    id: string;
    infos: outputs.GetNdbCloneDatabaseNodeInfo[];
    name: string;
    primary: boolean;
    properties: outputs.GetNdbCloneDatabaseNodeProperty[];
    protectionDomainId: string;
    protectionDomains: outputs.GetNdbCloneDatabaseNodeProtectionDomain[];
    softwareInstallationId: string;
    status: string;
    tags: outputs.GetNdbCloneDatabaseNodeTag[];
}

export interface GetNdbCloneDatabaseNodeInfo {
    info: {[key: string]: string};
    secureInfo: {[key: string]: string};
}

export interface GetNdbCloneDatabaseNodeProperty {
    description: string;
    name: string;
    refId: string;
    secure: boolean;
    value: string;
}

export interface GetNdbCloneDatabaseNodeProtectionDomain {
    assocEntities: string[];
    cloudId: string;
    dateCreated: string;
    dateModified: string;
    description: string;
    eraCreated: boolean;
    id: string;
    name: string;
    ownerId: string;
    primaryHost: string;
    properties: outputs.GetNdbCloneDatabaseNodeProtectionDomainProperty[];
    status: string;
    type: string;
}

export interface GetNdbCloneDatabaseNodeProtectionDomainProperty {
    description: string;
    name: string;
    refId: string;
    secure: boolean;
    value: string;
}

export interface GetNdbCloneDatabaseNodeTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface GetNdbCloneFilter {
    anyStatus?: string;
    detailed?: string;
    loadDbserverCluster?: string;
    timezone?: string;
}

export interface GetNdbCloneInfo {
    bpgConfigs: outputs.GetNdbCloneInfoBpgConfig[];
    secureInfo: {[key: string]: string};
}

export interface GetNdbCloneInfoBpgConfig {
    bpgDbParams: outputs.GetNdbCloneInfoBpgConfigBpgDbParam[];
    storages: outputs.GetNdbCloneInfoBpgConfigStorage[];
    vmProperties: outputs.GetNdbCloneInfoBpgConfigVmProperty[];
}

export interface GetNdbCloneInfoBpgConfigBpgDbParam {
    effectiveCacheSize: string;
    maintenanceWorkMem: string;
    maxParallelWorkersPerGather: string;
    maxWorkerProcesses: string;
    sharedBuffers: string;
    workMem: string;
}

export interface GetNdbCloneInfoBpgConfigStorage {
    archiveStorages: outputs.GetNdbCloneInfoBpgConfigStorageArchiveStorage[];
    dataDisks: outputs.GetNdbCloneInfoBpgConfigStorageDataDisk[];
    logDisks: outputs.GetNdbCloneInfoBpgConfigStorageLogDisk[];
}

export interface GetNdbCloneInfoBpgConfigStorageArchiveStorage {
    size: number;
}

export interface GetNdbCloneInfoBpgConfigStorageDataDisk {
    count: number;
}

export interface GetNdbCloneInfoBpgConfigStorageLogDisk {
    count: number;
    size: number;
}

export interface GetNdbCloneInfoBpgConfigVmProperty {
    dirtyBackgroundRatio: number;
    dirtyExpireCentisecs: number;
    dirtyRatio: number;
    dirtyWritebackCentisecs: number;
    nrHugepages: number;
    overcommitMemory: number;
    swappiness: number;
}

export interface GetNdbCloneLcmConfig {
    expiryDetails: outputs.GetNdbCloneLcmConfigExpiryDetail[];
    postDeleteCommands: outputs.GetNdbCloneLcmConfigPostDeleteCommand[];
    preDeleteCommands: outputs.GetNdbCloneLcmConfigPreDeleteCommand[];
    refreshDetails: outputs.GetNdbCloneLcmConfigRefreshDetail[];
}

export interface GetNdbCloneLcmConfigExpiryDetail {
    deleteDatabase: boolean;
    deleteTimeMachine: boolean;
    deleteVm: boolean;
    effectiveTimestamp: string;
    expireInDays: number;
    expiryDateTimezone: string;
    expiryTimestamp: string;
    remindBeforeInDays: number;
    userCreated: boolean;
}

export interface GetNdbCloneLcmConfigPostDeleteCommand {
    command: string;
}

export interface GetNdbCloneLcmConfigPreDeleteCommand {
    command: string;
}

export interface GetNdbCloneLcmConfigRefreshDetail {
    lastRefreshDate: string;
    nextRefreshDate: string;
    refreshDateTimezone: string;
    refreshInDays: number;
    refreshInHours: number;
    refreshInMonths: number;
    refreshTime: string;
}

export interface GetNdbCloneLinkedDatabase {
    databaseName: string;
    databaseStatus: string;
    dateCreated: string;
    dateModified: string;
    description: string;
    id: string;
    infos: outputs.GetNdbCloneLinkedDatabaseInfo[];
    metric: {[key: string]: string};
    name: string;
    parentDatabaseId: string;
    parentLinkedDatabaseId: string;
    snapshotId: string;
    status: string;
    timezone: string;
}

export interface GetNdbCloneLinkedDatabaseInfo {
    info: {[key: string]: string};
    secureInfo: {[key: string]: string};
}

export interface GetNdbCloneProperty {
    description: string;
    name: string;
    refId: string;
    secure: boolean;
    value: string;
}

export interface GetNdbCloneTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface GetNdbCloneTimeMachine {
    accessLevel: string;
    clone: boolean;
    clones: string;
    clustered: boolean;
    database: string;
    databaseId: string;
    dateCreated: string;
    dateModified: string;
    description: string;
    eaStatus: string;
    id: string;
    metric: string;
    name: string;
    properties: outputs.GetNdbCloneTimeMachineProperty[];
    scheduleId: string;
    schedules: outputs.GetNdbCloneTimeMachineSchedule[];
    scope: string;
    slaId: string;
    slaUpdateInProgress: boolean;
    slaUpdateMetadata: string;
    slas: outputs.GetNdbCloneTimeMachineSla[];
    sourceNxClusters: string[];
    status: string;
    tags: outputs.GetNdbCloneTimeMachineTag[];
    type: string;
}

export interface GetNdbCloneTimeMachineProperty {
    description: string;
    name: string;
    refId: string;
    secure: boolean;
    value: string;
}

export interface GetNdbCloneTimeMachineSchedule {
    continuousSchedules: outputs.GetNdbCloneTimeMachineScheduleContinuousSchedule[];
    dailySchedules: outputs.GetNdbCloneTimeMachineScheduleDailySchedule[];
    dateCreated: string;
    dateModified: string;
    description: string;
    globalPolicy: boolean;
    id: string;
    monthlySchedules: outputs.GetNdbCloneTimeMachineScheduleMonthlySchedule[];
    name: string;
    ownerId: string;
    quartelySchedules: outputs.GetNdbCloneTimeMachineScheduleQuartelySchedule[];
    referenceCount: number;
    snapshotTimeOfDays: outputs.GetNdbCloneTimeMachineScheduleSnapshotTimeOfDay[];
    startTime: string;
    systemPolicy: boolean;
    timeZone: string;
    uniqueName: string;
    weeklySchedules: outputs.GetNdbCloneTimeMachineScheduleWeeklySchedule[];
    yearlySchedules: outputs.GetNdbCloneTimeMachineScheduleYearlySchedule[];
}

export interface GetNdbCloneTimeMachineScheduleContinuousSchedule {
    enabled: boolean;
    logBackupInterval: number;
    snapshotsPerDay: number;
}

export interface GetNdbCloneTimeMachineScheduleDailySchedule {
    enabled: boolean;
}

export interface GetNdbCloneTimeMachineScheduleMonthlySchedule {
    dayOfMonth: number;
    enabled: boolean;
}

export interface GetNdbCloneTimeMachineScheduleQuartelySchedule {
    dayOfMonth: number;
    enabled: boolean;
    startMonth: string;
    startMonthValue: string;
}

export interface GetNdbCloneTimeMachineScheduleSnapshotTimeOfDay {
    extra: boolean;
    hours: number;
    minutes: number;
    seconds: number;
}

export interface GetNdbCloneTimeMachineScheduleWeeklySchedule {
    dayOfWeek: string;
    dayOfWeekValue: string;
    enabled: boolean;
}

export interface GetNdbCloneTimeMachineScheduleYearlySchedule {
    dayOfMonth: number;
    enabled: boolean;
    month: string;
    monthValue: string;
}

export interface GetNdbCloneTimeMachineSla {
    continuousRetention: number;
    currentActiveFrequency: string;
    dailyRetention: number;
    dateCreated: string;
    dateModified: string;
    description: string;
    id: string;
    monthlyRetention: number;
    name: string;
    ownerId: string;
    pitrEnabled: boolean;
    quarterlyRetention: number;
    referenceCount: number;
    systemSla: boolean;
    uniqueName: string;
    weeklyRetention: number;
    yearlyRetention: number;
}

export interface GetNdbCloneTimeMachineTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface GetNdbClonesClone {
    clone: boolean;
    clustered: boolean;
    databaseClusterType: string;
    databaseName: string;
    databaseNodes: outputs.GetNdbClonesCloneDatabaseNode[];
    databaseStatus: string;
    databases: {[key: string]: string};
    dateCreated: string;
    dateModified: string;
    dbserverLogicalCluster: {[key: string]: string};
    dbserverLogicalClusterId: string;
    description: string;
    id: string;
    infos: outputs.GetNdbClonesCloneInfo[];
    lcmConfigs: outputs.GetNdbClonesCloneLcmConfig[];
    linkedDatabases: outputs.GetNdbClonesCloneLinkedDatabase[];
    metric: {[key: string]: string};
    name: string;
    parentDatabaseId: string;
    parentSourceDatabaseId: string;
    parentTimeMachineId: string;
    properties: outputs.GetNdbClonesCloneProperty[];
    status: string;
    tags: outputs.GetNdbClonesCloneTag[];
    timeMachineId: string;
    timeMachines: outputs.GetNdbClonesCloneTimeMachine[];
    timeZone: string;
    type: string;
}

export interface GetNdbClonesCloneDatabaseNode {
    accessLevel: {[key: string]: string};
    databaseId: string;
    databaseStatus: string;
    dateCreated: string;
    dateModified: string;
    dbserver: {[key: string]: string};
    dbserverId: string;
    description: string;
    id: string;
    infos: outputs.GetNdbClonesCloneDatabaseNodeInfo[];
    name: string;
    primary: boolean;
    properties: outputs.GetNdbClonesCloneDatabaseNodeProperty[];
    protectionDomainId: string;
    protectionDomains: outputs.GetNdbClonesCloneDatabaseNodeProtectionDomain[];
    softwareInstallationId: string;
    status: string;
    tags: outputs.GetNdbClonesCloneDatabaseNodeTag[];
}

export interface GetNdbClonesCloneDatabaseNodeInfo {
    info: {[key: string]: string};
    secureInfo: {[key: string]: string};
}

export interface GetNdbClonesCloneDatabaseNodeProperty {
    description: string;
    name: string;
    refId: string;
    secure: boolean;
    value: string;
}

export interface GetNdbClonesCloneDatabaseNodeProtectionDomain {
    assocEntities: string[];
    cloudId: string;
    dateCreated: string;
    dateModified: string;
    description: string;
    eraCreated: boolean;
    id: string;
    name: string;
    ownerId: string;
    primaryHost: string;
    properties: outputs.GetNdbClonesCloneDatabaseNodeProtectionDomainProperty[];
    status: string;
    type: string;
}

export interface GetNdbClonesCloneDatabaseNodeProtectionDomainProperty {
    description: string;
    name: string;
    refId: string;
    secure: boolean;
    value: string;
}

export interface GetNdbClonesCloneDatabaseNodeTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface GetNdbClonesCloneInfo {
    bpgConfigs: outputs.GetNdbClonesCloneInfoBpgConfig[];
    secureInfo: {[key: string]: string};
}

export interface GetNdbClonesCloneInfoBpgConfig {
    bpgDbParams: outputs.GetNdbClonesCloneInfoBpgConfigBpgDbParam[];
    storages: outputs.GetNdbClonesCloneInfoBpgConfigStorage[];
    vmProperties: outputs.GetNdbClonesCloneInfoBpgConfigVmProperty[];
}

export interface GetNdbClonesCloneInfoBpgConfigBpgDbParam {
    effectiveCacheSize: string;
    maintenanceWorkMem: string;
    maxParallelWorkersPerGather: string;
    maxWorkerProcesses: string;
    sharedBuffers: string;
    workMem: string;
}

export interface GetNdbClonesCloneInfoBpgConfigStorage {
    archiveStorages: outputs.GetNdbClonesCloneInfoBpgConfigStorageArchiveStorage[];
    dataDisks: outputs.GetNdbClonesCloneInfoBpgConfigStorageDataDisk[];
    logDisks: outputs.GetNdbClonesCloneInfoBpgConfigStorageLogDisk[];
}

export interface GetNdbClonesCloneInfoBpgConfigStorageArchiveStorage {
    size: number;
}

export interface GetNdbClonesCloneInfoBpgConfigStorageDataDisk {
    count: number;
}

export interface GetNdbClonesCloneInfoBpgConfigStorageLogDisk {
    count: number;
    size: number;
}

export interface GetNdbClonesCloneInfoBpgConfigVmProperty {
    dirtyBackgroundRatio: number;
    dirtyExpireCentisecs: number;
    dirtyRatio: number;
    dirtyWritebackCentisecs: number;
    nrHugepages: number;
    overcommitMemory: number;
    swappiness: number;
}

export interface GetNdbClonesCloneLcmConfig {
    expiryDetails: outputs.GetNdbClonesCloneLcmConfigExpiryDetail[];
    postDeleteCommands: outputs.GetNdbClonesCloneLcmConfigPostDeleteCommand[];
    preDeleteCommands: outputs.GetNdbClonesCloneLcmConfigPreDeleteCommand[];
    refreshDetails: outputs.GetNdbClonesCloneLcmConfigRefreshDetail[];
}

export interface GetNdbClonesCloneLcmConfigExpiryDetail {
    deleteDatabase: boolean;
    deleteTimeMachine: boolean;
    deleteVm: boolean;
    effectiveTimestamp: string;
    expireInDays: number;
    expiryDateTimezone: string;
    expiryTimestamp: string;
    remindBeforeInDays: number;
    userCreated: boolean;
}

export interface GetNdbClonesCloneLcmConfigPostDeleteCommand {
    command: string;
}

export interface GetNdbClonesCloneLcmConfigPreDeleteCommand {
    command: string;
}

export interface GetNdbClonesCloneLcmConfigRefreshDetail {
    lastRefreshDate: string;
    nextRefreshDate: string;
    refreshDateTimezone: string;
    refreshInDays: number;
    refreshInHours: number;
    refreshInMonths: number;
    refreshTime: string;
}

export interface GetNdbClonesCloneLinkedDatabase {
    databaseName: string;
    databaseStatus: string;
    dateCreated: string;
    dateModified: string;
    description: string;
    id: string;
    infos: outputs.GetNdbClonesCloneLinkedDatabaseInfo[];
    metric: {[key: string]: string};
    name: string;
    parentDatabaseId: string;
    parentLinkedDatabaseId: string;
    snapshotId: string;
    status: string;
    timezone: string;
}

export interface GetNdbClonesCloneLinkedDatabaseInfo {
    info: {[key: string]: string};
    secureInfo: {[key: string]: string};
}

export interface GetNdbClonesCloneProperty {
    description: string;
    name: string;
    refId: string;
    secure: boolean;
    value: string;
}

export interface GetNdbClonesCloneTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface GetNdbClonesCloneTimeMachine {
    accessLevel: string;
    clone: boolean;
    clones: string;
    clustered: boolean;
    database: string;
    databaseId: string;
    dateCreated: string;
    dateModified: string;
    description: string;
    eaStatus: string;
    id: string;
    metric: string;
    name: string;
    properties: outputs.GetNdbClonesCloneTimeMachineProperty[];
    scheduleId: string;
    schedules: outputs.GetNdbClonesCloneTimeMachineSchedule[];
    scope: string;
    slaId: string;
    slaUpdateInProgress: boolean;
    slaUpdateMetadata: string;
    slas: outputs.GetNdbClonesCloneTimeMachineSla[];
    sourceNxClusters: string[];
    status: string;
    tags: outputs.GetNdbClonesCloneTimeMachineTag[];
    type: string;
}

export interface GetNdbClonesCloneTimeMachineProperty {
    description: string;
    name: string;
    refId: string;
    secure: boolean;
    value: string;
}

export interface GetNdbClonesCloneTimeMachineSchedule {
    continuousSchedules: outputs.GetNdbClonesCloneTimeMachineScheduleContinuousSchedule[];
    dailySchedules: outputs.GetNdbClonesCloneTimeMachineScheduleDailySchedule[];
    dateCreated: string;
    dateModified: string;
    description: string;
    globalPolicy: boolean;
    id: string;
    monthlySchedules: outputs.GetNdbClonesCloneTimeMachineScheduleMonthlySchedule[];
    name: string;
    ownerId: string;
    quartelySchedules: outputs.GetNdbClonesCloneTimeMachineScheduleQuartelySchedule[];
    referenceCount: number;
    snapshotTimeOfDays: outputs.GetNdbClonesCloneTimeMachineScheduleSnapshotTimeOfDay[];
    startTime: string;
    systemPolicy: boolean;
    timeZone: string;
    uniqueName: string;
    weeklySchedules: outputs.GetNdbClonesCloneTimeMachineScheduleWeeklySchedule[];
    yearlySchedules: outputs.GetNdbClonesCloneTimeMachineScheduleYearlySchedule[];
}

export interface GetNdbClonesCloneTimeMachineScheduleContinuousSchedule {
    enabled: boolean;
    logBackupInterval: number;
    snapshotsPerDay: number;
}

export interface GetNdbClonesCloneTimeMachineScheduleDailySchedule {
    enabled: boolean;
}

export interface GetNdbClonesCloneTimeMachineScheduleMonthlySchedule {
    dayOfMonth: number;
    enabled: boolean;
}

export interface GetNdbClonesCloneTimeMachineScheduleQuartelySchedule {
    dayOfMonth: number;
    enabled: boolean;
    startMonth: string;
    startMonthValue: string;
}

export interface GetNdbClonesCloneTimeMachineScheduleSnapshotTimeOfDay {
    extra: boolean;
    hours: number;
    minutes: number;
    seconds: number;
}

export interface GetNdbClonesCloneTimeMachineScheduleWeeklySchedule {
    dayOfWeek: string;
    dayOfWeekValue: string;
    enabled: boolean;
}

export interface GetNdbClonesCloneTimeMachineScheduleYearlySchedule {
    dayOfMonth: number;
    enabled: boolean;
    month: string;
    monthValue: string;
}

export interface GetNdbClonesCloneTimeMachineSla {
    continuousRetention: number;
    currentActiveFrequency: string;
    dailyRetention: number;
    dateCreated: string;
    dateModified: string;
    description: string;
    id: string;
    monthlyRetention: number;
    name: string;
    ownerId: string;
    pitrEnabled: boolean;
    quarterlyRetention: number;
    referenceCount: number;
    systemSla: boolean;
    uniqueName: string;
    weeklyRetention: number;
    yearlyRetention: number;
}

export interface GetNdbClonesCloneTimeMachineTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface GetNdbClonesFilter {
    anyStatus?: string;
    detailed?: string;
    loadDbserverCluster?: string;
    orderByDbserverCluster?: string;
    orderByDbserverLogicalCluster?: string;
    timezone?: string;
}

export interface GetNdbClusterEntityCount {
    dbServers: number;
    engineCounts: outputs.GetNdbClusterEntityCountEngineCount[];
}

export interface GetNdbClusterEntityCountEngineCount {
    mariadbDatabases: outputs.GetNdbClusterEntityCountEngineCountMariadbDatabase[];
    mongodbDatabases: outputs.GetNdbClusterEntityCountEngineCountMongodbDatabase[];
    mysqlDatabases: outputs.GetNdbClusterEntityCountEngineCountMysqlDatabase[];
    oracleDatabases: outputs.GetNdbClusterEntityCountEngineCountOracleDatabase[];
    postgresDatabases: outputs.GetNdbClusterEntityCountEngineCountPostgresDatabase[];
    saphanaDatabases: outputs.GetNdbClusterEntityCountEngineCountSaphanaDatabase[];
    sqlserverDatabases: outputs.GetNdbClusterEntityCountEngineCountSqlserverDatabase[];
}

export interface GetNdbClusterEntityCountEngineCountMariadbDatabase {
    profiles: outputs.GetNdbClusterEntityCountEngineCountMariadbDatabaseProfile[];
    timeMachines: number;
}

export interface GetNdbClusterEntityCountEngineCountMariadbDatabaseProfile {
    compute: number;
    databaseParameter: number;
    network: number;
    software: number;
    storage: number;
    windowsDomain: number;
}

export interface GetNdbClusterEntityCountEngineCountMongodbDatabase {
    profiles: outputs.GetNdbClusterEntityCountEngineCountMongodbDatabaseProfile[];
    timeMachines: number;
}

export interface GetNdbClusterEntityCountEngineCountMongodbDatabaseProfile {
    compute: number;
    databaseParameter: number;
    network: number;
    software: number;
    storage: number;
    windowsDomain: number;
}

export interface GetNdbClusterEntityCountEngineCountMysqlDatabase {
    profiles: outputs.GetNdbClusterEntityCountEngineCountMysqlDatabaseProfile[];
    timeMachines: number;
}

export interface GetNdbClusterEntityCountEngineCountMysqlDatabaseProfile {
    compute: number;
    databaseParameter: number;
    network: number;
    software: number;
    storage: number;
    windowsDomain: number;
}

export interface GetNdbClusterEntityCountEngineCountOracleDatabase {
    profiles: outputs.GetNdbClusterEntityCountEngineCountOracleDatabaseProfile[];
    timeMachines: number;
}

export interface GetNdbClusterEntityCountEngineCountOracleDatabaseProfile {
    compute: number;
    databaseParameter: number;
    network: number;
    software: number;
    storage: number;
    windowsDomain: number;
}

export interface GetNdbClusterEntityCountEngineCountPostgresDatabase {
    profiles: outputs.GetNdbClusterEntityCountEngineCountPostgresDatabaseProfile[];
    timeMachines: number;
}

export interface GetNdbClusterEntityCountEngineCountPostgresDatabaseProfile {
    compute: number;
    databaseParameter: number;
    network: number;
    software: number;
    storage: number;
    windowsDomain: number;
}

export interface GetNdbClusterEntityCountEngineCountSaphanaDatabase {
    profiles: outputs.GetNdbClusterEntityCountEngineCountSaphanaDatabaseProfile[];
    timeMachines: number;
}

export interface GetNdbClusterEntityCountEngineCountSaphanaDatabaseProfile {
    compute: number;
    databaseParameter: number;
    network: number;
    software: number;
    storage: number;
    windowsDomain: number;
}

export interface GetNdbClusterEntityCountEngineCountSqlserverDatabase {
    profiles: outputs.GetNdbClusterEntityCountEngineCountSqlserverDatabaseProfile[];
    timeMachines: number;
}

export interface GetNdbClusterEntityCountEngineCountSqlserverDatabaseProfile {
    compute: number;
    databaseParameter: number;
    network: number;
    software: number;
    storage: number;
    windowsDomain: number;
}

export interface GetNdbClusterProperty {
    description: string;
    name: string;
    refId: string;
    secure: boolean;
    value: string;
}

export interface GetNdbClusterResourceConfig {
    memoryThresholdPercentage: number;
    storageThresholdPercentage: number;
}

export interface GetNdbClustersCluster {
    cloudInfo: string;
    cloudType: string;
    dateCreated: string;
    dateModified: string;
    description: string;
    entityCounts: outputs.GetNdbClustersClusterEntityCount[];
    fqdns: string;
    healthy: boolean;
    hypervisorType: string;
    hypervisorVersion: string;
    id: string;
    ipAddresses: string[];
    managementServerInfo: string;
    name: string;
    nxClusterUuid: string;
    ownerId: string;
    password: string;
    properties: outputs.GetNdbClustersClusterProperty[];
    referenceCount: number;
    resourceConfigs: outputs.GetNdbClustersClusterResourceConfig[];
    status: string;
    uniqueName: string;
    username: string;
    version: string;
}

export interface GetNdbClustersClusterEntityCount {
    dbServers: number;
    engineCounts: outputs.GetNdbClustersClusterEntityCountEngineCount[];
}

export interface GetNdbClustersClusterEntityCountEngineCount {
    mariadbDatabases: outputs.GetNdbClustersClusterEntityCountEngineCountMariadbDatabase[];
    mongodbDatabases: outputs.GetNdbClustersClusterEntityCountEngineCountMongodbDatabase[];
    mysqlDatabases: outputs.GetNdbClustersClusterEntityCountEngineCountMysqlDatabase[];
    oracleDatabases: outputs.GetNdbClustersClusterEntityCountEngineCountOracleDatabase[];
    postgresDatabases: outputs.GetNdbClustersClusterEntityCountEngineCountPostgresDatabase[];
    saphanaDatabases: outputs.GetNdbClustersClusterEntityCountEngineCountSaphanaDatabase[];
    sqlserverDatabases: outputs.GetNdbClustersClusterEntityCountEngineCountSqlserverDatabase[];
}

export interface GetNdbClustersClusterEntityCountEngineCountMariadbDatabase {
    profiles: outputs.GetNdbClustersClusterEntityCountEngineCountMariadbDatabaseProfile[];
    timeMachines: number;
}

export interface GetNdbClustersClusterEntityCountEngineCountMariadbDatabaseProfile {
    compute: number;
    databaseParameter: number;
    network: number;
    software: number;
    storage: number;
    windowsDomain: number;
}

export interface GetNdbClustersClusterEntityCountEngineCountMongodbDatabase {
    profiles: outputs.GetNdbClustersClusterEntityCountEngineCountMongodbDatabaseProfile[];
    timeMachines: number;
}

export interface GetNdbClustersClusterEntityCountEngineCountMongodbDatabaseProfile {
    compute: number;
    databaseParameter: number;
    network: number;
    software: number;
    storage: number;
    windowsDomain: number;
}

export interface GetNdbClustersClusterEntityCountEngineCountMysqlDatabase {
    profiles: outputs.GetNdbClustersClusterEntityCountEngineCountMysqlDatabaseProfile[];
    timeMachines: number;
}

export interface GetNdbClustersClusterEntityCountEngineCountMysqlDatabaseProfile {
    compute: number;
    databaseParameter: number;
    network: number;
    software: number;
    storage: number;
    windowsDomain: number;
}

export interface GetNdbClustersClusterEntityCountEngineCountOracleDatabase {
    profiles: outputs.GetNdbClustersClusterEntityCountEngineCountOracleDatabaseProfile[];
    timeMachines: number;
}

export interface GetNdbClustersClusterEntityCountEngineCountOracleDatabaseProfile {
    compute: number;
    databaseParameter: number;
    network: number;
    software: number;
    storage: number;
    windowsDomain: number;
}

export interface GetNdbClustersClusterEntityCountEngineCountPostgresDatabase {
    profiles: outputs.GetNdbClustersClusterEntityCountEngineCountPostgresDatabaseProfile[];
    timeMachines: number;
}

export interface GetNdbClustersClusterEntityCountEngineCountPostgresDatabaseProfile {
    compute: number;
    databaseParameter: number;
    network: number;
    software: number;
    storage: number;
    windowsDomain: number;
}

export interface GetNdbClustersClusterEntityCountEngineCountSaphanaDatabase {
    profiles: outputs.GetNdbClustersClusterEntityCountEngineCountSaphanaDatabaseProfile[];
    timeMachines: number;
}

export interface GetNdbClustersClusterEntityCountEngineCountSaphanaDatabaseProfile {
    compute: number;
    databaseParameter: number;
    network: number;
    software: number;
    storage: number;
    windowsDomain: number;
}

export interface GetNdbClustersClusterEntityCountEngineCountSqlserverDatabase {
    profiles: outputs.GetNdbClustersClusterEntityCountEngineCountSqlserverDatabaseProfile[];
    timeMachines: number;
}

export interface GetNdbClustersClusterEntityCountEngineCountSqlserverDatabaseProfile {
    compute: number;
    databaseParameter: number;
    network: number;
    software: number;
    storage: number;
    windowsDomain: number;
}

export interface GetNdbClustersClusterProperty {
    description: string;
    name: string;
    refId: string;
    secure: boolean;
    value: string;
}

export interface GetNdbClustersClusterResourceConfig {
    memoryThresholdPercentage: number;
    storageThresholdPercentage: number;
}

export interface GetNdbDatabaseDatabaseNode {
    accessLevel: {[key: string]: string};
    databaseId: string;
    databaseStatus: string;
    dateCreated: string;
    dateModified: string;
    dbserver: {[key: string]: string};
    dbserverId: string;
    description: string;
    id: string;
    infos: outputs.GetNdbDatabaseDatabaseNodeInfo[];
    name: string;
    primary: boolean;
    properties: outputs.GetNdbDatabaseDatabaseNodeProperty[];
    protectionDomainId: string;
    protectionDomains: outputs.GetNdbDatabaseDatabaseNodeProtectionDomain[];
    softwareInstallationId: string;
    status: string;
    tags: outputs.GetNdbDatabaseDatabaseNodeTag[];
}

export interface GetNdbDatabaseDatabaseNodeInfo {
    info: {[key: string]: string};
    secureInfo: {[key: string]: string};
}

export interface GetNdbDatabaseDatabaseNodeProperty {
    description: string;
    name: string;
    refId: string;
    secure: boolean;
    value: string;
}

export interface GetNdbDatabaseDatabaseNodeProtectionDomain {
    assocEntities: string[];
    cloudId: string;
    dateCreated: string;
    dateModified: string;
    description: string;
    eraCreated: boolean;
    id: string;
    name: string;
    ownerId: string;
    primaryHost: string;
    properties: outputs.GetNdbDatabaseDatabaseNodeProtectionDomainProperty[];
    status: string;
    type: string;
}

export interface GetNdbDatabaseDatabaseNodeProtectionDomainProperty {
    description: string;
    name: string;
    refId: string;
    secure: boolean;
    value: string;
}

export interface GetNdbDatabaseDatabaseNodeTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface GetNdbDatabaseInfo {
    bpgConfigs: outputs.GetNdbDatabaseInfoBpgConfig[];
    secureInfo: {[key: string]: string};
}

export interface GetNdbDatabaseInfoBpgConfig {
    bpgDbParams: outputs.GetNdbDatabaseInfoBpgConfigBpgDbParam[];
    storages: outputs.GetNdbDatabaseInfoBpgConfigStorage[];
    vmProperties: outputs.GetNdbDatabaseInfoBpgConfigVmProperty[];
}

export interface GetNdbDatabaseInfoBpgConfigBpgDbParam {
    effectiveCacheSize: string;
    maintenanceWorkMem: string;
    maxParallelWorkersPerGather: string;
    maxWorkerProcesses: string;
    sharedBuffers: string;
    workMem: string;
}

export interface GetNdbDatabaseInfoBpgConfigStorage {
    archiveStorages: outputs.GetNdbDatabaseInfoBpgConfigStorageArchiveStorage[];
    dataDisks: outputs.GetNdbDatabaseInfoBpgConfigStorageDataDisk[];
    logDisks: outputs.GetNdbDatabaseInfoBpgConfigStorageLogDisk[];
}

export interface GetNdbDatabaseInfoBpgConfigStorageArchiveStorage {
    size: number;
}

export interface GetNdbDatabaseInfoBpgConfigStorageDataDisk {
    count: number;
}

export interface GetNdbDatabaseInfoBpgConfigStorageLogDisk {
    count: number;
    size: number;
}

export interface GetNdbDatabaseInfoBpgConfigVmProperty {
    dirtyBackgroundRatio: number;
    dirtyExpireCentisecs: number;
    dirtyRatio: number;
    dirtyWritebackCentisecs: number;
    nrHugepages: number;
    overcommitMemory: number;
    swappiness: number;
}

export interface GetNdbDatabaseLcmConfig {
    expiryDetails: outputs.GetNdbDatabaseLcmConfigExpiryDetail[];
    postDeleteCommands: outputs.GetNdbDatabaseLcmConfigPostDeleteCommand[];
    preDeleteCommands: outputs.GetNdbDatabaseLcmConfigPreDeleteCommand[];
    refreshDetails: outputs.GetNdbDatabaseLcmConfigRefreshDetail[];
}

export interface GetNdbDatabaseLcmConfigExpiryDetail {
    deleteDatabase: boolean;
    deleteTimeMachine: boolean;
    deleteVm: boolean;
    effectiveTimestamp: string;
    expireInDays: number;
    expiryDateTimezone: string;
    expiryTimestamp: string;
    remindBeforeInDays: number;
    userCreated: boolean;
}

export interface GetNdbDatabaseLcmConfigPostDeleteCommand {
    command: string;
}

export interface GetNdbDatabaseLcmConfigPreDeleteCommand {
    command: string;
}

export interface GetNdbDatabaseLcmConfigRefreshDetail {
    lastRefreshDate: string;
    nextRefreshDate: string;
    refreshDateTimezone: string;
    refreshInDays: number;
    refreshInHours: number;
    refreshInMonths: number;
    refreshTime: string;
}

export interface GetNdbDatabaseLinkedDatabase {
    databaseName: string;
    databaseStatus: string;
    dateCreated: string;
    dateModified: string;
    description: string;
    id: string;
    infos: outputs.GetNdbDatabaseLinkedDatabaseInfo[];
    metric: {[key: string]: string};
    name: string;
    parentDatabaseId: string;
    parentLinkedDatabaseId: string;
    snapshotId: string;
    status: string;
    timezone: string;
}

export interface GetNdbDatabaseLinkedDatabaseInfo {
    info: {[key: string]: string};
    secureInfo: {[key: string]: string};
}

export interface GetNdbDatabaseProperty {
    description: string;
    name: string;
    refId: string;
    secure: boolean;
    value: string;
}

export interface GetNdbDatabaseTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface GetNdbDatabaseTimeMachine {
    accessLevel: string;
    clone: boolean;
    clones: string;
    clustered: boolean;
    database: string;
    databaseId: string;
    dateCreated: string;
    dateModified: string;
    description: string;
    eaStatus: string;
    id: string;
    metric: string;
    name: string;
    properties: outputs.GetNdbDatabaseTimeMachineProperty[];
    scheduleId: string;
    schedules: outputs.GetNdbDatabaseTimeMachineSchedule[];
    scope: string;
    slaId: string;
    slaUpdateInProgress: boolean;
    slaUpdateMetadata: string;
    slas: outputs.GetNdbDatabaseTimeMachineSla[];
    sourceNxClusters: string[];
    status: string;
    tags: outputs.GetNdbDatabaseTimeMachineTag[];
    type: string;
}

export interface GetNdbDatabaseTimeMachineProperty {
    description: string;
    name: string;
    refId: string;
    secure: boolean;
    value: string;
}

export interface GetNdbDatabaseTimeMachineSchedule {
    continuousSchedules: outputs.GetNdbDatabaseTimeMachineScheduleContinuousSchedule[];
    dailySchedules: outputs.GetNdbDatabaseTimeMachineScheduleDailySchedule[];
    dateCreated: string;
    dateModified: string;
    description: string;
    globalPolicy: boolean;
    id: string;
    monthlySchedules: outputs.GetNdbDatabaseTimeMachineScheduleMonthlySchedule[];
    name: string;
    ownerId: string;
    quartelySchedules: outputs.GetNdbDatabaseTimeMachineScheduleQuartelySchedule[];
    referenceCount: number;
    snapshotTimeOfDays: outputs.GetNdbDatabaseTimeMachineScheduleSnapshotTimeOfDay[];
    startTime: string;
    systemPolicy: boolean;
    timeZone: string;
    uniqueName: string;
    weeklySchedules: outputs.GetNdbDatabaseTimeMachineScheduleWeeklySchedule[];
    yearlySchedules: outputs.GetNdbDatabaseTimeMachineScheduleYearlySchedule[];
}

export interface GetNdbDatabaseTimeMachineScheduleContinuousSchedule {
    enabled: boolean;
    logBackupInterval: number;
    snapshotsPerDay: number;
}

export interface GetNdbDatabaseTimeMachineScheduleDailySchedule {
    enabled: boolean;
}

export interface GetNdbDatabaseTimeMachineScheduleMonthlySchedule {
    dayOfMonth: number;
    enabled: boolean;
}

export interface GetNdbDatabaseTimeMachineScheduleQuartelySchedule {
    dayOfMonth: number;
    enabled: boolean;
    startMonth: string;
    startMonthValue: string;
}

export interface GetNdbDatabaseTimeMachineScheduleSnapshotTimeOfDay {
    extra: boolean;
    hours: number;
    minutes: number;
    seconds: number;
}

export interface GetNdbDatabaseTimeMachineScheduleWeeklySchedule {
    dayOfWeek: string;
    dayOfWeekValue: string;
    enabled: boolean;
}

export interface GetNdbDatabaseTimeMachineScheduleYearlySchedule {
    dayOfMonth: number;
    enabled: boolean;
    month: string;
    monthValue: string;
}

export interface GetNdbDatabaseTimeMachineSla {
    continuousRetention: number;
    currentActiveFrequency: string;
    dailyRetention: number;
    dateCreated: string;
    dateModified: string;
    description: string;
    id: string;
    monthlyRetention: number;
    name: string;
    ownerId: string;
    pitrEnabled: boolean;
    quarterlyRetention: number;
    referenceCount: number;
    systemSla: boolean;
    uniqueName: string;
    weeklyRetention: number;
    yearlyRetention: number;
}

export interface GetNdbDatabaseTimeMachineTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface GetNdbDatabasesDatabaseInstance {
    clone: boolean;
    clustered: boolean;
    databaseClusterType: string;
    databaseName: string;
    databaseNodes: outputs.GetNdbDatabasesDatabaseInstanceDatabaseNode[];
    databases: {[key: string]: string};
    dateCreated: string;
    dateModified: string;
    dbserverLogicalCluster: {[key: string]: string};
    dbserverLogicalClusterId: string;
    description: string;
    id: string;
    infos: outputs.GetNdbDatabasesDatabaseInstanceInfo[];
    lcmConfigs: outputs.GetNdbDatabasesDatabaseInstanceLcmConfig[];
    linkedDatabases: outputs.GetNdbDatabasesDatabaseInstanceLinkedDatabase[];
    metadatas: outputs.GetNdbDatabasesDatabaseInstanceMetadata[];
    metric: {[key: string]: string};
    name: string;
    parentDatabaseId: string;
    properties: outputs.GetNdbDatabasesDatabaseInstanceProperty[];
    status: string;
    tags: outputs.GetNdbDatabasesDatabaseInstanceTag[];
    timeMachineId: string;
    timeMachines: outputs.GetNdbDatabasesDatabaseInstanceTimeMachine[];
    timeZone: string;
    type: string;
}

export interface GetNdbDatabasesDatabaseInstanceDatabaseNode {
    accessLevel: {[key: string]: string};
    databaseId: string;
    databaseStatus: string;
    dateCreated: string;
    dateModified: string;
    dbserver: {[key: string]: string};
    dbserverId: string;
    description: string;
    id: string;
    infos: outputs.GetNdbDatabasesDatabaseInstanceDatabaseNodeInfo[];
    name: string;
    primary: boolean;
    properties: outputs.GetNdbDatabasesDatabaseInstanceDatabaseNodeProperty[];
    protectionDomainId: string;
    protectionDomains: outputs.GetNdbDatabasesDatabaseInstanceDatabaseNodeProtectionDomain[];
    softwareInstallationId: string;
    status: string;
    tags: outputs.GetNdbDatabasesDatabaseInstanceDatabaseNodeTag[];
}

export interface GetNdbDatabasesDatabaseInstanceDatabaseNodeInfo {
    info: {[key: string]: string};
    secureInfo: {[key: string]: string};
}

export interface GetNdbDatabasesDatabaseInstanceDatabaseNodeProperty {
    description: string;
    name: string;
    refId: string;
    secure: boolean;
    value: string;
}

export interface GetNdbDatabasesDatabaseInstanceDatabaseNodeProtectionDomain {
    assocEntities: string[];
    cloudId: string;
    dateCreated: string;
    dateModified: string;
    description: string;
    eraCreated: boolean;
    id: string;
    name: string;
    ownerId: string;
    primaryHost: string;
    properties: outputs.GetNdbDatabasesDatabaseInstanceDatabaseNodeProtectionDomainProperty[];
    status: string;
    type: string;
}

export interface GetNdbDatabasesDatabaseInstanceDatabaseNodeProtectionDomainProperty {
    description: string;
    name: string;
    refId: string;
    secure: boolean;
    value: string;
}

export interface GetNdbDatabasesDatabaseInstanceDatabaseNodeTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface GetNdbDatabasesDatabaseInstanceInfo {
    bpgConfigs: outputs.GetNdbDatabasesDatabaseInstanceInfoBpgConfig[];
    secureInfo: {[key: string]: string};
}

export interface GetNdbDatabasesDatabaseInstanceInfoBpgConfig {
    bpgDbParams: outputs.GetNdbDatabasesDatabaseInstanceInfoBpgConfigBpgDbParam[];
    storages: outputs.GetNdbDatabasesDatabaseInstanceInfoBpgConfigStorage[];
    vmProperties: outputs.GetNdbDatabasesDatabaseInstanceInfoBpgConfigVmProperty[];
}

export interface GetNdbDatabasesDatabaseInstanceInfoBpgConfigBpgDbParam {
    effectiveCacheSize: string;
    maintenanceWorkMem: string;
    maxParallelWorkersPerGather: string;
    maxWorkerProcesses: string;
    sharedBuffers: string;
    workMem: string;
}

export interface GetNdbDatabasesDatabaseInstanceInfoBpgConfigStorage {
    archiveStorages: outputs.GetNdbDatabasesDatabaseInstanceInfoBpgConfigStorageArchiveStorage[];
    dataDisks: outputs.GetNdbDatabasesDatabaseInstanceInfoBpgConfigStorageDataDisk[];
    logDisks: outputs.GetNdbDatabasesDatabaseInstanceInfoBpgConfigStorageLogDisk[];
}

export interface GetNdbDatabasesDatabaseInstanceInfoBpgConfigStorageArchiveStorage {
    size: number;
}

export interface GetNdbDatabasesDatabaseInstanceInfoBpgConfigStorageDataDisk {
    count: number;
}

export interface GetNdbDatabasesDatabaseInstanceInfoBpgConfigStorageLogDisk {
    count: number;
    size: number;
}

export interface GetNdbDatabasesDatabaseInstanceInfoBpgConfigVmProperty {
    dirtyBackgroundRatio: number;
    dirtyExpireCentisecs: number;
    dirtyRatio: number;
    dirtyWritebackCentisecs: number;
    nrHugepages: number;
    overcommitMemory: number;
    swappiness: number;
}

export interface GetNdbDatabasesDatabaseInstanceLcmConfig {
    expiryDetails: outputs.GetNdbDatabasesDatabaseInstanceLcmConfigExpiryDetail[];
    postDeleteCommands: outputs.GetNdbDatabasesDatabaseInstanceLcmConfigPostDeleteCommand[];
    preDeleteCommands: outputs.GetNdbDatabasesDatabaseInstanceLcmConfigPreDeleteCommand[];
    refreshDetails: outputs.GetNdbDatabasesDatabaseInstanceLcmConfigRefreshDetail[];
}

export interface GetNdbDatabasesDatabaseInstanceLcmConfigExpiryDetail {
    deleteDatabase: boolean;
    deleteTimeMachine: boolean;
    deleteVm: boolean;
    effectiveTimestamp: string;
    expireInDays: number;
    expiryDateTimezone: string;
    expiryTimestamp: string;
    remindBeforeInDays: number;
    userCreated: boolean;
}

export interface GetNdbDatabasesDatabaseInstanceLcmConfigPostDeleteCommand {
    command: string;
}

export interface GetNdbDatabasesDatabaseInstanceLcmConfigPreDeleteCommand {
    command: string;
}

export interface GetNdbDatabasesDatabaseInstanceLcmConfigRefreshDetail {
    lastRefreshDate: string;
    nextRefreshDate: string;
    refreshDateTimezone: string;
    refreshInDays: number;
    refreshInHours: number;
    refreshInMonths: number;
    refreshTime: string;
}

export interface GetNdbDatabasesDatabaseInstanceLinkedDatabase {
    databaseName: string;
    databaseStatus: string;
    dateCreated: string;
    dateModified: string;
    description: string;
    id: string;
    infos: outputs.GetNdbDatabasesDatabaseInstanceLinkedDatabaseInfo[];
    metric: {[key: string]: string};
    name: string;
    parentDatabaseId: string;
    parentLinkedDatabaseId: string;
    snapshotId: string;
    status: string;
    timezone: string;
}

export interface GetNdbDatabasesDatabaseInstanceLinkedDatabaseInfo {
    info: {[key: string]: string};
    secureInfo: {[key: string]: string};
}

export interface GetNdbDatabasesDatabaseInstanceMetadata {
    baseSizeComputed: boolean;
    capabilityResetTime: string;
    createdDbservers: string[];
    deregisterInfos: outputs.GetNdbDatabasesDatabaseInstanceMetadataDeregisterInfo[];
    deregisteredWithDeleteTimeMachine: boolean;
    info: {[key: string]: string};
    lastLogCatchupForRestoreOperationId: string;
    lastRefreshTimestamp: string;
    lastRequestedRefreshTimestamp: string;
    logCatchupForRestoreDispatched: boolean;
    originalDatabaseName: string;
    pitrBased: boolean;
    provisionOperationId: string;
    refreshBlockerInfo: string;
    registeredDbservers: string[];
    secureInfo: {[key: string]: string};
    sourceSnapshotId: string;
    stateBeforeRefresh: string;
    stateBeforeRestore: string;
    stateBeforeScaling: string;
    tmActivateOperationId: string;
}

export interface GetNdbDatabasesDatabaseInstanceMetadataDeregisterInfo {
    message: string;
    operations: string[];
}

export interface GetNdbDatabasesDatabaseInstanceProperty {
    description: string;
    name: string;
    refId: string;
    secure: boolean;
    value: string;
}

export interface GetNdbDatabasesDatabaseInstanceTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface GetNdbDatabasesDatabaseInstanceTimeMachine {
    accessLevel: string;
    clone: boolean;
    clones: string;
    clustered: boolean;
    database: string;
    databaseId: string;
    dateCreated: string;
    dateModified: string;
    description: string;
    eaStatus: string;
    id: string;
    metric: string;
    name: string;
    properties: outputs.GetNdbDatabasesDatabaseInstanceTimeMachineProperty[];
    scheduleId: string;
    schedules: outputs.GetNdbDatabasesDatabaseInstanceTimeMachineSchedule[];
    scope: string;
    slaId: string;
    slaUpdateInProgress: boolean;
    slaUpdateMetadata: string;
    slas: outputs.GetNdbDatabasesDatabaseInstanceTimeMachineSla[];
    sourceNxClusters: string[];
    status: string;
    tags: outputs.GetNdbDatabasesDatabaseInstanceTimeMachineTag[];
    type: string;
}

export interface GetNdbDatabasesDatabaseInstanceTimeMachineProperty {
    description: string;
    name: string;
    refId: string;
    secure: boolean;
    value: string;
}

export interface GetNdbDatabasesDatabaseInstanceTimeMachineSchedule {
    continuousSchedules: outputs.GetNdbDatabasesDatabaseInstanceTimeMachineScheduleContinuousSchedule[];
    dailySchedules: outputs.GetNdbDatabasesDatabaseInstanceTimeMachineScheduleDailySchedule[];
    dateCreated: string;
    dateModified: string;
    description: string;
    globalPolicy: boolean;
    id: string;
    monthlySchedules: outputs.GetNdbDatabasesDatabaseInstanceTimeMachineScheduleMonthlySchedule[];
    name: string;
    ownerId: string;
    quartelySchedules: outputs.GetNdbDatabasesDatabaseInstanceTimeMachineScheduleQuartelySchedule[];
    referenceCount: number;
    snapshotTimeOfDays: outputs.GetNdbDatabasesDatabaseInstanceTimeMachineScheduleSnapshotTimeOfDay[];
    startTime: string;
    systemPolicy: boolean;
    timeZone: string;
    uniqueName: string;
    weeklySchedules: outputs.GetNdbDatabasesDatabaseInstanceTimeMachineScheduleWeeklySchedule[];
    yearlySchedules: outputs.GetNdbDatabasesDatabaseInstanceTimeMachineScheduleYearlySchedule[];
}

export interface GetNdbDatabasesDatabaseInstanceTimeMachineScheduleContinuousSchedule {
    enabled: boolean;
    logBackupInterval: number;
    snapshotsPerDay: number;
}

export interface GetNdbDatabasesDatabaseInstanceTimeMachineScheduleDailySchedule {
    enabled: boolean;
}

export interface GetNdbDatabasesDatabaseInstanceTimeMachineScheduleMonthlySchedule {
    dayOfMonth: number;
    enabled: boolean;
}

export interface GetNdbDatabasesDatabaseInstanceTimeMachineScheduleQuartelySchedule {
    dayOfMonth: number;
    enabled: boolean;
    startMonth: string;
    startMonthValue: string;
}

export interface GetNdbDatabasesDatabaseInstanceTimeMachineScheduleSnapshotTimeOfDay {
    extra: boolean;
    hours: number;
    minutes: number;
    seconds: number;
}

export interface GetNdbDatabasesDatabaseInstanceTimeMachineScheduleWeeklySchedule {
    dayOfWeek: string;
    dayOfWeekValue: string;
    enabled: boolean;
}

export interface GetNdbDatabasesDatabaseInstanceTimeMachineScheduleYearlySchedule {
    dayOfMonth: number;
    enabled: boolean;
    month: string;
    monthValue: string;
}

export interface GetNdbDatabasesDatabaseInstanceTimeMachineSla {
    continuousRetention: number;
    currentActiveFrequency: string;
    dailyRetention: number;
    dateCreated: string;
    dateModified: string;
    description: string;
    id: string;
    monthlyRetention: number;
    name: string;
    ownerId: string;
    pitrEnabled: boolean;
    quarterlyRetention: number;
    referenceCount: number;
    systemSla: boolean;
    uniqueName: string;
    weeklyRetention: number;
    yearlyRetention: number;
}

export interface GetNdbDatabasesDatabaseInstanceTimeMachineTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface GetNdbDbserverProperty {
    name: string;
    value: string;
}

export interface GetNdbDbserverTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface GetNdbDbserverVmInfo {
    deregisterInfos: outputs.GetNdbDbserverVmInfoDeregisterInfo[];
    distribution: {[key: string]: string};
    infos: outputs.GetNdbDbserverVmInfoInfo[];
    networkInfos: outputs.GetNdbDbserverVmInfoNetworkInfo[];
    osType: string;
    osVersion: string;
    secureInfo: {[key: string]: string};
}

export interface GetNdbDbserverVmInfoDeregisterInfo {
    message: string;
    operations: string[];
}

export interface GetNdbDbserverVmInfoInfo {
    bpgConfigs: outputs.GetNdbDbserverVmInfoInfoBpgConfig[];
    secureInfo: {[key: string]: string};
}

export interface GetNdbDbserverVmInfoInfoBpgConfig {
    bpgDbParams: outputs.GetNdbDbserverVmInfoInfoBpgConfigBpgDbParam[];
    storages: outputs.GetNdbDbserverVmInfoInfoBpgConfigStorage[];
    vmProperties: outputs.GetNdbDbserverVmInfoInfoBpgConfigVmProperty[];
}

export interface GetNdbDbserverVmInfoInfoBpgConfigBpgDbParam {
    effectiveCacheSize: string;
    maintenanceWorkMem: string;
    maxParallelWorkersPerGather: string;
    maxWorkerProcesses: string;
    sharedBuffers: string;
    workMem: string;
}

export interface GetNdbDbserverVmInfoInfoBpgConfigStorage {
    archiveStorages: outputs.GetNdbDbserverVmInfoInfoBpgConfigStorageArchiveStorage[];
    dataDisks: outputs.GetNdbDbserverVmInfoInfoBpgConfigStorageDataDisk[];
    logDisks: outputs.GetNdbDbserverVmInfoInfoBpgConfigStorageLogDisk[];
}

export interface GetNdbDbserverVmInfoInfoBpgConfigStorageArchiveStorage {
    size: number;
}

export interface GetNdbDbserverVmInfoInfoBpgConfigStorageDataDisk {
    count: number;
}

export interface GetNdbDbserverVmInfoInfoBpgConfigStorageLogDisk {
    count: number;
    size: number;
}

export interface GetNdbDbserverVmInfoInfoBpgConfigVmProperty {
    dirtyBackgroundRatio: number;
    dirtyExpireCentisecs: number;
    dirtyRatio: number;
    dirtyWritebackCentisecs: number;
    nrHugepages: number;
    overcommitMemory: number;
    swappiness: number;
}

export interface GetNdbDbserverVmInfoNetworkInfo {
    accessInfos: outputs.GetNdbDbserverVmInfoNetworkInfoAccessInfo[];
    defaultGatewayDevice: boolean;
    deviceName: string;
    eraConfigured: boolean;
    flags: string;
    gateway: string;
    hostname: string;
    ipAddresses: string[];
    macAddress: string;
    mtu: string;
    subnetMask: string;
    vlanName: string;
    vlanType: string;
    vlanUuid: string;
}

export interface GetNdbDbserverVmInfoNetworkInfoAccessInfo {
    accessType: string;
    destinationSubnet: string;
}

export interface GetNdbDbserversDbserver {
    accessKeyId: string;
    accessLevel: string;
    associatedTimeMachineIds: string[];
    clientId: string;
    clustered: boolean;
    databaseType: string;
    dateCreated: string;
    dateModified: string;
    dbserverInvalidEaState: boolean;
    description: string;
    eraDriveId: string;
    eraVersion: string;
    fqdns: string;
    id: string;
    ipAddresses: string[];
    isServerDriven: boolean;
    macAddresses: string[];
    name: string;
    properties: outputs.GetNdbDbserversDbserverProperty[];
    protectionDomainId: string;
    queryCount: number;
    status: string;
    tags: outputs.GetNdbDbserversDbserverTag[];
    type: string;
    validDiagnosticBundleState: boolean;
    vmClusterUuid: string;
    vmInfos: outputs.GetNdbDbserversDbserverVmInfo[];
    vmTimezone: string;
    windowsDbServer: boolean;
    workingDirectory: string;
}

export interface GetNdbDbserversDbserverProperty {
    name: string;
    value: string;
}

export interface GetNdbDbserversDbserverTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface GetNdbDbserversDbserverVmInfo {
    deregisterInfos: outputs.GetNdbDbserversDbserverVmInfoDeregisterInfo[];
    distribution: {[key: string]: string};
    infos: outputs.GetNdbDbserversDbserverVmInfoInfo[];
    networkInfos: outputs.GetNdbDbserversDbserverVmInfoNetworkInfo[];
    osType: string;
    osVersion: string;
    secureInfo: {[key: string]: string};
}

export interface GetNdbDbserversDbserverVmInfoDeregisterInfo {
    message: string;
    operations: string[];
}

export interface GetNdbDbserversDbserverVmInfoInfo {
    bpgConfigs: outputs.GetNdbDbserversDbserverVmInfoInfoBpgConfig[];
    secureInfo: {[key: string]: string};
}

export interface GetNdbDbserversDbserverVmInfoInfoBpgConfig {
    bpgDbParams: outputs.GetNdbDbserversDbserverVmInfoInfoBpgConfigBpgDbParam[];
    storages: outputs.GetNdbDbserversDbserverVmInfoInfoBpgConfigStorage[];
    vmProperties: outputs.GetNdbDbserversDbserverVmInfoInfoBpgConfigVmProperty[];
}

export interface GetNdbDbserversDbserverVmInfoInfoBpgConfigBpgDbParam {
    effectiveCacheSize: string;
    maintenanceWorkMem: string;
    maxParallelWorkersPerGather: string;
    maxWorkerProcesses: string;
    sharedBuffers: string;
    workMem: string;
}

export interface GetNdbDbserversDbserverVmInfoInfoBpgConfigStorage {
    archiveStorages: outputs.GetNdbDbserversDbserverVmInfoInfoBpgConfigStorageArchiveStorage[];
    dataDisks: outputs.GetNdbDbserversDbserverVmInfoInfoBpgConfigStorageDataDisk[];
    logDisks: outputs.GetNdbDbserversDbserverVmInfoInfoBpgConfigStorageLogDisk[];
}

export interface GetNdbDbserversDbserverVmInfoInfoBpgConfigStorageArchiveStorage {
    size: number;
}

export interface GetNdbDbserversDbserverVmInfoInfoBpgConfigStorageDataDisk {
    count: number;
}

export interface GetNdbDbserversDbserverVmInfoInfoBpgConfigStorageLogDisk {
    count: number;
    size: number;
}

export interface GetNdbDbserversDbserverVmInfoInfoBpgConfigVmProperty {
    dirtyBackgroundRatio: number;
    dirtyExpireCentisecs: number;
    dirtyRatio: number;
    dirtyWritebackCentisecs: number;
    nrHugepages: number;
    overcommitMemory: number;
    swappiness: number;
}

export interface GetNdbDbserversDbserverVmInfoNetworkInfo {
    accessInfos: outputs.GetNdbDbserversDbserverVmInfoNetworkInfoAccessInfo[];
    defaultGatewayDevice: boolean;
    deviceName: string;
    eraConfigured: boolean;
    flags: string;
    gateway: string;
    hostname: string;
    ipAddresses: string[];
    macAddress: string;
    mtu: string;
    subnetMask: string;
    vlanName: string;
    vlanType: string;
    vlanUuid: string;
}

export interface GetNdbDbserversDbserverVmInfoNetworkInfoAccessInfo {
    accessType: string;
    destinationSubnet: string;
}

export interface GetNdbMaintenanceWindowEntityTaskAssoc {
    accessLevel: string;
    dateCreated: string;
    dateModified: string;
    description: string;
    entity: string;
    entityId: string;
    entityType: string;
    id: string;
    maintenanceWindowId: string;
    maintenanceWindowOwnerId: string;
    name: string;
    ownerId: string;
    payloads: outputs.GetNdbMaintenanceWindowEntityTaskAssocPayload[];
    properties: outputs.GetNdbMaintenanceWindowEntityTaskAssocProperty[];
    status: string;
    tags: outputs.GetNdbMaintenanceWindowEntityTaskAssocTag[];
    taskType: string;
}

export interface GetNdbMaintenanceWindowEntityTaskAssocPayload {
    prePostCommands: outputs.GetNdbMaintenanceWindowEntityTaskAssocPayloadPrePostCommand[];
}

export interface GetNdbMaintenanceWindowEntityTaskAssocPayloadPrePostCommand {
    postCommand: string;
    preCommand: string;
}

export interface GetNdbMaintenanceWindowEntityTaskAssocProperty {
    name: string;
    value: string;
}

export interface GetNdbMaintenanceWindowEntityTaskAssocTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface GetNdbMaintenanceWindowProperty {
    name: string;
    value: string;
}

export interface GetNdbMaintenanceWindowSchedule {
    dayOfWeek: string;
    duration: number;
    hour: number;
    minute: number;
    recurrence: string;
    startTime: string;
    threshold: string;
    timezone: string;
    weekOfMonth: number;
}

export interface GetNdbMaintenanceWindowTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface GetNdbMaintenanceWindowsMaintenanceWindow {
    accessLevel: string;
    dateCreated: string;
    dateModified: string;
    description: string;
    entityTaskAssocs: outputs.GetNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssoc[];
    id: string;
    name: string;
    nextRunTime: string;
    ownerId: string;
    properties: outputs.GetNdbMaintenanceWindowsMaintenanceWindowProperty[];
    schedules: outputs.GetNdbMaintenanceWindowsMaintenanceWindowSchedule[];
    status: string;
    tags: outputs.GetNdbMaintenanceWindowsMaintenanceWindowTag[];
    timezone: string;
}

export interface GetNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssoc {
    accessLevel: string;
    dateCreated: string;
    dateModified: string;
    description: string;
    entity: string;
    entityId: string;
    entityType: string;
    id: string;
    maintenanceWindowId: string;
    maintenanceWindowOwnerId: string;
    name: string;
    ownerId: string;
    payloads: outputs.GetNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocPayload[];
    properties: outputs.GetNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocProperty[];
    status: string;
    tags: outputs.GetNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocTag[];
    taskType: string;
}

export interface GetNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocPayload {
    prePostCommands: outputs.GetNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocPayloadPrePostCommand[];
}

export interface GetNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocPayloadPrePostCommand {
    postCommand: string;
    preCommand: string;
}

export interface GetNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocProperty {
    name: string;
    value: string;
}

export interface GetNdbMaintenanceWindowsMaintenanceWindowEntityTaskAssocTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface GetNdbMaintenanceWindowsMaintenanceWindowProperty {
    name: string;
    value: string;
}

export interface GetNdbMaintenanceWindowsMaintenanceWindowSchedule {
    dayOfWeek: string;
    duration: number;
    hour: number;
    minute: number;
    recurrence: string;
    startTime: string;
    threshold: string;
    timezone: string;
    weekOfMonth: number;
}

export interface GetNdbMaintenanceWindowsMaintenanceWindowTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface GetNdbNetworkAvailableIpsAvailableIp {
    clusterId: string;
    clusterName: string;
    id: string;
    ipAddresses: string[];
    managed: boolean;
    name: string;
    propertyName: string;
    type: string;
}

export interface GetNdbNetworkIpAddress {
    dbserverId: string;
    dbserverName: string;
    ip: string;
    status: string;
}

export interface GetNdbNetworkIpPool {
    addresses: outputs.GetNdbNetworkIpPoolAddress[];
    endIp: string;
    startIp: string;
}

export interface GetNdbNetworkIpPoolAddress {
    ip: string;
    status: string;
}

export interface GetNdbNetworkPropertiesMap {
    vlanGateway: string;
    vlanPrimaryDns: string;
    vlanSecondaryDns: string;
    vlanSubnetMask: string;
}

export interface GetNdbNetworkProperty {
    name: string;
    secure: boolean;
    value: string;
}

export interface GetNdbNetworksNetwork {
    clusterId: string;
    id: string;
    ipAddresses: outputs.GetNdbNetworksNetworkIpAddress[];
    ipPools: outputs.GetNdbNetworksNetworkIpPool[];
    managed: boolean;
    name: string;
    properties: outputs.GetNdbNetworksNetworkProperty[];
    propertiesMaps: outputs.GetNdbNetworksNetworkPropertiesMap[];
    stretchedVlanId: string;
    type: string;
}

export interface GetNdbNetworksNetworkIpAddress {
    dbserverId: string;
    dbserverName: string;
    ip: string;
    status: string;
}

export interface GetNdbNetworksNetworkIpPool {
    addresses: outputs.GetNdbNetworksNetworkIpPoolAddress[];
    endIp: string;
    startIp: string;
}

export interface GetNdbNetworksNetworkIpPoolAddress {
    ip: string;
    status: string;
}

export interface GetNdbNetworksNetworkPropertiesMap {
    vlanGateway: string;
    vlanPrimaryDns: string;
    vlanSecondaryDns: string;
    vlanSubnetMask: string;
}

export interface GetNdbNetworksNetworkProperty {
    name: string;
    secure: boolean;
    value: string;
}

export interface GetNdbProfileClusterAvailability {
    dateCreated: string;
    dateModified: string;
    nxClusterId: string;
    ownerId: string;
    profileId: string;
    status: string;
}

export interface GetNdbProfileVersion {
    dbVersion: string;
    deprecated: boolean;
    description: string;
    engineType: string;
    id: string;
    name: string;
    owner: string;
    profileId: string;
    properties: outputs.GetNdbProfileVersionProperty[];
    propertiesMap: {[key: string]: string};
    published: boolean;
    status: string;
    systemProfile: boolean;
    topology: string;
    type: string;
    version: string;
    versionClusterAssociations: outputs.GetNdbProfileVersionVersionClusterAssociation[];
}

export interface GetNdbProfileVersionProperty {
    name: string;
    secure: boolean;
    value: string;
}

export interface GetNdbProfileVersionVersionClusterAssociation {
    dateCreated: string;
    dateModified: string;
    nxClusterId: string;
    optimizedForProvisioning: boolean;
    ownerId: string;
    profileVersionId: string;
    properties: outputs.GetNdbProfileVersionVersionClusterAssociationProperty[];
    status: string;
}

export interface GetNdbProfileVersionVersionClusterAssociationProperty {
    name: string;
    secure: boolean;
    value: string;
}

export interface GetNdbProfilesProfile {
    assocDatabases: string[];
    assocDbServers: string[];
    clusterAvailabilities: outputs.GetNdbProfilesProfileClusterAvailability[];
    dbVersion: string;
    description: string;
    engineType: string;
    id: string;
    latestVersion: string;
    latestVersionId: string;
    name: string;
    nxClusterId: string;
    owner: string;
    status: string;
    systemProfile: boolean;
    topology: string;
    type: string;
    versions: outputs.GetNdbProfilesProfileVersion[];
}

export interface GetNdbProfilesProfileClusterAvailability {
    dateCreated: string;
    dateModified: string;
    nxClusterId: string;
    ownerId: string;
    profileId: string;
    status: string;
}

export interface GetNdbProfilesProfileVersion {
    dbVersion: string;
    deprecated: boolean;
    description: string;
    engineType: string;
    id: string;
    name: string;
    owner: string;
    profileId: string;
    properties: outputs.GetNdbProfilesProfileVersionProperty[];
    propertiesMap: {[key: string]: string};
    published: boolean;
    status: string;
    systemProfile: boolean;
    topology: string;
    type: string;
    version: string;
    versionClusterAssociations: outputs.GetNdbProfilesProfileVersionVersionClusterAssociation[];
}

export interface GetNdbProfilesProfileVersionProperty {
    name: string;
    secure: boolean;
    value: string;
}

export interface GetNdbProfilesProfileVersionVersionClusterAssociation {
    dateCreated: string;
    dateModified: string;
    nxClusterId: string;
    optimizedForProvisioning: boolean;
    ownerId: string;
    profileVersionId: string;
    properties: outputs.GetNdbProfilesProfileVersionVersionClusterAssociationProperty[];
    status: string;
}

export interface GetNdbProfilesProfileVersionVersionClusterAssociationProperty {
    name: string;
    secure: boolean;
    value: string;
}

export interface GetNdbSlasSla {
    continuousRetention: number;
    currentActiveFrequency: string;
    dailyRetention: number;
    dateCreated: string;
    dateModified: string;
    description: string;
    id: string;
    monthlyRetention: number;
    name: string;
    ownerId: string;
    pitrEnabled: boolean;
    quartelyRetention: number;
    referenceCount: number;
    systemSla: boolean;
    uniqueName: string;
    weeklyRetention: number;
    yearlyRetention: number;
}

export interface GetNdbSnapshotFilter {
    loadReplicatedChildSnapshots?: string;
    timezone?: string;
}

export interface GetNdbSnapshotLcmConfig {
    expiryDetails: outputs.GetNdbSnapshotLcmConfigExpiryDetail[];
    postDeleteCommands: outputs.GetNdbSnapshotLcmConfigPostDeleteCommand[];
    preDeleteCommands: outputs.GetNdbSnapshotLcmConfigPreDeleteCommand[];
    refreshDetails: outputs.GetNdbSnapshotLcmConfigRefreshDetail[];
}

export interface GetNdbSnapshotLcmConfigExpiryDetail {
    deleteDatabase: boolean;
    deleteTimeMachine: boolean;
    deleteVm: boolean;
    effectiveTimestamp: string;
    expireInDays: number;
    expiryDateTimezone: string;
    expiryTimestamp: string;
    remindBeforeInDays: number;
    userCreated: boolean;
}

export interface GetNdbSnapshotLcmConfigPostDeleteCommand {
    command: string;
}

export interface GetNdbSnapshotLcmConfigPreDeleteCommand {
    command: string;
}

export interface GetNdbSnapshotLcmConfigRefreshDetail {
    lastRefreshDate: string;
    nextRefreshDate: string;
    refreshDateTimezone: string;
    refreshInDays: number;
    refreshInHours: number;
    refreshInMonths: number;
    refreshTime: string;
}

export interface GetNdbSnapshotProperty {
    description: string;
    name: string;
    refId: string;
    secure: boolean;
    value: string;
}

export interface GetNdbSnapshotTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface GetNdbSnapshotsFilter {
    timeMachineId?: string;
}

export interface GetNdbSnapshotsSnapshot {
    appInfoVersion: string;
    applicableTypes: string[];
    databaseNodeId: string;
    databaseSnapshot: boolean;
    dateCreated: string;
    dateModified: string;
    dbserverId: string;
    dbserverIp: string;
    dbserverName: string;
    dbserverStorageMetadataVersion: number;
    description: string;
    fromTimestamp: string;
    id: string;
    lcmConfigs: outputs.GetNdbSnapshotsSnapshotLcmConfig[];
    name: string;
    nxClusterId: string;
    parentSnapshot: boolean;
    parentSnapshotId: string;
    processed: boolean;
    properties: outputs.GetNdbSnapshotsSnapshotProperty[];
    protectionDomainId: string;
    replicatedSnapshots: string[];
    santized: boolean;
    santizedFromSnapshotId: string;
    santizedSnapshots: string;
    snapshotFamily: string;
    snapshotSize: number;
    snapshotTimestamp: string;
    snapshotTimestampDate: number;
    snapshotUuid: string;
    softwareDatabaseSnapshot: boolean;
    softwareSnapshot: string;
    softwareSnapshotId: string;
    status: string;
    tags: outputs.GetNdbSnapshotsSnapshotTag[];
    timeMachineId: string;
    timezone: string;
    toTimestamp: string;
    type: string;
}

export interface GetNdbSnapshotsSnapshotLcmConfig {
    expiryDetails: outputs.GetNdbSnapshotsSnapshotLcmConfigExpiryDetail[];
    postDeleteCommands: outputs.GetNdbSnapshotsSnapshotLcmConfigPostDeleteCommand[];
    preDeleteCommands: outputs.GetNdbSnapshotsSnapshotLcmConfigPreDeleteCommand[];
    refreshDetails: outputs.GetNdbSnapshotsSnapshotLcmConfigRefreshDetail[];
}

export interface GetNdbSnapshotsSnapshotLcmConfigExpiryDetail {
    deleteDatabase: boolean;
    deleteTimeMachine: boolean;
    deleteVm: boolean;
    effectiveTimestamp: string;
    expireInDays: number;
    expiryDateTimezone: string;
    expiryTimestamp: string;
    remindBeforeInDays: number;
    userCreated: boolean;
}

export interface GetNdbSnapshotsSnapshotLcmConfigPostDeleteCommand {
    command: string;
}

export interface GetNdbSnapshotsSnapshotLcmConfigPreDeleteCommand {
    command: string;
}

export interface GetNdbSnapshotsSnapshotLcmConfigRefreshDetail {
    lastRefreshDate: string;
    nextRefreshDate: string;
    refreshDateTimezone: string;
    refreshInDays: number;
    refreshInHours: number;
    refreshInMonths: number;
    refreshTime: string;
}

export interface GetNdbSnapshotsSnapshotProperty {
    description: string;
    name: string;
    refId: string;
    secure: boolean;
    value: string;
}

export interface GetNdbSnapshotsSnapshotTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface GetNdbTagsTag {
    dateCreated: string;
    dateModified: string;
    description: string;
    entityType: string;
    id: string;
    name: string;
    owner: string;
    required: boolean;
    status: string;
    values: number;
}

export interface GetNdbTimeMachineProperty {
    description: string;
    name: string;
    refId: string;
    secure: boolean;
    value: string;
}

export interface GetNdbTimeMachineSchedule {
    continuousSchedules: outputs.GetNdbTimeMachineScheduleContinuousSchedule[];
    dailySchedules: outputs.GetNdbTimeMachineScheduleDailySchedule[];
    dateCreated: string;
    dateModified: string;
    description: string;
    globalPolicy: boolean;
    id: string;
    monthlySchedules: outputs.GetNdbTimeMachineScheduleMonthlySchedule[];
    name: string;
    ownerId: string;
    quartelySchedules: outputs.GetNdbTimeMachineScheduleQuartelySchedule[];
    referenceCount: number;
    snapshotTimeOfDays: outputs.GetNdbTimeMachineScheduleSnapshotTimeOfDay[];
    startTime: string;
    systemPolicy: boolean;
    timeZone: string;
    uniqueName: string;
    weeklySchedules: outputs.GetNdbTimeMachineScheduleWeeklySchedule[];
    yearlySchedules: outputs.GetNdbTimeMachineScheduleYearlySchedule[];
}

export interface GetNdbTimeMachineScheduleContinuousSchedule {
    enabled: boolean;
    logBackupInterval: number;
    snapshotsPerDay: number;
}

export interface GetNdbTimeMachineScheduleDailySchedule {
    enabled: boolean;
}

export interface GetNdbTimeMachineScheduleMonthlySchedule {
    dayOfMonth: number;
    enabled: boolean;
}

export interface GetNdbTimeMachineScheduleQuartelySchedule {
    dayOfMonth: number;
    enabled: boolean;
    startMonth: string;
    startMonthValue: string;
}

export interface GetNdbTimeMachineScheduleSnapshotTimeOfDay {
    extra: boolean;
    hours: number;
    minutes: number;
    seconds: number;
}

export interface GetNdbTimeMachineScheduleWeeklySchedule {
    dayOfWeek: string;
    dayOfWeekValue: string;
    enabled: boolean;
}

export interface GetNdbTimeMachineScheduleYearlySchedule {
    dayOfMonth: number;
    enabled: boolean;
    month: string;
    monthValue: string;
}

export interface GetNdbTimeMachineSla {
    continuousRetention: number;
    currentActiveFrequency: string;
    dailyRetention: number;
    dateCreated: string;
    dateModified: string;
    description: string;
    id: string;
    monthlyRetention: number;
    name: string;
    ownerId: string;
    pitrEnabled: boolean;
    quarterlyRetention: number;
    referenceCount: number;
    systemSla: boolean;
    uniqueName: string;
    weeklyRetention: number;
    yearlyRetention: number;
}

export interface GetNdbTimeMachineTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface GetNdbTimeMachinesTimeMachine {
    accessLevel: string;
    clone: boolean;
    clones: string;
    clustered: boolean;
    database: string;
    databaseId: string;
    dateCreated: string;
    dateModified: string;
    description: string;
    eaStatus: string;
    id: string;
    metric: string;
    name: string;
    properties: outputs.GetNdbTimeMachinesTimeMachineProperty[];
    scheduleId: string;
    schedules: outputs.GetNdbTimeMachinesTimeMachineSchedule[];
    scope: string;
    slaId: string;
    slaUpdateInProgress: boolean;
    slaUpdateMetadata: string;
    slas: outputs.GetNdbTimeMachinesTimeMachineSla[];
    sourceNxClusters: string[];
    status: string;
    tags: outputs.GetNdbTimeMachinesTimeMachineTag[];
    type: string;
}

export interface GetNdbTimeMachinesTimeMachineProperty {
    description: string;
    name: string;
    refId: string;
    secure: boolean;
    value: string;
}

export interface GetNdbTimeMachinesTimeMachineSchedule {
    continuousSchedules: outputs.GetNdbTimeMachinesTimeMachineScheduleContinuousSchedule[];
    dailySchedules: outputs.GetNdbTimeMachinesTimeMachineScheduleDailySchedule[];
    dateCreated: string;
    dateModified: string;
    description: string;
    globalPolicy: boolean;
    id: string;
    monthlySchedules: outputs.GetNdbTimeMachinesTimeMachineScheduleMonthlySchedule[];
    name: string;
    ownerId: string;
    quartelySchedules: outputs.GetNdbTimeMachinesTimeMachineScheduleQuartelySchedule[];
    referenceCount: number;
    snapshotTimeOfDays: outputs.GetNdbTimeMachinesTimeMachineScheduleSnapshotTimeOfDay[];
    startTime: string;
    systemPolicy: boolean;
    timeZone: string;
    uniqueName: string;
    weeklySchedules: outputs.GetNdbTimeMachinesTimeMachineScheduleWeeklySchedule[];
    yearlySchedules: outputs.GetNdbTimeMachinesTimeMachineScheduleYearlySchedule[];
}

export interface GetNdbTimeMachinesTimeMachineScheduleContinuousSchedule {
    enabled: boolean;
    logBackupInterval: number;
    snapshotsPerDay: number;
}

export interface GetNdbTimeMachinesTimeMachineScheduleDailySchedule {
    enabled: boolean;
}

export interface GetNdbTimeMachinesTimeMachineScheduleMonthlySchedule {
    dayOfMonth: number;
    enabled: boolean;
}

export interface GetNdbTimeMachinesTimeMachineScheduleQuartelySchedule {
    dayOfMonth: number;
    enabled: boolean;
    startMonth: string;
    startMonthValue: string;
}

export interface GetNdbTimeMachinesTimeMachineScheduleSnapshotTimeOfDay {
    extra: boolean;
    hours: number;
    minutes: number;
    seconds: number;
}

export interface GetNdbTimeMachinesTimeMachineScheduleWeeklySchedule {
    dayOfWeek: string;
    dayOfWeekValue: string;
    enabled: boolean;
}

export interface GetNdbTimeMachinesTimeMachineScheduleYearlySchedule {
    dayOfMonth: number;
    enabled: boolean;
    month: string;
    monthValue: string;
}

export interface GetNdbTimeMachinesTimeMachineSla {
    continuousRetention: number;
    currentActiveFrequency: string;
    dailyRetention: number;
    dateCreated: string;
    dateModified: string;
    description: string;
    id: string;
    monthlyRetention: number;
    name: string;
    ownerId: string;
    pitrEnabled: boolean;
    quarterlyRetention: number;
    referenceCount: number;
    systemSla: boolean;
    uniqueName: string;
    weeklyRetention: number;
    yearlyRetention: number;
}

export interface GetNdbTimeMachinesTimeMachineTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface GetNdbTmsCapabilityCapability {
    continuousRegions: outputs.GetNdbTmsCapabilityCapabilityContinuousRegion[];
    databaseIds: string[];
    databasesContinuousRegion: string;
    from: string;
    mode: string;
    snapshots: outputs.GetNdbTmsCapabilityCapabilitySnapshot[];
    timeUnit: string;
    timeUnitNumber: string;
    to: string;
}

export interface GetNdbTmsCapabilityCapabilityContinuousRegion {
    dbLogs: outputs.GetNdbTmsCapabilityCapabilityContinuousRegionDbLog[];
    fromTime: string;
    message: string;
    partialRanges: boolean;
    processedRanges: outputs.GetNdbTmsCapabilityCapabilityContinuousRegionProcessedRange[];
    snapshotIds: string[];
    snapshots: string;
    subRange: boolean;
    timeRangeAndDatabases: string;
    timezone: string;
    toTime: string;
    unknownTimeRanges: string;
    unprocessedRanges: outputs.GetNdbTmsCapabilityCapabilityContinuousRegionUnprocessedRange[];
}

export interface GetNdbTmsCapabilityCapabilityContinuousRegionDbLog {
    databaseId: string;
    databaseNodeId: string;
    dateCreated: string;
    dateModified: string;
    eraLogDriveId: string;
    fromTime: string;
    id: string;
    infos: outputs.GetNdbTmsCapabilityCapabilityContinuousRegionDbLogInfo[];
    logCopyOperationId: string;
    message: string;
    metadatas: outputs.GetNdbTmsCapabilityCapabilityContinuousRegionDbLogMetadata[];
    name: string;
    ownerId: string;
    size: number;
    status: string;
    toTime: string;
    unprocessed: boolean;
}

export interface GetNdbTmsCapabilityCapabilityContinuousRegionDbLogInfo {
    info: {[key: string]: string};
    secureInfo: {[key: string]: string};
    unknownTimeRange: boolean;
}

export interface GetNdbTmsCapabilityCapabilityContinuousRegionDbLogMetadata {
    createdDirectly: boolean;
    curationRetryCount: number;
    deregisterInfos: outputs.GetNdbTmsCapabilityCapabilityContinuousRegionDbLogMetadataDeregisterInfo[];
    info: {[key: string]: string};
    secureInfo: {[key: string]: string};
    updatedDirectly: boolean;
}

export interface GetNdbTmsCapabilityCapabilityContinuousRegionDbLogMetadataDeregisterInfo {
    message: string;
    operations: string[];
}

export interface GetNdbTmsCapabilityCapabilityContinuousRegionProcessedRange {
    first: string;
    second: string;
}

export interface GetNdbTmsCapabilityCapabilityContinuousRegionUnprocessedRange {
    first: string;
    second: string;
}

export interface GetNdbTmsCapabilityCapabilitySnapshot {
    appInfoVersion: string;
    applicableTypes: string[];
    databaseNodeId: string;
    databaseSnapshot: boolean;
    dateCreated: string;
    dateModified: string;
    dbserverId: string;
    dbserverIp: string;
    dbserverName: string;
    dbserverStorageMetadataVersion: number;
    description: string;
    fromTimestamp: string;
    id: string;
    lcmConfigs: outputs.GetNdbTmsCapabilityCapabilitySnapshotLcmConfig[];
    metadatas: outputs.GetNdbTmsCapabilityCapabilitySnapshotMetadata[];
    name: string;
    nxClusterId: string;
    ownerId: string;
    parentSnapshot: boolean;
    parentSnapshotId: string;
    processed: boolean;
    properties: outputs.GetNdbTmsCapabilityCapabilitySnapshotProperty[];
    protectionDomainId: string;
    replicatedSnapshots: string[];
    santized: boolean;
    santizedFromSnapshotId: string;
    santizedSnapshots: string;
    snapshotFamily: string;
    snapshotSize: number;
    snapshotTimestamp: string;
    snapshotTimestampDate: number;
    snapshotUuid: string;
    softwareDatabaseSnapshot: boolean;
    softwareSnapshot: string;
    softwareSnapshotId: string;
    status: string;
    tags: outputs.GetNdbTmsCapabilityCapabilitySnapshotTag[];
    timeMachineId: string;
    timezone: string;
    toTimestamp: string;
    type: string;
}

export interface GetNdbTmsCapabilityCapabilitySnapshotLcmConfig {
    expiryDetails: outputs.GetNdbTmsCapabilityCapabilitySnapshotLcmConfigExpiryDetail[];
    postDeleteCommands: outputs.GetNdbTmsCapabilityCapabilitySnapshotLcmConfigPostDeleteCommand[];
    preDeleteCommands: outputs.GetNdbTmsCapabilityCapabilitySnapshotLcmConfigPreDeleteCommand[];
    refreshDetails: outputs.GetNdbTmsCapabilityCapabilitySnapshotLcmConfigRefreshDetail[];
}

export interface GetNdbTmsCapabilityCapabilitySnapshotLcmConfigExpiryDetail {
    deleteDatabase: boolean;
    deleteTimeMachine: boolean;
    deleteVm: boolean;
    effectiveTimestamp: string;
    expireInDays: number;
    expiryDateTimezone: string;
    expiryTimestamp: string;
    remindBeforeInDays: number;
    userCreated: boolean;
}

export interface GetNdbTmsCapabilityCapabilitySnapshotLcmConfigPostDeleteCommand {
    command: string;
}

export interface GetNdbTmsCapabilityCapabilitySnapshotLcmConfigPreDeleteCommand {
    command: string;
}

export interface GetNdbTmsCapabilityCapabilitySnapshotLcmConfigRefreshDetail {
    lastRefreshDate: string;
    nextRefreshDate: string;
    refreshDateTimezone: string;
    refreshInDays: number;
    refreshInHours: number;
    refreshInMonths: number;
    refreshTime: string;
}

export interface GetNdbTmsCapabilityCapabilitySnapshotMetadata {
    async: boolean;
    curationRetryCount: number;
    deregisterInfo: {[key: string]: string};
    fromTimestamp: string;
    infos: outputs.GetNdbTmsCapabilityCapabilitySnapshotMetadataInfo[];
    lastReplicationRetyrSourceSnapshotId: string;
    operationsUsingSnapshots: string[];
    replicationRetryCount: number;
    secureInfo: {[key: string]: string};
    standBy: boolean;
    toTimestamp: string;
}

export interface GetNdbTmsCapabilityCapabilitySnapshotMetadataInfo {
    bpgConfigs: outputs.GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfig[];
    secureInfo: {[key: string]: string};
}

export interface GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfig {
    bpgDbParams: outputs.GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigBpgDbParam[];
    storages: outputs.GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigStorage[];
    vmProperties: outputs.GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigVmProperty[];
}

export interface GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigBpgDbParam {
    effectiveCacheSize: string;
    maintenanceWorkMem: string;
    maxParallelWorkersPerGather: string;
    maxWorkerProcesses: string;
    sharedBuffers: string;
    workMem: string;
}

export interface GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigStorage {
    archiveStorages: outputs.GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigStorageArchiveStorage[];
    dataDisks: outputs.GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigStorageDataDisk[];
    logDisks: outputs.GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigStorageLogDisk[];
}

export interface GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigStorageArchiveStorage {
    size: number;
}

export interface GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigStorageDataDisk {
    count: number;
}

export interface GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigStorageLogDisk {
    count: number;
    size: number;
}

export interface GetNdbTmsCapabilityCapabilitySnapshotMetadataInfoBpgConfigVmProperty {
    dirtyBackgroundRatio: number;
    dirtyExpireCentisecs: number;
    dirtyRatio: number;
    dirtyWritebackCentisecs: number;
    nrHugepages: number;
    overcommitMemory: number;
    swappiness: number;
}

export interface GetNdbTmsCapabilityCapabilitySnapshotProperty {
    description: string;
    name: string;
    refId: string;
    secure: boolean;
    value: string;
}

export interface GetNdbTmsCapabilityCapabilitySnapshotTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface GetNdbTmsCapabilityLastContinuousSnapshot {
    appInfoVersion: string;
    applicableTypes: string[];
    databaseNodeId: string;
    databaseSnapshot: boolean;
    dateCreated: string;
    dateModified: string;
    dbserverId: string;
    dbserverIp: string;
    dbserverName: string;
    dbserverStorageMetadataVersion: number;
    description: string;
    fromTimestamp: string;
    id: string;
    lcmConfigs: outputs.GetNdbTmsCapabilityLastContinuousSnapshotLcmConfig[];
    metadatas: outputs.GetNdbTmsCapabilityLastContinuousSnapshotMetadata[];
    name: string;
    nxClusterId: string;
    ownerId: string;
    parentSnapshot: boolean;
    parentSnapshotId: string;
    processed: boolean;
    properties: outputs.GetNdbTmsCapabilityLastContinuousSnapshotProperty[];
    protectionDomainId: string;
    replicatedSnapshots: string[];
    santized: boolean;
    santizedFromSnapshotId: string;
    santizedSnapshots: string;
    snapshotFamily: string;
    snapshotSize: number;
    snapshotTimestamp: string;
    snapshotTimestampDate: number;
    snapshotUuid: string;
    softwareDatabaseSnapshot: boolean;
    softwareSnapshot: string;
    softwareSnapshotId: string;
    status: string;
    tags: outputs.GetNdbTmsCapabilityLastContinuousSnapshotTag[];
    timeMachineId: string;
    timezone: string;
    toTimestamp: string;
    type: string;
}

export interface GetNdbTmsCapabilityLastContinuousSnapshotLcmConfig {
    expiryDetails: outputs.GetNdbTmsCapabilityLastContinuousSnapshotLcmConfigExpiryDetail[];
    postDeleteCommands: outputs.GetNdbTmsCapabilityLastContinuousSnapshotLcmConfigPostDeleteCommand[];
    preDeleteCommands: outputs.GetNdbTmsCapabilityLastContinuousSnapshotLcmConfigPreDeleteCommand[];
    refreshDetails: outputs.GetNdbTmsCapabilityLastContinuousSnapshotLcmConfigRefreshDetail[];
}

export interface GetNdbTmsCapabilityLastContinuousSnapshotLcmConfigExpiryDetail {
    deleteDatabase: boolean;
    deleteTimeMachine: boolean;
    deleteVm: boolean;
    effectiveTimestamp: string;
    expireInDays: number;
    expiryDateTimezone: string;
    expiryTimestamp: string;
    remindBeforeInDays: number;
    userCreated: boolean;
}

export interface GetNdbTmsCapabilityLastContinuousSnapshotLcmConfigPostDeleteCommand {
    command: string;
}

export interface GetNdbTmsCapabilityLastContinuousSnapshotLcmConfigPreDeleteCommand {
    command: string;
}

export interface GetNdbTmsCapabilityLastContinuousSnapshotLcmConfigRefreshDetail {
    lastRefreshDate: string;
    nextRefreshDate: string;
    refreshDateTimezone: string;
    refreshInDays: number;
    refreshInHours: number;
    refreshInMonths: number;
    refreshTime: string;
}

export interface GetNdbTmsCapabilityLastContinuousSnapshotMetadata {
    async: boolean;
    curationRetryCount: number;
    deregisterInfo: {[key: string]: string};
    fromTimestamp: string;
    infos: outputs.GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfo[];
    lastReplicationRetrySourceSnapshotId: string;
    lastReplicationRetryTimestamp: string;
    operationsUsingSnapshots: string[];
    replicationRetryCount: number;
    secureInfo: {[key: string]: string};
    standBy: boolean;
    toTimestamp: string;
}

export interface GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfo {
    bpgConfigs: outputs.GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfig[];
    secureInfo: {[key: string]: string};
}

export interface GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfig {
    bpgDbParams: outputs.GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigBpgDbParam[];
    storages: outputs.GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigStorage[];
    vmProperties: outputs.GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigVmProperty[];
}

export interface GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigBpgDbParam {
    effectiveCacheSize: string;
    maintenanceWorkMem: string;
    maxParallelWorkersPerGather: string;
    maxWorkerProcesses: string;
    sharedBuffers: string;
    workMem: string;
}

export interface GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigStorage {
    archiveStorages: outputs.GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigStorageArchiveStorage[];
    dataDisks: outputs.GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigStorageDataDisk[];
    logDisks: outputs.GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigStorageLogDisk[];
}

export interface GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigStorageArchiveStorage {
    size: number;
}

export interface GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigStorageDataDisk {
    count: number;
}

export interface GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigStorageLogDisk {
    count: number;
    size: number;
}

export interface GetNdbTmsCapabilityLastContinuousSnapshotMetadataInfoBpgConfigVmProperty {
    dirtyBackgroundRatio: number;
    dirtyExpireCentisecs: number;
    dirtyRatio: number;
    dirtyWritebackCentisecs: number;
    nrHugepages: number;
    overcommitMemory: number;
    swappiness: number;
}

export interface GetNdbTmsCapabilityLastContinuousSnapshotProperty {
    description: string;
    name: string;
    refId: string;
    secure: boolean;
    value: string;
}

export interface GetNdbTmsCapabilityLastContinuousSnapshotTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface GetNdbTmsCapabilityLastDbLog {
    databaseId: string;
    databaseNodeId: string;
    dateCreated: string;
    dateModified: string;
    eraLogDriveId: string;
    fromTime: string;
    id: string;
    logCopyOperationId: string;
    message: string;
    metadatas: outputs.GetNdbTmsCapabilityLastDbLogMetadata[];
    name: string;
    ownerId: string;
    size: number;
    status: string;
    toTime: string;
    unprocessed: boolean;
}

export interface GetNdbTmsCapabilityLastDbLogMetadata {
    createdDirectly: boolean;
    curationRetryCount: number;
    deregisterInfos: outputs.GetNdbTmsCapabilityLastDbLogMetadataDeregisterInfo[];
    info: {[key: string]: string};
    secureInfo: {[key: string]: string};
    updatedDirectly: boolean;
}

export interface GetNdbTmsCapabilityLastDbLogMetadataDeregisterInfo {
    message: string;
    operations: string[];
}

export interface GetNetworkSecurityRuleAdRuleInboundAllowList {
    addressGroupInclusionLists: outputs.GetNetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionList[];
    expirationTime: string;
    filterKindLists: string[];
    filterParams: outputs.GetNetworkSecurityRuleAdRuleInboundAllowListFilterParam[];
    filterType: string;
    icmpTypeCodeLists: outputs.GetNetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeList[];
    ipSubnet: string;
    ipSubnetPrefixLength: string;
    networkFunctionChainReference: {[key: string]: string};
    peerSpecificationType: string;
    protocol: string;
    serviceGroupLists: outputs.GetNetworkSecurityRuleAdRuleInboundAllowListServiceGroupList[];
    tcpPortRangeLists: outputs.GetNetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList[];
    udpPortRangeLists: outputs.GetNetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList[];
}

export interface GetNetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetNetworkSecurityRuleAdRuleInboundAllowListFilterParam {
    name: string;
    values: string[];
}

export interface GetNetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeList {
    code: string;
    type: string;
}

export interface GetNetworkSecurityRuleAdRuleInboundAllowListServiceGroupList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetNetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetNetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetNetworkSecurityRuleAdRuleOutboundAllowList {
    addressGroupInclusionLists: outputs.GetNetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionList[];
    expirationTime: string;
    filterKindLists: string[];
    filterParams: outputs.GetNetworkSecurityRuleAdRuleOutboundAllowListFilterParam[];
    filterType: string;
    icmpTypeCodeLists: outputs.GetNetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeList[];
    ipSubnet: string;
    ipSubnetPrefixLength: string;
    networkFunctionChainReference: {[key: string]: string};
    peerSpecificationType: string;
    protocol: string;
    serviceGroupLists: outputs.GetNetworkSecurityRuleAdRuleOutboundAllowListServiceGroupList[];
    tcpPortRangeLists: outputs.GetNetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList[];
    udpPortRangeLists: outputs.GetNetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList[];
}

export interface GetNetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetNetworkSecurityRuleAdRuleOutboundAllowListFilterParam {
    name: string;
    values: string[];
}

export interface GetNetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeList {
    code: string;
    type: string;
}

export interface GetNetworkSecurityRuleAdRuleOutboundAllowListServiceGroupList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetNetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetNetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetNetworkSecurityRuleAdRuleTargetGroupFilterParam {
    name: string;
    values: string[];
}

export interface GetNetworkSecurityRuleAppRuleInboundAllowList {
    addressGroupInclusionLists: outputs.GetNetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionList[];
    expirationTime: string;
    filterKindLists: string[];
    filterParams: outputs.GetNetworkSecurityRuleAppRuleInboundAllowListFilterParam[];
    filterType: string;
    icmpTypeCodeLists: outputs.GetNetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeList[];
    ipSubnet: string;
    ipSubnetPrefixLength: string;
    networkFunctionChainReference: {[key: string]: string};
    peerSpecificationType: string;
    protocol: string;
    serviceGroupLists: outputs.GetNetworkSecurityRuleAppRuleInboundAllowListServiceGroupList[];
    tcpPortRangeLists: outputs.GetNetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList[];
    udpPortRangeLists: outputs.GetNetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList[];
}

export interface GetNetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetNetworkSecurityRuleAppRuleInboundAllowListFilterParam {
    name: string;
    values: string[];
}

export interface GetNetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeList {
    code: string;
    type: string;
}

export interface GetNetworkSecurityRuleAppRuleInboundAllowListServiceGroupList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetNetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetNetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetNetworkSecurityRuleAppRuleOutboundAllowList {
    expirationTime: string;
    filterKindLists: string[];
    filterParams: outputs.GetNetworkSecurityRuleAppRuleOutboundAllowListFilterParam[];
    filterType: string;
    icmpTypeCodeLists: outputs.GetNetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeList[];
    ipSubnet: string;
    ipSubnetPrefixLength: string;
    networkFunctionChainReference: {[key: string]: string};
    peerSpecificationType: string;
    protocol: string;
    tcpPortRangeLists: outputs.GetNetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList[];
    udpPortRangeLists: outputs.GetNetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList[];
}

export interface GetNetworkSecurityRuleAppRuleOutboundAllowListFilterParam {
    name: string;
    values: string[];
}

export interface GetNetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeList {
    code: string;
    type: string;
}

export interface GetNetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetNetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetNetworkSecurityRuleAppRuleTargetGroupFilterParam {
    name: string;
    values: string[];
}

export interface GetNetworkSecurityRuleCategory {
    name: string;
    value: string;
}

export interface GetNetworkSecurityRuleIsolationRuleFirstEntityFilterParam {
    name: string;
    values: string[];
}

export interface GetNetworkSecurityRuleIsolationRuleSecondEntityFilterParam {
    name: string;
    values: string[];
}

export interface GetNetworkSecurityRuleQuarantineRuleInboundAllowList {
    expirationTime: string;
    filterKindLists: string[];
    filterParams: outputs.GetNetworkSecurityRuleQuarantineRuleInboundAllowListFilterParam[];
    filterType: string;
    icmpTypeCodeLists: outputs.GetNetworkSecurityRuleQuarantineRuleInboundAllowListIcmpTypeCodeList[];
    ipSubnet: string;
    ipSubnetPrefixLength: string;
    networkFunctionChainReference: {[key: string]: string};
    peerSpecificationType: string;
    protocol: string;
    tcpPortRangeLists: outputs.GetNetworkSecurityRuleQuarantineRuleInboundAllowListTcpPortRangeList[];
    udpPortRangeLists: outputs.GetNetworkSecurityRuleQuarantineRuleInboundAllowListUdpPortRangeList[];
}

export interface GetNetworkSecurityRuleQuarantineRuleInboundAllowListFilterParam {
    name: string;
    values: string[];
}

export interface GetNetworkSecurityRuleQuarantineRuleInboundAllowListIcmpTypeCodeList {
    code: string;
    type: string;
}

export interface GetNetworkSecurityRuleQuarantineRuleInboundAllowListTcpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetNetworkSecurityRuleQuarantineRuleInboundAllowListUdpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetNetworkSecurityRuleQuarantineRuleOutboundAllowList {
    addressGroupInclusionLists: outputs.GetNetworkSecurityRuleQuarantineRuleOutboundAllowListAddressGroupInclusionList[];
    expirationTime: string;
    filterKindLists: string[];
    filterParams: outputs.GetNetworkSecurityRuleQuarantineRuleOutboundAllowListFilterParam[];
    filterType: string;
    icmpTypeCodeLists: outputs.GetNetworkSecurityRuleQuarantineRuleOutboundAllowListIcmpTypeCodeList[];
    ipSubnet: string;
    ipSubnetPrefixLength: string;
    networkFunctionChainReference: {[key: string]: string};
    peerSpecificationType: string;
    protocol: string;
    serviceGroupLists: outputs.GetNetworkSecurityRuleQuarantineRuleOutboundAllowListServiceGroupList[];
    tcpPortRangeLists: outputs.GetNetworkSecurityRuleQuarantineRuleOutboundAllowListTcpPortRangeList[];
    udpPortRangeLists: outputs.GetNetworkSecurityRuleQuarantineRuleOutboundAllowListUdpPortRangeList[];
}

export interface GetNetworkSecurityRuleQuarantineRuleOutboundAllowListAddressGroupInclusionList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetNetworkSecurityRuleQuarantineRuleOutboundAllowListFilterParam {
    name: string;
    values: string[];
}

export interface GetNetworkSecurityRuleQuarantineRuleOutboundAllowListIcmpTypeCodeList {
    code: string;
    type: string;
}

export interface GetNetworkSecurityRuleQuarantineRuleOutboundAllowListServiceGroupList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetNetworkSecurityRuleQuarantineRuleOutboundAllowListTcpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetNetworkSecurityRuleQuarantineRuleOutboundAllowListUdpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetNetworkSecurityRuleQuarantineRuleTargetGroupFilterParam {
    name: string;
    values: string[];
}

export interface GetPbrSpec {
    name: string;
    resources: outputs.GetPbrSpecResource[];
}

export interface GetPbrSpecResource {
    actions: outputs.GetPbrSpecResourceAction[];
    destinations: outputs.GetPbrSpecResourceDestination[];
    isBidirectional: boolean;
    priority: number;
    protocolParameters: outputs.GetPbrSpecResourceProtocolParameter[];
    protocolType: string;
    sources: outputs.GetPbrSpecResourceSource[];
    vpcReference: {[key: string]: string};
}

export interface GetPbrSpecResourceAction {
    action: string;
    serviceIpLists: string[];
}

export interface GetPbrSpecResourceDestination {
    addressType: string;
    prefixLength: number;
    subnetIp: string;
}

export interface GetPbrSpecResourceProtocolParameter {
    icmps: outputs.GetPbrSpecResourceProtocolParameterIcmp[];
    protocolNumber: number;
    tcps: outputs.GetPbrSpecResourceProtocolParameterTcp[];
    udps: outputs.GetPbrSpecResourceProtocolParameterUdp[];
}

export interface GetPbrSpecResourceProtocolParameterIcmp {
    icmpCode: number;
    icmpType: number;
}

export interface GetPbrSpecResourceProtocolParameterTcp {
    destinationPortRangeLists: outputs.GetPbrSpecResourceProtocolParameterTcpDestinationPortRangeList[];
    sourcePortRangeLists: outputs.GetPbrSpecResourceProtocolParameterTcpSourcePortRangeList[];
}

export interface GetPbrSpecResourceProtocolParameterTcpDestinationPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetPbrSpecResourceProtocolParameterTcpSourcePortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetPbrSpecResourceProtocolParameterUdp {
    destinationPortRangeLists: outputs.GetPbrSpecResourceProtocolParameterUdpDestinationPortRangeList[];
    sourcePortRangeLists: outputs.GetPbrSpecResourceProtocolParameterUdpSourcePortRangeList[];
}

export interface GetPbrSpecResourceProtocolParameterUdpDestinationPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetPbrSpecResourceProtocolParameterUdpSourcePortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetPbrSpecResourceSource {
    addressType: string;
    prefixLength: number;
    subnetIp: string;
}

export interface GetPbrStatus {
    executionContexts: outputs.GetPbrStatusExecutionContext[];
    name: string;
    resources: outputs.GetPbrStatusResource[];
    state: string;
}

export interface GetPbrStatusExecutionContext {
    taskUuids: string[];
}

export interface GetPbrStatusResource {
    actions: outputs.GetPbrStatusResourceAction[];
    destinations: outputs.GetPbrStatusResourceDestination[];
    isBidirectional: boolean;
    priority: number;
    protocolParameters: outputs.GetPbrStatusResourceProtocolParameter[];
    protocolType: string;
    routingPolicyCounters: outputs.GetPbrStatusResourceRoutingPolicyCounter[];
    sources: outputs.GetPbrStatusResourceSource[];
    vpcReference: {[key: string]: string};
}

export interface GetPbrStatusResourceAction {
    action: string;
    serviceIpLists: string[];
}

export interface GetPbrStatusResourceDestination {
    addressType: string;
    prefixLength: number;
    subnetIp: string;
}

export interface GetPbrStatusResourceProtocolParameter {
    icmps: outputs.GetPbrStatusResourceProtocolParameterIcmp[];
    protocolNumber: number;
    tcps: outputs.GetPbrStatusResourceProtocolParameterTcp[];
    udps: outputs.GetPbrStatusResourceProtocolParameterUdp[];
}

export interface GetPbrStatusResourceProtocolParameterIcmp {
    icmpCode: number;
    icmpType: number;
}

export interface GetPbrStatusResourceProtocolParameterTcp {
    destinationPortRangeLists: outputs.GetPbrStatusResourceProtocolParameterTcpDestinationPortRangeList[];
    sourcePortRangeLists: outputs.GetPbrStatusResourceProtocolParameterTcpSourcePortRangeList[];
}

export interface GetPbrStatusResourceProtocolParameterTcpDestinationPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetPbrStatusResourceProtocolParameterTcpSourcePortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetPbrStatusResourceProtocolParameterUdp {
    destinationPortRangeLists: outputs.GetPbrStatusResourceProtocolParameterUdpDestinationPortRangeList[];
    sourcePortRangeLists: outputs.GetPbrStatusResourceProtocolParameterUdpSourcePortRangeList[];
}

export interface GetPbrStatusResourceProtocolParameterUdpDestinationPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetPbrStatusResourceProtocolParameterUdpSourcePortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetPbrStatusResourceRoutingPolicyCounter {
    byteCount: number;
    packetCount: number;
}

export interface GetPbrStatusResourceSource {
    addressType: string;
    prefixLength: number;
    subnetIp: string;
}

export interface GetPbrsEntity {
    metadata: {[key: string]: string};
    specs: outputs.GetPbrsEntitySpec[];
    statuses: outputs.GetPbrsEntityStatus[];
}

export interface GetPbrsEntitySpec {
    name: string;
    resources: outputs.GetPbrsEntitySpecResource[];
}

export interface GetPbrsEntitySpecResource {
    actions: outputs.GetPbrsEntitySpecResourceAction[];
    destinations: outputs.GetPbrsEntitySpecResourceDestination[];
    isBidirectional: boolean;
    priority: number;
    protocolParameters: outputs.GetPbrsEntitySpecResourceProtocolParameter[];
    protocolType: string;
    sources: outputs.GetPbrsEntitySpecResourceSource[];
    vpcReference: {[key: string]: string};
}

export interface GetPbrsEntitySpecResourceAction {
    action: string;
    serviceIpLists: string[];
}

export interface GetPbrsEntitySpecResourceDestination {
    addressType: string;
    prefixLength: number;
    subnetIp: string;
}

export interface GetPbrsEntitySpecResourceProtocolParameter {
    icmps: outputs.GetPbrsEntitySpecResourceProtocolParameterIcmp[];
    protocolNumber: number;
    tcps: outputs.GetPbrsEntitySpecResourceProtocolParameterTcp[];
    udps: outputs.GetPbrsEntitySpecResourceProtocolParameterUdp[];
}

export interface GetPbrsEntitySpecResourceProtocolParameterIcmp {
    icmpCode: number;
    icmpType: number;
}

export interface GetPbrsEntitySpecResourceProtocolParameterTcp {
    destinationPortRangeLists: outputs.GetPbrsEntitySpecResourceProtocolParameterTcpDestinationPortRangeList[];
    sourcePortRangeLists: outputs.GetPbrsEntitySpecResourceProtocolParameterTcpSourcePortRangeList[];
}

export interface GetPbrsEntitySpecResourceProtocolParameterTcpDestinationPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetPbrsEntitySpecResourceProtocolParameterTcpSourcePortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetPbrsEntitySpecResourceProtocolParameterUdp {
    destinationPortRangeLists: outputs.GetPbrsEntitySpecResourceProtocolParameterUdpDestinationPortRangeList[];
    sourcePortRangeLists: outputs.GetPbrsEntitySpecResourceProtocolParameterUdpSourcePortRangeList[];
}

export interface GetPbrsEntitySpecResourceProtocolParameterUdpDestinationPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetPbrsEntitySpecResourceProtocolParameterUdpSourcePortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetPbrsEntitySpecResourceSource {
    addressType: string;
    prefixLength: number;
    subnetIp: string;
}

export interface GetPbrsEntityStatus {
    executionContexts: outputs.GetPbrsEntityStatusExecutionContext[];
    name: string;
    resources: outputs.GetPbrsEntityStatusResource[];
    state: string;
}

export interface GetPbrsEntityStatusExecutionContext {
    taskUuids: string[];
}

export interface GetPbrsEntityStatusResource {
    actions: outputs.GetPbrsEntityStatusResourceAction[];
    destinations: outputs.GetPbrsEntityStatusResourceDestination[];
    isBidirectional: boolean;
    priority: number;
    protocolParameters: outputs.GetPbrsEntityStatusResourceProtocolParameter[];
    protocolType: string;
    routingPolicyCounters: outputs.GetPbrsEntityStatusResourceRoutingPolicyCounter[];
    sources: outputs.GetPbrsEntityStatusResourceSource[];
    vpcReference: {[key: string]: string};
}

export interface GetPbrsEntityStatusResourceAction {
    action: string;
    serviceIpLists: string[];
}

export interface GetPbrsEntityStatusResourceDestination {
    addressType: string;
    prefixLength: number;
    subnetIp: string;
}

export interface GetPbrsEntityStatusResourceProtocolParameter {
    icmps: outputs.GetPbrsEntityStatusResourceProtocolParameterIcmp[];
    protocolNumber: number;
    tcps: outputs.GetPbrsEntityStatusResourceProtocolParameterTcp[];
    udps: outputs.GetPbrsEntityStatusResourceProtocolParameterUdp[];
}

export interface GetPbrsEntityStatusResourceProtocolParameterIcmp {
    icmpCode: number;
    icmpType: number;
}

export interface GetPbrsEntityStatusResourceProtocolParameterTcp {
    destinationPortRangeLists: outputs.GetPbrsEntityStatusResourceProtocolParameterTcpDestinationPortRangeList[];
    sourcePortRangeLists: outputs.GetPbrsEntityStatusResourceProtocolParameterTcpSourcePortRangeList[];
}

export interface GetPbrsEntityStatusResourceProtocolParameterTcpDestinationPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetPbrsEntityStatusResourceProtocolParameterTcpSourcePortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetPbrsEntityStatusResourceProtocolParameterUdp {
    destinationPortRangeLists: outputs.GetPbrsEntityStatusResourceProtocolParameterUdpDestinationPortRangeList[];
    sourcePortRangeLists: outputs.GetPbrsEntityStatusResourceProtocolParameterUdpSourcePortRangeList[];
}

export interface GetPbrsEntityStatusResourceProtocolParameterUdpDestinationPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetPbrsEntityStatusResourceProtocolParameterUdpSourcePortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetPbrsEntityStatusResourceRoutingPolicyCounter {
    byteCount: number;
    packetCount: number;
}

export interface GetPbrsEntityStatusResourceSource {
    addressType: string;
    prefixLength: number;
    subnetIp: string;
}

export interface GetPbrsMetadata {
    filter: string;
    kind: string;
    length: number;
    offset: number;
    sortAttribute: string;
    sortOrder: string;
    totalMatches: number;
}

export interface GetPermissionCategory {
    name: string;
    value: string;
}

export interface GetPermissionField {
    fieldMode: string;
    fieldNameLists: string[];
}

export interface GetPermissionsEntity {
    apiVersion: string;
    categories: outputs.GetPermissionsEntityCategory[];
    description: string;
    fields: outputs.GetPermissionsEntityField[];
    kind: string;
    metadata: {[key: string]: string};
    name: string;
    operation: string;
    ownerReference: {[key: string]: string};
    projectReference: {[key: string]: string};
    state: string;
}

export interface GetPermissionsEntityCategory {
    name: string;
    value: string;
}

export interface GetPermissionsEntityField {
    fieldMode: string;
    fieldNameLists: string[];
}

export interface GetPermissionsMetadata {
    filter: string;
    kind: string;
    length: number;
    offset: number;
    sortAttribute: string;
    sortOrder: string;
}

export interface GetProjectAccountReferenceList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetProjectAcp {
    contextFilterLists: outputs.GetProjectAcpContextFilterList[];
    description: string;
    metadata: {[key: string]: string};
    name: string;
    roleReferences: outputs.GetProjectAcpRoleReference[];
    userGroupReferenceLists: outputs.GetProjectAcpUserGroupReferenceList[];
    userReferenceLists: outputs.GetProjectAcpUserReferenceList[];
}

export interface GetProjectAcpContextFilterList {
    entityFilterExpressionLists: outputs.GetProjectAcpContextFilterListEntityFilterExpressionList[];
    scopeFilterExpressionLists: outputs.GetProjectAcpContextFilterListScopeFilterExpressionList[];
}

export interface GetProjectAcpContextFilterListEntityFilterExpressionList {
    leftHandSideEntityType: string;
    operator: string;
    rightHandSides: outputs.GetProjectAcpContextFilterListEntityFilterExpressionListRightHandSide[];
}

export interface GetProjectAcpContextFilterListEntityFilterExpressionListRightHandSide {
    categories: outputs.GetProjectAcpContextFilterListEntityFilterExpressionListRightHandSideCategory[];
    collection: string;
    uuidLists: string[];
}

export interface GetProjectAcpContextFilterListEntityFilterExpressionListRightHandSideCategory {
    name: string;
    values: string[];
}

export interface GetProjectAcpContextFilterListScopeFilterExpressionList {
    leftHandSide: string;
    operator: string;
    rightHandSides: outputs.GetProjectAcpContextFilterListScopeFilterExpressionListRightHandSide[];
}

export interface GetProjectAcpContextFilterListScopeFilterExpressionListRightHandSide {
    categories: outputs.GetProjectAcpContextFilterListScopeFilterExpressionListRightHandSideCategory[];
    collection: string;
    uuidLists: string[];
}

export interface GetProjectAcpContextFilterListScopeFilterExpressionListRightHandSideCategory {
    name: string;
    values: string[];
}

export interface GetProjectAcpRoleReference {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetProjectAcpUserGroupReferenceList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetProjectAcpUserReferenceList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetProjectCategory {
    name: string;
    value: string;
}

export interface GetProjectClusterReferenceList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetProjectDefaultEnvironmentReference {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetProjectEnvironmentReferenceList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetProjectExternalNetworkList {
    name: string;
    uuid: string;
}

export interface GetProjectExternalUserGroupReferenceList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetProjectResourceDomain {
    resources: outputs.GetProjectResourceDomainResource[];
}

export interface GetProjectResourceDomainResource {
    limit: number;
    resourceType: string;
    units: string;
    value: number;
}

export interface GetProjectSubnetReferenceList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetProjectTunnelReferenceList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetProjectUserReferenceList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetProjectVpcReferenceList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetProjectsEntity {
    accountReferenceLists: outputs.GetProjectsEntityAccountReferenceList[];
    apiVersion: string;
    categories: outputs.GetProjectsEntityCategory[];
    defaultSubnetReference: {[key: string]: string};
    description: string;
    environmentReferenceLists: outputs.GetProjectsEntityEnvironmentReferenceList[];
    externalNetworkLists: outputs.GetProjectsEntityExternalNetworkList[];
    externalUserGroupReferenceLists: outputs.GetProjectsEntityExternalUserGroupReferenceList[];
    isDefault: boolean;
    metadata: {[key: string]: string};
    name: string;
    ownerReference: {[key: string]: string};
    projectReference: {[key: string]: string};
    resourceDomains: outputs.GetProjectsEntityResourceDomain[];
    state: string;
    subnetReferenceLists: outputs.GetProjectsEntitySubnetReferenceList[];
    userReferenceLists: outputs.GetProjectsEntityUserReferenceList[];
}

export interface GetProjectsEntityAccountReferenceList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetProjectsEntityCategory {
    name: string;
    value: string;
}

export interface GetProjectsEntityEnvironmentReferenceList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetProjectsEntityExternalNetworkList {
    name: string;
    uuid: string;
}

export interface GetProjectsEntityExternalUserGroupReferenceList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetProjectsEntityResourceDomain {
    resources: outputs.GetProjectsEntityResourceDomainResource[];
}

export interface GetProjectsEntityResourceDomainResource {
    limit: number;
    resourceType: string;
    units: string;
    value: number;
}

export interface GetProjectsEntitySubnetReferenceList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetProjectsEntityUserReferenceList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetProtectionRuleAvailabilityZoneConnectivityList {
    destinationAvailabilityZoneIndex: number;
    snapshotScheduleLists: outputs.GetProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList[];
    sourceAvailabilityZoneIndex: number;
}

export interface GetProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList {
    autoSuspendTimeoutSecs: number;
    localSnapshotRetentionPolicies: outputs.GetProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy[];
    recoveryPointObjectiveSecs: number;
    remoteSnapshotRetentionPolicies: outputs.GetProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy[];
    snapshotType: string;
}

export interface GetProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy {
    numSnapshots: number;
    rollupRetentionPolicyMultiple: number;
    rollupRetentionPolicySnapshotIntervalType: string;
}

export interface GetProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy {
    numSnapshots: number;
    rollupRetentionPolicyMultiple: number;
    rollupRetentionPolicySnapshotIntervalType: string;
}

export interface GetProtectionRuleCategory {
    name: string;
    value: string;
}

export interface GetProtectionRuleCategoryFilter {
    kindLists: string[];
    params: outputs.GetProtectionRuleCategoryFilterParam[];
    type: string;
}

export interface GetProtectionRuleCategoryFilterParam {
    name: string;
    values: string[];
}

export interface GetProtectionRuleOrderedAvailabilityZoneList {
    availabilityZoneUrl: string;
    clusterUuid: string;
}

export interface GetProtectionRuleOwnerReference {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetProtectionRuleProjectReference {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetProtectionRulesEntity {
    apiVersion: string;
    availabilityZoneConnectivityLists: outputs.GetProtectionRulesEntityAvailabilityZoneConnectivityList[];
    categories: outputs.GetProtectionRulesEntityCategory[];
    categoryFilters: outputs.GetProtectionRulesEntityCategoryFilter[];
    description: string;
    metadata: {[key: string]: string};
    name: string;
    orderedAvailabilityZoneLists: outputs.GetProtectionRulesEntityOrderedAvailabilityZoneList[];
    ownerReferences: outputs.GetProtectionRulesEntityOwnerReference[];
    projectReferences: outputs.GetProtectionRulesEntityProjectReference[];
    startTime: string;
    state: string;
}

export interface GetProtectionRulesEntityAvailabilityZoneConnectivityList {
    destinationAvailabilityZoneIndex: number;
    snapshotScheduleLists: outputs.GetProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleList[];
    sourceAvailabilityZoneIndex: number;
}

export interface GetProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleList {
    autoSuspendTimeoutSecs: number;
    localSnapshotRetentionPolicies: outputs.GetProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy[];
    recoveryPointObjectiveSecs: number;
    remoteSnapshotRetentionPolicies: outputs.GetProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy[];
    snapshotType: string;
}

export interface GetProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy {
    numSnapshots: number;
    rollupRetentionPolicyMultiple: number;
    rollupRetentionPolicySnapshotIntervalType: string;
}

export interface GetProtectionRulesEntityAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy {
    numSnapshots: number;
    rollupRetentionPolicyMultiple: number;
    rollupRetentionPolicySnapshotIntervalType: string;
}

export interface GetProtectionRulesEntityCategory {
    name: string;
    value: string;
}

export interface GetProtectionRulesEntityCategoryFilter {
    kindLists: string[];
    params: outputs.GetProtectionRulesEntityCategoryFilterParam[];
    type: string;
}

export interface GetProtectionRulesEntityCategoryFilterParam {
    name: string;
    values: string[];
}

export interface GetProtectionRulesEntityOrderedAvailabilityZoneList {
    availabilityZoneUrl: string;
    clusterUuid: string;
}

export interface GetProtectionRulesEntityOwnerReference {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetProtectionRulesEntityProjectReference {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetRecoveryPlanCategory {
    name: string;
    value: string;
}

export interface GetRecoveryPlanOwnerReference {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetRecoveryPlanParameter {
    floatingIpAssignmentLists: outputs.GetRecoveryPlanParameterFloatingIpAssignmentList[];
    networkMappingLists: outputs.GetRecoveryPlanParameterNetworkMappingList[];
}

export interface GetRecoveryPlanParameterFloatingIpAssignmentList {
    availabilityZoneUrl: string;
    vmIpAssignmentLists: outputs.GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentList[];
}

export interface GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentList {
    recoveryFloatingIpConfigs: outputs.GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig[];
    testFloatingIpConfigs: outputs.GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig[];
    vmNicInformations: outputs.GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListVmNicInformation[];
    vmReferences: outputs.GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListVmReference[];
}

export interface GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig {
    ip: string;
    shouldAllocateDynamically: boolean;
}

export interface GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig {
    ip: string;
    shouldAllocateDynamically: boolean;
}

export interface GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListVmNicInformation {
    ip: string;
    uuid: string;
}

export interface GetRecoveryPlanParameterFloatingIpAssignmentListVmIpAssignmentListVmReference {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetRecoveryPlanParameterNetworkMappingList {
    areNetworksStretched: boolean;
    availabilityZoneNetworkMappingLists: outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingList[];
}

export interface GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingList {
    availabilityZoneUrl: string;
    clusterReferenceLists: outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList[];
    recoveryIpAssignmentLists: outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList[];
    recoveryNetworks: outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork[];
    testIpAssignmentLists: outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList[];
    testNetworks: outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork[];
}

export interface GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList {
    ipConfigLists: outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList[];
    vmReferences: outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference[];
}

export interface GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList {
    ipAddress: string;
}

export interface GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork {
    name: string;
    subnetLists: outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList[];
    useVpcReference: boolean;
    virtualNetworkReferences: outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference[];
    vpcReferences: outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference[];
}

export interface GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList {
    externalConnectivityState: string;
    gatewayIp: string;
    prefixLength: number;
}

export interface GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList {
    ipConfigLists: outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList[];
    vmReferences: outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference[];
}

export interface GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList {
    ipAddress: string;
}

export interface GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork {
    name: string;
    subnetLists: outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList[];
    useVpcReference: boolean;
    virtualNetworkReferences: outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference[];
    vpcReferences: outputs.GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference[];
}

export interface GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList {
    externalConnectivityState: string;
    gatewayIp: string;
    prefixLength: number;
}

export interface GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetRecoveryPlanParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetRecoveryPlanProjectReference {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetRecoveryPlanStageList {
    delayTimeSecs: number;
    stageUuid: string;
    stageWorks: outputs.GetRecoveryPlanStageListStageWork[];
}

export interface GetRecoveryPlanStageListStageWork {
    recoverEntities: outputs.GetRecoveryPlanStageListStageWorkRecoverEntity[];
}

export interface GetRecoveryPlanStageListStageWorkRecoverEntity {
    entityInfoLists: outputs.GetRecoveryPlanStageListStageWorkRecoverEntityEntityInfoList[];
}

export interface GetRecoveryPlanStageListStageWorkRecoverEntityEntityInfoList {
    anyEntityReferenceKind: string;
    anyEntityReferenceName: string;
    anyEntityReferenceUuid: string;
    categories: outputs.GetRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListCategory[];
    scriptLists: outputs.GetRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListScriptList[];
}

export interface GetRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListCategory {
    name: string;
    value: string;
}

export interface GetRecoveryPlanStageListStageWorkRecoverEntityEntityInfoListScriptList {
    enableScriptExec: boolean;
    timeout: string;
}

export interface GetRecoveryPlansEntity {
    apiVersion: string;
    categories: outputs.GetRecoveryPlansEntityCategory[];
    description: string;
    metadata: {[key: string]: string};
    name: string;
    ownerReferences: outputs.GetRecoveryPlansEntityOwnerReference[];
    parameters: outputs.GetRecoveryPlansEntityParameter[];
    projectReferences: outputs.GetRecoveryPlansEntityProjectReference[];
    stageLists: outputs.GetRecoveryPlansEntityStageList[];
    state: string;
}

export interface GetRecoveryPlansEntityCategory {
    name: string;
    value: string;
}

export interface GetRecoveryPlansEntityOwnerReference {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetRecoveryPlansEntityParameter {
    floatingIpAssignmentLists: outputs.GetRecoveryPlansEntityParameterFloatingIpAssignmentList[];
    networkMappingLists: outputs.GetRecoveryPlansEntityParameterNetworkMappingList[];
}

export interface GetRecoveryPlansEntityParameterFloatingIpAssignmentList {
    availabilityZoneUrl: string;
    vmIpAssignmentLists: outputs.GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentList[];
}

export interface GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentList {
    recoveryFloatingIpConfigs: outputs.GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig[];
    testFloatingIpConfigs: outputs.GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig[];
    vmNicInformations: outputs.GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListVmNicInformation[];
    vmReferences: outputs.GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListVmReference[];
}

export interface GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig {
    ip: string;
    shouldAllocateDynamically: boolean;
}

export interface GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig {
    ip: string;
    shouldAllocateDynamically: boolean;
}

export interface GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListVmNicInformation {
    ip: string;
    uuid: string;
}

export interface GetRecoveryPlansEntityParameterFloatingIpAssignmentListVmIpAssignmentListVmReference {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetRecoveryPlansEntityParameterNetworkMappingList {
    areNetworksStretched: boolean;
    availabilityZoneNetworkMappingLists: outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingList[];
}

export interface GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingList {
    availabilityZoneUrl: string;
    clusterReferenceLists: outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList[];
    recoveryIpAssignmentLists: outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList[];
    recoveryNetworks: outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork[];
    testIpAssignmentLists: outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList[];
    testNetworks: outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork[];
}

export interface GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList {
    ipConfigLists: outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList[];
    vmReferences: outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference[];
}

export interface GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList {
    ipAddress: string;
}

export interface GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork {
    name: string;
    subnetLists: outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList[];
    useVpcReference: boolean;
    virtualNetworkReferences: outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference[];
    vpcReferences: outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference[];
}

export interface GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList {
    externalConnectivityState: string;
    gatewayIp: string;
    prefixLength: number;
}

export interface GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList {
    ipConfigLists: outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList[];
    vmReferences: outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference[];
}

export interface GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList {
    ipAddress: string;
}

export interface GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork {
    name: string;
    subnetLists: outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList[];
    useVpcReference: boolean;
    virtualNetworkReferences: outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference[];
    vpcReferences: outputs.GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference[];
}

export interface GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList {
    externalConnectivityState: string;
    gatewayIp: string;
    prefixLength: number;
}

export interface GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetRecoveryPlansEntityParameterNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetRecoveryPlansEntityProjectReference {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetRecoveryPlansEntityStageList {
    delayTimeSecs: number;
    stageUuid: string;
    stageWorks: outputs.GetRecoveryPlansEntityStageListStageWork[];
}

export interface GetRecoveryPlansEntityStageListStageWork {
    recoverEntities: outputs.GetRecoveryPlansEntityStageListStageWorkRecoverEntity[];
}

export interface GetRecoveryPlansEntityStageListStageWorkRecoverEntity {
    entityInfoLists: outputs.GetRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoList[];
}

export interface GetRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoList {
    anyEntityReferenceKind: string;
    anyEntityReferenceName: string;
    anyEntityReferenceUuid: string;
    categories: outputs.GetRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListCategory[];
    scriptLists: outputs.GetRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListScriptList[];
}

export interface GetRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListCategory {
    name: string;
    value: string;
}

export interface GetRecoveryPlansEntityStageListStageWorkRecoverEntityEntityInfoListScriptList {
    enableScriptExec: boolean;
    timeout: string;
}

export interface GetRoleCategory {
    name: string;
    value: string;
}

export interface GetRolePermissionReferenceList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetRolesEntity {
    apiVersion: string;
    categories: outputs.GetRolesEntityCategory[];
    description: string;
    metadata: {[key: string]: string};
    name: string;
    ownerReference: {[key: string]: string};
    permissionReferenceLists: outputs.GetRolesEntityPermissionReferenceList[];
    projectReference: {[key: string]: string};
    roleId: string;
    state: string;
}

export interface GetRolesEntityCategory {
    name: string;
    value: string;
}

export interface GetRolesEntityPermissionReferenceList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetRolesMetadata {
    filter: string;
    kind: string;
    length: number;
    offset: number;
    sortAttribute: string;
    sortOrder: string;
}

export interface GetServiceGroupServiceList {
    icmpTypeCodeLists: outputs.GetServiceGroupServiceListIcmpTypeCodeList[];
    protocol: string;
    tcpPortRangeLists: outputs.GetServiceGroupServiceListTcpPortRangeList[];
    udpPortRangeLists: outputs.GetServiceGroupServiceListUdpPortRangeList[];
}

export interface GetServiceGroupServiceListIcmpTypeCodeList {
    code: string;
    type: string;
}

export interface GetServiceGroupServiceListTcpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetServiceGroupServiceListUdpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetServiceGroupsEntity {
    associatedPoliciesLists: outputs.GetServiceGroupsEntityAssociatedPoliciesList[];
    serviceGroups: outputs.GetServiceGroupsEntityServiceGroup[];
    uuid: string;
}

export interface GetServiceGroupsEntityAssociatedPoliciesList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetServiceGroupsEntityServiceGroup {
    description: string;
    isSystemDefined: boolean;
    name: string;
    serviceLists: outputs.GetServiceGroupsEntityServiceGroupServiceList[];
}

export interface GetServiceGroupsEntityServiceGroupServiceList {
    icmpTypeCodeLists: outputs.GetServiceGroupsEntityServiceGroupServiceListIcmpTypeCodeList[];
    protocol: string;
    tcpPortRangeLists: outputs.GetServiceGroupsEntityServiceGroupServiceListTcpPortRangeList[];
    udpPortRangeLists: outputs.GetServiceGroupsEntityServiceGroupServiceListUdpPortRangeList[];
}

export interface GetServiceGroupsEntityServiceGroupServiceListIcmpTypeCodeList {
    code: string;
    type: string;
}

export interface GetServiceGroupsEntityServiceGroupServiceListTcpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetServiceGroupsEntityServiceGroupServiceListUdpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface GetServiceGroupsMetadata {
    filter: string;
    kind: string;
    length: number;
    offset: number;
    sortAttribute: string;
    sortOrder: string;
}

export interface GetStaticRoutesSpec {
    name: string;
    resources: outputs.GetStaticRoutesSpecResource[];
}

export interface GetStaticRoutesSpecResource {
    defaultRouteNexthops: outputs.GetStaticRoutesSpecResourceDefaultRouteNexthop[];
    staticRoutesLists: outputs.GetStaticRoutesSpecResourceStaticRoutesList[];
}

export interface GetStaticRoutesSpecResourceDefaultRouteNexthop {
    directConnectVirtualInterfaceReference: {[key: string]: string};
    externalSubnetReference: {[key: string]: string};
    localSubnetReference: {[key: string]: string};
    vpnConnectionReference: {[key: string]: string};
}

export interface GetStaticRoutesSpecResourceStaticRoutesList {
    destination: string;
    nexthops: outputs.GetStaticRoutesSpecResourceStaticRoutesListNexthop[];
}

export interface GetStaticRoutesSpecResourceStaticRoutesListNexthop {
    directConnectVirtualInterfaceReference: {[key: string]: string};
    externalSubnetReference: {[key: string]: string};
    localSubnetReference: {[key: string]: string};
    vpnConnectionReference: {[key: string]: string};
}

export interface GetStaticRoutesStatus {
    executionContexts: outputs.GetStaticRoutesStatusExecutionContext[];
    resources: outputs.GetStaticRoutesStatusResource[];
    state: string;
}

export interface GetStaticRoutesStatusExecutionContext {
    taskUuids: string[];
}

export interface GetStaticRoutesStatusResource {
    defaultRoutes: outputs.GetStaticRoutesStatusResourceDefaultRoute[];
    dynamicRoutesLists: outputs.GetStaticRoutesStatusResourceDynamicRoutesList[];
    localRoutesLists: outputs.GetStaticRoutesStatusResourceLocalRoutesList[];
    staticRoutesLists: outputs.GetStaticRoutesStatusResourceStaticRoutesList[];
}

export interface GetStaticRoutesStatusResourceDefaultRoute {
    destination: string;
    isActive: boolean;
    nexthops: outputs.GetStaticRoutesStatusResourceDefaultRouteNexthop[];
    priority: number;
}

export interface GetStaticRoutesStatusResourceDefaultRouteNexthop {
    directConnectVirtualInterfaceReference: {[key: string]: string};
    externalSubnetReference: {[key: string]: string};
    localSubnetReference: {[key: string]: string};
    nexthopIpAddress: string;
    vpnConnectionReference: {[key: string]: string};
}

export interface GetStaticRoutesStatusResourceDynamicRoutesList {
    destination: string;
    isActive: boolean;
    nexthops: outputs.GetStaticRoutesStatusResourceDynamicRoutesListNexthop[];
    priority: number;
}

export interface GetStaticRoutesStatusResourceDynamicRoutesListNexthop {
    directConnectVirtualInterfaceReference: {[key: string]: string};
    externalSubnetReference: {[key: string]: string};
    localSubnetReference: {[key: string]: string};
    nexthopIpAddress: string;
    vpnConnectionReference: {[key: string]: string};
}

export interface GetStaticRoutesStatusResourceLocalRoutesList {
    destination: string;
    isActive: boolean;
    nexthops: outputs.GetStaticRoutesStatusResourceLocalRoutesListNexthop[];
    priority: number;
}

export interface GetStaticRoutesStatusResourceLocalRoutesListNexthop {
    directConnectVirtualInterfaceReference: {[key: string]: string};
    externalSubnetReference: {[key: string]: string};
    localSubnetReference: {[key: string]: string};
    nexthopIpAddress: string;
    vpnConnectionReference: {[key: string]: string};
}

export interface GetStaticRoutesStatusResourceStaticRoutesList {
    destination: string;
    isActive: boolean;
    nexthops: outputs.GetStaticRoutesStatusResourceStaticRoutesListNexthop[];
    priority: number;
}

export interface GetStaticRoutesStatusResourceStaticRoutesListNexthop {
    directConnectVirtualInterfaceReference: {[key: string]: string};
    externalSubnetReference: {[key: string]: string};
    localSubnetReference: {[key: string]: string};
    nexthopIpAddress: string;
    vpnConnectionReference: {[key: string]: string};
}

export interface GetSubnetAdditionalFilter {
    name: string;
    values: string[];
}

export interface GetSubnetCategory {
    name: string;
    value: string;
}

export interface GetSubnetMessageList {
    details: {[key: string]: string};
    message: string;
    reason: string;
}

export interface GetSubnetsEntity {
    apiVersion: string;
    availabilityZoneReference: {[key: string]: string};
    categories: outputs.GetSubnetsEntityCategory[];
    clusterName: string;
    clusterReference: {[key: string]: string};
    clusterUuid: string;
    defaultGatewayIp: string;
    description: string;
    dhcpDomainNameServerLists: string[];
    dhcpDomainSearchLists: string[];
    dhcpOptions: {[key: string]: string};
    dhcpServerAddress: {[key: string]: string};
    dhcpServerAddressPort: number;
    enableNat: boolean;
    ipConfigPoolListRanges: string[];
    isExternal: boolean;
    messageLists: outputs.GetSubnetsEntityMessageList[];
    metadata: {[key: string]: string};
    name: string;
    networkFunctionChainReference: {[key: string]: string};
    ownerReference: {[key: string]: string};
    prefixLength: number;
    projectReference: {[key: string]: string};
    state: string;
    subnetId: string;
    subnetIp: string;
    subnetName: string;
    subnetType: string;
    vlanId: number;
    vpcReference: {[key: string]: string};
    vswitchName: string;
}

export interface GetSubnetsEntityCategory {
    name: string;
    value: string;
}

export interface GetSubnetsEntityMessageList {
    details: {[key: string]: string};
    message: string;
    reason: string;
}

export interface GetSubnetsMetadata {
    filter: string;
    kind: string;
    length: number;
    offset: number;
    sortAttribute: string;
    sortOrder: string;
}

export interface GetUserAccessControlPolicyReferenceList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetUserCategory {
    name: string;
    value: string;
}

export interface GetUserDirectoryServiceUser {
    defaultUserPrincipalName: string;
    directoryServiceReferences: outputs.GetUserDirectoryServiceUserDirectoryServiceReference[];
    userPrincipalName: string;
}

export interface GetUserDirectoryServiceUserDirectoryServiceReference {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetUserGroupAccessControlPolicyReferenceList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetUserGroupCategory {
    name: string;
    value: string;
}

export interface GetUserGroupDirectoryServiceUserGroup {
    defaultUserPrincipalName: string;
    directoryServiceReferences: outputs.GetUserGroupDirectoryServiceUserGroupDirectoryServiceReference[];
    distinguishedName: string;
}

export interface GetUserGroupDirectoryServiceUserGroupDirectoryServiceReference {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetUserGroupProjectReferenceList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetUserGroupsEntity {
    accessControlPolicyReferenceLists: outputs.GetUserGroupsEntityAccessControlPolicyReferenceList[];
    apiVersion: string;
    categories: outputs.GetUserGroupsEntityCategory[];
    directoryServiceUserGroups: outputs.GetUserGroupsEntityDirectoryServiceUserGroup[];
    displayName: string;
    metadata: {[key: string]: string};
    ownerReference: {[key: string]: string};
    projectReference: {[key: string]: string};
    projectReferenceLists: outputs.GetUserGroupsEntityProjectReferenceList[];
    state: string;
    userGroupType: string;
}

export interface GetUserGroupsEntityAccessControlPolicyReferenceList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetUserGroupsEntityCategory {
    name: string;
    value: string;
}

export interface GetUserGroupsEntityDirectoryServiceUserGroup {
    defaultUserPrincipalName: string;
    directoryServiceReferences: outputs.GetUserGroupsEntityDirectoryServiceUserGroupDirectoryServiceReference[];
    distinguishedName: string;
}

export interface GetUserGroupsEntityDirectoryServiceUserGroupDirectoryServiceReference {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetUserGroupsEntityProjectReferenceList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetUserGroupsMetadata {
    filter: string;
    kind: string;
    length: number;
    offset: number;
    sortAttribute: string;
    sortOrder: string;
}

export interface GetUserIdentityProviderUser {
    identityProviderReferences: outputs.GetUserIdentityProviderUserIdentityProviderReference[];
    username: string;
}

export interface GetUserIdentityProviderUserIdentityProviderReference {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetUserProjectReferenceList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetUsersEntity {
    accessControlPolicyReferenceLists: outputs.GetUsersEntityAccessControlPolicyReferenceList[];
    apiVersion: string;
    categories: outputs.GetUsersEntityCategory[];
    directoryServiceUsers: outputs.GetUsersEntityDirectoryServiceUser[];
    displayName: string;
    identityProviderUsers: outputs.GetUsersEntityIdentityProviderUser[];
    metadata: {[key: string]: string};
    name: string;
    ownerReference: {[key: string]: string};
    projectReference: {[key: string]: string};
    projectReferenceLists: outputs.GetUsersEntityProjectReferenceList[];
    state: string;
    userType: string;
}

export interface GetUsersEntityAccessControlPolicyReferenceList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetUsersEntityCategory {
    name: string;
    value: string;
}

export interface GetUsersEntityDirectoryServiceUser {
    defaultUserPrincipalName: string;
    directoryServiceReferences: outputs.GetUsersEntityDirectoryServiceUserDirectoryServiceReference[];
    userPrincipalName: string;
}

export interface GetUsersEntityDirectoryServiceUserDirectoryServiceReference {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetUsersEntityIdentityProviderUser {
    identityProviderReferences: outputs.GetUsersEntityIdentityProviderUserIdentityProviderReference[];
    username: string;
}

export interface GetUsersEntityIdentityProviderUserIdentityProviderReference {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetUsersEntityProjectReferenceList {
    kind: string;
    name: string;
    uuid: string;
}

export interface GetUsersMetadata {
    filter: string;
    kind: string;
    length: number;
    offset: number;
    sortAttribute: string;
    sortOrder: string;
}

export interface GetVirtualMachineCategory {
    name: string;
    value: string;
}

export interface GetVirtualMachineDiskList {
    dataSourceReference: {[key: string]: string};
    deviceProperties: outputs.GetVirtualMachineDiskListDeviceProperty[];
    diskSizeBytes: number;
    diskSizeMib: number;
    storageConfigs: outputs.GetVirtualMachineDiskListStorageConfig[];
    uuid: string;
    volumeGroupReference: {[key: string]: string};
}

export interface GetVirtualMachineDiskListDeviceProperty {
    deviceType: string;
    diskAddress: {[key: string]: string};
}

export interface GetVirtualMachineDiskListStorageConfig {
    flashMode: string;
    storageContainerReferences: outputs.GetVirtualMachineDiskListStorageConfigStorageContainerReference[];
}

export interface GetVirtualMachineDiskListStorageConfigStorageContainerReference {
    kind: string;
    name: string;
    url: string;
    uuid: string;
}

export interface GetVirtualMachineGpuList {
    deviceId: number;
    fraction: number;
    frameBufferSizeMib: number;
    guestDriverVersion: string;
    mode: string;
    name: string;
    numVirtualDisplayHeads: number;
    pciAddress: string;
    uuid: string;
    vendor: string;
}

export interface GetVirtualMachineMessageList {
    details: {[key: string]: string};
    message: string;
    reason: string;
}

export interface GetVirtualMachineNicList {
    floatingIp: string;
    ipEndpointLists: outputs.GetVirtualMachineNicListIpEndpointList[];
    isConnected: string;
    macAddress: string;
    model: string;
    networkFunctionChainReference: {[key: string]: string};
    networkFunctionNicType: string;
    nicType: string;
    numQueues: number;
    subnetName: string;
    subnetUuid: string;
    uuid: string;
}

export interface GetVirtualMachineNicListIpEndpointList {
    ip: string;
    type: string;
}

export interface GetVirtualMachineSerialPortList {
    index: number;
    isConnected: boolean;
}

export interface GetVpcSpec {
    name: string;
    resources: outputs.GetVpcSpecResource[];
}

export interface GetVpcSpecResource {
    commonDomainNameServerIpLists: outputs.GetVpcSpecResourceCommonDomainNameServerIpList[];
    externalSubnetLists: outputs.GetVpcSpecResourceExternalSubnetList[];
    externallyRoutablePrefixLists: outputs.GetVpcSpecResourceExternallyRoutablePrefixList[];
}

export interface GetVpcSpecResourceCommonDomainNameServerIpList {
    ip: string;
}

export interface GetVpcSpecResourceExternalSubnetList {
    externalSubnetReference: {[key: string]: string};
}

export interface GetVpcSpecResourceExternallyRoutablePrefixList {
    ip: string;
    prefixLength: number;
}

export interface GetVpcStatus {
    executionContexts: outputs.GetVpcStatusExecutionContext[];
    name: string;
    resources: outputs.GetVpcStatusResource[];
    state: string;
}

export interface GetVpcStatusExecutionContext {
    taskUuids: string[];
}

export interface GetVpcStatusResource {
    commonDomainNameServerIpLists: outputs.GetVpcStatusResourceCommonDomainNameServerIpList[];
    externalSubnetLists: outputs.GetVpcStatusResourceExternalSubnetList[];
    externallyRoutablePrefixLists: outputs.GetVpcStatusResourceExternallyRoutablePrefixList[];
}

export interface GetVpcStatusResourceCommonDomainNameServerIpList {
    ip: string;
}

export interface GetVpcStatusResourceExternalSubnetList {
    activeGatewayNodes: outputs.GetVpcStatusResourceExternalSubnetListActiveGatewayNode[];
    externalIpLists: string[];
    externalSubnetReference: {[key: string]: string};
}

export interface GetVpcStatusResourceExternalSubnetListActiveGatewayNode {
    hostReference: {[key: string]: string};
    ipAddress: string;
}

export interface GetVpcStatusResourceExternallyRoutablePrefixList {
    ip: string;
    prefixLength: number;
}

export interface GetVpcsEntity {
    metadata: {[key: string]: string};
    specs: outputs.GetVpcsEntitySpec[];
    statuses: outputs.GetVpcsEntityStatus[];
}

export interface GetVpcsEntitySpec {
    name: string;
    resources: outputs.GetVpcsEntitySpecResource[];
}

export interface GetVpcsEntitySpecResource {
    commonDomainNameServerIpLists: outputs.GetVpcsEntitySpecResourceCommonDomainNameServerIpList[];
    externalSubnetLists: outputs.GetVpcsEntitySpecResourceExternalSubnetList[];
    externallyRoutablePrefixLists: outputs.GetVpcsEntitySpecResourceExternallyRoutablePrefixList[];
}

export interface GetVpcsEntitySpecResourceCommonDomainNameServerIpList {
    ip: string;
}

export interface GetVpcsEntitySpecResourceExternalSubnetList {
    externalSubnetReference: {[key: string]: string};
}

export interface GetVpcsEntitySpecResourceExternallyRoutablePrefixList {
    ip: string;
    prefixLength: number;
}

export interface GetVpcsEntityStatus {
    executionContexts: outputs.GetVpcsEntityStatusExecutionContext[];
    name: string;
    resources: outputs.GetVpcsEntityStatusResource[];
    state: string;
}

export interface GetVpcsEntityStatusExecutionContext {
    taskUuids: string[];
}

export interface GetVpcsEntityStatusResource {
    commonDomainNameServerIpLists: outputs.GetVpcsEntityStatusResourceCommonDomainNameServerIpList[];
    externalSubnetLists: outputs.GetVpcsEntityStatusResourceExternalSubnetList[];
    externallyRoutablePrefixLists: outputs.GetVpcsEntityStatusResourceExternallyRoutablePrefixList[];
}

export interface GetVpcsEntityStatusResourceCommonDomainNameServerIpList {
    ip: string;
}

export interface GetVpcsEntityStatusResourceExternalSubnetList {
    activeGatewayNodes: outputs.GetVpcsEntityStatusResourceExternalSubnetListActiveGatewayNode[];
    externalIpLists: string[];
    externalSubnetReference: {[key: string]: string};
}

export interface GetVpcsEntityStatusResourceExternalSubnetListActiveGatewayNode {
    hostReference: {[key: string]: string};
    ipAddress: string;
}

export interface GetVpcsEntityStatusResourceExternallyRoutablePrefixList {
    ip: string;
    prefixLength: number;
}

export interface GetVpcsMetadata {
    filter: string;
    kind: string;
    length: number;
    offset: number;
    sortAttribute: string;
    sortOrder: string;
    totalMatches: number;
}

export interface ImageCategory {
    name: string;
    value: string;
}

export interface ImageClusterReference {
    kind: string;
    name: string;
    uuid: string;
}

export interface ImageCurrentClusterReferenceList {
    kind: string;
    name: string;
    uuid: string;
}

export interface ImageTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface KarbonClusterActivePassiveConfig {
    externalIpv4Address: string;
}

export interface KarbonClusterCniConfig {
    calicoConfig?: outputs.KarbonClusterCniConfigCalicoConfig;
    flannelConfigs?: outputs.KarbonClusterCniConfigFlannelConfig[];
    nodeCidrMaskSize?: number;
    podIpv4Cidr?: string;
    serviceIpv4Cidr?: string;
}

export interface KarbonClusterCniConfigCalicoConfig {
    ipPoolConfigs?: outputs.KarbonClusterCniConfigCalicoConfigIpPoolConfig[];
}

export interface KarbonClusterCniConfigCalicoConfigIpPoolConfig {
    cidr?: string;
}

export interface KarbonClusterCniConfigFlannelConfig {
}

export interface KarbonClusterEtcdNodePool {
    ahvConfig?: outputs.KarbonClusterEtcdNodePoolAhvConfig;
    name?: string;
    nodeOsVersion: string;
    nodes: outputs.KarbonClusterEtcdNodePoolNode[];
    numInstances: number;
}

export interface KarbonClusterEtcdNodePoolAhvConfig {
    cpu?: number;
    diskMib?: number;
    memoryMib?: number;
    networkUuid: string;
    prismElementClusterUuid: string;
}

export interface KarbonClusterEtcdNodePoolNode {
    hostname: string;
    ipv4Address: string;
}

export interface KarbonClusterExternalLbConfig {
    externalIpv4Address: string;
    masterNodesConfigs: outputs.KarbonClusterExternalLbConfigMasterNodesConfig[];
}

export interface KarbonClusterExternalLbConfigMasterNodesConfig {
    ipv4Address: string;
    nodePoolName?: string;
}

export interface KarbonClusterMasterNodePool {
    ahvConfig?: outputs.KarbonClusterMasterNodePoolAhvConfig;
    name?: string;
    nodeOsVersion: string;
    nodes: outputs.KarbonClusterMasterNodePoolNode[];
    numInstances: number;
}

export interface KarbonClusterMasterNodePoolAhvConfig {
    cpu?: number;
    diskMib?: number;
    memoryMib?: number;
    networkUuid: string;
    prismElementClusterUuid: string;
}

export interface KarbonClusterMasterNodePoolNode {
    hostname: string;
    ipv4Address: string;
}

export interface KarbonClusterPrivateRegistry {
    registryName: string;
}

export interface KarbonClusterSingleMasterConfig {
}

export interface KarbonClusterStorageClassConfig {
    name?: string;
    reclaimPolicy?: string;
    volumesConfig: outputs.KarbonClusterStorageClassConfigVolumesConfig;
}

export interface KarbonClusterStorageClassConfigVolumesConfig {
    fileSystem?: string;
    flashMode?: boolean;
    password: string;
    prismElementClusterUuid: string;
    storageContainer: string;
    username: string;
}

export interface KarbonClusterTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface KarbonClusterWorkerNodePool {
    ahvConfig?: outputs.KarbonClusterWorkerNodePoolAhvConfig;
    name?: string;
    nodeOsVersion: string;
    nodes: outputs.KarbonClusterWorkerNodePoolNode[];
    numInstances: number;
}

export interface KarbonClusterWorkerNodePoolAhvConfig {
    cpu?: number;
    diskMib?: number;
    memoryMib?: number;
    networkUuid: string;
    prismElementClusterUuid: string;
}

export interface KarbonClusterWorkerNodePoolNode {
    hostname: string;
    ipv4Address: string;
}

export interface KarbonWorkerNodepoolAhvConfig {
    cpu?: number;
    diskMib?: number;
    iscsiNetworkUuid: string;
    memoryMib?: number;
    networkUuid: string;
    prismElementClusterUuid: string;
}

export interface KarbonWorkerNodepoolNode {
    hostname: string;
    ipv4Address: string;
}

export interface KarbonWorkerNodepoolTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface NdbCloneActionargument {
    name: string;
    value: string;
}

export interface NdbCloneDatabaseNode {
    accessLevel: {[key: string]: string};
    databaseId: string;
    databaseStatus: string;
    dateCreated: string;
    dateModified: string;
    dbserver: {[key: string]: string};
    dbserverId: string;
    description: string;
    id: string;
    infos: outputs.NdbCloneDatabaseNodeInfo[];
    name: string;
    primary: boolean;
    properties: outputs.NdbCloneDatabaseNodeProperty[];
    protectionDomainId: string;
    protectionDomains: outputs.NdbCloneDatabaseNodeProtectionDomain[];
    softwareInstallationId: string;
    status: string;
    tags: outputs.NdbCloneDatabaseNodeTag[];
}

export interface NdbCloneDatabaseNodeInfo {
    info: {[key: string]: string};
    secureInfo: {[key: string]: string};
}

export interface NdbCloneDatabaseNodeProperty {
    description: string;
    name: string;
    refId: string;
    secure: boolean;
    value: string;
}

export interface NdbCloneDatabaseNodeProtectionDomain {
    assocEntities: string[];
    cloudId: string;
    dateCreated: string;
    dateModified: string;
    description: string;
    eraCreated: boolean;
    id: string;
    name: string;
    ownerId: string;
    primaryHost: string;
    properties: outputs.NdbCloneDatabaseNodeProtectionDomainProperty[];
    status: string;
    type: string;
}

export interface NdbCloneDatabaseNodeProtectionDomainProperty {
    description: string;
    name: string;
    refId: string;
    secure: boolean;
    value: string;
}

export interface NdbCloneDatabaseNodeTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface NdbCloneInfo {
    bpgConfigs: outputs.NdbCloneInfoBpgConfig[];
    secureInfo: {[key: string]: string};
}

export interface NdbCloneInfoBpgConfig {
    bpgDbParams: outputs.NdbCloneInfoBpgConfigBpgDbParam[];
    storages: outputs.NdbCloneInfoBpgConfigStorage[];
    vmProperties: outputs.NdbCloneInfoBpgConfigVmProperty[];
}

export interface NdbCloneInfoBpgConfigBpgDbParam {
    effectiveCacheSize: string;
    maintenanceWorkMem: string;
    maxParallelWorkersPerGather: string;
    maxWorkerProcesses: string;
    sharedBuffers: string;
    workMem: string;
}

export interface NdbCloneInfoBpgConfigStorage {
    archiveStorages: outputs.NdbCloneInfoBpgConfigStorageArchiveStorage[];
    dataDisks: outputs.NdbCloneInfoBpgConfigStorageDataDisk[];
    logDisks: outputs.NdbCloneInfoBpgConfigStorageLogDisk[];
}

export interface NdbCloneInfoBpgConfigStorageArchiveStorage {
    size: number;
}

export interface NdbCloneInfoBpgConfigStorageDataDisk {
    count: number;
}

export interface NdbCloneInfoBpgConfigStorageLogDisk {
    count: number;
    size: number;
}

export interface NdbCloneInfoBpgConfigVmProperty {
    dirtyBackgroundRatio: number;
    dirtyExpireCentisecs: number;
    dirtyRatio: number;
    dirtyWritebackCentisecs: number;
    nrHugepages: number;
    overcommitMemory: number;
    swappiness: number;
}

export interface NdbCloneLcmConfig {
    databaseLcmConfigs?: outputs.NdbCloneLcmConfigDatabaseLcmConfig[];
}

export interface NdbCloneLcmConfigDatabaseLcmConfig {
    expiryDetails?: outputs.NdbCloneLcmConfigDatabaseLcmConfigExpiryDetail[];
    refreshDetails?: outputs.NdbCloneLcmConfigDatabaseLcmConfigRefreshDetail[];
}

export interface NdbCloneLcmConfigDatabaseLcmConfigExpiryDetail {
    deleteDatabase?: boolean;
    expireInDays?: number;
    expiryDateTimezone: string;
}

export interface NdbCloneLcmConfigDatabaseLcmConfigRefreshDetail {
    refreshDateTimezone?: string;
    refreshInDays?: number;
    refreshTime?: string;
}

export interface NdbCloneLinkedDatabase {
    databaseName: string;
    databaseStatus: string;
    dateCreated: string;
    dateModified: string;
    description: string;
    id: string;
    infos: outputs.NdbCloneLinkedDatabaseInfo[];
    metric: {[key: string]: string};
    name: string;
    parentDatabaseId: string;
    parentLinkedDatabaseId: string;
    snapshotId: string;
    status: string;
    timezone: string;
}

export interface NdbCloneLinkedDatabaseInfo {
    info: {[key: string]: string};
    secureInfo: {[key: string]: string};
}

export interface NdbCloneNode {
    computeProfileId?: string;
    dbserverId?: string;
    networkProfileId?: string;
    newDbServerTimeZone?: string;
    nxClusterId?: string;
    /**
     * List of all the properties
     */
    properties?: outputs.NdbCloneNodeProperty[];
    vmName?: string;
}

export interface NdbCloneNodeProperty {
    name?: string;
    value?: string;
}

export interface NdbClonePostgresqlInfo {
    dbPassword: string;
    dbserverDescription?: string;
    postCloneCmd?: string;
    preCloneCmd?: string;
    vmName: string;
}

export interface NdbCloneProperty {
    name: string;
    value: string;
}

export interface NdbCloneRefreshTimeouts {
    create?: string;
}

export interface NdbCloneTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface NdbCloneTimeMachine {
    accessLevel: string;
    clone: boolean;
    clones: string;
    clustered: boolean;
    database: string;
    databaseId: string;
    dateCreated: string;
    dateModified: string;
    description: string;
    eaStatus: string;
    id: string;
    metric: string;
    name: string;
    properties: outputs.NdbCloneTimeMachineProperty[];
    scheduleId: string;
    schedules: outputs.NdbCloneTimeMachineSchedule[];
    scope: string;
    slaId: string;
    slaUpdateInProgress: boolean;
    slaUpdateMetadata: string;
    slas: outputs.NdbCloneTimeMachineSla[];
    sourceNxClusters: string[];
    status: string;
    tags: outputs.NdbCloneTimeMachineTag[];
    type: string;
}

export interface NdbCloneTimeMachineProperty {
    description: string;
    name: string;
    refId: string;
    secure: boolean;
    value: string;
}

export interface NdbCloneTimeMachineSchedule {
    continuousSchedules: outputs.NdbCloneTimeMachineScheduleContinuousSchedule[];
    dailySchedules: outputs.NdbCloneTimeMachineScheduleDailySchedule[];
    dateCreated: string;
    dateModified: string;
    description: string;
    globalPolicy: boolean;
    id: string;
    monthlySchedules: outputs.NdbCloneTimeMachineScheduleMonthlySchedule[];
    name: string;
    ownerId: string;
    quartelySchedules: outputs.NdbCloneTimeMachineScheduleQuartelySchedule[];
    referenceCount: number;
    snapshotTimeOfDays: outputs.NdbCloneTimeMachineScheduleSnapshotTimeOfDay[];
    startTime: string;
    systemPolicy: boolean;
    timeZone: string;
    uniqueName: string;
    weeklySchedules: outputs.NdbCloneTimeMachineScheduleWeeklySchedule[];
    yearlySchedules: outputs.NdbCloneTimeMachineScheduleYearlySchedule[];
}

export interface NdbCloneTimeMachineScheduleContinuousSchedule {
    enabled: boolean;
    logBackupInterval: number;
    snapshotsPerDay: number;
}

export interface NdbCloneTimeMachineScheduleDailySchedule {
    enabled: boolean;
}

export interface NdbCloneTimeMachineScheduleMonthlySchedule {
    dayOfMonth: number;
    enabled: boolean;
}

export interface NdbCloneTimeMachineScheduleQuartelySchedule {
    dayOfMonth: number;
    enabled: boolean;
    startMonth: string;
    startMonthValue: string;
}

export interface NdbCloneTimeMachineScheduleSnapshotTimeOfDay {
    extra: boolean;
    hours: number;
    minutes: number;
    seconds: number;
}

export interface NdbCloneTimeMachineScheduleWeeklySchedule {
    dayOfWeek: string;
    dayOfWeekValue: string;
    enabled: boolean;
}

export interface NdbCloneTimeMachineScheduleYearlySchedule {
    dayOfMonth: number;
    enabled: boolean;
    month: string;
    monthValue: string;
}

export interface NdbCloneTimeMachineSla {
    continuousRetention: number;
    currentActiveFrequency: string;
    dailyRetention: number;
    dateCreated: string;
    dateModified: string;
    description: string;
    id: string;
    monthlyRetention: number;
    name: string;
    ownerId: string;
    pitrEnabled: boolean;
    quarterlyRetention: number;
    referenceCount: number;
    systemSla: boolean;
    uniqueName: string;
    weeklyRetention: number;
    yearlyRetention: number;
}

export interface NdbCloneTimeMachineTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface NdbCloneTimeouts {
    create?: string;
    delete?: string;
}

export interface NdbClusterAgentNetworkInfo {
    dns?: string;
    ntp?: string;
}

export interface NdbClusterEntityCount {
    dbServers: number;
    engineCounts: outputs.NdbClusterEntityCountEngineCount[];
}

export interface NdbClusterEntityCountEngineCount {
    mariadbDatabases: outputs.NdbClusterEntityCountEngineCountMariadbDatabase[];
    mongodbDatabases: outputs.NdbClusterEntityCountEngineCountMongodbDatabase[];
    mysqlDatabases: outputs.NdbClusterEntityCountEngineCountMysqlDatabase[];
    oracleDatabases: outputs.NdbClusterEntityCountEngineCountOracleDatabase[];
    postgresDatabases: outputs.NdbClusterEntityCountEngineCountPostgresDatabase[];
    saphanaDatabases: outputs.NdbClusterEntityCountEngineCountSaphanaDatabase[];
    sqlserverDatabases: outputs.NdbClusterEntityCountEngineCountSqlserverDatabase[];
}

export interface NdbClusterEntityCountEngineCountMariadbDatabase {
    profiles: outputs.NdbClusterEntityCountEngineCountMariadbDatabaseProfile[];
    timeMachines: number;
}

export interface NdbClusterEntityCountEngineCountMariadbDatabaseProfile {
    compute: number;
    databaseParameter: number;
    network: number;
    software: number;
    storage: number;
    windowsDomain: number;
}

export interface NdbClusterEntityCountEngineCountMongodbDatabase {
    profiles: outputs.NdbClusterEntityCountEngineCountMongodbDatabaseProfile[];
    timeMachines: number;
}

export interface NdbClusterEntityCountEngineCountMongodbDatabaseProfile {
    compute: number;
    databaseParameter: number;
    network: number;
    software: number;
    storage: number;
    windowsDomain: number;
}

export interface NdbClusterEntityCountEngineCountMysqlDatabase {
    profiles: outputs.NdbClusterEntityCountEngineCountMysqlDatabaseProfile[];
    timeMachines: number;
}

export interface NdbClusterEntityCountEngineCountMysqlDatabaseProfile {
    compute: number;
    databaseParameter: number;
    network: number;
    software: number;
    storage: number;
    windowsDomain: number;
}

export interface NdbClusterEntityCountEngineCountOracleDatabase {
    profiles: outputs.NdbClusterEntityCountEngineCountOracleDatabaseProfile[];
    timeMachines: number;
}

export interface NdbClusterEntityCountEngineCountOracleDatabaseProfile {
    compute: number;
    databaseParameter: number;
    network: number;
    software: number;
    storage: number;
    windowsDomain: number;
}

export interface NdbClusterEntityCountEngineCountPostgresDatabase {
    profiles: outputs.NdbClusterEntityCountEngineCountPostgresDatabaseProfile[];
    timeMachines: number;
}

export interface NdbClusterEntityCountEngineCountPostgresDatabaseProfile {
    compute: number;
    databaseParameter: number;
    network: number;
    software: number;
    storage: number;
    windowsDomain: number;
}

export interface NdbClusterEntityCountEngineCountSaphanaDatabase {
    profiles: outputs.NdbClusterEntityCountEngineCountSaphanaDatabaseProfile[];
    timeMachines: number;
}

export interface NdbClusterEntityCountEngineCountSaphanaDatabaseProfile {
    compute: number;
    databaseParameter: number;
    network: number;
    software: number;
    storage: number;
    windowsDomain: number;
}

export interface NdbClusterEntityCountEngineCountSqlserverDatabase {
    profiles: outputs.NdbClusterEntityCountEngineCountSqlserverDatabaseProfile[];
    timeMachines: number;
}

export interface NdbClusterEntityCountEngineCountSqlserverDatabaseProfile {
    compute: number;
    databaseParameter: number;
    network: number;
    software: number;
    storage: number;
    windowsDomain: number;
}

export interface NdbClusterNetworksInfo {
    accessTypes?: string[];
    networkInfos?: outputs.NdbClusterNetworksInfoNetworkInfo[];
    type?: string;
}

export interface NdbClusterNetworksInfoNetworkInfo {
    gateway?: string;
    staticIp?: string;
    subnetMask?: string;
    vlanName?: string;
}

export interface NdbClusterProperty {
    description: string;
    name: string;
    refId: string;
    secure: boolean;
    value: string;
}

export interface NdbClusterResourceConfig {
    memoryThresholdPercentage: number;
    storageThresholdPercentage: number;
}

export interface NdbDatabaseActionargument {
    name: string;
    value: string;
}

export interface NdbDatabaseClusterInfo {
    clusterIpInfos: outputs.NdbDatabaseClusterInfoClusterIpInfo[];
}

export interface NdbDatabaseClusterInfoClusterIpInfo {
    ipInfos?: outputs.NdbDatabaseClusterInfoClusterIpInfoIpInfo[];
    nxClusterId: string;
}

export interface NdbDatabaseClusterInfoClusterIpInfoIpInfo {
    ipAddresses?: string[];
    ipType?: string;
}

export interface NdbDatabaseDatabaseNode {
    accessLevel: {[key: string]: string};
    databaseId: string;
    databaseStatus: string;
    dateCreated: string;
    dateModified: string;
    dbserver: {[key: string]: string};
    dbserverId: string;
    description: string;
    id: string;
    infos: outputs.NdbDatabaseDatabaseNodeInfo[];
    name: string;
    primary: boolean;
    properties: outputs.NdbDatabaseDatabaseNodeProperty[];
    protectionDomainId: string;
    protectionDomains: outputs.NdbDatabaseDatabaseNodeProtectionDomain[];
    softwareInstallationId: string;
    status: string;
    tags: outputs.NdbDatabaseDatabaseNodeTag[];
}

export interface NdbDatabaseDatabaseNodeInfo {
    info: {[key: string]: string};
    secureInfo: {[key: string]: string};
}

export interface NdbDatabaseDatabaseNodeProperty {
    description: string;
    name: string;
    refId: string;
    secure: boolean;
    value: string;
}

export interface NdbDatabaseDatabaseNodeProtectionDomain {
    assocEntities: string[];
    cloudId: string;
    dateCreated: string;
    dateModified: string;
    description: string;
    eraCreated: boolean;
    id: string;
    name: string;
    ownerId: string;
    primaryHost: string;
    properties: outputs.NdbDatabaseDatabaseNodeProtectionDomainProperty[];
    status: string;
    type: string;
}

export interface NdbDatabaseDatabaseNodeProtectionDomainProperty {
    description: string;
    name: string;
    refId: string;
    secure: boolean;
    value: string;
}

export interface NdbDatabaseDatabaseNodeTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface NdbDatabaseInfo {
    bpgConfigs: outputs.NdbDatabaseInfoBpgConfig[];
    secureInfo: {[key: string]: string};
}

export interface NdbDatabaseInfoBpgConfig {
    bpgDbParams: outputs.NdbDatabaseInfoBpgConfigBpgDbParam[];
    storages: outputs.NdbDatabaseInfoBpgConfigStorage[];
    vmProperties: outputs.NdbDatabaseInfoBpgConfigVmProperty[];
}

export interface NdbDatabaseInfoBpgConfigBpgDbParam {
    effectiveCacheSize: string;
    maintenanceWorkMem: string;
    maxParallelWorkersPerGather: string;
    maxWorkerProcesses: string;
    sharedBuffers: string;
    workMem: string;
}

export interface NdbDatabaseInfoBpgConfigStorage {
    archiveStorages: outputs.NdbDatabaseInfoBpgConfigStorageArchiveStorage[];
    dataDisks: outputs.NdbDatabaseInfoBpgConfigStorageDataDisk[];
    logDisks: outputs.NdbDatabaseInfoBpgConfigStorageLogDisk[];
}

export interface NdbDatabaseInfoBpgConfigStorageArchiveStorage {
    size: number;
}

export interface NdbDatabaseInfoBpgConfigStorageDataDisk {
    count: number;
}

export interface NdbDatabaseInfoBpgConfigStorageLogDisk {
    count: number;
    size: number;
}

export interface NdbDatabaseInfoBpgConfigVmProperty {
    dirtyBackgroundRatio: number;
    dirtyExpireCentisecs: number;
    dirtyRatio: number;
    dirtyWritebackCentisecs: number;
    nrHugepages: number;
    overcommitMemory: number;
    swappiness: number;
}

export interface NdbDatabaseLcmConfig {
    expiryDetails: outputs.NdbDatabaseLcmConfigExpiryDetail[];
    postDeleteCommands: outputs.NdbDatabaseLcmConfigPostDeleteCommand[];
    preDeleteCommands: outputs.NdbDatabaseLcmConfigPreDeleteCommand[];
    refreshDetails: outputs.NdbDatabaseLcmConfigRefreshDetail[];
}

export interface NdbDatabaseLcmConfigExpiryDetail {
    deleteDatabase: boolean;
    deleteTimeMachine: boolean;
    deleteVm: boolean;
    effectiveTimestamp: string;
    expireInDays: number;
    expiryDateTimezone: string;
    expiryTimestamp: string;
    remindBeforeInDays: number;
    userCreated: boolean;
}

export interface NdbDatabaseLcmConfigPostDeleteCommand {
    command: string;
}

export interface NdbDatabaseLcmConfigPreDeleteCommand {
    command: string;
}

export interface NdbDatabaseLcmConfigRefreshDetail {
    lastRefreshDate: string;
    nextRefreshDate: string;
    refreshDateTimezone: string;
    refreshInDays: number;
    refreshInHours: number;
    refreshInMonths: number;
    refreshTime: string;
}

export interface NdbDatabaseLinkedDatabase {
    databaseName: string;
    databaseStatus: string;
    dateCreated: string;
    dateModified: string;
    description: string;
    id: string;
    infos: outputs.NdbDatabaseLinkedDatabaseInfo[];
    metric: {[key: string]: string};
    name: string;
    parentDatabaseId: string;
    parentLinkedDatabaseId: string;
    snapshotId: string;
    status: string;
    timezone: string;
}

export interface NdbDatabaseLinkedDatabaseInfo {
    info: {[key: string]: string};
    secureInfo: {[key: string]: string};
}

export interface NdbDatabaseMaintenanceTasks {
    maintenanceWindowId?: string;
    tasks?: outputs.NdbDatabaseMaintenanceTasksTask[];
}

export interface NdbDatabaseMaintenanceTasksTask {
    postCommand?: string;
    preCommand?: string;
    taskType?: string;
}

export interface NdbDatabaseNode {
    computeprofileid?: string;
    dbserverid?: string;
    ipInfos?: outputs.NdbDatabaseNodeIpInfo[];
    networkprofileid?: string;
    nxClusterId?: string;
    properties?: outputs.NdbDatabaseNodeProperty[];
    vmname: string;
}

export interface NdbDatabaseNodeIpInfo {
    ipAddresses?: string[];
    ipType?: string;
}

export interface NdbDatabaseNodeProperty {
    name: string;
    value: string;
}

export interface NdbDatabasePostgresqlInfo {
    allocatePgHugepage?: boolean;
    authMethod?: string;
    autoTuneStagingDrive?: boolean;
    clusterDatabase?: boolean;
    databaseNames: string;
    databaseSize: string;
    dbPassword: string;
    haInstance?: outputs.NdbDatabasePostgresqlInfoHaInstance;
    listenerPort: string;
    postCreateScript?: string;
    preCreateScript?: string;
}

export interface NdbDatabasePostgresqlInfoHaInstance {
    archiveWalExpireDays?: number;
    backupPolicy?: string;
    clusterDescription?: string;
    clusterName: string;
    deployHaproxy?: boolean;
    enablePeerAuth?: boolean;
    enableSynchronousMode?: boolean;
    failoverMode?: string;
    nodeType?: string;
    patroniClusterName: string;
    provisionVirtualIp?: boolean;
    proxyReadPort: string;
    proxyWritePort: string;
}

export interface NdbDatabaseProperty {
    name: string;
    value: string;
}

export interface NdbDatabaseRestoreDatabaseNode {
    accessLevel: {[key: string]: string};
    databaseId: string;
    databaseStatus: string;
    dateCreated: string;
    dateModified: string;
    dbserver: {[key: string]: string};
    dbserverId: string;
    description: string;
    id: string;
    infos: outputs.NdbDatabaseRestoreDatabaseNodeInfo[];
    name: string;
    primary: boolean;
    properties: outputs.NdbDatabaseRestoreDatabaseNodeProperty[];
    protectionDomainId: string;
    protectionDomains: outputs.NdbDatabaseRestoreDatabaseNodeProtectionDomain[];
    softwareInstallationId: string;
    status: string;
    tags: outputs.NdbDatabaseRestoreDatabaseNodeTag[];
}

export interface NdbDatabaseRestoreDatabaseNodeInfo {
    info: {[key: string]: string};
    secureInfo: {[key: string]: string};
}

export interface NdbDatabaseRestoreDatabaseNodeProperty {
    description: string;
    name: string;
    refId: string;
    secure: boolean;
    value: string;
}

export interface NdbDatabaseRestoreDatabaseNodeProtectionDomain {
    assocEntities: string[];
    cloudId: string;
    dateCreated: string;
    dateModified: string;
    description: string;
    eraCreated: boolean;
    id: string;
    name: string;
    ownerId: string;
    primaryHost: string;
    properties: outputs.NdbDatabaseRestoreDatabaseNodeProtectionDomainProperty[];
    status: string;
    type: string;
}

export interface NdbDatabaseRestoreDatabaseNodeProtectionDomainProperty {
    description: string;
    name: string;
    refId: string;
    secure: boolean;
    value: string;
}

export interface NdbDatabaseRestoreDatabaseNodeTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface NdbDatabaseRestoreInfo {
    bpgConfigs: outputs.NdbDatabaseRestoreInfoBpgConfig[];
    secureInfo: {[key: string]: string};
}

export interface NdbDatabaseRestoreInfoBpgConfig {
    bpgDbParams: outputs.NdbDatabaseRestoreInfoBpgConfigBpgDbParam[];
    storages: outputs.NdbDatabaseRestoreInfoBpgConfigStorage[];
    vmProperties: outputs.NdbDatabaseRestoreInfoBpgConfigVmProperty[];
}

export interface NdbDatabaseRestoreInfoBpgConfigBpgDbParam {
    effectiveCacheSize: string;
    maintenanceWorkMem: string;
    maxParallelWorkersPerGather: string;
    maxWorkerProcesses: string;
    sharedBuffers: string;
    workMem: string;
}

export interface NdbDatabaseRestoreInfoBpgConfigStorage {
    archiveStorages: outputs.NdbDatabaseRestoreInfoBpgConfigStorageArchiveStorage[];
    dataDisks: outputs.NdbDatabaseRestoreInfoBpgConfigStorageDataDisk[];
    logDisks: outputs.NdbDatabaseRestoreInfoBpgConfigStorageLogDisk[];
}

export interface NdbDatabaseRestoreInfoBpgConfigStorageArchiveStorage {
    size: number;
}

export interface NdbDatabaseRestoreInfoBpgConfigStorageDataDisk {
    count: number;
}

export interface NdbDatabaseRestoreInfoBpgConfigStorageLogDisk {
    count: number;
    size: number;
}

export interface NdbDatabaseRestoreInfoBpgConfigVmProperty {
    dirtyBackgroundRatio: number;
    dirtyExpireCentisecs: number;
    dirtyRatio: number;
    dirtyWritebackCentisecs: number;
    nrHugepages: number;
    overcommitMemory: number;
    swappiness: number;
}

export interface NdbDatabaseRestoreLcmConfig {
    expiryDetails: outputs.NdbDatabaseRestoreLcmConfigExpiryDetail[];
    postDeleteCommands: outputs.NdbDatabaseRestoreLcmConfigPostDeleteCommand[];
    preDeleteCommands: outputs.NdbDatabaseRestoreLcmConfigPreDeleteCommand[];
    refreshDetails: outputs.NdbDatabaseRestoreLcmConfigRefreshDetail[];
}

export interface NdbDatabaseRestoreLcmConfigExpiryDetail {
    deleteDatabase: boolean;
    deleteTimeMachine: boolean;
    deleteVm: boolean;
    effectiveTimestamp: string;
    expireInDays: number;
    expiryDateTimezone: string;
    expiryTimestamp: string;
    remindBeforeInDays: number;
    userCreated: boolean;
}

export interface NdbDatabaseRestoreLcmConfigPostDeleteCommand {
    command: string;
}

export interface NdbDatabaseRestoreLcmConfigPreDeleteCommand {
    command: string;
}

export interface NdbDatabaseRestoreLcmConfigRefreshDetail {
    lastRefreshDate: string;
    nextRefreshDate: string;
    refreshDateTimezone: string;
    refreshInDays: number;
    refreshInHours: number;
    refreshInMonths: number;
    refreshTime: string;
}

export interface NdbDatabaseRestoreLinkedDatabase {
    databaseName: string;
    databaseStatus: string;
    dateCreated: string;
    dateModified: string;
    description: string;
    id: string;
    infos: outputs.NdbDatabaseRestoreLinkedDatabaseInfo[];
    metric: {[key: string]: string};
    name: string;
    parentDatabaseId: string;
    parentLinkedDatabaseId: string;
    snapshotId: string;
    status: string;
    timezone: string;
}

export interface NdbDatabaseRestoreLinkedDatabaseInfo {
    info: {[key: string]: string};
    secureInfo: {[key: string]: string};
}

export interface NdbDatabaseRestoreProperty {
    name: string;
    value: string;
}

export interface NdbDatabaseRestoreTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface NdbDatabaseRestoreTimeMachine {
    accessLevel: string;
    clone: boolean;
    clones: string;
    clustered: boolean;
    database: string;
    databaseId: string;
    dateCreated: string;
    dateModified: string;
    description: string;
    eaStatus: string;
    id: string;
    metric: string;
    name: string;
    properties: outputs.NdbDatabaseRestoreTimeMachineProperty[];
    scheduleId: string;
    schedules: outputs.NdbDatabaseRestoreTimeMachineSchedule[];
    scope: string;
    slaId: string;
    slaUpdateInProgress: boolean;
    slaUpdateMetadata: string;
    slas: outputs.NdbDatabaseRestoreTimeMachineSla[];
    sourceNxClusters: string[];
    status: string;
    tags: outputs.NdbDatabaseRestoreTimeMachineTag[];
    type: string;
}

export interface NdbDatabaseRestoreTimeMachineProperty {
    description: string;
    name: string;
    refId: string;
    secure: boolean;
    value: string;
}

export interface NdbDatabaseRestoreTimeMachineSchedule {
    continuousSchedules: outputs.NdbDatabaseRestoreTimeMachineScheduleContinuousSchedule[];
    dailySchedules: outputs.NdbDatabaseRestoreTimeMachineScheduleDailySchedule[];
    dateCreated: string;
    dateModified: string;
    description: string;
    globalPolicy: boolean;
    id: string;
    monthlySchedules: outputs.NdbDatabaseRestoreTimeMachineScheduleMonthlySchedule[];
    name: string;
    ownerId: string;
    quartelySchedules: outputs.NdbDatabaseRestoreTimeMachineScheduleQuartelySchedule[];
    referenceCount: number;
    snapshotTimeOfDays: outputs.NdbDatabaseRestoreTimeMachineScheduleSnapshotTimeOfDay[];
    startTime: string;
    systemPolicy: boolean;
    timeZone: string;
    uniqueName: string;
    weeklySchedules: outputs.NdbDatabaseRestoreTimeMachineScheduleWeeklySchedule[];
    yearlySchedules: outputs.NdbDatabaseRestoreTimeMachineScheduleYearlySchedule[];
}

export interface NdbDatabaseRestoreTimeMachineScheduleContinuousSchedule {
    enabled: boolean;
    logBackupInterval: number;
    snapshotsPerDay: number;
}

export interface NdbDatabaseRestoreTimeMachineScheduleDailySchedule {
    enabled: boolean;
}

export interface NdbDatabaseRestoreTimeMachineScheduleMonthlySchedule {
    dayOfMonth: number;
    enabled: boolean;
}

export interface NdbDatabaseRestoreTimeMachineScheduleQuartelySchedule {
    dayOfMonth: number;
    enabled: boolean;
    startMonth: string;
    startMonthValue: string;
}

export interface NdbDatabaseRestoreTimeMachineScheduleSnapshotTimeOfDay {
    extra: boolean;
    hours: number;
    minutes: number;
    seconds: number;
}

export interface NdbDatabaseRestoreTimeMachineScheduleWeeklySchedule {
    dayOfWeek: string;
    dayOfWeekValue: string;
    enabled: boolean;
}

export interface NdbDatabaseRestoreTimeMachineScheduleYearlySchedule {
    dayOfMonth: number;
    enabled: boolean;
    month: string;
    monthValue: string;
}

export interface NdbDatabaseRestoreTimeMachineSla {
    continuousRetention: number;
    currentActiveFrequency: string;
    dailyRetention: number;
    dateCreated: string;
    dateModified: string;
    description: string;
    id: string;
    monthlyRetention: number;
    name: string;
    ownerId: string;
    pitrEnabled: boolean;
    quarterlyRetention: number;
    referenceCount: number;
    systemSla: boolean;
    uniqueName: string;
    weeklyRetention: number;
    yearlyRetention: number;
}

export interface NdbDatabaseRestoreTimeMachineTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface NdbDatabaseRestoreTimeouts {
    create?: string;
}

export interface NdbDatabaseScaleDatabaseNode {
    accessLevel: {[key: string]: string};
    databaseId: string;
    databaseStatus: string;
    dateCreated: string;
    dateModified: string;
    dbserver: {[key: string]: string};
    dbserverId: string;
    description: string;
    id: string;
    infos: outputs.NdbDatabaseScaleDatabaseNodeInfo[];
    name: string;
    primary: boolean;
    properties: outputs.NdbDatabaseScaleDatabaseNodeProperty[];
    protectionDomainId: string;
    protectionDomains: outputs.NdbDatabaseScaleDatabaseNodeProtectionDomain[];
    softwareInstallationId: string;
    status: string;
    tags: outputs.NdbDatabaseScaleDatabaseNodeTag[];
}

export interface NdbDatabaseScaleDatabaseNodeInfo {
    info: {[key: string]: string};
    secureInfo: {[key: string]: string};
}

export interface NdbDatabaseScaleDatabaseNodeProperty {
    description: string;
    name: string;
    refId: string;
    secure: boolean;
    value: string;
}

export interface NdbDatabaseScaleDatabaseNodeProtectionDomain {
    assocEntities: string[];
    cloudId: string;
    dateCreated: string;
    dateModified: string;
    description: string;
    eraCreated: boolean;
    id: string;
    name: string;
    ownerId: string;
    primaryHost: string;
    properties: outputs.NdbDatabaseScaleDatabaseNodeProtectionDomainProperty[];
    status: string;
    type: string;
}

export interface NdbDatabaseScaleDatabaseNodeProtectionDomainProperty {
    description: string;
    name: string;
    refId: string;
    secure: boolean;
    value: string;
}

export interface NdbDatabaseScaleDatabaseNodeTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface NdbDatabaseScaleInfo {
    bpgConfigs: outputs.NdbDatabaseScaleInfoBpgConfig[];
    secureInfo: {[key: string]: string};
}

export interface NdbDatabaseScaleInfoBpgConfig {
    bpgDbParams: outputs.NdbDatabaseScaleInfoBpgConfigBpgDbParam[];
    storages: outputs.NdbDatabaseScaleInfoBpgConfigStorage[];
    vmProperties: outputs.NdbDatabaseScaleInfoBpgConfigVmProperty[];
}

export interface NdbDatabaseScaleInfoBpgConfigBpgDbParam {
    effectiveCacheSize: string;
    maintenanceWorkMem: string;
    maxParallelWorkersPerGather: string;
    maxWorkerProcesses: string;
    sharedBuffers: string;
    workMem: string;
}

export interface NdbDatabaseScaleInfoBpgConfigStorage {
    archiveStorages: outputs.NdbDatabaseScaleInfoBpgConfigStorageArchiveStorage[];
    dataDisks: outputs.NdbDatabaseScaleInfoBpgConfigStorageDataDisk[];
    logDisks: outputs.NdbDatabaseScaleInfoBpgConfigStorageLogDisk[];
}

export interface NdbDatabaseScaleInfoBpgConfigStorageArchiveStorage {
    size: number;
}

export interface NdbDatabaseScaleInfoBpgConfigStorageDataDisk {
    count: number;
}

export interface NdbDatabaseScaleInfoBpgConfigStorageLogDisk {
    count: number;
    size: number;
}

export interface NdbDatabaseScaleInfoBpgConfigVmProperty {
    dirtyBackgroundRatio: number;
    dirtyExpireCentisecs: number;
    dirtyRatio: number;
    dirtyWritebackCentisecs: number;
    nrHugepages: number;
    overcommitMemory: number;
    swappiness: number;
}

export interface NdbDatabaseScaleLcmConfig {
    expiryDetails: outputs.NdbDatabaseScaleLcmConfigExpiryDetail[];
    postDeleteCommands: outputs.NdbDatabaseScaleLcmConfigPostDeleteCommand[];
    preDeleteCommands: outputs.NdbDatabaseScaleLcmConfigPreDeleteCommand[];
    refreshDetails: outputs.NdbDatabaseScaleLcmConfigRefreshDetail[];
}

export interface NdbDatabaseScaleLcmConfigExpiryDetail {
    deleteDatabase: boolean;
    deleteTimeMachine: boolean;
    deleteVm: boolean;
    effectiveTimestamp: string;
    expireInDays: number;
    expiryDateTimezone: string;
    expiryTimestamp: string;
    remindBeforeInDays: number;
    userCreated: boolean;
}

export interface NdbDatabaseScaleLcmConfigPostDeleteCommand {
    command: string;
}

export interface NdbDatabaseScaleLcmConfigPreDeleteCommand {
    command: string;
}

export interface NdbDatabaseScaleLcmConfigRefreshDetail {
    lastRefreshDate: string;
    nextRefreshDate: string;
    refreshDateTimezone: string;
    refreshInDays: number;
    refreshInHours: number;
    refreshInMonths: number;
    refreshTime: string;
}

export interface NdbDatabaseScaleLinkedDatabase {
    databaseName: string;
    databaseStatus: string;
    dateCreated: string;
    dateModified: string;
    description: string;
    id: string;
    infos: outputs.NdbDatabaseScaleLinkedDatabaseInfo[];
    metric: {[key: string]: string};
    name: string;
    parentDatabaseId: string;
    parentLinkedDatabaseId: string;
    snapshotId: string;
    status: string;
    timezone: string;
}

export interface NdbDatabaseScaleLinkedDatabaseInfo {
    info: {[key: string]: string};
    secureInfo: {[key: string]: string};
}

export interface NdbDatabaseScaleProperty {
    name: string;
    value: string;
}

export interface NdbDatabaseScaleTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface NdbDatabaseScaleTimeMachine {
    accessLevel: string;
    clone: boolean;
    clones: string;
    clustered: boolean;
    database: string;
    databaseId: string;
    dateCreated: string;
    dateModified: string;
    description: string;
    eaStatus: string;
    id: string;
    metric: string;
    name: string;
    properties: outputs.NdbDatabaseScaleTimeMachineProperty[];
    scheduleId: string;
    schedules: outputs.NdbDatabaseScaleTimeMachineSchedule[];
    scope: string;
    slaId: string;
    slaUpdateInProgress: boolean;
    slaUpdateMetadata: string;
    slas: outputs.NdbDatabaseScaleTimeMachineSla[];
    sourceNxClusters: string[];
    status: string;
    tags: outputs.NdbDatabaseScaleTimeMachineTag[];
    type: string;
}

export interface NdbDatabaseScaleTimeMachineProperty {
    description: string;
    name: string;
    refId: string;
    secure: boolean;
    value: string;
}

export interface NdbDatabaseScaleTimeMachineSchedule {
    continuousSchedules: outputs.NdbDatabaseScaleTimeMachineScheduleContinuousSchedule[];
    dailySchedules: outputs.NdbDatabaseScaleTimeMachineScheduleDailySchedule[];
    dateCreated: string;
    dateModified: string;
    description: string;
    globalPolicy: boolean;
    id: string;
    monthlySchedules: outputs.NdbDatabaseScaleTimeMachineScheduleMonthlySchedule[];
    name: string;
    ownerId: string;
    quartelySchedules: outputs.NdbDatabaseScaleTimeMachineScheduleQuartelySchedule[];
    referenceCount: number;
    snapshotTimeOfDays: outputs.NdbDatabaseScaleTimeMachineScheduleSnapshotTimeOfDay[];
    startTime: string;
    systemPolicy: boolean;
    timeZone: string;
    uniqueName: string;
    weeklySchedules: outputs.NdbDatabaseScaleTimeMachineScheduleWeeklySchedule[];
    yearlySchedules: outputs.NdbDatabaseScaleTimeMachineScheduleYearlySchedule[];
}

export interface NdbDatabaseScaleTimeMachineScheduleContinuousSchedule {
    enabled: boolean;
    logBackupInterval: number;
    snapshotsPerDay: number;
}

export interface NdbDatabaseScaleTimeMachineScheduleDailySchedule {
    enabled: boolean;
}

export interface NdbDatabaseScaleTimeMachineScheduleMonthlySchedule {
    dayOfMonth: number;
    enabled: boolean;
}

export interface NdbDatabaseScaleTimeMachineScheduleQuartelySchedule {
    dayOfMonth: number;
    enabled: boolean;
    startMonth: string;
    startMonthValue: string;
}

export interface NdbDatabaseScaleTimeMachineScheduleSnapshotTimeOfDay {
    extra: boolean;
    hours: number;
    minutes: number;
    seconds: number;
}

export interface NdbDatabaseScaleTimeMachineScheduleWeeklySchedule {
    dayOfWeek: string;
    dayOfWeekValue: string;
    enabled: boolean;
}

export interface NdbDatabaseScaleTimeMachineScheduleYearlySchedule {
    dayOfMonth: number;
    enabled: boolean;
    month: string;
    monthValue: string;
}

export interface NdbDatabaseScaleTimeMachineSla {
    continuousRetention: number;
    currentActiveFrequency: string;
    dailyRetention: number;
    dateCreated: string;
    dateModified: string;
    description: string;
    id: string;
    monthlyRetention: number;
    name: string;
    ownerId: string;
    pitrEnabled: boolean;
    quarterlyRetention: number;
    referenceCount: number;
    systemSla: boolean;
    uniqueName: string;
    weeklyRetention: number;
    yearlyRetention: number;
}

export interface NdbDatabaseScaleTimeMachineTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface NdbDatabaseScaleTimeouts {
    create?: string;
}

export interface NdbDatabaseSnapshotLcmConfig {
    expiryDetails: outputs.NdbDatabaseSnapshotLcmConfigExpiryDetail[];
    postDeleteCommands: outputs.NdbDatabaseSnapshotLcmConfigPostDeleteCommand[];
    preDeleteCommands: outputs.NdbDatabaseSnapshotLcmConfigPreDeleteCommand[];
    refreshDetails: outputs.NdbDatabaseSnapshotLcmConfigRefreshDetail[];
}

export interface NdbDatabaseSnapshotLcmConfigExpiryDetail {
    deleteDatabase: boolean;
    deleteTimeMachine: boolean;
    deleteVm: boolean;
    effectiveTimestamp: string;
    expireInDays: number;
    expiryDateTimezone: string;
    expiryTimestamp: string;
    remindBeforeInDays: number;
    userCreated: boolean;
}

export interface NdbDatabaseSnapshotLcmConfigPostDeleteCommand {
    command: string;
}

export interface NdbDatabaseSnapshotLcmConfigPreDeleteCommand {
    command: string;
}

export interface NdbDatabaseSnapshotLcmConfigRefreshDetail {
    lastRefreshDate: string;
    nextRefreshDate: string;
    refreshDateTimezone: string;
    refreshInDays: number;
    refreshInHours: number;
    refreshInMonths: number;
    refreshTime: string;
}

export interface NdbDatabaseSnapshotProperty {
    description: string;
    name: string;
    refId: string;
    secure: boolean;
    value: string;
}

export interface NdbDatabaseSnapshotTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface NdbDatabaseSnapshotTimeouts {
    create?: string;
    delete?: string;
}

export interface NdbDatabaseTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface NdbDatabaseTimeMachine {
    accessLevel: string;
    clone: boolean;
    clones: string;
    clustered: boolean;
    database: string;
    databaseId: string;
    dateCreated: string;
    dateModified: string;
    description: string;
    eaStatus: string;
    id: string;
    metric: string;
    name: string;
    properties: outputs.NdbDatabaseTimeMachineProperty[];
    scheduleId: string;
    schedules: outputs.NdbDatabaseTimeMachineSchedule[];
    scope: string;
    slaId: string;
    slaUpdateInProgress: boolean;
    slaUpdateMetadata: string;
    slas: outputs.NdbDatabaseTimeMachineSla[];
    sourceNxClusters: string[];
    status: string;
    tags: outputs.NdbDatabaseTimeMachineTag[];
    type: string;
}

export interface NdbDatabaseTimeMachineProperty {
    description: string;
    name: string;
    refId: string;
    secure: boolean;
    value: string;
}

export interface NdbDatabaseTimeMachineSchedule {
    continuousSchedules: outputs.NdbDatabaseTimeMachineScheduleContinuousSchedule[];
    dailySchedules: outputs.NdbDatabaseTimeMachineScheduleDailySchedule[];
    dateCreated: string;
    dateModified: string;
    description: string;
    globalPolicy: boolean;
    id: string;
    monthlySchedules: outputs.NdbDatabaseTimeMachineScheduleMonthlySchedule[];
    name: string;
    ownerId: string;
    quartelySchedules: outputs.NdbDatabaseTimeMachineScheduleQuartelySchedule[];
    referenceCount: number;
    snapshotTimeOfDays: outputs.NdbDatabaseTimeMachineScheduleSnapshotTimeOfDay[];
    startTime: string;
    systemPolicy: boolean;
    timeZone: string;
    uniqueName: string;
    weeklySchedules: outputs.NdbDatabaseTimeMachineScheduleWeeklySchedule[];
    yearlySchedules: outputs.NdbDatabaseTimeMachineScheduleYearlySchedule[];
}

export interface NdbDatabaseTimeMachineScheduleContinuousSchedule {
    enabled: boolean;
    logBackupInterval: number;
    snapshotsPerDay: number;
}

export interface NdbDatabaseTimeMachineScheduleDailySchedule {
    enabled: boolean;
}

export interface NdbDatabaseTimeMachineScheduleMonthlySchedule {
    dayOfMonth: number;
    enabled: boolean;
}

export interface NdbDatabaseTimeMachineScheduleQuartelySchedule {
    dayOfMonth: number;
    enabled: boolean;
    startMonth: string;
    startMonthValue: string;
}

export interface NdbDatabaseTimeMachineScheduleSnapshotTimeOfDay {
    extra: boolean;
    hours: number;
    minutes: number;
    seconds: number;
}

export interface NdbDatabaseTimeMachineScheduleWeeklySchedule {
    dayOfWeek: string;
    dayOfWeekValue: string;
    enabled: boolean;
}

export interface NdbDatabaseTimeMachineScheduleYearlySchedule {
    dayOfMonth: number;
    enabled: boolean;
    month: string;
    monthValue: string;
}

export interface NdbDatabaseTimeMachineSla {
    continuousRetention: number;
    currentActiveFrequency: string;
    dailyRetention: number;
    dateCreated: string;
    dateModified: string;
    description: string;
    id: string;
    monthlyRetention: number;
    name: string;
    ownerId: string;
    pitrEnabled: boolean;
    quarterlyRetention: number;
    referenceCount: number;
    systemSla: boolean;
    uniqueName: string;
    weeklyRetention: number;
    yearlyRetention: number;
}

export interface NdbDatabaseTimeMachineTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface NdbDatabaseTimemachineinfo {
    /**
     * description of autoTuneLogDrive
     */
    autotunelogdrive?: boolean;
    /**
     * description of time machine's
     */
    description?: string;
    /**
     * description of time machine's name
     */
    name: string;
    /**
     * description of schedule of time machine
     */
    schedule: outputs.NdbDatabaseTimemachineinfoSchedule;
    slaDetails?: outputs.NdbDatabaseTimemachineinfoSlaDetail[];
    /**
     * description of SLA ID.
     */
    slaid?: string;
    tags?: outputs.NdbDatabaseTimemachineinfoTag[];
}

export interface NdbDatabaseTimemachineinfoSchedule {
    /**
     * description of schedule of time machine
     */
    continuousschedule?: outputs.NdbDatabaseTimemachineinfoScheduleContinuousschedule;
    /**
     * description of schedule of time machine
     */
    monthlyschedule?: outputs.NdbDatabaseTimemachineinfoScheduleMonthlyschedule;
    /**
     * description of schedule of time machine
     */
    quartelyschedule?: outputs.NdbDatabaseTimemachineinfoScheduleQuartelyschedule;
    /**
     * description of schedule of time machine
     */
    snapshottimeofday?: outputs.NdbDatabaseTimemachineinfoScheduleSnapshottimeofday;
    /**
     * description of schedule of time machine
     */
    weeklyschedule?: outputs.NdbDatabaseTimemachineinfoScheduleWeeklyschedule;
    /**
     * description of schedule of time machine
     */
    yearlyschedule?: outputs.NdbDatabaseTimemachineinfoScheduleYearlyschedule;
}

export interface NdbDatabaseTimemachineinfoScheduleContinuousschedule {
    enabled: boolean;
    logbackupinterval: number;
    snapshotsperday: number;
}

export interface NdbDatabaseTimemachineinfoScheduleMonthlyschedule {
    dayofmonth: number;
    enabled: boolean;
}

export interface NdbDatabaseTimemachineinfoScheduleQuartelyschedule {
    dayofmonth: number;
    enabled: boolean;
    startmonth: string;
}

export interface NdbDatabaseTimemachineinfoScheduleSnapshottimeofday {
    hours: number;
    minutes: number;
    seconds: number;
}

export interface NdbDatabaseTimemachineinfoScheduleWeeklyschedule {
    dayofweek: string;
    enabled: boolean;
}

export interface NdbDatabaseTimemachineinfoScheduleYearlyschedule {
    dayofmonth: number;
    enabled: boolean;
    month: string;
}

export interface NdbDatabaseTimemachineinfoSlaDetail {
    primarySlas?: outputs.NdbDatabaseTimemachineinfoSlaDetailPrimarySla[];
}

export interface NdbDatabaseTimemachineinfoSlaDetailPrimarySla {
    nxClusterIds?: string[];
    /**
     * description of SLA ID.
     */
    slaId: string;
}

export interface NdbDatabaseTimemachineinfoTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface NdbDatabaseTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface NdbDbserverVmCredential {
    label?: string;
    password: string;
    username: string;
}

export interface NdbDbserverVmMaintenanceTasks {
    maintenanceWindowId?: string;
    tasks?: outputs.NdbDbserverVmMaintenanceTasksTask[];
}

export interface NdbDbserverVmMaintenanceTasksTask {
    postCommand?: string;
    preCommand?: string;
    taskType?: string;
}

export interface NdbDbserverVmPostgresDatabase {
    clientPublicKey?: string;
    vmName: string;
}

export interface NdbDbserverVmProperty {
    name: string;
    value: string;
}

export interface NdbDbserverVmTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface NdbDbserverVmTimeouts {
    create?: string;
    delete?: string;
}

export interface NdbLinkedDatabasesInfo {
    infos: outputs.NdbLinkedDatabasesInfoInfo[];
    secureInfo: {[key: string]: string};
}

export interface NdbLinkedDatabasesInfoInfo {
    createdBy: string;
}

export interface NdbLinkedDatabasesTimeouts {
    create?: string;
    delete?: string;
}

export interface NdbLogCatchupsTimeouts {
    create?: string;
}

export interface NdbMaintenanceTaskEntityTaskAssociation {
    accessLevel: string;
    dateCreated: string;
    dateModified: string;
    description: string;
    entity: string;
    entityId: string;
    entityType: string;
    id: string;
    maintenanceWindowId: string;
    maintenanceWindowOwnerId: string;
    name: string;
    ownerId: string;
    payloads: outputs.NdbMaintenanceTaskEntityTaskAssociationPayload[];
    properties: outputs.NdbMaintenanceTaskEntityTaskAssociationProperty[];
    status: string;
    tags: outputs.NdbMaintenanceTaskEntityTaskAssociationTag[];
    taskType: string;
}

export interface NdbMaintenanceTaskEntityTaskAssociationPayload {
    prePostCommands: outputs.NdbMaintenanceTaskEntityTaskAssociationPayloadPrePostCommand[];
}

export interface NdbMaintenanceTaskEntityTaskAssociationPayloadPrePostCommand {
    postCommand: string;
    preCommand: string;
}

export interface NdbMaintenanceTaskEntityTaskAssociationProperty {
    name: string;
    value: string;
}

export interface NdbMaintenanceTaskEntityTaskAssociationTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface NdbMaintenanceTaskTask {
    postCommand?: string;
    preCommand?: string;
    taskType?: string;
}

export interface NdbMaintenanceWindowEntityTaskAssoc {
    accessLevel: string;
    dateCreated: string;
    dateModified: string;
    description: string;
    entity: string;
    entityId: string;
    entityType: string;
    id: string;
    maintenanceWindowId: string;
    maintenanceWindowOwnerId: string;
    name: string;
    ownerId: string;
    payloads: outputs.NdbMaintenanceWindowEntityTaskAssocPayload[];
    properties: outputs.NdbMaintenanceWindowEntityTaskAssocProperty[];
    status: string;
    tags: outputs.NdbMaintenanceWindowEntityTaskAssocTag[];
    taskType: string;
}

export interface NdbMaintenanceWindowEntityTaskAssocPayload {
    prePostCommands: outputs.NdbMaintenanceWindowEntityTaskAssocPayloadPrePostCommand[];
}

export interface NdbMaintenanceWindowEntityTaskAssocPayloadPrePostCommand {
    postCommand: string;
    preCommand: string;
}

export interface NdbMaintenanceWindowEntityTaskAssocProperty {
    name: string;
    value: string;
}

export interface NdbMaintenanceWindowEntityTaskAssocTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface NdbMaintenanceWindowProperty {
    name: string;
    value: string;
}

export interface NdbMaintenanceWindowSchedule {
    dayOfWeek: string;
    duration: number;
    hour: number;
    minute: number;
    recurrence: string;
    startTime: string;
    threshold: string;
    timezone: string;
    weekOfMonth: number;
}

export interface NdbMaintenanceWindowTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface NdbNetworkIpPool {
    addresses: outputs.NdbNetworkIpPoolAddress[];
    endIp: string;
    id: string;
    modifiedBy: string;
    startIp: string;
}

export interface NdbNetworkIpPoolAddress {
    ip: string;
    status: string;
}

export interface NdbNetworkPropertiesMap {
    vlanGateway: string;
    vlanPrimaryDns: string;
    vlanSecondaryDns: string;
    vlanSubnetMask: string;
}

export interface NdbNetworkProperty {
    name: string;
    secure: boolean;
    value: string;
}

export interface NdbProfileClusterAvailability {
    dateCreated: string;
    dateModified: string;
    nxClusterId: string;
    ownerId: string;
    profileId: string;
    status: string;
}

export interface NdbProfileComputeProfile {
    corePerCpu?: string;
    cpus?: string;
    memorySize?: string;
}

export interface NdbProfileDatabaseParameterProfile {
    postgresDatabases?: outputs.NdbProfileDatabaseParameterProfilePostgresDatabase[];
}

export interface NdbProfileDatabaseParameterProfilePostgresDatabase {
    autovacuum?: string;
    autovacuumFreezeMaxAge?: string;
    autovacuumMaxWorkers?: string;
    autovacuumVacuumCostDelay?: string;
    autovacuumVacuumScaleFactor?: string;
    autovacuumVacuumThreshold?: string;
    autovacuumWorkMem?: string;
    checkpointCompletionTarget?: string;
    checkpointTimeout?: string;
    effectiveIoConcurrency?: string;
    maxConnections?: string;
    maxLocksPerTransaction?: string;
    maxPreparedTransactions?: string;
    maxReplicationSlots?: string;
    maxWalSenders?: string;
    maxWalSize?: string;
    maxWorkerProcesses?: string;
    minWalSize?: string;
    randomPageCost?: string;
    synchronousCommit?: string;
    timezone?: string;
    walBuffers?: string;
    walKeepSegments?: string;
}

export interface NdbProfileNetworkProfile {
    postgresDatabases?: outputs.NdbProfileNetworkProfilePostgresDatabase[];
    topology: string;
    versionClusterAssociations?: outputs.NdbProfileNetworkProfileVersionClusterAssociation[];
}

export interface NdbProfileNetworkProfilePostgresDatabase {
    haInstances?: outputs.NdbProfileNetworkProfilePostgresDatabaseHaInstance[];
    singleInstances?: outputs.NdbProfileNetworkProfilePostgresDatabaseSingleInstance[];
}

export interface NdbProfileNetworkProfilePostgresDatabaseHaInstance {
    clusterIds?: string[];
    clusterNames?: string[];
    numOfClusters?: string;
    vlanNames?: string[];
}

export interface NdbProfileNetworkProfilePostgresDatabaseSingleInstance {
    enableIpAddressSelection?: string;
    vlanName?: string;
}

export interface NdbProfileNetworkProfileVersionClusterAssociation {
    nxClusterId: string;
}

export interface NdbProfileSoftwareProfile {
    availableClusterIds?: string[];
    postgresDatabases?: outputs.NdbProfileSoftwareProfilePostgresDatabase[];
    topology: string;
}

export interface NdbProfileSoftwareProfilePostgresDatabase {
    baseProfileVersionDescription?: string;
    baseProfileVersionName?: string;
    dbSoftwareNotes?: string;
    osNotes?: string;
    sourceDbserverId?: string;
}

export interface NdbProfileVersion {
    dbVersion: string;
    deprecated: boolean;
    description: string;
    engineType: string;
    id: string;
    name: string;
    owner: string;
    profileId: string;
    properties: outputs.NdbProfileVersionProperty[];
    propertiesMap: {[key: string]: string};
    published: boolean;
    status: string;
    systemProfile: boolean;
    topology: string;
    type: string;
    version: string;
    versionClusterAssociations: outputs.NdbProfileVersionVersionClusterAssociation[];
}

export interface NdbProfileVersionProperty {
    name: string;
    secure: boolean;
    value: string;
}

export interface NdbProfileVersionVersionClusterAssociation {
    dateCreated: string;
    dateModified: string;
    nxClusterId: string;
    optimizedForProvisioning: boolean;
    ownerId: string;
    profileVersionId: string;
    properties: outputs.NdbProfileVersionVersionClusterAssociationProperty[];
    status: string;
}

export interface NdbProfileVersionVersionClusterAssociationProperty {
    name: string;
    secure: boolean;
    value: string;
}

export interface NdbRegisterDatabaseActionargument {
    name: string;
    value: string;
}

export interface NdbRegisterDatabaseDatabaseNode {
    accessLevel: {[key: string]: string};
    databaseId: string;
    databaseStatus: string;
    dateCreated: string;
    dateModified: string;
    dbserver: {[key: string]: string};
    dbserverId: string;
    description: string;
    id: string;
    infos: outputs.NdbRegisterDatabaseDatabaseNodeInfo[];
    name: string;
    primary: boolean;
    properties: outputs.NdbRegisterDatabaseDatabaseNodeProperty[];
    protectionDomainId: string;
    protectionDomains: outputs.NdbRegisterDatabaseDatabaseNodeProtectionDomain[];
    softwareInstallationId: string;
    status: string;
    tags: outputs.NdbRegisterDatabaseDatabaseNodeTag[];
}

export interface NdbRegisterDatabaseDatabaseNodeInfo {
    info: {[key: string]: string};
    secureInfo: {[key: string]: string};
}

export interface NdbRegisterDatabaseDatabaseNodeProperty {
    description: string;
    name: string;
    refId: string;
    secure: boolean;
    value: string;
}

export interface NdbRegisterDatabaseDatabaseNodeProtectionDomain {
    assocEntities: string[];
    cloudId: string;
    dateCreated: string;
    dateModified: string;
    description: string;
    eraCreated: boolean;
    id: string;
    name: string;
    ownerId: string;
    primaryHost: string;
    properties: outputs.NdbRegisterDatabaseDatabaseNodeProtectionDomainProperty[];
    status: string;
    type: string;
}

export interface NdbRegisterDatabaseDatabaseNodeProtectionDomainProperty {
    description: string;
    name: string;
    refId: string;
    secure: boolean;
    value: string;
}

export interface NdbRegisterDatabaseDatabaseNodeTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface NdbRegisterDatabaseInfo {
    bpgConfigs: outputs.NdbRegisterDatabaseInfoBpgConfig[];
    secureInfo: {[key: string]: string};
}

export interface NdbRegisterDatabaseInfoBpgConfig {
    bpgDbParams: outputs.NdbRegisterDatabaseInfoBpgConfigBpgDbParam[];
    storages: outputs.NdbRegisterDatabaseInfoBpgConfigStorage[];
    vmProperties: outputs.NdbRegisterDatabaseInfoBpgConfigVmProperty[];
}

export interface NdbRegisterDatabaseInfoBpgConfigBpgDbParam {
    effectiveCacheSize: string;
    maintenanceWorkMem: string;
    maxParallelWorkersPerGather: string;
    maxWorkerProcesses: string;
    sharedBuffers: string;
    workMem: string;
}

export interface NdbRegisterDatabaseInfoBpgConfigStorage {
    archiveStorages: outputs.NdbRegisterDatabaseInfoBpgConfigStorageArchiveStorage[];
    dataDisks: outputs.NdbRegisterDatabaseInfoBpgConfigStorageDataDisk[];
    logDisks: outputs.NdbRegisterDatabaseInfoBpgConfigStorageLogDisk[];
}

export interface NdbRegisterDatabaseInfoBpgConfigStorageArchiveStorage {
    size: number;
}

export interface NdbRegisterDatabaseInfoBpgConfigStorageDataDisk {
    count: number;
}

export interface NdbRegisterDatabaseInfoBpgConfigStorageLogDisk {
    count: number;
    size: number;
}

export interface NdbRegisterDatabaseInfoBpgConfigVmProperty {
    dirtyBackgroundRatio: number;
    dirtyExpireCentisecs: number;
    dirtyRatio: number;
    dirtyWritebackCentisecs: number;
    nrHugepages: number;
    overcommitMemory: number;
    swappiness: number;
}

export interface NdbRegisterDatabaseLcmConfig {
    expiryDetails: outputs.NdbRegisterDatabaseLcmConfigExpiryDetail[];
    postDeleteCommands: outputs.NdbRegisterDatabaseLcmConfigPostDeleteCommand[];
    preDeleteCommands: outputs.NdbRegisterDatabaseLcmConfigPreDeleteCommand[];
    refreshDetails: outputs.NdbRegisterDatabaseLcmConfigRefreshDetail[];
}

export interface NdbRegisterDatabaseLcmConfigExpiryDetail {
    deleteDatabase: boolean;
    deleteTimeMachine: boolean;
    deleteVm: boolean;
    effectiveTimestamp: string;
    expireInDays: number;
    expiryDateTimezone: string;
    expiryTimestamp: string;
    remindBeforeInDays: number;
    userCreated: boolean;
}

export interface NdbRegisterDatabaseLcmConfigPostDeleteCommand {
    command: string;
}

export interface NdbRegisterDatabaseLcmConfigPreDeleteCommand {
    command: string;
}

export interface NdbRegisterDatabaseLcmConfigRefreshDetail {
    lastRefreshDate: string;
    nextRefreshDate: string;
    refreshDateTimezone: string;
    refreshInDays: number;
    refreshInHours: number;
    refreshInMonths: number;
    refreshTime: string;
}

export interface NdbRegisterDatabaseLinkedDatabase {
    databaseName: string;
    databaseStatus: string;
    dateCreated: string;
    dateModified: string;
    description: string;
    id: string;
    infos: outputs.NdbRegisterDatabaseLinkedDatabaseInfo[];
    metric: {[key: string]: string};
    name: string;
    parentDatabaseId: string;
    parentLinkedDatabaseId: string;
    snapshotId: string;
    status: string;
    timezone: string;
}

export interface NdbRegisterDatabaseLinkedDatabaseInfo {
    info: {[key: string]: string};
    secureInfo: {[key: string]: string};
}

export interface NdbRegisterDatabasePostgressInfo {
    allowMultipleDatabases?: boolean;
    backupPolicy?: string;
    dbName: string;
    dbPassword: string;
    dbUser?: string;
    listenerPort: string;
    postgresSoftwareHome: string;
    softwareHome?: string;
    switchLog?: boolean;
    vmIp?: string;
}

export interface NdbRegisterDatabaseProperty {
    name: string;
    value: string;
}

export interface NdbRegisterDatabaseTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface NdbRegisterDatabaseTimeMachine {
    accessLevel: string;
    clone: boolean;
    clones: string;
    clustered: boolean;
    database: string;
    databaseId: string;
    dateCreated: string;
    dateModified: string;
    description: string;
    eaStatus: string;
    id: string;
    metric: string;
    name: string;
    properties: outputs.NdbRegisterDatabaseTimeMachineProperty[];
    scheduleId: string;
    schedules: outputs.NdbRegisterDatabaseTimeMachineSchedule[];
    scope: string;
    slaId: string;
    slaUpdateInProgress: boolean;
    slaUpdateMetadata: string;
    slas: outputs.NdbRegisterDatabaseTimeMachineSla[];
    sourceNxClusters: string[];
    status: string;
    tags: outputs.NdbRegisterDatabaseTimeMachineTag[];
    type: string;
}

export interface NdbRegisterDatabaseTimeMachineInfo {
    /**
     * description of autoTuneLogDrive
     */
    autotunelogdrive?: boolean;
    /**
     * description of time machine's
     */
    description?: string;
    /**
     * description of time machine's name
     */
    name: string;
    /**
     * description of schedule of time machine
     */
    schedule: outputs.NdbRegisterDatabaseTimeMachineInfoSchedule;
    slaDetails?: outputs.NdbRegisterDatabaseTimeMachineInfoSlaDetail[];
    /**
     * description of SLA ID.
     */
    slaid?: string;
    tags?: outputs.NdbRegisterDatabaseTimeMachineInfoTag[];
}

export interface NdbRegisterDatabaseTimeMachineInfoSchedule {
    /**
     * description of schedule of time machine
     */
    continuousschedule?: outputs.NdbRegisterDatabaseTimeMachineInfoScheduleContinuousschedule;
    /**
     * description of schedule of time machine
     */
    monthlyschedule?: outputs.NdbRegisterDatabaseTimeMachineInfoScheduleMonthlyschedule;
    /**
     * description of schedule of time machine
     */
    quartelyschedule?: outputs.NdbRegisterDatabaseTimeMachineInfoScheduleQuartelyschedule;
    /**
     * description of schedule of time machine
     */
    snapshottimeofday?: outputs.NdbRegisterDatabaseTimeMachineInfoScheduleSnapshottimeofday;
    /**
     * description of schedule of time machine
     */
    weeklyschedule?: outputs.NdbRegisterDatabaseTimeMachineInfoScheduleWeeklyschedule;
    /**
     * description of schedule of time machine
     */
    yearlyschedule?: outputs.NdbRegisterDatabaseTimeMachineInfoScheduleYearlyschedule;
}

export interface NdbRegisterDatabaseTimeMachineInfoScheduleContinuousschedule {
    enabled: boolean;
    logbackupinterval: number;
    snapshotsperday: number;
}

export interface NdbRegisterDatabaseTimeMachineInfoScheduleMonthlyschedule {
    dayofmonth: number;
    enabled: boolean;
}

export interface NdbRegisterDatabaseTimeMachineInfoScheduleQuartelyschedule {
    dayofmonth: number;
    enabled: boolean;
    startmonth: string;
}

export interface NdbRegisterDatabaseTimeMachineInfoScheduleSnapshottimeofday {
    hours: number;
    minutes: number;
    seconds: number;
}

export interface NdbRegisterDatabaseTimeMachineInfoScheduleWeeklyschedule {
    dayofweek: string;
    enabled: boolean;
}

export interface NdbRegisterDatabaseTimeMachineInfoScheduleYearlyschedule {
    dayofmonth: number;
    enabled: boolean;
    month: string;
}

export interface NdbRegisterDatabaseTimeMachineInfoSlaDetail {
    primarySlas?: outputs.NdbRegisterDatabaseTimeMachineInfoSlaDetailPrimarySla[];
}

export interface NdbRegisterDatabaseTimeMachineInfoSlaDetailPrimarySla {
    nxClusterIds?: string[];
    /**
     * description of SLA ID.
     */
    slaId: string;
}

export interface NdbRegisterDatabaseTimeMachineInfoTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface NdbRegisterDatabaseTimeMachineProperty {
    description: string;
    name: string;
    refId: string;
    secure: boolean;
    value: string;
}

export interface NdbRegisterDatabaseTimeMachineSchedule {
    continuousSchedules: outputs.NdbRegisterDatabaseTimeMachineScheduleContinuousSchedule[];
    dailySchedules: outputs.NdbRegisterDatabaseTimeMachineScheduleDailySchedule[];
    dateCreated: string;
    dateModified: string;
    description: string;
    globalPolicy: boolean;
    id: string;
    monthlySchedules: outputs.NdbRegisterDatabaseTimeMachineScheduleMonthlySchedule[];
    name: string;
    ownerId: string;
    quartelySchedules: outputs.NdbRegisterDatabaseTimeMachineScheduleQuartelySchedule[];
    referenceCount: number;
    snapshotTimeOfDays: outputs.NdbRegisterDatabaseTimeMachineScheduleSnapshotTimeOfDay[];
    startTime: string;
    systemPolicy: boolean;
    timeZone: string;
    uniqueName: string;
    weeklySchedules: outputs.NdbRegisterDatabaseTimeMachineScheduleWeeklySchedule[];
    yearlySchedules: outputs.NdbRegisterDatabaseTimeMachineScheduleYearlySchedule[];
}

export interface NdbRegisterDatabaseTimeMachineScheduleContinuousSchedule {
    enabled: boolean;
    logBackupInterval: number;
    snapshotsPerDay: number;
}

export interface NdbRegisterDatabaseTimeMachineScheduleDailySchedule {
    enabled: boolean;
}

export interface NdbRegisterDatabaseTimeMachineScheduleMonthlySchedule {
    dayOfMonth: number;
    enabled: boolean;
}

export interface NdbRegisterDatabaseTimeMachineScheduleQuartelySchedule {
    dayOfMonth: number;
    enabled: boolean;
    startMonth: string;
    startMonthValue: string;
}

export interface NdbRegisterDatabaseTimeMachineScheduleSnapshotTimeOfDay {
    extra: boolean;
    hours: number;
    minutes: number;
    seconds: number;
}

export interface NdbRegisterDatabaseTimeMachineScheduleWeeklySchedule {
    dayOfWeek: string;
    dayOfWeekValue: string;
    enabled: boolean;
}

export interface NdbRegisterDatabaseTimeMachineScheduleYearlySchedule {
    dayOfMonth: number;
    enabled: boolean;
    month: string;
    monthValue: string;
}

export interface NdbRegisterDatabaseTimeMachineSla {
    continuousRetention: number;
    currentActiveFrequency: string;
    dailyRetention: number;
    dateCreated: string;
    dateModified: string;
    description: string;
    id: string;
    monthlyRetention: number;
    name: string;
    ownerId: string;
    pitrEnabled: boolean;
    quarterlyRetention: number;
    referenceCount: number;
    systemSla: boolean;
    uniqueName: string;
    weeklyRetention: number;
    yearlyRetention: number;
}

export interface NdbRegisterDatabaseTimeMachineTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface NdbRegisterDatabaseTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface NdbRegisterDbserverCredential {
    label?: string;
    password: string;
    username: string;
}

export interface NdbRegisterDbserverPostgresDatabase {
    listenerPort?: string;
    postgresSoftwareHome?: string;
}

export interface NdbRegisterDbserverProperty {
    name: string;
    value: string;
}

export interface NdbRegisterDbserverTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface NdbScaleDatabaseDatabaseNode {
    accessLevel: {[key: string]: string};
    databaseId: string;
    databaseStatus: string;
    dateCreated: string;
    dateModified: string;
    dbserver: {[key: string]: string};
    dbserverId: string;
    description: string;
    id: string;
    infos: outputs.NdbScaleDatabaseDatabaseNodeInfo[];
    name: string;
    primary: boolean;
    properties: outputs.NdbScaleDatabaseDatabaseNodeProperty[];
    protectionDomainId: string;
    protectionDomains: outputs.NdbScaleDatabaseDatabaseNodeProtectionDomain[];
    softwareInstallationId: string;
    status: string;
    tags: outputs.NdbScaleDatabaseDatabaseNodeTag[];
}

export interface NdbScaleDatabaseDatabaseNodeInfo {
    info: {[key: string]: string};
    secureInfo: {[key: string]: string};
}

export interface NdbScaleDatabaseDatabaseNodeProperty {
    description: string;
    name: string;
    refId: string;
    secure: boolean;
    value: string;
}

export interface NdbScaleDatabaseDatabaseNodeProtectionDomain {
    assocEntities: string[];
    cloudId: string;
    dateCreated: string;
    dateModified: string;
    description: string;
    eraCreated: boolean;
    id: string;
    name: string;
    ownerId: string;
    primaryHost: string;
    properties: outputs.NdbScaleDatabaseDatabaseNodeProtectionDomainProperty[];
    status: string;
    type: string;
}

export interface NdbScaleDatabaseDatabaseNodeProtectionDomainProperty {
    description: string;
    name: string;
    refId: string;
    secure: boolean;
    value: string;
}

export interface NdbScaleDatabaseDatabaseNodeTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface NdbScaleDatabaseInfo {
    bpgConfigs: outputs.NdbScaleDatabaseInfoBpgConfig[];
    secureInfo: {[key: string]: string};
}

export interface NdbScaleDatabaseInfoBpgConfig {
    bpgDbParams: outputs.NdbScaleDatabaseInfoBpgConfigBpgDbParam[];
    storages: outputs.NdbScaleDatabaseInfoBpgConfigStorage[];
    vmProperties: outputs.NdbScaleDatabaseInfoBpgConfigVmProperty[];
}

export interface NdbScaleDatabaseInfoBpgConfigBpgDbParam {
    effectiveCacheSize: string;
    maintenanceWorkMem: string;
    maxParallelWorkersPerGather: string;
    maxWorkerProcesses: string;
    sharedBuffers: string;
    workMem: string;
}

export interface NdbScaleDatabaseInfoBpgConfigStorage {
    archiveStorages: outputs.NdbScaleDatabaseInfoBpgConfigStorageArchiveStorage[];
    dataDisks: outputs.NdbScaleDatabaseInfoBpgConfigStorageDataDisk[];
    logDisks: outputs.NdbScaleDatabaseInfoBpgConfigStorageLogDisk[];
}

export interface NdbScaleDatabaseInfoBpgConfigStorageArchiveStorage {
    size: number;
}

export interface NdbScaleDatabaseInfoBpgConfigStorageDataDisk {
    count: number;
}

export interface NdbScaleDatabaseInfoBpgConfigStorageLogDisk {
    count: number;
    size: number;
}

export interface NdbScaleDatabaseInfoBpgConfigVmProperty {
    dirtyBackgroundRatio: number;
    dirtyExpireCentisecs: number;
    dirtyRatio: number;
    dirtyWritebackCentisecs: number;
    nrHugepages: number;
    overcommitMemory: number;
    swappiness: number;
}

export interface NdbScaleDatabaseLcmConfig {
    expiryDetails: outputs.NdbScaleDatabaseLcmConfigExpiryDetail[];
    postDeleteCommands: outputs.NdbScaleDatabaseLcmConfigPostDeleteCommand[];
    preDeleteCommands: outputs.NdbScaleDatabaseLcmConfigPreDeleteCommand[];
    refreshDetails: outputs.NdbScaleDatabaseLcmConfigRefreshDetail[];
}

export interface NdbScaleDatabaseLcmConfigExpiryDetail {
    deleteDatabase: boolean;
    deleteTimeMachine: boolean;
    deleteVm: boolean;
    effectiveTimestamp: string;
    expireInDays: number;
    expiryDateTimezone: string;
    expiryTimestamp: string;
    remindBeforeInDays: number;
    userCreated: boolean;
}

export interface NdbScaleDatabaseLcmConfigPostDeleteCommand {
    command: string;
}

export interface NdbScaleDatabaseLcmConfigPreDeleteCommand {
    command: string;
}

export interface NdbScaleDatabaseLcmConfigRefreshDetail {
    lastRefreshDate: string;
    nextRefreshDate: string;
    refreshDateTimezone: string;
    refreshInDays: number;
    refreshInHours: number;
    refreshInMonths: number;
    refreshTime: string;
}

export interface NdbScaleDatabaseLinkedDatabase {
    databaseName: string;
    databaseStatus: string;
    dateCreated: string;
    dateModified: string;
    description: string;
    id: string;
    infos: outputs.NdbScaleDatabaseLinkedDatabaseInfo[];
    metric: {[key: string]: string};
    name: string;
    parentDatabaseId: string;
    parentLinkedDatabaseId: string;
    snapshotId: string;
    status: string;
    timezone: string;
}

export interface NdbScaleDatabaseLinkedDatabaseInfo {
    info: {[key: string]: string};
    secureInfo: {[key: string]: string};
}

export interface NdbScaleDatabaseProperty {
    name: string;
    value: string;
}

export interface NdbScaleDatabaseTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface NdbScaleDatabaseTimeMachine {
    accessLevel: string;
    clone: boolean;
    clones: string;
    clustered: boolean;
    database: string;
    databaseId: string;
    dateCreated: string;
    dateModified: string;
    description: string;
    eaStatus: string;
    id: string;
    metric: string;
    name: string;
    properties: outputs.NdbScaleDatabaseTimeMachineProperty[];
    scheduleId: string;
    schedules: outputs.NdbScaleDatabaseTimeMachineSchedule[];
    scope: string;
    slaId: string;
    slaUpdateInProgress: boolean;
    slaUpdateMetadata: string;
    slas: outputs.NdbScaleDatabaseTimeMachineSla[];
    sourceNxClusters: string[];
    status: string;
    tags: outputs.NdbScaleDatabaseTimeMachineTag[];
    type: string;
}

export interface NdbScaleDatabaseTimeMachineProperty {
    description: string;
    name: string;
    refId: string;
    secure: boolean;
    value: string;
}

export interface NdbScaleDatabaseTimeMachineSchedule {
    continuousSchedules: outputs.NdbScaleDatabaseTimeMachineScheduleContinuousSchedule[];
    dailySchedules: outputs.NdbScaleDatabaseTimeMachineScheduleDailySchedule[];
    dateCreated: string;
    dateModified: string;
    description: string;
    globalPolicy: boolean;
    id: string;
    monthlySchedules: outputs.NdbScaleDatabaseTimeMachineScheduleMonthlySchedule[];
    name: string;
    ownerId: string;
    quartelySchedules: outputs.NdbScaleDatabaseTimeMachineScheduleQuartelySchedule[];
    referenceCount: number;
    snapshotTimeOfDays: outputs.NdbScaleDatabaseTimeMachineScheduleSnapshotTimeOfDay[];
    startTime: string;
    systemPolicy: boolean;
    timeZone: string;
    uniqueName: string;
    weeklySchedules: outputs.NdbScaleDatabaseTimeMachineScheduleWeeklySchedule[];
    yearlySchedules: outputs.NdbScaleDatabaseTimeMachineScheduleYearlySchedule[];
}

export interface NdbScaleDatabaseTimeMachineScheduleContinuousSchedule {
    enabled: boolean;
    logBackupInterval: number;
    snapshotsPerDay: number;
}

export interface NdbScaleDatabaseTimeMachineScheduleDailySchedule {
    enabled: boolean;
}

export interface NdbScaleDatabaseTimeMachineScheduleMonthlySchedule {
    dayOfMonth: number;
    enabled: boolean;
}

export interface NdbScaleDatabaseTimeMachineScheduleQuartelySchedule {
    dayOfMonth: number;
    enabled: boolean;
    startMonth: string;
    startMonthValue: string;
}

export interface NdbScaleDatabaseTimeMachineScheduleSnapshotTimeOfDay {
    extra: boolean;
    hours: number;
    minutes: number;
    seconds: number;
}

export interface NdbScaleDatabaseTimeMachineScheduleWeeklySchedule {
    dayOfWeek: string;
    dayOfWeekValue: string;
    enabled: boolean;
}

export interface NdbScaleDatabaseTimeMachineScheduleYearlySchedule {
    dayOfMonth: number;
    enabled: boolean;
    month: string;
    monthValue: string;
}

export interface NdbScaleDatabaseTimeMachineSla {
    continuousRetention: number;
    currentActiveFrequency: string;
    dailyRetention: number;
    dateCreated: string;
    dateModified: string;
    description: string;
    id: string;
    monthlyRetention: number;
    name: string;
    ownerId: string;
    pitrEnabled: boolean;
    quarterlyRetention: number;
    referenceCount: number;
    systemSla: boolean;
    uniqueName: string;
    weeklyRetention: number;
    yearlyRetention: number;
}

export interface NdbScaleDatabaseTimeMachineTag {
    entityId: string;
    entityType: string;
    tagId: string;
    tagName: string;
    value: string;
}

export interface NdbScaleDatabaseTimeouts {
    create?: string;
}

export interface NdbSoftwareVersionProfilePostgresDatabase {
    dbSoftwareNotes?: string;
    osNotes?: string;
    sourceDbserverId?: string;
}

export interface NdbSoftwareVersionProfileProperty {
    name: string;
    secure: boolean;
    value: string;
}

export interface NdbSoftwareVersionProfileTimeouts {
    create?: string;
}

export interface NdbSoftwareVersionProfileVersionClusterAssociation {
    dateCreated: string;
    dateModified: string;
    nxClusterId: string;
    optimizedForProvisioning: boolean;
    ownerId: string;
    profileVersionId: string;
    properties: outputs.NdbSoftwareVersionProfileVersionClusterAssociationProperty[];
    status: string;
}

export interface NdbSoftwareVersionProfileVersionClusterAssociationProperty {
    name: string;
    secure: boolean;
    value: string;
}

export interface NdbStretchedVlanMetadata {
    gateway: string;
    subnetMask: string;
}

export interface NdbStretchedVlanVlansList {
    clusterId: string;
    id: string;
    managed: boolean;
    name: string;
    properties: outputs.NdbStretchedVlanVlansListProperty[];
    propertiesMaps: outputs.NdbStretchedVlanVlansListPropertiesMap[];
    stretchedVlanId: string;
    type: string;
}

export interface NdbStretchedVlanVlansListPropertiesMap {
    vlanGateway: string;
    vlanPrimaryDns: string;
    vlanSecondaryDns: string;
    vlanSubnetMask: string;
}

export interface NdbStretchedVlanVlansListProperty {
    name: string;
    secure: boolean;
    value: string;
}

export interface NetworkSecurityRuleAdRuleInboundAllowList {
    addressGroupInclusionLists?: outputs.NetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionList[];
    expirationTime: string;
    filterKindLists: string[];
    filterParams?: outputs.NetworkSecurityRuleAdRuleInboundAllowListFilterParam[];
    filterType: string;
    icmpTypeCodeLists?: outputs.NetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeList[];
    ipSubnet: string;
    ipSubnetPrefixLength: string;
    networkFunctionChainReference: {[key: string]: string};
    peerSpecificationType: string;
    protocol: string;
    serviceGroupLists?: outputs.NetworkSecurityRuleAdRuleInboundAllowListServiceGroupList[];
    tcpPortRangeLists?: outputs.NetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList[];
    udpPortRangeLists?: outputs.NetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList[];
}

export interface NetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionList {
    kind: string;
    name: string;
    uuid: string;
}

export interface NetworkSecurityRuleAdRuleInboundAllowListFilterParam {
    name: string;
    values: string[];
}

export interface NetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeList {
    code: string;
    type: string;
}

export interface NetworkSecurityRuleAdRuleInboundAllowListServiceGroupList {
    kind: string;
    name: string;
    uuid: string;
}

export interface NetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface NetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface NetworkSecurityRuleAdRuleOutboundAllowList {
    addressGroupInclusionLists?: outputs.NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionList[];
    expirationTime: string;
    filterKindLists: string[];
    filterParams?: outputs.NetworkSecurityRuleAdRuleOutboundAllowListFilterParam[];
    filterType: string;
    icmpTypeCodeLists?: outputs.NetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeList[];
    ipSubnet: string;
    ipSubnetPrefixLength: string;
    networkFunctionChainReference: {[key: string]: string};
    peerSpecificationType: string;
    protocol: string;
    serviceGroupLists?: outputs.NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupList[];
    tcpPortRangeLists?: outputs.NetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList[];
    udpPortRangeLists?: outputs.NetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList[];
}

export interface NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionList {
    kind: string;
    name: string;
    uuid: string;
}

export interface NetworkSecurityRuleAdRuleOutboundAllowListFilterParam {
    name: string;
    values: string[];
}

export interface NetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeList {
    code: string;
    type: string;
}

export interface NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupList {
    kind: string;
    name: string;
    uuid: string;
}

export interface NetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface NetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface NetworkSecurityRuleAdRuleTargetGroupFilterParam {
    name: string;
    values: string[];
}

export interface NetworkSecurityRuleAppRuleInboundAllowList {
    addressGroupInclusionLists?: outputs.NetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionList[];
    expirationTime: string;
    filterKindLists: string[];
    filterParams?: outputs.NetworkSecurityRuleAppRuleInboundAllowListFilterParam[];
    filterType: string;
    icmpTypeCodeLists?: outputs.NetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeList[];
    ipSubnet: string;
    ipSubnetPrefixLength: string;
    networkFunctionChainReference: {[key: string]: string};
    peerSpecificationType: string;
    protocol: string;
    serviceGroupLists?: outputs.NetworkSecurityRuleAppRuleInboundAllowListServiceGroupList[];
    tcpPortRangeLists?: outputs.NetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList[];
    udpPortRangeLists?: outputs.NetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList[];
}

export interface NetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionList {
    kind: string;
    name: string;
    uuid: string;
}

export interface NetworkSecurityRuleAppRuleInboundAllowListFilterParam {
    name: string;
    values: string[];
}

export interface NetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeList {
    code: string;
    type: string;
}

export interface NetworkSecurityRuleAppRuleInboundAllowListServiceGroupList {
    kind: string;
    name: string;
    uuid: string;
}

export interface NetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface NetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface NetworkSecurityRuleAppRuleOutboundAllowList {
    addressGroupInclusionLists?: outputs.NetworkSecurityRuleAppRuleOutboundAllowListAddressGroupInclusionList[];
    expirationTime: string;
    filterKindLists: string[];
    filterParams?: outputs.NetworkSecurityRuleAppRuleOutboundAllowListFilterParam[];
    filterType: string;
    icmpTypeCodeLists?: outputs.NetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeList[];
    ipSubnet: string;
    ipSubnetPrefixLength: string;
    networkFunctionChainReference: {[key: string]: string};
    peerSpecificationType: string;
    protocol: string;
    serviceGroupLists?: outputs.NetworkSecurityRuleAppRuleOutboundAllowListServiceGroupList[];
    tcpPortRangeLists?: outputs.NetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList[];
    udpPortRangeLists?: outputs.NetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList[];
}

export interface NetworkSecurityRuleAppRuleOutboundAllowListAddressGroupInclusionList {
    kind: string;
    name: string;
    uuid: string;
}

export interface NetworkSecurityRuleAppRuleOutboundAllowListFilterParam {
    name: string;
    values: string[];
}

export interface NetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeList {
    code: string;
    type: string;
}

export interface NetworkSecurityRuleAppRuleOutboundAllowListServiceGroupList {
    kind: string;
    name: string;
    uuid: string;
}

export interface NetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface NetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList {
    endPort: number;
    startPort: number;
}

export interface NetworkSecurityRuleAppRuleTargetGroupFilterParam {
    name: string;
    values: string[];
}

export interface NetworkSecurityRuleCategory {
    name: string;
    value: string;
}

export interface NetworkSecurityRuleIsolationRuleFirstEntityFilterParam {
    name: string;
    values: string[];
}

export interface NetworkSecurityRuleIsolationRuleSecondEntityFilterParam {
    name: string;
    values: string[];
}

export interface NetworkSecurityRuleTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface PbrDestination {
    addressType?: string;
    prefixLength?: number;
    subnetIp?: string;
}

export interface PbrProtocolParameters {
    icmp?: outputs.PbrProtocolParametersIcmp;
    protocolNumber?: string;
    tcp?: outputs.PbrProtocolParametersTcp;
    udp?: outputs.PbrProtocolParametersUdp;
}

export interface PbrProtocolParametersIcmp {
    icmpCode: number;
    icmpType: number;
}

export interface PbrProtocolParametersTcp {
    destinationPortRangeLists?: outputs.PbrProtocolParametersTcpDestinationPortRangeList[];
    sourcePortRangeLists?: outputs.PbrProtocolParametersTcpSourcePortRangeList[];
}

export interface PbrProtocolParametersTcpDestinationPortRangeList {
    endPort: number;
    startPort: number;
}

export interface PbrProtocolParametersTcpSourcePortRangeList {
    endPort: number;
    startPort: number;
}

export interface PbrProtocolParametersUdp {
    destinationPortRangeLists?: outputs.PbrProtocolParametersUdpDestinationPortRangeList[];
    sourcePortRangeLists?: outputs.PbrProtocolParametersUdpSourcePortRangeList[];
}

export interface PbrProtocolParametersUdpDestinationPortRangeList {
    endPort: number;
    startPort: number;
}

export interface PbrProtocolParametersUdpSourcePortRangeList {
    endPort: number;
    startPort: number;
}

export interface PbrSource {
    addressType?: string;
    prefixLength?: number;
    subnetIp?: string;
}

export interface ProjectAccountReferenceList {
    kind?: string;
    name: string;
    uuid: string;
}

export interface ProjectAcp {
    contextFilterLists: outputs.ProjectAcpContextFilterList[];
    description?: string;
    metadata: {[key: string]: string};
    name: string;
    roleReference: outputs.ProjectAcpRoleReference;
    userGroupReferenceLists?: outputs.ProjectAcpUserGroupReferenceList[];
    userReferenceLists?: outputs.ProjectAcpUserReferenceList[];
}

export interface ProjectAcpContextFilterList {
    entityFilterExpressionLists: outputs.ProjectAcpContextFilterListEntityFilterExpressionList[];
    scopeFilterExpressionLists: outputs.ProjectAcpContextFilterListScopeFilterExpressionList[];
}

export interface ProjectAcpContextFilterListEntityFilterExpressionList {
    leftHandSideEntityType: string;
    operator: string;
    rightHandSides: outputs.ProjectAcpContextFilterListEntityFilterExpressionListRightHandSide[];
}

export interface ProjectAcpContextFilterListEntityFilterExpressionListRightHandSide {
    categories: outputs.ProjectAcpContextFilterListEntityFilterExpressionListRightHandSideCategory[];
    collection: string;
    uuidLists: string[];
}

export interface ProjectAcpContextFilterListEntityFilterExpressionListRightHandSideCategory {
    name: string;
    values: string[];
}

export interface ProjectAcpContextFilterListScopeFilterExpressionList {
    leftHandSide: string;
    operator: string;
    rightHandSides: outputs.ProjectAcpContextFilterListScopeFilterExpressionListRightHandSide[];
}

export interface ProjectAcpContextFilterListScopeFilterExpressionListRightHandSide {
    categories: outputs.ProjectAcpContextFilterListScopeFilterExpressionListRightHandSideCategory[];
    collection: string;
    uuidLists: string[];
}

export interface ProjectAcpContextFilterListScopeFilterExpressionListRightHandSideCategory {
    name: string;
    values: string[];
}

export interface ProjectAcpRoleReference {
    kind: string;
    name: string;
    uuid: string;
}

export interface ProjectAcpUserGroupReferenceList {
    kind?: string;
    name?: string;
    uuid: string;
}

export interface ProjectAcpUserReferenceList {
    kind?: string;
    name?: string;
    uuid: string;
}

export interface ProjectCategory {
    name: string;
    value: string;
}

export interface ProjectClusterReferenceList {
    kind?: string;
    name: string;
    uuid: string;
}

export interface ProjectDefaultEnvironmentReference {
    kind?: string;
    name: string;
    uuid: string;
}

export interface ProjectDefaultSubnetReference {
    kind?: string;
    name: string;
    uuid: string;
}

export interface ProjectEnvironmentReferenceList {
    kind?: string;
    name: string;
    uuid: string;
}

export interface ProjectExternalNetworkList {
    name: string;
    uuid: string;
}

export interface ProjectExternalUserGroupReferenceList {
    kind?: string;
    name: string;
    uuid: string;
}

export interface ProjectResourceDomain {
    resources: outputs.ProjectResourceDomainResource[];
}

export interface ProjectResourceDomainResource {
    limit: number;
    resourceType: string;
    units: string;
    value: number;
}

export interface ProjectSubnetReferenceList {
    kind?: string;
    name: string;
    uuid: string;
}

export interface ProjectTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ProjectTunnelReferenceList {
    kind?: string;
    name: string;
    uuid: string;
}

export interface ProjectUserGroupList {
    directoryServiceOus?: outputs.ProjectUserGroupListDirectoryServiceOus[];
    directoryServiceUserGroups?: outputs.ProjectUserGroupListDirectoryServiceUserGroup[];
    metadata?: {[key: string]: string};
    samlUserGroups?: outputs.ProjectUserGroupListSamlUserGroup[];
}

export interface ProjectUserGroupListDirectoryServiceOus {
    distinguishedName: string;
}

export interface ProjectUserGroupListDirectoryServiceUserGroup {
    distinguishedName: string;
}

export interface ProjectUserGroupListSamlUserGroup {
    idpUuid: string;
    name: string;
}

export interface ProjectUserList {
    directoryServiceUser?: outputs.ProjectUserListDirectoryServiceUser;
    identityProviderUser?: outputs.ProjectUserListIdentityProviderUser;
    metadata?: {[key: string]: string};
}

export interface ProjectUserListDirectoryServiceUser {
    defaultUserPrincipalName: string;
    directoryServiceReference: outputs.ProjectUserListDirectoryServiceUserDirectoryServiceReference;
    userPrincipalName: string;
}

export interface ProjectUserListDirectoryServiceUserDirectoryServiceReference {
    kind?: string;
    name: string;
    uuid: string;
}

export interface ProjectUserListIdentityProviderUser {
    identityProviderReference: outputs.ProjectUserListIdentityProviderUserIdentityProviderReference;
    username: string;
}

export interface ProjectUserListIdentityProviderUserIdentityProviderReference {
    kind?: string;
    name: string;
    uuid: string;
}

export interface ProjectUserReferenceList {
    kind?: string;
    name: string;
    uuid: string;
}

export interface ProjectVpcReferenceList {
    kind?: string;
    name: string;
    uuid: string;
}

export interface ProtectionRuleAvailabilityZoneConnectivityList {
    destinationAvailabilityZoneIndex: number;
    snapshotScheduleLists?: outputs.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList[];
    sourceAvailabilityZoneIndex: number;
}

export interface ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList {
    autoSuspendTimeoutSecs: number;
    localSnapshotRetentionPolicy?: outputs.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy;
    recoveryPointObjectiveSecs: number;
    remoteSnapshotRetentionPolicy?: outputs.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy;
    snapshotType: string;
}

export interface ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy {
    numSnapshots: number;
    rollupRetentionPolicyMultiple: number;
    rollupRetentionPolicySnapshotIntervalType: string;
}

export interface ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy {
    numSnapshots: number;
    rollupRetentionPolicyMultiple: number;
    rollupRetentionPolicySnapshotIntervalType: string;
}

export interface ProtectionRuleCategory {
    name: string;
    value: string;
}

export interface ProtectionRuleCategoryFilter {
    kindLists: string[];
    params?: outputs.ProtectionRuleCategoryFilterParam[];
    type: string;
}

export interface ProtectionRuleCategoryFilterParam {
    name: string;
    values: string[];
}

export interface ProtectionRuleOrderedAvailabilityZoneList {
    availabilityZoneUrl: string;
    clusterUuid: string;
}

export interface ProtectionRuleOwnerReference {
    kind?: string;
    name?: string;
    uuid?: string;
}

export interface ProtectionRuleProjectReference {
    kind?: string;
    name?: string;
    uuid?: string;
}

export interface ProtectionRuleTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface RecoveryPlanCategory {
    name: string;
    value: string;
}

export interface RecoveryPlanOwnerReference {
    kind?: string;
    name?: string;
    uuid?: string;
}

export interface RecoveryPlanParameters {
    floatingIpAssignmentLists?: outputs.RecoveryPlanParametersFloatingIpAssignmentList[];
    networkMappingLists?: outputs.RecoveryPlanParametersNetworkMappingList[];
}

export interface RecoveryPlanParametersFloatingIpAssignmentList {
    availabilityZoneUrl: string;
    vmIpAssignmentLists: outputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentList[];
}

export interface RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentList {
    recoveryFloatingIpConfig?: outputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig;
    testFloatingIpConfig?: outputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig;
    vmNicInformation: outputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmNicInformation;
    vmReference: outputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmReference;
}

export interface RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig {
    ip: string;
    shouldAllocateDynamically: boolean;
}

export interface RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig {
    ip: string;
    shouldAllocateDynamically: boolean;
}

export interface RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmNicInformation {
    ip: string;
    uuid: string;
}

export interface RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmReference {
    kind: string;
    name: string;
    uuid: string;
}

export interface RecoveryPlanParametersNetworkMappingList {
    areNetworksStretched: boolean;
    availabilityZoneNetworkMappingLists?: outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingList[];
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingList {
    availabilityZoneUrl: string;
    clusterReferenceLists?: outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList[];
    recoveryIpAssignmentLists?: outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList[];
    recoveryNetwork?: outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork;
    testIpAssignmentLists?: outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList[];
    testNetwork?: outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList {
    kind: string;
    name: string;
    uuid: string;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList {
    ipConfigLists: outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList[];
    vmReference: outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList {
    ipAddress: string;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference {
    kind: string;
    name: string;
    uuid: string;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork {
    name: string;
    subnetLists?: outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList[];
    useVpcReference: boolean;
    virtualNetworkReference?: outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference;
    vpcReference?: outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList {
    externalConnectivityState: string;
    gatewayIp: string;
    prefixLength: number;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference {
    kind: string;
    name: string;
    uuid: string;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference {
    kind: string;
    name: string;
    uuid: string;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList {
    ipConfigLists: outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList[];
    vmReference: outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList {
    ipAddress: string;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference {
    kind: string;
    name: string;
    uuid: string;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork {
    name: string;
    subnetLists?: outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList[];
    useVpcReference: boolean;
    virtualNetworkReference?: outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference;
    vpcReference?: outputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList {
    externalConnectivityState: string;
    gatewayIp: string;
    prefixLength: number;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference {
    kind: string;
    name: string;
    uuid: string;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference {
    kind: string;
    name: string;
    uuid: string;
}

export interface RecoveryPlanProjectReference {
    kind?: string;
    name?: string;
    uuid?: string;
}

export interface RecoveryPlanStageList {
    delayTimeSecs: number;
    stageUuid: string;
    stageWork: outputs.RecoveryPlanStageListStageWork;
}

export interface RecoveryPlanStageListStageWork {
    recoverEntities?: outputs.RecoveryPlanStageListStageWorkRecoverEntities;
}

export interface RecoveryPlanStageListStageWorkRecoverEntities {
    entityInfoLists?: outputs.RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoList[];
}

export interface RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoList {
    anyEntityReferenceKind?: string;
    anyEntityReferenceName?: string;
    anyEntityReferenceUuid?: string;
    categories?: outputs.RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListCategory[];
    scriptLists?: outputs.RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListScriptList[];
}

export interface RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListCategory {
    name?: string;
    value?: string;
}

export interface RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListScriptList {
    enableScriptExec: boolean;
    timeout: string;
}

export interface RecoveryPlanTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface RoleCategory {
    name: string;
    value: string;
}

export interface RoleOwnerReference {
    kind?: string;
    name?: string;
    uuid?: string;
}

export interface RolePermissionReferenceList {
    kind?: string;
    name: string;
    uuid: string;
}

export interface RoleProjectReference {
    kind?: string;
    name?: string;
    uuid?: string;
}

export interface RoleTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ServiceGroupServiceList {
    icmpTypeCodeLists?: outputs.ServiceGroupServiceListIcmpTypeCodeList[];
    protocol?: string;
    tcpPortRangeLists?: outputs.ServiceGroupServiceListTcpPortRangeList[];
    udpPortRangeLists?: outputs.ServiceGroupServiceListUdpPortRangeList[];
}

export interface ServiceGroupServiceListIcmpTypeCodeList {
    code?: string;
    type?: string;
}

export interface ServiceGroupServiceListTcpPortRangeList {
    endPort?: number;
    startPort?: number;
}

export interface ServiceGroupServiceListUdpPortRangeList {
    endPort?: number;
    startPort?: number;
}

export interface StaticRoutesDefaultRouteNexthop {
    externalSubnetReferenceUuid?: string;
}

export interface StaticRoutesStaticRoutesList {
    destination: string;
    externalSubnetReferenceUuid?: string;
    vpnConnectionReferenceUuid?: string;
}

export interface SubnetCategory {
    name: string;
    value: string;
}

export interface SubnetTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface UserAccessControlPolicyReferenceList {
    kind: string;
    name: string;
    uuid: string;
}

export interface UserCategory {
    name: string;
    value: string;
}

export interface UserDirectoryServiceUser {
    defaultUserPrincipalName: string;
    directoryServiceReference: outputs.UserDirectoryServiceUserDirectoryServiceReference;
    userPrincipalName: string;
}

export interface UserDirectoryServiceUserDirectoryServiceReference {
    kind?: string;
    name: string;
    uuid: string;
}

export interface UserGroupsCategory {
    name: string;
    value: string;
}

export interface UserGroupsDirectoryServiceOus {
    distinguishedName: string;
}

export interface UserGroupsDirectoryServiceUserGroup {
    distinguishedName: string;
}

export interface UserGroupsSamlUserGroup {
    idpUuid: string;
    name: string;
}

export interface UserIdentityProviderUser {
    identityProviderReference: outputs.UserIdentityProviderUserIdentityProviderReference;
    username: string;
}

export interface UserIdentityProviderUserIdentityProviderReference {
    kind?: string;
    name: string;
    uuid: string;
}

export interface UserProjectReferenceList {
    kind: string;
    name: string;
    uuid: string;
}

export interface UserTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface VirtualMachineCategory {
    name: string;
    value: string;
}

export interface VirtualMachineDiskList {
    dataSourceReference: {[key: string]: string};
    deviceProperties?: outputs.VirtualMachineDiskListDeviceProperties;
    diskSizeBytes: number;
    diskSizeMib: number;
    storageConfig?: outputs.VirtualMachineDiskListStorageConfig;
    uuid: string;
    volumeGroupReference: {[key: string]: string};
}

export interface VirtualMachineDiskListDeviceProperties {
    deviceType?: string;
    diskAddress: {[key: string]: string};
}

export interface VirtualMachineDiskListStorageConfig {
    flashMode?: string;
    storageContainerReferences?: outputs.VirtualMachineDiskListStorageConfigStorageContainerReference[];
}

export interface VirtualMachineDiskListStorageConfigStorageContainerReference {
    kind?: string;
    name: string;
    url: string;
    uuid: string;
}

export interface VirtualMachineGpuList {
    deviceId: number;
    fraction: number;
    frameBufferSizeMib: number;
    guestDriverVersion: string;
    mode: string;
    name: string;
    numVirtualDisplayHeads: number;
    pciAddress: string;
    uuid: string;
    vendor: string;
}

export interface VirtualMachineNicList {
    ipEndpointLists?: outputs.VirtualMachineNicListIpEndpointList[];
    isConnected?: string;
    macAddress: string;
    model: string;
    networkFunctionChainReference: {[key: string]: string};
    networkFunctionNicType: string;
    nicType: string;
    numQueues: number;
    subnetName: string;
    subnetUuid?: string;
    uuid: string;
}

export interface VirtualMachineNicListIpEndpointList {
    ip: string;
    type: string;
}

export interface VirtualMachineNicListStatus {
    floatingIp: string;
    ipEndpointLists: outputs.VirtualMachineNicListStatusIpEndpointList[];
    isConnected: string;
    macAddress: string;
    model: string;
    networkFunctionChainReference: {[key: string]: string};
    networkFunctionNicType: string;
    nicType: string;
    numQueues: number;
    subnetName: string;
    subnetUuid: string;
    uuid: string;
}

export interface VirtualMachineNicListStatusIpEndpointList {
    ip: string;
    type: string;
}

export interface VirtualMachineSerialPortList {
    index: number;
    isConnected: boolean;
}

export interface VirtualMachineTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface VpcCommonDomainNameServerIpList {
    ip: string;
}

export interface VpcExternalSubnetListStatus {
    activeGatewayNodes: outputs.VpcExternalSubnetListStatusActiveGatewayNode[];
    externalIpLists: string[];
    externalSubnetReference: {[key: string]: string};
}

export interface VpcExternalSubnetListStatusActiveGatewayNode {
    hostReference: {[key: string]: string};
    ipAddress: string;
}

export interface VpcExternallyRoutablePrefixList {
    ip: string;
    prefixLength: number;
}

