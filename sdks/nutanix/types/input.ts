// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AccessControlPolicyCategory {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface AccessControlPolicyContextFilterList {
    entityFilterExpressionLists: pulumi.Input<pulumi.Input<inputs.AccessControlPolicyContextFilterListEntityFilterExpressionList>[]>;
    scopeFilterExpressionLists?: pulumi.Input<pulumi.Input<inputs.AccessControlPolicyContextFilterListScopeFilterExpressionList>[]>;
}

export interface AccessControlPolicyContextFilterListEntityFilterExpressionList {
    leftHandSideEntityType?: pulumi.Input<string>;
    operator: pulumi.Input<string>;
    rightHandSide: pulumi.Input<inputs.AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide>;
}

export interface AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSide {
    categories?: pulumi.Input<inputs.AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategories>;
    collection?: pulumi.Input<string>;
    uuidLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AccessControlPolicyContextFilterListEntityFilterExpressionListRightHandSideCategories {
    name?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AccessControlPolicyContextFilterListScopeFilterExpressionList {
    leftHandSide: pulumi.Input<string>;
    operator: pulumi.Input<string>;
    rightHandSide: pulumi.Input<inputs.AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide>;
}

export interface AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSide {
    categories?: pulumi.Input<inputs.AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategories>;
    collection?: pulumi.Input<string>;
    uuidLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AccessControlPolicyContextFilterListScopeFilterExpressionListRightHandSideCategories {
    name?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AccessControlPolicyOwnerReference {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface AccessControlPolicyRoleReference {
    kind: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid: pulumi.Input<string>;
}

export interface AccessControlPolicyTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface AccessControlPolicyUserGroupReferenceList {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid: pulumi.Input<string>;
}

export interface AccessControlPolicyUserReferenceList {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid: pulumi.Input<string>;
}

export interface AddressGroupIpAddressBlockList {
    ip: pulumi.Input<string>;
    prefixLength: pulumi.Input<number>;
}

export interface FoundationCentralImageClusterClusterStatus {
    aggregatePercentComplete?: pulumi.Input<number>;
    clusterCreationStarted?: pulumi.Input<boolean>;
    clusterProgressDetails?: pulumi.Input<pulumi.Input<inputs.FoundationCentralImageClusterClusterStatusClusterProgressDetail>[]>;
    currentFoundationIp?: pulumi.Input<string>;
    foundationSessionId?: pulumi.Input<string>;
    imagingStopped?: pulumi.Input<boolean>;
    intentPickedUp?: pulumi.Input<boolean>;
    nodeProgressDetails?: pulumi.Input<pulumi.Input<inputs.FoundationCentralImageClusterClusterStatusNodeProgressDetail>[]>;
}

export interface FoundationCentralImageClusterClusterStatusClusterProgressDetail {
    clusterName: pulumi.Input<string>;
    messageLists: pulumi.Input<pulumi.Input<string>[]>;
    percentComplete: pulumi.Input<number>;
    status: pulumi.Input<string>;
}

export interface FoundationCentralImageClusterClusterStatusNodeProgressDetail {
    imagedNodeUuid: pulumi.Input<string>;
    imagingStopped: pulumi.Input<boolean>;
    intentPickedUp: pulumi.Input<boolean>;
    messageLists: pulumi.Input<pulumi.Input<string>[]>;
    percentComplete: pulumi.Input<number>;
    status: pulumi.Input<string>;
}

export interface FoundationCentralImageClusterCommonNetworkSettings {
    cvmDnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    cvmNtpServers?: pulumi.Input<pulumi.Input<string>[]>;
    hypervisorDnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    hypervisorNtpServers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FoundationCentralImageClusterFoundationInitConfig {
    blocks: pulumi.Input<pulumi.Input<inputs.FoundationCentralImageClusterFoundationInitConfigBlock>[]>;
    clusters: pulumi.Input<pulumi.Input<inputs.FoundationCentralImageClusterFoundationInitConfigCluster>[]>;
    cvmGateway: pulumi.Input<string>;
    cvmNetmask: pulumi.Input<string>;
    dnsServers: pulumi.Input<string>;
    hypervProductKey: pulumi.Input<string>;
    hypervSku: pulumi.Input<string>;
    hypervisorGateway: pulumi.Input<string>;
    hypervisorIsoUrl: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    hypervisorIsos: pulumi.Input<pulumi.Input<inputs.FoundationCentralImageClusterFoundationInitConfigHypervisorIso>[]>;
    hypervisorNetmask: pulumi.Input<string>;
    ipmiGateway: pulumi.Input<string>;
    ipmiNetmask: pulumi.Input<string>;
    nosPackageUrls: pulumi.Input<pulumi.Input<inputs.FoundationCentralImageClusterFoundationInitConfigNosPackageUrl>[]>;
}

export interface FoundationCentralImageClusterFoundationInitConfigBlock {
    blockId: pulumi.Input<string>;
    nodes: pulumi.Input<pulumi.Input<inputs.FoundationCentralImageClusterFoundationInitConfigBlockNode>[]>;
}

export interface FoundationCentralImageClusterFoundationInitConfigBlockNode {
    cvmIp: pulumi.Input<string>;
    cvmVlanId: pulumi.Input<number>;
    fcImagedNodeUuid: pulumi.Input<string>;
    hardwareAttributesOverride: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    hypervisor: pulumi.Input<string>;
    hypervisorHostname: pulumi.Input<string>;
    hypervisorIp: pulumi.Input<string>;
    imageNow: pulumi.Input<boolean>;
    ipmiIp: pulumi.Input<string>;
    ipv6Address: pulumi.Input<string>;
    nodePosition: pulumi.Input<string>;
    nodeSerial: pulumi.Input<string>;
}

export interface FoundationCentralImageClusterFoundationInitConfigCluster {
    clusterExternalIp: pulumi.Input<string>;
    clusterInitNow: pulumi.Input<boolean>;
    clusterInitSuccessful: pulumi.Input<boolean>;
    clusterMembers: pulumi.Input<pulumi.Input<string>[]>;
    clusterName: pulumi.Input<string>;
    cvmDnsServers: pulumi.Input<string>;
    cvmNtpServers: pulumi.Input<string>;
    redundancyFactor: pulumi.Input<number>;
    timezone: pulumi.Input<string>;
}

export interface FoundationCentralImageClusterFoundationInitConfigHypervisorIso {
    hypervisorType: pulumi.Input<string>;
    sha256sum: pulumi.Input<string>;
    url: pulumi.Input<string>;
}

export interface FoundationCentralImageClusterFoundationInitConfigNosPackageUrl {
    sha256sum: pulumi.Input<string>;
    url: pulumi.Input<string>;
}

export interface FoundationCentralImageClusterHypervisorIsoDetails {
    hypervProductKey?: pulumi.Input<string>;
    hypervSku?: pulumi.Input<string>;
    sha256sum?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
}

export interface FoundationCentralImageClusterNodeList {
    cvmGateway?: pulumi.Input<string>;
    cvmIp?: pulumi.Input<string>;
    cvmNetmask?: pulumi.Input<string>;
    cvmRamGb?: pulumi.Input<number>;
    cvmVlanId?: pulumi.Input<number>;
    hardwareAttributesOverride?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    hypervisorGateway?: pulumi.Input<string>;
    hypervisorHostname?: pulumi.Input<string>;
    hypervisorIp?: pulumi.Input<string>;
    hypervisorNetmask?: pulumi.Input<string>;
    hypervisorType?: pulumi.Input<string>;
    imageNow?: pulumi.Input<boolean>;
    imagedNodeUuid?: pulumi.Input<string>;
    ipmiGateway?: pulumi.Input<string>;
    ipmiIp?: pulumi.Input<string>;
    ipmiNetmask?: pulumi.Input<string>;
    rdmaPassthrough?: pulumi.Input<boolean>;
    useExistingNetworkSettings?: pulumi.Input<boolean>;
}

export interface FoundationCentralImageClusterTimeouts {
    create?: pulumi.Input<string>;
}

export interface FoundationImageNodesBlock {
    blockId?: pulumi.Input<string>;
    nodes: pulumi.Input<pulumi.Input<inputs.FoundationImageNodesBlockNode>[]>;
}

export interface FoundationImageNodesBlockNode {
    bondLacpRate?: pulumi.Input<string>;
    bondMode?: pulumi.Input<string>;
    bondUplinks?: pulumi.Input<pulumi.Input<string>[]>;
    clusterId?: pulumi.Input<string>;
    currentCvmVlanTag?: pulumi.Input<number>;
    currentNetworkInterface?: pulumi.Input<string>;
    cvmGbRam?: pulumi.Input<number>;
    cvmIp?: pulumi.Input<string>;
    cvmNumVcpus?: pulumi.Input<number>;
    deviceHint?: pulumi.Input<string>;
    exludeBootSerial?: pulumi.Input<string>;
    hypervisor?: pulumi.Input<string>;
    hypervisorHostname: pulumi.Input<string>;
    hypervisorIp: pulumi.Input<string>;
    imageDelay?: pulumi.Input<number>;
    imageNow?: pulumi.Input<boolean>;
    imageSuccessful?: pulumi.Input<boolean>;
    ipmiConfigureNow?: pulumi.Input<boolean>;
    ipmiGateway?: pulumi.Input<string>;
    ipmiIp?: pulumi.Input<string>;
    ipmiMac?: pulumi.Input<string>;
    ipmiNetmask?: pulumi.Input<string>;
    ipmiPassword?: pulumi.Input<string>;
    ipmiUser?: pulumi.Input<string>;
    ipv6Address?: pulumi.Input<string>;
    ipv6Interface?: pulumi.Input<string>;
    mitigateLowBootSpace?: pulumi.Input<boolean>;
    nodePosition: pulumi.Input<string>;
    nodeSerial?: pulumi.Input<string>;
    rdmaMacAddr?: pulumi.Input<string>;
    rdmaPassthrough?: pulumi.Input<boolean>;
    ucsmManagedMode?: pulumi.Input<string>;
    ucsmNodeSerial?: pulumi.Input<string>;
    ucsmParams?: pulumi.Input<inputs.FoundationImageNodesBlockNodeUcsmParams>;
    vswitches?: pulumi.Input<pulumi.Input<inputs.FoundationImageNodesBlockNodeVswitch>[]>;
}

export interface FoundationImageNodesBlockNodeUcsmParams {
    keepUcsmSettings?: pulumi.Input<boolean>;
    macPool?: pulumi.Input<string>;
    nativeVlan?: pulumi.Input<boolean>;
    vlanName?: pulumi.Input<string>;
}

export interface FoundationImageNodesBlockNodeVswitch {
    bondMode?: pulumi.Input<string>;
    lacp?: pulumi.Input<string>;
    mtu?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    otherConfigs?: pulumi.Input<pulumi.Input<string>[]>;
    uplinks?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FoundationImageNodesCluster {
    backplaneNetmask?: pulumi.Input<string>;
    backplaneSubnet?: pulumi.Input<string>;
    backplaneVlan?: pulumi.Input<string>;
    clusterExternalIp?: pulumi.Input<string>;
    clusterInitNow?: pulumi.Input<boolean>;
    clusterInitSuccessful?: pulumi.Input<boolean>;
    clusterMembers: pulumi.Input<pulumi.Input<string>[]>;
    clusterName: pulumi.Input<string>;
    cvmDnsServers?: pulumi.Input<string>;
    cvmNtpServers?: pulumi.Input<string>;
    enableNs?: pulumi.Input<boolean>;
    hypervisorNtpServers?: pulumi.Input<string>;
    redundancyFactor: pulumi.Input<number>;
    singleNodeCluster?: pulumi.Input<boolean>;
    timezone?: pulumi.Input<string>;
}

export interface FoundationImageNodesClusterUrl {
    clusterName: pulumi.Input<string>;
    clusterUrl: pulumi.Input<string>;
}

export interface FoundationImageNodesEosMetadata {
    accountNames?: pulumi.Input<pulumi.Input<string>[]>;
    configId?: pulumi.Input<string>;
    email?: pulumi.Input<string>;
}

export interface FoundationImageNodesFcSettings {
    fcMetadata: pulumi.Input<inputs.FoundationImageNodesFcSettingsFcMetadata>;
    foundationCentral: pulumi.Input<boolean>;
}

export interface FoundationImageNodesFcSettingsFcMetadata {
    apiKey: pulumi.Input<string>;
    fcIp: pulumi.Input<string>;
}

export interface FoundationImageNodesHypervisorIso {
    esx?: pulumi.Input<inputs.FoundationImageNodesHypervisorIsoEsx>;
    hyperv?: pulumi.Input<inputs.FoundationImageNodesHypervisorIsoHyperv>;
    kvm?: pulumi.Input<inputs.FoundationImageNodesHypervisorIsoKvm>;
    xen?: pulumi.Input<inputs.FoundationImageNodesHypervisorIsoXen>;
}

export interface FoundationImageNodesHypervisorIsoEsx {
    checksum: pulumi.Input<string>;
    filename: pulumi.Input<string>;
}

export interface FoundationImageNodesHypervisorIsoHyperv {
    checksum: pulumi.Input<string>;
    filename: pulumi.Input<string>;
}

export interface FoundationImageNodesHypervisorIsoKvm {
    checksum: pulumi.Input<string>;
    filename: pulumi.Input<string>;
}

export interface FoundationImageNodesHypervisorIsoXen {
    checksum: pulumi.Input<string>;
    filename: pulumi.Input<string>;
}

export interface FoundationImageNodesTests {
    runNcc?: pulumi.Input<boolean>;
    runSyscheck?: pulumi.Input<boolean>;
}

export interface FoundationImageNodesTimeouts {
    create?: pulumi.Input<string>;
}

export interface FoundationIpmiConfigBlock {
    blockId?: pulumi.Input<string>;
    nodes: pulumi.Input<pulumi.Input<inputs.FoundationIpmiConfigBlockNode>[]>;
}

export interface FoundationIpmiConfigBlockNode {
    ipmiConfigureNow: pulumi.Input<boolean>;
    ipmiConfigureSuccessful?: pulumi.Input<boolean>;
    ipmiIp: pulumi.Input<string>;
    ipmiMac: pulumi.Input<string>;
    ipmiMessage?: pulumi.Input<string>;
}

export interface GetAccessControlPoliciesMetadata {
    filter?: string;
    kind?: string;
    length?: number;
    offset?: number;
    sortAttribute?: string;
    sortOrder?: string;
}

export interface GetAccessControlPoliciesMetadataArgs {
    filter?: pulumi.Input<string>;
    kind?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    sortAttribute?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<string>;
}

export interface GetAccessControlPolicyCategory {
    name?: string;
    value?: string;
}

export interface GetAccessControlPolicyCategoryArgs {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetAddressGroupsMetadata {
    filter?: string;
    kind?: string;
    length?: number;
    offset?: number;
    sortAttribute?: string;
    sortOrder?: string;
}

export interface GetAddressGroupsMetadataArgs {
    filter?: pulumi.Input<string>;
    kind?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    sortAttribute?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<string>;
}

export interface GetAssertHelperCheck {
    condition: boolean;
    errorMessage: string;
}

export interface GetAssertHelperCheckArgs {
    condition: pulumi.Input<boolean>;
    errorMessage: pulumi.Input<string>;
}

export interface GetClusterCategory {
    name?: string;
    value?: string;
}

export interface GetClusterCategoryArgs {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetFloatingIpsMetadata {
    filter?: string;
    kind?: string;
    length?: number;
    offset?: number;
    sortAttribute?: string;
    sortOrder?: string;
    totalMatches?: number;
}

export interface GetFloatingIpsMetadataArgs {
    filter?: pulumi.Input<string>;
    kind?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    sortAttribute?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<string>;
    totalMatches?: pulumi.Input<number>;
}

export interface GetFoundationCentralClusterDetailsClusterStatus {
    aggregatePercentComplete?: number;
    clusterCreationStarted?: boolean;
    clusterProgressDetails?: inputs.GetFoundationCentralClusterDetailsClusterStatusClusterProgressDetail[];
    currentFoundationIp?: string;
    foundationSessionId?: string;
    imagingStopped?: boolean;
    intentPickedUp?: boolean;
    nodeProgressDetails?: inputs.GetFoundationCentralClusterDetailsClusterStatusNodeProgressDetail[];
}

export interface GetFoundationCentralClusterDetailsClusterStatusArgs {
    aggregatePercentComplete?: pulumi.Input<number>;
    clusterCreationStarted?: pulumi.Input<boolean>;
    clusterProgressDetails?: pulumi.Input<pulumi.Input<inputs.GetFoundationCentralClusterDetailsClusterStatusClusterProgressDetailArgs>[]>;
    currentFoundationIp?: pulumi.Input<string>;
    foundationSessionId?: pulumi.Input<string>;
    imagingStopped?: pulumi.Input<boolean>;
    intentPickedUp?: pulumi.Input<boolean>;
    nodeProgressDetails?: pulumi.Input<pulumi.Input<inputs.GetFoundationCentralClusterDetailsClusterStatusNodeProgressDetailArgs>[]>;
}

export interface GetFoundationCentralClusterDetailsClusterStatusClusterProgressDetail {
    clusterName: string;
    messageLists: string[];
    percentComplete: number;
    status: string;
}

export interface GetFoundationCentralClusterDetailsClusterStatusClusterProgressDetailArgs {
    clusterName: pulumi.Input<string>;
    messageLists: pulumi.Input<pulumi.Input<string>[]>;
    percentComplete: pulumi.Input<number>;
    status: pulumi.Input<string>;
}

export interface GetFoundationCentralClusterDetailsClusterStatusNodeProgressDetail {
    imagedNodeUuid: string;
    imagingStopped: boolean;
    intentPickedUp: boolean;
    messageLists: string[];
    percentComplete: number;
    status: string;
}

export interface GetFoundationCentralClusterDetailsClusterStatusNodeProgressDetailArgs {
    imagedNodeUuid: pulumi.Input<string>;
    imagingStopped: pulumi.Input<boolean>;
    intentPickedUp: pulumi.Input<boolean>;
    messageLists: pulumi.Input<pulumi.Input<string>[]>;
    percentComplete: pulumi.Input<number>;
    status: pulumi.Input<string>;
}

export interface GetFoundationCentralClusterDetailsCommonNetworkSettings {
    cvmDnsServers?: string[];
    cvmNtpServers?: string[];
    hypervisorDnsServers?: string[];
    hypervisorNtpServers?: string[];
}

export interface GetFoundationCentralClusterDetailsCommonNetworkSettingsArgs {
    cvmDnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    cvmNtpServers?: pulumi.Input<pulumi.Input<string>[]>;
    hypervisorDnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    hypervisorNtpServers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetFoundationCentralImagedClustersListFilters {
    archived?: boolean;
}

export interface GetFoundationCentralImagedClustersListFiltersArgs {
    archived?: pulumi.Input<boolean>;
}

export interface GetFoundationCentralImagedNodesListFilters {
    nodeState?: string;
}

export interface GetFoundationCentralImagedNodesListFiltersArgs {
    nodeState?: pulumi.Input<string>;
}

export interface GetFoundationCentralListApiKeysMetadata {
    length?: number;
    offset?: number;
    totalMatches?: number;
}

export interface GetFoundationCentralListApiKeysMetadataArgs {
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    totalMatches?: pulumi.Input<number>;
}

export interface GetHostCategory {
    name?: string;
    value?: string;
}

export interface GetHostCategoryArgs {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetImageCategory {
    name?: string;
    value?: string;
}

export interface GetImageCategoryArgs {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetNdbCloneFilter {
    anyStatus?: string;
    detailed?: string;
    loadDbserverCluster?: string;
    timezone?: string;
}

export interface GetNdbCloneFilterArgs {
    anyStatus?: pulumi.Input<string>;
    detailed?: pulumi.Input<string>;
    loadDbserverCluster?: pulumi.Input<string>;
    timezone?: pulumi.Input<string>;
}

export interface GetNdbCloneTag {
    entityId?: string;
    entityType?: string;
    tagId?: string;
    tagName?: string;
    value?: string;
}

export interface GetNdbCloneTagArgs {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetNdbClonesFilter {
    anyStatus?: string;
    detailed?: string;
    loadDbserverCluster?: string;
    orderByDbserverCluster?: string;
    orderByDbserverLogicalCluster?: string;
    timezone?: string;
}

export interface GetNdbClonesFilterArgs {
    anyStatus?: pulumi.Input<string>;
    detailed?: pulumi.Input<string>;
    loadDbserverCluster?: pulumi.Input<string>;
    orderByDbserverCluster?: pulumi.Input<string>;
    orderByDbserverLogicalCluster?: pulumi.Input<string>;
    timezone?: pulumi.Input<string>;
}

export interface GetNdbDatabaseTag {
    entityId?: string;
    entityType?: string;
    tagId?: string;
    tagName?: string;
    value?: string;
}

export interface GetNdbDatabaseTagArgs {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetNdbDbserverTag {
    entityId?: string;
    entityType?: string;
    tagId?: string;
    tagName?: string;
    value?: string;
}

export interface GetNdbDbserverTagArgs {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetNdbMaintenanceWindowTag {
    entityId?: string;
    entityType?: string;
    tagId?: string;
    tagName?: string;
    value?: string;
}

export interface GetNdbMaintenanceWindowTagArgs {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetNdbSnapshotFilter {
    loadReplicatedChildSnapshots?: string;
    timezone?: string;
}

export interface GetNdbSnapshotFilterArgs {
    loadReplicatedChildSnapshots?: pulumi.Input<string>;
    timezone?: pulumi.Input<string>;
}

export interface GetNdbSnapshotTag {
    entityId?: string;
    entityType?: string;
    tagId?: string;
    tagName?: string;
    value?: string;
}

export interface GetNdbSnapshotTagArgs {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetNdbSnapshotsFilter {
    timeMachineId?: string;
}

export interface GetNdbSnapshotsFilterArgs {
    timeMachineId?: pulumi.Input<string>;
}

export interface GetNdbTimeMachineTag {
    entityId?: string;
    entityType?: string;
    tagId?: string;
    tagName?: string;
    value?: string;
}

export interface GetNdbTimeMachineTagArgs {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetNetworkSecurityRuleCategory {
    name?: string;
    value?: string;
}

export interface GetNetworkSecurityRuleCategoryArgs {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetPbrsMetadata {
    filter?: string;
    kind?: string;
    length?: number;
    offset?: number;
    sortAttribute?: string;
    sortOrder?: string;
    totalMatches?: number;
}

export interface GetPbrsMetadataArgs {
    filter?: pulumi.Input<string>;
    kind?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    sortAttribute?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<string>;
    totalMatches?: pulumi.Input<number>;
}

export interface GetPermissionCategory {
    name?: string;
    value?: string;
}

export interface GetPermissionCategoryArgs {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetPermissionsMetadata {
    filter?: string;
    kind?: string;
    length?: number;
    offset?: number;
    sortAttribute?: string;
    sortOrder?: string;
}

export interface GetPermissionsMetadataArgs {
    filter?: pulumi.Input<string>;
    kind?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    sortAttribute?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<string>;
}

export interface GetProjectCategory {
    name?: string;
    value?: string;
}

export interface GetProjectCategoryArgs {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetProjectExternalUserGroupReferenceList {
    kind?: string;
    name?: string;
    uuid?: string;
}

export interface GetProjectExternalUserGroupReferenceListArgs {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface GetProjectSubnetReferenceList {
    kind?: string;
    name?: string;
    uuid?: string;
}

export interface GetProjectSubnetReferenceListArgs {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface GetProjectUserReferenceList {
    kind?: string;
    name?: string;
    uuid?: string;
}

export interface GetProjectUserReferenceListArgs {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface GetProtectionRuleCategory {
    name?: string;
    value?: string;
}

export interface GetProtectionRuleCategoryArgs {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetRecoveryPlanCategory {
    name?: string;
    value?: string;
}

export interface GetRecoveryPlanCategoryArgs {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetRoleCategory {
    name?: string;
    value?: string;
}

export interface GetRoleCategoryArgs {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetRolesMetadata {
    filter?: string;
    kind?: string;
    length?: number;
    offset?: number;
    sortAttribute?: string;
    sortOrder?: string;
}

export interface GetRolesMetadataArgs {
    filter?: pulumi.Input<string>;
    kind?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    sortAttribute?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<string>;
}

export interface GetServiceGroupsMetadata {
    filter?: string;
    kind?: string;
    length?: number;
    offset?: number;
    sortAttribute?: string;
    sortOrder?: string;
}

export interface GetServiceGroupsMetadataArgs {
    filter?: pulumi.Input<string>;
    kind?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    sortAttribute?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<string>;
}

export interface GetSubnetAdditionalFilter {
    name: string;
    values: string[];
}

export interface GetSubnetAdditionalFilterArgs {
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetSubnetCategory {
    name?: string;
    value?: string;
}

export interface GetSubnetCategoryArgs {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetSubnetsMetadata {
    filter?: string;
    kind?: string;
    length?: number;
    offset?: number;
    sortAttribute?: string;
    sortOrder?: string;
}

export interface GetSubnetsMetadataArgs {
    filter?: pulumi.Input<string>;
    kind?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    sortAttribute?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<string>;
}

export interface GetUserCategory {
    name?: string;
    value?: string;
}

export interface GetUserCategoryArgs {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetUserGroupCategory {
    name?: string;
    value?: string;
}

export interface GetUserGroupCategoryArgs {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetUserGroupsMetadata {
    filter?: string;
    kind?: string;
    length?: number;
    offset?: number;
    sortAttribute?: string;
    sortOrder?: string;
}

export interface GetUserGroupsMetadataArgs {
    filter?: pulumi.Input<string>;
    kind?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    sortAttribute?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<string>;
}

export interface GetUsersMetadata {
    filter?: string;
    kind?: string;
    length?: number;
    offset?: number;
    sortAttribute?: string;
    sortOrder?: string;
}

export interface GetUsersMetadataArgs {
    filter?: pulumi.Input<string>;
    kind?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    sortAttribute?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<string>;
}

export interface GetVirtualMachineCategory {
    name?: string;
    value?: string;
}

export interface GetVirtualMachineCategoryArgs {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetVpcsMetadata {
    filter?: string;
    kind?: string;
    length?: number;
    offset?: number;
    sortAttribute?: string;
    sortOrder?: string;
    totalMatches?: number;
}

export interface GetVpcsMetadataArgs {
    filter?: pulumi.Input<string>;
    kind?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    offset?: pulumi.Input<number>;
    sortAttribute?: pulumi.Input<string>;
    sortOrder?: pulumi.Input<string>;
    totalMatches?: pulumi.Input<number>;
}

export interface ImageCategory {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ImageClusterReference {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface ImageCurrentClusterReferenceList {
    kind: pulumi.Input<string>;
    name: pulumi.Input<string>;
    uuid: pulumi.Input<string>;
}

export interface ImageTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface KarbonClusterActivePassiveConfig {
    externalIpv4Address: pulumi.Input<string>;
}

export interface KarbonClusterCniConfig {
    calicoConfig?: pulumi.Input<inputs.KarbonClusterCniConfigCalicoConfig>;
    flannelConfigs?: pulumi.Input<pulumi.Input<inputs.KarbonClusterCniConfigFlannelConfig>[]>;
    nodeCidrMaskSize?: pulumi.Input<number>;
    podIpv4Cidr?: pulumi.Input<string>;
    serviceIpv4Cidr?: pulumi.Input<string>;
}

export interface KarbonClusterCniConfigCalicoConfig {
    ipPoolConfigs?: pulumi.Input<pulumi.Input<inputs.KarbonClusterCniConfigCalicoConfigIpPoolConfig>[]>;
}

export interface KarbonClusterCniConfigCalicoConfigIpPoolConfig {
    cidr?: pulumi.Input<string>;
}

export interface KarbonClusterCniConfigFlannelConfig {
}

export interface KarbonClusterEtcdNodePool {
    ahvConfig?: pulumi.Input<inputs.KarbonClusterEtcdNodePoolAhvConfig>;
    name?: pulumi.Input<string>;
    nodeOsVersion: pulumi.Input<string>;
    nodes?: pulumi.Input<pulumi.Input<inputs.KarbonClusterEtcdNodePoolNode>[]>;
    numInstances: pulumi.Input<number>;
}

export interface KarbonClusterEtcdNodePoolAhvConfig {
    cpu?: pulumi.Input<number>;
    diskMib?: pulumi.Input<number>;
    memoryMib?: pulumi.Input<number>;
    networkUuid: pulumi.Input<string>;
    prismElementClusterUuid: pulumi.Input<string>;
}

export interface KarbonClusterEtcdNodePoolNode {
    hostname: pulumi.Input<string>;
    ipv4Address: pulumi.Input<string>;
}

export interface KarbonClusterExternalLbConfig {
    externalIpv4Address: pulumi.Input<string>;
    masterNodesConfigs: pulumi.Input<pulumi.Input<inputs.KarbonClusterExternalLbConfigMasterNodesConfig>[]>;
}

export interface KarbonClusterExternalLbConfigMasterNodesConfig {
    ipv4Address: pulumi.Input<string>;
    nodePoolName?: pulumi.Input<string>;
}

export interface KarbonClusterMasterNodePool {
    ahvConfig?: pulumi.Input<inputs.KarbonClusterMasterNodePoolAhvConfig>;
    name?: pulumi.Input<string>;
    nodeOsVersion: pulumi.Input<string>;
    nodes?: pulumi.Input<pulumi.Input<inputs.KarbonClusterMasterNodePoolNode>[]>;
    numInstances: pulumi.Input<number>;
}

export interface KarbonClusterMasterNodePoolAhvConfig {
    cpu?: pulumi.Input<number>;
    diskMib?: pulumi.Input<number>;
    memoryMib?: pulumi.Input<number>;
    networkUuid: pulumi.Input<string>;
    prismElementClusterUuid: pulumi.Input<string>;
}

export interface KarbonClusterMasterNodePoolNode {
    hostname: pulumi.Input<string>;
    ipv4Address: pulumi.Input<string>;
}

export interface KarbonClusterPrivateRegistry {
    registryName: pulumi.Input<string>;
}

export interface KarbonClusterSingleMasterConfig {
}

export interface KarbonClusterStorageClassConfig {
    name?: pulumi.Input<string>;
    reclaimPolicy?: pulumi.Input<string>;
    volumesConfig: pulumi.Input<inputs.KarbonClusterStorageClassConfigVolumesConfig>;
}

export interface KarbonClusterStorageClassConfigVolumesConfig {
    fileSystem?: pulumi.Input<string>;
    flashMode?: pulumi.Input<boolean>;
    password: pulumi.Input<string>;
    prismElementClusterUuid: pulumi.Input<string>;
    storageContainer: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface KarbonClusterTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface KarbonClusterWorkerNodePool {
    ahvConfig?: pulumi.Input<inputs.KarbonClusterWorkerNodePoolAhvConfig>;
    name?: pulumi.Input<string>;
    nodeOsVersion: pulumi.Input<string>;
    nodes?: pulumi.Input<pulumi.Input<inputs.KarbonClusterWorkerNodePoolNode>[]>;
    numInstances: pulumi.Input<number>;
}

export interface KarbonClusterWorkerNodePoolAhvConfig {
    cpu?: pulumi.Input<number>;
    diskMib?: pulumi.Input<number>;
    memoryMib?: pulumi.Input<number>;
    networkUuid: pulumi.Input<string>;
    prismElementClusterUuid: pulumi.Input<string>;
}

export interface KarbonClusterWorkerNodePoolNode {
    hostname: pulumi.Input<string>;
    ipv4Address: pulumi.Input<string>;
}

export interface KarbonWorkerNodepoolAhvConfig {
    cpu?: pulumi.Input<number>;
    diskMib?: pulumi.Input<number>;
    iscsiNetworkUuid?: pulumi.Input<string>;
    memoryMib?: pulumi.Input<number>;
    networkUuid: pulumi.Input<string>;
    prismElementClusterUuid?: pulumi.Input<string>;
}

export interface KarbonWorkerNodepoolNode {
    hostname: pulumi.Input<string>;
    ipv4Address: pulumi.Input<string>;
}

export interface KarbonWorkerNodepoolTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface NdbCloneActionargument {
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface NdbCloneDatabaseNode {
    accessLevel: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    databaseId: pulumi.Input<string>;
    databaseStatus: pulumi.Input<string>;
    dateCreated: pulumi.Input<string>;
    dateModified: pulumi.Input<string>;
    dbserver: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    dbserverId: pulumi.Input<string>;
    description: pulumi.Input<string>;
    id: pulumi.Input<string>;
    infos: pulumi.Input<pulumi.Input<inputs.NdbCloneDatabaseNodeInfo>[]>;
    name: pulumi.Input<string>;
    primary: pulumi.Input<boolean>;
    properties: pulumi.Input<pulumi.Input<inputs.NdbCloneDatabaseNodeProperty>[]>;
    protectionDomainId: pulumi.Input<string>;
    protectionDomains: pulumi.Input<pulumi.Input<inputs.NdbCloneDatabaseNodeProtectionDomain>[]>;
    softwareInstallationId: pulumi.Input<string>;
    status: pulumi.Input<string>;
    tags: pulumi.Input<pulumi.Input<inputs.NdbCloneDatabaseNodeTag>[]>;
}

export interface NdbCloneDatabaseNodeInfo {
    info: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    secureInfo: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NdbCloneDatabaseNodeProperty {
    description: pulumi.Input<string>;
    name: pulumi.Input<string>;
    refId: pulumi.Input<string>;
    secure: pulumi.Input<boolean>;
    value: pulumi.Input<string>;
}

export interface NdbCloneDatabaseNodeProtectionDomain {
    assocEntities: pulumi.Input<pulumi.Input<string>[]>;
    cloudId: pulumi.Input<string>;
    dateCreated: pulumi.Input<string>;
    dateModified: pulumi.Input<string>;
    description: pulumi.Input<string>;
    eraCreated: pulumi.Input<boolean>;
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
    ownerId: pulumi.Input<string>;
    primaryHost: pulumi.Input<string>;
    properties: pulumi.Input<pulumi.Input<inputs.NdbCloneDatabaseNodeProtectionDomainProperty>[]>;
    status: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface NdbCloneDatabaseNodeProtectionDomainProperty {
    description: pulumi.Input<string>;
    name: pulumi.Input<string>;
    refId: pulumi.Input<string>;
    secure: pulumi.Input<boolean>;
    value: pulumi.Input<string>;
}

export interface NdbCloneDatabaseNodeTag {
    entityId: pulumi.Input<string>;
    entityType: pulumi.Input<string>;
    tagId: pulumi.Input<string>;
    tagName: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface NdbCloneInfo {
    bpgConfigs: pulumi.Input<pulumi.Input<inputs.NdbCloneInfoBpgConfig>[]>;
    secureInfo: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NdbCloneInfoBpgConfig {
    bpgDbParams: pulumi.Input<pulumi.Input<inputs.NdbCloneInfoBpgConfigBpgDbParam>[]>;
    storages: pulumi.Input<pulumi.Input<inputs.NdbCloneInfoBpgConfigStorage>[]>;
    vmProperties: pulumi.Input<pulumi.Input<inputs.NdbCloneInfoBpgConfigVmProperty>[]>;
}

export interface NdbCloneInfoBpgConfigBpgDbParam {
    effectiveCacheSize: pulumi.Input<string>;
    maintenanceWorkMem: pulumi.Input<string>;
    maxParallelWorkersPerGather: pulumi.Input<string>;
    maxWorkerProcesses: pulumi.Input<string>;
    sharedBuffers: pulumi.Input<string>;
    workMem: pulumi.Input<string>;
}

export interface NdbCloneInfoBpgConfigStorage {
    archiveStorages: pulumi.Input<pulumi.Input<inputs.NdbCloneInfoBpgConfigStorageArchiveStorage>[]>;
    dataDisks: pulumi.Input<pulumi.Input<inputs.NdbCloneInfoBpgConfigStorageDataDisk>[]>;
    logDisks: pulumi.Input<pulumi.Input<inputs.NdbCloneInfoBpgConfigStorageLogDisk>[]>;
}

export interface NdbCloneInfoBpgConfigStorageArchiveStorage {
    size: pulumi.Input<number>;
}

export interface NdbCloneInfoBpgConfigStorageDataDisk {
    count: pulumi.Input<number>;
}

export interface NdbCloneInfoBpgConfigStorageLogDisk {
    count: pulumi.Input<number>;
    size: pulumi.Input<number>;
}

export interface NdbCloneInfoBpgConfigVmProperty {
    dirtyBackgroundRatio: pulumi.Input<number>;
    dirtyExpireCentisecs: pulumi.Input<number>;
    dirtyRatio: pulumi.Input<number>;
    dirtyWritebackCentisecs: pulumi.Input<number>;
    nrHugepages: pulumi.Input<number>;
    overcommitMemory: pulumi.Input<number>;
    swappiness: pulumi.Input<number>;
}

export interface NdbCloneLcmConfig {
    databaseLcmConfigs?: pulumi.Input<pulumi.Input<inputs.NdbCloneLcmConfigDatabaseLcmConfig>[]>;
}

export interface NdbCloneLcmConfigDatabaseLcmConfig {
    expiryDetails?: pulumi.Input<pulumi.Input<inputs.NdbCloneLcmConfigDatabaseLcmConfigExpiryDetail>[]>;
    refreshDetails?: pulumi.Input<pulumi.Input<inputs.NdbCloneLcmConfigDatabaseLcmConfigRefreshDetail>[]>;
}

export interface NdbCloneLcmConfigDatabaseLcmConfigExpiryDetail {
    deleteDatabase?: pulumi.Input<boolean>;
    expireInDays?: pulumi.Input<number>;
    expiryDateTimezone: pulumi.Input<string>;
}

export interface NdbCloneLcmConfigDatabaseLcmConfigRefreshDetail {
    refreshDateTimezone?: pulumi.Input<string>;
    refreshInDays?: pulumi.Input<number>;
    refreshTime?: pulumi.Input<string>;
}

export interface NdbCloneLinkedDatabase {
    databaseName: pulumi.Input<string>;
    databaseStatus: pulumi.Input<string>;
    dateCreated: pulumi.Input<string>;
    dateModified: pulumi.Input<string>;
    description: pulumi.Input<string>;
    id: pulumi.Input<string>;
    infos: pulumi.Input<pulumi.Input<inputs.NdbCloneLinkedDatabaseInfo>[]>;
    metric: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name: pulumi.Input<string>;
    parentDatabaseId: pulumi.Input<string>;
    parentLinkedDatabaseId: pulumi.Input<string>;
    snapshotId: pulumi.Input<string>;
    status: pulumi.Input<string>;
    timezone: pulumi.Input<string>;
}

export interface NdbCloneLinkedDatabaseInfo {
    info: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    secureInfo: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NdbCloneNode {
    computeProfileId?: pulumi.Input<string>;
    dbserverId?: pulumi.Input<string>;
    networkProfileId?: pulumi.Input<string>;
    newDbServerTimeZone?: pulumi.Input<string>;
    nxClusterId?: pulumi.Input<string>;
    /**
     * List of all the properties
     */
    properties?: pulumi.Input<pulumi.Input<inputs.NdbCloneNodeProperty>[]>;
    vmName?: pulumi.Input<string>;
}

export interface NdbCloneNodeProperty {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbClonePostgresqlInfo {
    dbPassword: pulumi.Input<string>;
    dbserverDescription?: pulumi.Input<string>;
    postCloneCmd?: pulumi.Input<string>;
    preCloneCmd?: pulumi.Input<string>;
    vmName: pulumi.Input<string>;
}

export interface NdbCloneProperty {
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface NdbCloneRefreshTimeouts {
    create?: pulumi.Input<string>;
}

export interface NdbCloneTag {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbCloneTimeMachine {
    accessLevel: pulumi.Input<string>;
    clone: pulumi.Input<boolean>;
    clones: pulumi.Input<string>;
    clustered: pulumi.Input<boolean>;
    database: pulumi.Input<string>;
    databaseId: pulumi.Input<string>;
    dateCreated: pulumi.Input<string>;
    dateModified: pulumi.Input<string>;
    description: pulumi.Input<string>;
    eaStatus: pulumi.Input<string>;
    id: pulumi.Input<string>;
    metric: pulumi.Input<string>;
    name: pulumi.Input<string>;
    properties: pulumi.Input<pulumi.Input<inputs.NdbCloneTimeMachineProperty>[]>;
    scheduleId: pulumi.Input<string>;
    schedules: pulumi.Input<pulumi.Input<inputs.NdbCloneTimeMachineSchedule>[]>;
    scope: pulumi.Input<string>;
    slaId: pulumi.Input<string>;
    slaUpdateInProgress: pulumi.Input<boolean>;
    slaUpdateMetadata: pulumi.Input<string>;
    slas: pulumi.Input<pulumi.Input<inputs.NdbCloneTimeMachineSla>[]>;
    sourceNxClusters: pulumi.Input<pulumi.Input<string>[]>;
    status: pulumi.Input<string>;
    tags: pulumi.Input<pulumi.Input<inputs.NdbCloneTimeMachineTag>[]>;
    type: pulumi.Input<string>;
}

export interface NdbCloneTimeMachineProperty {
    description: pulumi.Input<string>;
    name: pulumi.Input<string>;
    refId: pulumi.Input<string>;
    secure: pulumi.Input<boolean>;
    value: pulumi.Input<string>;
}

export interface NdbCloneTimeMachineSchedule {
    continuousSchedules: pulumi.Input<pulumi.Input<inputs.NdbCloneTimeMachineScheduleContinuousSchedule>[]>;
    dailySchedules: pulumi.Input<pulumi.Input<inputs.NdbCloneTimeMachineScheduleDailySchedule>[]>;
    dateCreated: pulumi.Input<string>;
    dateModified: pulumi.Input<string>;
    description: pulumi.Input<string>;
    globalPolicy: pulumi.Input<boolean>;
    id: pulumi.Input<string>;
    monthlySchedules: pulumi.Input<pulumi.Input<inputs.NdbCloneTimeMachineScheduleMonthlySchedule>[]>;
    name: pulumi.Input<string>;
    ownerId: pulumi.Input<string>;
    quartelySchedules: pulumi.Input<pulumi.Input<inputs.NdbCloneTimeMachineScheduleQuartelySchedule>[]>;
    referenceCount: pulumi.Input<number>;
    snapshotTimeOfDays: pulumi.Input<pulumi.Input<inputs.NdbCloneTimeMachineScheduleSnapshotTimeOfDay>[]>;
    startTime: pulumi.Input<string>;
    systemPolicy: pulumi.Input<boolean>;
    timeZone: pulumi.Input<string>;
    uniqueName: pulumi.Input<string>;
    weeklySchedules: pulumi.Input<pulumi.Input<inputs.NdbCloneTimeMachineScheduleWeeklySchedule>[]>;
    yearlySchedules: pulumi.Input<pulumi.Input<inputs.NdbCloneTimeMachineScheduleYearlySchedule>[]>;
}

export interface NdbCloneTimeMachineScheduleContinuousSchedule {
    enabled: pulumi.Input<boolean>;
    logBackupInterval: pulumi.Input<number>;
    snapshotsPerDay: pulumi.Input<number>;
}

export interface NdbCloneTimeMachineScheduleDailySchedule {
    enabled: pulumi.Input<boolean>;
}

export interface NdbCloneTimeMachineScheduleMonthlySchedule {
    dayOfMonth: pulumi.Input<number>;
    enabled: pulumi.Input<boolean>;
}

export interface NdbCloneTimeMachineScheduleQuartelySchedule {
    dayOfMonth: pulumi.Input<number>;
    enabled: pulumi.Input<boolean>;
    startMonth: pulumi.Input<string>;
    startMonthValue: pulumi.Input<string>;
}

export interface NdbCloneTimeMachineScheduleSnapshotTimeOfDay {
    extra: pulumi.Input<boolean>;
    hours: pulumi.Input<number>;
    minutes: pulumi.Input<number>;
    seconds: pulumi.Input<number>;
}

export interface NdbCloneTimeMachineScheduleWeeklySchedule {
    dayOfWeek: pulumi.Input<string>;
    dayOfWeekValue: pulumi.Input<string>;
    enabled: pulumi.Input<boolean>;
}

export interface NdbCloneTimeMachineScheduleYearlySchedule {
    dayOfMonth: pulumi.Input<number>;
    enabled: pulumi.Input<boolean>;
    month: pulumi.Input<string>;
    monthValue: pulumi.Input<string>;
}

export interface NdbCloneTimeMachineSla {
    continuousRetention: pulumi.Input<number>;
    currentActiveFrequency: pulumi.Input<string>;
    dailyRetention: pulumi.Input<number>;
    dateCreated: pulumi.Input<string>;
    dateModified: pulumi.Input<string>;
    description: pulumi.Input<string>;
    id: pulumi.Input<string>;
    monthlyRetention: pulumi.Input<number>;
    name: pulumi.Input<string>;
    ownerId: pulumi.Input<string>;
    pitrEnabled: pulumi.Input<boolean>;
    quarterlyRetention: pulumi.Input<number>;
    referenceCount: pulumi.Input<number>;
    systemSla: pulumi.Input<boolean>;
    uniqueName: pulumi.Input<string>;
    weeklyRetention: pulumi.Input<number>;
    yearlyRetention: pulumi.Input<number>;
}

export interface NdbCloneTimeMachineTag {
    entityId: pulumi.Input<string>;
    entityType: pulumi.Input<string>;
    tagId: pulumi.Input<string>;
    tagName: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface NdbCloneTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface NdbClusterAgentNetworkInfo {
    dns?: pulumi.Input<string>;
    ntp?: pulumi.Input<string>;
}

export interface NdbClusterEntityCount {
    dbServers: pulumi.Input<number>;
    engineCounts: pulumi.Input<pulumi.Input<inputs.NdbClusterEntityCountEngineCount>[]>;
}

export interface NdbClusterEntityCountEngineCount {
    mariadbDatabases: pulumi.Input<pulumi.Input<inputs.NdbClusterEntityCountEngineCountMariadbDatabase>[]>;
    mongodbDatabases: pulumi.Input<pulumi.Input<inputs.NdbClusterEntityCountEngineCountMongodbDatabase>[]>;
    mysqlDatabases: pulumi.Input<pulumi.Input<inputs.NdbClusterEntityCountEngineCountMysqlDatabase>[]>;
    oracleDatabases: pulumi.Input<pulumi.Input<inputs.NdbClusterEntityCountEngineCountOracleDatabase>[]>;
    postgresDatabases: pulumi.Input<pulumi.Input<inputs.NdbClusterEntityCountEngineCountPostgresDatabase>[]>;
    saphanaDatabases: pulumi.Input<pulumi.Input<inputs.NdbClusterEntityCountEngineCountSaphanaDatabase>[]>;
    sqlserverDatabases: pulumi.Input<pulumi.Input<inputs.NdbClusterEntityCountEngineCountSqlserverDatabase>[]>;
}

export interface NdbClusterEntityCountEngineCountMariadbDatabase {
    profiles: pulumi.Input<pulumi.Input<inputs.NdbClusterEntityCountEngineCountMariadbDatabaseProfile>[]>;
    timeMachines: pulumi.Input<number>;
}

export interface NdbClusterEntityCountEngineCountMariadbDatabaseProfile {
    compute: pulumi.Input<number>;
    databaseParameter: pulumi.Input<number>;
    network: pulumi.Input<number>;
    software: pulumi.Input<number>;
    storage: pulumi.Input<number>;
    windowsDomain: pulumi.Input<number>;
}

export interface NdbClusterEntityCountEngineCountMongodbDatabase {
    profiles: pulumi.Input<pulumi.Input<inputs.NdbClusterEntityCountEngineCountMongodbDatabaseProfile>[]>;
    timeMachines: pulumi.Input<number>;
}

export interface NdbClusterEntityCountEngineCountMongodbDatabaseProfile {
    compute: pulumi.Input<number>;
    databaseParameter: pulumi.Input<number>;
    network: pulumi.Input<number>;
    software: pulumi.Input<number>;
    storage: pulumi.Input<number>;
    windowsDomain: pulumi.Input<number>;
}

export interface NdbClusterEntityCountEngineCountMysqlDatabase {
    profiles: pulumi.Input<pulumi.Input<inputs.NdbClusterEntityCountEngineCountMysqlDatabaseProfile>[]>;
    timeMachines: pulumi.Input<number>;
}

export interface NdbClusterEntityCountEngineCountMysqlDatabaseProfile {
    compute: pulumi.Input<number>;
    databaseParameter: pulumi.Input<number>;
    network: pulumi.Input<number>;
    software: pulumi.Input<number>;
    storage: pulumi.Input<number>;
    windowsDomain: pulumi.Input<number>;
}

export interface NdbClusterEntityCountEngineCountOracleDatabase {
    profiles: pulumi.Input<pulumi.Input<inputs.NdbClusterEntityCountEngineCountOracleDatabaseProfile>[]>;
    timeMachines: pulumi.Input<number>;
}

export interface NdbClusterEntityCountEngineCountOracleDatabaseProfile {
    compute: pulumi.Input<number>;
    databaseParameter: pulumi.Input<number>;
    network: pulumi.Input<number>;
    software: pulumi.Input<number>;
    storage: pulumi.Input<number>;
    windowsDomain: pulumi.Input<number>;
}

export interface NdbClusterEntityCountEngineCountPostgresDatabase {
    profiles: pulumi.Input<pulumi.Input<inputs.NdbClusterEntityCountEngineCountPostgresDatabaseProfile>[]>;
    timeMachines: pulumi.Input<number>;
}

export interface NdbClusterEntityCountEngineCountPostgresDatabaseProfile {
    compute: pulumi.Input<number>;
    databaseParameter: pulumi.Input<number>;
    network: pulumi.Input<number>;
    software: pulumi.Input<number>;
    storage: pulumi.Input<number>;
    windowsDomain: pulumi.Input<number>;
}

export interface NdbClusterEntityCountEngineCountSaphanaDatabase {
    profiles: pulumi.Input<pulumi.Input<inputs.NdbClusterEntityCountEngineCountSaphanaDatabaseProfile>[]>;
    timeMachines: pulumi.Input<number>;
}

export interface NdbClusterEntityCountEngineCountSaphanaDatabaseProfile {
    compute: pulumi.Input<number>;
    databaseParameter: pulumi.Input<number>;
    network: pulumi.Input<number>;
    software: pulumi.Input<number>;
    storage: pulumi.Input<number>;
    windowsDomain: pulumi.Input<number>;
}

export interface NdbClusterEntityCountEngineCountSqlserverDatabase {
    profiles: pulumi.Input<pulumi.Input<inputs.NdbClusterEntityCountEngineCountSqlserverDatabaseProfile>[]>;
    timeMachines: pulumi.Input<number>;
}

export interface NdbClusterEntityCountEngineCountSqlserverDatabaseProfile {
    compute: pulumi.Input<number>;
    databaseParameter: pulumi.Input<number>;
    network: pulumi.Input<number>;
    software: pulumi.Input<number>;
    storage: pulumi.Input<number>;
    windowsDomain: pulumi.Input<number>;
}

export interface NdbClusterNetworksInfo {
    accessTypes?: pulumi.Input<pulumi.Input<string>[]>;
    networkInfos?: pulumi.Input<pulumi.Input<inputs.NdbClusterNetworksInfoNetworkInfo>[]>;
    type?: pulumi.Input<string>;
}

export interface NdbClusterNetworksInfoNetworkInfo {
    gateway?: pulumi.Input<string>;
    staticIp?: pulumi.Input<string>;
    subnetMask?: pulumi.Input<string>;
    vlanName?: pulumi.Input<string>;
}

export interface NdbClusterProperty {
    description: pulumi.Input<string>;
    name: pulumi.Input<string>;
    refId: pulumi.Input<string>;
    secure: pulumi.Input<boolean>;
    value: pulumi.Input<string>;
}

export interface NdbClusterResourceConfig {
    memoryThresholdPercentage: pulumi.Input<number>;
    storageThresholdPercentage: pulumi.Input<number>;
}

export interface NdbDatabaseActionargument {
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface NdbDatabaseClusterInfo {
    clusterIpInfos: pulumi.Input<pulumi.Input<inputs.NdbDatabaseClusterInfoClusterIpInfo>[]>;
}

export interface NdbDatabaseClusterInfoClusterIpInfo {
    ipInfos?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseClusterInfoClusterIpInfoIpInfo>[]>;
    nxClusterId: pulumi.Input<string>;
}

export interface NdbDatabaseClusterInfoClusterIpInfoIpInfo {
    ipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    ipType?: pulumi.Input<string>;
}

export interface NdbDatabaseDatabaseNode {
    accessLevel: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    databaseId: pulumi.Input<string>;
    databaseStatus: pulumi.Input<string>;
    dateCreated: pulumi.Input<string>;
    dateModified: pulumi.Input<string>;
    dbserver: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    dbserverId: pulumi.Input<string>;
    description: pulumi.Input<string>;
    id: pulumi.Input<string>;
    infos: pulumi.Input<pulumi.Input<inputs.NdbDatabaseDatabaseNodeInfo>[]>;
    name: pulumi.Input<string>;
    primary: pulumi.Input<boolean>;
    properties: pulumi.Input<pulumi.Input<inputs.NdbDatabaseDatabaseNodeProperty>[]>;
    protectionDomainId: pulumi.Input<string>;
    protectionDomains: pulumi.Input<pulumi.Input<inputs.NdbDatabaseDatabaseNodeProtectionDomain>[]>;
    softwareInstallationId: pulumi.Input<string>;
    status: pulumi.Input<string>;
    tags: pulumi.Input<pulumi.Input<inputs.NdbDatabaseDatabaseNodeTag>[]>;
}

export interface NdbDatabaseDatabaseNodeInfo {
    info: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    secureInfo: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NdbDatabaseDatabaseNodeProperty {
    description: pulumi.Input<string>;
    name: pulumi.Input<string>;
    refId: pulumi.Input<string>;
    secure: pulumi.Input<boolean>;
    value: pulumi.Input<string>;
}

export interface NdbDatabaseDatabaseNodeProtectionDomain {
    assocEntities: pulumi.Input<pulumi.Input<string>[]>;
    cloudId: pulumi.Input<string>;
    dateCreated: pulumi.Input<string>;
    dateModified: pulumi.Input<string>;
    description: pulumi.Input<string>;
    eraCreated: pulumi.Input<boolean>;
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
    ownerId: pulumi.Input<string>;
    primaryHost: pulumi.Input<string>;
    properties: pulumi.Input<pulumi.Input<inputs.NdbDatabaseDatabaseNodeProtectionDomainProperty>[]>;
    status: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface NdbDatabaseDatabaseNodeProtectionDomainProperty {
    description: pulumi.Input<string>;
    name: pulumi.Input<string>;
    refId: pulumi.Input<string>;
    secure: pulumi.Input<boolean>;
    value: pulumi.Input<string>;
}

export interface NdbDatabaseDatabaseNodeTag {
    entityId: pulumi.Input<string>;
    entityType: pulumi.Input<string>;
    tagId: pulumi.Input<string>;
    tagName: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface NdbDatabaseInfo {
    bpgConfigs: pulumi.Input<pulumi.Input<inputs.NdbDatabaseInfoBpgConfig>[]>;
    secureInfo: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NdbDatabaseInfoBpgConfig {
    bpgDbParams: pulumi.Input<pulumi.Input<inputs.NdbDatabaseInfoBpgConfigBpgDbParam>[]>;
    storages: pulumi.Input<pulumi.Input<inputs.NdbDatabaseInfoBpgConfigStorage>[]>;
    vmProperties: pulumi.Input<pulumi.Input<inputs.NdbDatabaseInfoBpgConfigVmProperty>[]>;
}

export interface NdbDatabaseInfoBpgConfigBpgDbParam {
    effectiveCacheSize: pulumi.Input<string>;
    maintenanceWorkMem: pulumi.Input<string>;
    maxParallelWorkersPerGather: pulumi.Input<string>;
    maxWorkerProcesses: pulumi.Input<string>;
    sharedBuffers: pulumi.Input<string>;
    workMem: pulumi.Input<string>;
}

export interface NdbDatabaseInfoBpgConfigStorage {
    archiveStorages: pulumi.Input<pulumi.Input<inputs.NdbDatabaseInfoBpgConfigStorageArchiveStorage>[]>;
    dataDisks: pulumi.Input<pulumi.Input<inputs.NdbDatabaseInfoBpgConfigStorageDataDisk>[]>;
    logDisks: pulumi.Input<pulumi.Input<inputs.NdbDatabaseInfoBpgConfigStorageLogDisk>[]>;
}

export interface NdbDatabaseInfoBpgConfigStorageArchiveStorage {
    size: pulumi.Input<number>;
}

export interface NdbDatabaseInfoBpgConfigStorageDataDisk {
    count: pulumi.Input<number>;
}

export interface NdbDatabaseInfoBpgConfigStorageLogDisk {
    count: pulumi.Input<number>;
    size: pulumi.Input<number>;
}

export interface NdbDatabaseInfoBpgConfigVmProperty {
    dirtyBackgroundRatio: pulumi.Input<number>;
    dirtyExpireCentisecs: pulumi.Input<number>;
    dirtyRatio: pulumi.Input<number>;
    dirtyWritebackCentisecs: pulumi.Input<number>;
    nrHugepages: pulumi.Input<number>;
    overcommitMemory: pulumi.Input<number>;
    swappiness: pulumi.Input<number>;
}

export interface NdbDatabaseLcmConfig {
    expiryDetails: pulumi.Input<pulumi.Input<inputs.NdbDatabaseLcmConfigExpiryDetail>[]>;
    postDeleteCommands: pulumi.Input<pulumi.Input<inputs.NdbDatabaseLcmConfigPostDeleteCommand>[]>;
    preDeleteCommands: pulumi.Input<pulumi.Input<inputs.NdbDatabaseLcmConfigPreDeleteCommand>[]>;
    refreshDetails: pulumi.Input<pulumi.Input<inputs.NdbDatabaseLcmConfigRefreshDetail>[]>;
}

export interface NdbDatabaseLcmConfigExpiryDetail {
    deleteDatabase: pulumi.Input<boolean>;
    deleteTimeMachine: pulumi.Input<boolean>;
    deleteVm: pulumi.Input<boolean>;
    effectiveTimestamp: pulumi.Input<string>;
    expireInDays: pulumi.Input<number>;
    expiryDateTimezone: pulumi.Input<string>;
    expiryTimestamp: pulumi.Input<string>;
    remindBeforeInDays: pulumi.Input<number>;
    userCreated: pulumi.Input<boolean>;
}

export interface NdbDatabaseLcmConfigPostDeleteCommand {
    command: pulumi.Input<string>;
}

export interface NdbDatabaseLcmConfigPreDeleteCommand {
    command: pulumi.Input<string>;
}

export interface NdbDatabaseLcmConfigRefreshDetail {
    lastRefreshDate: pulumi.Input<string>;
    nextRefreshDate: pulumi.Input<string>;
    refreshDateTimezone: pulumi.Input<string>;
    refreshInDays: pulumi.Input<number>;
    refreshInHours: pulumi.Input<number>;
    refreshInMonths: pulumi.Input<number>;
    refreshTime: pulumi.Input<string>;
}

export interface NdbDatabaseLinkedDatabase {
    databaseName: pulumi.Input<string>;
    databaseStatus: pulumi.Input<string>;
    dateCreated: pulumi.Input<string>;
    dateModified: pulumi.Input<string>;
    description: pulumi.Input<string>;
    id: pulumi.Input<string>;
    infos: pulumi.Input<pulumi.Input<inputs.NdbDatabaseLinkedDatabaseInfo>[]>;
    metric: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name: pulumi.Input<string>;
    parentDatabaseId: pulumi.Input<string>;
    parentLinkedDatabaseId: pulumi.Input<string>;
    snapshotId: pulumi.Input<string>;
    status: pulumi.Input<string>;
    timezone: pulumi.Input<string>;
}

export interface NdbDatabaseLinkedDatabaseInfo {
    info: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    secureInfo: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NdbDatabaseMaintenanceTasks {
    maintenanceWindowId?: pulumi.Input<string>;
    tasks?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseMaintenanceTasksTask>[]>;
}

export interface NdbDatabaseMaintenanceTasksTask {
    postCommand?: pulumi.Input<string>;
    preCommand?: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
}

export interface NdbDatabaseNode {
    computeprofileid?: pulumi.Input<string>;
    dbserverid?: pulumi.Input<string>;
    ipInfos?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseNodeIpInfo>[]>;
    networkprofileid?: pulumi.Input<string>;
    nxClusterId?: pulumi.Input<string>;
    properties?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseNodeProperty>[]>;
    vmname: pulumi.Input<string>;
}

export interface NdbDatabaseNodeIpInfo {
    ipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    ipType?: pulumi.Input<string>;
}

export interface NdbDatabaseNodeProperty {
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface NdbDatabasePostgresqlInfo {
    allocatePgHugepage?: pulumi.Input<boolean>;
    authMethod?: pulumi.Input<string>;
    autoTuneStagingDrive?: pulumi.Input<boolean>;
    clusterDatabase?: pulumi.Input<boolean>;
    databaseNames: pulumi.Input<string>;
    databaseSize: pulumi.Input<string>;
    dbPassword: pulumi.Input<string>;
    haInstance?: pulumi.Input<inputs.NdbDatabasePostgresqlInfoHaInstance>;
    listenerPort: pulumi.Input<string>;
    postCreateScript?: pulumi.Input<string>;
    preCreateScript?: pulumi.Input<string>;
}

export interface NdbDatabasePostgresqlInfoHaInstance {
    archiveWalExpireDays?: pulumi.Input<number>;
    backupPolicy?: pulumi.Input<string>;
    clusterDescription?: pulumi.Input<string>;
    clusterName: pulumi.Input<string>;
    deployHaproxy?: pulumi.Input<boolean>;
    enablePeerAuth?: pulumi.Input<boolean>;
    enableSynchronousMode?: pulumi.Input<boolean>;
    failoverMode?: pulumi.Input<string>;
    nodeType?: pulumi.Input<string>;
    patroniClusterName: pulumi.Input<string>;
    provisionVirtualIp?: pulumi.Input<boolean>;
    proxyReadPort: pulumi.Input<string>;
    proxyWritePort: pulumi.Input<string>;
}

export interface NdbDatabaseProperty {
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface NdbDatabaseRestoreDatabaseNode {
    accessLevel: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    databaseId: pulumi.Input<string>;
    databaseStatus: pulumi.Input<string>;
    dateCreated: pulumi.Input<string>;
    dateModified: pulumi.Input<string>;
    dbserver: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    dbserverId: pulumi.Input<string>;
    description: pulumi.Input<string>;
    id: pulumi.Input<string>;
    infos: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreDatabaseNodeInfo>[]>;
    name: pulumi.Input<string>;
    primary: pulumi.Input<boolean>;
    properties: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreDatabaseNodeProperty>[]>;
    protectionDomainId: pulumi.Input<string>;
    protectionDomains: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreDatabaseNodeProtectionDomain>[]>;
    softwareInstallationId: pulumi.Input<string>;
    status: pulumi.Input<string>;
    tags: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreDatabaseNodeTag>[]>;
}

export interface NdbDatabaseRestoreDatabaseNodeInfo {
    info: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    secureInfo: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NdbDatabaseRestoreDatabaseNodeProperty {
    description: pulumi.Input<string>;
    name: pulumi.Input<string>;
    refId: pulumi.Input<string>;
    secure: pulumi.Input<boolean>;
    value: pulumi.Input<string>;
}

export interface NdbDatabaseRestoreDatabaseNodeProtectionDomain {
    assocEntities: pulumi.Input<pulumi.Input<string>[]>;
    cloudId: pulumi.Input<string>;
    dateCreated: pulumi.Input<string>;
    dateModified: pulumi.Input<string>;
    description: pulumi.Input<string>;
    eraCreated: pulumi.Input<boolean>;
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
    ownerId: pulumi.Input<string>;
    primaryHost: pulumi.Input<string>;
    properties: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreDatabaseNodeProtectionDomainProperty>[]>;
    status: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface NdbDatabaseRestoreDatabaseNodeProtectionDomainProperty {
    description: pulumi.Input<string>;
    name: pulumi.Input<string>;
    refId: pulumi.Input<string>;
    secure: pulumi.Input<boolean>;
    value: pulumi.Input<string>;
}

export interface NdbDatabaseRestoreDatabaseNodeTag {
    entityId: pulumi.Input<string>;
    entityType: pulumi.Input<string>;
    tagId: pulumi.Input<string>;
    tagName: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface NdbDatabaseRestoreInfo {
    bpgConfigs: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreInfoBpgConfig>[]>;
    secureInfo: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NdbDatabaseRestoreInfoBpgConfig {
    bpgDbParams: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreInfoBpgConfigBpgDbParam>[]>;
    storages: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreInfoBpgConfigStorage>[]>;
    vmProperties: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreInfoBpgConfigVmProperty>[]>;
}

export interface NdbDatabaseRestoreInfoBpgConfigBpgDbParam {
    effectiveCacheSize: pulumi.Input<string>;
    maintenanceWorkMem: pulumi.Input<string>;
    maxParallelWorkersPerGather: pulumi.Input<string>;
    maxWorkerProcesses: pulumi.Input<string>;
    sharedBuffers: pulumi.Input<string>;
    workMem: pulumi.Input<string>;
}

export interface NdbDatabaseRestoreInfoBpgConfigStorage {
    archiveStorages: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreInfoBpgConfigStorageArchiveStorage>[]>;
    dataDisks: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreInfoBpgConfigStorageDataDisk>[]>;
    logDisks: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreInfoBpgConfigStorageLogDisk>[]>;
}

export interface NdbDatabaseRestoreInfoBpgConfigStorageArchiveStorage {
    size: pulumi.Input<number>;
}

export interface NdbDatabaseRestoreInfoBpgConfigStorageDataDisk {
    count: pulumi.Input<number>;
}

export interface NdbDatabaseRestoreInfoBpgConfigStorageLogDisk {
    count: pulumi.Input<number>;
    size: pulumi.Input<number>;
}

export interface NdbDatabaseRestoreInfoBpgConfigVmProperty {
    dirtyBackgroundRatio: pulumi.Input<number>;
    dirtyExpireCentisecs: pulumi.Input<number>;
    dirtyRatio: pulumi.Input<number>;
    dirtyWritebackCentisecs: pulumi.Input<number>;
    nrHugepages: pulumi.Input<number>;
    overcommitMemory: pulumi.Input<number>;
    swappiness: pulumi.Input<number>;
}

export interface NdbDatabaseRestoreLcmConfig {
    expiryDetails: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreLcmConfigExpiryDetail>[]>;
    postDeleteCommands: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreLcmConfigPostDeleteCommand>[]>;
    preDeleteCommands: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreLcmConfigPreDeleteCommand>[]>;
    refreshDetails: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreLcmConfigRefreshDetail>[]>;
}

export interface NdbDatabaseRestoreLcmConfigExpiryDetail {
    deleteDatabase: pulumi.Input<boolean>;
    deleteTimeMachine: pulumi.Input<boolean>;
    deleteVm: pulumi.Input<boolean>;
    effectiveTimestamp: pulumi.Input<string>;
    expireInDays: pulumi.Input<number>;
    expiryDateTimezone: pulumi.Input<string>;
    expiryTimestamp: pulumi.Input<string>;
    remindBeforeInDays: pulumi.Input<number>;
    userCreated: pulumi.Input<boolean>;
}

export interface NdbDatabaseRestoreLcmConfigPostDeleteCommand {
    command: pulumi.Input<string>;
}

export interface NdbDatabaseRestoreLcmConfigPreDeleteCommand {
    command: pulumi.Input<string>;
}

export interface NdbDatabaseRestoreLcmConfigRefreshDetail {
    lastRefreshDate: pulumi.Input<string>;
    nextRefreshDate: pulumi.Input<string>;
    refreshDateTimezone: pulumi.Input<string>;
    refreshInDays: pulumi.Input<number>;
    refreshInHours: pulumi.Input<number>;
    refreshInMonths: pulumi.Input<number>;
    refreshTime: pulumi.Input<string>;
}

export interface NdbDatabaseRestoreLinkedDatabase {
    databaseName: pulumi.Input<string>;
    databaseStatus: pulumi.Input<string>;
    dateCreated: pulumi.Input<string>;
    dateModified: pulumi.Input<string>;
    description: pulumi.Input<string>;
    id: pulumi.Input<string>;
    infos: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreLinkedDatabaseInfo>[]>;
    metric: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name: pulumi.Input<string>;
    parentDatabaseId: pulumi.Input<string>;
    parentLinkedDatabaseId: pulumi.Input<string>;
    snapshotId: pulumi.Input<string>;
    status: pulumi.Input<string>;
    timezone: pulumi.Input<string>;
}

export interface NdbDatabaseRestoreLinkedDatabaseInfo {
    info: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    secureInfo: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NdbDatabaseRestoreProperty {
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface NdbDatabaseRestoreTag {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbDatabaseRestoreTimeMachine {
    accessLevel: pulumi.Input<string>;
    clone: pulumi.Input<boolean>;
    clones: pulumi.Input<string>;
    clustered: pulumi.Input<boolean>;
    database: pulumi.Input<string>;
    databaseId: pulumi.Input<string>;
    dateCreated: pulumi.Input<string>;
    dateModified: pulumi.Input<string>;
    description: pulumi.Input<string>;
    eaStatus: pulumi.Input<string>;
    id: pulumi.Input<string>;
    metric: pulumi.Input<string>;
    name: pulumi.Input<string>;
    properties: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreTimeMachineProperty>[]>;
    scheduleId: pulumi.Input<string>;
    schedules: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreTimeMachineSchedule>[]>;
    scope: pulumi.Input<string>;
    slaId: pulumi.Input<string>;
    slaUpdateInProgress: pulumi.Input<boolean>;
    slaUpdateMetadata: pulumi.Input<string>;
    slas: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreTimeMachineSla>[]>;
    sourceNxClusters: pulumi.Input<pulumi.Input<string>[]>;
    status: pulumi.Input<string>;
    tags: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreTimeMachineTag>[]>;
    type: pulumi.Input<string>;
}

export interface NdbDatabaseRestoreTimeMachineProperty {
    description: pulumi.Input<string>;
    name: pulumi.Input<string>;
    refId: pulumi.Input<string>;
    secure: pulumi.Input<boolean>;
    value: pulumi.Input<string>;
}

export interface NdbDatabaseRestoreTimeMachineSchedule {
    continuousSchedules: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreTimeMachineScheduleContinuousSchedule>[]>;
    dailySchedules: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreTimeMachineScheduleDailySchedule>[]>;
    dateCreated: pulumi.Input<string>;
    dateModified: pulumi.Input<string>;
    description: pulumi.Input<string>;
    globalPolicy: pulumi.Input<boolean>;
    id: pulumi.Input<string>;
    monthlySchedules: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreTimeMachineScheduleMonthlySchedule>[]>;
    name: pulumi.Input<string>;
    ownerId: pulumi.Input<string>;
    quartelySchedules: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreTimeMachineScheduleQuartelySchedule>[]>;
    referenceCount: pulumi.Input<number>;
    snapshotTimeOfDays: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreTimeMachineScheduleSnapshotTimeOfDay>[]>;
    startTime: pulumi.Input<string>;
    systemPolicy: pulumi.Input<boolean>;
    timeZone: pulumi.Input<string>;
    uniqueName: pulumi.Input<string>;
    weeklySchedules: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreTimeMachineScheduleWeeklySchedule>[]>;
    yearlySchedules: pulumi.Input<pulumi.Input<inputs.NdbDatabaseRestoreTimeMachineScheduleYearlySchedule>[]>;
}

export interface NdbDatabaseRestoreTimeMachineScheduleContinuousSchedule {
    enabled: pulumi.Input<boolean>;
    logBackupInterval: pulumi.Input<number>;
    snapshotsPerDay: pulumi.Input<number>;
}

export interface NdbDatabaseRestoreTimeMachineScheduleDailySchedule {
    enabled: pulumi.Input<boolean>;
}

export interface NdbDatabaseRestoreTimeMachineScheduleMonthlySchedule {
    dayOfMonth: pulumi.Input<number>;
    enabled: pulumi.Input<boolean>;
}

export interface NdbDatabaseRestoreTimeMachineScheduleQuartelySchedule {
    dayOfMonth: pulumi.Input<number>;
    enabled: pulumi.Input<boolean>;
    startMonth: pulumi.Input<string>;
    startMonthValue: pulumi.Input<string>;
}

export interface NdbDatabaseRestoreTimeMachineScheduleSnapshotTimeOfDay {
    extra: pulumi.Input<boolean>;
    hours: pulumi.Input<number>;
    minutes: pulumi.Input<number>;
    seconds: pulumi.Input<number>;
}

export interface NdbDatabaseRestoreTimeMachineScheduleWeeklySchedule {
    dayOfWeek: pulumi.Input<string>;
    dayOfWeekValue: pulumi.Input<string>;
    enabled: pulumi.Input<boolean>;
}

export interface NdbDatabaseRestoreTimeMachineScheduleYearlySchedule {
    dayOfMonth: pulumi.Input<number>;
    enabled: pulumi.Input<boolean>;
    month: pulumi.Input<string>;
    monthValue: pulumi.Input<string>;
}

export interface NdbDatabaseRestoreTimeMachineSla {
    continuousRetention: pulumi.Input<number>;
    currentActiveFrequency: pulumi.Input<string>;
    dailyRetention: pulumi.Input<number>;
    dateCreated: pulumi.Input<string>;
    dateModified: pulumi.Input<string>;
    description: pulumi.Input<string>;
    id: pulumi.Input<string>;
    monthlyRetention: pulumi.Input<number>;
    name: pulumi.Input<string>;
    ownerId: pulumi.Input<string>;
    pitrEnabled: pulumi.Input<boolean>;
    quarterlyRetention: pulumi.Input<number>;
    referenceCount: pulumi.Input<number>;
    systemSla: pulumi.Input<boolean>;
    uniqueName: pulumi.Input<string>;
    weeklyRetention: pulumi.Input<number>;
    yearlyRetention: pulumi.Input<number>;
}

export interface NdbDatabaseRestoreTimeMachineTag {
    entityId: pulumi.Input<string>;
    entityType: pulumi.Input<string>;
    tagId: pulumi.Input<string>;
    tagName: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface NdbDatabaseRestoreTimeouts {
    create?: pulumi.Input<string>;
}

export interface NdbDatabaseScaleDatabaseNode {
    accessLevel: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    databaseId: pulumi.Input<string>;
    databaseStatus: pulumi.Input<string>;
    dateCreated: pulumi.Input<string>;
    dateModified: pulumi.Input<string>;
    dbserver: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    dbserverId: pulumi.Input<string>;
    description: pulumi.Input<string>;
    id: pulumi.Input<string>;
    infos: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleDatabaseNodeInfo>[]>;
    name: pulumi.Input<string>;
    primary: pulumi.Input<boolean>;
    properties: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleDatabaseNodeProperty>[]>;
    protectionDomainId: pulumi.Input<string>;
    protectionDomains: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleDatabaseNodeProtectionDomain>[]>;
    softwareInstallationId: pulumi.Input<string>;
    status: pulumi.Input<string>;
    tags: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleDatabaseNodeTag>[]>;
}

export interface NdbDatabaseScaleDatabaseNodeInfo {
    info: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    secureInfo: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NdbDatabaseScaleDatabaseNodeProperty {
    description: pulumi.Input<string>;
    name: pulumi.Input<string>;
    refId: pulumi.Input<string>;
    secure: pulumi.Input<boolean>;
    value: pulumi.Input<string>;
}

export interface NdbDatabaseScaleDatabaseNodeProtectionDomain {
    assocEntities: pulumi.Input<pulumi.Input<string>[]>;
    cloudId: pulumi.Input<string>;
    dateCreated: pulumi.Input<string>;
    dateModified: pulumi.Input<string>;
    description: pulumi.Input<string>;
    eraCreated: pulumi.Input<boolean>;
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
    ownerId: pulumi.Input<string>;
    primaryHost: pulumi.Input<string>;
    properties: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleDatabaseNodeProtectionDomainProperty>[]>;
    status: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface NdbDatabaseScaleDatabaseNodeProtectionDomainProperty {
    description: pulumi.Input<string>;
    name: pulumi.Input<string>;
    refId: pulumi.Input<string>;
    secure: pulumi.Input<boolean>;
    value: pulumi.Input<string>;
}

export interface NdbDatabaseScaleDatabaseNodeTag {
    entityId: pulumi.Input<string>;
    entityType: pulumi.Input<string>;
    tagId: pulumi.Input<string>;
    tagName: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface NdbDatabaseScaleInfo {
    bpgConfigs: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleInfoBpgConfig>[]>;
    secureInfo: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NdbDatabaseScaleInfoBpgConfig {
    bpgDbParams: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleInfoBpgConfigBpgDbParam>[]>;
    storages: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleInfoBpgConfigStorage>[]>;
    vmProperties: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleInfoBpgConfigVmProperty>[]>;
}

export interface NdbDatabaseScaleInfoBpgConfigBpgDbParam {
    effectiveCacheSize: pulumi.Input<string>;
    maintenanceWorkMem: pulumi.Input<string>;
    maxParallelWorkersPerGather: pulumi.Input<string>;
    maxWorkerProcesses: pulumi.Input<string>;
    sharedBuffers: pulumi.Input<string>;
    workMem: pulumi.Input<string>;
}

export interface NdbDatabaseScaleInfoBpgConfigStorage {
    archiveStorages: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleInfoBpgConfigStorageArchiveStorage>[]>;
    dataDisks: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleInfoBpgConfigStorageDataDisk>[]>;
    logDisks: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleInfoBpgConfigStorageLogDisk>[]>;
}

export interface NdbDatabaseScaleInfoBpgConfigStorageArchiveStorage {
    size: pulumi.Input<number>;
}

export interface NdbDatabaseScaleInfoBpgConfigStorageDataDisk {
    count: pulumi.Input<number>;
}

export interface NdbDatabaseScaleInfoBpgConfigStorageLogDisk {
    count: pulumi.Input<number>;
    size: pulumi.Input<number>;
}

export interface NdbDatabaseScaleInfoBpgConfigVmProperty {
    dirtyBackgroundRatio: pulumi.Input<number>;
    dirtyExpireCentisecs: pulumi.Input<number>;
    dirtyRatio: pulumi.Input<number>;
    dirtyWritebackCentisecs: pulumi.Input<number>;
    nrHugepages: pulumi.Input<number>;
    overcommitMemory: pulumi.Input<number>;
    swappiness: pulumi.Input<number>;
}

export interface NdbDatabaseScaleLcmConfig {
    expiryDetails: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleLcmConfigExpiryDetail>[]>;
    postDeleteCommands: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleLcmConfigPostDeleteCommand>[]>;
    preDeleteCommands: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleLcmConfigPreDeleteCommand>[]>;
    refreshDetails: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleLcmConfigRefreshDetail>[]>;
}

export interface NdbDatabaseScaleLcmConfigExpiryDetail {
    deleteDatabase: pulumi.Input<boolean>;
    deleteTimeMachine: pulumi.Input<boolean>;
    deleteVm: pulumi.Input<boolean>;
    effectiveTimestamp: pulumi.Input<string>;
    expireInDays: pulumi.Input<number>;
    expiryDateTimezone: pulumi.Input<string>;
    expiryTimestamp: pulumi.Input<string>;
    remindBeforeInDays: pulumi.Input<number>;
    userCreated: pulumi.Input<boolean>;
}

export interface NdbDatabaseScaleLcmConfigPostDeleteCommand {
    command: pulumi.Input<string>;
}

export interface NdbDatabaseScaleLcmConfigPreDeleteCommand {
    command: pulumi.Input<string>;
}

export interface NdbDatabaseScaleLcmConfigRefreshDetail {
    lastRefreshDate: pulumi.Input<string>;
    nextRefreshDate: pulumi.Input<string>;
    refreshDateTimezone: pulumi.Input<string>;
    refreshInDays: pulumi.Input<number>;
    refreshInHours: pulumi.Input<number>;
    refreshInMonths: pulumi.Input<number>;
    refreshTime: pulumi.Input<string>;
}

export interface NdbDatabaseScaleLinkedDatabase {
    databaseName: pulumi.Input<string>;
    databaseStatus: pulumi.Input<string>;
    dateCreated: pulumi.Input<string>;
    dateModified: pulumi.Input<string>;
    description: pulumi.Input<string>;
    id: pulumi.Input<string>;
    infos: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleLinkedDatabaseInfo>[]>;
    metric: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name: pulumi.Input<string>;
    parentDatabaseId: pulumi.Input<string>;
    parentLinkedDatabaseId: pulumi.Input<string>;
    snapshotId: pulumi.Input<string>;
    status: pulumi.Input<string>;
    timezone: pulumi.Input<string>;
}

export interface NdbDatabaseScaleLinkedDatabaseInfo {
    info: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    secureInfo: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NdbDatabaseScaleProperty {
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface NdbDatabaseScaleTag {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbDatabaseScaleTimeMachine {
    accessLevel: pulumi.Input<string>;
    clone: pulumi.Input<boolean>;
    clones: pulumi.Input<string>;
    clustered: pulumi.Input<boolean>;
    database: pulumi.Input<string>;
    databaseId: pulumi.Input<string>;
    dateCreated: pulumi.Input<string>;
    dateModified: pulumi.Input<string>;
    description: pulumi.Input<string>;
    eaStatus: pulumi.Input<string>;
    id: pulumi.Input<string>;
    metric: pulumi.Input<string>;
    name: pulumi.Input<string>;
    properties: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleTimeMachineProperty>[]>;
    scheduleId: pulumi.Input<string>;
    schedules: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleTimeMachineSchedule>[]>;
    scope: pulumi.Input<string>;
    slaId: pulumi.Input<string>;
    slaUpdateInProgress: pulumi.Input<boolean>;
    slaUpdateMetadata: pulumi.Input<string>;
    slas: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleTimeMachineSla>[]>;
    sourceNxClusters: pulumi.Input<pulumi.Input<string>[]>;
    status: pulumi.Input<string>;
    tags: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleTimeMachineTag>[]>;
    type: pulumi.Input<string>;
}

export interface NdbDatabaseScaleTimeMachineProperty {
    description: pulumi.Input<string>;
    name: pulumi.Input<string>;
    refId: pulumi.Input<string>;
    secure: pulumi.Input<boolean>;
    value: pulumi.Input<string>;
}

export interface NdbDatabaseScaleTimeMachineSchedule {
    continuousSchedules: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleTimeMachineScheduleContinuousSchedule>[]>;
    dailySchedules: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleTimeMachineScheduleDailySchedule>[]>;
    dateCreated: pulumi.Input<string>;
    dateModified: pulumi.Input<string>;
    description: pulumi.Input<string>;
    globalPolicy: pulumi.Input<boolean>;
    id: pulumi.Input<string>;
    monthlySchedules: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleTimeMachineScheduleMonthlySchedule>[]>;
    name: pulumi.Input<string>;
    ownerId: pulumi.Input<string>;
    quartelySchedules: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleTimeMachineScheduleQuartelySchedule>[]>;
    referenceCount: pulumi.Input<number>;
    snapshotTimeOfDays: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleTimeMachineScheduleSnapshotTimeOfDay>[]>;
    startTime: pulumi.Input<string>;
    systemPolicy: pulumi.Input<boolean>;
    timeZone: pulumi.Input<string>;
    uniqueName: pulumi.Input<string>;
    weeklySchedules: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleTimeMachineScheduleWeeklySchedule>[]>;
    yearlySchedules: pulumi.Input<pulumi.Input<inputs.NdbDatabaseScaleTimeMachineScheduleYearlySchedule>[]>;
}

export interface NdbDatabaseScaleTimeMachineScheduleContinuousSchedule {
    enabled: pulumi.Input<boolean>;
    logBackupInterval: pulumi.Input<number>;
    snapshotsPerDay: pulumi.Input<number>;
}

export interface NdbDatabaseScaleTimeMachineScheduleDailySchedule {
    enabled: pulumi.Input<boolean>;
}

export interface NdbDatabaseScaleTimeMachineScheduleMonthlySchedule {
    dayOfMonth: pulumi.Input<number>;
    enabled: pulumi.Input<boolean>;
}

export interface NdbDatabaseScaleTimeMachineScheduleQuartelySchedule {
    dayOfMonth: pulumi.Input<number>;
    enabled: pulumi.Input<boolean>;
    startMonth: pulumi.Input<string>;
    startMonthValue: pulumi.Input<string>;
}

export interface NdbDatabaseScaleTimeMachineScheduleSnapshotTimeOfDay {
    extra: pulumi.Input<boolean>;
    hours: pulumi.Input<number>;
    minutes: pulumi.Input<number>;
    seconds: pulumi.Input<number>;
}

export interface NdbDatabaseScaleTimeMachineScheduleWeeklySchedule {
    dayOfWeek: pulumi.Input<string>;
    dayOfWeekValue: pulumi.Input<string>;
    enabled: pulumi.Input<boolean>;
}

export interface NdbDatabaseScaleTimeMachineScheduleYearlySchedule {
    dayOfMonth: pulumi.Input<number>;
    enabled: pulumi.Input<boolean>;
    month: pulumi.Input<string>;
    monthValue: pulumi.Input<string>;
}

export interface NdbDatabaseScaleTimeMachineSla {
    continuousRetention: pulumi.Input<number>;
    currentActiveFrequency: pulumi.Input<string>;
    dailyRetention: pulumi.Input<number>;
    dateCreated: pulumi.Input<string>;
    dateModified: pulumi.Input<string>;
    description: pulumi.Input<string>;
    id: pulumi.Input<string>;
    monthlyRetention: pulumi.Input<number>;
    name: pulumi.Input<string>;
    ownerId: pulumi.Input<string>;
    pitrEnabled: pulumi.Input<boolean>;
    quarterlyRetention: pulumi.Input<number>;
    referenceCount: pulumi.Input<number>;
    systemSla: pulumi.Input<boolean>;
    uniqueName: pulumi.Input<string>;
    weeklyRetention: pulumi.Input<number>;
    yearlyRetention: pulumi.Input<number>;
}

export interface NdbDatabaseScaleTimeMachineTag {
    entityId: pulumi.Input<string>;
    entityType: pulumi.Input<string>;
    tagId: pulumi.Input<string>;
    tagName: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface NdbDatabaseScaleTimeouts {
    create?: pulumi.Input<string>;
}

export interface NdbDatabaseSnapshotLcmConfig {
    expiryDetails: pulumi.Input<pulumi.Input<inputs.NdbDatabaseSnapshotLcmConfigExpiryDetail>[]>;
    postDeleteCommands: pulumi.Input<pulumi.Input<inputs.NdbDatabaseSnapshotLcmConfigPostDeleteCommand>[]>;
    preDeleteCommands: pulumi.Input<pulumi.Input<inputs.NdbDatabaseSnapshotLcmConfigPreDeleteCommand>[]>;
    refreshDetails: pulumi.Input<pulumi.Input<inputs.NdbDatabaseSnapshotLcmConfigRefreshDetail>[]>;
}

export interface NdbDatabaseSnapshotLcmConfigExpiryDetail {
    deleteDatabase: pulumi.Input<boolean>;
    deleteTimeMachine: pulumi.Input<boolean>;
    deleteVm: pulumi.Input<boolean>;
    effectiveTimestamp: pulumi.Input<string>;
    expireInDays: pulumi.Input<number>;
    expiryDateTimezone: pulumi.Input<string>;
    expiryTimestamp: pulumi.Input<string>;
    remindBeforeInDays: pulumi.Input<number>;
    userCreated: pulumi.Input<boolean>;
}

export interface NdbDatabaseSnapshotLcmConfigPostDeleteCommand {
    command: pulumi.Input<string>;
}

export interface NdbDatabaseSnapshotLcmConfigPreDeleteCommand {
    command: pulumi.Input<string>;
}

export interface NdbDatabaseSnapshotLcmConfigRefreshDetail {
    lastRefreshDate: pulumi.Input<string>;
    nextRefreshDate: pulumi.Input<string>;
    refreshDateTimezone: pulumi.Input<string>;
    refreshInDays: pulumi.Input<number>;
    refreshInHours: pulumi.Input<number>;
    refreshInMonths: pulumi.Input<number>;
    refreshTime: pulumi.Input<string>;
}

export interface NdbDatabaseSnapshotProperty {
    description: pulumi.Input<string>;
    name: pulumi.Input<string>;
    refId: pulumi.Input<string>;
    secure: pulumi.Input<boolean>;
    value: pulumi.Input<string>;
}

export interface NdbDatabaseSnapshotTag {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbDatabaseSnapshotTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface NdbDatabaseTag {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbDatabaseTimeMachine {
    accessLevel: pulumi.Input<string>;
    clone: pulumi.Input<boolean>;
    clones: pulumi.Input<string>;
    clustered: pulumi.Input<boolean>;
    database: pulumi.Input<string>;
    databaseId: pulumi.Input<string>;
    dateCreated: pulumi.Input<string>;
    dateModified: pulumi.Input<string>;
    description: pulumi.Input<string>;
    eaStatus: pulumi.Input<string>;
    id: pulumi.Input<string>;
    metric: pulumi.Input<string>;
    name: pulumi.Input<string>;
    properties: pulumi.Input<pulumi.Input<inputs.NdbDatabaseTimeMachineProperty>[]>;
    scheduleId: pulumi.Input<string>;
    schedules: pulumi.Input<pulumi.Input<inputs.NdbDatabaseTimeMachineSchedule>[]>;
    scope: pulumi.Input<string>;
    slaId: pulumi.Input<string>;
    slaUpdateInProgress: pulumi.Input<boolean>;
    slaUpdateMetadata: pulumi.Input<string>;
    slas: pulumi.Input<pulumi.Input<inputs.NdbDatabaseTimeMachineSla>[]>;
    sourceNxClusters: pulumi.Input<pulumi.Input<string>[]>;
    status: pulumi.Input<string>;
    tags: pulumi.Input<pulumi.Input<inputs.NdbDatabaseTimeMachineTag>[]>;
    type: pulumi.Input<string>;
}

export interface NdbDatabaseTimeMachineProperty {
    description: pulumi.Input<string>;
    name: pulumi.Input<string>;
    refId: pulumi.Input<string>;
    secure: pulumi.Input<boolean>;
    value: pulumi.Input<string>;
}

export interface NdbDatabaseTimeMachineSchedule {
    continuousSchedules: pulumi.Input<pulumi.Input<inputs.NdbDatabaseTimeMachineScheduleContinuousSchedule>[]>;
    dailySchedules: pulumi.Input<pulumi.Input<inputs.NdbDatabaseTimeMachineScheduleDailySchedule>[]>;
    dateCreated: pulumi.Input<string>;
    dateModified: pulumi.Input<string>;
    description: pulumi.Input<string>;
    globalPolicy: pulumi.Input<boolean>;
    id: pulumi.Input<string>;
    monthlySchedules: pulumi.Input<pulumi.Input<inputs.NdbDatabaseTimeMachineScheduleMonthlySchedule>[]>;
    name: pulumi.Input<string>;
    ownerId: pulumi.Input<string>;
    quartelySchedules: pulumi.Input<pulumi.Input<inputs.NdbDatabaseTimeMachineScheduleQuartelySchedule>[]>;
    referenceCount: pulumi.Input<number>;
    snapshotTimeOfDays: pulumi.Input<pulumi.Input<inputs.NdbDatabaseTimeMachineScheduleSnapshotTimeOfDay>[]>;
    startTime: pulumi.Input<string>;
    systemPolicy: pulumi.Input<boolean>;
    timeZone: pulumi.Input<string>;
    uniqueName: pulumi.Input<string>;
    weeklySchedules: pulumi.Input<pulumi.Input<inputs.NdbDatabaseTimeMachineScheduleWeeklySchedule>[]>;
    yearlySchedules: pulumi.Input<pulumi.Input<inputs.NdbDatabaseTimeMachineScheduleYearlySchedule>[]>;
}

export interface NdbDatabaseTimeMachineScheduleContinuousSchedule {
    enabled: pulumi.Input<boolean>;
    logBackupInterval: pulumi.Input<number>;
    snapshotsPerDay: pulumi.Input<number>;
}

export interface NdbDatabaseTimeMachineScheduleDailySchedule {
    enabled: pulumi.Input<boolean>;
}

export interface NdbDatabaseTimeMachineScheduleMonthlySchedule {
    dayOfMonth: pulumi.Input<number>;
    enabled: pulumi.Input<boolean>;
}

export interface NdbDatabaseTimeMachineScheduleQuartelySchedule {
    dayOfMonth: pulumi.Input<number>;
    enabled: pulumi.Input<boolean>;
    startMonth: pulumi.Input<string>;
    startMonthValue: pulumi.Input<string>;
}

export interface NdbDatabaseTimeMachineScheduleSnapshotTimeOfDay {
    extra: pulumi.Input<boolean>;
    hours: pulumi.Input<number>;
    minutes: pulumi.Input<number>;
    seconds: pulumi.Input<number>;
}

export interface NdbDatabaseTimeMachineScheduleWeeklySchedule {
    dayOfWeek: pulumi.Input<string>;
    dayOfWeekValue: pulumi.Input<string>;
    enabled: pulumi.Input<boolean>;
}

export interface NdbDatabaseTimeMachineScheduleYearlySchedule {
    dayOfMonth: pulumi.Input<number>;
    enabled: pulumi.Input<boolean>;
    month: pulumi.Input<string>;
    monthValue: pulumi.Input<string>;
}

export interface NdbDatabaseTimeMachineSla {
    continuousRetention: pulumi.Input<number>;
    currentActiveFrequency: pulumi.Input<string>;
    dailyRetention: pulumi.Input<number>;
    dateCreated: pulumi.Input<string>;
    dateModified: pulumi.Input<string>;
    description: pulumi.Input<string>;
    id: pulumi.Input<string>;
    monthlyRetention: pulumi.Input<number>;
    name: pulumi.Input<string>;
    ownerId: pulumi.Input<string>;
    pitrEnabled: pulumi.Input<boolean>;
    quarterlyRetention: pulumi.Input<number>;
    referenceCount: pulumi.Input<number>;
    systemSla: pulumi.Input<boolean>;
    uniqueName: pulumi.Input<string>;
    weeklyRetention: pulumi.Input<number>;
    yearlyRetention: pulumi.Input<number>;
}

export interface NdbDatabaseTimeMachineTag {
    entityId: pulumi.Input<string>;
    entityType: pulumi.Input<string>;
    tagId: pulumi.Input<string>;
    tagName: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface NdbDatabaseTimemachineinfo {
    /**
     * description of autoTuneLogDrive
     */
    autotunelogdrive?: pulumi.Input<boolean>;
    /**
     * description of time machine's
     */
    description?: pulumi.Input<string>;
    /**
     * description of time machine's name
     */
    name: pulumi.Input<string>;
    /**
     * description of schedule of time machine
     */
    schedule: pulumi.Input<inputs.NdbDatabaseTimemachineinfoSchedule>;
    slaDetails?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseTimemachineinfoSlaDetail>[]>;
    /**
     * description of SLA ID.
     */
    slaid?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseTimemachineinfoTag>[]>;
}

export interface NdbDatabaseTimemachineinfoSchedule {
    /**
     * description of schedule of time machine
     */
    continuousschedule?: pulumi.Input<inputs.NdbDatabaseTimemachineinfoScheduleContinuousschedule>;
    /**
     * description of schedule of time machine
     */
    monthlyschedule?: pulumi.Input<inputs.NdbDatabaseTimemachineinfoScheduleMonthlyschedule>;
    /**
     * description of schedule of time machine
     */
    quartelyschedule?: pulumi.Input<inputs.NdbDatabaseTimemachineinfoScheduleQuartelyschedule>;
    /**
     * description of schedule of time machine
     */
    snapshottimeofday?: pulumi.Input<inputs.NdbDatabaseTimemachineinfoScheduleSnapshottimeofday>;
    /**
     * description of schedule of time machine
     */
    weeklyschedule?: pulumi.Input<inputs.NdbDatabaseTimemachineinfoScheduleWeeklyschedule>;
    /**
     * description of schedule of time machine
     */
    yearlyschedule?: pulumi.Input<inputs.NdbDatabaseTimemachineinfoScheduleYearlyschedule>;
}

export interface NdbDatabaseTimemachineinfoScheduleContinuousschedule {
    enabled: pulumi.Input<boolean>;
    logbackupinterval: pulumi.Input<number>;
    snapshotsperday: pulumi.Input<number>;
}

export interface NdbDatabaseTimemachineinfoScheduleMonthlyschedule {
    dayofmonth: pulumi.Input<number>;
    enabled: pulumi.Input<boolean>;
}

export interface NdbDatabaseTimemachineinfoScheduleQuartelyschedule {
    dayofmonth: pulumi.Input<number>;
    enabled: pulumi.Input<boolean>;
    startmonth: pulumi.Input<string>;
}

export interface NdbDatabaseTimemachineinfoScheduleSnapshottimeofday {
    hours: pulumi.Input<number>;
    minutes: pulumi.Input<number>;
    seconds: pulumi.Input<number>;
}

export interface NdbDatabaseTimemachineinfoScheduleWeeklyschedule {
    dayofweek: pulumi.Input<string>;
    enabled: pulumi.Input<boolean>;
}

export interface NdbDatabaseTimemachineinfoScheduleYearlyschedule {
    dayofmonth: pulumi.Input<number>;
    enabled: pulumi.Input<boolean>;
    month: pulumi.Input<string>;
}

export interface NdbDatabaseTimemachineinfoSlaDetail {
    primarySlas?: pulumi.Input<pulumi.Input<inputs.NdbDatabaseTimemachineinfoSlaDetailPrimarySla>[]>;
}

export interface NdbDatabaseTimemachineinfoSlaDetailPrimarySla {
    nxClusterIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * description of SLA ID.
     */
    slaId: pulumi.Input<string>;
}

export interface NdbDatabaseTimemachineinfoTag {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbDatabaseTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface NdbDbserverVmCredential {
    label?: pulumi.Input<string>;
    password: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface NdbDbserverVmMaintenanceTasks {
    maintenanceWindowId?: pulumi.Input<string>;
    tasks?: pulumi.Input<pulumi.Input<inputs.NdbDbserverVmMaintenanceTasksTask>[]>;
}

export interface NdbDbserverVmMaintenanceTasksTask {
    postCommand?: pulumi.Input<string>;
    preCommand?: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
}

export interface NdbDbserverVmPostgresDatabase {
    clientPublicKey?: pulumi.Input<string>;
    vmName: pulumi.Input<string>;
}

export interface NdbDbserverVmProperty {
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface NdbDbserverVmTag {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbDbserverVmTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface NdbLinkedDatabasesInfo {
    infos: pulumi.Input<pulumi.Input<inputs.NdbLinkedDatabasesInfoInfo>[]>;
    secureInfo: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NdbLinkedDatabasesInfoInfo {
    createdBy: pulumi.Input<string>;
}

export interface NdbLinkedDatabasesTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface NdbLogCatchupsTimeouts {
    create?: pulumi.Input<string>;
}

export interface NdbMaintenanceTaskEntityTaskAssociation {
    accessLevel: pulumi.Input<string>;
    dateCreated: pulumi.Input<string>;
    dateModified: pulumi.Input<string>;
    description: pulumi.Input<string>;
    entity: pulumi.Input<string>;
    entityId: pulumi.Input<string>;
    entityType: pulumi.Input<string>;
    id: pulumi.Input<string>;
    maintenanceWindowId: pulumi.Input<string>;
    maintenanceWindowOwnerId: pulumi.Input<string>;
    name: pulumi.Input<string>;
    ownerId: pulumi.Input<string>;
    payloads: pulumi.Input<pulumi.Input<inputs.NdbMaintenanceTaskEntityTaskAssociationPayload>[]>;
    properties: pulumi.Input<pulumi.Input<inputs.NdbMaintenanceTaskEntityTaskAssociationProperty>[]>;
    status: pulumi.Input<string>;
    tags: pulumi.Input<pulumi.Input<inputs.NdbMaintenanceTaskEntityTaskAssociationTag>[]>;
    taskType: pulumi.Input<string>;
}

export interface NdbMaintenanceTaskEntityTaskAssociationPayload {
    prePostCommands: pulumi.Input<pulumi.Input<inputs.NdbMaintenanceTaskEntityTaskAssociationPayloadPrePostCommand>[]>;
}

export interface NdbMaintenanceTaskEntityTaskAssociationPayloadPrePostCommand {
    postCommand: pulumi.Input<string>;
    preCommand: pulumi.Input<string>;
}

export interface NdbMaintenanceTaskEntityTaskAssociationProperty {
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface NdbMaintenanceTaskEntityTaskAssociationTag {
    entityId: pulumi.Input<string>;
    entityType: pulumi.Input<string>;
    tagId: pulumi.Input<string>;
    tagName: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface NdbMaintenanceTaskTask {
    postCommand?: pulumi.Input<string>;
    preCommand?: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
}

export interface NdbMaintenanceWindowEntityTaskAssoc {
    accessLevel: pulumi.Input<string>;
    dateCreated: pulumi.Input<string>;
    dateModified: pulumi.Input<string>;
    description: pulumi.Input<string>;
    entity: pulumi.Input<string>;
    entityId: pulumi.Input<string>;
    entityType: pulumi.Input<string>;
    id: pulumi.Input<string>;
    maintenanceWindowId: pulumi.Input<string>;
    maintenanceWindowOwnerId: pulumi.Input<string>;
    name: pulumi.Input<string>;
    ownerId: pulumi.Input<string>;
    payloads: pulumi.Input<pulumi.Input<inputs.NdbMaintenanceWindowEntityTaskAssocPayload>[]>;
    properties: pulumi.Input<pulumi.Input<inputs.NdbMaintenanceWindowEntityTaskAssocProperty>[]>;
    status: pulumi.Input<string>;
    tags: pulumi.Input<pulumi.Input<inputs.NdbMaintenanceWindowEntityTaskAssocTag>[]>;
    taskType: pulumi.Input<string>;
}

export interface NdbMaintenanceWindowEntityTaskAssocPayload {
    prePostCommands: pulumi.Input<pulumi.Input<inputs.NdbMaintenanceWindowEntityTaskAssocPayloadPrePostCommand>[]>;
}

export interface NdbMaintenanceWindowEntityTaskAssocPayloadPrePostCommand {
    postCommand: pulumi.Input<string>;
    preCommand: pulumi.Input<string>;
}

export interface NdbMaintenanceWindowEntityTaskAssocProperty {
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface NdbMaintenanceWindowEntityTaskAssocTag {
    entityId: pulumi.Input<string>;
    entityType: pulumi.Input<string>;
    tagId: pulumi.Input<string>;
    tagName: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface NdbMaintenanceWindowProperty {
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface NdbMaintenanceWindowSchedule {
    dayOfWeek: pulumi.Input<string>;
    duration: pulumi.Input<number>;
    hour: pulumi.Input<number>;
    minute: pulumi.Input<number>;
    recurrence: pulumi.Input<string>;
    startTime: pulumi.Input<string>;
    threshold: pulumi.Input<string>;
    timezone: pulumi.Input<string>;
    weekOfMonth: pulumi.Input<number>;
}

export interface NdbMaintenanceWindowTag {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbNetworkIpPool {
    addresses?: pulumi.Input<pulumi.Input<inputs.NdbNetworkIpPoolAddress>[]>;
    endIp?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    modifiedBy?: pulumi.Input<string>;
    startIp?: pulumi.Input<string>;
}

export interface NdbNetworkIpPoolAddress {
    ip: pulumi.Input<string>;
    status: pulumi.Input<string>;
}

export interface NdbNetworkPropertiesMap {
    vlanGateway: pulumi.Input<string>;
    vlanPrimaryDns: pulumi.Input<string>;
    vlanSecondaryDns: pulumi.Input<string>;
    vlanSubnetMask: pulumi.Input<string>;
}

export interface NdbNetworkProperty {
    name: pulumi.Input<string>;
    secure: pulumi.Input<boolean>;
    value: pulumi.Input<string>;
}

export interface NdbProfileClusterAvailability {
    dateCreated: pulumi.Input<string>;
    dateModified: pulumi.Input<string>;
    nxClusterId: pulumi.Input<string>;
    ownerId: pulumi.Input<string>;
    profileId: pulumi.Input<string>;
    status: pulumi.Input<string>;
}

export interface NdbProfileComputeProfile {
    corePerCpu?: pulumi.Input<string>;
    cpus?: pulumi.Input<string>;
    memorySize?: pulumi.Input<string>;
}

export interface NdbProfileDatabaseParameterProfile {
    postgresDatabases?: pulumi.Input<pulumi.Input<inputs.NdbProfileDatabaseParameterProfilePostgresDatabase>[]>;
}

export interface NdbProfileDatabaseParameterProfilePostgresDatabase {
    autovacuum?: pulumi.Input<string>;
    autovacuumFreezeMaxAge?: pulumi.Input<string>;
    autovacuumMaxWorkers?: pulumi.Input<string>;
    autovacuumVacuumCostDelay?: pulumi.Input<string>;
    autovacuumVacuumScaleFactor?: pulumi.Input<string>;
    autovacuumVacuumThreshold?: pulumi.Input<string>;
    autovacuumWorkMem?: pulumi.Input<string>;
    checkpointCompletionTarget?: pulumi.Input<string>;
    checkpointTimeout?: pulumi.Input<string>;
    effectiveIoConcurrency?: pulumi.Input<string>;
    maxConnections?: pulumi.Input<string>;
    maxLocksPerTransaction?: pulumi.Input<string>;
    maxPreparedTransactions?: pulumi.Input<string>;
    maxReplicationSlots?: pulumi.Input<string>;
    maxWalSenders?: pulumi.Input<string>;
    maxWalSize?: pulumi.Input<string>;
    maxWorkerProcesses?: pulumi.Input<string>;
    minWalSize?: pulumi.Input<string>;
    randomPageCost?: pulumi.Input<string>;
    synchronousCommit?: pulumi.Input<string>;
    timezone?: pulumi.Input<string>;
    walBuffers?: pulumi.Input<string>;
    walKeepSegments?: pulumi.Input<string>;
}

export interface NdbProfileNetworkProfile {
    postgresDatabases?: pulumi.Input<pulumi.Input<inputs.NdbProfileNetworkProfilePostgresDatabase>[]>;
    topology: pulumi.Input<string>;
    versionClusterAssociations?: pulumi.Input<pulumi.Input<inputs.NdbProfileNetworkProfileVersionClusterAssociation>[]>;
}

export interface NdbProfileNetworkProfilePostgresDatabase {
    haInstances?: pulumi.Input<pulumi.Input<inputs.NdbProfileNetworkProfilePostgresDatabaseHaInstance>[]>;
    singleInstances?: pulumi.Input<pulumi.Input<inputs.NdbProfileNetworkProfilePostgresDatabaseSingleInstance>[]>;
}

export interface NdbProfileNetworkProfilePostgresDatabaseHaInstance {
    clusterIds?: pulumi.Input<pulumi.Input<string>[]>;
    clusterNames?: pulumi.Input<pulumi.Input<string>[]>;
    numOfClusters?: pulumi.Input<string>;
    vlanNames?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NdbProfileNetworkProfilePostgresDatabaseSingleInstance {
    enableIpAddressSelection?: pulumi.Input<string>;
    vlanName?: pulumi.Input<string>;
}

export interface NdbProfileNetworkProfileVersionClusterAssociation {
    nxClusterId: pulumi.Input<string>;
}

export interface NdbProfileSoftwareProfile {
    availableClusterIds?: pulumi.Input<pulumi.Input<string>[]>;
    postgresDatabases?: pulumi.Input<pulumi.Input<inputs.NdbProfileSoftwareProfilePostgresDatabase>[]>;
    topology: pulumi.Input<string>;
}

export interface NdbProfileSoftwareProfilePostgresDatabase {
    baseProfileVersionDescription?: pulumi.Input<string>;
    baseProfileVersionName?: pulumi.Input<string>;
    dbSoftwareNotes?: pulumi.Input<string>;
    osNotes?: pulumi.Input<string>;
    sourceDbserverId?: pulumi.Input<string>;
}

export interface NdbProfileVersion {
    dbVersion: pulumi.Input<string>;
    deprecated: pulumi.Input<boolean>;
    description: pulumi.Input<string>;
    engineType: pulumi.Input<string>;
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
    owner: pulumi.Input<string>;
    profileId: pulumi.Input<string>;
    properties: pulumi.Input<pulumi.Input<inputs.NdbProfileVersionProperty>[]>;
    propertiesMap: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    published: pulumi.Input<boolean>;
    status: pulumi.Input<string>;
    systemProfile: pulumi.Input<boolean>;
    topology: pulumi.Input<string>;
    type: pulumi.Input<string>;
    version: pulumi.Input<string>;
    versionClusterAssociations: pulumi.Input<pulumi.Input<inputs.NdbProfileVersionVersionClusterAssociation>[]>;
}

export interface NdbProfileVersionProperty {
    name: pulumi.Input<string>;
    secure: pulumi.Input<boolean>;
    value: pulumi.Input<string>;
}

export interface NdbProfileVersionVersionClusterAssociation {
    dateCreated: pulumi.Input<string>;
    dateModified: pulumi.Input<string>;
    nxClusterId: pulumi.Input<string>;
    optimizedForProvisioning: pulumi.Input<boolean>;
    ownerId: pulumi.Input<string>;
    profileVersionId: pulumi.Input<string>;
    properties: pulumi.Input<pulumi.Input<inputs.NdbProfileVersionVersionClusterAssociationProperty>[]>;
    status: pulumi.Input<string>;
}

export interface NdbProfileVersionVersionClusterAssociationProperty {
    name: pulumi.Input<string>;
    secure: pulumi.Input<boolean>;
    value: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseActionargument {
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseDatabaseNode {
    accessLevel: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    databaseId: pulumi.Input<string>;
    databaseStatus: pulumi.Input<string>;
    dateCreated: pulumi.Input<string>;
    dateModified: pulumi.Input<string>;
    dbserver: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    dbserverId: pulumi.Input<string>;
    description: pulumi.Input<string>;
    id: pulumi.Input<string>;
    infos: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseDatabaseNodeInfo>[]>;
    name: pulumi.Input<string>;
    primary: pulumi.Input<boolean>;
    properties: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseDatabaseNodeProperty>[]>;
    protectionDomainId: pulumi.Input<string>;
    protectionDomains: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseDatabaseNodeProtectionDomain>[]>;
    softwareInstallationId: pulumi.Input<string>;
    status: pulumi.Input<string>;
    tags: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseDatabaseNodeTag>[]>;
}

export interface NdbRegisterDatabaseDatabaseNodeInfo {
    info: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    secureInfo: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NdbRegisterDatabaseDatabaseNodeProperty {
    description: pulumi.Input<string>;
    name: pulumi.Input<string>;
    refId: pulumi.Input<string>;
    secure: pulumi.Input<boolean>;
    value: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseDatabaseNodeProtectionDomain {
    assocEntities: pulumi.Input<pulumi.Input<string>[]>;
    cloudId: pulumi.Input<string>;
    dateCreated: pulumi.Input<string>;
    dateModified: pulumi.Input<string>;
    description: pulumi.Input<string>;
    eraCreated: pulumi.Input<boolean>;
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
    ownerId: pulumi.Input<string>;
    primaryHost: pulumi.Input<string>;
    properties: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseDatabaseNodeProtectionDomainProperty>[]>;
    status: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseDatabaseNodeProtectionDomainProperty {
    description: pulumi.Input<string>;
    name: pulumi.Input<string>;
    refId: pulumi.Input<string>;
    secure: pulumi.Input<boolean>;
    value: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseDatabaseNodeTag {
    entityId: pulumi.Input<string>;
    entityType: pulumi.Input<string>;
    tagId: pulumi.Input<string>;
    tagName: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseInfo {
    bpgConfigs: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseInfoBpgConfig>[]>;
    secureInfo: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NdbRegisterDatabaseInfoBpgConfig {
    bpgDbParams: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseInfoBpgConfigBpgDbParam>[]>;
    storages: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseInfoBpgConfigStorage>[]>;
    vmProperties: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseInfoBpgConfigVmProperty>[]>;
}

export interface NdbRegisterDatabaseInfoBpgConfigBpgDbParam {
    effectiveCacheSize: pulumi.Input<string>;
    maintenanceWorkMem: pulumi.Input<string>;
    maxParallelWorkersPerGather: pulumi.Input<string>;
    maxWorkerProcesses: pulumi.Input<string>;
    sharedBuffers: pulumi.Input<string>;
    workMem: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseInfoBpgConfigStorage {
    archiveStorages: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseInfoBpgConfigStorageArchiveStorage>[]>;
    dataDisks: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseInfoBpgConfigStorageDataDisk>[]>;
    logDisks: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseInfoBpgConfigStorageLogDisk>[]>;
}

export interface NdbRegisterDatabaseInfoBpgConfigStorageArchiveStorage {
    size: pulumi.Input<number>;
}

export interface NdbRegisterDatabaseInfoBpgConfigStorageDataDisk {
    count: pulumi.Input<number>;
}

export interface NdbRegisterDatabaseInfoBpgConfigStorageLogDisk {
    count: pulumi.Input<number>;
    size: pulumi.Input<number>;
}

export interface NdbRegisterDatabaseInfoBpgConfigVmProperty {
    dirtyBackgroundRatio: pulumi.Input<number>;
    dirtyExpireCentisecs: pulumi.Input<number>;
    dirtyRatio: pulumi.Input<number>;
    dirtyWritebackCentisecs: pulumi.Input<number>;
    nrHugepages: pulumi.Input<number>;
    overcommitMemory: pulumi.Input<number>;
    swappiness: pulumi.Input<number>;
}

export interface NdbRegisterDatabaseLcmConfig {
    expiryDetails: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseLcmConfigExpiryDetail>[]>;
    postDeleteCommands: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseLcmConfigPostDeleteCommand>[]>;
    preDeleteCommands: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseLcmConfigPreDeleteCommand>[]>;
    refreshDetails: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseLcmConfigRefreshDetail>[]>;
}

export interface NdbRegisterDatabaseLcmConfigExpiryDetail {
    deleteDatabase: pulumi.Input<boolean>;
    deleteTimeMachine: pulumi.Input<boolean>;
    deleteVm: pulumi.Input<boolean>;
    effectiveTimestamp: pulumi.Input<string>;
    expireInDays: pulumi.Input<number>;
    expiryDateTimezone: pulumi.Input<string>;
    expiryTimestamp: pulumi.Input<string>;
    remindBeforeInDays: pulumi.Input<number>;
    userCreated: pulumi.Input<boolean>;
}

export interface NdbRegisterDatabaseLcmConfigPostDeleteCommand {
    command: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseLcmConfigPreDeleteCommand {
    command: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseLcmConfigRefreshDetail {
    lastRefreshDate: pulumi.Input<string>;
    nextRefreshDate: pulumi.Input<string>;
    refreshDateTimezone: pulumi.Input<string>;
    refreshInDays: pulumi.Input<number>;
    refreshInHours: pulumi.Input<number>;
    refreshInMonths: pulumi.Input<number>;
    refreshTime: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseLinkedDatabase {
    databaseName: pulumi.Input<string>;
    databaseStatus: pulumi.Input<string>;
    dateCreated: pulumi.Input<string>;
    dateModified: pulumi.Input<string>;
    description: pulumi.Input<string>;
    id: pulumi.Input<string>;
    infos: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseLinkedDatabaseInfo>[]>;
    metric: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name: pulumi.Input<string>;
    parentDatabaseId: pulumi.Input<string>;
    parentLinkedDatabaseId: pulumi.Input<string>;
    snapshotId: pulumi.Input<string>;
    status: pulumi.Input<string>;
    timezone: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseLinkedDatabaseInfo {
    info: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    secureInfo: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NdbRegisterDatabasePostgressInfo {
    allowMultipleDatabases?: pulumi.Input<boolean>;
    backupPolicy?: pulumi.Input<string>;
    dbName: pulumi.Input<string>;
    dbPassword: pulumi.Input<string>;
    dbUser?: pulumi.Input<string>;
    listenerPort: pulumi.Input<string>;
    postgresSoftwareHome: pulumi.Input<string>;
    softwareHome?: pulumi.Input<string>;
    switchLog?: pulumi.Input<boolean>;
    vmIp?: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseProperty {
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseTag {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseTimeMachine {
    accessLevel: pulumi.Input<string>;
    clone: pulumi.Input<boolean>;
    clones: pulumi.Input<string>;
    clustered: pulumi.Input<boolean>;
    database: pulumi.Input<string>;
    databaseId: pulumi.Input<string>;
    dateCreated: pulumi.Input<string>;
    dateModified: pulumi.Input<string>;
    description: pulumi.Input<string>;
    eaStatus: pulumi.Input<string>;
    id: pulumi.Input<string>;
    metric: pulumi.Input<string>;
    name: pulumi.Input<string>;
    properties: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineProperty>[]>;
    scheduleId: pulumi.Input<string>;
    schedules: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineSchedule>[]>;
    scope: pulumi.Input<string>;
    slaId: pulumi.Input<string>;
    slaUpdateInProgress: pulumi.Input<boolean>;
    slaUpdateMetadata: pulumi.Input<string>;
    slas: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineSla>[]>;
    sourceNxClusters: pulumi.Input<pulumi.Input<string>[]>;
    status: pulumi.Input<string>;
    tags: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineTag>[]>;
    type: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseTimeMachineInfo {
    /**
     * description of autoTuneLogDrive
     */
    autotunelogdrive?: pulumi.Input<boolean>;
    /**
     * description of time machine's
     */
    description?: pulumi.Input<string>;
    /**
     * description of time machine's name
     */
    name: pulumi.Input<string>;
    /**
     * description of schedule of time machine
     */
    schedule: pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineInfoSchedule>;
    slaDetails?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineInfoSlaDetail>[]>;
    /**
     * description of SLA ID.
     */
    slaid?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineInfoTag>[]>;
}

export interface NdbRegisterDatabaseTimeMachineInfoSchedule {
    /**
     * description of schedule of time machine
     */
    continuousschedule?: pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineInfoScheduleContinuousschedule>;
    /**
     * description of schedule of time machine
     */
    monthlyschedule?: pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineInfoScheduleMonthlyschedule>;
    /**
     * description of schedule of time machine
     */
    quartelyschedule?: pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineInfoScheduleQuartelyschedule>;
    /**
     * description of schedule of time machine
     */
    snapshottimeofday?: pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineInfoScheduleSnapshottimeofday>;
    /**
     * description of schedule of time machine
     */
    weeklyschedule?: pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineInfoScheduleWeeklyschedule>;
    /**
     * description of schedule of time machine
     */
    yearlyschedule?: pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineInfoScheduleYearlyschedule>;
}

export interface NdbRegisterDatabaseTimeMachineInfoScheduleContinuousschedule {
    enabled: pulumi.Input<boolean>;
    logbackupinterval: pulumi.Input<number>;
    snapshotsperday: pulumi.Input<number>;
}

export interface NdbRegisterDatabaseTimeMachineInfoScheduleMonthlyschedule {
    dayofmonth: pulumi.Input<number>;
    enabled: pulumi.Input<boolean>;
}

export interface NdbRegisterDatabaseTimeMachineInfoScheduleQuartelyschedule {
    dayofmonth: pulumi.Input<number>;
    enabled: pulumi.Input<boolean>;
    startmonth: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseTimeMachineInfoScheduleSnapshottimeofday {
    hours: pulumi.Input<number>;
    minutes: pulumi.Input<number>;
    seconds: pulumi.Input<number>;
}

export interface NdbRegisterDatabaseTimeMachineInfoScheduleWeeklyschedule {
    dayofweek: pulumi.Input<string>;
    enabled: pulumi.Input<boolean>;
}

export interface NdbRegisterDatabaseTimeMachineInfoScheduleYearlyschedule {
    dayofmonth: pulumi.Input<number>;
    enabled: pulumi.Input<boolean>;
    month: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseTimeMachineInfoSlaDetail {
    primarySlas?: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineInfoSlaDetailPrimarySla>[]>;
}

export interface NdbRegisterDatabaseTimeMachineInfoSlaDetailPrimarySla {
    nxClusterIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * description of SLA ID.
     */
    slaId: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseTimeMachineInfoTag {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseTimeMachineProperty {
    description: pulumi.Input<string>;
    name: pulumi.Input<string>;
    refId: pulumi.Input<string>;
    secure: pulumi.Input<boolean>;
    value: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseTimeMachineSchedule {
    continuousSchedules: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineScheduleContinuousSchedule>[]>;
    dailySchedules: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineScheduleDailySchedule>[]>;
    dateCreated: pulumi.Input<string>;
    dateModified: pulumi.Input<string>;
    description: pulumi.Input<string>;
    globalPolicy: pulumi.Input<boolean>;
    id: pulumi.Input<string>;
    monthlySchedules: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineScheduleMonthlySchedule>[]>;
    name: pulumi.Input<string>;
    ownerId: pulumi.Input<string>;
    quartelySchedules: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineScheduleQuartelySchedule>[]>;
    referenceCount: pulumi.Input<number>;
    snapshotTimeOfDays: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineScheduleSnapshotTimeOfDay>[]>;
    startTime: pulumi.Input<string>;
    systemPolicy: pulumi.Input<boolean>;
    timeZone: pulumi.Input<string>;
    uniqueName: pulumi.Input<string>;
    weeklySchedules: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineScheduleWeeklySchedule>[]>;
    yearlySchedules: pulumi.Input<pulumi.Input<inputs.NdbRegisterDatabaseTimeMachineScheduleYearlySchedule>[]>;
}

export interface NdbRegisterDatabaseTimeMachineScheduleContinuousSchedule {
    enabled: pulumi.Input<boolean>;
    logBackupInterval: pulumi.Input<number>;
    snapshotsPerDay: pulumi.Input<number>;
}

export interface NdbRegisterDatabaseTimeMachineScheduleDailySchedule {
    enabled: pulumi.Input<boolean>;
}

export interface NdbRegisterDatabaseTimeMachineScheduleMonthlySchedule {
    dayOfMonth: pulumi.Input<number>;
    enabled: pulumi.Input<boolean>;
}

export interface NdbRegisterDatabaseTimeMachineScheduleQuartelySchedule {
    dayOfMonth: pulumi.Input<number>;
    enabled: pulumi.Input<boolean>;
    startMonth: pulumi.Input<string>;
    startMonthValue: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseTimeMachineScheduleSnapshotTimeOfDay {
    extra: pulumi.Input<boolean>;
    hours: pulumi.Input<number>;
    minutes: pulumi.Input<number>;
    seconds: pulumi.Input<number>;
}

export interface NdbRegisterDatabaseTimeMachineScheduleWeeklySchedule {
    dayOfWeek: pulumi.Input<string>;
    dayOfWeekValue: pulumi.Input<string>;
    enabled: pulumi.Input<boolean>;
}

export interface NdbRegisterDatabaseTimeMachineScheduleYearlySchedule {
    dayOfMonth: pulumi.Input<number>;
    enabled: pulumi.Input<boolean>;
    month: pulumi.Input<string>;
    monthValue: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseTimeMachineSla {
    continuousRetention: pulumi.Input<number>;
    currentActiveFrequency: pulumi.Input<string>;
    dailyRetention: pulumi.Input<number>;
    dateCreated: pulumi.Input<string>;
    dateModified: pulumi.Input<string>;
    description: pulumi.Input<string>;
    id: pulumi.Input<string>;
    monthlyRetention: pulumi.Input<number>;
    name: pulumi.Input<string>;
    ownerId: pulumi.Input<string>;
    pitrEnabled: pulumi.Input<boolean>;
    quarterlyRetention: pulumi.Input<number>;
    referenceCount: pulumi.Input<number>;
    systemSla: pulumi.Input<boolean>;
    uniqueName: pulumi.Input<string>;
    weeklyRetention: pulumi.Input<number>;
    yearlyRetention: pulumi.Input<number>;
}

export interface NdbRegisterDatabaseTimeMachineTag {
    entityId: pulumi.Input<string>;
    entityType: pulumi.Input<string>;
    tagId: pulumi.Input<string>;
    tagName: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface NdbRegisterDatabaseTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface NdbRegisterDbserverCredential {
    label?: pulumi.Input<string>;
    password: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface NdbRegisterDbserverPostgresDatabase {
    listenerPort?: pulumi.Input<string>;
    postgresSoftwareHome?: pulumi.Input<string>;
}

export interface NdbRegisterDbserverProperty {
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface NdbRegisterDbserverTag {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbScaleDatabaseDatabaseNode {
    accessLevel: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    databaseId: pulumi.Input<string>;
    databaseStatus: pulumi.Input<string>;
    dateCreated: pulumi.Input<string>;
    dateModified: pulumi.Input<string>;
    dbserver: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    dbserverId: pulumi.Input<string>;
    description: pulumi.Input<string>;
    id: pulumi.Input<string>;
    infos: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseDatabaseNodeInfo>[]>;
    name: pulumi.Input<string>;
    primary: pulumi.Input<boolean>;
    properties: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseDatabaseNodeProperty>[]>;
    protectionDomainId: pulumi.Input<string>;
    protectionDomains: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseDatabaseNodeProtectionDomain>[]>;
    softwareInstallationId: pulumi.Input<string>;
    status: pulumi.Input<string>;
    tags: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseDatabaseNodeTag>[]>;
}

export interface NdbScaleDatabaseDatabaseNodeInfo {
    info: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    secureInfo: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NdbScaleDatabaseDatabaseNodeProperty {
    description: pulumi.Input<string>;
    name: pulumi.Input<string>;
    refId: pulumi.Input<string>;
    secure: pulumi.Input<boolean>;
    value: pulumi.Input<string>;
}

export interface NdbScaleDatabaseDatabaseNodeProtectionDomain {
    assocEntities: pulumi.Input<pulumi.Input<string>[]>;
    cloudId: pulumi.Input<string>;
    dateCreated: pulumi.Input<string>;
    dateModified: pulumi.Input<string>;
    description: pulumi.Input<string>;
    eraCreated: pulumi.Input<boolean>;
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
    ownerId: pulumi.Input<string>;
    primaryHost: pulumi.Input<string>;
    properties: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseDatabaseNodeProtectionDomainProperty>[]>;
    status: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface NdbScaleDatabaseDatabaseNodeProtectionDomainProperty {
    description: pulumi.Input<string>;
    name: pulumi.Input<string>;
    refId: pulumi.Input<string>;
    secure: pulumi.Input<boolean>;
    value: pulumi.Input<string>;
}

export interface NdbScaleDatabaseDatabaseNodeTag {
    entityId: pulumi.Input<string>;
    entityType: pulumi.Input<string>;
    tagId: pulumi.Input<string>;
    tagName: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface NdbScaleDatabaseInfo {
    bpgConfigs: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseInfoBpgConfig>[]>;
    secureInfo: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NdbScaleDatabaseInfoBpgConfig {
    bpgDbParams: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseInfoBpgConfigBpgDbParam>[]>;
    storages: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseInfoBpgConfigStorage>[]>;
    vmProperties: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseInfoBpgConfigVmProperty>[]>;
}

export interface NdbScaleDatabaseInfoBpgConfigBpgDbParam {
    effectiveCacheSize: pulumi.Input<string>;
    maintenanceWorkMem: pulumi.Input<string>;
    maxParallelWorkersPerGather: pulumi.Input<string>;
    maxWorkerProcesses: pulumi.Input<string>;
    sharedBuffers: pulumi.Input<string>;
    workMem: pulumi.Input<string>;
}

export interface NdbScaleDatabaseInfoBpgConfigStorage {
    archiveStorages: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseInfoBpgConfigStorageArchiveStorage>[]>;
    dataDisks: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseInfoBpgConfigStorageDataDisk>[]>;
    logDisks: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseInfoBpgConfigStorageLogDisk>[]>;
}

export interface NdbScaleDatabaseInfoBpgConfigStorageArchiveStorage {
    size: pulumi.Input<number>;
}

export interface NdbScaleDatabaseInfoBpgConfigStorageDataDisk {
    count: pulumi.Input<number>;
}

export interface NdbScaleDatabaseInfoBpgConfigStorageLogDisk {
    count: pulumi.Input<number>;
    size: pulumi.Input<number>;
}

export interface NdbScaleDatabaseInfoBpgConfigVmProperty {
    dirtyBackgroundRatio: pulumi.Input<number>;
    dirtyExpireCentisecs: pulumi.Input<number>;
    dirtyRatio: pulumi.Input<number>;
    dirtyWritebackCentisecs: pulumi.Input<number>;
    nrHugepages: pulumi.Input<number>;
    overcommitMemory: pulumi.Input<number>;
    swappiness: pulumi.Input<number>;
}

export interface NdbScaleDatabaseLcmConfig {
    expiryDetails: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseLcmConfigExpiryDetail>[]>;
    postDeleteCommands: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseLcmConfigPostDeleteCommand>[]>;
    preDeleteCommands: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseLcmConfigPreDeleteCommand>[]>;
    refreshDetails: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseLcmConfigRefreshDetail>[]>;
}

export interface NdbScaleDatabaseLcmConfigExpiryDetail {
    deleteDatabase: pulumi.Input<boolean>;
    deleteTimeMachine: pulumi.Input<boolean>;
    deleteVm: pulumi.Input<boolean>;
    effectiveTimestamp: pulumi.Input<string>;
    expireInDays: pulumi.Input<number>;
    expiryDateTimezone: pulumi.Input<string>;
    expiryTimestamp: pulumi.Input<string>;
    remindBeforeInDays: pulumi.Input<number>;
    userCreated: pulumi.Input<boolean>;
}

export interface NdbScaleDatabaseLcmConfigPostDeleteCommand {
    command: pulumi.Input<string>;
}

export interface NdbScaleDatabaseLcmConfigPreDeleteCommand {
    command: pulumi.Input<string>;
}

export interface NdbScaleDatabaseLcmConfigRefreshDetail {
    lastRefreshDate: pulumi.Input<string>;
    nextRefreshDate: pulumi.Input<string>;
    refreshDateTimezone: pulumi.Input<string>;
    refreshInDays: pulumi.Input<number>;
    refreshInHours: pulumi.Input<number>;
    refreshInMonths: pulumi.Input<number>;
    refreshTime: pulumi.Input<string>;
}

export interface NdbScaleDatabaseLinkedDatabase {
    databaseName: pulumi.Input<string>;
    databaseStatus: pulumi.Input<string>;
    dateCreated: pulumi.Input<string>;
    dateModified: pulumi.Input<string>;
    description: pulumi.Input<string>;
    id: pulumi.Input<string>;
    infos: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseLinkedDatabaseInfo>[]>;
    metric: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name: pulumi.Input<string>;
    parentDatabaseId: pulumi.Input<string>;
    parentLinkedDatabaseId: pulumi.Input<string>;
    snapshotId: pulumi.Input<string>;
    status: pulumi.Input<string>;
    timezone: pulumi.Input<string>;
}

export interface NdbScaleDatabaseLinkedDatabaseInfo {
    info: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    secureInfo: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NdbScaleDatabaseProperty {
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface NdbScaleDatabaseTag {
    entityId?: pulumi.Input<string>;
    entityType?: pulumi.Input<string>;
    tagId?: pulumi.Input<string>;
    tagName?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NdbScaleDatabaseTimeMachine {
    accessLevel: pulumi.Input<string>;
    clone: pulumi.Input<boolean>;
    clones: pulumi.Input<string>;
    clustered: pulumi.Input<boolean>;
    database: pulumi.Input<string>;
    databaseId: pulumi.Input<string>;
    dateCreated: pulumi.Input<string>;
    dateModified: pulumi.Input<string>;
    description: pulumi.Input<string>;
    eaStatus: pulumi.Input<string>;
    id: pulumi.Input<string>;
    metric: pulumi.Input<string>;
    name: pulumi.Input<string>;
    properties: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseTimeMachineProperty>[]>;
    scheduleId: pulumi.Input<string>;
    schedules: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseTimeMachineSchedule>[]>;
    scope: pulumi.Input<string>;
    slaId: pulumi.Input<string>;
    slaUpdateInProgress: pulumi.Input<boolean>;
    slaUpdateMetadata: pulumi.Input<string>;
    slas: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseTimeMachineSla>[]>;
    sourceNxClusters: pulumi.Input<pulumi.Input<string>[]>;
    status: pulumi.Input<string>;
    tags: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseTimeMachineTag>[]>;
    type: pulumi.Input<string>;
}

export interface NdbScaleDatabaseTimeMachineProperty {
    description: pulumi.Input<string>;
    name: pulumi.Input<string>;
    refId: pulumi.Input<string>;
    secure: pulumi.Input<boolean>;
    value: pulumi.Input<string>;
}

export interface NdbScaleDatabaseTimeMachineSchedule {
    continuousSchedules: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseTimeMachineScheduleContinuousSchedule>[]>;
    dailySchedules: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseTimeMachineScheduleDailySchedule>[]>;
    dateCreated: pulumi.Input<string>;
    dateModified: pulumi.Input<string>;
    description: pulumi.Input<string>;
    globalPolicy: pulumi.Input<boolean>;
    id: pulumi.Input<string>;
    monthlySchedules: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseTimeMachineScheduleMonthlySchedule>[]>;
    name: pulumi.Input<string>;
    ownerId: pulumi.Input<string>;
    quartelySchedules: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseTimeMachineScheduleQuartelySchedule>[]>;
    referenceCount: pulumi.Input<number>;
    snapshotTimeOfDays: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseTimeMachineScheduleSnapshotTimeOfDay>[]>;
    startTime: pulumi.Input<string>;
    systemPolicy: pulumi.Input<boolean>;
    timeZone: pulumi.Input<string>;
    uniqueName: pulumi.Input<string>;
    weeklySchedules: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseTimeMachineScheduleWeeklySchedule>[]>;
    yearlySchedules: pulumi.Input<pulumi.Input<inputs.NdbScaleDatabaseTimeMachineScheduleYearlySchedule>[]>;
}

export interface NdbScaleDatabaseTimeMachineScheduleContinuousSchedule {
    enabled: pulumi.Input<boolean>;
    logBackupInterval: pulumi.Input<number>;
    snapshotsPerDay: pulumi.Input<number>;
}

export interface NdbScaleDatabaseTimeMachineScheduleDailySchedule {
    enabled: pulumi.Input<boolean>;
}

export interface NdbScaleDatabaseTimeMachineScheduleMonthlySchedule {
    dayOfMonth: pulumi.Input<number>;
    enabled: pulumi.Input<boolean>;
}

export interface NdbScaleDatabaseTimeMachineScheduleQuartelySchedule {
    dayOfMonth: pulumi.Input<number>;
    enabled: pulumi.Input<boolean>;
    startMonth: pulumi.Input<string>;
    startMonthValue: pulumi.Input<string>;
}

export interface NdbScaleDatabaseTimeMachineScheduleSnapshotTimeOfDay {
    extra: pulumi.Input<boolean>;
    hours: pulumi.Input<number>;
    minutes: pulumi.Input<number>;
    seconds: pulumi.Input<number>;
}

export interface NdbScaleDatabaseTimeMachineScheduleWeeklySchedule {
    dayOfWeek: pulumi.Input<string>;
    dayOfWeekValue: pulumi.Input<string>;
    enabled: pulumi.Input<boolean>;
}

export interface NdbScaleDatabaseTimeMachineScheduleYearlySchedule {
    dayOfMonth: pulumi.Input<number>;
    enabled: pulumi.Input<boolean>;
    month: pulumi.Input<string>;
    monthValue: pulumi.Input<string>;
}

export interface NdbScaleDatabaseTimeMachineSla {
    continuousRetention: pulumi.Input<number>;
    currentActiveFrequency: pulumi.Input<string>;
    dailyRetention: pulumi.Input<number>;
    dateCreated: pulumi.Input<string>;
    dateModified: pulumi.Input<string>;
    description: pulumi.Input<string>;
    id: pulumi.Input<string>;
    monthlyRetention: pulumi.Input<number>;
    name: pulumi.Input<string>;
    ownerId: pulumi.Input<string>;
    pitrEnabled: pulumi.Input<boolean>;
    quarterlyRetention: pulumi.Input<number>;
    referenceCount: pulumi.Input<number>;
    systemSla: pulumi.Input<boolean>;
    uniqueName: pulumi.Input<string>;
    weeklyRetention: pulumi.Input<number>;
    yearlyRetention: pulumi.Input<number>;
}

export interface NdbScaleDatabaseTimeMachineTag {
    entityId: pulumi.Input<string>;
    entityType: pulumi.Input<string>;
    tagId: pulumi.Input<string>;
    tagName: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface NdbScaleDatabaseTimeouts {
    create?: pulumi.Input<string>;
}

export interface NdbSoftwareVersionProfilePostgresDatabase {
    dbSoftwareNotes?: pulumi.Input<string>;
    osNotes?: pulumi.Input<string>;
    sourceDbserverId?: pulumi.Input<string>;
}

export interface NdbSoftwareVersionProfileProperty {
    name: pulumi.Input<string>;
    secure: pulumi.Input<boolean>;
    value: pulumi.Input<string>;
}

export interface NdbSoftwareVersionProfileTimeouts {
    create?: pulumi.Input<string>;
}

export interface NdbSoftwareVersionProfileVersionClusterAssociation {
    dateCreated: pulumi.Input<string>;
    dateModified: pulumi.Input<string>;
    nxClusterId: pulumi.Input<string>;
    optimizedForProvisioning: pulumi.Input<boolean>;
    ownerId: pulumi.Input<string>;
    profileVersionId: pulumi.Input<string>;
    properties: pulumi.Input<pulumi.Input<inputs.NdbSoftwareVersionProfileVersionClusterAssociationProperty>[]>;
    status: pulumi.Input<string>;
}

export interface NdbSoftwareVersionProfileVersionClusterAssociationProperty {
    name: pulumi.Input<string>;
    secure: pulumi.Input<boolean>;
    value: pulumi.Input<string>;
}

export interface NdbStretchedVlanMetadata {
    gateway?: pulumi.Input<string>;
    subnetMask?: pulumi.Input<string>;
}

export interface NdbStretchedVlanVlansList {
    clusterId: pulumi.Input<string>;
    id: pulumi.Input<string>;
    managed: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    properties: pulumi.Input<pulumi.Input<inputs.NdbStretchedVlanVlansListProperty>[]>;
    propertiesMaps: pulumi.Input<pulumi.Input<inputs.NdbStretchedVlanVlansListPropertiesMap>[]>;
    stretchedVlanId: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface NdbStretchedVlanVlansListPropertiesMap {
    vlanGateway: pulumi.Input<string>;
    vlanPrimaryDns: pulumi.Input<string>;
    vlanSecondaryDns: pulumi.Input<string>;
    vlanSubnetMask: pulumi.Input<string>;
}

export interface NdbStretchedVlanVlansListProperty {
    name: pulumi.Input<string>;
    secure: pulumi.Input<boolean>;
    value: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAdRuleInboundAllowList {
    addressGroupInclusionLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionList>[]>;
    expirationTime?: pulumi.Input<string>;
    filterKindLists?: pulumi.Input<pulumi.Input<string>[]>;
    filterParams?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleInboundAllowListFilterParam>[]>;
    filterType?: pulumi.Input<string>;
    icmpTypeCodeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeList>[]>;
    ipSubnet?: pulumi.Input<string>;
    ipSubnetPrefixLength?: pulumi.Input<string>;
    networkFunctionChainReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    peerSpecificationType?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    serviceGroupLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleInboundAllowListServiceGroupList>[]>;
    tcpPortRangeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList>[]>;
    udpPortRangeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList>[]>;
}

export interface NetworkSecurityRuleAdRuleInboundAllowListAddressGroupInclusionList {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAdRuleInboundAllowListFilterParam {
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkSecurityRuleAdRuleInboundAllowListIcmpTypeCodeList {
    code?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAdRuleInboundAllowListServiceGroupList {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAdRuleInboundAllowListTcpPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface NetworkSecurityRuleAdRuleInboundAllowListUdpPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface NetworkSecurityRuleAdRuleOutboundAllowList {
    addressGroupInclusionLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionList>[]>;
    expirationTime?: pulumi.Input<string>;
    filterKindLists?: pulumi.Input<pulumi.Input<string>[]>;
    filterParams?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleOutboundAllowListFilterParam>[]>;
    filterType?: pulumi.Input<string>;
    icmpTypeCodeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeList>[]>;
    ipSubnet?: pulumi.Input<string>;
    ipSubnetPrefixLength?: pulumi.Input<string>;
    networkFunctionChainReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    peerSpecificationType?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    serviceGroupLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupList>[]>;
    tcpPortRangeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList>[]>;
    udpPortRangeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList>[]>;
}

export interface NetworkSecurityRuleAdRuleOutboundAllowListAddressGroupInclusionList {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAdRuleOutboundAllowListFilterParam {
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkSecurityRuleAdRuleOutboundAllowListIcmpTypeCodeList {
    code?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAdRuleOutboundAllowListServiceGroupList {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAdRuleOutboundAllowListTcpPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface NetworkSecurityRuleAdRuleOutboundAllowListUdpPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface NetworkSecurityRuleAdRuleTargetGroupFilterParam {
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkSecurityRuleAppRuleInboundAllowList {
    addressGroupInclusionLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionList>[]>;
    expirationTime?: pulumi.Input<string>;
    filterKindLists?: pulumi.Input<pulumi.Input<string>[]>;
    filterParams?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleInboundAllowListFilterParam>[]>;
    filterType?: pulumi.Input<string>;
    icmpTypeCodeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeList>[]>;
    ipSubnet?: pulumi.Input<string>;
    ipSubnetPrefixLength?: pulumi.Input<string>;
    networkFunctionChainReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    peerSpecificationType?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    serviceGroupLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleInboundAllowListServiceGroupList>[]>;
    tcpPortRangeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList>[]>;
    udpPortRangeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList>[]>;
}

export interface NetworkSecurityRuleAppRuleInboundAllowListAddressGroupInclusionList {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAppRuleInboundAllowListFilterParam {
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkSecurityRuleAppRuleInboundAllowListIcmpTypeCodeList {
    code?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAppRuleInboundAllowListServiceGroupList {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAppRuleInboundAllowListTcpPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface NetworkSecurityRuleAppRuleInboundAllowListUdpPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface NetworkSecurityRuleAppRuleOutboundAllowList {
    addressGroupInclusionLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleOutboundAllowListAddressGroupInclusionList>[]>;
    expirationTime?: pulumi.Input<string>;
    filterKindLists?: pulumi.Input<pulumi.Input<string>[]>;
    filterParams?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleOutboundAllowListFilterParam>[]>;
    filterType?: pulumi.Input<string>;
    icmpTypeCodeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeList>[]>;
    ipSubnet?: pulumi.Input<string>;
    ipSubnetPrefixLength?: pulumi.Input<string>;
    networkFunctionChainReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    peerSpecificationType?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    serviceGroupLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleOutboundAllowListServiceGroupList>[]>;
    tcpPortRangeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList>[]>;
    udpPortRangeLists?: pulumi.Input<pulumi.Input<inputs.NetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList>[]>;
}

export interface NetworkSecurityRuleAppRuleOutboundAllowListAddressGroupInclusionList {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAppRuleOutboundAllowListFilterParam {
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkSecurityRuleAppRuleOutboundAllowListIcmpTypeCodeList {
    code?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAppRuleOutboundAllowListServiceGroupList {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleAppRuleOutboundAllowListTcpPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface NetworkSecurityRuleAppRuleOutboundAllowListUdpPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface NetworkSecurityRuleAppRuleTargetGroupFilterParam {
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkSecurityRuleCategory {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleIsolationRuleFirstEntityFilterParam {
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkSecurityRuleIsolationRuleSecondEntityFilterParam {
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkSecurityRuleTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface PbrDestination {
    addressType?: pulumi.Input<string>;
    prefixLength?: pulumi.Input<number>;
    subnetIp?: pulumi.Input<string>;
}

export interface PbrProtocolParameters {
    icmp?: pulumi.Input<inputs.PbrProtocolParametersIcmp>;
    protocolNumber?: pulumi.Input<string>;
    tcp?: pulumi.Input<inputs.PbrProtocolParametersTcp>;
    udp?: pulumi.Input<inputs.PbrProtocolParametersUdp>;
}

export interface PbrProtocolParametersIcmp {
    icmpCode: pulumi.Input<number>;
    icmpType: pulumi.Input<number>;
}

export interface PbrProtocolParametersTcp {
    destinationPortRangeLists?: pulumi.Input<pulumi.Input<inputs.PbrProtocolParametersTcpDestinationPortRangeList>[]>;
    sourcePortRangeLists?: pulumi.Input<pulumi.Input<inputs.PbrProtocolParametersTcpSourcePortRangeList>[]>;
}

export interface PbrProtocolParametersTcpDestinationPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface PbrProtocolParametersTcpSourcePortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface PbrProtocolParametersUdp {
    destinationPortRangeLists?: pulumi.Input<pulumi.Input<inputs.PbrProtocolParametersUdpDestinationPortRangeList>[]>;
    sourcePortRangeLists?: pulumi.Input<pulumi.Input<inputs.PbrProtocolParametersUdpSourcePortRangeList>[]>;
}

export interface PbrProtocolParametersUdpDestinationPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface PbrProtocolParametersUdpSourcePortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface PbrSource {
    addressType?: pulumi.Input<string>;
    prefixLength?: pulumi.Input<number>;
    subnetIp?: pulumi.Input<string>;
}

export interface ProjectAccountReferenceList {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid: pulumi.Input<string>;
}

export interface ProjectAcp {
    contextFilterLists?: pulumi.Input<pulumi.Input<inputs.ProjectAcpContextFilterList>[]>;
    description?: pulumi.Input<string>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    roleReference: pulumi.Input<inputs.ProjectAcpRoleReference>;
    userGroupReferenceLists?: pulumi.Input<pulumi.Input<inputs.ProjectAcpUserGroupReferenceList>[]>;
    userReferenceLists?: pulumi.Input<pulumi.Input<inputs.ProjectAcpUserReferenceList>[]>;
}

export interface ProjectAcpContextFilterList {
    entityFilterExpressionLists: pulumi.Input<pulumi.Input<inputs.ProjectAcpContextFilterListEntityFilterExpressionList>[]>;
    scopeFilterExpressionLists: pulumi.Input<pulumi.Input<inputs.ProjectAcpContextFilterListScopeFilterExpressionList>[]>;
}

export interface ProjectAcpContextFilterListEntityFilterExpressionList {
    leftHandSideEntityType: pulumi.Input<string>;
    operator: pulumi.Input<string>;
    rightHandSides: pulumi.Input<pulumi.Input<inputs.ProjectAcpContextFilterListEntityFilterExpressionListRightHandSide>[]>;
}

export interface ProjectAcpContextFilterListEntityFilterExpressionListRightHandSide {
    categories: pulumi.Input<pulumi.Input<inputs.ProjectAcpContextFilterListEntityFilterExpressionListRightHandSideCategory>[]>;
    collection: pulumi.Input<string>;
    uuidLists: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ProjectAcpContextFilterListEntityFilterExpressionListRightHandSideCategory {
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ProjectAcpContextFilterListScopeFilterExpressionList {
    leftHandSide: pulumi.Input<string>;
    operator: pulumi.Input<string>;
    rightHandSides: pulumi.Input<pulumi.Input<inputs.ProjectAcpContextFilterListScopeFilterExpressionListRightHandSide>[]>;
}

export interface ProjectAcpContextFilterListScopeFilterExpressionListRightHandSide {
    categories: pulumi.Input<pulumi.Input<inputs.ProjectAcpContextFilterListScopeFilterExpressionListRightHandSideCategory>[]>;
    collection: pulumi.Input<string>;
    uuidLists: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ProjectAcpContextFilterListScopeFilterExpressionListRightHandSideCategory {
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ProjectAcpRoleReference {
    kind: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid: pulumi.Input<string>;
}

export interface ProjectAcpUserGroupReferenceList {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid: pulumi.Input<string>;
}

export interface ProjectAcpUserReferenceList {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid: pulumi.Input<string>;
}

export interface ProjectCategory {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProjectClusterReferenceList {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid: pulumi.Input<string>;
}

export interface ProjectDefaultEnvironmentReference {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid: pulumi.Input<string>;
}

export interface ProjectDefaultSubnetReference {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid: pulumi.Input<string>;
}

export interface ProjectEnvironmentReferenceList {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid: pulumi.Input<string>;
}

export interface ProjectExternalNetworkList {
    name?: pulumi.Input<string>;
    uuid: pulumi.Input<string>;
}

export interface ProjectExternalUserGroupReferenceList {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid: pulumi.Input<string>;
}

export interface ProjectResourceDomain {
    resources: pulumi.Input<pulumi.Input<inputs.ProjectResourceDomainResource>[]>;
}

export interface ProjectResourceDomainResource {
    limit: pulumi.Input<number>;
    resourceType: pulumi.Input<string>;
    units?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
}

export interface ProjectSubnetReferenceList {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid: pulumi.Input<string>;
}

export interface ProjectTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface ProjectTunnelReferenceList {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid: pulumi.Input<string>;
}

export interface ProjectUserGroupList {
    directoryServiceOus?: pulumi.Input<pulumi.Input<inputs.ProjectUserGroupListDirectoryServiceOus>[]>;
    directoryServiceUserGroups?: pulumi.Input<pulumi.Input<inputs.ProjectUserGroupListDirectoryServiceUserGroup>[]>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    samlUserGroups?: pulumi.Input<pulumi.Input<inputs.ProjectUserGroupListSamlUserGroup>[]>;
}

export interface ProjectUserGroupListDirectoryServiceOus {
    distinguishedName: pulumi.Input<string>;
}

export interface ProjectUserGroupListDirectoryServiceUserGroup {
    distinguishedName: pulumi.Input<string>;
}

export interface ProjectUserGroupListSamlUserGroup {
    idpUuid: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface ProjectUserList {
    directoryServiceUser?: pulumi.Input<inputs.ProjectUserListDirectoryServiceUser>;
    identityProviderUser?: pulumi.Input<inputs.ProjectUserListIdentityProviderUser>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ProjectUserListDirectoryServiceUser {
    defaultUserPrincipalName?: pulumi.Input<string>;
    directoryServiceReference: pulumi.Input<inputs.ProjectUserListDirectoryServiceUserDirectoryServiceReference>;
    userPrincipalName?: pulumi.Input<string>;
}

export interface ProjectUserListDirectoryServiceUserDirectoryServiceReference {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid: pulumi.Input<string>;
}

export interface ProjectUserListIdentityProviderUser {
    identityProviderReference: pulumi.Input<inputs.ProjectUserListIdentityProviderUserIdentityProviderReference>;
    username?: pulumi.Input<string>;
}

export interface ProjectUserListIdentityProviderUserIdentityProviderReference {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid: pulumi.Input<string>;
}

export interface ProjectUserReferenceList {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid: pulumi.Input<string>;
}

export interface ProjectVpcReferenceList {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid: pulumi.Input<string>;
}

export interface ProtectionRuleAvailabilityZoneConnectivityList {
    destinationAvailabilityZoneIndex?: pulumi.Input<number>;
    snapshotScheduleLists?: pulumi.Input<pulumi.Input<inputs.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList>[]>;
    sourceAvailabilityZoneIndex?: pulumi.Input<number>;
}

export interface ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleList {
    autoSuspendTimeoutSecs?: pulumi.Input<number>;
    localSnapshotRetentionPolicy?: pulumi.Input<inputs.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy>;
    recoveryPointObjectiveSecs: pulumi.Input<number>;
    remoteSnapshotRetentionPolicy?: pulumi.Input<inputs.ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy>;
    snapshotType?: pulumi.Input<string>;
}

export interface ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListLocalSnapshotRetentionPolicy {
    numSnapshots?: pulumi.Input<number>;
    rollupRetentionPolicyMultiple?: pulumi.Input<number>;
    rollupRetentionPolicySnapshotIntervalType?: pulumi.Input<string>;
}

export interface ProtectionRuleAvailabilityZoneConnectivityListSnapshotScheduleListRemoteSnapshotRetentionPolicy {
    numSnapshots?: pulumi.Input<number>;
    rollupRetentionPolicyMultiple?: pulumi.Input<number>;
    rollupRetentionPolicySnapshotIntervalType?: pulumi.Input<string>;
}

export interface ProtectionRuleCategory {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ProtectionRuleCategoryFilter {
    kindLists?: pulumi.Input<pulumi.Input<string>[]>;
    params?: pulumi.Input<pulumi.Input<inputs.ProtectionRuleCategoryFilterParam>[]>;
    type?: pulumi.Input<string>;
}

export interface ProtectionRuleCategoryFilterParam {
    name: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ProtectionRuleOrderedAvailabilityZoneList {
    availabilityZoneUrl?: pulumi.Input<string>;
    clusterUuid?: pulumi.Input<string>;
}

export interface ProtectionRuleOwnerReference {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface ProtectionRuleProjectReference {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface ProtectionRuleTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface RecoveryPlanCategory {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface RecoveryPlanOwnerReference {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface RecoveryPlanParameters {
    floatingIpAssignmentLists?: pulumi.Input<pulumi.Input<inputs.RecoveryPlanParametersFloatingIpAssignmentList>[]>;
    networkMappingLists?: pulumi.Input<pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingList>[]>;
}

export interface RecoveryPlanParametersFloatingIpAssignmentList {
    availabilityZoneUrl: pulumi.Input<string>;
    vmIpAssignmentLists: pulumi.Input<pulumi.Input<inputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentList>[]>;
}

export interface RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentList {
    recoveryFloatingIpConfig?: pulumi.Input<inputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig>;
    testFloatingIpConfig?: pulumi.Input<inputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig>;
    vmNicInformation: pulumi.Input<inputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmNicInformation>;
    vmReference: pulumi.Input<inputs.RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmReference>;
}

export interface RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListRecoveryFloatingIpConfig {
    ip?: pulumi.Input<string>;
    shouldAllocateDynamically?: pulumi.Input<boolean>;
}

export interface RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListTestFloatingIpConfig {
    ip?: pulumi.Input<string>;
    shouldAllocateDynamically?: pulumi.Input<boolean>;
}

export interface RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmNicInformation {
    ip?: pulumi.Input<string>;
    uuid: pulumi.Input<string>;
}

export interface RecoveryPlanParametersFloatingIpAssignmentListVmIpAssignmentListVmReference {
    kind: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid: pulumi.Input<string>;
}

export interface RecoveryPlanParametersNetworkMappingList {
    areNetworksStretched?: pulumi.Input<boolean>;
    availabilityZoneNetworkMappingLists?: pulumi.Input<pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingList>[]>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingList {
    availabilityZoneUrl?: pulumi.Input<string>;
    clusterReferenceLists?: pulumi.Input<pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList>[]>;
    recoveryIpAssignmentLists?: pulumi.Input<pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList>[]>;
    recoveryNetwork?: pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork>;
    testIpAssignmentLists?: pulumi.Input<pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList>[]>;
    testNetwork?: pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListClusterReferenceList {
    kind: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid: pulumi.Input<string>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentList {
    ipConfigLists: pulumi.Input<pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList>[]>;
    vmReference: pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListIpConfigList {
    ipAddress: pulumi.Input<string>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryIpAssignmentListVmReference {
    kind: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetwork {
    name?: pulumi.Input<string>;
    subnetLists?: pulumi.Input<pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList>[]>;
    useVpcReference?: pulumi.Input<boolean>;
    virtualNetworkReference?: pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference>;
    vpcReference?: pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkSubnetList {
    externalConnectivityState?: pulumi.Input<string>;
    gatewayIp: pulumi.Input<string>;
    prefixLength: pulumi.Input<number>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVirtualNetworkReference {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListRecoveryNetworkVpcReference {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentList {
    ipConfigLists: pulumi.Input<pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList>[]>;
    vmReference: pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListIpConfigList {
    ipAddress: pulumi.Input<string>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestIpAssignmentListVmReference {
    kind: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetwork {
    name?: pulumi.Input<string>;
    subnetLists?: pulumi.Input<pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList>[]>;
    useVpcReference?: pulumi.Input<boolean>;
    virtualNetworkReference?: pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference>;
    vpcReference?: pulumi.Input<inputs.RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkSubnetList {
    externalConnectivityState?: pulumi.Input<string>;
    gatewayIp: pulumi.Input<string>;
    prefixLength: pulumi.Input<number>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVirtualNetworkReference {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface RecoveryPlanParametersNetworkMappingListAvailabilityZoneNetworkMappingListTestNetworkVpcReference {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface RecoveryPlanProjectReference {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface RecoveryPlanStageList {
    delayTimeSecs?: pulumi.Input<number>;
    stageUuid?: pulumi.Input<string>;
    stageWork: pulumi.Input<inputs.RecoveryPlanStageListStageWork>;
}

export interface RecoveryPlanStageListStageWork {
    recoverEntities?: pulumi.Input<inputs.RecoveryPlanStageListStageWorkRecoverEntities>;
}

export interface RecoveryPlanStageListStageWorkRecoverEntities {
    entityInfoLists?: pulumi.Input<pulumi.Input<inputs.RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoList>[]>;
}

export interface RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoList {
    anyEntityReferenceKind?: pulumi.Input<string>;
    anyEntityReferenceName?: pulumi.Input<string>;
    anyEntityReferenceUuid?: pulumi.Input<string>;
    categories?: pulumi.Input<pulumi.Input<inputs.RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListCategory>[]>;
    scriptLists?: pulumi.Input<pulumi.Input<inputs.RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListScriptList>[]>;
}

export interface RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListCategory {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface RecoveryPlanStageListStageWorkRecoverEntitiesEntityInfoListScriptList {
    enableScriptExec: pulumi.Input<boolean>;
    timeout?: pulumi.Input<string>;
}

export interface RecoveryPlanTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface RoleCategory {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface RoleOwnerReference {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface RolePermissionReferenceList {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid: pulumi.Input<string>;
}

export interface RoleProjectReference {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface RoleTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface ServiceGroupServiceList {
    icmpTypeCodeLists?: pulumi.Input<pulumi.Input<inputs.ServiceGroupServiceListIcmpTypeCodeList>[]>;
    protocol?: pulumi.Input<string>;
    tcpPortRangeLists?: pulumi.Input<pulumi.Input<inputs.ServiceGroupServiceListTcpPortRangeList>[]>;
    udpPortRangeLists?: pulumi.Input<pulumi.Input<inputs.ServiceGroupServiceListUdpPortRangeList>[]>;
}

export interface ServiceGroupServiceListIcmpTypeCodeList {
    code?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ServiceGroupServiceListTcpPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface ServiceGroupServiceListUdpPortRangeList {
    endPort?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface StaticRoutesDefaultRouteNexthop {
    externalSubnetReferenceUuid?: pulumi.Input<string>;
}

export interface StaticRoutesStaticRoutesList {
    destination: pulumi.Input<string>;
    externalSubnetReferenceUuid?: pulumi.Input<string>;
    vpnConnectionReferenceUuid?: pulumi.Input<string>;
}

export interface SubnetCategory {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface SubnetTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface UserAccessControlPolicyReferenceList {
    kind: pulumi.Input<string>;
    name: pulumi.Input<string>;
    uuid: pulumi.Input<string>;
}

export interface UserCategory {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface UserDirectoryServiceUser {
    defaultUserPrincipalName?: pulumi.Input<string>;
    directoryServiceReference: pulumi.Input<inputs.UserDirectoryServiceUserDirectoryServiceReference>;
    userPrincipalName?: pulumi.Input<string>;
}

export interface UserDirectoryServiceUserDirectoryServiceReference {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid: pulumi.Input<string>;
}

export interface UserGroupsCategory {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface UserGroupsDirectoryServiceOus {
    distinguishedName: pulumi.Input<string>;
}

export interface UserGroupsDirectoryServiceUserGroup {
    distinguishedName: pulumi.Input<string>;
}

export interface UserGroupsSamlUserGroup {
    idpUuid: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface UserIdentityProviderUser {
    identityProviderReference: pulumi.Input<inputs.UserIdentityProviderUserIdentityProviderReference>;
    username?: pulumi.Input<string>;
}

export interface UserIdentityProviderUserIdentityProviderReference {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid: pulumi.Input<string>;
}

export interface UserProjectReferenceList {
    kind: pulumi.Input<string>;
    name: pulumi.Input<string>;
    uuid: pulumi.Input<string>;
}

export interface UserTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface VirtualMachineCategory {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface VirtualMachineDiskList {
    dataSourceReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    deviceProperties?: pulumi.Input<inputs.VirtualMachineDiskListDeviceProperties>;
    diskSizeBytes?: pulumi.Input<number>;
    diskSizeMib?: pulumi.Input<number>;
    storageConfig?: pulumi.Input<inputs.VirtualMachineDiskListStorageConfig>;
    uuid?: pulumi.Input<string>;
    volumeGroupReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface VirtualMachineDiskListDeviceProperties {
    deviceType?: pulumi.Input<string>;
    diskAddress?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface VirtualMachineDiskListStorageConfig {
    flashMode?: pulumi.Input<string>;
    storageContainerReferences?: pulumi.Input<pulumi.Input<inputs.VirtualMachineDiskListStorageConfigStorageContainerReference>[]>;
}

export interface VirtualMachineDiskListStorageConfigStorageContainerReference {
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface VirtualMachineGpuList {
    deviceId?: pulumi.Input<number>;
    fraction?: pulumi.Input<number>;
    frameBufferSizeMib?: pulumi.Input<number>;
    guestDriverVersion?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    numVirtualDisplayHeads?: pulumi.Input<number>;
    pciAddress?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    vendor?: pulumi.Input<string>;
}

export interface VirtualMachineNicList {
    ipEndpointLists?: pulumi.Input<pulumi.Input<inputs.VirtualMachineNicListIpEndpointList>[]>;
    isConnected?: pulumi.Input<string>;
    macAddress?: pulumi.Input<string>;
    model?: pulumi.Input<string>;
    networkFunctionChainReference?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    networkFunctionNicType?: pulumi.Input<string>;
    nicType?: pulumi.Input<string>;
    numQueues?: pulumi.Input<number>;
    subnetName?: pulumi.Input<string>;
    subnetUuid?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface VirtualMachineNicListIpEndpointList {
    ip?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface VirtualMachineNicListStatus {
    floatingIp: pulumi.Input<string>;
    ipEndpointLists: pulumi.Input<pulumi.Input<inputs.VirtualMachineNicListStatusIpEndpointList>[]>;
    isConnected: pulumi.Input<string>;
    macAddress: pulumi.Input<string>;
    model: pulumi.Input<string>;
    networkFunctionChainReference: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    networkFunctionNicType: pulumi.Input<string>;
    nicType: pulumi.Input<string>;
    numQueues: pulumi.Input<number>;
    subnetName: pulumi.Input<string>;
    subnetUuid: pulumi.Input<string>;
    uuid: pulumi.Input<string>;
}

export interface VirtualMachineNicListStatusIpEndpointList {
    ip: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualMachineSerialPortList {
    index?: pulumi.Input<number>;
    isConnected?: pulumi.Input<boolean>;
}

export interface VirtualMachineTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface VpcCommonDomainNameServerIpList {
    ip?: pulumi.Input<string>;
}

export interface VpcExternalSubnetListStatus {
    activeGatewayNodes: pulumi.Input<pulumi.Input<inputs.VpcExternalSubnetListStatusActiveGatewayNode>[]>;
    externalIpLists: pulumi.Input<pulumi.Input<string>[]>;
    externalSubnetReference: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface VpcExternalSubnetListStatusActiveGatewayNode {
    hostReference: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    ipAddress: pulumi.Input<string>;
}

export interface VpcExternallyRoutablePrefixList {
    ip: pulumi.Input<string>;
    prefixLength: pulumi.Input<number>;
}
