// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Vpc extends pulumi.CustomResource {
    /**
     * Get an existing Vpc resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpcState, opts?: pulumi.CustomResourceOptions): Vpc {
        return new Vpc(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/vpc:Vpc';

    /**
     * Returns true if the given object is an instance of Vpc.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vpc {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vpc.__pulumiType;
    }

    public readonly apiVersion!: pulumi.Output<string>;
    public readonly commonDomainNameServerIpLists!: pulumi.Output<outputs.VpcCommonDomainNameServerIpList[] | undefined>;
    public /*out*/ readonly externalSubnetListStatuses!: pulumi.Output<outputs.VpcExternalSubnetListStatus[]>;
    public readonly externalSubnetReferenceNames!: pulumi.Output<string[] | undefined>;
    public readonly externalSubnetReferenceUuids!: pulumi.Output<string[]>;
    public readonly externallyRoutablePrefixLists!: pulumi.Output<outputs.VpcExternallyRoutablePrefixList[] | undefined>;
    public /*out*/ readonly metadata!: pulumi.Output<{[key: string]: string}>;
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a Vpc resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VpcArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpcArgs | VpcState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpcState | undefined;
            resourceInputs["apiVersion"] = state ? state.apiVersion : undefined;
            resourceInputs["commonDomainNameServerIpLists"] = state ? state.commonDomainNameServerIpLists : undefined;
            resourceInputs["externalSubnetListStatuses"] = state ? state.externalSubnetListStatuses : undefined;
            resourceInputs["externalSubnetReferenceNames"] = state ? state.externalSubnetReferenceNames : undefined;
            resourceInputs["externalSubnetReferenceUuids"] = state ? state.externalSubnetReferenceUuids : undefined;
            resourceInputs["externallyRoutablePrefixLists"] = state ? state.externallyRoutablePrefixLists : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as VpcArgs | undefined;
            resourceInputs["apiVersion"] = args ? args.apiVersion : undefined;
            resourceInputs["commonDomainNameServerIpLists"] = args ? args.commonDomainNameServerIpLists : undefined;
            resourceInputs["externalSubnetReferenceNames"] = args ? args.externalSubnetReferenceNames : undefined;
            resourceInputs["externalSubnetReferenceUuids"] = args ? args.externalSubnetReferenceUuids : undefined;
            resourceInputs["externallyRoutablePrefixLists"] = args ? args.externallyRoutablePrefixLists : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["externalSubnetListStatuses"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vpc.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Vpc resources.
 */
export interface VpcState {
    apiVersion?: pulumi.Input<string>;
    commonDomainNameServerIpLists?: pulumi.Input<pulumi.Input<inputs.VpcCommonDomainNameServerIpList>[]>;
    externalSubnetListStatuses?: pulumi.Input<pulumi.Input<inputs.VpcExternalSubnetListStatus>[]>;
    externalSubnetReferenceNames?: pulumi.Input<pulumi.Input<string>[]>;
    externalSubnetReferenceUuids?: pulumi.Input<pulumi.Input<string>[]>;
    externallyRoutablePrefixLists?: pulumi.Input<pulumi.Input<inputs.VpcExternallyRoutablePrefixList>[]>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Vpc resource.
 */
export interface VpcArgs {
    apiVersion?: pulumi.Input<string>;
    commonDomainNameServerIpLists?: pulumi.Input<pulumi.Input<inputs.VpcCommonDomainNameServerIpList>[]>;
    externalSubnetReferenceNames?: pulumi.Input<pulumi.Input<string>[]>;
    externalSubnetReferenceUuids?: pulumi.Input<pulumi.Input<string>[]>;
    externallyRoutablePrefixLists?: pulumi.Input<pulumi.Input<inputs.VpcExternallyRoutablePrefixList>[]>;
    name?: pulumi.Input<string>;
}
