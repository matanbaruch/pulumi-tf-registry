// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getNdbCluster(args?: GetNdbClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetNdbClusterResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nutanix:index/getNdbCluster:getNdbCluster", {
        "clusterId": args.clusterId,
        "clusterName": args.clusterName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNdbCluster.
 */
export interface GetNdbClusterArgs {
    clusterId?: string;
    clusterName?: string;
}

/**
 * A collection of values returned by getNdbCluster.
 */
export interface GetNdbClusterResult {
    readonly cloudInfo: string;
    readonly cloudType: string;
    readonly clusterId?: string;
    readonly clusterName?: string;
    readonly dateCreated: string;
    readonly dateModified: string;
    readonly description: string;
    readonly entityCounts: outputs.GetNdbClusterEntityCount[];
    readonly fqdns: string;
    readonly healthy: boolean;
    readonly hypervisorType: string;
    readonly hypervisorVersion: string;
    readonly id: string;
    readonly ipAddresses: string[];
    readonly managementServerInfo: string;
    readonly name: string;
    readonly nxClusterUuid: string;
    readonly ownerId: string;
    readonly password: string;
    readonly properties: outputs.GetNdbClusterProperty[];
    readonly referenceCount: number;
    readonly resourceConfigs: outputs.GetNdbClusterResourceConfig[];
    readonly status: string;
    readonly uniqueName: string;
    readonly username: string;
    readonly version: string;
}
export function getNdbClusterOutput(args?: GetNdbClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNdbClusterResult> {
    return pulumi.output(args).apply((a: any) => getNdbCluster(a, opts))
}

/**
 * A collection of arguments for invoking getNdbCluster.
 */
export interface GetNdbClusterOutputArgs {
    clusterId?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
}
