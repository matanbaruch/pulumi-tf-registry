// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getKarbonClusterKubeconfig(args?: GetKarbonClusterKubeconfigArgs, opts?: pulumi.InvokeOptions): Promise<GetKarbonClusterKubeconfigResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nutanix:index/getKarbonClusterKubeconfig:getKarbonClusterKubeconfig", {
        "id": args.id,
        "karbonClusterId": args.karbonClusterId,
        "karbonClusterName": args.karbonClusterName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getKarbonClusterKubeconfig.
 */
export interface GetKarbonClusterKubeconfigArgs {
    id?: string;
    karbonClusterId?: string;
    karbonClusterName?: string;
}

/**
 * A collection of values returned by getKarbonClusterKubeconfig.
 */
export interface GetKarbonClusterKubeconfigResult {
    readonly accessToken: string;
    readonly clusterCaCertificate: string;
    readonly clusterUrl: string;
    readonly id: string;
    readonly karbonClusterId?: string;
    readonly karbonClusterName?: string;
    readonly name: string;
}
export function getKarbonClusterKubeconfigOutput(args?: GetKarbonClusterKubeconfigOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetKarbonClusterKubeconfigResult> {
    return pulumi.output(args).apply((a: any) => getKarbonClusterKubeconfig(a, opts))
}

/**
 * A collection of arguments for invoking getKarbonClusterKubeconfig.
 */
export interface GetKarbonClusterKubeconfigOutputArgs {
    id?: pulumi.Input<string>;
    karbonClusterId?: pulumi.Input<string>;
    karbonClusterName?: pulumi.Input<string>;
}
