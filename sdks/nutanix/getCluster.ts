// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCluster(args?: GetClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetClusterResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nutanix:index/getCluster:getCluster", {
        "categories": args.categories,
        "clusterId": args.clusterId,
        "id": args.id,
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCluster.
 */
export interface GetClusterArgs {
    categories?: inputs.GetClusterCategory[];
    clusterId?: string;
    id?: string;
    name?: string;
}

/**
 * A collection of values returned by getCluster.
 */
export interface GetClusterResult {
    readonly analysisVmEfficiencyMap: {[key: string]: string};
    readonly apiVersion: string;
    readonly authorizedPublicKeyLists: outputs.GetClusterAuthorizedPublicKeyList[];
    readonly build: {[key: string]: string};
    readonly caCertificateLists: outputs.GetClusterCaCertificateList[];
    readonly categories?: outputs.GetClusterCategory[];
    readonly certificationSigningInfo: {[key: string]: string};
    readonly clientAuth: {[key: string]: string};
    readonly clusterArch: string;
    readonly clusterId: string;
    readonly domainServerCredentials: {[key: string]: string};
    readonly domainServerName: string;
    readonly domainServerNameserver: string;
    readonly enabledFeatureLists: string[];
    readonly encryptionStatus: string;
    readonly externalDataServicesIp: string;
    readonly externalIp: string;
    readonly externalSubnet: string;
    readonly gpuDriverVersion: string;
    readonly httpProxyLists: outputs.GetClusterHttpProxyList[];
    readonly httpProxyWhitelists: outputs.GetClusterHttpProxyWhitelist[];
    readonly id: string;
    readonly internalSubnet: string;
    readonly isAvailable: boolean;
    readonly managementServerLists: outputs.GetClusterManagementServerList[];
    readonly masqueradingIp: string;
    readonly masqueradingPort: number;
    readonly metadata: {[key: string]: string};
    readonly name: string;
    readonly nameServerIpLists: string[];
    readonly nfsSubnetWhitelists: string[];
    readonly nodes: outputs.GetClusterNode[];
    readonly ntpServerIpLists: string[];
    readonly operationMode: string;
    readonly ownerReference: {[key: string]: string};
    readonly projectReference: {[key: string]: string};
    readonly serviceLists: string[];
    readonly smtpServerAddress: {[key: string]: string};
    readonly smtpServerCredentials: {[key: string]: string};
    readonly smtpServerEmailAddress: string;
    readonly smtpServerProxyTypeLists: string[];
    readonly smtpServerType: string;
    readonly softwareMapNcc: {[key: string]: string};
    readonly softwareMapNos: {[key: string]: string};
    readonly sslKeyExpireDatetime: string;
    readonly sslKeyName: string;
    readonly sslKeySigningInfo: {[key: string]: string};
    readonly sslKeyType: string;
    readonly state: string;
    readonly supportedInformationVerbosity: string;
    readonly timezone: string;
}
export function getClusterOutput(args?: GetClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetClusterResult> {
    return pulumi.output(args).apply((a: any) => getCluster(a, opts))
}

/**
 * A collection of arguments for invoking getCluster.
 */
export interface GetClusterOutputArgs {
    categories?: pulumi.Input<pulumi.Input<inputs.GetClusterCategoryArgs>[]>;
    clusterId?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}
