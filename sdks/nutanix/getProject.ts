// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getProject(args?: GetProjectArgs, opts?: pulumi.InvokeOptions): Promise<GetProjectResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nutanix:index/getProject:getProject", {
        "categories": args.categories,
        "externalUserGroupReferenceLists": args.externalUserGroupReferenceLists,
        "id": args.id,
        "projectId": args.projectId,
        "projectName": args.projectName,
        "subnetReferenceLists": args.subnetReferenceLists,
        "userReferenceLists": args.userReferenceLists,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getProject.
 */
export interface GetProjectArgs {
    categories?: inputs.GetProjectCategory[];
    externalUserGroupReferenceLists?: inputs.GetProjectExternalUserGroupReferenceList[];
    id?: string;
    projectId?: string;
    projectName?: string;
    subnetReferenceLists?: inputs.GetProjectSubnetReferenceList[];
    userReferenceLists?: inputs.GetProjectUserReferenceList[];
}

/**
 * A collection of values returned by getProject.
 */
export interface GetProjectResult {
    readonly accountReferenceLists: outputs.GetProjectAccountReferenceList[];
    readonly acps: outputs.GetProjectAcp[];
    readonly apiVersion: string;
    readonly categories?: outputs.GetProjectCategory[];
    readonly clusterReferenceLists: outputs.GetProjectClusterReferenceList[];
    readonly defaultEnvironmentReferences: outputs.GetProjectDefaultEnvironmentReference[];
    readonly defaultSubnetReference: {[key: string]: string};
    readonly description: string;
    readonly environmentReferenceLists: outputs.GetProjectEnvironmentReferenceList[];
    readonly externalNetworkLists: outputs.GetProjectExternalNetworkList[];
    readonly externalUserGroupReferenceLists?: outputs.GetProjectExternalUserGroupReferenceList[];
    readonly id: string;
    readonly isDefault: boolean;
    readonly metadata: {[key: string]: string};
    readonly name: string;
    readonly ownerReference: {[key: string]: string};
    readonly projectId?: string;
    readonly projectName?: string;
    readonly projectReference: {[key: string]: string};
    readonly resourceDomains: outputs.GetProjectResourceDomain[];
    readonly state: string;
    readonly subnetReferenceLists?: outputs.GetProjectSubnetReferenceList[];
    readonly tunnelReferenceLists: outputs.GetProjectTunnelReferenceList[];
    readonly userReferenceLists?: outputs.GetProjectUserReferenceList[];
    readonly vpcReferenceLists: outputs.GetProjectVpcReferenceList[];
}
export function getProjectOutput(args?: GetProjectOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetProjectResult> {
    return pulumi.output(args).apply((a: any) => getProject(a, opts))
}

/**
 * A collection of arguments for invoking getProject.
 */
export interface GetProjectOutputArgs {
    categories?: pulumi.Input<pulumi.Input<inputs.GetProjectCategoryArgs>[]>;
    externalUserGroupReferenceLists?: pulumi.Input<pulumi.Input<inputs.GetProjectExternalUserGroupReferenceListArgs>[]>;
    id?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    projectName?: pulumi.Input<string>;
    subnetReferenceLists?: pulumi.Input<pulumi.Input<inputs.GetProjectSubnetReferenceListArgs>[]>;
    userReferenceLists?: pulumi.Input<pulumi.Input<inputs.GetProjectUserReferenceListArgs>[]>;
}
