// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getSubnet(args?: GetSubnetArgs, opts?: pulumi.InvokeOptions): Promise<GetSubnetResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nutanix:index/getSubnet:getSubnet", {
        "additionalFilters": args.additionalFilters,
        "categories": args.categories,
        "id": args.id,
        "subnetId": args.subnetId,
        "subnetName": args.subnetName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSubnet.
 */
export interface GetSubnetArgs {
    additionalFilters?: inputs.GetSubnetAdditionalFilter[];
    categories?: inputs.GetSubnetCategory[];
    id?: string;
    subnetId?: string;
    subnetName?: string;
}

/**
 * A collection of values returned by getSubnet.
 */
export interface GetSubnetResult {
    readonly additionalFilters?: outputs.GetSubnetAdditionalFilter[];
    readonly apiVersion: string;
    readonly availabilityZoneReference: {[key: string]: string};
    readonly categories?: outputs.GetSubnetCategory[];
    readonly clusterName: string;
    readonly clusterUuid: string;
    readonly defaultGatewayIp: string;
    readonly description: string;
    readonly dhcpDomainNameServerLists: string[];
    readonly dhcpDomainSearchLists: string[];
    readonly dhcpOptions: {[key: string]: string};
    readonly dhcpServerAddress: {[key: string]: string};
    readonly dhcpServerAddressPort: number;
    readonly enableNat: boolean;
    readonly id: string;
    readonly ipConfigPoolListRanges: string[];
    readonly isExternal: boolean;
    readonly messageLists: outputs.GetSubnetMessageList[];
    readonly metadata: {[key: string]: string};
    readonly name: string;
    readonly networkFunctionChainReference: {[key: string]: string};
    readonly ownerReference: {[key: string]: string};
    readonly prefixLength: number;
    readonly projectReference: {[key: string]: string};
    readonly state: string;
    readonly subnetId?: string;
    readonly subnetIp: string;
    readonly subnetName?: string;
    readonly subnetType: string;
    readonly vlanId: number;
    readonly vpcReference: {[key: string]: string};
    readonly vswitchName: string;
}
export function getSubnetOutput(args?: GetSubnetOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSubnetResult> {
    return pulumi.output(args).apply((a: any) => getSubnet(a, opts))
}

/**
 * A collection of arguments for invoking getSubnet.
 */
export interface GetSubnetOutputArgs {
    additionalFilters?: pulumi.Input<pulumi.Input<inputs.GetSubnetAdditionalFilterArgs>[]>;
    categories?: pulumi.Input<pulumi.Input<inputs.GetSubnetCategoryArgs>[]>;
    id?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    subnetName?: pulumi.Input<string>;
}
