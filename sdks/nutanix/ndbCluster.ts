// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NdbCluster extends pulumi.CustomResource {
    /**
     * Get an existing NdbCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NdbClusterState, opts?: pulumi.CustomResourceOptions): NdbCluster {
        return new NdbCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nutanix:index/ndbCluster:NdbCluster';

    /**
     * Returns true if the given object is an instance of NdbCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NdbCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NdbCluster.__pulumiType;
    }

    public readonly agentNetworkInfos!: pulumi.Output<outputs.NdbClusterAgentNetworkInfo[]>;
    public readonly agentVmPrefix!: pulumi.Output<string | undefined>;
    public /*out*/ readonly cloudInfo!: pulumi.Output<string>;
    public /*out*/ readonly cloudType!: pulumi.Output<string>;
    public readonly clusterIp!: pulumi.Output<string>;
    public readonly clusterType!: pulumi.Output<string | undefined>;
    public /*out*/ readonly dateCreated!: pulumi.Output<string>;
    public /*out*/ readonly dateModified!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly entityCounts!: pulumi.Output<outputs.NdbClusterEntityCount[]>;
    public /*out*/ readonly fqdns!: pulumi.Output<string>;
    public /*out*/ readonly healthy!: pulumi.Output<boolean>;
    public /*out*/ readonly hypervisorType!: pulumi.Output<string>;
    public /*out*/ readonly hypervisorVersion!: pulumi.Output<string>;
    public /*out*/ readonly ipAddresses!: pulumi.Output<string[]>;
    public /*out*/ readonly managementServerInfo!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly networksInfos!: pulumi.Output<outputs.NdbClusterNetworksInfo[]>;
    public /*out*/ readonly nxClusterUuid!: pulumi.Output<string>;
    public /*out*/ readonly ownerId!: pulumi.Output<string>;
    public readonly password!: pulumi.Output<string>;
    public readonly port!: pulumi.Output<number | undefined>;
    public /*out*/ readonly properties!: pulumi.Output<outputs.NdbClusterProperty[]>;
    public readonly protocol!: pulumi.Output<string | undefined>;
    public /*out*/ readonly referenceCount!: pulumi.Output<number>;
    public /*out*/ readonly resourceConfigs!: pulumi.Output<outputs.NdbClusterResourceConfig[]>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly storageContainer!: pulumi.Output<string>;
    public /*out*/ readonly uniqueName!: pulumi.Output<string>;
    public readonly username!: pulumi.Output<string>;
    public readonly version!: pulumi.Output<string | undefined>;

    /**
     * Create a NdbCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NdbClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NdbClusterArgs | NdbClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NdbClusterState | undefined;
            resourceInputs["agentNetworkInfos"] = state ? state.agentNetworkInfos : undefined;
            resourceInputs["agentVmPrefix"] = state ? state.agentVmPrefix : undefined;
            resourceInputs["cloudInfo"] = state ? state.cloudInfo : undefined;
            resourceInputs["cloudType"] = state ? state.cloudType : undefined;
            resourceInputs["clusterIp"] = state ? state.clusterIp : undefined;
            resourceInputs["clusterType"] = state ? state.clusterType : undefined;
            resourceInputs["dateCreated"] = state ? state.dateCreated : undefined;
            resourceInputs["dateModified"] = state ? state.dateModified : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["entityCounts"] = state ? state.entityCounts : undefined;
            resourceInputs["fqdns"] = state ? state.fqdns : undefined;
            resourceInputs["healthy"] = state ? state.healthy : undefined;
            resourceInputs["hypervisorType"] = state ? state.hypervisorType : undefined;
            resourceInputs["hypervisorVersion"] = state ? state.hypervisorVersion : undefined;
            resourceInputs["ipAddresses"] = state ? state.ipAddresses : undefined;
            resourceInputs["managementServerInfo"] = state ? state.managementServerInfo : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networksInfos"] = state ? state.networksInfos : undefined;
            resourceInputs["nxClusterUuid"] = state ? state.nxClusterUuid : undefined;
            resourceInputs["ownerId"] = state ? state.ownerId : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["properties"] = state ? state.properties : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["referenceCount"] = state ? state.referenceCount : undefined;
            resourceInputs["resourceConfigs"] = state ? state.resourceConfigs : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["storageContainer"] = state ? state.storageContainer : undefined;
            resourceInputs["uniqueName"] = state ? state.uniqueName : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as NdbClusterArgs | undefined;
            if ((!args || args.agentNetworkInfos === undefined) && !opts.urn) {
                throw new Error("Missing required property 'agentNetworkInfos'");
            }
            if ((!args || args.clusterIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterIp'");
            }
            if ((!args || args.networksInfos === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networksInfos'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.storageContainer === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageContainer'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["agentNetworkInfos"] = args ? args.agentNetworkInfos : undefined;
            resourceInputs["agentVmPrefix"] = args ? args.agentVmPrefix : undefined;
            resourceInputs["clusterIp"] = args ? args.clusterIp : undefined;
            resourceInputs["clusterType"] = args ? args.clusterType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networksInfos"] = args ? args.networksInfos : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["storageContainer"] = args ? args.storageContainer : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["cloudInfo"] = undefined /*out*/;
            resourceInputs["cloudType"] = undefined /*out*/;
            resourceInputs["dateCreated"] = undefined /*out*/;
            resourceInputs["dateModified"] = undefined /*out*/;
            resourceInputs["entityCounts"] = undefined /*out*/;
            resourceInputs["fqdns"] = undefined /*out*/;
            resourceInputs["healthy"] = undefined /*out*/;
            resourceInputs["hypervisorType"] = undefined /*out*/;
            resourceInputs["hypervisorVersion"] = undefined /*out*/;
            resourceInputs["ipAddresses"] = undefined /*out*/;
            resourceInputs["managementServerInfo"] = undefined /*out*/;
            resourceInputs["nxClusterUuid"] = undefined /*out*/;
            resourceInputs["ownerId"] = undefined /*out*/;
            resourceInputs["properties"] = undefined /*out*/;
            resourceInputs["referenceCount"] = undefined /*out*/;
            resourceInputs["resourceConfigs"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["uniqueName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(NdbCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NdbCluster resources.
 */
export interface NdbClusterState {
    agentNetworkInfos?: pulumi.Input<pulumi.Input<inputs.NdbClusterAgentNetworkInfo>[]>;
    agentVmPrefix?: pulumi.Input<string>;
    cloudInfo?: pulumi.Input<string>;
    cloudType?: pulumi.Input<string>;
    clusterIp?: pulumi.Input<string>;
    clusterType?: pulumi.Input<string>;
    dateCreated?: pulumi.Input<string>;
    dateModified?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    entityCounts?: pulumi.Input<pulumi.Input<inputs.NdbClusterEntityCount>[]>;
    fqdns?: pulumi.Input<string>;
    healthy?: pulumi.Input<boolean>;
    hypervisorType?: pulumi.Input<string>;
    hypervisorVersion?: pulumi.Input<string>;
    ipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    managementServerInfo?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networksInfos?: pulumi.Input<pulumi.Input<inputs.NdbClusterNetworksInfo>[]>;
    nxClusterUuid?: pulumi.Input<string>;
    ownerId?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    properties?: pulumi.Input<pulumi.Input<inputs.NdbClusterProperty>[]>;
    protocol?: pulumi.Input<string>;
    referenceCount?: pulumi.Input<number>;
    resourceConfigs?: pulumi.Input<pulumi.Input<inputs.NdbClusterResourceConfig>[]>;
    status?: pulumi.Input<string>;
    storageContainer?: pulumi.Input<string>;
    uniqueName?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NdbCluster resource.
 */
export interface NdbClusterArgs {
    agentNetworkInfos: pulumi.Input<pulumi.Input<inputs.NdbClusterAgentNetworkInfo>[]>;
    agentVmPrefix?: pulumi.Input<string>;
    clusterIp: pulumi.Input<string>;
    clusterType?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networksInfos: pulumi.Input<pulumi.Input<inputs.NdbClusterNetworksInfo>[]>;
    password: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    storageContainer: pulumi.Input<string>;
    username: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}
