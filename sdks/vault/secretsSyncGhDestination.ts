// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SecretsSyncGhDestination extends pulumi.CustomResource {
    /**
     * Get an existing SecretsSyncGhDestination resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretsSyncGhDestinationState, opts?: pulumi.CustomResourceOptions): SecretsSyncGhDestination {
        return new SecretsSyncGhDestination(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:index/secretsSyncGhDestination:SecretsSyncGhDestination';

    /**
     * Returns true if the given object is an instance of SecretsSyncGhDestination.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretsSyncGhDestination {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretsSyncGhDestination.__pulumiType;
    }

    /**
     * Fine-grained or personal access token.
     */
    public readonly accessToken!: pulumi.Output<string | undefined>;
    /**
     * The user-defined name of the GitHub App configuration.
     */
    public readonly appName!: pulumi.Output<string | undefined>;
    /**
     * Determines what level of information is synced as a distinct resource at the destination. Can be 'secret-path' or
     * 'secret-key'
     */
    public readonly granularity!: pulumi.Output<string | undefined>;
    /**
     * The ID of the installation generated by GitHub when the app referenced by the app_name was installed in the user’s
     * GitHub account. Necessary if the app_name field is also provided.
     */
    public readonly installationId!: pulumi.Output<number | undefined>;
    /**
     * Unique name of the github destination.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * Name of the repository.
     */
    public readonly repositoryName!: pulumi.Output<string | undefined>;
    /**
     * GitHub organization or username that owns the repository.
     */
    public readonly repositoryOwner!: pulumi.Output<string | undefined>;
    /**
     * Template describing how to generate external secret names.
     */
    public readonly secretNameTemplate!: pulumi.Output<string>;
    /**
     * Type of secrets destination.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a SecretsSyncGhDestination resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SecretsSyncGhDestinationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretsSyncGhDestinationArgs | SecretsSyncGhDestinationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretsSyncGhDestinationState | undefined;
            resourceInputs["accessToken"] = state ? state.accessToken : undefined;
            resourceInputs["appName"] = state ? state.appName : undefined;
            resourceInputs["granularity"] = state ? state.granularity : undefined;
            resourceInputs["installationId"] = state ? state.installationId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["repositoryName"] = state ? state.repositoryName : undefined;
            resourceInputs["repositoryOwner"] = state ? state.repositoryOwner : undefined;
            resourceInputs["secretNameTemplate"] = state ? state.secretNameTemplate : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as SecretsSyncGhDestinationArgs | undefined;
            resourceInputs["accessToken"] = args?.accessToken ? pulumi.secret(args.accessToken) : undefined;
            resourceInputs["appName"] = args ? args.appName : undefined;
            resourceInputs["granularity"] = args ? args.granularity : undefined;
            resourceInputs["installationId"] = args ? args.installationId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["repositoryName"] = args ? args.repositoryName : undefined;
            resourceInputs["repositoryOwner"] = args ? args.repositoryOwner : undefined;
            resourceInputs["secretNameTemplate"] = args ? args.secretNameTemplate : undefined;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["accessToken"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SecretsSyncGhDestination.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SecretsSyncGhDestination resources.
 */
export interface SecretsSyncGhDestinationState {
    /**
     * Fine-grained or personal access token.
     */
    accessToken?: pulumi.Input<string>;
    /**
     * The user-defined name of the GitHub App configuration.
     */
    appName?: pulumi.Input<string>;
    /**
     * Determines what level of information is synced as a distinct resource at the destination. Can be 'secret-path' or
     * 'secret-key'
     */
    granularity?: pulumi.Input<string>;
    /**
     * The ID of the installation generated by GitHub when the app referenced by the app_name was installed in the user’s
     * GitHub account. Necessary if the app_name field is also provided.
     */
    installationId?: pulumi.Input<number>;
    /**
     * Unique name of the github destination.
     */
    name?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Name of the repository.
     */
    repositoryName?: pulumi.Input<string>;
    /**
     * GitHub organization or username that owns the repository.
     */
    repositoryOwner?: pulumi.Input<string>;
    /**
     * Template describing how to generate external secret names.
     */
    secretNameTemplate?: pulumi.Input<string>;
    /**
     * Type of secrets destination.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecretsSyncGhDestination resource.
 */
export interface SecretsSyncGhDestinationArgs {
    /**
     * Fine-grained or personal access token.
     */
    accessToken?: pulumi.Input<string>;
    /**
     * The user-defined name of the GitHub App configuration.
     */
    appName?: pulumi.Input<string>;
    /**
     * Determines what level of information is synced as a distinct resource at the destination. Can be 'secret-path' or
     * 'secret-key'
     */
    granularity?: pulumi.Input<string>;
    /**
     * The ID of the installation generated by GitHub when the app referenced by the app_name was installed in the user’s
     * GitHub account. Necessary if the app_name field is also provided.
     */
    installationId?: pulumi.Input<number>;
    /**
     * Unique name of the github destination.
     */
    name?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Name of the repository.
     */
    repositoryName?: pulumi.Input<string>;
    /**
     * GitHub organization or username that owns the repository.
     */
    repositoryOwner?: pulumi.Input<string>;
    /**
     * Template describing how to generate external secret names.
     */
    secretNameTemplate?: pulumi.Input<string>;
}
