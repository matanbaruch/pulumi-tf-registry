// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KvSecretV2 extends pulumi.CustomResource {
    /**
     * Get an existing KvSecretV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KvSecretV2State, opts?: pulumi.CustomResourceOptions): KvSecretV2 {
        return new KvSecretV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:index/kvSecretV2:KvSecretV2';

    /**
     * Returns true if the given object is an instance of KvSecretV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KvSecretV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KvSecretV2.__pulumiType;
    }

    /**
     * This flag is required if cas_required is set to true on either the secret or the engine's config. In order for a write
     * to be successful, cas must be set to the current version of the secret.
     */
    public readonly cas!: pulumi.Output<number | undefined>;
    /**
     * Custom metadata to be set for the secret.
     */
    public readonly customMetadata!: pulumi.Output<outputs.KvSecretV2CustomMetadata | undefined>;
    /**
     * Map of strings read from Vault.
     */
    public /*out*/ readonly data!: pulumi.Output<{[key: string]: string}>;
    /**
     * JSON-encoded secret data to write.
     */
    public readonly dataJson!: pulumi.Output<string>;
    /**
     * If set to true, permanently deletes all versions for the specified key.
     */
    public readonly deleteAllVersions!: pulumi.Output<boolean | undefined>;
    /**
     * If set to true, disables reading secret from Vault; note: drift won't be detected.
     */
    public readonly disableRead!: pulumi.Output<boolean | undefined>;
    /**
     * Metadata associated with this secret read from Vault.
     */
    public /*out*/ readonly metadata!: pulumi.Output<{[key: string]: string}>;
    /**
     * Path where KV-V2 engine is mounted.
     */
    public readonly mount!: pulumi.Output<string>;
    /**
     * Full name of the secret. For a nested secret, the name is the nested path excluding the mount and data prefix. For
     * example, for a secret at 'kvv2/data/foo/bar/baz', the name is 'foo/bar/baz'
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * An object that holds option settings.
     */
    public readonly options!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Full path where the KV-V2 secret will be written.
     */
    public /*out*/ readonly path!: pulumi.Output<string>;

    /**
     * Create a KvSecretV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KvSecretV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KvSecretV2Args | KvSecretV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KvSecretV2State | undefined;
            resourceInputs["cas"] = state ? state.cas : undefined;
            resourceInputs["customMetadata"] = state ? state.customMetadata : undefined;
            resourceInputs["data"] = state ? state.data : undefined;
            resourceInputs["dataJson"] = state ? state.dataJson : undefined;
            resourceInputs["deleteAllVersions"] = state ? state.deleteAllVersions : undefined;
            resourceInputs["disableRead"] = state ? state.disableRead : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["mount"] = state ? state.mount : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
        } else {
            const args = argsOrState as KvSecretV2Args | undefined;
            if ((!args || args.dataJson === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataJson'");
            }
            if ((!args || args.mount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mount'");
            }
            resourceInputs["cas"] = args ? args.cas : undefined;
            resourceInputs["customMetadata"] = args ? args.customMetadata : undefined;
            resourceInputs["dataJson"] = args?.dataJson ? pulumi.secret(args.dataJson) : undefined;
            resourceInputs["deleteAllVersions"] = args ? args.deleteAllVersions : undefined;
            resourceInputs["disableRead"] = args ? args.disableRead : undefined;
            resourceInputs["mount"] = args ? args.mount : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["data"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["path"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["data", "dataJson"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(KvSecretV2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KvSecretV2 resources.
 */
export interface KvSecretV2State {
    /**
     * This flag is required if cas_required is set to true on either the secret or the engine's config. In order for a write
     * to be successful, cas must be set to the current version of the secret.
     */
    cas?: pulumi.Input<number>;
    /**
     * Custom metadata to be set for the secret.
     */
    customMetadata?: pulumi.Input<inputs.KvSecretV2CustomMetadata>;
    /**
     * Map of strings read from Vault.
     */
    data?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * JSON-encoded secret data to write.
     */
    dataJson?: pulumi.Input<string>;
    /**
     * If set to true, permanently deletes all versions for the specified key.
     */
    deleteAllVersions?: pulumi.Input<boolean>;
    /**
     * If set to true, disables reading secret from Vault; note: drift won't be detected.
     */
    disableRead?: pulumi.Input<boolean>;
    /**
     * Metadata associated with this secret read from Vault.
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Path where KV-V2 engine is mounted.
     */
    mount?: pulumi.Input<string>;
    /**
     * Full name of the secret. For a nested secret, the name is the nested path excluding the mount and data prefix. For
     * example, for a secret at 'kvv2/data/foo/bar/baz', the name is 'foo/bar/baz'
     */
    name?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * An object that holds option settings.
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Full path where the KV-V2 secret will be written.
     */
    path?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KvSecretV2 resource.
 */
export interface KvSecretV2Args {
    /**
     * This flag is required if cas_required is set to true on either the secret or the engine's config. In order for a write
     * to be successful, cas must be set to the current version of the secret.
     */
    cas?: pulumi.Input<number>;
    /**
     * Custom metadata to be set for the secret.
     */
    customMetadata?: pulumi.Input<inputs.KvSecretV2CustomMetadata>;
    /**
     * JSON-encoded secret data to write.
     */
    dataJson: pulumi.Input<string>;
    /**
     * If set to true, permanently deletes all versions for the specified key.
     */
    deleteAllVersions?: pulumi.Input<boolean>;
    /**
     * If set to true, disables reading secret from Vault; note: drift won't be detected.
     */
    disableRead?: pulumi.Input<boolean>;
    /**
     * Path where KV-V2 engine is mounted.
     */
    mount: pulumi.Input<string>;
    /**
     * Full name of the secret. For a nested secret, the name is the nested path excluding the mount and data prefix. For
     * example, for a secret at 'kvv2/data/foo/bar/baz', the name is 'foo/bar/baz'
     */
    name?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * An object that holds option settings.
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
