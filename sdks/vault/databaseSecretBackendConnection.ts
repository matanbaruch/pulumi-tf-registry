// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatabaseSecretBackendConnection extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseSecretBackendConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseSecretBackendConnectionState, opts?: pulumi.CustomResourceOptions): DatabaseSecretBackendConnection {
        return new DatabaseSecretBackendConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:index/databaseSecretBackendConnection:DatabaseSecretBackendConnection';

    /**
     * Returns true if the given object is an instance of DatabaseSecretBackendConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseSecretBackendConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseSecretBackendConnection.__pulumiType;
    }

    /**
     * A list of roles that are allowed to use this connection.
     */
    public readonly allowedRoles!: pulumi.Output<string[] | undefined>;
    /**
     * Unique name of the Vault mount to configure.
     */
    public readonly backend!: pulumi.Output<string>;
    /**
     * Connection parameters for the cassandra-database-plugin plugin.
     */
    public readonly cassandra!: pulumi.Output<outputs.DatabaseSecretBackendConnectionCassandra | undefined>;
    /**
     * Connection parameters for the couchbase-database-plugin plugin.
     */
    public readonly couchbase!: pulumi.Output<outputs.DatabaseSecretBackendConnectionCouchbase | undefined>;
    /**
     * A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
     */
    public readonly data!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Connection parameters for the elasticsearch-database-plugin.
     */
    public readonly elasticsearch!: pulumi.Output<outputs.DatabaseSecretBackendConnectionElasticsearch | undefined>;
    /**
     * Connection parameters for the hana-database-plugin plugin.
     */
    public readonly hana!: pulumi.Output<outputs.DatabaseSecretBackendConnectionHana | undefined>;
    /**
     * Connection parameters for the influxdb-database-plugin plugin.
     */
    public readonly influxdb!: pulumi.Output<outputs.DatabaseSecretBackendConnectionInfluxdb | undefined>;
    /**
     * Connection parameters for the mongodb-database-plugin plugin.
     */
    public readonly mongodb!: pulumi.Output<outputs.DatabaseSecretBackendConnectionMongodb | undefined>;
    /**
     * Connection parameters for the mongodbatlas-database-plugin plugin.
     */
    public readonly mongodbatlas!: pulumi.Output<outputs.DatabaseSecretBackendConnectionMongodbatlas | undefined>;
    /**
     * Connection parameters for the mssql-database-plugin plugin.
     */
    public readonly mssql!: pulumi.Output<outputs.DatabaseSecretBackendConnectionMssql | undefined>;
    /**
     * Connection parameters for the mysql-database-plugin plugin.
     */
    public readonly mysql!: pulumi.Output<outputs.DatabaseSecretBackendConnectionMysql | undefined>;
    /**
     * Connection parameters for the mysql-aurora-database-plugin plugin.
     */
    public readonly mysqlAurora!: pulumi.Output<outputs.DatabaseSecretBackendConnectionMysqlAurora | undefined>;
    /**
     * Connection parameters for the mysql-legacy-database-plugin plugin.
     */
    public readonly mysqlLegacy!: pulumi.Output<outputs.DatabaseSecretBackendConnectionMysqlLegacy | undefined>;
    /**
     * Connection parameters for the mysql-rds-database-plugin plugin.
     */
    public readonly mysqlRds!: pulumi.Output<outputs.DatabaseSecretBackendConnectionMysqlRds | undefined>;
    /**
     * Name of the database connection.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * Connection parameters for the oracle-database-plugin plugin.
     */
    public readonly oracle!: pulumi.Output<outputs.DatabaseSecretBackendConnectionOracle | undefined>;
    /**
     * Specifies the name of the plugin to use for this connection. Must be prefixed with the name of one of the supported
     * database engine types.
     */
    public readonly pluginName!: pulumi.Output<string>;
    /**
     * Connection parameters for the postgresql-database-plugin plugin.
     */
    public readonly postgresql!: pulumi.Output<outputs.DatabaseSecretBackendConnectionPostgresql | undefined>;
    /**
     * Connection parameters for the redis-database-plugin plugin.
     */
    public readonly redis!: pulumi.Output<outputs.DatabaseSecretBackendConnectionRedis | undefined>;
    /**
     * Connection parameters for the redis-elasticache-database-plugin plugin.
     */
    public readonly redisElasticache!: pulumi.Output<outputs.DatabaseSecretBackendConnectionRedisElasticache | undefined>;
    /**
     * Connection parameters for the redshift-database-plugin plugin.
     */
    public readonly redshift!: pulumi.Output<outputs.DatabaseSecretBackendConnectionRedshift | undefined>;
    /**
     * A list of database statements to be executed to rotate the root user's credentials.
     */
    public readonly rootRotationStatements!: pulumi.Output<string[] | undefined>;
    /**
     * Connection parameters for the snowflake-database-plugin plugin.
     */
    public readonly snowflake!: pulumi.Output<outputs.DatabaseSecretBackendConnectionSnowflake | undefined>;
    /**
     * Specifies if the connection is verified during initial configuration.
     */
    public readonly verifyConnection!: pulumi.Output<boolean | undefined>;

    /**
     * Create a DatabaseSecretBackendConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseSecretBackendConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseSecretBackendConnectionArgs | DatabaseSecretBackendConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseSecretBackendConnectionState | undefined;
            resourceInputs["allowedRoles"] = state ? state.allowedRoles : undefined;
            resourceInputs["backend"] = state ? state.backend : undefined;
            resourceInputs["cassandra"] = state ? state.cassandra : undefined;
            resourceInputs["couchbase"] = state ? state.couchbase : undefined;
            resourceInputs["data"] = state ? state.data : undefined;
            resourceInputs["elasticsearch"] = state ? state.elasticsearch : undefined;
            resourceInputs["hana"] = state ? state.hana : undefined;
            resourceInputs["influxdb"] = state ? state.influxdb : undefined;
            resourceInputs["mongodb"] = state ? state.mongodb : undefined;
            resourceInputs["mongodbatlas"] = state ? state.mongodbatlas : undefined;
            resourceInputs["mssql"] = state ? state.mssql : undefined;
            resourceInputs["mysql"] = state ? state.mysql : undefined;
            resourceInputs["mysqlAurora"] = state ? state.mysqlAurora : undefined;
            resourceInputs["mysqlLegacy"] = state ? state.mysqlLegacy : undefined;
            resourceInputs["mysqlRds"] = state ? state.mysqlRds : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["oracle"] = state ? state.oracle : undefined;
            resourceInputs["pluginName"] = state ? state.pluginName : undefined;
            resourceInputs["postgresql"] = state ? state.postgresql : undefined;
            resourceInputs["redis"] = state ? state.redis : undefined;
            resourceInputs["redisElasticache"] = state ? state.redisElasticache : undefined;
            resourceInputs["redshift"] = state ? state.redshift : undefined;
            resourceInputs["rootRotationStatements"] = state ? state.rootRotationStatements : undefined;
            resourceInputs["snowflake"] = state ? state.snowflake : undefined;
            resourceInputs["verifyConnection"] = state ? state.verifyConnection : undefined;
        } else {
            const args = argsOrState as DatabaseSecretBackendConnectionArgs | undefined;
            if ((!args || args.backend === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backend'");
            }
            resourceInputs["allowedRoles"] = args ? args.allowedRoles : undefined;
            resourceInputs["backend"] = args ? args.backend : undefined;
            resourceInputs["cassandra"] = args ? args.cassandra : undefined;
            resourceInputs["couchbase"] = args ? args.couchbase : undefined;
            resourceInputs["data"] = args ? args.data : undefined;
            resourceInputs["elasticsearch"] = args ? args.elasticsearch : undefined;
            resourceInputs["hana"] = args ? args.hana : undefined;
            resourceInputs["influxdb"] = args ? args.influxdb : undefined;
            resourceInputs["mongodb"] = args ? args.mongodb : undefined;
            resourceInputs["mongodbatlas"] = args ? args.mongodbatlas : undefined;
            resourceInputs["mssql"] = args ? args.mssql : undefined;
            resourceInputs["mysql"] = args ? args.mysql : undefined;
            resourceInputs["mysqlAurora"] = args ? args.mysqlAurora : undefined;
            resourceInputs["mysqlLegacy"] = args ? args.mysqlLegacy : undefined;
            resourceInputs["mysqlRds"] = args ? args.mysqlRds : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["oracle"] = args ? args.oracle : undefined;
            resourceInputs["pluginName"] = args ? args.pluginName : undefined;
            resourceInputs["postgresql"] = args ? args.postgresql : undefined;
            resourceInputs["redis"] = args ? args.redis : undefined;
            resourceInputs["redisElasticache"] = args ? args.redisElasticache : undefined;
            resourceInputs["redshift"] = args ? args.redshift : undefined;
            resourceInputs["rootRotationStatements"] = args ? args.rootRotationStatements : undefined;
            resourceInputs["snowflake"] = args ? args.snowflake : undefined;
            resourceInputs["verifyConnection"] = args ? args.verifyConnection : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabaseSecretBackendConnection.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatabaseSecretBackendConnection resources.
 */
export interface DatabaseSecretBackendConnectionState {
    /**
     * A list of roles that are allowed to use this connection.
     */
    allowedRoles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unique name of the Vault mount to configure.
     */
    backend?: pulumi.Input<string>;
    /**
     * Connection parameters for the cassandra-database-plugin plugin.
     */
    cassandra?: pulumi.Input<inputs.DatabaseSecretBackendConnectionCassandra>;
    /**
     * Connection parameters for the couchbase-database-plugin plugin.
     */
    couchbase?: pulumi.Input<inputs.DatabaseSecretBackendConnectionCouchbase>;
    /**
     * A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
     */
    data?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Connection parameters for the elasticsearch-database-plugin.
     */
    elasticsearch?: pulumi.Input<inputs.DatabaseSecretBackendConnectionElasticsearch>;
    /**
     * Connection parameters for the hana-database-plugin plugin.
     */
    hana?: pulumi.Input<inputs.DatabaseSecretBackendConnectionHana>;
    /**
     * Connection parameters for the influxdb-database-plugin plugin.
     */
    influxdb?: pulumi.Input<inputs.DatabaseSecretBackendConnectionInfluxdb>;
    /**
     * Connection parameters for the mongodb-database-plugin plugin.
     */
    mongodb?: pulumi.Input<inputs.DatabaseSecretBackendConnectionMongodb>;
    /**
     * Connection parameters for the mongodbatlas-database-plugin plugin.
     */
    mongodbatlas?: pulumi.Input<inputs.DatabaseSecretBackendConnectionMongodbatlas>;
    /**
     * Connection parameters for the mssql-database-plugin plugin.
     */
    mssql?: pulumi.Input<inputs.DatabaseSecretBackendConnectionMssql>;
    /**
     * Connection parameters for the mysql-database-plugin plugin.
     */
    mysql?: pulumi.Input<inputs.DatabaseSecretBackendConnectionMysql>;
    /**
     * Connection parameters for the mysql-aurora-database-plugin plugin.
     */
    mysqlAurora?: pulumi.Input<inputs.DatabaseSecretBackendConnectionMysqlAurora>;
    /**
     * Connection parameters for the mysql-legacy-database-plugin plugin.
     */
    mysqlLegacy?: pulumi.Input<inputs.DatabaseSecretBackendConnectionMysqlLegacy>;
    /**
     * Connection parameters for the mysql-rds-database-plugin plugin.
     */
    mysqlRds?: pulumi.Input<inputs.DatabaseSecretBackendConnectionMysqlRds>;
    /**
     * Name of the database connection.
     */
    name?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Connection parameters for the oracle-database-plugin plugin.
     */
    oracle?: pulumi.Input<inputs.DatabaseSecretBackendConnectionOracle>;
    /**
     * Specifies the name of the plugin to use for this connection. Must be prefixed with the name of one of the supported
     * database engine types.
     */
    pluginName?: pulumi.Input<string>;
    /**
     * Connection parameters for the postgresql-database-plugin plugin.
     */
    postgresql?: pulumi.Input<inputs.DatabaseSecretBackendConnectionPostgresql>;
    /**
     * Connection parameters for the redis-database-plugin plugin.
     */
    redis?: pulumi.Input<inputs.DatabaseSecretBackendConnectionRedis>;
    /**
     * Connection parameters for the redis-elasticache-database-plugin plugin.
     */
    redisElasticache?: pulumi.Input<inputs.DatabaseSecretBackendConnectionRedisElasticache>;
    /**
     * Connection parameters for the redshift-database-plugin plugin.
     */
    redshift?: pulumi.Input<inputs.DatabaseSecretBackendConnectionRedshift>;
    /**
     * A list of database statements to be executed to rotate the root user's credentials.
     */
    rootRotationStatements?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Connection parameters for the snowflake-database-plugin plugin.
     */
    snowflake?: pulumi.Input<inputs.DatabaseSecretBackendConnectionSnowflake>;
    /**
     * Specifies if the connection is verified during initial configuration.
     */
    verifyConnection?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a DatabaseSecretBackendConnection resource.
 */
export interface DatabaseSecretBackendConnectionArgs {
    /**
     * A list of roles that are allowed to use this connection.
     */
    allowedRoles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unique name of the Vault mount to configure.
     */
    backend: pulumi.Input<string>;
    /**
     * Connection parameters for the cassandra-database-plugin plugin.
     */
    cassandra?: pulumi.Input<inputs.DatabaseSecretBackendConnectionCassandra>;
    /**
     * Connection parameters for the couchbase-database-plugin plugin.
     */
    couchbase?: pulumi.Input<inputs.DatabaseSecretBackendConnectionCouchbase>;
    /**
     * A map of sensitive data to pass to the endpoint. Useful for templated connection strings.
     */
    data?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Connection parameters for the elasticsearch-database-plugin.
     */
    elasticsearch?: pulumi.Input<inputs.DatabaseSecretBackendConnectionElasticsearch>;
    /**
     * Connection parameters for the hana-database-plugin plugin.
     */
    hana?: pulumi.Input<inputs.DatabaseSecretBackendConnectionHana>;
    /**
     * Connection parameters for the influxdb-database-plugin plugin.
     */
    influxdb?: pulumi.Input<inputs.DatabaseSecretBackendConnectionInfluxdb>;
    /**
     * Connection parameters for the mongodb-database-plugin plugin.
     */
    mongodb?: pulumi.Input<inputs.DatabaseSecretBackendConnectionMongodb>;
    /**
     * Connection parameters for the mongodbatlas-database-plugin plugin.
     */
    mongodbatlas?: pulumi.Input<inputs.DatabaseSecretBackendConnectionMongodbatlas>;
    /**
     * Connection parameters for the mssql-database-plugin plugin.
     */
    mssql?: pulumi.Input<inputs.DatabaseSecretBackendConnectionMssql>;
    /**
     * Connection parameters for the mysql-database-plugin plugin.
     */
    mysql?: pulumi.Input<inputs.DatabaseSecretBackendConnectionMysql>;
    /**
     * Connection parameters for the mysql-aurora-database-plugin plugin.
     */
    mysqlAurora?: pulumi.Input<inputs.DatabaseSecretBackendConnectionMysqlAurora>;
    /**
     * Connection parameters for the mysql-legacy-database-plugin plugin.
     */
    mysqlLegacy?: pulumi.Input<inputs.DatabaseSecretBackendConnectionMysqlLegacy>;
    /**
     * Connection parameters for the mysql-rds-database-plugin plugin.
     */
    mysqlRds?: pulumi.Input<inputs.DatabaseSecretBackendConnectionMysqlRds>;
    /**
     * Name of the database connection.
     */
    name?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Connection parameters for the oracle-database-plugin plugin.
     */
    oracle?: pulumi.Input<inputs.DatabaseSecretBackendConnectionOracle>;
    /**
     * Specifies the name of the plugin to use for this connection. Must be prefixed with the name of one of the supported
     * database engine types.
     */
    pluginName?: pulumi.Input<string>;
    /**
     * Connection parameters for the postgresql-database-plugin plugin.
     */
    postgresql?: pulumi.Input<inputs.DatabaseSecretBackendConnectionPostgresql>;
    /**
     * Connection parameters for the redis-database-plugin plugin.
     */
    redis?: pulumi.Input<inputs.DatabaseSecretBackendConnectionRedis>;
    /**
     * Connection parameters for the redis-elasticache-database-plugin plugin.
     */
    redisElasticache?: pulumi.Input<inputs.DatabaseSecretBackendConnectionRedisElasticache>;
    /**
     * Connection parameters for the redshift-database-plugin plugin.
     */
    redshift?: pulumi.Input<inputs.DatabaseSecretBackendConnectionRedshift>;
    /**
     * A list of database statements to be executed to rotate the root user's credentials.
     */
    rootRotationStatements?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Connection parameters for the snowflake-database-plugin plugin.
     */
    snowflake?: pulumi.Input<inputs.DatabaseSecretBackendConnectionSnowflake>;
    /**
     * Specifies if the connection is verified during initial configuration.
     */
    verifyConnection?: pulumi.Input<boolean>;
}
