// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class KmipSecretBackend extends pulumi.CustomResource {
    /**
     * Get an existing KmipSecretBackend resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KmipSecretBackendState, opts?: pulumi.CustomResourceOptions): KmipSecretBackend {
        return new KmipSecretBackend(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:index/kmipSecretBackend:KmipSecretBackend';

    /**
     * Returns true if the given object is an instance of KmipSecretBackend.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KmipSecretBackend {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KmipSecretBackend.__pulumiType;
    }

    /**
     * Client certificate key bits, valid values depend on key type
     */
    public readonly defaultTlsClientKeyBits!: pulumi.Output<number>;
    /**
     * Client certificate key type, rsa or ec
     */
    public readonly defaultTlsClientKeyType!: pulumi.Output<string>;
    /**
     * Client certificate TTL in seconds
     */
    public readonly defaultTlsClientTtl!: pulumi.Output<number>;
    /**
     * Human-friendly description of the mount for the backend
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * If set, opts out of mount migration on path updates.
     */
    public readonly disableRemount!: pulumi.Output<boolean | undefined>;
    /**
     * Addresses the KMIP server should listen on (host:port)
     */
    public readonly listenAddrs!: pulumi.Output<string[]>;
    /**
     * Target namespace. (requires Enterprise)
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * Path where KMIP secret backend will be mounted
     */
    public readonly path!: pulumi.Output<string>;
    /**
     * Hostnames to include in the server's TLS certificate as SAN DNS names. The first will be used as the common name (CN)
     */
    public readonly serverHostnames!: pulumi.Output<string[]>;
    /**
     * IPs to include in the server's TLS certificate as SAN IP addresses
     */
    public readonly serverIps!: pulumi.Output<string[]>;
    /**
     * CA key bits, valid values depend on key type
     */
    public readonly tlsCaKeyBits!: pulumi.Output<number>;
    /**
     * CA key type, rsa or ec
     */
    public readonly tlsCaKeyType!: pulumi.Output<string>;
    /**
     * Minimum TLS version to accept
     */
    public readonly tlsMinVersion!: pulumi.Output<string>;

    /**
     * Create a KmipSecretBackend resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KmipSecretBackendArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KmipSecretBackendArgs | KmipSecretBackendState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KmipSecretBackendState | undefined;
            resourceInputs["defaultTlsClientKeyBits"] = state ? state.defaultTlsClientKeyBits : undefined;
            resourceInputs["defaultTlsClientKeyType"] = state ? state.defaultTlsClientKeyType : undefined;
            resourceInputs["defaultTlsClientTtl"] = state ? state.defaultTlsClientTtl : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disableRemount"] = state ? state.disableRemount : undefined;
            resourceInputs["listenAddrs"] = state ? state.listenAddrs : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["serverHostnames"] = state ? state.serverHostnames : undefined;
            resourceInputs["serverIps"] = state ? state.serverIps : undefined;
            resourceInputs["tlsCaKeyBits"] = state ? state.tlsCaKeyBits : undefined;
            resourceInputs["tlsCaKeyType"] = state ? state.tlsCaKeyType : undefined;
            resourceInputs["tlsMinVersion"] = state ? state.tlsMinVersion : undefined;
        } else {
            const args = argsOrState as KmipSecretBackendArgs | undefined;
            if ((!args || args.path === undefined) && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            resourceInputs["defaultTlsClientKeyBits"] = args ? args.defaultTlsClientKeyBits : undefined;
            resourceInputs["defaultTlsClientKeyType"] = args ? args.defaultTlsClientKeyType : undefined;
            resourceInputs["defaultTlsClientTtl"] = args ? args.defaultTlsClientTtl : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disableRemount"] = args ? args.disableRemount : undefined;
            resourceInputs["listenAddrs"] = args ? args.listenAddrs : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["serverHostnames"] = args ? args.serverHostnames : undefined;
            resourceInputs["serverIps"] = args ? args.serverIps : undefined;
            resourceInputs["tlsCaKeyBits"] = args ? args.tlsCaKeyBits : undefined;
            resourceInputs["tlsCaKeyType"] = args ? args.tlsCaKeyType : undefined;
            resourceInputs["tlsMinVersion"] = args ? args.tlsMinVersion : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KmipSecretBackend.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KmipSecretBackend resources.
 */
export interface KmipSecretBackendState {
    /**
     * Client certificate key bits, valid values depend on key type
     */
    defaultTlsClientKeyBits?: pulumi.Input<number>;
    /**
     * Client certificate key type, rsa or ec
     */
    defaultTlsClientKeyType?: pulumi.Input<string>;
    /**
     * Client certificate TTL in seconds
     */
    defaultTlsClientTtl?: pulumi.Input<number>;
    /**
     * Human-friendly description of the mount for the backend
     */
    description?: pulumi.Input<string>;
    /**
     * If set, opts out of mount migration on path updates.
     */
    disableRemount?: pulumi.Input<boolean>;
    /**
     * Addresses the KMIP server should listen on (host:port)
     */
    listenAddrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Path where KMIP secret backend will be mounted
     */
    path?: pulumi.Input<string>;
    /**
     * Hostnames to include in the server's TLS certificate as SAN DNS names. The first will be used as the common name (CN)
     */
    serverHostnames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * IPs to include in the server's TLS certificate as SAN IP addresses
     */
    serverIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * CA key bits, valid values depend on key type
     */
    tlsCaKeyBits?: pulumi.Input<number>;
    /**
     * CA key type, rsa or ec
     */
    tlsCaKeyType?: pulumi.Input<string>;
    /**
     * Minimum TLS version to accept
     */
    tlsMinVersion?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KmipSecretBackend resource.
 */
export interface KmipSecretBackendArgs {
    /**
     * Client certificate key bits, valid values depend on key type
     */
    defaultTlsClientKeyBits?: pulumi.Input<number>;
    /**
     * Client certificate key type, rsa or ec
     */
    defaultTlsClientKeyType?: pulumi.Input<string>;
    /**
     * Client certificate TTL in seconds
     */
    defaultTlsClientTtl?: pulumi.Input<number>;
    /**
     * Human-friendly description of the mount for the backend
     */
    description?: pulumi.Input<string>;
    /**
     * If set, opts out of mount migration on path updates.
     */
    disableRemount?: pulumi.Input<boolean>;
    /**
     * Addresses the KMIP server should listen on (host:port)
     */
    listenAddrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Path where KMIP secret backend will be mounted
     */
    path: pulumi.Input<string>;
    /**
     * Hostnames to include in the server's TLS certificate as SAN DNS names. The first will be used as the common name (CN)
     */
    serverHostnames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * IPs to include in the server's TLS certificate as SAN IP addresses
     */
    serverIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * CA key bits, valid values depend on key type
     */
    tlsCaKeyBits?: pulumi.Input<number>;
    /**
     * CA key type, rsa or ec
     */
    tlsCaKeyType?: pulumi.Input<string>;
    /**
     * Minimum TLS version to accept
     */
    tlsMinVersion?: pulumi.Input<string>;
}
