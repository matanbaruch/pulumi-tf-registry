// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getIdentityGroup(args?: GetIdentityGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetIdentityGroupResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vault:index/getIdentityGroup:getIdentityGroup", {
        "aliasId": args.aliasId,
        "aliasMountAccessor": args.aliasMountAccessor,
        "aliasName": args.aliasName,
        "groupId": args.groupId,
        "groupName": args.groupName,
        "id": args.id,
        "namespace": args.namespace,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIdentityGroup.
 */
export interface GetIdentityGroupArgs {
    aliasId?: string;
    aliasMountAccessor?: string;
    aliasName?: string;
    groupId?: string;
    groupName?: string;
    id?: string;
    namespace?: string;
}

/**
 * A collection of values returned by getIdentityGroup.
 */
export interface GetIdentityGroupResult {
    readonly aliasCanonicalId: string;
    readonly aliasCreationTime: string;
    readonly aliasId: string;
    readonly aliasLastUpdateTime: string;
    readonly aliasMergedFromCanonicalIds: string[];
    readonly aliasMetadata: {[key: string]: string};
    readonly aliasMountAccessor: string;
    readonly aliasMountPath: string;
    readonly aliasMountType: string;
    readonly aliasName: string;
    readonly creationTime: string;
    readonly dataJson: string;
    readonly groupId: string;
    readonly groupName: string;
    readonly id: string;
    readonly lastUpdateTime: string;
    readonly memberEntityIds: string[];
    readonly memberGroupIds: string[];
    readonly metadata: {[key: string]: string};
    readonly modifyIndex: number;
    readonly namespace?: string;
    readonly namespaceId: string;
    readonly parentGroupIds: string[];
    readonly policies: string[];
    readonly type: string;
}
export function getIdentityGroupOutput(args?: GetIdentityGroupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIdentityGroupResult> {
    return pulumi.output(args).apply((a: any) => getIdentityGroup(a, opts))
}

/**
 * A collection of arguments for invoking getIdentityGroup.
 */
export interface GetIdentityGroupOutputArgs {
    aliasId?: pulumi.Input<string>;
    aliasMountAccessor?: pulumi.Input<string>;
    aliasName?: pulumi.Input<string>;
    groupId?: pulumi.Input<string>;
    groupName?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
}
