// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatabaseSecretsMount extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseSecretsMount resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseSecretsMountState, opts?: pulumi.CustomResourceOptions): DatabaseSecretsMount {
        return new DatabaseSecretsMount(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:index/databaseSecretsMount:DatabaseSecretsMount';

    /**
     * Returns true if the given object is an instance of DatabaseSecretsMount.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseSecretsMount {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseSecretsMount.__pulumiType;
    }

    /**
     * Accessor of the mount
     */
    public /*out*/ readonly accessor!: pulumi.Output<string>;
    /**
     * List of managed key registry entry names that the mount in question is allowed to access
     */
    public readonly allowedManagedKeys!: pulumi.Output<string[] | undefined>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    public readonly allowedResponseHeaders!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
     */
    public readonly auditNonHmacRequestKeys!: pulumi.Output<string[]>;
    /**
     * Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
     */
    public readonly auditNonHmacResponseKeys!: pulumi.Output<string[]>;
    /**
     * Connection parameters for the cassandra-database-plugin plugin.
     */
    public readonly cassandras!: pulumi.Output<outputs.DatabaseSecretsMountCassandra[] | undefined>;
    /**
     * Connection parameters for the couchbase-database-plugin plugin.
     */
    public readonly couchbases!: pulumi.Output<outputs.DatabaseSecretsMountCouchbase[] | undefined>;
    /**
     * Default lease duration for tokens and secrets in seconds
     */
    public readonly defaultLeaseTtlSeconds!: pulumi.Output<number>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    public readonly delegatedAuthAccessors!: pulumi.Output<string[] | undefined>;
    /**
     * Human-friendly description of the mount
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Connection parameters for the elasticsearch-database-plugin.
     */
    public readonly elasticsearches!: pulumi.Output<outputs.DatabaseSecretsMountElasticsearch[] | undefined>;
    /**
     * Total number of database secret engines configured under the mount.
     */
    public /*out*/ readonly engineCount!: pulumi.Output<number>;
    /**
     * Enable the secrets engine to access Vault's external entropy source
     */
    public readonly externalEntropyAccess!: pulumi.Output<boolean | undefined>;
    /**
     * Connection parameters for the hana-database-plugin plugin.
     */
    public readonly hanas!: pulumi.Output<outputs.DatabaseSecretsMountHana[] | undefined>;
    /**
     * The key to use for signing plugin workload identity tokens
     */
    public readonly identityTokenKey!: pulumi.Output<string | undefined>;
    /**
     * Connection parameters for the influxdb-database-plugin plugin.
     */
    public readonly influxdbs!: pulumi.Output<outputs.DatabaseSecretsMountInfluxdb[] | undefined>;
    /**
     * Specifies whether to show this mount in the UI-specific listing endpoint
     */
    public readonly listingVisibility!: pulumi.Output<string | undefined>;
    /**
     * Local mount flag that can be explicitly set to true to enforce local mount in HA environment
     */
    public readonly local!: pulumi.Output<boolean | undefined>;
    /**
     * Maximum possible lease duration for tokens and secrets in seconds
     */
    public readonly maxLeaseTtlSeconds!: pulumi.Output<number>;
    /**
     * Connection parameters for the mongodbatlas-database-plugin plugin.
     */
    public readonly mongodbatlas!: pulumi.Output<outputs.DatabaseSecretsMountMongodbatla[] | undefined>;
    /**
     * Connection parameters for the mongodb-database-plugin plugin.
     */
    public readonly mongodbs!: pulumi.Output<outputs.DatabaseSecretsMountMongodb[] | undefined>;
    /**
     * Connection parameters for the mssql-database-plugin plugin.
     */
    public readonly mssqls!: pulumi.Output<outputs.DatabaseSecretsMountMssql[] | undefined>;
    /**
     * Connection parameters for the mysql-aurora-database-plugin plugin.
     */
    public readonly mysqlAuroras!: pulumi.Output<outputs.DatabaseSecretsMountMysqlAurora[] | undefined>;
    /**
     * Connection parameters for the mysql-legacy-database-plugin plugin.
     */
    public readonly mysqlLegacies!: pulumi.Output<outputs.DatabaseSecretsMountMysqlLegacy[] | undefined>;
    /**
     * Connection parameters for the mysql-rds-database-plugin plugin.
     */
    public readonly mysqlRds!: pulumi.Output<outputs.DatabaseSecretsMountMysqlRd[] | undefined>;
    /**
     * Connection parameters for the mysql-database-plugin plugin.
     */
    public readonly mysqls!: pulumi.Output<outputs.DatabaseSecretsMountMysql[] | undefined>;
    /**
     * Target namespace. (requires Enterprise)
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * Specifies mount type specific options that are passed to the backend
     */
    public readonly options!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Connection parameters for the oracle-database-plugin plugin.
     */
    public readonly oracles!: pulumi.Output<outputs.DatabaseSecretsMountOracle[] | undefined>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    public readonly passthroughRequestHeaders!: pulumi.Output<string[] | undefined>;
    /**
     * Where the secret backend will be mounted
     */
    public readonly path!: pulumi.Output<string>;
    /**
     * Specifies the semantic version of the plugin to use, e.g. 'v1.0.0'
     */
    public readonly pluginVersion!: pulumi.Output<string | undefined>;
    /**
     * Connection parameters for the postgresql-database-plugin plugin.
     */
    public readonly postgresqls!: pulumi.Output<outputs.DatabaseSecretsMountPostgresql[] | undefined>;
    /**
     * Connection parameters for the redis-database-plugin plugin.
     */
    public readonly redis!: pulumi.Output<outputs.DatabaseSecretsMountRedi[] | undefined>;
    /**
     * Connection parameters for the redis-elasticache-database-plugin plugin.
     */
    public readonly redisElasticaches!: pulumi.Output<outputs.DatabaseSecretsMountRedisElasticach[] | undefined>;
    /**
     * Connection parameters for the redshift-database-plugin plugin.
     */
    public readonly redshifts!: pulumi.Output<outputs.DatabaseSecretsMountRedshift[] | undefined>;
    /**
     * Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
     */
    public readonly sealWrap!: pulumi.Output<boolean>;
    /**
     * Connection parameters for the snowflake-database-plugin plugin.
     */
    public readonly snowflakes!: pulumi.Output<outputs.DatabaseSecretsMountSnowflake[] | undefined>;

    /**
     * Create a DatabaseSecretsMount resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseSecretsMountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseSecretsMountArgs | DatabaseSecretsMountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseSecretsMountState | undefined;
            resourceInputs["accessor"] = state ? state.accessor : undefined;
            resourceInputs["allowedManagedKeys"] = state ? state.allowedManagedKeys : undefined;
            resourceInputs["allowedResponseHeaders"] = state ? state.allowedResponseHeaders : undefined;
            resourceInputs["auditNonHmacRequestKeys"] = state ? state.auditNonHmacRequestKeys : undefined;
            resourceInputs["auditNonHmacResponseKeys"] = state ? state.auditNonHmacResponseKeys : undefined;
            resourceInputs["cassandras"] = state ? state.cassandras : undefined;
            resourceInputs["couchbases"] = state ? state.couchbases : undefined;
            resourceInputs["defaultLeaseTtlSeconds"] = state ? state.defaultLeaseTtlSeconds : undefined;
            resourceInputs["delegatedAuthAccessors"] = state ? state.delegatedAuthAccessors : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["elasticsearches"] = state ? state.elasticsearches : undefined;
            resourceInputs["engineCount"] = state ? state.engineCount : undefined;
            resourceInputs["externalEntropyAccess"] = state ? state.externalEntropyAccess : undefined;
            resourceInputs["hanas"] = state ? state.hanas : undefined;
            resourceInputs["identityTokenKey"] = state ? state.identityTokenKey : undefined;
            resourceInputs["influxdbs"] = state ? state.influxdbs : undefined;
            resourceInputs["listingVisibility"] = state ? state.listingVisibility : undefined;
            resourceInputs["local"] = state ? state.local : undefined;
            resourceInputs["maxLeaseTtlSeconds"] = state ? state.maxLeaseTtlSeconds : undefined;
            resourceInputs["mongodbatlas"] = state ? state.mongodbatlas : undefined;
            resourceInputs["mongodbs"] = state ? state.mongodbs : undefined;
            resourceInputs["mssqls"] = state ? state.mssqls : undefined;
            resourceInputs["mysqlAuroras"] = state ? state.mysqlAuroras : undefined;
            resourceInputs["mysqlLegacies"] = state ? state.mysqlLegacies : undefined;
            resourceInputs["mysqlRds"] = state ? state.mysqlRds : undefined;
            resourceInputs["mysqls"] = state ? state.mysqls : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["oracles"] = state ? state.oracles : undefined;
            resourceInputs["passthroughRequestHeaders"] = state ? state.passthroughRequestHeaders : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["pluginVersion"] = state ? state.pluginVersion : undefined;
            resourceInputs["postgresqls"] = state ? state.postgresqls : undefined;
            resourceInputs["redis"] = state ? state.redis : undefined;
            resourceInputs["redisElasticaches"] = state ? state.redisElasticaches : undefined;
            resourceInputs["redshifts"] = state ? state.redshifts : undefined;
            resourceInputs["sealWrap"] = state ? state.sealWrap : undefined;
            resourceInputs["snowflakes"] = state ? state.snowflakes : undefined;
        } else {
            const args = argsOrState as DatabaseSecretsMountArgs | undefined;
            if ((!args || args.path === undefined) && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            resourceInputs["allowedManagedKeys"] = args ? args.allowedManagedKeys : undefined;
            resourceInputs["allowedResponseHeaders"] = args ? args.allowedResponseHeaders : undefined;
            resourceInputs["auditNonHmacRequestKeys"] = args ? args.auditNonHmacRequestKeys : undefined;
            resourceInputs["auditNonHmacResponseKeys"] = args ? args.auditNonHmacResponseKeys : undefined;
            resourceInputs["cassandras"] = args ? args.cassandras : undefined;
            resourceInputs["couchbases"] = args ? args.couchbases : undefined;
            resourceInputs["defaultLeaseTtlSeconds"] = args ? args.defaultLeaseTtlSeconds : undefined;
            resourceInputs["delegatedAuthAccessors"] = args ? args.delegatedAuthAccessors : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["elasticsearches"] = args ? args.elasticsearches : undefined;
            resourceInputs["externalEntropyAccess"] = args ? args.externalEntropyAccess : undefined;
            resourceInputs["hanas"] = args ? args.hanas : undefined;
            resourceInputs["identityTokenKey"] = args ? args.identityTokenKey : undefined;
            resourceInputs["influxdbs"] = args ? args.influxdbs : undefined;
            resourceInputs["listingVisibility"] = args ? args.listingVisibility : undefined;
            resourceInputs["local"] = args ? args.local : undefined;
            resourceInputs["maxLeaseTtlSeconds"] = args ? args.maxLeaseTtlSeconds : undefined;
            resourceInputs["mongodbatlas"] = args ? args.mongodbatlas : undefined;
            resourceInputs["mongodbs"] = args ? args.mongodbs : undefined;
            resourceInputs["mssqls"] = args ? args.mssqls : undefined;
            resourceInputs["mysqlAuroras"] = args ? args.mysqlAuroras : undefined;
            resourceInputs["mysqlLegacies"] = args ? args.mysqlLegacies : undefined;
            resourceInputs["mysqlRds"] = args ? args.mysqlRds : undefined;
            resourceInputs["mysqls"] = args ? args.mysqls : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["oracles"] = args ? args.oracles : undefined;
            resourceInputs["passthroughRequestHeaders"] = args ? args.passthroughRequestHeaders : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["pluginVersion"] = args ? args.pluginVersion : undefined;
            resourceInputs["postgresqls"] = args ? args.postgresqls : undefined;
            resourceInputs["redis"] = args ? args.redis : undefined;
            resourceInputs["redisElasticaches"] = args ? args.redisElasticaches : undefined;
            resourceInputs["redshifts"] = args ? args.redshifts : undefined;
            resourceInputs["sealWrap"] = args ? args.sealWrap : undefined;
            resourceInputs["snowflakes"] = args ? args.snowflakes : undefined;
            resourceInputs["accessor"] = undefined /*out*/;
            resourceInputs["engineCount"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabaseSecretsMount.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatabaseSecretsMount resources.
 */
export interface DatabaseSecretsMountState {
    /**
     * Accessor of the mount
     */
    accessor?: pulumi.Input<string>;
    /**
     * List of managed key registry entry names that the mount in question is allowed to access
     */
    allowedManagedKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    allowedResponseHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
     */
    auditNonHmacRequestKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
     */
    auditNonHmacResponseKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Connection parameters for the cassandra-database-plugin plugin.
     */
    cassandras?: pulumi.Input<pulumi.Input<inputs.DatabaseSecretsMountCassandra>[]>;
    /**
     * Connection parameters for the couchbase-database-plugin plugin.
     */
    couchbases?: pulumi.Input<pulumi.Input<inputs.DatabaseSecretsMountCouchbase>[]>;
    /**
     * Default lease duration for tokens and secrets in seconds
     */
    defaultLeaseTtlSeconds?: pulumi.Input<number>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    delegatedAuthAccessors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Human-friendly description of the mount
     */
    description?: pulumi.Input<string>;
    /**
     * Connection parameters for the elasticsearch-database-plugin.
     */
    elasticsearches?: pulumi.Input<pulumi.Input<inputs.DatabaseSecretsMountElasticsearch>[]>;
    /**
     * Total number of database secret engines configured under the mount.
     */
    engineCount?: pulumi.Input<number>;
    /**
     * Enable the secrets engine to access Vault's external entropy source
     */
    externalEntropyAccess?: pulumi.Input<boolean>;
    /**
     * Connection parameters for the hana-database-plugin plugin.
     */
    hanas?: pulumi.Input<pulumi.Input<inputs.DatabaseSecretsMountHana>[]>;
    /**
     * The key to use for signing plugin workload identity tokens
     */
    identityTokenKey?: pulumi.Input<string>;
    /**
     * Connection parameters for the influxdb-database-plugin plugin.
     */
    influxdbs?: pulumi.Input<pulumi.Input<inputs.DatabaseSecretsMountInfluxdb>[]>;
    /**
     * Specifies whether to show this mount in the UI-specific listing endpoint
     */
    listingVisibility?: pulumi.Input<string>;
    /**
     * Local mount flag that can be explicitly set to true to enforce local mount in HA environment
     */
    local?: pulumi.Input<boolean>;
    /**
     * Maximum possible lease duration for tokens and secrets in seconds
     */
    maxLeaseTtlSeconds?: pulumi.Input<number>;
    /**
     * Connection parameters for the mongodbatlas-database-plugin plugin.
     */
    mongodbatlas?: pulumi.Input<pulumi.Input<inputs.DatabaseSecretsMountMongodbatla>[]>;
    /**
     * Connection parameters for the mongodb-database-plugin plugin.
     */
    mongodbs?: pulumi.Input<pulumi.Input<inputs.DatabaseSecretsMountMongodb>[]>;
    /**
     * Connection parameters for the mssql-database-plugin plugin.
     */
    mssqls?: pulumi.Input<pulumi.Input<inputs.DatabaseSecretsMountMssql>[]>;
    /**
     * Connection parameters for the mysql-aurora-database-plugin plugin.
     */
    mysqlAuroras?: pulumi.Input<pulumi.Input<inputs.DatabaseSecretsMountMysqlAurora>[]>;
    /**
     * Connection parameters for the mysql-legacy-database-plugin plugin.
     */
    mysqlLegacies?: pulumi.Input<pulumi.Input<inputs.DatabaseSecretsMountMysqlLegacy>[]>;
    /**
     * Connection parameters for the mysql-rds-database-plugin plugin.
     */
    mysqlRds?: pulumi.Input<pulumi.Input<inputs.DatabaseSecretsMountMysqlRd>[]>;
    /**
     * Connection parameters for the mysql-database-plugin plugin.
     */
    mysqls?: pulumi.Input<pulumi.Input<inputs.DatabaseSecretsMountMysql>[]>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Specifies mount type specific options that are passed to the backend
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Connection parameters for the oracle-database-plugin plugin.
     */
    oracles?: pulumi.Input<pulumi.Input<inputs.DatabaseSecretsMountOracle>[]>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    passthroughRequestHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Where the secret backend will be mounted
     */
    path?: pulumi.Input<string>;
    /**
     * Specifies the semantic version of the plugin to use, e.g. 'v1.0.0'
     */
    pluginVersion?: pulumi.Input<string>;
    /**
     * Connection parameters for the postgresql-database-plugin plugin.
     */
    postgresqls?: pulumi.Input<pulumi.Input<inputs.DatabaseSecretsMountPostgresql>[]>;
    /**
     * Connection parameters for the redis-database-plugin plugin.
     */
    redis?: pulumi.Input<pulumi.Input<inputs.DatabaseSecretsMountRedi>[]>;
    /**
     * Connection parameters for the redis-elasticache-database-plugin plugin.
     */
    redisElasticaches?: pulumi.Input<pulumi.Input<inputs.DatabaseSecretsMountRedisElasticach>[]>;
    /**
     * Connection parameters for the redshift-database-plugin plugin.
     */
    redshifts?: pulumi.Input<pulumi.Input<inputs.DatabaseSecretsMountRedshift>[]>;
    /**
     * Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
     */
    sealWrap?: pulumi.Input<boolean>;
    /**
     * Connection parameters for the snowflake-database-plugin plugin.
     */
    snowflakes?: pulumi.Input<pulumi.Input<inputs.DatabaseSecretsMountSnowflake>[]>;
}

/**
 * The set of arguments for constructing a DatabaseSecretsMount resource.
 */
export interface DatabaseSecretsMountArgs {
    /**
     * List of managed key registry entry names that the mount in question is allowed to access
     */
    allowedManagedKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    allowedResponseHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
     */
    auditNonHmacRequestKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
     */
    auditNonHmacResponseKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Connection parameters for the cassandra-database-plugin plugin.
     */
    cassandras?: pulumi.Input<pulumi.Input<inputs.DatabaseSecretsMountCassandra>[]>;
    /**
     * Connection parameters for the couchbase-database-plugin plugin.
     */
    couchbases?: pulumi.Input<pulumi.Input<inputs.DatabaseSecretsMountCouchbase>[]>;
    /**
     * Default lease duration for tokens and secrets in seconds
     */
    defaultLeaseTtlSeconds?: pulumi.Input<number>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    delegatedAuthAccessors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Human-friendly description of the mount
     */
    description?: pulumi.Input<string>;
    /**
     * Connection parameters for the elasticsearch-database-plugin.
     */
    elasticsearches?: pulumi.Input<pulumi.Input<inputs.DatabaseSecretsMountElasticsearch>[]>;
    /**
     * Enable the secrets engine to access Vault's external entropy source
     */
    externalEntropyAccess?: pulumi.Input<boolean>;
    /**
     * Connection parameters for the hana-database-plugin plugin.
     */
    hanas?: pulumi.Input<pulumi.Input<inputs.DatabaseSecretsMountHana>[]>;
    /**
     * The key to use for signing plugin workload identity tokens
     */
    identityTokenKey?: pulumi.Input<string>;
    /**
     * Connection parameters for the influxdb-database-plugin plugin.
     */
    influxdbs?: pulumi.Input<pulumi.Input<inputs.DatabaseSecretsMountInfluxdb>[]>;
    /**
     * Specifies whether to show this mount in the UI-specific listing endpoint
     */
    listingVisibility?: pulumi.Input<string>;
    /**
     * Local mount flag that can be explicitly set to true to enforce local mount in HA environment
     */
    local?: pulumi.Input<boolean>;
    /**
     * Maximum possible lease duration for tokens and secrets in seconds
     */
    maxLeaseTtlSeconds?: pulumi.Input<number>;
    /**
     * Connection parameters for the mongodbatlas-database-plugin plugin.
     */
    mongodbatlas?: pulumi.Input<pulumi.Input<inputs.DatabaseSecretsMountMongodbatla>[]>;
    /**
     * Connection parameters for the mongodb-database-plugin plugin.
     */
    mongodbs?: pulumi.Input<pulumi.Input<inputs.DatabaseSecretsMountMongodb>[]>;
    /**
     * Connection parameters for the mssql-database-plugin plugin.
     */
    mssqls?: pulumi.Input<pulumi.Input<inputs.DatabaseSecretsMountMssql>[]>;
    /**
     * Connection parameters for the mysql-aurora-database-plugin plugin.
     */
    mysqlAuroras?: pulumi.Input<pulumi.Input<inputs.DatabaseSecretsMountMysqlAurora>[]>;
    /**
     * Connection parameters for the mysql-legacy-database-plugin plugin.
     */
    mysqlLegacies?: pulumi.Input<pulumi.Input<inputs.DatabaseSecretsMountMysqlLegacy>[]>;
    /**
     * Connection parameters for the mysql-rds-database-plugin plugin.
     */
    mysqlRds?: pulumi.Input<pulumi.Input<inputs.DatabaseSecretsMountMysqlRd>[]>;
    /**
     * Connection parameters for the mysql-database-plugin plugin.
     */
    mysqls?: pulumi.Input<pulumi.Input<inputs.DatabaseSecretsMountMysql>[]>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Specifies mount type specific options that are passed to the backend
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Connection parameters for the oracle-database-plugin plugin.
     */
    oracles?: pulumi.Input<pulumi.Input<inputs.DatabaseSecretsMountOracle>[]>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    passthroughRequestHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Where the secret backend will be mounted
     */
    path: pulumi.Input<string>;
    /**
     * Specifies the semantic version of the plugin to use, e.g. 'v1.0.0'
     */
    pluginVersion?: pulumi.Input<string>;
    /**
     * Connection parameters for the postgresql-database-plugin plugin.
     */
    postgresqls?: pulumi.Input<pulumi.Input<inputs.DatabaseSecretsMountPostgresql>[]>;
    /**
     * Connection parameters for the redis-database-plugin plugin.
     */
    redis?: pulumi.Input<pulumi.Input<inputs.DatabaseSecretsMountRedi>[]>;
    /**
     * Connection parameters for the redis-elasticache-database-plugin plugin.
     */
    redisElasticaches?: pulumi.Input<pulumi.Input<inputs.DatabaseSecretsMountRedisElasticach>[]>;
    /**
     * Connection parameters for the redshift-database-plugin plugin.
     */
    redshifts?: pulumi.Input<pulumi.Input<inputs.DatabaseSecretsMountRedshift>[]>;
    /**
     * Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
     */
    sealWrap?: pulumi.Input<boolean>;
    /**
     * Connection parameters for the snowflake-database-plugin plugin.
     */
    snowflakes?: pulumi.Input<pulumi.Input<inputs.DatabaseSecretsMountSnowflake>[]>;
}
