// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getNamespace(args?: GetNamespaceArgs, opts?: pulumi.InvokeOptions): Promise<GetNamespaceResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vault:index/getNamespace:getNamespace", {
        "id": args.id,
        "namespace": args.namespace,
        "path": args.path,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNamespace.
 */
export interface GetNamespaceArgs {
    id?: string;
    namespace?: string;
    path?: string;
}

/**
 * A collection of values returned by getNamespace.
 */
export interface GetNamespaceResult {
    readonly customMetadata: {[key: string]: string};
    readonly id: string;
    readonly namespace?: string;
    readonly namespaceId: string;
    readonly path?: string;
    readonly pathFq: string;
}
export function getNamespaceOutput(args?: GetNamespaceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNamespaceResult> {
    return pulumi.output(args).apply((a: any) => getNamespace(a, opts))
}

/**
 * A collection of arguments for invoking getNamespace.
 */
export interface GetNamespaceOutputArgs {
    id?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
}
