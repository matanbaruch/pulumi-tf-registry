// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class TransitSecretBackendKey extends pulumi.CustomResource {
    /**
     * Get an existing TransitSecretBackendKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TransitSecretBackendKeyState, opts?: pulumi.CustomResourceOptions): TransitSecretBackendKey {
        return new TransitSecretBackendKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:index/transitSecretBackendKey:TransitSecretBackendKey';

    /**
     * Returns true if the given object is an instance of TransitSecretBackendKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TransitSecretBackendKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TransitSecretBackendKey.__pulumiType;
    }

    /**
     * If set, enables taking backup of named key in the plaintext format. Once set, this cannot be disabled.
     */
    public readonly allowPlaintextBackup!: pulumi.Output<boolean | undefined>;
    /**
     * Amount of seconds the key should live before being automatically rotated. A value of 0 disables automatic rotation for
     * the key.
     */
    public readonly autoRotatePeriod!: pulumi.Output<number>;
    /**
     * The Transit secret backend the resource belongs to.
     */
    public readonly backend!: pulumi.Output<string>;
    /**
     * Whether or not to support convergent encryption, where the same plaintext creates the same ciphertext. This requires
     * derived to be set to true.
     */
    public readonly convergentEncryption!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies if the key is allowed to be deleted.
     */
    public readonly deletionAllowed!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies if key derivation is to be used. If enabled, all encrypt/decrypt requests to this key must provide a context
     * which is used for key derivation.
     */
    public readonly derived!: pulumi.Output<boolean | undefined>;
    /**
     * Enables keys to be exportable. This allows for all the valid keys in the key ring to be exported. Once set, this cannot
     * be disabled.
     */
    public readonly exportable!: pulumi.Output<boolean | undefined>;
    /**
     * The key size in bytes for algorithms that allow variable key sizes. Currently only applicable to HMAC; this value must
     * be between 32 and 512.
     */
    public readonly keySize!: pulumi.Output<number | undefined>;
    /**
     * List of key versions in the keyring.
     */
    public /*out*/ readonly keys!: pulumi.Output<{[key: string]: string}[]>;
    /**
     * Latest key version in use in the keyring
     */
    public /*out*/ readonly latestVersion!: pulumi.Output<number>;
    /**
     * Minimum key version available for use.
     */
    public /*out*/ readonly minAvailableVersion!: pulumi.Output<number>;
    /**
     * Minimum key version to use for decryption.
     */
    public readonly minDecryptionVersion!: pulumi.Output<number | undefined>;
    /**
     * Minimum key version to use for encryption
     */
    public readonly minEncryptionVersion!: pulumi.Output<number | undefined>;
    /**
     * Name of the encryption key to create.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * Whether or not the key supports decryption, based on key type.
     */
    public /*out*/ readonly supportsDecryption!: pulumi.Output<boolean>;
    /**
     * Whether or not the key supports derivation, based on key type.
     */
    public /*out*/ readonly supportsDerivation!: pulumi.Output<boolean>;
    /**
     * Whether or not the key supports encryption, based on key type.
     */
    public /*out*/ readonly supportsEncryption!: pulumi.Output<boolean>;
    /**
     * Whether or not the key supports signing, based on key type.
     */
    public /*out*/ readonly supportsSigning!: pulumi.Output<boolean>;
    /**
     * Specifies the type of key to create. The currently-supported types are: aes128-gcm96, aes256-gcm96, chacha20-poly1305,
     * ed25519, ecdsa-p256, ecdsa-p384, ecdsa-p521, hmac, rsa-2048, rsa-3072, rsa-4096
     */
    public readonly type!: pulumi.Output<string | undefined>;

    /**
     * Create a TransitSecretBackendKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TransitSecretBackendKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TransitSecretBackendKeyArgs | TransitSecretBackendKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TransitSecretBackendKeyState | undefined;
            resourceInputs["allowPlaintextBackup"] = state ? state.allowPlaintextBackup : undefined;
            resourceInputs["autoRotatePeriod"] = state ? state.autoRotatePeriod : undefined;
            resourceInputs["backend"] = state ? state.backend : undefined;
            resourceInputs["convergentEncryption"] = state ? state.convergentEncryption : undefined;
            resourceInputs["deletionAllowed"] = state ? state.deletionAllowed : undefined;
            resourceInputs["derived"] = state ? state.derived : undefined;
            resourceInputs["exportable"] = state ? state.exportable : undefined;
            resourceInputs["keySize"] = state ? state.keySize : undefined;
            resourceInputs["keys"] = state ? state.keys : undefined;
            resourceInputs["latestVersion"] = state ? state.latestVersion : undefined;
            resourceInputs["minAvailableVersion"] = state ? state.minAvailableVersion : undefined;
            resourceInputs["minDecryptionVersion"] = state ? state.minDecryptionVersion : undefined;
            resourceInputs["minEncryptionVersion"] = state ? state.minEncryptionVersion : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["supportsDecryption"] = state ? state.supportsDecryption : undefined;
            resourceInputs["supportsDerivation"] = state ? state.supportsDerivation : undefined;
            resourceInputs["supportsEncryption"] = state ? state.supportsEncryption : undefined;
            resourceInputs["supportsSigning"] = state ? state.supportsSigning : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as TransitSecretBackendKeyArgs | undefined;
            if ((!args || args.backend === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backend'");
            }
            resourceInputs["allowPlaintextBackup"] = args ? args.allowPlaintextBackup : undefined;
            resourceInputs["autoRotatePeriod"] = args ? args.autoRotatePeriod : undefined;
            resourceInputs["backend"] = args ? args.backend : undefined;
            resourceInputs["convergentEncryption"] = args ? args.convergentEncryption : undefined;
            resourceInputs["deletionAllowed"] = args ? args.deletionAllowed : undefined;
            resourceInputs["derived"] = args ? args.derived : undefined;
            resourceInputs["exportable"] = args ? args.exportable : undefined;
            resourceInputs["keySize"] = args ? args.keySize : undefined;
            resourceInputs["minDecryptionVersion"] = args ? args.minDecryptionVersion : undefined;
            resourceInputs["minEncryptionVersion"] = args ? args.minEncryptionVersion : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["keys"] = undefined /*out*/;
            resourceInputs["latestVersion"] = undefined /*out*/;
            resourceInputs["minAvailableVersion"] = undefined /*out*/;
            resourceInputs["supportsDecryption"] = undefined /*out*/;
            resourceInputs["supportsDerivation"] = undefined /*out*/;
            resourceInputs["supportsEncryption"] = undefined /*out*/;
            resourceInputs["supportsSigning"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TransitSecretBackendKey.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering TransitSecretBackendKey resources.
 */
export interface TransitSecretBackendKeyState {
    /**
     * If set, enables taking backup of named key in the plaintext format. Once set, this cannot be disabled.
     */
    allowPlaintextBackup?: pulumi.Input<boolean>;
    /**
     * Amount of seconds the key should live before being automatically rotated. A value of 0 disables automatic rotation for
     * the key.
     */
    autoRotatePeriod?: pulumi.Input<number>;
    /**
     * The Transit secret backend the resource belongs to.
     */
    backend?: pulumi.Input<string>;
    /**
     * Whether or not to support convergent encryption, where the same plaintext creates the same ciphertext. This requires
     * derived to be set to true.
     */
    convergentEncryption?: pulumi.Input<boolean>;
    /**
     * Specifies if the key is allowed to be deleted.
     */
    deletionAllowed?: pulumi.Input<boolean>;
    /**
     * Specifies if key derivation is to be used. If enabled, all encrypt/decrypt requests to this key must provide a context
     * which is used for key derivation.
     */
    derived?: pulumi.Input<boolean>;
    /**
     * Enables keys to be exportable. This allows for all the valid keys in the key ring to be exported. Once set, this cannot
     * be disabled.
     */
    exportable?: pulumi.Input<boolean>;
    /**
     * The key size in bytes for algorithms that allow variable key sizes. Currently only applicable to HMAC; this value must
     * be between 32 and 512.
     */
    keySize?: pulumi.Input<number>;
    /**
     * List of key versions in the keyring.
     */
    keys?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
    /**
     * Latest key version in use in the keyring
     */
    latestVersion?: pulumi.Input<number>;
    /**
     * Minimum key version available for use.
     */
    minAvailableVersion?: pulumi.Input<number>;
    /**
     * Minimum key version to use for decryption.
     */
    minDecryptionVersion?: pulumi.Input<number>;
    /**
     * Minimum key version to use for encryption
     */
    minEncryptionVersion?: pulumi.Input<number>;
    /**
     * Name of the encryption key to create.
     */
    name?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Whether or not the key supports decryption, based on key type.
     */
    supportsDecryption?: pulumi.Input<boolean>;
    /**
     * Whether or not the key supports derivation, based on key type.
     */
    supportsDerivation?: pulumi.Input<boolean>;
    /**
     * Whether or not the key supports encryption, based on key type.
     */
    supportsEncryption?: pulumi.Input<boolean>;
    /**
     * Whether or not the key supports signing, based on key type.
     */
    supportsSigning?: pulumi.Input<boolean>;
    /**
     * Specifies the type of key to create. The currently-supported types are: aes128-gcm96, aes256-gcm96, chacha20-poly1305,
     * ed25519, ecdsa-p256, ecdsa-p384, ecdsa-p521, hmac, rsa-2048, rsa-3072, rsa-4096
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TransitSecretBackendKey resource.
 */
export interface TransitSecretBackendKeyArgs {
    /**
     * If set, enables taking backup of named key in the plaintext format. Once set, this cannot be disabled.
     */
    allowPlaintextBackup?: pulumi.Input<boolean>;
    /**
     * Amount of seconds the key should live before being automatically rotated. A value of 0 disables automatic rotation for
     * the key.
     */
    autoRotatePeriod?: pulumi.Input<number>;
    /**
     * The Transit secret backend the resource belongs to.
     */
    backend: pulumi.Input<string>;
    /**
     * Whether or not to support convergent encryption, where the same plaintext creates the same ciphertext. This requires
     * derived to be set to true.
     */
    convergentEncryption?: pulumi.Input<boolean>;
    /**
     * Specifies if the key is allowed to be deleted.
     */
    deletionAllowed?: pulumi.Input<boolean>;
    /**
     * Specifies if key derivation is to be used. If enabled, all encrypt/decrypt requests to this key must provide a context
     * which is used for key derivation.
     */
    derived?: pulumi.Input<boolean>;
    /**
     * Enables keys to be exportable. This allows for all the valid keys in the key ring to be exported. Once set, this cannot
     * be disabled.
     */
    exportable?: pulumi.Input<boolean>;
    /**
     * The key size in bytes for algorithms that allow variable key sizes. Currently only applicable to HMAC; this value must
     * be between 32 and 512.
     */
    keySize?: pulumi.Input<number>;
    /**
     * Minimum key version to use for decryption.
     */
    minDecryptionVersion?: pulumi.Input<number>;
    /**
     * Minimum key version to use for encryption
     */
    minEncryptionVersion?: pulumi.Input<number>;
    /**
     * Name of the encryption key to create.
     */
    name?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Specifies the type of key to create. The currently-supported types are: aes128-gcm96, aes256-gcm96, chacha20-poly1305,
     * ed25519, ecdsa-p256, ecdsa-p384, ecdsa-p521, hmac, rsa-2048, rsa-3072, rsa-4096
     */
    type?: pulumi.Input<string>;
}
