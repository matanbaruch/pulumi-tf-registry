// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class IdentityOidcRole extends pulumi.CustomResource {
    /**
     * Get an existing IdentityOidcRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IdentityOidcRoleState, opts?: pulumi.CustomResourceOptions): IdentityOidcRole {
        return new IdentityOidcRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:index/identityOidcRole:IdentityOidcRole';

    /**
     * Returns true if the given object is an instance of IdentityOidcRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IdentityOidcRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IdentityOidcRole.__pulumiType;
    }

    /**
     * The value that will be included in the `aud` field of all the OIDC identity tokens issued by this role
     */
    public readonly clientId!: pulumi.Output<string>;
    /**
     * A configured named key, the key must already exist.
     */
    public readonly key!: pulumi.Output<string>;
    /**
     * Name of the role.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * The template string to use for generating tokens. This may be in string-ified JSON or base64 format.
     */
    public readonly template!: pulumi.Output<string | undefined>;
    /**
     * TTL of the tokens generated against the role in number of seconds.
     */
    public readonly ttl!: pulumi.Output<number | undefined>;

    /**
     * Create a IdentityOidcRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IdentityOidcRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IdentityOidcRoleArgs | IdentityOidcRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IdentityOidcRoleState | undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
        } else {
            const args = argsOrState as IdentityOidcRoleArgs | undefined;
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IdentityOidcRole.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IdentityOidcRole resources.
 */
export interface IdentityOidcRoleState {
    /**
     * The value that will be included in the `aud` field of all the OIDC identity tokens issued by this role
     */
    clientId?: pulumi.Input<string>;
    /**
     * A configured named key, the key must already exist.
     */
    key?: pulumi.Input<string>;
    /**
     * Name of the role.
     */
    name?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * The template string to use for generating tokens. This may be in string-ified JSON or base64 format.
     */
    template?: pulumi.Input<string>;
    /**
     * TTL of the tokens generated against the role in number of seconds.
     */
    ttl?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a IdentityOidcRole resource.
 */
export interface IdentityOidcRoleArgs {
    /**
     * The value that will be included in the `aud` field of all the OIDC identity tokens issued by this role
     */
    clientId?: pulumi.Input<string>;
    /**
     * A configured named key, the key must already exist.
     */
    key: pulumi.Input<string>;
    /**
     * Name of the role.
     */
    name?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * The template string to use for generating tokens. This may be in string-ified JSON or base64 format.
     */
    template?: pulumi.Input<string>;
    /**
     * TTL of the tokens generated against the role in number of seconds.
     */
    ttl?: pulumi.Input<number>;
}
