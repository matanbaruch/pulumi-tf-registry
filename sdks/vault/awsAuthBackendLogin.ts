// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AwsAuthBackendLogin extends pulumi.CustomResource {
    /**
     * Get an existing AwsAuthBackendLogin resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AwsAuthBackendLoginState, opts?: pulumi.CustomResourceOptions): AwsAuthBackendLogin {
        return new AwsAuthBackendLogin(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:index/awsAuthBackendLogin:AwsAuthBackendLogin';

    /**
     * Returns true if the given object is an instance of AwsAuthBackendLogin.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AwsAuthBackendLogin {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AwsAuthBackendLogin.__pulumiType;
    }

    /**
     * The accessor returned from Vault for this token.
     */
    public /*out*/ readonly accessor!: pulumi.Output<string>;
    /**
     * The auth method used to generate this token.
     */
    public /*out*/ readonly authType!: pulumi.Output<string>;
    /**
     * AWS Auth Backend to read the token from.
     */
    public readonly backend!: pulumi.Output<string | undefined>;
    /**
     * The token returned by Vault.
     */
    public /*out*/ readonly clientToken!: pulumi.Output<string>;
    /**
     * The HTTP method used in the signed request.
     */
    public readonly iamHttpRequestMethod!: pulumi.Output<string | undefined>;
    /**
     * The Base64-encoded body of the signed request.
     */
    public readonly iamRequestBody!: pulumi.Output<string | undefined>;
    /**
     * The Base64-encoded, JSON serialized representation of the sts:GetCallerIdentity HTTP request headers.
     */
    public readonly iamRequestHeaders!: pulumi.Output<string | undefined>;
    /**
     * The Base64-encoded HTTP URL used in the signed request.
     */
    public readonly iamRequestUrl!: pulumi.Output<string | undefined>;
    /**
     * Base64-encoded EC2 instance identity document to authenticate with.
     */
    public readonly identity!: pulumi.Output<string | undefined>;
    /**
     * Lease duration in seconds relative to the time in lease_start_time.
     */
    public /*out*/ readonly leaseDuration!: pulumi.Output<number>;
    public /*out*/ readonly leaseStartTime!: pulumi.Output<string>;
    /**
     * The metadata reported by the Vault server.
     */
    public /*out*/ readonly metadata!: pulumi.Output<{[key: string]: string}>;
    /**
     * Target namespace. (requires Enterprise)
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * The nonce to be used for subsequent login requests.
     */
    public readonly nonce!: pulumi.Output<string>;
    /**
     * PKCS7 signature of the identity document to authenticate with, with all newline characters removed.
     */
    public readonly pkcs7!: pulumi.Output<string | undefined>;
    /**
     * The policies assigned to this token.
     */
    public /*out*/ readonly policies!: pulumi.Output<string[]>;
    /**
     * True if the duration of this lease can be extended through renewal.
     */
    public /*out*/ readonly renewable!: pulumi.Output<boolean>;
    /**
     * AWS Auth Role to read the token from.
     */
    public readonly role!: pulumi.Output<string>;
    /**
     * Base64-encoded SHA256 RSA signature of the instance identtiy document to authenticate with.
     */
    public readonly signature!: pulumi.Output<string | undefined>;

    /**
     * Create a AwsAuthBackendLogin resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AwsAuthBackendLoginArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AwsAuthBackendLoginArgs | AwsAuthBackendLoginState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AwsAuthBackendLoginState | undefined;
            resourceInputs["accessor"] = state ? state.accessor : undefined;
            resourceInputs["authType"] = state ? state.authType : undefined;
            resourceInputs["backend"] = state ? state.backend : undefined;
            resourceInputs["clientToken"] = state ? state.clientToken : undefined;
            resourceInputs["iamHttpRequestMethod"] = state ? state.iamHttpRequestMethod : undefined;
            resourceInputs["iamRequestBody"] = state ? state.iamRequestBody : undefined;
            resourceInputs["iamRequestHeaders"] = state ? state.iamRequestHeaders : undefined;
            resourceInputs["iamRequestUrl"] = state ? state.iamRequestUrl : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["leaseDuration"] = state ? state.leaseDuration : undefined;
            resourceInputs["leaseStartTime"] = state ? state.leaseStartTime : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["nonce"] = state ? state.nonce : undefined;
            resourceInputs["pkcs7"] = state ? state.pkcs7 : undefined;
            resourceInputs["policies"] = state ? state.policies : undefined;
            resourceInputs["renewable"] = state ? state.renewable : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["signature"] = state ? state.signature : undefined;
        } else {
            const args = argsOrState as AwsAuthBackendLoginArgs | undefined;
            resourceInputs["backend"] = args ? args.backend : undefined;
            resourceInputs["iamHttpRequestMethod"] = args ? args.iamHttpRequestMethod : undefined;
            resourceInputs["iamRequestBody"] = args ? args.iamRequestBody : undefined;
            resourceInputs["iamRequestHeaders"] = args ? args.iamRequestHeaders : undefined;
            resourceInputs["iamRequestUrl"] = args ? args.iamRequestUrl : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["nonce"] = args ? args.nonce : undefined;
            resourceInputs["pkcs7"] = args ? args.pkcs7 : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["signature"] = args ? args.signature : undefined;
            resourceInputs["accessor"] = undefined /*out*/;
            resourceInputs["authType"] = undefined /*out*/;
            resourceInputs["clientToken"] = undefined /*out*/;
            resourceInputs["leaseDuration"] = undefined /*out*/;
            resourceInputs["leaseStartTime"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["policies"] = undefined /*out*/;
            resourceInputs["renewable"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["clientToken"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AwsAuthBackendLogin.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AwsAuthBackendLogin resources.
 */
export interface AwsAuthBackendLoginState {
    /**
     * The accessor returned from Vault for this token.
     */
    accessor?: pulumi.Input<string>;
    /**
     * The auth method used to generate this token.
     */
    authType?: pulumi.Input<string>;
    /**
     * AWS Auth Backend to read the token from.
     */
    backend?: pulumi.Input<string>;
    /**
     * The token returned by Vault.
     */
    clientToken?: pulumi.Input<string>;
    /**
     * The HTTP method used in the signed request.
     */
    iamHttpRequestMethod?: pulumi.Input<string>;
    /**
     * The Base64-encoded body of the signed request.
     */
    iamRequestBody?: pulumi.Input<string>;
    /**
     * The Base64-encoded, JSON serialized representation of the sts:GetCallerIdentity HTTP request headers.
     */
    iamRequestHeaders?: pulumi.Input<string>;
    /**
     * The Base64-encoded HTTP URL used in the signed request.
     */
    iamRequestUrl?: pulumi.Input<string>;
    /**
     * Base64-encoded EC2 instance identity document to authenticate with.
     */
    identity?: pulumi.Input<string>;
    /**
     * Lease duration in seconds relative to the time in lease_start_time.
     */
    leaseDuration?: pulumi.Input<number>;
    leaseStartTime?: pulumi.Input<string>;
    /**
     * The metadata reported by the Vault server.
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * The nonce to be used for subsequent login requests.
     */
    nonce?: pulumi.Input<string>;
    /**
     * PKCS7 signature of the identity document to authenticate with, with all newline characters removed.
     */
    pkcs7?: pulumi.Input<string>;
    /**
     * The policies assigned to this token.
     */
    policies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * True if the duration of this lease can be extended through renewal.
     */
    renewable?: pulumi.Input<boolean>;
    /**
     * AWS Auth Role to read the token from.
     */
    role?: pulumi.Input<string>;
    /**
     * Base64-encoded SHA256 RSA signature of the instance identtiy document to authenticate with.
     */
    signature?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AwsAuthBackendLogin resource.
 */
export interface AwsAuthBackendLoginArgs {
    /**
     * AWS Auth Backend to read the token from.
     */
    backend?: pulumi.Input<string>;
    /**
     * The HTTP method used in the signed request.
     */
    iamHttpRequestMethod?: pulumi.Input<string>;
    /**
     * The Base64-encoded body of the signed request.
     */
    iamRequestBody?: pulumi.Input<string>;
    /**
     * The Base64-encoded, JSON serialized representation of the sts:GetCallerIdentity HTTP request headers.
     */
    iamRequestHeaders?: pulumi.Input<string>;
    /**
     * The Base64-encoded HTTP URL used in the signed request.
     */
    iamRequestUrl?: pulumi.Input<string>;
    /**
     * Base64-encoded EC2 instance identity document to authenticate with.
     */
    identity?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * The nonce to be used for subsequent login requests.
     */
    nonce?: pulumi.Input<string>;
    /**
     * PKCS7 signature of the identity document to authenticate with, with all newline characters removed.
     */
    pkcs7?: pulumi.Input<string>;
    /**
     * AWS Auth Role to read the token from.
     */
    role?: pulumi.Input<string>;
    /**
     * Base64-encoded SHA256 RSA signature of the instance identtiy document to authenticate with.
     */
    signature?: pulumi.Input<string>;
}
