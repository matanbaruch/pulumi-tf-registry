// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AwsAuthBackendCert extends pulumi.CustomResource {
    /**
     * Get an existing AwsAuthBackendCert resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AwsAuthBackendCertState, opts?: pulumi.CustomResourceOptions): AwsAuthBackendCert {
        return new AwsAuthBackendCert(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:index/awsAuthBackendCert:AwsAuthBackendCert';

    /**
     * Returns true if the given object is an instance of AwsAuthBackendCert.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AwsAuthBackendCert {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AwsAuthBackendCert.__pulumiType;
    }

    /**
     * Base64 encoded AWS Public key required to verify PKCS7 signature of the EC2 instance metadata.
     */
    public readonly awsPublicCert!: pulumi.Output<string>;
    /**
     * Unique name of the auth backend to configure.
     */
    public readonly backend!: pulumi.Output<string | undefined>;
    /**
     * Name of the certificate to configure.
     */
    public readonly certName!: pulumi.Output<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * The type of document that can be verified using the certificate. Must be either "pkcs7" or "identity".
     */
    public readonly type!: pulumi.Output<string | undefined>;

    /**
     * Create a AwsAuthBackendCert resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AwsAuthBackendCertArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AwsAuthBackendCertArgs | AwsAuthBackendCertState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AwsAuthBackendCertState | undefined;
            resourceInputs["awsPublicCert"] = state ? state.awsPublicCert : undefined;
            resourceInputs["backend"] = state ? state.backend : undefined;
            resourceInputs["certName"] = state ? state.certName : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as AwsAuthBackendCertArgs | undefined;
            if ((!args || args.awsPublicCert === undefined) && !opts.urn) {
                throw new Error("Missing required property 'awsPublicCert'");
            }
            if ((!args || args.certName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certName'");
            }
            resourceInputs["awsPublicCert"] = args ? args.awsPublicCert : undefined;
            resourceInputs["backend"] = args ? args.backend : undefined;
            resourceInputs["certName"] = args ? args.certName : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AwsAuthBackendCert.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AwsAuthBackendCert resources.
 */
export interface AwsAuthBackendCertState {
    /**
     * Base64 encoded AWS Public key required to verify PKCS7 signature of the EC2 instance metadata.
     */
    awsPublicCert?: pulumi.Input<string>;
    /**
     * Unique name of the auth backend to configure.
     */
    backend?: pulumi.Input<string>;
    /**
     * Name of the certificate to configure.
     */
    certName?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * The type of document that can be verified using the certificate. Must be either "pkcs7" or "identity".
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AwsAuthBackendCert resource.
 */
export interface AwsAuthBackendCertArgs {
    /**
     * Base64 encoded AWS Public key required to verify PKCS7 signature of the EC2 instance metadata.
     */
    awsPublicCert: pulumi.Input<string>;
    /**
     * Unique name of the auth backend to configure.
     */
    backend?: pulumi.Input<string>;
    /**
     * Name of the certificate to configure.
     */
    certName: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * The type of document that can be verified using the certificate. Must be either "pkcs7" or "identity".
     */
    type?: pulumi.Input<string>;
}
