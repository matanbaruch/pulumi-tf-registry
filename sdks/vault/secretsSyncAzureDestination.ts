// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SecretsSyncAzureDestination extends pulumi.CustomResource {
    /**
     * Get an existing SecretsSyncAzureDestination resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretsSyncAzureDestinationState, opts?: pulumi.CustomResourceOptions): SecretsSyncAzureDestination {
        return new SecretsSyncAzureDestination(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:index/secretsSyncAzureDestination:SecretsSyncAzureDestination';

    /**
     * Returns true if the given object is an instance of SecretsSyncAzureDestination.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretsSyncAzureDestination {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretsSyncAzureDestination.__pulumiType;
    }

    /**
     * Client ID of an Azure app registration.
     */
    public readonly clientId!: pulumi.Output<string | undefined>;
    /**
     * Client Secret of an Azure app registration.
     */
    public readonly clientSecret!: pulumi.Output<string | undefined>;
    /**
     * Specifies a cloud for the client.
     */
    public readonly cloud!: pulumi.Output<string | undefined>;
    /**
     * Custom tags to set on the secret managed at the destination.
     */
    public readonly customTags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Determines what level of information is synced as a distinct resource at the destination. Can be 'secret-path' or
     * 'secret-key'
     */
    public readonly granularity!: pulumi.Output<string | undefined>;
    /**
     * URI of an existing Azure Key Vault instance.
     */
    public readonly keyVaultUri!: pulumi.Output<string | undefined>;
    /**
     * Unique name of the Azure destination.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * Template describing how to generate external secret names.
     */
    public readonly secretNameTemplate!: pulumi.Output<string>;
    /**
     * ID of the target Azure tenant.
     */
    public readonly tenantId!: pulumi.Output<string | undefined>;
    /**
     * Type of secrets destination.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a SecretsSyncAzureDestination resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SecretsSyncAzureDestinationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretsSyncAzureDestinationArgs | SecretsSyncAzureDestinationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretsSyncAzureDestinationState | undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["clientSecret"] = state ? state.clientSecret : undefined;
            resourceInputs["cloud"] = state ? state.cloud : undefined;
            resourceInputs["customTags"] = state ? state.customTags : undefined;
            resourceInputs["granularity"] = state ? state.granularity : undefined;
            resourceInputs["keyVaultUri"] = state ? state.keyVaultUri : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["secretNameTemplate"] = state ? state.secretNameTemplate : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as SecretsSyncAzureDestinationArgs | undefined;
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["clientSecret"] = args?.clientSecret ? pulumi.secret(args.clientSecret) : undefined;
            resourceInputs["cloud"] = args ? args.cloud : undefined;
            resourceInputs["customTags"] = args ? args.customTags : undefined;
            resourceInputs["granularity"] = args ? args.granularity : undefined;
            resourceInputs["keyVaultUri"] = args ? args.keyVaultUri : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["secretNameTemplate"] = args ? args.secretNameTemplate : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["clientSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SecretsSyncAzureDestination.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SecretsSyncAzureDestination resources.
 */
export interface SecretsSyncAzureDestinationState {
    /**
     * Client ID of an Azure app registration.
     */
    clientId?: pulumi.Input<string>;
    /**
     * Client Secret of an Azure app registration.
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * Specifies a cloud for the client.
     */
    cloud?: pulumi.Input<string>;
    /**
     * Custom tags to set on the secret managed at the destination.
     */
    customTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Determines what level of information is synced as a distinct resource at the destination. Can be 'secret-path' or
     * 'secret-key'
     */
    granularity?: pulumi.Input<string>;
    /**
     * URI of an existing Azure Key Vault instance.
     */
    keyVaultUri?: pulumi.Input<string>;
    /**
     * Unique name of the Azure destination.
     */
    name?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Template describing how to generate external secret names.
     */
    secretNameTemplate?: pulumi.Input<string>;
    /**
     * ID of the target Azure tenant.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * Type of secrets destination.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecretsSyncAzureDestination resource.
 */
export interface SecretsSyncAzureDestinationArgs {
    /**
     * Client ID of an Azure app registration.
     */
    clientId?: pulumi.Input<string>;
    /**
     * Client Secret of an Azure app registration.
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * Specifies a cloud for the client.
     */
    cloud?: pulumi.Input<string>;
    /**
     * Custom tags to set on the secret managed at the destination.
     */
    customTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Determines what level of information is synced as a distinct resource at the destination. Can be 'secret-path' or
     * 'secret-key'
     */
    granularity?: pulumi.Input<string>;
    /**
     * URI of an existing Azure Key Vault instance.
     */
    keyVaultUri?: pulumi.Input<string>;
    /**
     * Unique name of the Azure destination.
     */
    name?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Template describing how to generate external secret names.
     */
    secretNameTemplate?: pulumi.Input<string>;
    /**
     * ID of the target Azure tenant.
     */
    tenantId?: pulumi.Input<string>;
}
