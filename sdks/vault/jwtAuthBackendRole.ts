// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class JwtAuthBackendRole extends pulumi.CustomResource {
    /**
     * Get an existing JwtAuthBackendRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: JwtAuthBackendRoleState, opts?: pulumi.CustomResourceOptions): JwtAuthBackendRole {
        return new JwtAuthBackendRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:index/jwtAuthBackendRole:JwtAuthBackendRole';

    /**
     * Returns true if the given object is an instance of JwtAuthBackendRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is JwtAuthBackendRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === JwtAuthBackendRole.__pulumiType;
    }

    /**
     * The list of allowed values for redirect_uri during OIDC logins.
     */
    public readonly allowedRedirectUris!: pulumi.Output<string[] | undefined>;
    /**
     * Unique name of the auth backend to configure.
     */
    public readonly backend!: pulumi.Output<string | undefined>;
    /**
     * List of aud claims to match against. Any match is sufficient.
     */
    public readonly boundAudiences!: pulumi.Output<string[] | undefined>;
    /**
     * Map of claims/values to match against. The expected value may be a single string or a comma-separated string list.
     */
    public readonly boundClaims!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * How to interpret values in the claims/values map: can be either "string" (exact match) or "glob" (wildcard match).
     */
    public readonly boundClaimsType!: pulumi.Output<string>;
    /**
     * If set, requires that the sub claim matches this value.
     */
    public readonly boundSubject!: pulumi.Output<string | undefined>;
    /**
     * Map of claims (keys) to be copied to specified metadata fields (values).
     */
    public readonly claimMappings!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The amount of leeway to add to all claims to account for clock skew, in seconds. Defaults to 60 seconds if set to 0 and
     * can be disabled if set to -1. Only applicable with 'jwt' roles.
     */
    public readonly clockSkewLeeway!: pulumi.Output<number | undefined>;
    /**
     * Disable bound claim value parsing. Useful when values contain commas.
     */
    public readonly disableBoundClaimsParsing!: pulumi.Output<boolean | undefined>;
    /**
     * The amount of leeway to add to expiration (exp) claims to account for clock skew, in seconds. Defaults to 150 seconds if
     * set to 0 and can be disabled if set to -1. Only applicable with 'jwt' roles.
     */
    public readonly expirationLeeway!: pulumi.Output<number | undefined>;
    /**
     * The claim to use to uniquely identify the set of groups to which the user belongs; this will be used as the names for
     * the Identity group aliases created due to a successful login. The claim value must be a list of strings.
     */
    public readonly groupsClaim!: pulumi.Output<string | undefined>;
    /**
     * Specifies the allowable elapsed time in seconds since the last time the user was actively authenticated.
     */
    public readonly maxAge!: pulumi.Output<number | undefined>;
    /**
     * Target namespace. (requires Enterprise)
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * The amount of leeway to add to not before (nbf) claims to account for clock skew, in seconds. Defaults to 150 seconds if
     * set to 0 and can be disabled if set to -1. Only applicable with 'jwt' roles.
     */
    public readonly notBeforeLeeway!: pulumi.Output<number | undefined>;
    /**
     * List of OIDC scopes to be used with an OIDC role. The standard scope "openid" is automatically included and need not be
     * specified.
     */
    public readonly oidcScopes!: pulumi.Output<string[] | undefined>;
    /**
     * Name of the role.
     */
    public readonly roleName!: pulumi.Output<string>;
    /**
     * Type of role, either "oidc" (default) or "jwt"
     */
    public readonly roleType!: pulumi.Output<string>;
    /**
     * Specifies the blocks of IP addresses which are allowed to use the generated token
     */
    public readonly tokenBoundCidrs!: pulumi.Output<string[] | undefined>;
    /**
     * Generated Token's Explicit Maximum TTL in seconds
     */
    public readonly tokenExplicitMaxTtl!: pulumi.Output<number | undefined>;
    /**
     * The maximum lifetime of the generated token
     */
    public readonly tokenMaxTtl!: pulumi.Output<number | undefined>;
    /**
     * If true, the 'default' policy will not automatically be added to generated tokens
     */
    public readonly tokenNoDefaultPolicy!: pulumi.Output<boolean | undefined>;
    /**
     * The maximum number of times a token may be used, a value of zero means unlimited
     */
    public readonly tokenNumUses!: pulumi.Output<number | undefined>;
    /**
     * Generated Token's Period
     */
    public readonly tokenPeriod!: pulumi.Output<number | undefined>;
    /**
     * Generated Token's Policies
     */
    public readonly tokenPolicies!: pulumi.Output<string[] | undefined>;
    /**
     * The initial ttl of the token to generate in seconds
     */
    public readonly tokenTtl!: pulumi.Output<number | undefined>;
    /**
     * The type of token to generate, service or batch
     */
    public readonly tokenType!: pulumi.Output<string | undefined>;
    /**
     * The claim to use to uniquely identify the user; this will be used as the name for the Identity entity alias created due
     * to a successful login.
     */
    public readonly userClaim!: pulumi.Output<string>;
    /**
     * Specifies if the user_claim value uses JSON pointer syntax for referencing claims. By default, the user_claim value will
     * not use JSON pointer.
     */
    public readonly userClaimJsonPointer!: pulumi.Output<boolean | undefined>;
    /**
     * Log received OIDC tokens and claims when debug-level logging is active. Not recommended in production since sensitive
     * information may be present in OIDC responses.
     */
    public readonly verboseOidcLogging!: pulumi.Output<boolean | undefined>;

    /**
     * Create a JwtAuthBackendRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: JwtAuthBackendRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: JwtAuthBackendRoleArgs | JwtAuthBackendRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as JwtAuthBackendRoleState | undefined;
            resourceInputs["allowedRedirectUris"] = state ? state.allowedRedirectUris : undefined;
            resourceInputs["backend"] = state ? state.backend : undefined;
            resourceInputs["boundAudiences"] = state ? state.boundAudiences : undefined;
            resourceInputs["boundClaims"] = state ? state.boundClaims : undefined;
            resourceInputs["boundClaimsType"] = state ? state.boundClaimsType : undefined;
            resourceInputs["boundSubject"] = state ? state.boundSubject : undefined;
            resourceInputs["claimMappings"] = state ? state.claimMappings : undefined;
            resourceInputs["clockSkewLeeway"] = state ? state.clockSkewLeeway : undefined;
            resourceInputs["disableBoundClaimsParsing"] = state ? state.disableBoundClaimsParsing : undefined;
            resourceInputs["expirationLeeway"] = state ? state.expirationLeeway : undefined;
            resourceInputs["groupsClaim"] = state ? state.groupsClaim : undefined;
            resourceInputs["maxAge"] = state ? state.maxAge : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["notBeforeLeeway"] = state ? state.notBeforeLeeway : undefined;
            resourceInputs["oidcScopes"] = state ? state.oidcScopes : undefined;
            resourceInputs["roleName"] = state ? state.roleName : undefined;
            resourceInputs["roleType"] = state ? state.roleType : undefined;
            resourceInputs["tokenBoundCidrs"] = state ? state.tokenBoundCidrs : undefined;
            resourceInputs["tokenExplicitMaxTtl"] = state ? state.tokenExplicitMaxTtl : undefined;
            resourceInputs["tokenMaxTtl"] = state ? state.tokenMaxTtl : undefined;
            resourceInputs["tokenNoDefaultPolicy"] = state ? state.tokenNoDefaultPolicy : undefined;
            resourceInputs["tokenNumUses"] = state ? state.tokenNumUses : undefined;
            resourceInputs["tokenPeriod"] = state ? state.tokenPeriod : undefined;
            resourceInputs["tokenPolicies"] = state ? state.tokenPolicies : undefined;
            resourceInputs["tokenTtl"] = state ? state.tokenTtl : undefined;
            resourceInputs["tokenType"] = state ? state.tokenType : undefined;
            resourceInputs["userClaim"] = state ? state.userClaim : undefined;
            resourceInputs["userClaimJsonPointer"] = state ? state.userClaimJsonPointer : undefined;
            resourceInputs["verboseOidcLogging"] = state ? state.verboseOidcLogging : undefined;
        } else {
            const args = argsOrState as JwtAuthBackendRoleArgs | undefined;
            if ((!args || args.roleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleName'");
            }
            if ((!args || args.userClaim === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userClaim'");
            }
            resourceInputs["allowedRedirectUris"] = args ? args.allowedRedirectUris : undefined;
            resourceInputs["backend"] = args ? args.backend : undefined;
            resourceInputs["boundAudiences"] = args ? args.boundAudiences : undefined;
            resourceInputs["boundClaims"] = args ? args.boundClaims : undefined;
            resourceInputs["boundClaimsType"] = args ? args.boundClaimsType : undefined;
            resourceInputs["boundSubject"] = args ? args.boundSubject : undefined;
            resourceInputs["claimMappings"] = args ? args.claimMappings : undefined;
            resourceInputs["clockSkewLeeway"] = args ? args.clockSkewLeeway : undefined;
            resourceInputs["disableBoundClaimsParsing"] = args ? args.disableBoundClaimsParsing : undefined;
            resourceInputs["expirationLeeway"] = args ? args.expirationLeeway : undefined;
            resourceInputs["groupsClaim"] = args ? args.groupsClaim : undefined;
            resourceInputs["maxAge"] = args ? args.maxAge : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["notBeforeLeeway"] = args ? args.notBeforeLeeway : undefined;
            resourceInputs["oidcScopes"] = args ? args.oidcScopes : undefined;
            resourceInputs["roleName"] = args ? args.roleName : undefined;
            resourceInputs["roleType"] = args ? args.roleType : undefined;
            resourceInputs["tokenBoundCidrs"] = args ? args.tokenBoundCidrs : undefined;
            resourceInputs["tokenExplicitMaxTtl"] = args ? args.tokenExplicitMaxTtl : undefined;
            resourceInputs["tokenMaxTtl"] = args ? args.tokenMaxTtl : undefined;
            resourceInputs["tokenNoDefaultPolicy"] = args ? args.tokenNoDefaultPolicy : undefined;
            resourceInputs["tokenNumUses"] = args ? args.tokenNumUses : undefined;
            resourceInputs["tokenPeriod"] = args ? args.tokenPeriod : undefined;
            resourceInputs["tokenPolicies"] = args ? args.tokenPolicies : undefined;
            resourceInputs["tokenTtl"] = args ? args.tokenTtl : undefined;
            resourceInputs["tokenType"] = args ? args.tokenType : undefined;
            resourceInputs["userClaim"] = args ? args.userClaim : undefined;
            resourceInputs["userClaimJsonPointer"] = args ? args.userClaimJsonPointer : undefined;
            resourceInputs["verboseOidcLogging"] = args ? args.verboseOidcLogging : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(JwtAuthBackendRole.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering JwtAuthBackendRole resources.
 */
export interface JwtAuthBackendRoleState {
    /**
     * The list of allowed values for redirect_uri during OIDC logins.
     */
    allowedRedirectUris?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unique name of the auth backend to configure.
     */
    backend?: pulumi.Input<string>;
    /**
     * List of aud claims to match against. Any match is sufficient.
     */
    boundAudiences?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Map of claims/values to match against. The expected value may be a single string or a comma-separated string list.
     */
    boundClaims?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * How to interpret values in the claims/values map: can be either "string" (exact match) or "glob" (wildcard match).
     */
    boundClaimsType?: pulumi.Input<string>;
    /**
     * If set, requires that the sub claim matches this value.
     */
    boundSubject?: pulumi.Input<string>;
    /**
     * Map of claims (keys) to be copied to specified metadata fields (values).
     */
    claimMappings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The amount of leeway to add to all claims to account for clock skew, in seconds. Defaults to 60 seconds if set to 0 and
     * can be disabled if set to -1. Only applicable with 'jwt' roles.
     */
    clockSkewLeeway?: pulumi.Input<number>;
    /**
     * Disable bound claim value parsing. Useful when values contain commas.
     */
    disableBoundClaimsParsing?: pulumi.Input<boolean>;
    /**
     * The amount of leeway to add to expiration (exp) claims to account for clock skew, in seconds. Defaults to 150 seconds if
     * set to 0 and can be disabled if set to -1. Only applicable with 'jwt' roles.
     */
    expirationLeeway?: pulumi.Input<number>;
    /**
     * The claim to use to uniquely identify the set of groups to which the user belongs; this will be used as the names for
     * the Identity group aliases created due to a successful login. The claim value must be a list of strings.
     */
    groupsClaim?: pulumi.Input<string>;
    /**
     * Specifies the allowable elapsed time in seconds since the last time the user was actively authenticated.
     */
    maxAge?: pulumi.Input<number>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * The amount of leeway to add to not before (nbf) claims to account for clock skew, in seconds. Defaults to 150 seconds if
     * set to 0 and can be disabled if set to -1. Only applicable with 'jwt' roles.
     */
    notBeforeLeeway?: pulumi.Input<number>;
    /**
     * List of OIDC scopes to be used with an OIDC role. The standard scope "openid" is automatically included and need not be
     * specified.
     */
    oidcScopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the role.
     */
    roleName?: pulumi.Input<string>;
    /**
     * Type of role, either "oidc" (default) or "jwt"
     */
    roleType?: pulumi.Input<string>;
    /**
     * Specifies the blocks of IP addresses which are allowed to use the generated token
     */
    tokenBoundCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Generated Token's Explicit Maximum TTL in seconds
     */
    tokenExplicitMaxTtl?: pulumi.Input<number>;
    /**
     * The maximum lifetime of the generated token
     */
    tokenMaxTtl?: pulumi.Input<number>;
    /**
     * If true, the 'default' policy will not automatically be added to generated tokens
     */
    tokenNoDefaultPolicy?: pulumi.Input<boolean>;
    /**
     * The maximum number of times a token may be used, a value of zero means unlimited
     */
    tokenNumUses?: pulumi.Input<number>;
    /**
     * Generated Token's Period
     */
    tokenPeriod?: pulumi.Input<number>;
    /**
     * Generated Token's Policies
     */
    tokenPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The initial ttl of the token to generate in seconds
     */
    tokenTtl?: pulumi.Input<number>;
    /**
     * The type of token to generate, service or batch
     */
    tokenType?: pulumi.Input<string>;
    /**
     * The claim to use to uniquely identify the user; this will be used as the name for the Identity entity alias created due
     * to a successful login.
     */
    userClaim?: pulumi.Input<string>;
    /**
     * Specifies if the user_claim value uses JSON pointer syntax for referencing claims. By default, the user_claim value will
     * not use JSON pointer.
     */
    userClaimJsonPointer?: pulumi.Input<boolean>;
    /**
     * Log received OIDC tokens and claims when debug-level logging is active. Not recommended in production since sensitive
     * information may be present in OIDC responses.
     */
    verboseOidcLogging?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a JwtAuthBackendRole resource.
 */
export interface JwtAuthBackendRoleArgs {
    /**
     * The list of allowed values for redirect_uri during OIDC logins.
     */
    allowedRedirectUris?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unique name of the auth backend to configure.
     */
    backend?: pulumi.Input<string>;
    /**
     * List of aud claims to match against. Any match is sufficient.
     */
    boundAudiences?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Map of claims/values to match against. The expected value may be a single string or a comma-separated string list.
     */
    boundClaims?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * How to interpret values in the claims/values map: can be either "string" (exact match) or "glob" (wildcard match).
     */
    boundClaimsType?: pulumi.Input<string>;
    /**
     * If set, requires that the sub claim matches this value.
     */
    boundSubject?: pulumi.Input<string>;
    /**
     * Map of claims (keys) to be copied to specified metadata fields (values).
     */
    claimMappings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The amount of leeway to add to all claims to account for clock skew, in seconds. Defaults to 60 seconds if set to 0 and
     * can be disabled if set to -1. Only applicable with 'jwt' roles.
     */
    clockSkewLeeway?: pulumi.Input<number>;
    /**
     * Disable bound claim value parsing. Useful when values contain commas.
     */
    disableBoundClaimsParsing?: pulumi.Input<boolean>;
    /**
     * The amount of leeway to add to expiration (exp) claims to account for clock skew, in seconds. Defaults to 150 seconds if
     * set to 0 and can be disabled if set to -1. Only applicable with 'jwt' roles.
     */
    expirationLeeway?: pulumi.Input<number>;
    /**
     * The claim to use to uniquely identify the set of groups to which the user belongs; this will be used as the names for
     * the Identity group aliases created due to a successful login. The claim value must be a list of strings.
     */
    groupsClaim?: pulumi.Input<string>;
    /**
     * Specifies the allowable elapsed time in seconds since the last time the user was actively authenticated.
     */
    maxAge?: pulumi.Input<number>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * The amount of leeway to add to not before (nbf) claims to account for clock skew, in seconds. Defaults to 150 seconds if
     * set to 0 and can be disabled if set to -1. Only applicable with 'jwt' roles.
     */
    notBeforeLeeway?: pulumi.Input<number>;
    /**
     * List of OIDC scopes to be used with an OIDC role. The standard scope "openid" is automatically included and need not be
     * specified.
     */
    oidcScopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the role.
     */
    roleName: pulumi.Input<string>;
    /**
     * Type of role, either "oidc" (default) or "jwt"
     */
    roleType?: pulumi.Input<string>;
    /**
     * Specifies the blocks of IP addresses which are allowed to use the generated token
     */
    tokenBoundCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Generated Token's Explicit Maximum TTL in seconds
     */
    tokenExplicitMaxTtl?: pulumi.Input<number>;
    /**
     * The maximum lifetime of the generated token
     */
    tokenMaxTtl?: pulumi.Input<number>;
    /**
     * If true, the 'default' policy will not automatically be added to generated tokens
     */
    tokenNoDefaultPolicy?: pulumi.Input<boolean>;
    /**
     * The maximum number of times a token may be used, a value of zero means unlimited
     */
    tokenNumUses?: pulumi.Input<number>;
    /**
     * Generated Token's Period
     */
    tokenPeriod?: pulumi.Input<number>;
    /**
     * Generated Token's Policies
     */
    tokenPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The initial ttl of the token to generate in seconds
     */
    tokenTtl?: pulumi.Input<number>;
    /**
     * The type of token to generate, service or batch
     */
    tokenType?: pulumi.Input<string>;
    /**
     * The claim to use to uniquely identify the user; this will be used as the name for the Identity entity alias created due
     * to a successful login.
     */
    userClaim: pulumi.Input<string>;
    /**
     * Specifies if the user_claim value uses JSON pointer syntax for referencing claims. By default, the user_claim value will
     * not use JSON pointer.
     */
    userClaimJsonPointer?: pulumi.Input<boolean>;
    /**
     * Log received OIDC tokens and claims when debug-level logging is active. Not recommended in production since sensitive
     * information may be present in OIDC responses.
     */
    verboseOidcLogging?: pulumi.Input<boolean>;
}
