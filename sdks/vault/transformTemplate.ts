// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class TransformTemplate extends pulumi.CustomResource {
    /**
     * Get an existing TransformTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TransformTemplateState, opts?: pulumi.CustomResourceOptions): TransformTemplate {
        return new TransformTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:index/transformTemplate:TransformTemplate';

    /**
     * Returns true if the given object is an instance of TransformTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TransformTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TransformTemplate.__pulumiType;
    }

    /**
     * The alphabet to use for this template. This is only used during FPE transformations.
     */
    public readonly alphabet!: pulumi.Output<string | undefined>;
    /**
     * The map of regular expression templates used to customize decoded outputs. Only applicable to FPE transformations.
     */
    public readonly decodeFormats!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The regular expression template used for encoding values. Only applicable to FPE transformations.
     */
    public readonly encodeFormat!: pulumi.Output<string | undefined>;
    /**
     * The name of the template.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * The mount path for a back-end, for example, the path given in "$ vault auth enable -path=my-aws aws".
     */
    public readonly path!: pulumi.Output<string>;
    /**
     * The pattern used for matching. Currently, only regular expression pattern is supported.
     */
    public readonly pattern!: pulumi.Output<string | undefined>;
    /**
     * The pattern type to use for match detection. Currently, only regex is supported.
     */
    public readonly type!: pulumi.Output<string | undefined>;

    /**
     * Create a TransformTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TransformTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TransformTemplateArgs | TransformTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TransformTemplateState | undefined;
            resourceInputs["alphabet"] = state ? state.alphabet : undefined;
            resourceInputs["decodeFormats"] = state ? state.decodeFormats : undefined;
            resourceInputs["encodeFormat"] = state ? state.encodeFormat : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["pattern"] = state ? state.pattern : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as TransformTemplateArgs | undefined;
            if ((!args || args.path === undefined) && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            resourceInputs["alphabet"] = args ? args.alphabet : undefined;
            resourceInputs["decodeFormats"] = args ? args.decodeFormats : undefined;
            resourceInputs["encodeFormat"] = args ? args.encodeFormat : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["pattern"] = args ? args.pattern : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TransformTemplate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering TransformTemplate resources.
 */
export interface TransformTemplateState {
    /**
     * The alphabet to use for this template. This is only used during FPE transformations.
     */
    alphabet?: pulumi.Input<string>;
    /**
     * The map of regular expression templates used to customize decoded outputs. Only applicable to FPE transformations.
     */
    decodeFormats?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The regular expression template used for encoding values. Only applicable to FPE transformations.
     */
    encodeFormat?: pulumi.Input<string>;
    /**
     * The name of the template.
     */
    name?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * The mount path for a back-end, for example, the path given in "$ vault auth enable -path=my-aws aws".
     */
    path?: pulumi.Input<string>;
    /**
     * The pattern used for matching. Currently, only regular expression pattern is supported.
     */
    pattern?: pulumi.Input<string>;
    /**
     * The pattern type to use for match detection. Currently, only regex is supported.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TransformTemplate resource.
 */
export interface TransformTemplateArgs {
    /**
     * The alphabet to use for this template. This is only used during FPE transformations.
     */
    alphabet?: pulumi.Input<string>;
    /**
     * The map of regular expression templates used to customize decoded outputs. Only applicable to FPE transformations.
     */
    decodeFormats?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The regular expression template used for encoding values. Only applicable to FPE transformations.
     */
    encodeFormat?: pulumi.Input<string>;
    /**
     * The name of the template.
     */
    name?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * The mount path for a back-end, for example, the path given in "$ vault auth enable -path=my-aws aws".
     */
    path: pulumi.Input<string>;
    /**
     * The pattern used for matching. Currently, only regular expression pattern is supported.
     */
    pattern?: pulumi.Input<string>;
    /**
     * The pattern type to use for match detection. Currently, only regex is supported.
     */
    type?: pulumi.Input<string>;
}
