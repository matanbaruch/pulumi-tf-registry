// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SshSecretBackendCa extends pulumi.CustomResource {
    /**
     * Get an existing SshSecretBackendCa resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SshSecretBackendCaState, opts?: pulumi.CustomResourceOptions): SshSecretBackendCa {
        return new SshSecretBackendCa(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:index/sshSecretBackendCa:SshSecretBackendCa';

    /**
     * Returns true if the given object is an instance of SshSecretBackendCa.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SshSecretBackendCa {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SshSecretBackendCa.__pulumiType;
    }

    /**
     * The path of the SSH Secret Backend where the CA should be configured
     */
    public readonly backend!: pulumi.Output<string | undefined>;
    /**
     * Whether Vault should generate the signing key pair internally.
     */
    public readonly generateSigningKey!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the desired key bits for the generated SSH CA key when `generate_signing_key` is set to `true`.
     */
    public readonly keyBits!: pulumi.Output<number | undefined>;
    /**
     * Specifies the desired key type for the generated SSH CA key when `generate_signing_key` is set to `true`.
     */
    public readonly keyType!: pulumi.Output<string | undefined>;
    /**
     * Target namespace. (requires Enterprise)
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * Private key part the SSH CA key pair; required if generate_signing_key is false.
     */
    public readonly privateKey!: pulumi.Output<string>;
    /**
     * Public key part the SSH CA key pair; required if generate_signing_key is false.
     */
    public readonly publicKey!: pulumi.Output<string>;

    /**
     * Create a SshSecretBackendCa resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SshSecretBackendCaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SshSecretBackendCaArgs | SshSecretBackendCaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SshSecretBackendCaState | undefined;
            resourceInputs["backend"] = state ? state.backend : undefined;
            resourceInputs["generateSigningKey"] = state ? state.generateSigningKey : undefined;
            resourceInputs["keyBits"] = state ? state.keyBits : undefined;
            resourceInputs["keyType"] = state ? state.keyType : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["publicKey"] = state ? state.publicKey : undefined;
        } else {
            const args = argsOrState as SshSecretBackendCaArgs | undefined;
            resourceInputs["backend"] = args ? args.backend : undefined;
            resourceInputs["generateSigningKey"] = args ? args.generateSigningKey : undefined;
            resourceInputs["keyBits"] = args ? args.keyBits : undefined;
            resourceInputs["keyType"] = args ? args.keyType : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["privateKey"] = args?.privateKey ? pulumi.secret(args.privateKey) : undefined;
            resourceInputs["publicKey"] = args ? args.publicKey : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["privateKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SshSecretBackendCa.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SshSecretBackendCa resources.
 */
export interface SshSecretBackendCaState {
    /**
     * The path of the SSH Secret Backend where the CA should be configured
     */
    backend?: pulumi.Input<string>;
    /**
     * Whether Vault should generate the signing key pair internally.
     */
    generateSigningKey?: pulumi.Input<boolean>;
    /**
     * Specifies the desired key bits for the generated SSH CA key when `generate_signing_key` is set to `true`.
     */
    keyBits?: pulumi.Input<number>;
    /**
     * Specifies the desired key type for the generated SSH CA key when `generate_signing_key` is set to `true`.
     */
    keyType?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Private key part the SSH CA key pair; required if generate_signing_key is false.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * Public key part the SSH CA key pair; required if generate_signing_key is false.
     */
    publicKey?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SshSecretBackendCa resource.
 */
export interface SshSecretBackendCaArgs {
    /**
     * The path of the SSH Secret Backend where the CA should be configured
     */
    backend?: pulumi.Input<string>;
    /**
     * Whether Vault should generate the signing key pair internally.
     */
    generateSigningKey?: pulumi.Input<boolean>;
    /**
     * Specifies the desired key bits for the generated SSH CA key when `generate_signing_key` is set to `true`.
     */
    keyBits?: pulumi.Input<number>;
    /**
     * Specifies the desired key type for the generated SSH CA key when `generate_signing_key` is set to `true`.
     */
    keyType?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Private key part the SSH CA key pair; required if generate_signing_key is false.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * Public key part the SSH CA key pair; required if generate_signing_key is false.
     */
    publicKey?: pulumi.Input<string>;
}
