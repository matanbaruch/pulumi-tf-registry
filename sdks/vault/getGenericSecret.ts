// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getGenericSecret(args: GetGenericSecretArgs, opts?: pulumi.InvokeOptions): Promise<GetGenericSecretResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vault:index/getGenericSecret:getGenericSecret", {
        "id": args.id,
        "namespace": args.namespace,
        "path": args.path,
        "version": args.version,
        "withLeaseStartTime": args.withLeaseStartTime,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getGenericSecret.
 */
export interface GetGenericSecretArgs {
    id?: string;
    namespace?: string;
    path: string;
    version?: number;
    withLeaseStartTime?: boolean;
}

/**
 * A collection of values returned by getGenericSecret.
 */
export interface GetGenericSecretResult {
    readonly data: {[key: string]: string};
    readonly dataJson: string;
    readonly id: string;
    readonly leaseDuration: number;
    readonly leaseId: string;
    readonly leaseRenewable: boolean;
    readonly leaseStartTime: string;
    readonly namespace?: string;
    readonly path: string;
    readonly version?: number;
    readonly withLeaseStartTime?: boolean;
}
export function getGenericSecretOutput(args: GetGenericSecretOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGenericSecretResult> {
    return pulumi.output(args).apply((a: any) => getGenericSecret(a, opts))
}

/**
 * A collection of arguments for invoking getGenericSecret.
 */
export interface GetGenericSecretOutputArgs {
    id?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    path: pulumi.Input<string>;
    version?: pulumi.Input<number>;
    withLeaseStartTime?: pulumi.Input<boolean>;
}
