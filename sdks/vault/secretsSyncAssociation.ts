// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SecretsSyncAssociation extends pulumi.CustomResource {
    /**
     * Get an existing SecretsSyncAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretsSyncAssociationState, opts?: pulumi.CustomResourceOptions): SecretsSyncAssociation {
        return new SecretsSyncAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:index/secretsSyncAssociation:SecretsSyncAssociation';

    /**
     * Returns true if the given object is an instance of SecretsSyncAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecretsSyncAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretsSyncAssociation.__pulumiType;
    }

    /**
     * Metadata for each subkey of the associated secret.
     */
    public /*out*/ readonly metadatas!: pulumi.Output<outputs.SecretsSyncAssociationMetadata[]>;
    /**
     * Specifies the mount where the secret is located.
     */
    public readonly mount!: pulumi.Output<string>;
    /**
     * Name of the destination.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * Specifies the name of the secret to synchronize.
     */
    public readonly secretName!: pulumi.Output<string>;
    /**
     * Type of sync destination.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a SecretsSyncAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecretsSyncAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretsSyncAssociationArgs | SecretsSyncAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretsSyncAssociationState | undefined;
            resourceInputs["metadatas"] = state ? state.metadatas : undefined;
            resourceInputs["mount"] = state ? state.mount : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["secretName"] = state ? state.secretName : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as SecretsSyncAssociationArgs | undefined;
            if ((!args || args.mount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mount'");
            }
            if ((!args || args.secretName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secretName'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["mount"] = args ? args.mount : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["secretName"] = args ? args.secretName : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["metadatas"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecretsSyncAssociation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SecretsSyncAssociation resources.
 */
export interface SecretsSyncAssociationState {
    /**
     * Metadata for each subkey of the associated secret.
     */
    metadatas?: pulumi.Input<pulumi.Input<inputs.SecretsSyncAssociationMetadata>[]>;
    /**
     * Specifies the mount where the secret is located.
     */
    mount?: pulumi.Input<string>;
    /**
     * Name of the destination.
     */
    name?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Specifies the name of the secret to synchronize.
     */
    secretName?: pulumi.Input<string>;
    /**
     * Type of sync destination.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecretsSyncAssociation resource.
 */
export interface SecretsSyncAssociationArgs {
    /**
     * Specifies the mount where the secret is located.
     */
    mount: pulumi.Input<string>;
    /**
     * Name of the destination.
     */
    name?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Specifies the name of the secret to synchronize.
     */
    secretName: pulumi.Input<string>;
    /**
     * Type of sync destination.
     */
    type: pulumi.Input<string>;
}
