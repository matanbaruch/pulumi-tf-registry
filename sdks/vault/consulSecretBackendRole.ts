// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ConsulSecretBackendRole extends pulumi.CustomResource {
    /**
     * Get an existing ConsulSecretBackendRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConsulSecretBackendRoleState, opts?: pulumi.CustomResourceOptions): ConsulSecretBackendRole {
        return new ConsulSecretBackendRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:index/consulSecretBackendRole:ConsulSecretBackendRole';

    /**
     * Returns true if the given object is an instance of ConsulSecretBackendRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConsulSecretBackendRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConsulSecretBackendRole.__pulumiType;
    }

    /**
     * The path of the Consul Secret Backend the role belongs to.
     */
    public readonly backend!: pulumi.Output<string | undefined>;
    /**
     * The Consul namespace that the token will be created in. Applicable for Vault 1.10+ and Consul 1.7+
     */
    public readonly consulNamespace!: pulumi.Output<string>;
    /**
     * List of Consul policies to associate with this role
     */
    public readonly consulPolicies!: pulumi.Output<string[] | undefined>;
    /**
     * Set of Consul roles to attach to the token. Applicable for Vault 1.10+ with Consul 1.5+
     */
    public readonly consulRoles!: pulumi.Output<string[] | undefined>;
    /**
     * Indicates that the token should not be replicated globally and instead be local to the current datacenter.
     */
    public readonly local!: pulumi.Output<boolean | undefined>;
    /**
     * Maximum TTL for leases associated with this role, in seconds.
     */
    public readonly maxTtl!: pulumi.Output<number | undefined>;
    /**
     * The name of an existing role against which to create this Consul credential
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * Set of Consul node identities to attach to the token. Applicable for Vault 1.11+ with Consul 1.8+
     */
    public readonly nodeIdentities!: pulumi.Output<string[] | undefined>;
    /**
     * The Consul admin partition that the token will be created in. Applicable for Vault 1.10+ and Consul 1.11+
     */
    public readonly partition!: pulumi.Output<string>;
    /**
     * List of Consul policies to associate with this role
     */
    public readonly policies!: pulumi.Output<string[] | undefined>;
    /**
     * Set of Consul service identities to attach to the token. Applicable for Vault 1.11+ with Consul 1.5+
     */
    public readonly serviceIdentities!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies the TTL for this role.
     */
    public readonly ttl!: pulumi.Output<number | undefined>;

    /**
     * Create a ConsulSecretBackendRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ConsulSecretBackendRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConsulSecretBackendRoleArgs | ConsulSecretBackendRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConsulSecretBackendRoleState | undefined;
            resourceInputs["backend"] = state ? state.backend : undefined;
            resourceInputs["consulNamespace"] = state ? state.consulNamespace : undefined;
            resourceInputs["consulPolicies"] = state ? state.consulPolicies : undefined;
            resourceInputs["consulRoles"] = state ? state.consulRoles : undefined;
            resourceInputs["local"] = state ? state.local : undefined;
            resourceInputs["maxTtl"] = state ? state.maxTtl : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["nodeIdentities"] = state ? state.nodeIdentities : undefined;
            resourceInputs["partition"] = state ? state.partition : undefined;
            resourceInputs["policies"] = state ? state.policies : undefined;
            resourceInputs["serviceIdentities"] = state ? state.serviceIdentities : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
        } else {
            const args = argsOrState as ConsulSecretBackendRoleArgs | undefined;
            resourceInputs["backend"] = args ? args.backend : undefined;
            resourceInputs["consulNamespace"] = args ? args.consulNamespace : undefined;
            resourceInputs["consulPolicies"] = args ? args.consulPolicies : undefined;
            resourceInputs["consulRoles"] = args ? args.consulRoles : undefined;
            resourceInputs["local"] = args ? args.local : undefined;
            resourceInputs["maxTtl"] = args ? args.maxTtl : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["nodeIdentities"] = args ? args.nodeIdentities : undefined;
            resourceInputs["partition"] = args ? args.partition : undefined;
            resourceInputs["policies"] = args ? args.policies : undefined;
            resourceInputs["serviceIdentities"] = args ? args.serviceIdentities : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConsulSecretBackendRole.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ConsulSecretBackendRole resources.
 */
export interface ConsulSecretBackendRoleState {
    /**
     * The path of the Consul Secret Backend the role belongs to.
     */
    backend?: pulumi.Input<string>;
    /**
     * The Consul namespace that the token will be created in. Applicable for Vault 1.10+ and Consul 1.7+
     */
    consulNamespace?: pulumi.Input<string>;
    /**
     * List of Consul policies to associate with this role
     */
    consulPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of Consul roles to attach to the token. Applicable for Vault 1.10+ with Consul 1.5+
     */
    consulRoles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates that the token should not be replicated globally and instead be local to the current datacenter.
     */
    local?: pulumi.Input<boolean>;
    /**
     * Maximum TTL for leases associated with this role, in seconds.
     */
    maxTtl?: pulumi.Input<number>;
    /**
     * The name of an existing role against which to create this Consul credential
     */
    name?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Set of Consul node identities to attach to the token. Applicable for Vault 1.11+ with Consul 1.8+
     */
    nodeIdentities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Consul admin partition that the token will be created in. Applicable for Vault 1.10+ and Consul 1.11+
     */
    partition?: pulumi.Input<string>;
    /**
     * List of Consul policies to associate with this role
     */
    policies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of Consul service identities to attach to the token. Applicable for Vault 1.11+ with Consul 1.5+
     */
    serviceIdentities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the TTL for this role.
     */
    ttl?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ConsulSecretBackendRole resource.
 */
export interface ConsulSecretBackendRoleArgs {
    /**
     * The path of the Consul Secret Backend the role belongs to.
     */
    backend?: pulumi.Input<string>;
    /**
     * The Consul namespace that the token will be created in. Applicable for Vault 1.10+ and Consul 1.7+
     */
    consulNamespace?: pulumi.Input<string>;
    /**
     * List of Consul policies to associate with this role
     */
    consulPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of Consul roles to attach to the token. Applicable for Vault 1.10+ with Consul 1.5+
     */
    consulRoles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates that the token should not be replicated globally and instead be local to the current datacenter.
     */
    local?: pulumi.Input<boolean>;
    /**
     * Maximum TTL for leases associated with this role, in seconds.
     */
    maxTtl?: pulumi.Input<number>;
    /**
     * The name of an existing role against which to create this Consul credential
     */
    name?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Set of Consul node identities to attach to the token. Applicable for Vault 1.11+ with Consul 1.8+
     */
    nodeIdentities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Consul admin partition that the token will be created in. Applicable for Vault 1.10+ and Consul 1.11+
     */
    partition?: pulumi.Input<string>;
    /**
     * List of Consul policies to associate with this role
     */
    policies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of Consul service identities to attach to the token. Applicable for Vault 1.11+ with Consul 1.5+
     */
    serviceIdentities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the TTL for this role.
     */
    ttl?: pulumi.Input<number>;
}
