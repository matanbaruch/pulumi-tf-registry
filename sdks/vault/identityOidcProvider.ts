// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class IdentityOidcProvider extends pulumi.CustomResource {
    /**
     * Get an existing IdentityOidcProvider resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IdentityOidcProviderState, opts?: pulumi.CustomResourceOptions): IdentityOidcProvider {
        return new IdentityOidcProvider(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:index/identityOidcProvider:IdentityOidcProvider';

    /**
     * Returns true if the given object is an instance of IdentityOidcProvider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IdentityOidcProvider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IdentityOidcProvider.__pulumiType;
    }

    /**
     * The client IDs that are permitted to use the provider. If empty, no clients are allowed. If "*", all clients are
     * allowed.
     */
    public readonly allowedClientIds!: pulumi.Output<string[] | undefined>;
    /**
     * Set to true if the issuer endpoint uses HTTPS.
     */
    public readonly httpsEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies what will be used as the 'scheme://host:port' component for the 'iss' claim of ID tokens.This value is
     * computed using the issuer_host and https_enabled fields.
     */
    public /*out*/ readonly issuer!: pulumi.Output<string>;
    /**
     * The host for the issuer. Can be either host or host:port.
     */
    public readonly issuerHost!: pulumi.Output<string | undefined>;
    /**
     * The name of the provider.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * The scopes available for requesting on the provider.
     */
    public readonly scopesSupporteds!: pulumi.Output<string[] | undefined>;

    /**
     * Create a IdentityOidcProvider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: IdentityOidcProviderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IdentityOidcProviderArgs | IdentityOidcProviderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IdentityOidcProviderState | undefined;
            resourceInputs["allowedClientIds"] = state ? state.allowedClientIds : undefined;
            resourceInputs["httpsEnabled"] = state ? state.httpsEnabled : undefined;
            resourceInputs["issuer"] = state ? state.issuer : undefined;
            resourceInputs["issuerHost"] = state ? state.issuerHost : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["scopesSupporteds"] = state ? state.scopesSupporteds : undefined;
        } else {
            const args = argsOrState as IdentityOidcProviderArgs | undefined;
            resourceInputs["allowedClientIds"] = args ? args.allowedClientIds : undefined;
            resourceInputs["httpsEnabled"] = args ? args.httpsEnabled : undefined;
            resourceInputs["issuerHost"] = args ? args.issuerHost : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["scopesSupporteds"] = args ? args.scopesSupporteds : undefined;
            resourceInputs["issuer"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IdentityOidcProvider.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IdentityOidcProvider resources.
 */
export interface IdentityOidcProviderState {
    /**
     * The client IDs that are permitted to use the provider. If empty, no clients are allowed. If "*", all clients are
     * allowed.
     */
    allowedClientIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set to true if the issuer endpoint uses HTTPS.
     */
    httpsEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies what will be used as the 'scheme://host:port' component for the 'iss' claim of ID tokens.This value is
     * computed using the issuer_host and https_enabled fields.
     */
    issuer?: pulumi.Input<string>;
    /**
     * The host for the issuer. Can be either host or host:port.
     */
    issuerHost?: pulumi.Input<string>;
    /**
     * The name of the provider.
     */
    name?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * The scopes available for requesting on the provider.
     */
    scopesSupporteds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a IdentityOidcProvider resource.
 */
export interface IdentityOidcProviderArgs {
    /**
     * The client IDs that are permitted to use the provider. If empty, no clients are allowed. If "*", all clients are
     * allowed.
     */
    allowedClientIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set to true if the issuer endpoint uses HTTPS.
     */
    httpsEnabled?: pulumi.Input<boolean>;
    /**
     * The host for the issuer. Can be either host or host:port.
     */
    issuerHost?: pulumi.Input<string>;
    /**
     * The name of the provider.
     */
    name?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * The scopes available for requesting on the provider.
     */
    scopesSupporteds?: pulumi.Input<pulumi.Input<string>[]>;
}
