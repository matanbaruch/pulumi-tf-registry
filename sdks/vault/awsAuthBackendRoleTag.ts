// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AwsAuthBackendRoleTag extends pulumi.CustomResource {
    /**
     * Get an existing AwsAuthBackendRoleTag resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AwsAuthBackendRoleTagState, opts?: pulumi.CustomResourceOptions): AwsAuthBackendRoleTag {
        return new AwsAuthBackendRoleTag(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:index/awsAuthBackendRoleTag:AwsAuthBackendRoleTag';

    /**
     * Returns true if the given object is an instance of AwsAuthBackendRoleTag.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AwsAuthBackendRoleTag {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AwsAuthBackendRoleTag.__pulumiType;
    }

    /**
     * Allows migration of the underlying instance where the client resides.
     */
    public readonly allowInstanceMigration!: pulumi.Output<boolean | undefined>;
    /**
     * AWS auth backend to read tags from.
     */
    public readonly backend!: pulumi.Output<string | undefined>;
    /**
     * Only allow a single token to be granted per instance ID.
     */
    public readonly disallowReauthentication!: pulumi.Output<boolean | undefined>;
    /**
     * Instance ID for which this tag is intended. The created tag can only be used by the instance with the given ID.
     */
    public readonly instanceId!: pulumi.Output<string | undefined>;
    /**
     * The maximum allowed lifetime of tokens issued using this role.
     */
    public readonly maxTtl!: pulumi.Output<string | undefined>;
    /**
     * Target namespace. (requires Enterprise)
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * Policies to be associated with the tag.
     */
    public readonly policies!: pulumi.Output<string[] | undefined>;
    /**
     * Name of the role.
     */
    public readonly role!: pulumi.Output<string>;
    public /*out*/ readonly tagKey!: pulumi.Output<string>;
    public /*out*/ readonly tagValue!: pulumi.Output<string>;

    /**
     * Create a AwsAuthBackendRoleTag resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AwsAuthBackendRoleTagArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AwsAuthBackendRoleTagArgs | AwsAuthBackendRoleTagState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AwsAuthBackendRoleTagState | undefined;
            resourceInputs["allowInstanceMigration"] = state ? state.allowInstanceMigration : undefined;
            resourceInputs["backend"] = state ? state.backend : undefined;
            resourceInputs["disallowReauthentication"] = state ? state.disallowReauthentication : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["maxTtl"] = state ? state.maxTtl : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["policies"] = state ? state.policies : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["tagKey"] = state ? state.tagKey : undefined;
            resourceInputs["tagValue"] = state ? state.tagValue : undefined;
        } else {
            const args = argsOrState as AwsAuthBackendRoleTagArgs | undefined;
            if ((!args || args.role === undefined) && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            resourceInputs["allowInstanceMigration"] = args ? args.allowInstanceMigration : undefined;
            resourceInputs["backend"] = args ? args.backend : undefined;
            resourceInputs["disallowReauthentication"] = args ? args.disallowReauthentication : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["maxTtl"] = args ? args.maxTtl : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["policies"] = args ? args.policies : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["tagKey"] = undefined /*out*/;
            resourceInputs["tagValue"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AwsAuthBackendRoleTag.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AwsAuthBackendRoleTag resources.
 */
export interface AwsAuthBackendRoleTagState {
    /**
     * Allows migration of the underlying instance where the client resides.
     */
    allowInstanceMigration?: pulumi.Input<boolean>;
    /**
     * AWS auth backend to read tags from.
     */
    backend?: pulumi.Input<string>;
    /**
     * Only allow a single token to be granted per instance ID.
     */
    disallowReauthentication?: pulumi.Input<boolean>;
    /**
     * Instance ID for which this tag is intended. The created tag can only be used by the instance with the given ID.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The maximum allowed lifetime of tokens issued using this role.
     */
    maxTtl?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Policies to be associated with the tag.
     */
    policies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the role.
     */
    role?: pulumi.Input<string>;
    tagKey?: pulumi.Input<string>;
    tagValue?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AwsAuthBackendRoleTag resource.
 */
export interface AwsAuthBackendRoleTagArgs {
    /**
     * Allows migration of the underlying instance where the client resides.
     */
    allowInstanceMigration?: pulumi.Input<boolean>;
    /**
     * AWS auth backend to read tags from.
     */
    backend?: pulumi.Input<string>;
    /**
     * Only allow a single token to be granted per instance ID.
     */
    disallowReauthentication?: pulumi.Input<boolean>;
    /**
     * Instance ID for which this tag is intended. The created tag can only be used by the instance with the given ID.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The maximum allowed lifetime of tokens issued using this role.
     */
    maxTtl?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Policies to be associated with the tag.
     */
    policies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the role.
     */
    role: pulumi.Input<string>;
}
