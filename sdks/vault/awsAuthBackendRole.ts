// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AwsAuthBackendRole extends pulumi.CustomResource {
    /**
     * Get an existing AwsAuthBackendRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AwsAuthBackendRoleState, opts?: pulumi.CustomResourceOptions): AwsAuthBackendRole {
        return new AwsAuthBackendRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:index/awsAuthBackendRole:AwsAuthBackendRole';

    /**
     * Returns true if the given object is an instance of AwsAuthBackendRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AwsAuthBackendRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AwsAuthBackendRole.__pulumiType;
    }

    /**
     * When true, allows migration of the underlying instance where the client resides. Use with caution.
     */
    public readonly allowInstanceMigration!: pulumi.Output<boolean | undefined>;
    /**
     * The auth type permitted for this role.
     */
    public readonly authType!: pulumi.Output<string | undefined>;
    /**
     * Unique name of the auth backend to configure.
     */
    public readonly backend!: pulumi.Output<string | undefined>;
    /**
     * Only EC2 instances with this account ID in their identity document will be permitted to log in.
     */
    public readonly boundAccountIds!: pulumi.Output<string[] | undefined>;
    /**
     * Only EC2 instances using this AMI ID will be permitted to log in.
     */
    public readonly boundAmiIds!: pulumi.Output<string[] | undefined>;
    /**
     * Only EC2 instances that match this instance ID will be permitted to log in.
     */
    public readonly boundEc2InstanceIds!: pulumi.Output<string[] | undefined>;
    /**
     * Only EC2 instances associated with an IAM instance profile ARN that matches this value will be permitted to log in.
     */
    public readonly boundIamInstanceProfileArns!: pulumi.Output<string[] | undefined>;
    /**
     * The IAM principal that must be authenticated using the iam auth method.
     */
    public readonly boundIamPrincipalArns!: pulumi.Output<string[] | undefined>;
    /**
     * Only EC2 instances that match this IAM role ARN will be permitted to log in.
     */
    public readonly boundIamRoleArns!: pulumi.Output<string[] | undefined>;
    /**
     * Only EC2 instances in this region will be permitted to log in.
     */
    public readonly boundRegions!: pulumi.Output<string[] | undefined>;
    /**
     * Only EC2 instances associated with this subnet ID will be permitted to log in.
     */
    public readonly boundSubnetIds!: pulumi.Output<string[] | undefined>;
    /**
     * Only EC2 instances associated with this VPC ID will be permitted to log in.
     */
    public readonly boundVpcIds!: pulumi.Output<string[] | undefined>;
    /**
     * When true, only allows a single token to be granted per instance ID.
     */
    public readonly disallowReauthentication!: pulumi.Output<boolean | undefined>;
    /**
     * The region to search for the inferred entities in.
     */
    public readonly inferredAwsRegion!: pulumi.Output<string | undefined>;
    /**
     * The type of inferencing Vault should do.
     */
    public readonly inferredEntityType!: pulumi.Output<string | undefined>;
    /**
     * Target namespace. (requires Enterprise)
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * Whether or not Vault should resolve the bound_iam_principal_arn to an AWS Unique ID. When true, deleting a principal and
     * recreating it with the same name won't automatically grant the new principal the same roles in Vault that the old
     * principal had.
     */
    public readonly resolveAwsUniqueIds!: pulumi.Output<boolean | undefined>;
    /**
     * Name of the role.
     */
    public readonly role!: pulumi.Output<string>;
    /**
     * The Vault generated role ID.
     */
    public /*out*/ readonly roleId!: pulumi.Output<string>;
    /**
     * The key of the tag on EC2 instance to use for role tags.
     */
    public readonly roleTag!: pulumi.Output<string | undefined>;
    /**
     * Specifies the blocks of IP addresses which are allowed to use the generated token
     */
    public readonly tokenBoundCidrs!: pulumi.Output<string[] | undefined>;
    /**
     * Generated Token's Explicit Maximum TTL in seconds
     */
    public readonly tokenExplicitMaxTtl!: pulumi.Output<number | undefined>;
    /**
     * The maximum lifetime of the generated token
     */
    public readonly tokenMaxTtl!: pulumi.Output<number | undefined>;
    /**
     * If true, the 'default' policy will not automatically be added to generated tokens
     */
    public readonly tokenNoDefaultPolicy!: pulumi.Output<boolean | undefined>;
    /**
     * The maximum number of times a token may be used, a value of zero means unlimited
     */
    public readonly tokenNumUses!: pulumi.Output<number | undefined>;
    /**
     * Generated Token's Period
     */
    public readonly tokenPeriod!: pulumi.Output<number | undefined>;
    /**
     * Generated Token's Policies
     */
    public readonly tokenPolicies!: pulumi.Output<string[] | undefined>;
    /**
     * The initial ttl of the token to generate in seconds
     */
    public readonly tokenTtl!: pulumi.Output<number | undefined>;
    /**
     * The type of token to generate, service or batch
     */
    public readonly tokenType!: pulumi.Output<string | undefined>;

    /**
     * Create a AwsAuthBackendRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AwsAuthBackendRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AwsAuthBackendRoleArgs | AwsAuthBackendRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AwsAuthBackendRoleState | undefined;
            resourceInputs["allowInstanceMigration"] = state ? state.allowInstanceMigration : undefined;
            resourceInputs["authType"] = state ? state.authType : undefined;
            resourceInputs["backend"] = state ? state.backend : undefined;
            resourceInputs["boundAccountIds"] = state ? state.boundAccountIds : undefined;
            resourceInputs["boundAmiIds"] = state ? state.boundAmiIds : undefined;
            resourceInputs["boundEc2InstanceIds"] = state ? state.boundEc2InstanceIds : undefined;
            resourceInputs["boundIamInstanceProfileArns"] = state ? state.boundIamInstanceProfileArns : undefined;
            resourceInputs["boundIamPrincipalArns"] = state ? state.boundIamPrincipalArns : undefined;
            resourceInputs["boundIamRoleArns"] = state ? state.boundIamRoleArns : undefined;
            resourceInputs["boundRegions"] = state ? state.boundRegions : undefined;
            resourceInputs["boundSubnetIds"] = state ? state.boundSubnetIds : undefined;
            resourceInputs["boundVpcIds"] = state ? state.boundVpcIds : undefined;
            resourceInputs["disallowReauthentication"] = state ? state.disallowReauthentication : undefined;
            resourceInputs["inferredAwsRegion"] = state ? state.inferredAwsRegion : undefined;
            resourceInputs["inferredEntityType"] = state ? state.inferredEntityType : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["resolveAwsUniqueIds"] = state ? state.resolveAwsUniqueIds : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["roleId"] = state ? state.roleId : undefined;
            resourceInputs["roleTag"] = state ? state.roleTag : undefined;
            resourceInputs["tokenBoundCidrs"] = state ? state.tokenBoundCidrs : undefined;
            resourceInputs["tokenExplicitMaxTtl"] = state ? state.tokenExplicitMaxTtl : undefined;
            resourceInputs["tokenMaxTtl"] = state ? state.tokenMaxTtl : undefined;
            resourceInputs["tokenNoDefaultPolicy"] = state ? state.tokenNoDefaultPolicy : undefined;
            resourceInputs["tokenNumUses"] = state ? state.tokenNumUses : undefined;
            resourceInputs["tokenPeriod"] = state ? state.tokenPeriod : undefined;
            resourceInputs["tokenPolicies"] = state ? state.tokenPolicies : undefined;
            resourceInputs["tokenTtl"] = state ? state.tokenTtl : undefined;
            resourceInputs["tokenType"] = state ? state.tokenType : undefined;
        } else {
            const args = argsOrState as AwsAuthBackendRoleArgs | undefined;
            if ((!args || args.role === undefined) && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            resourceInputs["allowInstanceMigration"] = args ? args.allowInstanceMigration : undefined;
            resourceInputs["authType"] = args ? args.authType : undefined;
            resourceInputs["backend"] = args ? args.backend : undefined;
            resourceInputs["boundAccountIds"] = args ? args.boundAccountIds : undefined;
            resourceInputs["boundAmiIds"] = args ? args.boundAmiIds : undefined;
            resourceInputs["boundEc2InstanceIds"] = args ? args.boundEc2InstanceIds : undefined;
            resourceInputs["boundIamInstanceProfileArns"] = args ? args.boundIamInstanceProfileArns : undefined;
            resourceInputs["boundIamPrincipalArns"] = args ? args.boundIamPrincipalArns : undefined;
            resourceInputs["boundIamRoleArns"] = args ? args.boundIamRoleArns : undefined;
            resourceInputs["boundRegions"] = args ? args.boundRegions : undefined;
            resourceInputs["boundSubnetIds"] = args ? args.boundSubnetIds : undefined;
            resourceInputs["boundVpcIds"] = args ? args.boundVpcIds : undefined;
            resourceInputs["disallowReauthentication"] = args ? args.disallowReauthentication : undefined;
            resourceInputs["inferredAwsRegion"] = args ? args.inferredAwsRegion : undefined;
            resourceInputs["inferredEntityType"] = args ? args.inferredEntityType : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["resolveAwsUniqueIds"] = args ? args.resolveAwsUniqueIds : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["roleTag"] = args ? args.roleTag : undefined;
            resourceInputs["tokenBoundCidrs"] = args ? args.tokenBoundCidrs : undefined;
            resourceInputs["tokenExplicitMaxTtl"] = args ? args.tokenExplicitMaxTtl : undefined;
            resourceInputs["tokenMaxTtl"] = args ? args.tokenMaxTtl : undefined;
            resourceInputs["tokenNoDefaultPolicy"] = args ? args.tokenNoDefaultPolicy : undefined;
            resourceInputs["tokenNumUses"] = args ? args.tokenNumUses : undefined;
            resourceInputs["tokenPeriod"] = args ? args.tokenPeriod : undefined;
            resourceInputs["tokenPolicies"] = args ? args.tokenPolicies : undefined;
            resourceInputs["tokenTtl"] = args ? args.tokenTtl : undefined;
            resourceInputs["tokenType"] = args ? args.tokenType : undefined;
            resourceInputs["roleId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AwsAuthBackendRole.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AwsAuthBackendRole resources.
 */
export interface AwsAuthBackendRoleState {
    /**
     * When true, allows migration of the underlying instance where the client resides. Use with caution.
     */
    allowInstanceMigration?: pulumi.Input<boolean>;
    /**
     * The auth type permitted for this role.
     */
    authType?: pulumi.Input<string>;
    /**
     * Unique name of the auth backend to configure.
     */
    backend?: pulumi.Input<string>;
    /**
     * Only EC2 instances with this account ID in their identity document will be permitted to log in.
     */
    boundAccountIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Only EC2 instances using this AMI ID will be permitted to log in.
     */
    boundAmiIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Only EC2 instances that match this instance ID will be permitted to log in.
     */
    boundEc2InstanceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Only EC2 instances associated with an IAM instance profile ARN that matches this value will be permitted to log in.
     */
    boundIamInstanceProfileArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The IAM principal that must be authenticated using the iam auth method.
     */
    boundIamPrincipalArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Only EC2 instances that match this IAM role ARN will be permitted to log in.
     */
    boundIamRoleArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Only EC2 instances in this region will be permitted to log in.
     */
    boundRegions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Only EC2 instances associated with this subnet ID will be permitted to log in.
     */
    boundSubnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Only EC2 instances associated with this VPC ID will be permitted to log in.
     */
    boundVpcIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When true, only allows a single token to be granted per instance ID.
     */
    disallowReauthentication?: pulumi.Input<boolean>;
    /**
     * The region to search for the inferred entities in.
     */
    inferredAwsRegion?: pulumi.Input<string>;
    /**
     * The type of inferencing Vault should do.
     */
    inferredEntityType?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Whether or not Vault should resolve the bound_iam_principal_arn to an AWS Unique ID. When true, deleting a principal and
     * recreating it with the same name won't automatically grant the new principal the same roles in Vault that the old
     * principal had.
     */
    resolveAwsUniqueIds?: pulumi.Input<boolean>;
    /**
     * Name of the role.
     */
    role?: pulumi.Input<string>;
    /**
     * The Vault generated role ID.
     */
    roleId?: pulumi.Input<string>;
    /**
     * The key of the tag on EC2 instance to use for role tags.
     */
    roleTag?: pulumi.Input<string>;
    /**
     * Specifies the blocks of IP addresses which are allowed to use the generated token
     */
    tokenBoundCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Generated Token's Explicit Maximum TTL in seconds
     */
    tokenExplicitMaxTtl?: pulumi.Input<number>;
    /**
     * The maximum lifetime of the generated token
     */
    tokenMaxTtl?: pulumi.Input<number>;
    /**
     * If true, the 'default' policy will not automatically be added to generated tokens
     */
    tokenNoDefaultPolicy?: pulumi.Input<boolean>;
    /**
     * The maximum number of times a token may be used, a value of zero means unlimited
     */
    tokenNumUses?: pulumi.Input<number>;
    /**
     * Generated Token's Period
     */
    tokenPeriod?: pulumi.Input<number>;
    /**
     * Generated Token's Policies
     */
    tokenPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The initial ttl of the token to generate in seconds
     */
    tokenTtl?: pulumi.Input<number>;
    /**
     * The type of token to generate, service or batch
     */
    tokenType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AwsAuthBackendRole resource.
 */
export interface AwsAuthBackendRoleArgs {
    /**
     * When true, allows migration of the underlying instance where the client resides. Use with caution.
     */
    allowInstanceMigration?: pulumi.Input<boolean>;
    /**
     * The auth type permitted for this role.
     */
    authType?: pulumi.Input<string>;
    /**
     * Unique name of the auth backend to configure.
     */
    backend?: pulumi.Input<string>;
    /**
     * Only EC2 instances with this account ID in their identity document will be permitted to log in.
     */
    boundAccountIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Only EC2 instances using this AMI ID will be permitted to log in.
     */
    boundAmiIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Only EC2 instances that match this instance ID will be permitted to log in.
     */
    boundEc2InstanceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Only EC2 instances associated with an IAM instance profile ARN that matches this value will be permitted to log in.
     */
    boundIamInstanceProfileArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The IAM principal that must be authenticated using the iam auth method.
     */
    boundIamPrincipalArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Only EC2 instances that match this IAM role ARN will be permitted to log in.
     */
    boundIamRoleArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Only EC2 instances in this region will be permitted to log in.
     */
    boundRegions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Only EC2 instances associated with this subnet ID will be permitted to log in.
     */
    boundSubnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Only EC2 instances associated with this VPC ID will be permitted to log in.
     */
    boundVpcIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When true, only allows a single token to be granted per instance ID.
     */
    disallowReauthentication?: pulumi.Input<boolean>;
    /**
     * The region to search for the inferred entities in.
     */
    inferredAwsRegion?: pulumi.Input<string>;
    /**
     * The type of inferencing Vault should do.
     */
    inferredEntityType?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Whether or not Vault should resolve the bound_iam_principal_arn to an AWS Unique ID. When true, deleting a principal and
     * recreating it with the same name won't automatically grant the new principal the same roles in Vault that the old
     * principal had.
     */
    resolveAwsUniqueIds?: pulumi.Input<boolean>;
    /**
     * Name of the role.
     */
    role: pulumi.Input<string>;
    /**
     * The key of the tag on EC2 instance to use for role tags.
     */
    roleTag?: pulumi.Input<string>;
    /**
     * Specifies the blocks of IP addresses which are allowed to use the generated token
     */
    tokenBoundCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Generated Token's Explicit Maximum TTL in seconds
     */
    tokenExplicitMaxTtl?: pulumi.Input<number>;
    /**
     * The maximum lifetime of the generated token
     */
    tokenMaxTtl?: pulumi.Input<number>;
    /**
     * If true, the 'default' policy will not automatically be added to generated tokens
     */
    tokenNoDefaultPolicy?: pulumi.Input<boolean>;
    /**
     * The maximum number of times a token may be used, a value of zero means unlimited
     */
    tokenNumUses?: pulumi.Input<number>;
    /**
     * Generated Token's Period
     */
    tokenPeriod?: pulumi.Input<number>;
    /**
     * Generated Token's Policies
     */
    tokenPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The initial ttl of the token to generate in seconds
     */
    tokenTtl?: pulumi.Input<number>;
    /**
     * The type of token to generate, service or batch
     */
    tokenType?: pulumi.Input<string>;
}
