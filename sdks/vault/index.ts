// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AdSecretBackendArgs, AdSecretBackendState } from "./adSecretBackend";
export type AdSecretBackend = import("./adSecretBackend").AdSecretBackend;
export const AdSecretBackend: typeof import("./adSecretBackend").AdSecretBackend = null as any;
utilities.lazyLoad(exports, ["AdSecretBackend"], () => require("./adSecretBackend"));

export { AdSecretLibraryArgs, AdSecretLibraryState } from "./adSecretLibrary";
export type AdSecretLibrary = import("./adSecretLibrary").AdSecretLibrary;
export const AdSecretLibrary: typeof import("./adSecretLibrary").AdSecretLibrary = null as any;
utilities.lazyLoad(exports, ["AdSecretLibrary"], () => require("./adSecretLibrary"));

export { AdSecretRoleArgs, AdSecretRoleState } from "./adSecretRole";
export type AdSecretRole = import("./adSecretRole").AdSecretRole;
export const AdSecretRole: typeof import("./adSecretRole").AdSecretRole = null as any;
utilities.lazyLoad(exports, ["AdSecretRole"], () => require("./adSecretRole"));

export { AlicloudAuthBackendRoleArgs, AlicloudAuthBackendRoleState } from "./alicloudAuthBackendRole";
export type AlicloudAuthBackendRole = import("./alicloudAuthBackendRole").AlicloudAuthBackendRole;
export const AlicloudAuthBackendRole: typeof import("./alicloudAuthBackendRole").AlicloudAuthBackendRole = null as any;
utilities.lazyLoad(exports, ["AlicloudAuthBackendRole"], () => require("./alicloudAuthBackendRole"));

export { ApproleAuthBackendLoginArgs, ApproleAuthBackendLoginState } from "./approleAuthBackendLogin";
export type ApproleAuthBackendLogin = import("./approleAuthBackendLogin").ApproleAuthBackendLogin;
export const ApproleAuthBackendLogin: typeof import("./approleAuthBackendLogin").ApproleAuthBackendLogin = null as any;
utilities.lazyLoad(exports, ["ApproleAuthBackendLogin"], () => require("./approleAuthBackendLogin"));

export { ApproleAuthBackendRoleArgs, ApproleAuthBackendRoleState } from "./approleAuthBackendRole";
export type ApproleAuthBackendRole = import("./approleAuthBackendRole").ApproleAuthBackendRole;
export const ApproleAuthBackendRole: typeof import("./approleAuthBackendRole").ApproleAuthBackendRole = null as any;
utilities.lazyLoad(exports, ["ApproleAuthBackendRole"], () => require("./approleAuthBackendRole"));

export { ApproleAuthBackendRoleSecretIdArgs, ApproleAuthBackendRoleSecretIdState } from "./approleAuthBackendRoleSecretId";
export type ApproleAuthBackendRoleSecretId = import("./approleAuthBackendRoleSecretId").ApproleAuthBackendRoleSecretId;
export const ApproleAuthBackendRoleSecretId: typeof import("./approleAuthBackendRoleSecretId").ApproleAuthBackendRoleSecretId = null as any;
utilities.lazyLoad(exports, ["ApproleAuthBackendRoleSecretId"], () => require("./approleAuthBackendRoleSecretId"));

export { AuditArgs, AuditState } from "./audit";
export type Audit = import("./audit").Audit;
export const Audit: typeof import("./audit").Audit = null as any;
utilities.lazyLoad(exports, ["Audit"], () => require("./audit"));

export { AuditRequestHeaderArgs, AuditRequestHeaderState } from "./auditRequestHeader";
export type AuditRequestHeader = import("./auditRequestHeader").AuditRequestHeader;
export const AuditRequestHeader: typeof import("./auditRequestHeader").AuditRequestHeader = null as any;
utilities.lazyLoad(exports, ["AuditRequestHeader"], () => require("./auditRequestHeader"));

export { AuthBackendArgs, AuthBackendState } from "./authBackend";
export type AuthBackend = import("./authBackend").AuthBackend;
export const AuthBackend: typeof import("./authBackend").AuthBackend = null as any;
utilities.lazyLoad(exports, ["AuthBackend"], () => require("./authBackend"));

export { AwsAuthBackendCertArgs, AwsAuthBackendCertState } from "./awsAuthBackendCert";
export type AwsAuthBackendCert = import("./awsAuthBackendCert").AwsAuthBackendCert;
export const AwsAuthBackendCert: typeof import("./awsAuthBackendCert").AwsAuthBackendCert = null as any;
utilities.lazyLoad(exports, ["AwsAuthBackendCert"], () => require("./awsAuthBackendCert"));

export { AwsAuthBackendClientArgs, AwsAuthBackendClientState } from "./awsAuthBackendClient";
export type AwsAuthBackendClient = import("./awsAuthBackendClient").AwsAuthBackendClient;
export const AwsAuthBackendClient: typeof import("./awsAuthBackendClient").AwsAuthBackendClient = null as any;
utilities.lazyLoad(exports, ["AwsAuthBackendClient"], () => require("./awsAuthBackendClient"));

export { AwsAuthBackendConfigIdentityArgs, AwsAuthBackendConfigIdentityState } from "./awsAuthBackendConfigIdentity";
export type AwsAuthBackendConfigIdentity = import("./awsAuthBackendConfigIdentity").AwsAuthBackendConfigIdentity;
export const AwsAuthBackendConfigIdentity: typeof import("./awsAuthBackendConfigIdentity").AwsAuthBackendConfigIdentity = null as any;
utilities.lazyLoad(exports, ["AwsAuthBackendConfigIdentity"], () => require("./awsAuthBackendConfigIdentity"));

export { AwsAuthBackendIdentityWhitelistArgs, AwsAuthBackendIdentityWhitelistState } from "./awsAuthBackendIdentityWhitelist";
export type AwsAuthBackendIdentityWhitelist = import("./awsAuthBackendIdentityWhitelist").AwsAuthBackendIdentityWhitelist;
export const AwsAuthBackendIdentityWhitelist: typeof import("./awsAuthBackendIdentityWhitelist").AwsAuthBackendIdentityWhitelist = null as any;
utilities.lazyLoad(exports, ["AwsAuthBackendIdentityWhitelist"], () => require("./awsAuthBackendIdentityWhitelist"));

export { AwsAuthBackendLoginArgs, AwsAuthBackendLoginState } from "./awsAuthBackendLogin";
export type AwsAuthBackendLogin = import("./awsAuthBackendLogin").AwsAuthBackendLogin;
export const AwsAuthBackendLogin: typeof import("./awsAuthBackendLogin").AwsAuthBackendLogin = null as any;
utilities.lazyLoad(exports, ["AwsAuthBackendLogin"], () => require("./awsAuthBackendLogin"));

export { AwsAuthBackendRoleArgs, AwsAuthBackendRoleState } from "./awsAuthBackendRole";
export type AwsAuthBackendRole = import("./awsAuthBackendRole").AwsAuthBackendRole;
export const AwsAuthBackendRole: typeof import("./awsAuthBackendRole").AwsAuthBackendRole = null as any;
utilities.lazyLoad(exports, ["AwsAuthBackendRole"], () => require("./awsAuthBackendRole"));

export { AwsAuthBackendRoleTagArgs, AwsAuthBackendRoleTagState } from "./awsAuthBackendRoleTag";
export type AwsAuthBackendRoleTag = import("./awsAuthBackendRoleTag").AwsAuthBackendRoleTag;
export const AwsAuthBackendRoleTag: typeof import("./awsAuthBackendRoleTag").AwsAuthBackendRoleTag = null as any;
utilities.lazyLoad(exports, ["AwsAuthBackendRoleTag"], () => require("./awsAuthBackendRoleTag"));

export { AwsAuthBackendRoletagBlacklistArgs, AwsAuthBackendRoletagBlacklistState } from "./awsAuthBackendRoletagBlacklist";
export type AwsAuthBackendRoletagBlacklist = import("./awsAuthBackendRoletagBlacklist").AwsAuthBackendRoletagBlacklist;
export const AwsAuthBackendRoletagBlacklist: typeof import("./awsAuthBackendRoletagBlacklist").AwsAuthBackendRoletagBlacklist = null as any;
utilities.lazyLoad(exports, ["AwsAuthBackendRoletagBlacklist"], () => require("./awsAuthBackendRoletagBlacklist"));

export { AwsAuthBackendStsRoleArgs, AwsAuthBackendStsRoleState } from "./awsAuthBackendStsRole";
export type AwsAuthBackendStsRole = import("./awsAuthBackendStsRole").AwsAuthBackendStsRole;
export const AwsAuthBackendStsRole: typeof import("./awsAuthBackendStsRole").AwsAuthBackendStsRole = null as any;
utilities.lazyLoad(exports, ["AwsAuthBackendStsRole"], () => require("./awsAuthBackendStsRole"));

export { AwsSecretBackendArgs, AwsSecretBackendState } from "./awsSecretBackend";
export type AwsSecretBackend = import("./awsSecretBackend").AwsSecretBackend;
export const AwsSecretBackend: typeof import("./awsSecretBackend").AwsSecretBackend = null as any;
utilities.lazyLoad(exports, ["AwsSecretBackend"], () => require("./awsSecretBackend"));

export { AwsSecretBackendRoleArgs, AwsSecretBackendRoleState } from "./awsSecretBackendRole";
export type AwsSecretBackendRole = import("./awsSecretBackendRole").AwsSecretBackendRole;
export const AwsSecretBackendRole: typeof import("./awsSecretBackendRole").AwsSecretBackendRole = null as any;
utilities.lazyLoad(exports, ["AwsSecretBackendRole"], () => require("./awsSecretBackendRole"));

export { AwsSecretBackendStaticRoleArgs, AwsSecretBackendStaticRoleState } from "./awsSecretBackendStaticRole";
export type AwsSecretBackendStaticRole = import("./awsSecretBackendStaticRole").AwsSecretBackendStaticRole;
export const AwsSecretBackendStaticRole: typeof import("./awsSecretBackendStaticRole").AwsSecretBackendStaticRole = null as any;
utilities.lazyLoad(exports, ["AwsSecretBackendStaticRole"], () => require("./awsSecretBackendStaticRole"));

export { AzureAuthBackendConfigArgs, AzureAuthBackendConfigState } from "./azureAuthBackendConfig";
export type AzureAuthBackendConfig = import("./azureAuthBackendConfig").AzureAuthBackendConfig;
export const AzureAuthBackendConfig: typeof import("./azureAuthBackendConfig").AzureAuthBackendConfig = null as any;
utilities.lazyLoad(exports, ["AzureAuthBackendConfig"], () => require("./azureAuthBackendConfig"));

export { AzureAuthBackendRoleArgs, AzureAuthBackendRoleState } from "./azureAuthBackendRole";
export type AzureAuthBackendRole = import("./azureAuthBackendRole").AzureAuthBackendRole;
export const AzureAuthBackendRole: typeof import("./azureAuthBackendRole").AzureAuthBackendRole = null as any;
utilities.lazyLoad(exports, ["AzureAuthBackendRole"], () => require("./azureAuthBackendRole"));

export { AzureSecretBackendArgs, AzureSecretBackendState } from "./azureSecretBackend";
export type AzureSecretBackend = import("./azureSecretBackend").AzureSecretBackend;
export const AzureSecretBackend: typeof import("./azureSecretBackend").AzureSecretBackend = null as any;
utilities.lazyLoad(exports, ["AzureSecretBackend"], () => require("./azureSecretBackend"));

export { AzureSecretBackendRoleArgs, AzureSecretBackendRoleState } from "./azureSecretBackendRole";
export type AzureSecretBackendRole = import("./azureSecretBackendRole").AzureSecretBackendRole;
export const AzureSecretBackendRole: typeof import("./azureSecretBackendRole").AzureSecretBackendRole = null as any;
utilities.lazyLoad(exports, ["AzureSecretBackendRole"], () => require("./azureSecretBackendRole"));

export { CertAuthBackendRoleArgs, CertAuthBackendRoleState } from "./certAuthBackendRole";
export type CertAuthBackendRole = import("./certAuthBackendRole").CertAuthBackendRole;
export const CertAuthBackendRole: typeof import("./certAuthBackendRole").CertAuthBackendRole = null as any;
utilities.lazyLoad(exports, ["CertAuthBackendRole"], () => require("./certAuthBackendRole"));

export { ConfigUiCustomMessageArgs, ConfigUiCustomMessageState } from "./configUiCustomMessage";
export type ConfigUiCustomMessage = import("./configUiCustomMessage").ConfigUiCustomMessage;
export const ConfigUiCustomMessage: typeof import("./configUiCustomMessage").ConfigUiCustomMessage = null as any;
utilities.lazyLoad(exports, ["ConfigUiCustomMessage"], () => require("./configUiCustomMessage"));

export { ConsulSecretBackendArgs, ConsulSecretBackendState } from "./consulSecretBackend";
export type ConsulSecretBackend = import("./consulSecretBackend").ConsulSecretBackend;
export const ConsulSecretBackend: typeof import("./consulSecretBackend").ConsulSecretBackend = null as any;
utilities.lazyLoad(exports, ["ConsulSecretBackend"], () => require("./consulSecretBackend"));

export { ConsulSecretBackendRoleArgs, ConsulSecretBackendRoleState } from "./consulSecretBackendRole";
export type ConsulSecretBackendRole = import("./consulSecretBackendRole").ConsulSecretBackendRole;
export const ConsulSecretBackendRole: typeof import("./consulSecretBackendRole").ConsulSecretBackendRole = null as any;
utilities.lazyLoad(exports, ["ConsulSecretBackendRole"], () => require("./consulSecretBackendRole"));

export { DatabaseSecretBackendConnectionArgs, DatabaseSecretBackendConnectionState } from "./databaseSecretBackendConnection";
export type DatabaseSecretBackendConnection = import("./databaseSecretBackendConnection").DatabaseSecretBackendConnection;
export const DatabaseSecretBackendConnection: typeof import("./databaseSecretBackendConnection").DatabaseSecretBackendConnection = null as any;
utilities.lazyLoad(exports, ["DatabaseSecretBackendConnection"], () => require("./databaseSecretBackendConnection"));

export { DatabaseSecretBackendRoleArgs, DatabaseSecretBackendRoleState } from "./databaseSecretBackendRole";
export type DatabaseSecretBackendRole = import("./databaseSecretBackendRole").DatabaseSecretBackendRole;
export const DatabaseSecretBackendRole: typeof import("./databaseSecretBackendRole").DatabaseSecretBackendRole = null as any;
utilities.lazyLoad(exports, ["DatabaseSecretBackendRole"], () => require("./databaseSecretBackendRole"));

export { DatabaseSecretBackendStaticRoleArgs, DatabaseSecretBackendStaticRoleState } from "./databaseSecretBackendStaticRole";
export type DatabaseSecretBackendStaticRole = import("./databaseSecretBackendStaticRole").DatabaseSecretBackendStaticRole;
export const DatabaseSecretBackendStaticRole: typeof import("./databaseSecretBackendStaticRole").DatabaseSecretBackendStaticRole = null as any;
utilities.lazyLoad(exports, ["DatabaseSecretBackendStaticRole"], () => require("./databaseSecretBackendStaticRole"));

export { DatabaseSecretsMountArgs, DatabaseSecretsMountState } from "./databaseSecretsMount";
export type DatabaseSecretsMount = import("./databaseSecretsMount").DatabaseSecretsMount;
export const DatabaseSecretsMount: typeof import("./databaseSecretsMount").DatabaseSecretsMount = null as any;
utilities.lazyLoad(exports, ["DatabaseSecretsMount"], () => require("./databaseSecretsMount"));

export { EgpPolicyArgs, EgpPolicyState } from "./egpPolicy";
export type EgpPolicy = import("./egpPolicy").EgpPolicy;
export const EgpPolicy: typeof import("./egpPolicy").EgpPolicy = null as any;
utilities.lazyLoad(exports, ["EgpPolicy"], () => require("./egpPolicy"));

export { GcpAuthBackendArgs, GcpAuthBackendState } from "./gcpAuthBackend";
export type GcpAuthBackend = import("./gcpAuthBackend").GcpAuthBackend;
export const GcpAuthBackend: typeof import("./gcpAuthBackend").GcpAuthBackend = null as any;
utilities.lazyLoad(exports, ["GcpAuthBackend"], () => require("./gcpAuthBackend"));

export { GcpAuthBackendRoleArgs, GcpAuthBackendRoleState } from "./gcpAuthBackendRole";
export type GcpAuthBackendRole = import("./gcpAuthBackendRole").GcpAuthBackendRole;
export const GcpAuthBackendRole: typeof import("./gcpAuthBackendRole").GcpAuthBackendRole = null as any;
utilities.lazyLoad(exports, ["GcpAuthBackendRole"], () => require("./gcpAuthBackendRole"));

export { GcpSecretBackendArgs, GcpSecretBackendState } from "./gcpSecretBackend";
export type GcpSecretBackend = import("./gcpSecretBackend").GcpSecretBackend;
export const GcpSecretBackend: typeof import("./gcpSecretBackend").GcpSecretBackend = null as any;
utilities.lazyLoad(exports, ["GcpSecretBackend"], () => require("./gcpSecretBackend"));

export { GcpSecretImpersonatedAccountArgs, GcpSecretImpersonatedAccountState } from "./gcpSecretImpersonatedAccount";
export type GcpSecretImpersonatedAccount = import("./gcpSecretImpersonatedAccount").GcpSecretImpersonatedAccount;
export const GcpSecretImpersonatedAccount: typeof import("./gcpSecretImpersonatedAccount").GcpSecretImpersonatedAccount = null as any;
utilities.lazyLoad(exports, ["GcpSecretImpersonatedAccount"], () => require("./gcpSecretImpersonatedAccount"));

export { GcpSecretRolesetArgs, GcpSecretRolesetState } from "./gcpSecretRoleset";
export type GcpSecretRoleset = import("./gcpSecretRoleset").GcpSecretRoleset;
export const GcpSecretRoleset: typeof import("./gcpSecretRoleset").GcpSecretRoleset = null as any;
utilities.lazyLoad(exports, ["GcpSecretRoleset"], () => require("./gcpSecretRoleset"));

export { GcpSecretStaticAccountArgs, GcpSecretStaticAccountState } from "./gcpSecretStaticAccount";
export type GcpSecretStaticAccount = import("./gcpSecretStaticAccount").GcpSecretStaticAccount;
export const GcpSecretStaticAccount: typeof import("./gcpSecretStaticAccount").GcpSecretStaticAccount = null as any;
utilities.lazyLoad(exports, ["GcpSecretStaticAccount"], () => require("./gcpSecretStaticAccount"));

export { GenericEndpointArgs, GenericEndpointState } from "./genericEndpoint";
export type GenericEndpoint = import("./genericEndpoint").GenericEndpoint;
export const GenericEndpoint: typeof import("./genericEndpoint").GenericEndpoint = null as any;
utilities.lazyLoad(exports, ["GenericEndpoint"], () => require("./genericEndpoint"));

export { GenericSecretArgs, GenericSecretState } from "./genericSecret";
export type GenericSecret = import("./genericSecret").GenericSecret;
export const GenericSecret: typeof import("./genericSecret").GenericSecret = null as any;
utilities.lazyLoad(exports, ["GenericSecret"], () => require("./genericSecret"));

export { GetAdAccessCredentialsArgs, GetAdAccessCredentialsResult, GetAdAccessCredentialsOutputArgs } from "./getAdAccessCredentials";
export const getAdAccessCredentials: typeof import("./getAdAccessCredentials").getAdAccessCredentials = null as any;
export const getAdAccessCredentialsOutput: typeof import("./getAdAccessCredentials").getAdAccessCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getAdAccessCredentials","getAdAccessCredentialsOutput"], () => require("./getAdAccessCredentials"));

export { GetApproleAuthBackendRoleIdArgs, GetApproleAuthBackendRoleIdResult, GetApproleAuthBackendRoleIdOutputArgs } from "./getApproleAuthBackendRoleId";
export const getApproleAuthBackendRoleId: typeof import("./getApproleAuthBackendRoleId").getApproleAuthBackendRoleId = null as any;
export const getApproleAuthBackendRoleIdOutput: typeof import("./getApproleAuthBackendRoleId").getApproleAuthBackendRoleIdOutput = null as any;
utilities.lazyLoad(exports, ["getApproleAuthBackendRoleId","getApproleAuthBackendRoleIdOutput"], () => require("./getApproleAuthBackendRoleId"));

export { GetAuthBackendArgs, GetAuthBackendResult, GetAuthBackendOutputArgs } from "./getAuthBackend";
export const getAuthBackend: typeof import("./getAuthBackend").getAuthBackend = null as any;
export const getAuthBackendOutput: typeof import("./getAuthBackend").getAuthBackendOutput = null as any;
utilities.lazyLoad(exports, ["getAuthBackend","getAuthBackendOutput"], () => require("./getAuthBackend"));

export { GetAuthBackendsArgs, GetAuthBackendsResult, GetAuthBackendsOutputArgs } from "./getAuthBackends";
export const getAuthBackends: typeof import("./getAuthBackends").getAuthBackends = null as any;
export const getAuthBackendsOutput: typeof import("./getAuthBackends").getAuthBackendsOutput = null as any;
utilities.lazyLoad(exports, ["getAuthBackends","getAuthBackendsOutput"], () => require("./getAuthBackends"));

export { GetAwsAccessCredentialsArgs, GetAwsAccessCredentialsResult, GetAwsAccessCredentialsOutputArgs } from "./getAwsAccessCredentials";
export const getAwsAccessCredentials: typeof import("./getAwsAccessCredentials").getAwsAccessCredentials = null as any;
export const getAwsAccessCredentialsOutput: typeof import("./getAwsAccessCredentials").getAwsAccessCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getAwsAccessCredentials","getAwsAccessCredentialsOutput"], () => require("./getAwsAccessCredentials"));

export { GetAwsStaticAccessCredentialsArgs, GetAwsStaticAccessCredentialsResult, GetAwsStaticAccessCredentialsOutputArgs } from "./getAwsStaticAccessCredentials";
export const getAwsStaticAccessCredentials: typeof import("./getAwsStaticAccessCredentials").getAwsStaticAccessCredentials = null as any;
export const getAwsStaticAccessCredentialsOutput: typeof import("./getAwsStaticAccessCredentials").getAwsStaticAccessCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getAwsStaticAccessCredentials","getAwsStaticAccessCredentialsOutput"], () => require("./getAwsStaticAccessCredentials"));

export { GetAzureAccessCredentialsArgs, GetAzureAccessCredentialsResult, GetAzureAccessCredentialsOutputArgs } from "./getAzureAccessCredentials";
export const getAzureAccessCredentials: typeof import("./getAzureAccessCredentials").getAzureAccessCredentials = null as any;
export const getAzureAccessCredentialsOutput: typeof import("./getAzureAccessCredentials").getAzureAccessCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getAzureAccessCredentials","getAzureAccessCredentialsOutput"], () => require("./getAzureAccessCredentials"));

export { GetGcpAuthBackendRoleArgs, GetGcpAuthBackendRoleResult, GetGcpAuthBackendRoleOutputArgs } from "./getGcpAuthBackendRole";
export const getGcpAuthBackendRole: typeof import("./getGcpAuthBackendRole").getGcpAuthBackendRole = null as any;
export const getGcpAuthBackendRoleOutput: typeof import("./getGcpAuthBackendRole").getGcpAuthBackendRoleOutput = null as any;
utilities.lazyLoad(exports, ["getGcpAuthBackendRole","getGcpAuthBackendRoleOutput"], () => require("./getGcpAuthBackendRole"));

export { GetGenericSecretArgs, GetGenericSecretResult, GetGenericSecretOutputArgs } from "./getGenericSecret";
export const getGenericSecret: typeof import("./getGenericSecret").getGenericSecret = null as any;
export const getGenericSecretOutput: typeof import("./getGenericSecret").getGenericSecretOutput = null as any;
utilities.lazyLoad(exports, ["getGenericSecret","getGenericSecretOutput"], () => require("./getGenericSecret"));

export { GetIdentityEntityArgs, GetIdentityEntityResult, GetIdentityEntityOutputArgs } from "./getIdentityEntity";
export const getIdentityEntity: typeof import("./getIdentityEntity").getIdentityEntity = null as any;
export const getIdentityEntityOutput: typeof import("./getIdentityEntity").getIdentityEntityOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityEntity","getIdentityEntityOutput"], () => require("./getIdentityEntity"));

export { GetIdentityGroupArgs, GetIdentityGroupResult, GetIdentityGroupOutputArgs } from "./getIdentityGroup";
export const getIdentityGroup: typeof import("./getIdentityGroup").getIdentityGroup = null as any;
export const getIdentityGroupOutput: typeof import("./getIdentityGroup").getIdentityGroupOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityGroup","getIdentityGroupOutput"], () => require("./getIdentityGroup"));

export { GetIdentityOidcClientCredsArgs, GetIdentityOidcClientCredsResult, GetIdentityOidcClientCredsOutputArgs } from "./getIdentityOidcClientCreds";
export const getIdentityOidcClientCreds: typeof import("./getIdentityOidcClientCreds").getIdentityOidcClientCreds = null as any;
export const getIdentityOidcClientCredsOutput: typeof import("./getIdentityOidcClientCreds").getIdentityOidcClientCredsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityOidcClientCreds","getIdentityOidcClientCredsOutput"], () => require("./getIdentityOidcClientCreds"));

export { GetIdentityOidcOpenidConfigArgs, GetIdentityOidcOpenidConfigResult, GetIdentityOidcOpenidConfigOutputArgs } from "./getIdentityOidcOpenidConfig";
export const getIdentityOidcOpenidConfig: typeof import("./getIdentityOidcOpenidConfig").getIdentityOidcOpenidConfig = null as any;
export const getIdentityOidcOpenidConfigOutput: typeof import("./getIdentityOidcOpenidConfig").getIdentityOidcOpenidConfigOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityOidcOpenidConfig","getIdentityOidcOpenidConfigOutput"], () => require("./getIdentityOidcOpenidConfig"));

export { GetIdentityOidcPublicKeysArgs, GetIdentityOidcPublicKeysResult, GetIdentityOidcPublicKeysOutputArgs } from "./getIdentityOidcPublicKeys";
export const getIdentityOidcPublicKeys: typeof import("./getIdentityOidcPublicKeys").getIdentityOidcPublicKeys = null as any;
export const getIdentityOidcPublicKeysOutput: typeof import("./getIdentityOidcPublicKeys").getIdentityOidcPublicKeysOutput = null as any;
utilities.lazyLoad(exports, ["getIdentityOidcPublicKeys","getIdentityOidcPublicKeysOutput"], () => require("./getIdentityOidcPublicKeys"));

export { GetKubernetesAuthBackendConfigArgs, GetKubernetesAuthBackendConfigResult, GetKubernetesAuthBackendConfigOutputArgs } from "./getKubernetesAuthBackendConfig";
export const getKubernetesAuthBackendConfig: typeof import("./getKubernetesAuthBackendConfig").getKubernetesAuthBackendConfig = null as any;
export const getKubernetesAuthBackendConfigOutput: typeof import("./getKubernetesAuthBackendConfig").getKubernetesAuthBackendConfigOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesAuthBackendConfig","getKubernetesAuthBackendConfigOutput"], () => require("./getKubernetesAuthBackendConfig"));

export { GetKubernetesAuthBackendRoleArgs, GetKubernetesAuthBackendRoleResult, GetKubernetesAuthBackendRoleOutputArgs } from "./getKubernetesAuthBackendRole";
export const getKubernetesAuthBackendRole: typeof import("./getKubernetesAuthBackendRole").getKubernetesAuthBackendRole = null as any;
export const getKubernetesAuthBackendRoleOutput: typeof import("./getKubernetesAuthBackendRole").getKubernetesAuthBackendRoleOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesAuthBackendRole","getKubernetesAuthBackendRoleOutput"], () => require("./getKubernetesAuthBackendRole"));

export { GetKubernetesServiceAccountTokenArgs, GetKubernetesServiceAccountTokenResult, GetKubernetesServiceAccountTokenOutputArgs } from "./getKubernetesServiceAccountToken";
export const getKubernetesServiceAccountToken: typeof import("./getKubernetesServiceAccountToken").getKubernetesServiceAccountToken = null as any;
export const getKubernetesServiceAccountTokenOutput: typeof import("./getKubernetesServiceAccountToken").getKubernetesServiceAccountTokenOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesServiceAccountToken","getKubernetesServiceAccountTokenOutput"], () => require("./getKubernetesServiceAccountToken"));

export { GetKvSecretArgs, GetKvSecretResult, GetKvSecretOutputArgs } from "./getKvSecret";
export const getKvSecret: typeof import("./getKvSecret").getKvSecret = null as any;
export const getKvSecretOutput: typeof import("./getKvSecret").getKvSecretOutput = null as any;
utilities.lazyLoad(exports, ["getKvSecret","getKvSecretOutput"], () => require("./getKvSecret"));

export { GetKvSecretSubkeysV2Args, GetKvSecretSubkeysV2Result, GetKvSecretSubkeysV2OutputArgs } from "./getKvSecretSubkeysV2";
export const getKvSecretSubkeysV2: typeof import("./getKvSecretSubkeysV2").getKvSecretSubkeysV2 = null as any;
export const getKvSecretSubkeysV2Output: typeof import("./getKvSecretSubkeysV2").getKvSecretSubkeysV2Output = null as any;
utilities.lazyLoad(exports, ["getKvSecretSubkeysV2","getKvSecretSubkeysV2Output"], () => require("./getKvSecretSubkeysV2"));

export { GetKvSecretV2Args, GetKvSecretV2Result, GetKvSecretV2OutputArgs } from "./getKvSecretV2";
export const getKvSecretV2: typeof import("./getKvSecretV2").getKvSecretV2 = null as any;
export const getKvSecretV2Output: typeof import("./getKvSecretV2").getKvSecretV2Output = null as any;
utilities.lazyLoad(exports, ["getKvSecretV2","getKvSecretV2Output"], () => require("./getKvSecretV2"));

export { GetKvSecretsListArgs, GetKvSecretsListResult, GetKvSecretsListOutputArgs } from "./getKvSecretsList";
export const getKvSecretsList: typeof import("./getKvSecretsList").getKvSecretsList = null as any;
export const getKvSecretsListOutput: typeof import("./getKvSecretsList").getKvSecretsListOutput = null as any;
utilities.lazyLoad(exports, ["getKvSecretsList","getKvSecretsListOutput"], () => require("./getKvSecretsList"));

export { GetKvSecretsListV2Args, GetKvSecretsListV2Result, GetKvSecretsListV2OutputArgs } from "./getKvSecretsListV2";
export const getKvSecretsListV2: typeof import("./getKvSecretsListV2").getKvSecretsListV2 = null as any;
export const getKvSecretsListV2Output: typeof import("./getKvSecretsListV2").getKvSecretsListV2Output = null as any;
utilities.lazyLoad(exports, ["getKvSecretsListV2","getKvSecretsListV2Output"], () => require("./getKvSecretsListV2"));

export { GetLdapDynamicCredentialsArgs, GetLdapDynamicCredentialsResult, GetLdapDynamicCredentialsOutputArgs } from "./getLdapDynamicCredentials";
export const getLdapDynamicCredentials: typeof import("./getLdapDynamicCredentials").getLdapDynamicCredentials = null as any;
export const getLdapDynamicCredentialsOutput: typeof import("./getLdapDynamicCredentials").getLdapDynamicCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getLdapDynamicCredentials","getLdapDynamicCredentialsOutput"], () => require("./getLdapDynamicCredentials"));

export { GetLdapStaticCredentialsArgs, GetLdapStaticCredentialsResult, GetLdapStaticCredentialsOutputArgs } from "./getLdapStaticCredentials";
export const getLdapStaticCredentials: typeof import("./getLdapStaticCredentials").getLdapStaticCredentials = null as any;
export const getLdapStaticCredentialsOutput: typeof import("./getLdapStaticCredentials").getLdapStaticCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getLdapStaticCredentials","getLdapStaticCredentialsOutput"], () => require("./getLdapStaticCredentials"));

export { GetNamespaceArgs, GetNamespaceResult, GetNamespaceOutputArgs } from "./getNamespace";
export const getNamespace: typeof import("./getNamespace").getNamespace = null as any;
export const getNamespaceOutput: typeof import("./getNamespace").getNamespaceOutput = null as any;
utilities.lazyLoad(exports, ["getNamespace","getNamespaceOutput"], () => require("./getNamespace"));

export { GetNamespacesArgs, GetNamespacesResult, GetNamespacesOutputArgs } from "./getNamespaces";
export const getNamespaces: typeof import("./getNamespaces").getNamespaces = null as any;
export const getNamespacesOutput: typeof import("./getNamespaces").getNamespacesOutput = null as any;
utilities.lazyLoad(exports, ["getNamespaces","getNamespacesOutput"], () => require("./getNamespaces"));

export { GetNomadAccessTokenArgs, GetNomadAccessTokenResult, GetNomadAccessTokenOutputArgs } from "./getNomadAccessToken";
export const getNomadAccessToken: typeof import("./getNomadAccessToken").getNomadAccessToken = null as any;
export const getNomadAccessTokenOutput: typeof import("./getNomadAccessToken").getNomadAccessTokenOutput = null as any;
utilities.lazyLoad(exports, ["getNomadAccessToken","getNomadAccessTokenOutput"], () => require("./getNomadAccessToken"));

export { GetPkiSecretBackendConfigEstArgs, GetPkiSecretBackendConfigEstResult, GetPkiSecretBackendConfigEstOutputArgs } from "./getPkiSecretBackendConfigEst";
export const getPkiSecretBackendConfigEst: typeof import("./getPkiSecretBackendConfigEst").getPkiSecretBackendConfigEst = null as any;
export const getPkiSecretBackendConfigEstOutput: typeof import("./getPkiSecretBackendConfigEst").getPkiSecretBackendConfigEstOutput = null as any;
utilities.lazyLoad(exports, ["getPkiSecretBackendConfigEst","getPkiSecretBackendConfigEstOutput"], () => require("./getPkiSecretBackendConfigEst"));

export { GetPkiSecretBackendIssuerArgs, GetPkiSecretBackendIssuerResult, GetPkiSecretBackendIssuerOutputArgs } from "./getPkiSecretBackendIssuer";
export const getPkiSecretBackendIssuer: typeof import("./getPkiSecretBackendIssuer").getPkiSecretBackendIssuer = null as any;
export const getPkiSecretBackendIssuerOutput: typeof import("./getPkiSecretBackendIssuer").getPkiSecretBackendIssuerOutput = null as any;
utilities.lazyLoad(exports, ["getPkiSecretBackendIssuer","getPkiSecretBackendIssuerOutput"], () => require("./getPkiSecretBackendIssuer"));

export { GetPkiSecretBackendIssuersArgs, GetPkiSecretBackendIssuersResult, GetPkiSecretBackendIssuersOutputArgs } from "./getPkiSecretBackendIssuers";
export const getPkiSecretBackendIssuers: typeof import("./getPkiSecretBackendIssuers").getPkiSecretBackendIssuers = null as any;
export const getPkiSecretBackendIssuersOutput: typeof import("./getPkiSecretBackendIssuers").getPkiSecretBackendIssuersOutput = null as any;
utilities.lazyLoad(exports, ["getPkiSecretBackendIssuers","getPkiSecretBackendIssuersOutput"], () => require("./getPkiSecretBackendIssuers"));

export { GetPkiSecretBackendKeyArgs, GetPkiSecretBackendKeyResult, GetPkiSecretBackendKeyOutputArgs } from "./getPkiSecretBackendKey";
export const getPkiSecretBackendKey: typeof import("./getPkiSecretBackendKey").getPkiSecretBackendKey = null as any;
export const getPkiSecretBackendKeyOutput: typeof import("./getPkiSecretBackendKey").getPkiSecretBackendKeyOutput = null as any;
utilities.lazyLoad(exports, ["getPkiSecretBackendKey","getPkiSecretBackendKeyOutput"], () => require("./getPkiSecretBackendKey"));

export { GetPkiSecretBackendKeysArgs, GetPkiSecretBackendKeysResult, GetPkiSecretBackendKeysOutputArgs } from "./getPkiSecretBackendKeys";
export const getPkiSecretBackendKeys: typeof import("./getPkiSecretBackendKeys").getPkiSecretBackendKeys = null as any;
export const getPkiSecretBackendKeysOutput: typeof import("./getPkiSecretBackendKeys").getPkiSecretBackendKeysOutput = null as any;
utilities.lazyLoad(exports, ["getPkiSecretBackendKeys","getPkiSecretBackendKeysOutput"], () => require("./getPkiSecretBackendKeys"));

export { GetPolicyDocumentArgs, GetPolicyDocumentResult, GetPolicyDocumentOutputArgs } from "./getPolicyDocument";
export const getPolicyDocument: typeof import("./getPolicyDocument").getPolicyDocument = null as any;
export const getPolicyDocumentOutput: typeof import("./getPolicyDocument").getPolicyDocumentOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyDocument","getPolicyDocumentOutput"], () => require("./getPolicyDocument"));

export { GetRaftAutopilotStateArgs, GetRaftAutopilotStateResult, GetRaftAutopilotStateOutputArgs } from "./getRaftAutopilotState";
export const getRaftAutopilotState: typeof import("./getRaftAutopilotState").getRaftAutopilotState = null as any;
export const getRaftAutopilotStateOutput: typeof import("./getRaftAutopilotState").getRaftAutopilotStateOutput = null as any;
utilities.lazyLoad(exports, ["getRaftAutopilotState","getRaftAutopilotStateOutput"], () => require("./getRaftAutopilotState"));

export { GetTransformDecodeArgs, GetTransformDecodeResult, GetTransformDecodeOutputArgs } from "./getTransformDecode";
export const getTransformDecode: typeof import("./getTransformDecode").getTransformDecode = null as any;
export const getTransformDecodeOutput: typeof import("./getTransformDecode").getTransformDecodeOutput = null as any;
utilities.lazyLoad(exports, ["getTransformDecode","getTransformDecodeOutput"], () => require("./getTransformDecode"));

export { GetTransformEncodeArgs, GetTransformEncodeResult, GetTransformEncodeOutputArgs } from "./getTransformEncode";
export const getTransformEncode: typeof import("./getTransformEncode").getTransformEncode = null as any;
export const getTransformEncodeOutput: typeof import("./getTransformEncode").getTransformEncodeOutput = null as any;
utilities.lazyLoad(exports, ["getTransformEncode","getTransformEncodeOutput"], () => require("./getTransformEncode"));

export { GetTransitDecryptArgs, GetTransitDecryptResult, GetTransitDecryptOutputArgs } from "./getTransitDecrypt";
export const getTransitDecrypt: typeof import("./getTransitDecrypt").getTransitDecrypt = null as any;
export const getTransitDecryptOutput: typeof import("./getTransitDecrypt").getTransitDecryptOutput = null as any;
utilities.lazyLoad(exports, ["getTransitDecrypt","getTransitDecryptOutput"], () => require("./getTransitDecrypt"));

export { GetTransitEncryptArgs, GetTransitEncryptResult, GetTransitEncryptOutputArgs } from "./getTransitEncrypt";
export const getTransitEncrypt: typeof import("./getTransitEncrypt").getTransitEncrypt = null as any;
export const getTransitEncryptOutput: typeof import("./getTransitEncrypt").getTransitEncryptOutput = null as any;
utilities.lazyLoad(exports, ["getTransitEncrypt","getTransitEncryptOutput"], () => require("./getTransitEncrypt"));

export { GithubAuthBackendArgs, GithubAuthBackendState } from "./githubAuthBackend";
export type GithubAuthBackend = import("./githubAuthBackend").GithubAuthBackend;
export const GithubAuthBackend: typeof import("./githubAuthBackend").GithubAuthBackend = null as any;
utilities.lazyLoad(exports, ["GithubAuthBackend"], () => require("./githubAuthBackend"));

export { GithubTeamArgs, GithubTeamState } from "./githubTeam";
export type GithubTeam = import("./githubTeam").GithubTeam;
export const GithubTeam: typeof import("./githubTeam").GithubTeam = null as any;
utilities.lazyLoad(exports, ["GithubTeam"], () => require("./githubTeam"));

export { GithubUserArgs, GithubUserState } from "./githubUser";
export type GithubUser = import("./githubUser").GithubUser;
export const GithubUser: typeof import("./githubUser").GithubUser = null as any;
utilities.lazyLoad(exports, ["GithubUser"], () => require("./githubUser"));

export { IdentityEntityArgs, IdentityEntityState } from "./identityEntity";
export type IdentityEntity = import("./identityEntity").IdentityEntity;
export const IdentityEntity: typeof import("./identityEntity").IdentityEntity = null as any;
utilities.lazyLoad(exports, ["IdentityEntity"], () => require("./identityEntity"));

export { IdentityEntityAliasArgs, IdentityEntityAliasState } from "./identityEntityAlias";
export type IdentityEntityAlias = import("./identityEntityAlias").IdentityEntityAlias;
export const IdentityEntityAlias: typeof import("./identityEntityAlias").IdentityEntityAlias = null as any;
utilities.lazyLoad(exports, ["IdentityEntityAlias"], () => require("./identityEntityAlias"));

export { IdentityEntityPoliciesArgs, IdentityEntityPoliciesState } from "./identityEntityPolicies";
export type IdentityEntityPolicies = import("./identityEntityPolicies").IdentityEntityPolicies;
export const IdentityEntityPolicies: typeof import("./identityEntityPolicies").IdentityEntityPolicies = null as any;
utilities.lazyLoad(exports, ["IdentityEntityPolicies"], () => require("./identityEntityPolicies"));

export { IdentityGroupArgs, IdentityGroupState } from "./identityGroup";
export type IdentityGroup = import("./identityGroup").IdentityGroup;
export const IdentityGroup: typeof import("./identityGroup").IdentityGroup = null as any;
utilities.lazyLoad(exports, ["IdentityGroup"], () => require("./identityGroup"));

export { IdentityGroupAliasArgs, IdentityGroupAliasState } from "./identityGroupAlias";
export type IdentityGroupAlias = import("./identityGroupAlias").IdentityGroupAlias;
export const IdentityGroupAlias: typeof import("./identityGroupAlias").IdentityGroupAlias = null as any;
utilities.lazyLoad(exports, ["IdentityGroupAlias"], () => require("./identityGroupAlias"));

export { IdentityGroupMemberEntityIdsArgs, IdentityGroupMemberEntityIdsState } from "./identityGroupMemberEntityIds";
export type IdentityGroupMemberEntityIds = import("./identityGroupMemberEntityIds").IdentityGroupMemberEntityIds;
export const IdentityGroupMemberEntityIds: typeof import("./identityGroupMemberEntityIds").IdentityGroupMemberEntityIds = null as any;
utilities.lazyLoad(exports, ["IdentityGroupMemberEntityIds"], () => require("./identityGroupMemberEntityIds"));

export { IdentityGroupMemberGroupIdsArgs, IdentityGroupMemberGroupIdsState } from "./identityGroupMemberGroupIds";
export type IdentityGroupMemberGroupIds = import("./identityGroupMemberGroupIds").IdentityGroupMemberGroupIds;
export const IdentityGroupMemberGroupIds: typeof import("./identityGroupMemberGroupIds").IdentityGroupMemberGroupIds = null as any;
utilities.lazyLoad(exports, ["IdentityGroupMemberGroupIds"], () => require("./identityGroupMemberGroupIds"));

export { IdentityGroupPoliciesArgs, IdentityGroupPoliciesState } from "./identityGroupPolicies";
export type IdentityGroupPolicies = import("./identityGroupPolicies").IdentityGroupPolicies;
export const IdentityGroupPolicies: typeof import("./identityGroupPolicies").IdentityGroupPolicies = null as any;
utilities.lazyLoad(exports, ["IdentityGroupPolicies"], () => require("./identityGroupPolicies"));

export { IdentityMfaDuoArgs, IdentityMfaDuoState } from "./identityMfaDuo";
export type IdentityMfaDuo = import("./identityMfaDuo").IdentityMfaDuo;
export const IdentityMfaDuo: typeof import("./identityMfaDuo").IdentityMfaDuo = null as any;
utilities.lazyLoad(exports, ["IdentityMfaDuo"], () => require("./identityMfaDuo"));

export { IdentityMfaLoginEnforcementArgs, IdentityMfaLoginEnforcementState } from "./identityMfaLoginEnforcement";
export type IdentityMfaLoginEnforcement = import("./identityMfaLoginEnforcement").IdentityMfaLoginEnforcement;
export const IdentityMfaLoginEnforcement: typeof import("./identityMfaLoginEnforcement").IdentityMfaLoginEnforcement = null as any;
utilities.lazyLoad(exports, ["IdentityMfaLoginEnforcement"], () => require("./identityMfaLoginEnforcement"));

export { IdentityMfaOktaArgs, IdentityMfaOktaState } from "./identityMfaOkta";
export type IdentityMfaOkta = import("./identityMfaOkta").IdentityMfaOkta;
export const IdentityMfaOkta: typeof import("./identityMfaOkta").IdentityMfaOkta = null as any;
utilities.lazyLoad(exports, ["IdentityMfaOkta"], () => require("./identityMfaOkta"));

export { IdentityMfaPingidArgs, IdentityMfaPingidState } from "./identityMfaPingid";
export type IdentityMfaPingid = import("./identityMfaPingid").IdentityMfaPingid;
export const IdentityMfaPingid: typeof import("./identityMfaPingid").IdentityMfaPingid = null as any;
utilities.lazyLoad(exports, ["IdentityMfaPingid"], () => require("./identityMfaPingid"));

export { IdentityMfaTotpArgs, IdentityMfaTotpState } from "./identityMfaTotp";
export type IdentityMfaTotp = import("./identityMfaTotp").IdentityMfaTotp;
export const IdentityMfaTotp: typeof import("./identityMfaTotp").IdentityMfaTotp = null as any;
utilities.lazyLoad(exports, ["IdentityMfaTotp"], () => require("./identityMfaTotp"));

export { IdentityOidcArgs, IdentityOidcState } from "./identityOidc";
export type IdentityOidc = import("./identityOidc").IdentityOidc;
export const IdentityOidc: typeof import("./identityOidc").IdentityOidc = null as any;
utilities.lazyLoad(exports, ["IdentityOidc"], () => require("./identityOidc"));

export { IdentityOidcAssignmentArgs, IdentityOidcAssignmentState } from "./identityOidcAssignment";
export type IdentityOidcAssignment = import("./identityOidcAssignment").IdentityOidcAssignment;
export const IdentityOidcAssignment: typeof import("./identityOidcAssignment").IdentityOidcAssignment = null as any;
utilities.lazyLoad(exports, ["IdentityOidcAssignment"], () => require("./identityOidcAssignment"));

export { IdentityOidcClientArgs, IdentityOidcClientState } from "./identityOidcClient";
export type IdentityOidcClient = import("./identityOidcClient").IdentityOidcClient;
export const IdentityOidcClient: typeof import("./identityOidcClient").IdentityOidcClient = null as any;
utilities.lazyLoad(exports, ["IdentityOidcClient"], () => require("./identityOidcClient"));

export { IdentityOidcKeyArgs, IdentityOidcKeyState } from "./identityOidcKey";
export type IdentityOidcKey = import("./identityOidcKey").IdentityOidcKey;
export const IdentityOidcKey: typeof import("./identityOidcKey").IdentityOidcKey = null as any;
utilities.lazyLoad(exports, ["IdentityOidcKey"], () => require("./identityOidcKey"));

export { IdentityOidcKeyAllowedClientIdArgs, IdentityOidcKeyAllowedClientIdState } from "./identityOidcKeyAllowedClientId";
export type IdentityOidcKeyAllowedClientId = import("./identityOidcKeyAllowedClientId").IdentityOidcKeyAllowedClientId;
export const IdentityOidcKeyAllowedClientId: typeof import("./identityOidcKeyAllowedClientId").IdentityOidcKeyAllowedClientId = null as any;
utilities.lazyLoad(exports, ["IdentityOidcKeyAllowedClientId"], () => require("./identityOidcKeyAllowedClientId"));

export { IdentityOidcProviderArgs, IdentityOidcProviderState } from "./identityOidcProvider";
export type IdentityOidcProvider = import("./identityOidcProvider").IdentityOidcProvider;
export const IdentityOidcProvider: typeof import("./identityOidcProvider").IdentityOidcProvider = null as any;
utilities.lazyLoad(exports, ["IdentityOidcProvider"], () => require("./identityOidcProvider"));

export { IdentityOidcRoleArgs, IdentityOidcRoleState } from "./identityOidcRole";
export type IdentityOidcRole = import("./identityOidcRole").IdentityOidcRole;
export const IdentityOidcRole: typeof import("./identityOidcRole").IdentityOidcRole = null as any;
utilities.lazyLoad(exports, ["IdentityOidcRole"], () => require("./identityOidcRole"));

export { IdentityOidcScopeArgs, IdentityOidcScopeState } from "./identityOidcScope";
export type IdentityOidcScope = import("./identityOidcScope").IdentityOidcScope;
export const IdentityOidcScope: typeof import("./identityOidcScope").IdentityOidcScope = null as any;
utilities.lazyLoad(exports, ["IdentityOidcScope"], () => require("./identityOidcScope"));

export { JwtAuthBackendArgs, JwtAuthBackendState } from "./jwtAuthBackend";
export type JwtAuthBackend = import("./jwtAuthBackend").JwtAuthBackend;
export const JwtAuthBackend: typeof import("./jwtAuthBackend").JwtAuthBackend = null as any;
utilities.lazyLoad(exports, ["JwtAuthBackend"], () => require("./jwtAuthBackend"));

export { JwtAuthBackendRoleArgs, JwtAuthBackendRoleState } from "./jwtAuthBackendRole";
export type JwtAuthBackendRole = import("./jwtAuthBackendRole").JwtAuthBackendRole;
export const JwtAuthBackendRole: typeof import("./jwtAuthBackendRole").JwtAuthBackendRole = null as any;
utilities.lazyLoad(exports, ["JwtAuthBackendRole"], () => require("./jwtAuthBackendRole"));

export { KmipSecretBackendArgs, KmipSecretBackendState } from "./kmipSecretBackend";
export type KmipSecretBackend = import("./kmipSecretBackend").KmipSecretBackend;
export const KmipSecretBackend: typeof import("./kmipSecretBackend").KmipSecretBackend = null as any;
utilities.lazyLoad(exports, ["KmipSecretBackend"], () => require("./kmipSecretBackend"));

export { KmipSecretRoleArgs, KmipSecretRoleState } from "./kmipSecretRole";
export type KmipSecretRole = import("./kmipSecretRole").KmipSecretRole;
export const KmipSecretRole: typeof import("./kmipSecretRole").KmipSecretRole = null as any;
utilities.lazyLoad(exports, ["KmipSecretRole"], () => require("./kmipSecretRole"));

export { KmipSecretScopeArgs, KmipSecretScopeState } from "./kmipSecretScope";
export type KmipSecretScope = import("./kmipSecretScope").KmipSecretScope;
export const KmipSecretScope: typeof import("./kmipSecretScope").KmipSecretScope = null as any;
utilities.lazyLoad(exports, ["KmipSecretScope"], () => require("./kmipSecretScope"));

export { KubernetesAuthBackendConfigArgs, KubernetesAuthBackendConfigState } from "./kubernetesAuthBackendConfig";
export type KubernetesAuthBackendConfig = import("./kubernetesAuthBackendConfig").KubernetesAuthBackendConfig;
export const KubernetesAuthBackendConfig: typeof import("./kubernetesAuthBackendConfig").KubernetesAuthBackendConfig = null as any;
utilities.lazyLoad(exports, ["KubernetesAuthBackendConfig"], () => require("./kubernetesAuthBackendConfig"));

export { KubernetesAuthBackendRoleArgs, KubernetesAuthBackendRoleState } from "./kubernetesAuthBackendRole";
export type KubernetesAuthBackendRole = import("./kubernetesAuthBackendRole").KubernetesAuthBackendRole;
export const KubernetesAuthBackendRole: typeof import("./kubernetesAuthBackendRole").KubernetesAuthBackendRole = null as any;
utilities.lazyLoad(exports, ["KubernetesAuthBackendRole"], () => require("./kubernetesAuthBackendRole"));

export { KubernetesSecretBackendArgs, KubernetesSecretBackendState } from "./kubernetesSecretBackend";
export type KubernetesSecretBackend = import("./kubernetesSecretBackend").KubernetesSecretBackend;
export const KubernetesSecretBackend: typeof import("./kubernetesSecretBackend").KubernetesSecretBackend = null as any;
utilities.lazyLoad(exports, ["KubernetesSecretBackend"], () => require("./kubernetesSecretBackend"));

export { KubernetesSecretBackendRoleArgs, KubernetesSecretBackendRoleState } from "./kubernetesSecretBackendRole";
export type KubernetesSecretBackendRole = import("./kubernetesSecretBackendRole").KubernetesSecretBackendRole;
export const KubernetesSecretBackendRole: typeof import("./kubernetesSecretBackendRole").KubernetesSecretBackendRole = null as any;
utilities.lazyLoad(exports, ["KubernetesSecretBackendRole"], () => require("./kubernetesSecretBackendRole"));

export { KvSecretArgs, KvSecretState } from "./kvSecret";
export type KvSecret = import("./kvSecret").KvSecret;
export const KvSecret: typeof import("./kvSecret").KvSecret = null as any;
utilities.lazyLoad(exports, ["KvSecret"], () => require("./kvSecret"));

export { KvSecretBackendV2Args, KvSecretBackendV2State } from "./kvSecretBackendV2";
export type KvSecretBackendV2 = import("./kvSecretBackendV2").KvSecretBackendV2;
export const KvSecretBackendV2: typeof import("./kvSecretBackendV2").KvSecretBackendV2 = null as any;
utilities.lazyLoad(exports, ["KvSecretBackendV2"], () => require("./kvSecretBackendV2"));

export { KvSecretV2Args, KvSecretV2State } from "./kvSecretV2";
export type KvSecretV2 = import("./kvSecretV2").KvSecretV2;
export const KvSecretV2: typeof import("./kvSecretV2").KvSecretV2 = null as any;
utilities.lazyLoad(exports, ["KvSecretV2"], () => require("./kvSecretV2"));

export { LdapAuthBackendArgs, LdapAuthBackendState } from "./ldapAuthBackend";
export type LdapAuthBackend = import("./ldapAuthBackend").LdapAuthBackend;
export const LdapAuthBackend: typeof import("./ldapAuthBackend").LdapAuthBackend = null as any;
utilities.lazyLoad(exports, ["LdapAuthBackend"], () => require("./ldapAuthBackend"));

export { LdapAuthBackendGroupArgs, LdapAuthBackendGroupState } from "./ldapAuthBackendGroup";
export type LdapAuthBackendGroup = import("./ldapAuthBackendGroup").LdapAuthBackendGroup;
export const LdapAuthBackendGroup: typeof import("./ldapAuthBackendGroup").LdapAuthBackendGroup = null as any;
utilities.lazyLoad(exports, ["LdapAuthBackendGroup"], () => require("./ldapAuthBackendGroup"));

export { LdapAuthBackendUserArgs, LdapAuthBackendUserState } from "./ldapAuthBackendUser";
export type LdapAuthBackendUser = import("./ldapAuthBackendUser").LdapAuthBackendUser;
export const LdapAuthBackendUser: typeof import("./ldapAuthBackendUser").LdapAuthBackendUser = null as any;
utilities.lazyLoad(exports, ["LdapAuthBackendUser"], () => require("./ldapAuthBackendUser"));

export { LdapSecretBackendArgs, LdapSecretBackendState } from "./ldapSecretBackend";
export type LdapSecretBackend = import("./ldapSecretBackend").LdapSecretBackend;
export const LdapSecretBackend: typeof import("./ldapSecretBackend").LdapSecretBackend = null as any;
utilities.lazyLoad(exports, ["LdapSecretBackend"], () => require("./ldapSecretBackend"));

export { LdapSecretBackendDynamicRoleArgs, LdapSecretBackendDynamicRoleState } from "./ldapSecretBackendDynamicRole";
export type LdapSecretBackendDynamicRole = import("./ldapSecretBackendDynamicRole").LdapSecretBackendDynamicRole;
export const LdapSecretBackendDynamicRole: typeof import("./ldapSecretBackendDynamicRole").LdapSecretBackendDynamicRole = null as any;
utilities.lazyLoad(exports, ["LdapSecretBackendDynamicRole"], () => require("./ldapSecretBackendDynamicRole"));

export { LdapSecretBackendLibrarySetArgs, LdapSecretBackendLibrarySetState } from "./ldapSecretBackendLibrarySet";
export type LdapSecretBackendLibrarySet = import("./ldapSecretBackendLibrarySet").LdapSecretBackendLibrarySet;
export const LdapSecretBackendLibrarySet: typeof import("./ldapSecretBackendLibrarySet").LdapSecretBackendLibrarySet = null as any;
utilities.lazyLoad(exports, ["LdapSecretBackendLibrarySet"], () => require("./ldapSecretBackendLibrarySet"));

export { LdapSecretBackendStaticRoleArgs, LdapSecretBackendStaticRoleState } from "./ldapSecretBackendStaticRole";
export type LdapSecretBackendStaticRole = import("./ldapSecretBackendStaticRole").LdapSecretBackendStaticRole;
export const LdapSecretBackendStaticRole: typeof import("./ldapSecretBackendStaticRole").LdapSecretBackendStaticRole = null as any;
utilities.lazyLoad(exports, ["LdapSecretBackendStaticRole"], () => require("./ldapSecretBackendStaticRole"));

export { ManagedKeysArgs, ManagedKeysState } from "./managedKeys";
export type ManagedKeys = import("./managedKeys").ManagedKeys;
export const ManagedKeys: typeof import("./managedKeys").ManagedKeys = null as any;
utilities.lazyLoad(exports, ["ManagedKeys"], () => require("./managedKeys"));

export { MfaDuoArgs, MfaDuoState } from "./mfaDuo";
export type MfaDuo = import("./mfaDuo").MfaDuo;
export const MfaDuo: typeof import("./mfaDuo").MfaDuo = null as any;
utilities.lazyLoad(exports, ["MfaDuo"], () => require("./mfaDuo"));

export { MfaOktaArgs, MfaOktaState } from "./mfaOkta";
export type MfaOkta = import("./mfaOkta").MfaOkta;
export const MfaOkta: typeof import("./mfaOkta").MfaOkta = null as any;
utilities.lazyLoad(exports, ["MfaOkta"], () => require("./mfaOkta"));

export { MfaPingidArgs, MfaPingidState } from "./mfaPingid";
export type MfaPingid = import("./mfaPingid").MfaPingid;
export const MfaPingid: typeof import("./mfaPingid").MfaPingid = null as any;
utilities.lazyLoad(exports, ["MfaPingid"], () => require("./mfaPingid"));

export { MfaTotpArgs, MfaTotpState } from "./mfaTotp";
export type MfaTotp = import("./mfaTotp").MfaTotp;
export const MfaTotp: typeof import("./mfaTotp").MfaTotp = null as any;
utilities.lazyLoad(exports, ["MfaTotp"], () => require("./mfaTotp"));

export { MongodbatlasSecretBackendArgs, MongodbatlasSecretBackendState } from "./mongodbatlasSecretBackend";
export type MongodbatlasSecretBackend = import("./mongodbatlasSecretBackend").MongodbatlasSecretBackend;
export const MongodbatlasSecretBackend: typeof import("./mongodbatlasSecretBackend").MongodbatlasSecretBackend = null as any;
utilities.lazyLoad(exports, ["MongodbatlasSecretBackend"], () => require("./mongodbatlasSecretBackend"));

export { MongodbatlasSecretRoleArgs, MongodbatlasSecretRoleState } from "./mongodbatlasSecretRole";
export type MongodbatlasSecretRole = import("./mongodbatlasSecretRole").MongodbatlasSecretRole;
export const MongodbatlasSecretRole: typeof import("./mongodbatlasSecretRole").MongodbatlasSecretRole = null as any;
utilities.lazyLoad(exports, ["MongodbatlasSecretRole"], () => require("./mongodbatlasSecretRole"));

export { MountArgs, MountState } from "./mount";
export type Mount = import("./mount").Mount;
export const Mount: typeof import("./mount").Mount = null as any;
utilities.lazyLoad(exports, ["Mount"], () => require("./mount"));

export { NamespaceArgs, NamespaceState } from "./namespace";
export type Namespace = import("./namespace").Namespace;
export const Namespace: typeof import("./namespace").Namespace = null as any;
utilities.lazyLoad(exports, ["Namespace"], () => require("./namespace"));

export { NomadSecretBackendArgs, NomadSecretBackendState } from "./nomadSecretBackend";
export type NomadSecretBackend = import("./nomadSecretBackend").NomadSecretBackend;
export const NomadSecretBackend: typeof import("./nomadSecretBackend").NomadSecretBackend = null as any;
utilities.lazyLoad(exports, ["NomadSecretBackend"], () => require("./nomadSecretBackend"));

export { NomadSecretRoleArgs, NomadSecretRoleState } from "./nomadSecretRole";
export type NomadSecretRole = import("./nomadSecretRole").NomadSecretRole;
export const NomadSecretRole: typeof import("./nomadSecretRole").NomadSecretRole = null as any;
utilities.lazyLoad(exports, ["NomadSecretRole"], () => require("./nomadSecretRole"));

export { OktaAuthBackendArgs, OktaAuthBackendState } from "./oktaAuthBackend";
export type OktaAuthBackend = import("./oktaAuthBackend").OktaAuthBackend;
export const OktaAuthBackend: typeof import("./oktaAuthBackend").OktaAuthBackend = null as any;
utilities.lazyLoad(exports, ["OktaAuthBackend"], () => require("./oktaAuthBackend"));

export { OktaAuthBackendGroupArgs, OktaAuthBackendGroupState } from "./oktaAuthBackendGroup";
export type OktaAuthBackendGroup = import("./oktaAuthBackendGroup").OktaAuthBackendGroup;
export const OktaAuthBackendGroup: typeof import("./oktaAuthBackendGroup").OktaAuthBackendGroup = null as any;
utilities.lazyLoad(exports, ["OktaAuthBackendGroup"], () => require("./oktaAuthBackendGroup"));

export { OktaAuthBackendUserArgs, OktaAuthBackendUserState } from "./oktaAuthBackendUser";
export type OktaAuthBackendUser = import("./oktaAuthBackendUser").OktaAuthBackendUser;
export const OktaAuthBackendUser: typeof import("./oktaAuthBackendUser").OktaAuthBackendUser = null as any;
utilities.lazyLoad(exports, ["OktaAuthBackendUser"], () => require("./oktaAuthBackendUser"));

export { PasswordPolicyArgs, PasswordPolicyState } from "./passwordPolicy";
export type PasswordPolicy = import("./passwordPolicy").PasswordPolicy;
export const PasswordPolicy: typeof import("./passwordPolicy").PasswordPolicy = null as any;
utilities.lazyLoad(exports, ["PasswordPolicy"], () => require("./passwordPolicy"));

export { PkiSecretBackendCertArgs, PkiSecretBackendCertState } from "./pkiSecretBackendCert";
export type PkiSecretBackendCert = import("./pkiSecretBackendCert").PkiSecretBackendCert;
export const PkiSecretBackendCert: typeof import("./pkiSecretBackendCert").PkiSecretBackendCert = null as any;
utilities.lazyLoad(exports, ["PkiSecretBackendCert"], () => require("./pkiSecretBackendCert"));

export { PkiSecretBackendConfigCaArgs, PkiSecretBackendConfigCaState } from "./pkiSecretBackendConfigCa";
export type PkiSecretBackendConfigCa = import("./pkiSecretBackendConfigCa").PkiSecretBackendConfigCa;
export const PkiSecretBackendConfigCa: typeof import("./pkiSecretBackendConfigCa").PkiSecretBackendConfigCa = null as any;
utilities.lazyLoad(exports, ["PkiSecretBackendConfigCa"], () => require("./pkiSecretBackendConfigCa"));

export { PkiSecretBackendConfigClusterArgs, PkiSecretBackendConfigClusterState } from "./pkiSecretBackendConfigCluster";
export type PkiSecretBackendConfigCluster = import("./pkiSecretBackendConfigCluster").PkiSecretBackendConfigCluster;
export const PkiSecretBackendConfigCluster: typeof import("./pkiSecretBackendConfigCluster").PkiSecretBackendConfigCluster = null as any;
utilities.lazyLoad(exports, ["PkiSecretBackendConfigCluster"], () => require("./pkiSecretBackendConfigCluster"));

export { PkiSecretBackendConfigEstArgs, PkiSecretBackendConfigEstState } from "./pkiSecretBackendConfigEst";
export type PkiSecretBackendConfigEst = import("./pkiSecretBackendConfigEst").PkiSecretBackendConfigEst;
export const PkiSecretBackendConfigEst: typeof import("./pkiSecretBackendConfigEst").PkiSecretBackendConfigEst = null as any;
utilities.lazyLoad(exports, ["PkiSecretBackendConfigEst"], () => require("./pkiSecretBackendConfigEst"));

export { PkiSecretBackendConfigIssuersArgs, PkiSecretBackendConfigIssuersState } from "./pkiSecretBackendConfigIssuers";
export type PkiSecretBackendConfigIssuers = import("./pkiSecretBackendConfigIssuers").PkiSecretBackendConfigIssuers;
export const PkiSecretBackendConfigIssuers: typeof import("./pkiSecretBackendConfigIssuers").PkiSecretBackendConfigIssuers = null as any;
utilities.lazyLoad(exports, ["PkiSecretBackendConfigIssuers"], () => require("./pkiSecretBackendConfigIssuers"));

export { PkiSecretBackendConfigUrlsArgs, PkiSecretBackendConfigUrlsState } from "./pkiSecretBackendConfigUrls";
export type PkiSecretBackendConfigUrls = import("./pkiSecretBackendConfigUrls").PkiSecretBackendConfigUrls;
export const PkiSecretBackendConfigUrls: typeof import("./pkiSecretBackendConfigUrls").PkiSecretBackendConfigUrls = null as any;
utilities.lazyLoad(exports, ["PkiSecretBackendConfigUrls"], () => require("./pkiSecretBackendConfigUrls"));

export { PkiSecretBackendCrlConfigArgs, PkiSecretBackendCrlConfigState } from "./pkiSecretBackendCrlConfig";
export type PkiSecretBackendCrlConfig = import("./pkiSecretBackendCrlConfig").PkiSecretBackendCrlConfig;
export const PkiSecretBackendCrlConfig: typeof import("./pkiSecretBackendCrlConfig").PkiSecretBackendCrlConfig = null as any;
utilities.lazyLoad(exports, ["PkiSecretBackendCrlConfig"], () => require("./pkiSecretBackendCrlConfig"));

export { PkiSecretBackendIntermediateCertRequestArgs, PkiSecretBackendIntermediateCertRequestState } from "./pkiSecretBackendIntermediateCertRequest";
export type PkiSecretBackendIntermediateCertRequest = import("./pkiSecretBackendIntermediateCertRequest").PkiSecretBackendIntermediateCertRequest;
export const PkiSecretBackendIntermediateCertRequest: typeof import("./pkiSecretBackendIntermediateCertRequest").PkiSecretBackendIntermediateCertRequest = null as any;
utilities.lazyLoad(exports, ["PkiSecretBackendIntermediateCertRequest"], () => require("./pkiSecretBackendIntermediateCertRequest"));

export { PkiSecretBackendIntermediateSetSignedArgs, PkiSecretBackendIntermediateSetSignedState } from "./pkiSecretBackendIntermediateSetSigned";
export type PkiSecretBackendIntermediateSetSigned = import("./pkiSecretBackendIntermediateSetSigned").PkiSecretBackendIntermediateSetSigned;
export const PkiSecretBackendIntermediateSetSigned: typeof import("./pkiSecretBackendIntermediateSetSigned").PkiSecretBackendIntermediateSetSigned = null as any;
utilities.lazyLoad(exports, ["PkiSecretBackendIntermediateSetSigned"], () => require("./pkiSecretBackendIntermediateSetSigned"));

export { PkiSecretBackendIssuerArgs, PkiSecretBackendIssuerState } from "./pkiSecretBackendIssuer";
export type PkiSecretBackendIssuer = import("./pkiSecretBackendIssuer").PkiSecretBackendIssuer;
export const PkiSecretBackendIssuer: typeof import("./pkiSecretBackendIssuer").PkiSecretBackendIssuer = null as any;
utilities.lazyLoad(exports, ["PkiSecretBackendIssuer"], () => require("./pkiSecretBackendIssuer"));

export { PkiSecretBackendKeyArgs, PkiSecretBackendKeyState } from "./pkiSecretBackendKey";
export type PkiSecretBackendKey = import("./pkiSecretBackendKey").PkiSecretBackendKey;
export const PkiSecretBackendKey: typeof import("./pkiSecretBackendKey").PkiSecretBackendKey = null as any;
utilities.lazyLoad(exports, ["PkiSecretBackendKey"], () => require("./pkiSecretBackendKey"));

export { PkiSecretBackendRoleArgs, PkiSecretBackendRoleState } from "./pkiSecretBackendRole";
export type PkiSecretBackendRole = import("./pkiSecretBackendRole").PkiSecretBackendRole;
export const PkiSecretBackendRole: typeof import("./pkiSecretBackendRole").PkiSecretBackendRole = null as any;
utilities.lazyLoad(exports, ["PkiSecretBackendRole"], () => require("./pkiSecretBackendRole"));

export { PkiSecretBackendRootCertArgs, PkiSecretBackendRootCertState } from "./pkiSecretBackendRootCert";
export type PkiSecretBackendRootCert = import("./pkiSecretBackendRootCert").PkiSecretBackendRootCert;
export const PkiSecretBackendRootCert: typeof import("./pkiSecretBackendRootCert").PkiSecretBackendRootCert = null as any;
utilities.lazyLoad(exports, ["PkiSecretBackendRootCert"], () => require("./pkiSecretBackendRootCert"));

export { PkiSecretBackendRootSignIntermediateArgs, PkiSecretBackendRootSignIntermediateState } from "./pkiSecretBackendRootSignIntermediate";
export type PkiSecretBackendRootSignIntermediate = import("./pkiSecretBackendRootSignIntermediate").PkiSecretBackendRootSignIntermediate;
export const PkiSecretBackendRootSignIntermediate: typeof import("./pkiSecretBackendRootSignIntermediate").PkiSecretBackendRootSignIntermediate = null as any;
utilities.lazyLoad(exports, ["PkiSecretBackendRootSignIntermediate"], () => require("./pkiSecretBackendRootSignIntermediate"));

export { PkiSecretBackendSignArgs, PkiSecretBackendSignState } from "./pkiSecretBackendSign";
export type PkiSecretBackendSign = import("./pkiSecretBackendSign").PkiSecretBackendSign;
export const PkiSecretBackendSign: typeof import("./pkiSecretBackendSign").PkiSecretBackendSign = null as any;
utilities.lazyLoad(exports, ["PkiSecretBackendSign"], () => require("./pkiSecretBackendSign"));

export { PluginArgs, PluginState } from "./plugin";
export type Plugin = import("./plugin").Plugin;
export const Plugin: typeof import("./plugin").Plugin = null as any;
utilities.lazyLoad(exports, ["Plugin"], () => require("./plugin"));

export { PluginPinnedVersionArgs, PluginPinnedVersionState } from "./pluginPinnedVersion";
export type PluginPinnedVersion = import("./pluginPinnedVersion").PluginPinnedVersion;
export const PluginPinnedVersion: typeof import("./pluginPinnedVersion").PluginPinnedVersion = null as any;
utilities.lazyLoad(exports, ["PluginPinnedVersion"], () => require("./pluginPinnedVersion"));

export { PolicyArgs, PolicyState } from "./policy";
export type Policy = import("./policy").Policy;
export const Policy: typeof import("./policy").Policy = null as any;
utilities.lazyLoad(exports, ["Policy"], () => require("./policy"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { QuotaLeaseCountArgs, QuotaLeaseCountState } from "./quotaLeaseCount";
export type QuotaLeaseCount = import("./quotaLeaseCount").QuotaLeaseCount;
export const QuotaLeaseCount: typeof import("./quotaLeaseCount").QuotaLeaseCount = null as any;
utilities.lazyLoad(exports, ["QuotaLeaseCount"], () => require("./quotaLeaseCount"));

export { QuotaRateLimitArgs, QuotaRateLimitState } from "./quotaRateLimit";
export type QuotaRateLimit = import("./quotaRateLimit").QuotaRateLimit;
export const QuotaRateLimit: typeof import("./quotaRateLimit").QuotaRateLimit = null as any;
utilities.lazyLoad(exports, ["QuotaRateLimit"], () => require("./quotaRateLimit"));

export { RabbitmqSecretBackendArgs, RabbitmqSecretBackendState } from "./rabbitmqSecretBackend";
export type RabbitmqSecretBackend = import("./rabbitmqSecretBackend").RabbitmqSecretBackend;
export const RabbitmqSecretBackend: typeof import("./rabbitmqSecretBackend").RabbitmqSecretBackend = null as any;
utilities.lazyLoad(exports, ["RabbitmqSecretBackend"], () => require("./rabbitmqSecretBackend"));

export { RabbitmqSecretBackendRoleArgs, RabbitmqSecretBackendRoleState } from "./rabbitmqSecretBackendRole";
export type RabbitmqSecretBackendRole = import("./rabbitmqSecretBackendRole").RabbitmqSecretBackendRole;
export const RabbitmqSecretBackendRole: typeof import("./rabbitmqSecretBackendRole").RabbitmqSecretBackendRole = null as any;
utilities.lazyLoad(exports, ["RabbitmqSecretBackendRole"], () => require("./rabbitmqSecretBackendRole"));

export { RaftAutopilotArgs, RaftAutopilotState } from "./raftAutopilot";
export type RaftAutopilot = import("./raftAutopilot").RaftAutopilot;
export const RaftAutopilot: typeof import("./raftAutopilot").RaftAutopilot = null as any;
utilities.lazyLoad(exports, ["RaftAutopilot"], () => require("./raftAutopilot"));

export { RaftSnapshotAgentConfigArgs, RaftSnapshotAgentConfigState } from "./raftSnapshotAgentConfig";
export type RaftSnapshotAgentConfig = import("./raftSnapshotAgentConfig").RaftSnapshotAgentConfig;
export const RaftSnapshotAgentConfig: typeof import("./raftSnapshotAgentConfig").RaftSnapshotAgentConfig = null as any;
utilities.lazyLoad(exports, ["RaftSnapshotAgentConfig"], () => require("./raftSnapshotAgentConfig"));

export { RgpPolicyArgs, RgpPolicyState } from "./rgpPolicy";
export type RgpPolicy = import("./rgpPolicy").RgpPolicy;
export const RgpPolicy: typeof import("./rgpPolicy").RgpPolicy = null as any;
utilities.lazyLoad(exports, ["RgpPolicy"], () => require("./rgpPolicy"));

export { SamlAuthBackendArgs, SamlAuthBackendState } from "./samlAuthBackend";
export type SamlAuthBackend = import("./samlAuthBackend").SamlAuthBackend;
export const SamlAuthBackend: typeof import("./samlAuthBackend").SamlAuthBackend = null as any;
utilities.lazyLoad(exports, ["SamlAuthBackend"], () => require("./samlAuthBackend"));

export { SamlAuthBackendRoleArgs, SamlAuthBackendRoleState } from "./samlAuthBackendRole";
export type SamlAuthBackendRole = import("./samlAuthBackendRole").SamlAuthBackendRole;
export const SamlAuthBackendRole: typeof import("./samlAuthBackendRole").SamlAuthBackendRole = null as any;
utilities.lazyLoad(exports, ["SamlAuthBackendRole"], () => require("./samlAuthBackendRole"));

export { SecretsSyncAssociationArgs, SecretsSyncAssociationState } from "./secretsSyncAssociation";
export type SecretsSyncAssociation = import("./secretsSyncAssociation").SecretsSyncAssociation;
export const SecretsSyncAssociation: typeof import("./secretsSyncAssociation").SecretsSyncAssociation = null as any;
utilities.lazyLoad(exports, ["SecretsSyncAssociation"], () => require("./secretsSyncAssociation"));

export { SecretsSyncAwsDestinationArgs, SecretsSyncAwsDestinationState } from "./secretsSyncAwsDestination";
export type SecretsSyncAwsDestination = import("./secretsSyncAwsDestination").SecretsSyncAwsDestination;
export const SecretsSyncAwsDestination: typeof import("./secretsSyncAwsDestination").SecretsSyncAwsDestination = null as any;
utilities.lazyLoad(exports, ["SecretsSyncAwsDestination"], () => require("./secretsSyncAwsDestination"));

export { SecretsSyncAzureDestinationArgs, SecretsSyncAzureDestinationState } from "./secretsSyncAzureDestination";
export type SecretsSyncAzureDestination = import("./secretsSyncAzureDestination").SecretsSyncAzureDestination;
export const SecretsSyncAzureDestination: typeof import("./secretsSyncAzureDestination").SecretsSyncAzureDestination = null as any;
utilities.lazyLoad(exports, ["SecretsSyncAzureDestination"], () => require("./secretsSyncAzureDestination"));

export { SecretsSyncConfigArgs, SecretsSyncConfigState } from "./secretsSyncConfig";
export type SecretsSyncConfig = import("./secretsSyncConfig").SecretsSyncConfig;
export const SecretsSyncConfig: typeof import("./secretsSyncConfig").SecretsSyncConfig = null as any;
utilities.lazyLoad(exports, ["SecretsSyncConfig"], () => require("./secretsSyncConfig"));

export { SecretsSyncGcpDestinationArgs, SecretsSyncGcpDestinationState } from "./secretsSyncGcpDestination";
export type SecretsSyncGcpDestination = import("./secretsSyncGcpDestination").SecretsSyncGcpDestination;
export const SecretsSyncGcpDestination: typeof import("./secretsSyncGcpDestination").SecretsSyncGcpDestination = null as any;
utilities.lazyLoad(exports, ["SecretsSyncGcpDestination"], () => require("./secretsSyncGcpDestination"));

export { SecretsSyncGhDestinationArgs, SecretsSyncGhDestinationState } from "./secretsSyncGhDestination";
export type SecretsSyncGhDestination = import("./secretsSyncGhDestination").SecretsSyncGhDestination;
export const SecretsSyncGhDestination: typeof import("./secretsSyncGhDestination").SecretsSyncGhDestination = null as any;
utilities.lazyLoad(exports, ["SecretsSyncGhDestination"], () => require("./secretsSyncGhDestination"));

export { SecretsSyncGithubAppsArgs, SecretsSyncGithubAppsState } from "./secretsSyncGithubApps";
export type SecretsSyncGithubApps = import("./secretsSyncGithubApps").SecretsSyncGithubApps;
export const SecretsSyncGithubApps: typeof import("./secretsSyncGithubApps").SecretsSyncGithubApps = null as any;
utilities.lazyLoad(exports, ["SecretsSyncGithubApps"], () => require("./secretsSyncGithubApps"));

export { SecretsSyncVercelDestinationArgs, SecretsSyncVercelDestinationState } from "./secretsSyncVercelDestination";
export type SecretsSyncVercelDestination = import("./secretsSyncVercelDestination").SecretsSyncVercelDestination;
export const SecretsSyncVercelDestination: typeof import("./secretsSyncVercelDestination").SecretsSyncVercelDestination = null as any;
utilities.lazyLoad(exports, ["SecretsSyncVercelDestination"], () => require("./secretsSyncVercelDestination"));

export { SshSecretBackendCaArgs, SshSecretBackendCaState } from "./sshSecretBackendCa";
export type SshSecretBackendCa = import("./sshSecretBackendCa").SshSecretBackendCa;
export const SshSecretBackendCa: typeof import("./sshSecretBackendCa").SshSecretBackendCa = null as any;
utilities.lazyLoad(exports, ["SshSecretBackendCa"], () => require("./sshSecretBackendCa"));

export { SshSecretBackendRoleArgs, SshSecretBackendRoleState } from "./sshSecretBackendRole";
export type SshSecretBackendRole = import("./sshSecretBackendRole").SshSecretBackendRole;
export const SshSecretBackendRole: typeof import("./sshSecretBackendRole").SshSecretBackendRole = null as any;
utilities.lazyLoad(exports, ["SshSecretBackendRole"], () => require("./sshSecretBackendRole"));

export { TerraformCloudSecretBackendArgs, TerraformCloudSecretBackendState } from "./terraformCloudSecretBackend";
export type TerraformCloudSecretBackend = import("./terraformCloudSecretBackend").TerraformCloudSecretBackend;
export const TerraformCloudSecretBackend: typeof import("./terraformCloudSecretBackend").TerraformCloudSecretBackend = null as any;
utilities.lazyLoad(exports, ["TerraformCloudSecretBackend"], () => require("./terraformCloudSecretBackend"));

export { TerraformCloudSecretCredsArgs, TerraformCloudSecretCredsState } from "./terraformCloudSecretCreds";
export type TerraformCloudSecretCreds = import("./terraformCloudSecretCreds").TerraformCloudSecretCreds;
export const TerraformCloudSecretCreds: typeof import("./terraformCloudSecretCreds").TerraformCloudSecretCreds = null as any;
utilities.lazyLoad(exports, ["TerraformCloudSecretCreds"], () => require("./terraformCloudSecretCreds"));

export { TerraformCloudSecretRoleArgs, TerraformCloudSecretRoleState } from "./terraformCloudSecretRole";
export type TerraformCloudSecretRole = import("./terraformCloudSecretRole").TerraformCloudSecretRole;
export const TerraformCloudSecretRole: typeof import("./terraformCloudSecretRole").TerraformCloudSecretRole = null as any;
utilities.lazyLoad(exports, ["TerraformCloudSecretRole"], () => require("./terraformCloudSecretRole"));

export { TokenArgs, TokenState } from "./token";
export type Token = import("./token").Token;
export const Token: typeof import("./token").Token = null as any;
utilities.lazyLoad(exports, ["Token"], () => require("./token"));

export { TokenAuthBackendRoleArgs, TokenAuthBackendRoleState } from "./tokenAuthBackendRole";
export type TokenAuthBackendRole = import("./tokenAuthBackendRole").TokenAuthBackendRole;
export const TokenAuthBackendRole: typeof import("./tokenAuthBackendRole").TokenAuthBackendRole = null as any;
utilities.lazyLoad(exports, ["TokenAuthBackendRole"], () => require("./tokenAuthBackendRole"));

export { TransformAlphabetArgs, TransformAlphabetState } from "./transformAlphabet";
export type TransformAlphabet = import("./transformAlphabet").TransformAlphabet;
export const TransformAlphabet: typeof import("./transformAlphabet").TransformAlphabet = null as any;
utilities.lazyLoad(exports, ["TransformAlphabet"], () => require("./transformAlphabet"));

export { TransformRoleArgs, TransformRoleState } from "./transformRole";
export type TransformRole = import("./transformRole").TransformRole;
export const TransformRole: typeof import("./transformRole").TransformRole = null as any;
utilities.lazyLoad(exports, ["TransformRole"], () => require("./transformRole"));

export { TransformTemplateArgs, TransformTemplateState } from "./transformTemplate";
export type TransformTemplate = import("./transformTemplate").TransformTemplate;
export const TransformTemplate: typeof import("./transformTemplate").TransformTemplate = null as any;
utilities.lazyLoad(exports, ["TransformTemplate"], () => require("./transformTemplate"));

export { TransformTransformationArgs, TransformTransformationState } from "./transformTransformation";
export type TransformTransformation = import("./transformTransformation").TransformTransformation;
export const TransformTransformation: typeof import("./transformTransformation").TransformTransformation = null as any;
utilities.lazyLoad(exports, ["TransformTransformation"], () => require("./transformTransformation"));

export { TransitSecretBackendKeyArgs, TransitSecretBackendKeyState } from "./transitSecretBackendKey";
export type TransitSecretBackendKey = import("./transitSecretBackendKey").TransitSecretBackendKey;
export const TransitSecretBackendKey: typeof import("./transitSecretBackendKey").TransitSecretBackendKey = null as any;
utilities.lazyLoad(exports, ["TransitSecretBackendKey"], () => require("./transitSecretBackendKey"));

export { TransitSecretCacheConfigArgs, TransitSecretCacheConfigState } from "./transitSecretCacheConfig";
export type TransitSecretCacheConfig = import("./transitSecretCacheConfig").TransitSecretCacheConfig;
export const TransitSecretCacheConfig: typeof import("./transitSecretCacheConfig").TransitSecretCacheConfig = null as any;
utilities.lazyLoad(exports, ["TransitSecretCacheConfig"], () => require("./transitSecretCacheConfig"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "vault:index/adSecretBackend:AdSecretBackend":
                return new AdSecretBackend(name, <any>undefined, { urn })
            case "vault:index/adSecretLibrary:AdSecretLibrary":
                return new AdSecretLibrary(name, <any>undefined, { urn })
            case "vault:index/adSecretRole:AdSecretRole":
                return new AdSecretRole(name, <any>undefined, { urn })
            case "vault:index/alicloudAuthBackendRole:AlicloudAuthBackendRole":
                return new AlicloudAuthBackendRole(name, <any>undefined, { urn })
            case "vault:index/approleAuthBackendLogin:ApproleAuthBackendLogin":
                return new ApproleAuthBackendLogin(name, <any>undefined, { urn })
            case "vault:index/approleAuthBackendRole:ApproleAuthBackendRole":
                return new ApproleAuthBackendRole(name, <any>undefined, { urn })
            case "vault:index/approleAuthBackendRoleSecretId:ApproleAuthBackendRoleSecretId":
                return new ApproleAuthBackendRoleSecretId(name, <any>undefined, { urn })
            case "vault:index/audit:Audit":
                return new Audit(name, <any>undefined, { urn })
            case "vault:index/auditRequestHeader:AuditRequestHeader":
                return new AuditRequestHeader(name, <any>undefined, { urn })
            case "vault:index/authBackend:AuthBackend":
                return new AuthBackend(name, <any>undefined, { urn })
            case "vault:index/awsAuthBackendCert:AwsAuthBackendCert":
                return new AwsAuthBackendCert(name, <any>undefined, { urn })
            case "vault:index/awsAuthBackendClient:AwsAuthBackendClient":
                return new AwsAuthBackendClient(name, <any>undefined, { urn })
            case "vault:index/awsAuthBackendConfigIdentity:AwsAuthBackendConfigIdentity":
                return new AwsAuthBackendConfigIdentity(name, <any>undefined, { urn })
            case "vault:index/awsAuthBackendIdentityWhitelist:AwsAuthBackendIdentityWhitelist":
                return new AwsAuthBackendIdentityWhitelist(name, <any>undefined, { urn })
            case "vault:index/awsAuthBackendLogin:AwsAuthBackendLogin":
                return new AwsAuthBackendLogin(name, <any>undefined, { urn })
            case "vault:index/awsAuthBackendRole:AwsAuthBackendRole":
                return new AwsAuthBackendRole(name, <any>undefined, { urn })
            case "vault:index/awsAuthBackendRoleTag:AwsAuthBackendRoleTag":
                return new AwsAuthBackendRoleTag(name, <any>undefined, { urn })
            case "vault:index/awsAuthBackendRoletagBlacklist:AwsAuthBackendRoletagBlacklist":
                return new AwsAuthBackendRoletagBlacklist(name, <any>undefined, { urn })
            case "vault:index/awsAuthBackendStsRole:AwsAuthBackendStsRole":
                return new AwsAuthBackendStsRole(name, <any>undefined, { urn })
            case "vault:index/awsSecretBackend:AwsSecretBackend":
                return new AwsSecretBackend(name, <any>undefined, { urn })
            case "vault:index/awsSecretBackendRole:AwsSecretBackendRole":
                return new AwsSecretBackendRole(name, <any>undefined, { urn })
            case "vault:index/awsSecretBackendStaticRole:AwsSecretBackendStaticRole":
                return new AwsSecretBackendStaticRole(name, <any>undefined, { urn })
            case "vault:index/azureAuthBackendConfig:AzureAuthBackendConfig":
                return new AzureAuthBackendConfig(name, <any>undefined, { urn })
            case "vault:index/azureAuthBackendRole:AzureAuthBackendRole":
                return new AzureAuthBackendRole(name, <any>undefined, { urn })
            case "vault:index/azureSecretBackend:AzureSecretBackend":
                return new AzureSecretBackend(name, <any>undefined, { urn })
            case "vault:index/azureSecretBackendRole:AzureSecretBackendRole":
                return new AzureSecretBackendRole(name, <any>undefined, { urn })
            case "vault:index/certAuthBackendRole:CertAuthBackendRole":
                return new CertAuthBackendRole(name, <any>undefined, { urn })
            case "vault:index/configUiCustomMessage:ConfigUiCustomMessage":
                return new ConfigUiCustomMessage(name, <any>undefined, { urn })
            case "vault:index/consulSecretBackend:ConsulSecretBackend":
                return new ConsulSecretBackend(name, <any>undefined, { urn })
            case "vault:index/consulSecretBackendRole:ConsulSecretBackendRole":
                return new ConsulSecretBackendRole(name, <any>undefined, { urn })
            case "vault:index/databaseSecretBackendConnection:DatabaseSecretBackendConnection":
                return new DatabaseSecretBackendConnection(name, <any>undefined, { urn })
            case "vault:index/databaseSecretBackendRole:DatabaseSecretBackendRole":
                return new DatabaseSecretBackendRole(name, <any>undefined, { urn })
            case "vault:index/databaseSecretBackendStaticRole:DatabaseSecretBackendStaticRole":
                return new DatabaseSecretBackendStaticRole(name, <any>undefined, { urn })
            case "vault:index/databaseSecretsMount:DatabaseSecretsMount":
                return new DatabaseSecretsMount(name, <any>undefined, { urn })
            case "vault:index/egpPolicy:EgpPolicy":
                return new EgpPolicy(name, <any>undefined, { urn })
            case "vault:index/gcpAuthBackend:GcpAuthBackend":
                return new GcpAuthBackend(name, <any>undefined, { urn })
            case "vault:index/gcpAuthBackendRole:GcpAuthBackendRole":
                return new GcpAuthBackendRole(name, <any>undefined, { urn })
            case "vault:index/gcpSecretBackend:GcpSecretBackend":
                return new GcpSecretBackend(name, <any>undefined, { urn })
            case "vault:index/gcpSecretImpersonatedAccount:GcpSecretImpersonatedAccount":
                return new GcpSecretImpersonatedAccount(name, <any>undefined, { urn })
            case "vault:index/gcpSecretRoleset:GcpSecretRoleset":
                return new GcpSecretRoleset(name, <any>undefined, { urn })
            case "vault:index/gcpSecretStaticAccount:GcpSecretStaticAccount":
                return new GcpSecretStaticAccount(name, <any>undefined, { urn })
            case "vault:index/genericEndpoint:GenericEndpoint":
                return new GenericEndpoint(name, <any>undefined, { urn })
            case "vault:index/genericSecret:GenericSecret":
                return new GenericSecret(name, <any>undefined, { urn })
            case "vault:index/githubAuthBackend:GithubAuthBackend":
                return new GithubAuthBackend(name, <any>undefined, { urn })
            case "vault:index/githubTeam:GithubTeam":
                return new GithubTeam(name, <any>undefined, { urn })
            case "vault:index/githubUser:GithubUser":
                return new GithubUser(name, <any>undefined, { urn })
            case "vault:index/identityEntity:IdentityEntity":
                return new IdentityEntity(name, <any>undefined, { urn })
            case "vault:index/identityEntityAlias:IdentityEntityAlias":
                return new IdentityEntityAlias(name, <any>undefined, { urn })
            case "vault:index/identityEntityPolicies:IdentityEntityPolicies":
                return new IdentityEntityPolicies(name, <any>undefined, { urn })
            case "vault:index/identityGroup:IdentityGroup":
                return new IdentityGroup(name, <any>undefined, { urn })
            case "vault:index/identityGroupAlias:IdentityGroupAlias":
                return new IdentityGroupAlias(name, <any>undefined, { urn })
            case "vault:index/identityGroupMemberEntityIds:IdentityGroupMemberEntityIds":
                return new IdentityGroupMemberEntityIds(name, <any>undefined, { urn })
            case "vault:index/identityGroupMemberGroupIds:IdentityGroupMemberGroupIds":
                return new IdentityGroupMemberGroupIds(name, <any>undefined, { urn })
            case "vault:index/identityGroupPolicies:IdentityGroupPolicies":
                return new IdentityGroupPolicies(name, <any>undefined, { urn })
            case "vault:index/identityMfaDuo:IdentityMfaDuo":
                return new IdentityMfaDuo(name, <any>undefined, { urn })
            case "vault:index/identityMfaLoginEnforcement:IdentityMfaLoginEnforcement":
                return new IdentityMfaLoginEnforcement(name, <any>undefined, { urn })
            case "vault:index/identityMfaOkta:IdentityMfaOkta":
                return new IdentityMfaOkta(name, <any>undefined, { urn })
            case "vault:index/identityMfaPingid:IdentityMfaPingid":
                return new IdentityMfaPingid(name, <any>undefined, { urn })
            case "vault:index/identityMfaTotp:IdentityMfaTotp":
                return new IdentityMfaTotp(name, <any>undefined, { urn })
            case "vault:index/identityOidc:IdentityOidc":
                return new IdentityOidc(name, <any>undefined, { urn })
            case "vault:index/identityOidcAssignment:IdentityOidcAssignment":
                return new IdentityOidcAssignment(name, <any>undefined, { urn })
            case "vault:index/identityOidcClient:IdentityOidcClient":
                return new IdentityOidcClient(name, <any>undefined, { urn })
            case "vault:index/identityOidcKey:IdentityOidcKey":
                return new IdentityOidcKey(name, <any>undefined, { urn })
            case "vault:index/identityOidcKeyAllowedClientId:IdentityOidcKeyAllowedClientId":
                return new IdentityOidcKeyAllowedClientId(name, <any>undefined, { urn })
            case "vault:index/identityOidcProvider:IdentityOidcProvider":
                return new IdentityOidcProvider(name, <any>undefined, { urn })
            case "vault:index/identityOidcRole:IdentityOidcRole":
                return new IdentityOidcRole(name, <any>undefined, { urn })
            case "vault:index/identityOidcScope:IdentityOidcScope":
                return new IdentityOidcScope(name, <any>undefined, { urn })
            case "vault:index/jwtAuthBackend:JwtAuthBackend":
                return new JwtAuthBackend(name, <any>undefined, { urn })
            case "vault:index/jwtAuthBackendRole:JwtAuthBackendRole":
                return new JwtAuthBackendRole(name, <any>undefined, { urn })
            case "vault:index/kmipSecretBackend:KmipSecretBackend":
                return new KmipSecretBackend(name, <any>undefined, { urn })
            case "vault:index/kmipSecretRole:KmipSecretRole":
                return new KmipSecretRole(name, <any>undefined, { urn })
            case "vault:index/kmipSecretScope:KmipSecretScope":
                return new KmipSecretScope(name, <any>undefined, { urn })
            case "vault:index/kubernetesAuthBackendConfig:KubernetesAuthBackendConfig":
                return new KubernetesAuthBackendConfig(name, <any>undefined, { urn })
            case "vault:index/kubernetesAuthBackendRole:KubernetesAuthBackendRole":
                return new KubernetesAuthBackendRole(name, <any>undefined, { urn })
            case "vault:index/kubernetesSecretBackend:KubernetesSecretBackend":
                return new KubernetesSecretBackend(name, <any>undefined, { urn })
            case "vault:index/kubernetesSecretBackendRole:KubernetesSecretBackendRole":
                return new KubernetesSecretBackendRole(name, <any>undefined, { urn })
            case "vault:index/kvSecret:KvSecret":
                return new KvSecret(name, <any>undefined, { urn })
            case "vault:index/kvSecretBackendV2:KvSecretBackendV2":
                return new KvSecretBackendV2(name, <any>undefined, { urn })
            case "vault:index/kvSecretV2:KvSecretV2":
                return new KvSecretV2(name, <any>undefined, { urn })
            case "vault:index/ldapAuthBackend:LdapAuthBackend":
                return new LdapAuthBackend(name, <any>undefined, { urn })
            case "vault:index/ldapAuthBackendGroup:LdapAuthBackendGroup":
                return new LdapAuthBackendGroup(name, <any>undefined, { urn })
            case "vault:index/ldapAuthBackendUser:LdapAuthBackendUser":
                return new LdapAuthBackendUser(name, <any>undefined, { urn })
            case "vault:index/ldapSecretBackend:LdapSecretBackend":
                return new LdapSecretBackend(name, <any>undefined, { urn })
            case "vault:index/ldapSecretBackendDynamicRole:LdapSecretBackendDynamicRole":
                return new LdapSecretBackendDynamicRole(name, <any>undefined, { urn })
            case "vault:index/ldapSecretBackendLibrarySet:LdapSecretBackendLibrarySet":
                return new LdapSecretBackendLibrarySet(name, <any>undefined, { urn })
            case "vault:index/ldapSecretBackendStaticRole:LdapSecretBackendStaticRole":
                return new LdapSecretBackendStaticRole(name, <any>undefined, { urn })
            case "vault:index/managedKeys:ManagedKeys":
                return new ManagedKeys(name, <any>undefined, { urn })
            case "vault:index/mfaDuo:MfaDuo":
                return new MfaDuo(name, <any>undefined, { urn })
            case "vault:index/mfaOkta:MfaOkta":
                return new MfaOkta(name, <any>undefined, { urn })
            case "vault:index/mfaPingid:MfaPingid":
                return new MfaPingid(name, <any>undefined, { urn })
            case "vault:index/mfaTotp:MfaTotp":
                return new MfaTotp(name, <any>undefined, { urn })
            case "vault:index/mongodbatlasSecretBackend:MongodbatlasSecretBackend":
                return new MongodbatlasSecretBackend(name, <any>undefined, { urn })
            case "vault:index/mongodbatlasSecretRole:MongodbatlasSecretRole":
                return new MongodbatlasSecretRole(name, <any>undefined, { urn })
            case "vault:index/mount:Mount":
                return new Mount(name, <any>undefined, { urn })
            case "vault:index/namespace:Namespace":
                return new Namespace(name, <any>undefined, { urn })
            case "vault:index/nomadSecretBackend:NomadSecretBackend":
                return new NomadSecretBackend(name, <any>undefined, { urn })
            case "vault:index/nomadSecretRole:NomadSecretRole":
                return new NomadSecretRole(name, <any>undefined, { urn })
            case "vault:index/oktaAuthBackend:OktaAuthBackend":
                return new OktaAuthBackend(name, <any>undefined, { urn })
            case "vault:index/oktaAuthBackendGroup:OktaAuthBackendGroup":
                return new OktaAuthBackendGroup(name, <any>undefined, { urn })
            case "vault:index/oktaAuthBackendUser:OktaAuthBackendUser":
                return new OktaAuthBackendUser(name, <any>undefined, { urn })
            case "vault:index/passwordPolicy:PasswordPolicy":
                return new PasswordPolicy(name, <any>undefined, { urn })
            case "vault:index/pkiSecretBackendCert:PkiSecretBackendCert":
                return new PkiSecretBackendCert(name, <any>undefined, { urn })
            case "vault:index/pkiSecretBackendConfigCa:PkiSecretBackendConfigCa":
                return new PkiSecretBackendConfigCa(name, <any>undefined, { urn })
            case "vault:index/pkiSecretBackendConfigCluster:PkiSecretBackendConfigCluster":
                return new PkiSecretBackendConfigCluster(name, <any>undefined, { urn })
            case "vault:index/pkiSecretBackendConfigEst:PkiSecretBackendConfigEst":
                return new PkiSecretBackendConfigEst(name, <any>undefined, { urn })
            case "vault:index/pkiSecretBackendConfigIssuers:PkiSecretBackendConfigIssuers":
                return new PkiSecretBackendConfigIssuers(name, <any>undefined, { urn })
            case "vault:index/pkiSecretBackendConfigUrls:PkiSecretBackendConfigUrls":
                return new PkiSecretBackendConfigUrls(name, <any>undefined, { urn })
            case "vault:index/pkiSecretBackendCrlConfig:PkiSecretBackendCrlConfig":
                return new PkiSecretBackendCrlConfig(name, <any>undefined, { urn })
            case "vault:index/pkiSecretBackendIntermediateCertRequest:PkiSecretBackendIntermediateCertRequest":
                return new PkiSecretBackendIntermediateCertRequest(name, <any>undefined, { urn })
            case "vault:index/pkiSecretBackendIntermediateSetSigned:PkiSecretBackendIntermediateSetSigned":
                return new PkiSecretBackendIntermediateSetSigned(name, <any>undefined, { urn })
            case "vault:index/pkiSecretBackendIssuer:PkiSecretBackendIssuer":
                return new PkiSecretBackendIssuer(name, <any>undefined, { urn })
            case "vault:index/pkiSecretBackendKey:PkiSecretBackendKey":
                return new PkiSecretBackendKey(name, <any>undefined, { urn })
            case "vault:index/pkiSecretBackendRole:PkiSecretBackendRole":
                return new PkiSecretBackendRole(name, <any>undefined, { urn })
            case "vault:index/pkiSecretBackendRootCert:PkiSecretBackendRootCert":
                return new PkiSecretBackendRootCert(name, <any>undefined, { urn })
            case "vault:index/pkiSecretBackendRootSignIntermediate:PkiSecretBackendRootSignIntermediate":
                return new PkiSecretBackendRootSignIntermediate(name, <any>undefined, { urn })
            case "vault:index/pkiSecretBackendSign:PkiSecretBackendSign":
                return new PkiSecretBackendSign(name, <any>undefined, { urn })
            case "vault:index/plugin:Plugin":
                return new Plugin(name, <any>undefined, { urn })
            case "vault:index/pluginPinnedVersion:PluginPinnedVersion":
                return new PluginPinnedVersion(name, <any>undefined, { urn })
            case "vault:index/policy:Policy":
                return new Policy(name, <any>undefined, { urn })
            case "vault:index/quotaLeaseCount:QuotaLeaseCount":
                return new QuotaLeaseCount(name, <any>undefined, { urn })
            case "vault:index/quotaRateLimit:QuotaRateLimit":
                return new QuotaRateLimit(name, <any>undefined, { urn })
            case "vault:index/rabbitmqSecretBackend:RabbitmqSecretBackend":
                return new RabbitmqSecretBackend(name, <any>undefined, { urn })
            case "vault:index/rabbitmqSecretBackendRole:RabbitmqSecretBackendRole":
                return new RabbitmqSecretBackendRole(name, <any>undefined, { urn })
            case "vault:index/raftAutopilot:RaftAutopilot":
                return new RaftAutopilot(name, <any>undefined, { urn })
            case "vault:index/raftSnapshotAgentConfig:RaftSnapshotAgentConfig":
                return new RaftSnapshotAgentConfig(name, <any>undefined, { urn })
            case "vault:index/rgpPolicy:RgpPolicy":
                return new RgpPolicy(name, <any>undefined, { urn })
            case "vault:index/samlAuthBackend:SamlAuthBackend":
                return new SamlAuthBackend(name, <any>undefined, { urn })
            case "vault:index/samlAuthBackendRole:SamlAuthBackendRole":
                return new SamlAuthBackendRole(name, <any>undefined, { urn })
            case "vault:index/secretsSyncAssociation:SecretsSyncAssociation":
                return new SecretsSyncAssociation(name, <any>undefined, { urn })
            case "vault:index/secretsSyncAwsDestination:SecretsSyncAwsDestination":
                return new SecretsSyncAwsDestination(name, <any>undefined, { urn })
            case "vault:index/secretsSyncAzureDestination:SecretsSyncAzureDestination":
                return new SecretsSyncAzureDestination(name, <any>undefined, { urn })
            case "vault:index/secretsSyncConfig:SecretsSyncConfig":
                return new SecretsSyncConfig(name, <any>undefined, { urn })
            case "vault:index/secretsSyncGcpDestination:SecretsSyncGcpDestination":
                return new SecretsSyncGcpDestination(name, <any>undefined, { urn })
            case "vault:index/secretsSyncGhDestination:SecretsSyncGhDestination":
                return new SecretsSyncGhDestination(name, <any>undefined, { urn })
            case "vault:index/secretsSyncGithubApps:SecretsSyncGithubApps":
                return new SecretsSyncGithubApps(name, <any>undefined, { urn })
            case "vault:index/secretsSyncVercelDestination:SecretsSyncVercelDestination":
                return new SecretsSyncVercelDestination(name, <any>undefined, { urn })
            case "vault:index/sshSecretBackendCa:SshSecretBackendCa":
                return new SshSecretBackendCa(name, <any>undefined, { urn })
            case "vault:index/sshSecretBackendRole:SshSecretBackendRole":
                return new SshSecretBackendRole(name, <any>undefined, { urn })
            case "vault:index/terraformCloudSecretBackend:TerraformCloudSecretBackend":
                return new TerraformCloudSecretBackend(name, <any>undefined, { urn })
            case "vault:index/terraformCloudSecretCreds:TerraformCloudSecretCreds":
                return new TerraformCloudSecretCreds(name, <any>undefined, { urn })
            case "vault:index/terraformCloudSecretRole:TerraformCloudSecretRole":
                return new TerraformCloudSecretRole(name, <any>undefined, { urn })
            case "vault:index/token:Token":
                return new Token(name, <any>undefined, { urn })
            case "vault:index/tokenAuthBackendRole:TokenAuthBackendRole":
                return new TokenAuthBackendRole(name, <any>undefined, { urn })
            case "vault:index/transformAlphabet:TransformAlphabet":
                return new TransformAlphabet(name, <any>undefined, { urn })
            case "vault:index/transformRole:TransformRole":
                return new TransformRole(name, <any>undefined, { urn })
            case "vault:index/transformTemplate:TransformTemplate":
                return new TransformTemplate(name, <any>undefined, { urn })
            case "vault:index/transformTransformation:TransformTransformation":
                return new TransformTransformation(name, <any>undefined, { urn })
            case "vault:index/transitSecretBackendKey:TransitSecretBackendKey":
                return new TransitSecretBackendKey(name, <any>undefined, { urn })
            case "vault:index/transitSecretCacheConfig:TransitSecretCacheConfig":
                return new TransitSecretCacheConfig(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("vault", "index/adSecretBackend", _module)
pulumi.runtime.registerResourceModule("vault", "index/adSecretLibrary", _module)
pulumi.runtime.registerResourceModule("vault", "index/adSecretRole", _module)
pulumi.runtime.registerResourceModule("vault", "index/alicloudAuthBackendRole", _module)
pulumi.runtime.registerResourceModule("vault", "index/approleAuthBackendLogin", _module)
pulumi.runtime.registerResourceModule("vault", "index/approleAuthBackendRole", _module)
pulumi.runtime.registerResourceModule("vault", "index/approleAuthBackendRoleSecretId", _module)
pulumi.runtime.registerResourceModule("vault", "index/audit", _module)
pulumi.runtime.registerResourceModule("vault", "index/auditRequestHeader", _module)
pulumi.runtime.registerResourceModule("vault", "index/authBackend", _module)
pulumi.runtime.registerResourceModule("vault", "index/awsAuthBackendCert", _module)
pulumi.runtime.registerResourceModule("vault", "index/awsAuthBackendClient", _module)
pulumi.runtime.registerResourceModule("vault", "index/awsAuthBackendConfigIdentity", _module)
pulumi.runtime.registerResourceModule("vault", "index/awsAuthBackendIdentityWhitelist", _module)
pulumi.runtime.registerResourceModule("vault", "index/awsAuthBackendLogin", _module)
pulumi.runtime.registerResourceModule("vault", "index/awsAuthBackendRole", _module)
pulumi.runtime.registerResourceModule("vault", "index/awsAuthBackendRoleTag", _module)
pulumi.runtime.registerResourceModule("vault", "index/awsAuthBackendRoletagBlacklist", _module)
pulumi.runtime.registerResourceModule("vault", "index/awsAuthBackendStsRole", _module)
pulumi.runtime.registerResourceModule("vault", "index/awsSecretBackend", _module)
pulumi.runtime.registerResourceModule("vault", "index/awsSecretBackendRole", _module)
pulumi.runtime.registerResourceModule("vault", "index/awsSecretBackendStaticRole", _module)
pulumi.runtime.registerResourceModule("vault", "index/azureAuthBackendConfig", _module)
pulumi.runtime.registerResourceModule("vault", "index/azureAuthBackendRole", _module)
pulumi.runtime.registerResourceModule("vault", "index/azureSecretBackend", _module)
pulumi.runtime.registerResourceModule("vault", "index/azureSecretBackendRole", _module)
pulumi.runtime.registerResourceModule("vault", "index/certAuthBackendRole", _module)
pulumi.runtime.registerResourceModule("vault", "index/configUiCustomMessage", _module)
pulumi.runtime.registerResourceModule("vault", "index/consulSecretBackend", _module)
pulumi.runtime.registerResourceModule("vault", "index/consulSecretBackendRole", _module)
pulumi.runtime.registerResourceModule("vault", "index/databaseSecretBackendConnection", _module)
pulumi.runtime.registerResourceModule("vault", "index/databaseSecretBackendRole", _module)
pulumi.runtime.registerResourceModule("vault", "index/databaseSecretBackendStaticRole", _module)
pulumi.runtime.registerResourceModule("vault", "index/databaseSecretsMount", _module)
pulumi.runtime.registerResourceModule("vault", "index/egpPolicy", _module)
pulumi.runtime.registerResourceModule("vault", "index/gcpAuthBackend", _module)
pulumi.runtime.registerResourceModule("vault", "index/gcpAuthBackendRole", _module)
pulumi.runtime.registerResourceModule("vault", "index/gcpSecretBackend", _module)
pulumi.runtime.registerResourceModule("vault", "index/gcpSecretImpersonatedAccount", _module)
pulumi.runtime.registerResourceModule("vault", "index/gcpSecretRoleset", _module)
pulumi.runtime.registerResourceModule("vault", "index/gcpSecretStaticAccount", _module)
pulumi.runtime.registerResourceModule("vault", "index/genericEndpoint", _module)
pulumi.runtime.registerResourceModule("vault", "index/genericSecret", _module)
pulumi.runtime.registerResourceModule("vault", "index/githubAuthBackend", _module)
pulumi.runtime.registerResourceModule("vault", "index/githubTeam", _module)
pulumi.runtime.registerResourceModule("vault", "index/githubUser", _module)
pulumi.runtime.registerResourceModule("vault", "index/identityEntity", _module)
pulumi.runtime.registerResourceModule("vault", "index/identityEntityAlias", _module)
pulumi.runtime.registerResourceModule("vault", "index/identityEntityPolicies", _module)
pulumi.runtime.registerResourceModule("vault", "index/identityGroup", _module)
pulumi.runtime.registerResourceModule("vault", "index/identityGroupAlias", _module)
pulumi.runtime.registerResourceModule("vault", "index/identityGroupMemberEntityIds", _module)
pulumi.runtime.registerResourceModule("vault", "index/identityGroupMemberGroupIds", _module)
pulumi.runtime.registerResourceModule("vault", "index/identityGroupPolicies", _module)
pulumi.runtime.registerResourceModule("vault", "index/identityMfaDuo", _module)
pulumi.runtime.registerResourceModule("vault", "index/identityMfaLoginEnforcement", _module)
pulumi.runtime.registerResourceModule("vault", "index/identityMfaOkta", _module)
pulumi.runtime.registerResourceModule("vault", "index/identityMfaPingid", _module)
pulumi.runtime.registerResourceModule("vault", "index/identityMfaTotp", _module)
pulumi.runtime.registerResourceModule("vault", "index/identityOidc", _module)
pulumi.runtime.registerResourceModule("vault", "index/identityOidcAssignment", _module)
pulumi.runtime.registerResourceModule("vault", "index/identityOidcClient", _module)
pulumi.runtime.registerResourceModule("vault", "index/identityOidcKey", _module)
pulumi.runtime.registerResourceModule("vault", "index/identityOidcKeyAllowedClientId", _module)
pulumi.runtime.registerResourceModule("vault", "index/identityOidcProvider", _module)
pulumi.runtime.registerResourceModule("vault", "index/identityOidcRole", _module)
pulumi.runtime.registerResourceModule("vault", "index/identityOidcScope", _module)
pulumi.runtime.registerResourceModule("vault", "index/jwtAuthBackend", _module)
pulumi.runtime.registerResourceModule("vault", "index/jwtAuthBackendRole", _module)
pulumi.runtime.registerResourceModule("vault", "index/kmipSecretBackend", _module)
pulumi.runtime.registerResourceModule("vault", "index/kmipSecretRole", _module)
pulumi.runtime.registerResourceModule("vault", "index/kmipSecretScope", _module)
pulumi.runtime.registerResourceModule("vault", "index/kubernetesAuthBackendConfig", _module)
pulumi.runtime.registerResourceModule("vault", "index/kubernetesAuthBackendRole", _module)
pulumi.runtime.registerResourceModule("vault", "index/kubernetesSecretBackend", _module)
pulumi.runtime.registerResourceModule("vault", "index/kubernetesSecretBackendRole", _module)
pulumi.runtime.registerResourceModule("vault", "index/kvSecret", _module)
pulumi.runtime.registerResourceModule("vault", "index/kvSecretBackendV2", _module)
pulumi.runtime.registerResourceModule("vault", "index/kvSecretV2", _module)
pulumi.runtime.registerResourceModule("vault", "index/ldapAuthBackend", _module)
pulumi.runtime.registerResourceModule("vault", "index/ldapAuthBackendGroup", _module)
pulumi.runtime.registerResourceModule("vault", "index/ldapAuthBackendUser", _module)
pulumi.runtime.registerResourceModule("vault", "index/ldapSecretBackend", _module)
pulumi.runtime.registerResourceModule("vault", "index/ldapSecretBackendDynamicRole", _module)
pulumi.runtime.registerResourceModule("vault", "index/ldapSecretBackendLibrarySet", _module)
pulumi.runtime.registerResourceModule("vault", "index/ldapSecretBackendStaticRole", _module)
pulumi.runtime.registerResourceModule("vault", "index/managedKeys", _module)
pulumi.runtime.registerResourceModule("vault", "index/mfaDuo", _module)
pulumi.runtime.registerResourceModule("vault", "index/mfaOkta", _module)
pulumi.runtime.registerResourceModule("vault", "index/mfaPingid", _module)
pulumi.runtime.registerResourceModule("vault", "index/mfaTotp", _module)
pulumi.runtime.registerResourceModule("vault", "index/mongodbatlasSecretBackend", _module)
pulumi.runtime.registerResourceModule("vault", "index/mongodbatlasSecretRole", _module)
pulumi.runtime.registerResourceModule("vault", "index/mount", _module)
pulumi.runtime.registerResourceModule("vault", "index/namespace", _module)
pulumi.runtime.registerResourceModule("vault", "index/nomadSecretBackend", _module)
pulumi.runtime.registerResourceModule("vault", "index/nomadSecretRole", _module)
pulumi.runtime.registerResourceModule("vault", "index/oktaAuthBackend", _module)
pulumi.runtime.registerResourceModule("vault", "index/oktaAuthBackendGroup", _module)
pulumi.runtime.registerResourceModule("vault", "index/oktaAuthBackendUser", _module)
pulumi.runtime.registerResourceModule("vault", "index/passwordPolicy", _module)
pulumi.runtime.registerResourceModule("vault", "index/pkiSecretBackendCert", _module)
pulumi.runtime.registerResourceModule("vault", "index/pkiSecretBackendConfigCa", _module)
pulumi.runtime.registerResourceModule("vault", "index/pkiSecretBackendConfigCluster", _module)
pulumi.runtime.registerResourceModule("vault", "index/pkiSecretBackendConfigEst", _module)
pulumi.runtime.registerResourceModule("vault", "index/pkiSecretBackendConfigIssuers", _module)
pulumi.runtime.registerResourceModule("vault", "index/pkiSecretBackendConfigUrls", _module)
pulumi.runtime.registerResourceModule("vault", "index/pkiSecretBackendCrlConfig", _module)
pulumi.runtime.registerResourceModule("vault", "index/pkiSecretBackendIntermediateCertRequest", _module)
pulumi.runtime.registerResourceModule("vault", "index/pkiSecretBackendIntermediateSetSigned", _module)
pulumi.runtime.registerResourceModule("vault", "index/pkiSecretBackendIssuer", _module)
pulumi.runtime.registerResourceModule("vault", "index/pkiSecretBackendKey", _module)
pulumi.runtime.registerResourceModule("vault", "index/pkiSecretBackendRole", _module)
pulumi.runtime.registerResourceModule("vault", "index/pkiSecretBackendRootCert", _module)
pulumi.runtime.registerResourceModule("vault", "index/pkiSecretBackendRootSignIntermediate", _module)
pulumi.runtime.registerResourceModule("vault", "index/pkiSecretBackendSign", _module)
pulumi.runtime.registerResourceModule("vault", "index/plugin", _module)
pulumi.runtime.registerResourceModule("vault", "index/pluginPinnedVersion", _module)
pulumi.runtime.registerResourceModule("vault", "index/policy", _module)
pulumi.runtime.registerResourceModule("vault", "index/quotaLeaseCount", _module)
pulumi.runtime.registerResourceModule("vault", "index/quotaRateLimit", _module)
pulumi.runtime.registerResourceModule("vault", "index/rabbitmqSecretBackend", _module)
pulumi.runtime.registerResourceModule("vault", "index/rabbitmqSecretBackendRole", _module)
pulumi.runtime.registerResourceModule("vault", "index/raftAutopilot", _module)
pulumi.runtime.registerResourceModule("vault", "index/raftSnapshotAgentConfig", _module)
pulumi.runtime.registerResourceModule("vault", "index/rgpPolicy", _module)
pulumi.runtime.registerResourceModule("vault", "index/samlAuthBackend", _module)
pulumi.runtime.registerResourceModule("vault", "index/samlAuthBackendRole", _module)
pulumi.runtime.registerResourceModule("vault", "index/secretsSyncAssociation", _module)
pulumi.runtime.registerResourceModule("vault", "index/secretsSyncAwsDestination", _module)
pulumi.runtime.registerResourceModule("vault", "index/secretsSyncAzureDestination", _module)
pulumi.runtime.registerResourceModule("vault", "index/secretsSyncConfig", _module)
pulumi.runtime.registerResourceModule("vault", "index/secretsSyncGcpDestination", _module)
pulumi.runtime.registerResourceModule("vault", "index/secretsSyncGhDestination", _module)
pulumi.runtime.registerResourceModule("vault", "index/secretsSyncGithubApps", _module)
pulumi.runtime.registerResourceModule("vault", "index/secretsSyncVercelDestination", _module)
pulumi.runtime.registerResourceModule("vault", "index/sshSecretBackendCa", _module)
pulumi.runtime.registerResourceModule("vault", "index/sshSecretBackendRole", _module)
pulumi.runtime.registerResourceModule("vault", "index/terraformCloudSecretBackend", _module)
pulumi.runtime.registerResourceModule("vault", "index/terraformCloudSecretCreds", _module)
pulumi.runtime.registerResourceModule("vault", "index/terraformCloudSecretRole", _module)
pulumi.runtime.registerResourceModule("vault", "index/token", _module)
pulumi.runtime.registerResourceModule("vault", "index/tokenAuthBackendRole", _module)
pulumi.runtime.registerResourceModule("vault", "index/transformAlphabet", _module)
pulumi.runtime.registerResourceModule("vault", "index/transformRole", _module)
pulumi.runtime.registerResourceModule("vault", "index/transformTemplate", _module)
pulumi.runtime.registerResourceModule("vault", "index/transformTransformation", _module)
pulumi.runtime.registerResourceModule("vault", "index/transitSecretBackendKey", _module)
pulumi.runtime.registerResourceModule("vault", "index/transitSecretCacheConfig", _module)
pulumi.runtime.registerResourcePackage("vault", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:vault") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
