// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AwsAuthBackendConfigIdentity extends pulumi.CustomResource {
    /**
     * Get an existing AwsAuthBackendConfigIdentity resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AwsAuthBackendConfigIdentityState, opts?: pulumi.CustomResourceOptions): AwsAuthBackendConfigIdentity {
        return new AwsAuthBackendConfigIdentity(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:index/awsAuthBackendConfigIdentity:AwsAuthBackendConfigIdentity';

    /**
     * Returns true if the given object is an instance of AwsAuthBackendConfigIdentity.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AwsAuthBackendConfigIdentity {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AwsAuthBackendConfigIdentity.__pulumiType;
    }

    /**
     * Unique name of the auth backend to configure.
     */
    public readonly backend!: pulumi.Output<string | undefined>;
    /**
     * Configures how to generate the identity alias when using the ec2 auth method.
     */
    public readonly ec2Alias!: pulumi.Output<string | undefined>;
    /**
     * The metadata to include on the token returned by the login endpoint.
     */
    public readonly ec2Metadatas!: pulumi.Output<string[] | undefined>;
    /**
     * How to generate the identity alias when using the iam auth method.
     */
    public readonly iamAlias!: pulumi.Output<string | undefined>;
    /**
     * The metadata to include on the token returned by the login endpoint.
     */
    public readonly iamMetadatas!: pulumi.Output<string[] | undefined>;
    /**
     * Target namespace. (requires Enterprise)
     */
    public readonly namespace!: pulumi.Output<string | undefined>;

    /**
     * Create a AwsAuthBackendConfigIdentity resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AwsAuthBackendConfigIdentityArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AwsAuthBackendConfigIdentityArgs | AwsAuthBackendConfigIdentityState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AwsAuthBackendConfigIdentityState | undefined;
            resourceInputs["backend"] = state ? state.backend : undefined;
            resourceInputs["ec2Alias"] = state ? state.ec2Alias : undefined;
            resourceInputs["ec2Metadatas"] = state ? state.ec2Metadatas : undefined;
            resourceInputs["iamAlias"] = state ? state.iamAlias : undefined;
            resourceInputs["iamMetadatas"] = state ? state.iamMetadatas : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
        } else {
            const args = argsOrState as AwsAuthBackendConfigIdentityArgs | undefined;
            resourceInputs["backend"] = args ? args.backend : undefined;
            resourceInputs["ec2Alias"] = args ? args.ec2Alias : undefined;
            resourceInputs["ec2Metadatas"] = args ? args.ec2Metadatas : undefined;
            resourceInputs["iamAlias"] = args ? args.iamAlias : undefined;
            resourceInputs["iamMetadatas"] = args ? args.iamMetadatas : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AwsAuthBackendConfigIdentity.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AwsAuthBackendConfigIdentity resources.
 */
export interface AwsAuthBackendConfigIdentityState {
    /**
     * Unique name of the auth backend to configure.
     */
    backend?: pulumi.Input<string>;
    /**
     * Configures how to generate the identity alias when using the ec2 auth method.
     */
    ec2Alias?: pulumi.Input<string>;
    /**
     * The metadata to include on the token returned by the login endpoint.
     */
    ec2Metadatas?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * How to generate the identity alias when using the iam auth method.
     */
    iamAlias?: pulumi.Input<string>;
    /**
     * The metadata to include on the token returned by the login endpoint.
     */
    iamMetadatas?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AwsAuthBackendConfigIdentity resource.
 */
export interface AwsAuthBackendConfigIdentityArgs {
    /**
     * Unique name of the auth backend to configure.
     */
    backend?: pulumi.Input<string>;
    /**
     * Configures how to generate the identity alias when using the ec2 auth method.
     */
    ec2Alias?: pulumi.Input<string>;
    /**
     * The metadata to include on the token returned by the login endpoint.
     */
    ec2Metadatas?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * How to generate the identity alias when using the iam auth method.
     */
    iamAlias?: pulumi.Input<string>;
    /**
     * The metadata to include on the token returned by the login endpoint.
     */
    iamMetadatas?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
}
