// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class KubernetesAuthBackendConfig extends pulumi.CustomResource {
    /**
     * Get an existing KubernetesAuthBackendConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KubernetesAuthBackendConfigState, opts?: pulumi.CustomResourceOptions): KubernetesAuthBackendConfig {
        return new KubernetesAuthBackendConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:index/kubernetesAuthBackendConfig:KubernetesAuthBackendConfig';

    /**
     * Returns true if the given object is an instance of KubernetesAuthBackendConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KubernetesAuthBackendConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KubernetesAuthBackendConfig.__pulumiType;
    }

    /**
     * Unique name of the kubernetes backend to configure.
     */
    public readonly backend!: pulumi.Output<string | undefined>;
    /**
     * Optional disable JWT issuer validation. Allows to skip ISS validation.
     */
    public readonly disableIssValidation!: pulumi.Output<boolean>;
    /**
     * Optional disable defaulting to the local CA cert and service account JWT when running in a Kubernetes pod.
     */
    public readonly disableLocalCaJwt!: pulumi.Output<boolean>;
    /**
     * Optional JWT issuer. If no issuer is specified, kubernetes.io/serviceaccount will be used as the default issuer.
     */
    public readonly issuer!: pulumi.Output<string | undefined>;
    /**
     * PEM encoded CA cert for use by the TLS client used to talk with the Kubernetes API.
     */
    public readonly kubernetesCaCert!: pulumi.Output<string>;
    /**
     * Host must be a host string, a host:port pair, or a URL to the base of the Kubernetes API server.
     */
    public readonly kubernetesHost!: pulumi.Output<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * Optional list of PEM-formatted public keys or certificates used to verify the signatures of Kubernetes service account
     * JWTs. If a certificate is given, its public key will be extracted. Not every installation of Kubernetes exposes these
     * keys.
     */
    public readonly pemKeys!: pulumi.Output<string[] | undefined>;
    /**
     * A service account JWT (or other token) used as a bearer token to access the TokenReview API to validate other JWTs
     * during login. If not set the JWT used for login will be used to access the API.
     */
    public readonly tokenReviewerJwt!: pulumi.Output<string | undefined>;

    /**
     * Create a KubernetesAuthBackendConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KubernetesAuthBackendConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KubernetesAuthBackendConfigArgs | KubernetesAuthBackendConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KubernetesAuthBackendConfigState | undefined;
            resourceInputs["backend"] = state ? state.backend : undefined;
            resourceInputs["disableIssValidation"] = state ? state.disableIssValidation : undefined;
            resourceInputs["disableLocalCaJwt"] = state ? state.disableLocalCaJwt : undefined;
            resourceInputs["issuer"] = state ? state.issuer : undefined;
            resourceInputs["kubernetesCaCert"] = state ? state.kubernetesCaCert : undefined;
            resourceInputs["kubernetesHost"] = state ? state.kubernetesHost : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["pemKeys"] = state ? state.pemKeys : undefined;
            resourceInputs["tokenReviewerJwt"] = state ? state.tokenReviewerJwt : undefined;
        } else {
            const args = argsOrState as KubernetesAuthBackendConfigArgs | undefined;
            if ((!args || args.kubernetesHost === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kubernetesHost'");
            }
            resourceInputs["backend"] = args ? args.backend : undefined;
            resourceInputs["disableIssValidation"] = args ? args.disableIssValidation : undefined;
            resourceInputs["disableLocalCaJwt"] = args ? args.disableLocalCaJwt : undefined;
            resourceInputs["issuer"] = args ? args.issuer : undefined;
            resourceInputs["kubernetesCaCert"] = args ? args.kubernetesCaCert : undefined;
            resourceInputs["kubernetesHost"] = args ? args.kubernetesHost : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["pemKeys"] = args ? args.pemKeys : undefined;
            resourceInputs["tokenReviewerJwt"] = args?.tokenReviewerJwt ? pulumi.secret(args.tokenReviewerJwt) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["tokenReviewerJwt"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(KubernetesAuthBackendConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KubernetesAuthBackendConfig resources.
 */
export interface KubernetesAuthBackendConfigState {
    /**
     * Unique name of the kubernetes backend to configure.
     */
    backend?: pulumi.Input<string>;
    /**
     * Optional disable JWT issuer validation. Allows to skip ISS validation.
     */
    disableIssValidation?: pulumi.Input<boolean>;
    /**
     * Optional disable defaulting to the local CA cert and service account JWT when running in a Kubernetes pod.
     */
    disableLocalCaJwt?: pulumi.Input<boolean>;
    /**
     * Optional JWT issuer. If no issuer is specified, kubernetes.io/serviceaccount will be used as the default issuer.
     */
    issuer?: pulumi.Input<string>;
    /**
     * PEM encoded CA cert for use by the TLS client used to talk with the Kubernetes API.
     */
    kubernetesCaCert?: pulumi.Input<string>;
    /**
     * Host must be a host string, a host:port pair, or a URL to the base of the Kubernetes API server.
     */
    kubernetesHost?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Optional list of PEM-formatted public keys or certificates used to verify the signatures of Kubernetes service account
     * JWTs. If a certificate is given, its public key will be extracted. Not every installation of Kubernetes exposes these
     * keys.
     */
    pemKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A service account JWT (or other token) used as a bearer token to access the TokenReview API to validate other JWTs
     * during login. If not set the JWT used for login will be used to access the API.
     */
    tokenReviewerJwt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KubernetesAuthBackendConfig resource.
 */
export interface KubernetesAuthBackendConfigArgs {
    /**
     * Unique name of the kubernetes backend to configure.
     */
    backend?: pulumi.Input<string>;
    /**
     * Optional disable JWT issuer validation. Allows to skip ISS validation.
     */
    disableIssValidation?: pulumi.Input<boolean>;
    /**
     * Optional disable defaulting to the local CA cert and service account JWT when running in a Kubernetes pod.
     */
    disableLocalCaJwt?: pulumi.Input<boolean>;
    /**
     * Optional JWT issuer. If no issuer is specified, kubernetes.io/serviceaccount will be used as the default issuer.
     */
    issuer?: pulumi.Input<string>;
    /**
     * PEM encoded CA cert for use by the TLS client used to talk with the Kubernetes API.
     */
    kubernetesCaCert?: pulumi.Input<string>;
    /**
     * Host must be a host string, a host:port pair, or a URL to the base of the Kubernetes API server.
     */
    kubernetesHost: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Optional list of PEM-formatted public keys or certificates used to verify the signatures of Kubernetes service account
     * JWTs. If a certificate is given, its public key will be extracted. Not every installation of Kubernetes exposes these
     * keys.
     */
    pemKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A service account JWT (or other token) used as a bearer token to access the TokenReview API to validate other JWTs
     * during login. If not set the JWT used for login will be used to access the API.
     */
    tokenReviewerJwt?: pulumi.Input<string>;
}
