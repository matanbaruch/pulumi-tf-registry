// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SamlAuthBackend extends pulumi.CustomResource {
    /**
     * Get an existing SamlAuthBackend resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SamlAuthBackendState, opts?: pulumi.CustomResourceOptions): SamlAuthBackend {
        return new SamlAuthBackend(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:index/samlAuthBackend:SamlAuthBackend';

    /**
     * Returns true if the given object is an instance of SamlAuthBackend.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SamlAuthBackend {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SamlAuthBackend.__pulumiType;
    }

    /**
     * The well-formatted URLs of your Assertion Consumer Service (ACS) that should receive a response from the identity
     * provider.
     */
    public readonly acsUrls!: pulumi.Output<string[]>;
    /**
     * The role to use if no role is provided during login.
     */
    public readonly defaultRole!: pulumi.Output<string | undefined>;
    /**
     * If set, opts out of mount migration on path updates.
     */
    public readonly disableRemount!: pulumi.Output<boolean | undefined>;
    /**
     * The entity ID of the SAML authentication service provider.
     */
    public readonly entityId!: pulumi.Output<string>;
    /**
     * The PEM encoded certificate of the identity provider. Mutually exclusive with 'idp_metadata_url'
     */
    public readonly idpCert!: pulumi.Output<string | undefined>;
    /**
     * The entity ID of the identity provider. Mutually exclusive with 'idp_metadata_url'.
     */
    public readonly idpEntityId!: pulumi.Output<string | undefined>;
    /**
     * The metadata URL of the identity provider.
     */
    public readonly idpMetadataUrl!: pulumi.Output<string | undefined>;
    /**
     * The SSO URL of the identity provider. Mutually exclusive with 'idp_metadata_url'.
     */
    public readonly idpSsoUrl!: pulumi.Output<string | undefined>;
    /**
     * Target namespace. (requires Enterprise)
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * Unique name of the auth backend to configure.
     */
    public readonly path!: pulumi.Output<string | undefined>;
    /**
     * Log additional, potentially sensitive information during the SAML exchange according to the current logging level. Not
     * recommended for production.
     */
    public readonly verboseLogging!: pulumi.Output<boolean>;

    /**
     * Create a SamlAuthBackend resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SamlAuthBackendArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SamlAuthBackendArgs | SamlAuthBackendState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SamlAuthBackendState | undefined;
            resourceInputs["acsUrls"] = state ? state.acsUrls : undefined;
            resourceInputs["defaultRole"] = state ? state.defaultRole : undefined;
            resourceInputs["disableRemount"] = state ? state.disableRemount : undefined;
            resourceInputs["entityId"] = state ? state.entityId : undefined;
            resourceInputs["idpCert"] = state ? state.idpCert : undefined;
            resourceInputs["idpEntityId"] = state ? state.idpEntityId : undefined;
            resourceInputs["idpMetadataUrl"] = state ? state.idpMetadataUrl : undefined;
            resourceInputs["idpSsoUrl"] = state ? state.idpSsoUrl : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["verboseLogging"] = state ? state.verboseLogging : undefined;
        } else {
            const args = argsOrState as SamlAuthBackendArgs | undefined;
            if ((!args || args.acsUrls === undefined) && !opts.urn) {
                throw new Error("Missing required property 'acsUrls'");
            }
            if ((!args || args.entityId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'entityId'");
            }
            resourceInputs["acsUrls"] = args ? args.acsUrls : undefined;
            resourceInputs["defaultRole"] = args ? args.defaultRole : undefined;
            resourceInputs["disableRemount"] = args ? args.disableRemount : undefined;
            resourceInputs["entityId"] = args ? args.entityId : undefined;
            resourceInputs["idpCert"] = args ? args.idpCert : undefined;
            resourceInputs["idpEntityId"] = args ? args.idpEntityId : undefined;
            resourceInputs["idpMetadataUrl"] = args ? args.idpMetadataUrl : undefined;
            resourceInputs["idpSsoUrl"] = args ? args.idpSsoUrl : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["verboseLogging"] = args ? args.verboseLogging : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SamlAuthBackend.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SamlAuthBackend resources.
 */
export interface SamlAuthBackendState {
    /**
     * The well-formatted URLs of your Assertion Consumer Service (ACS) that should receive a response from the identity
     * provider.
     */
    acsUrls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The role to use if no role is provided during login.
     */
    defaultRole?: pulumi.Input<string>;
    /**
     * If set, opts out of mount migration on path updates.
     */
    disableRemount?: pulumi.Input<boolean>;
    /**
     * The entity ID of the SAML authentication service provider.
     */
    entityId?: pulumi.Input<string>;
    /**
     * The PEM encoded certificate of the identity provider. Mutually exclusive with 'idp_metadata_url'
     */
    idpCert?: pulumi.Input<string>;
    /**
     * The entity ID of the identity provider. Mutually exclusive with 'idp_metadata_url'.
     */
    idpEntityId?: pulumi.Input<string>;
    /**
     * The metadata URL of the identity provider.
     */
    idpMetadataUrl?: pulumi.Input<string>;
    /**
     * The SSO URL of the identity provider. Mutually exclusive with 'idp_metadata_url'.
     */
    idpSsoUrl?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Unique name of the auth backend to configure.
     */
    path?: pulumi.Input<string>;
    /**
     * Log additional, potentially sensitive information during the SAML exchange according to the current logging level. Not
     * recommended for production.
     */
    verboseLogging?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a SamlAuthBackend resource.
 */
export interface SamlAuthBackendArgs {
    /**
     * The well-formatted URLs of your Assertion Consumer Service (ACS) that should receive a response from the identity
     * provider.
     */
    acsUrls: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The role to use if no role is provided during login.
     */
    defaultRole?: pulumi.Input<string>;
    /**
     * If set, opts out of mount migration on path updates.
     */
    disableRemount?: pulumi.Input<boolean>;
    /**
     * The entity ID of the SAML authentication service provider.
     */
    entityId: pulumi.Input<string>;
    /**
     * The PEM encoded certificate of the identity provider. Mutually exclusive with 'idp_metadata_url'
     */
    idpCert?: pulumi.Input<string>;
    /**
     * The entity ID of the identity provider. Mutually exclusive with 'idp_metadata_url'.
     */
    idpEntityId?: pulumi.Input<string>;
    /**
     * The metadata URL of the identity provider.
     */
    idpMetadataUrl?: pulumi.Input<string>;
    /**
     * The SSO URL of the identity provider. Mutually exclusive with 'idp_metadata_url'.
     */
    idpSsoUrl?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Unique name of the auth backend to configure.
     */
    path?: pulumi.Input<string>;
    /**
     * Log additional, potentially sensitive information during the SAML exchange according to the current logging level. Not
     * recommended for production.
     */
    verboseLogging?: pulumi.Input<boolean>;
}
