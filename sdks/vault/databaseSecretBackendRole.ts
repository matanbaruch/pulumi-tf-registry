// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DatabaseSecretBackendRole extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseSecretBackendRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseSecretBackendRoleState, opts?: pulumi.CustomResourceOptions): DatabaseSecretBackendRole {
        return new DatabaseSecretBackendRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:index/databaseSecretBackendRole:DatabaseSecretBackendRole';

    /**
     * Returns true if the given object is an instance of DatabaseSecretBackendRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseSecretBackendRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseSecretBackendRole.__pulumiType;
    }

    /**
     * The path of the Database Secret Backend the role belongs to.
     */
    public readonly backend!: pulumi.Output<string>;
    /**
     * Database statements to execute to create and configure a user.
     */
    public readonly creationStatements!: pulumi.Output<string[]>;
    /**
     * Specifies the configuration for the given credential_type.
     */
    public readonly credentialConfig!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies the type of credential that will be generated for the role.
     */
    public readonly credentialType!: pulumi.Output<string>;
    /**
     * Database connection to use for this role.
     */
    public readonly dbName!: pulumi.Output<string>;
    /**
     * Default TTL for leases associated with this role, in seconds.
     */
    public readonly defaultTtl!: pulumi.Output<number | undefined>;
    /**
     * Maximum TTL for leases associated with this role, in seconds.
     */
    public readonly maxTtl!: pulumi.Output<number | undefined>;
    /**
     * Unique name for the role.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * Database statements to execute to renew a user.
     */
    public readonly renewStatements!: pulumi.Output<string[] | undefined>;
    /**
     * Database statements to execute to revoke a user.
     */
    public readonly revocationStatements!: pulumi.Output<string[] | undefined>;
    /**
     * Database statements to execute to rollback a create operation in the event of an error.
     */
    public readonly rollbackStatements!: pulumi.Output<string[] | undefined>;

    /**
     * Create a DatabaseSecretBackendRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseSecretBackendRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseSecretBackendRoleArgs | DatabaseSecretBackendRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseSecretBackendRoleState | undefined;
            resourceInputs["backend"] = state ? state.backend : undefined;
            resourceInputs["creationStatements"] = state ? state.creationStatements : undefined;
            resourceInputs["credentialConfig"] = state ? state.credentialConfig : undefined;
            resourceInputs["credentialType"] = state ? state.credentialType : undefined;
            resourceInputs["dbName"] = state ? state.dbName : undefined;
            resourceInputs["defaultTtl"] = state ? state.defaultTtl : undefined;
            resourceInputs["maxTtl"] = state ? state.maxTtl : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["renewStatements"] = state ? state.renewStatements : undefined;
            resourceInputs["revocationStatements"] = state ? state.revocationStatements : undefined;
            resourceInputs["rollbackStatements"] = state ? state.rollbackStatements : undefined;
        } else {
            const args = argsOrState as DatabaseSecretBackendRoleArgs | undefined;
            if ((!args || args.backend === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backend'");
            }
            if ((!args || args.creationStatements === undefined) && !opts.urn) {
                throw new Error("Missing required property 'creationStatements'");
            }
            if ((!args || args.dbName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbName'");
            }
            resourceInputs["backend"] = args ? args.backend : undefined;
            resourceInputs["creationStatements"] = args ? args.creationStatements : undefined;
            resourceInputs["credentialConfig"] = args ? args.credentialConfig : undefined;
            resourceInputs["credentialType"] = args ? args.credentialType : undefined;
            resourceInputs["dbName"] = args ? args.dbName : undefined;
            resourceInputs["defaultTtl"] = args ? args.defaultTtl : undefined;
            resourceInputs["maxTtl"] = args ? args.maxTtl : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["renewStatements"] = args ? args.renewStatements : undefined;
            resourceInputs["revocationStatements"] = args ? args.revocationStatements : undefined;
            resourceInputs["rollbackStatements"] = args ? args.rollbackStatements : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabaseSecretBackendRole.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatabaseSecretBackendRole resources.
 */
export interface DatabaseSecretBackendRoleState {
    /**
     * The path of the Database Secret Backend the role belongs to.
     */
    backend?: pulumi.Input<string>;
    /**
     * Database statements to execute to create and configure a user.
     */
    creationStatements?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the configuration for the given credential_type.
     */
    credentialConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the type of credential that will be generated for the role.
     */
    credentialType?: pulumi.Input<string>;
    /**
     * Database connection to use for this role.
     */
    dbName?: pulumi.Input<string>;
    /**
     * Default TTL for leases associated with this role, in seconds.
     */
    defaultTtl?: pulumi.Input<number>;
    /**
     * Maximum TTL for leases associated with this role, in seconds.
     */
    maxTtl?: pulumi.Input<number>;
    /**
     * Unique name for the role.
     */
    name?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Database statements to execute to renew a user.
     */
    renewStatements?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Database statements to execute to revoke a user.
     */
    revocationStatements?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Database statements to execute to rollback a create operation in the event of an error.
     */
    rollbackStatements?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a DatabaseSecretBackendRole resource.
 */
export interface DatabaseSecretBackendRoleArgs {
    /**
     * The path of the Database Secret Backend the role belongs to.
     */
    backend: pulumi.Input<string>;
    /**
     * Database statements to execute to create and configure a user.
     */
    creationStatements: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the configuration for the given credential_type.
     */
    credentialConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the type of credential that will be generated for the role.
     */
    credentialType?: pulumi.Input<string>;
    /**
     * Database connection to use for this role.
     */
    dbName: pulumi.Input<string>;
    /**
     * Default TTL for leases associated with this role, in seconds.
     */
    defaultTtl?: pulumi.Input<number>;
    /**
     * Maximum TTL for leases associated with this role, in seconds.
     */
    maxTtl?: pulumi.Input<number>;
    /**
     * Unique name for the role.
     */
    name?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Database statements to execute to renew a user.
     */
    renewStatements?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Database statements to execute to revoke a user.
     */
    revocationStatements?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Database statements to execute to rollback a create operation in the event of an error.
     */
    rollbackStatements?: pulumi.Input<pulumi.Input<string>[]>;
}
