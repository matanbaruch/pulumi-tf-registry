// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SshSecretBackendRole extends pulumi.CustomResource {
    /**
     * Get an existing SshSecretBackendRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SshSecretBackendRoleState, opts?: pulumi.CustomResourceOptions): SshSecretBackendRole {
        return new SshSecretBackendRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:index/sshSecretBackendRole:SshSecretBackendRole';

    /**
     * Returns true if the given object is an instance of SshSecretBackendRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SshSecretBackendRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SshSecretBackendRole.__pulumiType;
    }

    public readonly algorithmSigner!: pulumi.Output<string>;
    public readonly allowBareDomains!: pulumi.Output<boolean | undefined>;
    public readonly allowHostCertificates!: pulumi.Output<boolean | undefined>;
    public readonly allowSubdomains!: pulumi.Output<boolean | undefined>;
    public readonly allowUserCertificates!: pulumi.Output<boolean | undefined>;
    public readonly allowUserKeyIds!: pulumi.Output<boolean | undefined>;
    public readonly allowedCriticalOptions!: pulumi.Output<string | undefined>;
    public readonly allowedDomains!: pulumi.Output<string | undefined>;
    public readonly allowedDomainsTemplate!: pulumi.Output<boolean>;
    public readonly allowedExtensions!: pulumi.Output<string | undefined>;
    /**
     * Set of allowed public key types and their relevant configuration
     */
    public readonly allowedUserKeyConfigs!: pulumi.Output<outputs.SshSecretBackendRoleAllowedUserKeyConfig[] | undefined>;
    public readonly allowedUsers!: pulumi.Output<string | undefined>;
    public readonly allowedUsersTemplate!: pulumi.Output<boolean | undefined>;
    public readonly backend!: pulumi.Output<string>;
    public readonly cidrList!: pulumi.Output<string | undefined>;
    public readonly defaultCriticalOptions!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly defaultExtensions!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly defaultUser!: pulumi.Output<string | undefined>;
    public readonly defaultUserTemplate!: pulumi.Output<boolean | undefined>;
    public readonly keyIdFormat!: pulumi.Output<string | undefined>;
    public readonly keyType!: pulumi.Output<string>;
    public readonly maxTtl!: pulumi.Output<string>;
    /**
     * Unique name for the role.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * Specifies the duration by which to backdate the ValidAfter property. Uses duration format strings.
     */
    public readonly notBeforeDuration!: pulumi.Output<string>;
    public readonly ttl!: pulumi.Output<string>;

    /**
     * Create a SshSecretBackendRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SshSecretBackendRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SshSecretBackendRoleArgs | SshSecretBackendRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SshSecretBackendRoleState | undefined;
            resourceInputs["algorithmSigner"] = state ? state.algorithmSigner : undefined;
            resourceInputs["allowBareDomains"] = state ? state.allowBareDomains : undefined;
            resourceInputs["allowHostCertificates"] = state ? state.allowHostCertificates : undefined;
            resourceInputs["allowSubdomains"] = state ? state.allowSubdomains : undefined;
            resourceInputs["allowUserCertificates"] = state ? state.allowUserCertificates : undefined;
            resourceInputs["allowUserKeyIds"] = state ? state.allowUserKeyIds : undefined;
            resourceInputs["allowedCriticalOptions"] = state ? state.allowedCriticalOptions : undefined;
            resourceInputs["allowedDomains"] = state ? state.allowedDomains : undefined;
            resourceInputs["allowedDomainsTemplate"] = state ? state.allowedDomainsTemplate : undefined;
            resourceInputs["allowedExtensions"] = state ? state.allowedExtensions : undefined;
            resourceInputs["allowedUserKeyConfigs"] = state ? state.allowedUserKeyConfigs : undefined;
            resourceInputs["allowedUsers"] = state ? state.allowedUsers : undefined;
            resourceInputs["allowedUsersTemplate"] = state ? state.allowedUsersTemplate : undefined;
            resourceInputs["backend"] = state ? state.backend : undefined;
            resourceInputs["cidrList"] = state ? state.cidrList : undefined;
            resourceInputs["defaultCriticalOptions"] = state ? state.defaultCriticalOptions : undefined;
            resourceInputs["defaultExtensions"] = state ? state.defaultExtensions : undefined;
            resourceInputs["defaultUser"] = state ? state.defaultUser : undefined;
            resourceInputs["defaultUserTemplate"] = state ? state.defaultUserTemplate : undefined;
            resourceInputs["keyIdFormat"] = state ? state.keyIdFormat : undefined;
            resourceInputs["keyType"] = state ? state.keyType : undefined;
            resourceInputs["maxTtl"] = state ? state.maxTtl : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["notBeforeDuration"] = state ? state.notBeforeDuration : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
        } else {
            const args = argsOrState as SshSecretBackendRoleArgs | undefined;
            if ((!args || args.backend === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backend'");
            }
            if ((!args || args.keyType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyType'");
            }
            resourceInputs["algorithmSigner"] = args ? args.algorithmSigner : undefined;
            resourceInputs["allowBareDomains"] = args ? args.allowBareDomains : undefined;
            resourceInputs["allowHostCertificates"] = args ? args.allowHostCertificates : undefined;
            resourceInputs["allowSubdomains"] = args ? args.allowSubdomains : undefined;
            resourceInputs["allowUserCertificates"] = args ? args.allowUserCertificates : undefined;
            resourceInputs["allowUserKeyIds"] = args ? args.allowUserKeyIds : undefined;
            resourceInputs["allowedCriticalOptions"] = args ? args.allowedCriticalOptions : undefined;
            resourceInputs["allowedDomains"] = args ? args.allowedDomains : undefined;
            resourceInputs["allowedDomainsTemplate"] = args ? args.allowedDomainsTemplate : undefined;
            resourceInputs["allowedExtensions"] = args ? args.allowedExtensions : undefined;
            resourceInputs["allowedUserKeyConfigs"] = args ? args.allowedUserKeyConfigs : undefined;
            resourceInputs["allowedUsers"] = args ? args.allowedUsers : undefined;
            resourceInputs["allowedUsersTemplate"] = args ? args.allowedUsersTemplate : undefined;
            resourceInputs["backend"] = args ? args.backend : undefined;
            resourceInputs["cidrList"] = args ? args.cidrList : undefined;
            resourceInputs["defaultCriticalOptions"] = args ? args.defaultCriticalOptions : undefined;
            resourceInputs["defaultExtensions"] = args ? args.defaultExtensions : undefined;
            resourceInputs["defaultUser"] = args ? args.defaultUser : undefined;
            resourceInputs["defaultUserTemplate"] = args ? args.defaultUserTemplate : undefined;
            resourceInputs["keyIdFormat"] = args ? args.keyIdFormat : undefined;
            resourceInputs["keyType"] = args ? args.keyType : undefined;
            resourceInputs["maxTtl"] = args ? args.maxTtl : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["notBeforeDuration"] = args ? args.notBeforeDuration : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SshSecretBackendRole.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SshSecretBackendRole resources.
 */
export interface SshSecretBackendRoleState {
    algorithmSigner?: pulumi.Input<string>;
    allowBareDomains?: pulumi.Input<boolean>;
    allowHostCertificates?: pulumi.Input<boolean>;
    allowSubdomains?: pulumi.Input<boolean>;
    allowUserCertificates?: pulumi.Input<boolean>;
    allowUserKeyIds?: pulumi.Input<boolean>;
    allowedCriticalOptions?: pulumi.Input<string>;
    allowedDomains?: pulumi.Input<string>;
    allowedDomainsTemplate?: pulumi.Input<boolean>;
    allowedExtensions?: pulumi.Input<string>;
    /**
     * Set of allowed public key types and their relevant configuration
     */
    allowedUserKeyConfigs?: pulumi.Input<pulumi.Input<inputs.SshSecretBackendRoleAllowedUserKeyConfig>[]>;
    allowedUsers?: pulumi.Input<string>;
    allowedUsersTemplate?: pulumi.Input<boolean>;
    backend?: pulumi.Input<string>;
    cidrList?: pulumi.Input<string>;
    defaultCriticalOptions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    defaultExtensions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    defaultUser?: pulumi.Input<string>;
    defaultUserTemplate?: pulumi.Input<boolean>;
    keyIdFormat?: pulumi.Input<string>;
    keyType?: pulumi.Input<string>;
    maxTtl?: pulumi.Input<string>;
    /**
     * Unique name for the role.
     */
    name?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Specifies the duration by which to backdate the ValidAfter property. Uses duration format strings.
     */
    notBeforeDuration?: pulumi.Input<string>;
    ttl?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SshSecretBackendRole resource.
 */
export interface SshSecretBackendRoleArgs {
    algorithmSigner?: pulumi.Input<string>;
    allowBareDomains?: pulumi.Input<boolean>;
    allowHostCertificates?: pulumi.Input<boolean>;
    allowSubdomains?: pulumi.Input<boolean>;
    allowUserCertificates?: pulumi.Input<boolean>;
    allowUserKeyIds?: pulumi.Input<boolean>;
    allowedCriticalOptions?: pulumi.Input<string>;
    allowedDomains?: pulumi.Input<string>;
    allowedDomainsTemplate?: pulumi.Input<boolean>;
    allowedExtensions?: pulumi.Input<string>;
    /**
     * Set of allowed public key types and their relevant configuration
     */
    allowedUserKeyConfigs?: pulumi.Input<pulumi.Input<inputs.SshSecretBackendRoleAllowedUserKeyConfig>[]>;
    allowedUsers?: pulumi.Input<string>;
    allowedUsersTemplate?: pulumi.Input<boolean>;
    backend: pulumi.Input<string>;
    cidrList?: pulumi.Input<string>;
    defaultCriticalOptions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    defaultExtensions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    defaultUser?: pulumi.Input<string>;
    defaultUserTemplate?: pulumi.Input<boolean>;
    keyIdFormat?: pulumi.Input<string>;
    keyType: pulumi.Input<string>;
    maxTtl?: pulumi.Input<string>;
    /**
     * Unique name for the role.
     */
    name?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Specifies the duration by which to backdate the ValidAfter property. Uses duration format strings.
     */
    notBeforeDuration?: pulumi.Input<string>;
    ttl?: pulumi.Input<string>;
}
