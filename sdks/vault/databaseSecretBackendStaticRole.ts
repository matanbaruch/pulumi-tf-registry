// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DatabaseSecretBackendStaticRole extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseSecretBackendStaticRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseSecretBackendStaticRoleState, opts?: pulumi.CustomResourceOptions): DatabaseSecretBackendStaticRole {
        return new DatabaseSecretBackendStaticRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:index/databaseSecretBackendStaticRole:DatabaseSecretBackendStaticRole';

    /**
     * Returns true if the given object is an instance of DatabaseSecretBackendStaticRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseSecretBackendStaticRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseSecretBackendStaticRole.__pulumiType;
    }

    /**
     * The path of the Database Secret Backend the role belongs to.
     */
    public readonly backend!: pulumi.Output<string>;
    /**
     * Database connection to use for this role.
     */
    public readonly dbName!: pulumi.Output<string>;
    /**
     * Unique name for the static role.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * The amount of time Vault should wait before rotating the password, in seconds.
     */
    public readonly rotationPeriod!: pulumi.Output<number | undefined>;
    /**
     * A cron-style string that will define the schedule on which rotations should occur.
     */
    public readonly rotationSchedule!: pulumi.Output<string | undefined>;
    /**
     * Database statements to execute to rotate the password for the configured database user.
     */
    public readonly rotationStatements!: pulumi.Output<string[] | undefined>;
    /**
     * The amount of time in seconds in which the rotations are allowed to occur starting from a given rotation_schedule.
     */
    public readonly rotationWindow!: pulumi.Output<number | undefined>;
    /**
     * The database username that this role corresponds to.
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a DatabaseSecretBackendStaticRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseSecretBackendStaticRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseSecretBackendStaticRoleArgs | DatabaseSecretBackendStaticRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseSecretBackendStaticRoleState | undefined;
            resourceInputs["backend"] = state ? state.backend : undefined;
            resourceInputs["dbName"] = state ? state.dbName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["rotationPeriod"] = state ? state.rotationPeriod : undefined;
            resourceInputs["rotationSchedule"] = state ? state.rotationSchedule : undefined;
            resourceInputs["rotationStatements"] = state ? state.rotationStatements : undefined;
            resourceInputs["rotationWindow"] = state ? state.rotationWindow : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as DatabaseSecretBackendStaticRoleArgs | undefined;
            if ((!args || args.backend === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backend'");
            }
            if ((!args || args.dbName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbName'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["backend"] = args ? args.backend : undefined;
            resourceInputs["dbName"] = args ? args.dbName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["rotationPeriod"] = args ? args.rotationPeriod : undefined;
            resourceInputs["rotationSchedule"] = args ? args.rotationSchedule : undefined;
            resourceInputs["rotationStatements"] = args ? args.rotationStatements : undefined;
            resourceInputs["rotationWindow"] = args ? args.rotationWindow : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabaseSecretBackendStaticRole.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatabaseSecretBackendStaticRole resources.
 */
export interface DatabaseSecretBackendStaticRoleState {
    /**
     * The path of the Database Secret Backend the role belongs to.
     */
    backend?: pulumi.Input<string>;
    /**
     * Database connection to use for this role.
     */
    dbName?: pulumi.Input<string>;
    /**
     * Unique name for the static role.
     */
    name?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * The amount of time Vault should wait before rotating the password, in seconds.
     */
    rotationPeriod?: pulumi.Input<number>;
    /**
     * A cron-style string that will define the schedule on which rotations should occur.
     */
    rotationSchedule?: pulumi.Input<string>;
    /**
     * Database statements to execute to rotate the password for the configured database user.
     */
    rotationStatements?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The amount of time in seconds in which the rotations are allowed to occur starting from a given rotation_schedule.
     */
    rotationWindow?: pulumi.Input<number>;
    /**
     * The database username that this role corresponds to.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DatabaseSecretBackendStaticRole resource.
 */
export interface DatabaseSecretBackendStaticRoleArgs {
    /**
     * The path of the Database Secret Backend the role belongs to.
     */
    backend: pulumi.Input<string>;
    /**
     * Database connection to use for this role.
     */
    dbName: pulumi.Input<string>;
    /**
     * Unique name for the static role.
     */
    name?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * The amount of time Vault should wait before rotating the password, in seconds.
     */
    rotationPeriod?: pulumi.Input<number>;
    /**
     * A cron-style string that will define the schedule on which rotations should occur.
     */
    rotationSchedule?: pulumi.Input<string>;
    /**
     * Database statements to execute to rotate the password for the configured database user.
     */
    rotationStatements?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The amount of time in seconds in which the rotations are allowed to occur starting from a given rotation_schedule.
     */
    rotationWindow?: pulumi.Input<number>;
    /**
     * The database username that this role corresponds to.
     */
    username: pulumi.Input<string>;
}
