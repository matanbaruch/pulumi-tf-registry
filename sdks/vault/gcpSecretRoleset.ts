// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GcpSecretRoleset extends pulumi.CustomResource {
    /**
     * Get an existing GcpSecretRoleset resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GcpSecretRolesetState, opts?: pulumi.CustomResourceOptions): GcpSecretRoleset {
        return new GcpSecretRoleset(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:index/gcpSecretRoleset:GcpSecretRoleset';

    /**
     * Returns true if the given object is an instance of GcpSecretRoleset.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GcpSecretRoleset {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GcpSecretRoleset.__pulumiType;
    }

    /**
     * Path where the GCP secrets engine is mounted.
     */
    public readonly backend!: pulumi.Output<string>;
    public readonly bindings!: pulumi.Output<outputs.GcpSecretRolesetBinding[]>;
    /**
     * Target namespace. (requires Enterprise)
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * Name of the GCP project that this roleset's service account will belong to.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Name of the RoleSet to create
     */
    public readonly roleset!: pulumi.Output<string>;
    /**
     * Type of secret generated for this role set. Defaults to `access_token`. Accepted values: `access_token`,
     * `service_account_key`
     */
    public readonly secretType!: pulumi.Output<string>;
    /**
     * Email of the service account created by Vault for this Roleset
     */
    public /*out*/ readonly serviceAccountEmail!: pulumi.Output<string>;
    /**
     * List of OAuth scopes to assign to `access_token` secrets generated under this role set (`access_token` role sets only)
     */
    public readonly tokenScopes!: pulumi.Output<string[] | undefined>;

    /**
     * Create a GcpSecretRoleset resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GcpSecretRolesetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GcpSecretRolesetArgs | GcpSecretRolesetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GcpSecretRolesetState | undefined;
            resourceInputs["backend"] = state ? state.backend : undefined;
            resourceInputs["bindings"] = state ? state.bindings : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["roleset"] = state ? state.roleset : undefined;
            resourceInputs["secretType"] = state ? state.secretType : undefined;
            resourceInputs["serviceAccountEmail"] = state ? state.serviceAccountEmail : undefined;
            resourceInputs["tokenScopes"] = state ? state.tokenScopes : undefined;
        } else {
            const args = argsOrState as GcpSecretRolesetArgs | undefined;
            if ((!args || args.backend === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backend'");
            }
            if ((!args || args.bindings === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bindings'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.roleset === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleset'");
            }
            resourceInputs["backend"] = args ? args.backend : undefined;
            resourceInputs["bindings"] = args ? args.bindings : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["roleset"] = args ? args.roleset : undefined;
            resourceInputs["secretType"] = args ? args.secretType : undefined;
            resourceInputs["tokenScopes"] = args ? args.tokenScopes : undefined;
            resourceInputs["serviceAccountEmail"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GcpSecretRoleset.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GcpSecretRoleset resources.
 */
export interface GcpSecretRolesetState {
    /**
     * Path where the GCP secrets engine is mounted.
     */
    backend?: pulumi.Input<string>;
    bindings?: pulumi.Input<pulumi.Input<inputs.GcpSecretRolesetBinding>[]>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Name of the GCP project that this roleset's service account will belong to.
     */
    project?: pulumi.Input<string>;
    /**
     * Name of the RoleSet to create
     */
    roleset?: pulumi.Input<string>;
    /**
     * Type of secret generated for this role set. Defaults to `access_token`. Accepted values: `access_token`,
     * `service_account_key`
     */
    secretType?: pulumi.Input<string>;
    /**
     * Email of the service account created by Vault for this Roleset
     */
    serviceAccountEmail?: pulumi.Input<string>;
    /**
     * List of OAuth scopes to assign to `access_token` secrets generated under this role set (`access_token` role sets only)
     */
    tokenScopes?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a GcpSecretRoleset resource.
 */
export interface GcpSecretRolesetArgs {
    /**
     * Path where the GCP secrets engine is mounted.
     */
    backend: pulumi.Input<string>;
    bindings: pulumi.Input<pulumi.Input<inputs.GcpSecretRolesetBinding>[]>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Name of the GCP project that this roleset's service account will belong to.
     */
    project: pulumi.Input<string>;
    /**
     * Name of the RoleSet to create
     */
    roleset: pulumi.Input<string>;
    /**
     * Type of secret generated for this role set. Defaults to `access_token`. Accepted values: `access_token`,
     * `service_account_key`
     */
    secretType?: pulumi.Input<string>;
    /**
     * List of OAuth scopes to assign to `access_token` secrets generated under this role set (`access_token` role sets only)
     */
    tokenScopes?: pulumi.Input<pulumi.Input<string>[]>;
}
