// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class TerraformCloudSecretCreds extends pulumi.CustomResource {
    /**
     * Get an existing TerraformCloudSecretCreds resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TerraformCloudSecretCredsState, opts?: pulumi.CustomResourceOptions): TerraformCloudSecretCreds {
        return new TerraformCloudSecretCreds(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:index/terraformCloudSecretCreds:TerraformCloudSecretCreds';

    /**
     * Returns true if the given object is an instance of TerraformCloudSecretCreds.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TerraformCloudSecretCreds {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TerraformCloudSecretCreds.__pulumiType;
    }

    public readonly backend!: pulumi.Output<string>;
    /**
     * Associated Vault lease ID, if one exists
     */
    public /*out*/ readonly leaseId!: pulumi.Output<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    public /*out*/ readonly organization!: pulumi.Output<string>;
    /**
     * Name of the role.
     */
    public readonly role!: pulumi.Output<string>;
    public /*out*/ readonly teamId!: pulumi.Output<string>;
    public /*out*/ readonly token!: pulumi.Output<string>;
    public /*out*/ readonly tokenId!: pulumi.Output<string>;

    /**
     * Create a TerraformCloudSecretCreds resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TerraformCloudSecretCredsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TerraformCloudSecretCredsArgs | TerraformCloudSecretCredsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TerraformCloudSecretCredsState | undefined;
            resourceInputs["backend"] = state ? state.backend : undefined;
            resourceInputs["leaseId"] = state ? state.leaseId : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
            resourceInputs["tokenId"] = state ? state.tokenId : undefined;
        } else {
            const args = argsOrState as TerraformCloudSecretCredsArgs | undefined;
            if ((!args || args.backend === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backend'");
            }
            if ((!args || args.role === undefined) && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            resourceInputs["backend"] = args ? args.backend : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["leaseId"] = undefined /*out*/;
            resourceInputs["organization"] = undefined /*out*/;
            resourceInputs["teamId"] = undefined /*out*/;
            resourceInputs["token"] = undefined /*out*/;
            resourceInputs["tokenId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["leaseId", "token"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(TerraformCloudSecretCreds.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering TerraformCloudSecretCreds resources.
 */
export interface TerraformCloudSecretCredsState {
    backend?: pulumi.Input<string>;
    /**
     * Associated Vault lease ID, if one exists
     */
    leaseId?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    organization?: pulumi.Input<string>;
    /**
     * Name of the role.
     */
    role?: pulumi.Input<string>;
    teamId?: pulumi.Input<string>;
    token?: pulumi.Input<string>;
    tokenId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TerraformCloudSecretCreds resource.
 */
export interface TerraformCloudSecretCredsArgs {
    backend: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Name of the role.
     */
    role: pulumi.Input<string>;
}
