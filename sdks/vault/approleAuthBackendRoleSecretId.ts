// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ApproleAuthBackendRoleSecretId extends pulumi.CustomResource {
    /**
     * Get an existing ApproleAuthBackendRoleSecretId resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApproleAuthBackendRoleSecretIdState, opts?: pulumi.CustomResourceOptions): ApproleAuthBackendRoleSecretId {
        return new ApproleAuthBackendRoleSecretId(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:index/approleAuthBackendRoleSecretId:ApproleAuthBackendRoleSecretId';

    /**
     * Returns true if the given object is an instance of ApproleAuthBackendRoleSecretId.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApproleAuthBackendRoleSecretId {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApproleAuthBackendRoleSecretId.__pulumiType;
    }

    /**
     * The unique ID used to access this SecretID.
     */
    public /*out*/ readonly accessor!: pulumi.Output<string>;
    /**
     * Unique name of the auth backend to configure.
     */
    public readonly backend!: pulumi.Output<string | undefined>;
    /**
     * List of CIDR blocks that can log in using the SecretID.
     */
    public readonly cidrLists!: pulumi.Output<string[] | undefined>;
    /**
     * JSON-encoded secret data to write.
     */
    public readonly metadata!: pulumi.Output<string | undefined>;
    /**
     * Target namespace. (requires Enterprise)
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * Name of the role.
     */
    public readonly roleName!: pulumi.Output<string>;
    /**
     * The SecretID to be managed. If not specified, Vault auto-generates one.
     */
    public readonly secretId!: pulumi.Output<string>;
    /**
     * Use the wrapped secret-id accessor as the id of this resource. If false, a fresh secret-id will be regenerated whenever
     * the wrapping token is expired or invalidated through unwrapping.
     */
    public readonly withWrappedAccessor!: pulumi.Output<boolean | undefined>;
    /**
     * The wrapped SecretID accessor.
     */
    public /*out*/ readonly wrappingAccessor!: pulumi.Output<string>;
    /**
     * The wrapped SecretID token.
     */
    public /*out*/ readonly wrappingToken!: pulumi.Output<string>;
    /**
     * The TTL duration of the wrapped SecretID.
     */
    public readonly wrappingTtl!: pulumi.Output<string | undefined>;

    /**
     * Create a ApproleAuthBackendRoleSecretId resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApproleAuthBackendRoleSecretIdArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApproleAuthBackendRoleSecretIdArgs | ApproleAuthBackendRoleSecretIdState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApproleAuthBackendRoleSecretIdState | undefined;
            resourceInputs["accessor"] = state ? state.accessor : undefined;
            resourceInputs["backend"] = state ? state.backend : undefined;
            resourceInputs["cidrLists"] = state ? state.cidrLists : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["roleName"] = state ? state.roleName : undefined;
            resourceInputs["secretId"] = state ? state.secretId : undefined;
            resourceInputs["withWrappedAccessor"] = state ? state.withWrappedAccessor : undefined;
            resourceInputs["wrappingAccessor"] = state ? state.wrappingAccessor : undefined;
            resourceInputs["wrappingToken"] = state ? state.wrappingToken : undefined;
            resourceInputs["wrappingTtl"] = state ? state.wrappingTtl : undefined;
        } else {
            const args = argsOrState as ApproleAuthBackendRoleSecretIdArgs | undefined;
            if ((!args || args.roleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleName'");
            }
            resourceInputs["backend"] = args ? args.backend : undefined;
            resourceInputs["cidrLists"] = args ? args.cidrLists : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["roleName"] = args ? args.roleName : undefined;
            resourceInputs["secretId"] = args?.secretId ? pulumi.secret(args.secretId) : undefined;
            resourceInputs["withWrappedAccessor"] = args ? args.withWrappedAccessor : undefined;
            resourceInputs["wrappingTtl"] = args ? args.wrappingTtl : undefined;
            resourceInputs["accessor"] = undefined /*out*/;
            resourceInputs["wrappingAccessor"] = undefined /*out*/;
            resourceInputs["wrappingToken"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secretId", "wrappingToken"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ApproleAuthBackendRoleSecretId.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ApproleAuthBackendRoleSecretId resources.
 */
export interface ApproleAuthBackendRoleSecretIdState {
    /**
     * The unique ID used to access this SecretID.
     */
    accessor?: pulumi.Input<string>;
    /**
     * Unique name of the auth backend to configure.
     */
    backend?: pulumi.Input<string>;
    /**
     * List of CIDR blocks that can log in using the SecretID.
     */
    cidrLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * JSON-encoded secret data to write.
     */
    metadata?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Name of the role.
     */
    roleName?: pulumi.Input<string>;
    /**
     * The SecretID to be managed. If not specified, Vault auto-generates one.
     */
    secretId?: pulumi.Input<string>;
    /**
     * Use the wrapped secret-id accessor as the id of this resource. If false, a fresh secret-id will be regenerated whenever
     * the wrapping token is expired or invalidated through unwrapping.
     */
    withWrappedAccessor?: pulumi.Input<boolean>;
    /**
     * The wrapped SecretID accessor.
     */
    wrappingAccessor?: pulumi.Input<string>;
    /**
     * The wrapped SecretID token.
     */
    wrappingToken?: pulumi.Input<string>;
    /**
     * The TTL duration of the wrapped SecretID.
     */
    wrappingTtl?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApproleAuthBackendRoleSecretId resource.
 */
export interface ApproleAuthBackendRoleSecretIdArgs {
    /**
     * Unique name of the auth backend to configure.
     */
    backend?: pulumi.Input<string>;
    /**
     * List of CIDR blocks that can log in using the SecretID.
     */
    cidrLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * JSON-encoded secret data to write.
     */
    metadata?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Name of the role.
     */
    roleName: pulumi.Input<string>;
    /**
     * The SecretID to be managed. If not specified, Vault auto-generates one.
     */
    secretId?: pulumi.Input<string>;
    /**
     * Use the wrapped secret-id accessor as the id of this resource. If false, a fresh secret-id will be regenerated whenever
     * the wrapping token is expired or invalidated through unwrapping.
     */
    withWrappedAccessor?: pulumi.Input<boolean>;
    /**
     * The TTL duration of the wrapped SecretID.
     */
    wrappingTtl?: pulumi.Input<string>;
}
