// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ConsulSecretBackend extends pulumi.CustomResource {
    /**
     * Get an existing ConsulSecretBackend resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConsulSecretBackendState, opts?: pulumi.CustomResourceOptions): ConsulSecretBackend {
        return new ConsulSecretBackend(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:index/consulSecretBackend:ConsulSecretBackend';

    /**
     * Returns true if the given object is an instance of ConsulSecretBackend.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConsulSecretBackend {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConsulSecretBackend.__pulumiType;
    }

    /**
     * Specifies the address of the Consul instance, provided as "host:port" like "127.0.0.1:8500".
     */
    public readonly address!: pulumi.Output<string>;
    /**
     * Denotes a backend resource that is used to bootstrap the Consul ACL system. Only one resource may be used to bootstrap.
     */
    public readonly bootstrap!: pulumi.Output<boolean | undefined>;
    /**
     * CA certificate to use when verifying Consul server certificate, must be x509 PEM encoded.
     */
    public readonly caCert!: pulumi.Output<string | undefined>;
    /**
     * Client certificate used for Consul's TLS communication, must be x509 PEM encoded and if this is set you need to also set
     * client_key.
     */
    public readonly clientCert!: pulumi.Output<string | undefined>;
    /**
     * Client key used for Consul's TLS communication, must be x509 PEM encoded and if this is set you need to also set
     * client_cert.
     */
    public readonly clientKey!: pulumi.Output<string | undefined>;
    /**
     * Default lease duration for secrets in seconds
     */
    public readonly defaultLeaseTtlSeconds!: pulumi.Output<number | undefined>;
    /**
     * Human-friendly description of the mount for the backend.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * If set, opts out of mount migration on path updates.
     */
    public readonly disableRemount!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies if the secret backend is local only
     */
    public readonly local!: pulumi.Output<boolean | undefined>;
    /**
     * Maximum possible lease duration for secrets in seconds
     */
    public readonly maxLeaseTtlSeconds!: pulumi.Output<number | undefined>;
    /**
     * Target namespace. (requires Enterprise)
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * Unique name of the Vault Consul mount to configure
     */
    public readonly path!: pulumi.Output<string | undefined>;
    /**
     * Specifies the URL scheme to use. Defaults to "http".
     */
    public readonly scheme!: pulumi.Output<string | undefined>;
    /**
     * Specifies the Consul token to use when managing or issuing new tokens.
     */
    public readonly token!: pulumi.Output<string | undefined>;

    /**
     * Create a ConsulSecretBackend resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConsulSecretBackendArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConsulSecretBackendArgs | ConsulSecretBackendState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConsulSecretBackendState | undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["bootstrap"] = state ? state.bootstrap : undefined;
            resourceInputs["caCert"] = state ? state.caCert : undefined;
            resourceInputs["clientCert"] = state ? state.clientCert : undefined;
            resourceInputs["clientKey"] = state ? state.clientKey : undefined;
            resourceInputs["defaultLeaseTtlSeconds"] = state ? state.defaultLeaseTtlSeconds : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disableRemount"] = state ? state.disableRemount : undefined;
            resourceInputs["local"] = state ? state.local : undefined;
            resourceInputs["maxLeaseTtlSeconds"] = state ? state.maxLeaseTtlSeconds : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["scheme"] = state ? state.scheme : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
        } else {
            const args = argsOrState as ConsulSecretBackendArgs | undefined;
            if ((!args || args.address === undefined) && !opts.urn) {
                throw new Error("Missing required property 'address'");
            }
            resourceInputs["address"] = args ? args.address : undefined;
            resourceInputs["bootstrap"] = args ? args.bootstrap : undefined;
            resourceInputs["caCert"] = args ? args.caCert : undefined;
            resourceInputs["clientCert"] = args?.clientCert ? pulumi.secret(args.clientCert) : undefined;
            resourceInputs["clientKey"] = args?.clientKey ? pulumi.secret(args.clientKey) : undefined;
            resourceInputs["defaultLeaseTtlSeconds"] = args ? args.defaultLeaseTtlSeconds : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disableRemount"] = args ? args.disableRemount : undefined;
            resourceInputs["local"] = args ? args.local : undefined;
            resourceInputs["maxLeaseTtlSeconds"] = args ? args.maxLeaseTtlSeconds : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["scheme"] = args ? args.scheme : undefined;
            resourceInputs["token"] = args?.token ? pulumi.secret(args.token) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["clientCert", "clientKey", "token"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ConsulSecretBackend.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ConsulSecretBackend resources.
 */
export interface ConsulSecretBackendState {
    /**
     * Specifies the address of the Consul instance, provided as "host:port" like "127.0.0.1:8500".
     */
    address?: pulumi.Input<string>;
    /**
     * Denotes a backend resource that is used to bootstrap the Consul ACL system. Only one resource may be used to bootstrap.
     */
    bootstrap?: pulumi.Input<boolean>;
    /**
     * CA certificate to use when verifying Consul server certificate, must be x509 PEM encoded.
     */
    caCert?: pulumi.Input<string>;
    /**
     * Client certificate used for Consul's TLS communication, must be x509 PEM encoded and if this is set you need to also set
     * client_key.
     */
    clientCert?: pulumi.Input<string>;
    /**
     * Client key used for Consul's TLS communication, must be x509 PEM encoded and if this is set you need to also set
     * client_cert.
     */
    clientKey?: pulumi.Input<string>;
    /**
     * Default lease duration for secrets in seconds
     */
    defaultLeaseTtlSeconds?: pulumi.Input<number>;
    /**
     * Human-friendly description of the mount for the backend.
     */
    description?: pulumi.Input<string>;
    /**
     * If set, opts out of mount migration on path updates.
     */
    disableRemount?: pulumi.Input<boolean>;
    /**
     * Specifies if the secret backend is local only
     */
    local?: pulumi.Input<boolean>;
    /**
     * Maximum possible lease duration for secrets in seconds
     */
    maxLeaseTtlSeconds?: pulumi.Input<number>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Unique name of the Vault Consul mount to configure
     */
    path?: pulumi.Input<string>;
    /**
     * Specifies the URL scheme to use. Defaults to "http".
     */
    scheme?: pulumi.Input<string>;
    /**
     * Specifies the Consul token to use when managing or issuing new tokens.
     */
    token?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ConsulSecretBackend resource.
 */
export interface ConsulSecretBackendArgs {
    /**
     * Specifies the address of the Consul instance, provided as "host:port" like "127.0.0.1:8500".
     */
    address: pulumi.Input<string>;
    /**
     * Denotes a backend resource that is used to bootstrap the Consul ACL system. Only one resource may be used to bootstrap.
     */
    bootstrap?: pulumi.Input<boolean>;
    /**
     * CA certificate to use when verifying Consul server certificate, must be x509 PEM encoded.
     */
    caCert?: pulumi.Input<string>;
    /**
     * Client certificate used for Consul's TLS communication, must be x509 PEM encoded and if this is set you need to also set
     * client_key.
     */
    clientCert?: pulumi.Input<string>;
    /**
     * Client key used for Consul's TLS communication, must be x509 PEM encoded and if this is set you need to also set
     * client_cert.
     */
    clientKey?: pulumi.Input<string>;
    /**
     * Default lease duration for secrets in seconds
     */
    defaultLeaseTtlSeconds?: pulumi.Input<number>;
    /**
     * Human-friendly description of the mount for the backend.
     */
    description?: pulumi.Input<string>;
    /**
     * If set, opts out of mount migration on path updates.
     */
    disableRemount?: pulumi.Input<boolean>;
    /**
     * Specifies if the secret backend is local only
     */
    local?: pulumi.Input<boolean>;
    /**
     * Maximum possible lease duration for secrets in seconds
     */
    maxLeaseTtlSeconds?: pulumi.Input<number>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Unique name of the Vault Consul mount to configure
     */
    path?: pulumi.Input<string>;
    /**
     * Specifies the URL scheme to use. Defaults to "http".
     */
    scheme?: pulumi.Input<string>;
    /**
     * Specifies the Consul token to use when managing or issuing new tokens.
     */
    token?: pulumi.Input<string>;
}
