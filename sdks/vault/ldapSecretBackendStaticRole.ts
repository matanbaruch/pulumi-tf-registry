// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LdapSecretBackendStaticRole extends pulumi.CustomResource {
    /**
     * Get an existing LdapSecretBackendStaticRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LdapSecretBackendStaticRoleState, opts?: pulumi.CustomResourceOptions): LdapSecretBackendStaticRole {
        return new LdapSecretBackendStaticRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:index/ldapSecretBackendStaticRole:LdapSecretBackendStaticRole';

    /**
     * Returns true if the given object is an instance of LdapSecretBackendStaticRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LdapSecretBackendStaticRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LdapSecretBackendStaticRole.__pulumiType;
    }

    /**
     * Distinguished name (DN) of the existing LDAP entry to manage password rotation for.
     */
    public readonly dn!: pulumi.Output<string | undefined>;
    /**
     * The path where the LDAP secrets backend is mounted.
     */
    public readonly mount!: pulumi.Output<string | undefined>;
    /**
     * Target namespace. (requires Enterprise)
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * Name of the role.
     */
    public readonly roleName!: pulumi.Output<string>;
    /**
     * How often Vault should rotate the password of the user entry.
     */
    public readonly rotationPeriod!: pulumi.Output<number>;
    /**
     * Skip rotation of the password on import.
     */
    public readonly skipImportRotation!: pulumi.Output<boolean | undefined>;
    /**
     * The username of the existing LDAP entry to manage password rotation for.
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a LdapSecretBackendStaticRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LdapSecretBackendStaticRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LdapSecretBackendStaticRoleArgs | LdapSecretBackendStaticRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LdapSecretBackendStaticRoleState | undefined;
            resourceInputs["dn"] = state ? state.dn : undefined;
            resourceInputs["mount"] = state ? state.mount : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["roleName"] = state ? state.roleName : undefined;
            resourceInputs["rotationPeriod"] = state ? state.rotationPeriod : undefined;
            resourceInputs["skipImportRotation"] = state ? state.skipImportRotation : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as LdapSecretBackendStaticRoleArgs | undefined;
            if ((!args || args.roleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleName'");
            }
            if ((!args || args.rotationPeriod === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rotationPeriod'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["dn"] = args ? args.dn : undefined;
            resourceInputs["mount"] = args ? args.mount : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["roleName"] = args ? args.roleName : undefined;
            resourceInputs["rotationPeriod"] = args ? args.rotationPeriod : undefined;
            resourceInputs["skipImportRotation"] = args ? args.skipImportRotation : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LdapSecretBackendStaticRole.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LdapSecretBackendStaticRole resources.
 */
export interface LdapSecretBackendStaticRoleState {
    /**
     * Distinguished name (DN) of the existing LDAP entry to manage password rotation for.
     */
    dn?: pulumi.Input<string>;
    /**
     * The path where the LDAP secrets backend is mounted.
     */
    mount?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Name of the role.
     */
    roleName?: pulumi.Input<string>;
    /**
     * How often Vault should rotate the password of the user entry.
     */
    rotationPeriod?: pulumi.Input<number>;
    /**
     * Skip rotation of the password on import.
     */
    skipImportRotation?: pulumi.Input<boolean>;
    /**
     * The username of the existing LDAP entry to manage password rotation for.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LdapSecretBackendStaticRole resource.
 */
export interface LdapSecretBackendStaticRoleArgs {
    /**
     * Distinguished name (DN) of the existing LDAP entry to manage password rotation for.
     */
    dn?: pulumi.Input<string>;
    /**
     * The path where the LDAP secrets backend is mounted.
     */
    mount?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Name of the role.
     */
    roleName: pulumi.Input<string>;
    /**
     * How often Vault should rotate the password of the user entry.
     */
    rotationPeriod: pulumi.Input<number>;
    /**
     * Skip rotation of the password on import.
     */
    skipImportRotation?: pulumi.Input<boolean>;
    /**
     * The username of the existing LDAP entry to manage password rotation for.
     */
    username: pulumi.Input<string>;
}
