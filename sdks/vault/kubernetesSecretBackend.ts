// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class KubernetesSecretBackend extends pulumi.CustomResource {
    /**
     * Get an existing KubernetesSecretBackend resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KubernetesSecretBackendState, opts?: pulumi.CustomResourceOptions): KubernetesSecretBackend {
        return new KubernetesSecretBackend(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:index/kubernetesSecretBackend:KubernetesSecretBackend';

    /**
     * Returns true if the given object is an instance of KubernetesSecretBackend.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KubernetesSecretBackend {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KubernetesSecretBackend.__pulumiType;
    }

    /**
     * Accessor of the mount
     */
    public /*out*/ readonly accessor!: pulumi.Output<string>;
    /**
     * List of managed key registry entry names that the mount in question is allowed to access
     */
    public readonly allowedManagedKeys!: pulumi.Output<string[] | undefined>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    public readonly allowedResponseHeaders!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
     */
    public readonly auditNonHmacRequestKeys!: pulumi.Output<string[]>;
    /**
     * Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
     */
    public readonly auditNonHmacResponseKeys!: pulumi.Output<string[]>;
    /**
     * Default lease duration for tokens and secrets in seconds
     */
    public readonly defaultLeaseTtlSeconds!: pulumi.Output<number>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    public readonly delegatedAuthAccessors!: pulumi.Output<string[] | undefined>;
    /**
     * Human-friendly description of the mount
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Disable defaulting to the local CA certificate and service account JWT when running in a Kubernetes pod.
     */
    public readonly disableLocalCaJwt!: pulumi.Output<boolean | undefined>;
    /**
     * Enable the secrets engine to access Vault's external entropy source
     */
    public readonly externalEntropyAccess!: pulumi.Output<boolean | undefined>;
    /**
     * The key to use for signing plugin workload identity tokens
     */
    public readonly identityTokenKey!: pulumi.Output<string | undefined>;
    /**
     * A PEM-encoded CA certificate used by the secret engine to verify the Kubernetes API server certificate. Defaults to the
     * local pod’s CA if found, or otherwise the host's root CA set.
     */
    public readonly kubernetesCaCert!: pulumi.Output<string | undefined>;
    /**
     * The Kubernetes API URL to connect to.
     */
    public readonly kubernetesHost!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether to show this mount in the UI-specific listing endpoint
     */
    public readonly listingVisibility!: pulumi.Output<string | undefined>;
    /**
     * Local mount flag that can be explicitly set to true to enforce local mount in HA environment
     */
    public readonly local!: pulumi.Output<boolean | undefined>;
    /**
     * Maximum possible lease duration for tokens and secrets in seconds
     */
    public readonly maxLeaseTtlSeconds!: pulumi.Output<number>;
    /**
     * Target namespace. (requires Enterprise)
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * Specifies mount type specific options that are passed to the backend
     */
    public readonly options!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    public readonly passthroughRequestHeaders!: pulumi.Output<string[] | undefined>;
    /**
     * Where the secret backend will be mounted
     */
    public readonly path!: pulumi.Output<string>;
    /**
     * Specifies the semantic version of the plugin to use, e.g. 'v1.0.0'
     */
    public readonly pluginVersion!: pulumi.Output<string | undefined>;
    /**
     * Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
     */
    public readonly sealWrap!: pulumi.Output<boolean>;
    /**
     * The JSON web token of the service account used by the secrets engine to manage Kubernetes credentials. Defaults to the
     * local pod’s JWT if found.
     */
    public readonly serviceAccountJwt!: pulumi.Output<string | undefined>;

    /**
     * Create a KubernetesSecretBackend resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KubernetesSecretBackendArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KubernetesSecretBackendArgs | KubernetesSecretBackendState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KubernetesSecretBackendState | undefined;
            resourceInputs["accessor"] = state ? state.accessor : undefined;
            resourceInputs["allowedManagedKeys"] = state ? state.allowedManagedKeys : undefined;
            resourceInputs["allowedResponseHeaders"] = state ? state.allowedResponseHeaders : undefined;
            resourceInputs["auditNonHmacRequestKeys"] = state ? state.auditNonHmacRequestKeys : undefined;
            resourceInputs["auditNonHmacResponseKeys"] = state ? state.auditNonHmacResponseKeys : undefined;
            resourceInputs["defaultLeaseTtlSeconds"] = state ? state.defaultLeaseTtlSeconds : undefined;
            resourceInputs["delegatedAuthAccessors"] = state ? state.delegatedAuthAccessors : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disableLocalCaJwt"] = state ? state.disableLocalCaJwt : undefined;
            resourceInputs["externalEntropyAccess"] = state ? state.externalEntropyAccess : undefined;
            resourceInputs["identityTokenKey"] = state ? state.identityTokenKey : undefined;
            resourceInputs["kubernetesCaCert"] = state ? state.kubernetesCaCert : undefined;
            resourceInputs["kubernetesHost"] = state ? state.kubernetesHost : undefined;
            resourceInputs["listingVisibility"] = state ? state.listingVisibility : undefined;
            resourceInputs["local"] = state ? state.local : undefined;
            resourceInputs["maxLeaseTtlSeconds"] = state ? state.maxLeaseTtlSeconds : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["passthroughRequestHeaders"] = state ? state.passthroughRequestHeaders : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["pluginVersion"] = state ? state.pluginVersion : undefined;
            resourceInputs["sealWrap"] = state ? state.sealWrap : undefined;
            resourceInputs["serviceAccountJwt"] = state ? state.serviceAccountJwt : undefined;
        } else {
            const args = argsOrState as KubernetesSecretBackendArgs | undefined;
            if ((!args || args.path === undefined) && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            resourceInputs["allowedManagedKeys"] = args ? args.allowedManagedKeys : undefined;
            resourceInputs["allowedResponseHeaders"] = args ? args.allowedResponseHeaders : undefined;
            resourceInputs["auditNonHmacRequestKeys"] = args ? args.auditNonHmacRequestKeys : undefined;
            resourceInputs["auditNonHmacResponseKeys"] = args ? args.auditNonHmacResponseKeys : undefined;
            resourceInputs["defaultLeaseTtlSeconds"] = args ? args.defaultLeaseTtlSeconds : undefined;
            resourceInputs["delegatedAuthAccessors"] = args ? args.delegatedAuthAccessors : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disableLocalCaJwt"] = args ? args.disableLocalCaJwt : undefined;
            resourceInputs["externalEntropyAccess"] = args ? args.externalEntropyAccess : undefined;
            resourceInputs["identityTokenKey"] = args ? args.identityTokenKey : undefined;
            resourceInputs["kubernetesCaCert"] = args ? args.kubernetesCaCert : undefined;
            resourceInputs["kubernetesHost"] = args ? args.kubernetesHost : undefined;
            resourceInputs["listingVisibility"] = args ? args.listingVisibility : undefined;
            resourceInputs["local"] = args ? args.local : undefined;
            resourceInputs["maxLeaseTtlSeconds"] = args ? args.maxLeaseTtlSeconds : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["passthroughRequestHeaders"] = args ? args.passthroughRequestHeaders : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["pluginVersion"] = args ? args.pluginVersion : undefined;
            resourceInputs["sealWrap"] = args ? args.sealWrap : undefined;
            resourceInputs["serviceAccountJwt"] = args?.serviceAccountJwt ? pulumi.secret(args.serviceAccountJwt) : undefined;
            resourceInputs["accessor"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["serviceAccountJwt"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(KubernetesSecretBackend.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KubernetesSecretBackend resources.
 */
export interface KubernetesSecretBackendState {
    /**
     * Accessor of the mount
     */
    accessor?: pulumi.Input<string>;
    /**
     * List of managed key registry entry names that the mount in question is allowed to access
     */
    allowedManagedKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    allowedResponseHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
     */
    auditNonHmacRequestKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
     */
    auditNonHmacResponseKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Default lease duration for tokens and secrets in seconds
     */
    defaultLeaseTtlSeconds?: pulumi.Input<number>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    delegatedAuthAccessors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Human-friendly description of the mount
     */
    description?: pulumi.Input<string>;
    /**
     * Disable defaulting to the local CA certificate and service account JWT when running in a Kubernetes pod.
     */
    disableLocalCaJwt?: pulumi.Input<boolean>;
    /**
     * Enable the secrets engine to access Vault's external entropy source
     */
    externalEntropyAccess?: pulumi.Input<boolean>;
    /**
     * The key to use for signing plugin workload identity tokens
     */
    identityTokenKey?: pulumi.Input<string>;
    /**
     * A PEM-encoded CA certificate used by the secret engine to verify the Kubernetes API server certificate. Defaults to the
     * local pod’s CA if found, or otherwise the host's root CA set.
     */
    kubernetesCaCert?: pulumi.Input<string>;
    /**
     * The Kubernetes API URL to connect to.
     */
    kubernetesHost?: pulumi.Input<string>;
    /**
     * Specifies whether to show this mount in the UI-specific listing endpoint
     */
    listingVisibility?: pulumi.Input<string>;
    /**
     * Local mount flag that can be explicitly set to true to enforce local mount in HA environment
     */
    local?: pulumi.Input<boolean>;
    /**
     * Maximum possible lease duration for tokens and secrets in seconds
     */
    maxLeaseTtlSeconds?: pulumi.Input<number>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Specifies mount type specific options that are passed to the backend
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    passthroughRequestHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Where the secret backend will be mounted
     */
    path?: pulumi.Input<string>;
    /**
     * Specifies the semantic version of the plugin to use, e.g. 'v1.0.0'
     */
    pluginVersion?: pulumi.Input<string>;
    /**
     * Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
     */
    sealWrap?: pulumi.Input<boolean>;
    /**
     * The JSON web token of the service account used by the secrets engine to manage Kubernetes credentials. Defaults to the
     * local pod’s JWT if found.
     */
    serviceAccountJwt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KubernetesSecretBackend resource.
 */
export interface KubernetesSecretBackendArgs {
    /**
     * List of managed key registry entry names that the mount in question is allowed to access
     */
    allowedManagedKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    allowedResponseHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the list of keys that will not be HMAC'd by audit devices in the request data object.
     */
    auditNonHmacRequestKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the list of keys that will not be HMAC'd by audit devices in the response data object.
     */
    auditNonHmacResponseKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Default lease duration for tokens and secrets in seconds
     */
    defaultLeaseTtlSeconds?: pulumi.Input<number>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    delegatedAuthAccessors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Human-friendly description of the mount
     */
    description?: pulumi.Input<string>;
    /**
     * Disable defaulting to the local CA certificate and service account JWT when running in a Kubernetes pod.
     */
    disableLocalCaJwt?: pulumi.Input<boolean>;
    /**
     * Enable the secrets engine to access Vault's external entropy source
     */
    externalEntropyAccess?: pulumi.Input<boolean>;
    /**
     * The key to use for signing plugin workload identity tokens
     */
    identityTokenKey?: pulumi.Input<string>;
    /**
     * A PEM-encoded CA certificate used by the secret engine to verify the Kubernetes API server certificate. Defaults to the
     * local pod’s CA if found, or otherwise the host's root CA set.
     */
    kubernetesCaCert?: pulumi.Input<string>;
    /**
     * The Kubernetes API URL to connect to.
     */
    kubernetesHost?: pulumi.Input<string>;
    /**
     * Specifies whether to show this mount in the UI-specific listing endpoint
     */
    listingVisibility?: pulumi.Input<string>;
    /**
     * Local mount flag that can be explicitly set to true to enforce local mount in HA environment
     */
    local?: pulumi.Input<boolean>;
    /**
     * Maximum possible lease duration for tokens and secrets in seconds
     */
    maxLeaseTtlSeconds?: pulumi.Input<number>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Specifies mount type specific options that are passed to the backend
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * List of headers to allow and pass from the request to the plugin
     */
    passthroughRequestHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Where the secret backend will be mounted
     */
    path: pulumi.Input<string>;
    /**
     * Specifies the semantic version of the plugin to use, e.g. 'v1.0.0'
     */
    pluginVersion?: pulumi.Input<string>;
    /**
     * Enable seal wrapping for the mount, causing values stored by the mount to be wrapped by the seal's encryption capability
     */
    sealWrap?: pulumi.Input<boolean>;
    /**
     * The JSON web token of the service account used by the secrets engine to manage Kubernetes credentials. Defaults to the
     * local pod’s JWT if found.
     */
    serviceAccountJwt?: pulumi.Input<string>;
}
