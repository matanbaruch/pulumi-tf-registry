// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class TransformRole extends pulumi.CustomResource {
    /**
     * Get an existing TransformRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TransformRoleState, opts?: pulumi.CustomResourceOptions): TransformRole {
        return new TransformRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:index/transformRole:TransformRole';

    /**
     * Returns true if the given object is an instance of TransformRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TransformRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TransformRole.__pulumiType;
    }

    /**
     * The name of the role.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * The mount path for a back-end, for example, the path given in "$ vault auth enable -path=my-aws aws".
     */
    public readonly path!: pulumi.Output<string>;
    /**
     * A comma separated string or slice of transformations to use.
     */
    public readonly transformations!: pulumi.Output<string[] | undefined>;

    /**
     * Create a TransformRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TransformRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TransformRoleArgs | TransformRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TransformRoleState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["transformations"] = state ? state.transformations : undefined;
        } else {
            const args = argsOrState as TransformRoleArgs | undefined;
            if ((!args || args.path === undefined) && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["transformations"] = args ? args.transformations : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TransformRole.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering TransformRole resources.
 */
export interface TransformRoleState {
    /**
     * The name of the role.
     */
    name?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * The mount path for a back-end, for example, the path given in "$ vault auth enable -path=my-aws aws".
     */
    path?: pulumi.Input<string>;
    /**
     * A comma separated string or slice of transformations to use.
     */
    transformations?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a TransformRole resource.
 */
export interface TransformRoleArgs {
    /**
     * The name of the role.
     */
    name?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * The mount path for a back-end, for example, the path given in "$ vault auth enable -path=my-aws aws".
     */
    path: pulumi.Input<string>;
    /**
     * A comma separated string or slice of transformations to use.
     */
    transformations?: pulumi.Input<pulumi.Input<string>[]>;
}
