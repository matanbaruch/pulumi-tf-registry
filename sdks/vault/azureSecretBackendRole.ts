// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AzureSecretBackendRole extends pulumi.CustomResource {
    /**
     * Get an existing AzureSecretBackendRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AzureSecretBackendRoleState, opts?: pulumi.CustomResourceOptions): AzureSecretBackendRole {
        return new AzureSecretBackendRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:index/azureSecretBackendRole:AzureSecretBackendRole';

    /**
     * Returns true if the given object is an instance of AzureSecretBackendRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AzureSecretBackendRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AzureSecretBackendRole.__pulumiType;
    }

    /**
     * Application Object ID for an existing service principal that will be used instead of creating dynamic service
     * principals.
     */
    public readonly applicationObjectId!: pulumi.Output<string | undefined>;
    public readonly azureGroups!: pulumi.Output<outputs.AzureSecretBackendRoleAzureGroup[] | undefined>;
    public readonly azureRoles!: pulumi.Output<outputs.AzureSecretBackendRoleAzureRole[] | undefined>;
    /**
     * Unique name of the auth backend to configure.
     */
    public readonly backend!: pulumi.Output<string | undefined>;
    /**
     * Human-friendly description of the mount for the backend.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Human-friendly description of the mount for the backend.
     */
    public readonly maxTtl!: pulumi.Output<string | undefined>;
    /**
     * Target namespace. (requires Enterprise)
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * Indicates whether the applications and service principals created by Vault will be permanently deleted when the
     * corresponding leases expire.
     */
    public readonly permanentlyDelete!: pulumi.Output<boolean>;
    /**
     * Name of the role to create
     */
    public readonly role!: pulumi.Output<string>;
    /**
     * Specifies the security principal types that are allowed to sign in to the application. Valid values are: AzureADMyOrg,
     * AzureADMultipleOrgs, AzureADandPersonalMicrosoftAccount, PersonalMicrosoftAccount
     */
    public readonly signInAudience!: pulumi.Output<string | undefined>;
    /**
     * Comma-separated strings of Azure tags to attach to an application.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * Human-friendly description of the mount for the backend.
     */
    public readonly ttl!: pulumi.Output<string | undefined>;

    /**
     * Create a AzureSecretBackendRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AzureSecretBackendRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AzureSecretBackendRoleArgs | AzureSecretBackendRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AzureSecretBackendRoleState | undefined;
            resourceInputs["applicationObjectId"] = state ? state.applicationObjectId : undefined;
            resourceInputs["azureGroups"] = state ? state.azureGroups : undefined;
            resourceInputs["azureRoles"] = state ? state.azureRoles : undefined;
            resourceInputs["backend"] = state ? state.backend : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["maxTtl"] = state ? state.maxTtl : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["permanentlyDelete"] = state ? state.permanentlyDelete : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["signInAudience"] = state ? state.signInAudience : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
        } else {
            const args = argsOrState as AzureSecretBackendRoleArgs | undefined;
            if ((!args || args.role === undefined) && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            resourceInputs["applicationObjectId"] = args ? args.applicationObjectId : undefined;
            resourceInputs["azureGroups"] = args ? args.azureGroups : undefined;
            resourceInputs["azureRoles"] = args ? args.azureRoles : undefined;
            resourceInputs["backend"] = args ? args.backend : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["maxTtl"] = args ? args.maxTtl : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["permanentlyDelete"] = args ? args.permanentlyDelete : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["signInAudience"] = args ? args.signInAudience : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AzureSecretBackendRole.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AzureSecretBackendRole resources.
 */
export interface AzureSecretBackendRoleState {
    /**
     * Application Object ID for an existing service principal that will be used instead of creating dynamic service
     * principals.
     */
    applicationObjectId?: pulumi.Input<string>;
    azureGroups?: pulumi.Input<pulumi.Input<inputs.AzureSecretBackendRoleAzureGroup>[]>;
    azureRoles?: pulumi.Input<pulumi.Input<inputs.AzureSecretBackendRoleAzureRole>[]>;
    /**
     * Unique name of the auth backend to configure.
     */
    backend?: pulumi.Input<string>;
    /**
     * Human-friendly description of the mount for the backend.
     */
    description?: pulumi.Input<string>;
    /**
     * Human-friendly description of the mount for the backend.
     */
    maxTtl?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Indicates whether the applications and service principals created by Vault will be permanently deleted when the
     * corresponding leases expire.
     */
    permanentlyDelete?: pulumi.Input<boolean>;
    /**
     * Name of the role to create
     */
    role?: pulumi.Input<string>;
    /**
     * Specifies the security principal types that are allowed to sign in to the application. Valid values are: AzureADMyOrg,
     * AzureADMultipleOrgs, AzureADandPersonalMicrosoftAccount, PersonalMicrosoftAccount
     */
    signInAudience?: pulumi.Input<string>;
    /**
     * Comma-separated strings of Azure tags to attach to an application.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Human-friendly description of the mount for the backend.
     */
    ttl?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AzureSecretBackendRole resource.
 */
export interface AzureSecretBackendRoleArgs {
    /**
     * Application Object ID for an existing service principal that will be used instead of creating dynamic service
     * principals.
     */
    applicationObjectId?: pulumi.Input<string>;
    azureGroups?: pulumi.Input<pulumi.Input<inputs.AzureSecretBackendRoleAzureGroup>[]>;
    azureRoles?: pulumi.Input<pulumi.Input<inputs.AzureSecretBackendRoleAzureRole>[]>;
    /**
     * Unique name of the auth backend to configure.
     */
    backend?: pulumi.Input<string>;
    /**
     * Human-friendly description of the mount for the backend.
     */
    description?: pulumi.Input<string>;
    /**
     * Human-friendly description of the mount for the backend.
     */
    maxTtl?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Indicates whether the applications and service principals created by Vault will be permanently deleted when the
     * corresponding leases expire.
     */
    permanentlyDelete?: pulumi.Input<boolean>;
    /**
     * Name of the role to create
     */
    role: pulumi.Input<string>;
    /**
     * Specifies the security principal types that are allowed to sign in to the application. Valid values are: AzureADMyOrg,
     * AzureADMultipleOrgs, AzureADandPersonalMicrosoftAccount, PersonalMicrosoftAccount
     */
    signInAudience?: pulumi.Input<string>;
    /**
     * Comma-separated strings of Azure tags to attach to an application.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Human-friendly description of the mount for the backend.
     */
    ttl?: pulumi.Input<string>;
}
