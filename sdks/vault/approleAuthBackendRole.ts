// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ApproleAuthBackendRole extends pulumi.CustomResource {
    /**
     * Get an existing ApproleAuthBackendRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApproleAuthBackendRoleState, opts?: pulumi.CustomResourceOptions): ApproleAuthBackendRole {
        return new ApproleAuthBackendRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:index/approleAuthBackendRole:ApproleAuthBackendRole';

    /**
     * Returns true if the given object is an instance of ApproleAuthBackendRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApproleAuthBackendRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApproleAuthBackendRole.__pulumiType;
    }

    /**
     * Unique name of the auth backend to configure.
     */
    public readonly backend!: pulumi.Output<string | undefined>;
    /**
     * Whether or not to require secret_id to be present when logging in using this AppRole.
     */
    public readonly bindSecretId!: pulumi.Output<boolean | undefined>;
    /**
     * Target namespace. (requires Enterprise)
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * The RoleID of the role. Autogenerated if not set.
     */
    public readonly roleId!: pulumi.Output<string>;
    /**
     * Name of the role.
     */
    public readonly roleName!: pulumi.Output<string>;
    /**
     * List of CIDR blocks that can log in using the AppRole.
     */
    public readonly secretIdBoundCidrs!: pulumi.Output<string[] | undefined>;
    /**
     * Number of times which a particular SecretID can be used to fetch a token from this AppRole, after which the SecretID
     * will expire. Leaving this unset or setting it to 0 will allow unlimited uses.
     */
    public readonly secretIdNumUses!: pulumi.Output<number | undefined>;
    /**
     * Number of seconds a SecretID remains valid for.
     */
    public readonly secretIdTtl!: pulumi.Output<number | undefined>;
    /**
     * Specifies the blocks of IP addresses which are allowed to use the generated token
     */
    public readonly tokenBoundCidrs!: pulumi.Output<string[] | undefined>;
    /**
     * Generated Token's Explicit Maximum TTL in seconds
     */
    public readonly tokenExplicitMaxTtl!: pulumi.Output<number | undefined>;
    /**
     * The maximum lifetime of the generated token
     */
    public readonly tokenMaxTtl!: pulumi.Output<number | undefined>;
    /**
     * If true, the 'default' policy will not automatically be added to generated tokens
     */
    public readonly tokenNoDefaultPolicy!: pulumi.Output<boolean | undefined>;
    /**
     * The maximum number of times a token may be used, a value of zero means unlimited
     */
    public readonly tokenNumUses!: pulumi.Output<number | undefined>;
    /**
     * Generated Token's Period
     */
    public readonly tokenPeriod!: pulumi.Output<number | undefined>;
    /**
     * Generated Token's Policies
     */
    public readonly tokenPolicies!: pulumi.Output<string[] | undefined>;
    /**
     * The initial ttl of the token to generate in seconds
     */
    public readonly tokenTtl!: pulumi.Output<number | undefined>;
    /**
     * The type of token to generate, service or batch
     */
    public readonly tokenType!: pulumi.Output<string | undefined>;

    /**
     * Create a ApproleAuthBackendRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApproleAuthBackendRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApproleAuthBackendRoleArgs | ApproleAuthBackendRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApproleAuthBackendRoleState | undefined;
            resourceInputs["backend"] = state ? state.backend : undefined;
            resourceInputs["bindSecretId"] = state ? state.bindSecretId : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["roleId"] = state ? state.roleId : undefined;
            resourceInputs["roleName"] = state ? state.roleName : undefined;
            resourceInputs["secretIdBoundCidrs"] = state ? state.secretIdBoundCidrs : undefined;
            resourceInputs["secretIdNumUses"] = state ? state.secretIdNumUses : undefined;
            resourceInputs["secretIdTtl"] = state ? state.secretIdTtl : undefined;
            resourceInputs["tokenBoundCidrs"] = state ? state.tokenBoundCidrs : undefined;
            resourceInputs["tokenExplicitMaxTtl"] = state ? state.tokenExplicitMaxTtl : undefined;
            resourceInputs["tokenMaxTtl"] = state ? state.tokenMaxTtl : undefined;
            resourceInputs["tokenNoDefaultPolicy"] = state ? state.tokenNoDefaultPolicy : undefined;
            resourceInputs["tokenNumUses"] = state ? state.tokenNumUses : undefined;
            resourceInputs["tokenPeriod"] = state ? state.tokenPeriod : undefined;
            resourceInputs["tokenPolicies"] = state ? state.tokenPolicies : undefined;
            resourceInputs["tokenTtl"] = state ? state.tokenTtl : undefined;
            resourceInputs["tokenType"] = state ? state.tokenType : undefined;
        } else {
            const args = argsOrState as ApproleAuthBackendRoleArgs | undefined;
            if ((!args || args.roleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleName'");
            }
            resourceInputs["backend"] = args ? args.backend : undefined;
            resourceInputs["bindSecretId"] = args ? args.bindSecretId : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["roleId"] = args ? args.roleId : undefined;
            resourceInputs["roleName"] = args ? args.roleName : undefined;
            resourceInputs["secretIdBoundCidrs"] = args ? args.secretIdBoundCidrs : undefined;
            resourceInputs["secretIdNumUses"] = args ? args.secretIdNumUses : undefined;
            resourceInputs["secretIdTtl"] = args ? args.secretIdTtl : undefined;
            resourceInputs["tokenBoundCidrs"] = args ? args.tokenBoundCidrs : undefined;
            resourceInputs["tokenExplicitMaxTtl"] = args ? args.tokenExplicitMaxTtl : undefined;
            resourceInputs["tokenMaxTtl"] = args ? args.tokenMaxTtl : undefined;
            resourceInputs["tokenNoDefaultPolicy"] = args ? args.tokenNoDefaultPolicy : undefined;
            resourceInputs["tokenNumUses"] = args ? args.tokenNumUses : undefined;
            resourceInputs["tokenPeriod"] = args ? args.tokenPeriod : undefined;
            resourceInputs["tokenPolicies"] = args ? args.tokenPolicies : undefined;
            resourceInputs["tokenTtl"] = args ? args.tokenTtl : undefined;
            resourceInputs["tokenType"] = args ? args.tokenType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApproleAuthBackendRole.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ApproleAuthBackendRole resources.
 */
export interface ApproleAuthBackendRoleState {
    /**
     * Unique name of the auth backend to configure.
     */
    backend?: pulumi.Input<string>;
    /**
     * Whether or not to require secret_id to be present when logging in using this AppRole.
     */
    bindSecretId?: pulumi.Input<boolean>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * The RoleID of the role. Autogenerated if not set.
     */
    roleId?: pulumi.Input<string>;
    /**
     * Name of the role.
     */
    roleName?: pulumi.Input<string>;
    /**
     * List of CIDR blocks that can log in using the AppRole.
     */
    secretIdBoundCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Number of times which a particular SecretID can be used to fetch a token from this AppRole, after which the SecretID
     * will expire. Leaving this unset or setting it to 0 will allow unlimited uses.
     */
    secretIdNumUses?: pulumi.Input<number>;
    /**
     * Number of seconds a SecretID remains valid for.
     */
    secretIdTtl?: pulumi.Input<number>;
    /**
     * Specifies the blocks of IP addresses which are allowed to use the generated token
     */
    tokenBoundCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Generated Token's Explicit Maximum TTL in seconds
     */
    tokenExplicitMaxTtl?: pulumi.Input<number>;
    /**
     * The maximum lifetime of the generated token
     */
    tokenMaxTtl?: pulumi.Input<number>;
    /**
     * If true, the 'default' policy will not automatically be added to generated tokens
     */
    tokenNoDefaultPolicy?: pulumi.Input<boolean>;
    /**
     * The maximum number of times a token may be used, a value of zero means unlimited
     */
    tokenNumUses?: pulumi.Input<number>;
    /**
     * Generated Token's Period
     */
    tokenPeriod?: pulumi.Input<number>;
    /**
     * Generated Token's Policies
     */
    tokenPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The initial ttl of the token to generate in seconds
     */
    tokenTtl?: pulumi.Input<number>;
    /**
     * The type of token to generate, service or batch
     */
    tokenType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApproleAuthBackendRole resource.
 */
export interface ApproleAuthBackendRoleArgs {
    /**
     * Unique name of the auth backend to configure.
     */
    backend?: pulumi.Input<string>;
    /**
     * Whether or not to require secret_id to be present when logging in using this AppRole.
     */
    bindSecretId?: pulumi.Input<boolean>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * The RoleID of the role. Autogenerated if not set.
     */
    roleId?: pulumi.Input<string>;
    /**
     * Name of the role.
     */
    roleName: pulumi.Input<string>;
    /**
     * List of CIDR blocks that can log in using the AppRole.
     */
    secretIdBoundCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Number of times which a particular SecretID can be used to fetch a token from this AppRole, after which the SecretID
     * will expire. Leaving this unset or setting it to 0 will allow unlimited uses.
     */
    secretIdNumUses?: pulumi.Input<number>;
    /**
     * Number of seconds a SecretID remains valid for.
     */
    secretIdTtl?: pulumi.Input<number>;
    /**
     * Specifies the blocks of IP addresses which are allowed to use the generated token
     */
    tokenBoundCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Generated Token's Explicit Maximum TTL in seconds
     */
    tokenExplicitMaxTtl?: pulumi.Input<number>;
    /**
     * The maximum lifetime of the generated token
     */
    tokenMaxTtl?: pulumi.Input<number>;
    /**
     * If true, the 'default' policy will not automatically be added to generated tokens
     */
    tokenNoDefaultPolicy?: pulumi.Input<boolean>;
    /**
     * The maximum number of times a token may be used, a value of zero means unlimited
     */
    tokenNumUses?: pulumi.Input<number>;
    /**
     * Generated Token's Period
     */
    tokenPeriod?: pulumi.Input<number>;
    /**
     * Generated Token's Policies
     */
    tokenPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The initial ttl of the token to generate in seconds
     */
    tokenTtl?: pulumi.Input<number>;
    /**
     * The type of token to generate, service or batch
     */
    tokenType?: pulumi.Input<string>;
}
