// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GcpAuthBackend extends pulumi.CustomResource {
    /**
     * Get an existing GcpAuthBackend resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GcpAuthBackendState, opts?: pulumi.CustomResourceOptions): GcpAuthBackend {
        return new GcpAuthBackend(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:index/gcpAuthBackend:GcpAuthBackend';

    /**
     * Returns true if the given object is an instance of GcpAuthBackend.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GcpAuthBackend {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GcpAuthBackend.__pulumiType;
    }

    /**
     * The accessor of the auth backend
     */
    public /*out*/ readonly accessor!: pulumi.Output<string>;
    public readonly clientEmail!: pulumi.Output<string>;
    public readonly clientId!: pulumi.Output<string>;
    public readonly credentials!: pulumi.Output<string | undefined>;
    /**
     * Specifies overrides to service endpoints used when making API requests to GCP.
     */
    public readonly customEndpoint!: pulumi.Output<outputs.GcpAuthBackendCustomEndpoint | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * If set, opts out of mount migration on path updates.
     */
    public readonly disableRemount!: pulumi.Output<boolean | undefined>;
    /**
     * The audience claim value for plugin identity tokens.
     */
    public readonly identityTokenAudience!: pulumi.Output<string | undefined>;
    /**
     * The key to use for signing identity tokens.
     */
    public readonly identityTokenKey!: pulumi.Output<string | undefined>;
    /**
     * The TTL of generated tokens.
     */
    public readonly identityTokenTtl!: pulumi.Output<number | undefined>;
    /**
     * Specifies if the auth method is local only
     */
    public readonly local!: pulumi.Output<boolean | undefined>;
    /**
     * Target namespace. (requires Enterprise)
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    public readonly path!: pulumi.Output<string | undefined>;
    public readonly privateKeyId!: pulumi.Output<string>;
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Service Account to impersonate for plugin workload identity federation.
     */
    public readonly serviceAccountEmail!: pulumi.Output<string | undefined>;
    public readonly tunes!: pulumi.Output<outputs.GcpAuthBackendTune[]>;

    /**
     * Create a GcpAuthBackend resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: GcpAuthBackendArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GcpAuthBackendArgs | GcpAuthBackendState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GcpAuthBackendState | undefined;
            resourceInputs["accessor"] = state ? state.accessor : undefined;
            resourceInputs["clientEmail"] = state ? state.clientEmail : undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["credentials"] = state ? state.credentials : undefined;
            resourceInputs["customEndpoint"] = state ? state.customEndpoint : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disableRemount"] = state ? state.disableRemount : undefined;
            resourceInputs["identityTokenAudience"] = state ? state.identityTokenAudience : undefined;
            resourceInputs["identityTokenKey"] = state ? state.identityTokenKey : undefined;
            resourceInputs["identityTokenTtl"] = state ? state.identityTokenTtl : undefined;
            resourceInputs["local"] = state ? state.local : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["privateKeyId"] = state ? state.privateKeyId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["serviceAccountEmail"] = state ? state.serviceAccountEmail : undefined;
            resourceInputs["tunes"] = state ? state.tunes : undefined;
        } else {
            const args = argsOrState as GcpAuthBackendArgs | undefined;
            resourceInputs["clientEmail"] = args ? args.clientEmail : undefined;
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["credentials"] = args?.credentials ? pulumi.secret(args.credentials) : undefined;
            resourceInputs["customEndpoint"] = args ? args.customEndpoint : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disableRemount"] = args ? args.disableRemount : undefined;
            resourceInputs["identityTokenAudience"] = args ? args.identityTokenAudience : undefined;
            resourceInputs["identityTokenKey"] = args ? args.identityTokenKey : undefined;
            resourceInputs["identityTokenTtl"] = args ? args.identityTokenTtl : undefined;
            resourceInputs["local"] = args ? args.local : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["privateKeyId"] = args ? args.privateKeyId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["serviceAccountEmail"] = args ? args.serviceAccountEmail : undefined;
            resourceInputs["tunes"] = args ? args.tunes : undefined;
            resourceInputs["accessor"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["credentials"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(GcpAuthBackend.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GcpAuthBackend resources.
 */
export interface GcpAuthBackendState {
    /**
     * The accessor of the auth backend
     */
    accessor?: pulumi.Input<string>;
    clientEmail?: pulumi.Input<string>;
    clientId?: pulumi.Input<string>;
    credentials?: pulumi.Input<string>;
    /**
     * Specifies overrides to service endpoints used when making API requests to GCP.
     */
    customEndpoint?: pulumi.Input<inputs.GcpAuthBackendCustomEndpoint>;
    description?: pulumi.Input<string>;
    /**
     * If set, opts out of mount migration on path updates.
     */
    disableRemount?: pulumi.Input<boolean>;
    /**
     * The audience claim value for plugin identity tokens.
     */
    identityTokenAudience?: pulumi.Input<string>;
    /**
     * The key to use for signing identity tokens.
     */
    identityTokenKey?: pulumi.Input<string>;
    /**
     * The TTL of generated tokens.
     */
    identityTokenTtl?: pulumi.Input<number>;
    /**
     * Specifies if the auth method is local only
     */
    local?: pulumi.Input<boolean>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    privateKeyId?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    /**
     * Service Account to impersonate for plugin workload identity federation.
     */
    serviceAccountEmail?: pulumi.Input<string>;
    tunes?: pulumi.Input<pulumi.Input<inputs.GcpAuthBackendTune>[]>;
}

/**
 * The set of arguments for constructing a GcpAuthBackend resource.
 */
export interface GcpAuthBackendArgs {
    clientEmail?: pulumi.Input<string>;
    clientId?: pulumi.Input<string>;
    credentials?: pulumi.Input<string>;
    /**
     * Specifies overrides to service endpoints used when making API requests to GCP.
     */
    customEndpoint?: pulumi.Input<inputs.GcpAuthBackendCustomEndpoint>;
    description?: pulumi.Input<string>;
    /**
     * If set, opts out of mount migration on path updates.
     */
    disableRemount?: pulumi.Input<boolean>;
    /**
     * The audience claim value for plugin identity tokens.
     */
    identityTokenAudience?: pulumi.Input<string>;
    /**
     * The key to use for signing identity tokens.
     */
    identityTokenKey?: pulumi.Input<string>;
    /**
     * The TTL of generated tokens.
     */
    identityTokenTtl?: pulumi.Input<number>;
    /**
     * Specifies if the auth method is local only
     */
    local?: pulumi.Input<boolean>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    privateKeyId?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    /**
     * Service Account to impersonate for plugin workload identity federation.
     */
    serviceAccountEmail?: pulumi.Input<string>;
    tunes?: pulumi.Input<pulumi.Input<inputs.GcpAuthBackendTune>[]>;
}
