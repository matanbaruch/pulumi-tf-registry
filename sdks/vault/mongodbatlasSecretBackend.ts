// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class MongodbatlasSecretBackend extends pulumi.CustomResource {
    /**
     * Get an existing MongodbatlasSecretBackend resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MongodbatlasSecretBackendState, opts?: pulumi.CustomResourceOptions): MongodbatlasSecretBackend {
        return new MongodbatlasSecretBackend(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:index/mongodbatlasSecretBackend:MongodbatlasSecretBackend';

    /**
     * Returns true if the given object is an instance of MongodbatlasSecretBackend.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MongodbatlasSecretBackend {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MongodbatlasSecretBackend.__pulumiType;
    }

    /**
     * Path where MongoDB Atlas secret backend is mounted
     */
    public readonly mount!: pulumi.Output<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * Path where MongoDB Atlas configuration is located
     */
    public /*out*/ readonly path!: pulumi.Output<string>;
    /**
     * The Private Programmatic API Key used to connect with MongoDB Atlas API
     */
    public readonly privateKey!: pulumi.Output<string>;
    /**
     * The Public Programmatic API Key used to authenticate with the MongoDB Atlas API
     */
    public readonly publicKey!: pulumi.Output<string>;

    /**
     * Create a MongodbatlasSecretBackend resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MongodbatlasSecretBackendArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MongodbatlasSecretBackendArgs | MongodbatlasSecretBackendState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MongodbatlasSecretBackendState | undefined;
            resourceInputs["mount"] = state ? state.mount : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["publicKey"] = state ? state.publicKey : undefined;
        } else {
            const args = argsOrState as MongodbatlasSecretBackendArgs | undefined;
            if ((!args || args.mount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mount'");
            }
            if ((!args || args.privateKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'privateKey'");
            }
            if ((!args || args.publicKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'publicKey'");
            }
            resourceInputs["mount"] = args ? args.mount : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["privateKey"] = args ? args.privateKey : undefined;
            resourceInputs["publicKey"] = args ? args.publicKey : undefined;
            resourceInputs["path"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MongodbatlasSecretBackend.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MongodbatlasSecretBackend resources.
 */
export interface MongodbatlasSecretBackendState {
    /**
     * Path where MongoDB Atlas secret backend is mounted
     */
    mount?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Path where MongoDB Atlas configuration is located
     */
    path?: pulumi.Input<string>;
    /**
     * The Private Programmatic API Key used to connect with MongoDB Atlas API
     */
    privateKey?: pulumi.Input<string>;
    /**
     * The Public Programmatic API Key used to authenticate with the MongoDB Atlas API
     */
    publicKey?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MongodbatlasSecretBackend resource.
 */
export interface MongodbatlasSecretBackendArgs {
    /**
     * Path where MongoDB Atlas secret backend is mounted
     */
    mount: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * The Private Programmatic API Key used to connect with MongoDB Atlas API
     */
    privateKey: pulumi.Input<string>;
    /**
     * The Public Programmatic API Key used to authenticate with the MongoDB Atlas API
     */
    publicKey: pulumi.Input<string>;
}
