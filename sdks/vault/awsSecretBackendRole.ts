// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AwsSecretBackendRole extends pulumi.CustomResource {
    /**
     * Get an existing AwsSecretBackendRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AwsSecretBackendRoleState, opts?: pulumi.CustomResourceOptions): AwsSecretBackendRole {
        return new AwsSecretBackendRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:index/awsSecretBackendRole:AwsSecretBackendRole';

    /**
     * Returns true if the given object is an instance of AwsSecretBackendRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AwsSecretBackendRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AwsSecretBackendRole.__pulumiType;
    }

    /**
     * The path of the AWS Secret Backend the role belongs to.
     */
    public readonly backend!: pulumi.Output<string>;
    /**
     * Role credential type.
     */
    public readonly credentialType!: pulumi.Output<string>;
    /**
     * The default TTL in seconds for STS credentials. When a TTL is not specified when STS credentials are requested, and a
     * default TTL is specified on the role, then this default TTL will be used. Valid only when credential_type is one of
     * assumed_role or federation_token.
     */
    public readonly defaultStsTtl!: pulumi.Output<number>;
    /**
     * External ID to set for assume role creds.
     */
    public readonly externalId!: pulumi.Output<string | undefined>;
    /**
     * A list of IAM group names. IAM users generated against this vault role will be added to these IAM Groups. For a
     * credential type of assumed_role or federation_token, the policies sent to the corresponding AWS call (sts:AssumeRole or
     * sts:GetFederation) will be the policies from each group in iam_groups combined with the policy_document and policy_arns
     * parameters.
     */
    public readonly iamGroups!: pulumi.Output<string[] | undefined>;
    /**
     * A map of strings representing key/value pairs used as tags for any IAM user created by this role.
     */
    public readonly iamTags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The max allowed TTL in seconds for STS credentials (credentials TTL are capped to max_sts_ttl). Valid only when
     * credential_type is one of assumed_role or federation_token.
     */
    public readonly maxStsTtl!: pulumi.Output<number>;
    /**
     * Unique name for the role.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * The ARN of the AWS Permissions Boundary to attach to IAM users created in the role. Valid only when credential_type is
     * iam_user. If not specified, then no permissions boundary policy will be attached.
     */
    public readonly permissionsBoundaryArn!: pulumi.Output<string | undefined>;
    /**
     * ARN for an existing IAM policy the role should use.
     */
    public readonly policyArns!: pulumi.Output<string[] | undefined>;
    /**
     * IAM policy the role should use in JSON format.
     */
    public readonly policyDocument!: pulumi.Output<string | undefined>;
    /**
     * ARNs of AWS roles allowed to be assumed. Only valid when credential_type is 'assumed_role'
     */
    public readonly roleArns!: pulumi.Output<string[] | undefined>;
    /**
     * Session tags to be set for assume role creds created.
     */
    public readonly sessionTags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The path for the user name. Valid only when credential_type is iam_user. Default is /
     */
    public readonly userPath!: pulumi.Output<string | undefined>;

    /**
     * Create a AwsSecretBackendRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AwsSecretBackendRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AwsSecretBackendRoleArgs | AwsSecretBackendRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AwsSecretBackendRoleState | undefined;
            resourceInputs["backend"] = state ? state.backend : undefined;
            resourceInputs["credentialType"] = state ? state.credentialType : undefined;
            resourceInputs["defaultStsTtl"] = state ? state.defaultStsTtl : undefined;
            resourceInputs["externalId"] = state ? state.externalId : undefined;
            resourceInputs["iamGroups"] = state ? state.iamGroups : undefined;
            resourceInputs["iamTags"] = state ? state.iamTags : undefined;
            resourceInputs["maxStsTtl"] = state ? state.maxStsTtl : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["permissionsBoundaryArn"] = state ? state.permissionsBoundaryArn : undefined;
            resourceInputs["policyArns"] = state ? state.policyArns : undefined;
            resourceInputs["policyDocument"] = state ? state.policyDocument : undefined;
            resourceInputs["roleArns"] = state ? state.roleArns : undefined;
            resourceInputs["sessionTags"] = state ? state.sessionTags : undefined;
            resourceInputs["userPath"] = state ? state.userPath : undefined;
        } else {
            const args = argsOrState as AwsSecretBackendRoleArgs | undefined;
            if ((!args || args.backend === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backend'");
            }
            if ((!args || args.credentialType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'credentialType'");
            }
            resourceInputs["backend"] = args ? args.backend : undefined;
            resourceInputs["credentialType"] = args ? args.credentialType : undefined;
            resourceInputs["defaultStsTtl"] = args ? args.defaultStsTtl : undefined;
            resourceInputs["externalId"] = args ? args.externalId : undefined;
            resourceInputs["iamGroups"] = args ? args.iamGroups : undefined;
            resourceInputs["iamTags"] = args ? args.iamTags : undefined;
            resourceInputs["maxStsTtl"] = args ? args.maxStsTtl : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["permissionsBoundaryArn"] = args ? args.permissionsBoundaryArn : undefined;
            resourceInputs["policyArns"] = args ? args.policyArns : undefined;
            resourceInputs["policyDocument"] = args ? args.policyDocument : undefined;
            resourceInputs["roleArns"] = args ? args.roleArns : undefined;
            resourceInputs["sessionTags"] = args ? args.sessionTags : undefined;
            resourceInputs["userPath"] = args ? args.userPath : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AwsSecretBackendRole.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AwsSecretBackendRole resources.
 */
export interface AwsSecretBackendRoleState {
    /**
     * The path of the AWS Secret Backend the role belongs to.
     */
    backend?: pulumi.Input<string>;
    /**
     * Role credential type.
     */
    credentialType?: pulumi.Input<string>;
    /**
     * The default TTL in seconds for STS credentials. When a TTL is not specified when STS credentials are requested, and a
     * default TTL is specified on the role, then this default TTL will be used. Valid only when credential_type is one of
     * assumed_role or federation_token.
     */
    defaultStsTtl?: pulumi.Input<number>;
    /**
     * External ID to set for assume role creds.
     */
    externalId?: pulumi.Input<string>;
    /**
     * A list of IAM group names. IAM users generated against this vault role will be added to these IAM Groups. For a
     * credential type of assumed_role or federation_token, the policies sent to the corresponding AWS call (sts:AssumeRole or
     * sts:GetFederation) will be the policies from each group in iam_groups combined with the policy_document and policy_arns
     * parameters.
     */
    iamGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A map of strings representing key/value pairs used as tags for any IAM user created by this role.
     */
    iamTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The max allowed TTL in seconds for STS credentials (credentials TTL are capped to max_sts_ttl). Valid only when
     * credential_type is one of assumed_role or federation_token.
     */
    maxStsTtl?: pulumi.Input<number>;
    /**
     * Unique name for the role.
     */
    name?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * The ARN of the AWS Permissions Boundary to attach to IAM users created in the role. Valid only when credential_type is
     * iam_user. If not specified, then no permissions boundary policy will be attached.
     */
    permissionsBoundaryArn?: pulumi.Input<string>;
    /**
     * ARN for an existing IAM policy the role should use.
     */
    policyArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * IAM policy the role should use in JSON format.
     */
    policyDocument?: pulumi.Input<string>;
    /**
     * ARNs of AWS roles allowed to be assumed. Only valid when credential_type is 'assumed_role'
     */
    roleArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Session tags to be set for assume role creds created.
     */
    sessionTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The path for the user name. Valid only when credential_type is iam_user. Default is /
     */
    userPath?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AwsSecretBackendRole resource.
 */
export interface AwsSecretBackendRoleArgs {
    /**
     * The path of the AWS Secret Backend the role belongs to.
     */
    backend: pulumi.Input<string>;
    /**
     * Role credential type.
     */
    credentialType: pulumi.Input<string>;
    /**
     * The default TTL in seconds for STS credentials. When a TTL is not specified when STS credentials are requested, and a
     * default TTL is specified on the role, then this default TTL will be used. Valid only when credential_type is one of
     * assumed_role or federation_token.
     */
    defaultStsTtl?: pulumi.Input<number>;
    /**
     * External ID to set for assume role creds.
     */
    externalId?: pulumi.Input<string>;
    /**
     * A list of IAM group names. IAM users generated against this vault role will be added to these IAM Groups. For a
     * credential type of assumed_role or federation_token, the policies sent to the corresponding AWS call (sts:AssumeRole or
     * sts:GetFederation) will be the policies from each group in iam_groups combined with the policy_document and policy_arns
     * parameters.
     */
    iamGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A map of strings representing key/value pairs used as tags for any IAM user created by this role.
     */
    iamTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The max allowed TTL in seconds for STS credentials (credentials TTL are capped to max_sts_ttl). Valid only when
     * credential_type is one of assumed_role or federation_token.
     */
    maxStsTtl?: pulumi.Input<number>;
    /**
     * Unique name for the role.
     */
    name?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * The ARN of the AWS Permissions Boundary to attach to IAM users created in the role. Valid only when credential_type is
     * iam_user. If not specified, then no permissions boundary policy will be attached.
     */
    permissionsBoundaryArn?: pulumi.Input<string>;
    /**
     * ARN for an existing IAM policy the role should use.
     */
    policyArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * IAM policy the role should use in JSON format.
     */
    policyDocument?: pulumi.Input<string>;
    /**
     * ARNs of AWS roles allowed to be assumed. Only valid when credential_type is 'assumed_role'
     */
    roleArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Session tags to be set for assume role creds created.
     */
    sessionTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The path for the user name. Valid only when credential_type is iam_user. Default is /
     */
    userPath?: pulumi.Input<string>;
}
