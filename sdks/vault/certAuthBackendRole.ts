// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CertAuthBackendRole extends pulumi.CustomResource {
    /**
     * Get an existing CertAuthBackendRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CertAuthBackendRoleState, opts?: pulumi.CustomResourceOptions): CertAuthBackendRole {
        return new CertAuthBackendRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vault:index/certAuthBackendRole:CertAuthBackendRole';

    /**
     * Returns true if the given object is an instance of CertAuthBackendRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CertAuthBackendRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CertAuthBackendRole.__pulumiType;
    }

    public readonly allowedCommonNames!: pulumi.Output<string[]>;
    public readonly allowedDnsSans!: pulumi.Output<string[]>;
    public readonly allowedEmailSans!: pulumi.Output<string[]>;
    public readonly allowedNames!: pulumi.Output<string[]>;
    public readonly allowedOrganizationalUnits!: pulumi.Output<string[] | undefined>;
    public readonly allowedUriSans!: pulumi.Output<string[]>;
    public readonly backend!: pulumi.Output<string | undefined>;
    public readonly certificate!: pulumi.Output<string>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * Any additional CA certificates needed to verify OCSP responses. Provided as base64 encoded PEM data.
     */
    public readonly ocspCaCertificates!: pulumi.Output<string | undefined>;
    /**
     * If enabled, validate certificates' revocation status using OCSP.
     */
    public readonly ocspEnabled!: pulumi.Output<boolean>;
    /**
     * If true and an OCSP response cannot be fetched or is of an unknown status, the login will proceed as if the certificate
     * has not been revoked.
     */
    public readonly ocspFailOpen!: pulumi.Output<boolean>;
    /**
     * If set to true, rather than accepting the first successful OCSP response, query all servers and consider the certificate
     * valid only if all servers agree.
     */
    public readonly ocspQueryAllServers!: pulumi.Output<boolean>;
    /**
     * A comma-separated list of OCSP server addresses. If unset, the OCSP server is determined from the
     * AuthorityInformationAccess extension on the certificate being inspected.
     */
    public readonly ocspServersOverrides!: pulumi.Output<string[] | undefined>;
    public readonly requiredExtensions!: pulumi.Output<string[]>;
    /**
     * Specifies the blocks of IP addresses which are allowed to use the generated token
     */
    public readonly tokenBoundCidrs!: pulumi.Output<string[] | undefined>;
    /**
     * Generated Token's Explicit Maximum TTL in seconds
     */
    public readonly tokenExplicitMaxTtl!: pulumi.Output<number | undefined>;
    /**
     * The maximum lifetime of the generated token
     */
    public readonly tokenMaxTtl!: pulumi.Output<number | undefined>;
    /**
     * If true, the 'default' policy will not automatically be added to generated tokens
     */
    public readonly tokenNoDefaultPolicy!: pulumi.Output<boolean | undefined>;
    /**
     * The maximum number of times a token may be used, a value of zero means unlimited
     */
    public readonly tokenNumUses!: pulumi.Output<number | undefined>;
    /**
     * Generated Token's Period
     */
    public readonly tokenPeriod!: pulumi.Output<number | undefined>;
    /**
     * Generated Token's Policies
     */
    public readonly tokenPolicies!: pulumi.Output<string[] | undefined>;
    /**
     * The initial ttl of the token to generate in seconds
     */
    public readonly tokenTtl!: pulumi.Output<number | undefined>;
    /**
     * The type of token to generate, service or batch
     */
    public readonly tokenType!: pulumi.Output<string | undefined>;

    /**
     * Create a CertAuthBackendRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertAuthBackendRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CertAuthBackendRoleArgs | CertAuthBackendRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CertAuthBackendRoleState | undefined;
            resourceInputs["allowedCommonNames"] = state ? state.allowedCommonNames : undefined;
            resourceInputs["allowedDnsSans"] = state ? state.allowedDnsSans : undefined;
            resourceInputs["allowedEmailSans"] = state ? state.allowedEmailSans : undefined;
            resourceInputs["allowedNames"] = state ? state.allowedNames : undefined;
            resourceInputs["allowedOrganizationalUnits"] = state ? state.allowedOrganizationalUnits : undefined;
            resourceInputs["allowedUriSans"] = state ? state.allowedUriSans : undefined;
            resourceInputs["backend"] = state ? state.backend : undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["ocspCaCertificates"] = state ? state.ocspCaCertificates : undefined;
            resourceInputs["ocspEnabled"] = state ? state.ocspEnabled : undefined;
            resourceInputs["ocspFailOpen"] = state ? state.ocspFailOpen : undefined;
            resourceInputs["ocspQueryAllServers"] = state ? state.ocspQueryAllServers : undefined;
            resourceInputs["ocspServersOverrides"] = state ? state.ocspServersOverrides : undefined;
            resourceInputs["requiredExtensions"] = state ? state.requiredExtensions : undefined;
            resourceInputs["tokenBoundCidrs"] = state ? state.tokenBoundCidrs : undefined;
            resourceInputs["tokenExplicitMaxTtl"] = state ? state.tokenExplicitMaxTtl : undefined;
            resourceInputs["tokenMaxTtl"] = state ? state.tokenMaxTtl : undefined;
            resourceInputs["tokenNoDefaultPolicy"] = state ? state.tokenNoDefaultPolicy : undefined;
            resourceInputs["tokenNumUses"] = state ? state.tokenNumUses : undefined;
            resourceInputs["tokenPeriod"] = state ? state.tokenPeriod : undefined;
            resourceInputs["tokenPolicies"] = state ? state.tokenPolicies : undefined;
            resourceInputs["tokenTtl"] = state ? state.tokenTtl : undefined;
            resourceInputs["tokenType"] = state ? state.tokenType : undefined;
        } else {
            const args = argsOrState as CertAuthBackendRoleArgs | undefined;
            if ((!args || args.certificate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificate'");
            }
            resourceInputs["allowedCommonNames"] = args ? args.allowedCommonNames : undefined;
            resourceInputs["allowedDnsSans"] = args ? args.allowedDnsSans : undefined;
            resourceInputs["allowedEmailSans"] = args ? args.allowedEmailSans : undefined;
            resourceInputs["allowedNames"] = args ? args.allowedNames : undefined;
            resourceInputs["allowedOrganizationalUnits"] = args ? args.allowedOrganizationalUnits : undefined;
            resourceInputs["allowedUriSans"] = args ? args.allowedUriSans : undefined;
            resourceInputs["backend"] = args ? args.backend : undefined;
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["ocspCaCertificates"] = args ? args.ocspCaCertificates : undefined;
            resourceInputs["ocspEnabled"] = args ? args.ocspEnabled : undefined;
            resourceInputs["ocspFailOpen"] = args ? args.ocspFailOpen : undefined;
            resourceInputs["ocspQueryAllServers"] = args ? args.ocspQueryAllServers : undefined;
            resourceInputs["ocspServersOverrides"] = args ? args.ocspServersOverrides : undefined;
            resourceInputs["requiredExtensions"] = args ? args.requiredExtensions : undefined;
            resourceInputs["tokenBoundCidrs"] = args ? args.tokenBoundCidrs : undefined;
            resourceInputs["tokenExplicitMaxTtl"] = args ? args.tokenExplicitMaxTtl : undefined;
            resourceInputs["tokenMaxTtl"] = args ? args.tokenMaxTtl : undefined;
            resourceInputs["tokenNoDefaultPolicy"] = args ? args.tokenNoDefaultPolicy : undefined;
            resourceInputs["tokenNumUses"] = args ? args.tokenNumUses : undefined;
            resourceInputs["tokenPeriod"] = args ? args.tokenPeriod : undefined;
            resourceInputs["tokenPolicies"] = args ? args.tokenPolicies : undefined;
            resourceInputs["tokenTtl"] = args ? args.tokenTtl : undefined;
            resourceInputs["tokenType"] = args ? args.tokenType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CertAuthBackendRole.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CertAuthBackendRole resources.
 */
export interface CertAuthBackendRoleState {
    allowedCommonNames?: pulumi.Input<pulumi.Input<string>[]>;
    allowedDnsSans?: pulumi.Input<pulumi.Input<string>[]>;
    allowedEmailSans?: pulumi.Input<pulumi.Input<string>[]>;
    allowedNames?: pulumi.Input<pulumi.Input<string>[]>;
    allowedOrganizationalUnits?: pulumi.Input<pulumi.Input<string>[]>;
    allowedUriSans?: pulumi.Input<pulumi.Input<string>[]>;
    backend?: pulumi.Input<string>;
    certificate?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Any additional CA certificates needed to verify OCSP responses. Provided as base64 encoded PEM data.
     */
    ocspCaCertificates?: pulumi.Input<string>;
    /**
     * If enabled, validate certificates' revocation status using OCSP.
     */
    ocspEnabled?: pulumi.Input<boolean>;
    /**
     * If true and an OCSP response cannot be fetched or is of an unknown status, the login will proceed as if the certificate
     * has not been revoked.
     */
    ocspFailOpen?: pulumi.Input<boolean>;
    /**
     * If set to true, rather than accepting the first successful OCSP response, query all servers and consider the certificate
     * valid only if all servers agree.
     */
    ocspQueryAllServers?: pulumi.Input<boolean>;
    /**
     * A comma-separated list of OCSP server addresses. If unset, the OCSP server is determined from the
     * AuthorityInformationAccess extension on the certificate being inspected.
     */
    ocspServersOverrides?: pulumi.Input<pulumi.Input<string>[]>;
    requiredExtensions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the blocks of IP addresses which are allowed to use the generated token
     */
    tokenBoundCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Generated Token's Explicit Maximum TTL in seconds
     */
    tokenExplicitMaxTtl?: pulumi.Input<number>;
    /**
     * The maximum lifetime of the generated token
     */
    tokenMaxTtl?: pulumi.Input<number>;
    /**
     * If true, the 'default' policy will not automatically be added to generated tokens
     */
    tokenNoDefaultPolicy?: pulumi.Input<boolean>;
    /**
     * The maximum number of times a token may be used, a value of zero means unlimited
     */
    tokenNumUses?: pulumi.Input<number>;
    /**
     * Generated Token's Period
     */
    tokenPeriod?: pulumi.Input<number>;
    /**
     * Generated Token's Policies
     */
    tokenPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The initial ttl of the token to generate in seconds
     */
    tokenTtl?: pulumi.Input<number>;
    /**
     * The type of token to generate, service or batch
     */
    tokenType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CertAuthBackendRole resource.
 */
export interface CertAuthBackendRoleArgs {
    allowedCommonNames?: pulumi.Input<pulumi.Input<string>[]>;
    allowedDnsSans?: pulumi.Input<pulumi.Input<string>[]>;
    allowedEmailSans?: pulumi.Input<pulumi.Input<string>[]>;
    allowedNames?: pulumi.Input<pulumi.Input<string>[]>;
    allowedOrganizationalUnits?: pulumi.Input<pulumi.Input<string>[]>;
    allowedUriSans?: pulumi.Input<pulumi.Input<string>[]>;
    backend?: pulumi.Input<string>;
    certificate: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * Target namespace. (requires Enterprise)
     */
    namespace?: pulumi.Input<string>;
    /**
     * Any additional CA certificates needed to verify OCSP responses. Provided as base64 encoded PEM data.
     */
    ocspCaCertificates?: pulumi.Input<string>;
    /**
     * If enabled, validate certificates' revocation status using OCSP.
     */
    ocspEnabled?: pulumi.Input<boolean>;
    /**
     * If true and an OCSP response cannot be fetched or is of an unknown status, the login will proceed as if the certificate
     * has not been revoked.
     */
    ocspFailOpen?: pulumi.Input<boolean>;
    /**
     * If set to true, rather than accepting the first successful OCSP response, query all servers and consider the certificate
     * valid only if all servers agree.
     */
    ocspQueryAllServers?: pulumi.Input<boolean>;
    /**
     * A comma-separated list of OCSP server addresses. If unset, the OCSP server is determined from the
     * AuthorityInformationAccess extension on the certificate being inspected.
     */
    ocspServersOverrides?: pulumi.Input<pulumi.Input<string>[]>;
    requiredExtensions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the blocks of IP addresses which are allowed to use the generated token
     */
    tokenBoundCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Generated Token's Explicit Maximum TTL in seconds
     */
    tokenExplicitMaxTtl?: pulumi.Input<number>;
    /**
     * The maximum lifetime of the generated token
     */
    tokenMaxTtl?: pulumi.Input<number>;
    /**
     * If true, the 'default' policy will not automatically be added to generated tokens
     */
    tokenNoDefaultPolicy?: pulumi.Input<boolean>;
    /**
     * The maximum number of times a token may be used, a value of zero means unlimited
     */
    tokenNumUses?: pulumi.Input<number>;
    /**
     * Generated Token's Period
     */
    tokenPeriod?: pulumi.Input<number>;
    /**
     * Generated Token's Policies
     */
    tokenPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The initial ttl of the token to generate in seconds
     */
    tokenTtl?: pulumi.Input<number>;
    /**
     * The type of token to generate, service or batch
     */
    tokenType?: pulumi.Input<string>;
}
