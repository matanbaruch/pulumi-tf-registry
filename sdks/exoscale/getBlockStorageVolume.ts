// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getBlockStorageVolume(args: GetBlockStorageVolumeArgs, opts?: pulumi.InvokeOptions): Promise<GetBlockStorageVolumeResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("exoscale:index/getBlockStorageVolume:getBlockStorageVolume", {
        "id": args.id,
        "timeouts": args.timeouts,
        "zone": args.zone,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getBlockStorageVolume.
 */
export interface GetBlockStorageVolumeArgs {
    id: string;
    timeouts?: inputs.GetBlockStorageVolumeTimeouts;
    zone: string;
}

/**
 * A collection of values returned by getBlockStorageVolume.
 */
export interface GetBlockStorageVolumeResult {
    readonly blocksize: number;
    readonly createdAt: string;
    readonly id: string;
    readonly instance: outputs.GetBlockStorageVolumeInstance;
    readonly labels: {[key: string]: string};
    readonly name: string;
    readonly size: number;
    readonly snapshots: outputs.GetBlockStorageVolumeSnapshot[];
    readonly state: string;
    readonly timeouts?: outputs.GetBlockStorageVolumeTimeouts;
    readonly zone: string;
}
export function getBlockStorageVolumeOutput(args: GetBlockStorageVolumeOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetBlockStorageVolumeResult> {
    return pulumi.output(args).apply((a: any) => getBlockStorageVolume(a, opts))
}

/**
 * A collection of arguments for invoking getBlockStorageVolume.
 */
export interface GetBlockStorageVolumeOutputArgs {
    id: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GetBlockStorageVolumeTimeoutsArgs>;
    zone: pulumi.Input<string>;
}
