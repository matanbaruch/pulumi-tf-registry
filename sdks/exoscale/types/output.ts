// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AntiAffinityGroupTimeouts {
    create?: string;
    delete?: string;
    read?: string;
}

export interface BlockStorageVolumeSnapshotTarget {
    /**
     * Snapshot ID.
     */
    id?: string;
}

export interface BlockStorageVolumeSnapshotTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
     */
    read?: string;
}

export interface BlockStorageVolumeSnapshotVolume {
    /**
     * Snapshot ID.
     */
    id: string;
}

export interface BlockStorageVolumeTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
     */
    read?: string;
}

export interface ComputeInstanceNetworkInterface {
    /**
     * The IPv4 address to request as static DHCP lease if the network interface is attached to a *managed* private network.
     */
    ipAddress: string;
    /**
     * MAC address
     */
    macAddress: string;
    /**
     * The exoscale.PrivateNetwork (ID) to attach to the instance.
     */
    networkId: string;
}

export interface ComputeInstanceTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface DatabaseGrafana {
    /**
     * Grafana configuration settings in JSON format (`exo dbaas type show grafana --settings=grafana` for reference).
     */
    grafanaSettings: string;
    /**
     * A list of CIDR blocks to allow incoming connections from.
     */
    ipFilters: string[];
}

export interface DatabaseKafka {
    /**
     * Enable certificate-based authentication method.
     */
    enableCertAuth: boolean;
    /**
     * Enable Kafka Connect.
     */
    enableKafkaConnect: boolean;
    /**
     * Enable Kafka REST.
     */
    enableKafkaRest: boolean;
    /**
     * Enable SASL-based authentication method.
     */
    enableSaslAuth: boolean;
    /**
     * Enable Schema Registry.
     */
    enableSchemaRegistry: boolean;
    /**
     * A list of CIDR blocks to allow incoming connections from.
     */
    ipFilters: string[];
    /**
     * Kafka Connect configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka-connect` for reference).
     */
    kafkaConnectSettings: string;
    /**
     * Kafka REST configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka-rest` for reference).
     */
    kafkaRestSettings: string;
    /**
     * Kafka configuration settings in JSON format (`exo dbaas type show kafka --settings=kafka` for reference).
     */
    kafkaSettings: string;
    /**
     * Schema Registry configuration settings in JSON format (`exo dbaas type show kafka --settings=schema-registry` for reference)
     */
    schemaRegistrySettings: string;
    /**
     * Kafka major version (`exo dbaas type show kafka` for reference; may only be set at creation time).
     */
    version: string;
}

export interface DatabaseMysql {
    /**
     * A custom administrator account password (may only be set at creation time).
     */
    adminPassword?: string;
    /**
     * A custom administrator account username (may only be set at creation time).
     */
    adminUsername?: string;
    /**
     * The automated backup schedule (`HH:MM`).
     */
    backupSchedule: string;
    /**
     * A list of CIDR blocks to allow incoming connections from.
     */
    ipFilters: string[];
    /**
     * MySQL configuration settings in JSON format (`exo dbaas type show mysql --settings=mysql` for reference).
     */
    mysqlSettings: string;
    /**
     * MySQL major version (`exo dbaas type show mysql` for reference; may only be set at creation time).
     */
    version: string;
}

export interface DatabaseOpensearch {
    /**
     * OpenSearch Dashboards settings
     */
    dashboards?: outputs.DatabaseOpensearchDashboards;
    /**
     * ❗ Service name
     */
    forkFromService?: string;
    /**
     * (can be used multiple times) Allows you to create glob style patterns and set a max number of indexes matching this pattern you want to keep. Creating indexes exceeding this value will cause the oldest one to get deleted. You could for example create a pattern looking like 'logs.?' and then create index logs.1, logs.2 etc, it will delete logs.1 once you create logs.6. Do note 'logs.?' does not apply to logs.10. Note: Setting max_index_count to 0 will do nothing and the pattern gets ignored.
     */
    indexPatterns?: outputs.DatabaseOpensearchIndexPattern[];
    /**
     * Template settings for all new indexes
     */
    indexTemplate?: outputs.DatabaseOpensearchIndexTemplate;
    /**
     * Allow incoming connections from this list of CIDR address block, e.g. `["10.20.0.0/16"]
     */
    ipFilters: string[];
    /**
     * Aiven automation resets index.refresh_interval to default value for every index to be sure that indices are always visible to search. If it doesn't fit your case, you can disable this by setting up this flag to true.
     */
    keepIndexRefreshInterval?: boolean;
    /**
     * Maximum number of indexes to keep (Minimum value is `0`)
     */
    maxIndexCount?: number;
    /**
     * ❗ Name of a backup to recover from
     */
    recoveryBackupName?: string;
    /**
     * OpenSearch-specific settings, in json. e.g.`jsonencode({thread_pool_search_size: 64})`. Use `exo x get-dbaas-settings-opensearch` to get a list of available settings.
     */
    settings: string;
    /**
     * ❗ OpenSearch major version (`exo dbaas type show opensearch` for reference)
     */
    version: string;
}

export interface DatabaseOpensearchDashboards {
    /**
     * Enable or disable OpenSearch Dashboards (default: true).
     */
    enabled?: boolean;
    /**
     * Limits the maximum amount of memory (in MiB) the OpenSearch Dashboards process can use. This sets the max_old_space_size option of the nodejs running the OpenSearch Dashboards. Note: the memory reserved by OpenSearch Dashboards is not available for OpenSearch. (default: 128).
     */
    maxOldSpaceSize?: number;
    /**
     * Timeout in milliseconds for requests made by OpenSearch Dashboards towards OpenSearch (default: 30000)
     */
    requestTimeout?: number;
}

export interface DatabaseOpensearchIndexPattern {
    /**
     * Maximum number of indexes to keep before deleting the oldest one (Minimum value is `0`)
     */
    maxIndexCount?: number;
    /**
     * fnmatch pattern
     */
    pattern?: string;
    /**
     * `alphabetical` or `creation_date`.
     */
    sortingAlgorithm?: string;
}

export interface DatabaseOpensearchIndexTemplate {
    /**
     * The maximum number of nested JSON objects that a single document can contain across all nested types. This limit helps to prevent out of memory errors when a document contains too many nested objects. (Default is 10000. Minimum value is `0`, maximum value is `100000`.)
     */
    mappingNestedObjectsLimit?: number;
    /**
     * The number of replicas each primary shard has. (Minimum value is `0`, maximum value is `29`)
     */
    numberOfReplicas?: number;
    /**
     * The number of primary shards that an index should have. (Minimum value is `1`, maximum value is `1024`.)
     */
    numberOfShards?: number;
}

export interface DatabasePg {
    /**
     * A custom administrator account password (may only be set at creation time).
     */
    adminPassword?: string;
    /**
     * A custom administrator account username (may only be set at creation time).
     */
    adminUsername?: string;
    /**
     * The automated backup schedule (`HH:MM`).
     */
    backupSchedule: string;
    /**
     * A list of CIDR blocks to allow incoming connections from.
     */
    ipFilters: string[];
    /**
     * PostgreSQL configuration settings in JSON format (`exo dbaas type show pg --settings=pg` for reference).
     */
    pgSettings: string;
    /**
     * PgBouncer configuration settings in JSON format (`exo dbaas type show pg --settings=pgbouncer` for reference).
     */
    pgbouncerSettings: string;
    /**
     * pglookout configuration settings in JSON format (`exo dbaas type show pg --settings=pglookout` for reference).
     */
    pglookoutSettings: string;
    /**
     * PostgreSQL major version (`exo dbaas type show pg` for reference; may only be set at creation time).
     */
    version: string;
}

export interface DatabaseRedis {
    /**
     * A list of CIDR blocks to allow incoming connections from.
     */
    ipFilters: string[];
    /**
     * Redis configuration settings in JSON format (`exo dbaas type show redis --settings=redis` for reference).
     */
    redisSettings: string;
}

export interface DatabaseTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    create?: string;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
     */
    delete?: string;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
     */
    read?: string;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    update?: string;
}

export interface DomainRecordTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface DomainTimeouts {
    create?: string;
    delete?: string;
    read?: string;
}

export interface ElasticIpHealthcheck {
    /**
     * The healthcheck interval (seconds; must be between `5` and `300`; default: `10`).
     */
    interval?: number;
    /**
     * The healthcheck mode (`tcp`, `http` or `https`; may only be set at creation time).
     */
    mode: string;
    /**
     * The healthcheck target port (must be between `1` and `65535`).
     */
    port: number;
    /**
     * The number of failed healthcheck attempts before considering the target unhealthy (must be between `1` and `20`; default: `2`).
     */
    strikesFail?: number;
    /**
     * The number of successful healthcheck attempts before considering the target healthy (must be between `1` and `20`; default: `3`).
     */
    strikesOk?: number;
    /**
     * The time before considering a healthcheck probing failed (seconds; must be between `2` and `60`; default: `3`).
     */
    timeout?: number;
    /**
     * Disable TLS certificate verification for healthcheck in `https` mode (boolean; default: `false`).
     */
    tlsSkipVerify?: boolean;
    /**
     * The healthcheck server name to present with SNI in `https` mode.
     */
    tlsSni?: string;
    /**
     * The healthcheck target URI (required in `http(s)` modes).
     */
    uri?: string;
}

export interface ElasticIpTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface GetBlockStorageVolumeInstance {
    /**
     * Instance ID.
     */
    id: string;
}

export interface GetBlockStorageVolumeSnapshot {
    /**
     * Snapshot ID.
     */
    id: string;
}

export interface GetBlockStorageVolumeSnapshotTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
     */
    read?: string;
}

export interface GetBlockStorageVolumeSnapshotVolume {
    /**
     * Volume ID.
     */
    id: string;
}

export interface GetBlockStorageVolumeTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
     */
    read?: string;
}

export interface GetComputeInstanceListInstance {
    antiAffinityGroupIds: string[];
    createdAt: string;
    deployTargetId: string;
    diskSize: number;
    elasticIpIds: string[];
    id: string;
    ipv6: boolean;
    ipv6Address: string;
    labels: {[key: string]: string};
    managerId: string;
    managerType: string;
    name: string;
    privateNetworkIds: string[];
    publicIpAddress: string;
    reverseDns: string;
    securityGroupIds: string[];
    sshKey: string;
    state: string;
    templateId: string;
    type: string;
    userData: string;
    zone: string;
}

export interface GetDatabaseUriTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
     */
    read?: string;
}

export interface GetDomainRecordFilter {
    /**
     * A regular expression to match the record content.
     */
    contentRegex?: string;
    /**
     * The record ID to match.
     */
    id?: string;
    /**
     * The domain record name to match.
     */
    name?: string;
    /**
     * The record type to match.
     */
    recordType?: string;
}

export interface GetDomainRecordRecord {
    content: string;
    domain: string;
    id: string;
    name: string;
    prio: number;
    recordType: string;
    ttl: number;
}

export interface GetElasticIpHealthcheck {
    interval: number;
    mode: string;
    port: number;
    strikesFail: number;
    strikesOk: number;
    timeout: number;
    tlsSkipVerify: boolean;
    tlsSni: string;
    uri: string;
}

export interface GetIamApiKeyTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
     */
    read?: string;
}

export interface GetIamOrgPolicyServices {
    /**
     * List of IAM service rules (if type is `rules`).
     */
    rules: outputs.GetIamOrgPolicyServicesRule[];
    /**
     * Service type (`rules`, `allow`, or `deny`).
     */
    type: string;
}

export interface GetIamOrgPolicyServicesRule {
    /**
     * IAM policy rule action (`allow` or `deny`).
     */
    action: string;
    /**
     * IAM policy rule expression.
     */
    expression: string;
    /**
     * @deprecated Deprecated
     */
    resources: string[];
}

export interface GetIamOrgPolicyTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
     */
    read?: string;
}

export interface GetIamRolePolicy {
    /**
     * Default service strategy (`allow` or `deny`).
     */
    defaultServiceStrategy: string;
    /**
     * IAM policy services.
     */
    services: {[key: string]: outputs.GetIamRolePolicyServices};
}

export interface GetIamRolePolicyServices {
    /**
     * List of IAM service rules (if type is `rules`).
     */
    rules: outputs.GetIamRolePolicyServicesRule[];
    /**
     * Service type (`rules`, `allow`, or `deny`).
     */
    type: string;
}

export interface GetIamRolePolicyServicesRule {
    /**
     * IAM policy rule action (`allow` or `deny`).
     */
    action: string;
    /**
     * IAM policy rule expression.
     */
    expression: string;
    /**
     * @deprecated Deprecated
     */
    resources: string[];
}

export interface GetIamRoleTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
     */
    read?: string;
}

export interface GetInstancePoolInstance {
    id: string;
    ipv6Address: string;
    name: string;
    publicIpAddress: string;
}

export interface GetInstancePoolListPool {
    affinityGroupIds: string[];
    antiAffinityGroupIds: string[];
    deployTargetId: string;
    description: string;
    diskSize: number;
    elasticIpIds: string[];
    id: string;
    instancePrefix: string;
    instanceType: string;
    instances: outputs.GetInstancePoolListPoolInstance[];
    ipv6: boolean;
    keyPair: string;
    labels: {[key: string]: string};
    name: string;
    networkIds: string[];
    securityGroupIds: string[];
    size: number;
    state: string;
    templateId: string;
    userData: string;
    zone: string;
}

export interface GetInstancePoolListPoolInstance {
    id: string;
    ipv6Address: string;
    name: string;
    publicIpAddress: string;
}

export interface GetNlbServiceListService {
    /**
     * NLB service description.
     */
    description: string;
    healthcheck: outputs.GetNlbServiceListServiceHealthcheck;
    /**
     * NLB service ID.
     */
    id: string;
    /**
     * The exoscale.InstancePool (ID) to forward traffic to.
     */
    instancePoolId: string;
    /**
     * NLB Service name.
     */
    name: string;
    /**
     * Port exposed on the NLB's public IP.
     */
    port: number;
    /**
     * Network traffic protocol.
     */
    protocol: string;
    /**
     * NLB Service State.
     */
    state: string;
    /**
     * The strategy (`round-robin`|`source-hash`).
     */
    strategy: string;
    /**
     * Port on which the network traffic will be forwarded to on the receiving instance.
     */
    targetPort: number;
}

export interface GetNlbServiceListServiceHealthcheck {
    interval: number;
    mode: string;
    port: number;
    retries: number;
    timeout: number;
    tlsSni: string;
    uri: string;
}

export interface GetNlbServiceListTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
     */
    read?: string;
}

export interface GetSksClusterListCluster {
    addons: string[];
    aggregationCa: string;
    autoUpgrade: boolean;
    cni: string;
    controlPlaneCa: string;
    createdAt: string;
    description: string;
    endpoint: string;
    exoscaleCcm: boolean;
    exoscaleCsi: boolean;
    id: string;
    kubeletCa: string;
    labels: {[key: string]: string};
    metricsServer: boolean;
    name: string;
    nodepools: string[];
    oidcs: outputs.GetSksClusterListClusterOidc[];
    serviceLevel: string;
    state: string;
    version: string;
    zone: string;
}

export interface GetSksClusterListClusterOidc {
    clientId: string;
    groupsClaim: string;
    groupsPrefix: string;
    issuerUrl: string;
    requiredClaim: {[key: string]: string};
    usernameClaim: string;
    usernamePrefix: string;
}

export interface GetSksClusterOidc {
    /**
     * The OpenID client ID.
     */
    clientId: string;
    /**
     * An OpenID JWT claim to use as the user's group.
     */
    groupsClaim?: string;
    /**
     * An OpenID prefix prepended to group claims.
     */
    groupsPrefix?: string;
    /**
     * The OpenID provider URL.
     */
    issuerUrl: string;
    /**
     * A map of key/value pairs that describes a required claim in the OpenID Token.
     */
    requiredClaim?: {[key: string]: string};
    /**
     * An OpenID JWT claim to use as the user name.
     */
    usernameClaim?: string;
    /**
     * An OpenID prefix prepended to username claims.
     */
    usernamePrefix?: string;
}

export interface GetSksNodepoolKubeletImageGc {
    /**
     * The percent of disk usage after which image garbage collection is always run
     */
    highThreshold?: number;
    /**
     * The percent of disk usage before which image garbage collection is never run
     */
    lowThreshold?: number;
    /**
     * The minimum age for an unused image before it is garbage collected (k8s duration format, eg. 1h)
     */
    minAge?: string;
}

export interface GetSksNodepoolListNodepool {
    antiAffinityGroupIds: string[];
    clusterId: string;
    createdAt: string;
    deployTargetId: string;
    description: string;
    diskSize: number;
    id: string;
    instancePoolId: string;
    instancePrefix: string;
    instanceType: string;
    kubeletImageGcs: outputs.GetSksNodepoolListNodepoolKubeletImageGc[];
    labels: {[key: string]: string};
    name: string;
    privateNetworkIds: string[];
    securityGroupIds: string[];
    size: number;
    state: string;
    storageLvm: boolean;
    taints: {[key: string]: string};
    templateId: string;
    version: string;
    zone: string;
}

export interface GetSksNodepoolListNodepoolKubeletImageGc {
    highThreshold: number;
    lowThreshold: number;
    minAge: string;
}

export interface IamAccessKeyTimeouts {
    create?: string;
    delete?: string;
    read?: string;
}

export interface IamApiKeyTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
     */
    read?: string;
}

export interface IamOrgPolicyServices {
    /**
     * List of IAM service rules (if type is `rules`).
     */
    rules: outputs.IamOrgPolicyServicesRule[];
    /**
     * Service type (`rules`, `allow`, or `deny`).
     */
    type: string;
}

export interface IamOrgPolicyServicesRule {
    /**
     * IAM policy rule action (`allow` or `deny`).
     */
    action: string;
    /**
     * IAM policy rule expression.
     */
    expression: string;
    /**
     * @deprecated Deprecated
     */
    resources: string[];
}

export interface IamOrgPolicyTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
     */
    read?: string;
}

export interface IamRolePolicy {
    /**
     * Default service strategy (`allow` or `deny`).
     */
    defaultServiceStrategy: string;
    /**
     * IAM policy services.
     */
    services: {[key: string]: outputs.IamRolePolicyServices};
}

export interface IamRolePolicyServices {
    /**
     * List of IAM service rules (if type is `rules`).
     */
    rules: outputs.IamRolePolicyServicesRule[];
    /**
     * Service type (`rules`, `allow`, or `deny`).
     */
    type: string;
}

export interface IamRolePolicyServicesRule {
    /**
     * IAM policy rule action (`allow` or `deny`).
     */
    action: string;
    /**
     * IAM policy rule expression.
     */
    expression: string;
    /**
     * @deprecated Deprecated
     */
    resources: string[];
}

export interface IamRoleTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
     */
    read?: string;
}

export interface InstancePoolInstance {
    id?: string;
    /**
     * The instance (main network interface) IPv6 address.
     */
    ipv6Address: string;
    /**
     * The instance name.
     */
    name?: string;
    /**
     * The instance (main network interface) IPv4 address.
     */
    publicIpAddress: string;
}

export interface InstancePoolTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface NlbServiceHealthcheck {
    /**
     * The healthcheck interval in seconds (default: `10`).
     */
    interval?: number;
    /**
     * The healthcheck mode (`tcp`|`http`|`https`; default: `tcp`).
     */
    mode?: string;
    /**
     * The NLB service (TCP/UDP) port.
     */
    port: number;
    /**
     * The healthcheck retries (default: `1`).
     */
    retries?: number;
    /**
     * The healthcheck timeout (seconds; default: `5`).
     */
    timeout?: number;
    /**
     * The healthcheck TLS SNI server name (only if `mode` is `https`).
     */
    tlsSni?: string;
    /**
     * The healthcheck URI (must be set only if `mode` is `http(s)`).
     */
    uri?: string;
}

export interface NlbServiceTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface NlbTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface PrivateNetworkTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface SecurityGroupRuleTimeouts {
    create?: string;
    delete?: string;
    read?: string;
}

export interface SecurityGroupTimeouts {
    create?: string;
    delete?: string;
    read?: string;
}

export interface SksClusterOidc {
    /**
     * The OpenID client ID.
     */
    clientId: string;
    /**
     * An OpenID JWT claim to use as the user's group.
     */
    groupsClaim?: string;
    /**
     * An OpenID prefix prepended to group claims.
     */
    groupsPrefix?: string;
    /**
     * The OpenID provider URL.
     */
    issuerUrl: string;
    /**
     * A map of key/value pairs that describes a required claim in the OpenID Token.
     */
    requiredClaim?: {[key: string]: string};
    /**
     * An OpenID JWT claim to use as the user name.
     */
    usernameClaim?: string;
    /**
     * An OpenID prefix prepended to username claims.
     */
    usernamePrefix?: string;
}

export interface SksClusterTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface SksKubeconfigTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface SksNodepoolKubeletImageGc {
    /**
     * The percent of disk usage after which image garbage collection is always run
     */
    highThreshold?: number;
    /**
     * The percent of disk usage before which image garbage collection is never run
     */
    lowThreshold?: number;
    /**
     * The minimum age for an unused image before it is garbage collected (k8s duration format, eg. 1h)
     */
    minAge?: string;
}

export interface SksNodepoolTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface SshKeyTimeouts {
    create?: string;
    delete?: string;
    read?: string;
}

