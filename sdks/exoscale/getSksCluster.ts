// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getSksCluster(args: GetSksClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetSksClusterResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("exoscale:index/getSksCluster:getSksCluster", {
        "addons": args.addons,
        "aggregationCa": args.aggregationCa,
        "autoUpgrade": args.autoUpgrade,
        "cni": args.cni,
        "controlPlaneCa": args.controlPlaneCa,
        "createdAt": args.createdAt,
        "description": args.description,
        "endpoint": args.endpoint,
        "exoscaleCcm": args.exoscaleCcm,
        "exoscaleCsi": args.exoscaleCsi,
        "id": args.id,
        "kubeletCa": args.kubeletCa,
        "labels": args.labels,
        "metricsServer": args.metricsServer,
        "name": args.name,
        "nodepools": args.nodepools,
        "oidc": args.oidc,
        "serviceLevel": args.serviceLevel,
        "state": args.state,
        "version": args.version,
        "zone": args.zone,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSksCluster.
 */
export interface GetSksClusterArgs {
    /**
     * @deprecated Deprecated
     */
    addons?: string[];
    aggregationCa?: string;
    autoUpgrade?: boolean;
    cni?: string;
    controlPlaneCa?: string;
    createdAt?: string;
    description?: string;
    endpoint?: string;
    exoscaleCcm?: boolean;
    exoscaleCsi?: boolean;
    id?: string;
    kubeletCa?: string;
    labels?: {[key: string]: string};
    metricsServer?: boolean;
    name?: string;
    nodepools?: string[];
    oidc?: inputs.GetSksClusterOidc;
    serviceLevel?: string;
    state?: string;
    version?: string;
    zone: string;
}

/**
 * A collection of values returned by getSksCluster.
 */
export interface GetSksClusterResult {
    /**
     * @deprecated Deprecated
     */
    readonly addons: string[];
    readonly aggregationCa: string;
    readonly autoUpgrade?: boolean;
    readonly cni?: string;
    readonly controlPlaneCa: string;
    readonly createdAt: string;
    readonly description?: string;
    readonly endpoint: string;
    readonly exoscaleCcm?: boolean;
    readonly exoscaleCsi?: boolean;
    readonly id?: string;
    readonly kubeletCa: string;
    readonly labels?: {[key: string]: string};
    readonly metricsServer?: boolean;
    readonly name?: string;
    readonly nodepools: string[];
    readonly oidc?: outputs.GetSksClusterOidc;
    readonly serviceLevel?: string;
    readonly state: string;
    readonly version: string;
    readonly zone: string;
}
export function getSksClusterOutput(args: GetSksClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSksClusterResult> {
    return pulumi.output(args).apply((a: any) => getSksCluster(a, opts))
}

/**
 * A collection of arguments for invoking getSksCluster.
 */
export interface GetSksClusterOutputArgs {
    /**
     * @deprecated Deprecated
     */
    addons?: pulumi.Input<pulumi.Input<string>[]>;
    aggregationCa?: pulumi.Input<string>;
    autoUpgrade?: pulumi.Input<boolean>;
    cni?: pulumi.Input<string>;
    controlPlaneCa?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    exoscaleCcm?: pulumi.Input<boolean>;
    exoscaleCsi?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    kubeletCa?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    metricsServer?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    nodepools?: pulumi.Input<pulumi.Input<string>[]>;
    oidc?: pulumi.Input<inputs.GetSksClusterOidcArgs>;
    serviceLevel?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
    zone: pulumi.Input<string>;
}
