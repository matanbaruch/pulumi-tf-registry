// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Failover extends pulumi.CustomResource {
    /**
     * Get an existing Failover resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FailoverState, opts?: pulumi.CustomResourceOptions): Failover {
        return new Failover(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dme:index/failover:Failover';

    /**
     * Returns true if the given object is an instance of Failover.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Failover {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Failover.__pulumiType;
    }

    public readonly autoFailover!: pulumi.Output<string>;
    public readonly contactList!: pulumi.Output<string>;
    public readonly dnsFqdn!: pulumi.Output<string>;
    public readonly dnsTimeout!: pulumi.Output<string>;
    public readonly failover!: pulumi.Output<string>;
    public readonly httpFile!: pulumi.Output<string>;
    public readonly httpFqdn!: pulumi.Output<string>;
    public readonly httpQueryString!: pulumi.Output<string>;
    public readonly ip1!: pulumi.Output<string>;
    public readonly ip2!: pulumi.Output<string>;
    public readonly ip3!: pulumi.Output<string>;
    public readonly ip4!: pulumi.Output<string>;
    public readonly ip5!: pulumi.Output<string>;
    public readonly maxEmails!: pulumi.Output<string>;
    public readonly monitor!: pulumi.Output<string>;
    public readonly port!: pulumi.Output<string>;
    public readonly protocolId!: pulumi.Output<string>;
    public readonly recordId!: pulumi.Output<string>;
    public readonly sendString!: pulumi.Output<string>;
    public readonly sensitivity!: pulumi.Output<string>;
    public readonly systemDescription!: pulumi.Output<string>;
    public readonly timeout!: pulumi.Output<string>;

    /**
     * Create a Failover resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FailoverArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FailoverArgs | FailoverState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FailoverState | undefined;
            resourceInputs["autoFailover"] = state ? state.autoFailover : undefined;
            resourceInputs["contactList"] = state ? state.contactList : undefined;
            resourceInputs["dnsFqdn"] = state ? state.dnsFqdn : undefined;
            resourceInputs["dnsTimeout"] = state ? state.dnsTimeout : undefined;
            resourceInputs["failover"] = state ? state.failover : undefined;
            resourceInputs["httpFile"] = state ? state.httpFile : undefined;
            resourceInputs["httpFqdn"] = state ? state.httpFqdn : undefined;
            resourceInputs["httpQueryString"] = state ? state.httpQueryString : undefined;
            resourceInputs["ip1"] = state ? state.ip1 : undefined;
            resourceInputs["ip2"] = state ? state.ip2 : undefined;
            resourceInputs["ip3"] = state ? state.ip3 : undefined;
            resourceInputs["ip4"] = state ? state.ip4 : undefined;
            resourceInputs["ip5"] = state ? state.ip5 : undefined;
            resourceInputs["maxEmails"] = state ? state.maxEmails : undefined;
            resourceInputs["monitor"] = state ? state.monitor : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["protocolId"] = state ? state.protocolId : undefined;
            resourceInputs["recordId"] = state ? state.recordId : undefined;
            resourceInputs["sendString"] = state ? state.sendString : undefined;
            resourceInputs["sensitivity"] = state ? state.sensitivity : undefined;
            resourceInputs["systemDescription"] = state ? state.systemDescription : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
        } else {
            const args = argsOrState as FailoverArgs | undefined;
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if ((!args || args.recordId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recordId'");
            }
            if ((!args || args.sensitivity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sensitivity'");
            }
            resourceInputs["autoFailover"] = args ? args.autoFailover : undefined;
            resourceInputs["contactList"] = args ? args.contactList : undefined;
            resourceInputs["dnsFqdn"] = args ? args.dnsFqdn : undefined;
            resourceInputs["dnsTimeout"] = args ? args.dnsTimeout : undefined;
            resourceInputs["failover"] = args ? args.failover : undefined;
            resourceInputs["httpFile"] = args ? args.httpFile : undefined;
            resourceInputs["httpFqdn"] = args ? args.httpFqdn : undefined;
            resourceInputs["httpQueryString"] = args ? args.httpQueryString : undefined;
            resourceInputs["ip1"] = args ? args.ip1 : undefined;
            resourceInputs["ip2"] = args ? args.ip2 : undefined;
            resourceInputs["ip3"] = args ? args.ip3 : undefined;
            resourceInputs["ip4"] = args ? args.ip4 : undefined;
            resourceInputs["ip5"] = args ? args.ip5 : undefined;
            resourceInputs["maxEmails"] = args ? args.maxEmails : undefined;
            resourceInputs["monitor"] = args ? args.monitor : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["protocolId"] = args ? args.protocolId : undefined;
            resourceInputs["recordId"] = args ? args.recordId : undefined;
            resourceInputs["sendString"] = args ? args.sendString : undefined;
            resourceInputs["sensitivity"] = args ? args.sensitivity : undefined;
            resourceInputs["systemDescription"] = args ? args.systemDescription : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Failover.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Failover resources.
 */
export interface FailoverState {
    autoFailover?: pulumi.Input<string>;
    contactList?: pulumi.Input<string>;
    dnsFqdn?: pulumi.Input<string>;
    dnsTimeout?: pulumi.Input<string>;
    failover?: pulumi.Input<string>;
    httpFile?: pulumi.Input<string>;
    httpFqdn?: pulumi.Input<string>;
    httpQueryString?: pulumi.Input<string>;
    ip1?: pulumi.Input<string>;
    ip2?: pulumi.Input<string>;
    ip3?: pulumi.Input<string>;
    ip4?: pulumi.Input<string>;
    ip5?: pulumi.Input<string>;
    maxEmails?: pulumi.Input<string>;
    monitor?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    protocolId?: pulumi.Input<string>;
    recordId?: pulumi.Input<string>;
    sendString?: pulumi.Input<string>;
    sensitivity?: pulumi.Input<string>;
    systemDescription?: pulumi.Input<string>;
    timeout?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Failover resource.
 */
export interface FailoverArgs {
    autoFailover?: pulumi.Input<string>;
    contactList?: pulumi.Input<string>;
    dnsFqdn?: pulumi.Input<string>;
    dnsTimeout?: pulumi.Input<string>;
    failover?: pulumi.Input<string>;
    httpFile?: pulumi.Input<string>;
    httpFqdn?: pulumi.Input<string>;
    httpQueryString?: pulumi.Input<string>;
    ip1?: pulumi.Input<string>;
    ip2?: pulumi.Input<string>;
    ip3?: pulumi.Input<string>;
    ip4?: pulumi.Input<string>;
    ip5?: pulumi.Input<string>;
    maxEmails?: pulumi.Input<string>;
    monitor?: pulumi.Input<string>;
    port: pulumi.Input<string>;
    protocolId?: pulumi.Input<string>;
    recordId: pulumi.Input<string>;
    sendString?: pulumi.Input<string>;
    sensitivity: pulumi.Input<string>;
    systemDescription?: pulumi.Input<string>;
    timeout?: pulumi.Input<string>;
}
