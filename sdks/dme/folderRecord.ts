// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FolderRecord extends pulumi.CustomResource {
    /**
     * Get an existing FolderRecord resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FolderRecordState, opts?: pulumi.CustomResourceOptions): FolderRecord {
        return new FolderRecord(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dme:index/folderRecord:FolderRecord';

    /**
     * Returns true if the given object is an instance of FolderRecord.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FolderRecord {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FolderRecord.__pulumiType;
    }

    public readonly defaultFolder!: pulumi.Output<boolean | undefined>;
    public readonly domains!: pulumi.Output<string[] | undefined>;
    public readonly folderPermissions!: pulumi.Output<outputs.FolderRecordFolderPermission[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly secondaries!: pulumi.Output<string[] | undefined>;

    /**
     * Create a FolderRecord resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: FolderRecordArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FolderRecordArgs | FolderRecordState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FolderRecordState | undefined;
            resourceInputs["defaultFolder"] = state ? state.defaultFolder : undefined;
            resourceInputs["domains"] = state ? state.domains : undefined;
            resourceInputs["folderPermissions"] = state ? state.folderPermissions : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["secondaries"] = state ? state.secondaries : undefined;
        } else {
            const args = argsOrState as FolderRecordArgs | undefined;
            resourceInputs["defaultFolder"] = args ? args.defaultFolder : undefined;
            resourceInputs["domains"] = args ? args.domains : undefined;
            resourceInputs["folderPermissions"] = args ? args.folderPermissions : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["secondaries"] = args ? args.secondaries : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FolderRecord.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FolderRecord resources.
 */
export interface FolderRecordState {
    defaultFolder?: pulumi.Input<boolean>;
    domains?: pulumi.Input<pulumi.Input<string>[]>;
    folderPermissions?: pulumi.Input<pulumi.Input<inputs.FolderRecordFolderPermission>[]>;
    name?: pulumi.Input<string>;
    secondaries?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a FolderRecord resource.
 */
export interface FolderRecordArgs {
    defaultFolder?: pulumi.Input<boolean>;
    domains?: pulumi.Input<pulumi.Input<string>[]>;
    folderPermissions?: pulumi.Input<pulumi.Input<inputs.FolderRecordFolderPermission>[]>;
    name?: pulumi.Input<string>;
    secondaries?: pulumi.Input<pulumi.Input<string>[]>;
}
