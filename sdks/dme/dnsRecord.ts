// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DnsRecord extends pulumi.CustomResource {
    /**
     * Get an existing DnsRecord resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnsRecordState, opts?: pulumi.CustomResourceOptions): DnsRecord {
        return new DnsRecord(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dme:index/dnsRecord:DnsRecord';

    /**
     * Returns true if the given object is an instance of DnsRecord.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DnsRecord {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnsRecord.__pulumiType;
    }

    public readonly caaType!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly domainId!: pulumi.Output<string>;
    public readonly dynamicDns!: pulumi.Output<string>;
    public readonly gtdLocation!: pulumi.Output<string>;
    public readonly hardlink!: pulumi.Output<string>;
    public readonly issuerCritical!: pulumi.Output<string>;
    public readonly keywords!: pulumi.Output<string>;
    public readonly mxLevel!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly password!: pulumi.Output<string>;
    public readonly port!: pulumi.Output<string>;
    public readonly priority!: pulumi.Output<string>;
    public readonly redirectType!: pulumi.Output<string>;
    public readonly title!: pulumi.Output<string>;
    public readonly ttl!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;
    public readonly value!: pulumi.Output<string>;
    public readonly weight!: pulumi.Output<string>;

    /**
     * Create a DnsRecord resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnsRecordArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnsRecordArgs | DnsRecordState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnsRecordState | undefined;
            resourceInputs["caaType"] = state ? state.caaType : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["domainId"] = state ? state.domainId : undefined;
            resourceInputs["dynamicDns"] = state ? state.dynamicDns : undefined;
            resourceInputs["gtdLocation"] = state ? state.gtdLocation : undefined;
            resourceInputs["hardlink"] = state ? state.hardlink : undefined;
            resourceInputs["issuerCritical"] = state ? state.issuerCritical : undefined;
            resourceInputs["keywords"] = state ? state.keywords : undefined;
            resourceInputs["mxLevel"] = state ? state.mxLevel : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["redirectType"] = state ? state.redirectType : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
            resourceInputs["weight"] = state ? state.weight : undefined;
        } else {
            const args = argsOrState as DnsRecordArgs | undefined;
            if ((!args || args.domainId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainId'");
            }
            if ((!args || args.ttl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ttl'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.value === undefined) && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            resourceInputs["caaType"] = args ? args.caaType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["domainId"] = args ? args.domainId : undefined;
            resourceInputs["dynamicDns"] = args ? args.dynamicDns : undefined;
            resourceInputs["gtdLocation"] = args ? args.gtdLocation : undefined;
            resourceInputs["hardlink"] = args ? args.hardlink : undefined;
            resourceInputs["issuerCritical"] = args ? args.issuerCritical : undefined;
            resourceInputs["keywords"] = args ? args.keywords : undefined;
            resourceInputs["mxLevel"] = args ? args.mxLevel : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["redirectType"] = args ? args.redirectType : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
            resourceInputs["weight"] = args ? args.weight : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DnsRecord.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DnsRecord resources.
 */
export interface DnsRecordState {
    caaType?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domainId?: pulumi.Input<string>;
    dynamicDns?: pulumi.Input<string>;
    gtdLocation?: pulumi.Input<string>;
    hardlink?: pulumi.Input<string>;
    issuerCritical?: pulumi.Input<string>;
    keywords?: pulumi.Input<string>;
    mxLevel?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    priority?: pulumi.Input<string>;
    redirectType?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
    ttl?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    weight?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DnsRecord resource.
 */
export interface DnsRecordArgs {
    caaType?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domainId: pulumi.Input<string>;
    dynamicDns?: pulumi.Input<string>;
    gtdLocation?: pulumi.Input<string>;
    hardlink?: pulumi.Input<string>;
    issuerCritical?: pulumi.Input<string>;
    keywords?: pulumi.Input<string>;
    mxLevel?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    priority?: pulumi.Input<string>;
    redirectType?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
    ttl: pulumi.Input<string>;
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
    weight?: pulumi.Input<string>;
}
