// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getFailover(args: GetFailoverArgs, opts?: pulumi.InvokeOptions): Promise<GetFailoverResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("dme:index/getFailover:getFailover", {
        "autoFailover": args.autoFailover,
        "contactList": args.contactList,
        "dnsFqdn": args.dnsFqdn,
        "dnsTimeout": args.dnsTimeout,
        "failover": args.failover,
        "httpFile": args.httpFile,
        "httpFqdn": args.httpFqdn,
        "httpQueryString": args.httpQueryString,
        "id": args.id,
        "ip1": args.ip1,
        "ip2": args.ip2,
        "ip3": args.ip3,
        "ip4": args.ip4,
        "ip5": args.ip5,
        "maxEmails": args.maxEmails,
        "monitor": args.monitor,
        "port": args.port,
        "protocolId": args.protocolId,
        "recordId": args.recordId,
        "sendString": args.sendString,
        "sensitivity": args.sensitivity,
        "systemDescription": args.systemDescription,
        "timeout": args.timeout,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getFailover.
 */
export interface GetFailoverArgs {
    autoFailover?: string;
    contactList?: string;
    dnsFqdn?: string;
    dnsTimeout?: string;
    failover?: string;
    httpFile?: string;
    httpFqdn?: string;
    httpQueryString?: string;
    id?: string;
    ip1?: string;
    ip2?: string;
    ip3?: string;
    ip4?: string;
    ip5?: string;
    maxEmails?: string;
    monitor?: string;
    port?: string;
    protocolId?: string;
    recordId: string;
    sendString?: string;
    sensitivity?: string;
    systemDescription?: string;
    timeout?: string;
}

/**
 * A collection of values returned by getFailover.
 */
export interface GetFailoverResult {
    readonly autoFailover: string;
    readonly contactList: string;
    readonly dnsFqdn: string;
    readonly dnsTimeout: string;
    readonly failover: string;
    readonly httpFile: string;
    readonly httpFqdn: string;
    readonly httpQueryString: string;
    readonly id: string;
    readonly ip1: string;
    readonly ip2: string;
    readonly ip3: string;
    readonly ip4: string;
    readonly ip5: string;
    readonly maxEmails: string;
    readonly monitor: string;
    readonly port: string;
    readonly protocolId: string;
    readonly recordId: string;
    readonly sendString: string;
    readonly sensitivity: string;
    readonly systemDescription: string;
    readonly timeout: string;
}
export function getFailoverOutput(args: GetFailoverOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFailoverResult> {
    return pulumi.output(args).apply((a: any) => getFailover(a, opts))
}

/**
 * A collection of arguments for invoking getFailover.
 */
export interface GetFailoverOutputArgs {
    autoFailover?: pulumi.Input<string>;
    contactList?: pulumi.Input<string>;
    dnsFqdn?: pulumi.Input<string>;
    dnsTimeout?: pulumi.Input<string>;
    failover?: pulumi.Input<string>;
    httpFile?: pulumi.Input<string>;
    httpFqdn?: pulumi.Input<string>;
    httpQueryString?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    ip1?: pulumi.Input<string>;
    ip2?: pulumi.Input<string>;
    ip3?: pulumi.Input<string>;
    ip4?: pulumi.Input<string>;
    ip5?: pulumi.Input<string>;
    maxEmails?: pulumi.Input<string>;
    monitor?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    protocolId?: pulumi.Input<string>;
    recordId: pulumi.Input<string>;
    sendString?: pulumi.Input<string>;
    sensitivity?: pulumi.Input<string>;
    systemDescription?: pulumi.Input<string>;
    timeout?: pulumi.Input<string>;
}
