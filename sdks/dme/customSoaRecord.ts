// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CustomSoaRecord extends pulumi.CustomResource {
    /**
     * Get an existing CustomSoaRecord resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CustomSoaRecordState, opts?: pulumi.CustomResourceOptions): CustomSoaRecord {
        return new CustomSoaRecord(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dme:index/customSoaRecord:CustomSoaRecord';

    /**
     * Returns true if the given object is an instance of CustomSoaRecord.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CustomSoaRecord {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomSoaRecord.__pulumiType;
    }

    public readonly comp!: pulumi.Output<string>;
    public readonly email!: pulumi.Output<string>;
    public readonly expire!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly negativeCache!: pulumi.Output<number>;
    public readonly refresh!: pulumi.Output<number>;
    public readonly retry!: pulumi.Output<number>;
    public readonly serial!: pulumi.Output<number>;
    public readonly ttl!: pulumi.Output<number>;

    /**
     * Create a CustomSoaRecord resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CustomSoaRecordArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CustomSoaRecordArgs | CustomSoaRecordState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CustomSoaRecordState | undefined;
            resourceInputs["comp"] = state ? state.comp : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["expire"] = state ? state.expire : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["negativeCache"] = state ? state.negativeCache : undefined;
            resourceInputs["refresh"] = state ? state.refresh : undefined;
            resourceInputs["retry"] = state ? state.retry : undefined;
            resourceInputs["serial"] = state ? state.serial : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
        } else {
            const args = argsOrState as CustomSoaRecordArgs | undefined;
            if ((!args || args.comp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'comp'");
            }
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            if ((!args || args.expire === undefined) && !opts.urn) {
                throw new Error("Missing required property 'expire'");
            }
            if ((!args || args.negativeCache === undefined) && !opts.urn) {
                throw new Error("Missing required property 'negativeCache'");
            }
            if ((!args || args.refresh === undefined) && !opts.urn) {
                throw new Error("Missing required property 'refresh'");
            }
            if ((!args || args.retry === undefined) && !opts.urn) {
                throw new Error("Missing required property 'retry'");
            }
            if ((!args || args.serial === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serial'");
            }
            if ((!args || args.ttl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ttl'");
            }
            resourceInputs["comp"] = args ? args.comp : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["expire"] = args ? args.expire : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["negativeCache"] = args ? args.negativeCache : undefined;
            resourceInputs["refresh"] = args ? args.refresh : undefined;
            resourceInputs["retry"] = args ? args.retry : undefined;
            resourceInputs["serial"] = args ? args.serial : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CustomSoaRecord.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CustomSoaRecord resources.
 */
export interface CustomSoaRecordState {
    comp?: pulumi.Input<string>;
    email?: pulumi.Input<string>;
    expire?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    negativeCache?: pulumi.Input<number>;
    refresh?: pulumi.Input<number>;
    retry?: pulumi.Input<number>;
    serial?: pulumi.Input<number>;
    ttl?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a CustomSoaRecord resource.
 */
export interface CustomSoaRecordArgs {
    comp: pulumi.Input<string>;
    email: pulumi.Input<string>;
    expire: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    negativeCache: pulumi.Input<number>;
    refresh: pulumi.Input<number>;
    retry: pulumi.Input<number>;
    serial: pulumi.Input<number>;
    ttl: pulumi.Input<number>;
}
