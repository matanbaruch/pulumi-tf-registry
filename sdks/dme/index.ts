// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ContactListArgs, ContactListState } from "./contactList";
export type ContactList = import("./contactList").ContactList;
export const ContactList: typeof import("./contactList").ContactList = null as any;
utilities.lazyLoad(exports, ["ContactList"], () => require("./contactList"));

export { CustomSoaRecordArgs, CustomSoaRecordState } from "./customSoaRecord";
export type CustomSoaRecord = import("./customSoaRecord").CustomSoaRecord;
export const CustomSoaRecord: typeof import("./customSoaRecord").CustomSoaRecord = null as any;
utilities.lazyLoad(exports, ["CustomSoaRecord"], () => require("./customSoaRecord"));

export { DnsRecordArgs, DnsRecordState } from "./dnsRecord";
export type DnsRecord = import("./dnsRecord").DnsRecord;
export const DnsRecord: typeof import("./dnsRecord").DnsRecord = null as any;
utilities.lazyLoad(exports, ["DnsRecord"], () => require("./dnsRecord"));

export { DomainArgs, DomainState } from "./domain";
export type Domain = import("./domain").Domain;
export const Domain: typeof import("./domain").Domain = null as any;
utilities.lazyLoad(exports, ["Domain"], () => require("./domain"));

export { FailoverArgs, FailoverState } from "./failover";
export type Failover = import("./failover").Failover;
export const Failover: typeof import("./failover").Failover = null as any;
utilities.lazyLoad(exports, ["Failover"], () => require("./failover"));

export { FolderRecordArgs, FolderRecordState } from "./folderRecord";
export type FolderRecord = import("./folderRecord").FolderRecord;
export const FolderRecord: typeof import("./folderRecord").FolderRecord = null as any;
utilities.lazyLoad(exports, ["FolderRecord"], () => require("./folderRecord"));

export { GetContactListArgs, GetContactListResult, GetContactListOutputArgs } from "./getContactList";
export const getContactList: typeof import("./getContactList").getContactList = null as any;
export const getContactListOutput: typeof import("./getContactList").getContactListOutput = null as any;
utilities.lazyLoad(exports, ["getContactList","getContactListOutput"], () => require("./getContactList"));

export { GetCustomSoaRecordArgs, GetCustomSoaRecordResult, GetCustomSoaRecordOutputArgs } from "./getCustomSoaRecord";
export const getCustomSoaRecord: typeof import("./getCustomSoaRecord").getCustomSoaRecord = null as any;
export const getCustomSoaRecordOutput: typeof import("./getCustomSoaRecord").getCustomSoaRecordOutput = null as any;
utilities.lazyLoad(exports, ["getCustomSoaRecord","getCustomSoaRecordOutput"], () => require("./getCustomSoaRecord"));

export { GetDnsRecordArgs, GetDnsRecordResult, GetDnsRecordOutputArgs } from "./getDnsRecord";
export const getDnsRecord: typeof import("./getDnsRecord").getDnsRecord = null as any;
export const getDnsRecordOutput: typeof import("./getDnsRecord").getDnsRecordOutput = null as any;
utilities.lazyLoad(exports, ["getDnsRecord","getDnsRecordOutput"], () => require("./getDnsRecord"));

export { GetDomainArgs, GetDomainResult, GetDomainOutputArgs } from "./getDomain";
export const getDomain: typeof import("./getDomain").getDomain = null as any;
export const getDomainOutput: typeof import("./getDomain").getDomainOutput = null as any;
utilities.lazyLoad(exports, ["getDomain","getDomainOutput"], () => require("./getDomain"));

export { GetFailoverArgs, GetFailoverResult, GetFailoverOutputArgs } from "./getFailover";
export const getFailover: typeof import("./getFailover").getFailover = null as any;
export const getFailoverOutput: typeof import("./getFailover").getFailoverOutput = null as any;
utilities.lazyLoad(exports, ["getFailover","getFailoverOutput"], () => require("./getFailover"));

export { GetFolderRecordArgs, GetFolderRecordResult, GetFolderRecordOutputArgs } from "./getFolderRecord";
export const getFolderRecord: typeof import("./getFolderRecord").getFolderRecord = null as any;
export const getFolderRecordOutput: typeof import("./getFolderRecord").getFolderRecordOutput = null as any;
utilities.lazyLoad(exports, ["getFolderRecord","getFolderRecordOutput"], () => require("./getFolderRecord"));

export { GetSecondaryDnsArgs, GetSecondaryDnsResult, GetSecondaryDnsOutputArgs } from "./getSecondaryDns";
export const getSecondaryDns: typeof import("./getSecondaryDns").getSecondaryDns = null as any;
export const getSecondaryDnsOutput: typeof import("./getSecondaryDns").getSecondaryDnsOutput = null as any;
utilities.lazyLoad(exports, ["getSecondaryDns","getSecondaryDnsOutput"], () => require("./getSecondaryDns"));

export { GetSecondaryIpSetArgs, GetSecondaryIpSetResult, GetSecondaryIpSetOutputArgs } from "./getSecondaryIpSet";
export const getSecondaryIpSet: typeof import("./getSecondaryIpSet").getSecondaryIpSet = null as any;
export const getSecondaryIpSetOutput: typeof import("./getSecondaryIpSet").getSecondaryIpSetOutput = null as any;
utilities.lazyLoad(exports, ["getSecondaryIpSet","getSecondaryIpSetOutput"], () => require("./getSecondaryIpSet"));

export { GetTemplateArgs, GetTemplateResult, GetTemplateOutputArgs } from "./getTemplate";
export const getTemplate: typeof import("./getTemplate").getTemplate = null as any;
export const getTemplateOutput: typeof import("./getTemplate").getTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getTemplate","getTemplateOutput"], () => require("./getTemplate"));

export { GetTemplateRecordArgs, GetTemplateRecordResult, GetTemplateRecordOutputArgs } from "./getTemplateRecord";
export const getTemplateRecord: typeof import("./getTemplateRecord").getTemplateRecord = null as any;
export const getTemplateRecordOutput: typeof import("./getTemplateRecord").getTemplateRecordOutput = null as any;
utilities.lazyLoad(exports, ["getTemplateRecord","getTemplateRecordOutput"], () => require("./getTemplateRecord"));

export { GetTransferAclArgs, GetTransferAclResult, GetTransferAclOutputArgs } from "./getTransferAcl";
export const getTransferAcl: typeof import("./getTransferAcl").getTransferAcl = null as any;
export const getTransferAclOutput: typeof import("./getTransferAcl").getTransferAclOutput = null as any;
utilities.lazyLoad(exports, ["getTransferAcl","getTransferAclOutput"], () => require("./getTransferAcl"));

export { GetVanityNameserverRecordArgs, GetVanityNameserverRecordResult, GetVanityNameserverRecordOutputArgs } from "./getVanityNameserverRecord";
export const getVanityNameserverRecord: typeof import("./getVanityNameserverRecord").getVanityNameserverRecord = null as any;
export const getVanityNameserverRecordOutput: typeof import("./getVanityNameserverRecord").getVanityNameserverRecordOutput = null as any;
utilities.lazyLoad(exports, ["getVanityNameserverRecord","getVanityNameserverRecordOutput"], () => require("./getVanityNameserverRecord"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SecondaryDnsArgs, SecondaryDnsState } from "./secondaryDns";
export type SecondaryDns = import("./secondaryDns").SecondaryDns;
export const SecondaryDns: typeof import("./secondaryDns").SecondaryDns = null as any;
utilities.lazyLoad(exports, ["SecondaryDns"], () => require("./secondaryDns"));

export { SecondaryIpSetArgs, SecondaryIpSetState } from "./secondaryIpSet";
export type SecondaryIpSet = import("./secondaryIpSet").SecondaryIpSet;
export const SecondaryIpSet: typeof import("./secondaryIpSet").SecondaryIpSet = null as any;
utilities.lazyLoad(exports, ["SecondaryIpSet"], () => require("./secondaryIpSet"));

export { TemplateArgs, TemplateState } from "./template";
export type Template = import("./template").Template;
export const Template: typeof import("./template").Template = null as any;
utilities.lazyLoad(exports, ["Template"], () => require("./template"));

export { TemplateRecordArgs, TemplateRecordState } from "./templateRecord";
export type TemplateRecord = import("./templateRecord").TemplateRecord;
export const TemplateRecord: typeof import("./templateRecord").TemplateRecord = null as any;
utilities.lazyLoad(exports, ["TemplateRecord"], () => require("./templateRecord"));

export { TransferAclArgs, TransferAclState } from "./transferAcl";
export type TransferAcl = import("./transferAcl").TransferAcl;
export const TransferAcl: typeof import("./transferAcl").TransferAcl = null as any;
utilities.lazyLoad(exports, ["TransferAcl"], () => require("./transferAcl"));

export { VanityNameserverRecordArgs, VanityNameserverRecordState } from "./vanityNameserverRecord";
export type VanityNameserverRecord = import("./vanityNameserverRecord").VanityNameserverRecord;
export const VanityNameserverRecord: typeof import("./vanityNameserverRecord").VanityNameserverRecord = null as any;
utilities.lazyLoad(exports, ["VanityNameserverRecord"], () => require("./vanityNameserverRecord"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "dme:index/contactList:ContactList":
                return new ContactList(name, <any>undefined, { urn })
            case "dme:index/customSoaRecord:CustomSoaRecord":
                return new CustomSoaRecord(name, <any>undefined, { urn })
            case "dme:index/dnsRecord:DnsRecord":
                return new DnsRecord(name, <any>undefined, { urn })
            case "dme:index/domain:Domain":
                return new Domain(name, <any>undefined, { urn })
            case "dme:index/failover:Failover":
                return new Failover(name, <any>undefined, { urn })
            case "dme:index/folderRecord:FolderRecord":
                return new FolderRecord(name, <any>undefined, { urn })
            case "dme:index/secondaryDns:SecondaryDns":
                return new SecondaryDns(name, <any>undefined, { urn })
            case "dme:index/secondaryIpSet:SecondaryIpSet":
                return new SecondaryIpSet(name, <any>undefined, { urn })
            case "dme:index/template:Template":
                return new Template(name, <any>undefined, { urn })
            case "dme:index/templateRecord:TemplateRecord":
                return new TemplateRecord(name, <any>undefined, { urn })
            case "dme:index/transferAcl:TransferAcl":
                return new TransferAcl(name, <any>undefined, { urn })
            case "dme:index/vanityNameserverRecord:VanityNameserverRecord":
                return new VanityNameserverRecord(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("dme", "index/contactList", _module)
pulumi.runtime.registerResourceModule("dme", "index/customSoaRecord", _module)
pulumi.runtime.registerResourceModule("dme", "index/dnsRecord", _module)
pulumi.runtime.registerResourceModule("dme", "index/domain", _module)
pulumi.runtime.registerResourceModule("dme", "index/failover", _module)
pulumi.runtime.registerResourceModule("dme", "index/folderRecord", _module)
pulumi.runtime.registerResourceModule("dme", "index/secondaryDns", _module)
pulumi.runtime.registerResourceModule("dme", "index/secondaryIpSet", _module)
pulumi.runtime.registerResourceModule("dme", "index/template", _module)
pulumi.runtime.registerResourceModule("dme", "index/templateRecord", _module)
pulumi.runtime.registerResourceModule("dme", "index/transferAcl", _module)
pulumi.runtime.registerResourceModule("dme", "index/vanityNameserverRecord", _module)
pulumi.runtime.registerResourcePackage("dme", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:dme") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
