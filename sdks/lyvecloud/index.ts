// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { GetS3BucketArgs, GetS3BucketResult, GetS3BucketOutputArgs } from "./getS3Bucket";
export const getS3Bucket: typeof import("./getS3Bucket").getS3Bucket = null as any;
export const getS3BucketOutput: typeof import("./getS3Bucket").getS3BucketOutput = null as any;
utilities.lazyLoad(exports, ["getS3Bucket","getS3BucketOutput"], () => require("./getS3Bucket"));

export { GetS3ObjectArgs, GetS3ObjectResult, GetS3ObjectOutputArgs } from "./getS3Object";
export const getS3Object: typeof import("./getS3Object").getS3Object = null as any;
export const getS3ObjectOutput: typeof import("./getS3Object").getS3ObjectOutput = null as any;
utilities.lazyLoad(exports, ["getS3Object","getS3ObjectOutput"], () => require("./getS3Object"));

export { PermissionArgs, PermissionState } from "./permission";
export type Permission = import("./permission").Permission;
export const Permission: typeof import("./permission").Permission = null as any;
utilities.lazyLoad(exports, ["Permission"], () => require("./permission"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { S3BucketArgs, S3BucketState } from "./s3bucket";
export type S3Bucket = import("./s3bucket").S3Bucket;
export const S3Bucket: typeof import("./s3bucket").S3Bucket = null as any;
utilities.lazyLoad(exports, ["S3Bucket"], () => require("./s3bucket"));

export { S3BucketObjectLockConfigurationArgs, S3BucketObjectLockConfigurationState } from "./s3bucketObjectLockConfiguration";
export type S3BucketObjectLockConfiguration = import("./s3bucketObjectLockConfiguration").S3BucketObjectLockConfiguration;
export const S3BucketObjectLockConfiguration: typeof import("./s3bucketObjectLockConfiguration").S3BucketObjectLockConfiguration = null as any;
utilities.lazyLoad(exports, ["S3BucketObjectLockConfiguration"], () => require("./s3bucketObjectLockConfiguration"));

export { S3ObjectArgs, S3ObjectState } from "./s3object";
export type S3Object = import("./s3object").S3Object;
export const S3Object: typeof import("./s3object").S3Object = null as any;
utilities.lazyLoad(exports, ["S3Object"], () => require("./s3object"));

export { S3ObjectCopyArgs, S3ObjectCopyState } from "./s3objectCopy";
export type S3ObjectCopy = import("./s3objectCopy").S3ObjectCopy;
export const S3ObjectCopy: typeof import("./s3objectCopy").S3ObjectCopy = null as any;
utilities.lazyLoad(exports, ["S3ObjectCopy"], () => require("./s3objectCopy"));

export { ServiceAccountArgs, ServiceAccountState } from "./serviceAccount";
export type ServiceAccount = import("./serviceAccount").ServiceAccount;
export const ServiceAccount: typeof import("./serviceAccount").ServiceAccount = null as any;
utilities.lazyLoad(exports, ["ServiceAccount"], () => require("./serviceAccount"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "lyvecloud:index/permission:Permission":
                return new Permission(name, <any>undefined, { urn })
            case "lyvecloud:index/s3Bucket:S3Bucket":
                return new S3Bucket(name, <any>undefined, { urn })
            case "lyvecloud:index/s3BucketObjectLockConfiguration:S3BucketObjectLockConfiguration":
                return new S3BucketObjectLockConfiguration(name, <any>undefined, { urn })
            case "lyvecloud:index/s3Object:S3Object":
                return new S3Object(name, <any>undefined, { urn })
            case "lyvecloud:index/s3ObjectCopy:S3ObjectCopy":
                return new S3ObjectCopy(name, <any>undefined, { urn })
            case "lyvecloud:index/serviceAccount:ServiceAccount":
                return new ServiceAccount(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("lyvecloud", "index/permission", _module)
pulumi.runtime.registerResourceModule("lyvecloud", "index/s3Bucket", _module)
pulumi.runtime.registerResourceModule("lyvecloud", "index/s3BucketObjectLockConfiguration", _module)
pulumi.runtime.registerResourceModule("lyvecloud", "index/s3Object", _module)
pulumi.runtime.registerResourceModule("lyvecloud", "index/s3ObjectCopy", _module)
pulumi.runtime.registerResourceModule("lyvecloud", "index/serviceAccount", _module)
pulumi.runtime.registerResourcePackage("lyvecloud", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:lyvecloud") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
