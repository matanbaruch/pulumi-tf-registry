// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEnforcements(args?: GetEnforcementsArgs, opts?: pulumi.InvokeOptions): Promise<GetEnforcementsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("keeper:index/getEnforcements:getEnforcements", {
        "account": args.account,
        "allowIpList": args.allowIpList,
        "keeperFill": args.keeperFill,
        "login": args.login,
        "platform": args.platform,
        "recordTypes": args.recordTypes,
        "sharing": args.sharing,
        "twoFactor": args.twoFactor,
        "vault": args.vault,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEnforcements.
 */
export interface GetEnforcementsArgs {
    account?: inputs.GetEnforcementsAccount;
    allowIpList?: inputs.GetEnforcementsAllowIpList;
    keeperFill?: inputs.GetEnforcementsKeeperFill;
    login?: inputs.GetEnforcementsLogin;
    platform?: inputs.GetEnforcementsPlatform;
    recordTypes?: inputs.GetEnforcementsRecordTypes;
    sharing?: inputs.GetEnforcementsSharing;
    twoFactor?: inputs.GetEnforcementsTwoFactor;
    vault?: inputs.GetEnforcementsVault;
}

/**
 * A collection of values returned by getEnforcements.
 */
export interface GetEnforcementsResult {
    readonly account: outputs.GetEnforcementsAccount;
    readonly allowIpList: outputs.GetEnforcementsAllowIpList;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly keeperFill: outputs.GetEnforcementsKeeperFill;
    readonly login: outputs.GetEnforcementsLogin;
    readonly platform: outputs.GetEnforcementsPlatform;
    readonly recordTypes: outputs.GetEnforcementsRecordTypes;
    readonly sharing: outputs.GetEnforcementsSharing;
    readonly twoFactor: outputs.GetEnforcementsTwoFactor;
    readonly vault: outputs.GetEnforcementsVault;
}
export function getEnforcementsOutput(args?: GetEnforcementsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEnforcementsResult> {
    return pulumi.output(args).apply((a: any) => getEnforcements(a, opts))
}

/**
 * A collection of arguments for invoking getEnforcements.
 */
export interface GetEnforcementsOutputArgs {
    account?: pulumi.Input<inputs.GetEnforcementsAccountArgs>;
    allowIpList?: pulumi.Input<inputs.GetEnforcementsAllowIpListArgs>;
    keeperFill?: pulumi.Input<inputs.GetEnforcementsKeeperFillArgs>;
    login?: pulumi.Input<inputs.GetEnforcementsLoginArgs>;
    platform?: pulumi.Input<inputs.GetEnforcementsPlatformArgs>;
    recordTypes?: pulumi.Input<inputs.GetEnforcementsRecordTypesArgs>;
    sharing?: pulumi.Input<inputs.GetEnforcementsSharingArgs>;
    twoFactor?: pulumi.Input<inputs.GetEnforcementsTwoFactorArgs>;
    vault?: pulumi.Input<inputs.GetEnforcementsVaultArgs>;
}
