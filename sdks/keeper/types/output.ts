// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface GetEnforcementsAccount {
    /**
     * Allow PAM discovery
     */
    allowPamDiscovery?: boolean;
    /**
     * Allow PAM rotation
     */
    allowPamRotation?: boolean;
    /**
     * Allow Keeper Secret Manager access
     */
    allowSecretsManager?: boolean;
    /**
     * Disable onboarding
     */
    disableOnboarding?: boolean;
    /**
     * Disable setup-tour
     */
    disableSetupTour?: boolean;
    /**
     * Disallow v2 clients
     */
    disallowV2Clients?: boolean;
    /**
     * Automatic-logout delay for desktop client
     */
    logoutTimerDesktop?: number;
    /**
     * Automatic-logout delay for mobile client
     */
    logoutTimerMobile?: number;
    /**
     * Automatic-logout delay for web client
     */
    logoutTimerWeb?: number;
    /**
     * Max session login time
     */
    maxSessionLoginTime?: number;
    /**
     * Maximum record-size
     */
    maximumRecordSize?: number;
    /**
     * Minimum PBKDF2 iterations
     */
    minimumPbkdf2Iterations?: number;
    /**
     * Require account recovery approval
     */
    requireAccountRecoveryApproval?: boolean;
    /**
     * Require device approval
     */
    requireDeviceApproval?: boolean;
    /**
     * Require security key PIN
     */
    requireSecurityKeyPin?: boolean;
    /**
     * Require self-destruct
     */
    requireSelfDestruct?: boolean;
    /**
     * Resend enterprise invite in X days
     */
    resendEnterpriseInviteInXDays?: number;
    /**
     * Restrict Account Recovery
     */
    restrictAccountRecovery?: boolean;
    /**
     * Restrict change of email address
     */
    restrictEmailChange?: boolean;
    /**
     * Restrict shared-folder imports
     */
    restrictImportSharedFolders?: boolean;
    /**
     * Restrict IP auto-approval
     */
    restrictIpAutoapproval?: boolean;
    /**
     * Restrict offline access
     */
    restrictOfflineAccess?: boolean;
    /**
     * Restrict persistent login
     */
    restrictPersistentLogin?: boolean;
    /**
     * Restrict use of personal license
     */
    restrictPersonalLicense?: boolean;
    /**
     * Send invite at registration
     */
    sendInviteAtRegistration?: boolean;
    /**
     * Enable staying logged-in by default
     */
    stayLoggedInDefault?: boolean;
}

export interface GetEnforcementsAllowIpList {
    /**
     * Restrict IP addresses
     */
    restrictIpAddresses?: string[];
    /**
     * Restrict vault-access from IP addresses
     */
    restrictVaultIpAddresses?: string[];
    /**
     * Restrict allowed IP ranges for tip zone
     */
    tipZoneRestrictAllowedIpRanges?: string[];
}

export interface GetEnforcementsKeeperFill {
    /**
     * Keeper Fill auto-fill
     */
    keeperFillAutoFill?: string;
    /**
     * Keeper Fill auto-submit
     */
    keeperFillAutoSubmit?: string;
    /**
     * Keeper auto-fill suggestion
     */
    keeperFillAutoSuggest?: string;
    /**
     * Keeper Fill hover locks
     */
    keeperFillHoverLocks?: string;
    /**
     * Keeper Fill subdomains to match on
     */
    keeperFillMatchOnSubdomain?: string;
    /**
     * Master password re-entry
     */
    masterPasswordReentry?: string;
    /**
     * Restrict auto-fill
     */
    restrictAutoFill?: boolean;
    /**
     * Restrict auto-submit
     */
    restrictAutoSubmit?: boolean;
    /**
     * Restrict access to domain(s)
     */
    restrictDomainAccess?: string;
    /**
     * Restrict creation of new records for domain(s)
     */
    restrictDomainCreate?: string;
    /**
     * Restrict hover-locks
     */
    restrictHoverLocks?: boolean;
    /**
     * Restrict HTTP fill warning
     */
    restrictHttpFillWarning?: boolean;
    /**
     * Restrict prompt to change
     */
    restrictPromptToChange?: boolean;
    /**
     * Restrict prompt to disable Keeper Fill
     */
    restrictPromptToDisable?: boolean;
    /**
     * Restrict prompt to fill
     */
    restrictPromptToFill?: boolean;
    /**
     * Restrict prompt to login
     */
    restrictPromptToLogin?: boolean;
    /**
     * Restrict prompt to save
     */
    restrictPromptToSave?: boolean;
}

export interface GetEnforcementsLogin {
    /**
     * Allow alternate passwords
     */
    allowAlternatePasswords?: boolean;
    /**
     * Master password expiration
     */
    masterPasswordExpiredAsOf?: number;
    /**
     * Maximum days before master password change
     */
    masterPasswordMaximumDaysBeforeChange?: number;
    /**
     * Minimum # of digits required for master password
     */
    masterPasswordMinimumDigits?: number;
    /**
     * Minimum length required for master password
     */
    masterPasswordMinimumLength?: number;
    /**
     * Minimum # of lower-case characters required for master password
     */
    masterPasswordMinimumLower?: number;
    /**
     * Minimum # of special characters required for master password
     */
    masterPasswordMinimumSpecial?: number;
    /**
     * Minimum # of upper-case characters required for master password
     */
    masterPasswordMinimumUpper?: number;
    /**
     * # of days before master password can be re-used
     */
    masterPasswordRestrictDaysBeforeReuse?: number;
    /**
     * Restrict Android fingerprint login
     */
    restrictAndroidFingerprint?: boolean;
    /**
     * Restrict iOS fingerprint login
     */
    restrictIosFingerprint?: boolean;
    /**
     * Restrict MacOS fingerprint login
     */
    restrictMacFingerprint?: boolean;
    /**
     * Restrict Windows fingerprint login
     */
    restrictWindowsFingerprint?: boolean;
}

export interface GetEnforcementsPlatform {
    /**
     * Restrict access to Keeper Chat for desktop
     */
    restrictChatDesktopAccess?: boolean;
    /**
     * Restrict access to Keeper Chat for mobile
     */
    restrictChatMobileAccess?: boolean;
    /**
     * Restrict access to Keeper Commander
     */
    restrictCommanderAccess?: boolean;
    /**
     * Restrict access to Keeper Vault for desktop
     */
    restrictDesktopAccess?: boolean;
    /**
     * Restrict access to Keeper Desktop for MacOS
     */
    restrictDesktopMacAccess?: boolean;
    /**
     * Restrict access to Keeper Desktop for Windows
     */
    restrictDesktopWinAccess?: boolean;
    /**
     * Restrict access to Keeper browser extensions
     */
    restrictExtensionsAccess?: boolean;
    /**
     * Restrict access to Keeper Vault for mobile
     */
    restrictMobileAccess?: boolean;
    /**
     * Restrict access to Keeper Vault for Android
     */
    restrictMobileAndroidAccess?: boolean;
    /**
     * Restrict access to Keeper Vault for iOS
     */
    restrictMobileIosAccess?: boolean;
    /**
     * Restrict access to Keeper Vault for Windows mobile
     */
    restrictMobileWindowsPhoneAccess?: boolean;
    /**
     * Restrict access to Keeper Vault for web
     */
    restrictWebVaultAccess?: boolean;
}

export interface GetEnforcementsRecordTypes {
    /**
     * Restrict record-types
     */
    restrictRecordTypes?: string[];
}

export interface GetEnforcementsSharing {
    /**
     * Require account-share
     */
    requireAccountShare?: number;
    /**
     * Restrict shared-folder creation
     */
    restrictCreateSharedFolder?: boolean;
    /**
     * Restrict record exports
     */
    restrictExport?: boolean;
    /**
     * Restrict file uploads
     */
    restrictFileUpload?: boolean;
    /**
     * Restrict record imports
     */
    restrictImport?: boolean;
    /**
     * Restrict link-sharing
     */
    restrictLinkSharing?: boolean;
    /**
     * Restrict all incoming sharing
     */
    restrictSharingAllIncoming?: boolean;
    /**
     * Restrict all outgoing sharing
     */
    restrictSharingAllOutgoing?: boolean;
    /**
     * Restrict sharing from outside the enterprise
     */
    restrictSharingEnterpriseIncoming?: boolean;
    /**
     * Restrict sharing to outside the enterprise
     */
    restrictSharingEnterpriseOutgoing?: boolean;
    /**
     * Restrict sharing outside of isolated nodes
     */
    restrictSharingOutsideOfIsolatedNodes?: boolean;
    /**
     * Restrict record sharing within shared-folders
     */
    restrictSharingRecordToSharedFolders?: boolean;
    /**
     * Restrict sharing records with attachments
     */
    restrictSharingRecordWithAttachments?: boolean;
}

export interface GetEnforcementsTwoFactor {
    /**
     * Require 2fa for login
     */
    requireTwoFactor?: boolean;
    /**
     * Restrict use of KeeperDNA for 2fa
     */
    restrictTwoFactorChannelDna?: boolean;
    /**
     * Restrict use of DUO for 2fa
     */
    restrictTwoFactorChannelDuo?: boolean;
    /**
     * Restrict use of Google Authenticator for 2fa
     */
    restrictTwoFactorChannelGoogle?: boolean;
    /**
     * Restrict use of RSA SecurID for 2fa
     */
    restrictTwoFactorChannelRsa?: boolean;
    /**
     * Restrict use of security keys (FIDO2 WebAuthn) for 2fa
     */
    restrictTwoFactorChannelSecurityKeys?: boolean;
    /**
     * Restrict use of SMS/text message for 2fa
     */
    restrictTwoFactorChannelText?: boolean;
    /**
     * 2fa duration for desktop client app
     */
    twoFactorDurationDesktop?: string;
    /**
     * 2fa duration for mobile client app
     */
    twoFactorDurationMobile?: string;
    /**
     * 2fa duration for web client app
     */
    twoFactorDurationWeb?: string;
}

export interface GetEnforcementsVault {
    /**
     * # of days before deleted records are automatically cleared
     */
    daysBeforeDeletedRecordsAutoCleared?: number;
    /**
     * # of days before deleted records are automatically cleared permanently
     */
    daysBeforeDeletedRecordsClearedPerm?: number;
    /**
     * Generated password complexity
     */
    generatedPasswordComplexity?: string;
    /**
     * Generated security question complexity
     */
    generatedSecurityQuestionComplexity?: string;
    /**
     * Mask custom fields
     */
    maskCustomFields?: boolean;
    /**
     * Mask notes
     */
    maskNotes?: boolean;
    /**
     * Mask passwords while editing
     */
    maskPasswordsWhileEditing?: boolean;
    /**
     * Restrict BreachWatch
     */
    restrictBreachWatch?: boolean;
    /**
     * Restrict creation of folders
     */
    restrictCreateFolder?: boolean;
    /**
     * Restrict creation of folders to within shared-folders only
     */
    restrictCreateFolderToOnlySharedFolders?: boolean;
    /**
     * Restrict creation of identity payment records
     */
    restrictCreateIdentityPaymentRecords?: boolean;
    /**
     * Restrict creation of records
     */
    restrictCreateRecord?: boolean;
    /**
     * Restrict record creation within shared-folders
     */
    restrictCreateRecordToSharedFolders?: boolean;
    /**
     * Send BreachWatch events
     */
    sendBreachWatchEvents?: boolean;
}

export interface GetNodeBridge {
    /**
     * Bridge ID
     */
    bridgeId: number;
    /**
     * Bridge Status
     */
    status: string;
}

export interface GetNodeScim {
    /**
     * SCIM Role Prefix
     */
    rolePrefix: string;
    /**
     * SCIM ID
     */
    scimId: number;
    /**
     * SCIM Status
     */
    status: string;
}

export interface GetNodeSsoProviderInCloud {
    /**
     * Is SSO service active?
     */
    isActive: boolean;
    /**
     * SSO service provider name
     */
    name: string;
    /**
     * SSO service provider ID
     */
    providerId: number;
    /**
     * SSO service provider URL
     */
    url: string;
}

export interface GetNodeSsoProviderOnPremise {
    /**
     * Is SSO service active?
     */
    isActive: boolean;
    /**
     * SSO service provider name
     */
    name: string;
    /**
     * SSO service provider ID
     */
    providerId: number;
    /**
     * SSO service provider URL
     */
    url: string;
}

export interface GetNodesFilter {
    /**
     * Comparison operation
     */
    cmp?: string;
    /**
     * Field Name
     */
    field: string;
    /**
     * Comparison value
     */
    value: string;
}

export interface GetNodesNode {
    /**
     * Bridge ID
     */
    bridgeId: number;
    /**
     * DUO Enabled
     */
    duoEnabled: boolean;
    /**
     * Node Name
     */
    name: string;
    /**
     * Node ID
     */
    nodeId: number;
    /**
     * Parent Node ID
     */
    parentId: number;
    /**
     * Restrict Node Visibility
     */
    restrictVisibility: boolean;
    /**
     * RSA Configured
     */
    rsaEnabled: boolean;
    /**
     * SCIM ID
     */
    scimId: number;
    ssoProviderIds: number[];
}

export interface GetNodesSubnodes {
    /**
     * Traverse node structure
     */
    cascade?: boolean;
    /**
     * Include base node to result
     */
    includeParent?: boolean;
    /**
     * Base Node ID
     */
    nodeId: number;
}

export interface GetRoleEnforcements {
    /**
     * Account-related enforcements
     */
    account: outputs.GetRoleEnforcementsAccount;
    /**
     * IP whitelist enforcements
     */
    allowIpList: outputs.GetRoleEnforcementsAllowIpList;
    /**
     * Keeper Fill enforcements
     */
    keeperFill: outputs.GetRoleEnforcementsKeeperFill;
    /**
     * Login-related enforcements
     */
    login: outputs.GetRoleEnforcementsLogin;
    /**
     * Keeper platform enforcements
     */
    platform: outputs.GetRoleEnforcementsPlatform;
    /**
     * Record-type enforcements
     */
    recordTypes: outputs.GetRoleEnforcementsRecordTypes;
    /**
     * Sharing enforcements
     */
    sharing: outputs.GetRoleEnforcementsSharing;
    /**
     * 2FA enforcements
     */
    twoFactor: outputs.GetRoleEnforcementsTwoFactor;
    /**
     * Vault-related enforcements
     */
    vault: outputs.GetRoleEnforcementsVault;
}

export interface GetRoleEnforcementsAccount {
    /**
     * Allow PAM discovery
     */
    allowPamDiscovery?: boolean;
    /**
     * Allow PAM rotation
     */
    allowPamRotation?: boolean;
    /**
     * Allow Keeper Secret Manager access
     */
    allowSecretsManager?: boolean;
    /**
     * Disable onboarding
     */
    disableOnboarding?: boolean;
    /**
     * Disable setup-tour
     */
    disableSetupTour?: boolean;
    /**
     * Disallow v2 clients
     */
    disallowV2Clients?: boolean;
    /**
     * Automatic-logout delay for desktop client
     */
    logoutTimerDesktop?: number;
    /**
     * Automatic-logout delay for mobile client
     */
    logoutTimerMobile?: number;
    /**
     * Automatic-logout delay for web client
     */
    logoutTimerWeb?: number;
    /**
     * Max session login time
     */
    maxSessionLoginTime?: number;
    /**
     * Maximum record-size
     */
    maximumRecordSize?: number;
    /**
     * Minimum PBKDF2 iterations
     */
    minimumPbkdf2Iterations?: number;
    /**
     * Require account recovery approval
     */
    requireAccountRecoveryApproval?: boolean;
    /**
     * Require device approval
     */
    requireDeviceApproval?: boolean;
    /**
     * Require security key PIN
     */
    requireSecurityKeyPin?: boolean;
    /**
     * Require self-destruct
     */
    requireSelfDestruct?: boolean;
    /**
     * Resend enterprise invite in X days
     */
    resendEnterpriseInviteInXDays?: number;
    /**
     * Restrict Account Recovery
     */
    restrictAccountRecovery?: boolean;
    /**
     * Restrict change of email address
     */
    restrictEmailChange?: boolean;
    /**
     * Restrict shared-folder imports
     */
    restrictImportSharedFolders?: boolean;
    /**
     * Restrict IP auto-approval
     */
    restrictIpAutoapproval?: boolean;
    /**
     * Restrict offline access
     */
    restrictOfflineAccess?: boolean;
    /**
     * Restrict persistent login
     */
    restrictPersistentLogin?: boolean;
    /**
     * Restrict use of personal license
     */
    restrictPersonalLicense?: boolean;
    /**
     * Send invite at registration
     */
    sendInviteAtRegistration?: boolean;
    /**
     * Enable staying logged-in by default
     */
    stayLoggedInDefault?: boolean;
}

export interface GetRoleEnforcementsAllowIpList {
    /**
     * Restrict IP addresses
     */
    restrictIpAddresses?: string[];
    /**
     * Restrict vault-access from IP addresses
     */
    restrictVaultIpAddresses?: string[];
    /**
     * Restrict allowed IP ranges for tip zone
     */
    tipZoneRestrictAllowedIpRanges?: string[];
}

export interface GetRoleEnforcementsKeeperFill {
    /**
     * Keeper Fill auto-fill
     */
    keeperFillAutoFill?: string;
    /**
     * Keeper Fill auto-submit
     */
    keeperFillAutoSubmit?: string;
    /**
     * Keeper auto-fill suggestion
     */
    keeperFillAutoSuggest?: string;
    /**
     * Keeper Fill hover locks
     */
    keeperFillHoverLocks?: string;
    /**
     * Keeper Fill subdomains to match on
     */
    keeperFillMatchOnSubdomain?: string;
    /**
     * Master password re-entry
     */
    masterPasswordReentry?: string;
    /**
     * Restrict auto-fill
     */
    restrictAutoFill?: boolean;
    /**
     * Restrict auto-submit
     */
    restrictAutoSubmit?: boolean;
    /**
     * Restrict access to domain(s)
     */
    restrictDomainAccess?: string;
    /**
     * Restrict creation of new records for domain(s)
     */
    restrictDomainCreate?: string;
    /**
     * Restrict hover-locks
     */
    restrictHoverLocks?: boolean;
    /**
     * Restrict HTTP fill warning
     */
    restrictHttpFillWarning?: boolean;
    /**
     * Restrict prompt to change
     */
    restrictPromptToChange?: boolean;
    /**
     * Restrict prompt to disable Keeper Fill
     */
    restrictPromptToDisable?: boolean;
    /**
     * Restrict prompt to fill
     */
    restrictPromptToFill?: boolean;
    /**
     * Restrict prompt to login
     */
    restrictPromptToLogin?: boolean;
    /**
     * Restrict prompt to save
     */
    restrictPromptToSave?: boolean;
}

export interface GetRoleEnforcementsLogin {
    /**
     * Allow alternate passwords
     */
    allowAlternatePasswords?: boolean;
    /**
     * Master password expiration
     */
    masterPasswordExpiredAsOf?: number;
    /**
     * Maximum days before master password change
     */
    masterPasswordMaximumDaysBeforeChange?: number;
    /**
     * Minimum # of digits required for master password
     */
    masterPasswordMinimumDigits?: number;
    /**
     * Minimum length required for master password
     */
    masterPasswordMinimumLength?: number;
    /**
     * Minimum # of lower-case characters required for master password
     */
    masterPasswordMinimumLower?: number;
    /**
     * Minimum # of special characters required for master password
     */
    masterPasswordMinimumSpecial?: number;
    /**
     * Minimum # of upper-case characters required for master password
     */
    masterPasswordMinimumUpper?: number;
    /**
     * # of days before master password can be re-used
     */
    masterPasswordRestrictDaysBeforeReuse?: number;
    /**
     * Restrict Android fingerprint login
     */
    restrictAndroidFingerprint?: boolean;
    /**
     * Restrict iOS fingerprint login
     */
    restrictIosFingerprint?: boolean;
    /**
     * Restrict MacOS fingerprint login
     */
    restrictMacFingerprint?: boolean;
    /**
     * Restrict Windows fingerprint login
     */
    restrictWindowsFingerprint?: boolean;
}

export interface GetRoleEnforcementsPlatform {
    /**
     * Restrict access to Keeper Chat for desktop
     */
    restrictChatDesktopAccess?: boolean;
    /**
     * Restrict access to Keeper Chat for mobile
     */
    restrictChatMobileAccess?: boolean;
    /**
     * Restrict access to Keeper Commander
     */
    restrictCommanderAccess?: boolean;
    /**
     * Restrict access to Keeper Vault for desktop
     */
    restrictDesktopAccess?: boolean;
    /**
     * Restrict access to Keeper Desktop for MacOS
     */
    restrictDesktopMacAccess?: boolean;
    /**
     * Restrict access to Keeper Desktop for Windows
     */
    restrictDesktopWinAccess?: boolean;
    /**
     * Restrict access to Keeper browser extensions
     */
    restrictExtensionsAccess?: boolean;
    /**
     * Restrict access to Keeper Vault for mobile
     */
    restrictMobileAccess?: boolean;
    /**
     * Restrict access to Keeper Vault for Android
     */
    restrictMobileAndroidAccess?: boolean;
    /**
     * Restrict access to Keeper Vault for iOS
     */
    restrictMobileIosAccess?: boolean;
    /**
     * Restrict access to Keeper Vault for Windows mobile
     */
    restrictMobileWindowsPhoneAccess?: boolean;
    /**
     * Restrict access to Keeper Vault for web
     */
    restrictWebVaultAccess?: boolean;
}

export interface GetRoleEnforcementsRecordTypes {
    /**
     * Restrict record-types
     */
    restrictRecordTypes?: string[];
}

export interface GetRoleEnforcementsSharing {
    /**
     * Require account-share
     */
    requireAccountShare?: number;
    /**
     * Restrict shared-folder creation
     */
    restrictCreateSharedFolder?: boolean;
    /**
     * Restrict record exports
     */
    restrictExport?: boolean;
    /**
     * Restrict file uploads
     */
    restrictFileUpload?: boolean;
    /**
     * Restrict record imports
     */
    restrictImport?: boolean;
    /**
     * Restrict link-sharing
     */
    restrictLinkSharing?: boolean;
    /**
     * Restrict all incoming sharing
     */
    restrictSharingAllIncoming?: boolean;
    /**
     * Restrict all outgoing sharing
     */
    restrictSharingAllOutgoing?: boolean;
    /**
     * Restrict sharing from outside the enterprise
     */
    restrictSharingEnterpriseIncoming?: boolean;
    /**
     * Restrict sharing to outside the enterprise
     */
    restrictSharingEnterpriseOutgoing?: boolean;
    /**
     * Restrict sharing outside of isolated nodes
     */
    restrictSharingOutsideOfIsolatedNodes?: boolean;
    /**
     * Restrict record sharing within shared-folders
     */
    restrictSharingRecordToSharedFolders?: boolean;
    /**
     * Restrict sharing records with attachments
     */
    restrictSharingRecordWithAttachments?: boolean;
}

export interface GetRoleEnforcementsTwoFactor {
    /**
     * Require 2fa for login
     */
    requireTwoFactor?: boolean;
    /**
     * Restrict use of KeeperDNA for 2fa
     */
    restrictTwoFactorChannelDna?: boolean;
    /**
     * Restrict use of DUO for 2fa
     */
    restrictTwoFactorChannelDuo?: boolean;
    /**
     * Restrict use of Google Authenticator for 2fa
     */
    restrictTwoFactorChannelGoogle?: boolean;
    /**
     * Restrict use of RSA SecurID for 2fa
     */
    restrictTwoFactorChannelRsa?: boolean;
    /**
     * Restrict use of security keys (FIDO2 WebAuthn) for 2fa
     */
    restrictTwoFactorChannelSecurityKeys?: boolean;
    /**
     * Restrict use of SMS/text message for 2fa
     */
    restrictTwoFactorChannelText?: boolean;
    /**
     * 2fa duration for desktop client app
     */
    twoFactorDurationDesktop?: string;
    /**
     * 2fa duration for mobile client app
     */
    twoFactorDurationMobile?: string;
    /**
     * 2fa duration for web client app
     */
    twoFactorDurationWeb?: string;
}

export interface GetRoleEnforcementsVault {
    /**
     * # of days before deleted records are automatically cleared
     */
    daysBeforeDeletedRecordsAutoCleared?: number;
    /**
     * # of days before deleted records are automatically cleared permanently
     */
    daysBeforeDeletedRecordsClearedPerm?: number;
    /**
     * Generated password complexity
     */
    generatedPasswordComplexity?: string;
    /**
     * Generated security question complexity
     */
    generatedSecurityQuestionComplexity?: string;
    /**
     * Mask custom fields
     */
    maskCustomFields?: boolean;
    /**
     * Mask notes
     */
    maskNotes?: boolean;
    /**
     * Mask passwords while editing
     */
    maskPasswordsWhileEditing?: boolean;
    /**
     * Restrict BreachWatch
     */
    restrictBreachWatch?: boolean;
    /**
     * Restrict creation of folders
     */
    restrictCreateFolder?: boolean;
    /**
     * Restrict creation of folders to within shared-folders only
     */
    restrictCreateFolderToOnlySharedFolders?: boolean;
    /**
     * Restrict creation of identity payment records
     */
    restrictCreateIdentityPaymentRecords?: boolean;
    /**
     * Restrict creation of records
     */
    restrictCreateRecord?: boolean;
    /**
     * Restrict record creation within shared-folders
     */
    restrictCreateRecordToSharedFolders?: boolean;
    /**
     * Send BreachWatch events
     */
    sendBreachWatchEvents?: boolean;
}

export interface GetRoleManagedNode {
    /**
     * Cascade Node Management
     */
    cascadeNodeManagement: boolean;
    /**
     * Managed Node Name
     */
    name: string;
    /**
     * Managed Node ID
     */
    nodeId: number;
    /**
     * Privileges
     */
    privileges?: outputs.GetRoleManagedNodePrivileges;
}

export interface GetRoleManagedNodePrivileges {
    /**
     * Perform Device Approvals
     */
    deviceApproval: boolean;
    /**
     * Manage Companies
     */
    manageCompanies: boolean;
    /**
     * Manage Nodes
     */
    manageNodes: boolean;
    /**
     * This permission allows the admin rights to create, edit, or delete Record Types which have pre-defined fields. Record Types appear during creation of records in the user's vault.
     */
    manageRecordTypes: boolean;
    /**
     * Manage Reporting and Alerts
     */
    manageReports: boolean;
    /**
     * Manage Roles
     */
    manageRoles: boolean;
    /**
     * Manage Bridge/SSO
     */
    manageSso: boolean;
    /**
     * Manage Teams
     */
    manageTeams: boolean;
    /**
     * Manage Users
     */
    manageUsers: boolean;
    /**
     * Run Compliance Reports
     */
    runComplianceReports: boolean;
    /**
     * Share Admin
     */
    shareAdmin: boolean;
    /**
     * Transfer Account
     */
    transferAccount: boolean;
}

export interface GetRoleNode {
    /**
     * Role Name
     */
    name: string;
    /**
     * Role Node ID
     */
    nodeId: number;
}

export interface GetRoleTeam {
    /**
     * Team Name
     */
    name: string;
    /**
     * Team UID
     */
    teamUid: string;
}

export interface GetRoleUser {
    /**
     * Enterprise User ID
     */
    enterpriseUserId: number;
    /**
     * User Status: active | invited | locked | blocked | pending
     */
    status: string;
    /**
     * Email
     */
    username: string;
}

export interface GetRolesFilter {
    /**
     * Comparison operation
     */
    cmp?: string;
    /**
     * Field Name
     */
    field: string;
    /**
     * Comparison value
     */
    value: string;
}

export interface GetRolesNodes {
    /**
     * Include subnodes
     */
    cascade?: boolean;
    /**
     * Base Node ID
     */
    nodeId: number;
}

export interface GetRolesRole {
    /**
     * Is Administrative Role
     */
    isAdmin: boolean;
    /**
     * Role Name
     */
    name: string;
    /**
     * New User Inherit
     */
    newUserInherit: boolean;
    /**
     * Role Node ID
     */
    nodeId: number;
    /**
     * Role ID
     */
    roleId: number;
    /**
     * Visible Below
     */
    visibleBelow: boolean;
}

export interface GetTeamRole {
    /**
     * Is Administrative Role
     */
    isAdmin: boolean;
    /**
     * Role Name
     */
    name: string;
    /**
     * Role Node ID
     */
    nodeId: number;
    /**
     * Role ID
     */
    roleId: number;
}

export interface GetTeamUser {
    /**
     * Enterprise User ID
     */
    enterpriseUserId: number;
    /**
     * User Status: active | invited | locked | blocked | pending
     */
    status: string;
    /**
     * Email
     */
    username: string;
}

export interface GetTeamsFilter {
    /**
     * Comparison operation
     */
    cmp?: string;
    /**
     * Field Name
     */
    field: string;
    /**
     * Comparison value
     */
    value: string;
}

export interface GetTeamsNodes {
    /**
     * Include subnodes
     */
    cascade?: boolean;
    /**
     * Base Node ID
     */
    nodeId: number;
}

export interface GetTeamsTeam {
    /**
     * Team Name
     */
    name: string;
    /**
     * Team NodeID
     */
    nodeId: number;
    /**
     * Restrict Edit flag
     */
    restrictEdit: boolean;
    /**
     * Restrict Share flag
     */
    restrictShare: boolean;
    /**
     * Restrict View flag
     */
    restrictView: boolean;
    /**
     * Team UID
     */
    teamUid: string;
}

export interface GetUserRole {
    /**
     * Is Administrative Role
     */
    isAdmin: boolean;
    /**
     * Role Name
     */
    name: string;
    /**
     * Role Node ID
     */
    nodeId: number;
    /**
     * Role ID
     */
    roleId: number;
}

export interface GetUserTeam {
    /**
     * Team Name
     */
    name: string;
    /**
     * Team UID
     */
    teamUid: string;
}

export interface GetUsersFilter {
    /**
     * Comparison operation
     */
    cmp?: string;
    /**
     * Field Name
     */
    field: string;
    /**
     * Comparison value
     */
    value: string;
}

export interface GetUsersNodes {
    /**
     * Include subnodes
     */
    cascade?: boolean;
    /**
     * Base Node ID
     */
    nodeId: number;
}

export interface GetUsersUser {
    /**
     * Account Share deadline: Timestamp in millis
     */
    accountShareExpiration: number;
    /**
     * Enterprise User ID
     */
    enterpriseUserId: number;
    /**
     * User Full Name
     */
    fullName: string;
    /**
     * User Job Title
     */
    jobTitle: string;
    /**
     * User Node ID
     */
    nodeId: number;
    /**
     * User Status: active | invited | locked | blocked | disabled
     */
    status: string;
    /**
     * TFA Enabled flag
     */
    tfaEnabled: boolean;
    /**
     * Email
     */
    username: string;
}

export interface ManagedNodePrivileges {
    /**
     * Perform Device Approvals
     */
    deviceApproval: boolean;
    /**
     * Manage Companies
     */
    manageCompanies: boolean;
    /**
     * Manage Nodes
     */
    manageNodes: boolean;
    /**
     * This permission allows the admin rights to create, edit, or delete Record Types which have pre-defined fields. Record Types appear during creation of records in the user's vault.
     */
    manageRecordTypes: boolean;
    /**
     * Manage Reporting and Alerts
     */
    manageReports: boolean;
    /**
     * Manage Roles
     */
    manageRoles: boolean;
    /**
     * Manage Bridge/SSO
     */
    manageSso: boolean;
    /**
     * Manage Teams
     */
    manageTeams: boolean;
    /**
     * Manage Users
     */
    manageUsers: boolean;
    /**
     * Run Compliance Reports
     */
    runComplianceReports: boolean;
    /**
     * Share Admin
     */
    shareAdmin: boolean;
    /**
     * Transfer Account
     */
    transferAccount: boolean;
}

export interface RoleEnforcementsEnforcements {
    /**
     * Account-related enforcements
     */
    account?: outputs.RoleEnforcementsEnforcementsAccount;
    /**
     * IP whitelist enforcements
     */
    allowIpList?: outputs.RoleEnforcementsEnforcementsAllowIpList;
    /**
     * Keeper Fill enforcements
     */
    keeperFill?: outputs.RoleEnforcementsEnforcementsKeeperFill;
    /**
     * Login-related enforcements
     */
    login?: outputs.RoleEnforcementsEnforcementsLogin;
    /**
     * Keeper platform enforcements
     */
    platform?: outputs.RoleEnforcementsEnforcementsPlatform;
    /**
     * Record-type enforcements
     */
    recordTypes?: outputs.RoleEnforcementsEnforcementsRecordTypes;
    /**
     * Sharing enforcements
     */
    sharing?: outputs.RoleEnforcementsEnforcementsSharing;
    /**
     * 2FA enforcements
     */
    twoFactor?: outputs.RoleEnforcementsEnforcementsTwoFactor;
    /**
     * Vault-related enforcements
     */
    vault?: outputs.RoleEnforcementsEnforcementsVault;
}

export interface RoleEnforcementsEnforcementsAccount {
    /**
     * Allow PAM discovery
     */
    allowPamDiscovery?: boolean;
    /**
     * Allow PAM rotation
     */
    allowPamRotation?: boolean;
    /**
     * Allow Keeper Secret Manager access
     */
    allowSecretsManager?: boolean;
    /**
     * Disable onboarding
     */
    disableOnboarding?: boolean;
    /**
     * Disable setup-tour
     */
    disableSetupTour?: boolean;
    /**
     * Disallow v2 clients
     */
    disallowV2Clients?: boolean;
    /**
     * Automatic-logout delay for desktop client
     */
    logoutTimerDesktop?: number;
    /**
     * Automatic-logout delay for mobile client
     */
    logoutTimerMobile?: number;
    /**
     * Automatic-logout delay for web client
     */
    logoutTimerWeb?: number;
    /**
     * Max session login time
     */
    maxSessionLoginTime?: number;
    /**
     * Maximum record-size
     */
    maximumRecordSize?: number;
    /**
     * Minimum PBKDF2 iterations
     */
    minimumPbkdf2Iterations?: number;
    /**
     * Require account recovery approval
     */
    requireAccountRecoveryApproval?: boolean;
    /**
     * Require device approval
     */
    requireDeviceApproval?: boolean;
    /**
     * Require security key PIN
     */
    requireSecurityKeyPin?: boolean;
    /**
     * Require self-destruct
     */
    requireSelfDestruct?: boolean;
    /**
     * Resend enterprise invite in X days
     */
    resendEnterpriseInviteInXDays?: number;
    /**
     * Restrict Account Recovery
     */
    restrictAccountRecovery?: boolean;
    /**
     * Restrict change of email address
     */
    restrictEmailChange?: boolean;
    /**
     * Restrict shared-folder imports
     */
    restrictImportSharedFolders?: boolean;
    /**
     * Restrict IP auto-approval
     */
    restrictIpAutoapproval?: boolean;
    /**
     * Restrict offline access
     */
    restrictOfflineAccess?: boolean;
    /**
     * Restrict persistent login
     */
    restrictPersistentLogin?: boolean;
    /**
     * Restrict use of personal license
     */
    restrictPersonalLicense?: boolean;
    /**
     * Send invite at registration
     */
    sendInviteAtRegistration?: boolean;
    /**
     * Enable staying logged-in by default
     */
    stayLoggedInDefault?: boolean;
}

export interface RoleEnforcementsEnforcementsAllowIpList {
    /**
     * Restrict IP addresses
     */
    restrictIpAddresses?: string[];
    /**
     * Restrict vault-access from IP addresses
     */
    restrictVaultIpAddresses?: string[];
    /**
     * Restrict allowed IP ranges for tip zone
     */
    tipZoneRestrictAllowedIpRanges?: string[];
}

export interface RoleEnforcementsEnforcementsKeeperFill {
    /**
     * Keeper Fill auto-fill
     */
    keeperFillAutoFill?: string;
    /**
     * Keeper Fill auto-submit
     */
    keeperFillAutoSubmit?: string;
    /**
     * Keeper auto-fill suggestion
     */
    keeperFillAutoSuggest?: string;
    /**
     * Keeper Fill hover locks
     */
    keeperFillHoverLocks?: string;
    /**
     * Keeper Fill subdomains to match on
     */
    keeperFillMatchOnSubdomain?: string;
    /**
     * Master password re-entry
     */
    masterPasswordReentry?: string;
    /**
     * Restrict auto-fill
     */
    restrictAutoFill?: boolean;
    /**
     * Restrict auto-submit
     */
    restrictAutoSubmit?: boolean;
    /**
     * Restrict access to domain(s)
     */
    restrictDomainAccess?: string;
    /**
     * Restrict creation of new records for domain(s)
     */
    restrictDomainCreate?: string;
    /**
     * Restrict hover-locks
     */
    restrictHoverLocks?: boolean;
    /**
     * Restrict HTTP fill warning
     */
    restrictHttpFillWarning?: boolean;
    /**
     * Restrict prompt to change
     */
    restrictPromptToChange?: boolean;
    /**
     * Restrict prompt to disable Keeper Fill
     */
    restrictPromptToDisable?: boolean;
    /**
     * Restrict prompt to fill
     */
    restrictPromptToFill?: boolean;
    /**
     * Restrict prompt to login
     */
    restrictPromptToLogin?: boolean;
    /**
     * Restrict prompt to save
     */
    restrictPromptToSave?: boolean;
}

export interface RoleEnforcementsEnforcementsLogin {
    /**
     * Allow alternate passwords
     */
    allowAlternatePasswords?: boolean;
    /**
     * Master password expiration
     */
    masterPasswordExpiredAsOf?: number;
    /**
     * Maximum days before master password change
     */
    masterPasswordMaximumDaysBeforeChange?: number;
    /**
     * Minimum # of digits required for master password
     */
    masterPasswordMinimumDigits?: number;
    /**
     * Minimum length required for master password
     */
    masterPasswordMinimumLength?: number;
    /**
     * Minimum # of lower-case characters required for master password
     */
    masterPasswordMinimumLower?: number;
    /**
     * Minimum # of special characters required for master password
     */
    masterPasswordMinimumSpecial?: number;
    /**
     * Minimum # of upper-case characters required for master password
     */
    masterPasswordMinimumUpper?: number;
    /**
     * # of days before master password can be re-used
     */
    masterPasswordRestrictDaysBeforeReuse?: number;
    /**
     * Restrict Android fingerprint login
     */
    restrictAndroidFingerprint?: boolean;
    /**
     * Restrict iOS fingerprint login
     */
    restrictIosFingerprint?: boolean;
    /**
     * Restrict MacOS fingerprint login
     */
    restrictMacFingerprint?: boolean;
    /**
     * Restrict Windows fingerprint login
     */
    restrictWindowsFingerprint?: boolean;
}

export interface RoleEnforcementsEnforcementsPlatform {
    /**
     * Restrict access to Keeper Chat for desktop
     */
    restrictChatDesktopAccess?: boolean;
    /**
     * Restrict access to Keeper Chat for mobile
     */
    restrictChatMobileAccess?: boolean;
    /**
     * Restrict access to Keeper Commander
     */
    restrictCommanderAccess?: boolean;
    /**
     * Restrict access to Keeper Vault for desktop
     */
    restrictDesktopAccess?: boolean;
    /**
     * Restrict access to Keeper Desktop for MacOS
     */
    restrictDesktopMacAccess?: boolean;
    /**
     * Restrict access to Keeper Desktop for Windows
     */
    restrictDesktopWinAccess?: boolean;
    /**
     * Restrict access to Keeper browser extensions
     */
    restrictExtensionsAccess?: boolean;
    /**
     * Restrict access to Keeper Vault for mobile
     */
    restrictMobileAccess?: boolean;
    /**
     * Restrict access to Keeper Vault for Android
     */
    restrictMobileAndroidAccess?: boolean;
    /**
     * Restrict access to Keeper Vault for iOS
     */
    restrictMobileIosAccess?: boolean;
    /**
     * Restrict access to Keeper Vault for Windows mobile
     */
    restrictMobileWindowsPhoneAccess?: boolean;
    /**
     * Restrict access to Keeper Vault for web
     */
    restrictWebVaultAccess?: boolean;
}

export interface RoleEnforcementsEnforcementsRecordTypes {
    /**
     * Restrict record-types
     */
    restrictRecordTypes?: string[];
}

export interface RoleEnforcementsEnforcementsSharing {
    /**
     * Require account-share
     */
    requireAccountShare?: number;
    /**
     * Restrict shared-folder creation
     */
    restrictCreateSharedFolder?: boolean;
    /**
     * Restrict record exports
     */
    restrictExport?: boolean;
    /**
     * Restrict file uploads
     */
    restrictFileUpload?: boolean;
    /**
     * Restrict record imports
     */
    restrictImport?: boolean;
    /**
     * Restrict link-sharing
     */
    restrictLinkSharing?: boolean;
    /**
     * Restrict all incoming sharing
     */
    restrictSharingAllIncoming?: boolean;
    /**
     * Restrict all outgoing sharing
     */
    restrictSharingAllOutgoing?: boolean;
    /**
     * Restrict sharing from outside the enterprise
     */
    restrictSharingEnterpriseIncoming?: boolean;
    /**
     * Restrict sharing to outside the enterprise
     */
    restrictSharingEnterpriseOutgoing?: boolean;
    /**
     * Restrict sharing outside of isolated nodes
     */
    restrictSharingOutsideOfIsolatedNodes?: boolean;
    /**
     * Restrict record sharing within shared-folders
     */
    restrictSharingRecordToSharedFolders?: boolean;
    /**
     * Restrict sharing records with attachments
     */
    restrictSharingRecordWithAttachments?: boolean;
}

export interface RoleEnforcementsEnforcementsTwoFactor {
    /**
     * Require 2fa for login
     */
    requireTwoFactor?: boolean;
    /**
     * Restrict use of KeeperDNA for 2fa
     */
    restrictTwoFactorChannelDna?: boolean;
    /**
     * Restrict use of DUO for 2fa
     */
    restrictTwoFactorChannelDuo?: boolean;
    /**
     * Restrict use of Google Authenticator for 2fa
     */
    restrictTwoFactorChannelGoogle?: boolean;
    /**
     * Restrict use of RSA SecurID for 2fa
     */
    restrictTwoFactorChannelRsa?: boolean;
    /**
     * Restrict use of security keys (FIDO2 WebAuthn) for 2fa
     */
    restrictTwoFactorChannelSecurityKeys?: boolean;
    /**
     * Restrict use of SMS/text message for 2fa
     */
    restrictTwoFactorChannelText?: boolean;
    /**
     * 2fa duration for desktop client app
     */
    twoFactorDurationDesktop?: string;
    /**
     * 2fa duration for mobile client app
     */
    twoFactorDurationMobile?: string;
    /**
     * 2fa duration for web client app
     */
    twoFactorDurationWeb?: string;
}

export interface RoleEnforcementsEnforcementsVault {
    /**
     * # of days before deleted records are automatically cleared
     */
    daysBeforeDeletedRecordsAutoCleared?: number;
    /**
     * # of days before deleted records are automatically cleared permanently
     */
    daysBeforeDeletedRecordsClearedPerm?: number;
    /**
     * Generated password complexity
     */
    generatedPasswordComplexity?: string;
    /**
     * Generated security question complexity
     */
    generatedSecurityQuestionComplexity?: string;
    /**
     * Mask custom fields
     */
    maskCustomFields?: boolean;
    /**
     * Mask notes
     */
    maskNotes?: boolean;
    /**
     * Mask passwords while editing
     */
    maskPasswordsWhileEditing?: boolean;
    /**
     * Restrict BreachWatch
     */
    restrictBreachWatch?: boolean;
    /**
     * Restrict creation of folders
     */
    restrictCreateFolder?: boolean;
    /**
     * Restrict creation of folders to within shared-folders only
     */
    restrictCreateFolderToOnlySharedFolders?: boolean;
    /**
     * Restrict creation of identity payment records
     */
    restrictCreateIdentityPaymentRecords?: boolean;
    /**
     * Restrict creation of records
     */
    restrictCreateRecord?: boolean;
    /**
     * Restrict record creation within shared-folders
     */
    restrictCreateRecordToSharedFolders?: boolean;
    /**
     * Send BreachWatch events
     */
    sendBreachWatchEvents?: boolean;
}

