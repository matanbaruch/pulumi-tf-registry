// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ManagedNode extends pulumi.CustomResource {
    /**
     * Get an existing ManagedNode resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagedNodeState, opts?: pulumi.CustomResourceOptions): ManagedNode {
        return new ManagedNode(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'keeper:index/managedNode:ManagedNode';

    /**
     * Returns true if the given object is an instance of ManagedNode.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagedNode {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagedNode.__pulumiType;
    }

    /**
     * The list of user IDs
     */
    public readonly cascadeNodeManagement!: pulumi.Output<boolean>;
    /**
     * Managed Node ID
     */
    public readonly nodeId!: pulumi.Output<number>;
    /**
     * Privileges
     */
    public readonly privileges!: pulumi.Output<outputs.ManagedNodePrivileges>;
    /**
     * Role ID
     */
    public readonly roleId!: pulumi.Output<number>;

    /**
     * Create a ManagedNode resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagedNodeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagedNodeArgs | ManagedNodeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagedNodeState | undefined;
            resourceInputs["cascadeNodeManagement"] = state ? state.cascadeNodeManagement : undefined;
            resourceInputs["nodeId"] = state ? state.nodeId : undefined;
            resourceInputs["privileges"] = state ? state.privileges : undefined;
            resourceInputs["roleId"] = state ? state.roleId : undefined;
        } else {
            const args = argsOrState as ManagedNodeArgs | undefined;
            if ((!args || args.nodeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeId'");
            }
            if ((!args || args.roleId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleId'");
            }
            resourceInputs["cascadeNodeManagement"] = args ? args.cascadeNodeManagement : undefined;
            resourceInputs["nodeId"] = args ? args.nodeId : undefined;
            resourceInputs["privileges"] = args ? args.privileges : undefined;
            resourceInputs["roleId"] = args ? args.roleId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ManagedNode.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ManagedNode resources.
 */
export interface ManagedNodeState {
    /**
     * The list of user IDs
     */
    cascadeNodeManagement?: pulumi.Input<boolean>;
    /**
     * Managed Node ID
     */
    nodeId?: pulumi.Input<number>;
    /**
     * Privileges
     */
    privileges?: pulumi.Input<inputs.ManagedNodePrivileges>;
    /**
     * Role ID
     */
    roleId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ManagedNode resource.
 */
export interface ManagedNodeArgs {
    /**
     * The list of user IDs
     */
    cascadeNodeManagement?: pulumi.Input<boolean>;
    /**
     * Managed Node ID
     */
    nodeId: pulumi.Input<number>;
    /**
     * Privileges
     */
    privileges?: pulumi.Input<inputs.ManagedNodePrivileges>;
    /**
     * Role ID
     */
    roleId: pulumi.Input<number>;
}
