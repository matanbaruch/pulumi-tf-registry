// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { GetEnforcementsArgs, GetEnforcementsResult, GetEnforcementsOutputArgs } from "./getEnforcements";
export const getEnforcements: typeof import("./getEnforcements").getEnforcements = null as any;
export const getEnforcementsOutput: typeof import("./getEnforcements").getEnforcementsOutput = null as any;
utilities.lazyLoad(exports, ["getEnforcements","getEnforcementsOutput"], () => require("./getEnforcements"));

export { GetEnforcements2faArgs, GetEnforcements2faResult, GetEnforcements2faOutputArgs } from "./getEnforcements2fa";
export const getEnforcements2fa: typeof import("./getEnforcements2fa").getEnforcements2fa = null as any;
export const getEnforcements2faOutput: typeof import("./getEnforcements2fa").getEnforcements2faOutput = null as any;
utilities.lazyLoad(exports, ["getEnforcements2fa","getEnforcements2faOutput"], () => require("./getEnforcements2fa"));

export { GetEnforcementsAccountArgs, GetEnforcementsAccountResult, GetEnforcementsAccountOutputArgs } from "./getEnforcementsAccount";
export const getEnforcementsAccount: typeof import("./getEnforcementsAccount").getEnforcementsAccount = null as any;
export const getEnforcementsAccountOutput: typeof import("./getEnforcementsAccount").getEnforcementsAccountOutput = null as any;
utilities.lazyLoad(exports, ["getEnforcementsAccount","getEnforcementsAccountOutput"], () => require("./getEnforcementsAccount"));

export { GetEnforcementsAllowIpListArgs, GetEnforcementsAllowIpListResult, GetEnforcementsAllowIpListOutputArgs } from "./getEnforcementsAllowIpList";
export const getEnforcementsAllowIpList: typeof import("./getEnforcementsAllowIpList").getEnforcementsAllowIpList = null as any;
export const getEnforcementsAllowIpListOutput: typeof import("./getEnforcementsAllowIpList").getEnforcementsAllowIpListOutput = null as any;
utilities.lazyLoad(exports, ["getEnforcementsAllowIpList","getEnforcementsAllowIpListOutput"], () => require("./getEnforcementsAllowIpList"));

export { GetEnforcementsKeeperFillArgs, GetEnforcementsKeeperFillResult, GetEnforcementsKeeperFillOutputArgs } from "./getEnforcementsKeeperFill";
export const getEnforcementsKeeperFill: typeof import("./getEnforcementsKeeperFill").getEnforcementsKeeperFill = null as any;
export const getEnforcementsKeeperFillOutput: typeof import("./getEnforcementsKeeperFill").getEnforcementsKeeperFillOutput = null as any;
utilities.lazyLoad(exports, ["getEnforcementsKeeperFill","getEnforcementsKeeperFillOutput"], () => require("./getEnforcementsKeeperFill"));

export { GetEnforcementsLoginArgs, GetEnforcementsLoginResult, GetEnforcementsLoginOutputArgs } from "./getEnforcementsLogin";
export const getEnforcementsLogin: typeof import("./getEnforcementsLogin").getEnforcementsLogin = null as any;
export const getEnforcementsLoginOutput: typeof import("./getEnforcementsLogin").getEnforcementsLoginOutput = null as any;
utilities.lazyLoad(exports, ["getEnforcementsLogin","getEnforcementsLoginOutput"], () => require("./getEnforcementsLogin"));

export { GetEnforcementsPlatformArgs, GetEnforcementsPlatformResult, GetEnforcementsPlatformOutputArgs } from "./getEnforcementsPlatform";
export const getEnforcementsPlatform: typeof import("./getEnforcementsPlatform").getEnforcementsPlatform = null as any;
export const getEnforcementsPlatformOutput: typeof import("./getEnforcementsPlatform").getEnforcementsPlatformOutput = null as any;
utilities.lazyLoad(exports, ["getEnforcementsPlatform","getEnforcementsPlatformOutput"], () => require("./getEnforcementsPlatform"));

export { GetEnforcementsRecordTypesArgs, GetEnforcementsRecordTypesResult, GetEnforcementsRecordTypesOutputArgs } from "./getEnforcementsRecordTypes";
export const getEnforcementsRecordTypes: typeof import("./getEnforcementsRecordTypes").getEnforcementsRecordTypes = null as any;
export const getEnforcementsRecordTypesOutput: typeof import("./getEnforcementsRecordTypes").getEnforcementsRecordTypesOutput = null as any;
utilities.lazyLoad(exports, ["getEnforcementsRecordTypes","getEnforcementsRecordTypesOutput"], () => require("./getEnforcementsRecordTypes"));

export { GetEnforcementsSharingArgs, GetEnforcementsSharingResult, GetEnforcementsSharingOutputArgs } from "./getEnforcementsSharing";
export const getEnforcementsSharing: typeof import("./getEnforcementsSharing").getEnforcementsSharing = null as any;
export const getEnforcementsSharingOutput: typeof import("./getEnforcementsSharing").getEnforcementsSharingOutput = null as any;
utilities.lazyLoad(exports, ["getEnforcementsSharing","getEnforcementsSharingOutput"], () => require("./getEnforcementsSharing"));

export { GetEnforcementsVaultArgs, GetEnforcementsVaultResult, GetEnforcementsVaultOutputArgs } from "./getEnforcementsVault";
export const getEnforcementsVault: typeof import("./getEnforcementsVault").getEnforcementsVault = null as any;
export const getEnforcementsVaultOutput: typeof import("./getEnforcementsVault").getEnforcementsVaultOutput = null as any;
utilities.lazyLoad(exports, ["getEnforcementsVault","getEnforcementsVaultOutput"], () => require("./getEnforcementsVault"));

export { GetNodeArgs, GetNodeResult, GetNodeOutputArgs } from "./getNode";
export const getNode: typeof import("./getNode").getNode = null as any;
export const getNodeOutput: typeof import("./getNode").getNodeOutput = null as any;
utilities.lazyLoad(exports, ["getNode","getNodeOutput"], () => require("./getNode"));

export { GetNodesArgs, GetNodesResult, GetNodesOutputArgs } from "./getNodes";
export const getNodes: typeof import("./getNodes").getNodes = null as any;
export const getNodesOutput: typeof import("./getNodes").getNodesOutput = null as any;
utilities.lazyLoad(exports, ["getNodes","getNodesOutput"], () => require("./getNodes"));

export { GetPrivilegesArgs, GetPrivilegesResult, GetPrivilegesOutputArgs } from "./getPrivileges";
export const getPrivileges: typeof import("./getPrivileges").getPrivileges = null as any;
export const getPrivilegesOutput: typeof import("./getPrivileges").getPrivilegesOutput = null as any;
utilities.lazyLoad(exports, ["getPrivileges","getPrivilegesOutput"], () => require("./getPrivileges"));

export { GetRoleArgs, GetRoleResult, GetRoleOutputArgs } from "./getRole";
export const getRole: typeof import("./getRole").getRole = null as any;
export const getRoleOutput: typeof import("./getRole").getRoleOutput = null as any;
utilities.lazyLoad(exports, ["getRole","getRoleOutput"], () => require("./getRole"));

export { GetRolesArgs, GetRolesResult, GetRolesOutputArgs } from "./getRoles";
export const getRoles: typeof import("./getRoles").getRoles = null as any;
export const getRolesOutput: typeof import("./getRoles").getRolesOutput = null as any;
utilities.lazyLoad(exports, ["getRoles","getRolesOutput"], () => require("./getRoles"));

export { GetTeamArgs, GetTeamResult, GetTeamOutputArgs } from "./getTeam";
export const getTeam: typeof import("./getTeam").getTeam = null as any;
export const getTeamOutput: typeof import("./getTeam").getTeamOutput = null as any;
utilities.lazyLoad(exports, ["getTeam","getTeamOutput"], () => require("./getTeam"));

export { GetTeamsArgs, GetTeamsResult, GetTeamsOutputArgs } from "./getTeams";
export const getTeams: typeof import("./getTeams").getTeams = null as any;
export const getTeamsOutput: typeof import("./getTeams").getTeamsOutput = null as any;
utilities.lazyLoad(exports, ["getTeams","getTeamsOutput"], () => require("./getTeams"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetUsersArgs, GetUsersResult, GetUsersOutputArgs } from "./getUsers";
export const getUsers: typeof import("./getUsers").getUsers = null as any;
export const getUsersOutput: typeof import("./getUsers").getUsersOutput = null as any;
utilities.lazyLoad(exports, ["getUsers","getUsersOutput"], () => require("./getUsers"));

export { ManagedNodeArgs, ManagedNodeState } from "./managedNode";
export type ManagedNode = import("./managedNode").ManagedNode;
export const ManagedNode: typeof import("./managedNode").ManagedNode = null as any;
utilities.lazyLoad(exports, ["ManagedNode"], () => require("./managedNode"));

export { NodeArgs, NodeState } from "./node";
export type Node = import("./node").Node;
export const Node: typeof import("./node").Node = null as any;
utilities.lazyLoad(exports, ["Node"], () => require("./node"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RoleArgs, RoleState } from "./role";
export type Role = import("./role").Role;
export const Role: typeof import("./role").Role = null as any;
utilities.lazyLoad(exports, ["Role"], () => require("./role"));

export { RoleEnforcementsArgs, RoleEnforcementsState } from "./roleEnforcements";
export type RoleEnforcements = import("./roleEnforcements").RoleEnforcements;
export const RoleEnforcements: typeof import("./roleEnforcements").RoleEnforcements = null as any;
utilities.lazyLoad(exports, ["RoleEnforcements"], () => require("./roleEnforcements"));

export { RoleMembershipArgs, RoleMembershipState } from "./roleMembership";
export type RoleMembership = import("./roleMembership").RoleMembership;
export const RoleMembership: typeof import("./roleMembership").RoleMembership = null as any;
utilities.lazyLoad(exports, ["RoleMembership"], () => require("./roleMembership"));

export { TeamArgs, TeamState } from "./team";
export type Team = import("./team").Team;
export const Team: typeof import("./team").Team = null as any;
utilities.lazyLoad(exports, ["Team"], () => require("./team"));

export { TeamMembershipArgs, TeamMembershipState } from "./teamMembership";
export type TeamMembership = import("./teamMembership").TeamMembership;
export const TeamMembership: typeof import("./teamMembership").TeamMembership = null as any;
utilities.lazyLoad(exports, ["TeamMembership"], () => require("./teamMembership"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "keeper:index/managedNode:ManagedNode":
                return new ManagedNode(name, <any>undefined, { urn })
            case "keeper:index/node:Node":
                return new Node(name, <any>undefined, { urn })
            case "keeper:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "keeper:index/roleEnforcements:RoleEnforcements":
                return new RoleEnforcements(name, <any>undefined, { urn })
            case "keeper:index/roleMembership:RoleMembership":
                return new RoleMembership(name, <any>undefined, { urn })
            case "keeper:index/team:Team":
                return new Team(name, <any>undefined, { urn })
            case "keeper:index/teamMembership:TeamMembership":
                return new TeamMembership(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("keeper", "index/managedNode", _module)
pulumi.runtime.registerResourceModule("keeper", "index/node", _module)
pulumi.runtime.registerResourceModule("keeper", "index/role", _module)
pulumi.runtime.registerResourceModule("keeper", "index/roleEnforcements", _module)
pulumi.runtime.registerResourceModule("keeper", "index/roleMembership", _module)
pulumi.runtime.registerResourceModule("keeper", "index/team", _module)
pulumi.runtime.registerResourceModule("keeper", "index/teamMembership", _module)
pulumi.runtime.registerResourcePackage("keeper", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:keeper") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
