// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NgfwLogProfile extends pulumi.CustomResource {
    /**
     * Get an existing NgfwLogProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NgfwLogProfileState, opts?: pulumi.CustomResourceOptions): NgfwLogProfile {
        return new NgfwLogProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudngfwaws:index/ngfwLogProfile:NgfwLogProfile';

    /**
     * Returns true if the given object is an instance of NgfwLogProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NgfwLogProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NgfwLogProfile.__pulumiType;
    }

    /**
     * The unique ID of the account.
     */
    public readonly accountId!: pulumi.Output<string>;
    /**
     * Enable advanced threat logging.
     */
    public readonly advancedThreatLog!: pulumi.Output<boolean | undefined>;
    /**
     * The CloudWatch metric namespace.
     */
    public readonly cloudWatchMetricNamespace!: pulumi.Output<string | undefined>;
    /**
     * Cloudwatch metric fields.
     */
    public readonly cloudwatchMetricFields!: pulumi.Output<string[] | undefined>;
    /**
     * List of log destinations.
     */
    public readonly logDestinations!: pulumi.Output<outputs.NgfwLogProfileLogDestination[]>;
    /**
     * The name of the NGFW.
     */
    public readonly ngfw!: pulumi.Output<string>;

    /**
     * Create a NgfwLogProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NgfwLogProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NgfwLogProfileArgs | NgfwLogProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NgfwLogProfileState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["advancedThreatLog"] = state ? state.advancedThreatLog : undefined;
            resourceInputs["cloudWatchMetricNamespace"] = state ? state.cloudWatchMetricNamespace : undefined;
            resourceInputs["cloudwatchMetricFields"] = state ? state.cloudwatchMetricFields : undefined;
            resourceInputs["logDestinations"] = state ? state.logDestinations : undefined;
            resourceInputs["ngfw"] = state ? state.ngfw : undefined;
        } else {
            const args = argsOrState as NgfwLogProfileArgs | undefined;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.logDestinations === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logDestinations'");
            }
            if ((!args || args.ngfw === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ngfw'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["advancedThreatLog"] = args ? args.advancedThreatLog : undefined;
            resourceInputs["cloudWatchMetricNamespace"] = args ? args.cloudWatchMetricNamespace : undefined;
            resourceInputs["cloudwatchMetricFields"] = args ? args.cloudwatchMetricFields : undefined;
            resourceInputs["logDestinations"] = args ? args.logDestinations : undefined;
            resourceInputs["ngfw"] = args ? args.ngfw : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NgfwLogProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NgfwLogProfile resources.
 */
export interface NgfwLogProfileState {
    /**
     * The unique ID of the account.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Enable advanced threat logging.
     */
    advancedThreatLog?: pulumi.Input<boolean>;
    /**
     * The CloudWatch metric namespace.
     */
    cloudWatchMetricNamespace?: pulumi.Input<string>;
    /**
     * Cloudwatch metric fields.
     */
    cloudwatchMetricFields?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of log destinations.
     */
    logDestinations?: pulumi.Input<pulumi.Input<inputs.NgfwLogProfileLogDestination>[]>;
    /**
     * The name of the NGFW.
     */
    ngfw?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NgfwLogProfile resource.
 */
export interface NgfwLogProfileArgs {
    /**
     * The unique ID of the account.
     */
    accountId: pulumi.Input<string>;
    /**
     * Enable advanced threat logging.
     */
    advancedThreatLog?: pulumi.Input<boolean>;
    /**
     * The CloudWatch metric namespace.
     */
    cloudWatchMetricNamespace?: pulumi.Input<string>;
    /**
     * Cloudwatch metric fields.
     */
    cloudwatchMetricFields?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of log destinations.
     */
    logDestinations: pulumi.Input<pulumi.Input<inputs.NgfwLogProfileLogDestination>[]>;
    /**
     * The name of the NGFW.
     */
    ngfw: pulumi.Input<string>;
}
