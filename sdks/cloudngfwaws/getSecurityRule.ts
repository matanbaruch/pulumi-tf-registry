// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getSecurityRule(args: GetSecurityRuleArgs, opts?: pulumi.InvokeOptions): Promise<GetSecurityRuleResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("cloudngfwaws:index/getSecurityRule:getSecurityRule", {
        "configType": args.configType,
        "id": args.id,
        "priority": args.priority,
        "ruleList": args.ruleList,
        "rulestack": args.rulestack,
        "scope": args.scope,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSecurityRule.
 */
export interface GetSecurityRuleArgs {
    configType?: string;
    id?: string;
    priority: number;
    ruleList?: string;
    rulestack: string;
    scope?: string;
}

/**
 * A collection of values returned by getSecurityRule.
 */
export interface GetSecurityRuleResult {
    readonly action: string;
    readonly applications: string[];
    readonly auditComment: string;
    readonly categories: outputs.GetSecurityRuleCategory[];
    readonly configType?: string;
    readonly decryptionRuleType: string;
    readonly description: string;
    readonly destinations: outputs.GetSecurityRuleDestination[];
    readonly enabled: boolean;
    readonly id: string;
    readonly logging: boolean;
    readonly name: string;
    readonly negateDestination: boolean;
    readonly negateSource: boolean;
    readonly priority: number;
    readonly protPortLists: string[];
    readonly protocol: string;
    readonly ruleList?: string;
    readonly rulestack: string;
    readonly scope?: string;
    readonly sources: outputs.GetSecurityRuleSource[];
    readonly tags: {[key: string]: string};
    readonly updateToken: string;
}
export function getSecurityRuleOutput(args: GetSecurityRuleOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSecurityRuleResult> {
    return pulumi.output(args).apply((a: any) => getSecurityRule(a, opts))
}

/**
 * A collection of arguments for invoking getSecurityRule.
 */
export interface GetSecurityRuleOutputArgs {
    configType?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    priority: pulumi.Input<number>;
    ruleList?: pulumi.Input<string>;
    rulestack: pulumi.Input<string>;
    scope?: pulumi.Input<string>;
}
