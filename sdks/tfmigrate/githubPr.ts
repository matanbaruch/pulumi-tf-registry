// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class GithubPr extends pulumi.CustomResource {
    /**
     * Get an existing GithubPr resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GithubPrState, opts?: pulumi.CustomResourceOptions): GithubPr {
        return new GithubPr(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tfmigrate:index/githubPr:GithubPr';

    /**
     * Returns true if the given object is an instance of GithubPr.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GithubPr {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GithubPr.__pulumiType;
    }

    /**
     * The Base branch into which the PR will be merged into
     */
    public readonly destinBranch!: pulumi.Output<string>;
    /**
     * Content of the PR Body.
     */
    public readonly prBody!: pulumi.Output<string>;
    /**
     * The PR title.
     */
    public readonly prTitle!: pulumi.Output<string>;
    /**
     * The URL of the Pull Request created.
     */
    public /*out*/ readonly pullRequestUrl!: pulumi.Output<string>;
    /**
     * The identifier of the repository in the format `owner/repo`.
     */
    public readonly repoIdentifier!: pulumi.Output<string>;
    /**
     * The feature branch from which the PR will be merged into
     */
    public readonly sourceBranch!: pulumi.Output<string>;
    /**
     * Summary of the Git Commit Resource.
     */
    public /*out*/ readonly summary!: pulumi.Output<string>;

    /**
     * Create a GithubPr resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GithubPrArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GithubPrArgs | GithubPrState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GithubPrState | undefined;
            resourceInputs["destinBranch"] = state ? state.destinBranch : undefined;
            resourceInputs["prBody"] = state ? state.prBody : undefined;
            resourceInputs["prTitle"] = state ? state.prTitle : undefined;
            resourceInputs["pullRequestUrl"] = state ? state.pullRequestUrl : undefined;
            resourceInputs["repoIdentifier"] = state ? state.repoIdentifier : undefined;
            resourceInputs["sourceBranch"] = state ? state.sourceBranch : undefined;
            resourceInputs["summary"] = state ? state.summary : undefined;
        } else {
            const args = argsOrState as GithubPrArgs | undefined;
            if ((!args || args.destinBranch === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinBranch'");
            }
            if ((!args || args.prBody === undefined) && !opts.urn) {
                throw new Error("Missing required property 'prBody'");
            }
            if ((!args || args.prTitle === undefined) && !opts.urn) {
                throw new Error("Missing required property 'prTitle'");
            }
            if ((!args || args.repoIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repoIdentifier'");
            }
            if ((!args || args.sourceBranch === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceBranch'");
            }
            resourceInputs["destinBranch"] = args ? args.destinBranch : undefined;
            resourceInputs["prBody"] = args ? args.prBody : undefined;
            resourceInputs["prTitle"] = args ? args.prTitle : undefined;
            resourceInputs["repoIdentifier"] = args ? args.repoIdentifier : undefined;
            resourceInputs["sourceBranch"] = args ? args.sourceBranch : undefined;
            resourceInputs["pullRequestUrl"] = undefined /*out*/;
            resourceInputs["summary"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GithubPr.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GithubPr resources.
 */
export interface GithubPrState {
    /**
     * The Base branch into which the PR will be merged into
     */
    destinBranch?: pulumi.Input<string>;
    /**
     * Content of the PR Body.
     */
    prBody?: pulumi.Input<string>;
    /**
     * The PR title.
     */
    prTitle?: pulumi.Input<string>;
    /**
     * The URL of the Pull Request created.
     */
    pullRequestUrl?: pulumi.Input<string>;
    /**
     * The identifier of the repository in the format `owner/repo`.
     */
    repoIdentifier?: pulumi.Input<string>;
    /**
     * The feature branch from which the PR will be merged into
     */
    sourceBranch?: pulumi.Input<string>;
    /**
     * Summary of the Git Commit Resource.
     */
    summary?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GithubPr resource.
 */
export interface GithubPrArgs {
    /**
     * The Base branch into which the PR will be merged into
     */
    destinBranch: pulumi.Input<string>;
    /**
     * Content of the PR Body.
     */
    prBody: pulumi.Input<string>;
    /**
     * The PR title.
     */
    prTitle: pulumi.Input<string>;
    /**
     * The identifier of the repository in the format `owner/repo`.
     */
    repoIdentifier: pulumi.Input<string>;
    /**
     * The feature branch from which the PR will be merged into
     */
    sourceBranch: pulumi.Input<string>;
}
