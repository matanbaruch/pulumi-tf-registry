// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class UpdateBackend extends pulumi.CustomResource {
    /**
     * Get an existing UpdateBackend resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UpdateBackendState, opts?: pulumi.CustomResourceOptions): UpdateBackend {
        return new UpdateBackend(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tfmigrate:index/updateBackend:UpdateBackend';

    /**
     * Returns true if the given object is an instance of UpdateBackend.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UpdateBackend {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UpdateBackend.__pulumiType;
    }

    public readonly backendFileName!: pulumi.Output<string>;
    /**
     * Path where the backend file can be found.
     */
    public readonly directoryPath!: pulumi.Output<string>;
    /**
     * Organization name required in the cloud block.
     */
    public readonly org!: pulumi.Output<string>;
    /**
     * Project Name required in the cloud block.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Tags used when there are multiple workspaces.
     */
    public readonly tags!: pulumi.Output<string[]>;
    public readonly workspaceMap!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a UpdateBackend resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UpdateBackendArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UpdateBackendArgs | UpdateBackendState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UpdateBackendState | undefined;
            resourceInputs["backendFileName"] = state ? state.backendFileName : undefined;
            resourceInputs["directoryPath"] = state ? state.directoryPath : undefined;
            resourceInputs["org"] = state ? state.org : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["workspaceMap"] = state ? state.workspaceMap : undefined;
        } else {
            const args = argsOrState as UpdateBackendArgs | undefined;
            if ((!args || args.backendFileName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backendFileName'");
            }
            if ((!args || args.directoryPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'directoryPath'");
            }
            if ((!args || args.org === undefined) && !opts.urn) {
                throw new Error("Missing required property 'org'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.tags === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tags'");
            }
            if ((!args || args.workspaceMap === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workspaceMap'");
            }
            resourceInputs["backendFileName"] = args ? args.backendFileName : undefined;
            resourceInputs["directoryPath"] = args ? args.directoryPath : undefined;
            resourceInputs["org"] = args ? args.org : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["workspaceMap"] = args ? args.workspaceMap : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UpdateBackend.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering UpdateBackend resources.
 */
export interface UpdateBackendState {
    backendFileName?: pulumi.Input<string>;
    /**
     * Path where the backend file can be found.
     */
    directoryPath?: pulumi.Input<string>;
    /**
     * Organization name required in the cloud block.
     */
    org?: pulumi.Input<string>;
    /**
     * Project Name required in the cloud block.
     */
    project?: pulumi.Input<string>;
    /**
     * Tags used when there are multiple workspaces.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    workspaceMap?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a UpdateBackend resource.
 */
export interface UpdateBackendArgs {
    backendFileName: pulumi.Input<string>;
    /**
     * Path where the backend file can be found.
     */
    directoryPath: pulumi.Input<string>;
    /**
     * Organization name required in the cloud block.
     */
    org: pulumi.Input<string>;
    /**
     * Project Name required in the cloud block.
     */
    project: pulumi.Input<string>;
    /**
     * Tags used when there are multiple workspaces.
     */
    tags: pulumi.Input<pulumi.Input<string>[]>;
    workspaceMap: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
