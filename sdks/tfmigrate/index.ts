// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { GitCommitPushArgs, GitCommitPushState } from "./gitCommitPush";
export type GitCommitPush = import("./gitCommitPush").GitCommitPush;
export const GitCommitPush: typeof import("./gitCommitPush").GitCommitPush = null as any;
utilities.lazyLoad(exports, ["GitCommitPush"], () => require("./gitCommitPush"));

export { GitResetArgs, GitResetState } from "./gitReset";
export type GitReset = import("./gitReset").GitReset;
export const GitReset: typeof import("./gitReset").GitReset = null as any;
utilities.lazyLoad(exports, ["GitReset"], () => require("./gitReset"));

export { GithubPrArgs, GithubPrState } from "./githubPr";
export type GithubPr = import("./githubPr").GithubPr;
export const GithubPr: typeof import("./githubPr").GithubPr = null as any;
utilities.lazyLoad(exports, ["GithubPr"], () => require("./githubPr"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { StateMigrationArgs, StateMigrationState } from "./stateMigration";
export type StateMigration = import("./stateMigration").StateMigration;
export const StateMigration: typeof import("./stateMigration").StateMigration = null as any;
utilities.lazyLoad(exports, ["StateMigration"], () => require("./stateMigration"));

export { TerraformInitArgs, TerraformInitState } from "./terraformInit";
export type TerraformInit = import("./terraformInit").TerraformInit;
export const TerraformInit: typeof import("./terraformInit").TerraformInit = null as any;
utilities.lazyLoad(exports, ["TerraformInit"], () => require("./terraformInit"));

export { TerraformPlanArgs, TerraformPlanState } from "./terraformPlan";
export type TerraformPlan = import("./terraformPlan").TerraformPlan;
export const TerraformPlan: typeof import("./terraformPlan").TerraformPlan = null as any;
utilities.lazyLoad(exports, ["TerraformPlan"], () => require("./terraformPlan"));

export { UpdateBackendArgs, UpdateBackendState } from "./updateBackend";
export type UpdateBackend = import("./updateBackend").UpdateBackend;
export const UpdateBackend: typeof import("./updateBackend").UpdateBackend = null as any;
utilities.lazyLoad(exports, ["UpdateBackend"], () => require("./updateBackend"));


// Export sub-modules:
import * as config from "./config";

export {
    config,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "tfmigrate:index/gitCommitPush:GitCommitPush":
                return new GitCommitPush(name, <any>undefined, { urn })
            case "tfmigrate:index/gitReset:GitReset":
                return new GitReset(name, <any>undefined, { urn })
            case "tfmigrate:index/githubPr:GithubPr":
                return new GithubPr(name, <any>undefined, { urn })
            case "tfmigrate:index/stateMigration:StateMigration":
                return new StateMigration(name, <any>undefined, { urn })
            case "tfmigrate:index/terraformInit:TerraformInit":
                return new TerraformInit(name, <any>undefined, { urn })
            case "tfmigrate:index/terraformPlan:TerraformPlan":
                return new TerraformPlan(name, <any>undefined, { urn })
            case "tfmigrate:index/updateBackend:UpdateBackend":
                return new UpdateBackend(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("tfmigrate", "index/gitCommitPush", _module)
pulumi.runtime.registerResourceModule("tfmigrate", "index/gitReset", _module)
pulumi.runtime.registerResourceModule("tfmigrate", "index/githubPr", _module)
pulumi.runtime.registerResourceModule("tfmigrate", "index/stateMigration", _module)
pulumi.runtime.registerResourceModule("tfmigrate", "index/terraformInit", _module)
pulumi.runtime.registerResourceModule("tfmigrate", "index/terraformPlan", _module)
pulumi.runtime.registerResourceModule("tfmigrate", "index/updateBackend", _module)
pulumi.runtime.registerResourcePackage("tfmigrate", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:tfmigrate") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
