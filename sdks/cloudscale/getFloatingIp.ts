// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getFloatingIp(args?: GetFloatingIpArgs, opts?: pulumi.InvokeOptions): Promise<GetFloatingIpResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("cloudscale:index/getFloatingIp:getFloatingIp", {
        "id": args.id,
        "ipVersion": args.ipVersion,
        "network": args.network,
        "regionSlug": args.regionSlug,
        "reversePtr": args.reversePtr,
        "tags": args.tags,
        "type": args.type,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getFloatingIp.
 */
export interface GetFloatingIpArgs {
    id?: string;
    ipVersion?: number;
    network?: string;
    regionSlug?: string;
    reversePtr?: string;
    tags?: {[key: string]: string};
    type?: string;
}

/**
 * A collection of values returned by getFloatingIp.
 */
export interface GetFloatingIpResult {
    readonly href: string;
    readonly id?: string;
    readonly ipVersion?: number;
    readonly loadBalancer: string;
    readonly network: string;
    readonly nextHop: string;
    readonly prefixLength: number;
    readonly regionSlug: string;
    readonly reversePtr: string;
    readonly server: string;
    readonly tags?: {[key: string]: string};
    readonly type: string;
}
export function getFloatingIpOutput(args?: GetFloatingIpOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFloatingIpResult> {
    return pulumi.output(args).apply((a: any) => getFloatingIp(a, opts))
}

/**
 * A collection of arguments for invoking getFloatingIp.
 */
export interface GetFloatingIpOutputArgs {
    id?: pulumi.Input<string>;
    ipVersion?: pulumi.Input<number>;
    network?: pulumi.Input<string>;
    regionSlug?: pulumi.Input<string>;
    reversePtr?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    type?: pulumi.Input<string>;
}
