// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LoadBalancerHealthMonitor extends pulumi.CustomResource {
    /**
     * Get an existing LoadBalancerHealthMonitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadBalancerHealthMonitorState, opts?: pulumi.CustomResourceOptions): LoadBalancerHealthMonitor {
        return new LoadBalancerHealthMonitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudscale:index/loadBalancerHealthMonitor:LoadBalancerHealthMonitor';

    /**
     * Returns true if the given object is an instance of LoadBalancerHealthMonitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LoadBalancerHealthMonitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoadBalancerHealthMonitor.__pulumiType;
    }

    public readonly delayS!: pulumi.Output<number>;
    public readonly downThreshold!: pulumi.Output<number>;
    public /*out*/ readonly href!: pulumi.Output<string>;
    public readonly httpExpectedCodes!: pulumi.Output<string[]>;
    public readonly httpHost!: pulumi.Output<string>;
    public readonly httpMethod!: pulumi.Output<string>;
    public readonly httpUrlPath!: pulumi.Output<string>;
    public readonly httpVersion!: pulumi.Output<string>;
    public /*out*/ readonly poolHref!: pulumi.Output<string>;
    public /*out*/ readonly poolName!: pulumi.Output<string>;
    public readonly poolUuid!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeoutS!: pulumi.Output<number>;
    public readonly type!: pulumi.Output<string>;
    public readonly upThreshold!: pulumi.Output<number>;

    /**
     * Create a LoadBalancerHealthMonitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadBalancerHealthMonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoadBalancerHealthMonitorArgs | LoadBalancerHealthMonitorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoadBalancerHealthMonitorState | undefined;
            resourceInputs["delayS"] = state ? state.delayS : undefined;
            resourceInputs["downThreshold"] = state ? state.downThreshold : undefined;
            resourceInputs["href"] = state ? state.href : undefined;
            resourceInputs["httpExpectedCodes"] = state ? state.httpExpectedCodes : undefined;
            resourceInputs["httpHost"] = state ? state.httpHost : undefined;
            resourceInputs["httpMethod"] = state ? state.httpMethod : undefined;
            resourceInputs["httpUrlPath"] = state ? state.httpUrlPath : undefined;
            resourceInputs["httpVersion"] = state ? state.httpVersion : undefined;
            resourceInputs["poolHref"] = state ? state.poolHref : undefined;
            resourceInputs["poolName"] = state ? state.poolName : undefined;
            resourceInputs["poolUuid"] = state ? state.poolUuid : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeoutS"] = state ? state.timeoutS : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["upThreshold"] = state ? state.upThreshold : undefined;
        } else {
            const args = argsOrState as LoadBalancerHealthMonitorArgs | undefined;
            if ((!args || args.poolUuid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'poolUuid'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["delayS"] = args ? args.delayS : undefined;
            resourceInputs["downThreshold"] = args ? args.downThreshold : undefined;
            resourceInputs["httpExpectedCodes"] = args ? args.httpExpectedCodes : undefined;
            resourceInputs["httpHost"] = args ? args.httpHost : undefined;
            resourceInputs["httpMethod"] = args ? args.httpMethod : undefined;
            resourceInputs["httpUrlPath"] = args ? args.httpUrlPath : undefined;
            resourceInputs["httpVersion"] = args ? args.httpVersion : undefined;
            resourceInputs["poolUuid"] = args ? args.poolUuid : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeoutS"] = args ? args.timeoutS : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["upThreshold"] = args ? args.upThreshold : undefined;
            resourceInputs["href"] = undefined /*out*/;
            resourceInputs["poolHref"] = undefined /*out*/;
            resourceInputs["poolName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LoadBalancerHealthMonitor.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LoadBalancerHealthMonitor resources.
 */
export interface LoadBalancerHealthMonitorState {
    delayS?: pulumi.Input<number>;
    downThreshold?: pulumi.Input<number>;
    href?: pulumi.Input<string>;
    httpExpectedCodes?: pulumi.Input<pulumi.Input<string>[]>;
    httpHost?: pulumi.Input<string>;
    httpMethod?: pulumi.Input<string>;
    httpUrlPath?: pulumi.Input<string>;
    httpVersion?: pulumi.Input<string>;
    poolHref?: pulumi.Input<string>;
    poolName?: pulumi.Input<string>;
    poolUuid?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeoutS?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
    upThreshold?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a LoadBalancerHealthMonitor resource.
 */
export interface LoadBalancerHealthMonitorArgs {
    delayS?: pulumi.Input<number>;
    downThreshold?: pulumi.Input<number>;
    httpExpectedCodes?: pulumi.Input<pulumi.Input<string>[]>;
    httpHost?: pulumi.Input<string>;
    httpMethod?: pulumi.Input<string>;
    httpUrlPath?: pulumi.Input<string>;
    httpVersion?: pulumi.Input<string>;
    poolUuid: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeoutS?: pulumi.Input<number>;
    type: pulumi.Input<string>;
    upThreshold?: pulumi.Input<number>;
}
