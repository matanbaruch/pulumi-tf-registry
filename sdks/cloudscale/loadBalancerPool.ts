// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LoadBalancerPool extends pulumi.CustomResource {
    /**
     * Get an existing LoadBalancerPool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadBalancerPoolState, opts?: pulumi.CustomResourceOptions): LoadBalancerPool {
        return new LoadBalancerPool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudscale:index/loadBalancerPool:LoadBalancerPool';

    /**
     * Returns true if the given object is an instance of LoadBalancerPool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LoadBalancerPool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoadBalancerPool.__pulumiType;
    }

    public readonly algorithm!: pulumi.Output<string>;
    public /*out*/ readonly href!: pulumi.Output<string>;
    public /*out*/ readonly loadBalancerHref!: pulumi.Output<string>;
    public /*out*/ readonly loadBalancerName!: pulumi.Output<string>;
    public readonly loadBalancerUuid!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly protocol!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a LoadBalancerPool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadBalancerPoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoadBalancerPoolArgs | LoadBalancerPoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoadBalancerPoolState | undefined;
            resourceInputs["algorithm"] = state ? state.algorithm : undefined;
            resourceInputs["href"] = state ? state.href : undefined;
            resourceInputs["loadBalancerHref"] = state ? state.loadBalancerHref : undefined;
            resourceInputs["loadBalancerName"] = state ? state.loadBalancerName : undefined;
            resourceInputs["loadBalancerUuid"] = state ? state.loadBalancerUuid : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as LoadBalancerPoolArgs | undefined;
            if ((!args || args.algorithm === undefined) && !opts.urn) {
                throw new Error("Missing required property 'algorithm'");
            }
            if ((!args || args.loadBalancerUuid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loadBalancerUuid'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            resourceInputs["algorithm"] = args ? args.algorithm : undefined;
            resourceInputs["loadBalancerUuid"] = args ? args.loadBalancerUuid : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["href"] = undefined /*out*/;
            resourceInputs["loadBalancerHref"] = undefined /*out*/;
            resourceInputs["loadBalancerName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LoadBalancerPool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LoadBalancerPool resources.
 */
export interface LoadBalancerPoolState {
    algorithm?: pulumi.Input<string>;
    href?: pulumi.Input<string>;
    loadBalancerHref?: pulumi.Input<string>;
    loadBalancerName?: pulumi.Input<string>;
    loadBalancerUuid?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a LoadBalancerPool resource.
 */
export interface LoadBalancerPoolArgs {
    algorithm: pulumi.Input<string>;
    loadBalancerUuid: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
