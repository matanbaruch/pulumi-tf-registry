// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Subnet extends pulumi.CustomResource {
    /**
     * Get an existing Subnet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SubnetState, opts?: pulumi.CustomResourceOptions): Subnet {
        return new Subnet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudscale:index/subnet:Subnet';

    /**
     * Returns true if the given object is an instance of Subnet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Subnet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Subnet.__pulumiType;
    }

    public readonly cidr!: pulumi.Output<string>;
    public readonly disableDnsServers!: pulumi.Output<boolean | undefined>;
    public readonly dnsServers!: pulumi.Output<string[]>;
    public readonly gatewayAddress!: pulumi.Output<string>;
    public /*out*/ readonly href!: pulumi.Output<string>;
    public /*out*/ readonly networkHref!: pulumi.Output<string>;
    public /*out*/ readonly networkName!: pulumi.Output<string>;
    public readonly networkUuid!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a Subnet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SubnetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SubnetArgs | SubnetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SubnetState | undefined;
            resourceInputs["cidr"] = state ? state.cidr : undefined;
            resourceInputs["disableDnsServers"] = state ? state.disableDnsServers : undefined;
            resourceInputs["dnsServers"] = state ? state.dnsServers : undefined;
            resourceInputs["gatewayAddress"] = state ? state.gatewayAddress : undefined;
            resourceInputs["href"] = state ? state.href : undefined;
            resourceInputs["networkHref"] = state ? state.networkHref : undefined;
            resourceInputs["networkName"] = state ? state.networkName : undefined;
            resourceInputs["networkUuid"] = state ? state.networkUuid : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as SubnetArgs | undefined;
            if ((!args || args.cidr === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cidr'");
            }
            resourceInputs["cidr"] = args ? args.cidr : undefined;
            resourceInputs["disableDnsServers"] = args ? args.disableDnsServers : undefined;
            resourceInputs["dnsServers"] = args ? args.dnsServers : undefined;
            resourceInputs["gatewayAddress"] = args ? args.gatewayAddress : undefined;
            resourceInputs["networkUuid"] = args ? args.networkUuid : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["href"] = undefined /*out*/;
            resourceInputs["networkHref"] = undefined /*out*/;
            resourceInputs["networkName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Subnet.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Subnet resources.
 */
export interface SubnetState {
    cidr?: pulumi.Input<string>;
    disableDnsServers?: pulumi.Input<boolean>;
    dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    gatewayAddress?: pulumi.Input<string>;
    href?: pulumi.Input<string>;
    networkHref?: pulumi.Input<string>;
    networkName?: pulumi.Input<string>;
    networkUuid?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Subnet resource.
 */
export interface SubnetArgs {
    cidr: pulumi.Input<string>;
    disableDnsServers?: pulumi.Input<boolean>;
    dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    gatewayAddress?: pulumi.Input<string>;
    networkUuid?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
