// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { CustomImageArgs, CustomImageState } from "./customImage";
export type CustomImage = import("./customImage").CustomImage;
export const CustomImage: typeof import("./customImage").CustomImage = null as any;
utilities.lazyLoad(exports, ["CustomImage"], () => require("./customImage"));

export { FloatingIpArgs, FloatingIpState } from "./floatingIp";
export type FloatingIp = import("./floatingIp").FloatingIp;
export const FloatingIp: typeof import("./floatingIp").FloatingIp = null as any;
utilities.lazyLoad(exports, ["FloatingIp"], () => require("./floatingIp"));

export { GetCustomImageArgs, GetCustomImageResult, GetCustomImageOutputArgs } from "./getCustomImage";
export const getCustomImage: typeof import("./getCustomImage").getCustomImage = null as any;
export const getCustomImageOutput: typeof import("./getCustomImage").getCustomImageOutput = null as any;
utilities.lazyLoad(exports, ["getCustomImage","getCustomImageOutput"], () => require("./getCustomImage"));

export { GetFloatingIpArgs, GetFloatingIpResult, GetFloatingIpOutputArgs } from "./getFloatingIp";
export const getFloatingIp: typeof import("./getFloatingIp").getFloatingIp = null as any;
export const getFloatingIpOutput: typeof import("./getFloatingIp").getFloatingIpOutput = null as any;
utilities.lazyLoad(exports, ["getFloatingIp","getFloatingIpOutput"], () => require("./getFloatingIp"));

export { GetLoadBalancerArgs, GetLoadBalancerResult, GetLoadBalancerOutputArgs } from "./getLoadBalancer";
export const getLoadBalancer: typeof import("./getLoadBalancer").getLoadBalancer = null as any;
export const getLoadBalancerOutput: typeof import("./getLoadBalancer").getLoadBalancerOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancer","getLoadBalancerOutput"], () => require("./getLoadBalancer"));

export { GetLoadBalancerHealthMonitorArgs, GetLoadBalancerHealthMonitorResult, GetLoadBalancerHealthMonitorOutputArgs } from "./getLoadBalancerHealthMonitor";
export const getLoadBalancerHealthMonitor: typeof import("./getLoadBalancerHealthMonitor").getLoadBalancerHealthMonitor = null as any;
export const getLoadBalancerHealthMonitorOutput: typeof import("./getLoadBalancerHealthMonitor").getLoadBalancerHealthMonitorOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancerHealthMonitor","getLoadBalancerHealthMonitorOutput"], () => require("./getLoadBalancerHealthMonitor"));

export { GetLoadBalancerListenerArgs, GetLoadBalancerListenerResult, GetLoadBalancerListenerOutputArgs } from "./getLoadBalancerListener";
export const getLoadBalancerListener: typeof import("./getLoadBalancerListener").getLoadBalancerListener = null as any;
export const getLoadBalancerListenerOutput: typeof import("./getLoadBalancerListener").getLoadBalancerListenerOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancerListener","getLoadBalancerListenerOutput"], () => require("./getLoadBalancerListener"));

export { GetLoadBalancerPoolArgs, GetLoadBalancerPoolResult, GetLoadBalancerPoolOutputArgs } from "./getLoadBalancerPool";
export const getLoadBalancerPool: typeof import("./getLoadBalancerPool").getLoadBalancerPool = null as any;
export const getLoadBalancerPoolOutput: typeof import("./getLoadBalancerPool").getLoadBalancerPoolOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancerPool","getLoadBalancerPoolOutput"], () => require("./getLoadBalancerPool"));

export { GetLoadBalancerPoolMemberArgs, GetLoadBalancerPoolMemberResult, GetLoadBalancerPoolMemberOutputArgs } from "./getLoadBalancerPoolMember";
export const getLoadBalancerPoolMember: typeof import("./getLoadBalancerPoolMember").getLoadBalancerPoolMember = null as any;
export const getLoadBalancerPoolMemberOutput: typeof import("./getLoadBalancerPoolMember").getLoadBalancerPoolMemberOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancerPoolMember","getLoadBalancerPoolMemberOutput"], () => require("./getLoadBalancerPoolMember"));

export { GetNetworkArgs, GetNetworkResult, GetNetworkOutputArgs } from "./getNetwork";
export const getNetwork: typeof import("./getNetwork").getNetwork = null as any;
export const getNetworkOutput: typeof import("./getNetwork").getNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getNetwork","getNetworkOutput"], () => require("./getNetwork"));

export { GetObjectsUserArgs, GetObjectsUserResult, GetObjectsUserOutputArgs } from "./getObjectsUser";
export const getObjectsUser: typeof import("./getObjectsUser").getObjectsUser = null as any;
export const getObjectsUserOutput: typeof import("./getObjectsUser").getObjectsUserOutput = null as any;
utilities.lazyLoad(exports, ["getObjectsUser","getObjectsUserOutput"], () => require("./getObjectsUser"));

export { GetServerArgs, GetServerResult, GetServerOutputArgs } from "./getServer";
export const getServer: typeof import("./getServer").getServer = null as any;
export const getServerOutput: typeof import("./getServer").getServerOutput = null as any;
utilities.lazyLoad(exports, ["getServer","getServerOutput"], () => require("./getServer"));

export { GetServerGroupArgs, GetServerGroupResult, GetServerGroupOutputArgs } from "./getServerGroup";
export const getServerGroup: typeof import("./getServerGroup").getServerGroup = null as any;
export const getServerGroupOutput: typeof import("./getServerGroup").getServerGroupOutput = null as any;
utilities.lazyLoad(exports, ["getServerGroup","getServerGroupOutput"], () => require("./getServerGroup"));

export { GetSubnetArgs, GetSubnetResult, GetSubnetOutputArgs } from "./getSubnet";
export const getSubnet: typeof import("./getSubnet").getSubnet = null as any;
export const getSubnetOutput: typeof import("./getSubnet").getSubnetOutput = null as any;
utilities.lazyLoad(exports, ["getSubnet","getSubnetOutput"], () => require("./getSubnet"));

export { GetVolumeArgs, GetVolumeResult, GetVolumeOutputArgs } from "./getVolume";
export const getVolume: typeof import("./getVolume").getVolume = null as any;
export const getVolumeOutput: typeof import("./getVolume").getVolumeOutput = null as any;
utilities.lazyLoad(exports, ["getVolume","getVolumeOutput"], () => require("./getVolume"));

export { LoadBalancerArgs, LoadBalancerState } from "./loadBalancer";
export type LoadBalancer = import("./loadBalancer").LoadBalancer;
export const LoadBalancer: typeof import("./loadBalancer").LoadBalancer = null as any;
utilities.lazyLoad(exports, ["LoadBalancer"], () => require("./loadBalancer"));

export { LoadBalancerHealthMonitorArgs, LoadBalancerHealthMonitorState } from "./loadBalancerHealthMonitor";
export type LoadBalancerHealthMonitor = import("./loadBalancerHealthMonitor").LoadBalancerHealthMonitor;
export const LoadBalancerHealthMonitor: typeof import("./loadBalancerHealthMonitor").LoadBalancerHealthMonitor = null as any;
utilities.lazyLoad(exports, ["LoadBalancerHealthMonitor"], () => require("./loadBalancerHealthMonitor"));

export { LoadBalancerListenerArgs, LoadBalancerListenerState } from "./loadBalancerListener";
export type LoadBalancerListener = import("./loadBalancerListener").LoadBalancerListener;
export const LoadBalancerListener: typeof import("./loadBalancerListener").LoadBalancerListener = null as any;
utilities.lazyLoad(exports, ["LoadBalancerListener"], () => require("./loadBalancerListener"));

export { LoadBalancerPoolArgs, LoadBalancerPoolState } from "./loadBalancerPool";
export type LoadBalancerPool = import("./loadBalancerPool").LoadBalancerPool;
export const LoadBalancerPool: typeof import("./loadBalancerPool").LoadBalancerPool = null as any;
utilities.lazyLoad(exports, ["LoadBalancerPool"], () => require("./loadBalancerPool"));

export { LoadBalancerPoolMemberArgs, LoadBalancerPoolMemberState } from "./loadBalancerPoolMember";
export type LoadBalancerPoolMember = import("./loadBalancerPoolMember").LoadBalancerPoolMember;
export const LoadBalancerPoolMember: typeof import("./loadBalancerPoolMember").LoadBalancerPoolMember = null as any;
utilities.lazyLoad(exports, ["LoadBalancerPoolMember"], () => require("./loadBalancerPoolMember"));

export { NetworkArgs, NetworkState } from "./network";
export type Network = import("./network").Network;
export const Network: typeof import("./network").Network = null as any;
utilities.lazyLoad(exports, ["Network"], () => require("./network"));

export { ObjectsUserArgs, ObjectsUserState } from "./objectsUser";
export type ObjectsUser = import("./objectsUser").ObjectsUser;
export const ObjectsUser: typeof import("./objectsUser").ObjectsUser = null as any;
utilities.lazyLoad(exports, ["ObjectsUser"], () => require("./objectsUser"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ServerArgs, ServerState } from "./server";
export type Server = import("./server").Server;
export const Server: typeof import("./server").Server = null as any;
utilities.lazyLoad(exports, ["Server"], () => require("./server"));

export { ServerGroupArgs, ServerGroupState } from "./serverGroup";
export type ServerGroup = import("./serverGroup").ServerGroup;
export const ServerGroup: typeof import("./serverGroup").ServerGroup = null as any;
utilities.lazyLoad(exports, ["ServerGroup"], () => require("./serverGroup"));

export { SubnetArgs, SubnetState } from "./subnet";
export type Subnet = import("./subnet").Subnet;
export const Subnet: typeof import("./subnet").Subnet = null as any;
utilities.lazyLoad(exports, ["Subnet"], () => require("./subnet"));

export { VolumeArgs, VolumeState } from "./volume";
export type Volume = import("./volume").Volume;
export const Volume: typeof import("./volume").Volume = null as any;
utilities.lazyLoad(exports, ["Volume"], () => require("./volume"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "cloudscale:index/customImage:CustomImage":
                return new CustomImage(name, <any>undefined, { urn })
            case "cloudscale:index/floatingIp:FloatingIp":
                return new FloatingIp(name, <any>undefined, { urn })
            case "cloudscale:index/loadBalancer:LoadBalancer":
                return new LoadBalancer(name, <any>undefined, { urn })
            case "cloudscale:index/loadBalancerHealthMonitor:LoadBalancerHealthMonitor":
                return new LoadBalancerHealthMonitor(name, <any>undefined, { urn })
            case "cloudscale:index/loadBalancerListener:LoadBalancerListener":
                return new LoadBalancerListener(name, <any>undefined, { urn })
            case "cloudscale:index/loadBalancerPool:LoadBalancerPool":
                return new LoadBalancerPool(name, <any>undefined, { urn })
            case "cloudscale:index/loadBalancerPoolMember:LoadBalancerPoolMember":
                return new LoadBalancerPoolMember(name, <any>undefined, { urn })
            case "cloudscale:index/network:Network":
                return new Network(name, <any>undefined, { urn })
            case "cloudscale:index/objectsUser:ObjectsUser":
                return new ObjectsUser(name, <any>undefined, { urn })
            case "cloudscale:index/server:Server":
                return new Server(name, <any>undefined, { urn })
            case "cloudscale:index/serverGroup:ServerGroup":
                return new ServerGroup(name, <any>undefined, { urn })
            case "cloudscale:index/subnet:Subnet":
                return new Subnet(name, <any>undefined, { urn })
            case "cloudscale:index/volume:Volume":
                return new Volume(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("cloudscale", "index/customImage", _module)
pulumi.runtime.registerResourceModule("cloudscale", "index/floatingIp", _module)
pulumi.runtime.registerResourceModule("cloudscale", "index/loadBalancer", _module)
pulumi.runtime.registerResourceModule("cloudscale", "index/loadBalancerHealthMonitor", _module)
pulumi.runtime.registerResourceModule("cloudscale", "index/loadBalancerListener", _module)
pulumi.runtime.registerResourceModule("cloudscale", "index/loadBalancerPool", _module)
pulumi.runtime.registerResourceModule("cloudscale", "index/loadBalancerPoolMember", _module)
pulumi.runtime.registerResourceModule("cloudscale", "index/network", _module)
pulumi.runtime.registerResourceModule("cloudscale", "index/objectsUser", _module)
pulumi.runtime.registerResourceModule("cloudscale", "index/server", _module)
pulumi.runtime.registerResourceModule("cloudscale", "index/serverGroup", _module)
pulumi.runtime.registerResourceModule("cloudscale", "index/subnet", _module)
pulumi.runtime.registerResourceModule("cloudscale", "index/volume", _module)
pulumi.runtime.registerResourcePackage("cloudscale", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:cloudscale") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
