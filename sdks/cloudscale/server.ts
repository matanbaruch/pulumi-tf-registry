// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Server extends pulumi.CustomResource {
    /**
     * Get an existing Server resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerState, opts?: pulumi.CustomResourceOptions): Server {
        return new Server(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudscale:index/server:Server';

    /**
     * Returns true if the given object is an instance of Server.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Server {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Server.__pulumiType;
    }

    public readonly allowStoppingForUpdate!: pulumi.Output<boolean | undefined>;
    public readonly bulkVolumeSizeGb!: pulumi.Output<number | undefined>;
    public readonly flavorSlug!: pulumi.Output<string>;
    public /*out*/ readonly href!: pulumi.Output<string>;
    public readonly imageSlug!: pulumi.Output<string>;
    public readonly imageUuid!: pulumi.Output<string | undefined>;
    public readonly interfaces!: pulumi.Output<outputs.ServerInterface[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly password!: pulumi.Output<string | undefined>;
    public /*out*/ readonly privateIpv4Address!: pulumi.Output<string>;
    public /*out*/ readonly publicIpv4Address!: pulumi.Output<string>;
    public /*out*/ readonly publicIpv6Address!: pulumi.Output<string>;
    public readonly serverGroupIds!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly serverGroups!: pulumi.Output<outputs.ServerServerGroup[]>;
    public readonly skipWaitingForSshHostKeys!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly sshFingerprints!: pulumi.Output<string[]>;
    public /*out*/ readonly sshHostKeys!: pulumi.Output<string[]>;
    public readonly sshKeys!: pulumi.Output<string[] | undefined>;
    public readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ServerTimeouts | undefined>;
    public readonly useIpv6!: pulumi.Output<boolean | undefined>;
    public readonly usePrivateNetwork!: pulumi.Output<boolean | undefined>;
    public readonly usePublicNetwork!: pulumi.Output<boolean | undefined>;
    public readonly userData!: pulumi.Output<string | undefined>;
    public readonly volumeSizeGb!: pulumi.Output<number | undefined>;
    public /*out*/ readonly volumes!: pulumi.Output<outputs.ServerVolume[]>;
    public readonly zoneSlug!: pulumi.Output<string>;

    /**
     * Create a Server resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerArgs | ServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerState | undefined;
            resourceInputs["allowStoppingForUpdate"] = state ? state.allowStoppingForUpdate : undefined;
            resourceInputs["bulkVolumeSizeGb"] = state ? state.bulkVolumeSizeGb : undefined;
            resourceInputs["flavorSlug"] = state ? state.flavorSlug : undefined;
            resourceInputs["href"] = state ? state.href : undefined;
            resourceInputs["imageSlug"] = state ? state.imageSlug : undefined;
            resourceInputs["imageUuid"] = state ? state.imageUuid : undefined;
            resourceInputs["interfaces"] = state ? state.interfaces : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["privateIpv4Address"] = state ? state.privateIpv4Address : undefined;
            resourceInputs["publicIpv4Address"] = state ? state.publicIpv4Address : undefined;
            resourceInputs["publicIpv6Address"] = state ? state.publicIpv6Address : undefined;
            resourceInputs["serverGroupIds"] = state ? state.serverGroupIds : undefined;
            resourceInputs["serverGroups"] = state ? state.serverGroups : undefined;
            resourceInputs["skipWaitingForSshHostKeys"] = state ? state.skipWaitingForSshHostKeys : undefined;
            resourceInputs["sshFingerprints"] = state ? state.sshFingerprints : undefined;
            resourceInputs["sshHostKeys"] = state ? state.sshHostKeys : undefined;
            resourceInputs["sshKeys"] = state ? state.sshKeys : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["useIpv6"] = state ? state.useIpv6 : undefined;
            resourceInputs["usePrivateNetwork"] = state ? state.usePrivateNetwork : undefined;
            resourceInputs["usePublicNetwork"] = state ? state.usePublicNetwork : undefined;
            resourceInputs["userData"] = state ? state.userData : undefined;
            resourceInputs["volumeSizeGb"] = state ? state.volumeSizeGb : undefined;
            resourceInputs["volumes"] = state ? state.volumes : undefined;
            resourceInputs["zoneSlug"] = state ? state.zoneSlug : undefined;
        } else {
            const args = argsOrState as ServerArgs | undefined;
            if ((!args || args.flavorSlug === undefined) && !opts.urn) {
                throw new Error("Missing required property 'flavorSlug'");
            }
            resourceInputs["allowStoppingForUpdate"] = args ? args.allowStoppingForUpdate : undefined;
            resourceInputs["bulkVolumeSizeGb"] = args ? args.bulkVolumeSizeGb : undefined;
            resourceInputs["flavorSlug"] = args ? args.flavorSlug : undefined;
            resourceInputs["imageSlug"] = args ? args.imageSlug : undefined;
            resourceInputs["imageUuid"] = args ? args.imageUuid : undefined;
            resourceInputs["interfaces"] = args ? args.interfaces : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["serverGroupIds"] = args ? args.serverGroupIds : undefined;
            resourceInputs["skipWaitingForSshHostKeys"] = args ? args.skipWaitingForSshHostKeys : undefined;
            resourceInputs["sshKeys"] = args ? args.sshKeys : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["useIpv6"] = args ? args.useIpv6 : undefined;
            resourceInputs["usePrivateNetwork"] = args ? args.usePrivateNetwork : undefined;
            resourceInputs["usePublicNetwork"] = args ? args.usePublicNetwork : undefined;
            resourceInputs["userData"] = args ? args.userData : undefined;
            resourceInputs["volumeSizeGb"] = args ? args.volumeSizeGb : undefined;
            resourceInputs["zoneSlug"] = args ? args.zoneSlug : undefined;
            resourceInputs["href"] = undefined /*out*/;
            resourceInputs["privateIpv4Address"] = undefined /*out*/;
            resourceInputs["publicIpv4Address"] = undefined /*out*/;
            resourceInputs["publicIpv6Address"] = undefined /*out*/;
            resourceInputs["serverGroups"] = undefined /*out*/;
            resourceInputs["sshFingerprints"] = undefined /*out*/;
            resourceInputs["sshHostKeys"] = undefined /*out*/;
            resourceInputs["volumes"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Server.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Server resources.
 */
export interface ServerState {
    allowStoppingForUpdate?: pulumi.Input<boolean>;
    bulkVolumeSizeGb?: pulumi.Input<number>;
    flavorSlug?: pulumi.Input<string>;
    href?: pulumi.Input<string>;
    imageSlug?: pulumi.Input<string>;
    imageUuid?: pulumi.Input<string>;
    interfaces?: pulumi.Input<pulumi.Input<inputs.ServerInterface>[]>;
    name?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    privateIpv4Address?: pulumi.Input<string>;
    publicIpv4Address?: pulumi.Input<string>;
    publicIpv6Address?: pulumi.Input<string>;
    serverGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    serverGroups?: pulumi.Input<pulumi.Input<inputs.ServerServerGroup>[]>;
    skipWaitingForSshHostKeys?: pulumi.Input<boolean>;
    sshFingerprints?: pulumi.Input<pulumi.Input<string>[]>;
    sshHostKeys?: pulumi.Input<pulumi.Input<string>[]>;
    sshKeys?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ServerTimeouts>;
    useIpv6?: pulumi.Input<boolean>;
    usePrivateNetwork?: pulumi.Input<boolean>;
    usePublicNetwork?: pulumi.Input<boolean>;
    userData?: pulumi.Input<string>;
    volumeSizeGb?: pulumi.Input<number>;
    volumes?: pulumi.Input<pulumi.Input<inputs.ServerVolume>[]>;
    zoneSlug?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Server resource.
 */
export interface ServerArgs {
    allowStoppingForUpdate?: pulumi.Input<boolean>;
    bulkVolumeSizeGb?: pulumi.Input<number>;
    flavorSlug: pulumi.Input<string>;
    imageSlug?: pulumi.Input<string>;
    imageUuid?: pulumi.Input<string>;
    interfaces?: pulumi.Input<pulumi.Input<inputs.ServerInterface>[]>;
    name?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    serverGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    skipWaitingForSshHostKeys?: pulumi.Input<boolean>;
    sshKeys?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ServerTimeouts>;
    useIpv6?: pulumi.Input<boolean>;
    usePrivateNetwork?: pulumi.Input<boolean>;
    usePublicNetwork?: pulumi.Input<boolean>;
    userData?: pulumi.Input<string>;
    volumeSizeGb?: pulumi.Input<number>;
    zoneSlug?: pulumi.Input<string>;
}
