// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { GetAwsApiGatewayRestApiArgs, GetAwsApiGatewayRestApiResult, GetAwsApiGatewayRestApiOutputArgs } from "./getAwsApiGatewayRestApi";
export const getAwsApiGatewayRestApi: typeof import("./getAwsApiGatewayRestApi").getAwsApiGatewayRestApi = null as any;
export const getAwsApiGatewayRestApiOutput: typeof import("./getAwsApiGatewayRestApi").getAwsApiGatewayRestApiOutput = null as any;
utilities.lazyLoad(exports, ["getAwsApiGatewayRestApi","getAwsApiGatewayRestApiOutput"], () => require("./getAwsApiGatewayRestApi"));

export { GetAwsApigatewayv2ApiArgs, GetAwsApigatewayv2ApiResult, GetAwsApigatewayv2ApiOutputArgs } from "./getAwsApigatewayv2Api";
export const getAwsApigatewayv2Api: typeof import("./getAwsApigatewayv2Api").getAwsApigatewayv2Api = null as any;
export const getAwsApigatewayv2ApiOutput: typeof import("./getAwsApigatewayv2Api").getAwsApigatewayv2ApiOutput = null as any;
utilities.lazyLoad(exports, ["getAwsApigatewayv2Api","getAwsApigatewayv2ApiOutput"], () => require("./getAwsApigatewayv2Api"));

export { GetAwsCloudwatchLogGroupArgs, GetAwsCloudwatchLogGroupResult, GetAwsCloudwatchLogGroupOutputArgs } from "./getAwsCloudwatchLogGroup";
export const getAwsCloudwatchLogGroup: typeof import("./getAwsCloudwatchLogGroup").getAwsCloudwatchLogGroup = null as any;
export const getAwsCloudwatchLogGroupOutput: typeof import("./getAwsCloudwatchLogGroup").getAwsCloudwatchLogGroupOutput = null as any;
utilities.lazyLoad(exports, ["getAwsCloudwatchLogGroup","getAwsCloudwatchLogGroupOutput"], () => require("./getAwsCloudwatchLogGroup"));

export { GetAwsCodebuildProjectArgs, GetAwsCodebuildProjectResult, GetAwsCodebuildProjectOutputArgs } from "./getAwsCodebuildProject";
export const getAwsCodebuildProject: typeof import("./getAwsCodebuildProject").getAwsCodebuildProject = null as any;
export const getAwsCodebuildProjectOutput: typeof import("./getAwsCodebuildProject").getAwsCodebuildProjectOutput = null as any;
utilities.lazyLoad(exports, ["getAwsCodebuildProject","getAwsCodebuildProjectOutput"], () => require("./getAwsCodebuildProject"));

export { GetAwsDxGatewayAssociationArgs, GetAwsDxGatewayAssociationResult, GetAwsDxGatewayAssociationOutputArgs } from "./getAwsDxGatewayAssociation";
export const getAwsDxGatewayAssociation: typeof import("./getAwsDxGatewayAssociation").getAwsDxGatewayAssociation = null as any;
export const getAwsDxGatewayAssociationOutput: typeof import("./getAwsDxGatewayAssociation").getAwsDxGatewayAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getAwsDxGatewayAssociation","getAwsDxGatewayAssociationOutput"], () => require("./getAwsDxGatewayAssociation"));

export { GetAwsDynamodbTableArgs, GetAwsDynamodbTableResult, GetAwsDynamodbTableOutputArgs } from "./getAwsDynamodbTable";
export const getAwsDynamodbTable: typeof import("./getAwsDynamodbTable").getAwsDynamodbTable = null as any;
export const getAwsDynamodbTableOutput: typeof import("./getAwsDynamodbTable").getAwsDynamodbTableOutput = null as any;
utilities.lazyLoad(exports, ["getAwsDynamodbTable","getAwsDynamodbTableOutput"], () => require("./getAwsDynamodbTable"));

export { GetAwsEc2TransitGatewayVpcAttachmentArgs, GetAwsEc2TransitGatewayVpcAttachmentResult, GetAwsEc2TransitGatewayVpcAttachmentOutputArgs } from "./getAwsEc2TransitGatewayVpcAttachment";
export const getAwsEc2TransitGatewayVpcAttachment: typeof import("./getAwsEc2TransitGatewayVpcAttachment").getAwsEc2TransitGatewayVpcAttachment = null as any;
export const getAwsEc2TransitGatewayVpcAttachmentOutput: typeof import("./getAwsEc2TransitGatewayVpcAttachment").getAwsEc2TransitGatewayVpcAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getAwsEc2TransitGatewayVpcAttachment","getAwsEc2TransitGatewayVpcAttachmentOutput"], () => require("./getAwsEc2TransitGatewayVpcAttachment"));

export { GetAwsEcrRepositoryArgs, GetAwsEcrRepositoryResult, GetAwsEcrRepositoryOutputArgs } from "./getAwsEcrRepository";
export const getAwsEcrRepository: typeof import("./getAwsEcrRepository").getAwsEcrRepository = null as any;
export const getAwsEcrRepositoryOutput: typeof import("./getAwsEcrRepository").getAwsEcrRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getAwsEcrRepository","getAwsEcrRepositoryOutput"], () => require("./getAwsEcrRepository"));

export { GetAwsLambdaFunctionArgs, GetAwsLambdaFunctionResult, GetAwsLambdaFunctionOutputArgs } from "./getAwsLambdaFunction";
export const getAwsLambdaFunction: typeof import("./getAwsLambdaFunction").getAwsLambdaFunction = null as any;
export const getAwsLambdaFunctionOutput: typeof import("./getAwsLambdaFunction").getAwsLambdaFunctionOutput = null as any;
utilities.lazyLoad(exports, ["getAwsLambdaFunction","getAwsLambdaFunctionOutput"], () => require("./getAwsLambdaFunction"));

export { GetAwsNatGatewayArgs, GetAwsNatGatewayResult, GetAwsNatGatewayOutputArgs } from "./getAwsNatGateway";
export const getAwsNatGateway: typeof import("./getAwsNatGateway").getAwsNatGateway = null as any;
export const getAwsNatGatewayOutput: typeof import("./getAwsNatGateway").getAwsNatGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getAwsNatGateway","getAwsNatGatewayOutput"], () => require("./getAwsNatGateway"));

export { GetAwsSnsTopicArgs, GetAwsSnsTopicResult, GetAwsSnsTopicOutputArgs } from "./getAwsSnsTopic";
export const getAwsSnsTopic: typeof import("./getAwsSnsTopic").getAwsSnsTopic = null as any;
export const getAwsSnsTopicOutput: typeof import("./getAwsSnsTopic").getAwsSnsTopicOutput = null as any;
utilities.lazyLoad(exports, ["getAwsSnsTopic","getAwsSnsTopicOutput"], () => require("./getAwsSnsTopic"));

export { GetAwsSnsTopicSubscriptionArgs, GetAwsSnsTopicSubscriptionResult, GetAwsSnsTopicSubscriptionOutputArgs } from "./getAwsSnsTopicSubscription";
export const getAwsSnsTopicSubscription: typeof import("./getAwsSnsTopicSubscription").getAwsSnsTopicSubscription = null as any;
export const getAwsSnsTopicSubscriptionOutput: typeof import("./getAwsSnsTopicSubscription").getAwsSnsTopicSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getAwsSnsTopicSubscription","getAwsSnsTopicSubscriptionOutput"], () => require("./getAwsSnsTopicSubscription"));

export { GetAwsSqsQueueArgs, GetAwsSqsQueueResult, GetAwsSqsQueueOutputArgs } from "./getAwsSqsQueue";
export const getAwsSqsQueue: typeof import("./getAwsSqsQueue").getAwsSqsQueue = null as any;
export const getAwsSqsQueueOutput: typeof import("./getAwsSqsQueue").getAwsSqsQueueOutput = null as any;
utilities.lazyLoad(exports, ["getAwsSqsQueue","getAwsSqsQueueOutput"], () => require("./getAwsSqsQueue"));

export { GetAwsVpcEndpointArgs, GetAwsVpcEndpointResult, GetAwsVpcEndpointOutputArgs } from "./getAwsVpcEndpoint";
export const getAwsVpcEndpoint: typeof import("./getAwsVpcEndpoint").getAwsVpcEndpoint = null as any;
export const getAwsVpcEndpointOutput: typeof import("./getAwsVpcEndpoint").getAwsVpcEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getAwsVpcEndpoint","getAwsVpcEndpointOutput"], () => require("./getAwsVpcEndpoint"));

export { GetAwsVpnConnectionArgs, GetAwsVpnConnectionResult, GetAwsVpnConnectionOutputArgs } from "./getAwsVpnConnection";
export const getAwsVpnConnection: typeof import("./getAwsVpnConnection").getAwsVpnConnection = null as any;
export const getAwsVpnConnectionOutput: typeof import("./getAwsVpnConnection").getAwsVpnConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getAwsVpnConnection","getAwsVpnConnectionOutput"], () => require("./getAwsVpnConnection"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as types from "./types";

export {
    types,
};
pulumi.runtime.registerResourcePackage("infracost", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:infracost") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
