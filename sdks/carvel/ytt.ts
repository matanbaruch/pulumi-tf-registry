// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Ytt extends pulumi.CustomResource {
    /**
     * Get an existing Ytt resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: YttState, opts?: pulumi.CustomResourceOptions): Ytt {
        return new Ytt(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'carvel:index/ytt:Ytt';

    /**
     * Returns true if the given object is an instance of Ytt.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ytt {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ytt.__pulumiType;
    }

    /**
     * Configuration YAML
     */
    public readonly configYaml!: pulumi.Output<string | undefined>;
    /**
     * Enable debug logging
     */
    public readonly debugLogs!: pulumi.Output<boolean | undefined>;
    /**
     * Files
     */
    public readonly files!: pulumi.Output<string[] | undefined>;
    /**
     * Set to ignore unknown comments
     */
    public readonly ignoreUnknownComments!: pulumi.Output<boolean | undefined>;
    /**
     * Result
     */
    public /*out*/ readonly result!: pulumi.Output<string>;
    /**
     * Data values as strings
     */
    public readonly values!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Data values as YAML
     */
    public readonly valuesYaml!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a Ytt resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: YttArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: YttArgs | YttState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as YttState | undefined;
            resourceInputs["configYaml"] = state ? state.configYaml : undefined;
            resourceInputs["debugLogs"] = state ? state.debugLogs : undefined;
            resourceInputs["files"] = state ? state.files : undefined;
            resourceInputs["ignoreUnknownComments"] = state ? state.ignoreUnknownComments : undefined;
            resourceInputs["result"] = state ? state.result : undefined;
            resourceInputs["values"] = state ? state.values : undefined;
            resourceInputs["valuesYaml"] = state ? state.valuesYaml : undefined;
        } else {
            const args = argsOrState as YttArgs | undefined;
            resourceInputs["configYaml"] = args?.configYaml ? pulumi.secret(args.configYaml) : undefined;
            resourceInputs["debugLogs"] = args ? args.debugLogs : undefined;
            resourceInputs["files"] = args ? args.files : undefined;
            resourceInputs["ignoreUnknownComments"] = args ? args.ignoreUnknownComments : undefined;
            resourceInputs["values"] = args?.values ? pulumi.secret(args.values) : undefined;
            resourceInputs["valuesYaml"] = args?.valuesYaml ? pulumi.secret(args.valuesYaml) : undefined;
            resourceInputs["result"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["configYaml", "result", "values", "valuesYaml"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Ytt.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ytt resources.
 */
export interface YttState {
    /**
     * Configuration YAML
     */
    configYaml?: pulumi.Input<string>;
    /**
     * Enable debug logging
     */
    debugLogs?: pulumi.Input<boolean>;
    /**
     * Files
     */
    files?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set to ignore unknown comments
     */
    ignoreUnknownComments?: pulumi.Input<boolean>;
    /**
     * Result
     */
    result?: pulumi.Input<string>;
    /**
     * Data values as strings
     */
    values?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Data values as YAML
     */
    valuesYaml?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Ytt resource.
 */
export interface YttArgs {
    /**
     * Configuration YAML
     */
    configYaml?: pulumi.Input<string>;
    /**
     * Enable debug logging
     */
    debugLogs?: pulumi.Input<boolean>;
    /**
     * Files
     */
    files?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set to ignore unknown comments
     */
    ignoreUnknownComments?: pulumi.Input<boolean>;
    /**
     * Data values as strings
     */
    values?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Data values as YAML
     */
    valuesYaml?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
