// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Kapp extends pulumi.CustomResource {
    /**
     * Get an existing Kapp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KappState, opts?: pulumi.CustomResourceOptions): Kapp {
        return new Kapp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'carvel:index/kapp:Kapp';

    /**
     * Returns true if the given object is an instance of Kapp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Kapp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Kapp.__pulumiType;
    }

    /**
     * App name
     */
    public readonly app!: pulumi.Output<string>;
    /**
     * Internal (forces resource update when detected cluster drift)
     */
    public readonly clusterDriftDetected!: pulumi.Output<boolean | undefined>;
    /**
     * Configuration as YAML
     */
    public readonly configYaml!: pulumi.Output<string | undefined>;
    /**
     * Enable debug logging
     */
    public readonly debugLogs!: pulumi.Output<boolean | undefined>;
    public readonly delete!: pulumi.Output<outputs.KappDelete | undefined>;
    public readonly deploy!: pulumi.Output<outputs.KappDeploy | undefined>;
    /**
     * Show changes
     */
    public readonly diffChanges!: pulumi.Output<boolean | undefined>;
    /**
     * Show number of lines around changed lines
     */
    public readonly diffContext!: pulumi.Output<number | undefined>;
    /**
     * Files
     */
    public readonly files!: pulumi.Output<string[] | undefined>;
    /**
     * Namespace name
     */
    public readonly namespace!: pulumi.Output<string>;

    /**
     * Create a Kapp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KappArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KappArgs | KappState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KappState | undefined;
            resourceInputs["app"] = state ? state.app : undefined;
            resourceInputs["clusterDriftDetected"] = state ? state.clusterDriftDetected : undefined;
            resourceInputs["configYaml"] = state ? state.configYaml : undefined;
            resourceInputs["debugLogs"] = state ? state.debugLogs : undefined;
            resourceInputs["delete"] = state ? state.delete : undefined;
            resourceInputs["deploy"] = state ? state.deploy : undefined;
            resourceInputs["diffChanges"] = state ? state.diffChanges : undefined;
            resourceInputs["diffContext"] = state ? state.diffContext : undefined;
            resourceInputs["files"] = state ? state.files : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
        } else {
            const args = argsOrState as KappArgs | undefined;
            if ((!args || args.app === undefined) && !opts.urn) {
                throw new Error("Missing required property 'app'");
            }
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            resourceInputs["app"] = args ? args.app : undefined;
            resourceInputs["clusterDriftDetected"] = args ? args.clusterDriftDetected : undefined;
            resourceInputs["configYaml"] = args?.configYaml ? pulumi.secret(args.configYaml) : undefined;
            resourceInputs["debugLogs"] = args ? args.debugLogs : undefined;
            resourceInputs["delete"] = args ? args.delete : undefined;
            resourceInputs["deploy"] = args ? args.deploy : undefined;
            resourceInputs["diffChanges"] = args ? args.diffChanges : undefined;
            resourceInputs["diffContext"] = args ? args.diffContext : undefined;
            resourceInputs["files"] = args ? args.files : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["configYaml"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Kapp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Kapp resources.
 */
export interface KappState {
    /**
     * App name
     */
    app?: pulumi.Input<string>;
    /**
     * Internal (forces resource update when detected cluster drift)
     */
    clusterDriftDetected?: pulumi.Input<boolean>;
    /**
     * Configuration as YAML
     */
    configYaml?: pulumi.Input<string>;
    /**
     * Enable debug logging
     */
    debugLogs?: pulumi.Input<boolean>;
    delete?: pulumi.Input<inputs.KappDelete>;
    deploy?: pulumi.Input<inputs.KappDeploy>;
    /**
     * Show changes
     */
    diffChanges?: pulumi.Input<boolean>;
    /**
     * Show number of lines around changed lines
     */
    diffContext?: pulumi.Input<number>;
    /**
     * Files
     */
    files?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Namespace name
     */
    namespace?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Kapp resource.
 */
export interface KappArgs {
    /**
     * App name
     */
    app: pulumi.Input<string>;
    /**
     * Internal (forces resource update when detected cluster drift)
     */
    clusterDriftDetected?: pulumi.Input<boolean>;
    /**
     * Configuration as YAML
     */
    configYaml?: pulumi.Input<string>;
    /**
     * Enable debug logging
     */
    debugLogs?: pulumi.Input<boolean>;
    delete?: pulumi.Input<inputs.KappDelete>;
    deploy?: pulumi.Input<inputs.KappDeploy>;
    /**
     * Show changes
     */
    diffChanges?: pulumi.Input<boolean>;
    /**
     * Show number of lines around changed lines
     */
    diffContext?: pulumi.Input<number>;
    /**
     * Files
     */
    files?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Namespace name
     */
    namespace: pulumi.Input<string>;
}
