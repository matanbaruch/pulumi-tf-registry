// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { GetKbldArgs, GetKbldResult, GetKbldOutputArgs } from "./getKbld";
export const getKbld: typeof import("./getKbld").getKbld = null as any;
export const getKbldOutput: typeof import("./getKbld").getKbldOutput = null as any;
utilities.lazyLoad(exports, ["getKbld","getKbldOutput"], () => require("./getKbld"));

export { GetYttArgs, GetYttResult, GetYttOutputArgs } from "./getYtt";
export const getYtt: typeof import("./getYtt").getYtt = null as any;
export const getYttOutput: typeof import("./getYtt").getYttOutput = null as any;
utilities.lazyLoad(exports, ["getYtt","getYttOutput"], () => require("./getYtt"));

export { KappArgs, KappState } from "./kapp";
export type Kapp = import("./kapp").Kapp;
export const Kapp: typeof import("./kapp").Kapp = null as any;
utilities.lazyLoad(exports, ["Kapp"], () => require("./kapp"));

export { KbldArgs, KbldState } from "./kbld";
export type Kbld = import("./kbld").Kbld;
export const Kbld: typeof import("./kbld").Kbld = null as any;
utilities.lazyLoad(exports, ["Kbld"], () => require("./kbld"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { YttArgs, YttState } from "./ytt";
export type Ytt = import("./ytt").Ytt;
export const Ytt: typeof import("./ytt").Ytt = null as any;
utilities.lazyLoad(exports, ["Ytt"], () => require("./ytt"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "carvel:index/kapp:Kapp":
                return new Kapp(name, <any>undefined, { urn })
            case "carvel:index/kbld:Kbld":
                return new Kbld(name, <any>undefined, { urn })
            case "carvel:index/ytt:Ytt":
                return new Ytt(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("carvel", "index/kapp", _module)
pulumi.runtime.registerResourceModule("carvel", "index/kbld", _module)
pulumi.runtime.registerResourceModule("carvel", "index/ytt", _module)
pulumi.runtime.registerResourcePackage("carvel", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:carvel") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
