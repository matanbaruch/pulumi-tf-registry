// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getYtt(args?: GetYttArgs, opts?: pulumi.InvokeOptions): Promise<GetYttResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("carvel:index/getYtt:getYtt", {
        "configYaml": args.configYaml,
        "debugLogs": args.debugLogs,
        "files": args.files,
        "id": args.id,
        "ignoreUnknownComments": args.ignoreUnknownComments,
        "values": args.values,
        "valuesYaml": args.valuesYaml,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getYtt.
 */
export interface GetYttArgs {
    configYaml?: string;
    debugLogs?: boolean;
    files?: string[];
    id?: string;
    ignoreUnknownComments?: boolean;
    values?: {[key: string]: string};
    valuesYaml?: {[key: string]: string};
}

/**
 * A collection of values returned by getYtt.
 */
export interface GetYttResult {
    readonly configYaml?: string;
    readonly debugLogs?: boolean;
    readonly files?: string[];
    readonly id: string;
    readonly ignoreUnknownComments?: boolean;
    readonly result: string;
    readonly values?: {[key: string]: string};
    readonly valuesYaml?: {[key: string]: string};
}
export function getYttOutput(args?: GetYttOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetYttResult> {
    return pulumi.output(args).apply((a: any) => getYtt(a, opts))
}

/**
 * A collection of arguments for invoking getYtt.
 */
export interface GetYttOutputArgs {
    configYaml?: pulumi.Input<string>;
    debugLogs?: pulumi.Input<boolean>;
    files?: pulumi.Input<pulumi.Input<string>[]>;
    id?: pulumi.Input<string>;
    ignoreUnknownComments?: pulumi.Input<boolean>;
    values?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    valuesYaml?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
