// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Webhook extends pulumi.CustomResource {
    /**
     * Get an existing Webhook resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WebhookState, opts?: pulumi.CustomResourceOptions): Webhook {
        return new Webhook(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'xray:index/webhook:Webhook';

    /**
     * Returns true if the given object is an instance of Webhook.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Webhook {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Webhook.__pulumiType;
    }

    /**
     * A free text description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Any custom headers that may need to be added to invoke the webhook. Name/value pairs.
     */
    public readonly headers!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * An identifier for the webhook. This is the name that will be used by any Watches that want to invoke the webhook in case
     * of a violation
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A password as required by the webhook.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * The URL that this webhook invokes. For details of the payload provided by Xray to the webhook, please refer to Webhook
     * Payload.
     */
    public readonly url!: pulumi.Output<string>;
    /**
     * Set the webhook to go through the predefined proxy. For more information, see [Managing
     * Proxies](https://jfrog.com/help/r/jfrog-platform-administration-documentation/managing-proxies).
     */
    public readonly useProxy!: pulumi.Output<boolean>;
    /**
     * An username as required by the webhook.
     */
    public readonly userName!: pulumi.Output<string | undefined>;

    /**
     * Create a Webhook resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WebhookArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WebhookArgs | WebhookState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WebhookState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["headers"] = state ? state.headers : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["useProxy"] = state ? state.useProxy : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
        } else {
            const args = argsOrState as WebhookArgs | undefined;
            if ((!args || args.url === undefined) && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["headers"] = args ? args.headers : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["useProxy"] = args ? args.useProxy : undefined;
            resourceInputs["userName"] = args ? args.userName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Webhook.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Webhook resources.
 */
export interface WebhookState {
    /**
     * A free text description.
     */
    description?: pulumi.Input<string>;
    /**
     * Any custom headers that may need to be added to invoke the webhook. Name/value pairs.
     */
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * An identifier for the webhook. This is the name that will be used by any Watches that want to invoke the webhook in case
     * of a violation
     */
    name?: pulumi.Input<string>;
    /**
     * A password as required by the webhook.
     */
    password?: pulumi.Input<string>;
    /**
     * The URL that this webhook invokes. For details of the payload provided by Xray to the webhook, please refer to Webhook
     * Payload.
     */
    url?: pulumi.Input<string>;
    /**
     * Set the webhook to go through the predefined proxy. For more information, see [Managing
     * Proxies](https://jfrog.com/help/r/jfrog-platform-administration-documentation/managing-proxies).
     */
    useProxy?: pulumi.Input<boolean>;
    /**
     * An username as required by the webhook.
     */
    userName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Webhook resource.
 */
export interface WebhookArgs {
    /**
     * A free text description.
     */
    description?: pulumi.Input<string>;
    /**
     * Any custom headers that may need to be added to invoke the webhook. Name/value pairs.
     */
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * An identifier for the webhook. This is the name that will be used by any Watches that want to invoke the webhook in case
     * of a violation
     */
    name?: pulumi.Input<string>;
    /**
     * A password as required by the webhook.
     */
    password?: pulumi.Input<string>;
    /**
     * The URL that this webhook invokes. For details of the payload provided by Xray to the webhook, please refer to Webhook
     * Payload.
     */
    url: pulumi.Input<string>;
    /**
     * Set the webhook to go through the predefined proxy. For more information, see [Managing
     * Proxies](https://jfrog.com/help/r/jfrog-platform-administration-documentation/managing-proxies).
     */
    useProxy?: pulumi.Input<boolean>;
    /**
     * An username as required by the webhook.
     */
    userName?: pulumi.Input<string>;
}
