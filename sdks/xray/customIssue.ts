// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CustomIssue extends pulumi.CustomResource {
    /**
     * Get an existing CustomIssue resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CustomIssueState, opts?: pulumi.CustomResourceOptions): CustomIssue {
        return new CustomIssue(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'xray:index/customIssue:CustomIssue';

    /**
     * Returns true if the given object is an instance of CustomIssue.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CustomIssue {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomIssue.__pulumiType;
    }

    /**
     * Component of custom issue
     */
    public readonly components!: pulumi.Output<outputs.CustomIssueComponent[] | undefined>;
    /**
     * CVE of the custom issue
     */
    public readonly cves!: pulumi.Output<outputs.CustomIssueCfe[] | undefined>;
    /**
     * Description of custom issue
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Name of the custom issue. It must not begin with 'xray' (case insensitive)
     */
    public readonly name!: pulumi.Output<string>;
    public readonly packageType!: pulumi.Output<string>;
    /**
     * Provider of custom issue. It must not be 'jfrog' (case insensitive)
     */
    public readonly providerName!: pulumi.Output<string>;
    /**
     * Severity of custom issue. Valid values: Critical, High, Medium, Low, Information
     */
    public readonly severity!: pulumi.Output<string>;
    /**
     * List of sources
     */
    public readonly sources!: pulumi.Output<outputs.CustomIssueSource[] | undefined>;
    /**
     * Summary of custom issue
     */
    public readonly summary!: pulumi.Output<string>;
    /**
     * Type of custom issue. Valid values: other, performance, security, versions
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a CustomIssue resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CustomIssueArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CustomIssueArgs | CustomIssueState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CustomIssueState | undefined;
            resourceInputs["components"] = state ? state.components : undefined;
            resourceInputs["cves"] = state ? state.cves : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["packageType"] = state ? state.packageType : undefined;
            resourceInputs["providerName"] = state ? state.providerName : undefined;
            resourceInputs["severity"] = state ? state.severity : undefined;
            resourceInputs["sources"] = state ? state.sources : undefined;
            resourceInputs["summary"] = state ? state.summary : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as CustomIssueArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.packageType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'packageType'");
            }
            if ((!args || args.providerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'providerName'");
            }
            if ((!args || args.severity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'severity'");
            }
            if ((!args || args.summary === undefined) && !opts.urn) {
                throw new Error("Missing required property 'summary'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["components"] = args ? args.components : undefined;
            resourceInputs["cves"] = args ? args.cves : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["packageType"] = args ? args.packageType : undefined;
            resourceInputs["providerName"] = args ? args.providerName : undefined;
            resourceInputs["severity"] = args ? args.severity : undefined;
            resourceInputs["sources"] = args ? args.sources : undefined;
            resourceInputs["summary"] = args ? args.summary : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CustomIssue.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CustomIssue resources.
 */
export interface CustomIssueState {
    /**
     * Component of custom issue
     */
    components?: pulumi.Input<pulumi.Input<inputs.CustomIssueComponent>[]>;
    /**
     * CVE of the custom issue
     */
    cves?: pulumi.Input<pulumi.Input<inputs.CustomIssueCfe>[]>;
    /**
     * Description of custom issue
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the custom issue. It must not begin with 'xray' (case insensitive)
     */
    name?: pulumi.Input<string>;
    packageType?: pulumi.Input<string>;
    /**
     * Provider of custom issue. It must not be 'jfrog' (case insensitive)
     */
    providerName?: pulumi.Input<string>;
    /**
     * Severity of custom issue. Valid values: Critical, High, Medium, Low, Information
     */
    severity?: pulumi.Input<string>;
    /**
     * List of sources
     */
    sources?: pulumi.Input<pulumi.Input<inputs.CustomIssueSource>[]>;
    /**
     * Summary of custom issue
     */
    summary?: pulumi.Input<string>;
    /**
     * Type of custom issue. Valid values: other, performance, security, versions
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CustomIssue resource.
 */
export interface CustomIssueArgs {
    /**
     * Component of custom issue
     */
    components?: pulumi.Input<pulumi.Input<inputs.CustomIssueComponent>[]>;
    /**
     * CVE of the custom issue
     */
    cves?: pulumi.Input<pulumi.Input<inputs.CustomIssueCfe>[]>;
    /**
     * Description of custom issue
     */
    description: pulumi.Input<string>;
    /**
     * Name of the custom issue. It must not begin with 'xray' (case insensitive)
     */
    name?: pulumi.Input<string>;
    packageType: pulumi.Input<string>;
    /**
     * Provider of custom issue. It must not be 'jfrog' (case insensitive)
     */
    providerName: pulumi.Input<string>;
    /**
     * Severity of custom issue. Valid values: Critical, High, Medium, Low, Information
     */
    severity: pulumi.Input<string>;
    /**
     * List of sources
     */
    sources?: pulumi.Input<pulumi.Input<inputs.CustomIssueSource>[]>;
    /**
     * Summary of custom issue
     */
    summary: pulumi.Input<string>;
    /**
     * Type of custom issue. Valid values: other, performance, security, versions
     */
    type: pulumi.Input<string>;
}
