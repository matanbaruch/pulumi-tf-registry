// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IgnoreRule extends pulumi.CustomResource {
    /**
     * Get an existing IgnoreRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IgnoreRuleState, opts?: pulumi.CustomResourceOptions): IgnoreRule {
        return new IgnoreRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'xray:index/ignoreRule:IgnoreRule';

    /**
     * Returns true if the given object is an instance of IgnoreRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IgnoreRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IgnoreRule.__pulumiType;
    }

    /**
     * List of specific artifacts to ignore. Omit to apply to all.
     */
    public readonly artifacts!: pulumi.Output<outputs.IgnoreRuleArtifact[] | undefined>;
    public /*out*/ readonly author!: pulumi.Output<string>;
    /**
     * List of specific builds to ignore. Omit to apply to all.
     */
    public readonly builds!: pulumi.Output<outputs.IgnoreRuleBuild[] | undefined>;
    /**
     * List of specific components to ignore. Omit to apply to all.
     */
    public readonly components!: pulumi.Output<outputs.IgnoreRuleComponent[] | undefined>;
    public /*out*/ readonly created!: pulumi.Output<string>;
    /**
     * List of specific CVEs to ignore. Omit to apply to all. Should set to 'any' when 'vulnerabilities' is set to 'any'.
     */
    public readonly cves!: pulumi.Output<string[] | undefined>;
    /**
     * List of Docker layer SHA256 hashes to ignore. Omit to apply to all.
     */
    public readonly dockerLayers!: pulumi.Output<string[] | undefined>;
    /**
     * The Ignore Rule will be active until the expiration date. At that date it will automatically get deleted. The rule with
     * the expiration date less than current day, will error out.
     */
    public readonly expirationDate!: pulumi.Output<string | undefined>;
    public /*out*/ readonly isExpired!: pulumi.Output<boolean>;
    /**
     * List of specific licenses to ignore. Omit to apply to all.
     */
    public readonly licenses!: pulumi.Output<string[] | undefined>;
    /**
     * Notes of the ignore rule
     */
    public readonly notes!: pulumi.Output<string>;
    /**
     * Operational risk to ignore. Only accept 'any'
     */
    public readonly operationalRisks!: pulumi.Output<string[] | undefined>;
    /**
     * List of specific policies to ignore. Omit to apply to all.
     */
    public readonly policies!: pulumi.Output<string[] | undefined>;
    /**
     * Project key for assigning this resource to. Must be 2 - 10 lowercase alphanumeric and hyphen characters.
     */
    public readonly projectKey!: pulumi.Output<string | undefined>;
    /**
     * List of specific release bundles to ignore. Omit to apply to all.
     */
    public readonly releaseBundles!: pulumi.Output<outputs.IgnoreRuleReleaseBundle[] | undefined>;
    /**
     * List of specific vulnerabilities to ignore. Omit to apply to all.
     */
    public readonly vulnerabilities!: pulumi.Output<string[] | undefined>;
    /**
     * List of specific watches to ignore. Omit to apply to all.
     */
    public readonly watches!: pulumi.Output<string[] | undefined>;

    /**
     * Create a IgnoreRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IgnoreRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IgnoreRuleArgs | IgnoreRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IgnoreRuleState | undefined;
            resourceInputs["artifacts"] = state ? state.artifacts : undefined;
            resourceInputs["author"] = state ? state.author : undefined;
            resourceInputs["builds"] = state ? state.builds : undefined;
            resourceInputs["components"] = state ? state.components : undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["cves"] = state ? state.cves : undefined;
            resourceInputs["dockerLayers"] = state ? state.dockerLayers : undefined;
            resourceInputs["expirationDate"] = state ? state.expirationDate : undefined;
            resourceInputs["isExpired"] = state ? state.isExpired : undefined;
            resourceInputs["licenses"] = state ? state.licenses : undefined;
            resourceInputs["notes"] = state ? state.notes : undefined;
            resourceInputs["operationalRisks"] = state ? state.operationalRisks : undefined;
            resourceInputs["policies"] = state ? state.policies : undefined;
            resourceInputs["projectKey"] = state ? state.projectKey : undefined;
            resourceInputs["releaseBundles"] = state ? state.releaseBundles : undefined;
            resourceInputs["vulnerabilities"] = state ? state.vulnerabilities : undefined;
            resourceInputs["watches"] = state ? state.watches : undefined;
        } else {
            const args = argsOrState as IgnoreRuleArgs | undefined;
            if ((!args || args.notes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'notes'");
            }
            resourceInputs["artifacts"] = args ? args.artifacts : undefined;
            resourceInputs["builds"] = args ? args.builds : undefined;
            resourceInputs["components"] = args ? args.components : undefined;
            resourceInputs["cves"] = args ? args.cves : undefined;
            resourceInputs["dockerLayers"] = args ? args.dockerLayers : undefined;
            resourceInputs["expirationDate"] = args ? args.expirationDate : undefined;
            resourceInputs["licenses"] = args ? args.licenses : undefined;
            resourceInputs["notes"] = args ? args.notes : undefined;
            resourceInputs["operationalRisks"] = args ? args.operationalRisks : undefined;
            resourceInputs["policies"] = args ? args.policies : undefined;
            resourceInputs["projectKey"] = args ? args.projectKey : undefined;
            resourceInputs["releaseBundles"] = args ? args.releaseBundles : undefined;
            resourceInputs["vulnerabilities"] = args ? args.vulnerabilities : undefined;
            resourceInputs["watches"] = args ? args.watches : undefined;
            resourceInputs["author"] = undefined /*out*/;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["isExpired"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IgnoreRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IgnoreRule resources.
 */
export interface IgnoreRuleState {
    /**
     * List of specific artifacts to ignore. Omit to apply to all.
     */
    artifacts?: pulumi.Input<pulumi.Input<inputs.IgnoreRuleArtifact>[]>;
    author?: pulumi.Input<string>;
    /**
     * List of specific builds to ignore. Omit to apply to all.
     */
    builds?: pulumi.Input<pulumi.Input<inputs.IgnoreRuleBuild>[]>;
    /**
     * List of specific components to ignore. Omit to apply to all.
     */
    components?: pulumi.Input<pulumi.Input<inputs.IgnoreRuleComponent>[]>;
    created?: pulumi.Input<string>;
    /**
     * List of specific CVEs to ignore. Omit to apply to all. Should set to 'any' when 'vulnerabilities' is set to 'any'.
     */
    cves?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of Docker layer SHA256 hashes to ignore. Omit to apply to all.
     */
    dockerLayers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Ignore Rule will be active until the expiration date. At that date it will automatically get deleted. The rule with
     * the expiration date less than current day, will error out.
     */
    expirationDate?: pulumi.Input<string>;
    isExpired?: pulumi.Input<boolean>;
    /**
     * List of specific licenses to ignore. Omit to apply to all.
     */
    licenses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Notes of the ignore rule
     */
    notes?: pulumi.Input<string>;
    /**
     * Operational risk to ignore. Only accept 'any'
     */
    operationalRisks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of specific policies to ignore. Omit to apply to all.
     */
    policies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Project key for assigning this resource to. Must be 2 - 10 lowercase alphanumeric and hyphen characters.
     */
    projectKey?: pulumi.Input<string>;
    /**
     * List of specific release bundles to ignore. Omit to apply to all.
     */
    releaseBundles?: pulumi.Input<pulumi.Input<inputs.IgnoreRuleReleaseBundle>[]>;
    /**
     * List of specific vulnerabilities to ignore. Omit to apply to all.
     */
    vulnerabilities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of specific watches to ignore. Omit to apply to all.
     */
    watches?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a IgnoreRule resource.
 */
export interface IgnoreRuleArgs {
    /**
     * List of specific artifacts to ignore. Omit to apply to all.
     */
    artifacts?: pulumi.Input<pulumi.Input<inputs.IgnoreRuleArtifact>[]>;
    /**
     * List of specific builds to ignore. Omit to apply to all.
     */
    builds?: pulumi.Input<pulumi.Input<inputs.IgnoreRuleBuild>[]>;
    /**
     * List of specific components to ignore. Omit to apply to all.
     */
    components?: pulumi.Input<pulumi.Input<inputs.IgnoreRuleComponent>[]>;
    /**
     * List of specific CVEs to ignore. Omit to apply to all. Should set to 'any' when 'vulnerabilities' is set to 'any'.
     */
    cves?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of Docker layer SHA256 hashes to ignore. Omit to apply to all.
     */
    dockerLayers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Ignore Rule will be active until the expiration date. At that date it will automatically get deleted. The rule with
     * the expiration date less than current day, will error out.
     */
    expirationDate?: pulumi.Input<string>;
    /**
     * List of specific licenses to ignore. Omit to apply to all.
     */
    licenses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Notes of the ignore rule
     */
    notes: pulumi.Input<string>;
    /**
     * Operational risk to ignore. Only accept 'any'
     */
    operationalRisks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of specific policies to ignore. Omit to apply to all.
     */
    policies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Project key for assigning this resource to. Must be 2 - 10 lowercase alphanumeric and hyphen characters.
     */
    projectKey?: pulumi.Input<string>;
    /**
     * List of specific release bundles to ignore. Omit to apply to all.
     */
    releaseBundles?: pulumi.Input<pulumi.Input<inputs.IgnoreRuleReleaseBundle>[]>;
    /**
     * List of specific vulnerabilities to ignore. Omit to apply to all.
     */
    vulnerabilities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of specific watches to ignore. Omit to apply to all.
     */
    watches?: pulumi.Input<pulumi.Input<string>[]>;
}
