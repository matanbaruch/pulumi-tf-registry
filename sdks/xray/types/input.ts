// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface BinaryManagerReposIndexedRepo {
    /**
     * Name of the repository
     */
    name: pulumi.Input<string>;
    packageType: pulumi.Input<string>;
    /**
     * Repository type. Valid value: local, remote, federated
     */
    type: pulumi.Input<string>;
}

export interface BinaryManagerReposNonIndexedRepo {
    name: pulumi.Input<string>;
    packageType: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface CustomIssueCfe {
    /**
     * CVE ID
     */
    cve?: pulumi.Input<string>;
    /**
     * CVSS v2 score
     */
    cvssV2?: pulumi.Input<string>;
    /**
     * CVSS v3 score
     */
    cvssV3?: pulumi.Input<string>;
}

export interface CustomIssueComponent {
    /**
     * List of fixed versions
     */
    fixedVersions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of the component
     */
    id: pulumi.Input<string>;
    /**
     * List of the vulnerable ranges
     */
    vulnerableRanges?: pulumi.Input<pulumi.Input<inputs.CustomIssueComponentVulnerableRange>[]>;
    /**
     * List of vulnerable versions
     */
    vulnerableVersions?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CustomIssueComponentVulnerableRange {
    /**
     * List of fixed versions
     */
    fixedVersions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of vulnerable versions
     */
    vulnerableVersions?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CustomIssueSource {
    /**
     * ID of the source, e.g. CVE
     */
    id: pulumi.Input<string>;
    /**
     * Name of the source
     */
    name?: pulumi.Input<string>;
    /**
     * URL of the source
     */
    url?: pulumi.Input<string>;
}

export interface IgnoreRuleArtifact {
    /**
     * Name of the artifact. Wildcards are not supported.
     */
    name: pulumi.Input<string>;
    /**
     * Path of the artifact. Must end with a '/'
     */
    path?: pulumi.Input<string>;
    /**
     * Version of the artifact
     */
    version?: pulumi.Input<string>;
}

export interface IgnoreRuleBuild {
    /**
     * Name of the build
     */
    name: pulumi.Input<string>;
    /**
     * Version of the build
     */
    version?: pulumi.Input<string>;
}

export interface IgnoreRuleComponent {
    /**
     * Name of the component
     */
    name: pulumi.Input<string>;
    /**
     * Version of the component
     */
    version?: pulumi.Input<string>;
}

export interface IgnoreRuleReleaseBundle {
    /**
     * Name of the release bundle
     */
    name: pulumi.Input<string>;
    /**
     * Version of the release bundle
     */
    version?: pulumi.Input<string>;
}

export interface LicensePolicyRule {
    /**
     * Specifies the actions to take once a security policy violation has been triggered.
     */
    actions: pulumi.Input<inputs.LicensePolicyRuleActions>;
    /**
     * The set of security conditions to examine when an scanned artifact is scanned.
     */
    criteria: pulumi.Input<inputs.LicensePolicyRuleCriteria>;
    /**
     * Name of the rule
     */
    name: pulumi.Input<string>;
    /**
     * Integer describing the rule priority. Must be at least 1
     */
    priority: pulumi.Input<number>;
}

export interface LicensePolicyRuleActions {
    /**
     * Block download of artifacts that meet the Artifact Filter and Severity Filter specifications for this watch
     */
    blockDownload: pulumi.Input<inputs.LicensePolicyRuleActionsBlockDownload>;
    /**
     * Blocks Release Bundle distribution to Edge nodes if a violation is found. Default value is `false`.
     */
    blockReleaseBundleDistribution?: pulumi.Input<boolean>;
    /**
     * Blocks Release Bundle promotion if a violation is found. Default value is `false`.
     */
    blockReleaseBundlePromotion?: pulumi.Input<boolean>;
    /**
     * Allow grace period for certain number of days. All violations will be ignored during this time. To be used only if `fail_build` is enabled.
     */
    buildFailureGracePeriodInDays?: pulumi.Input<number>;
    /**
     * Create Jira Ticket for this Policy Violation. Requires configured Jira integration. Default value is `false`.
     */
    createTicketEnabled?: pulumi.Input<boolean>;
    /**
     * The severity of violation to be triggered if the `criteria` are met.
     */
    customSeverity?: pulumi.Input<string>;
    /**
     * Whether or not the related CI build should be marked as failed if a violation is triggered. This option is only available when the policy is applied to an `xray.Watch` resource with a `type` of `builds`. Default value is `false`.
     */
    failBuild?: pulumi.Input<boolean>;
    /**
     * A list of email addressed that will get emailed when a violation is triggered.
     */
    mails?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Sends an email message to component deployer with details about the generated Violations. Default value is `false`.
     */
    notifyDeployer?: pulumi.Input<boolean>;
    /**
     * Sends an email message to all configured recipients inside a specific watch with details about the generated Violations. Default value is `false`.
     */
    notifyWatchRecipients?: pulumi.Input<boolean>;
    /**
     * A list of Xray-configured webhook URLs to be invoked if a violation is triggered.
     */
    webhooks?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface LicensePolicyRuleActionsBlockDownload {
    /**
     * Whether or not to block download of artifacts that meet the artifact and severity `filters` for the associated `xray.Watch` resource. Default value is `false`.
     */
    active?: pulumi.Input<boolean>;
    /**
     * Whether or not to block download of artifacts that meet the artifact `filters` for the associated `xray.Watch` resource but have not been scanned yet. Can not be set to `true` if attribute `active` is `false`. Default value is `false`.
     */
    unscanned?: pulumi.Input<boolean>;
}

export interface LicensePolicyRuleCriteria {
    /**
     * A violation will be generated for artifacts with unknown licenses (`true` or `false`).
     */
    allowUnknown?: pulumi.Input<boolean>;
    /**
     * A list of OSS license names that may be attached to a component. Supports custom licenses added by the user, but there is no verification if the license exists on the Xray side. If the added license doesn't exist, the policy won't trigger the violation.
     */
    allowedLicenses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of OSS license names that may not be attached to a component. Supports custom licenses added by the user, but there is no verification if the license exists on the Xray side. If the added license doesn't exist, the policy won't trigger the violation.
     */
    bannedLicenses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Do not generate a violation if at least one license is valid in cases whereby multiple licenses were detected on the component
     */
    multiLicensePermissive?: pulumi.Input<boolean>;
}

export interface LicensesReportFilter {
    /**
     * Artifact name.
     */
    artifact?: pulumi.Input<string>;
    /**
     * Artifact's component.
     */
    component?: pulumi.Input<string>;
    /**
     * Filter licenses by names. Only one of 'license_names' or 'license_patterns' can be set.
     */
    licenseNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Filter licenses by patterns. Only one of 'license_names' or 'license_patterns' can be set.
     */
    licensePatterns?: pulumi.Input<pulumi.Input<string>[]>;
    scanDate?: pulumi.Input<inputs.LicensesReportFilterScanDate>;
    /**
     * Unknown displays the components that Xray could not discover any licenses for.
     */
    unknown?: pulumi.Input<boolean>;
    /**
     * Unrecognized displays the components that Xray found licenses for, but these licenses are not Xray recognized licenses.
     */
    unrecognized?: pulumi.Input<boolean>;
}

export interface LicensesReportFilterScanDate {
    /**
     * Scan end date.
     */
    end?: pulumi.Input<string>;
    /**
     * Scan start date.
     */
    start?: pulumi.Input<string>;
}

export interface LicensesReportResources {
    /**
     * The builds to include into the report. Only one type of resource can be set per report.
     */
    builds?: pulumi.Input<inputs.LicensesReportResourcesBuilds>;
    /**
     * The projects to include into the report. Only one type of resource can be set per report.
     */
    projects?: pulumi.Input<inputs.LicensesReportResourcesProjects>;
    /**
     * The release bundles to include into the report. Only one type of resource can be set per report.
     */
    releaseBundles?: pulumi.Input<inputs.LicensesReportResourcesReleaseBundles>;
    /**
     * The list of repositories for the report. Only one type of resource can be set per report.
     */
    repositories?: pulumi.Input<pulumi.Input<inputs.LicensesReportResourcesRepository>[]>;
}

export interface LicensesReportResourcesBuilds {
    /**
     * The list of exclude patterns. Only one of 'names' or '*_patterns' can be set.
     */
    excludePatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of include patterns. Only one of 'names' or '*_patterns' can be set.
     */
    includePatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of build names. Only one of 'names' or '*_patterns' can be set.
     */
    names?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The number of latest build versions to include to the report.
     */
    numberOfLatestVersions?: pulumi.Input<number>;
}

export interface LicensesReportResourcesProjects {
    /**
     * The list of include patterns.
     */
    includeKeyPatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of project names.
     */
    names?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The number of latest release bundle versions to include to the report.
     */
    numberOfLatestVersions?: pulumi.Input<number>;
}

export interface LicensesReportResourcesReleaseBundles {
    /**
     * The list of exclude patterns
     */
    excludePatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of include patterns
     */
    includePatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of release bundles names.
     */
    names?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The number of latest release bundle versions to include to the report.
     */
    numberOfLatestVersions?: pulumi.Input<number>;
}

export interface LicensesReportResourcesRepository {
    /**
     * Exclude path patterns.
     */
    excludePathPatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Include path patterns.
     */
    includePathPatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Repository name.
     */
    name: pulumi.Input<string>;
}

export interface OperationalRiskPolicyRule {
    /**
     * Specifies the actions to take once a security policy violation has been triggered.
     */
    actions: pulumi.Input<inputs.OperationalRiskPolicyRuleActions>;
    /**
     * The set of security conditions to examine when an scanned artifact is scanned.
     */
    criteria: pulumi.Input<inputs.OperationalRiskPolicyRuleCriteria>;
    /**
     * Name of the rule
     */
    name: pulumi.Input<string>;
    /**
     * Integer describing the rule priority. Must be at least 1
     */
    priority: pulumi.Input<number>;
}

export interface OperationalRiskPolicyRuleActions {
    /**
     * Block download of artifacts that meet the Artifact Filter and Severity Filter specifications for this watch
     */
    blockDownload: pulumi.Input<inputs.OperationalRiskPolicyRuleActionsBlockDownload>;
    /**
     * Blocks Release Bundle distribution to Edge nodes if a violation is found. Default value is `false`.
     */
    blockReleaseBundleDistribution?: pulumi.Input<boolean>;
    /**
     * Blocks Release Bundle promotion if a violation is found. Default value is `false`.
     */
    blockReleaseBundlePromotion?: pulumi.Input<boolean>;
    /**
     * Allow grace period for certain number of days. All violations will be ignored during this time. To be used only if `fail_build` is enabled.
     */
    buildFailureGracePeriodInDays?: pulumi.Input<number>;
    /**
     * Create Jira Ticket for this Policy Violation. Requires configured Jira integration. Default value is `false`.
     */
    createTicketEnabled?: pulumi.Input<boolean>;
    /**
     * Whether or not the related CI build should be marked as failed if a violation is triggered. This option is only available when the policy is applied to an `xray.Watch` resource with a `type` of `builds`. Default value is `false`.
     */
    failBuild?: pulumi.Input<boolean>;
    /**
     * A list of email addressed that will get emailed when a violation is triggered.
     */
    mails?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Sends an email message to component deployer with details about the generated Violations. Default value is `false`.
     */
    notifyDeployer?: pulumi.Input<boolean>;
    /**
     * Sends an email message to all configured recipients inside a specific watch with details about the generated Violations. Default value is `false`.
     */
    notifyWatchRecipients?: pulumi.Input<boolean>;
    /**
     * A list of Xray-configured webhook URLs to be invoked if a violation is triggered.
     */
    webhooks?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface OperationalRiskPolicyRuleActionsBlockDownload {
    /**
     * Whether or not to block download of artifacts that meet the artifact and severity `filters` for the associated `xray.Watch` resource. Default value is `false`.
     */
    active?: pulumi.Input<boolean>;
    /**
     * Whether or not to block download of artifacts that meet the artifact `filters` for the associated `xray.Watch` resource but have not been scanned yet. Can not be set to `true` if attribute `active` is `false`. Default value is `false`.
     */
    unscanned?: pulumi.Input<boolean>;
}

export interface OperationalRiskPolicyRuleCriteria {
    /**
     * Custom Condition
     */
    opRiskCustom?: pulumi.Input<inputs.OperationalRiskPolicyRuleCriteriaOpRiskCustom>;
    /**
     * The minimum operational risk that will be impacted by the policy: High, Medium, Low
     */
    opRiskMinRisk?: pulumi.Input<string>;
}

export interface OperationalRiskPolicyRuleCriteriaOpRiskCustom {
    /**
     * Number of commits less than per year: 10, 25, 50, or 100
     */
    commitsLessThan?: pulumi.Input<number>;
    /**
     * Number of committers less than per year: 1, 2, 3, 4, or 5
     */
    committersLessThan?: pulumi.Input<number>;
    /**
     * Is End-of-Life?
     */
    isEol?: pulumi.Input<boolean>;
    /**
     * Number of releases since greater than: 1, 2, 3, 4, or 5
     */
    newerVersionsGreaterThan?: pulumi.Input<number>;
    /**
     * Release cadence less than per year: 1, 2, 3, 4, or 5
     */
    releaseCadencePerYearLessThan?: pulumi.Input<number>;
    /**
     * Release age greater than (in months): 6, 12, 18, 24, 30, or 36
     */
    releaseDateGreaterThanMonths?: pulumi.Input<number>;
    /**
     * Risk severity: low, medium, high
     */
    risk?: pulumi.Input<string>;
    /**
     * Use 'AND' between conditions (true) or 'OR' condition (false)
     */
    useAndCondition: pulumi.Input<boolean>;
}

export interface OperationalRisksReportFilter {
    /**
     * Artifact name.
     */
    artifact?: pulumi.Input<string>;
    /**
     * Artifact's component.
     */
    component?: pulumi.Input<string>;
    /**
     * Operational risk level. Allowed values: 'None', 'Low', 'Medium', 'High'.
     */
    risks?: pulumi.Input<pulumi.Input<string>[]>;
    scanDate?: pulumi.Input<inputs.OperationalRisksReportFilterScanDate>;
}

export interface OperationalRisksReportFilterScanDate {
    /**
     * Scan end date.
     */
    end?: pulumi.Input<string>;
    /**
     * Scan start date.
     */
    start?: pulumi.Input<string>;
}

export interface OperationalRisksReportResources {
    /**
     * The builds to include into the report. Only one type of resource can be set per report.
     */
    builds?: pulumi.Input<inputs.OperationalRisksReportResourcesBuilds>;
    /**
     * The projects to include into the report. Only one type of resource can be set per report.
     */
    projects?: pulumi.Input<inputs.OperationalRisksReportResourcesProjects>;
    /**
     * The release bundles to include into the report. Only one type of resource can be set per report.
     */
    releaseBundles?: pulumi.Input<inputs.OperationalRisksReportResourcesReleaseBundles>;
    /**
     * The list of repositories for the report. Only one type of resource can be set per report.
     */
    repositories?: pulumi.Input<pulumi.Input<inputs.OperationalRisksReportResourcesRepository>[]>;
}

export interface OperationalRisksReportResourcesBuilds {
    /**
     * The list of exclude patterns. Only one of 'names' or '*_patterns' can be set.
     */
    excludePatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of include patterns. Only one of 'names' or '*_patterns' can be set.
     */
    includePatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of build names. Only one of 'names' or '*_patterns' can be set.
     */
    names?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The number of latest build versions to include to the report.
     */
    numberOfLatestVersions?: pulumi.Input<number>;
}

export interface OperationalRisksReportResourcesProjects {
    /**
     * The list of include patterns.
     */
    includeKeyPatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of project names.
     */
    names?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The number of latest release bundle versions to include to the report.
     */
    numberOfLatestVersions?: pulumi.Input<number>;
}

export interface OperationalRisksReportResourcesReleaseBundles {
    /**
     * The list of exclude patterns
     */
    excludePatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of include patterns
     */
    includePatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of release bundles names.
     */
    names?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The number of latest release bundle versions to include to the report.
     */
    numberOfLatestVersions?: pulumi.Input<number>;
}

export interface OperationalRisksReportResourcesRepository {
    /**
     * Exclude path patterns.
     */
    excludePathPatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Include path patterns.
     */
    includePathPatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Repository name.
     */
    name: pulumi.Input<string>;
}

export interface RepositoryConfigConfig {
    exposures?: pulumi.Input<pulumi.Input<inputs.RepositoryConfigConfigExposure>[]>;
    /**
     * The artifact will be retained for the number of days you set here, after the artifact is scanned. This will apply to all artifacts in the repository. Can be omitted when `paths_config` is set.
     */
    retentionInDays?: pulumi.Input<number>;
    /**
     * Enables or disables vulnerability contextual analysis. Only for SaaS instances, will be available after Xray 3.59. Must be set for Docker, OCI, and Maven package types.
     */
    vulnContextualAnalysis?: pulumi.Input<boolean>;
}

export interface RepositoryConfigConfigExposure {
    /**
     * Exposures' scanners categories configurations.
     */
    scannersCategories?: pulumi.Input<pulumi.Input<inputs.RepositoryConfigConfigExposureScannersCategory>[]>;
}

export interface RepositoryConfigConfigExposureScannersCategory {
    /**
     * Detect whether common OSS libraries and services are used securely by the application.
     */
    applications?: pulumi.Input<boolean>;
    iac?: pulumi.Input<boolean>;
    /**
     * Detect any secret left exposed in any containers stored in Artifactory to stop any accidental leak of internal tokens or credentials.
     */
    secrets?: pulumi.Input<boolean>;
    /**
     * Detect whether common OSS libraries and services are configured securely, so application can be easily hardened by default.
     */
    services?: pulumi.Input<boolean>;
}

export interface RepositoryConfigPathsConfig {
    /**
     * If you select by pattern, you must define a retention period for all other artifacts in the repository in the All Other Artifacts setting.
     */
    allOtherArtifacts?: pulumi.Input<pulumi.Input<inputs.RepositoryConfigPathsConfigAllOtherArtifact>[]>;
    /**
     * Pattern, applied to the repositories.
     */
    patterns?: pulumi.Input<pulumi.Input<inputs.RepositoryConfigPathsConfigPattern>[]>;
}

export interface RepositoryConfigPathsConfigAllOtherArtifact {
    /**
     * If checked, Xray will scan newly added artifacts in the path. Note that existing artifacts will not be scanned. If the folder contains existing artifacts that have been scanned, and you do not want to index new artifacts in that folder, you can choose not to index that folder.
     */
    indexNewArtifacts?: pulumi.Input<boolean>;
    /**
     * The artifact will be retained for the number of days you set here, after the artifact is scanned. This will apply to all artifacts in the repository.
     */
    retentionInDays?: pulumi.Input<number>;
}

export interface RepositoryConfigPathsConfigPattern {
    /**
     * Paths pattern to exclude from the set specific configuration.
     */
    exclude?: pulumi.Input<string>;
    /**
     * Paths pattern to include in the set specific configuration.
     */
    include: pulumi.Input<string>;
    /**
     * If checked, Xray will scan newly added artifacts in the path. Note that existing artifacts will not be scanned. If the folder contains existing artifacts that have been scanned, and you do not want to index new artifacts in that folder, you can choose not to index that folder.
     */
    indexNewArtifacts?: pulumi.Input<boolean>;
    /**
     * The artifact will be retained for the number of days you set here, after the artifact is scanned. This will apply to all artifacts in the repository.
     */
    retentionInDays?: pulumi.Input<number>;
}

export interface SecurityPolicyRule {
    /**
     * Specifies the actions to take once a security policy violation has been triggered.
     */
    actions: pulumi.Input<inputs.SecurityPolicyRuleActions>;
    /**
     * The set of security conditions to examine when an scanned artifact is scanned.
     */
    criteria: pulumi.Input<inputs.SecurityPolicyRuleCriteria>;
    /**
     * Name of the rule
     */
    name: pulumi.Input<string>;
    /**
     * Integer describing the rule priority. Must be at least 1
     */
    priority: pulumi.Input<number>;
}

export interface SecurityPolicyRuleActions {
    /**
     * Block download of artifacts that meet the Artifact Filter and Severity Filter specifications for this watch
     */
    blockDownload: pulumi.Input<inputs.SecurityPolicyRuleActionsBlockDownload>;
    /**
     * Blocks Release Bundle distribution to Edge nodes if a violation is found. Default value is `false`.
     */
    blockReleaseBundleDistribution?: pulumi.Input<boolean>;
    /**
     * Blocks Release Bundle promotion if a violation is found. Default value is `false`.
     */
    blockReleaseBundlePromotion?: pulumi.Input<boolean>;
    /**
     * Allow grace period for certain number of days. All violations will be ignored during this time. To be used only if `fail_build` is enabled.
     */
    buildFailureGracePeriodInDays?: pulumi.Input<number>;
    /**
     * Create Jira Ticket for this Policy Violation. Requires configured Jira integration. Default value is `false`.
     */
    createTicketEnabled?: pulumi.Input<boolean>;
    /**
     * Whether or not the related CI build should be marked as failed if a violation is triggered. This option is only available when the policy is applied to an `xray.Watch` resource with a `type` of `builds`. Default value is `false`.
     */
    failBuild?: pulumi.Input<boolean>;
    /**
     * A list of email addressed that will get emailed when a violation is triggered.
     */
    mails?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Sends an email message to component deployer with details about the generated Violations. Default value is `false`.
     */
    notifyDeployer?: pulumi.Input<boolean>;
    /**
     * Sends an email message to all configured recipients inside a specific watch with details about the generated Violations. Default value is `false`.
     */
    notifyWatchRecipients?: pulumi.Input<boolean>;
    /**
     * A list of Xray-configured webhook URLs to be invoked if a violation is triggered.
     */
    webhooks?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SecurityPolicyRuleActionsBlockDownload {
    /**
     * Whether or not to block download of artifacts that meet the artifact and severity `filters` for the associated `xray.Watch` resource. Default value is `false`.
     */
    active?: pulumi.Input<boolean>;
    /**
     * Whether or not to block download of artifacts that meet the artifact `filters` for the associated `xray.Watch` resource but have not been scanned yet. Can not be set to `true` if attribute `active` is `false`. Default value is `false`.
     */
    unscanned?: pulumi.Input<boolean>;
}

export interface SecurityPolicyRuleCriteria {
    /**
     * Default value is `false`. Mark to skip CVEs that are not applicable in the context of the artifact. The contextual analysis operation might be long and affect build time if the `fail_build` action is set.
     *
     * ~>Only supported by JFrog Advanced Security
     */
    applicableCvesOnly?: pulumi.Input<boolean>;
    /**
     * The CVSS score range to apply to the rule. This is used for a fine-grained control, rather than using the predefined severities. The score range is based on CVSS v3 scoring, and CVSS v2 score is CVSS v3 score is not available.
     */
    cvssRange?: pulumi.Input<inputs.SecurityPolicyRuleCriteriaCvssRange>;
    /**
     * Creates policy rules for specific exposures.
     *
     * ~>Only supported by JFrog Advanced Security
     */
    exposures?: pulumi.Input<inputs.SecurityPolicyRuleCriteriaExposures>;
    /**
     * Default value is `false`. Issues that do not have a fixed version are not generated until a fixed version is available. Must be `false` with `malicious_package` enabled.
     */
    fixVersionDependant?: pulumi.Input<boolean>;
    /**
     * Default value is `false`. Generating a violation on a malicious package.
     */
    maliciousPackage?: pulumi.Input<boolean>;
    /**
     * The minimum security vulnerability severity that will be impacted by the policy. Valid values: `All Severities`, `Critical`, `High`, `Medium`, `Low`
     */
    minSeverity?: pulumi.Input<string>;
    /**
     * The package name to create a rule for
     */
    packageName?: pulumi.Input<string>;
    /**
     * The package type to create a rule for
     */
    packageType?: pulumi.Input<string>;
    /**
     * package versions to apply the rule on can be (,) for any version or an open range (1,4) or closed [1,4] or one version [1]
     */
    packageVersions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Creates policy rules for specific vulnerability IDs that you input. You can add multiple vulnerabilities IDs up to 100. CVEs and Xray IDs are supported. Example - CVE-2015-20107, XRAY-2344
     */
    vulnerabilityIds?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SecurityPolicyRuleCriteriaCvssRange {
    /**
     * The beginning of the range of CVS scores (from 1-10, float) to flag.
     */
    from: pulumi.Input<number>;
    /**
     * The end of the range of CVS scores (from 1-10, float) to flag.
     */
    to: pulumi.Input<number>;
}

export interface SecurityPolicyRuleCriteriaExposures {
    /**
     * Applications exposures.
     */
    applications?: pulumi.Input<boolean>;
    /**
     * Iac exposures.
     */
    iac?: pulumi.Input<boolean>;
    /**
     * The minimum security vulnerability severity that will be impacted by the policy. Valid values: `All Severities`, `Critical`, `High`, `Medium`, `Low`
     */
    minSeverity?: pulumi.Input<string>;
    /**
     * Secrets exposures.
     */
    secrets?: pulumi.Input<boolean>;
    /**
     * Services exposures.
     */
    services?: pulumi.Input<boolean>;
}

export interface ViolationsReportFilter {
    /**
     * Filter by artifact name, you can use (*) at the beginning or end of a substring as a wildcard.
     */
    artifact?: pulumi.Input<string>;
    /**
     * Filter by component name, you can use (*) at the beginning or end of a substring as a wildcard.
     */
    component?: pulumi.Input<string>;
    /**
     * Licenses Filters.
     */
    licenseFilters?: pulumi.Input<inputs.ViolationsReportFilterLicenseFilters>;
    /**
     * Select Xray policies by name.
     */
    policyNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Security Filters.
     */
    securityFilters?: pulumi.Input<inputs.ViolationsReportFilterSecurityFilters>;
    /**
     * Risk/severity levels. Allowed values: 'None', 'Low', 'Medium', 'High'.
     */
    severities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Violation type.
     */
    type?: pulumi.Input<string>;
    updated?: pulumi.Input<inputs.ViolationsReportFilterUpdated>;
    /**
     * Select Xray watch by names. Only one attribute - 'watch_names' or 'watch_patterns' can be set.
     */
    watchNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Select Xray watch name by patterns. Only one attribute - 'watch_names' or 'watch_patterns' can be set.
     */
    watchPatterns?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ViolationsReportFilterLicenseFilters {
    /**
     * Filter licenses by names.
     */
    licenseNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Filter licenses by patterns.
     */
    licensePatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unknown displays the components that Xray could not discover any licenses for.
     */
    unknown?: pulumi.Input<boolean>;
    /**
     * Unrecognized displays the components that Xray found licenses for, but these licenses are not Xray recognized licenses.
     */
    unrecognized?: pulumi.Input<boolean>;
}

export interface ViolationsReportFilterSecurityFilters {
    /**
     * CVE.
     */
    cve?: pulumi.Input<string>;
    /**
     * CVSS score.
     */
    cvssScore?: pulumi.Input<inputs.ViolationsReportFilterSecurityFiltersCvssScore>;
    /**
     * Whether the issue has a fix or not.
     */
    hasRemediation?: pulumi.Input<boolean>;
    /**
     * Issue ID.
     */
    issueId?: pulumi.Input<string>;
    /**
     * Vulnerability Summary.
     */
    summaryContains?: pulumi.Input<string>;
}

export interface ViolationsReportFilterSecurityFiltersCvssScore {
    /**
     * Maximum CVSS score.
     */
    maxScore?: pulumi.Input<number>;
    /**
     * Minimum CVSS score.
     */
    minScore?: pulumi.Input<number>;
}

export interface ViolationsReportFilterUpdated {
    /**
     * Created to date.
     */
    end?: pulumi.Input<string>;
    /**
     * Created from date.
     */
    start?: pulumi.Input<string>;
}

export interface ViolationsReportResources {
    /**
     * The builds to include into the report. Only one type of resource can be set per report.
     */
    builds?: pulumi.Input<inputs.ViolationsReportResourcesBuilds>;
    /**
     * The projects to include into the report. Only one type of resource can be set per report.
     */
    projects?: pulumi.Input<inputs.ViolationsReportResourcesProjects>;
    /**
     * The release bundles to include into the report. Only one type of resource can be set per report.
     */
    releaseBundles?: pulumi.Input<inputs.ViolationsReportResourcesReleaseBundles>;
    /**
     * The list of repositories for the report. Only one type of resource can be set per report.
     */
    repositories?: pulumi.Input<pulumi.Input<inputs.ViolationsReportResourcesRepository>[]>;
}

export interface ViolationsReportResourcesBuilds {
    /**
     * The list of exclude patterns. Only one of 'names' or '*_patterns' can be set.
     */
    excludePatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of include patterns. Only one of 'names' or '*_patterns' can be set.
     */
    includePatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of build names. Only one of 'names' or '*_patterns' can be set.
     */
    names?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The number of latest build versions to include to the report.
     */
    numberOfLatestVersions?: pulumi.Input<number>;
}

export interface ViolationsReportResourcesProjects {
    /**
     * The list of include patterns.
     */
    includeKeyPatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of project names.
     */
    names?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The number of latest release bundle versions to include to the report.
     */
    numberOfLatestVersions?: pulumi.Input<number>;
}

export interface ViolationsReportResourcesReleaseBundles {
    /**
     * The list of exclude patterns
     */
    excludePatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of include patterns
     */
    includePatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of release bundles names.
     */
    names?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The number of latest release bundle versions to include to the report.
     */
    numberOfLatestVersions?: pulumi.Input<number>;
}

export interface ViolationsReportResourcesRepository {
    /**
     * Exclude path patterns.
     */
    excludePathPatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Include path patterns.
     */
    includePathPatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Repository name.
     */
    name: pulumi.Input<string>;
}

export interface VulnerabilitiesReportFilter {
    /**
     * CVE.
     */
    cve?: pulumi.Input<string>;
    /**
     * CVSS score.
     */
    cvssScore?: pulumi.Input<inputs.VulnerabilitiesReportFilterCvssScore>;
    /**
     * Whether the issue has a fix or not.
     */
    hasRemediation?: pulumi.Input<boolean>;
    /**
     * Filter by artifact name, you can use (*) at the eginning or end of a substring as a wildcard.
     */
    impactedArtifact?: pulumi.Input<string>;
    /**
     * Issue ID.
     */
    issueId?: pulumi.Input<string>;
    published?: pulumi.Input<inputs.VulnerabilitiesReportFilterPublished>;
    scanDate?: pulumi.Input<inputs.VulnerabilitiesReportFilterScanDate>;
    /**
     * Severity levels. Allowed values: 'Low', 'Medium', 'High', 'Critical'
     */
    severities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Filter by component name, you can use (*) at the beginning or end of a substring as a wildcard.
     */
    vulnerableComponent?: pulumi.Input<string>;
}

export interface VulnerabilitiesReportFilterCvssScore {
    /**
     * Maximum CVSS score.
     */
    maxScore?: pulumi.Input<number>;
    /**
     * Minimum CVSS score.
     */
    minScore?: pulumi.Input<number>;
}

export interface VulnerabilitiesReportFilterPublished {
    /**
     * Published to date.
     */
    end?: pulumi.Input<string>;
    /**
     * Published from date.
     */
    start?: pulumi.Input<string>;
}

export interface VulnerabilitiesReportFilterScanDate {
    /**
     * Scanned to date.
     */
    end?: pulumi.Input<string>;
    /**
     * Scanned from date.
     */
    start?: pulumi.Input<string>;
}

export interface VulnerabilitiesReportResources {
    /**
     * The builds to include into the report. Only one type of resource can be set per report.
     */
    builds?: pulumi.Input<inputs.VulnerabilitiesReportResourcesBuilds>;
    /**
     * The projects to include into the report. Only one type of resource can be set per report.
     */
    projects?: pulumi.Input<inputs.VulnerabilitiesReportResourcesProjects>;
    /**
     * The release bundles to include into the report. Only one type of resource can be set per report.
     */
    releaseBundles?: pulumi.Input<inputs.VulnerabilitiesReportResourcesReleaseBundles>;
    /**
     * The list of repositories for the report. Only one type of resource can be set per report.
     */
    repositories?: pulumi.Input<pulumi.Input<inputs.VulnerabilitiesReportResourcesRepository>[]>;
}

export interface VulnerabilitiesReportResourcesBuilds {
    /**
     * The list of exclude patterns. Only one of 'names' or '*_patterns' can be set.
     */
    excludePatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of include patterns. Only one of 'names' or '*_patterns' can be set.
     */
    includePatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of build names. Only one of 'names' or '*_patterns' can be set.
     */
    names?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The number of latest build versions to include to the report.
     */
    numberOfLatestVersions?: pulumi.Input<number>;
}

export interface VulnerabilitiesReportResourcesProjects {
    /**
     * The list of include patterns.
     */
    includeKeyPatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of project names.
     */
    names?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The number of latest release bundle versions to include to the report.
     */
    numberOfLatestVersions?: pulumi.Input<number>;
}

export interface VulnerabilitiesReportResourcesReleaseBundles {
    /**
     * The list of exclude patterns
     */
    excludePatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of include patterns
     */
    includePatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of release bundles names.
     */
    names?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The number of latest release bundle versions to include to the report.
     */
    numberOfLatestVersions?: pulumi.Input<number>;
}

export interface VulnerabilitiesReportResourcesRepository {
    /**
     * Exclude path patterns.
     */
    excludePathPatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Include path patterns.
     */
    includePathPatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Repository name.
     */
    name: pulumi.Input<string>;
}

export interface WatchAssignedPolicy {
    /**
     * The name of the policy that will be applied
     */
    name: pulumi.Input<string>;
    /**
     * The type of the policy - security, license or operational risk
     */
    type: pulumi.Input<string>;
}

export interface WatchWatchResource {
    /**
     * `ant-patterns` filter for `all-builds` and `all-projects` watch_resource.type
     */
    antFilters?: pulumi.Input<pulumi.Input<inputs.WatchWatchResourceAntFilter>[]>;
    /**
     * The ID number of a binary manager resource. Default value is `default`. To check the list of available binary managers, use the API call `${JFROG_URL}/xray/api/v1/binMgr` as an admin user, use `binMgrId` value. More info [here](https://www.jfrog.com/confluence/display/JFROG/Xray+REST+API#XrayRESTAPI-GetBinaryManager)
     */
    binMgrId?: pulumi.Input<string>;
    /**
     * Filter for `regex`, `package-type` and `mime-type` type. Works for `repository` and `all-repos` watch_resource.type
     */
    filters?: pulumi.Input<pulumi.Input<inputs.WatchWatchResourceFilter>[]>;
    /**
     * Filter for `property` type. Works for `repository` and `all-repos` watch_resource.type.
     */
    kvFilters?: pulumi.Input<pulumi.Input<inputs.WatchWatchResourceKvFilter>[]>;
    /**
     * The name of the build, repository, project, or release bundle. Xray indexing must be enabled on the repository, build, or release bundle.
     */
    name?: pulumi.Input<string>;
    /**
     * `path-ant-patterns` filter for `repository` and `all-repos` watch_resource.type
     */
    pathAntFilters?: pulumi.Input<pulumi.Input<inputs.WatchWatchResourcePathAntFilter>[]>;
    /**
     * Type of repository. Only applicable when `type` is `repository`. Options: `local` or `remote`.
     */
    repoType?: pulumi.Input<string>;
    /**
     * Type of resource to be watched. Options: repository, all-repos, build, all-builds, project, all-projects, releaseBundle, all-releaseBundles, releaseBundleV2, all-releaseBundlesV2.
     */
    type: pulumi.Input<string>;
}

export interface WatchWatchResourceAntFilter {
    /**
     * Use Ant-style wildcard patterns to specify build names (i.e. artifact paths) in the build info repository (without a leading slash) that will be excluded in this watch. Projects are supported too. Ant-style path expressions are supported (*, **, ?). For example, an 'apache/**' pattern will exclude the 'apache' build info in the watch.
     */
    excludePatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Use Ant-style wildcard patterns to specify build names (i.e. artifact paths) in the build info repository (without a leading slash) that will be included in this watch. Projects are supported too. Ant-style path expressions are supported (*, **, ?). For example, an 'apache/**' pattern will include the 'apache' build info in the watch.
     */
    includePatterns?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WatchWatchResourceFilter {
    /**
     * The type of filter, such as `regex`, `path-regex`, `package-type`, or `mime-type`
     */
    type: pulumi.Input<string>;
    /**
     * The value of the filter, such as the text of the regex, name of the package type, or mime type.
     */
    value: pulumi.Input<string>;
}

export interface WatchWatchResourceKvFilter {
    /**
     * The value of the filter, such as the property name of the artifact.
     */
    key: pulumi.Input<string>;
    /**
     * The type of filter. Currently only support `property`
     */
    type: pulumi.Input<string>;
    /**
     * The value of the filter, such as the property value of the artifact.
     */
    value: pulumi.Input<string>;
}

export interface WatchWatchResourcePathAntFilter {
    /**
     * The pattern will apply to the selected repositories. Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, **, ?). For example: 'org/apache/**'
     */
    excludePatterns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The pattern will apply to the selected repositories. Simple comma separated wildcard patterns for repository artifact paths (with no leading slash). Ant-style path expressions are supported (*, **, ?). For example: 'org/apache/**'
     */
    includePatterns?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WorkersCountAnalysis {
    /**
     * Number of workers for existing content
     */
    existingContent: pulumi.Input<number>;
    /**
     * Number of workers for new content
     */
    newContent: pulumi.Input<number>;
}

export interface WorkersCountImpactAnalysis {
    /**
     * Number of workers for new content
     */
    newContent: pulumi.Input<number>;
}

export interface WorkersCountIndex {
    /**
     * Number of workers for existing content
     */
    existingContent: pulumi.Input<number>;
    /**
     * Number of workers for new content
     */
    newContent: pulumi.Input<number>;
}

export interface WorkersCountMigrationSbom {
    /**
     * Number of workers for existing content
     */
    existingContent: pulumi.Input<number>;
    /**
     * Number of workers for new content
     */
    newContent: pulumi.Input<number>;
}

export interface WorkersCountNotification {
    /**
     * Number of workers for new content
     */
    newContent: pulumi.Input<number>;
}

export interface WorkersCountPanoramic {
    /**
     * Number of workers for new content
     */
    newContent: pulumi.Input<number>;
}

export interface WorkersCountPersist {
    /**
     * Number of workers for existing content
     */
    existingContent: pulumi.Input<number>;
    /**
     * Number of workers for new content
     */
    newContent: pulumi.Input<number>;
}

export interface WorkersCountPolicyEnforcer {
    /**
     * Number of workers for existing content
     */
    existingContent: pulumi.Input<number>;
    /**
     * Number of workers for new content
     */
    newContent: pulumi.Input<number>;
}

export interface WorkersCountSbom {
    /**
     * Number of workers for existing content
     */
    existingContent: pulumi.Input<number>;
    /**
     * Number of workers for new content
     */
    newContent: pulumi.Input<number>;
}

export interface WorkersCountSbomImpactAnalysis {
    /**
     * Number of workers for existing content
     */
    existingContent: pulumi.Input<number>;
    /**
     * Number of workers for new content
     */
    newContent: pulumi.Input<number>;
}

export interface WorkersCountUserCatalog {
    /**
     * Number of workers for existing content
     */
    existingContent: pulumi.Input<number>;
    /**
     * Number of workers for new content
     */
    newContent: pulumi.Input<number>;
}
