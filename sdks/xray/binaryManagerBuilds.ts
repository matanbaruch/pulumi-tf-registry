// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class BinaryManagerBuilds extends pulumi.CustomResource {
    /**
     * Get an existing BinaryManagerBuilds resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BinaryManagerBuildsState, opts?: pulumi.CustomResourceOptions): BinaryManagerBuilds {
        return new BinaryManagerBuilds(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'xray:index/binaryManagerBuilds:BinaryManagerBuilds';

    /**
     * Returns true if the given object is an instance of BinaryManagerBuilds.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BinaryManagerBuilds {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BinaryManagerBuilds.__pulumiType;
    }

    /**
     * Builds to be indexed. ~>Currently does not support Ant-style path patterns (`*`, `**`, or `?`) due to API limitation.
     */
    public readonly indexedBuilds!: pulumi.Output<string[]>;
    /**
     * Non-indexed builds for output.
     */
    public /*out*/ readonly nonIndexedBuilds!: pulumi.Output<string[]>;
    /**
     * For Xray version 3.21.2 and above with Projects, a Project Admin with Index Resources privilege can maintain the indexed
     * and not indexed repositories in a given binary manger using this resource in the scope of a project.
     */
    public readonly projectKey!: pulumi.Output<string | undefined>;

    /**
     * Create a BinaryManagerBuilds resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BinaryManagerBuildsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BinaryManagerBuildsArgs | BinaryManagerBuildsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BinaryManagerBuildsState | undefined;
            resourceInputs["indexedBuilds"] = state ? state.indexedBuilds : undefined;
            resourceInputs["nonIndexedBuilds"] = state ? state.nonIndexedBuilds : undefined;
            resourceInputs["projectKey"] = state ? state.projectKey : undefined;
        } else {
            const args = argsOrState as BinaryManagerBuildsArgs | undefined;
            if ((!args || args.indexedBuilds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'indexedBuilds'");
            }
            resourceInputs["indexedBuilds"] = args ? args.indexedBuilds : undefined;
            resourceInputs["projectKey"] = args ? args.projectKey : undefined;
            resourceInputs["nonIndexedBuilds"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BinaryManagerBuilds.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BinaryManagerBuilds resources.
 */
export interface BinaryManagerBuildsState {
    /**
     * Builds to be indexed. ~>Currently does not support Ant-style path patterns (`*`, `**`, or `?`) due to API limitation.
     */
    indexedBuilds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Non-indexed builds for output.
     */
    nonIndexedBuilds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * For Xray version 3.21.2 and above with Projects, a Project Admin with Index Resources privilege can maintain the indexed
     * and not indexed repositories in a given binary manger using this resource in the scope of a project.
     */
    projectKey?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BinaryManagerBuilds resource.
 */
export interface BinaryManagerBuildsArgs {
    /**
     * Builds to be indexed. ~>Currently does not support Ant-style path patterns (`*`, `**`, or `?`) due to API limitation.
     */
    indexedBuilds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * For Xray version 3.21.2 and above with Projects, a Project Admin with Index Resources privilege can maintain the indexed
     * and not indexed repositories in a given binary manger using this resource in the scope of a project.
     */
    projectKey?: pulumi.Input<string>;
}
