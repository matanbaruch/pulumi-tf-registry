// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class WorkersCount extends pulumi.CustomResource {
    /**
     * Get an existing WorkersCount resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkersCountState, opts?: pulumi.CustomResourceOptions): WorkersCount {
        return new WorkersCount(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'xray:index/workersCount:WorkersCount';

    /**
     * Returns true if the given object is an instance of WorkersCount.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WorkersCount {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WorkersCount.__pulumiType;
    }

    /**
     * The number of workers involved in scanning analysis.
     */
    public readonly analyses!: pulumi.Output<outputs.WorkersCountAnalysis[] | undefined>;
    /**
     * The number of workers involved in Impact Analysis to determine how a component with a reported issue impacts others in
     * the system.
     */
    public readonly impactAnalyses!: pulumi.Output<outputs.WorkersCountImpactAnalysis[] | undefined>;
    /**
     * The number of workers managing indexing of artifacts.
     */
    public readonly indices!: pulumi.Output<outputs.WorkersCountIndex[] | undefined>;
    /**
     * The number of workers managing SBOM migration.
     */
    public readonly migrationSboms!: pulumi.Output<outputs.WorkersCountMigrationSbom[] | undefined>;
    /**
     * The number of workers managing notifications.
     */
    public readonly notifications!: pulumi.Output<outputs.WorkersCountNotification[] | undefined>;
    /**
     * The number of workers managing panoramic.
     */
    public readonly panoramics!: pulumi.Output<outputs.WorkersCountPanoramic[] | undefined>;
    /**
     * The number of workers managing persistent storage needed to build the artifact relationship graph.
     */
    public readonly persists!: pulumi.Output<outputs.WorkersCountPersist[] | undefined>;
    /**
     * The number of workers managing policy enforcer.
     */
    public readonly policyEnforcers!: pulumi.Output<outputs.WorkersCountPolicyEnforcer[] | undefined>;
    /**
     * The number of workers managing SBOM impact analysis.
     */
    public readonly sbomImpactAnalyses!: pulumi.Output<outputs.WorkersCountSbomImpactAnalysis[] | undefined>;
    /**
     * The number of workers managing SBOM.
     */
    public readonly sboms!: pulumi.Output<outputs.WorkersCountSbom[] | undefined>;
    /**
     * The number of workers managing user catalog.
     */
    public readonly userCatalogs!: pulumi.Output<outputs.WorkersCountUserCatalog[] | undefined>;

    /**
     * Create a WorkersCount resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: WorkersCountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WorkersCountArgs | WorkersCountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WorkersCountState | undefined;
            resourceInputs["analyses"] = state ? state.analyses : undefined;
            resourceInputs["impactAnalyses"] = state ? state.impactAnalyses : undefined;
            resourceInputs["indices"] = state ? state.indices : undefined;
            resourceInputs["migrationSboms"] = state ? state.migrationSboms : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["panoramics"] = state ? state.panoramics : undefined;
            resourceInputs["persists"] = state ? state.persists : undefined;
            resourceInputs["policyEnforcers"] = state ? state.policyEnforcers : undefined;
            resourceInputs["sbomImpactAnalyses"] = state ? state.sbomImpactAnalyses : undefined;
            resourceInputs["sboms"] = state ? state.sboms : undefined;
            resourceInputs["userCatalogs"] = state ? state.userCatalogs : undefined;
        } else {
            const args = argsOrState as WorkersCountArgs | undefined;
            resourceInputs["analyses"] = args ? args.analyses : undefined;
            resourceInputs["impactAnalyses"] = args ? args.impactAnalyses : undefined;
            resourceInputs["indices"] = args ? args.indices : undefined;
            resourceInputs["migrationSboms"] = args ? args.migrationSboms : undefined;
            resourceInputs["notifications"] = args ? args.notifications : undefined;
            resourceInputs["panoramics"] = args ? args.panoramics : undefined;
            resourceInputs["persists"] = args ? args.persists : undefined;
            resourceInputs["policyEnforcers"] = args ? args.policyEnforcers : undefined;
            resourceInputs["sbomImpactAnalyses"] = args ? args.sbomImpactAnalyses : undefined;
            resourceInputs["sboms"] = args ? args.sboms : undefined;
            resourceInputs["userCatalogs"] = args ? args.userCatalogs : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WorkersCount.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WorkersCount resources.
 */
export interface WorkersCountState {
    /**
     * The number of workers involved in scanning analysis.
     */
    analyses?: pulumi.Input<pulumi.Input<inputs.WorkersCountAnalysis>[]>;
    /**
     * The number of workers involved in Impact Analysis to determine how a component with a reported issue impacts others in
     * the system.
     */
    impactAnalyses?: pulumi.Input<pulumi.Input<inputs.WorkersCountImpactAnalysis>[]>;
    /**
     * The number of workers managing indexing of artifacts.
     */
    indices?: pulumi.Input<pulumi.Input<inputs.WorkersCountIndex>[]>;
    /**
     * The number of workers managing SBOM migration.
     */
    migrationSboms?: pulumi.Input<pulumi.Input<inputs.WorkersCountMigrationSbom>[]>;
    /**
     * The number of workers managing notifications.
     */
    notifications?: pulumi.Input<pulumi.Input<inputs.WorkersCountNotification>[]>;
    /**
     * The number of workers managing panoramic.
     */
    panoramics?: pulumi.Input<pulumi.Input<inputs.WorkersCountPanoramic>[]>;
    /**
     * The number of workers managing persistent storage needed to build the artifact relationship graph.
     */
    persists?: pulumi.Input<pulumi.Input<inputs.WorkersCountPersist>[]>;
    /**
     * The number of workers managing policy enforcer.
     */
    policyEnforcers?: pulumi.Input<pulumi.Input<inputs.WorkersCountPolicyEnforcer>[]>;
    /**
     * The number of workers managing SBOM impact analysis.
     */
    sbomImpactAnalyses?: pulumi.Input<pulumi.Input<inputs.WorkersCountSbomImpactAnalysis>[]>;
    /**
     * The number of workers managing SBOM.
     */
    sboms?: pulumi.Input<pulumi.Input<inputs.WorkersCountSbom>[]>;
    /**
     * The number of workers managing user catalog.
     */
    userCatalogs?: pulumi.Input<pulumi.Input<inputs.WorkersCountUserCatalog>[]>;
}

/**
 * The set of arguments for constructing a WorkersCount resource.
 */
export interface WorkersCountArgs {
    /**
     * The number of workers involved in scanning analysis.
     */
    analyses?: pulumi.Input<pulumi.Input<inputs.WorkersCountAnalysis>[]>;
    /**
     * The number of workers involved in Impact Analysis to determine how a component with a reported issue impacts others in
     * the system.
     */
    impactAnalyses?: pulumi.Input<pulumi.Input<inputs.WorkersCountImpactAnalysis>[]>;
    /**
     * The number of workers managing indexing of artifacts.
     */
    indices?: pulumi.Input<pulumi.Input<inputs.WorkersCountIndex>[]>;
    /**
     * The number of workers managing SBOM migration.
     */
    migrationSboms?: pulumi.Input<pulumi.Input<inputs.WorkersCountMigrationSbom>[]>;
    /**
     * The number of workers managing notifications.
     */
    notifications?: pulumi.Input<pulumi.Input<inputs.WorkersCountNotification>[]>;
    /**
     * The number of workers managing panoramic.
     */
    panoramics?: pulumi.Input<pulumi.Input<inputs.WorkersCountPanoramic>[]>;
    /**
     * The number of workers managing persistent storage needed to build the artifact relationship graph.
     */
    persists?: pulumi.Input<pulumi.Input<inputs.WorkersCountPersist>[]>;
    /**
     * The number of workers managing policy enforcer.
     */
    policyEnforcers?: pulumi.Input<pulumi.Input<inputs.WorkersCountPolicyEnforcer>[]>;
    /**
     * The number of workers managing SBOM impact analysis.
     */
    sbomImpactAnalyses?: pulumi.Input<pulumi.Input<inputs.WorkersCountSbomImpactAnalysis>[]>;
    /**
     * The number of workers managing SBOM.
     */
    sboms?: pulumi.Input<pulumi.Input<inputs.WorkersCountSbom>[]>;
    /**
     * The number of workers managing user catalog.
     */
    userCatalogs?: pulumi.Input<pulumi.Input<inputs.WorkersCountUserCatalog>[]>;
}
