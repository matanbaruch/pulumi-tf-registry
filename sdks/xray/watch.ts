// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Watch extends pulumi.CustomResource {
    /**
     * Get an existing Watch resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WatchState, opts?: pulumi.CustomResourceOptions): Watch {
        return new Watch(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'xray:index/watch:Watch';

    /**
     * Returns true if the given object is an instance of Watch.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Watch {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Watch.__pulumiType;
    }

    /**
     * Whether or not the watch is active
     */
    public readonly active!: pulumi.Output<boolean | undefined>;
    /**
     * Nested argument describing policies that will be applied. Defined below.
     */
    public readonly assignedPolicies!: pulumi.Output<outputs.WatchAssignedPolicy[] | undefined>;
    /**
     * Description of the watch
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Name of the watch
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Project key for assigning this resource to. Must be 2 - 10 lowercase alphanumeric and hyphen characters. Support
     * repository and build watch resource types. When specifying individual repository or build they must be already assigned
     * to the project. Build must be added as indexed resources.
     */
    public readonly projectKey!: pulumi.Output<string | undefined>;
    /**
     * A list of email addressed that will get emailed when a violation is triggered.
     */
    public readonly watchRecipients!: pulumi.Output<string[] | undefined>;
    public readonly watchResources!: pulumi.Output<outputs.WatchWatchResource[] | undefined>;

    /**
     * Create a Watch resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: WatchArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WatchArgs | WatchState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WatchState | undefined;
            resourceInputs["active"] = state ? state.active : undefined;
            resourceInputs["assignedPolicies"] = state ? state.assignedPolicies : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectKey"] = state ? state.projectKey : undefined;
            resourceInputs["watchRecipients"] = state ? state.watchRecipients : undefined;
            resourceInputs["watchResources"] = state ? state.watchResources : undefined;
        } else {
            const args = argsOrState as WatchArgs | undefined;
            resourceInputs["active"] = args ? args.active : undefined;
            resourceInputs["assignedPolicies"] = args ? args.assignedPolicies : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectKey"] = args ? args.projectKey : undefined;
            resourceInputs["watchRecipients"] = args ? args.watchRecipients : undefined;
            resourceInputs["watchResources"] = args ? args.watchResources : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Watch.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Watch resources.
 */
export interface WatchState {
    /**
     * Whether or not the watch is active
     */
    active?: pulumi.Input<boolean>;
    /**
     * Nested argument describing policies that will be applied. Defined below.
     */
    assignedPolicies?: pulumi.Input<pulumi.Input<inputs.WatchAssignedPolicy>[]>;
    /**
     * Description of the watch
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the watch
     */
    name?: pulumi.Input<string>;
    /**
     * Project key for assigning this resource to. Must be 2 - 10 lowercase alphanumeric and hyphen characters. Support
     * repository and build watch resource types. When specifying individual repository or build they must be already assigned
     * to the project. Build must be added as indexed resources.
     */
    projectKey?: pulumi.Input<string>;
    /**
     * A list of email addressed that will get emailed when a violation is triggered.
     */
    watchRecipients?: pulumi.Input<pulumi.Input<string>[]>;
    watchResources?: pulumi.Input<pulumi.Input<inputs.WatchWatchResource>[]>;
}

/**
 * The set of arguments for constructing a Watch resource.
 */
export interface WatchArgs {
    /**
     * Whether or not the watch is active
     */
    active?: pulumi.Input<boolean>;
    /**
     * Nested argument describing policies that will be applied. Defined below.
     */
    assignedPolicies?: pulumi.Input<pulumi.Input<inputs.WatchAssignedPolicy>[]>;
    /**
     * Description of the watch
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the watch
     */
    name?: pulumi.Input<string>;
    /**
     * Project key for assigning this resource to. Must be 2 - 10 lowercase alphanumeric and hyphen characters. Support
     * repository and build watch resource types. When specifying individual repository or build they must be already assigned
     * to the project. Build must be added as indexed resources.
     */
    projectKey?: pulumi.Input<string>;
    /**
     * A list of email addressed that will get emailed when a violation is triggered.
     */
    watchRecipients?: pulumi.Input<pulumi.Input<string>[]>;
    watchResources?: pulumi.Input<pulumi.Input<inputs.WatchWatchResource>[]>;
}
