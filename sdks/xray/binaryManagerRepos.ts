// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BinaryManagerRepos extends pulumi.CustomResource {
    /**
     * Get an existing BinaryManagerRepos resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BinaryManagerReposState, opts?: pulumi.CustomResourceOptions): BinaryManagerRepos {
        return new BinaryManagerRepos(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'xray:index/binaryManagerRepos:BinaryManagerRepos';

    /**
     * Returns true if the given object is an instance of BinaryManagerRepos.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BinaryManagerRepos {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BinaryManagerRepos.__pulumiType;
    }

    /**
     * Repositories to be indexed.
     */
    public readonly indexedRepos!: pulumi.Output<outputs.BinaryManagerReposIndexedRepo[]>;
    /**
     * Non-indexed repositories for output.
     */
    public /*out*/ readonly nonIndexedRepos!: pulumi.Output<outputs.BinaryManagerReposNonIndexedRepo[]>;
    /**
     * For Xray version 3.21.2 and above with Projects, a Project Admin with Index Resources privilege can maintain the indexed
     * and not indexed repositories in a given binary manger using this resource in the scope of a project.
     */
    public readonly projectKey!: pulumi.Output<string | undefined>;

    /**
     * Create a BinaryManagerRepos resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BinaryManagerReposArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BinaryManagerReposArgs | BinaryManagerReposState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BinaryManagerReposState | undefined;
            resourceInputs["indexedRepos"] = state ? state.indexedRepos : undefined;
            resourceInputs["nonIndexedRepos"] = state ? state.nonIndexedRepos : undefined;
            resourceInputs["projectKey"] = state ? state.projectKey : undefined;
        } else {
            const args = argsOrState as BinaryManagerReposArgs | undefined;
            if ((!args || args.indexedRepos === undefined) && !opts.urn) {
                throw new Error("Missing required property 'indexedRepos'");
            }
            resourceInputs["indexedRepos"] = args ? args.indexedRepos : undefined;
            resourceInputs["projectKey"] = args ? args.projectKey : undefined;
            resourceInputs["nonIndexedRepos"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BinaryManagerRepos.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BinaryManagerRepos resources.
 */
export interface BinaryManagerReposState {
    /**
     * Repositories to be indexed.
     */
    indexedRepos?: pulumi.Input<pulumi.Input<inputs.BinaryManagerReposIndexedRepo>[]>;
    /**
     * Non-indexed repositories for output.
     */
    nonIndexedRepos?: pulumi.Input<pulumi.Input<inputs.BinaryManagerReposNonIndexedRepo>[]>;
    /**
     * For Xray version 3.21.2 and above with Projects, a Project Admin with Index Resources privilege can maintain the indexed
     * and not indexed repositories in a given binary manger using this resource in the scope of a project.
     */
    projectKey?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BinaryManagerRepos resource.
 */
export interface BinaryManagerReposArgs {
    /**
     * Repositories to be indexed.
     */
    indexedRepos: pulumi.Input<pulumi.Input<inputs.BinaryManagerReposIndexedRepo>[]>;
    /**
     * For Xray version 3.21.2 and above with Projects, a Project Admin with Index Resources privilege can maintain the indexed
     * and not indexed repositories in a given binary manger using this resource in the scope of a project.
     */
    projectKey?: pulumi.Input<string>;
}
