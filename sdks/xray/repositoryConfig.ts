// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RepositoryConfig extends pulumi.CustomResource {
    /**
     * Get an existing RepositoryConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RepositoryConfigState, opts?: pulumi.CustomResourceOptions): RepositoryConfig {
        return new RepositoryConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'xray:index/repositoryConfig:RepositoryConfig';

    /**
     * Returns true if the given object is an instance of RepositoryConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RepositoryConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RepositoryConfig.__pulumiType;
    }

    /**
     * Single repository configuration.
     */
    public readonly configs!: pulumi.Output<outputs.RepositoryConfigConfig[] | undefined>;
    /**
     * Specified if JFrog Advanced Security is enabled or not. Default to 'false'
     */
    public readonly jasEnabled!: pulumi.Output<boolean>;
    /**
     * Enables you to set a more granular retention period. It enables you to scan future artifacts within the specific path,
     * and set a retention period for the historical data of artifacts after they are scanned
     */
    public readonly pathsConfigs!: pulumi.Output<outputs.RepositoryConfigPathsConfig[] | undefined>;
    /**
     * The name of the repository to update configurations for.
     */
    public readonly repoName!: pulumi.Output<string>;

    /**
     * Create a RepositoryConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RepositoryConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RepositoryConfigArgs | RepositoryConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RepositoryConfigState | undefined;
            resourceInputs["configs"] = state ? state.configs : undefined;
            resourceInputs["jasEnabled"] = state ? state.jasEnabled : undefined;
            resourceInputs["pathsConfigs"] = state ? state.pathsConfigs : undefined;
            resourceInputs["repoName"] = state ? state.repoName : undefined;
        } else {
            const args = argsOrState as RepositoryConfigArgs | undefined;
            if ((!args || args.repoName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repoName'");
            }
            resourceInputs["configs"] = args ? args.configs : undefined;
            resourceInputs["jasEnabled"] = args ? args.jasEnabled : undefined;
            resourceInputs["pathsConfigs"] = args ? args.pathsConfigs : undefined;
            resourceInputs["repoName"] = args ? args.repoName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RepositoryConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RepositoryConfig resources.
 */
export interface RepositoryConfigState {
    /**
     * Single repository configuration.
     */
    configs?: pulumi.Input<pulumi.Input<inputs.RepositoryConfigConfig>[]>;
    /**
     * Specified if JFrog Advanced Security is enabled or not. Default to 'false'
     */
    jasEnabled?: pulumi.Input<boolean>;
    /**
     * Enables you to set a more granular retention period. It enables you to scan future artifacts within the specific path,
     * and set a retention period for the historical data of artifacts after they are scanned
     */
    pathsConfigs?: pulumi.Input<pulumi.Input<inputs.RepositoryConfigPathsConfig>[]>;
    /**
     * The name of the repository to update configurations for.
     */
    repoName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RepositoryConfig resource.
 */
export interface RepositoryConfigArgs {
    /**
     * Single repository configuration.
     */
    configs?: pulumi.Input<pulumi.Input<inputs.RepositoryConfigConfig>[]>;
    /**
     * Specified if JFrog Advanced Security is enabled or not. Default to 'false'
     */
    jasEnabled?: pulumi.Input<boolean>;
    /**
     * Enables you to set a more granular retention period. It enables you to scan future artifacts within the specific path,
     * and set a retention period for the historical data of artifacts after they are scanned
     */
    pathsConfigs?: pulumi.Input<pulumi.Input<inputs.RepositoryConfigPathsConfig>[]>;
    /**
     * The name of the repository to update configurations for.
     */
    repoName: pulumi.Input<string>;
}
