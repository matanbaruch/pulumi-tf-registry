// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LicensesReport extends pulumi.CustomResource {
    /**
     * Get an existing LicensesReport resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LicensesReportState, opts?: pulumi.CustomResourceOptions): LicensesReport {
        return new LicensesReport(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'xray:index/licensesReport:LicensesReport';

    /**
     * Returns true if the given object is an instance of LicensesReport.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LicensesReport {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LicensesReport.__pulumiType;
    }

    /**
     * Advanced filters.
     */
    public readonly filters!: pulumi.Output<outputs.LicensesReportFilter[]>;
    /**
     * Name of the report.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Project key for assigning this resource to. Must be 2 - 10 lowercase alphanumeric and hyphen characters.
     */
    public readonly projectKey!: pulumi.Output<string | undefined>;
    /**
     * Report ID
     */
    public readonly reportId!: pulumi.Output<number>;
    /**
     * The list of resources to include into the report.
     */
    public readonly resources!: pulumi.Output<outputs.LicensesReportResources>;

    /**
     * Create a LicensesReport resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LicensesReportArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LicensesReportArgs | LicensesReportState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LicensesReportState | undefined;
            resourceInputs["filters"] = state ? state.filters : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectKey"] = state ? state.projectKey : undefined;
            resourceInputs["reportId"] = state ? state.reportId : undefined;
            resourceInputs["resources"] = state ? state.resources : undefined;
        } else {
            const args = argsOrState as LicensesReportArgs | undefined;
            if ((!args || args.filters === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filters'");
            }
            if ((!args || args.resources === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resources'");
            }
            resourceInputs["filters"] = args ? args.filters : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectKey"] = args ? args.projectKey : undefined;
            resourceInputs["reportId"] = args ? args.reportId : undefined;
            resourceInputs["resources"] = args ? args.resources : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LicensesReport.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LicensesReport resources.
 */
export interface LicensesReportState {
    /**
     * Advanced filters.
     */
    filters?: pulumi.Input<pulumi.Input<inputs.LicensesReportFilter>[]>;
    /**
     * Name of the report.
     */
    name?: pulumi.Input<string>;
    /**
     * Project key for assigning this resource to. Must be 2 - 10 lowercase alphanumeric and hyphen characters.
     */
    projectKey?: pulumi.Input<string>;
    /**
     * Report ID
     */
    reportId?: pulumi.Input<number>;
    /**
     * The list of resources to include into the report.
     */
    resources?: pulumi.Input<inputs.LicensesReportResources>;
}

/**
 * The set of arguments for constructing a LicensesReport resource.
 */
export interface LicensesReportArgs {
    /**
     * Advanced filters.
     */
    filters: pulumi.Input<pulumi.Input<inputs.LicensesReportFilter>[]>;
    /**
     * Name of the report.
     */
    name?: pulumi.Input<string>;
    /**
     * Project key for assigning this resource to. Must be 2 - 10 lowercase alphanumeric and hyphen characters.
     */
    projectKey?: pulumi.Input<string>;
    /**
     * Report ID
     */
    reportId?: pulumi.Input<number>;
    /**
     * The list of resources to include into the report.
     */
    resources: pulumi.Input<inputs.LicensesReportResources>;
}
