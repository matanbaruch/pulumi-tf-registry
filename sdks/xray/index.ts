// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { BinaryManagerBuildsArgs, BinaryManagerBuildsState } from "./binaryManagerBuilds";
export type BinaryManagerBuilds = import("./binaryManagerBuilds").BinaryManagerBuilds;
export const BinaryManagerBuilds: typeof import("./binaryManagerBuilds").BinaryManagerBuilds = null as any;
utilities.lazyLoad(exports, ["BinaryManagerBuilds"], () => require("./binaryManagerBuilds"));

export { BinaryManagerReleaseBundlesV2Args, BinaryManagerReleaseBundlesV2State } from "./binaryManagerReleaseBundlesV2";
export type BinaryManagerReleaseBundlesV2 = import("./binaryManagerReleaseBundlesV2").BinaryManagerReleaseBundlesV2;
export const BinaryManagerReleaseBundlesV2: typeof import("./binaryManagerReleaseBundlesV2").BinaryManagerReleaseBundlesV2 = null as any;
utilities.lazyLoad(exports, ["BinaryManagerReleaseBundlesV2"], () => require("./binaryManagerReleaseBundlesV2"));

export { BinaryManagerReposArgs, BinaryManagerReposState } from "./binaryManagerRepos";
export type BinaryManagerRepos = import("./binaryManagerRepos").BinaryManagerRepos;
export const BinaryManagerRepos: typeof import("./binaryManagerRepos").BinaryManagerRepos = null as any;
utilities.lazyLoad(exports, ["BinaryManagerRepos"], () => require("./binaryManagerRepos"));

export { CustomIssueArgs, CustomIssueState } from "./customIssue";
export type CustomIssue = import("./customIssue").CustomIssue;
export const CustomIssue: typeof import("./customIssue").CustomIssue = null as any;
utilities.lazyLoad(exports, ["CustomIssue"], () => require("./customIssue"));

export { GetArtifactsScanArgs, GetArtifactsScanResult, GetArtifactsScanOutputArgs } from "./getArtifactsScan";
export const getArtifactsScan: typeof import("./getArtifactsScan").getArtifactsScan = null as any;
export const getArtifactsScanOutput: typeof import("./getArtifactsScan").getArtifactsScanOutput = null as any;
utilities.lazyLoad(exports, ["getArtifactsScan","getArtifactsScanOutput"], () => require("./getArtifactsScan"));

export { IgnoreRuleArgs, IgnoreRuleState } from "./ignoreRule";
export type IgnoreRule = import("./ignoreRule").IgnoreRule;
export const IgnoreRule: typeof import("./ignoreRule").IgnoreRule = null as any;
utilities.lazyLoad(exports, ["IgnoreRule"], () => require("./ignoreRule"));

export { LicensePolicyArgs, LicensePolicyState } from "./licensePolicy";
export type LicensePolicy = import("./licensePolicy").LicensePolicy;
export const LicensePolicy: typeof import("./licensePolicy").LicensePolicy = null as any;
utilities.lazyLoad(exports, ["LicensePolicy"], () => require("./licensePolicy"));

export { LicensesReportArgs, LicensesReportState } from "./licensesReport";
export type LicensesReport = import("./licensesReport").LicensesReport;
export const LicensesReport: typeof import("./licensesReport").LicensesReport = null as any;
utilities.lazyLoad(exports, ["LicensesReport"], () => require("./licensesReport"));

export { OperationalRiskPolicyArgs, OperationalRiskPolicyState } from "./operationalRiskPolicy";
export type OperationalRiskPolicy = import("./operationalRiskPolicy").OperationalRiskPolicy;
export const OperationalRiskPolicy: typeof import("./operationalRiskPolicy").OperationalRiskPolicy = null as any;
utilities.lazyLoad(exports, ["OperationalRiskPolicy"], () => require("./operationalRiskPolicy"));

export { OperationalRisksReportArgs, OperationalRisksReportState } from "./operationalRisksReport";
export type OperationalRisksReport = import("./operationalRisksReport").OperationalRisksReport;
export const OperationalRisksReport: typeof import("./operationalRisksReport").OperationalRisksReport = null as any;
utilities.lazyLoad(exports, ["OperationalRisksReport"], () => require("./operationalRisksReport"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RepositoryConfigArgs, RepositoryConfigState } from "./repositoryConfig";
export type RepositoryConfig = import("./repositoryConfig").RepositoryConfig;
export const RepositoryConfig: typeof import("./repositoryConfig").RepositoryConfig = null as any;
utilities.lazyLoad(exports, ["RepositoryConfig"], () => require("./repositoryConfig"));

export { SecurityPolicyArgs, SecurityPolicyState } from "./securityPolicy";
export type SecurityPolicy = import("./securityPolicy").SecurityPolicy;
export const SecurityPolicy: typeof import("./securityPolicy").SecurityPolicy = null as any;
utilities.lazyLoad(exports, ["SecurityPolicy"], () => require("./securityPolicy"));

export { SettingsArgs, SettingsState } from "./settings";
export type Settings = import("./settings").Settings;
export const Settings: typeof import("./settings").Settings = null as any;
utilities.lazyLoad(exports, ["Settings"], () => require("./settings"));

export { ViolationsReportArgs, ViolationsReportState } from "./violationsReport";
export type ViolationsReport = import("./violationsReport").ViolationsReport;
export const ViolationsReport: typeof import("./violationsReport").ViolationsReport = null as any;
utilities.lazyLoad(exports, ["ViolationsReport"], () => require("./violationsReport"));

export { VulnerabilitiesReportArgs, VulnerabilitiesReportState } from "./vulnerabilitiesReport";
export type VulnerabilitiesReport = import("./vulnerabilitiesReport").VulnerabilitiesReport;
export const VulnerabilitiesReport: typeof import("./vulnerabilitiesReport").VulnerabilitiesReport = null as any;
utilities.lazyLoad(exports, ["VulnerabilitiesReport"], () => require("./vulnerabilitiesReport"));

export { WatchArgs, WatchState } from "./watch";
export type Watch = import("./watch").Watch;
export const Watch: typeof import("./watch").Watch = null as any;
utilities.lazyLoad(exports, ["Watch"], () => require("./watch"));

export { WebhookArgs, WebhookState } from "./webhook";
export type Webhook = import("./webhook").Webhook;
export const Webhook: typeof import("./webhook").Webhook = null as any;
utilities.lazyLoad(exports, ["Webhook"], () => require("./webhook"));

export { WorkersCountArgs, WorkersCountState } from "./workersCount";
export type WorkersCount = import("./workersCount").WorkersCount;
export const WorkersCount: typeof import("./workersCount").WorkersCount = null as any;
utilities.lazyLoad(exports, ["WorkersCount"], () => require("./workersCount"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "xray:index/binaryManagerBuilds:BinaryManagerBuilds":
                return new BinaryManagerBuilds(name, <any>undefined, { urn })
            case "xray:index/binaryManagerReleaseBundlesV2:BinaryManagerReleaseBundlesV2":
                return new BinaryManagerReleaseBundlesV2(name, <any>undefined, { urn })
            case "xray:index/binaryManagerRepos:BinaryManagerRepos":
                return new BinaryManagerRepos(name, <any>undefined, { urn })
            case "xray:index/customIssue:CustomIssue":
                return new CustomIssue(name, <any>undefined, { urn })
            case "xray:index/ignoreRule:IgnoreRule":
                return new IgnoreRule(name, <any>undefined, { urn })
            case "xray:index/licensePolicy:LicensePolicy":
                return new LicensePolicy(name, <any>undefined, { urn })
            case "xray:index/licensesReport:LicensesReport":
                return new LicensesReport(name, <any>undefined, { urn })
            case "xray:index/operationalRiskPolicy:OperationalRiskPolicy":
                return new OperationalRiskPolicy(name, <any>undefined, { urn })
            case "xray:index/operationalRisksReport:OperationalRisksReport":
                return new OperationalRisksReport(name, <any>undefined, { urn })
            case "xray:index/repositoryConfig:RepositoryConfig":
                return new RepositoryConfig(name, <any>undefined, { urn })
            case "xray:index/securityPolicy:SecurityPolicy":
                return new SecurityPolicy(name, <any>undefined, { urn })
            case "xray:index/settings:Settings":
                return new Settings(name, <any>undefined, { urn })
            case "xray:index/violationsReport:ViolationsReport":
                return new ViolationsReport(name, <any>undefined, { urn })
            case "xray:index/vulnerabilitiesReport:VulnerabilitiesReport":
                return new VulnerabilitiesReport(name, <any>undefined, { urn })
            case "xray:index/watch:Watch":
                return new Watch(name, <any>undefined, { urn })
            case "xray:index/webhook:Webhook":
                return new Webhook(name, <any>undefined, { urn })
            case "xray:index/workersCount:WorkersCount":
                return new WorkersCount(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("xray", "index/binaryManagerBuilds", _module)
pulumi.runtime.registerResourceModule("xray", "index/binaryManagerReleaseBundlesV2", _module)
pulumi.runtime.registerResourceModule("xray", "index/binaryManagerRepos", _module)
pulumi.runtime.registerResourceModule("xray", "index/customIssue", _module)
pulumi.runtime.registerResourceModule("xray", "index/ignoreRule", _module)
pulumi.runtime.registerResourceModule("xray", "index/licensePolicy", _module)
pulumi.runtime.registerResourceModule("xray", "index/licensesReport", _module)
pulumi.runtime.registerResourceModule("xray", "index/operationalRiskPolicy", _module)
pulumi.runtime.registerResourceModule("xray", "index/operationalRisksReport", _module)
pulumi.runtime.registerResourceModule("xray", "index/repositoryConfig", _module)
pulumi.runtime.registerResourceModule("xray", "index/securityPolicy", _module)
pulumi.runtime.registerResourceModule("xray", "index/settings", _module)
pulumi.runtime.registerResourceModule("xray", "index/violationsReport", _module)
pulumi.runtime.registerResourceModule("xray", "index/vulnerabilitiesReport", _module)
pulumi.runtime.registerResourceModule("xray", "index/watch", _module)
pulumi.runtime.registerResourceModule("xray", "index/webhook", _module)
pulumi.runtime.registerResourceModule("xray", "index/workersCount", _module)
pulumi.runtime.registerResourcePackage("xray", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:xray") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
