// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getLeafAccessBundlePolicyGroup(args: GetLeafAccessBundlePolicyGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetLeafAccessBundlePolicyGroupResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aci:index/getLeafAccessBundlePolicyGroup:getLeafAccessBundlePolicyGroup", {
        "annotation": args.annotation,
        "description": args.description,
        "id": args.id,
        "lagT": args.lagT,
        "name": args.name,
        "nameAlias": args.nameAlias,
        "relationInfraRsAttEntP": args.relationInfraRsAttEntP,
        "relationInfraRsCdpIfPol": args.relationInfraRsCdpIfPol,
        "relationInfraRsCoppIfPol": args.relationInfraRsCoppIfPol,
        "relationInfraRsFcIfPol": args.relationInfraRsFcIfPol,
        "relationInfraRsHIfPol": args.relationInfraRsHIfPol,
        "relationInfraRsL2IfPol": args.relationInfraRsL2IfPol,
        "relationInfraRsL2InstPol": args.relationInfraRsL2InstPol,
        "relationInfraRsL2PortAuthPol": args.relationInfraRsL2PortAuthPol,
        "relationInfraRsL2PortSecurityPol": args.relationInfraRsL2PortSecurityPol,
        "relationInfraRsLacpPol": args.relationInfraRsLacpPol,
        "relationInfraRsLldpIfPol": args.relationInfraRsLldpIfPol,
        "relationInfraRsMacsecIfPol": args.relationInfraRsMacsecIfPol,
        "relationInfraRsMcpIfPol": args.relationInfraRsMcpIfPol,
        "relationInfraRsMonIfInfraPol": args.relationInfraRsMonIfInfraPol,
        "relationInfraRsNetflowMonitorPols": args.relationInfraRsNetflowMonitorPols,
        "relationInfraRsQosDppIfPol": args.relationInfraRsQosDppIfPol,
        "relationInfraRsQosEgressDppIfPol": args.relationInfraRsQosEgressDppIfPol,
        "relationInfraRsQosIngressDppIfPol": args.relationInfraRsQosIngressDppIfPol,
        "relationInfraRsQosPfcIfPol": args.relationInfraRsQosPfcIfPol,
        "relationInfraRsQosSdIfPol": args.relationInfraRsQosSdIfPol,
        "relationInfraRsSpanVDestGrps": args.relationInfraRsSpanVDestGrps,
        "relationInfraRsSpanVSrcGrps": args.relationInfraRsSpanVSrcGrps,
        "relationInfraRsStormctrlIfPol": args.relationInfraRsStormctrlIfPol,
        "relationInfraRsStpIfPol": args.relationInfraRsStpIfPol,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLeafAccessBundlePolicyGroup.
 */
export interface GetLeafAccessBundlePolicyGroupArgs {
    annotation?: string;
    description?: string;
    id?: string;
    lagT?: string;
    name: string;
    nameAlias?: string;
    relationInfraRsAttEntP?: string;
    relationInfraRsCdpIfPol?: string;
    relationInfraRsCoppIfPol?: string;
    relationInfraRsFcIfPol?: string;
    relationInfraRsHIfPol?: string;
    relationInfraRsL2IfPol?: string;
    relationInfraRsL2InstPol?: string;
    relationInfraRsL2PortAuthPol?: string;
    relationInfraRsL2PortSecurityPol?: string;
    relationInfraRsLacpPol?: string;
    relationInfraRsLldpIfPol?: string;
    relationInfraRsMacsecIfPol?: string;
    relationInfraRsMcpIfPol?: string;
    relationInfraRsMonIfInfraPol?: string;
    relationInfraRsNetflowMonitorPols?: inputs.GetLeafAccessBundlePolicyGroupRelationInfraRsNetflowMonitorPol[];
    relationInfraRsQosDppIfPol?: string;
    relationInfraRsQosEgressDppIfPol?: string;
    relationInfraRsQosIngressDppIfPol?: string;
    relationInfraRsQosPfcIfPol?: string;
    relationInfraRsQosSdIfPol?: string;
    relationInfraRsSpanVDestGrps?: string[];
    relationInfraRsSpanVSrcGrps?: string[];
    relationInfraRsStormctrlIfPol?: string;
    relationInfraRsStpIfPol?: string;
}

/**
 * A collection of values returned by getLeafAccessBundlePolicyGroup.
 */
export interface GetLeafAccessBundlePolicyGroupResult {
    readonly annotation: string;
    readonly description: string;
    readonly id: string;
    readonly lagT: string;
    readonly name: string;
    readonly nameAlias: string;
    readonly relationInfraRsAttEntP?: string;
    readonly relationInfraRsCdpIfPol?: string;
    readonly relationInfraRsCoppIfPol?: string;
    readonly relationInfraRsFcIfPol?: string;
    readonly relationInfraRsHIfPol?: string;
    readonly relationInfraRsL2IfPol?: string;
    readonly relationInfraRsL2InstPol?: string;
    readonly relationInfraRsL2PortAuthPol?: string;
    readonly relationInfraRsL2PortSecurityPol?: string;
    readonly relationInfraRsLacpPol?: string;
    readonly relationInfraRsLldpIfPol?: string;
    readonly relationInfraRsMacsecIfPol?: string;
    readonly relationInfraRsMcpIfPol?: string;
    readonly relationInfraRsMonIfInfraPol?: string;
    readonly relationInfraRsNetflowMonitorPols?: outputs.GetLeafAccessBundlePolicyGroupRelationInfraRsNetflowMonitorPol[];
    readonly relationInfraRsQosDppIfPol?: string;
    readonly relationInfraRsQosEgressDppIfPol?: string;
    readonly relationInfraRsQosIngressDppIfPol?: string;
    readonly relationInfraRsQosPfcIfPol?: string;
    readonly relationInfraRsQosSdIfPol?: string;
    readonly relationInfraRsSpanVDestGrps?: string[];
    readonly relationInfraRsSpanVSrcGrps?: string[];
    readonly relationInfraRsStormctrlIfPol?: string;
    readonly relationInfraRsStpIfPol?: string;
}
export function getLeafAccessBundlePolicyGroupOutput(args: GetLeafAccessBundlePolicyGroupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLeafAccessBundlePolicyGroupResult> {
    return pulumi.output(args).apply((a: any) => getLeafAccessBundlePolicyGroup(a, opts))
}

/**
 * A collection of arguments for invoking getLeafAccessBundlePolicyGroup.
 */
export interface GetLeafAccessBundlePolicyGroupOutputArgs {
    annotation?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    lagT?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    relationInfraRsAttEntP?: pulumi.Input<string>;
    relationInfraRsCdpIfPol?: pulumi.Input<string>;
    relationInfraRsCoppIfPol?: pulumi.Input<string>;
    relationInfraRsFcIfPol?: pulumi.Input<string>;
    relationInfraRsHIfPol?: pulumi.Input<string>;
    relationInfraRsL2IfPol?: pulumi.Input<string>;
    relationInfraRsL2InstPol?: pulumi.Input<string>;
    relationInfraRsL2PortAuthPol?: pulumi.Input<string>;
    relationInfraRsL2PortSecurityPol?: pulumi.Input<string>;
    relationInfraRsLacpPol?: pulumi.Input<string>;
    relationInfraRsLldpIfPol?: pulumi.Input<string>;
    relationInfraRsMacsecIfPol?: pulumi.Input<string>;
    relationInfraRsMcpIfPol?: pulumi.Input<string>;
    relationInfraRsMonIfInfraPol?: pulumi.Input<string>;
    relationInfraRsNetflowMonitorPols?: pulumi.Input<pulumi.Input<inputs.GetLeafAccessBundlePolicyGroupRelationInfraRsNetflowMonitorPolArgs>[]>;
    relationInfraRsQosDppIfPol?: pulumi.Input<string>;
    relationInfraRsQosEgressDppIfPol?: pulumi.Input<string>;
    relationInfraRsQosIngressDppIfPol?: pulumi.Input<string>;
    relationInfraRsQosPfcIfPol?: pulumi.Input<string>;
    relationInfraRsQosSdIfPol?: pulumi.Input<string>;
    relationInfraRsSpanVDestGrps?: pulumi.Input<pulumi.Input<string>[]>;
    relationInfraRsSpanVSrcGrps?: pulumi.Input<pulumi.Input<string>[]>;
    relationInfraRsStormctrlIfPol?: pulumi.Input<string>;
    relationInfraRsStpIfPol?: pulumi.Input<string>;
}
