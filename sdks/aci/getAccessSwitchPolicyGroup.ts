// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getAccessSwitchPolicyGroup(args: GetAccessSwitchPolicyGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetAccessSwitchPolicyGroupResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aci:index/getAccessSwitchPolicyGroup:getAccessSwitchPolicyGroup", {
        "annotation": args.annotation,
        "description": args.description,
        "id": args.id,
        "name": args.name,
        "nameAlias": args.nameAlias,
        "relationInfraRsBfdIpv4InstPol": args.relationInfraRsBfdIpv4InstPol,
        "relationInfraRsBfdIpv6InstPol": args.relationInfraRsBfdIpv6InstPol,
        "relationInfraRsBfdMhIpv4InstPol": args.relationInfraRsBfdMhIpv4InstPol,
        "relationInfraRsBfdMhIpv6InstPol": args.relationInfraRsBfdMhIpv6InstPol,
        "relationInfraRsEquipmentFlashConfigPol": args.relationInfraRsEquipmentFlashConfigPol,
        "relationInfraRsFcFabricPol": args.relationInfraRsFcFabricPol,
        "relationInfraRsFcInstPol": args.relationInfraRsFcInstPol,
        "relationInfraRsIaclLeafProfile": args.relationInfraRsIaclLeafProfile,
        "relationInfraRsL2NodeAuthPol": args.relationInfraRsL2NodeAuthPol,
        "relationInfraRsLeafCoppProfile": args.relationInfraRsLeafCoppProfile,
        "relationInfraRsLeafPGrpToCdpIfPol": args.relationInfraRsLeafPGrpToCdpIfPol,
        "relationInfraRsLeafPGrpToLldpIfPol": args.relationInfraRsLeafPGrpToLldpIfPol,
        "relationInfraRsMonNodeInfraPol": args.relationInfraRsMonNodeInfraPol,
        "relationInfraRsMstInstPol": args.relationInfraRsMstInstPol,
        "relationInfraRsNetflowNodePol": args.relationInfraRsNetflowNodePol,
        "relationInfraRsPoeInstPol": args.relationInfraRsPoeInstPol,
        "relationInfraRsTopoctrlFastLinkFailoverInstPol": args.relationInfraRsTopoctrlFastLinkFailoverInstPol,
        "relationInfraRsTopoctrlFwdScaleProfPol": args.relationInfraRsTopoctrlFwdScaleProfPol,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getAccessSwitchPolicyGroup.
 */
export interface GetAccessSwitchPolicyGroupArgs {
    annotation?: string;
    description?: string;
    id?: string;
    name: string;
    nameAlias?: string;
    relationInfraRsBfdIpv4InstPol?: string;
    relationInfraRsBfdIpv6InstPol?: string;
    relationInfraRsBfdMhIpv4InstPol?: string;
    relationInfraRsBfdMhIpv6InstPol?: string;
    relationInfraRsEquipmentFlashConfigPol?: string;
    relationInfraRsFcFabricPol?: string;
    relationInfraRsFcInstPol?: string;
    relationInfraRsIaclLeafProfile?: string;
    relationInfraRsL2NodeAuthPol?: string;
    relationInfraRsLeafCoppProfile?: string;
    relationInfraRsLeafPGrpToCdpIfPol?: string;
    relationInfraRsLeafPGrpToLldpIfPol?: string;
    relationInfraRsMonNodeInfraPol?: string;
    relationInfraRsMstInstPol?: string;
    relationInfraRsNetflowNodePol?: string;
    relationInfraRsPoeInstPol?: string;
    relationInfraRsTopoctrlFastLinkFailoverInstPol?: string;
    relationInfraRsTopoctrlFwdScaleProfPol?: string;
}

/**
 * A collection of values returned by getAccessSwitchPolicyGroup.
 */
export interface GetAccessSwitchPolicyGroupResult {
    readonly annotation: string;
    readonly description: string;
    readonly id: string;
    readonly name: string;
    readonly nameAlias: string;
    readonly relationInfraRsBfdIpv4InstPol?: string;
    readonly relationInfraRsBfdIpv6InstPol?: string;
    readonly relationInfraRsBfdMhIpv4InstPol?: string;
    readonly relationInfraRsBfdMhIpv6InstPol?: string;
    readonly relationInfraRsEquipmentFlashConfigPol?: string;
    readonly relationInfraRsFcFabricPol?: string;
    readonly relationInfraRsFcInstPol?: string;
    readonly relationInfraRsIaclLeafProfile?: string;
    readonly relationInfraRsL2NodeAuthPol?: string;
    readonly relationInfraRsLeafCoppProfile?: string;
    readonly relationInfraRsLeafPGrpToCdpIfPol?: string;
    readonly relationInfraRsLeafPGrpToLldpIfPol?: string;
    readonly relationInfraRsMonNodeInfraPol?: string;
    readonly relationInfraRsMstInstPol?: string;
    readonly relationInfraRsNetflowNodePol?: string;
    readonly relationInfraRsPoeInstPol?: string;
    readonly relationInfraRsTopoctrlFastLinkFailoverInstPol?: string;
    readonly relationInfraRsTopoctrlFwdScaleProfPol?: string;
}
export function getAccessSwitchPolicyGroupOutput(args: GetAccessSwitchPolicyGroupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAccessSwitchPolicyGroupResult> {
    return pulumi.output(args).apply((a: any) => getAccessSwitchPolicyGroup(a, opts))
}

/**
 * A collection of arguments for invoking getAccessSwitchPolicyGroup.
 */
export interface GetAccessSwitchPolicyGroupOutputArgs {
    annotation?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    relationInfraRsBfdIpv4InstPol?: pulumi.Input<string>;
    relationInfraRsBfdIpv6InstPol?: pulumi.Input<string>;
    relationInfraRsBfdMhIpv4InstPol?: pulumi.Input<string>;
    relationInfraRsBfdMhIpv6InstPol?: pulumi.Input<string>;
    relationInfraRsEquipmentFlashConfigPol?: pulumi.Input<string>;
    relationInfraRsFcFabricPol?: pulumi.Input<string>;
    relationInfraRsFcInstPol?: pulumi.Input<string>;
    relationInfraRsIaclLeafProfile?: pulumi.Input<string>;
    relationInfraRsL2NodeAuthPol?: pulumi.Input<string>;
    relationInfraRsLeafCoppProfile?: pulumi.Input<string>;
    relationInfraRsLeafPGrpToCdpIfPol?: pulumi.Input<string>;
    relationInfraRsLeafPGrpToLldpIfPol?: pulumi.Input<string>;
    relationInfraRsMonNodeInfraPol?: pulumi.Input<string>;
    relationInfraRsMstInstPol?: pulumi.Input<string>;
    relationInfraRsNetflowNodePol?: pulumi.Input<string>;
    relationInfraRsPoeInstPol?: pulumi.Input<string>;
    relationInfraRsTopoctrlFastLinkFailoverInstPol?: pulumi.Input<string>;
    relationInfraRsTopoctrlFwdScaleProfPol?: pulumi.Input<string>;
}
