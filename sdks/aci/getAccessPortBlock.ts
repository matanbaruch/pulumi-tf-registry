// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getAccessPortBlock(args: GetAccessPortBlockArgs, opts?: pulumi.InvokeOptions): Promise<GetAccessPortBlockResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aci:index/getAccessPortBlock:getAccessPortBlock", {
        "accessPortSelectorDn": args.accessPortSelectorDn,
        "annotation": args.annotation,
        "description": args.description,
        "fromCard": args.fromCard,
        "fromPort": args.fromPort,
        "id": args.id,
        "name": args.name,
        "nameAlias": args.nameAlias,
        "relationInfraRsAccBndlSubgrp": args.relationInfraRsAccBndlSubgrp,
        "toCard": args.toCard,
        "toPort": args.toPort,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getAccessPortBlock.
 */
export interface GetAccessPortBlockArgs {
    accessPortSelectorDn: string;
    annotation?: string;
    description?: string;
    fromCard?: string;
    fromPort?: string;
    id?: string;
    name: string;
    nameAlias?: string;
    relationInfraRsAccBndlSubgrp?: string;
    toCard?: string;
    toPort?: string;
}

/**
 * A collection of values returned by getAccessPortBlock.
 */
export interface GetAccessPortBlockResult {
    readonly accessPortSelectorDn: string;
    readonly annotation: string;
    readonly description: string;
    readonly fromCard: string;
    readonly fromPort: string;
    readonly id: string;
    readonly name: string;
    readonly nameAlias: string;
    readonly relationInfraRsAccBndlSubgrp?: string;
    readonly toCard: string;
    readonly toPort: string;
}
export function getAccessPortBlockOutput(args: GetAccessPortBlockOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAccessPortBlockResult> {
    return pulumi.output(args).apply((a: any) => getAccessPortBlock(a, opts))
}

/**
 * A collection of arguments for invoking getAccessPortBlock.
 */
export interface GetAccessPortBlockOutputArgs {
    accessPortSelectorDn: pulumi.Input<string>;
    annotation?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    fromCard?: pulumi.Input<string>;
    fromPort?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    relationInfraRsAccBndlSubgrp?: pulumi.Input<string>;
    toCard?: pulumi.Input<string>;
    toPort?: pulumi.Input<string>;
}
