// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

declare var exports: any;
const __config = new pulumi.Config("aci");

/**
 * Global annotation for the provider. This can also be set as the ACI_ANNOTATION environment variable.
 */
export declare const annotation: string | undefined;
Object.defineProperty(exports, "annotation", {
    get() {
        return __config.get("annotation");
    },
    enumerable: true,
});

/**
 * Certificate name for the User in Cisco ACI. This can also be set as the ACI_CERT_NAME environment variable.
 */
export declare const certName: string | undefined;
Object.defineProperty(exports, "certName", {
    get() {
        return __config.get("certName");
    },
    enumerable: true,
});

/**
 * Allow insecure HTTPS client. This can also be set as the ACI_INSECURE environment variable. Defaults to `true`.
 */
export declare const insecure: string | undefined;
Object.defineProperty(exports, "insecure", {
    get() {
        return __config.get("insecure");
    },
    enumerable: true,
});

/**
 * Password for the APIC Account. This can also be set as the ACI_PASSWORD environment variable.
 */
export declare const password: string | undefined;
Object.defineProperty(exports, "password", {
    get() {
        return __config.get("password");
    },
    enumerable: true,
});

/**
 * Private key path for signature calculation. This can also be set as the ACI_PRIVATE_KEY environment variable.
 */
export declare const privateKey: string | undefined;
Object.defineProperty(exports, "privateKey", {
    get() {
        return __config.get("privateKey");
    },
    enumerable: true,
});

/**
 * Proxy server credentials in the form of username:password. This can also be set as the ACI_PROXY_CREDS environment
 * variable.
 */
export declare const proxyCreds: string | undefined;
Object.defineProperty(exports, "proxyCreds", {
    get() {
        return __config.get("proxyCreds");
    },
    enumerable: true,
});

/**
 * Proxy Server URL with port number. This can also be set as the ACI_PROXY_URL environment variable.
 */
export declare const proxyUrl: string | undefined;
Object.defineProperty(exports, "proxyUrl", {
    get() {
        return __config.get("proxyUrl");
    },
    enumerable: true,
});

/**
 * Number of retries for REST API calls. This can also be set as the ACI_RETRIES environment variable. Defaults to `2`.
 */
export declare const retries: string | undefined;
Object.defineProperty(exports, "retries", {
    get() {
        return __config.get("retries");
    },
    enumerable: true,
});

/**
 * URL of the Cisco ACI web interface. This can also be set as the ACI_URL environment variable.
 */
export declare const url: string | undefined;
Object.defineProperty(exports, "url", {
    get() {
        return __config.get("url");
    },
    enumerable: true,
});

/**
 * Username for the APIC Account. This can also be set as the ACI_USERNAME environment variable.
 */
export declare const username: string | undefined;
Object.defineProperty(exports, "username", {
    get() {
        return __config.get("username");
    },
    enumerable: true,
});

/**
 * Flag to validate if a object with entered relation Dn exists in the APIC. Defaults to `true`.
 */
export declare const validateRelationDn: string | undefined;
Object.defineProperty(exports, "validateRelationDn", {
    get() {
        return __config.get("validateRelationDn");
    },
    enumerable: true,
});

