// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CloudL4L7ThirdPartyDevice extends pulumi.CustomResource {
    /**
     * Get an existing CloudL4L7ThirdPartyDevice resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudL4L7ThirdPartyDeviceState, opts?: pulumi.CustomResourceOptions): CloudL4L7ThirdPartyDevice {
        return new CloudL4L7ThirdPartyDevice(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aci:index/cloudL4L7ThirdPartyDevice:CloudL4L7ThirdPartyDevice';

    /**
     * Returns true if the given object is an instance of CloudL4L7ThirdPartyDevice.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudL4L7ThirdPartyDevice {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudL4L7ThirdPartyDevice.__pulumiType;
    }

    public readonly aaaDomainDns!: pulumi.Output<string[]>;
    public readonly activeActive!: pulumi.Output<string>;
    public readonly annotation!: pulumi.Output<string>;
    public readonly contextAware!: pulumi.Output<string>;
    public readonly customResourceGroup!: pulumi.Output<string>;
    public readonly deviceType!: pulumi.Output<string>;
    public readonly functionType!: pulumi.Output<string>;
    public readonly instanceCount!: pulumi.Output<string>;
    public readonly interfaceSelectors!: pulumi.Output<outputs.CloudL4L7ThirdPartyDeviceInterfaceSelector[] | undefined>;
    public readonly isCopy!: pulumi.Output<string>;
    public readonly isInstantiation!: pulumi.Output<string>;
    public readonly l4l7DeviceApplicationSecurityGroup!: pulumi.Output<string>;
    public readonly l4l7ThirdPartyDevice!: pulumi.Output<string>;
    public readonly managed!: pulumi.Output<string>;
    public /*out*/ readonly mode!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly nameAlias!: pulumi.Output<string>;
    public readonly packageModel!: pulumi.Output<string>;
    public readonly promiscuousMode!: pulumi.Output<string>;
    /**
     * Create relation to fv:Ctx
     */
    public readonly relationCloudRsLdevToCtx!: pulumi.Output<string>;
    public readonly serviceType!: pulumi.Output<string>;
    public readonly targetMode!: pulumi.Output<string>;
    public readonly tenantDn!: pulumi.Output<string>;
    public readonly trunking!: pulumi.Output<string>;
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a CloudL4L7ThirdPartyDevice resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudL4L7ThirdPartyDeviceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudL4L7ThirdPartyDeviceArgs | CloudL4L7ThirdPartyDeviceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudL4L7ThirdPartyDeviceState | undefined;
            resourceInputs["aaaDomainDns"] = state ? state.aaaDomainDns : undefined;
            resourceInputs["activeActive"] = state ? state.activeActive : undefined;
            resourceInputs["annotation"] = state ? state.annotation : undefined;
            resourceInputs["contextAware"] = state ? state.contextAware : undefined;
            resourceInputs["customResourceGroup"] = state ? state.customResourceGroup : undefined;
            resourceInputs["deviceType"] = state ? state.deviceType : undefined;
            resourceInputs["functionType"] = state ? state.functionType : undefined;
            resourceInputs["instanceCount"] = state ? state.instanceCount : undefined;
            resourceInputs["interfaceSelectors"] = state ? state.interfaceSelectors : undefined;
            resourceInputs["isCopy"] = state ? state.isCopy : undefined;
            resourceInputs["isInstantiation"] = state ? state.isInstantiation : undefined;
            resourceInputs["l4l7DeviceApplicationSecurityGroup"] = state ? state.l4l7DeviceApplicationSecurityGroup : undefined;
            resourceInputs["l4l7ThirdPartyDevice"] = state ? state.l4l7ThirdPartyDevice : undefined;
            resourceInputs["managed"] = state ? state.managed : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nameAlias"] = state ? state.nameAlias : undefined;
            resourceInputs["packageModel"] = state ? state.packageModel : undefined;
            resourceInputs["promiscuousMode"] = state ? state.promiscuousMode : undefined;
            resourceInputs["relationCloudRsLdevToCtx"] = state ? state.relationCloudRsLdevToCtx : undefined;
            resourceInputs["serviceType"] = state ? state.serviceType : undefined;
            resourceInputs["targetMode"] = state ? state.targetMode : undefined;
            resourceInputs["tenantDn"] = state ? state.tenantDn : undefined;
            resourceInputs["trunking"] = state ? state.trunking : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as CloudL4L7ThirdPartyDeviceArgs | undefined;
            if ((!args || args.relationCloudRsLdevToCtx === undefined) && !opts.urn) {
                throw new Error("Missing required property 'relationCloudRsLdevToCtx'");
            }
            if ((!args || args.tenantDn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantDn'");
            }
            resourceInputs["aaaDomainDns"] = args ? args.aaaDomainDns : undefined;
            resourceInputs["activeActive"] = args ? args.activeActive : undefined;
            resourceInputs["annotation"] = args ? args.annotation : undefined;
            resourceInputs["contextAware"] = args ? args.contextAware : undefined;
            resourceInputs["customResourceGroup"] = args ? args.customResourceGroup : undefined;
            resourceInputs["deviceType"] = args ? args.deviceType : undefined;
            resourceInputs["functionType"] = args ? args.functionType : undefined;
            resourceInputs["instanceCount"] = args ? args.instanceCount : undefined;
            resourceInputs["interfaceSelectors"] = args ? args.interfaceSelectors : undefined;
            resourceInputs["isCopy"] = args ? args.isCopy : undefined;
            resourceInputs["isInstantiation"] = args ? args.isInstantiation : undefined;
            resourceInputs["l4l7DeviceApplicationSecurityGroup"] = args ? args.l4l7DeviceApplicationSecurityGroup : undefined;
            resourceInputs["l4l7ThirdPartyDevice"] = args ? args.l4l7ThirdPartyDevice : undefined;
            resourceInputs["managed"] = args ? args.managed : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nameAlias"] = args ? args.nameAlias : undefined;
            resourceInputs["packageModel"] = args ? args.packageModel : undefined;
            resourceInputs["promiscuousMode"] = args ? args.promiscuousMode : undefined;
            resourceInputs["relationCloudRsLdevToCtx"] = args ? args.relationCloudRsLdevToCtx : undefined;
            resourceInputs["serviceType"] = args ? args.serviceType : undefined;
            resourceInputs["targetMode"] = args ? args.targetMode : undefined;
            resourceInputs["tenantDn"] = args ? args.tenantDn : undefined;
            resourceInputs["trunking"] = args ? args.trunking : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["mode"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudL4L7ThirdPartyDevice.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CloudL4L7ThirdPartyDevice resources.
 */
export interface CloudL4L7ThirdPartyDeviceState {
    aaaDomainDns?: pulumi.Input<pulumi.Input<string>[]>;
    activeActive?: pulumi.Input<string>;
    annotation?: pulumi.Input<string>;
    contextAware?: pulumi.Input<string>;
    customResourceGroup?: pulumi.Input<string>;
    deviceType?: pulumi.Input<string>;
    functionType?: pulumi.Input<string>;
    instanceCount?: pulumi.Input<string>;
    interfaceSelectors?: pulumi.Input<pulumi.Input<inputs.CloudL4L7ThirdPartyDeviceInterfaceSelector>[]>;
    isCopy?: pulumi.Input<string>;
    isInstantiation?: pulumi.Input<string>;
    l4l7DeviceApplicationSecurityGroup?: pulumi.Input<string>;
    l4l7ThirdPartyDevice?: pulumi.Input<string>;
    managed?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    packageModel?: pulumi.Input<string>;
    promiscuousMode?: pulumi.Input<string>;
    /**
     * Create relation to fv:Ctx
     */
    relationCloudRsLdevToCtx?: pulumi.Input<string>;
    serviceType?: pulumi.Input<string>;
    targetMode?: pulumi.Input<string>;
    tenantDn?: pulumi.Input<string>;
    trunking?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CloudL4L7ThirdPartyDevice resource.
 */
export interface CloudL4L7ThirdPartyDeviceArgs {
    aaaDomainDns?: pulumi.Input<pulumi.Input<string>[]>;
    activeActive?: pulumi.Input<string>;
    annotation?: pulumi.Input<string>;
    contextAware?: pulumi.Input<string>;
    customResourceGroup?: pulumi.Input<string>;
    deviceType?: pulumi.Input<string>;
    functionType?: pulumi.Input<string>;
    instanceCount?: pulumi.Input<string>;
    interfaceSelectors?: pulumi.Input<pulumi.Input<inputs.CloudL4L7ThirdPartyDeviceInterfaceSelector>[]>;
    isCopy?: pulumi.Input<string>;
    isInstantiation?: pulumi.Input<string>;
    l4l7DeviceApplicationSecurityGroup?: pulumi.Input<string>;
    l4l7ThirdPartyDevice?: pulumi.Input<string>;
    managed?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    packageModel?: pulumi.Input<string>;
    promiscuousMode?: pulumi.Input<string>;
    /**
     * Create relation to fv:Ctx
     */
    relationCloudRsLdevToCtx: pulumi.Input<string>;
    serviceType?: pulumi.Input<string>;
    targetMode?: pulumi.Input<string>;
    tenantDn: pulumi.Input<string>;
    trunking?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}
