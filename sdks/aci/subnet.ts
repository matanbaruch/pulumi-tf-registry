// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Subnet extends pulumi.CustomResource {
    /**
     * Get an existing Subnet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SubnetState, opts?: pulumi.CustomResourceOptions): Subnet {
        return new Subnet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aci:index/subnet:Subnet';

    /**
     * Returns true if the given object is an instance of Subnet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Subnet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Subnet.__pulumiType;
    }

    public readonly annotation!: pulumi.Output<string>;
    public readonly anycastMac!: pulumi.Output<string | undefined>;
    public readonly ctrls!: pulumi.Output<string[]>;
    public readonly description!: pulumi.Output<string>;
    public readonly ip!: pulumi.Output<string>;
    public readonly ipDataPlaneLearning!: pulumi.Output<string>;
    public readonly msnlb!: pulumi.Output<outputs.SubnetMsnlb | undefined>;
    public readonly nameAlias!: pulumi.Output<string>;
    public readonly nextHopAddr!: pulumi.Output<string | undefined>;
    public readonly parentDn!: pulumi.Output<string>;
    public readonly preferred!: pulumi.Output<string>;
    public readonly relationFvRsBdSubnetToOuts!: pulumi.Output<string[] | undefined>;
    public readonly relationFvRsBdSubnetToProfile!: pulumi.Output<string | undefined>;
    public readonly relationFvRsNdPfxPol!: pulumi.Output<string | undefined>;
    public readonly scopes!: pulumi.Output<string[]>;
    public readonly virtual!: pulumi.Output<string>;

    /**
     * Create a Subnet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SubnetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SubnetArgs | SubnetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SubnetState | undefined;
            resourceInputs["annotation"] = state ? state.annotation : undefined;
            resourceInputs["anycastMac"] = state ? state.anycastMac : undefined;
            resourceInputs["ctrls"] = state ? state.ctrls : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["ipDataPlaneLearning"] = state ? state.ipDataPlaneLearning : undefined;
            resourceInputs["msnlb"] = state ? state.msnlb : undefined;
            resourceInputs["nameAlias"] = state ? state.nameAlias : undefined;
            resourceInputs["nextHopAddr"] = state ? state.nextHopAddr : undefined;
            resourceInputs["parentDn"] = state ? state.parentDn : undefined;
            resourceInputs["preferred"] = state ? state.preferred : undefined;
            resourceInputs["relationFvRsBdSubnetToOuts"] = state ? state.relationFvRsBdSubnetToOuts : undefined;
            resourceInputs["relationFvRsBdSubnetToProfile"] = state ? state.relationFvRsBdSubnetToProfile : undefined;
            resourceInputs["relationFvRsNdPfxPol"] = state ? state.relationFvRsNdPfxPol : undefined;
            resourceInputs["scopes"] = state ? state.scopes : undefined;
            resourceInputs["virtual"] = state ? state.virtual : undefined;
        } else {
            const args = argsOrState as SubnetArgs | undefined;
            if ((!args || args.ip === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ip'");
            }
            if ((!args || args.parentDn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parentDn'");
            }
            resourceInputs["annotation"] = args ? args.annotation : undefined;
            resourceInputs["anycastMac"] = args ? args.anycastMac : undefined;
            resourceInputs["ctrls"] = args ? args.ctrls : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["ip"] = args ? args.ip : undefined;
            resourceInputs["ipDataPlaneLearning"] = args ? args.ipDataPlaneLearning : undefined;
            resourceInputs["msnlb"] = args ? args.msnlb : undefined;
            resourceInputs["nameAlias"] = args ? args.nameAlias : undefined;
            resourceInputs["nextHopAddr"] = args ? args.nextHopAddr : undefined;
            resourceInputs["parentDn"] = args ? args.parentDn : undefined;
            resourceInputs["preferred"] = args ? args.preferred : undefined;
            resourceInputs["relationFvRsBdSubnetToOuts"] = args ? args.relationFvRsBdSubnetToOuts : undefined;
            resourceInputs["relationFvRsBdSubnetToProfile"] = args ? args.relationFvRsBdSubnetToProfile : undefined;
            resourceInputs["relationFvRsNdPfxPol"] = args ? args.relationFvRsNdPfxPol : undefined;
            resourceInputs["scopes"] = args ? args.scopes : undefined;
            resourceInputs["virtual"] = args ? args.virtual : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Subnet.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Subnet resources.
 */
export interface SubnetState {
    annotation?: pulumi.Input<string>;
    anycastMac?: pulumi.Input<string>;
    ctrls?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    ipDataPlaneLearning?: pulumi.Input<string>;
    msnlb?: pulumi.Input<inputs.SubnetMsnlb>;
    nameAlias?: pulumi.Input<string>;
    nextHopAddr?: pulumi.Input<string>;
    parentDn?: pulumi.Input<string>;
    preferred?: pulumi.Input<string>;
    relationFvRsBdSubnetToOuts?: pulumi.Input<pulumi.Input<string>[]>;
    relationFvRsBdSubnetToProfile?: pulumi.Input<string>;
    relationFvRsNdPfxPol?: pulumi.Input<string>;
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    virtual?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Subnet resource.
 */
export interface SubnetArgs {
    annotation?: pulumi.Input<string>;
    anycastMac?: pulumi.Input<string>;
    ctrls?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    ip: pulumi.Input<string>;
    ipDataPlaneLearning?: pulumi.Input<string>;
    msnlb?: pulumi.Input<inputs.SubnetMsnlb>;
    nameAlias?: pulumi.Input<string>;
    nextHopAddr?: pulumi.Input<string>;
    parentDn: pulumi.Input<string>;
    preferred?: pulumi.Input<string>;
    relationFvRsBdSubnetToOuts?: pulumi.Input<pulumi.Input<string>[]>;
    relationFvRsBdSubnetToProfile?: pulumi.Input<string>;
    relationFvRsNdPfxPol?: pulumi.Input<string>;
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    virtual?: pulumi.Input<string>;
}
