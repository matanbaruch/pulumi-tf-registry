// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class L2outExtepg extends pulumi.CustomResource {
    /**
     * Get an existing L2outExtepg resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: L2outExtepgState, opts?: pulumi.CustomResourceOptions): L2outExtepg {
        return new L2outExtepg(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aci:index/l2outExtepg:L2outExtepg';

    /**
     * Returns true if the given object is an instance of L2outExtepg.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is L2outExtepg {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === L2outExtepg.__pulumiType;
    }

    public readonly annotation!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly exceptionTag!: pulumi.Output<string>;
    public readonly floodOnEncap!: pulumi.Output<string>;
    public readonly l2OutsideDn!: pulumi.Output<string>;
    public readonly matchT!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly nameAlias!: pulumi.Output<string>;
    public readonly prefGrMemb!: pulumi.Output<string>;
    public readonly prio!: pulumi.Output<string>;
    public readonly relationFvRsCons!: pulumi.Output<string[] | undefined>;
    public readonly relationFvRsConsIfs!: pulumi.Output<string[] | undefined>;
    public readonly relationFvRsCustQosPol!: pulumi.Output<string | undefined>;
    public readonly relationFvRsIntraEpgs!: pulumi.Output<string[] | undefined>;
    public readonly relationFvRsProtBies!: pulumi.Output<string[] | undefined>;
    public readonly relationFvRsProvs!: pulumi.Output<string[] | undefined>;
    public readonly relationFvRsSecInheriteds!: pulumi.Output<string[] | undefined>;
    public readonly relationL2extRsL2InstPToDomP!: pulumi.Output<string | undefined>;
    public readonly targetDscp!: pulumi.Output<string>;

    /**
     * Create a L2outExtepg resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: L2outExtepgArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: L2outExtepgArgs | L2outExtepgState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as L2outExtepgState | undefined;
            resourceInputs["annotation"] = state ? state.annotation : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["exceptionTag"] = state ? state.exceptionTag : undefined;
            resourceInputs["floodOnEncap"] = state ? state.floodOnEncap : undefined;
            resourceInputs["l2OutsideDn"] = state ? state.l2OutsideDn : undefined;
            resourceInputs["matchT"] = state ? state.matchT : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nameAlias"] = state ? state.nameAlias : undefined;
            resourceInputs["prefGrMemb"] = state ? state.prefGrMemb : undefined;
            resourceInputs["prio"] = state ? state.prio : undefined;
            resourceInputs["relationFvRsCons"] = state ? state.relationFvRsCons : undefined;
            resourceInputs["relationFvRsConsIfs"] = state ? state.relationFvRsConsIfs : undefined;
            resourceInputs["relationFvRsCustQosPol"] = state ? state.relationFvRsCustQosPol : undefined;
            resourceInputs["relationFvRsIntraEpgs"] = state ? state.relationFvRsIntraEpgs : undefined;
            resourceInputs["relationFvRsProtBies"] = state ? state.relationFvRsProtBies : undefined;
            resourceInputs["relationFvRsProvs"] = state ? state.relationFvRsProvs : undefined;
            resourceInputs["relationFvRsSecInheriteds"] = state ? state.relationFvRsSecInheriteds : undefined;
            resourceInputs["relationL2extRsL2InstPToDomP"] = state ? state.relationL2extRsL2InstPToDomP : undefined;
            resourceInputs["targetDscp"] = state ? state.targetDscp : undefined;
        } else {
            const args = argsOrState as L2outExtepgArgs | undefined;
            if ((!args || args.l2OutsideDn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'l2OutsideDn'");
            }
            resourceInputs["annotation"] = args ? args.annotation : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["exceptionTag"] = args ? args.exceptionTag : undefined;
            resourceInputs["floodOnEncap"] = args ? args.floodOnEncap : undefined;
            resourceInputs["l2OutsideDn"] = args ? args.l2OutsideDn : undefined;
            resourceInputs["matchT"] = args ? args.matchT : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nameAlias"] = args ? args.nameAlias : undefined;
            resourceInputs["prefGrMemb"] = args ? args.prefGrMemb : undefined;
            resourceInputs["prio"] = args ? args.prio : undefined;
            resourceInputs["relationFvRsCons"] = args ? args.relationFvRsCons : undefined;
            resourceInputs["relationFvRsConsIfs"] = args ? args.relationFvRsConsIfs : undefined;
            resourceInputs["relationFvRsCustQosPol"] = args ? args.relationFvRsCustQosPol : undefined;
            resourceInputs["relationFvRsIntraEpgs"] = args ? args.relationFvRsIntraEpgs : undefined;
            resourceInputs["relationFvRsProtBies"] = args ? args.relationFvRsProtBies : undefined;
            resourceInputs["relationFvRsProvs"] = args ? args.relationFvRsProvs : undefined;
            resourceInputs["relationFvRsSecInheriteds"] = args ? args.relationFvRsSecInheriteds : undefined;
            resourceInputs["relationL2extRsL2InstPToDomP"] = args ? args.relationL2extRsL2InstPToDomP : undefined;
            resourceInputs["targetDscp"] = args ? args.targetDscp : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(L2outExtepg.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering L2outExtepg resources.
 */
export interface L2outExtepgState {
    annotation?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    exceptionTag?: pulumi.Input<string>;
    floodOnEncap?: pulumi.Input<string>;
    l2OutsideDn?: pulumi.Input<string>;
    matchT?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    prefGrMemb?: pulumi.Input<string>;
    prio?: pulumi.Input<string>;
    relationFvRsCons?: pulumi.Input<pulumi.Input<string>[]>;
    relationFvRsConsIfs?: pulumi.Input<pulumi.Input<string>[]>;
    relationFvRsCustQosPol?: pulumi.Input<string>;
    relationFvRsIntraEpgs?: pulumi.Input<pulumi.Input<string>[]>;
    relationFvRsProtBies?: pulumi.Input<pulumi.Input<string>[]>;
    relationFvRsProvs?: pulumi.Input<pulumi.Input<string>[]>;
    relationFvRsSecInheriteds?: pulumi.Input<pulumi.Input<string>[]>;
    relationL2extRsL2InstPToDomP?: pulumi.Input<string>;
    targetDscp?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a L2outExtepg resource.
 */
export interface L2outExtepgArgs {
    annotation?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    exceptionTag?: pulumi.Input<string>;
    floodOnEncap?: pulumi.Input<string>;
    l2OutsideDn: pulumi.Input<string>;
    matchT?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    prefGrMemb?: pulumi.Input<string>;
    prio?: pulumi.Input<string>;
    relationFvRsCons?: pulumi.Input<pulumi.Input<string>[]>;
    relationFvRsConsIfs?: pulumi.Input<pulumi.Input<string>[]>;
    relationFvRsCustQosPol?: pulumi.Input<string>;
    relationFvRsIntraEpgs?: pulumi.Input<pulumi.Input<string>[]>;
    relationFvRsProtBies?: pulumi.Input<pulumi.Input<string>[]>;
    relationFvRsProvs?: pulumi.Input<pulumi.Input<string>[]>;
    relationFvRsSecInheriteds?: pulumi.Input<pulumi.Input<string>[]>;
    relationL2extRsL2InstPToDomP?: pulumi.Input<string>;
    targetDscp?: pulumi.Input<string>;
}
