// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class FirmwareDownloadTask extends pulumi.CustomResource {
    /**
     * Get an existing FirmwareDownloadTask resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirmwareDownloadTaskState, opts?: pulumi.CustomResourceOptions): FirmwareDownloadTask {
        return new FirmwareDownloadTask(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aci:index/firmwareDownloadTask:FirmwareDownloadTask';

    /**
     * Returns true if the given object is an instance of FirmwareDownloadTask.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirmwareDownloadTask {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirmwareDownloadTask.__pulumiType;
    }

    public readonly annotation!: pulumi.Output<string>;
    public readonly authPass!: pulumi.Output<string>;
    public readonly authType!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly dnldTaskFlip!: pulumi.Output<string>;
    public readonly identityPrivateKeyContents!: pulumi.Output<string>;
    public readonly identityPrivateKeyPassphrase!: pulumi.Output<string>;
    public readonly identityPublicKeyContents!: pulumi.Output<string>;
    public readonly loadCatalogIfExistsAndNewer!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly nameAlias!: pulumi.Output<string>;
    public readonly password!: pulumi.Output<string>;
    public readonly pollingInterval!: pulumi.Output<string>;
    public readonly proto!: pulumi.Output<string>;
    public readonly url!: pulumi.Output<string>;
    public readonly user!: pulumi.Output<string>;

    /**
     * Create a FirmwareDownloadTask resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: FirmwareDownloadTaskArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirmwareDownloadTaskArgs | FirmwareDownloadTaskState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirmwareDownloadTaskState | undefined;
            resourceInputs["annotation"] = state ? state.annotation : undefined;
            resourceInputs["authPass"] = state ? state.authPass : undefined;
            resourceInputs["authType"] = state ? state.authType : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dnldTaskFlip"] = state ? state.dnldTaskFlip : undefined;
            resourceInputs["identityPrivateKeyContents"] = state ? state.identityPrivateKeyContents : undefined;
            resourceInputs["identityPrivateKeyPassphrase"] = state ? state.identityPrivateKeyPassphrase : undefined;
            resourceInputs["identityPublicKeyContents"] = state ? state.identityPublicKeyContents : undefined;
            resourceInputs["loadCatalogIfExistsAndNewer"] = state ? state.loadCatalogIfExistsAndNewer : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nameAlias"] = state ? state.nameAlias : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["pollingInterval"] = state ? state.pollingInterval : undefined;
            resourceInputs["proto"] = state ? state.proto : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
        } else {
            const args = argsOrState as FirmwareDownloadTaskArgs | undefined;
            resourceInputs["annotation"] = args ? args.annotation : undefined;
            resourceInputs["authPass"] = args ? args.authPass : undefined;
            resourceInputs["authType"] = args ? args.authType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dnldTaskFlip"] = args ? args.dnldTaskFlip : undefined;
            resourceInputs["identityPrivateKeyContents"] = args ? args.identityPrivateKeyContents : undefined;
            resourceInputs["identityPrivateKeyPassphrase"] = args ? args.identityPrivateKeyPassphrase : undefined;
            resourceInputs["identityPublicKeyContents"] = args ? args.identityPublicKeyContents : undefined;
            resourceInputs["loadCatalogIfExistsAndNewer"] = args ? args.loadCatalogIfExistsAndNewer : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nameAlias"] = args ? args.nameAlias : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["pollingInterval"] = args ? args.pollingInterval : undefined;
            resourceInputs["proto"] = args ? args.proto : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FirmwareDownloadTask.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FirmwareDownloadTask resources.
 */
export interface FirmwareDownloadTaskState {
    annotation?: pulumi.Input<string>;
    authPass?: pulumi.Input<string>;
    authType?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dnldTaskFlip?: pulumi.Input<string>;
    identityPrivateKeyContents?: pulumi.Input<string>;
    identityPrivateKeyPassphrase?: pulumi.Input<string>;
    identityPublicKeyContents?: pulumi.Input<string>;
    loadCatalogIfExistsAndNewer?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    pollingInterval?: pulumi.Input<string>;
    proto?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
    user?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FirmwareDownloadTask resource.
 */
export interface FirmwareDownloadTaskArgs {
    annotation?: pulumi.Input<string>;
    authPass?: pulumi.Input<string>;
    authType?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dnldTaskFlip?: pulumi.Input<string>;
    identityPrivateKeyContents?: pulumi.Input<string>;
    identityPrivateKeyPassphrase?: pulumi.Input<string>;
    identityPublicKeyContents?: pulumi.Input<string>;
    loadCatalogIfExistsAndNewer?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    pollingInterval?: pulumi.Input<string>;
    proto?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
    user?: pulumi.Input<string>;
}
