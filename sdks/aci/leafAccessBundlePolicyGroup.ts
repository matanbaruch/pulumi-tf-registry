// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LeafAccessBundlePolicyGroup extends pulumi.CustomResource {
    /**
     * Get an existing LeafAccessBundlePolicyGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LeafAccessBundlePolicyGroupState, opts?: pulumi.CustomResourceOptions): LeafAccessBundlePolicyGroup {
        return new LeafAccessBundlePolicyGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aci:index/leafAccessBundlePolicyGroup:LeafAccessBundlePolicyGroup';

    /**
     * Returns true if the given object is an instance of LeafAccessBundlePolicyGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LeafAccessBundlePolicyGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LeafAccessBundlePolicyGroup.__pulumiType;
    }

    public readonly annotation!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly lagT!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly nameAlias!: pulumi.Output<string>;
    public readonly relationInfraRsAttEntP!: pulumi.Output<string | undefined>;
    public readonly relationInfraRsCdpIfPol!: pulumi.Output<string>;
    public readonly relationInfraRsCoppIfPol!: pulumi.Output<string>;
    public readonly relationInfraRsFcIfPol!: pulumi.Output<string>;
    public readonly relationInfraRsHIfPol!: pulumi.Output<string>;
    public readonly relationInfraRsL2IfPol!: pulumi.Output<string>;
    public readonly relationInfraRsL2InstPol!: pulumi.Output<string | undefined>;
    public readonly relationInfraRsL2PortAuthPol!: pulumi.Output<string>;
    public readonly relationInfraRsL2PortSecurityPol!: pulumi.Output<string>;
    public readonly relationInfraRsLacpPol!: pulumi.Output<string>;
    public readonly relationInfraRsLldpIfPol!: pulumi.Output<string>;
    public readonly relationInfraRsMacsecIfPol!: pulumi.Output<string>;
    public readonly relationInfraRsMcpIfPol!: pulumi.Output<string>;
    public readonly relationInfraRsMonIfInfraPol!: pulumi.Output<string>;
    public readonly relationInfraRsNetflowMonitorPols!: pulumi.Output<outputs.LeafAccessBundlePolicyGroupRelationInfraRsNetflowMonitorPol[] | undefined>;
    public readonly relationInfraRsQosDppIfPol!: pulumi.Output<string>;
    public readonly relationInfraRsQosEgressDppIfPol!: pulumi.Output<string>;
    public readonly relationInfraRsQosIngressDppIfPol!: pulumi.Output<string>;
    public readonly relationInfraRsQosPfcIfPol!: pulumi.Output<string>;
    public readonly relationInfraRsQosSdIfPol!: pulumi.Output<string>;
    public readonly relationInfraRsSpanVDestGrps!: pulumi.Output<string[] | undefined>;
    public readonly relationInfraRsSpanVSrcGrps!: pulumi.Output<string[] | undefined>;
    public readonly relationInfraRsStormctrlIfPol!: pulumi.Output<string>;
    public readonly relationInfraRsStpIfPol!: pulumi.Output<string>;

    /**
     * Create a LeafAccessBundlePolicyGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: LeafAccessBundlePolicyGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LeafAccessBundlePolicyGroupArgs | LeafAccessBundlePolicyGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LeafAccessBundlePolicyGroupState | undefined;
            resourceInputs["annotation"] = state ? state.annotation : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["lagT"] = state ? state.lagT : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nameAlias"] = state ? state.nameAlias : undefined;
            resourceInputs["relationInfraRsAttEntP"] = state ? state.relationInfraRsAttEntP : undefined;
            resourceInputs["relationInfraRsCdpIfPol"] = state ? state.relationInfraRsCdpIfPol : undefined;
            resourceInputs["relationInfraRsCoppIfPol"] = state ? state.relationInfraRsCoppIfPol : undefined;
            resourceInputs["relationInfraRsFcIfPol"] = state ? state.relationInfraRsFcIfPol : undefined;
            resourceInputs["relationInfraRsHIfPol"] = state ? state.relationInfraRsHIfPol : undefined;
            resourceInputs["relationInfraRsL2IfPol"] = state ? state.relationInfraRsL2IfPol : undefined;
            resourceInputs["relationInfraRsL2InstPol"] = state ? state.relationInfraRsL2InstPol : undefined;
            resourceInputs["relationInfraRsL2PortAuthPol"] = state ? state.relationInfraRsL2PortAuthPol : undefined;
            resourceInputs["relationInfraRsL2PortSecurityPol"] = state ? state.relationInfraRsL2PortSecurityPol : undefined;
            resourceInputs["relationInfraRsLacpPol"] = state ? state.relationInfraRsLacpPol : undefined;
            resourceInputs["relationInfraRsLldpIfPol"] = state ? state.relationInfraRsLldpIfPol : undefined;
            resourceInputs["relationInfraRsMacsecIfPol"] = state ? state.relationInfraRsMacsecIfPol : undefined;
            resourceInputs["relationInfraRsMcpIfPol"] = state ? state.relationInfraRsMcpIfPol : undefined;
            resourceInputs["relationInfraRsMonIfInfraPol"] = state ? state.relationInfraRsMonIfInfraPol : undefined;
            resourceInputs["relationInfraRsNetflowMonitorPols"] = state ? state.relationInfraRsNetflowMonitorPols : undefined;
            resourceInputs["relationInfraRsQosDppIfPol"] = state ? state.relationInfraRsQosDppIfPol : undefined;
            resourceInputs["relationInfraRsQosEgressDppIfPol"] = state ? state.relationInfraRsQosEgressDppIfPol : undefined;
            resourceInputs["relationInfraRsQosIngressDppIfPol"] = state ? state.relationInfraRsQosIngressDppIfPol : undefined;
            resourceInputs["relationInfraRsQosPfcIfPol"] = state ? state.relationInfraRsQosPfcIfPol : undefined;
            resourceInputs["relationInfraRsQosSdIfPol"] = state ? state.relationInfraRsQosSdIfPol : undefined;
            resourceInputs["relationInfraRsSpanVDestGrps"] = state ? state.relationInfraRsSpanVDestGrps : undefined;
            resourceInputs["relationInfraRsSpanVSrcGrps"] = state ? state.relationInfraRsSpanVSrcGrps : undefined;
            resourceInputs["relationInfraRsStormctrlIfPol"] = state ? state.relationInfraRsStormctrlIfPol : undefined;
            resourceInputs["relationInfraRsStpIfPol"] = state ? state.relationInfraRsStpIfPol : undefined;
        } else {
            const args = argsOrState as LeafAccessBundlePolicyGroupArgs | undefined;
            resourceInputs["annotation"] = args ? args.annotation : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["lagT"] = args ? args.lagT : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nameAlias"] = args ? args.nameAlias : undefined;
            resourceInputs["relationInfraRsAttEntP"] = args ? args.relationInfraRsAttEntP : undefined;
            resourceInputs["relationInfraRsCdpIfPol"] = args ? args.relationInfraRsCdpIfPol : undefined;
            resourceInputs["relationInfraRsCoppIfPol"] = args ? args.relationInfraRsCoppIfPol : undefined;
            resourceInputs["relationInfraRsFcIfPol"] = args ? args.relationInfraRsFcIfPol : undefined;
            resourceInputs["relationInfraRsHIfPol"] = args ? args.relationInfraRsHIfPol : undefined;
            resourceInputs["relationInfraRsL2IfPol"] = args ? args.relationInfraRsL2IfPol : undefined;
            resourceInputs["relationInfraRsL2InstPol"] = args ? args.relationInfraRsL2InstPol : undefined;
            resourceInputs["relationInfraRsL2PortAuthPol"] = args ? args.relationInfraRsL2PortAuthPol : undefined;
            resourceInputs["relationInfraRsL2PortSecurityPol"] = args ? args.relationInfraRsL2PortSecurityPol : undefined;
            resourceInputs["relationInfraRsLacpPol"] = args ? args.relationInfraRsLacpPol : undefined;
            resourceInputs["relationInfraRsLldpIfPol"] = args ? args.relationInfraRsLldpIfPol : undefined;
            resourceInputs["relationInfraRsMacsecIfPol"] = args ? args.relationInfraRsMacsecIfPol : undefined;
            resourceInputs["relationInfraRsMcpIfPol"] = args ? args.relationInfraRsMcpIfPol : undefined;
            resourceInputs["relationInfraRsMonIfInfraPol"] = args ? args.relationInfraRsMonIfInfraPol : undefined;
            resourceInputs["relationInfraRsNetflowMonitorPols"] = args ? args.relationInfraRsNetflowMonitorPols : undefined;
            resourceInputs["relationInfraRsQosDppIfPol"] = args ? args.relationInfraRsQosDppIfPol : undefined;
            resourceInputs["relationInfraRsQosEgressDppIfPol"] = args ? args.relationInfraRsQosEgressDppIfPol : undefined;
            resourceInputs["relationInfraRsQosIngressDppIfPol"] = args ? args.relationInfraRsQosIngressDppIfPol : undefined;
            resourceInputs["relationInfraRsQosPfcIfPol"] = args ? args.relationInfraRsQosPfcIfPol : undefined;
            resourceInputs["relationInfraRsQosSdIfPol"] = args ? args.relationInfraRsQosSdIfPol : undefined;
            resourceInputs["relationInfraRsSpanVDestGrps"] = args ? args.relationInfraRsSpanVDestGrps : undefined;
            resourceInputs["relationInfraRsSpanVSrcGrps"] = args ? args.relationInfraRsSpanVSrcGrps : undefined;
            resourceInputs["relationInfraRsStormctrlIfPol"] = args ? args.relationInfraRsStormctrlIfPol : undefined;
            resourceInputs["relationInfraRsStpIfPol"] = args ? args.relationInfraRsStpIfPol : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LeafAccessBundlePolicyGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LeafAccessBundlePolicyGroup resources.
 */
export interface LeafAccessBundlePolicyGroupState {
    annotation?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    lagT?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    relationInfraRsAttEntP?: pulumi.Input<string>;
    relationInfraRsCdpIfPol?: pulumi.Input<string>;
    relationInfraRsCoppIfPol?: pulumi.Input<string>;
    relationInfraRsFcIfPol?: pulumi.Input<string>;
    relationInfraRsHIfPol?: pulumi.Input<string>;
    relationInfraRsL2IfPol?: pulumi.Input<string>;
    relationInfraRsL2InstPol?: pulumi.Input<string>;
    relationInfraRsL2PortAuthPol?: pulumi.Input<string>;
    relationInfraRsL2PortSecurityPol?: pulumi.Input<string>;
    relationInfraRsLacpPol?: pulumi.Input<string>;
    relationInfraRsLldpIfPol?: pulumi.Input<string>;
    relationInfraRsMacsecIfPol?: pulumi.Input<string>;
    relationInfraRsMcpIfPol?: pulumi.Input<string>;
    relationInfraRsMonIfInfraPol?: pulumi.Input<string>;
    relationInfraRsNetflowMonitorPols?: pulumi.Input<pulumi.Input<inputs.LeafAccessBundlePolicyGroupRelationInfraRsNetflowMonitorPol>[]>;
    relationInfraRsQosDppIfPol?: pulumi.Input<string>;
    relationInfraRsQosEgressDppIfPol?: pulumi.Input<string>;
    relationInfraRsQosIngressDppIfPol?: pulumi.Input<string>;
    relationInfraRsQosPfcIfPol?: pulumi.Input<string>;
    relationInfraRsQosSdIfPol?: pulumi.Input<string>;
    relationInfraRsSpanVDestGrps?: pulumi.Input<pulumi.Input<string>[]>;
    relationInfraRsSpanVSrcGrps?: pulumi.Input<pulumi.Input<string>[]>;
    relationInfraRsStormctrlIfPol?: pulumi.Input<string>;
    relationInfraRsStpIfPol?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LeafAccessBundlePolicyGroup resource.
 */
export interface LeafAccessBundlePolicyGroupArgs {
    annotation?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    lagT?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    relationInfraRsAttEntP?: pulumi.Input<string>;
    relationInfraRsCdpIfPol?: pulumi.Input<string>;
    relationInfraRsCoppIfPol?: pulumi.Input<string>;
    relationInfraRsFcIfPol?: pulumi.Input<string>;
    relationInfraRsHIfPol?: pulumi.Input<string>;
    relationInfraRsL2IfPol?: pulumi.Input<string>;
    relationInfraRsL2InstPol?: pulumi.Input<string>;
    relationInfraRsL2PortAuthPol?: pulumi.Input<string>;
    relationInfraRsL2PortSecurityPol?: pulumi.Input<string>;
    relationInfraRsLacpPol?: pulumi.Input<string>;
    relationInfraRsLldpIfPol?: pulumi.Input<string>;
    relationInfraRsMacsecIfPol?: pulumi.Input<string>;
    relationInfraRsMcpIfPol?: pulumi.Input<string>;
    relationInfraRsMonIfInfraPol?: pulumi.Input<string>;
    relationInfraRsNetflowMonitorPols?: pulumi.Input<pulumi.Input<inputs.LeafAccessBundlePolicyGroupRelationInfraRsNetflowMonitorPol>[]>;
    relationInfraRsQosDppIfPol?: pulumi.Input<string>;
    relationInfraRsQosEgressDppIfPol?: pulumi.Input<string>;
    relationInfraRsQosIngressDppIfPol?: pulumi.Input<string>;
    relationInfraRsQosPfcIfPol?: pulumi.Input<string>;
    relationInfraRsQosSdIfPol?: pulumi.Input<string>;
    relationInfraRsSpanVDestGrps?: pulumi.Input<pulumi.Input<string>[]>;
    relationInfraRsSpanVSrcGrps?: pulumi.Input<pulumi.Input<string>[]>;
    relationInfraRsStormctrlIfPol?: pulumi.Input<string>;
    relationInfraRsStpIfPol?: pulumi.Input<string>;
}
