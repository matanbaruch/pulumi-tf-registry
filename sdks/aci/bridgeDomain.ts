// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BridgeDomain extends pulumi.CustomResource {
    /**
     * Get an existing BridgeDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BridgeDomainState, opts?: pulumi.CustomResourceOptions): BridgeDomain {
        return new BridgeDomain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aci:index/bridgeDomain:BridgeDomain';

    /**
     * Returns true if the given object is an instance of BridgeDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BridgeDomain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BridgeDomain.__pulumiType;
    }

    public readonly annotation!: pulumi.Output<string>;
    public readonly arpFlood!: pulumi.Output<string>;
    public readonly bridgeDomainType!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly epClear!: pulumi.Output<string>;
    public readonly epMoveDetectMode!: pulumi.Output<string>;
    public readonly hostBasedRouting!: pulumi.Output<string>;
    public readonly intersiteBumTrafficAllow!: pulumi.Output<string>;
    public readonly intersiteL2Stretch!: pulumi.Output<string>;
    public readonly ipLearning!: pulumi.Output<string>;
    public readonly ipv6McastAllow!: pulumi.Output<string>;
    public readonly limitIpLearnToSubnets!: pulumi.Output<string>;
    public readonly llAddr!: pulumi.Output<string>;
    public readonly mac!: pulumi.Output<string>;
    public readonly mcastAllow!: pulumi.Output<string>;
    public readonly multiDstPktAct!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly nameAlias!: pulumi.Output<string>;
    public readonly optimizeWanBandwidth!: pulumi.Output<string>;
    public readonly relationFvRsAbdPolMonPol!: pulumi.Output<string | undefined>;
    public readonly relationFvRsBdFloodTos!: pulumi.Output<string[] | undefined>;
    public readonly relationFvRsBdToEpRet!: pulumi.Output<string>;
    public readonly relationFvRsBdToFhs!: pulumi.Output<string | undefined>;
    public readonly relationFvRsBdToNdP!: pulumi.Output<string>;
    public readonly relationFvRsBdToNetflowMonitorPols!: pulumi.Output<outputs.BridgeDomainRelationFvRsBdToNetflowMonitorPol[] | undefined>;
    public readonly relationFvRsBdToOuts!: pulumi.Output<string[] | undefined>;
    public readonly relationFvRsBdToProfile!: pulumi.Output<string | undefined>;
    public readonly relationFvRsBdToRelayP!: pulumi.Output<string | undefined>;
    public readonly relationFvRsCtx!: pulumi.Output<string>;
    public readonly relationFvRsIgmpsn!: pulumi.Output<string>;
    public readonly relationFvRsMldsn!: pulumi.Output<string>;
    public readonly tenantDn!: pulumi.Output<string>;
    public readonly unicastRoute!: pulumi.Output<string>;
    public readonly unkMacUcastAct!: pulumi.Output<string>;
    public readonly unkMcastAct!: pulumi.Output<string>;
    public readonly v6unkMcastAct!: pulumi.Output<string>;
    public readonly vmac!: pulumi.Output<string>;

    /**
     * Create a BridgeDomain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BridgeDomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BridgeDomainArgs | BridgeDomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BridgeDomainState | undefined;
            resourceInputs["annotation"] = state ? state.annotation : undefined;
            resourceInputs["arpFlood"] = state ? state.arpFlood : undefined;
            resourceInputs["bridgeDomainType"] = state ? state.bridgeDomainType : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["epClear"] = state ? state.epClear : undefined;
            resourceInputs["epMoveDetectMode"] = state ? state.epMoveDetectMode : undefined;
            resourceInputs["hostBasedRouting"] = state ? state.hostBasedRouting : undefined;
            resourceInputs["intersiteBumTrafficAllow"] = state ? state.intersiteBumTrafficAllow : undefined;
            resourceInputs["intersiteL2Stretch"] = state ? state.intersiteL2Stretch : undefined;
            resourceInputs["ipLearning"] = state ? state.ipLearning : undefined;
            resourceInputs["ipv6McastAllow"] = state ? state.ipv6McastAllow : undefined;
            resourceInputs["limitIpLearnToSubnets"] = state ? state.limitIpLearnToSubnets : undefined;
            resourceInputs["llAddr"] = state ? state.llAddr : undefined;
            resourceInputs["mac"] = state ? state.mac : undefined;
            resourceInputs["mcastAllow"] = state ? state.mcastAllow : undefined;
            resourceInputs["multiDstPktAct"] = state ? state.multiDstPktAct : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nameAlias"] = state ? state.nameAlias : undefined;
            resourceInputs["optimizeWanBandwidth"] = state ? state.optimizeWanBandwidth : undefined;
            resourceInputs["relationFvRsAbdPolMonPol"] = state ? state.relationFvRsAbdPolMonPol : undefined;
            resourceInputs["relationFvRsBdFloodTos"] = state ? state.relationFvRsBdFloodTos : undefined;
            resourceInputs["relationFvRsBdToEpRet"] = state ? state.relationFvRsBdToEpRet : undefined;
            resourceInputs["relationFvRsBdToFhs"] = state ? state.relationFvRsBdToFhs : undefined;
            resourceInputs["relationFvRsBdToNdP"] = state ? state.relationFvRsBdToNdP : undefined;
            resourceInputs["relationFvRsBdToNetflowMonitorPols"] = state ? state.relationFvRsBdToNetflowMonitorPols : undefined;
            resourceInputs["relationFvRsBdToOuts"] = state ? state.relationFvRsBdToOuts : undefined;
            resourceInputs["relationFvRsBdToProfile"] = state ? state.relationFvRsBdToProfile : undefined;
            resourceInputs["relationFvRsBdToRelayP"] = state ? state.relationFvRsBdToRelayP : undefined;
            resourceInputs["relationFvRsCtx"] = state ? state.relationFvRsCtx : undefined;
            resourceInputs["relationFvRsIgmpsn"] = state ? state.relationFvRsIgmpsn : undefined;
            resourceInputs["relationFvRsMldsn"] = state ? state.relationFvRsMldsn : undefined;
            resourceInputs["tenantDn"] = state ? state.tenantDn : undefined;
            resourceInputs["unicastRoute"] = state ? state.unicastRoute : undefined;
            resourceInputs["unkMacUcastAct"] = state ? state.unkMacUcastAct : undefined;
            resourceInputs["unkMcastAct"] = state ? state.unkMcastAct : undefined;
            resourceInputs["v6unkMcastAct"] = state ? state.v6unkMcastAct : undefined;
            resourceInputs["vmac"] = state ? state.vmac : undefined;
        } else {
            const args = argsOrState as BridgeDomainArgs | undefined;
            if ((!args || args.tenantDn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantDn'");
            }
            resourceInputs["annotation"] = args ? args.annotation : undefined;
            resourceInputs["arpFlood"] = args ? args.arpFlood : undefined;
            resourceInputs["bridgeDomainType"] = args ? args.bridgeDomainType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["epClear"] = args ? args.epClear : undefined;
            resourceInputs["epMoveDetectMode"] = args ? args.epMoveDetectMode : undefined;
            resourceInputs["hostBasedRouting"] = args ? args.hostBasedRouting : undefined;
            resourceInputs["intersiteBumTrafficAllow"] = args ? args.intersiteBumTrafficAllow : undefined;
            resourceInputs["intersiteL2Stretch"] = args ? args.intersiteL2Stretch : undefined;
            resourceInputs["ipLearning"] = args ? args.ipLearning : undefined;
            resourceInputs["ipv6McastAllow"] = args ? args.ipv6McastAllow : undefined;
            resourceInputs["limitIpLearnToSubnets"] = args ? args.limitIpLearnToSubnets : undefined;
            resourceInputs["llAddr"] = args ? args.llAddr : undefined;
            resourceInputs["mac"] = args ? args.mac : undefined;
            resourceInputs["mcastAllow"] = args ? args.mcastAllow : undefined;
            resourceInputs["multiDstPktAct"] = args ? args.multiDstPktAct : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nameAlias"] = args ? args.nameAlias : undefined;
            resourceInputs["optimizeWanBandwidth"] = args ? args.optimizeWanBandwidth : undefined;
            resourceInputs["relationFvRsAbdPolMonPol"] = args ? args.relationFvRsAbdPolMonPol : undefined;
            resourceInputs["relationFvRsBdFloodTos"] = args ? args.relationFvRsBdFloodTos : undefined;
            resourceInputs["relationFvRsBdToEpRet"] = args ? args.relationFvRsBdToEpRet : undefined;
            resourceInputs["relationFvRsBdToFhs"] = args ? args.relationFvRsBdToFhs : undefined;
            resourceInputs["relationFvRsBdToNdP"] = args ? args.relationFvRsBdToNdP : undefined;
            resourceInputs["relationFvRsBdToNetflowMonitorPols"] = args ? args.relationFvRsBdToNetflowMonitorPols : undefined;
            resourceInputs["relationFvRsBdToOuts"] = args ? args.relationFvRsBdToOuts : undefined;
            resourceInputs["relationFvRsBdToProfile"] = args ? args.relationFvRsBdToProfile : undefined;
            resourceInputs["relationFvRsBdToRelayP"] = args ? args.relationFvRsBdToRelayP : undefined;
            resourceInputs["relationFvRsCtx"] = args ? args.relationFvRsCtx : undefined;
            resourceInputs["relationFvRsIgmpsn"] = args ? args.relationFvRsIgmpsn : undefined;
            resourceInputs["relationFvRsMldsn"] = args ? args.relationFvRsMldsn : undefined;
            resourceInputs["tenantDn"] = args ? args.tenantDn : undefined;
            resourceInputs["unicastRoute"] = args ? args.unicastRoute : undefined;
            resourceInputs["unkMacUcastAct"] = args ? args.unkMacUcastAct : undefined;
            resourceInputs["unkMcastAct"] = args ? args.unkMcastAct : undefined;
            resourceInputs["v6unkMcastAct"] = args ? args.v6unkMcastAct : undefined;
            resourceInputs["vmac"] = args ? args.vmac : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BridgeDomain.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BridgeDomain resources.
 */
export interface BridgeDomainState {
    annotation?: pulumi.Input<string>;
    arpFlood?: pulumi.Input<string>;
    bridgeDomainType?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    epClear?: pulumi.Input<string>;
    epMoveDetectMode?: pulumi.Input<string>;
    hostBasedRouting?: pulumi.Input<string>;
    intersiteBumTrafficAllow?: pulumi.Input<string>;
    intersiteL2Stretch?: pulumi.Input<string>;
    ipLearning?: pulumi.Input<string>;
    ipv6McastAllow?: pulumi.Input<string>;
    limitIpLearnToSubnets?: pulumi.Input<string>;
    llAddr?: pulumi.Input<string>;
    mac?: pulumi.Input<string>;
    mcastAllow?: pulumi.Input<string>;
    multiDstPktAct?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    optimizeWanBandwidth?: pulumi.Input<string>;
    relationFvRsAbdPolMonPol?: pulumi.Input<string>;
    relationFvRsBdFloodTos?: pulumi.Input<pulumi.Input<string>[]>;
    relationFvRsBdToEpRet?: pulumi.Input<string>;
    relationFvRsBdToFhs?: pulumi.Input<string>;
    relationFvRsBdToNdP?: pulumi.Input<string>;
    relationFvRsBdToNetflowMonitorPols?: pulumi.Input<pulumi.Input<inputs.BridgeDomainRelationFvRsBdToNetflowMonitorPol>[]>;
    relationFvRsBdToOuts?: pulumi.Input<pulumi.Input<string>[]>;
    relationFvRsBdToProfile?: pulumi.Input<string>;
    relationFvRsBdToRelayP?: pulumi.Input<string>;
    relationFvRsCtx?: pulumi.Input<string>;
    relationFvRsIgmpsn?: pulumi.Input<string>;
    relationFvRsMldsn?: pulumi.Input<string>;
    tenantDn?: pulumi.Input<string>;
    unicastRoute?: pulumi.Input<string>;
    unkMacUcastAct?: pulumi.Input<string>;
    unkMcastAct?: pulumi.Input<string>;
    v6unkMcastAct?: pulumi.Input<string>;
    vmac?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BridgeDomain resource.
 */
export interface BridgeDomainArgs {
    annotation?: pulumi.Input<string>;
    arpFlood?: pulumi.Input<string>;
    bridgeDomainType?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    epClear?: pulumi.Input<string>;
    epMoveDetectMode?: pulumi.Input<string>;
    hostBasedRouting?: pulumi.Input<string>;
    intersiteBumTrafficAllow?: pulumi.Input<string>;
    intersiteL2Stretch?: pulumi.Input<string>;
    ipLearning?: pulumi.Input<string>;
    ipv6McastAllow?: pulumi.Input<string>;
    limitIpLearnToSubnets?: pulumi.Input<string>;
    llAddr?: pulumi.Input<string>;
    mac?: pulumi.Input<string>;
    mcastAllow?: pulumi.Input<string>;
    multiDstPktAct?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    optimizeWanBandwidth?: pulumi.Input<string>;
    relationFvRsAbdPolMonPol?: pulumi.Input<string>;
    relationFvRsBdFloodTos?: pulumi.Input<pulumi.Input<string>[]>;
    relationFvRsBdToEpRet?: pulumi.Input<string>;
    relationFvRsBdToFhs?: pulumi.Input<string>;
    relationFvRsBdToNdP?: pulumi.Input<string>;
    relationFvRsBdToNetflowMonitorPols?: pulumi.Input<pulumi.Input<inputs.BridgeDomainRelationFvRsBdToNetflowMonitorPol>[]>;
    relationFvRsBdToOuts?: pulumi.Input<pulumi.Input<string>[]>;
    relationFvRsBdToProfile?: pulumi.Input<string>;
    relationFvRsBdToRelayP?: pulumi.Input<string>;
    relationFvRsCtx?: pulumi.Input<string>;
    relationFvRsIgmpsn?: pulumi.Input<string>;
    relationFvRsMldsn?: pulumi.Input<string>;
    tenantDn: pulumi.Input<string>;
    unicastRoute?: pulumi.Input<string>;
    unkMacUcastAct?: pulumi.Input<string>;
    unkMcastAct?: pulumi.Input<string>;
    v6unkMcastAct?: pulumi.Input<string>;
    vmac?: pulumi.Input<string>;
}
