// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getNetflowMonitorPolicy(args: GetNetflowMonitorPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetNetflowMonitorPolicyResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aci:index/getNetflowMonitorPolicy:getNetflowMonitorPolicy", {
        "name": args.name,
        "parentDn": args.parentDn,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNetflowMonitorPolicy.
 */
export interface GetNetflowMonitorPolicyArgs {
    name: string;
    parentDn?: string;
}

/**
 * A collection of values returned by getNetflowMonitorPolicy.
 */
export interface GetNetflowMonitorPolicyResult {
    readonly annotation: string;
    readonly annotations: outputs.GetNetflowMonitorPolicyAnnotation[];
    readonly description: string;
    readonly id: string;
    readonly name: string;
    readonly nameAlias: string;
    readonly ownerKey: string;
    readonly ownerTag: string;
    readonly parentDn?: string;
    readonly relationToNetflowExporters: outputs.GetNetflowMonitorPolicyRelationToNetflowExporter[];
    readonly relationToNetflowRecords: outputs.GetNetflowMonitorPolicyRelationToNetflowRecord[];
    readonly tags: outputs.GetNetflowMonitorPolicyTag[];
}
export function getNetflowMonitorPolicyOutput(args: GetNetflowMonitorPolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNetflowMonitorPolicyResult> {
    return pulumi.output(args).apply((a: any) => getNetflowMonitorPolicy(a, opts))
}

/**
 * A collection of arguments for invoking getNetflowMonitorPolicy.
 */
export interface GetNetflowMonitorPolicyOutputArgs {
    name: pulumi.Input<string>;
    parentDn?: pulumi.Input<string>;
}
