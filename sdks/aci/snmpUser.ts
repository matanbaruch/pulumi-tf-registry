// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SnmpUser extends pulumi.CustomResource {
    /**
     * Get an existing SnmpUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnmpUserState, opts?: pulumi.CustomResourceOptions): SnmpUser {
        return new SnmpUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aci:index/snmpUser:SnmpUser';

    /**
     * Returns true if the given object is an instance of SnmpUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SnmpUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SnmpUser.__pulumiType;
    }

    public readonly annotation!: pulumi.Output<string>;
    public readonly authorizationKey!: pulumi.Output<string>;
    public readonly authorizationType!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly nameAlias!: pulumi.Output<string>;
    public readonly privacyKey!: pulumi.Output<string>;
    public readonly privacyType!: pulumi.Output<string>;
    public readonly snmpPolicyDn!: pulumi.Output<string>;

    /**
     * Create a SnmpUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SnmpUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnmpUserArgs | SnmpUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnmpUserState | undefined;
            resourceInputs["annotation"] = state ? state.annotation : undefined;
            resourceInputs["authorizationKey"] = state ? state.authorizationKey : undefined;
            resourceInputs["authorizationType"] = state ? state.authorizationType : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nameAlias"] = state ? state.nameAlias : undefined;
            resourceInputs["privacyKey"] = state ? state.privacyKey : undefined;
            resourceInputs["privacyType"] = state ? state.privacyType : undefined;
            resourceInputs["snmpPolicyDn"] = state ? state.snmpPolicyDn : undefined;
        } else {
            const args = argsOrState as SnmpUserArgs | undefined;
            if ((!args || args.authorizationKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authorizationKey'");
            }
            if ((!args || args.authorizationType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authorizationType'");
            }
            if ((!args || args.snmpPolicyDn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'snmpPolicyDn'");
            }
            resourceInputs["annotation"] = args ? args.annotation : undefined;
            resourceInputs["authorizationKey"] = args?.authorizationKey ? pulumi.secret(args.authorizationKey) : undefined;
            resourceInputs["authorizationType"] = args ? args.authorizationType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nameAlias"] = args ? args.nameAlias : undefined;
            resourceInputs["privacyKey"] = args?.privacyKey ? pulumi.secret(args.privacyKey) : undefined;
            resourceInputs["privacyType"] = args ? args.privacyType : undefined;
            resourceInputs["snmpPolicyDn"] = args ? args.snmpPolicyDn : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["authorizationKey", "privacyKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SnmpUser.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SnmpUser resources.
 */
export interface SnmpUserState {
    annotation?: pulumi.Input<string>;
    authorizationKey?: pulumi.Input<string>;
    authorizationType?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    privacyKey?: pulumi.Input<string>;
    privacyType?: pulumi.Input<string>;
    snmpPolicyDn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SnmpUser resource.
 */
export interface SnmpUserArgs {
    annotation?: pulumi.Input<string>;
    authorizationKey: pulumi.Input<string>;
    authorizationType: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    privacyKey?: pulumi.Input<string>;
    privacyType?: pulumi.Input<string>;
    snmpPolicyDn: pulumi.Input<string>;
}
