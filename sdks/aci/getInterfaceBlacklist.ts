// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getInterfaceBlacklist(args: GetInterfaceBlacklistArgs, opts?: pulumi.InvokeOptions): Promise<GetInterfaceBlacklistResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aci:index/getInterfaceBlacklist:getInterfaceBlacklist", {
        "annotation": args.annotation,
        "description": args.description,
        "fexId": args.fexId,
        "id": args.id,
        "interface": args.interface,
        "nodeId": args.nodeId,
        "podId": args.podId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getInterfaceBlacklist.
 */
export interface GetInterfaceBlacklistArgs {
    annotation?: string;
    description?: string;
    fexId?: number;
    id?: string;
    interface: string;
    nodeId: number;
    podId: number;
}

/**
 * A collection of values returned by getInterfaceBlacklist.
 */
export interface GetInterfaceBlacklistResult {
    readonly annotation: string;
    readonly description: string;
    readonly fexId?: number;
    readonly id: string;
    readonly interface: string;
    readonly nodeId: number;
    readonly podId: number;
}
export function getInterfaceBlacklistOutput(args: GetInterfaceBlacklistOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetInterfaceBlacklistResult> {
    return pulumi.output(args).apply((a: any) => getInterfaceBlacklist(a, opts))
}

/**
 * A collection of arguments for invoking getInterfaceBlacklist.
 */
export interface GetInterfaceBlacklistOutputArgs {
    annotation?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    fexId?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    interface: pulumi.Input<string>;
    nodeId: pulumi.Input<number>;
    podId: pulumi.Input<number>;
}
