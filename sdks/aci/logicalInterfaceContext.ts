// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LogicalInterfaceContext extends pulumi.CustomResource {
    /**
     * Get an existing LogicalInterfaceContext resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogicalInterfaceContextState, opts?: pulumi.CustomResourceOptions): LogicalInterfaceContext {
        return new LogicalInterfaceContext(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aci:index/logicalInterfaceContext:LogicalInterfaceContext';

    /**
     * Returns true if the given object is an instance of LogicalInterfaceContext.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogicalInterfaceContext {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogicalInterfaceContext.__pulumiType;
    }

    public readonly annotation!: pulumi.Output<string>;
    public readonly connNameOrLbl!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly l3Dest!: pulumi.Output<string>;
    public readonly logicalDeviceContextDn!: pulumi.Output<string>;
    public readonly nameAlias!: pulumi.Output<string>;
    public readonly permitLog!: pulumi.Output<string>;
    public readonly relationVnsRsLIfCtxToBd!: pulumi.Output<string | undefined>;
    public readonly relationVnsRsLIfCtxToCustQosPol!: pulumi.Output<string | undefined>;
    public readonly relationVnsRsLIfCtxToInstP!: pulumi.Output<string>;
    public readonly relationVnsRsLIfCtxToLIf!: pulumi.Output<string | undefined>;
    public readonly relationVnsRsLIfCtxToOut!: pulumi.Output<string | undefined>;
    public readonly relationVnsRsLIfCtxToOutDef!: pulumi.Output<string>;
    public readonly relationVnsRsLIfCtxToSvcEPgPol!: pulumi.Output<string | undefined>;
    public readonly relationVnsRsLIfCtxToSvcRedirectPol!: pulumi.Output<string | undefined>;

    /**
     * Create a LogicalInterfaceContext resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogicalInterfaceContextArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogicalInterfaceContextArgs | LogicalInterfaceContextState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogicalInterfaceContextState | undefined;
            resourceInputs["annotation"] = state ? state.annotation : undefined;
            resourceInputs["connNameOrLbl"] = state ? state.connNameOrLbl : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["l3Dest"] = state ? state.l3Dest : undefined;
            resourceInputs["logicalDeviceContextDn"] = state ? state.logicalDeviceContextDn : undefined;
            resourceInputs["nameAlias"] = state ? state.nameAlias : undefined;
            resourceInputs["permitLog"] = state ? state.permitLog : undefined;
            resourceInputs["relationVnsRsLIfCtxToBd"] = state ? state.relationVnsRsLIfCtxToBd : undefined;
            resourceInputs["relationVnsRsLIfCtxToCustQosPol"] = state ? state.relationVnsRsLIfCtxToCustQosPol : undefined;
            resourceInputs["relationVnsRsLIfCtxToInstP"] = state ? state.relationVnsRsLIfCtxToInstP : undefined;
            resourceInputs["relationVnsRsLIfCtxToLIf"] = state ? state.relationVnsRsLIfCtxToLIf : undefined;
            resourceInputs["relationVnsRsLIfCtxToOut"] = state ? state.relationVnsRsLIfCtxToOut : undefined;
            resourceInputs["relationVnsRsLIfCtxToOutDef"] = state ? state.relationVnsRsLIfCtxToOutDef : undefined;
            resourceInputs["relationVnsRsLIfCtxToSvcEPgPol"] = state ? state.relationVnsRsLIfCtxToSvcEPgPol : undefined;
            resourceInputs["relationVnsRsLIfCtxToSvcRedirectPol"] = state ? state.relationVnsRsLIfCtxToSvcRedirectPol : undefined;
        } else {
            const args = argsOrState as LogicalInterfaceContextArgs | undefined;
            if ((!args || args.connNameOrLbl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connNameOrLbl'");
            }
            if ((!args || args.logicalDeviceContextDn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logicalDeviceContextDn'");
            }
            resourceInputs["annotation"] = args ? args.annotation : undefined;
            resourceInputs["connNameOrLbl"] = args ? args.connNameOrLbl : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["l3Dest"] = args ? args.l3Dest : undefined;
            resourceInputs["logicalDeviceContextDn"] = args ? args.logicalDeviceContextDn : undefined;
            resourceInputs["nameAlias"] = args ? args.nameAlias : undefined;
            resourceInputs["permitLog"] = args ? args.permitLog : undefined;
            resourceInputs["relationVnsRsLIfCtxToBd"] = args ? args.relationVnsRsLIfCtxToBd : undefined;
            resourceInputs["relationVnsRsLIfCtxToCustQosPol"] = args ? args.relationVnsRsLIfCtxToCustQosPol : undefined;
            resourceInputs["relationVnsRsLIfCtxToInstP"] = args ? args.relationVnsRsLIfCtxToInstP : undefined;
            resourceInputs["relationVnsRsLIfCtxToLIf"] = args ? args.relationVnsRsLIfCtxToLIf : undefined;
            resourceInputs["relationVnsRsLIfCtxToOut"] = args ? args.relationVnsRsLIfCtxToOut : undefined;
            resourceInputs["relationVnsRsLIfCtxToOutDef"] = args ? args.relationVnsRsLIfCtxToOutDef : undefined;
            resourceInputs["relationVnsRsLIfCtxToSvcEPgPol"] = args ? args.relationVnsRsLIfCtxToSvcEPgPol : undefined;
            resourceInputs["relationVnsRsLIfCtxToSvcRedirectPol"] = args ? args.relationVnsRsLIfCtxToSvcRedirectPol : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogicalInterfaceContext.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LogicalInterfaceContext resources.
 */
export interface LogicalInterfaceContextState {
    annotation?: pulumi.Input<string>;
    connNameOrLbl?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    l3Dest?: pulumi.Input<string>;
    logicalDeviceContextDn?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    permitLog?: pulumi.Input<string>;
    relationVnsRsLIfCtxToBd?: pulumi.Input<string>;
    relationVnsRsLIfCtxToCustQosPol?: pulumi.Input<string>;
    relationVnsRsLIfCtxToInstP?: pulumi.Input<string>;
    relationVnsRsLIfCtxToLIf?: pulumi.Input<string>;
    relationVnsRsLIfCtxToOut?: pulumi.Input<string>;
    relationVnsRsLIfCtxToOutDef?: pulumi.Input<string>;
    relationVnsRsLIfCtxToSvcEPgPol?: pulumi.Input<string>;
    relationVnsRsLIfCtxToSvcRedirectPol?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LogicalInterfaceContext resource.
 */
export interface LogicalInterfaceContextArgs {
    annotation?: pulumi.Input<string>;
    connNameOrLbl: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    l3Dest?: pulumi.Input<string>;
    logicalDeviceContextDn: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    permitLog?: pulumi.Input<string>;
    relationVnsRsLIfCtxToBd?: pulumi.Input<string>;
    relationVnsRsLIfCtxToCustQosPol?: pulumi.Input<string>;
    relationVnsRsLIfCtxToInstP?: pulumi.Input<string>;
    relationVnsRsLIfCtxToLIf?: pulumi.Input<string>;
    relationVnsRsLIfCtxToOut?: pulumi.Input<string>;
    relationVnsRsLIfCtxToOutDef?: pulumi.Input<string>;
    relationVnsRsLIfCtxToSvcEPgPol?: pulumi.Input<string>;
    relationVnsRsLIfCtxToSvcRedirectPol?: pulumi.Input<string>;
}
