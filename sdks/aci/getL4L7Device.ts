// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getL4L7Device(args: GetL4L7DeviceArgs, opts?: pulumi.InvokeOptions): Promise<GetL4L7DeviceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aci:index/getL4L7Device:getL4L7Device", {
        "active": args.active,
        "annotation": args.annotation,
        "contextAware": args.contextAware,
        "description": args.description,
        "deviceType": args.deviceType,
        "functionType": args.functionType,
        "id": args.id,
        "isCopy": args.isCopy,
        "managed": args.managed,
        "mode": args.mode,
        "name": args.name,
        "nameAlias": args.nameAlias,
        "promiscuousMode": args.promiscuousMode,
        "relationVnsRsAlDevToDomP": args.relationVnsRsAlDevToDomP,
        "relationVnsRsAlDevToPhysDomP": args.relationVnsRsAlDevToPhysDomP,
        "serviceType": args.serviceType,
        "tenantDn": args.tenantDn,
        "trunking": args.trunking,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getL4L7Device.
 */
export interface GetL4L7DeviceArgs {
    active?: string;
    annotation?: string;
    contextAware?: string;
    description?: string;
    deviceType?: string;
    functionType?: string;
    id?: string;
    isCopy?: string;
    managed?: string;
    mode?: string;
    name: string;
    nameAlias?: string;
    promiscuousMode?: string;
    relationVnsRsAlDevToDomP?: inputs.GetL4L7DeviceRelationVnsRsAlDevToDomP;
    relationVnsRsAlDevToPhysDomP?: string;
    serviceType?: string;
    tenantDn: string;
    trunking?: string;
}

/**
 * A collection of values returned by getL4L7Device.
 */
export interface GetL4L7DeviceResult {
    readonly active: string;
    readonly annotation: string;
    readonly contextAware: string;
    readonly description: string;
    readonly deviceType: string;
    readonly functionType: string;
    readonly id: string;
    readonly isCopy: string;
    readonly managed: string;
    readonly mode: string;
    readonly name: string;
    readonly nameAlias: string;
    readonly promiscuousMode: string;
    readonly relationVnsRsAlDevToDomP?: outputs.GetL4L7DeviceRelationVnsRsAlDevToDomP;
    readonly relationVnsRsAlDevToPhysDomP?: string;
    readonly serviceType: string;
    readonly tenantDn: string;
    readonly trunking: string;
}
export function getL4L7DeviceOutput(args: GetL4L7DeviceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetL4L7DeviceResult> {
    return pulumi.output(args).apply((a: any) => getL4L7Device(a, opts))
}

/**
 * A collection of arguments for invoking getL4L7Device.
 */
export interface GetL4L7DeviceOutputArgs {
    active?: pulumi.Input<string>;
    annotation?: pulumi.Input<string>;
    contextAware?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    deviceType?: pulumi.Input<string>;
    functionType?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    isCopy?: pulumi.Input<string>;
    managed?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    promiscuousMode?: pulumi.Input<string>;
    relationVnsRsAlDevToDomP?: pulumi.Input<inputs.GetL4L7DeviceRelationVnsRsAlDevToDomPArgs>;
    relationVnsRsAlDevToPhysDomP?: pulumi.Input<string>;
    serviceType?: pulumi.Input<string>;
    tenantDn: pulumi.Input<string>;
    trunking?: pulumi.Input<string>;
}
