// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getL3outFloatingSvi(args: GetL3outFloatingSviArgs, opts?: pulumi.InvokeOptions): Promise<GetL3outFloatingSviResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aci:index/getL3outFloatingSvi:getL3outFloatingSvi", {
        "annotation": args.annotation,
        "description": args.description,
        "encap": args.encap,
        "id": args.id,
        "logicalInterfaceProfileDn": args.logicalInterfaceProfileDn,
        "nodeDn": args.nodeDn,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getL3outFloatingSvi.
 */
export interface GetL3outFloatingSviArgs {
    annotation?: string;
    description?: string;
    encap: string;
    id?: string;
    logicalInterfaceProfileDn: string;
    nodeDn: string;
}

/**
 * A collection of values returned by getL3outFloatingSvi.
 */
export interface GetL3outFloatingSviResult {
    readonly addr: string;
    readonly annotation: string;
    readonly autostate: string;
    readonly description: string;
    readonly encap: string;
    readonly encapScope: string;
    readonly id: string;
    readonly ifInstT: string;
    readonly ipv6Dad: string;
    readonly llAddr: string;
    readonly logicalInterfaceProfileDn: string;
    readonly mac: string;
    readonly mode: string;
    readonly mtu: string;
    readonly nodeDn: string;
    readonly relationL3extRsDynPathAtts: outputs.GetL3outFloatingSviRelationL3extRsDynPathAtt[];
    readonly targetDscp: string;
}
export function getL3outFloatingSviOutput(args: GetL3outFloatingSviOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetL3outFloatingSviResult> {
    return pulumi.output(args).apply((a: any) => getL3outFloatingSvi(a, opts))
}

/**
 * A collection of arguments for invoking getL3outFloatingSvi.
 */
export interface GetL3outFloatingSviOutputArgs {
    annotation?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    encap: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    logicalInterfaceProfileDn: pulumi.Input<string>;
    nodeDn: pulumi.Input<string>;
}
