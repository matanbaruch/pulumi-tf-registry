// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getIpSlaMonitoringPolicy(args: GetIpSlaMonitoringPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetIpSlaMonitoringPolicyResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aci:index/getIpSlaMonitoringPolicy:getIpSlaMonitoringPolicy", {
        "annotation": args.annotation,
        "description": args.description,
        "httpUri": args.httpUri,
        "httpVersion": args.httpVersion,
        "id": args.id,
        "name": args.name,
        "nameAlias": args.nameAlias,
        "requestDataSize": args.requestDataSize,
        "slaDetectMultiplier": args.slaDetectMultiplier,
        "slaFrequency": args.slaFrequency,
        "slaPort": args.slaPort,
        "slaType": args.slaType,
        "tenantDn": args.tenantDn,
        "threshold": args.threshold,
        "timeout": args.timeout,
        "trafficClassValue": args.trafficClassValue,
        "typeOfService": args.typeOfService,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIpSlaMonitoringPolicy.
 */
export interface GetIpSlaMonitoringPolicyArgs {
    annotation?: string;
    description?: string;
    httpUri?: string;
    httpVersion?: string;
    id?: string;
    name: string;
    nameAlias?: string;
    requestDataSize?: string;
    slaDetectMultiplier?: string;
    slaFrequency?: string;
    slaPort?: string;
    slaType?: string;
    tenantDn: string;
    threshold?: string;
    timeout?: string;
    trafficClassValue?: string;
    typeOfService?: string;
}

/**
 * A collection of values returned by getIpSlaMonitoringPolicy.
 */
export interface GetIpSlaMonitoringPolicyResult {
    readonly annotation: string;
    readonly description: string;
    readonly httpUri: string;
    readonly httpVersion: string;
    readonly id: string;
    readonly name: string;
    readonly nameAlias: string;
    readonly requestDataSize: string;
    readonly slaDetectMultiplier: string;
    readonly slaFrequency: string;
    readonly slaPort: string;
    readonly slaType: string;
    readonly tenantDn: string;
    readonly threshold: string;
    readonly timeout: string;
    readonly trafficClassValue: string;
    readonly typeOfService: string;
}
export function getIpSlaMonitoringPolicyOutput(args: GetIpSlaMonitoringPolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIpSlaMonitoringPolicyResult> {
    return pulumi.output(args).apply((a: any) => getIpSlaMonitoringPolicy(a, opts))
}

/**
 * A collection of arguments for invoking getIpSlaMonitoringPolicy.
 */
export interface GetIpSlaMonitoringPolicyOutputArgs {
    annotation?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    httpUri?: pulumi.Input<string>;
    httpVersion?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    requestDataSize?: pulumi.Input<string>;
    slaDetectMultiplier?: pulumi.Input<string>;
    slaFrequency?: pulumi.Input<string>;
    slaPort?: pulumi.Input<string>;
    slaType?: pulumi.Input<string>;
    tenantDn: pulumi.Input<string>;
    threshold?: pulumi.Input<string>;
    timeout?: pulumi.Input<string>;
    trafficClassValue?: pulumi.Input<string>;
    typeOfService?: pulumi.Input<string>;
}
