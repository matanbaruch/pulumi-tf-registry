// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class L3outStaticRoute extends pulumi.CustomResource {
    /**
     * Get an existing L3outStaticRoute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: L3outStaticRouteState, opts?: pulumi.CustomResourceOptions): L3outStaticRoute {
        return new L3outStaticRoute(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aci:index/l3outStaticRoute:L3outStaticRoute';

    /**
     * Returns true if the given object is an instance of L3outStaticRoute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is L3outStaticRoute {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === L3outStaticRoute.__pulumiType;
    }

    public readonly aggregate!: pulumi.Output<string>;
    public readonly annotation!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly fabricNodeDn!: pulumi.Output<string>;
    public readonly ip!: pulumi.Output<string>;
    public readonly nameAlias!: pulumi.Output<string>;
    public readonly pref!: pulumi.Output<string>;
    public readonly relationIpRsRouteTrack!: pulumi.Output<string | undefined>;
    public readonly rtCtrl!: pulumi.Output<string>;

    /**
     * Create a L3outStaticRoute resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: L3outStaticRouteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: L3outStaticRouteArgs | L3outStaticRouteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as L3outStaticRouteState | undefined;
            resourceInputs["aggregate"] = state ? state.aggregate : undefined;
            resourceInputs["annotation"] = state ? state.annotation : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["fabricNodeDn"] = state ? state.fabricNodeDn : undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["nameAlias"] = state ? state.nameAlias : undefined;
            resourceInputs["pref"] = state ? state.pref : undefined;
            resourceInputs["relationIpRsRouteTrack"] = state ? state.relationIpRsRouteTrack : undefined;
            resourceInputs["rtCtrl"] = state ? state.rtCtrl : undefined;
        } else {
            const args = argsOrState as L3outStaticRouteArgs | undefined;
            if ((!args || args.fabricNodeDn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fabricNodeDn'");
            }
            if ((!args || args.ip === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ip'");
            }
            resourceInputs["aggregate"] = args ? args.aggregate : undefined;
            resourceInputs["annotation"] = args ? args.annotation : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["fabricNodeDn"] = args ? args.fabricNodeDn : undefined;
            resourceInputs["ip"] = args ? args.ip : undefined;
            resourceInputs["nameAlias"] = args ? args.nameAlias : undefined;
            resourceInputs["pref"] = args ? args.pref : undefined;
            resourceInputs["relationIpRsRouteTrack"] = args ? args.relationIpRsRouteTrack : undefined;
            resourceInputs["rtCtrl"] = args ? args.rtCtrl : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(L3outStaticRoute.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering L3outStaticRoute resources.
 */
export interface L3outStaticRouteState {
    aggregate?: pulumi.Input<string>;
    annotation?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    fabricNodeDn?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    pref?: pulumi.Input<string>;
    relationIpRsRouteTrack?: pulumi.Input<string>;
    rtCtrl?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a L3outStaticRoute resource.
 */
export interface L3outStaticRouteArgs {
    aggregate?: pulumi.Input<string>;
    annotation?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    fabricNodeDn: pulumi.Input<string>;
    ip: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    pref?: pulumi.Input<string>;
    relationIpRsRouteTrack?: pulumi.Input<string>;
    rtCtrl?: pulumi.Input<string>;
}
