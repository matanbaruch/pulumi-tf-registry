// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DuoProviderGroup extends pulumi.CustomResource {
    /**
     * Get an existing DuoProviderGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DuoProviderGroupState, opts?: pulumi.CustomResourceOptions): DuoProviderGroup {
        return new DuoProviderGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aci:index/duoProviderGroup:DuoProviderGroup';

    /**
     * Returns true if the given object is an instance of DuoProviderGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DuoProviderGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DuoProviderGroup.__pulumiType;
    }

    public readonly annotation!: pulumi.Output<string>;
    public readonly authChoice!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly ldapGroupMapRef!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly nameAlias!: pulumi.Output<string>;
    public readonly providerType!: pulumi.Output<string>;
    public readonly secFacAuthMethods!: pulumi.Output<string[]>;

    /**
     * Create a DuoProviderGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DuoProviderGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DuoProviderGroupArgs | DuoProviderGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DuoProviderGroupState | undefined;
            resourceInputs["annotation"] = state ? state.annotation : undefined;
            resourceInputs["authChoice"] = state ? state.authChoice : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["ldapGroupMapRef"] = state ? state.ldapGroupMapRef : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nameAlias"] = state ? state.nameAlias : undefined;
            resourceInputs["providerType"] = state ? state.providerType : undefined;
            resourceInputs["secFacAuthMethods"] = state ? state.secFacAuthMethods : undefined;
        } else {
            const args = argsOrState as DuoProviderGroupArgs | undefined;
            resourceInputs["annotation"] = args ? args.annotation : undefined;
            resourceInputs["authChoice"] = args ? args.authChoice : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["ldapGroupMapRef"] = args ? args.ldapGroupMapRef : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nameAlias"] = args ? args.nameAlias : undefined;
            resourceInputs["providerType"] = args ? args.providerType : undefined;
            resourceInputs["secFacAuthMethods"] = args ? args.secFacAuthMethods : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DuoProviderGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DuoProviderGroup resources.
 */
export interface DuoProviderGroupState {
    annotation?: pulumi.Input<string>;
    authChoice?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    ldapGroupMapRef?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    providerType?: pulumi.Input<string>;
    secFacAuthMethods?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a DuoProviderGroup resource.
 */
export interface DuoProviderGroupArgs {
    annotation?: pulumi.Input<string>;
    authChoice?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    ldapGroupMapRef?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    providerType?: pulumi.Input<string>;
    secFacAuthMethods?: pulumi.Input<pulumi.Input<string>[]>;
}
