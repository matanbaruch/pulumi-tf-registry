// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class L3outOspfExternalPolicy extends pulumi.CustomResource {
    /**
     * Get an existing L3outOspfExternalPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: L3outOspfExternalPolicyState, opts?: pulumi.CustomResourceOptions): L3outOspfExternalPolicy {
        return new L3outOspfExternalPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aci:index/l3outOspfExternalPolicy:L3outOspfExternalPolicy';

    /**
     * Returns true if the given object is an instance of L3outOspfExternalPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is L3outOspfExternalPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === L3outOspfExternalPolicy.__pulumiType;
    }

    public readonly annotation!: pulumi.Output<string>;
    public readonly areaCost!: pulumi.Output<string>;
    public readonly areaCtrls!: pulumi.Output<string[]>;
    public readonly areaId!: pulumi.Output<string>;
    public readonly areaType!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly l3OutsideDn!: pulumi.Output<string>;
    public readonly multipodInternal!: pulumi.Output<string>;
    public readonly nameAlias!: pulumi.Output<string>;

    /**
     * Create a L3outOspfExternalPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: L3outOspfExternalPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: L3outOspfExternalPolicyArgs | L3outOspfExternalPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as L3outOspfExternalPolicyState | undefined;
            resourceInputs["annotation"] = state ? state.annotation : undefined;
            resourceInputs["areaCost"] = state ? state.areaCost : undefined;
            resourceInputs["areaCtrls"] = state ? state.areaCtrls : undefined;
            resourceInputs["areaId"] = state ? state.areaId : undefined;
            resourceInputs["areaType"] = state ? state.areaType : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["l3OutsideDn"] = state ? state.l3OutsideDn : undefined;
            resourceInputs["multipodInternal"] = state ? state.multipodInternal : undefined;
            resourceInputs["nameAlias"] = state ? state.nameAlias : undefined;
        } else {
            const args = argsOrState as L3outOspfExternalPolicyArgs | undefined;
            if ((!args || args.l3OutsideDn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'l3OutsideDn'");
            }
            resourceInputs["annotation"] = args ? args.annotation : undefined;
            resourceInputs["areaCost"] = args ? args.areaCost : undefined;
            resourceInputs["areaCtrls"] = args ? args.areaCtrls : undefined;
            resourceInputs["areaId"] = args ? args.areaId : undefined;
            resourceInputs["areaType"] = args ? args.areaType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["l3OutsideDn"] = args ? args.l3OutsideDn : undefined;
            resourceInputs["multipodInternal"] = args ? args.multipodInternal : undefined;
            resourceInputs["nameAlias"] = args ? args.nameAlias : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(L3outOspfExternalPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering L3outOspfExternalPolicy resources.
 */
export interface L3outOspfExternalPolicyState {
    annotation?: pulumi.Input<string>;
    areaCost?: pulumi.Input<string>;
    areaCtrls?: pulumi.Input<pulumi.Input<string>[]>;
    areaId?: pulumi.Input<string>;
    areaType?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    l3OutsideDn?: pulumi.Input<string>;
    multipodInternal?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a L3outOspfExternalPolicy resource.
 */
export interface L3outOspfExternalPolicyArgs {
    annotation?: pulumi.Input<string>;
    areaCost?: pulumi.Input<string>;
    areaCtrls?: pulumi.Input<pulumi.Input<string>[]>;
    areaId?: pulumi.Input<string>;
    areaType?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    l3OutsideDn: pulumi.Input<string>;
    multipodInternal?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
}
