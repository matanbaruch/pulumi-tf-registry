// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getCloudSubnet(args: GetCloudSubnetArgs, opts?: pulumi.InvokeOptions): Promise<GetCloudSubnetResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aci:index/getCloudSubnet:getCloudSubnet", {
        "annotation": args.annotation,
        "cloudCidrPoolDn": args.cloudCidrPoolDn,
        "description": args.description,
        "id": args.id,
        "ip": args.ip,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCloudSubnet.
 */
export interface GetCloudSubnetArgs {
    annotation?: string;
    cloudCidrPoolDn: string;
    description?: string;
    id?: string;
    ip: string;
}

/**
 * A collection of values returned by getCloudSubnet.
 */
export interface GetCloudSubnetResult {
    readonly annotation: string;
    readonly cloudCidrPoolDn: string;
    readonly description: string;
    readonly id: string;
    readonly ip: string;
    readonly name: string;
    readonly nameAlias: string;
    readonly relationCloudRsSubnetToCtx: string;
    readonly relationCloudRsSubnetToFlowLog: string;
    readonly scopes: string[];
    readonly subnetGroupLabel: string;
    readonly usage: string;
    readonly zone: string;
}
export function getCloudSubnetOutput(args: GetCloudSubnetOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCloudSubnetResult> {
    return pulumi.output(args).apply((a: any) => getCloudSubnet(a, opts))
}

/**
 * A collection of arguments for invoking getCloudSubnet.
 */
export interface GetCloudSubnetOutputArgs {
    annotation?: pulumi.Input<string>;
    cloudCidrPoolDn: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    ip: pulumi.Input<string>;
}
