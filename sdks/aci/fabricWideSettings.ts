// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class FabricWideSettings extends pulumi.CustomResource {
    /**
     * Get an existing FabricWideSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FabricWideSettingsState, opts?: pulumi.CustomResourceOptions): FabricWideSettings {
        return new FabricWideSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aci:index/fabricWideSettings:FabricWideSettings';

    /**
     * Returns true if the given object is an instance of FabricWideSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FabricWideSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FabricWideSettings.__pulumiType;
    }

    public readonly annotation!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly disableEpDampening!: pulumi.Output<string>;
    public readonly domainValidation!: pulumi.Output<string>;
    public readonly enableMoStreaming!: pulumi.Output<string>;
    public readonly enableRemoteLeafDirect!: pulumi.Output<string>;
    public readonly enforceSubnetCheck!: pulumi.Output<string>;
    public readonly leafOpflexpAuthenticateClients!: pulumi.Output<string>;
    public readonly leafOpflexpUseSsl!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly nameAlias!: pulumi.Output<string>;
    public readonly opflexpAuthenticateClients!: pulumi.Output<string>;
    public readonly opflexpSslProtocols!: pulumi.Output<string[]>;
    public readonly opflexpUseSsl!: pulumi.Output<string>;
    public readonly policySyncNodeBringup!: pulumi.Output<string>;
    public readonly reallocateGipo!: pulumi.Output<string>;
    public readonly restrictInfraVlanTraffic!: pulumi.Output<string>;
    public readonly unicastXrEpLearnDisable!: pulumi.Output<string>;
    public readonly validateOverlappingVlans!: pulumi.Output<string>;

    /**
     * Create a FabricWideSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: FabricWideSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FabricWideSettingsArgs | FabricWideSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FabricWideSettingsState | undefined;
            resourceInputs["annotation"] = state ? state.annotation : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disableEpDampening"] = state ? state.disableEpDampening : undefined;
            resourceInputs["domainValidation"] = state ? state.domainValidation : undefined;
            resourceInputs["enableMoStreaming"] = state ? state.enableMoStreaming : undefined;
            resourceInputs["enableRemoteLeafDirect"] = state ? state.enableRemoteLeafDirect : undefined;
            resourceInputs["enforceSubnetCheck"] = state ? state.enforceSubnetCheck : undefined;
            resourceInputs["leafOpflexpAuthenticateClients"] = state ? state.leafOpflexpAuthenticateClients : undefined;
            resourceInputs["leafOpflexpUseSsl"] = state ? state.leafOpflexpUseSsl : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nameAlias"] = state ? state.nameAlias : undefined;
            resourceInputs["opflexpAuthenticateClients"] = state ? state.opflexpAuthenticateClients : undefined;
            resourceInputs["opflexpSslProtocols"] = state ? state.opflexpSslProtocols : undefined;
            resourceInputs["opflexpUseSsl"] = state ? state.opflexpUseSsl : undefined;
            resourceInputs["policySyncNodeBringup"] = state ? state.policySyncNodeBringup : undefined;
            resourceInputs["reallocateGipo"] = state ? state.reallocateGipo : undefined;
            resourceInputs["restrictInfraVlanTraffic"] = state ? state.restrictInfraVlanTraffic : undefined;
            resourceInputs["unicastXrEpLearnDisable"] = state ? state.unicastXrEpLearnDisable : undefined;
            resourceInputs["validateOverlappingVlans"] = state ? state.validateOverlappingVlans : undefined;
        } else {
            const args = argsOrState as FabricWideSettingsArgs | undefined;
            resourceInputs["annotation"] = args ? args.annotation : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disableEpDampening"] = args ? args.disableEpDampening : undefined;
            resourceInputs["domainValidation"] = args ? args.domainValidation : undefined;
            resourceInputs["enableMoStreaming"] = args ? args.enableMoStreaming : undefined;
            resourceInputs["enableRemoteLeafDirect"] = args ? args.enableRemoteLeafDirect : undefined;
            resourceInputs["enforceSubnetCheck"] = args ? args.enforceSubnetCheck : undefined;
            resourceInputs["leafOpflexpAuthenticateClients"] = args ? args.leafOpflexpAuthenticateClients : undefined;
            resourceInputs["leafOpflexpUseSsl"] = args ? args.leafOpflexpUseSsl : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nameAlias"] = args ? args.nameAlias : undefined;
            resourceInputs["opflexpAuthenticateClients"] = args ? args.opflexpAuthenticateClients : undefined;
            resourceInputs["opflexpSslProtocols"] = args ? args.opflexpSslProtocols : undefined;
            resourceInputs["opflexpUseSsl"] = args ? args.opflexpUseSsl : undefined;
            resourceInputs["policySyncNodeBringup"] = args ? args.policySyncNodeBringup : undefined;
            resourceInputs["reallocateGipo"] = args ? args.reallocateGipo : undefined;
            resourceInputs["restrictInfraVlanTraffic"] = args ? args.restrictInfraVlanTraffic : undefined;
            resourceInputs["unicastXrEpLearnDisable"] = args ? args.unicastXrEpLearnDisable : undefined;
            resourceInputs["validateOverlappingVlans"] = args ? args.validateOverlappingVlans : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FabricWideSettings.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FabricWideSettings resources.
 */
export interface FabricWideSettingsState {
    annotation?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    disableEpDampening?: pulumi.Input<string>;
    domainValidation?: pulumi.Input<string>;
    enableMoStreaming?: pulumi.Input<string>;
    enableRemoteLeafDirect?: pulumi.Input<string>;
    enforceSubnetCheck?: pulumi.Input<string>;
    leafOpflexpAuthenticateClients?: pulumi.Input<string>;
    leafOpflexpUseSsl?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    opflexpAuthenticateClients?: pulumi.Input<string>;
    opflexpSslProtocols?: pulumi.Input<pulumi.Input<string>[]>;
    opflexpUseSsl?: pulumi.Input<string>;
    policySyncNodeBringup?: pulumi.Input<string>;
    reallocateGipo?: pulumi.Input<string>;
    restrictInfraVlanTraffic?: pulumi.Input<string>;
    unicastXrEpLearnDisable?: pulumi.Input<string>;
    validateOverlappingVlans?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FabricWideSettings resource.
 */
export interface FabricWideSettingsArgs {
    annotation?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    disableEpDampening?: pulumi.Input<string>;
    domainValidation?: pulumi.Input<string>;
    enableMoStreaming?: pulumi.Input<string>;
    enableRemoteLeafDirect?: pulumi.Input<string>;
    enforceSubnetCheck?: pulumi.Input<string>;
    leafOpflexpAuthenticateClients?: pulumi.Input<string>;
    leafOpflexpUseSsl?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    opflexpAuthenticateClients?: pulumi.Input<string>;
    opflexpSslProtocols?: pulumi.Input<pulumi.Input<string>[]>;
    opflexpUseSsl?: pulumi.Input<string>;
    policySyncNodeBringup?: pulumi.Input<string>;
    reallocateGipo?: pulumi.Input<string>;
    restrictInfraVlanTraffic?: pulumi.Input<string>;
    unicastXrEpLearnDisable?: pulumi.Input<string>;
    validateOverlappingVlans?: pulumi.Input<string>;
}
