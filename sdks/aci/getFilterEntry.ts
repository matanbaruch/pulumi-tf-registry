// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getFilterEntry(args: GetFilterEntryArgs, opts?: pulumi.InvokeOptions): Promise<GetFilterEntryResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aci:index/getFilterEntry:getFilterEntry", {
        "annotation": args.annotation,
        "applyToFrag": args.applyToFrag,
        "arpOpc": args.arpOpc,
        "dFromPort": args.dFromPort,
        "dToPort": args.dToPort,
        "description": args.description,
        "etherT": args.etherT,
        "filterDn": args.filterDn,
        "icmpv4T": args.icmpv4T,
        "icmpv6T": args.icmpv6T,
        "id": args.id,
        "matchDscp": args.matchDscp,
        "name": args.name,
        "nameAlias": args.nameAlias,
        "prot": args.prot,
        "sFromPort": args.sFromPort,
        "sToPort": args.sToPort,
        "stateful": args.stateful,
        "tcpRules": args.tcpRules,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getFilterEntry.
 */
export interface GetFilterEntryArgs {
    annotation?: string;
    applyToFrag?: string;
    arpOpc?: string;
    dFromPort?: string;
    dToPort?: string;
    description?: string;
    etherT?: string;
    filterDn: string;
    icmpv4T?: string;
    icmpv6T?: string;
    id?: string;
    matchDscp?: string;
    name: string;
    nameAlias?: string;
    prot?: string;
    sFromPort?: string;
    sToPort?: string;
    stateful?: string;
    tcpRules?: string;
}

/**
 * A collection of values returned by getFilterEntry.
 */
export interface GetFilterEntryResult {
    readonly annotation: string;
    readonly applyToFrag: string;
    readonly arpOpc: string;
    readonly dFromPort: string;
    readonly dToPort: string;
    readonly description: string;
    readonly etherT: string;
    readonly filterDn: string;
    readonly icmpv4T: string;
    readonly icmpv6T: string;
    readonly id: string;
    readonly matchDscp: string;
    readonly name: string;
    readonly nameAlias: string;
    readonly prot: string;
    readonly sFromPort: string;
    readonly sToPort: string;
    readonly stateful: string;
    readonly tcpRules: string;
}
export function getFilterEntryOutput(args: GetFilterEntryOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFilterEntryResult> {
    return pulumi.output(args).apply((a: any) => getFilterEntry(a, opts))
}

/**
 * A collection of arguments for invoking getFilterEntry.
 */
export interface GetFilterEntryOutputArgs {
    annotation?: pulumi.Input<string>;
    applyToFrag?: pulumi.Input<string>;
    arpOpc?: pulumi.Input<string>;
    dFromPort?: pulumi.Input<string>;
    dToPort?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    etherT?: pulumi.Input<string>;
    filterDn: pulumi.Input<string>;
    icmpv4T?: pulumi.Input<string>;
    icmpv6T?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    matchDscp?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    prot?: pulumi.Input<string>;
    sFromPort?: pulumi.Input<string>;
    sToPort?: pulumi.Input<string>;
    stateful?: pulumi.Input<string>;
    tcpRules?: pulumi.Input<string>;
}
