// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RsaProvider extends pulumi.CustomResource {
    /**
     * Get an existing RsaProvider resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RsaProviderState, opts?: pulumi.CustomResourceOptions): RsaProvider {
        return new RsaProvider(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aci:index/rsaProvider:RsaProvider';

    /**
     * Returns true if the given object is an instance of RsaProvider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RsaProvider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RsaProvider.__pulumiType;
    }

    public readonly annotation!: pulumi.Output<string>;
    public readonly authPort!: pulumi.Output<string>;
    public readonly authProtocol!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly key!: pulumi.Output<string>;
    public readonly monitorServer!: pulumi.Output<string>;
    public readonly monitoringPassword!: pulumi.Output<string>;
    public readonly monitoringUser!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly nameAlias!: pulumi.Output<string>;
    /**
     * Create relation to fv:AREpP
     */
    public readonly relationAaaRsProvToEpp!: pulumi.Output<string | undefined>;
    /**
     * Create relation to fv:ATg
     */
    public readonly relationAaaRsSecProvToEpg!: pulumi.Output<string | undefined>;
    public readonly retries!: pulumi.Output<string>;
    public readonly timeout!: pulumi.Output<string>;

    /**
     * Create a RsaProvider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RsaProviderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RsaProviderArgs | RsaProviderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RsaProviderState | undefined;
            resourceInputs["annotation"] = state ? state.annotation : undefined;
            resourceInputs["authPort"] = state ? state.authPort : undefined;
            resourceInputs["authProtocol"] = state ? state.authProtocol : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["monitorServer"] = state ? state.monitorServer : undefined;
            resourceInputs["monitoringPassword"] = state ? state.monitoringPassword : undefined;
            resourceInputs["monitoringUser"] = state ? state.monitoringUser : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nameAlias"] = state ? state.nameAlias : undefined;
            resourceInputs["relationAaaRsProvToEpp"] = state ? state.relationAaaRsProvToEpp : undefined;
            resourceInputs["relationAaaRsSecProvToEpg"] = state ? state.relationAaaRsSecProvToEpg : undefined;
            resourceInputs["retries"] = state ? state.retries : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
        } else {
            const args = argsOrState as RsaProviderArgs | undefined;
            resourceInputs["annotation"] = args ? args.annotation : undefined;
            resourceInputs["authPort"] = args ? args.authPort : undefined;
            resourceInputs["authProtocol"] = args ? args.authProtocol : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["monitorServer"] = args ? args.monitorServer : undefined;
            resourceInputs["monitoringPassword"] = args ? args.monitoringPassword : undefined;
            resourceInputs["monitoringUser"] = args ? args.monitoringUser : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nameAlias"] = args ? args.nameAlias : undefined;
            resourceInputs["relationAaaRsProvToEpp"] = args ? args.relationAaaRsProvToEpp : undefined;
            resourceInputs["relationAaaRsSecProvToEpg"] = args ? args.relationAaaRsSecProvToEpg : undefined;
            resourceInputs["retries"] = args ? args.retries : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RsaProvider.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RsaProvider resources.
 */
export interface RsaProviderState {
    annotation?: pulumi.Input<string>;
    authPort?: pulumi.Input<string>;
    authProtocol?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    monitorServer?: pulumi.Input<string>;
    monitoringPassword?: pulumi.Input<string>;
    monitoringUser?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    /**
     * Create relation to fv:AREpP
     */
    relationAaaRsProvToEpp?: pulumi.Input<string>;
    /**
     * Create relation to fv:ATg
     */
    relationAaaRsSecProvToEpg?: pulumi.Input<string>;
    retries?: pulumi.Input<string>;
    timeout?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RsaProvider resource.
 */
export interface RsaProviderArgs {
    annotation?: pulumi.Input<string>;
    authPort?: pulumi.Input<string>;
    authProtocol?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    monitorServer?: pulumi.Input<string>;
    monitoringPassword?: pulumi.Input<string>;
    monitoringUser?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    /**
     * Create relation to fv:AREpP
     */
    relationAaaRsProvToEpp?: pulumi.Input<string>;
    /**
     * Create relation to fv:ATg
     */
    relationAaaRsSecProvToEpg?: pulumi.Input<string>;
    retries?: pulumi.Input<string>;
    timeout?: pulumi.Input<string>;
}
