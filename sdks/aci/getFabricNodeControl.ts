// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getFabricNodeControl(args: GetFabricNodeControlArgs, opts?: pulumi.InvokeOptions): Promise<GetFabricNodeControlResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aci:index/getFabricNodeControl:getFabricNodeControl", {
        "annotation": args.annotation,
        "control": args.control,
        "description": args.description,
        "featureSel": args.featureSel,
        "id": args.id,
        "name": args.name,
        "nameAlias": args.nameAlias,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getFabricNodeControl.
 */
export interface GetFabricNodeControlArgs {
    annotation?: string;
    control?: string;
    description?: string;
    featureSel?: string;
    id?: string;
    name: string;
    nameAlias?: string;
}

/**
 * A collection of values returned by getFabricNodeControl.
 */
export interface GetFabricNodeControlResult {
    readonly annotation: string;
    readonly control: string;
    readonly description: string;
    readonly featureSel: string;
    readonly id: string;
    readonly name: string;
    readonly nameAlias: string;
}
export function getFabricNodeControlOutput(args: GetFabricNodeControlOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFabricNodeControlResult> {
    return pulumi.output(args).apply((a: any) => getFabricNodeControl(a, opts))
}

/**
 * A collection of arguments for invoking getFabricNodeControl.
 */
export interface GetFabricNodeControlOutputArgs {
    annotation?: pulumi.Input<string>;
    control?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    featureSel?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
}
