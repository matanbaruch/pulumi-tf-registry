// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getBridgeDomain(args: GetBridgeDomainArgs, opts?: pulumi.InvokeOptions): Promise<GetBridgeDomainResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aci:index/getBridgeDomain:getBridgeDomain", {
        "annotation": args.annotation,
        "arpFlood": args.arpFlood,
        "bridgeDomainType": args.bridgeDomainType,
        "description": args.description,
        "epClear": args.epClear,
        "epMoveDetectMode": args.epMoveDetectMode,
        "hostBasedRouting": args.hostBasedRouting,
        "id": args.id,
        "intersiteBumTrafficAllow": args.intersiteBumTrafficAllow,
        "intersiteL2Stretch": args.intersiteL2Stretch,
        "ipLearning": args.ipLearning,
        "ipv6McastAllow": args.ipv6McastAllow,
        "limitIpLearnToSubnets": args.limitIpLearnToSubnets,
        "llAddr": args.llAddr,
        "mac": args.mac,
        "mcastAllow": args.mcastAllow,
        "multiDstPktAct": args.multiDstPktAct,
        "name": args.name,
        "nameAlias": args.nameAlias,
        "optimizeWanBandwidth": args.optimizeWanBandwidth,
        "tenantDn": args.tenantDn,
        "unicastRoute": args.unicastRoute,
        "unkMacUcastAct": args.unkMacUcastAct,
        "unkMcastAct": args.unkMcastAct,
        "v6unkMcastAct": args.v6unkMcastAct,
        "vmac": args.vmac,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getBridgeDomain.
 */
export interface GetBridgeDomainArgs {
    annotation?: string;
    arpFlood?: string;
    bridgeDomainType?: string;
    description?: string;
    epClear?: string;
    epMoveDetectMode?: string;
    hostBasedRouting?: string;
    id?: string;
    intersiteBumTrafficAllow?: string;
    intersiteL2Stretch?: string;
    ipLearning?: string;
    ipv6McastAllow?: string;
    limitIpLearnToSubnets?: string;
    llAddr?: string;
    mac?: string;
    mcastAllow?: string;
    multiDstPktAct?: string;
    name: string;
    nameAlias?: string;
    optimizeWanBandwidth?: string;
    tenantDn: string;
    unicastRoute?: string;
    unkMacUcastAct?: string;
    unkMcastAct?: string;
    v6unkMcastAct?: string;
    vmac?: string;
}

/**
 * A collection of values returned by getBridgeDomain.
 */
export interface GetBridgeDomainResult {
    readonly annotation: string;
    readonly arpFlood: string;
    readonly bridgeDomainType: string;
    readonly description: string;
    readonly epClear: string;
    readonly epMoveDetectMode: string;
    readonly hostBasedRouting: string;
    readonly id: string;
    readonly intersiteBumTrafficAllow: string;
    readonly intersiteL2Stretch: string;
    readonly ipLearning: string;
    readonly ipv6McastAllow: string;
    readonly limitIpLearnToSubnets: string;
    readonly llAddr: string;
    readonly mac: string;
    readonly mcastAllow: string;
    readonly multiDstPktAct: string;
    readonly name: string;
    readonly nameAlias: string;
    readonly optimizeWanBandwidth: string;
    readonly tenantDn: string;
    readonly unicastRoute: string;
    readonly unkMacUcastAct: string;
    readonly unkMcastAct: string;
    readonly v6unkMcastAct: string;
    readonly vmac: string;
}
export function getBridgeDomainOutput(args: GetBridgeDomainOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetBridgeDomainResult> {
    return pulumi.output(args).apply((a: any) => getBridgeDomain(a, opts))
}

/**
 * A collection of arguments for invoking getBridgeDomain.
 */
export interface GetBridgeDomainOutputArgs {
    annotation?: pulumi.Input<string>;
    arpFlood?: pulumi.Input<string>;
    bridgeDomainType?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    epClear?: pulumi.Input<string>;
    epMoveDetectMode?: pulumi.Input<string>;
    hostBasedRouting?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    intersiteBumTrafficAllow?: pulumi.Input<string>;
    intersiteL2Stretch?: pulumi.Input<string>;
    ipLearning?: pulumi.Input<string>;
    ipv6McastAllow?: pulumi.Input<string>;
    limitIpLearnToSubnets?: pulumi.Input<string>;
    llAddr?: pulumi.Input<string>;
    mac?: pulumi.Input<string>;
    mcastAllow?: pulumi.Input<string>;
    multiDstPktAct?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    optimizeWanBandwidth?: pulumi.Input<string>;
    tenantDn: pulumi.Input<string>;
    unicastRoute?: pulumi.Input<string>;
    unkMacUcastAct?: pulumi.Input<string>;
    unkMcastAct?: pulumi.Input<string>;
    v6unkMcastAct?: pulumi.Input<string>;
    vmac?: pulumi.Input<string>;
}
