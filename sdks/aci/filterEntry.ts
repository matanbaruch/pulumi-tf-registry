// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class FilterEntry extends pulumi.CustomResource {
    /**
     * Get an existing FilterEntry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FilterEntryState, opts?: pulumi.CustomResourceOptions): FilterEntry {
        return new FilterEntry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aci:index/filterEntry:FilterEntry';

    /**
     * Returns true if the given object is an instance of FilterEntry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FilterEntry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FilterEntry.__pulumiType;
    }

    public readonly annotation!: pulumi.Output<string>;
    public readonly applyToFrag!: pulumi.Output<string>;
    public readonly arpOpc!: pulumi.Output<string>;
    public readonly dFromPort!: pulumi.Output<string>;
    public readonly dToPort!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly etherT!: pulumi.Output<string>;
    public readonly filterDn!: pulumi.Output<string>;
    public readonly icmpv4T!: pulumi.Output<string>;
    public readonly icmpv6T!: pulumi.Output<string>;
    public readonly matchDscp!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly nameAlias!: pulumi.Output<string>;
    public readonly prot!: pulumi.Output<string>;
    public readonly sFromPort!: pulumi.Output<string>;
    public readonly sToPort!: pulumi.Output<string>;
    public readonly stateful!: pulumi.Output<string>;
    public readonly tcpRules!: pulumi.Output<string[]>;

    /**
     * Create a FilterEntry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FilterEntryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FilterEntryArgs | FilterEntryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FilterEntryState | undefined;
            resourceInputs["annotation"] = state ? state.annotation : undefined;
            resourceInputs["applyToFrag"] = state ? state.applyToFrag : undefined;
            resourceInputs["arpOpc"] = state ? state.arpOpc : undefined;
            resourceInputs["dFromPort"] = state ? state.dFromPort : undefined;
            resourceInputs["dToPort"] = state ? state.dToPort : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["etherT"] = state ? state.etherT : undefined;
            resourceInputs["filterDn"] = state ? state.filterDn : undefined;
            resourceInputs["icmpv4T"] = state ? state.icmpv4T : undefined;
            resourceInputs["icmpv6T"] = state ? state.icmpv6T : undefined;
            resourceInputs["matchDscp"] = state ? state.matchDscp : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nameAlias"] = state ? state.nameAlias : undefined;
            resourceInputs["prot"] = state ? state.prot : undefined;
            resourceInputs["sFromPort"] = state ? state.sFromPort : undefined;
            resourceInputs["sToPort"] = state ? state.sToPort : undefined;
            resourceInputs["stateful"] = state ? state.stateful : undefined;
            resourceInputs["tcpRules"] = state ? state.tcpRules : undefined;
        } else {
            const args = argsOrState as FilterEntryArgs | undefined;
            if ((!args || args.filterDn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filterDn'");
            }
            resourceInputs["annotation"] = args ? args.annotation : undefined;
            resourceInputs["applyToFrag"] = args ? args.applyToFrag : undefined;
            resourceInputs["arpOpc"] = args ? args.arpOpc : undefined;
            resourceInputs["dFromPort"] = args ? args.dFromPort : undefined;
            resourceInputs["dToPort"] = args ? args.dToPort : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["etherT"] = args ? args.etherT : undefined;
            resourceInputs["filterDn"] = args ? args.filterDn : undefined;
            resourceInputs["icmpv4T"] = args ? args.icmpv4T : undefined;
            resourceInputs["icmpv6T"] = args ? args.icmpv6T : undefined;
            resourceInputs["matchDscp"] = args ? args.matchDscp : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nameAlias"] = args ? args.nameAlias : undefined;
            resourceInputs["prot"] = args ? args.prot : undefined;
            resourceInputs["sFromPort"] = args ? args.sFromPort : undefined;
            resourceInputs["sToPort"] = args ? args.sToPort : undefined;
            resourceInputs["stateful"] = args ? args.stateful : undefined;
            resourceInputs["tcpRules"] = args ? args.tcpRules : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FilterEntry.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FilterEntry resources.
 */
export interface FilterEntryState {
    annotation?: pulumi.Input<string>;
    applyToFrag?: pulumi.Input<string>;
    arpOpc?: pulumi.Input<string>;
    dFromPort?: pulumi.Input<string>;
    dToPort?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    etherT?: pulumi.Input<string>;
    filterDn?: pulumi.Input<string>;
    icmpv4T?: pulumi.Input<string>;
    icmpv6T?: pulumi.Input<string>;
    matchDscp?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    prot?: pulumi.Input<string>;
    sFromPort?: pulumi.Input<string>;
    sToPort?: pulumi.Input<string>;
    stateful?: pulumi.Input<string>;
    tcpRules?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a FilterEntry resource.
 */
export interface FilterEntryArgs {
    annotation?: pulumi.Input<string>;
    applyToFrag?: pulumi.Input<string>;
    arpOpc?: pulumi.Input<string>;
    dFromPort?: pulumi.Input<string>;
    dToPort?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    etherT?: pulumi.Input<string>;
    filterDn: pulumi.Input<string>;
    icmpv4T?: pulumi.Input<string>;
    icmpv6T?: pulumi.Input<string>;
    matchDscp?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    prot?: pulumi.Input<string>;
    sFromPort?: pulumi.Input<string>;
    sToPort?: pulumi.Input<string>;
    stateful?: pulumi.Input<string>;
    tcpRules?: pulumi.Input<pulumi.Input<string>[]>;
}
