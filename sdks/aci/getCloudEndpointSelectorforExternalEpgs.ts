// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getCloudEndpointSelectorforExternalEpgs(args: GetCloudEndpointSelectorforExternalEpgsArgs, opts?: pulumi.InvokeOptions): Promise<GetCloudEndpointSelectorforExternalEpgsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aci:index/getCloudEndpointSelectorforExternalEpgs:getCloudEndpointSelectorforExternalEpgs", {
        "annotation": args.annotation,
        "cloudExternalEpgDn": args.cloudExternalEpgDn,
        "description": args.description,
        "id": args.id,
        "isShared": args.isShared,
        "matchExpression": args.matchExpression,
        "name": args.name,
        "nameAlias": args.nameAlias,
        "subnet": args.subnet,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCloudEndpointSelectorforExternalEpgs.
 */
export interface GetCloudEndpointSelectorforExternalEpgsArgs {
    annotation?: string;
    cloudExternalEpgDn: string;
    description?: string;
    id?: string;
    isShared?: string;
    matchExpression?: string;
    name: string;
    nameAlias?: string;
    subnet?: string;
}

/**
 * A collection of values returned by getCloudEndpointSelectorforExternalEpgs.
 */
export interface GetCloudEndpointSelectorforExternalEpgsResult {
    readonly annotation: string;
    readonly cloudExternalEpgDn: string;
    readonly description: string;
    readonly id: string;
    readonly isShared: string;
    readonly matchExpression: string;
    readonly name: string;
    readonly nameAlias: string;
    readonly subnet: string;
}
export function getCloudEndpointSelectorforExternalEpgsOutput(args: GetCloudEndpointSelectorforExternalEpgsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCloudEndpointSelectorforExternalEpgsResult> {
    return pulumi.output(args).apply((a: any) => getCloudEndpointSelectorforExternalEpgs(a, opts))
}

/**
 * A collection of arguments for invoking getCloudEndpointSelectorforExternalEpgs.
 */
export interface GetCloudEndpointSelectorforExternalEpgsOutputArgs {
    annotation?: pulumi.Input<string>;
    cloudExternalEpgDn: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    isShared?: pulumi.Input<string>;
    matchExpression?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    subnet?: pulumi.Input<string>;
}
