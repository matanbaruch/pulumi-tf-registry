// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getConcreteDevice(args: GetConcreteDeviceArgs, opts?: pulumi.InvokeOptions): Promise<GetConcreteDeviceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aci:index/getConcreteDevice:getConcreteDevice", {
        "annotation": args.annotation,
        "description": args.description,
        "id": args.id,
        "l4L7DeviceDn": args.l4L7DeviceDn,
        "name": args.name,
        "nameAlias": args.nameAlias,
        "vmName": args.vmName,
        "vmmControllerDn": args.vmmControllerDn,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getConcreteDevice.
 */
export interface GetConcreteDeviceArgs {
    annotation?: string;
    description?: string;
    id?: string;
    l4L7DeviceDn: string;
    name: string;
    nameAlias?: string;
    vmName?: string;
    vmmControllerDn?: string;
}

/**
 * A collection of values returned by getConcreteDevice.
 */
export interface GetConcreteDeviceResult {
    readonly annotation: string;
    readonly description: string;
    readonly id: string;
    readonly l4L7DeviceDn: string;
    readonly name: string;
    readonly nameAlias: string;
    readonly vmName: string;
    readonly vmmControllerDn: string;
}
export function getConcreteDeviceOutput(args: GetConcreteDeviceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetConcreteDeviceResult> {
    return pulumi.output(args).apply((a: any) => getConcreteDevice(a, opts))
}

/**
 * A collection of arguments for invoking getConcreteDevice.
 */
export interface GetConcreteDeviceOutputArgs {
    annotation?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    l4L7DeviceDn: pulumi.Input<string>;
    name: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    vmName?: pulumi.Input<string>;
    vmmControllerDn?: pulumi.Input<string>;
}
