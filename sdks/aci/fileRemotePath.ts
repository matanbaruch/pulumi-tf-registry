// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class FileRemotePath extends pulumi.CustomResource {
    /**
     * Get an existing FileRemotePath resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FileRemotePathState, opts?: pulumi.CustomResourceOptions): FileRemotePath {
        return new FileRemotePath(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aci:index/fileRemotePath:FileRemotePath';

    /**
     * Returns true if the given object is an instance of FileRemotePath.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FileRemotePath {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FileRemotePath.__pulumiType;
    }

    public readonly annotation!: pulumi.Output<string>;
    public readonly authType!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string>;
    public readonly host!: pulumi.Output<string>;
    public readonly identityPrivateKeyContents!: pulumi.Output<string>;
    public readonly identityPrivateKeyPassphrase!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly nameAlias!: pulumi.Output<string>;
    public readonly protocol!: pulumi.Output<string | undefined>;
    /**
     * Create relation to fv:ATg
     */
    public readonly relationFileRsARemoteHostToEpg!: pulumi.Output<string | undefined>;
    /**
     * Create relation to fv:AREpP
     */
    public readonly relationFileRsARemoteHostToEpp!: pulumi.Output<string | undefined>;
    public readonly remotePath!: pulumi.Output<string>;
    public readonly remotePort!: pulumi.Output<string>;
    public readonly userName!: pulumi.Output<string>;
    public readonly userPasswd!: pulumi.Output<string>;

    /**
     * Create a FileRemotePath resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FileRemotePathArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FileRemotePathArgs | FileRemotePathState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FileRemotePathState | undefined;
            resourceInputs["annotation"] = state ? state.annotation : undefined;
            resourceInputs["authType"] = state ? state.authType : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["identityPrivateKeyContents"] = state ? state.identityPrivateKeyContents : undefined;
            resourceInputs["identityPrivateKeyPassphrase"] = state ? state.identityPrivateKeyPassphrase : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nameAlias"] = state ? state.nameAlias : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["relationFileRsARemoteHostToEpg"] = state ? state.relationFileRsARemoteHostToEpg : undefined;
            resourceInputs["relationFileRsARemoteHostToEpp"] = state ? state.relationFileRsARemoteHostToEpp : undefined;
            resourceInputs["remotePath"] = state ? state.remotePath : undefined;
            resourceInputs["remotePort"] = state ? state.remotePort : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
            resourceInputs["userPasswd"] = state ? state.userPasswd : undefined;
        } else {
            const args = argsOrState as FileRemotePathArgs | undefined;
            if ((!args || args.host === undefined) && !opts.urn) {
                throw new Error("Missing required property 'host'");
            }
            resourceInputs["annotation"] = args ? args.annotation : undefined;
            resourceInputs["authType"] = args ? args.authType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["identityPrivateKeyContents"] = args ? args.identityPrivateKeyContents : undefined;
            resourceInputs["identityPrivateKeyPassphrase"] = args ? args.identityPrivateKeyPassphrase : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nameAlias"] = args ? args.nameAlias : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["relationFileRsARemoteHostToEpg"] = args ? args.relationFileRsARemoteHostToEpg : undefined;
            resourceInputs["relationFileRsARemoteHostToEpp"] = args ? args.relationFileRsARemoteHostToEpp : undefined;
            resourceInputs["remotePath"] = args ? args.remotePath : undefined;
            resourceInputs["remotePort"] = args ? args.remotePort : undefined;
            resourceInputs["userName"] = args ? args.userName : undefined;
            resourceInputs["userPasswd"] = args ? args.userPasswd : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FileRemotePath.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FileRemotePath resources.
 */
export interface FileRemotePathState {
    annotation?: pulumi.Input<string>;
    authType?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    identityPrivateKeyContents?: pulumi.Input<string>;
    identityPrivateKeyPassphrase?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    /**
     * Create relation to fv:ATg
     */
    relationFileRsARemoteHostToEpg?: pulumi.Input<string>;
    /**
     * Create relation to fv:AREpP
     */
    relationFileRsARemoteHostToEpp?: pulumi.Input<string>;
    remotePath?: pulumi.Input<string>;
    remotePort?: pulumi.Input<string>;
    userName?: pulumi.Input<string>;
    userPasswd?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FileRemotePath resource.
 */
export interface FileRemotePathArgs {
    annotation?: pulumi.Input<string>;
    authType?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    host: pulumi.Input<string>;
    identityPrivateKeyContents?: pulumi.Input<string>;
    identityPrivateKeyPassphrase?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    /**
     * Create relation to fv:ATg
     */
    relationFileRsARemoteHostToEpg?: pulumi.Input<string>;
    /**
     * Create relation to fv:AREpP
     */
    relationFileRsARemoteHostToEpp?: pulumi.Input<string>;
    remotePath?: pulumi.Input<string>;
    remotePort?: pulumi.Input<string>;
    userName?: pulumi.Input<string>;
    userPasswd?: pulumi.Input<string>;
}
