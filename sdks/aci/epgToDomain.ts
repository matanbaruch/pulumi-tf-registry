// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class EpgToDomain extends pulumi.CustomResource {
    /**
     * Get an existing EpgToDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EpgToDomainState, opts?: pulumi.CustomResourceOptions): EpgToDomain {
        return new EpgToDomain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aci:index/epgToDomain:EpgToDomain';

    /**
     * Returns true if the given object is an instance of EpgToDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EpgToDomain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EpgToDomain.__pulumiType;
    }

    public readonly allowMicroSeg!: pulumi.Output<boolean>;
    public readonly annotation!: pulumi.Output<string>;
    public readonly applicationEpgDn!: pulumi.Output<string>;
    public readonly bindingType!: pulumi.Output<string>;
    public readonly customEpgName!: pulumi.Output<string>;
    public readonly delimiter!: pulumi.Output<string>;
    public readonly encap!: pulumi.Output<string>;
    public readonly encapMode!: pulumi.Output<string>;
    public readonly enhancedLagPolicy!: pulumi.Output<string | undefined>;
    public readonly epgCos!: pulumi.Output<string>;
    public readonly epgCosPref!: pulumi.Output<string>;
    public readonly instrImedcy!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly lagPolicyName!: pulumi.Output<string>;
    public readonly netflowDir!: pulumi.Output<string>;
    public readonly netflowPref!: pulumi.Output<string>;
    public readonly numPorts!: pulumi.Output<string>;
    public readonly portAllocation!: pulumi.Output<string>;
    public readonly primaryEncap!: pulumi.Output<string>;
    public readonly primaryEncapInner!: pulumi.Output<string>;
    public readonly resImedcy!: pulumi.Output<string>;
    public readonly secondaryEncapInner!: pulumi.Output<string>;
    public readonly switchingMode!: pulumi.Output<string>;
    public readonly tdn!: pulumi.Output<string>;
    public readonly vmmAllowPromiscuous!: pulumi.Output<string>;
    public readonly vmmForgedTransmits!: pulumi.Output<string>;
    public /*out*/ readonly vmmId!: pulumi.Output<string>;
    public readonly vmmMacChanges!: pulumi.Output<string>;

    /**
     * Create a EpgToDomain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EpgToDomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EpgToDomainArgs | EpgToDomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EpgToDomainState | undefined;
            resourceInputs["allowMicroSeg"] = state ? state.allowMicroSeg : undefined;
            resourceInputs["annotation"] = state ? state.annotation : undefined;
            resourceInputs["applicationEpgDn"] = state ? state.applicationEpgDn : undefined;
            resourceInputs["bindingType"] = state ? state.bindingType : undefined;
            resourceInputs["customEpgName"] = state ? state.customEpgName : undefined;
            resourceInputs["delimiter"] = state ? state.delimiter : undefined;
            resourceInputs["encap"] = state ? state.encap : undefined;
            resourceInputs["encapMode"] = state ? state.encapMode : undefined;
            resourceInputs["enhancedLagPolicy"] = state ? state.enhancedLagPolicy : undefined;
            resourceInputs["epgCos"] = state ? state.epgCos : undefined;
            resourceInputs["epgCosPref"] = state ? state.epgCosPref : undefined;
            resourceInputs["instrImedcy"] = state ? state.instrImedcy : undefined;
            resourceInputs["lagPolicyName"] = state ? state.lagPolicyName : undefined;
            resourceInputs["netflowDir"] = state ? state.netflowDir : undefined;
            resourceInputs["netflowPref"] = state ? state.netflowPref : undefined;
            resourceInputs["numPorts"] = state ? state.numPorts : undefined;
            resourceInputs["portAllocation"] = state ? state.portAllocation : undefined;
            resourceInputs["primaryEncap"] = state ? state.primaryEncap : undefined;
            resourceInputs["primaryEncapInner"] = state ? state.primaryEncapInner : undefined;
            resourceInputs["resImedcy"] = state ? state.resImedcy : undefined;
            resourceInputs["secondaryEncapInner"] = state ? state.secondaryEncapInner : undefined;
            resourceInputs["switchingMode"] = state ? state.switchingMode : undefined;
            resourceInputs["tdn"] = state ? state.tdn : undefined;
            resourceInputs["vmmAllowPromiscuous"] = state ? state.vmmAllowPromiscuous : undefined;
            resourceInputs["vmmForgedTransmits"] = state ? state.vmmForgedTransmits : undefined;
            resourceInputs["vmmId"] = state ? state.vmmId : undefined;
            resourceInputs["vmmMacChanges"] = state ? state.vmmMacChanges : undefined;
        } else {
            const args = argsOrState as EpgToDomainArgs | undefined;
            if ((!args || args.applicationEpgDn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationEpgDn'");
            }
            if ((!args || args.tdn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tdn'");
            }
            resourceInputs["allowMicroSeg"] = args ? args.allowMicroSeg : undefined;
            resourceInputs["annotation"] = args ? args.annotation : undefined;
            resourceInputs["applicationEpgDn"] = args ? args.applicationEpgDn : undefined;
            resourceInputs["bindingType"] = args ? args.bindingType : undefined;
            resourceInputs["customEpgName"] = args ? args.customEpgName : undefined;
            resourceInputs["delimiter"] = args ? args.delimiter : undefined;
            resourceInputs["encap"] = args ? args.encap : undefined;
            resourceInputs["encapMode"] = args ? args.encapMode : undefined;
            resourceInputs["enhancedLagPolicy"] = args ? args.enhancedLagPolicy : undefined;
            resourceInputs["epgCos"] = args ? args.epgCos : undefined;
            resourceInputs["epgCosPref"] = args ? args.epgCosPref : undefined;
            resourceInputs["instrImedcy"] = args ? args.instrImedcy : undefined;
            resourceInputs["lagPolicyName"] = args ? args.lagPolicyName : undefined;
            resourceInputs["netflowDir"] = args ? args.netflowDir : undefined;
            resourceInputs["netflowPref"] = args ? args.netflowPref : undefined;
            resourceInputs["numPorts"] = args ? args.numPorts : undefined;
            resourceInputs["portAllocation"] = args ? args.portAllocation : undefined;
            resourceInputs["primaryEncap"] = args ? args.primaryEncap : undefined;
            resourceInputs["primaryEncapInner"] = args ? args.primaryEncapInner : undefined;
            resourceInputs["resImedcy"] = args ? args.resImedcy : undefined;
            resourceInputs["secondaryEncapInner"] = args ? args.secondaryEncapInner : undefined;
            resourceInputs["switchingMode"] = args ? args.switchingMode : undefined;
            resourceInputs["tdn"] = args ? args.tdn : undefined;
            resourceInputs["vmmAllowPromiscuous"] = args ? args.vmmAllowPromiscuous : undefined;
            resourceInputs["vmmForgedTransmits"] = args ? args.vmmForgedTransmits : undefined;
            resourceInputs["vmmMacChanges"] = args ? args.vmmMacChanges : undefined;
            resourceInputs["vmmId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EpgToDomain.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EpgToDomain resources.
 */
export interface EpgToDomainState {
    allowMicroSeg?: pulumi.Input<boolean>;
    annotation?: pulumi.Input<string>;
    applicationEpgDn?: pulumi.Input<string>;
    bindingType?: pulumi.Input<string>;
    customEpgName?: pulumi.Input<string>;
    delimiter?: pulumi.Input<string>;
    encap?: pulumi.Input<string>;
    encapMode?: pulumi.Input<string>;
    enhancedLagPolicy?: pulumi.Input<string>;
    epgCos?: pulumi.Input<string>;
    epgCosPref?: pulumi.Input<string>;
    instrImedcy?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    lagPolicyName?: pulumi.Input<string>;
    netflowDir?: pulumi.Input<string>;
    netflowPref?: pulumi.Input<string>;
    numPorts?: pulumi.Input<string>;
    portAllocation?: pulumi.Input<string>;
    primaryEncap?: pulumi.Input<string>;
    primaryEncapInner?: pulumi.Input<string>;
    resImedcy?: pulumi.Input<string>;
    secondaryEncapInner?: pulumi.Input<string>;
    switchingMode?: pulumi.Input<string>;
    tdn?: pulumi.Input<string>;
    vmmAllowPromiscuous?: pulumi.Input<string>;
    vmmForgedTransmits?: pulumi.Input<string>;
    vmmId?: pulumi.Input<string>;
    vmmMacChanges?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EpgToDomain resource.
 */
export interface EpgToDomainArgs {
    allowMicroSeg?: pulumi.Input<boolean>;
    annotation?: pulumi.Input<string>;
    applicationEpgDn: pulumi.Input<string>;
    bindingType?: pulumi.Input<string>;
    customEpgName?: pulumi.Input<string>;
    delimiter?: pulumi.Input<string>;
    encap?: pulumi.Input<string>;
    encapMode?: pulumi.Input<string>;
    enhancedLagPolicy?: pulumi.Input<string>;
    epgCos?: pulumi.Input<string>;
    epgCosPref?: pulumi.Input<string>;
    instrImedcy?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    lagPolicyName?: pulumi.Input<string>;
    netflowDir?: pulumi.Input<string>;
    netflowPref?: pulumi.Input<string>;
    numPorts?: pulumi.Input<string>;
    portAllocation?: pulumi.Input<string>;
    primaryEncap?: pulumi.Input<string>;
    primaryEncapInner?: pulumi.Input<string>;
    resImedcy?: pulumi.Input<string>;
    secondaryEncapInner?: pulumi.Input<string>;
    switchingMode?: pulumi.Input<string>;
    tdn: pulumi.Input<string>;
    vmmAllowPromiscuous?: pulumi.Input<string>;
    vmmForgedTransmits?: pulumi.Input<string>;
    vmmMacChanges?: pulumi.Input<string>;
}
