// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SpinePortPolicyGroup extends pulumi.CustomResource {
    /**
     * Get an existing SpinePortPolicyGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SpinePortPolicyGroupState, opts?: pulumi.CustomResourceOptions): SpinePortPolicyGroup {
        return new SpinePortPolicyGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aci:index/spinePortPolicyGroup:SpinePortPolicyGroup';

    /**
     * Returns true if the given object is an instance of SpinePortPolicyGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SpinePortPolicyGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SpinePortPolicyGroup.__pulumiType;
    }

    public readonly annotation!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly nameAlias!: pulumi.Output<string>;
    public readonly relationInfraRsAttEntP!: pulumi.Output<string | undefined>;
    public readonly relationInfraRsCdpIfPol!: pulumi.Output<string | undefined>;
    public readonly relationInfraRsCoppIfPol!: pulumi.Output<string | undefined>;
    public readonly relationInfraRsHIfPol!: pulumi.Output<string | undefined>;
    public readonly relationInfraRsMacsecIfPol!: pulumi.Output<string | undefined>;

    /**
     * Create a SpinePortPolicyGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SpinePortPolicyGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SpinePortPolicyGroupArgs | SpinePortPolicyGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SpinePortPolicyGroupState | undefined;
            resourceInputs["annotation"] = state ? state.annotation : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nameAlias"] = state ? state.nameAlias : undefined;
            resourceInputs["relationInfraRsAttEntP"] = state ? state.relationInfraRsAttEntP : undefined;
            resourceInputs["relationInfraRsCdpIfPol"] = state ? state.relationInfraRsCdpIfPol : undefined;
            resourceInputs["relationInfraRsCoppIfPol"] = state ? state.relationInfraRsCoppIfPol : undefined;
            resourceInputs["relationInfraRsHIfPol"] = state ? state.relationInfraRsHIfPol : undefined;
            resourceInputs["relationInfraRsMacsecIfPol"] = state ? state.relationInfraRsMacsecIfPol : undefined;
        } else {
            const args = argsOrState as SpinePortPolicyGroupArgs | undefined;
            resourceInputs["annotation"] = args ? args.annotation : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nameAlias"] = args ? args.nameAlias : undefined;
            resourceInputs["relationInfraRsAttEntP"] = args ? args.relationInfraRsAttEntP : undefined;
            resourceInputs["relationInfraRsCdpIfPol"] = args ? args.relationInfraRsCdpIfPol : undefined;
            resourceInputs["relationInfraRsCoppIfPol"] = args ? args.relationInfraRsCoppIfPol : undefined;
            resourceInputs["relationInfraRsHIfPol"] = args ? args.relationInfraRsHIfPol : undefined;
            resourceInputs["relationInfraRsMacsecIfPol"] = args ? args.relationInfraRsMacsecIfPol : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SpinePortPolicyGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SpinePortPolicyGroup resources.
 */
export interface SpinePortPolicyGroupState {
    annotation?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    relationInfraRsAttEntP?: pulumi.Input<string>;
    relationInfraRsCdpIfPol?: pulumi.Input<string>;
    relationInfraRsCoppIfPol?: pulumi.Input<string>;
    relationInfraRsHIfPol?: pulumi.Input<string>;
    relationInfraRsMacsecIfPol?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SpinePortPolicyGroup resource.
 */
export interface SpinePortPolicyGroupArgs {
    annotation?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    relationInfraRsAttEntP?: pulumi.Input<string>;
    relationInfraRsCdpIfPol?: pulumi.Input<string>;
    relationInfraRsCoppIfPol?: pulumi.Input<string>;
    relationInfraRsHIfPol?: pulumi.Input<string>;
    relationInfraRsMacsecIfPol?: pulumi.Input<string>;
}
