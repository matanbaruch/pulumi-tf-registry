// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getConfigurationImportPolicy(args: GetConfigurationImportPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetConfigurationImportPolicyResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aci:index/getConfigurationImportPolicy:getConfigurationImportPolicy", {
        "adminSt": args.adminSt,
        "annotation": args.annotation,
        "description": args.description,
        "failOnDecryptErrors": args.failOnDecryptErrors,
        "fileName": args.fileName,
        "id": args.id,
        "importMode": args.importMode,
        "importType": args.importType,
        "name": args.name,
        "nameAlias": args.nameAlias,
        "snapshot": args.snapshot,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getConfigurationImportPolicy.
 */
export interface GetConfigurationImportPolicyArgs {
    adminSt?: string;
    annotation?: string;
    description?: string;
    failOnDecryptErrors?: string;
    fileName?: string;
    id?: string;
    importMode?: string;
    importType?: string;
    name: string;
    nameAlias?: string;
    snapshot?: string;
}

/**
 * A collection of values returned by getConfigurationImportPolicy.
 */
export interface GetConfigurationImportPolicyResult {
    readonly adminSt: string;
    readonly annotation: string;
    readonly description: string;
    readonly failOnDecryptErrors: string;
    readonly fileName: string;
    readonly id: string;
    readonly importMode: string;
    readonly importType: string;
    readonly name: string;
    readonly nameAlias: string;
    readonly snapshot: string;
}
export function getConfigurationImportPolicyOutput(args: GetConfigurationImportPolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetConfigurationImportPolicyResult> {
    return pulumi.output(args).apply((a: any) => getConfigurationImportPolicy(a, opts))
}

/**
 * A collection of arguments for invoking getConfigurationImportPolicy.
 */
export interface GetConfigurationImportPolicyOutputArgs {
    adminSt?: pulumi.Input<string>;
    annotation?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    failOnDecryptErrors?: pulumi.Input<string>;
    fileName?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    importMode?: pulumi.Input<string>;
    importType?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    snapshot?: pulumi.Input<string>;
}
