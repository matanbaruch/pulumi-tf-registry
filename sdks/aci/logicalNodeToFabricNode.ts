// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LogicalNodeToFabricNode extends pulumi.CustomResource {
    /**
     * Get an existing LogicalNodeToFabricNode resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogicalNodeToFabricNodeState, opts?: pulumi.CustomResourceOptions): LogicalNodeToFabricNode {
        return new LogicalNodeToFabricNode(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aci:index/logicalNodeToFabricNode:LogicalNodeToFabricNode';

    /**
     * Returns true if the given object is an instance of LogicalNodeToFabricNode.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogicalNodeToFabricNode {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogicalNodeToFabricNode.__pulumiType;
    }

    public readonly annotation!: pulumi.Output<string>;
    public readonly configIssues!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly logicalNodeProfileDn!: pulumi.Output<string>;
    public readonly rtrId!: pulumi.Output<string>;
    public readonly rtrIdLoopBack!: pulumi.Output<string>;
    public readonly tdn!: pulumi.Output<string>;

    /**
     * Create a LogicalNodeToFabricNode resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogicalNodeToFabricNodeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogicalNodeToFabricNodeArgs | LogicalNodeToFabricNodeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogicalNodeToFabricNodeState | undefined;
            resourceInputs["annotation"] = state ? state.annotation : undefined;
            resourceInputs["configIssues"] = state ? state.configIssues : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["logicalNodeProfileDn"] = state ? state.logicalNodeProfileDn : undefined;
            resourceInputs["rtrId"] = state ? state.rtrId : undefined;
            resourceInputs["rtrIdLoopBack"] = state ? state.rtrIdLoopBack : undefined;
            resourceInputs["tdn"] = state ? state.tdn : undefined;
        } else {
            const args = argsOrState as LogicalNodeToFabricNodeArgs | undefined;
            if ((!args || args.logicalNodeProfileDn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logicalNodeProfileDn'");
            }
            if ((!args || args.tdn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tdn'");
            }
            resourceInputs["annotation"] = args ? args.annotation : undefined;
            resourceInputs["configIssues"] = args ? args.configIssues : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["logicalNodeProfileDn"] = args ? args.logicalNodeProfileDn : undefined;
            resourceInputs["rtrId"] = args ? args.rtrId : undefined;
            resourceInputs["rtrIdLoopBack"] = args ? args.rtrIdLoopBack : undefined;
            resourceInputs["tdn"] = args ? args.tdn : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogicalNodeToFabricNode.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LogicalNodeToFabricNode resources.
 */
export interface LogicalNodeToFabricNodeState {
    annotation?: pulumi.Input<string>;
    configIssues?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    logicalNodeProfileDn?: pulumi.Input<string>;
    rtrId?: pulumi.Input<string>;
    rtrIdLoopBack?: pulumi.Input<string>;
    tdn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LogicalNodeToFabricNode resource.
 */
export interface LogicalNodeToFabricNodeArgs {
    annotation?: pulumi.Input<string>;
    configIssues?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    logicalNodeProfileDn: pulumi.Input<string>;
    rtrId?: pulumi.Input<string>;
    rtrIdLoopBack?: pulumi.Input<string>;
    tdn: pulumi.Input<string>;
}
