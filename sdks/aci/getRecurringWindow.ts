// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getRecurringWindow(args: GetRecurringWindowArgs, opts?: pulumi.InvokeOptions): Promise<GetRecurringWindowResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aci:index/getRecurringWindow:getRecurringWindow", {
        "annotation": args.annotation,
        "concurCap": args.concurCap,
        "day": args.day,
        "hour": args.hour,
        "id": args.id,
        "minute": args.minute,
        "name": args.name,
        "nameAlias": args.nameAlias,
        "nodeUpgInterval": args.nodeUpgInterval,
        "procBreak": args.procBreak,
        "procCap": args.procCap,
        "schedulerDn": args.schedulerDn,
        "timeCap": args.timeCap,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getRecurringWindow.
 */
export interface GetRecurringWindowArgs {
    annotation?: string;
    concurCap?: string;
    day?: string;
    hour?: string;
    id?: string;
    minute?: string;
    name: string;
    nameAlias?: string;
    nodeUpgInterval?: string;
    procBreak?: string;
    procCap?: string;
    schedulerDn: string;
    timeCap?: string;
}

/**
 * A collection of values returned by getRecurringWindow.
 */
export interface GetRecurringWindowResult {
    readonly annotation: string;
    readonly concurCap: string;
    readonly day: string;
    readonly hour: string;
    readonly id: string;
    readonly minute: string;
    readonly name: string;
    readonly nameAlias: string;
    readonly nodeUpgInterval: string;
    readonly procBreak: string;
    readonly procCap: string;
    readonly schedulerDn: string;
    readonly timeCap: string;
}
export function getRecurringWindowOutput(args: GetRecurringWindowOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRecurringWindowResult> {
    return pulumi.output(args).apply((a: any) => getRecurringWindow(a, opts))
}

/**
 * A collection of arguments for invoking getRecurringWindow.
 */
export interface GetRecurringWindowOutputArgs {
    annotation?: pulumi.Input<string>;
    concurCap?: pulumi.Input<string>;
    day?: pulumi.Input<string>;
    hour?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    minute?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    nodeUpgInterval?: pulumi.Input<string>;
    procBreak?: pulumi.Input<string>;
    procCap?: pulumi.Input<string>;
    schedulerDn: pulumi.Input<string>;
    timeCap?: pulumi.Input<string>;
}
