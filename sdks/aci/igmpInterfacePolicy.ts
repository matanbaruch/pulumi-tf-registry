// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class IgmpInterfacePolicy extends pulumi.CustomResource {
    /**
     * Get an existing IgmpInterfacePolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IgmpInterfacePolicyState, opts?: pulumi.CustomResourceOptions): IgmpInterfacePolicy {
        return new IgmpInterfacePolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aci:index/igmpInterfacePolicy:IgmpInterfacePolicy';

    /**
     * Returns true if the given object is an instance of IgmpInterfacePolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IgmpInterfacePolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IgmpInterfacePolicy.__pulumiType;
    }

    public readonly annotation!: pulumi.Output<string>;
    public readonly controls!: pulumi.Output<string[]>;
    public readonly description!: pulumi.Output<string>;
    public readonly groupTimeout!: pulumi.Output<string>;
    public readonly lastMemberCount!: pulumi.Output<string>;
    public readonly lastMemberResponseTime!: pulumi.Output<string>;
    public readonly maximumMulitcastEntries!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly nameAlias!: pulumi.Output<string>;
    public readonly querierTimeout!: pulumi.Output<string>;
    public readonly queryInterval!: pulumi.Output<string>;
    public readonly reportPolicyRouteMap!: pulumi.Output<string>;
    public readonly reservedMulitcastEntries!: pulumi.Output<string>;
    public readonly responseInterval!: pulumi.Output<string>;
    public readonly robustnessVariable!: pulumi.Output<string>;
    public readonly startupQueryCount!: pulumi.Output<string>;
    public readonly startupQueryInterval!: pulumi.Output<string>;
    public readonly stateLimitRouteMap!: pulumi.Output<string>;
    public readonly staticReportRouteMap!: pulumi.Output<string>;
    public readonly tenantDn!: pulumi.Output<string>;
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a IgmpInterfacePolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IgmpInterfacePolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IgmpInterfacePolicyArgs | IgmpInterfacePolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IgmpInterfacePolicyState | undefined;
            resourceInputs["annotation"] = state ? state.annotation : undefined;
            resourceInputs["controls"] = state ? state.controls : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["groupTimeout"] = state ? state.groupTimeout : undefined;
            resourceInputs["lastMemberCount"] = state ? state.lastMemberCount : undefined;
            resourceInputs["lastMemberResponseTime"] = state ? state.lastMemberResponseTime : undefined;
            resourceInputs["maximumMulitcastEntries"] = state ? state.maximumMulitcastEntries : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nameAlias"] = state ? state.nameAlias : undefined;
            resourceInputs["querierTimeout"] = state ? state.querierTimeout : undefined;
            resourceInputs["queryInterval"] = state ? state.queryInterval : undefined;
            resourceInputs["reportPolicyRouteMap"] = state ? state.reportPolicyRouteMap : undefined;
            resourceInputs["reservedMulitcastEntries"] = state ? state.reservedMulitcastEntries : undefined;
            resourceInputs["responseInterval"] = state ? state.responseInterval : undefined;
            resourceInputs["robustnessVariable"] = state ? state.robustnessVariable : undefined;
            resourceInputs["startupQueryCount"] = state ? state.startupQueryCount : undefined;
            resourceInputs["startupQueryInterval"] = state ? state.startupQueryInterval : undefined;
            resourceInputs["stateLimitRouteMap"] = state ? state.stateLimitRouteMap : undefined;
            resourceInputs["staticReportRouteMap"] = state ? state.staticReportRouteMap : undefined;
            resourceInputs["tenantDn"] = state ? state.tenantDn : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as IgmpInterfacePolicyArgs | undefined;
            if ((!args || args.tenantDn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantDn'");
            }
            resourceInputs["annotation"] = args ? args.annotation : undefined;
            resourceInputs["controls"] = args ? args.controls : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["groupTimeout"] = args ? args.groupTimeout : undefined;
            resourceInputs["lastMemberCount"] = args ? args.lastMemberCount : undefined;
            resourceInputs["lastMemberResponseTime"] = args ? args.lastMemberResponseTime : undefined;
            resourceInputs["maximumMulitcastEntries"] = args ? args.maximumMulitcastEntries : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nameAlias"] = args ? args.nameAlias : undefined;
            resourceInputs["querierTimeout"] = args ? args.querierTimeout : undefined;
            resourceInputs["queryInterval"] = args ? args.queryInterval : undefined;
            resourceInputs["reportPolicyRouteMap"] = args ? args.reportPolicyRouteMap : undefined;
            resourceInputs["reservedMulitcastEntries"] = args ? args.reservedMulitcastEntries : undefined;
            resourceInputs["responseInterval"] = args ? args.responseInterval : undefined;
            resourceInputs["robustnessVariable"] = args ? args.robustnessVariable : undefined;
            resourceInputs["startupQueryCount"] = args ? args.startupQueryCount : undefined;
            resourceInputs["startupQueryInterval"] = args ? args.startupQueryInterval : undefined;
            resourceInputs["stateLimitRouteMap"] = args ? args.stateLimitRouteMap : undefined;
            resourceInputs["staticReportRouteMap"] = args ? args.staticReportRouteMap : undefined;
            resourceInputs["tenantDn"] = args ? args.tenantDn : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IgmpInterfacePolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IgmpInterfacePolicy resources.
 */
export interface IgmpInterfacePolicyState {
    annotation?: pulumi.Input<string>;
    controls?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    groupTimeout?: pulumi.Input<string>;
    lastMemberCount?: pulumi.Input<string>;
    lastMemberResponseTime?: pulumi.Input<string>;
    maximumMulitcastEntries?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    querierTimeout?: pulumi.Input<string>;
    queryInterval?: pulumi.Input<string>;
    reportPolicyRouteMap?: pulumi.Input<string>;
    reservedMulitcastEntries?: pulumi.Input<string>;
    responseInterval?: pulumi.Input<string>;
    robustnessVariable?: pulumi.Input<string>;
    startupQueryCount?: pulumi.Input<string>;
    startupQueryInterval?: pulumi.Input<string>;
    stateLimitRouteMap?: pulumi.Input<string>;
    staticReportRouteMap?: pulumi.Input<string>;
    tenantDn?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IgmpInterfacePolicy resource.
 */
export interface IgmpInterfacePolicyArgs {
    annotation?: pulumi.Input<string>;
    controls?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    groupTimeout?: pulumi.Input<string>;
    lastMemberCount?: pulumi.Input<string>;
    lastMemberResponseTime?: pulumi.Input<string>;
    maximumMulitcastEntries?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    querierTimeout?: pulumi.Input<string>;
    queryInterval?: pulumi.Input<string>;
    reportPolicyRouteMap?: pulumi.Input<string>;
    reservedMulitcastEntries?: pulumi.Input<string>;
    responseInterval?: pulumi.Input<string>;
    robustnessVariable?: pulumi.Input<string>;
    startupQueryCount?: pulumi.Input<string>;
    startupQueryInterval?: pulumi.Input<string>;
    stateLimitRouteMap?: pulumi.Input<string>;
    staticReportRouteMap?: pulumi.Input<string>;
    tenantDn: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}
