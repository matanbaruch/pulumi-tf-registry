// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCloudServiceEpg(args: GetCloudServiceEpgArgs, opts?: pulumi.InvokeOptions): Promise<GetCloudServiceEpgResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aci:index/getCloudServiceEpg:getCloudServiceEpg", {
        "annotation": args.annotation,
        "cloudApplicationContainerDn": args.cloudApplicationContainerDn,
        "description": args.description,
        "id": args.id,
        "name": args.name,
        "nameAlias": args.nameAlias,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCloudServiceEpg.
 */
export interface GetCloudServiceEpgArgs {
    annotation?: string;
    cloudApplicationContainerDn: string;
    description?: string;
    id?: string;
    name: string;
    nameAlias?: string;
}

/**
 * A collection of values returned by getCloudServiceEpg.
 */
export interface GetCloudServiceEpgResult {
    readonly accessType: string;
    readonly annotation: string;
    readonly azurePrivateEndpoint: string;
    readonly cloudApplicationContainerDn: string;
    readonly cloudServiceEpgType: string;
    readonly customServiceType: string;
    readonly deploymentType: string;
    readonly description: string;
    readonly floodOnEncap: string;
    readonly id: string;
    readonly labelMatchCriteria: string;
    readonly name: string;
    readonly nameAlias: string;
    readonly preferredGroupMember: string;
    readonly prio: string;
    readonly relationCloudRsCloudEpgCtx: string;
    readonly relationFvRsCons: outputs.GetCloudServiceEpgRelationFvRsCon[];
    readonly relationFvRsConsIfs: outputs.GetCloudServiceEpgRelationFvRsConsIf[];
    readonly relationFvRsCustQosPol: string;
    readonly relationFvRsGraphDeves: string[];
    readonly relationFvRsIntraEpgs: string[];
    readonly relationFvRsProtBies: string[];
    readonly relationFvRsProvDeves: string[];
    readonly relationFvRsProvs: outputs.GetCloudServiceEpgRelationFvRsProv[];
    readonly relationFvRsSecInheriteds: string[];
}
export function getCloudServiceEpgOutput(args: GetCloudServiceEpgOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCloudServiceEpgResult> {
    return pulumi.output(args).apply((a: any) => getCloudServiceEpg(a, opts))
}

/**
 * A collection of arguments for invoking getCloudServiceEpg.
 */
export interface GetCloudServiceEpgOutputArgs {
    annotation?: pulumi.Input<string>;
    cloudApplicationContainerDn: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
}
