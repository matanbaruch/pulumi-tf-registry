// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class IpSlaMonitoringPolicy extends pulumi.CustomResource {
    /**
     * Get an existing IpSlaMonitoringPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IpSlaMonitoringPolicyState, opts?: pulumi.CustomResourceOptions): IpSlaMonitoringPolicy {
        return new IpSlaMonitoringPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aci:index/ipSlaMonitoringPolicy:IpSlaMonitoringPolicy';

    /**
     * Returns true if the given object is an instance of IpSlaMonitoringPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IpSlaMonitoringPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IpSlaMonitoringPolicy.__pulumiType;
    }

    public readonly annotation!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly httpUri!: pulumi.Output<string>;
    public readonly httpVersion!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly nameAlias!: pulumi.Output<string>;
    public readonly requestDataSize!: pulumi.Output<string>;
    public readonly slaDetectMultiplier!: pulumi.Output<string>;
    public readonly slaFrequency!: pulumi.Output<string>;
    public readonly slaPort!: pulumi.Output<string>;
    public readonly slaType!: pulumi.Output<string>;
    public readonly tenantDn!: pulumi.Output<string>;
    public readonly threshold!: pulumi.Output<string>;
    public readonly timeout!: pulumi.Output<string>;
    public readonly trafficClassValue!: pulumi.Output<string>;
    public readonly typeOfService!: pulumi.Output<string>;

    /**
     * Create a IpSlaMonitoringPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IpSlaMonitoringPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IpSlaMonitoringPolicyArgs | IpSlaMonitoringPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IpSlaMonitoringPolicyState | undefined;
            resourceInputs["annotation"] = state ? state.annotation : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["httpUri"] = state ? state.httpUri : undefined;
            resourceInputs["httpVersion"] = state ? state.httpVersion : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nameAlias"] = state ? state.nameAlias : undefined;
            resourceInputs["requestDataSize"] = state ? state.requestDataSize : undefined;
            resourceInputs["slaDetectMultiplier"] = state ? state.slaDetectMultiplier : undefined;
            resourceInputs["slaFrequency"] = state ? state.slaFrequency : undefined;
            resourceInputs["slaPort"] = state ? state.slaPort : undefined;
            resourceInputs["slaType"] = state ? state.slaType : undefined;
            resourceInputs["tenantDn"] = state ? state.tenantDn : undefined;
            resourceInputs["threshold"] = state ? state.threshold : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["trafficClassValue"] = state ? state.trafficClassValue : undefined;
            resourceInputs["typeOfService"] = state ? state.typeOfService : undefined;
        } else {
            const args = argsOrState as IpSlaMonitoringPolicyArgs | undefined;
            if ((!args || args.tenantDn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantDn'");
            }
            resourceInputs["annotation"] = args ? args.annotation : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["httpUri"] = args ? args.httpUri : undefined;
            resourceInputs["httpVersion"] = args ? args.httpVersion : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nameAlias"] = args ? args.nameAlias : undefined;
            resourceInputs["requestDataSize"] = args ? args.requestDataSize : undefined;
            resourceInputs["slaDetectMultiplier"] = args ? args.slaDetectMultiplier : undefined;
            resourceInputs["slaFrequency"] = args ? args.slaFrequency : undefined;
            resourceInputs["slaPort"] = args ? args.slaPort : undefined;
            resourceInputs["slaType"] = args ? args.slaType : undefined;
            resourceInputs["tenantDn"] = args ? args.tenantDn : undefined;
            resourceInputs["threshold"] = args ? args.threshold : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["trafficClassValue"] = args ? args.trafficClassValue : undefined;
            resourceInputs["typeOfService"] = args ? args.typeOfService : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IpSlaMonitoringPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IpSlaMonitoringPolicy resources.
 */
export interface IpSlaMonitoringPolicyState {
    annotation?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    httpUri?: pulumi.Input<string>;
    httpVersion?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    requestDataSize?: pulumi.Input<string>;
    slaDetectMultiplier?: pulumi.Input<string>;
    slaFrequency?: pulumi.Input<string>;
    slaPort?: pulumi.Input<string>;
    slaType?: pulumi.Input<string>;
    tenantDn?: pulumi.Input<string>;
    threshold?: pulumi.Input<string>;
    timeout?: pulumi.Input<string>;
    trafficClassValue?: pulumi.Input<string>;
    typeOfService?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IpSlaMonitoringPolicy resource.
 */
export interface IpSlaMonitoringPolicyArgs {
    annotation?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    httpUri?: pulumi.Input<string>;
    httpVersion?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    requestDataSize?: pulumi.Input<string>;
    slaDetectMultiplier?: pulumi.Input<string>;
    slaFrequency?: pulumi.Input<string>;
    slaPort?: pulumi.Input<string>;
    slaType?: pulumi.Input<string>;
    tenantDn: pulumi.Input<string>;
    threshold?: pulumi.Input<string>;
    timeout?: pulumi.Input<string>;
    trafficClassValue?: pulumi.Input<string>;
    typeOfService?: pulumi.Input<string>;
}
