// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getContractSubject(args: GetContractSubjectArgs, opts?: pulumi.InvokeOptions): Promise<GetContractSubjectResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aci:index/getContractSubject:getContractSubject", {
        "annotation": args.annotation,
        "applyBothDirections": args.applyBothDirections,
        "consMatchT": args.consMatchT,
        "consumerToProviders": args.consumerToProviders,
        "contractDn": args.contractDn,
        "description": args.description,
        "id": args.id,
        "name": args.name,
        "nameAlias": args.nameAlias,
        "prio": args.prio,
        "provMatchT": args.provMatchT,
        "providerToConsumers": args.providerToConsumers,
        "revFltPorts": args.revFltPorts,
        "targetDscp": args.targetDscp,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getContractSubject.
 */
export interface GetContractSubjectArgs {
    annotation?: string;
    applyBothDirections?: string;
    consMatchT?: string;
    consumerToProviders?: inputs.GetContractSubjectConsumerToProvider[];
    contractDn: string;
    description?: string;
    id?: string;
    name: string;
    nameAlias?: string;
    prio?: string;
    provMatchT?: string;
    providerToConsumers?: inputs.GetContractSubjectProviderToConsumer[];
    revFltPorts?: string;
    targetDscp?: string;
}

/**
 * A collection of values returned by getContractSubject.
 */
export interface GetContractSubjectResult {
    readonly annotation: string;
    readonly applyBothDirections?: string;
    readonly consMatchT: string;
    readonly consumerToProviders?: outputs.GetContractSubjectConsumerToProvider[];
    readonly contractDn: string;
    readonly description: string;
    readonly id: string;
    readonly name: string;
    readonly nameAlias: string;
    readonly prio: string;
    readonly provMatchT: string;
    readonly providerToConsumers?: outputs.GetContractSubjectProviderToConsumer[];
    readonly revFltPorts: string;
    readonly targetDscp: string;
}
export function getContractSubjectOutput(args: GetContractSubjectOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetContractSubjectResult> {
    return pulumi.output(args).apply((a: any) => getContractSubject(a, opts))
}

/**
 * A collection of arguments for invoking getContractSubject.
 */
export interface GetContractSubjectOutputArgs {
    annotation?: pulumi.Input<string>;
    applyBothDirections?: pulumi.Input<string>;
    consMatchT?: pulumi.Input<string>;
    consumerToProviders?: pulumi.Input<pulumi.Input<inputs.GetContractSubjectConsumerToProviderArgs>[]>;
    contractDn: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    prio?: pulumi.Input<string>;
    provMatchT?: pulumi.Input<string>;
    providerToConsumers?: pulumi.Input<pulumi.Input<inputs.GetContractSubjectProviderToConsumerArgs>[]>;
    revFltPorts?: pulumi.Input<string>;
    targetDscp?: pulumi.Input<string>;
}
