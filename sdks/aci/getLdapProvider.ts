// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getLdapProvider(args: GetLdapProviderArgs, opts?: pulumi.InvokeOptions): Promise<GetLdapProviderResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aci:index/getLdapProvider:getLdapProvider", {
        "annotation": args.annotation,
        "attribute": args.attribute,
        "basedn": args.basedn,
        "description": args.description,
        "enableSsl": args.enableSsl,
        "filter": args.filter,
        "id": args.id,
        "monitorServer": args.monitorServer,
        "monitoringUser": args.monitoringUser,
        "name": args.name,
        "nameAlias": args.nameAlias,
        "port": args.port,
        "retries": args.retries,
        "rootdn": args.rootdn,
        "sslValidationLevel": args.sslValidationLevel,
        "timeout": args.timeout,
        "type": args.type,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLdapProvider.
 */
export interface GetLdapProviderArgs {
    annotation?: string;
    attribute?: string;
    basedn?: string;
    description?: string;
    enableSsl?: string;
    filter?: string;
    id?: string;
    monitorServer?: string;
    monitoringUser?: string;
    name: string;
    nameAlias?: string;
    port?: string;
    retries?: string;
    rootdn?: string;
    sslValidationLevel?: string;
    timeout?: string;
    type: string;
}

/**
 * A collection of values returned by getLdapProvider.
 */
export interface GetLdapProviderResult {
    readonly annotation: string;
    readonly attribute: string;
    readonly basedn: string;
    readonly description: string;
    readonly enableSsl: string;
    readonly filter: string;
    readonly id: string;
    readonly monitorServer: string;
    readonly monitoringUser: string;
    readonly name: string;
    readonly nameAlias: string;
    readonly port: string;
    readonly retries: string;
    readonly rootdn: string;
    readonly sslValidationLevel: string;
    readonly timeout: string;
    readonly type: string;
}
export function getLdapProviderOutput(args: GetLdapProviderOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLdapProviderResult> {
    return pulumi.output(args).apply((a: any) => getLdapProvider(a, opts))
}

/**
 * A collection of arguments for invoking getLdapProvider.
 */
export interface GetLdapProviderOutputArgs {
    annotation?: pulumi.Input<string>;
    attribute?: pulumi.Input<string>;
    basedn?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    enableSsl?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    monitorServer?: pulumi.Input<string>;
    monitoringUser?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    retries?: pulumi.Input<string>;
    rootdn?: pulumi.Input<string>;
    sslValidationLevel?: pulumi.Input<string>;
    timeout?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}
