// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getRadiusProvider(args: GetRadiusProviderArgs, opts?: pulumi.InvokeOptions): Promise<GetRadiusProviderResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aci:index/getRadiusProvider:getRadiusProvider", {
        "annotation": args.annotation,
        "authPort": args.authPort,
        "authProtocol": args.authProtocol,
        "description": args.description,
        "id": args.id,
        "monitorServer": args.monitorServer,
        "monitoringUser": args.monitoringUser,
        "name": args.name,
        "nameAlias": args.nameAlias,
        "retries": args.retries,
        "timeout": args.timeout,
        "type": args.type,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getRadiusProvider.
 */
export interface GetRadiusProviderArgs {
    annotation?: string;
    authPort?: string;
    authProtocol?: string;
    description?: string;
    id?: string;
    monitorServer?: string;
    monitoringUser?: string;
    name: string;
    nameAlias?: string;
    retries?: string;
    timeout?: string;
    type: string;
}

/**
 * A collection of values returned by getRadiusProvider.
 */
export interface GetRadiusProviderResult {
    readonly annotation: string;
    readonly authPort: string;
    readonly authProtocol: string;
    readonly description: string;
    readonly id: string;
    readonly monitorServer: string;
    readonly monitoringUser: string;
    readonly name: string;
    readonly nameAlias: string;
    readonly retries: string;
    readonly timeout: string;
    readonly type: string;
}
export function getRadiusProviderOutput(args: GetRadiusProviderOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRadiusProviderResult> {
    return pulumi.output(args).apply((a: any) => getRadiusProvider(a, opts))
}

/**
 * A collection of arguments for invoking getRadiusProvider.
 */
export interface GetRadiusProviderOutputArgs {
    annotation?: pulumi.Input<string>;
    authPort?: pulumi.Input<string>;
    authProtocol?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    monitorServer?: pulumi.Input<string>;
    monitoringUser?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    retries?: pulumi.Input<string>;
    timeout?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}
