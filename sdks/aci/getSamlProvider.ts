// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getSamlProvider(args: GetSamlProviderArgs, opts?: pulumi.InvokeOptions): Promise<GetSamlProviderResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aci:index/getSamlProvider:getSamlProvider", {
        "annotation": args.annotation,
        "description": args.description,
        "entityId": args.entityId,
        "guiBannerMessage": args.guiBannerMessage,
        "httpsProxy": args.httpsProxy,
        "id": args.id,
        "idP": args.idP,
        "metadataUrl": args.metadataUrl,
        "monitorServer": args.monitorServer,
        "monitoringUser": args.monitoringUser,
        "name": args.name,
        "nameAlias": args.nameAlias,
        "retries": args.retries,
        "sigAlg": args.sigAlg,
        "timeout": args.timeout,
        "tp": args.tp,
        "wantAssertionsEncrypted": args.wantAssertionsEncrypted,
        "wantAssertionsSigned": args.wantAssertionsSigned,
        "wantRequestsSigned": args.wantRequestsSigned,
        "wantResponseSigned": args.wantResponseSigned,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSamlProvider.
 */
export interface GetSamlProviderArgs {
    annotation?: string;
    description?: string;
    entityId?: string;
    guiBannerMessage?: string;
    httpsProxy?: string;
    id?: string;
    idP?: string;
    metadataUrl?: string;
    monitorServer?: string;
    monitoringUser?: string;
    name: string;
    nameAlias?: string;
    retries?: string;
    sigAlg?: string;
    timeout?: string;
    tp?: string;
    wantAssertionsEncrypted?: string;
    wantAssertionsSigned?: string;
    wantRequestsSigned?: string;
    wantResponseSigned?: string;
}

/**
 * A collection of values returned by getSamlProvider.
 */
export interface GetSamlProviderResult {
    readonly annotation: string;
    readonly description: string;
    readonly entityId: string;
    readonly guiBannerMessage: string;
    readonly httpsProxy: string;
    readonly id: string;
    readonly idP: string;
    readonly metadataUrl: string;
    readonly monitorServer: string;
    readonly monitoringUser: string;
    readonly name: string;
    readonly nameAlias: string;
    readonly retries: string;
    readonly sigAlg: string;
    readonly timeout: string;
    readonly tp: string;
    readonly wantAssertionsEncrypted: string;
    readonly wantAssertionsSigned: string;
    readonly wantRequestsSigned: string;
    readonly wantResponseSigned: string;
}
export function getSamlProviderOutput(args: GetSamlProviderOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSamlProviderResult> {
    return pulumi.output(args).apply((a: any) => getSamlProvider(a, opts))
}

/**
 * A collection of arguments for invoking getSamlProvider.
 */
export interface GetSamlProviderOutputArgs {
    annotation?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    entityId?: pulumi.Input<string>;
    guiBannerMessage?: pulumi.Input<string>;
    httpsProxy?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    idP?: pulumi.Input<string>;
    metadataUrl?: pulumi.Input<string>;
    monitorServer?: pulumi.Input<string>;
    monitoringUser?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    retries?: pulumi.Input<string>;
    sigAlg?: pulumi.Input<string>;
    timeout?: pulumi.Input<string>;
    tp?: pulumi.Input<string>;
    wantAssertionsEncrypted?: pulumi.Input<string>;
    wantAssertionsSigned?: pulumi.Input<string>;
    wantRequestsSigned?: pulumi.Input<string>;
    wantResponseSigned?: pulumi.Input<string>;
}
