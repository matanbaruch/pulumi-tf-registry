// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getMulticastPoolBlock(args: GetMulticastPoolBlockArgs, opts?: pulumi.InvokeOptions): Promise<GetMulticastPoolBlockResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aci:index/getMulticastPoolBlock:getMulticastPoolBlock", {
        "annotation": args.annotation,
        "description": args.description,
        "from": args.from,
        "id": args.id,
        "multicastPoolDn": args.multicastPoolDn,
        "name": args.name,
        "nameAlias": args.nameAlias,
        "to": args.to,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMulticastPoolBlock.
 */
export interface GetMulticastPoolBlockArgs {
    annotation?: string;
    description?: string;
    from: string;
    id?: string;
    multicastPoolDn: string;
    name?: string;
    nameAlias?: string;
    to: string;
}

/**
 * A collection of values returned by getMulticastPoolBlock.
 */
export interface GetMulticastPoolBlockResult {
    readonly annotation: string;
    readonly description: string;
    readonly from: string;
    readonly id: string;
    readonly multicastPoolDn: string;
    readonly name?: string;
    readonly nameAlias: string;
    readonly to: string;
}
export function getMulticastPoolBlockOutput(args: GetMulticastPoolBlockOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMulticastPoolBlockResult> {
    return pulumi.output(args).apply((a: any) => getMulticastPoolBlock(a, opts))
}

/**
 * A collection of arguments for invoking getMulticastPoolBlock.
 */
export interface GetMulticastPoolBlockOutputArgs {
    annotation?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    from: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    multicastPoolDn: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    to: pulumi.Input<string>;
}
