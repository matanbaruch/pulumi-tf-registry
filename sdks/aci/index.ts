// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AaaDomainArgs, AaaDomainState } from "./aaaDomain";
export type AaaDomain = import("./aaaDomain").AaaDomain;
export const AaaDomain: typeof import("./aaaDomain").AaaDomain = null as any;
utilities.lazyLoad(exports, ["AaaDomain"], () => require("./aaaDomain"));

export { AaaDomainRelationshipArgs, AaaDomainRelationshipState } from "./aaaDomainRelationship";
export type AaaDomainRelationship = import("./aaaDomainRelationship").AaaDomainRelationship;
export const AaaDomainRelationship: typeof import("./aaaDomainRelationship").AaaDomainRelationship = null as any;
utilities.lazyLoad(exports, ["AaaDomainRelationship"], () => require("./aaaDomainRelationship"));

export { AaepToDomainArgs, AaepToDomainState } from "./aaepToDomain";
export type AaepToDomain = import("./aaepToDomain").AaepToDomain;
export const AaepToDomain: typeof import("./aaepToDomain").AaepToDomain = null as any;
utilities.lazyLoad(exports, ["AaepToDomain"], () => require("./aaepToDomain"));

export { AccessGenericArgs, AccessGenericState } from "./accessGeneric";
export type AccessGeneric = import("./accessGeneric").AccessGeneric;
export const AccessGeneric: typeof import("./accessGeneric").AccessGeneric = null as any;
utilities.lazyLoad(exports, ["AccessGeneric"], () => require("./accessGeneric"));

export { AccessGroupArgs, AccessGroupState } from "./accessGroup";
export type AccessGroup = import("./accessGroup").AccessGroup;
export const AccessGroup: typeof import("./accessGroup").AccessGroup = null as any;
utilities.lazyLoad(exports, ["AccessGroup"], () => require("./accessGroup"));

export { AccessPortBlockArgs, AccessPortBlockState } from "./accessPortBlock";
export type AccessPortBlock = import("./accessPortBlock").AccessPortBlock;
export const AccessPortBlock: typeof import("./accessPortBlock").AccessPortBlock = null as any;
utilities.lazyLoad(exports, ["AccessPortBlock"], () => require("./accessPortBlock"));

export { AccessPortSelectorArgs, AccessPortSelectorState } from "./accessPortSelector";
export type AccessPortSelector = import("./accessPortSelector").AccessPortSelector;
export const AccessPortSelector: typeof import("./accessPortSelector").AccessPortSelector = null as any;
utilities.lazyLoad(exports, ["AccessPortSelector"], () => require("./accessPortSelector"));

export { AccessSubPortBlockArgs, AccessSubPortBlockState } from "./accessSubPortBlock";
export type AccessSubPortBlock = import("./accessSubPortBlock").AccessSubPortBlock;
export const AccessSubPortBlock: typeof import("./accessSubPortBlock").AccessSubPortBlock = null as any;
utilities.lazyLoad(exports, ["AccessSubPortBlock"], () => require("./accessSubPortBlock"));

export { AccessSwitchPolicyGroupArgs, AccessSwitchPolicyGroupState } from "./accessSwitchPolicyGroup";
export type AccessSwitchPolicyGroup = import("./accessSwitchPolicyGroup").AccessSwitchPolicyGroup;
export const AccessSwitchPolicyGroup: typeof import("./accessSwitchPolicyGroup").AccessSwitchPolicyGroup = null as any;
utilities.lazyLoad(exports, ["AccessSwitchPolicyGroup"], () => require("./accessSwitchPolicyGroup"));

export { ActionRuleAdditionalCommunitiesArgs, ActionRuleAdditionalCommunitiesState } from "./actionRuleAdditionalCommunities";
export type ActionRuleAdditionalCommunities = import("./actionRuleAdditionalCommunities").ActionRuleAdditionalCommunities;
export const ActionRuleAdditionalCommunities: typeof import("./actionRuleAdditionalCommunities").ActionRuleAdditionalCommunities = null as any;
utilities.lazyLoad(exports, ["ActionRuleAdditionalCommunities"], () => require("./actionRuleAdditionalCommunities"));

export { ActionRuleProfileArgs, ActionRuleProfileState } from "./actionRuleProfile";
export type ActionRuleProfile = import("./actionRuleProfile").ActionRuleProfile;
export const ActionRuleProfile: typeof import("./actionRuleProfile").ActionRuleProfile = null as any;
utilities.lazyLoad(exports, ["ActionRuleProfile"], () => require("./actionRuleProfile"));

export { AnnotationArgs, AnnotationState } from "./annotation";
export type Annotation = import("./annotation").Annotation;
export const Annotation: typeof import("./annotation").Annotation = null as any;
utilities.lazyLoad(exports, ["Annotation"], () => require("./annotation"));

export { AnyArgs, AnyState } from "./any";
export type Any = import("./any").Any;
export const Any: typeof import("./any").Any = null as any;
utilities.lazyLoad(exports, ["Any"], () => require("./any"));

export { ApplicationEpgArgs, ApplicationEpgState } from "./applicationEpg";
export type ApplicationEpg = import("./applicationEpg").ApplicationEpg;
export const ApplicationEpg: typeof import("./applicationEpg").ApplicationEpg = null as any;
utilities.lazyLoad(exports, ["ApplicationEpg"], () => require("./applicationEpg"));

export { ApplicationProfileArgs, ApplicationProfileState } from "./applicationProfile";
export type ApplicationProfile = import("./applicationProfile").ApplicationProfile;
export const ApplicationProfile: typeof import("./applicationProfile").ApplicationProfile = null as any;
utilities.lazyLoad(exports, ["ApplicationProfile"], () => require("./applicationProfile"));

export { AttachableAccessEntityProfileArgs, AttachableAccessEntityProfileState } from "./attachableAccessEntityProfile";
export type AttachableAccessEntityProfile = import("./attachableAccessEntityProfile").AttachableAccessEntityProfile;
export const AttachableAccessEntityProfile: typeof import("./attachableAccessEntityProfile").AttachableAccessEntityProfile = null as any;
utilities.lazyLoad(exports, ["AttachableAccessEntityProfile"], () => require("./attachableAccessEntityProfile"));

export { AuthenticationPropertiesArgs, AuthenticationPropertiesState } from "./authenticationProperties";
export type AuthenticationProperties = import("./authenticationProperties").AuthenticationProperties;
export const AuthenticationProperties: typeof import("./authenticationProperties").AuthenticationProperties = null as any;
utilities.lazyLoad(exports, ["AuthenticationProperties"], () => require("./authenticationProperties"));

export { BdDhcpLabelArgs, BdDhcpLabelState } from "./bdDhcpLabel";
export type BdDhcpLabel = import("./bdDhcpLabel").BdDhcpLabel;
export const BdDhcpLabel: typeof import("./bdDhcpLabel").BdDhcpLabel = null as any;
utilities.lazyLoad(exports, ["BdDhcpLabel"], () => require("./bdDhcpLabel"));

export { BfdInterfacePolicyArgs, BfdInterfacePolicyState } from "./bfdInterfacePolicy";
export type BfdInterfacePolicy = import("./bfdInterfacePolicy").BfdInterfacePolicy;
export const BfdInterfacePolicy: typeof import("./bfdInterfacePolicy").BfdInterfacePolicy = null as any;
utilities.lazyLoad(exports, ["BfdInterfacePolicy"], () => require("./bfdInterfacePolicy"));

export { BfdMultihopInterfacePolicyArgs, BfdMultihopInterfacePolicyState } from "./bfdMultihopInterfacePolicy";
export type BfdMultihopInterfacePolicy = import("./bfdMultihopInterfacePolicy").BfdMultihopInterfacePolicy;
export const BfdMultihopInterfacePolicy: typeof import("./bfdMultihopInterfacePolicy").BfdMultihopInterfacePolicy = null as any;
utilities.lazyLoad(exports, ["BfdMultihopInterfacePolicy"], () => require("./bfdMultihopInterfacePolicy"));

export { BfdMultihopInterfaceProfileArgs, BfdMultihopInterfaceProfileState } from "./bfdMultihopInterfaceProfile";
export type BfdMultihopInterfaceProfile = import("./bfdMultihopInterfaceProfile").BfdMultihopInterfaceProfile;
export const BfdMultihopInterfaceProfile: typeof import("./bfdMultihopInterfaceProfile").BfdMultihopInterfaceProfile = null as any;
utilities.lazyLoad(exports, ["BfdMultihopInterfaceProfile"], () => require("./bfdMultihopInterfaceProfile"));

export { BfdMultihopNodePolicyArgs, BfdMultihopNodePolicyState } from "./bfdMultihopNodePolicy";
export type BfdMultihopNodePolicy = import("./bfdMultihopNodePolicy").BfdMultihopNodePolicy;
export const BfdMultihopNodePolicy: typeof import("./bfdMultihopNodePolicy").BfdMultihopNodePolicy = null as any;
utilities.lazyLoad(exports, ["BfdMultihopNodePolicy"], () => require("./bfdMultihopNodePolicy"));

export { BgpAddressFamilyContextArgs, BgpAddressFamilyContextState } from "./bgpAddressFamilyContext";
export type BgpAddressFamilyContext = import("./bgpAddressFamilyContext").BgpAddressFamilyContext;
export const BgpAddressFamilyContext: typeof import("./bgpAddressFamilyContext").BgpAddressFamilyContext = null as any;
utilities.lazyLoad(exports, ["BgpAddressFamilyContext"], () => require("./bgpAddressFamilyContext"));

export { BgpBestPathPolicyArgs, BgpBestPathPolicyState } from "./bgpBestPathPolicy";
export type BgpBestPathPolicy = import("./bgpBestPathPolicy").BgpBestPathPolicy;
export const BgpBestPathPolicy: typeof import("./bgpBestPathPolicy").BgpBestPathPolicy = null as any;
utilities.lazyLoad(exports, ["BgpBestPathPolicy"], () => require("./bgpBestPathPolicy"));

export { BgpPeerConnectivityProfileArgs, BgpPeerConnectivityProfileState } from "./bgpPeerConnectivityProfile";
export type BgpPeerConnectivityProfile = import("./bgpPeerConnectivityProfile").BgpPeerConnectivityProfile;
export const BgpPeerConnectivityProfile: typeof import("./bgpPeerConnectivityProfile").BgpPeerConnectivityProfile = null as any;
utilities.lazyLoad(exports, ["BgpPeerConnectivityProfile"], () => require("./bgpPeerConnectivityProfile"));

export { BgpPeerPrefixArgs, BgpPeerPrefixState } from "./bgpPeerPrefix";
export type BgpPeerPrefix = import("./bgpPeerPrefix").BgpPeerPrefix;
export const BgpPeerPrefix: typeof import("./bgpPeerPrefix").BgpPeerPrefix = null as any;
utilities.lazyLoad(exports, ["BgpPeerPrefix"], () => require("./bgpPeerPrefix"));

export { BgpRouteControlProfileArgs, BgpRouteControlProfileState } from "./bgpRouteControlProfile";
export type BgpRouteControlProfile = import("./bgpRouteControlProfile").BgpRouteControlProfile;
export const BgpRouteControlProfile: typeof import("./bgpRouteControlProfile").BgpRouteControlProfile = null as any;
utilities.lazyLoad(exports, ["BgpRouteControlProfile"], () => require("./bgpRouteControlProfile"));

export { BgpRouteSummarizationArgs, BgpRouteSummarizationState } from "./bgpRouteSummarization";
export type BgpRouteSummarization = import("./bgpRouteSummarization").BgpRouteSummarization;
export const BgpRouteSummarization: typeof import("./bgpRouteSummarization").BgpRouteSummarization = null as any;
utilities.lazyLoad(exports, ["BgpRouteSummarization"], () => require("./bgpRouteSummarization"));

export { BgpTimersArgs, BgpTimersState } from "./bgpTimers";
export type BgpTimers = import("./bgpTimers").BgpTimers;
export const BgpTimers: typeof import("./bgpTimers").BgpTimers = null as any;
utilities.lazyLoad(exports, ["BgpTimers"], () => require("./bgpTimers"));

export { BridgeDomainArgs, BridgeDomainState } from "./bridgeDomain";
export type BridgeDomain = import("./bridgeDomain").BridgeDomain;
export const BridgeDomain: typeof import("./bridgeDomain").BridgeDomain = null as any;
utilities.lazyLoad(exports, ["BridgeDomain"], () => require("./bridgeDomain"));

export { BulkEpgToStaticPathArgs, BulkEpgToStaticPathState } from "./bulkEpgToStaticPath";
export type BulkEpgToStaticPath = import("./bulkEpgToStaticPath").BulkEpgToStaticPath;
export const BulkEpgToStaticPath: typeof import("./bulkEpgToStaticPath").BulkEpgToStaticPath = null as any;
utilities.lazyLoad(exports, ["BulkEpgToStaticPath"], () => require("./bulkEpgToStaticPath"));

export { CdpInterfacePolicyArgs, CdpInterfacePolicyState } from "./cdpInterfacePolicy";
export type CdpInterfacePolicy = import("./cdpInterfacePolicy").CdpInterfacePolicy;
export const CdpInterfacePolicy: typeof import("./cdpInterfacePolicy").CdpInterfacePolicy = null as any;
utilities.lazyLoad(exports, ["CdpInterfacePolicy"], () => require("./cdpInterfacePolicy"));

export { CloudAccountArgs, CloudAccountState } from "./cloudAccount";
export type CloudAccount = import("./cloudAccount").CloudAccount;
export const CloudAccount: typeof import("./cloudAccount").CloudAccount = null as any;
utilities.lazyLoad(exports, ["CloudAccount"], () => require("./cloudAccount"));

export { CloudAdArgs, CloudAdState } from "./cloudAd";
export type CloudAd = import("./cloudAd").CloudAd;
export const CloudAd: typeof import("./cloudAd").CloudAd = null as any;
utilities.lazyLoad(exports, ["CloudAd"], () => require("./cloudAd"));

export { CloudApplicationcontainerArgs, CloudApplicationcontainerState } from "./cloudApplicationcontainer";
export type CloudApplicationcontainer = import("./cloudApplicationcontainer").CloudApplicationcontainer;
export const CloudApplicationcontainer: typeof import("./cloudApplicationcontainer").CloudApplicationcontainer = null as any;
utilities.lazyLoad(exports, ["CloudApplicationcontainer"], () => require("./cloudApplicationcontainer"));

export { CloudAwsProviderArgs, CloudAwsProviderState } from "./cloudAwsProvider";
export type CloudAwsProvider = import("./cloudAwsProvider").CloudAwsProvider;
export const CloudAwsProvider: typeof import("./cloudAwsProvider").CloudAwsProvider = null as any;
utilities.lazyLoad(exports, ["CloudAwsProvider"], () => require("./cloudAwsProvider"));

export { CloudCidrPoolArgs, CloudCidrPoolState } from "./cloudCidrPool";
export type CloudCidrPool = import("./cloudCidrPool").CloudCidrPool;
export const CloudCidrPool: typeof import("./cloudCidrPool").CloudCidrPool = null as any;
utilities.lazyLoad(exports, ["CloudCidrPool"], () => require("./cloudCidrPool"));

export { CloudContextProfileArgs, CloudContextProfileState } from "./cloudContextProfile";
export type CloudContextProfile = import("./cloudContextProfile").CloudContextProfile;
export const CloudContextProfile: typeof import("./cloudContextProfile").CloudContextProfile = null as any;
utilities.lazyLoad(exports, ["CloudContextProfile"], () => require("./cloudContextProfile"));

export { CloudCredentialsArgs, CloudCredentialsState } from "./cloudCredentials";
export type CloudCredentials = import("./cloudCredentials").CloudCredentials;
export const CloudCredentials: typeof import("./cloudCredentials").CloudCredentials = null as any;
utilities.lazyLoad(exports, ["CloudCredentials"], () => require("./cloudCredentials"));

export { CloudDomainProfileArgs, CloudDomainProfileState } from "./cloudDomainProfile";
export type CloudDomainProfile = import("./cloudDomainProfile").CloudDomainProfile;
export const CloudDomainProfile: typeof import("./cloudDomainProfile").CloudDomainProfile = null as any;
utilities.lazyLoad(exports, ["CloudDomainProfile"], () => require("./cloudDomainProfile"));

export { CloudEndpointSelectorArgs, CloudEndpointSelectorState } from "./cloudEndpointSelector";
export type CloudEndpointSelector = import("./cloudEndpointSelector").CloudEndpointSelector;
export const CloudEndpointSelector: typeof import("./cloudEndpointSelector").CloudEndpointSelector = null as any;
utilities.lazyLoad(exports, ["CloudEndpointSelector"], () => require("./cloudEndpointSelector"));

export { CloudEndpointSelectorforExternalEpgsArgs, CloudEndpointSelectorforExternalEpgsState } from "./cloudEndpointSelectorforExternalEpgs";
export type CloudEndpointSelectorforExternalEpgs = import("./cloudEndpointSelectorforExternalEpgs").CloudEndpointSelectorforExternalEpgs;
export const CloudEndpointSelectorforExternalEpgs: typeof import("./cloudEndpointSelectorforExternalEpgs").CloudEndpointSelectorforExternalEpgs = null as any;
utilities.lazyLoad(exports, ["CloudEndpointSelectorforExternalEpgs"], () => require("./cloudEndpointSelectorforExternalEpgs"));

export { CloudEpgArgs, CloudEpgState } from "./cloudEpg";
export type CloudEpg = import("./cloudEpg").CloudEpg;
export const CloudEpg: typeof import("./cloudEpg").CloudEpg = null as any;
utilities.lazyLoad(exports, ["CloudEpg"], () => require("./cloudEpg"));

export { CloudExternalEpgArgs, CloudExternalEpgState } from "./cloudExternalEpg";
export type CloudExternalEpg = import("./cloudExternalEpg").CloudExternalEpg;
export const CloudExternalEpg: typeof import("./cloudExternalEpg").CloudExternalEpg = null as any;
utilities.lazyLoad(exports, ["CloudExternalEpg"], () => require("./cloudExternalEpg"));

export { CloudExternalNetworkArgs, CloudExternalNetworkState } from "./cloudExternalNetwork";
export type CloudExternalNetwork = import("./cloudExternalNetwork").CloudExternalNetwork;
export const CloudExternalNetwork: typeof import("./cloudExternalNetwork").CloudExternalNetwork = null as any;
utilities.lazyLoad(exports, ["CloudExternalNetwork"], () => require("./cloudExternalNetwork"));

export { CloudExternalNetworkVpnNetworkArgs, CloudExternalNetworkVpnNetworkState } from "./cloudExternalNetworkVpnNetwork";
export type CloudExternalNetworkVpnNetwork = import("./cloudExternalNetworkVpnNetwork").CloudExternalNetworkVpnNetwork;
export const CloudExternalNetworkVpnNetwork: typeof import("./cloudExternalNetworkVpnNetwork").CloudExternalNetworkVpnNetwork = null as any;
utilities.lazyLoad(exports, ["CloudExternalNetworkVpnNetwork"], () => require("./cloudExternalNetworkVpnNetwork"));

export { CloudIpsecTunnelSubnetPoolArgs, CloudIpsecTunnelSubnetPoolState } from "./cloudIpsecTunnelSubnetPool";
export type CloudIpsecTunnelSubnetPool = import("./cloudIpsecTunnelSubnetPool").CloudIpsecTunnelSubnetPool;
export const CloudIpsecTunnelSubnetPool: typeof import("./cloudIpsecTunnelSubnetPool").CloudIpsecTunnelSubnetPool = null as any;
utilities.lazyLoad(exports, ["CloudIpsecTunnelSubnetPool"], () => require("./cloudIpsecTunnelSubnetPool"));

export { CloudL4L7NativeLoadBalancerArgs, CloudL4L7NativeLoadBalancerState } from "./cloudL4L7NativeLoadBalancer";
export type CloudL4L7NativeLoadBalancer = import("./cloudL4L7NativeLoadBalancer").CloudL4L7NativeLoadBalancer;
export const CloudL4L7NativeLoadBalancer: typeof import("./cloudL4L7NativeLoadBalancer").CloudL4L7NativeLoadBalancer = null as any;
utilities.lazyLoad(exports, ["CloudL4L7NativeLoadBalancer"], () => require("./cloudL4L7NativeLoadBalancer"));

export { CloudL4L7ThirdPartyDeviceArgs, CloudL4L7ThirdPartyDeviceState } from "./cloudL4L7ThirdPartyDevice";
export type CloudL4L7ThirdPartyDevice = import("./cloudL4L7ThirdPartyDevice").CloudL4L7ThirdPartyDevice;
export const CloudL4L7ThirdPartyDevice: typeof import("./cloudL4L7ThirdPartyDevice").CloudL4L7ThirdPartyDevice = null as any;
utilities.lazyLoad(exports, ["CloudL4L7ThirdPartyDevice"], () => require("./cloudL4L7ThirdPartyDevice"));

export { CloudPrivateLinkLabelArgs, CloudPrivateLinkLabelState } from "./cloudPrivateLinkLabel";
export type CloudPrivateLinkLabel = import("./cloudPrivateLinkLabel").CloudPrivateLinkLabel;
export const CloudPrivateLinkLabel: typeof import("./cloudPrivateLinkLabel").CloudPrivateLinkLabel = null as any;
utilities.lazyLoad(exports, ["CloudPrivateLinkLabel"], () => require("./cloudPrivateLinkLabel"));

export { CloudServiceEndpointSelectorArgs, CloudServiceEndpointSelectorState } from "./cloudServiceEndpointSelector";
export type CloudServiceEndpointSelector = import("./cloudServiceEndpointSelector").CloudServiceEndpointSelector;
export const CloudServiceEndpointSelector: typeof import("./cloudServiceEndpointSelector").CloudServiceEndpointSelector = null as any;
utilities.lazyLoad(exports, ["CloudServiceEndpointSelector"], () => require("./cloudServiceEndpointSelector"));

export { CloudServiceEpgArgs, CloudServiceEpgState } from "./cloudServiceEpg";
export type CloudServiceEpg = import("./cloudServiceEpg").CloudServiceEpg;
export const CloudServiceEpg: typeof import("./cloudServiceEpg").CloudServiceEpg = null as any;
utilities.lazyLoad(exports, ["CloudServiceEpg"], () => require("./cloudServiceEpg"));

export { CloudSubnetArgs, CloudSubnetState } from "./cloudSubnet";
export type CloudSubnet = import("./cloudSubnet").CloudSubnet;
export const CloudSubnet: typeof import("./cloudSubnet").CloudSubnet = null as any;
utilities.lazyLoad(exports, ["CloudSubnet"], () => require("./cloudSubnet"));

export { CloudTemplateRegionDetailArgs, CloudTemplateRegionDetailState } from "./cloudTemplateRegionDetail";
export type CloudTemplateRegionDetail = import("./cloudTemplateRegionDetail").CloudTemplateRegionDetail;
export const CloudTemplateRegionDetail: typeof import("./cloudTemplateRegionDetail").CloudTemplateRegionDetail = null as any;
utilities.lazyLoad(exports, ["CloudTemplateRegionDetail"], () => require("./cloudTemplateRegionDetail"));

export { CloudVpnGatewayArgs, CloudVpnGatewayState } from "./cloudVpnGateway";
export type CloudVpnGateway = import("./cloudVpnGateway").CloudVpnGateway;
export const CloudVpnGateway: typeof import("./cloudVpnGateway").CloudVpnGateway = null as any;
utilities.lazyLoad(exports, ["CloudVpnGateway"], () => require("./cloudVpnGateway"));

export { CloudVrfLeakRoutesArgs, CloudVrfLeakRoutesState } from "./cloudVrfLeakRoutes";
export type CloudVrfLeakRoutes = import("./cloudVrfLeakRoutes").CloudVrfLeakRoutes;
export const CloudVrfLeakRoutes: typeof import("./cloudVrfLeakRoutes").CloudVrfLeakRoutes = null as any;
utilities.lazyLoad(exports, ["CloudVrfLeakRoutes"], () => require("./cloudVrfLeakRoutes"));

export { ConcreteDeviceArgs, ConcreteDeviceState } from "./concreteDevice";
export type ConcreteDevice = import("./concreteDevice").ConcreteDevice;
export const ConcreteDevice: typeof import("./concreteDevice").ConcreteDevice = null as any;
utilities.lazyLoad(exports, ["ConcreteDevice"], () => require("./concreteDevice"));

export { ConcreteInterfaceArgs, ConcreteInterfaceState } from "./concreteInterface";
export type ConcreteInterface = import("./concreteInterface").ConcreteInterface;
export const ConcreteInterface: typeof import("./concreteInterface").ConcreteInterface = null as any;
utilities.lazyLoad(exports, ["ConcreteInterface"], () => require("./concreteInterface"));

export { ConfigurationExportPolicyArgs, ConfigurationExportPolicyState } from "./configurationExportPolicy";
export type ConfigurationExportPolicy = import("./configurationExportPolicy").ConfigurationExportPolicy;
export const ConfigurationExportPolicy: typeof import("./configurationExportPolicy").ConfigurationExportPolicy = null as any;
utilities.lazyLoad(exports, ["ConfigurationExportPolicy"], () => require("./configurationExportPolicy"));

export { ConfigurationImportPolicyArgs, ConfigurationImportPolicyState } from "./configurationImportPolicy";
export type ConfigurationImportPolicy = import("./configurationImportPolicy").ConfigurationImportPolicy;
export const ConfigurationImportPolicy: typeof import("./configurationImportPolicy").ConfigurationImportPolicy = null as any;
utilities.lazyLoad(exports, ["ConfigurationImportPolicy"], () => require("./configurationImportPolicy"));

export { ConnectionArgs, ConnectionState } from "./connection";
export type Connection = import("./connection").Connection;
export const Connection: typeof import("./connection").Connection = null as any;
utilities.lazyLoad(exports, ["Connection"], () => require("./connection"));

export { ConsoleAuthenticationArgs, ConsoleAuthenticationState } from "./consoleAuthentication";
export type ConsoleAuthentication = import("./consoleAuthentication").ConsoleAuthentication;
export const ConsoleAuthentication: typeof import("./consoleAuthentication").ConsoleAuthentication = null as any;
utilities.lazyLoad(exports, ["ConsoleAuthentication"], () => require("./consoleAuthentication"));

export { ContractArgs, ContractState } from "./contract";
export type Contract = import("./contract").Contract;
export const Contract: typeof import("./contract").Contract = null as any;
utilities.lazyLoad(exports, ["Contract"], () => require("./contract"));

export { ContractSubjectArgs, ContractSubjectState } from "./contractSubject";
export type ContractSubject = import("./contractSubject").ContractSubject;
export const ContractSubject: typeof import("./contractSubject").ContractSubject = null as any;
utilities.lazyLoad(exports, ["ContractSubject"], () => require("./contractSubject"));

export { ContractSubjectFilterArgs, ContractSubjectFilterState } from "./contractSubjectFilter";
export type ContractSubjectFilter = import("./contractSubjectFilter").ContractSubjectFilter;
export const ContractSubjectFilter: typeof import("./contractSubjectFilter").ContractSubjectFilter = null as any;
utilities.lazyLoad(exports, ["ContractSubjectFilter"], () => require("./contractSubjectFilter"));

export { ContractSubjectOneWayFilterArgs, ContractSubjectOneWayFilterState } from "./contractSubjectOneWayFilter";
export type ContractSubjectOneWayFilter = import("./contractSubjectOneWayFilter").ContractSubjectOneWayFilter;
export const ContractSubjectOneWayFilter: typeof import("./contractSubjectOneWayFilter").ContractSubjectOneWayFilter = null as any;
utilities.lazyLoad(exports, ["ContractSubjectOneWayFilter"], () => require("./contractSubjectOneWayFilter"));

export { CoopPolicyArgs, CoopPolicyState } from "./coopPolicy";
export type CoopPolicy = import("./coopPolicy").CoopPolicy;
export const CoopPolicy: typeof import("./coopPolicy").CoopPolicy = null as any;
utilities.lazyLoad(exports, ["CoopPolicy"], () => require("./coopPolicy"));

export { DefaultAuthenticationArgs, DefaultAuthenticationState } from "./defaultAuthentication";
export type DefaultAuthentication = import("./defaultAuthentication").DefaultAuthentication;
export const DefaultAuthentication: typeof import("./defaultAuthentication").DefaultAuthentication = null as any;
utilities.lazyLoad(exports, ["DefaultAuthentication"], () => require("./defaultAuthentication"));

export { DestinationOfRedirectedTrafficArgs, DestinationOfRedirectedTrafficState } from "./destinationOfRedirectedTraffic";
export type DestinationOfRedirectedTraffic = import("./destinationOfRedirectedTraffic").DestinationOfRedirectedTraffic;
export const DestinationOfRedirectedTraffic: typeof import("./destinationOfRedirectedTraffic").DestinationOfRedirectedTraffic = null as any;
utilities.lazyLoad(exports, ["DestinationOfRedirectedTraffic"], () => require("./destinationOfRedirectedTraffic"));

export { DhcpOptionPolicyArgs, DhcpOptionPolicyState } from "./dhcpOptionPolicy";
export type DhcpOptionPolicy = import("./dhcpOptionPolicy").DhcpOptionPolicy;
export const DhcpOptionPolicy: typeof import("./dhcpOptionPolicy").DhcpOptionPolicy = null as any;
utilities.lazyLoad(exports, ["DhcpOptionPolicy"], () => require("./dhcpOptionPolicy"));

export { DhcpRelayPolicyArgs, DhcpRelayPolicyState } from "./dhcpRelayPolicy";
export type DhcpRelayPolicy = import("./dhcpRelayPolicy").DhcpRelayPolicy;
export const DhcpRelayPolicy: typeof import("./dhcpRelayPolicy").DhcpRelayPolicy = null as any;
utilities.lazyLoad(exports, ["DhcpRelayPolicy"], () => require("./dhcpRelayPolicy"));

export { DuoProviderGroupArgs, DuoProviderGroupState } from "./duoProviderGroup";
export type DuoProviderGroup = import("./duoProviderGroup").DuoProviderGroup;
export const DuoProviderGroup: typeof import("./duoProviderGroup").DuoProviderGroup = null as any;
utilities.lazyLoad(exports, ["DuoProviderGroup"], () => require("./duoProviderGroup"));

export { EncryptionKeyArgs, EncryptionKeyState } from "./encryptionKey";
export type EncryptionKey = import("./encryptionKey").EncryptionKey;
export const EncryptionKey: typeof import("./encryptionKey").EncryptionKey = null as any;
utilities.lazyLoad(exports, ["EncryptionKey"], () => require("./encryptionKey"));

export { EndPointRetentionPolicyArgs, EndPointRetentionPolicyState } from "./endPointRetentionPolicy";
export type EndPointRetentionPolicy = import("./endPointRetentionPolicy").EndPointRetentionPolicy;
export const EndPointRetentionPolicy: typeof import("./endPointRetentionPolicy").EndPointRetentionPolicy = null as any;
utilities.lazyLoad(exports, ["EndPointRetentionPolicy"], () => require("./endPointRetentionPolicy"));

export { EndpointControlsArgs, EndpointControlsState } from "./endpointControls";
export type EndpointControls = import("./endpointControls").EndpointControls;
export const EndpointControls: typeof import("./endpointControls").EndpointControls = null as any;
utilities.lazyLoad(exports, ["EndpointControls"], () => require("./endpointControls"));

export { EndpointIpAgingProfileArgs, EndpointIpAgingProfileState } from "./endpointIpAgingProfile";
export type EndpointIpAgingProfile = import("./endpointIpAgingProfile").EndpointIpAgingProfile;
export const EndpointIpAgingProfile: typeof import("./endpointIpAgingProfile").EndpointIpAgingProfile = null as any;
utilities.lazyLoad(exports, ["EndpointIpAgingProfile"], () => require("./endpointIpAgingProfile"));

export { EndpointLoopProtectionArgs, EndpointLoopProtectionState } from "./endpointLoopProtection";
export type EndpointLoopProtection = import("./endpointLoopProtection").EndpointLoopProtection;
export const EndpointLoopProtection: typeof import("./endpointLoopProtection").EndpointLoopProtection = null as any;
utilities.lazyLoad(exports, ["EndpointLoopProtection"], () => require("./endpointLoopProtection"));

export { EndpointSecurityGroupArgs, EndpointSecurityGroupState } from "./endpointSecurityGroup";
export type EndpointSecurityGroup = import("./endpointSecurityGroup").EndpointSecurityGroup;
export const EndpointSecurityGroup: typeof import("./endpointSecurityGroup").EndpointSecurityGroup = null as any;
utilities.lazyLoad(exports, ["EndpointSecurityGroup"], () => require("./endpointSecurityGroup"));

export { EndpointSecurityGroupEpgSelectorArgs, EndpointSecurityGroupEpgSelectorState } from "./endpointSecurityGroupEpgSelector";
export type EndpointSecurityGroupEpgSelector = import("./endpointSecurityGroupEpgSelector").EndpointSecurityGroupEpgSelector;
export const EndpointSecurityGroupEpgSelector: typeof import("./endpointSecurityGroupEpgSelector").EndpointSecurityGroupEpgSelector = null as any;
utilities.lazyLoad(exports, ["EndpointSecurityGroupEpgSelector"], () => require("./endpointSecurityGroupEpgSelector"));

export { EndpointSecurityGroupSelectorArgs, EndpointSecurityGroupSelectorState } from "./endpointSecurityGroupSelector";
export type EndpointSecurityGroupSelector = import("./endpointSecurityGroupSelector").EndpointSecurityGroupSelector;
export const EndpointSecurityGroupSelector: typeof import("./endpointSecurityGroupSelector").EndpointSecurityGroupSelector = null as any;
utilities.lazyLoad(exports, ["EndpointSecurityGroupSelector"], () => require("./endpointSecurityGroupSelector"));

export { EndpointSecurityGroupTagSelectorArgs, EndpointSecurityGroupTagSelectorState } from "./endpointSecurityGroupTagSelector";
export type EndpointSecurityGroupTagSelector = import("./endpointSecurityGroupTagSelector").EndpointSecurityGroupTagSelector;
export const EndpointSecurityGroupTagSelector: typeof import("./endpointSecurityGroupTagSelector").EndpointSecurityGroupTagSelector = null as any;
utilities.lazyLoad(exports, ["EndpointSecurityGroupTagSelector"], () => require("./endpointSecurityGroupTagSelector"));

export { EndpointTagIpArgs, EndpointTagIpState } from "./endpointTagIp";
export type EndpointTagIp = import("./endpointTagIp").EndpointTagIp;
export const EndpointTagIp: typeof import("./endpointTagIp").EndpointTagIp = null as any;
utilities.lazyLoad(exports, ["EndpointTagIp"], () => require("./endpointTagIp"));

export { EndpointTagMacArgs, EndpointTagMacState } from "./endpointTagMac";
export type EndpointTagMac = import("./endpointTagMac").EndpointTagMac;
export const EndpointTagMac: typeof import("./endpointTagMac").EndpointTagMac = null as any;
utilities.lazyLoad(exports, ["EndpointTagMac"], () => require("./endpointTagMac"));

export { EpgToContractArgs, EpgToContractState } from "./epgToContract";
export type EpgToContract = import("./epgToContract").EpgToContract;
export const EpgToContract: typeof import("./epgToContract").EpgToContract = null as any;
utilities.lazyLoad(exports, ["EpgToContract"], () => require("./epgToContract"));

export { EpgToContractInterfaceArgs, EpgToContractInterfaceState } from "./epgToContractInterface";
export type EpgToContractInterface = import("./epgToContractInterface").EpgToContractInterface;
export const EpgToContractInterface: typeof import("./epgToContractInterface").EpgToContractInterface = null as any;
utilities.lazyLoad(exports, ["EpgToContractInterface"], () => require("./epgToContractInterface"));

export { EpgToDomainArgs, EpgToDomainState } from "./epgToDomain";
export type EpgToDomain = import("./epgToDomain").EpgToDomain;
export const EpgToDomain: typeof import("./epgToDomain").EpgToDomain = null as any;
utilities.lazyLoad(exports, ["EpgToDomain"], () => require("./epgToDomain"));

export { EpgToStaticPathArgs, EpgToStaticPathState } from "./epgToStaticPath";
export type EpgToStaticPath = import("./epgToStaticPath").EpgToStaticPath;
export const EpgToStaticPath: typeof import("./epgToStaticPath").EpgToStaticPath = null as any;
utilities.lazyLoad(exports, ["EpgToStaticPath"], () => require("./epgToStaticPath"));

export { EpgsUsingFunctionArgs, EpgsUsingFunctionState } from "./epgsUsingFunction";
export type EpgsUsingFunction = import("./epgsUsingFunction").EpgsUsingFunction;
export const EpgsUsingFunction: typeof import("./epgsUsingFunction").EpgsUsingFunction = null as any;
utilities.lazyLoad(exports, ["EpgsUsingFunction"], () => require("./epgsUsingFunction"));

export { ErrorDisableRecoveryArgs, ErrorDisableRecoveryState } from "./errorDisableRecovery";
export type ErrorDisableRecovery = import("./errorDisableRecovery").ErrorDisableRecovery;
export const ErrorDisableRecovery: typeof import("./errorDisableRecovery").ErrorDisableRecovery = null as any;
utilities.lazyLoad(exports, ["ErrorDisableRecovery"], () => require("./errorDisableRecovery"));

export { ExternalManagementNetworkInstanceProfileArgs, ExternalManagementNetworkInstanceProfileState } from "./externalManagementNetworkInstanceProfile";
export type ExternalManagementNetworkInstanceProfile = import("./externalManagementNetworkInstanceProfile").ExternalManagementNetworkInstanceProfile;
export const ExternalManagementNetworkInstanceProfile: typeof import("./externalManagementNetworkInstanceProfile").ExternalManagementNetworkInstanceProfile = null as any;
utilities.lazyLoad(exports, ["ExternalManagementNetworkInstanceProfile"], () => require("./externalManagementNetworkInstanceProfile"));

export { ExternalManagementNetworkSubnetArgs, ExternalManagementNetworkSubnetState } from "./externalManagementNetworkSubnet";
export type ExternalManagementNetworkSubnet = import("./externalManagementNetworkSubnet").ExternalManagementNetworkSubnet;
export const ExternalManagementNetworkSubnet: typeof import("./externalManagementNetworkSubnet").ExternalManagementNetworkSubnet = null as any;
utilities.lazyLoad(exports, ["ExternalManagementNetworkSubnet"], () => require("./externalManagementNetworkSubnet"));

export { ExternalNetworkInstanceProfileArgs, ExternalNetworkInstanceProfileState } from "./externalNetworkInstanceProfile";
export type ExternalNetworkInstanceProfile = import("./externalNetworkInstanceProfile").ExternalNetworkInstanceProfile;
export const ExternalNetworkInstanceProfile: typeof import("./externalNetworkInstanceProfile").ExternalNetworkInstanceProfile = null as any;
utilities.lazyLoad(exports, ["ExternalNetworkInstanceProfile"], () => require("./externalNetworkInstanceProfile"));

export { FabricIfPolArgs, FabricIfPolState } from "./fabricIfPol";
export type FabricIfPol = import("./fabricIfPol").FabricIfPol;
export const FabricIfPol: typeof import("./fabricIfPol").FabricIfPol = null as any;
utilities.lazyLoad(exports, ["FabricIfPol"], () => require("./fabricIfPol"));

export { FabricNodeControlArgs, FabricNodeControlState } from "./fabricNodeControl";
export type FabricNodeControl = import("./fabricNodeControl").FabricNodeControl;
export const FabricNodeControl: typeof import("./fabricNodeControl").FabricNodeControl = null as any;
utilities.lazyLoad(exports, ["FabricNodeControl"], () => require("./fabricNodeControl"));

export { FabricNodeMemberArgs, FabricNodeMemberState } from "./fabricNodeMember";
export type FabricNodeMember = import("./fabricNodeMember").FabricNodeMember;
export const FabricNodeMember: typeof import("./fabricNodeMember").FabricNodeMember = null as any;
utilities.lazyLoad(exports, ["FabricNodeMember"], () => require("./fabricNodeMember"));

export { FabricWideSettingsArgs, FabricWideSettingsState } from "./fabricWideSettings";
export type FabricWideSettings = import("./fabricWideSettings").FabricWideSettings;
export const FabricWideSettings: typeof import("./fabricWideSettings").FabricWideSettings = null as any;
utilities.lazyLoad(exports, ["FabricWideSettings"], () => require("./fabricWideSettings"));

export { FcDomainArgs, FcDomainState } from "./fcDomain";
export type FcDomain = import("./fcDomain").FcDomain;
export const FcDomain: typeof import("./fcDomain").FcDomain = null as any;
utilities.lazyLoad(exports, ["FcDomain"], () => require("./fcDomain"));

export { FexBundleGroupArgs, FexBundleGroupState } from "./fexBundleGroup";
export type FexBundleGroup = import("./fexBundleGroup").FexBundleGroup;
export const FexBundleGroup: typeof import("./fexBundleGroup").FexBundleGroup = null as any;
utilities.lazyLoad(exports, ["FexBundleGroup"], () => require("./fexBundleGroup"));

export { FexProfileArgs, FexProfileState } from "./fexProfile";
export type FexProfile = import("./fexProfile").FexProfile;
export const FexProfile: typeof import("./fexProfile").FexProfile = null as any;
utilities.lazyLoad(exports, ["FexProfile"], () => require("./fexProfile"));

export { FileRemotePathArgs, FileRemotePathState } from "./fileRemotePath";
export type FileRemotePath = import("./fileRemotePath").FileRemotePath;
export const FileRemotePath: typeof import("./fileRemotePath").FileRemotePath = null as any;
utilities.lazyLoad(exports, ["FileRemotePath"], () => require("./fileRemotePath"));

export { FilterArgs, FilterState } from "./filter";
export type Filter = import("./filter").Filter;
export const Filter: typeof import("./filter").Filter = null as any;
utilities.lazyLoad(exports, ["Filter"], () => require("./filter"));

export { FilterEntryArgs, FilterEntryState } from "./filterEntry";
export type FilterEntry = import("./filterEntry").FilterEntry;
export const FilterEntry: typeof import("./filterEntry").FilterEntry = null as any;
utilities.lazyLoad(exports, ["FilterEntry"], () => require("./filterEntry"));

export { FirmwareDownloadTaskArgs, FirmwareDownloadTaskState } from "./firmwareDownloadTask";
export type FirmwareDownloadTask = import("./firmwareDownloadTask").FirmwareDownloadTask;
export const FirmwareDownloadTask: typeof import("./firmwareDownloadTask").FirmwareDownloadTask = null as any;
utilities.lazyLoad(exports, ["FirmwareDownloadTask"], () => require("./firmwareDownloadTask"));

export { FirmwareGroupArgs, FirmwareGroupState } from "./firmwareGroup";
export type FirmwareGroup = import("./firmwareGroup").FirmwareGroup;
export const FirmwareGroup: typeof import("./firmwareGroup").FirmwareGroup = null as any;
utilities.lazyLoad(exports, ["FirmwareGroup"], () => require("./firmwareGroup"));

export { FirmwarePolicyArgs, FirmwarePolicyState } from "./firmwarePolicy";
export type FirmwarePolicy = import("./firmwarePolicy").FirmwarePolicy;
export const FirmwarePolicy: typeof import("./firmwarePolicy").FirmwarePolicy = null as any;
utilities.lazyLoad(exports, ["FirmwarePolicy"], () => require("./firmwarePolicy"));

export { FunctionNodeArgs, FunctionNodeState } from "./functionNode";
export type FunctionNode = import("./functionNode").FunctionNode;
export const FunctionNode: typeof import("./functionNode").FunctionNode = null as any;
utilities.lazyLoad(exports, ["FunctionNode"], () => require("./functionNode"));

export { GetAaaDomainArgs, GetAaaDomainResult, GetAaaDomainOutputArgs } from "./getAaaDomain";
export const getAaaDomain: typeof import("./getAaaDomain").getAaaDomain = null as any;
export const getAaaDomainOutput: typeof import("./getAaaDomain").getAaaDomainOutput = null as any;
utilities.lazyLoad(exports, ["getAaaDomain","getAaaDomainOutput"], () => require("./getAaaDomain"));

export { GetAaaDomainRelationshipArgs, GetAaaDomainRelationshipResult, GetAaaDomainRelationshipOutputArgs } from "./getAaaDomainRelationship";
export const getAaaDomainRelationship: typeof import("./getAaaDomainRelationship").getAaaDomainRelationship = null as any;
export const getAaaDomainRelationshipOutput: typeof import("./getAaaDomainRelationship").getAaaDomainRelationshipOutput = null as any;
utilities.lazyLoad(exports, ["getAaaDomainRelationship","getAaaDomainRelationshipOutput"], () => require("./getAaaDomainRelationship"));

export { GetAaepToDomainArgs, GetAaepToDomainResult, GetAaepToDomainOutputArgs } from "./getAaepToDomain";
export const getAaepToDomain: typeof import("./getAaepToDomain").getAaepToDomain = null as any;
export const getAaepToDomainOutput: typeof import("./getAaepToDomain").getAaepToDomainOutput = null as any;
utilities.lazyLoad(exports, ["getAaepToDomain","getAaepToDomainOutput"], () => require("./getAaepToDomain"));

export { GetAccessGenericArgs, GetAccessGenericResult, GetAccessGenericOutputArgs } from "./getAccessGeneric";
export const getAccessGeneric: typeof import("./getAccessGeneric").getAccessGeneric = null as any;
export const getAccessGenericOutput: typeof import("./getAccessGeneric").getAccessGenericOutput = null as any;
utilities.lazyLoad(exports, ["getAccessGeneric","getAccessGenericOutput"], () => require("./getAccessGeneric"));

export { GetAccessGroupArgs, GetAccessGroupResult, GetAccessGroupOutputArgs } from "./getAccessGroup";
export const getAccessGroup: typeof import("./getAccessGroup").getAccessGroup = null as any;
export const getAccessGroupOutput: typeof import("./getAccessGroup").getAccessGroupOutput = null as any;
utilities.lazyLoad(exports, ["getAccessGroup","getAccessGroupOutput"], () => require("./getAccessGroup"));

export { GetAccessPortBlockArgs, GetAccessPortBlockResult, GetAccessPortBlockOutputArgs } from "./getAccessPortBlock";
export const getAccessPortBlock: typeof import("./getAccessPortBlock").getAccessPortBlock = null as any;
export const getAccessPortBlockOutput: typeof import("./getAccessPortBlock").getAccessPortBlockOutput = null as any;
utilities.lazyLoad(exports, ["getAccessPortBlock","getAccessPortBlockOutput"], () => require("./getAccessPortBlock"));

export { GetAccessPortSelectorArgs, GetAccessPortSelectorResult, GetAccessPortSelectorOutputArgs } from "./getAccessPortSelector";
export const getAccessPortSelector: typeof import("./getAccessPortSelector").getAccessPortSelector = null as any;
export const getAccessPortSelectorOutput: typeof import("./getAccessPortSelector").getAccessPortSelectorOutput = null as any;
utilities.lazyLoad(exports, ["getAccessPortSelector","getAccessPortSelectorOutput"], () => require("./getAccessPortSelector"));

export { GetAccessSubPortBlockArgs, GetAccessSubPortBlockResult, GetAccessSubPortBlockOutputArgs } from "./getAccessSubPortBlock";
export const getAccessSubPortBlock: typeof import("./getAccessSubPortBlock").getAccessSubPortBlock = null as any;
export const getAccessSubPortBlockOutput: typeof import("./getAccessSubPortBlock").getAccessSubPortBlockOutput = null as any;
utilities.lazyLoad(exports, ["getAccessSubPortBlock","getAccessSubPortBlockOutput"], () => require("./getAccessSubPortBlock"));

export { GetAccessSwitchPolicyGroupArgs, GetAccessSwitchPolicyGroupResult, GetAccessSwitchPolicyGroupOutputArgs } from "./getAccessSwitchPolicyGroup";
export const getAccessSwitchPolicyGroup: typeof import("./getAccessSwitchPolicyGroup").getAccessSwitchPolicyGroup = null as any;
export const getAccessSwitchPolicyGroupOutput: typeof import("./getAccessSwitchPolicyGroup").getAccessSwitchPolicyGroupOutput = null as any;
utilities.lazyLoad(exports, ["getAccessSwitchPolicyGroup","getAccessSwitchPolicyGroupOutput"], () => require("./getAccessSwitchPolicyGroup"));

export { GetActionRuleAdditionalCommunitiesArgs, GetActionRuleAdditionalCommunitiesResult, GetActionRuleAdditionalCommunitiesOutputArgs } from "./getActionRuleAdditionalCommunities";
export const getActionRuleAdditionalCommunities: typeof import("./getActionRuleAdditionalCommunities").getActionRuleAdditionalCommunities = null as any;
export const getActionRuleAdditionalCommunitiesOutput: typeof import("./getActionRuleAdditionalCommunities").getActionRuleAdditionalCommunitiesOutput = null as any;
utilities.lazyLoad(exports, ["getActionRuleAdditionalCommunities","getActionRuleAdditionalCommunitiesOutput"], () => require("./getActionRuleAdditionalCommunities"));

export { GetActionRuleProfileArgs, GetActionRuleProfileResult, GetActionRuleProfileOutputArgs } from "./getActionRuleProfile";
export const getActionRuleProfile: typeof import("./getActionRuleProfile").getActionRuleProfile = null as any;
export const getActionRuleProfileOutput: typeof import("./getActionRuleProfile").getActionRuleProfileOutput = null as any;
utilities.lazyLoad(exports, ["getActionRuleProfile","getActionRuleProfileOutput"], () => require("./getActionRuleProfile"));

export { GetAnnotationArgs, GetAnnotationResult, GetAnnotationOutputArgs } from "./getAnnotation";
export const getAnnotation: typeof import("./getAnnotation").getAnnotation = null as any;
export const getAnnotationOutput: typeof import("./getAnnotation").getAnnotationOutput = null as any;
utilities.lazyLoad(exports, ["getAnnotation","getAnnotationOutput"], () => require("./getAnnotation"));

export { GetAnyArgs, GetAnyResult, GetAnyOutputArgs } from "./getAny";
export const getAny: typeof import("./getAny").getAny = null as any;
export const getAnyOutput: typeof import("./getAny").getAnyOutput = null as any;
utilities.lazyLoad(exports, ["getAny","getAnyOutput"], () => require("./getAny"));

export { GetApplicationEpgArgs, GetApplicationEpgResult, GetApplicationEpgOutputArgs } from "./getApplicationEpg";
export const getApplicationEpg: typeof import("./getApplicationEpg").getApplicationEpg = null as any;
export const getApplicationEpgOutput: typeof import("./getApplicationEpg").getApplicationEpgOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationEpg","getApplicationEpgOutput"], () => require("./getApplicationEpg"));

export { GetApplicationProfileArgs, GetApplicationProfileResult, GetApplicationProfileOutputArgs } from "./getApplicationProfile";
export const getApplicationProfile: typeof import("./getApplicationProfile").getApplicationProfile = null as any;
export const getApplicationProfileOutput: typeof import("./getApplicationProfile").getApplicationProfileOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationProfile","getApplicationProfileOutput"], () => require("./getApplicationProfile"));

export { GetAttachableAccessEntityProfileArgs, GetAttachableAccessEntityProfileResult, GetAttachableAccessEntityProfileOutputArgs } from "./getAttachableAccessEntityProfile";
export const getAttachableAccessEntityProfile: typeof import("./getAttachableAccessEntityProfile").getAttachableAccessEntityProfile = null as any;
export const getAttachableAccessEntityProfileOutput: typeof import("./getAttachableAccessEntityProfile").getAttachableAccessEntityProfileOutput = null as any;
utilities.lazyLoad(exports, ["getAttachableAccessEntityProfile","getAttachableAccessEntityProfileOutput"], () => require("./getAttachableAccessEntityProfile"));

export { GetAuthenticationPropertiesArgs, GetAuthenticationPropertiesResult, GetAuthenticationPropertiesOutputArgs } from "./getAuthenticationProperties";
export const getAuthenticationProperties: typeof import("./getAuthenticationProperties").getAuthenticationProperties = null as any;
export const getAuthenticationPropertiesOutput: typeof import("./getAuthenticationProperties").getAuthenticationPropertiesOutput = null as any;
utilities.lazyLoad(exports, ["getAuthenticationProperties","getAuthenticationPropertiesOutput"], () => require("./getAuthenticationProperties"));

export { GetAutonomousSystemProfileArgs, GetAutonomousSystemProfileResult, GetAutonomousSystemProfileOutputArgs } from "./getAutonomousSystemProfile";
export const getAutonomousSystemProfile: typeof import("./getAutonomousSystemProfile").getAutonomousSystemProfile = null as any;
export const getAutonomousSystemProfileOutput: typeof import("./getAutonomousSystemProfile").getAutonomousSystemProfileOutput = null as any;
utilities.lazyLoad(exports, ["getAutonomousSystemProfile","getAutonomousSystemProfileOutput"], () => require("./getAutonomousSystemProfile"));

export { GetBdDhcpLabelArgs, GetBdDhcpLabelResult, GetBdDhcpLabelOutputArgs } from "./getBdDhcpLabel";
export const getBdDhcpLabel: typeof import("./getBdDhcpLabel").getBdDhcpLabel = null as any;
export const getBdDhcpLabelOutput: typeof import("./getBdDhcpLabel").getBdDhcpLabelOutput = null as any;
utilities.lazyLoad(exports, ["getBdDhcpLabel","getBdDhcpLabelOutput"], () => require("./getBdDhcpLabel"));

export { GetBfdInterfacePolicyArgs, GetBfdInterfacePolicyResult, GetBfdInterfacePolicyOutputArgs } from "./getBfdInterfacePolicy";
export const getBfdInterfacePolicy: typeof import("./getBfdInterfacePolicy").getBfdInterfacePolicy = null as any;
export const getBfdInterfacePolicyOutput: typeof import("./getBfdInterfacePolicy").getBfdInterfacePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getBfdInterfacePolicy","getBfdInterfacePolicyOutput"], () => require("./getBfdInterfacePolicy"));

export { GetBfdMultihopInterfacePolicyArgs, GetBfdMultihopInterfacePolicyResult, GetBfdMultihopInterfacePolicyOutputArgs } from "./getBfdMultihopInterfacePolicy";
export const getBfdMultihopInterfacePolicy: typeof import("./getBfdMultihopInterfacePolicy").getBfdMultihopInterfacePolicy = null as any;
export const getBfdMultihopInterfacePolicyOutput: typeof import("./getBfdMultihopInterfacePolicy").getBfdMultihopInterfacePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getBfdMultihopInterfacePolicy","getBfdMultihopInterfacePolicyOutput"], () => require("./getBfdMultihopInterfacePolicy"));

export { GetBfdMultihopInterfaceProfileArgs, GetBfdMultihopInterfaceProfileResult, GetBfdMultihopInterfaceProfileOutputArgs } from "./getBfdMultihopInterfaceProfile";
export const getBfdMultihopInterfaceProfile: typeof import("./getBfdMultihopInterfaceProfile").getBfdMultihopInterfaceProfile = null as any;
export const getBfdMultihopInterfaceProfileOutput: typeof import("./getBfdMultihopInterfaceProfile").getBfdMultihopInterfaceProfileOutput = null as any;
utilities.lazyLoad(exports, ["getBfdMultihopInterfaceProfile","getBfdMultihopInterfaceProfileOutput"], () => require("./getBfdMultihopInterfaceProfile"));

export { GetBfdMultihopNodePolicyArgs, GetBfdMultihopNodePolicyResult, GetBfdMultihopNodePolicyOutputArgs } from "./getBfdMultihopNodePolicy";
export const getBfdMultihopNodePolicy: typeof import("./getBfdMultihopNodePolicy").getBfdMultihopNodePolicy = null as any;
export const getBfdMultihopNodePolicyOutput: typeof import("./getBfdMultihopNodePolicy").getBfdMultihopNodePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getBfdMultihopNodePolicy","getBfdMultihopNodePolicyOutput"], () => require("./getBfdMultihopNodePolicy"));

export { GetBgpAddressFamilyContextArgs, GetBgpAddressFamilyContextResult, GetBgpAddressFamilyContextOutputArgs } from "./getBgpAddressFamilyContext";
export const getBgpAddressFamilyContext: typeof import("./getBgpAddressFamilyContext").getBgpAddressFamilyContext = null as any;
export const getBgpAddressFamilyContextOutput: typeof import("./getBgpAddressFamilyContext").getBgpAddressFamilyContextOutput = null as any;
utilities.lazyLoad(exports, ["getBgpAddressFamilyContext","getBgpAddressFamilyContextOutput"], () => require("./getBgpAddressFamilyContext"));

export { GetBgpBestPathPolicyArgs, GetBgpBestPathPolicyResult, GetBgpBestPathPolicyOutputArgs } from "./getBgpBestPathPolicy";
export const getBgpBestPathPolicy: typeof import("./getBgpBestPathPolicy").getBgpBestPathPolicy = null as any;
export const getBgpBestPathPolicyOutput: typeof import("./getBgpBestPathPolicy").getBgpBestPathPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getBgpBestPathPolicy","getBgpBestPathPolicyOutput"], () => require("./getBgpBestPathPolicy"));

export { GetBgpPeerConnectivityProfileArgs, GetBgpPeerConnectivityProfileResult, GetBgpPeerConnectivityProfileOutputArgs } from "./getBgpPeerConnectivityProfile";
export const getBgpPeerConnectivityProfile: typeof import("./getBgpPeerConnectivityProfile").getBgpPeerConnectivityProfile = null as any;
export const getBgpPeerConnectivityProfileOutput: typeof import("./getBgpPeerConnectivityProfile").getBgpPeerConnectivityProfileOutput = null as any;
utilities.lazyLoad(exports, ["getBgpPeerConnectivityProfile","getBgpPeerConnectivityProfileOutput"], () => require("./getBgpPeerConnectivityProfile"));

export { GetBgpPeerPrefixArgs, GetBgpPeerPrefixResult, GetBgpPeerPrefixOutputArgs } from "./getBgpPeerPrefix";
export const getBgpPeerPrefix: typeof import("./getBgpPeerPrefix").getBgpPeerPrefix = null as any;
export const getBgpPeerPrefixOutput: typeof import("./getBgpPeerPrefix").getBgpPeerPrefixOutput = null as any;
utilities.lazyLoad(exports, ["getBgpPeerPrefix","getBgpPeerPrefixOutput"], () => require("./getBgpPeerPrefix"));

export { GetBgpRouteControlProfileArgs, GetBgpRouteControlProfileResult, GetBgpRouteControlProfileOutputArgs } from "./getBgpRouteControlProfile";
export const getBgpRouteControlProfile: typeof import("./getBgpRouteControlProfile").getBgpRouteControlProfile = null as any;
export const getBgpRouteControlProfileOutput: typeof import("./getBgpRouteControlProfile").getBgpRouteControlProfileOutput = null as any;
utilities.lazyLoad(exports, ["getBgpRouteControlProfile","getBgpRouteControlProfileOutput"], () => require("./getBgpRouteControlProfile"));

export { GetBgpRouteSummarizationArgs, GetBgpRouteSummarizationResult, GetBgpRouteSummarizationOutputArgs } from "./getBgpRouteSummarization";
export const getBgpRouteSummarization: typeof import("./getBgpRouteSummarization").getBgpRouteSummarization = null as any;
export const getBgpRouteSummarizationOutput: typeof import("./getBgpRouteSummarization").getBgpRouteSummarizationOutput = null as any;
utilities.lazyLoad(exports, ["getBgpRouteSummarization","getBgpRouteSummarizationOutput"], () => require("./getBgpRouteSummarization"));

export { GetBgpTimersArgs, GetBgpTimersResult, GetBgpTimersOutputArgs } from "./getBgpTimers";
export const getBgpTimers: typeof import("./getBgpTimers").getBgpTimers = null as any;
export const getBgpTimersOutput: typeof import("./getBgpTimers").getBgpTimersOutput = null as any;
utilities.lazyLoad(exports, ["getBgpTimers","getBgpTimersOutput"], () => require("./getBgpTimers"));

export { GetBridgeDomainArgs, GetBridgeDomainResult, GetBridgeDomainOutputArgs } from "./getBridgeDomain";
export const getBridgeDomain: typeof import("./getBridgeDomain").getBridgeDomain = null as any;
export const getBridgeDomainOutput: typeof import("./getBridgeDomain").getBridgeDomainOutput = null as any;
utilities.lazyLoad(exports, ["getBridgeDomain","getBridgeDomainOutput"], () => require("./getBridgeDomain"));

export { GetCdpInterfacePolicyArgs, GetCdpInterfacePolicyResult, GetCdpInterfacePolicyOutputArgs } from "./getCdpInterfacePolicy";
export const getCdpInterfacePolicy: typeof import("./getCdpInterfacePolicy").getCdpInterfacePolicy = null as any;
export const getCdpInterfacePolicyOutput: typeof import("./getCdpInterfacePolicy").getCdpInterfacePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getCdpInterfacePolicy","getCdpInterfacePolicyOutput"], () => require("./getCdpInterfacePolicy"));

export { GetClientEndPointArgs, GetClientEndPointResult, GetClientEndPointOutputArgs } from "./getClientEndPoint";
export const getClientEndPoint: typeof import("./getClientEndPoint").getClientEndPoint = null as any;
export const getClientEndPointOutput: typeof import("./getClientEndPoint").getClientEndPointOutput = null as any;
utilities.lazyLoad(exports, ["getClientEndPoint","getClientEndPointOutput"], () => require("./getClientEndPoint"));

export { GetCloudAccountArgs, GetCloudAccountResult, GetCloudAccountOutputArgs } from "./getCloudAccount";
export const getCloudAccount: typeof import("./getCloudAccount").getCloudAccount = null as any;
export const getCloudAccountOutput: typeof import("./getCloudAccount").getCloudAccountOutput = null as any;
utilities.lazyLoad(exports, ["getCloudAccount","getCloudAccountOutput"], () => require("./getCloudAccount"));

export { GetCloudAdArgs, GetCloudAdResult, GetCloudAdOutputArgs } from "./getCloudAd";
export const getCloudAd: typeof import("./getCloudAd").getCloudAd = null as any;
export const getCloudAdOutput: typeof import("./getCloudAd").getCloudAdOutput = null as any;
utilities.lazyLoad(exports, ["getCloudAd","getCloudAdOutput"], () => require("./getCloudAd"));

export { GetCloudApplicationcontainerArgs, GetCloudApplicationcontainerResult, GetCloudApplicationcontainerOutputArgs } from "./getCloudApplicationcontainer";
export const getCloudApplicationcontainer: typeof import("./getCloudApplicationcontainer").getCloudApplicationcontainer = null as any;
export const getCloudApplicationcontainerOutput: typeof import("./getCloudApplicationcontainer").getCloudApplicationcontainerOutput = null as any;
utilities.lazyLoad(exports, ["getCloudApplicationcontainer","getCloudApplicationcontainerOutput"], () => require("./getCloudApplicationcontainer"));

export { GetCloudAvailabilityZoneArgs, GetCloudAvailabilityZoneResult, GetCloudAvailabilityZoneOutputArgs } from "./getCloudAvailabilityZone";
export const getCloudAvailabilityZone: typeof import("./getCloudAvailabilityZone").getCloudAvailabilityZone = null as any;
export const getCloudAvailabilityZoneOutput: typeof import("./getCloudAvailabilityZone").getCloudAvailabilityZoneOutput = null as any;
utilities.lazyLoad(exports, ["getCloudAvailabilityZone","getCloudAvailabilityZoneOutput"], () => require("./getCloudAvailabilityZone"));

export { GetCloudAwsProviderArgs, GetCloudAwsProviderResult, GetCloudAwsProviderOutputArgs } from "./getCloudAwsProvider";
export const getCloudAwsProvider: typeof import("./getCloudAwsProvider").getCloudAwsProvider = null as any;
export const getCloudAwsProviderOutput: typeof import("./getCloudAwsProvider").getCloudAwsProviderOutput = null as any;
utilities.lazyLoad(exports, ["getCloudAwsProvider","getCloudAwsProviderOutput"], () => require("./getCloudAwsProvider"));

export { GetCloudCidrPoolArgs, GetCloudCidrPoolResult, GetCloudCidrPoolOutputArgs } from "./getCloudCidrPool";
export const getCloudCidrPool: typeof import("./getCloudCidrPool").getCloudCidrPool = null as any;
export const getCloudCidrPoolOutput: typeof import("./getCloudCidrPool").getCloudCidrPoolOutput = null as any;
utilities.lazyLoad(exports, ["getCloudCidrPool","getCloudCidrPoolOutput"], () => require("./getCloudCidrPool"));

export { GetCloudContextProfileArgs, GetCloudContextProfileResult, GetCloudContextProfileOutputArgs } from "./getCloudContextProfile";
export const getCloudContextProfile: typeof import("./getCloudContextProfile").getCloudContextProfile = null as any;
export const getCloudContextProfileOutput: typeof import("./getCloudContextProfile").getCloudContextProfileOutput = null as any;
utilities.lazyLoad(exports, ["getCloudContextProfile","getCloudContextProfileOutput"], () => require("./getCloudContextProfile"));

export { GetCloudCredentialsArgs, GetCloudCredentialsResult, GetCloudCredentialsOutputArgs } from "./getCloudCredentials";
export const getCloudCredentials: typeof import("./getCloudCredentials").getCloudCredentials = null as any;
export const getCloudCredentialsOutput: typeof import("./getCloudCredentials").getCloudCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudCredentials","getCloudCredentialsOutput"], () => require("./getCloudCredentials"));

export { GetCloudDomainProfileArgs, GetCloudDomainProfileResult, GetCloudDomainProfileOutputArgs } from "./getCloudDomainProfile";
export const getCloudDomainProfile: typeof import("./getCloudDomainProfile").getCloudDomainProfile = null as any;
export const getCloudDomainProfileOutput: typeof import("./getCloudDomainProfile").getCloudDomainProfileOutput = null as any;
utilities.lazyLoad(exports, ["getCloudDomainProfile","getCloudDomainProfileOutput"], () => require("./getCloudDomainProfile"));

export { GetCloudEndpointSelectorArgs, GetCloudEndpointSelectorResult, GetCloudEndpointSelectorOutputArgs } from "./getCloudEndpointSelector";
export const getCloudEndpointSelector: typeof import("./getCloudEndpointSelector").getCloudEndpointSelector = null as any;
export const getCloudEndpointSelectorOutput: typeof import("./getCloudEndpointSelector").getCloudEndpointSelectorOutput = null as any;
utilities.lazyLoad(exports, ["getCloudEndpointSelector","getCloudEndpointSelectorOutput"], () => require("./getCloudEndpointSelector"));

export { GetCloudEndpointSelectorforExternalEpgsArgs, GetCloudEndpointSelectorforExternalEpgsResult, GetCloudEndpointSelectorforExternalEpgsOutputArgs } from "./getCloudEndpointSelectorforExternalEpgs";
export const getCloudEndpointSelectorforExternalEpgs: typeof import("./getCloudEndpointSelectorforExternalEpgs").getCloudEndpointSelectorforExternalEpgs = null as any;
export const getCloudEndpointSelectorforExternalEpgsOutput: typeof import("./getCloudEndpointSelectorforExternalEpgs").getCloudEndpointSelectorforExternalEpgsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudEndpointSelectorforExternalEpgs","getCloudEndpointSelectorforExternalEpgsOutput"], () => require("./getCloudEndpointSelectorforExternalEpgs"));

export { GetCloudEpgArgs, GetCloudEpgResult, GetCloudEpgOutputArgs } from "./getCloudEpg";
export const getCloudEpg: typeof import("./getCloudEpg").getCloudEpg = null as any;
export const getCloudEpgOutput: typeof import("./getCloudEpg").getCloudEpgOutput = null as any;
utilities.lazyLoad(exports, ["getCloudEpg","getCloudEpgOutput"], () => require("./getCloudEpg"));

export { GetCloudExternalEpgArgs, GetCloudExternalEpgResult, GetCloudExternalEpgOutputArgs } from "./getCloudExternalEpg";
export const getCloudExternalEpg: typeof import("./getCloudExternalEpg").getCloudExternalEpg = null as any;
export const getCloudExternalEpgOutput: typeof import("./getCloudExternalEpg").getCloudExternalEpgOutput = null as any;
utilities.lazyLoad(exports, ["getCloudExternalEpg","getCloudExternalEpgOutput"], () => require("./getCloudExternalEpg"));

export { GetCloudExternalNetworkArgs, GetCloudExternalNetworkResult, GetCloudExternalNetworkOutputArgs } from "./getCloudExternalNetwork";
export const getCloudExternalNetwork: typeof import("./getCloudExternalNetwork").getCloudExternalNetwork = null as any;
export const getCloudExternalNetworkOutput: typeof import("./getCloudExternalNetwork").getCloudExternalNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getCloudExternalNetwork","getCloudExternalNetworkOutput"], () => require("./getCloudExternalNetwork"));

export { GetCloudExternalNetworkVpnNetworkArgs, GetCloudExternalNetworkVpnNetworkResult, GetCloudExternalNetworkVpnNetworkOutputArgs } from "./getCloudExternalNetworkVpnNetwork";
export const getCloudExternalNetworkVpnNetwork: typeof import("./getCloudExternalNetworkVpnNetwork").getCloudExternalNetworkVpnNetwork = null as any;
export const getCloudExternalNetworkVpnNetworkOutput: typeof import("./getCloudExternalNetworkVpnNetwork").getCloudExternalNetworkVpnNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getCloudExternalNetworkVpnNetwork","getCloudExternalNetworkVpnNetworkOutput"], () => require("./getCloudExternalNetworkVpnNetwork"));

export { GetCloudIpsecTunnelSubnetPoolArgs, GetCloudIpsecTunnelSubnetPoolResult, GetCloudIpsecTunnelSubnetPoolOutputArgs } from "./getCloudIpsecTunnelSubnetPool";
export const getCloudIpsecTunnelSubnetPool: typeof import("./getCloudIpsecTunnelSubnetPool").getCloudIpsecTunnelSubnetPool = null as any;
export const getCloudIpsecTunnelSubnetPoolOutput: typeof import("./getCloudIpsecTunnelSubnetPool").getCloudIpsecTunnelSubnetPoolOutput = null as any;
utilities.lazyLoad(exports, ["getCloudIpsecTunnelSubnetPool","getCloudIpsecTunnelSubnetPoolOutput"], () => require("./getCloudIpsecTunnelSubnetPool"));

export { GetCloudL4L7NativeLoadBalancerArgs, GetCloudL4L7NativeLoadBalancerResult, GetCloudL4L7NativeLoadBalancerOutputArgs } from "./getCloudL4L7NativeLoadBalancer";
export const getCloudL4L7NativeLoadBalancer: typeof import("./getCloudL4L7NativeLoadBalancer").getCloudL4L7NativeLoadBalancer = null as any;
export const getCloudL4L7NativeLoadBalancerOutput: typeof import("./getCloudL4L7NativeLoadBalancer").getCloudL4L7NativeLoadBalancerOutput = null as any;
utilities.lazyLoad(exports, ["getCloudL4L7NativeLoadBalancer","getCloudL4L7NativeLoadBalancerOutput"], () => require("./getCloudL4L7NativeLoadBalancer"));

export { GetCloudL4L7ThirdPartyDeviceArgs, GetCloudL4L7ThirdPartyDeviceResult, GetCloudL4L7ThirdPartyDeviceOutputArgs } from "./getCloudL4L7ThirdPartyDevice";
export const getCloudL4L7ThirdPartyDevice: typeof import("./getCloudL4L7ThirdPartyDevice").getCloudL4L7ThirdPartyDevice = null as any;
export const getCloudL4L7ThirdPartyDeviceOutput: typeof import("./getCloudL4L7ThirdPartyDevice").getCloudL4L7ThirdPartyDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getCloudL4L7ThirdPartyDevice","getCloudL4L7ThirdPartyDeviceOutput"], () => require("./getCloudL4L7ThirdPartyDevice"));

export { GetCloudPrivateLinkLabelArgs, GetCloudPrivateLinkLabelResult, GetCloudPrivateLinkLabelOutputArgs } from "./getCloudPrivateLinkLabel";
export const getCloudPrivateLinkLabel: typeof import("./getCloudPrivateLinkLabel").getCloudPrivateLinkLabel = null as any;
export const getCloudPrivateLinkLabelOutput: typeof import("./getCloudPrivateLinkLabel").getCloudPrivateLinkLabelOutput = null as any;
utilities.lazyLoad(exports, ["getCloudPrivateLinkLabel","getCloudPrivateLinkLabelOutput"], () => require("./getCloudPrivateLinkLabel"));

export { GetCloudProviderProfileArgs, GetCloudProviderProfileResult, GetCloudProviderProfileOutputArgs } from "./getCloudProviderProfile";
export const getCloudProviderProfile: typeof import("./getCloudProviderProfile").getCloudProviderProfile = null as any;
export const getCloudProviderProfileOutput: typeof import("./getCloudProviderProfile").getCloudProviderProfileOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProviderProfile","getCloudProviderProfileOutput"], () => require("./getCloudProviderProfile"));

export { GetCloudProvidersRegionArgs, GetCloudProvidersRegionResult, GetCloudProvidersRegionOutputArgs } from "./getCloudProvidersRegion";
export const getCloudProvidersRegion: typeof import("./getCloudProvidersRegion").getCloudProvidersRegion = null as any;
export const getCloudProvidersRegionOutput: typeof import("./getCloudProvidersRegion").getCloudProvidersRegionOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProvidersRegion","getCloudProvidersRegionOutput"], () => require("./getCloudProvidersRegion"));

export { GetCloudServiceEndpointSelectorArgs, GetCloudServiceEndpointSelectorResult, GetCloudServiceEndpointSelectorOutputArgs } from "./getCloudServiceEndpointSelector";
export const getCloudServiceEndpointSelector: typeof import("./getCloudServiceEndpointSelector").getCloudServiceEndpointSelector = null as any;
export const getCloudServiceEndpointSelectorOutput: typeof import("./getCloudServiceEndpointSelector").getCloudServiceEndpointSelectorOutput = null as any;
utilities.lazyLoad(exports, ["getCloudServiceEndpointSelector","getCloudServiceEndpointSelectorOutput"], () => require("./getCloudServiceEndpointSelector"));

export { GetCloudServiceEpgArgs, GetCloudServiceEpgResult, GetCloudServiceEpgOutputArgs } from "./getCloudServiceEpg";
export const getCloudServiceEpg: typeof import("./getCloudServiceEpg").getCloudServiceEpg = null as any;
export const getCloudServiceEpgOutput: typeof import("./getCloudServiceEpg").getCloudServiceEpgOutput = null as any;
utilities.lazyLoad(exports, ["getCloudServiceEpg","getCloudServiceEpgOutput"], () => require("./getCloudServiceEpg"));

export { GetCloudSubnetArgs, GetCloudSubnetResult, GetCloudSubnetOutputArgs } from "./getCloudSubnet";
export const getCloudSubnet: typeof import("./getCloudSubnet").getCloudSubnet = null as any;
export const getCloudSubnetOutput: typeof import("./getCloudSubnet").getCloudSubnetOutput = null as any;
utilities.lazyLoad(exports, ["getCloudSubnet","getCloudSubnetOutput"], () => require("./getCloudSubnet"));

export { GetCloudTemplateRegionDetailArgs, GetCloudTemplateRegionDetailResult, GetCloudTemplateRegionDetailOutputArgs } from "./getCloudTemplateRegionDetail";
export const getCloudTemplateRegionDetail: typeof import("./getCloudTemplateRegionDetail").getCloudTemplateRegionDetail = null as any;
export const getCloudTemplateRegionDetailOutput: typeof import("./getCloudTemplateRegionDetail").getCloudTemplateRegionDetailOutput = null as any;
utilities.lazyLoad(exports, ["getCloudTemplateRegionDetail","getCloudTemplateRegionDetailOutput"], () => require("./getCloudTemplateRegionDetail"));

export { GetCloudVpnGatewayArgs, GetCloudVpnGatewayResult, GetCloudVpnGatewayOutputArgs } from "./getCloudVpnGateway";
export const getCloudVpnGateway: typeof import("./getCloudVpnGateway").getCloudVpnGateway = null as any;
export const getCloudVpnGatewayOutput: typeof import("./getCloudVpnGateway").getCloudVpnGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getCloudVpnGateway","getCloudVpnGatewayOutput"], () => require("./getCloudVpnGateway"));

export { GetCloudVrfLeakRoutesArgs, GetCloudVrfLeakRoutesResult, GetCloudVrfLeakRoutesOutputArgs } from "./getCloudVrfLeakRoutes";
export const getCloudVrfLeakRoutes: typeof import("./getCloudVrfLeakRoutes").getCloudVrfLeakRoutes = null as any;
export const getCloudVrfLeakRoutesOutput: typeof import("./getCloudVrfLeakRoutes").getCloudVrfLeakRoutesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudVrfLeakRoutes","getCloudVrfLeakRoutesOutput"], () => require("./getCloudVrfLeakRoutes"));

export { GetConcreteDeviceArgs, GetConcreteDeviceResult, GetConcreteDeviceOutputArgs } from "./getConcreteDevice";
export const getConcreteDevice: typeof import("./getConcreteDevice").getConcreteDevice = null as any;
export const getConcreteDeviceOutput: typeof import("./getConcreteDevice").getConcreteDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getConcreteDevice","getConcreteDeviceOutput"], () => require("./getConcreteDevice"));

export { GetConcreteInterfaceArgs, GetConcreteInterfaceResult, GetConcreteInterfaceOutputArgs } from "./getConcreteInterface";
export const getConcreteInterface: typeof import("./getConcreteInterface").getConcreteInterface = null as any;
export const getConcreteInterfaceOutput: typeof import("./getConcreteInterface").getConcreteInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getConcreteInterface","getConcreteInterfaceOutput"], () => require("./getConcreteInterface"));

export { GetConfigurationExportPolicyArgs, GetConfigurationExportPolicyResult, GetConfigurationExportPolicyOutputArgs } from "./getConfigurationExportPolicy";
export const getConfigurationExportPolicy: typeof import("./getConfigurationExportPolicy").getConfigurationExportPolicy = null as any;
export const getConfigurationExportPolicyOutput: typeof import("./getConfigurationExportPolicy").getConfigurationExportPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getConfigurationExportPolicy","getConfigurationExportPolicyOutput"], () => require("./getConfigurationExportPolicy"));

export { GetConfigurationImportPolicyArgs, GetConfigurationImportPolicyResult, GetConfigurationImportPolicyOutputArgs } from "./getConfigurationImportPolicy";
export const getConfigurationImportPolicy: typeof import("./getConfigurationImportPolicy").getConfigurationImportPolicy = null as any;
export const getConfigurationImportPolicyOutput: typeof import("./getConfigurationImportPolicy").getConfigurationImportPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getConfigurationImportPolicy","getConfigurationImportPolicyOutput"], () => require("./getConfigurationImportPolicy"));

export { GetConnectionArgs, GetConnectionResult, GetConnectionOutputArgs } from "./getConnection";
export const getConnection: typeof import("./getConnection").getConnection = null as any;
export const getConnectionOutput: typeof import("./getConnection").getConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getConnection","getConnectionOutput"], () => require("./getConnection"));

export { GetConsoleAuthenticationArgs, GetConsoleAuthenticationResult, GetConsoleAuthenticationOutputArgs } from "./getConsoleAuthentication";
export const getConsoleAuthentication: typeof import("./getConsoleAuthentication").getConsoleAuthentication = null as any;
export const getConsoleAuthenticationOutput: typeof import("./getConsoleAuthentication").getConsoleAuthenticationOutput = null as any;
utilities.lazyLoad(exports, ["getConsoleAuthentication","getConsoleAuthenticationOutput"], () => require("./getConsoleAuthentication"));

export { GetContractArgs, GetContractResult, GetContractOutputArgs } from "./getContract";
export const getContract: typeof import("./getContract").getContract = null as any;
export const getContractOutput: typeof import("./getContract").getContractOutput = null as any;
utilities.lazyLoad(exports, ["getContract","getContractOutput"], () => require("./getContract"));

export { GetContractSubjectArgs, GetContractSubjectResult, GetContractSubjectOutputArgs } from "./getContractSubject";
export const getContractSubject: typeof import("./getContractSubject").getContractSubject = null as any;
export const getContractSubjectOutput: typeof import("./getContractSubject").getContractSubjectOutput = null as any;
utilities.lazyLoad(exports, ["getContractSubject","getContractSubjectOutput"], () => require("./getContractSubject"));

export { GetContractSubjectFilterArgs, GetContractSubjectFilterResult, GetContractSubjectFilterOutputArgs } from "./getContractSubjectFilter";
export const getContractSubjectFilter: typeof import("./getContractSubjectFilter").getContractSubjectFilter = null as any;
export const getContractSubjectFilterOutput: typeof import("./getContractSubjectFilter").getContractSubjectFilterOutput = null as any;
utilities.lazyLoad(exports, ["getContractSubjectFilter","getContractSubjectFilterOutput"], () => require("./getContractSubjectFilter"));

export { GetContractSubjectOneWayFilterArgs, GetContractSubjectOneWayFilterResult, GetContractSubjectOneWayFilterOutputArgs } from "./getContractSubjectOneWayFilter";
export const getContractSubjectOneWayFilter: typeof import("./getContractSubjectOneWayFilter").getContractSubjectOneWayFilter = null as any;
export const getContractSubjectOneWayFilterOutput: typeof import("./getContractSubjectOneWayFilter").getContractSubjectOneWayFilterOutput = null as any;
utilities.lazyLoad(exports, ["getContractSubjectOneWayFilter","getContractSubjectOneWayFilterOutput"], () => require("./getContractSubjectOneWayFilter"));

export { GetCoopPolicyArgs, GetCoopPolicyResult, GetCoopPolicyOutputArgs } from "./getCoopPolicy";
export const getCoopPolicy: typeof import("./getCoopPolicy").getCoopPolicy = null as any;
export const getCoopPolicyOutput: typeof import("./getCoopPolicy").getCoopPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getCoopPolicy","getCoopPolicyOutput"], () => require("./getCoopPolicy"));

export { GetDefaultAuthenticationArgs, GetDefaultAuthenticationResult, GetDefaultAuthenticationOutputArgs } from "./getDefaultAuthentication";
export const getDefaultAuthentication: typeof import("./getDefaultAuthentication").getDefaultAuthentication = null as any;
export const getDefaultAuthenticationOutput: typeof import("./getDefaultAuthentication").getDefaultAuthenticationOutput = null as any;
utilities.lazyLoad(exports, ["getDefaultAuthentication","getDefaultAuthenticationOutput"], () => require("./getDefaultAuthentication"));

export { GetDestinationOfRedirectedTrafficArgs, GetDestinationOfRedirectedTrafficResult, GetDestinationOfRedirectedTrafficOutputArgs } from "./getDestinationOfRedirectedTraffic";
export const getDestinationOfRedirectedTraffic: typeof import("./getDestinationOfRedirectedTraffic").getDestinationOfRedirectedTraffic = null as any;
export const getDestinationOfRedirectedTrafficOutput: typeof import("./getDestinationOfRedirectedTraffic").getDestinationOfRedirectedTrafficOutput = null as any;
utilities.lazyLoad(exports, ["getDestinationOfRedirectedTraffic","getDestinationOfRedirectedTrafficOutput"], () => require("./getDestinationOfRedirectedTraffic"));

export { GetDhcpOptionArgs, GetDhcpOptionResult, GetDhcpOptionOutputArgs } from "./getDhcpOption";
export const getDhcpOption: typeof import("./getDhcpOption").getDhcpOption = null as any;
export const getDhcpOptionOutput: typeof import("./getDhcpOption").getDhcpOptionOutput = null as any;
utilities.lazyLoad(exports, ["getDhcpOption","getDhcpOptionOutput"], () => require("./getDhcpOption"));

export { GetDhcpOptionPolicyArgs, GetDhcpOptionPolicyResult, GetDhcpOptionPolicyOutputArgs } from "./getDhcpOptionPolicy";
export const getDhcpOptionPolicy: typeof import("./getDhcpOptionPolicy").getDhcpOptionPolicy = null as any;
export const getDhcpOptionPolicyOutput: typeof import("./getDhcpOptionPolicy").getDhcpOptionPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDhcpOptionPolicy","getDhcpOptionPolicyOutput"], () => require("./getDhcpOptionPolicy"));

export { GetDhcpRelayPolicyArgs, GetDhcpRelayPolicyResult, GetDhcpRelayPolicyOutputArgs } from "./getDhcpRelayPolicy";
export const getDhcpRelayPolicy: typeof import("./getDhcpRelayPolicy").getDhcpRelayPolicy = null as any;
export const getDhcpRelayPolicyOutput: typeof import("./getDhcpRelayPolicy").getDhcpRelayPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDhcpRelayPolicy","getDhcpRelayPolicyOutput"], () => require("./getDhcpRelayPolicy"));

export { GetDuoProviderGroupArgs, GetDuoProviderGroupResult, GetDuoProviderGroupOutputArgs } from "./getDuoProviderGroup";
export const getDuoProviderGroup: typeof import("./getDuoProviderGroup").getDuoProviderGroup = null as any;
export const getDuoProviderGroupOutput: typeof import("./getDuoProviderGroup").getDuoProviderGroupOutput = null as any;
utilities.lazyLoad(exports, ["getDuoProviderGroup","getDuoProviderGroupOutput"], () => require("./getDuoProviderGroup"));

export { GetEncryptionKeyArgs, GetEncryptionKeyResult, GetEncryptionKeyOutputArgs } from "./getEncryptionKey";
export const getEncryptionKey: typeof import("./getEncryptionKey").getEncryptionKey = null as any;
export const getEncryptionKeyOutput: typeof import("./getEncryptionKey").getEncryptionKeyOutput = null as any;
utilities.lazyLoad(exports, ["getEncryptionKey","getEncryptionKeyOutput"], () => require("./getEncryptionKey"));

export { GetEndPointRetentionPolicyArgs, GetEndPointRetentionPolicyResult, GetEndPointRetentionPolicyOutputArgs } from "./getEndPointRetentionPolicy";
export const getEndPointRetentionPolicy: typeof import("./getEndPointRetentionPolicy").getEndPointRetentionPolicy = null as any;
export const getEndPointRetentionPolicyOutput: typeof import("./getEndPointRetentionPolicy").getEndPointRetentionPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getEndPointRetentionPolicy","getEndPointRetentionPolicyOutput"], () => require("./getEndPointRetentionPolicy"));

export { GetEndpointControlsArgs, GetEndpointControlsResult, GetEndpointControlsOutputArgs } from "./getEndpointControls";
export const getEndpointControls: typeof import("./getEndpointControls").getEndpointControls = null as any;
export const getEndpointControlsOutput: typeof import("./getEndpointControls").getEndpointControlsOutput = null as any;
utilities.lazyLoad(exports, ["getEndpointControls","getEndpointControlsOutput"], () => require("./getEndpointControls"));

export { GetEndpointIpAgingProfileArgs, GetEndpointIpAgingProfileResult, GetEndpointIpAgingProfileOutputArgs } from "./getEndpointIpAgingProfile";
export const getEndpointIpAgingProfile: typeof import("./getEndpointIpAgingProfile").getEndpointIpAgingProfile = null as any;
export const getEndpointIpAgingProfileOutput: typeof import("./getEndpointIpAgingProfile").getEndpointIpAgingProfileOutput = null as any;
utilities.lazyLoad(exports, ["getEndpointIpAgingProfile","getEndpointIpAgingProfileOutput"], () => require("./getEndpointIpAgingProfile"));

export { GetEndpointLoopProtectionArgs, GetEndpointLoopProtectionResult, GetEndpointLoopProtectionOutputArgs } from "./getEndpointLoopProtection";
export const getEndpointLoopProtection: typeof import("./getEndpointLoopProtection").getEndpointLoopProtection = null as any;
export const getEndpointLoopProtectionOutput: typeof import("./getEndpointLoopProtection").getEndpointLoopProtectionOutput = null as any;
utilities.lazyLoad(exports, ["getEndpointLoopProtection","getEndpointLoopProtectionOutput"], () => require("./getEndpointLoopProtection"));

export { GetEndpointSecurityGroupArgs, GetEndpointSecurityGroupResult, GetEndpointSecurityGroupOutputArgs } from "./getEndpointSecurityGroup";
export const getEndpointSecurityGroup: typeof import("./getEndpointSecurityGroup").getEndpointSecurityGroup = null as any;
export const getEndpointSecurityGroupOutput: typeof import("./getEndpointSecurityGroup").getEndpointSecurityGroupOutput = null as any;
utilities.lazyLoad(exports, ["getEndpointSecurityGroup","getEndpointSecurityGroupOutput"], () => require("./getEndpointSecurityGroup"));

export { GetEndpointSecurityGroupEpgSelectorArgs, GetEndpointSecurityGroupEpgSelectorResult, GetEndpointSecurityGroupEpgSelectorOutputArgs } from "./getEndpointSecurityGroupEpgSelector";
export const getEndpointSecurityGroupEpgSelector: typeof import("./getEndpointSecurityGroupEpgSelector").getEndpointSecurityGroupEpgSelector = null as any;
export const getEndpointSecurityGroupEpgSelectorOutput: typeof import("./getEndpointSecurityGroupEpgSelector").getEndpointSecurityGroupEpgSelectorOutput = null as any;
utilities.lazyLoad(exports, ["getEndpointSecurityGroupEpgSelector","getEndpointSecurityGroupEpgSelectorOutput"], () => require("./getEndpointSecurityGroupEpgSelector"));

export { GetEndpointSecurityGroupSelectorArgs, GetEndpointSecurityGroupSelectorResult, GetEndpointSecurityGroupSelectorOutputArgs } from "./getEndpointSecurityGroupSelector";
export const getEndpointSecurityGroupSelector: typeof import("./getEndpointSecurityGroupSelector").getEndpointSecurityGroupSelector = null as any;
export const getEndpointSecurityGroupSelectorOutput: typeof import("./getEndpointSecurityGroupSelector").getEndpointSecurityGroupSelectorOutput = null as any;
utilities.lazyLoad(exports, ["getEndpointSecurityGroupSelector","getEndpointSecurityGroupSelectorOutput"], () => require("./getEndpointSecurityGroupSelector"));

export { GetEndpointSecurityGroupTagSelectorArgs, GetEndpointSecurityGroupTagSelectorResult, GetEndpointSecurityGroupTagSelectorOutputArgs } from "./getEndpointSecurityGroupTagSelector";
export const getEndpointSecurityGroupTagSelector: typeof import("./getEndpointSecurityGroupTagSelector").getEndpointSecurityGroupTagSelector = null as any;
export const getEndpointSecurityGroupTagSelectorOutput: typeof import("./getEndpointSecurityGroupTagSelector").getEndpointSecurityGroupTagSelectorOutput = null as any;
utilities.lazyLoad(exports, ["getEndpointSecurityGroupTagSelector","getEndpointSecurityGroupTagSelectorOutput"], () => require("./getEndpointSecurityGroupTagSelector"));

export { GetEndpointTagIpArgs, GetEndpointTagIpResult, GetEndpointTagIpOutputArgs } from "./getEndpointTagIp";
export const getEndpointTagIp: typeof import("./getEndpointTagIp").getEndpointTagIp = null as any;
export const getEndpointTagIpOutput: typeof import("./getEndpointTagIp").getEndpointTagIpOutput = null as any;
utilities.lazyLoad(exports, ["getEndpointTagIp","getEndpointTagIpOutput"], () => require("./getEndpointTagIp"));

export { GetEndpointTagMacArgs, GetEndpointTagMacResult, GetEndpointTagMacOutputArgs } from "./getEndpointTagMac";
export const getEndpointTagMac: typeof import("./getEndpointTagMac").getEndpointTagMac = null as any;
export const getEndpointTagMacOutput: typeof import("./getEndpointTagMac").getEndpointTagMacOutput = null as any;
utilities.lazyLoad(exports, ["getEndpointTagMac","getEndpointTagMacOutput"], () => require("./getEndpointTagMac"));

export { GetEpgToContractArgs, GetEpgToContractResult, GetEpgToContractOutputArgs } from "./getEpgToContract";
export const getEpgToContract: typeof import("./getEpgToContract").getEpgToContract = null as any;
export const getEpgToContractOutput: typeof import("./getEpgToContract").getEpgToContractOutput = null as any;
utilities.lazyLoad(exports, ["getEpgToContract","getEpgToContractOutput"], () => require("./getEpgToContract"));

export { GetEpgToContractInterfaceArgs, GetEpgToContractInterfaceResult, GetEpgToContractInterfaceOutputArgs } from "./getEpgToContractInterface";
export const getEpgToContractInterface: typeof import("./getEpgToContractInterface").getEpgToContractInterface = null as any;
export const getEpgToContractInterfaceOutput: typeof import("./getEpgToContractInterface").getEpgToContractInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getEpgToContractInterface","getEpgToContractInterfaceOutput"], () => require("./getEpgToContractInterface"));

export { GetEpgToDomainArgs, GetEpgToDomainResult, GetEpgToDomainOutputArgs } from "./getEpgToDomain";
export const getEpgToDomain: typeof import("./getEpgToDomain").getEpgToDomain = null as any;
export const getEpgToDomainOutput: typeof import("./getEpgToDomain").getEpgToDomainOutput = null as any;
utilities.lazyLoad(exports, ["getEpgToDomain","getEpgToDomainOutput"], () => require("./getEpgToDomain"));

export { GetEpgToStaticPathArgs, GetEpgToStaticPathResult, GetEpgToStaticPathOutputArgs } from "./getEpgToStaticPath";
export const getEpgToStaticPath: typeof import("./getEpgToStaticPath").getEpgToStaticPath = null as any;
export const getEpgToStaticPathOutput: typeof import("./getEpgToStaticPath").getEpgToStaticPathOutput = null as any;
utilities.lazyLoad(exports, ["getEpgToStaticPath","getEpgToStaticPathOutput"], () => require("./getEpgToStaticPath"));

export { GetEpgsUsingFunctionArgs, GetEpgsUsingFunctionResult, GetEpgsUsingFunctionOutputArgs } from "./getEpgsUsingFunction";
export const getEpgsUsingFunction: typeof import("./getEpgsUsingFunction").getEpgsUsingFunction = null as any;
export const getEpgsUsingFunctionOutput: typeof import("./getEpgsUsingFunction").getEpgsUsingFunctionOutput = null as any;
utilities.lazyLoad(exports, ["getEpgsUsingFunction","getEpgsUsingFunctionOutput"], () => require("./getEpgsUsingFunction"));

export { GetErrorDisableRecoveryArgs, GetErrorDisableRecoveryResult, GetErrorDisableRecoveryOutputArgs } from "./getErrorDisableRecovery";
export const getErrorDisableRecovery: typeof import("./getErrorDisableRecovery").getErrorDisableRecovery = null as any;
export const getErrorDisableRecoveryOutput: typeof import("./getErrorDisableRecovery").getErrorDisableRecoveryOutput = null as any;
utilities.lazyLoad(exports, ["getErrorDisableRecovery","getErrorDisableRecoveryOutput"], () => require("./getErrorDisableRecovery"));

export { GetExternalManagementNetworkInstanceProfileArgs, GetExternalManagementNetworkInstanceProfileResult, GetExternalManagementNetworkInstanceProfileOutputArgs } from "./getExternalManagementNetworkInstanceProfile";
export const getExternalManagementNetworkInstanceProfile: typeof import("./getExternalManagementNetworkInstanceProfile").getExternalManagementNetworkInstanceProfile = null as any;
export const getExternalManagementNetworkInstanceProfileOutput: typeof import("./getExternalManagementNetworkInstanceProfile").getExternalManagementNetworkInstanceProfileOutput = null as any;
utilities.lazyLoad(exports, ["getExternalManagementNetworkInstanceProfile","getExternalManagementNetworkInstanceProfileOutput"], () => require("./getExternalManagementNetworkInstanceProfile"));

export { GetExternalManagementNetworkSubnetArgs, GetExternalManagementNetworkSubnetResult, GetExternalManagementNetworkSubnetOutputArgs } from "./getExternalManagementNetworkSubnet";
export const getExternalManagementNetworkSubnet: typeof import("./getExternalManagementNetworkSubnet").getExternalManagementNetworkSubnet = null as any;
export const getExternalManagementNetworkSubnetOutput: typeof import("./getExternalManagementNetworkSubnet").getExternalManagementNetworkSubnetOutput = null as any;
utilities.lazyLoad(exports, ["getExternalManagementNetworkSubnet","getExternalManagementNetworkSubnetOutput"], () => require("./getExternalManagementNetworkSubnet"));

export { GetExternalNetworkInstanceProfileArgs, GetExternalNetworkInstanceProfileResult, GetExternalNetworkInstanceProfileOutputArgs } from "./getExternalNetworkInstanceProfile";
export const getExternalNetworkInstanceProfile: typeof import("./getExternalNetworkInstanceProfile").getExternalNetworkInstanceProfile = null as any;
export const getExternalNetworkInstanceProfileOutput: typeof import("./getExternalNetworkInstanceProfile").getExternalNetworkInstanceProfileOutput = null as any;
utilities.lazyLoad(exports, ["getExternalNetworkInstanceProfile","getExternalNetworkInstanceProfileOutput"], () => require("./getExternalNetworkInstanceProfile"));

export { GetFabricIfPolArgs, GetFabricIfPolResult, GetFabricIfPolOutputArgs } from "./getFabricIfPol";
export const getFabricIfPol: typeof import("./getFabricIfPol").getFabricIfPol = null as any;
export const getFabricIfPolOutput: typeof import("./getFabricIfPol").getFabricIfPolOutput = null as any;
utilities.lazyLoad(exports, ["getFabricIfPol","getFabricIfPolOutput"], () => require("./getFabricIfPol"));

export { GetFabricNodeArgs, GetFabricNodeResult, GetFabricNodeOutputArgs } from "./getFabricNode";
export const getFabricNode: typeof import("./getFabricNode").getFabricNode = null as any;
export const getFabricNodeOutput: typeof import("./getFabricNode").getFabricNodeOutput = null as any;
utilities.lazyLoad(exports, ["getFabricNode","getFabricNodeOutput"], () => require("./getFabricNode"));

export { GetFabricNodeControlArgs, GetFabricNodeControlResult, GetFabricNodeControlOutputArgs } from "./getFabricNodeControl";
export const getFabricNodeControl: typeof import("./getFabricNodeControl").getFabricNodeControl = null as any;
export const getFabricNodeControlOutput: typeof import("./getFabricNodeControl").getFabricNodeControlOutput = null as any;
utilities.lazyLoad(exports, ["getFabricNodeControl","getFabricNodeControlOutput"], () => require("./getFabricNodeControl"));

export { GetFabricNodeMemberArgs, GetFabricNodeMemberResult, GetFabricNodeMemberOutputArgs } from "./getFabricNodeMember";
export const getFabricNodeMember: typeof import("./getFabricNodeMember").getFabricNodeMember = null as any;
export const getFabricNodeMemberOutput: typeof import("./getFabricNodeMember").getFabricNodeMemberOutput = null as any;
utilities.lazyLoad(exports, ["getFabricNodeMember","getFabricNodeMemberOutput"], () => require("./getFabricNodeMember"));

export { GetFabricPathEpArgs, GetFabricPathEpResult, GetFabricPathEpOutputArgs } from "./getFabricPathEp";
export const getFabricPathEp: typeof import("./getFabricPathEp").getFabricPathEp = null as any;
export const getFabricPathEpOutput: typeof import("./getFabricPathEp").getFabricPathEpOutput = null as any;
utilities.lazyLoad(exports, ["getFabricPathEp","getFabricPathEpOutput"], () => require("./getFabricPathEp"));

export { GetFabricWideSettingsArgs, GetFabricWideSettingsResult, GetFabricWideSettingsOutputArgs } from "./getFabricWideSettings";
export const getFabricWideSettings: typeof import("./getFabricWideSettings").getFabricWideSettings = null as any;
export const getFabricWideSettingsOutput: typeof import("./getFabricWideSettings").getFabricWideSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getFabricWideSettings","getFabricWideSettingsOutput"], () => require("./getFabricWideSettings"));

export { GetFcDomainArgs, GetFcDomainResult, GetFcDomainOutputArgs } from "./getFcDomain";
export const getFcDomain: typeof import("./getFcDomain").getFcDomain = null as any;
export const getFcDomainOutput: typeof import("./getFcDomain").getFcDomainOutput = null as any;
utilities.lazyLoad(exports, ["getFcDomain","getFcDomainOutput"], () => require("./getFcDomain"));

export { GetFexBundleGroupArgs, GetFexBundleGroupResult, GetFexBundleGroupOutputArgs } from "./getFexBundleGroup";
export const getFexBundleGroup: typeof import("./getFexBundleGroup").getFexBundleGroup = null as any;
export const getFexBundleGroupOutput: typeof import("./getFexBundleGroup").getFexBundleGroupOutput = null as any;
utilities.lazyLoad(exports, ["getFexBundleGroup","getFexBundleGroupOutput"], () => require("./getFexBundleGroup"));

export { GetFexProfileArgs, GetFexProfileResult, GetFexProfileOutputArgs } from "./getFexProfile";
export const getFexProfile: typeof import("./getFexProfile").getFexProfile = null as any;
export const getFexProfileOutput: typeof import("./getFexProfile").getFexProfileOutput = null as any;
utilities.lazyLoad(exports, ["getFexProfile","getFexProfileOutput"], () => require("./getFexProfile"));

export { GetFileRemotePathArgs, GetFileRemotePathResult, GetFileRemotePathOutputArgs } from "./getFileRemotePath";
export const getFileRemotePath: typeof import("./getFileRemotePath").getFileRemotePath = null as any;
export const getFileRemotePathOutput: typeof import("./getFileRemotePath").getFileRemotePathOutput = null as any;
utilities.lazyLoad(exports, ["getFileRemotePath","getFileRemotePathOutput"], () => require("./getFileRemotePath"));

export { GetFilterArgs, GetFilterResult, GetFilterOutputArgs } from "./getFilter";
export const getFilter: typeof import("./getFilter").getFilter = null as any;
export const getFilterOutput: typeof import("./getFilter").getFilterOutput = null as any;
utilities.lazyLoad(exports, ["getFilter","getFilterOutput"], () => require("./getFilter"));

export { GetFilterEntryArgs, GetFilterEntryResult, GetFilterEntryOutputArgs } from "./getFilterEntry";
export const getFilterEntry: typeof import("./getFilterEntry").getFilterEntry = null as any;
export const getFilterEntryOutput: typeof import("./getFilterEntry").getFilterEntryOutput = null as any;
utilities.lazyLoad(exports, ["getFilterEntry","getFilterEntryOutput"], () => require("./getFilterEntry"));

export { GetFirmwareDownloadTaskArgs, GetFirmwareDownloadTaskResult, GetFirmwareDownloadTaskOutputArgs } from "./getFirmwareDownloadTask";
export const getFirmwareDownloadTask: typeof import("./getFirmwareDownloadTask").getFirmwareDownloadTask = null as any;
export const getFirmwareDownloadTaskOutput: typeof import("./getFirmwareDownloadTask").getFirmwareDownloadTaskOutput = null as any;
utilities.lazyLoad(exports, ["getFirmwareDownloadTask","getFirmwareDownloadTaskOutput"], () => require("./getFirmwareDownloadTask"));

export { GetFirmwareGroupArgs, GetFirmwareGroupResult, GetFirmwareGroupOutputArgs } from "./getFirmwareGroup";
export const getFirmwareGroup: typeof import("./getFirmwareGroup").getFirmwareGroup = null as any;
export const getFirmwareGroupOutput: typeof import("./getFirmwareGroup").getFirmwareGroupOutput = null as any;
utilities.lazyLoad(exports, ["getFirmwareGroup","getFirmwareGroupOutput"], () => require("./getFirmwareGroup"));

export { GetFirmwarePolicyArgs, GetFirmwarePolicyResult, GetFirmwarePolicyOutputArgs } from "./getFirmwarePolicy";
export const getFirmwarePolicy: typeof import("./getFirmwarePolicy").getFirmwarePolicy = null as any;
export const getFirmwarePolicyOutput: typeof import("./getFirmwarePolicy").getFirmwarePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getFirmwarePolicy","getFirmwarePolicyOutput"], () => require("./getFirmwarePolicy"));

export { GetFunctionNodeArgs, GetFunctionNodeResult, GetFunctionNodeOutputArgs } from "./getFunctionNode";
export const getFunctionNode: typeof import("./getFunctionNode").getFunctionNode = null as any;
export const getFunctionNodeOutput: typeof import("./getFunctionNode").getFunctionNodeOutput = null as any;
utilities.lazyLoad(exports, ["getFunctionNode","getFunctionNodeOutput"], () => require("./getFunctionNode"));

export { GetGlobalSecurityArgs, GetGlobalSecurityResult, GetGlobalSecurityOutputArgs } from "./getGlobalSecurity";
export const getGlobalSecurity: typeof import("./getGlobalSecurity").getGlobalSecurity = null as any;
export const getGlobalSecurityOutput: typeof import("./getGlobalSecurity").getGlobalSecurityOutput = null as any;
utilities.lazyLoad(exports, ["getGlobalSecurity","getGlobalSecurityOutput"], () => require("./getGlobalSecurity"));

export { GetHsrpGroupPolicyArgs, GetHsrpGroupPolicyResult, GetHsrpGroupPolicyOutputArgs } from "./getHsrpGroupPolicy";
export const getHsrpGroupPolicy: typeof import("./getHsrpGroupPolicy").getHsrpGroupPolicy = null as any;
export const getHsrpGroupPolicyOutput: typeof import("./getHsrpGroupPolicy").getHsrpGroupPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getHsrpGroupPolicy","getHsrpGroupPolicyOutput"], () => require("./getHsrpGroupPolicy"));

export { GetHsrpInterfacePolicyArgs, GetHsrpInterfacePolicyResult, GetHsrpInterfacePolicyOutputArgs } from "./getHsrpInterfacePolicy";
export const getHsrpInterfacePolicy: typeof import("./getHsrpInterfacePolicy").getHsrpInterfacePolicy = null as any;
export const getHsrpInterfacePolicyOutput: typeof import("./getHsrpInterfacePolicy").getHsrpInterfacePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getHsrpInterfacePolicy","getHsrpInterfacePolicyOutput"], () => require("./getHsrpInterfacePolicy"));

export { GetIgmpInterfacePolicyArgs, GetIgmpInterfacePolicyResult, GetIgmpInterfacePolicyOutputArgs } from "./getIgmpInterfacePolicy";
export const getIgmpInterfacePolicy: typeof import("./getIgmpInterfacePolicy").getIgmpInterfacePolicy = null as any;
export const getIgmpInterfacePolicyOutput: typeof import("./getIgmpInterfacePolicy").getIgmpInterfacePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getIgmpInterfacePolicy","getIgmpInterfacePolicyOutput"], () => require("./getIgmpInterfacePolicy"));

export { GetImportedContractArgs, GetImportedContractResult, GetImportedContractOutputArgs } from "./getImportedContract";
export const getImportedContract: typeof import("./getImportedContract").getImportedContract = null as any;
export const getImportedContractOutput: typeof import("./getImportedContract").getImportedContractOutput = null as any;
utilities.lazyLoad(exports, ["getImportedContract","getImportedContractOutput"], () => require("./getImportedContract"));

export { GetInterfaceBlacklistArgs, GetInterfaceBlacklistResult, GetInterfaceBlacklistOutputArgs } from "./getInterfaceBlacklist";
export const getInterfaceBlacklist: typeof import("./getInterfaceBlacklist").getInterfaceBlacklist = null as any;
export const getInterfaceBlacklistOutput: typeof import("./getInterfaceBlacklist").getInterfaceBlacklistOutput = null as any;
utilities.lazyLoad(exports, ["getInterfaceBlacklist","getInterfaceBlacklistOutput"], () => require("./getInterfaceBlacklist"));

export { GetInterfaceConfigArgs, GetInterfaceConfigResult, GetInterfaceConfigOutputArgs } from "./getInterfaceConfig";
export const getInterfaceConfig: typeof import("./getInterfaceConfig").getInterfaceConfig = null as any;
export const getInterfaceConfigOutput: typeof import("./getInterfaceConfig").getInterfaceConfigOutput = null as any;
utilities.lazyLoad(exports, ["getInterfaceConfig","getInterfaceConfigOutput"], () => require("./getInterfaceConfig"));

export { GetInterfaceFcPolicyArgs, GetInterfaceFcPolicyResult, GetInterfaceFcPolicyOutputArgs } from "./getInterfaceFcPolicy";
export const getInterfaceFcPolicy: typeof import("./getInterfaceFcPolicy").getInterfaceFcPolicy = null as any;
export const getInterfaceFcPolicyOutput: typeof import("./getInterfaceFcPolicy").getInterfaceFcPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getInterfaceFcPolicy","getInterfaceFcPolicyOutput"], () => require("./getInterfaceFcPolicy"));

export { GetIpSlaMonitoringPolicyArgs, GetIpSlaMonitoringPolicyResult, GetIpSlaMonitoringPolicyOutputArgs } from "./getIpSlaMonitoringPolicy";
export const getIpSlaMonitoringPolicy: typeof import("./getIpSlaMonitoringPolicy").getIpSlaMonitoringPolicy = null as any;
export const getIpSlaMonitoringPolicyOutput: typeof import("./getIpSlaMonitoringPolicy").getIpSlaMonitoringPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getIpSlaMonitoringPolicy","getIpSlaMonitoringPolicyOutput"], () => require("./getIpSlaMonitoringPolicy"));

export { GetIsisDomainPolicyArgs, GetIsisDomainPolicyResult, GetIsisDomainPolicyOutputArgs } from "./getIsisDomainPolicy";
export const getIsisDomainPolicy: typeof import("./getIsisDomainPolicy").getIsisDomainPolicy = null as any;
export const getIsisDomainPolicyOutput: typeof import("./getIsisDomainPolicy").getIsisDomainPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getIsisDomainPolicy","getIsisDomainPolicyOutput"], () => require("./getIsisDomainPolicy"));

export { GetL2DomainArgs, GetL2DomainResult, GetL2DomainOutputArgs } from "./getL2Domain";
export const getL2Domain: typeof import("./getL2Domain").getL2Domain = null as any;
export const getL2DomainOutput: typeof import("./getL2Domain").getL2DomainOutput = null as any;
utilities.lazyLoad(exports, ["getL2Domain","getL2DomainOutput"], () => require("./getL2Domain"));

export { GetL2InterfacePolicyArgs, GetL2InterfacePolicyResult, GetL2InterfacePolicyOutputArgs } from "./getL2InterfacePolicy";
export const getL2InterfacePolicy: typeof import("./getL2InterfacePolicy").getL2InterfacePolicy = null as any;
export const getL2InterfacePolicyOutput: typeof import("./getL2InterfacePolicy").getL2InterfacePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getL2InterfacePolicy","getL2InterfacePolicyOutput"], () => require("./getL2InterfacePolicy"));

export { GetL2OutsideArgs, GetL2OutsideResult, GetL2OutsideOutputArgs } from "./getL2Outside";
export const getL2Outside: typeof import("./getL2Outside").getL2Outside = null as any;
export const getL2OutsideOutput: typeof import("./getL2Outside").getL2OutsideOutput = null as any;
utilities.lazyLoad(exports, ["getL2Outside","getL2OutsideOutput"], () => require("./getL2Outside"));

export { GetL2outExtepgArgs, GetL2outExtepgResult, GetL2outExtepgOutputArgs } from "./getL2outExtepg";
export const getL2outExtepg: typeof import("./getL2outExtepg").getL2outExtepg = null as any;
export const getL2outExtepgOutput: typeof import("./getL2outExtepg").getL2outExtepgOutput = null as any;
utilities.lazyLoad(exports, ["getL2outExtepg","getL2outExtepgOutput"], () => require("./getL2outExtepg"));

export { GetL3DomainProfileArgs, GetL3DomainProfileResult, GetL3DomainProfileOutputArgs } from "./getL3DomainProfile";
export const getL3DomainProfile: typeof import("./getL3DomainProfile").getL3DomainProfile = null as any;
export const getL3DomainProfileOutput: typeof import("./getL3DomainProfile").getL3DomainProfileOutput = null as any;
utilities.lazyLoad(exports, ["getL3DomainProfile","getL3DomainProfileOutput"], () => require("./getL3DomainProfile"));

export { GetL3ExtSubnetArgs, GetL3ExtSubnetResult, GetL3ExtSubnetOutputArgs } from "./getL3ExtSubnet";
export const getL3ExtSubnet: typeof import("./getL3ExtSubnet").getL3ExtSubnet = null as any;
export const getL3ExtSubnetOutput: typeof import("./getL3ExtSubnet").getL3ExtSubnetOutput = null as any;
utilities.lazyLoad(exports, ["getL3ExtSubnet","getL3ExtSubnetOutput"], () => require("./getL3ExtSubnet"));

export { GetL3InterfacePolicyArgs, GetL3InterfacePolicyResult, GetL3InterfacePolicyOutputArgs } from "./getL3InterfacePolicy";
export const getL3InterfacePolicy: typeof import("./getL3InterfacePolicy").getL3InterfacePolicy = null as any;
export const getL3InterfacePolicyOutput: typeof import("./getL3InterfacePolicy").getL3InterfacePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getL3InterfacePolicy","getL3InterfacePolicyOutput"], () => require("./getL3InterfacePolicy"));

export { GetL3OutsideArgs, GetL3OutsideResult, GetL3OutsideOutputArgs } from "./getL3Outside";
export const getL3Outside: typeof import("./getL3Outside").getL3Outside = null as any;
export const getL3OutsideOutput: typeof import("./getL3Outside").getL3OutsideOutput = null as any;
utilities.lazyLoad(exports, ["getL3Outside","getL3OutsideOutput"], () => require("./getL3Outside"));

export { GetL3outBfdInterfaceProfileArgs, GetL3outBfdInterfaceProfileResult, GetL3outBfdInterfaceProfileOutputArgs } from "./getL3outBfdInterfaceProfile";
export const getL3outBfdInterfaceProfile: typeof import("./getL3outBfdInterfaceProfile").getL3outBfdInterfaceProfile = null as any;
export const getL3outBfdInterfaceProfileOutput: typeof import("./getL3outBfdInterfaceProfile").getL3outBfdInterfaceProfileOutput = null as any;
utilities.lazyLoad(exports, ["getL3outBfdInterfaceProfile","getL3outBfdInterfaceProfileOutput"], () => require("./getL3outBfdInterfaceProfile"));

export { GetL3outBgpExternalPolicyArgs, GetL3outBgpExternalPolicyResult, GetL3outBgpExternalPolicyOutputArgs } from "./getL3outBgpExternalPolicy";
export const getL3outBgpExternalPolicy: typeof import("./getL3outBgpExternalPolicy").getL3outBgpExternalPolicy = null as any;
export const getL3outBgpExternalPolicyOutput: typeof import("./getL3outBgpExternalPolicy").getL3outBgpExternalPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getL3outBgpExternalPolicy","getL3outBgpExternalPolicyOutput"], () => require("./getL3outBgpExternalPolicy"));

export { GetL3outBgpProtocolProfileArgs, GetL3outBgpProtocolProfileResult, GetL3outBgpProtocolProfileOutputArgs } from "./getL3outBgpProtocolProfile";
export const getL3outBgpProtocolProfile: typeof import("./getL3outBgpProtocolProfile").getL3outBgpProtocolProfile = null as any;
export const getL3outBgpProtocolProfileOutput: typeof import("./getL3outBgpProtocolProfile").getL3outBgpProtocolProfileOutput = null as any;
utilities.lazyLoad(exports, ["getL3outBgpProtocolProfile","getL3outBgpProtocolProfileOutput"], () => require("./getL3outBgpProtocolProfile"));

export { GetL3outConsumerLabelArgs, GetL3outConsumerLabelResult, GetL3outConsumerLabelOutputArgs } from "./getL3outConsumerLabel";
export const getL3outConsumerLabel: typeof import("./getL3outConsumerLabel").getL3outConsumerLabel = null as any;
export const getL3outConsumerLabelOutput: typeof import("./getL3outConsumerLabel").getL3outConsumerLabelOutput = null as any;
utilities.lazyLoad(exports, ["getL3outConsumerLabel","getL3outConsumerLabelOutput"], () => require("./getL3outConsumerLabel"));

export { GetL3outFloatingSviArgs, GetL3outFloatingSviResult, GetL3outFloatingSviOutputArgs } from "./getL3outFloatingSvi";
export const getL3outFloatingSvi: typeof import("./getL3outFloatingSvi").getL3outFloatingSvi = null as any;
export const getL3outFloatingSviOutput: typeof import("./getL3outFloatingSvi").getL3outFloatingSviOutput = null as any;
utilities.lazyLoad(exports, ["getL3outFloatingSvi","getL3outFloatingSviOutput"], () => require("./getL3outFloatingSvi"));

export { GetL3outHsrpInterfaceGroupArgs, GetL3outHsrpInterfaceGroupResult, GetL3outHsrpInterfaceGroupOutputArgs } from "./getL3outHsrpInterfaceGroup";
export const getL3outHsrpInterfaceGroup: typeof import("./getL3outHsrpInterfaceGroup").getL3outHsrpInterfaceGroup = null as any;
export const getL3outHsrpInterfaceGroupOutput: typeof import("./getL3outHsrpInterfaceGroup").getL3outHsrpInterfaceGroupOutput = null as any;
utilities.lazyLoad(exports, ["getL3outHsrpInterfaceGroup","getL3outHsrpInterfaceGroupOutput"], () => require("./getL3outHsrpInterfaceGroup"));

export { GetL3outHsrpInterfaceProfileArgs, GetL3outHsrpInterfaceProfileResult, GetL3outHsrpInterfaceProfileOutputArgs } from "./getL3outHsrpInterfaceProfile";
export const getL3outHsrpInterfaceProfile: typeof import("./getL3outHsrpInterfaceProfile").getL3outHsrpInterfaceProfile = null as any;
export const getL3outHsrpInterfaceProfileOutput: typeof import("./getL3outHsrpInterfaceProfile").getL3outHsrpInterfaceProfileOutput = null as any;
utilities.lazyLoad(exports, ["getL3outHsrpInterfaceProfile","getL3outHsrpInterfaceProfileOutput"], () => require("./getL3outHsrpInterfaceProfile"));

export { GetL3outHsrpSecondaryVipArgs, GetL3outHsrpSecondaryVipResult, GetL3outHsrpSecondaryVipOutputArgs } from "./getL3outHsrpSecondaryVip";
export const getL3outHsrpSecondaryVip: typeof import("./getL3outHsrpSecondaryVip").getL3outHsrpSecondaryVip = null as any;
export const getL3outHsrpSecondaryVipOutput: typeof import("./getL3outHsrpSecondaryVip").getL3outHsrpSecondaryVipOutput = null as any;
utilities.lazyLoad(exports, ["getL3outHsrpSecondaryVip","getL3outHsrpSecondaryVipOutput"], () => require("./getL3outHsrpSecondaryVip"));

export { GetL3outLoopbackInterfaceProfileArgs, GetL3outLoopbackInterfaceProfileResult, GetL3outLoopbackInterfaceProfileOutputArgs } from "./getL3outLoopbackInterfaceProfile";
export const getL3outLoopbackInterfaceProfile: typeof import("./getL3outLoopbackInterfaceProfile").getL3outLoopbackInterfaceProfile = null as any;
export const getL3outLoopbackInterfaceProfileOutput: typeof import("./getL3outLoopbackInterfaceProfile").getL3outLoopbackInterfaceProfileOutput = null as any;
utilities.lazyLoad(exports, ["getL3outLoopbackInterfaceProfile","getL3outLoopbackInterfaceProfileOutput"], () => require("./getL3outLoopbackInterfaceProfile"));

export { GetL3outNodeSidProfileArgs, GetL3outNodeSidProfileResult, GetL3outNodeSidProfileOutputArgs } from "./getL3outNodeSidProfile";
export const getL3outNodeSidProfile: typeof import("./getL3outNodeSidProfile").getL3outNodeSidProfile = null as any;
export const getL3outNodeSidProfileOutput: typeof import("./getL3outNodeSidProfile").getL3outNodeSidProfileOutput = null as any;
utilities.lazyLoad(exports, ["getL3outNodeSidProfile","getL3outNodeSidProfileOutput"], () => require("./getL3outNodeSidProfile"));

export { GetL3outOspfExternalPolicyArgs, GetL3outOspfExternalPolicyResult, GetL3outOspfExternalPolicyOutputArgs } from "./getL3outOspfExternalPolicy";
export const getL3outOspfExternalPolicy: typeof import("./getL3outOspfExternalPolicy").getL3outOspfExternalPolicy = null as any;
export const getL3outOspfExternalPolicyOutput: typeof import("./getL3outOspfExternalPolicy").getL3outOspfExternalPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getL3outOspfExternalPolicy","getL3outOspfExternalPolicyOutput"], () => require("./getL3outOspfExternalPolicy"));

export { GetL3outOspfInterfaceProfileArgs, GetL3outOspfInterfaceProfileResult, GetL3outOspfInterfaceProfileOutputArgs } from "./getL3outOspfInterfaceProfile";
export const getL3outOspfInterfaceProfile: typeof import("./getL3outOspfInterfaceProfile").getL3outOspfInterfaceProfile = null as any;
export const getL3outOspfInterfaceProfileOutput: typeof import("./getL3outOspfInterfaceProfile").getL3outOspfInterfaceProfileOutput = null as any;
utilities.lazyLoad(exports, ["getL3outOspfInterfaceProfile","getL3outOspfInterfaceProfileOutput"], () => require("./getL3outOspfInterfaceProfile"));

export { GetL3outPathAttachmentArgs, GetL3outPathAttachmentResult, GetL3outPathAttachmentOutputArgs } from "./getL3outPathAttachment";
export const getL3outPathAttachment: typeof import("./getL3outPathAttachment").getL3outPathAttachment = null as any;
export const getL3outPathAttachmentOutput: typeof import("./getL3outPathAttachment").getL3outPathAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getL3outPathAttachment","getL3outPathAttachmentOutput"], () => require("./getL3outPathAttachment"));

export { GetL3outPathAttachmentSecondaryIpArgs, GetL3outPathAttachmentSecondaryIpResult, GetL3outPathAttachmentSecondaryIpOutputArgs } from "./getL3outPathAttachmentSecondaryIp";
export const getL3outPathAttachmentSecondaryIp: typeof import("./getL3outPathAttachmentSecondaryIp").getL3outPathAttachmentSecondaryIp = null as any;
export const getL3outPathAttachmentSecondaryIpOutput: typeof import("./getL3outPathAttachmentSecondaryIp").getL3outPathAttachmentSecondaryIpOutput = null as any;
utilities.lazyLoad(exports, ["getL3outPathAttachmentSecondaryIp","getL3outPathAttachmentSecondaryIpOutput"], () => require("./getL3outPathAttachmentSecondaryIp"));

export { GetL3outProviderLabelArgs, GetL3outProviderLabelResult, GetL3outProviderLabelOutputArgs } from "./getL3outProviderLabel";
export const getL3outProviderLabel: typeof import("./getL3outProviderLabel").getL3outProviderLabel = null as any;
export const getL3outProviderLabelOutput: typeof import("./getL3outProviderLabel").getL3outProviderLabelOutput = null as any;
utilities.lazyLoad(exports, ["getL3outProviderLabel","getL3outProviderLabelOutput"], () => require("./getL3outProviderLabel"));

export { GetL3outRedistributePolicyArgs, GetL3outRedistributePolicyResult, GetL3outRedistributePolicyOutputArgs } from "./getL3outRedistributePolicy";
export const getL3outRedistributePolicy: typeof import("./getL3outRedistributePolicy").getL3outRedistributePolicy = null as any;
export const getL3outRedistributePolicyOutput: typeof import("./getL3outRedistributePolicy").getL3outRedistributePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getL3outRedistributePolicy","getL3outRedistributePolicyOutput"], () => require("./getL3outRedistributePolicy"));

export { GetL3outRouteTagPolicyArgs, GetL3outRouteTagPolicyResult, GetL3outRouteTagPolicyOutputArgs } from "./getL3outRouteTagPolicy";
export const getL3outRouteTagPolicy: typeof import("./getL3outRouteTagPolicy").getL3outRouteTagPolicy = null as any;
export const getL3outRouteTagPolicyOutput: typeof import("./getL3outRouteTagPolicy").getL3outRouteTagPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getL3outRouteTagPolicy","getL3outRouteTagPolicyOutput"], () => require("./getL3outRouteTagPolicy"));

export { GetL3outStaticRouteArgs, GetL3outStaticRouteResult, GetL3outStaticRouteOutputArgs } from "./getL3outStaticRoute";
export const getL3outStaticRoute: typeof import("./getL3outStaticRoute").getL3outStaticRoute = null as any;
export const getL3outStaticRouteOutput: typeof import("./getL3outStaticRoute").getL3outStaticRouteOutput = null as any;
utilities.lazyLoad(exports, ["getL3outStaticRoute","getL3outStaticRouteOutput"], () => require("./getL3outStaticRoute"));

export { GetL3outStaticRouteNextHopArgs, GetL3outStaticRouteNextHopResult, GetL3outStaticRouteNextHopOutputArgs } from "./getL3outStaticRouteNextHop";
export const getL3outStaticRouteNextHop: typeof import("./getL3outStaticRouteNextHop").getL3outStaticRouteNextHop = null as any;
export const getL3outStaticRouteNextHopOutput: typeof import("./getL3outStaticRouteNextHop").getL3outStaticRouteNextHopOutput = null as any;
utilities.lazyLoad(exports, ["getL3outStaticRouteNextHop","getL3outStaticRouteNextHopOutput"], () => require("./getL3outStaticRouteNextHop"));

export { GetL3outVpcMemberArgs, GetL3outVpcMemberResult, GetL3outVpcMemberOutputArgs } from "./getL3outVpcMember";
export const getL3outVpcMember: typeof import("./getL3outVpcMember").getL3outVpcMember = null as any;
export const getL3outVpcMemberOutput: typeof import("./getL3outVpcMember").getL3outVpcMemberOutput = null as any;
utilities.lazyLoad(exports, ["getL3outVpcMember","getL3outVpcMemberOutput"], () => require("./getL3outVpcMember"));

export { GetL4L7DeployedGraphConnectorVlanArgs, GetL4L7DeployedGraphConnectorVlanResult, GetL4L7DeployedGraphConnectorVlanOutputArgs } from "./getL4L7DeployedGraphConnectorVlan";
export const getL4L7DeployedGraphConnectorVlan: typeof import("./getL4L7DeployedGraphConnectorVlan").getL4L7DeployedGraphConnectorVlan = null as any;
export const getL4L7DeployedGraphConnectorVlanOutput: typeof import("./getL4L7DeployedGraphConnectorVlan").getL4L7DeployedGraphConnectorVlanOutput = null as any;
utilities.lazyLoad(exports, ["getL4L7DeployedGraphConnectorVlan","getL4L7DeployedGraphConnectorVlanOutput"], () => require("./getL4L7DeployedGraphConnectorVlan"));

export { GetL4L7DeviceArgs, GetL4L7DeviceResult, GetL4L7DeviceOutputArgs } from "./getL4L7Device";
export const getL4L7Device: typeof import("./getL4L7Device").getL4L7Device = null as any;
export const getL4L7DeviceOutput: typeof import("./getL4L7Device").getL4L7DeviceOutput = null as any;
utilities.lazyLoad(exports, ["getL4L7Device","getL4L7DeviceOutput"], () => require("./getL4L7Device"));

export { GetL4L7LogicalInterfaceArgs, GetL4L7LogicalInterfaceResult, GetL4L7LogicalInterfaceOutputArgs } from "./getL4L7LogicalInterface";
export const getL4L7LogicalInterface: typeof import("./getL4L7LogicalInterface").getL4L7LogicalInterface = null as any;
export const getL4L7LogicalInterfaceOutput: typeof import("./getL4L7LogicalInterface").getL4L7LogicalInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getL4L7LogicalInterface","getL4L7LogicalInterfaceOutput"], () => require("./getL4L7LogicalInterface"));

export { GetL4L7RedirectHealthGroupArgs, GetL4L7RedirectHealthGroupResult, GetL4L7RedirectHealthGroupOutputArgs } from "./getL4L7RedirectHealthGroup";
export const getL4L7RedirectHealthGroup: typeof import("./getL4L7RedirectHealthGroup").getL4L7RedirectHealthGroup = null as any;
export const getL4L7RedirectHealthGroupOutput: typeof import("./getL4L7RedirectHealthGroup").getL4L7RedirectHealthGroupOutput = null as any;
utilities.lazyLoad(exports, ["getL4L7RedirectHealthGroup","getL4L7RedirectHealthGroupOutput"], () => require("./getL4L7RedirectHealthGroup"));

export { GetL4L7ServiceGraphTemplateArgs, GetL4L7ServiceGraphTemplateResult, GetL4L7ServiceGraphTemplateOutputArgs } from "./getL4L7ServiceGraphTemplate";
export const getL4L7ServiceGraphTemplate: typeof import("./getL4L7ServiceGraphTemplate").getL4L7ServiceGraphTemplate = null as any;
export const getL4L7ServiceGraphTemplateOutput: typeof import("./getL4L7ServiceGraphTemplate").getL4L7ServiceGraphTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getL4L7ServiceGraphTemplate","getL4L7ServiceGraphTemplateOutput"], () => require("./getL4L7ServiceGraphTemplate"));

export { GetLacpMemberPolicyArgs, GetLacpMemberPolicyResult, GetLacpMemberPolicyOutputArgs } from "./getLacpMemberPolicy";
export const getLacpMemberPolicy: typeof import("./getLacpMemberPolicy").getLacpMemberPolicy = null as any;
export const getLacpMemberPolicyOutput: typeof import("./getLacpMemberPolicy").getLacpMemberPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getLacpMemberPolicy","getLacpMemberPolicyOutput"], () => require("./getLacpMemberPolicy"));

export { GetLacpPolicyArgs, GetLacpPolicyResult, GetLacpPolicyOutputArgs } from "./getLacpPolicy";
export const getLacpPolicy: typeof import("./getLacpPolicy").getLacpPolicy = null as any;
export const getLacpPolicyOutput: typeof import("./getLacpPolicy").getLacpPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getLacpPolicy","getLacpPolicyOutput"], () => require("./getLacpPolicy"));

export { GetLdapGroupMapArgs, GetLdapGroupMapResult, GetLdapGroupMapOutputArgs } from "./getLdapGroupMap";
export const getLdapGroupMap: typeof import("./getLdapGroupMap").getLdapGroupMap = null as any;
export const getLdapGroupMapOutput: typeof import("./getLdapGroupMap").getLdapGroupMapOutput = null as any;
utilities.lazyLoad(exports, ["getLdapGroupMap","getLdapGroupMapOutput"], () => require("./getLdapGroupMap"));

export { GetLdapGroupMapRuleArgs, GetLdapGroupMapRuleResult, GetLdapGroupMapRuleOutputArgs } from "./getLdapGroupMapRule";
export const getLdapGroupMapRule: typeof import("./getLdapGroupMapRule").getLdapGroupMapRule = null as any;
export const getLdapGroupMapRuleOutput: typeof import("./getLdapGroupMapRule").getLdapGroupMapRuleOutput = null as any;
utilities.lazyLoad(exports, ["getLdapGroupMapRule","getLdapGroupMapRuleOutput"], () => require("./getLdapGroupMapRule"));

export { GetLdapGroupMapRuleToGroupMapArgs, GetLdapGroupMapRuleToGroupMapResult, GetLdapGroupMapRuleToGroupMapOutputArgs } from "./getLdapGroupMapRuleToGroupMap";
export const getLdapGroupMapRuleToGroupMap: typeof import("./getLdapGroupMapRuleToGroupMap").getLdapGroupMapRuleToGroupMap = null as any;
export const getLdapGroupMapRuleToGroupMapOutput: typeof import("./getLdapGroupMapRuleToGroupMap").getLdapGroupMapRuleToGroupMapOutput = null as any;
utilities.lazyLoad(exports, ["getLdapGroupMapRuleToGroupMap","getLdapGroupMapRuleToGroupMapOutput"], () => require("./getLdapGroupMapRuleToGroupMap"));

export { GetLdapProviderArgs, GetLdapProviderResult, GetLdapProviderOutputArgs } from "./getLdapProvider";
export const getLdapProvider: typeof import("./getLdapProvider").getLdapProvider = null as any;
export const getLdapProviderOutput: typeof import("./getLdapProvider").getLdapProviderOutput = null as any;
utilities.lazyLoad(exports, ["getLdapProvider","getLdapProviderOutput"], () => require("./getLdapProvider"));

export { GetLeafAccessBundlePolicyGroupArgs, GetLeafAccessBundlePolicyGroupResult, GetLeafAccessBundlePolicyGroupOutputArgs } from "./getLeafAccessBundlePolicyGroup";
export const getLeafAccessBundlePolicyGroup: typeof import("./getLeafAccessBundlePolicyGroup").getLeafAccessBundlePolicyGroup = null as any;
export const getLeafAccessBundlePolicyGroupOutput: typeof import("./getLeafAccessBundlePolicyGroup").getLeafAccessBundlePolicyGroupOutput = null as any;
utilities.lazyLoad(exports, ["getLeafAccessBundlePolicyGroup","getLeafAccessBundlePolicyGroupOutput"], () => require("./getLeafAccessBundlePolicyGroup"));

export { GetLeafAccessBundlePolicySubGroupArgs, GetLeafAccessBundlePolicySubGroupResult, GetLeafAccessBundlePolicySubGroupOutputArgs } from "./getLeafAccessBundlePolicySubGroup";
export const getLeafAccessBundlePolicySubGroup: typeof import("./getLeafAccessBundlePolicySubGroup").getLeafAccessBundlePolicySubGroup = null as any;
export const getLeafAccessBundlePolicySubGroupOutput: typeof import("./getLeafAccessBundlePolicySubGroup").getLeafAccessBundlePolicySubGroupOutput = null as any;
utilities.lazyLoad(exports, ["getLeafAccessBundlePolicySubGroup","getLeafAccessBundlePolicySubGroupOutput"], () => require("./getLeafAccessBundlePolicySubGroup"));

export { GetLeafAccessPortPolicyGroupArgs, GetLeafAccessPortPolicyGroupResult, GetLeafAccessPortPolicyGroupOutputArgs } from "./getLeafAccessPortPolicyGroup";
export const getLeafAccessPortPolicyGroup: typeof import("./getLeafAccessPortPolicyGroup").getLeafAccessPortPolicyGroup = null as any;
export const getLeafAccessPortPolicyGroupOutput: typeof import("./getLeafAccessPortPolicyGroup").getLeafAccessPortPolicyGroupOutput = null as any;
utilities.lazyLoad(exports, ["getLeafAccessPortPolicyGroup","getLeafAccessPortPolicyGroupOutput"], () => require("./getLeafAccessPortPolicyGroup"));

export { GetLeafBreakoutPortGroupArgs, GetLeafBreakoutPortGroupResult, GetLeafBreakoutPortGroupOutputArgs } from "./getLeafBreakoutPortGroup";
export const getLeafBreakoutPortGroup: typeof import("./getLeafBreakoutPortGroup").getLeafBreakoutPortGroup = null as any;
export const getLeafBreakoutPortGroupOutput: typeof import("./getLeafBreakoutPortGroup").getLeafBreakoutPortGroupOutput = null as any;
utilities.lazyLoad(exports, ["getLeafBreakoutPortGroup","getLeafBreakoutPortGroupOutput"], () => require("./getLeafBreakoutPortGroup"));

export { GetLeafInterfaceProfileArgs, GetLeafInterfaceProfileResult, GetLeafInterfaceProfileOutputArgs } from "./getLeafInterfaceProfile";
export const getLeafInterfaceProfile: typeof import("./getLeafInterfaceProfile").getLeafInterfaceProfile = null as any;
export const getLeafInterfaceProfileOutput: typeof import("./getLeafInterfaceProfile").getLeafInterfaceProfileOutput = null as any;
utilities.lazyLoad(exports, ["getLeafInterfaceProfile","getLeafInterfaceProfileOutput"], () => require("./getLeafInterfaceProfile"));

export { GetLeafProfileArgs, GetLeafProfileResult, GetLeafProfileOutputArgs } from "./getLeafProfile";
export const getLeafProfile: typeof import("./getLeafProfile").getLeafProfile = null as any;
export const getLeafProfileOutput: typeof import("./getLeafProfile").getLeafProfileOutput = null as any;
utilities.lazyLoad(exports, ["getLeafProfile","getLeafProfileOutput"], () => require("./getLeafProfile"));

export { GetLeafSelectorArgs, GetLeafSelectorResult, GetLeafSelectorOutputArgs } from "./getLeafSelector";
export const getLeafSelector: typeof import("./getLeafSelector").getLeafSelector = null as any;
export const getLeafSelectorOutput: typeof import("./getLeafSelector").getLeafSelectorOutput = null as any;
utilities.lazyLoad(exports, ["getLeafSelector","getLeafSelectorOutput"], () => require("./getLeafSelector"));

export { GetLldpInterfacePolicyArgs, GetLldpInterfacePolicyResult, GetLldpInterfacePolicyOutputArgs } from "./getLldpInterfacePolicy";
export const getLldpInterfacePolicy: typeof import("./getLldpInterfacePolicy").getLldpInterfacePolicy = null as any;
export const getLldpInterfacePolicyOutput: typeof import("./getLldpInterfacePolicy").getLldpInterfacePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getLldpInterfacePolicy","getLldpInterfacePolicyOutput"], () => require("./getLldpInterfacePolicy"));

export { GetLocalUserArgs, GetLocalUserResult, GetLocalUserOutputArgs } from "./getLocalUser";
export const getLocalUser: typeof import("./getLocalUser").getLocalUser = null as any;
export const getLocalUserOutput: typeof import("./getLocalUser").getLocalUserOutput = null as any;
utilities.lazyLoad(exports, ["getLocalUser","getLocalUserOutput"], () => require("./getLocalUser"));

export { GetLogicalDeviceContextArgs, GetLogicalDeviceContextResult, GetLogicalDeviceContextOutputArgs } from "./getLogicalDeviceContext";
export const getLogicalDeviceContext: typeof import("./getLogicalDeviceContext").getLogicalDeviceContext = null as any;
export const getLogicalDeviceContextOutput: typeof import("./getLogicalDeviceContext").getLogicalDeviceContextOutput = null as any;
utilities.lazyLoad(exports, ["getLogicalDeviceContext","getLogicalDeviceContextOutput"], () => require("./getLogicalDeviceContext"));

export { GetLogicalInterfaceContextArgs, GetLogicalInterfaceContextResult, GetLogicalInterfaceContextOutputArgs } from "./getLogicalInterfaceContext";
export const getLogicalInterfaceContext: typeof import("./getLogicalInterfaceContext").getLogicalInterfaceContext = null as any;
export const getLogicalInterfaceContextOutput: typeof import("./getLogicalInterfaceContext").getLogicalInterfaceContextOutput = null as any;
utilities.lazyLoad(exports, ["getLogicalInterfaceContext","getLogicalInterfaceContextOutput"], () => require("./getLogicalInterfaceContext"));

export { GetLogicalInterfaceProfileArgs, GetLogicalInterfaceProfileResult, GetLogicalInterfaceProfileOutputArgs } from "./getLogicalInterfaceProfile";
export const getLogicalInterfaceProfile: typeof import("./getLogicalInterfaceProfile").getLogicalInterfaceProfile = null as any;
export const getLogicalInterfaceProfileOutput: typeof import("./getLogicalInterfaceProfile").getLogicalInterfaceProfileOutput = null as any;
utilities.lazyLoad(exports, ["getLogicalInterfaceProfile","getLogicalInterfaceProfileOutput"], () => require("./getLogicalInterfaceProfile"));

export { GetLogicalNodeProfileArgs, GetLogicalNodeProfileResult, GetLogicalNodeProfileOutputArgs } from "./getLogicalNodeProfile";
export const getLogicalNodeProfile: typeof import("./getLogicalNodeProfile").getLogicalNodeProfile = null as any;
export const getLogicalNodeProfileOutput: typeof import("./getLogicalNodeProfile").getLogicalNodeProfileOutput = null as any;
utilities.lazyLoad(exports, ["getLogicalNodeProfile","getLogicalNodeProfileOutput"], () => require("./getLogicalNodeProfile"));

export { GetLogicalNodeToFabricNodeArgs, GetLogicalNodeToFabricNodeResult, GetLogicalNodeToFabricNodeOutputArgs } from "./getLogicalNodeToFabricNode";
export const getLogicalNodeToFabricNode: typeof import("./getLogicalNodeToFabricNode").getLogicalNodeToFabricNode = null as any;
export const getLogicalNodeToFabricNodeOutput: typeof import("./getLogicalNodeToFabricNode").getLogicalNodeToFabricNodeOutput = null as any;
utilities.lazyLoad(exports, ["getLogicalNodeToFabricNode","getLogicalNodeToFabricNodeOutput"], () => require("./getLogicalNodeToFabricNode"));

export { GetLoginDomainArgs, GetLoginDomainResult, GetLoginDomainOutputArgs } from "./getLoginDomain";
export const getLoginDomain: typeof import("./getLoginDomain").getLoginDomain = null as any;
export const getLoginDomainOutput: typeof import("./getLoginDomain").getLoginDomainOutput = null as any;
utilities.lazyLoad(exports, ["getLoginDomain","getLoginDomainOutput"], () => require("./getLoginDomain"));

export { GetLoginDomainProviderArgs, GetLoginDomainProviderResult, GetLoginDomainProviderOutputArgs } from "./getLoginDomainProvider";
export const getLoginDomainProvider: typeof import("./getLoginDomainProvider").getLoginDomainProvider = null as any;
export const getLoginDomainProviderOutput: typeof import("./getLoginDomainProvider").getLoginDomainProviderOutput = null as any;
utilities.lazyLoad(exports, ["getLoginDomainProvider","getLoginDomainProviderOutput"], () => require("./getLoginDomainProvider"));

export { GetMaintenanceGroupNodeArgs, GetMaintenanceGroupNodeResult, GetMaintenanceGroupNodeOutputArgs } from "./getMaintenanceGroupNode";
export const getMaintenanceGroupNode: typeof import("./getMaintenanceGroupNode").getMaintenanceGroupNode = null as any;
export const getMaintenanceGroupNodeOutput: typeof import("./getMaintenanceGroupNode").getMaintenanceGroupNodeOutput = null as any;
utilities.lazyLoad(exports, ["getMaintenanceGroupNode","getMaintenanceGroupNodeOutput"], () => require("./getMaintenanceGroupNode"));

export { GetMaintenancePolicyArgs, GetMaintenancePolicyResult, GetMaintenancePolicyOutputArgs } from "./getMaintenancePolicy";
export const getMaintenancePolicy: typeof import("./getMaintenancePolicy").getMaintenancePolicy = null as any;
export const getMaintenancePolicyOutput: typeof import("./getMaintenancePolicy").getMaintenancePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getMaintenancePolicy","getMaintenancePolicyOutput"], () => require("./getMaintenancePolicy"));

export { GetManagedNodeConnectivityGroupArgs, GetManagedNodeConnectivityGroupResult, GetManagedNodeConnectivityGroupOutputArgs } from "./getManagedNodeConnectivityGroup";
export const getManagedNodeConnectivityGroup: typeof import("./getManagedNodeConnectivityGroup").getManagedNodeConnectivityGroup = null as any;
export const getManagedNodeConnectivityGroupOutput: typeof import("./getManagedNodeConnectivityGroup").getManagedNodeConnectivityGroupOutput = null as any;
utilities.lazyLoad(exports, ["getManagedNodeConnectivityGroup","getManagedNodeConnectivityGroupOutput"], () => require("./getManagedNodeConnectivityGroup"));

export { GetMatchCommunityTermsArgs, GetMatchCommunityTermsResult, GetMatchCommunityTermsOutputArgs } from "./getMatchCommunityTerms";
export const getMatchCommunityTerms: typeof import("./getMatchCommunityTerms").getMatchCommunityTerms = null as any;
export const getMatchCommunityTermsOutput: typeof import("./getMatchCommunityTerms").getMatchCommunityTermsOutput = null as any;
utilities.lazyLoad(exports, ["getMatchCommunityTerms","getMatchCommunityTermsOutput"], () => require("./getMatchCommunityTerms"));

export { GetMatchRegexCommunityTermsArgs, GetMatchRegexCommunityTermsResult, GetMatchRegexCommunityTermsOutputArgs } from "./getMatchRegexCommunityTerms";
export const getMatchRegexCommunityTerms: typeof import("./getMatchRegexCommunityTerms").getMatchRegexCommunityTerms = null as any;
export const getMatchRegexCommunityTermsOutput: typeof import("./getMatchRegexCommunityTerms").getMatchRegexCommunityTermsOutput = null as any;
utilities.lazyLoad(exports, ["getMatchRegexCommunityTerms","getMatchRegexCommunityTermsOutput"], () => require("./getMatchRegexCommunityTerms"));

export { GetMatchRouteDestinationRuleArgs, GetMatchRouteDestinationRuleResult, GetMatchRouteDestinationRuleOutputArgs } from "./getMatchRouteDestinationRule";
export const getMatchRouteDestinationRule: typeof import("./getMatchRouteDestinationRule").getMatchRouteDestinationRule = null as any;
export const getMatchRouteDestinationRuleOutput: typeof import("./getMatchRouteDestinationRule").getMatchRouteDestinationRuleOutput = null as any;
utilities.lazyLoad(exports, ["getMatchRouteDestinationRule","getMatchRouteDestinationRuleOutput"], () => require("./getMatchRouteDestinationRule"));

export { GetMatchRuleArgs, GetMatchRuleResult, GetMatchRuleOutputArgs } from "./getMatchRule";
export const getMatchRule: typeof import("./getMatchRule").getMatchRule = null as any;
export const getMatchRuleOutput: typeof import("./getMatchRule").getMatchRuleOutput = null as any;
utilities.lazyLoad(exports, ["getMatchRule","getMatchRuleOutput"], () => require("./getMatchRule"));

export { GetMcpInstancePolicyArgs, GetMcpInstancePolicyResult, GetMcpInstancePolicyOutputArgs } from "./getMcpInstancePolicy";
export const getMcpInstancePolicy: typeof import("./getMcpInstancePolicy").getMcpInstancePolicy = null as any;
export const getMcpInstancePolicyOutput: typeof import("./getMcpInstancePolicy").getMcpInstancePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getMcpInstancePolicy","getMcpInstancePolicyOutput"], () => require("./getMcpInstancePolicy"));

export { GetMgmtPreferenceArgs, GetMgmtPreferenceResult, GetMgmtPreferenceOutputArgs } from "./getMgmtPreference";
export const getMgmtPreference: typeof import("./getMgmtPreference").getMgmtPreference = null as any;
export const getMgmtPreferenceOutput: typeof import("./getMgmtPreference").getMgmtPreferenceOutput = null as any;
utilities.lazyLoad(exports, ["getMgmtPreference","getMgmtPreferenceOutput"], () => require("./getMgmtPreference"));

export { GetMgmtZoneArgs, GetMgmtZoneResult, GetMgmtZoneOutputArgs } from "./getMgmtZone";
export const getMgmtZone: typeof import("./getMgmtZone").getMgmtZone = null as any;
export const getMgmtZoneOutput: typeof import("./getMgmtZone").getMgmtZoneOutput = null as any;
utilities.lazyLoad(exports, ["getMgmtZone","getMgmtZoneOutput"], () => require("./getMgmtZone"));

export { GetMiscablingProtocolInterfacePolicyArgs, GetMiscablingProtocolInterfacePolicyResult, GetMiscablingProtocolInterfacePolicyOutputArgs } from "./getMiscablingProtocolInterfacePolicy";
export const getMiscablingProtocolInterfacePolicy: typeof import("./getMiscablingProtocolInterfacePolicy").getMiscablingProtocolInterfacePolicy = null as any;
export const getMiscablingProtocolInterfacePolicyOutput: typeof import("./getMiscablingProtocolInterfacePolicy").getMiscablingProtocolInterfacePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getMiscablingProtocolInterfacePolicy","getMiscablingProtocolInterfacePolicyOutput"], () => require("./getMiscablingProtocolInterfacePolicy"));

export { GetMonitoringPolicyArgs, GetMonitoringPolicyResult, GetMonitoringPolicyOutputArgs } from "./getMonitoringPolicy";
export const getMonitoringPolicy: typeof import("./getMonitoringPolicy").getMonitoringPolicy = null as any;
export const getMonitoringPolicyOutput: typeof import("./getMonitoringPolicy").getMonitoringPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getMonitoringPolicy","getMonitoringPolicyOutput"], () => require("./getMonitoringPolicy"));

export { GetMulticastPoolArgs, GetMulticastPoolResult, GetMulticastPoolOutputArgs } from "./getMulticastPool";
export const getMulticastPool: typeof import("./getMulticastPool").getMulticastPool = null as any;
export const getMulticastPoolOutput: typeof import("./getMulticastPool").getMulticastPoolOutput = null as any;
utilities.lazyLoad(exports, ["getMulticastPool","getMulticastPoolOutput"], () => require("./getMulticastPool"));

export { GetMulticastPoolBlockArgs, GetMulticastPoolBlockResult, GetMulticastPoolBlockOutputArgs } from "./getMulticastPoolBlock";
export const getMulticastPoolBlock: typeof import("./getMulticastPoolBlock").getMulticastPoolBlock = null as any;
export const getMulticastPoolBlockOutput: typeof import("./getMulticastPoolBlock").getMulticastPoolBlockOutput = null as any;
utilities.lazyLoad(exports, ["getMulticastPoolBlock","getMulticastPoolBlockOutput"], () => require("./getMulticastPoolBlock"));

export { GetNetflowMonitorPolicyArgs, GetNetflowMonitorPolicyResult, GetNetflowMonitorPolicyOutputArgs } from "./getNetflowMonitorPolicy";
export const getNetflowMonitorPolicy: typeof import("./getNetflowMonitorPolicy").getNetflowMonitorPolicy = null as any;
export const getNetflowMonitorPolicyOutput: typeof import("./getNetflowMonitorPolicy").getNetflowMonitorPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getNetflowMonitorPolicy","getNetflowMonitorPolicyOutput"], () => require("./getNetflowMonitorPolicy"));

export { GetNetflowRecordPolicyArgs, GetNetflowRecordPolicyResult, GetNetflowRecordPolicyOutputArgs } from "./getNetflowRecordPolicy";
export const getNetflowRecordPolicy: typeof import("./getNetflowRecordPolicy").getNetflowRecordPolicy = null as any;
export const getNetflowRecordPolicyOutput: typeof import("./getNetflowRecordPolicy").getNetflowRecordPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getNetflowRecordPolicy","getNetflowRecordPolicyOutput"], () => require("./getNetflowRecordPolicy"));

export { GetNodeBlockArgs, GetNodeBlockResult, GetNodeBlockOutputArgs } from "./getNodeBlock";
export const getNodeBlock: typeof import("./getNodeBlock").getNodeBlock = null as any;
export const getNodeBlockOutput: typeof import("./getNodeBlock").getNodeBlockOutput = null as any;
utilities.lazyLoad(exports, ["getNodeBlock","getNodeBlockOutput"], () => require("./getNodeBlock"));

export { GetNodeBlockFirmwareArgs, GetNodeBlockFirmwareResult, GetNodeBlockFirmwareOutputArgs } from "./getNodeBlockFirmware";
export const getNodeBlockFirmware: typeof import("./getNodeBlockFirmware").getNodeBlockFirmware = null as any;
export const getNodeBlockFirmwareOutput: typeof import("./getNodeBlockFirmware").getNodeBlockFirmwareOutput = null as any;
utilities.lazyLoad(exports, ["getNodeBlockFirmware","getNodeBlockFirmwareOutput"], () => require("./getNodeBlockFirmware"));

export { GetNodeMgmtEpgArgs, GetNodeMgmtEpgResult, GetNodeMgmtEpgOutputArgs } from "./getNodeMgmtEpg";
export const getNodeMgmtEpg: typeof import("./getNodeMgmtEpg").getNodeMgmtEpg = null as any;
export const getNodeMgmtEpgOutput: typeof import("./getNodeMgmtEpg").getNodeMgmtEpgOutput = null as any;
utilities.lazyLoad(exports, ["getNodeMgmtEpg","getNodeMgmtEpgOutput"], () => require("./getNodeMgmtEpg"));

export { GetOspfInterfacePolicyArgs, GetOspfInterfacePolicyResult, GetOspfInterfacePolicyOutputArgs } from "./getOspfInterfacePolicy";
export const getOspfInterfacePolicy: typeof import("./getOspfInterfacePolicy").getOspfInterfacePolicy = null as any;
export const getOspfInterfacePolicyOutput: typeof import("./getOspfInterfacePolicy").getOspfInterfacePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getOspfInterfacePolicy","getOspfInterfacePolicyOutput"], () => require("./getOspfInterfacePolicy"));

export { GetOspfRouteSummarizationArgs, GetOspfRouteSummarizationResult, GetOspfRouteSummarizationOutputArgs } from "./getOspfRouteSummarization";
export const getOspfRouteSummarization: typeof import("./getOspfRouteSummarization").getOspfRouteSummarization = null as any;
export const getOspfRouteSummarizationOutput: typeof import("./getOspfRouteSummarization").getOspfRouteSummarizationOutput = null as any;
utilities.lazyLoad(exports, ["getOspfRouteSummarization","getOspfRouteSummarizationOutput"], () => require("./getOspfRouteSummarization"));

export { GetOspfTimersArgs, GetOspfTimersResult, GetOspfTimersOutputArgs } from "./getOspfTimers";
export const getOspfTimers: typeof import("./getOspfTimers").getOspfTimers = null as any;
export const getOspfTimersOutput: typeof import("./getOspfTimers").getOspfTimersOutput = null as any;
utilities.lazyLoad(exports, ["getOspfTimers","getOspfTimersOutput"], () => require("./getOspfTimers"));

export { GetOutOfBandContractArgs, GetOutOfBandContractResult, GetOutOfBandContractOutputArgs } from "./getOutOfBandContract";
export const getOutOfBandContract: typeof import("./getOutOfBandContract").getOutOfBandContract = null as any;
export const getOutOfBandContractOutput: typeof import("./getOutOfBandContract").getOutOfBandContractOutput = null as any;
utilities.lazyLoad(exports, ["getOutOfBandContract","getOutOfBandContractOutput"], () => require("./getOutOfBandContract"));

export { GetPbrL1L2DestinationArgs, GetPbrL1L2DestinationResult, GetPbrL1L2DestinationOutputArgs } from "./getPbrL1L2Destination";
export const getPbrL1L2Destination: typeof import("./getPbrL1L2Destination").getPbrL1L2Destination = null as any;
export const getPbrL1L2DestinationOutput: typeof import("./getPbrL1L2Destination").getPbrL1L2DestinationOutput = null as any;
utilities.lazyLoad(exports, ["getPbrL1L2Destination","getPbrL1L2DestinationOutput"], () => require("./getPbrL1L2Destination"));

export { GetPhysicalDomainArgs, GetPhysicalDomainResult, GetPhysicalDomainOutputArgs } from "./getPhysicalDomain";
export const getPhysicalDomain: typeof import("./getPhysicalDomain").getPhysicalDomain = null as any;
export const getPhysicalDomainOutput: typeof import("./getPhysicalDomain").getPhysicalDomainOutput = null as any;
utilities.lazyLoad(exports, ["getPhysicalDomain","getPhysicalDomainOutput"], () => require("./getPhysicalDomain"));

export { GetPimInterfacePolicyArgs, GetPimInterfacePolicyResult, GetPimInterfacePolicyOutputArgs } from "./getPimInterfacePolicy";
export const getPimInterfacePolicy: typeof import("./getPimInterfacePolicy").getPimInterfacePolicy = null as any;
export const getPimInterfacePolicyOutput: typeof import("./getPimInterfacePolicy").getPimInterfacePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getPimInterfacePolicy","getPimInterfacePolicyOutput"], () => require("./getPimInterfacePolicy"));

export { GetPimRouteMapEntryArgs, GetPimRouteMapEntryResult, GetPimRouteMapEntryOutputArgs } from "./getPimRouteMapEntry";
export const getPimRouteMapEntry: typeof import("./getPimRouteMapEntry").getPimRouteMapEntry = null as any;
export const getPimRouteMapEntryOutput: typeof import("./getPimRouteMapEntry").getPimRouteMapEntryOutput = null as any;
utilities.lazyLoad(exports, ["getPimRouteMapEntry","getPimRouteMapEntryOutput"], () => require("./getPimRouteMapEntry"));

export { GetPimRouteMapPolicyArgs, GetPimRouteMapPolicyResult, GetPimRouteMapPolicyOutputArgs } from "./getPimRouteMapPolicy";
export const getPimRouteMapPolicy: typeof import("./getPimRouteMapPolicy").getPimRouteMapPolicy = null as any;
export const getPimRouteMapPolicyOutput: typeof import("./getPimRouteMapPolicy").getPimRouteMapPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getPimRouteMapPolicy","getPimRouteMapPolicyOutput"], () => require("./getPimRouteMapPolicy"));

export { GetPodMaintenanceGroupArgs, GetPodMaintenanceGroupResult, GetPodMaintenanceGroupOutputArgs } from "./getPodMaintenanceGroup";
export const getPodMaintenanceGroup: typeof import("./getPodMaintenanceGroup").getPodMaintenanceGroup = null as any;
export const getPodMaintenanceGroupOutput: typeof import("./getPodMaintenanceGroup").getPodMaintenanceGroupOutput = null as any;
utilities.lazyLoad(exports, ["getPodMaintenanceGroup","getPodMaintenanceGroupOutput"], () => require("./getPodMaintenanceGroup"));

export { GetPortSecurityPolicyArgs, GetPortSecurityPolicyResult, GetPortSecurityPolicyOutputArgs } from "./getPortSecurityPolicy";
export const getPortSecurityPolicy: typeof import("./getPortSecurityPolicy").getPortSecurityPolicy = null as any;
export const getPortSecurityPolicyOutput: typeof import("./getPortSecurityPolicy").getPortSecurityPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getPortSecurityPolicy","getPortSecurityPolicyOutput"], () => require("./getPortSecurityPolicy"));

export { GetPortTrackingArgs, GetPortTrackingResult, GetPortTrackingOutputArgs } from "./getPortTracking";
export const getPortTracking: typeof import("./getPortTracking").getPortTracking = null as any;
export const getPortTrackingOutput: typeof import("./getPortTracking").getPortTrackingOutput = null as any;
utilities.lazyLoad(exports, ["getPortTracking","getPortTrackingOutput"], () => require("./getPortTracking"));

export { GetPowerSupplyRedundancyPolicyArgs, GetPowerSupplyRedundancyPolicyResult, GetPowerSupplyRedundancyPolicyOutputArgs } from "./getPowerSupplyRedundancyPolicy";
export const getPowerSupplyRedundancyPolicy: typeof import("./getPowerSupplyRedundancyPolicy").getPowerSupplyRedundancyPolicy = null as any;
export const getPowerSupplyRedundancyPolicyOutput: typeof import("./getPowerSupplyRedundancyPolicy").getPowerSupplyRedundancyPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getPowerSupplyRedundancyPolicy","getPowerSupplyRedundancyPolicyOutput"], () => require("./getPowerSupplyRedundancyPolicy"));

export { GetQosInstancePolicyArgs, GetQosInstancePolicyResult, GetQosInstancePolicyOutputArgs } from "./getQosInstancePolicy";
export const getQosInstancePolicy: typeof import("./getQosInstancePolicy").getQosInstancePolicy = null as any;
export const getQosInstancePolicyOutput: typeof import("./getQosInstancePolicy").getQosInstancePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getQosInstancePolicy","getQosInstancePolicyOutput"], () => require("./getQosInstancePolicy"));

export { GetRadiusProviderArgs, GetRadiusProviderResult, GetRadiusProviderOutputArgs } from "./getRadiusProvider";
export const getRadiusProvider: typeof import("./getRadiusProvider").getRadiusProvider = null as any;
export const getRadiusProviderOutput: typeof import("./getRadiusProvider").getRadiusProviderOutput = null as any;
utilities.lazyLoad(exports, ["getRadiusProvider","getRadiusProviderOutput"], () => require("./getRadiusProvider"));

export { GetRadiusProviderGroupArgs, GetRadiusProviderGroupResult, GetRadiusProviderGroupOutputArgs } from "./getRadiusProviderGroup";
export const getRadiusProviderGroup: typeof import("./getRadiusProviderGroup").getRadiusProviderGroup = null as any;
export const getRadiusProviderGroupOutput: typeof import("./getRadiusProviderGroup").getRadiusProviderGroupOutput = null as any;
utilities.lazyLoad(exports, ["getRadiusProviderGroup","getRadiusProviderGroupOutput"], () => require("./getRadiusProviderGroup"));

export { GetRangesArgs, GetRangesResult, GetRangesOutputArgs } from "./getRanges";
export const getRanges: typeof import("./getRanges").getRanges = null as any;
export const getRangesOutput: typeof import("./getRanges").getRangesOutput = null as any;
utilities.lazyLoad(exports, ["getRanges","getRangesOutput"], () => require("./getRanges"));

export { GetRecurringWindowArgs, GetRecurringWindowResult, GetRecurringWindowOutputArgs } from "./getRecurringWindow";
export const getRecurringWindow: typeof import("./getRecurringWindow").getRecurringWindow = null as any;
export const getRecurringWindowOutput: typeof import("./getRecurringWindow").getRecurringWindowOutput = null as any;
utilities.lazyLoad(exports, ["getRecurringWindow","getRecurringWindowOutput"], () => require("./getRecurringWindow"));

export { GetRelationToConsumedOutOfBandContractArgs, GetRelationToConsumedOutOfBandContractResult, GetRelationToConsumedOutOfBandContractOutputArgs } from "./getRelationToConsumedOutOfBandContract";
export const getRelationToConsumedOutOfBandContract: typeof import("./getRelationToConsumedOutOfBandContract").getRelationToConsumedOutOfBandContract = null as any;
export const getRelationToConsumedOutOfBandContractOutput: typeof import("./getRelationToConsumedOutOfBandContract").getRelationToConsumedOutOfBandContractOutput = null as any;
utilities.lazyLoad(exports, ["getRelationToConsumedOutOfBandContract","getRelationToConsumedOutOfBandContractOutput"], () => require("./getRelationToConsumedOutOfBandContract"));

export { GetRelationToFallbackRouteGroupArgs, GetRelationToFallbackRouteGroupResult, GetRelationToFallbackRouteGroupOutputArgs } from "./getRelationToFallbackRouteGroup";
export const getRelationToFallbackRouteGroup: typeof import("./getRelationToFallbackRouteGroup").getRelationToFallbackRouteGroup = null as any;
export const getRelationToFallbackRouteGroupOutput: typeof import("./getRelationToFallbackRouteGroup").getRelationToFallbackRouteGroupOutput = null as any;
utilities.lazyLoad(exports, ["getRelationToFallbackRouteGroup","getRelationToFallbackRouteGroupOutput"], () => require("./getRelationToFallbackRouteGroup"));

export { GetRelationToNetflowExporterArgs, GetRelationToNetflowExporterResult, GetRelationToNetflowExporterOutputArgs } from "./getRelationToNetflowExporter";
export const getRelationToNetflowExporter: typeof import("./getRelationToNetflowExporter").getRelationToNetflowExporter = null as any;
export const getRelationToNetflowExporterOutput: typeof import("./getRelationToNetflowExporter").getRelationToNetflowExporterOutput = null as any;
utilities.lazyLoad(exports, ["getRelationToNetflowExporter","getRelationToNetflowExporterOutput"], () => require("./getRelationToNetflowExporter"));

export { GetRestArgs, GetRestResult, GetRestOutputArgs } from "./getRest";
export const getRest: typeof import("./getRest").getRest = null as any;
export const getRestOutput: typeof import("./getRest").getRestOutput = null as any;
utilities.lazyLoad(exports, ["getRest","getRestOutput"], () => require("./getRest"));

export { GetRestManagedArgs, GetRestManagedResult, GetRestManagedOutputArgs } from "./getRestManaged";
export const getRestManaged: typeof import("./getRestManaged").getRestManaged = null as any;
export const getRestManagedOutput: typeof import("./getRestManaged").getRestManagedOutput = null as any;
utilities.lazyLoad(exports, ["getRestManaged","getRestManagedOutput"], () => require("./getRestManaged"));

export { GetRouteControlContextArgs, GetRouteControlContextResult, GetRouteControlContextOutputArgs } from "./getRouteControlContext";
export const getRouteControlContext: typeof import("./getRouteControlContext").getRouteControlContext = null as any;
export const getRouteControlContextOutput: typeof import("./getRouteControlContext").getRouteControlContextOutput = null as any;
utilities.lazyLoad(exports, ["getRouteControlContext","getRouteControlContextOutput"], () => require("./getRouteControlContext"));

export { GetRouteControlProfileArgs, GetRouteControlProfileResult, GetRouteControlProfileOutputArgs } from "./getRouteControlProfile";
export const getRouteControlProfile: typeof import("./getRouteControlProfile").getRouteControlProfile = null as any;
export const getRouteControlProfileOutput: typeof import("./getRouteControlProfile").getRouteControlProfileOutput = null as any;
utilities.lazyLoad(exports, ["getRouteControlProfile","getRouteControlProfileOutput"], () => require("./getRouteControlProfile"));

export { GetRsaProviderArgs, GetRsaProviderResult, GetRsaProviderOutputArgs } from "./getRsaProvider";
export const getRsaProvider: typeof import("./getRsaProvider").getRsaProvider = null as any;
export const getRsaProviderOutput: typeof import("./getRsaProvider").getRsaProviderOutput = null as any;
utilities.lazyLoad(exports, ["getRsaProvider","getRsaProviderOutput"], () => require("./getRsaProvider"));

export { GetSamlCertificateArgs, GetSamlCertificateResult, GetSamlCertificateOutputArgs } from "./getSamlCertificate";
export const getSamlCertificate: typeof import("./getSamlCertificate").getSamlCertificate = null as any;
export const getSamlCertificateOutput: typeof import("./getSamlCertificate").getSamlCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getSamlCertificate","getSamlCertificateOutput"], () => require("./getSamlCertificate"));

export { GetSamlProviderArgs, GetSamlProviderResult, GetSamlProviderOutputArgs } from "./getSamlProvider";
export const getSamlProvider: typeof import("./getSamlProvider").getSamlProvider = null as any;
export const getSamlProviderOutput: typeof import("./getSamlProvider").getSamlProviderOutput = null as any;
utilities.lazyLoad(exports, ["getSamlProvider","getSamlProviderOutput"], () => require("./getSamlProvider"));

export { GetSamlProviderGroupArgs, GetSamlProviderGroupResult, GetSamlProviderGroupOutputArgs } from "./getSamlProviderGroup";
export const getSamlProviderGroup: typeof import("./getSamlProviderGroup").getSamlProviderGroup = null as any;
export const getSamlProviderGroupOutput: typeof import("./getSamlProviderGroup").getSamlProviderGroupOutput = null as any;
utilities.lazyLoad(exports, ["getSamlProviderGroup","getSamlProviderGroupOutput"], () => require("./getSamlProviderGroup"));

export { GetServiceRedirectBackupPolicyArgs, GetServiceRedirectBackupPolicyResult, GetServiceRedirectBackupPolicyOutputArgs } from "./getServiceRedirectBackupPolicy";
export const getServiceRedirectBackupPolicy: typeof import("./getServiceRedirectBackupPolicy").getServiceRedirectBackupPolicy = null as any;
export const getServiceRedirectBackupPolicyOutput: typeof import("./getServiceRedirectBackupPolicy").getServiceRedirectBackupPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getServiceRedirectBackupPolicy","getServiceRedirectBackupPolicyOutput"], () => require("./getServiceRedirectBackupPolicy"));

export { GetServiceRedirectPolicyArgs, GetServiceRedirectPolicyResult, GetServiceRedirectPolicyOutputArgs } from "./getServiceRedirectPolicy";
export const getServiceRedirectPolicy: typeof import("./getServiceRedirectPolicy").getServiceRedirectPolicy = null as any;
export const getServiceRedirectPolicyOutput: typeof import("./getServiceRedirectPolicy").getServiceRedirectPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getServiceRedirectPolicy","getServiceRedirectPolicyOutput"], () => require("./getServiceRedirectPolicy"));

export { GetSnmpCommunityArgs, GetSnmpCommunityResult, GetSnmpCommunityOutputArgs } from "./getSnmpCommunity";
export const getSnmpCommunity: typeof import("./getSnmpCommunity").getSnmpCommunity = null as any;
export const getSnmpCommunityOutput: typeof import("./getSnmpCommunity").getSnmpCommunityOutput = null as any;
utilities.lazyLoad(exports, ["getSnmpCommunity","getSnmpCommunityOutput"], () => require("./getSnmpCommunity"));

export { GetSnmpUserArgs, GetSnmpUserResult, GetSnmpUserOutputArgs } from "./getSnmpUser";
export const getSnmpUser: typeof import("./getSnmpUser").getSnmpUser = null as any;
export const getSnmpUserOutput: typeof import("./getSnmpUser").getSnmpUserOutput = null as any;
utilities.lazyLoad(exports, ["getSnmpUser","getSnmpUserOutput"], () => require("./getSnmpUser"));

export { GetSpanDestinationGroupArgs, GetSpanDestinationGroupResult, GetSpanDestinationGroupOutputArgs } from "./getSpanDestinationGroup";
export const getSpanDestinationGroup: typeof import("./getSpanDestinationGroup").getSpanDestinationGroup = null as any;
export const getSpanDestinationGroupOutput: typeof import("./getSpanDestinationGroup").getSpanDestinationGroupOutput = null as any;
utilities.lazyLoad(exports, ["getSpanDestinationGroup","getSpanDestinationGroupOutput"], () => require("./getSpanDestinationGroup"));

export { GetSpanSourceGroupArgs, GetSpanSourceGroupResult, GetSpanSourceGroupOutputArgs } from "./getSpanSourceGroup";
export const getSpanSourceGroup: typeof import("./getSpanSourceGroup").getSpanSourceGroup = null as any;
export const getSpanSourceGroupOutput: typeof import("./getSpanSourceGroup").getSpanSourceGroupOutput = null as any;
utilities.lazyLoad(exports, ["getSpanSourceGroup","getSpanSourceGroupOutput"], () => require("./getSpanSourceGroup"));

export { GetSpanSourcedestinationGroupMatchLabelArgs, GetSpanSourcedestinationGroupMatchLabelResult, GetSpanSourcedestinationGroupMatchLabelOutputArgs } from "./getSpanSourcedestinationGroupMatchLabel";
export const getSpanSourcedestinationGroupMatchLabel: typeof import("./getSpanSourcedestinationGroupMatchLabel").getSpanSourcedestinationGroupMatchLabel = null as any;
export const getSpanSourcedestinationGroupMatchLabelOutput: typeof import("./getSpanSourcedestinationGroupMatchLabel").getSpanSourcedestinationGroupMatchLabelOutput = null as any;
utilities.lazyLoad(exports, ["getSpanSourcedestinationGroupMatchLabel","getSpanSourcedestinationGroupMatchLabelOutput"], () => require("./getSpanSourcedestinationGroupMatchLabel"));

export { GetSpanningTreeInterfacePolicyArgs, GetSpanningTreeInterfacePolicyResult, GetSpanningTreeInterfacePolicyOutputArgs } from "./getSpanningTreeInterfacePolicy";
export const getSpanningTreeInterfacePolicy: typeof import("./getSpanningTreeInterfacePolicy").getSpanningTreeInterfacePolicy = null as any;
export const getSpanningTreeInterfacePolicyOutput: typeof import("./getSpanningTreeInterfacePolicy").getSpanningTreeInterfacePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSpanningTreeInterfacePolicy","getSpanningTreeInterfacePolicyOutput"], () => require("./getSpanningTreeInterfacePolicy"));

export { GetSpineAccessPortSelectorArgs, GetSpineAccessPortSelectorResult, GetSpineAccessPortSelectorOutputArgs } from "./getSpineAccessPortSelector";
export const getSpineAccessPortSelector: typeof import("./getSpineAccessPortSelector").getSpineAccessPortSelector = null as any;
export const getSpineAccessPortSelectorOutput: typeof import("./getSpineAccessPortSelector").getSpineAccessPortSelectorOutput = null as any;
utilities.lazyLoad(exports, ["getSpineAccessPortSelector","getSpineAccessPortSelectorOutput"], () => require("./getSpineAccessPortSelector"));

export { GetSpineInterfaceProfileArgs, GetSpineInterfaceProfileResult, GetSpineInterfaceProfileOutputArgs } from "./getSpineInterfaceProfile";
export const getSpineInterfaceProfile: typeof import("./getSpineInterfaceProfile").getSpineInterfaceProfile = null as any;
export const getSpineInterfaceProfileOutput: typeof import("./getSpineInterfaceProfile").getSpineInterfaceProfileOutput = null as any;
utilities.lazyLoad(exports, ["getSpineInterfaceProfile","getSpineInterfaceProfileOutput"], () => require("./getSpineInterfaceProfile"));

export { GetSpineInterfaceProfileSelectorArgs, GetSpineInterfaceProfileSelectorResult, GetSpineInterfaceProfileSelectorOutputArgs } from "./getSpineInterfaceProfileSelector";
export const getSpineInterfaceProfileSelector: typeof import("./getSpineInterfaceProfileSelector").getSpineInterfaceProfileSelector = null as any;
export const getSpineInterfaceProfileSelectorOutput: typeof import("./getSpineInterfaceProfileSelector").getSpineInterfaceProfileSelectorOutput = null as any;
utilities.lazyLoad(exports, ["getSpineInterfaceProfileSelector","getSpineInterfaceProfileSelectorOutput"], () => require("./getSpineInterfaceProfileSelector"));

export { GetSpinePortPolicyGroupArgs, GetSpinePortPolicyGroupResult, GetSpinePortPolicyGroupOutputArgs } from "./getSpinePortPolicyGroup";
export const getSpinePortPolicyGroup: typeof import("./getSpinePortPolicyGroup").getSpinePortPolicyGroup = null as any;
export const getSpinePortPolicyGroupOutput: typeof import("./getSpinePortPolicyGroup").getSpinePortPolicyGroupOutput = null as any;
utilities.lazyLoad(exports, ["getSpinePortPolicyGroup","getSpinePortPolicyGroupOutput"], () => require("./getSpinePortPolicyGroup"));

export { GetSpinePortSelectorArgs, GetSpinePortSelectorResult, GetSpinePortSelectorOutputArgs } from "./getSpinePortSelector";
export const getSpinePortSelector: typeof import("./getSpinePortSelector").getSpinePortSelector = null as any;
export const getSpinePortSelectorOutput: typeof import("./getSpinePortSelector").getSpinePortSelectorOutput = null as any;
utilities.lazyLoad(exports, ["getSpinePortSelector","getSpinePortSelectorOutput"], () => require("./getSpinePortSelector"));

export { GetSpineProfileArgs, GetSpineProfileResult, GetSpineProfileOutputArgs } from "./getSpineProfile";
export const getSpineProfile: typeof import("./getSpineProfile").getSpineProfile = null as any;
export const getSpineProfileOutput: typeof import("./getSpineProfile").getSpineProfileOutput = null as any;
utilities.lazyLoad(exports, ["getSpineProfile","getSpineProfileOutput"], () => require("./getSpineProfile"));

export { GetSpineSwitchAssociationArgs, GetSpineSwitchAssociationResult, GetSpineSwitchAssociationOutputArgs } from "./getSpineSwitchAssociation";
export const getSpineSwitchAssociation: typeof import("./getSpineSwitchAssociation").getSpineSwitchAssociation = null as any;
export const getSpineSwitchAssociationOutput: typeof import("./getSpineSwitchAssociation").getSpineSwitchAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getSpineSwitchAssociation","getSpineSwitchAssociationOutput"], () => require("./getSpineSwitchAssociation"));

export { GetSpineSwitchPolicyGroupArgs, GetSpineSwitchPolicyGroupResult, GetSpineSwitchPolicyGroupOutputArgs } from "./getSpineSwitchPolicyGroup";
export const getSpineSwitchPolicyGroup: typeof import("./getSpineSwitchPolicyGroup").getSpineSwitchPolicyGroup = null as any;
export const getSpineSwitchPolicyGroupOutput: typeof import("./getSpineSwitchPolicyGroup").getSpineSwitchPolicyGroupOutput = null as any;
utilities.lazyLoad(exports, ["getSpineSwitchPolicyGroup","getSpineSwitchPolicyGroupOutput"], () => require("./getSpineSwitchPolicyGroup"));

export { GetStaticNodeMgmtAddressArgs, GetStaticNodeMgmtAddressResult, GetStaticNodeMgmtAddressOutputArgs } from "./getStaticNodeMgmtAddress";
export const getStaticNodeMgmtAddress: typeof import("./getStaticNodeMgmtAddress").getStaticNodeMgmtAddress = null as any;
export const getStaticNodeMgmtAddressOutput: typeof import("./getStaticNodeMgmtAddress").getStaticNodeMgmtAddressOutput = null as any;
utilities.lazyLoad(exports, ["getStaticNodeMgmtAddress","getStaticNodeMgmtAddressOutput"], () => require("./getStaticNodeMgmtAddress"));

export { GetSubnetArgs, GetSubnetResult, GetSubnetOutputArgs } from "./getSubnet";
export const getSubnet: typeof import("./getSubnet").getSubnet = null as any;
export const getSubnetOutput: typeof import("./getSubnet").getSubnetOutput = null as any;
utilities.lazyLoad(exports, ["getSubnet","getSubnetOutput"], () => require("./getSubnet"));

export { GetSystemArgs, GetSystemResult, GetSystemOutputArgs } from "./getSystem";
export const getSystem: typeof import("./getSystem").getSystem = null as any;
export const getSystemOutput: typeof import("./getSystem").getSystemOutput = null as any;
utilities.lazyLoad(exports, ["getSystem","getSystemOutput"], () => require("./getSystem"));

export { GetTabooContractArgs, GetTabooContractResult, GetTabooContractOutputArgs } from "./getTabooContract";
export const getTabooContract: typeof import("./getTabooContract").getTabooContract = null as any;
export const getTabooContractOutput: typeof import("./getTabooContract").getTabooContractOutput = null as any;
utilities.lazyLoad(exports, ["getTabooContract","getTabooContractOutput"], () => require("./getTabooContract"));

export { GetTacacsAccountingArgs, GetTacacsAccountingResult, GetTacacsAccountingOutputArgs } from "./getTacacsAccounting";
export const getTacacsAccounting: typeof import("./getTacacsAccounting").getTacacsAccounting = null as any;
export const getTacacsAccountingOutput: typeof import("./getTacacsAccounting").getTacacsAccountingOutput = null as any;
utilities.lazyLoad(exports, ["getTacacsAccounting","getTacacsAccountingOutput"], () => require("./getTacacsAccounting"));

export { GetTacacsAccountingDestinationArgs, GetTacacsAccountingDestinationResult, GetTacacsAccountingDestinationOutputArgs } from "./getTacacsAccountingDestination";
export const getTacacsAccountingDestination: typeof import("./getTacacsAccountingDestination").getTacacsAccountingDestination = null as any;
export const getTacacsAccountingDestinationOutput: typeof import("./getTacacsAccountingDestination").getTacacsAccountingDestinationOutput = null as any;
utilities.lazyLoad(exports, ["getTacacsAccountingDestination","getTacacsAccountingDestinationOutput"], () => require("./getTacacsAccountingDestination"));

export { GetTacacsProviderArgs, GetTacacsProviderResult, GetTacacsProviderOutputArgs } from "./getTacacsProvider";
export const getTacacsProvider: typeof import("./getTacacsProvider").getTacacsProvider = null as any;
export const getTacacsProviderOutput: typeof import("./getTacacsProvider").getTacacsProviderOutput = null as any;
utilities.lazyLoad(exports, ["getTacacsProvider","getTacacsProviderOutput"], () => require("./getTacacsProvider"));

export { GetTacacsProviderGroupArgs, GetTacacsProviderGroupResult, GetTacacsProviderGroupOutputArgs } from "./getTacacsProviderGroup";
export const getTacacsProviderGroup: typeof import("./getTacacsProviderGroup").getTacacsProviderGroup = null as any;
export const getTacacsProviderGroupOutput: typeof import("./getTacacsProviderGroup").getTacacsProviderGroupOutput = null as any;
utilities.lazyLoad(exports, ["getTacacsProviderGroup","getTacacsProviderGroupOutput"], () => require("./getTacacsProviderGroup"));

export { GetTacacsSourceArgs, GetTacacsSourceResult, GetTacacsSourceOutputArgs } from "./getTacacsSource";
export const getTacacsSource: typeof import("./getTacacsSource").getTacacsSource = null as any;
export const getTacacsSourceOutput: typeof import("./getTacacsSource").getTacacsSourceOutput = null as any;
utilities.lazyLoad(exports, ["getTacacsSource","getTacacsSourceOutput"], () => require("./getTacacsSource"));

export { GetTagArgs, GetTagResult, GetTagOutputArgs } from "./getTag";
export const getTag: typeof import("./getTag").getTag = null as any;
export const getTagOutput: typeof import("./getTag").getTagOutput = null as any;
utilities.lazyLoad(exports, ["getTag","getTagOutput"], () => require("./getTag"));

export { GetTenantArgs, GetTenantResult, GetTenantOutputArgs } from "./getTenant";
export const getTenant: typeof import("./getTenant").getTenant = null as any;
export const getTenantOutput: typeof import("./getTenant").getTenantOutput = null as any;
utilities.lazyLoad(exports, ["getTenant","getTenantOutput"], () => require("./getTenant"));

export { GetTenantToCloudAccountArgs, GetTenantToCloudAccountResult, GetTenantToCloudAccountOutputArgs } from "./getTenantToCloudAccount";
export const getTenantToCloudAccount: typeof import("./getTenantToCloudAccount").getTenantToCloudAccount = null as any;
export const getTenantToCloudAccountOutput: typeof import("./getTenantToCloudAccount").getTenantToCloudAccountOutput = null as any;
utilities.lazyLoad(exports, ["getTenantToCloudAccount","getTenantToCloudAccountOutput"], () => require("./getTenantToCloudAccount"));

export { GetTriggerSchedulerArgs, GetTriggerSchedulerResult, GetTriggerSchedulerOutputArgs } from "./getTriggerScheduler";
export const getTriggerScheduler: typeof import("./getTriggerScheduler").getTriggerScheduler = null as any;
export const getTriggerSchedulerOutput: typeof import("./getTriggerScheduler").getTriggerSchedulerOutput = null as any;
utilities.lazyLoad(exports, ["getTriggerScheduler","getTriggerSchedulerOutput"], () => require("./getTriggerScheduler"));

export { GetUserSecurityDomainArgs, GetUserSecurityDomainResult, GetUserSecurityDomainOutputArgs } from "./getUserSecurityDomain";
export const getUserSecurityDomain: typeof import("./getUserSecurityDomain").getUserSecurityDomain = null as any;
export const getUserSecurityDomainOutput: typeof import("./getUserSecurityDomain").getUserSecurityDomainOutput = null as any;
utilities.lazyLoad(exports, ["getUserSecurityDomain","getUserSecurityDomainOutput"], () => require("./getUserSecurityDomain"));

export { GetUserSecurityDomainRoleArgs, GetUserSecurityDomainRoleResult, GetUserSecurityDomainRoleOutputArgs } from "./getUserSecurityDomainRole";
export const getUserSecurityDomainRole: typeof import("./getUserSecurityDomainRole").getUserSecurityDomainRole = null as any;
export const getUserSecurityDomainRoleOutput: typeof import("./getUserSecurityDomainRole").getUserSecurityDomainRoleOutput = null as any;
utilities.lazyLoad(exports, ["getUserSecurityDomainRole","getUserSecurityDomainRoleOutput"], () => require("./getUserSecurityDomainRole"));

export { GetVlanEncapsulationforVxlanTrafficArgs, GetVlanEncapsulationforVxlanTrafficResult, GetVlanEncapsulationforVxlanTrafficOutputArgs } from "./getVlanEncapsulationforVxlanTraffic";
export const getVlanEncapsulationforVxlanTraffic: typeof import("./getVlanEncapsulationforVxlanTraffic").getVlanEncapsulationforVxlanTraffic = null as any;
export const getVlanEncapsulationforVxlanTrafficOutput: typeof import("./getVlanEncapsulationforVxlanTraffic").getVlanEncapsulationforVxlanTrafficOutput = null as any;
utilities.lazyLoad(exports, ["getVlanEncapsulationforVxlanTraffic","getVlanEncapsulationforVxlanTrafficOutput"], () => require("./getVlanEncapsulationforVxlanTraffic"));

export { GetVlanPoolArgs, GetVlanPoolResult, GetVlanPoolOutputArgs } from "./getVlanPool";
export const getVlanPool: typeof import("./getVlanPool").getVlanPool = null as any;
export const getVlanPoolOutput: typeof import("./getVlanPool").getVlanPoolOutput = null as any;
utilities.lazyLoad(exports, ["getVlanPool","getVlanPoolOutput"], () => require("./getVlanPool"));

export { GetVmmControllerArgs, GetVmmControllerResult, GetVmmControllerOutputArgs } from "./getVmmController";
export const getVmmController: typeof import("./getVmmController").getVmmController = null as any;
export const getVmmControllerOutput: typeof import("./getVmmController").getVmmControllerOutput = null as any;
utilities.lazyLoad(exports, ["getVmmController","getVmmControllerOutput"], () => require("./getVmmController"));

export { GetVmmCredentialArgs, GetVmmCredentialResult, GetVmmCredentialOutputArgs } from "./getVmmCredential";
export const getVmmCredential: typeof import("./getVmmCredential").getVmmCredential = null as any;
export const getVmmCredentialOutput: typeof import("./getVmmCredential").getVmmCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getVmmCredential","getVmmCredentialOutput"], () => require("./getVmmCredential"));

export { GetVmmDomainArgs, GetVmmDomainResult, GetVmmDomainOutputArgs } from "./getVmmDomain";
export const getVmmDomain: typeof import("./getVmmDomain").getVmmDomain = null as any;
export const getVmmDomainOutput: typeof import("./getVmmDomain").getVmmDomainOutput = null as any;
utilities.lazyLoad(exports, ["getVmmDomain","getVmmDomainOutput"], () => require("./getVmmDomain"));

export { GetVpcDomainPolicyArgs, GetVpcDomainPolicyResult, GetVpcDomainPolicyOutputArgs } from "./getVpcDomainPolicy";
export const getVpcDomainPolicy: typeof import("./getVpcDomainPolicy").getVpcDomainPolicy = null as any;
export const getVpcDomainPolicyOutput: typeof import("./getVpcDomainPolicy").getVpcDomainPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getVpcDomainPolicy","getVpcDomainPolicyOutput"], () => require("./getVpcDomainPolicy"));

export { GetVpcExplicitProtectionGroupArgs, GetVpcExplicitProtectionGroupResult, GetVpcExplicitProtectionGroupOutputArgs } from "./getVpcExplicitProtectionGroup";
export const getVpcExplicitProtectionGroup: typeof import("./getVpcExplicitProtectionGroup").getVpcExplicitProtectionGroup = null as any;
export const getVpcExplicitProtectionGroupOutput: typeof import("./getVpcExplicitProtectionGroup").getVpcExplicitProtectionGroupOutput = null as any;
utilities.lazyLoad(exports, ["getVpcExplicitProtectionGroup","getVpcExplicitProtectionGroupOutput"], () => require("./getVpcExplicitProtectionGroup"));

export { GetVrfArgs, GetVrfResult, GetVrfOutputArgs } from "./getVrf";
export const getVrf: typeof import("./getVrf").getVrf = null as any;
export const getVrfOutput: typeof import("./getVrf").getVrfOutput = null as any;
utilities.lazyLoad(exports, ["getVrf","getVrfOutput"], () => require("./getVrf"));

export { GetVrfFallbackRouteGroupArgs, GetVrfFallbackRouteGroupResult, GetVrfFallbackRouteGroupOutputArgs } from "./getVrfFallbackRouteGroup";
export const getVrfFallbackRouteGroup: typeof import("./getVrfFallbackRouteGroup").getVrfFallbackRouteGroup = null as any;
export const getVrfFallbackRouteGroupOutput: typeof import("./getVrfFallbackRouteGroup").getVrfFallbackRouteGroupOutput = null as any;
utilities.lazyLoad(exports, ["getVrfFallbackRouteGroup","getVrfFallbackRouteGroupOutput"], () => require("./getVrfFallbackRouteGroup"));

export { GetVrfFallbackRouteGroupMemberArgs, GetVrfFallbackRouteGroupMemberResult, GetVrfFallbackRouteGroupMemberOutputArgs } from "./getVrfFallbackRouteGroupMember";
export const getVrfFallbackRouteGroupMember: typeof import("./getVrfFallbackRouteGroupMember").getVrfFallbackRouteGroupMember = null as any;
export const getVrfFallbackRouteGroupMemberOutput: typeof import("./getVrfFallbackRouteGroupMember").getVrfFallbackRouteGroupMemberOutput = null as any;
utilities.lazyLoad(exports, ["getVrfFallbackRouteGroupMember","getVrfFallbackRouteGroupMemberOutput"], () => require("./getVrfFallbackRouteGroupMember"));

export { GetVrfLeakEpgBdSubnetArgs, GetVrfLeakEpgBdSubnetResult, GetVrfLeakEpgBdSubnetOutputArgs } from "./getVrfLeakEpgBdSubnet";
export const getVrfLeakEpgBdSubnet: typeof import("./getVrfLeakEpgBdSubnet").getVrfLeakEpgBdSubnet = null as any;
export const getVrfLeakEpgBdSubnetOutput: typeof import("./getVrfLeakEpgBdSubnet").getVrfLeakEpgBdSubnetOutput = null as any;
utilities.lazyLoad(exports, ["getVrfLeakEpgBdSubnet","getVrfLeakEpgBdSubnetOutput"], () => require("./getVrfLeakEpgBdSubnet"));

export { GetVrfSnmpContextArgs, GetVrfSnmpContextResult, GetVrfSnmpContextOutputArgs } from "./getVrfSnmpContext";
export const getVrfSnmpContext: typeof import("./getVrfSnmpContext").getVrfSnmpContext = null as any;
export const getVrfSnmpContextOutput: typeof import("./getVrfSnmpContext").getVrfSnmpContextOutput = null as any;
utilities.lazyLoad(exports, ["getVrfSnmpContext","getVrfSnmpContextOutput"], () => require("./getVrfSnmpContext"));

export { GetVrfSnmpContextCommunityArgs, GetVrfSnmpContextCommunityResult, GetVrfSnmpContextCommunityOutputArgs } from "./getVrfSnmpContextCommunity";
export const getVrfSnmpContextCommunity: typeof import("./getVrfSnmpContextCommunity").getVrfSnmpContextCommunity = null as any;
export const getVrfSnmpContextCommunityOutput: typeof import("./getVrfSnmpContextCommunity").getVrfSnmpContextCommunityOutput = null as any;
utilities.lazyLoad(exports, ["getVrfSnmpContextCommunity","getVrfSnmpContextCommunityOutput"], () => require("./getVrfSnmpContextCommunity"));

export { GetVrfToBgpAddressFamilyContextArgs, GetVrfToBgpAddressFamilyContextResult, GetVrfToBgpAddressFamilyContextOutputArgs } from "./getVrfToBgpAddressFamilyContext";
export const getVrfToBgpAddressFamilyContext: typeof import("./getVrfToBgpAddressFamilyContext").getVrfToBgpAddressFamilyContext = null as any;
export const getVrfToBgpAddressFamilyContextOutput: typeof import("./getVrfToBgpAddressFamilyContext").getVrfToBgpAddressFamilyContextOutput = null as any;
utilities.lazyLoad(exports, ["getVrfToBgpAddressFamilyContext","getVrfToBgpAddressFamilyContextOutput"], () => require("./getVrfToBgpAddressFamilyContext"));

export { GetVsanPoolArgs, GetVsanPoolResult, GetVsanPoolOutputArgs } from "./getVsanPool";
export const getVsanPool: typeof import("./getVsanPool").getVsanPool = null as any;
export const getVsanPoolOutput: typeof import("./getVsanPool").getVsanPoolOutput = null as any;
utilities.lazyLoad(exports, ["getVsanPool","getVsanPoolOutput"], () => require("./getVsanPool"));

export { GetVswitchPolicyArgs, GetVswitchPolicyResult, GetVswitchPolicyOutputArgs } from "./getVswitchPolicy";
export const getVswitchPolicy: typeof import("./getVswitchPolicy").getVswitchPolicy = null as any;
export const getVswitchPolicyOutput: typeof import("./getVswitchPolicy").getVswitchPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getVswitchPolicy","getVswitchPolicyOutput"], () => require("./getVswitchPolicy"));

export { GetVxlanPoolArgs, GetVxlanPoolResult, GetVxlanPoolOutputArgs } from "./getVxlanPool";
export const getVxlanPool: typeof import("./getVxlanPool").getVxlanPool = null as any;
export const getVxlanPoolOutput: typeof import("./getVxlanPool").getVxlanPoolOutput = null as any;
utilities.lazyLoad(exports, ["getVxlanPool","getVxlanPoolOutput"], () => require("./getVxlanPool"));

export { GetX509CertificateArgs, GetX509CertificateResult, GetX509CertificateOutputArgs } from "./getX509Certificate";
export const getX509Certificate: typeof import("./getX509Certificate").getX509Certificate = null as any;
export const getX509CertificateOutput: typeof import("./getX509Certificate").getX509CertificateOutput = null as any;
utilities.lazyLoad(exports, ["getX509Certificate","getX509CertificateOutput"], () => require("./getX509Certificate"));

export { GlobalSecurityArgs, GlobalSecurityState } from "./globalSecurity";
export type GlobalSecurity = import("./globalSecurity").GlobalSecurity;
export const GlobalSecurity: typeof import("./globalSecurity").GlobalSecurity = null as any;
utilities.lazyLoad(exports, ["GlobalSecurity"], () => require("./globalSecurity"));

export { HsrpGroupPolicyArgs, HsrpGroupPolicyState } from "./hsrpGroupPolicy";
export type HsrpGroupPolicy = import("./hsrpGroupPolicy").HsrpGroupPolicy;
export const HsrpGroupPolicy: typeof import("./hsrpGroupPolicy").HsrpGroupPolicy = null as any;
utilities.lazyLoad(exports, ["HsrpGroupPolicy"], () => require("./hsrpGroupPolicy"));

export { HsrpInterfacePolicyArgs, HsrpInterfacePolicyState } from "./hsrpInterfacePolicy";
export type HsrpInterfacePolicy = import("./hsrpInterfacePolicy").HsrpInterfacePolicy;
export const HsrpInterfacePolicy: typeof import("./hsrpInterfacePolicy").HsrpInterfacePolicy = null as any;
utilities.lazyLoad(exports, ["HsrpInterfacePolicy"], () => require("./hsrpInterfacePolicy"));

export { IgmpInterfacePolicyArgs, IgmpInterfacePolicyState } from "./igmpInterfacePolicy";
export type IgmpInterfacePolicy = import("./igmpInterfacePolicy").IgmpInterfacePolicy;
export const IgmpInterfacePolicy: typeof import("./igmpInterfacePolicy").IgmpInterfacePolicy = null as any;
utilities.lazyLoad(exports, ["IgmpInterfacePolicy"], () => require("./igmpInterfacePolicy"));

export { ImportedContractArgs, ImportedContractState } from "./importedContract";
export type ImportedContract = import("./importedContract").ImportedContract;
export const ImportedContract: typeof import("./importedContract").ImportedContract = null as any;
utilities.lazyLoad(exports, ["ImportedContract"], () => require("./importedContract"));

export { InterfaceBlacklistArgs, InterfaceBlacklistState } from "./interfaceBlacklist";
export type InterfaceBlacklist = import("./interfaceBlacklist").InterfaceBlacklist;
export const InterfaceBlacklist: typeof import("./interfaceBlacklist").InterfaceBlacklist = null as any;
utilities.lazyLoad(exports, ["InterfaceBlacklist"], () => require("./interfaceBlacklist"));

export { InterfaceConfigArgs, InterfaceConfigState } from "./interfaceConfig";
export type InterfaceConfig = import("./interfaceConfig").InterfaceConfig;
export const InterfaceConfig: typeof import("./interfaceConfig").InterfaceConfig = null as any;
utilities.lazyLoad(exports, ["InterfaceConfig"], () => require("./interfaceConfig"));

export { InterfaceFcPolicyArgs, InterfaceFcPolicyState } from "./interfaceFcPolicy";
export type InterfaceFcPolicy = import("./interfaceFcPolicy").InterfaceFcPolicy;
export const InterfaceFcPolicy: typeof import("./interfaceFcPolicy").InterfaceFcPolicy = null as any;
utilities.lazyLoad(exports, ["InterfaceFcPolicy"], () => require("./interfaceFcPolicy"));

export { IpSlaMonitoringPolicyArgs, IpSlaMonitoringPolicyState } from "./ipSlaMonitoringPolicy";
export type IpSlaMonitoringPolicy = import("./ipSlaMonitoringPolicy").IpSlaMonitoringPolicy;
export const IpSlaMonitoringPolicy: typeof import("./ipSlaMonitoringPolicy").IpSlaMonitoringPolicy = null as any;
utilities.lazyLoad(exports, ["IpSlaMonitoringPolicy"], () => require("./ipSlaMonitoringPolicy"));

export { IsisDomainPolicyArgs, IsisDomainPolicyState } from "./isisDomainPolicy";
export type IsisDomainPolicy = import("./isisDomainPolicy").IsisDomainPolicy;
export const IsisDomainPolicy: typeof import("./isisDomainPolicy").IsisDomainPolicy = null as any;
utilities.lazyLoad(exports, ["IsisDomainPolicy"], () => require("./isisDomainPolicy"));

export { L2DomainArgs, L2DomainState } from "./l2domain";
export type L2Domain = import("./l2domain").L2Domain;
export const L2Domain: typeof import("./l2domain").L2Domain = null as any;
utilities.lazyLoad(exports, ["L2Domain"], () => require("./l2domain"));

export { L2InterfacePolicyArgs, L2InterfacePolicyState } from "./l2interfacePolicy";
export type L2InterfacePolicy = import("./l2interfacePolicy").L2InterfacePolicy;
export const L2InterfacePolicy: typeof import("./l2interfacePolicy").L2InterfacePolicy = null as any;
utilities.lazyLoad(exports, ["L2InterfacePolicy"], () => require("./l2interfacePolicy"));

export { L2outExtepgArgs, L2outExtepgState } from "./l2outExtepg";
export type L2outExtepg = import("./l2outExtepg").L2outExtepg;
export const L2outExtepg: typeof import("./l2outExtepg").L2outExtepg = null as any;
utilities.lazyLoad(exports, ["L2outExtepg"], () => require("./l2outExtepg"));

export { L2OutsideArgs, L2OutsideState } from "./l2outside";
export type L2Outside = import("./l2outside").L2Outside;
export const L2Outside: typeof import("./l2outside").L2Outside = null as any;
utilities.lazyLoad(exports, ["L2Outside"], () => require("./l2outside"));

export { L3DomainProfileArgs, L3DomainProfileState } from "./l3domainProfile";
export type L3DomainProfile = import("./l3domainProfile").L3DomainProfile;
export const L3DomainProfile: typeof import("./l3domainProfile").L3DomainProfile = null as any;
utilities.lazyLoad(exports, ["L3DomainProfile"], () => require("./l3domainProfile"));

export { L3ExtSubnetArgs, L3ExtSubnetState } from "./l3extSubnet";
export type L3ExtSubnet = import("./l3extSubnet").L3ExtSubnet;
export const L3ExtSubnet: typeof import("./l3extSubnet").L3ExtSubnet = null as any;
utilities.lazyLoad(exports, ["L3ExtSubnet"], () => require("./l3extSubnet"));

export { L3InterfacePolicyArgs, L3InterfacePolicyState } from "./l3interfacePolicy";
export type L3InterfacePolicy = import("./l3interfacePolicy").L3InterfacePolicy;
export const L3InterfacePolicy: typeof import("./l3interfacePolicy").L3InterfacePolicy = null as any;
utilities.lazyLoad(exports, ["L3InterfacePolicy"], () => require("./l3interfacePolicy"));

export { L3outBfdInterfaceProfileArgs, L3outBfdInterfaceProfileState } from "./l3outBfdInterfaceProfile";
export type L3outBfdInterfaceProfile = import("./l3outBfdInterfaceProfile").L3outBfdInterfaceProfile;
export const L3outBfdInterfaceProfile: typeof import("./l3outBfdInterfaceProfile").L3outBfdInterfaceProfile = null as any;
utilities.lazyLoad(exports, ["L3outBfdInterfaceProfile"], () => require("./l3outBfdInterfaceProfile"));

export { L3outBgpExternalPolicyArgs, L3outBgpExternalPolicyState } from "./l3outBgpExternalPolicy";
export type L3outBgpExternalPolicy = import("./l3outBgpExternalPolicy").L3outBgpExternalPolicy;
export const L3outBgpExternalPolicy: typeof import("./l3outBgpExternalPolicy").L3outBgpExternalPolicy = null as any;
utilities.lazyLoad(exports, ["L3outBgpExternalPolicy"], () => require("./l3outBgpExternalPolicy"));

export { L3outBgpProtocolProfileArgs, L3outBgpProtocolProfileState } from "./l3outBgpProtocolProfile";
export type L3outBgpProtocolProfile = import("./l3outBgpProtocolProfile").L3outBgpProtocolProfile;
export const L3outBgpProtocolProfile: typeof import("./l3outBgpProtocolProfile").L3outBgpProtocolProfile = null as any;
utilities.lazyLoad(exports, ["L3outBgpProtocolProfile"], () => require("./l3outBgpProtocolProfile"));

export { L3outConsumerLabelArgs, L3outConsumerLabelState } from "./l3outConsumerLabel";
export type L3outConsumerLabel = import("./l3outConsumerLabel").L3outConsumerLabel;
export const L3outConsumerLabel: typeof import("./l3outConsumerLabel").L3outConsumerLabel = null as any;
utilities.lazyLoad(exports, ["L3outConsumerLabel"], () => require("./l3outConsumerLabel"));

export { L3outFloatingSviArgs, L3outFloatingSviState } from "./l3outFloatingSvi";
export type L3outFloatingSvi = import("./l3outFloatingSvi").L3outFloatingSvi;
export const L3outFloatingSvi: typeof import("./l3outFloatingSvi").L3outFloatingSvi = null as any;
utilities.lazyLoad(exports, ["L3outFloatingSvi"], () => require("./l3outFloatingSvi"));

export { L3outHsrpInterfaceGroupArgs, L3outHsrpInterfaceGroupState } from "./l3outHsrpInterfaceGroup";
export type L3outHsrpInterfaceGroup = import("./l3outHsrpInterfaceGroup").L3outHsrpInterfaceGroup;
export const L3outHsrpInterfaceGroup: typeof import("./l3outHsrpInterfaceGroup").L3outHsrpInterfaceGroup = null as any;
utilities.lazyLoad(exports, ["L3outHsrpInterfaceGroup"], () => require("./l3outHsrpInterfaceGroup"));

export { L3outHsrpInterfaceProfileArgs, L3outHsrpInterfaceProfileState } from "./l3outHsrpInterfaceProfile";
export type L3outHsrpInterfaceProfile = import("./l3outHsrpInterfaceProfile").L3outHsrpInterfaceProfile;
export const L3outHsrpInterfaceProfile: typeof import("./l3outHsrpInterfaceProfile").L3outHsrpInterfaceProfile = null as any;
utilities.lazyLoad(exports, ["L3outHsrpInterfaceProfile"], () => require("./l3outHsrpInterfaceProfile"));

export { L3outHsrpSecondaryVipArgs, L3outHsrpSecondaryVipState } from "./l3outHsrpSecondaryVip";
export type L3outHsrpSecondaryVip = import("./l3outHsrpSecondaryVip").L3outHsrpSecondaryVip;
export const L3outHsrpSecondaryVip: typeof import("./l3outHsrpSecondaryVip").L3outHsrpSecondaryVip = null as any;
utilities.lazyLoad(exports, ["L3outHsrpSecondaryVip"], () => require("./l3outHsrpSecondaryVip"));

export { L3outLoopbackInterfaceProfileArgs, L3outLoopbackInterfaceProfileState } from "./l3outLoopbackInterfaceProfile";
export type L3outLoopbackInterfaceProfile = import("./l3outLoopbackInterfaceProfile").L3outLoopbackInterfaceProfile;
export const L3outLoopbackInterfaceProfile: typeof import("./l3outLoopbackInterfaceProfile").L3outLoopbackInterfaceProfile = null as any;
utilities.lazyLoad(exports, ["L3outLoopbackInterfaceProfile"], () => require("./l3outLoopbackInterfaceProfile"));

export { L3outNodeSidProfileArgs, L3outNodeSidProfileState } from "./l3outNodeSidProfile";
export type L3outNodeSidProfile = import("./l3outNodeSidProfile").L3outNodeSidProfile;
export const L3outNodeSidProfile: typeof import("./l3outNodeSidProfile").L3outNodeSidProfile = null as any;
utilities.lazyLoad(exports, ["L3outNodeSidProfile"], () => require("./l3outNodeSidProfile"));

export { L3outOspfExternalPolicyArgs, L3outOspfExternalPolicyState } from "./l3outOspfExternalPolicy";
export type L3outOspfExternalPolicy = import("./l3outOspfExternalPolicy").L3outOspfExternalPolicy;
export const L3outOspfExternalPolicy: typeof import("./l3outOspfExternalPolicy").L3outOspfExternalPolicy = null as any;
utilities.lazyLoad(exports, ["L3outOspfExternalPolicy"], () => require("./l3outOspfExternalPolicy"));

export { L3outOspfInterfaceProfileArgs, L3outOspfInterfaceProfileState } from "./l3outOspfInterfaceProfile";
export type L3outOspfInterfaceProfile = import("./l3outOspfInterfaceProfile").L3outOspfInterfaceProfile;
export const L3outOspfInterfaceProfile: typeof import("./l3outOspfInterfaceProfile").L3outOspfInterfaceProfile = null as any;
utilities.lazyLoad(exports, ["L3outOspfInterfaceProfile"], () => require("./l3outOspfInterfaceProfile"));

export { L3outPathAttachmentArgs, L3outPathAttachmentState } from "./l3outPathAttachment";
export type L3outPathAttachment = import("./l3outPathAttachment").L3outPathAttachment;
export const L3outPathAttachment: typeof import("./l3outPathAttachment").L3outPathAttachment = null as any;
utilities.lazyLoad(exports, ["L3outPathAttachment"], () => require("./l3outPathAttachment"));

export { L3outPathAttachmentSecondaryIpArgs, L3outPathAttachmentSecondaryIpState } from "./l3outPathAttachmentSecondaryIp";
export type L3outPathAttachmentSecondaryIp = import("./l3outPathAttachmentSecondaryIp").L3outPathAttachmentSecondaryIp;
export const L3outPathAttachmentSecondaryIp: typeof import("./l3outPathAttachmentSecondaryIp").L3outPathAttachmentSecondaryIp = null as any;
utilities.lazyLoad(exports, ["L3outPathAttachmentSecondaryIp"], () => require("./l3outPathAttachmentSecondaryIp"));

export { L3outProviderLabelArgs, L3outProviderLabelState } from "./l3outProviderLabel";
export type L3outProviderLabel = import("./l3outProviderLabel").L3outProviderLabel;
export const L3outProviderLabel: typeof import("./l3outProviderLabel").L3outProviderLabel = null as any;
utilities.lazyLoad(exports, ["L3outProviderLabel"], () => require("./l3outProviderLabel"));

export { L3outRedistributePolicyArgs, L3outRedistributePolicyState } from "./l3outRedistributePolicy";
export type L3outRedistributePolicy = import("./l3outRedistributePolicy").L3outRedistributePolicy;
export const L3outRedistributePolicy: typeof import("./l3outRedistributePolicy").L3outRedistributePolicy = null as any;
utilities.lazyLoad(exports, ["L3outRedistributePolicy"], () => require("./l3outRedistributePolicy"));

export { L3outRouteTagPolicyArgs, L3outRouteTagPolicyState } from "./l3outRouteTagPolicy";
export type L3outRouteTagPolicy = import("./l3outRouteTagPolicy").L3outRouteTagPolicy;
export const L3outRouteTagPolicy: typeof import("./l3outRouteTagPolicy").L3outRouteTagPolicy = null as any;
utilities.lazyLoad(exports, ["L3outRouteTagPolicy"], () => require("./l3outRouteTagPolicy"));

export { L3outStaticRouteArgs, L3outStaticRouteState } from "./l3outStaticRoute";
export type L3outStaticRoute = import("./l3outStaticRoute").L3outStaticRoute;
export const L3outStaticRoute: typeof import("./l3outStaticRoute").L3outStaticRoute = null as any;
utilities.lazyLoad(exports, ["L3outStaticRoute"], () => require("./l3outStaticRoute"));

export { L3outStaticRouteNextHopArgs, L3outStaticRouteNextHopState } from "./l3outStaticRouteNextHop";
export type L3outStaticRouteNextHop = import("./l3outStaticRouteNextHop").L3outStaticRouteNextHop;
export const L3outStaticRouteNextHop: typeof import("./l3outStaticRouteNextHop").L3outStaticRouteNextHop = null as any;
utilities.lazyLoad(exports, ["L3outStaticRouteNextHop"], () => require("./l3outStaticRouteNextHop"));

export { L3outVpcMemberArgs, L3outVpcMemberState } from "./l3outVpcMember";
export type L3outVpcMember = import("./l3outVpcMember").L3outVpcMember;
export const L3outVpcMember: typeof import("./l3outVpcMember").L3outVpcMember = null as any;
utilities.lazyLoad(exports, ["L3outVpcMember"], () => require("./l3outVpcMember"));

export { L3OutsideArgs, L3OutsideState } from "./l3outside";
export type L3Outside = import("./l3outside").L3Outside;
export const L3Outside: typeof import("./l3outside").L3Outside = null as any;
utilities.lazyLoad(exports, ["L3Outside"], () => require("./l3outside"));

export { L4L7DeviceArgs, L4L7DeviceState } from "./l4l7device";
export type L4L7Device = import("./l4l7device").L4L7Device;
export const L4L7Device: typeof import("./l4l7device").L4L7Device = null as any;
utilities.lazyLoad(exports, ["L4L7Device"], () => require("./l4l7device"));

export { L4L7LogicalInterfaceArgs, L4L7LogicalInterfaceState } from "./l4l7logicalInterface";
export type L4L7LogicalInterface = import("./l4l7logicalInterface").L4L7LogicalInterface;
export const L4L7LogicalInterface: typeof import("./l4l7logicalInterface").L4L7LogicalInterface = null as any;
utilities.lazyLoad(exports, ["L4L7LogicalInterface"], () => require("./l4l7logicalInterface"));

export { L4L7RedirectHealthGroupArgs, L4L7RedirectHealthGroupState } from "./l4l7redirectHealthGroup";
export type L4L7RedirectHealthGroup = import("./l4l7redirectHealthGroup").L4L7RedirectHealthGroup;
export const L4L7RedirectHealthGroup: typeof import("./l4l7redirectHealthGroup").L4L7RedirectHealthGroup = null as any;
utilities.lazyLoad(exports, ["L4L7RedirectHealthGroup"], () => require("./l4l7redirectHealthGroup"));

export { L4L7ServiceGraphTemplateArgs, L4L7ServiceGraphTemplateState } from "./l4l7serviceGraphTemplate";
export type L4L7ServiceGraphTemplate = import("./l4l7serviceGraphTemplate").L4L7ServiceGraphTemplate;
export const L4L7ServiceGraphTemplate: typeof import("./l4l7serviceGraphTemplate").L4L7ServiceGraphTemplate = null as any;
utilities.lazyLoad(exports, ["L4L7ServiceGraphTemplate"], () => require("./l4l7serviceGraphTemplate"));

export { LacpMemberPolicyArgs, LacpMemberPolicyState } from "./lacpMemberPolicy";
export type LacpMemberPolicy = import("./lacpMemberPolicy").LacpMemberPolicy;
export const LacpMemberPolicy: typeof import("./lacpMemberPolicy").LacpMemberPolicy = null as any;
utilities.lazyLoad(exports, ["LacpMemberPolicy"], () => require("./lacpMemberPolicy"));

export { LacpPolicyArgs, LacpPolicyState } from "./lacpPolicy";
export type LacpPolicy = import("./lacpPolicy").LacpPolicy;
export const LacpPolicy: typeof import("./lacpPolicy").LacpPolicy = null as any;
utilities.lazyLoad(exports, ["LacpPolicy"], () => require("./lacpPolicy"));

export { LdapGroupMapArgs, LdapGroupMapState } from "./ldapGroupMap";
export type LdapGroupMap = import("./ldapGroupMap").LdapGroupMap;
export const LdapGroupMap: typeof import("./ldapGroupMap").LdapGroupMap = null as any;
utilities.lazyLoad(exports, ["LdapGroupMap"], () => require("./ldapGroupMap"));

export { LdapGroupMapRuleArgs, LdapGroupMapRuleState } from "./ldapGroupMapRule";
export type LdapGroupMapRule = import("./ldapGroupMapRule").LdapGroupMapRule;
export const LdapGroupMapRule: typeof import("./ldapGroupMapRule").LdapGroupMapRule = null as any;
utilities.lazyLoad(exports, ["LdapGroupMapRule"], () => require("./ldapGroupMapRule"));

export { LdapGroupMapRuleToGroupMapArgs, LdapGroupMapRuleToGroupMapState } from "./ldapGroupMapRuleToGroupMap";
export type LdapGroupMapRuleToGroupMap = import("./ldapGroupMapRuleToGroupMap").LdapGroupMapRuleToGroupMap;
export const LdapGroupMapRuleToGroupMap: typeof import("./ldapGroupMapRuleToGroupMap").LdapGroupMapRuleToGroupMap = null as any;
utilities.lazyLoad(exports, ["LdapGroupMapRuleToGroupMap"], () => require("./ldapGroupMapRuleToGroupMap"));

export { LdapProviderArgs, LdapProviderState } from "./ldapProvider";
export type LdapProvider = import("./ldapProvider").LdapProvider;
export const LdapProvider: typeof import("./ldapProvider").LdapProvider = null as any;
utilities.lazyLoad(exports, ["LdapProvider"], () => require("./ldapProvider"));

export { LeafAccessBundlePolicyGroupArgs, LeafAccessBundlePolicyGroupState } from "./leafAccessBundlePolicyGroup";
export type LeafAccessBundlePolicyGroup = import("./leafAccessBundlePolicyGroup").LeafAccessBundlePolicyGroup;
export const LeafAccessBundlePolicyGroup: typeof import("./leafAccessBundlePolicyGroup").LeafAccessBundlePolicyGroup = null as any;
utilities.lazyLoad(exports, ["LeafAccessBundlePolicyGroup"], () => require("./leafAccessBundlePolicyGroup"));

export { LeafAccessBundlePolicySubGroupArgs, LeafAccessBundlePolicySubGroupState } from "./leafAccessBundlePolicySubGroup";
export type LeafAccessBundlePolicySubGroup = import("./leafAccessBundlePolicySubGroup").LeafAccessBundlePolicySubGroup;
export const LeafAccessBundlePolicySubGroup: typeof import("./leafAccessBundlePolicySubGroup").LeafAccessBundlePolicySubGroup = null as any;
utilities.lazyLoad(exports, ["LeafAccessBundlePolicySubGroup"], () => require("./leafAccessBundlePolicySubGroup"));

export { LeafAccessPortPolicyGroupArgs, LeafAccessPortPolicyGroupState } from "./leafAccessPortPolicyGroup";
export type LeafAccessPortPolicyGroup = import("./leafAccessPortPolicyGroup").LeafAccessPortPolicyGroup;
export const LeafAccessPortPolicyGroup: typeof import("./leafAccessPortPolicyGroup").LeafAccessPortPolicyGroup = null as any;
utilities.lazyLoad(exports, ["LeafAccessPortPolicyGroup"], () => require("./leafAccessPortPolicyGroup"));

export { LeafBreakoutPortGroupArgs, LeafBreakoutPortGroupState } from "./leafBreakoutPortGroup";
export type LeafBreakoutPortGroup = import("./leafBreakoutPortGroup").LeafBreakoutPortGroup;
export const LeafBreakoutPortGroup: typeof import("./leafBreakoutPortGroup").LeafBreakoutPortGroup = null as any;
utilities.lazyLoad(exports, ["LeafBreakoutPortGroup"], () => require("./leafBreakoutPortGroup"));

export { LeafInterfaceProfileArgs, LeafInterfaceProfileState } from "./leafInterfaceProfile";
export type LeafInterfaceProfile = import("./leafInterfaceProfile").LeafInterfaceProfile;
export const LeafInterfaceProfile: typeof import("./leafInterfaceProfile").LeafInterfaceProfile = null as any;
utilities.lazyLoad(exports, ["LeafInterfaceProfile"], () => require("./leafInterfaceProfile"));

export { LeafProfileArgs, LeafProfileState } from "./leafProfile";
export type LeafProfile = import("./leafProfile").LeafProfile;
export const LeafProfile: typeof import("./leafProfile").LeafProfile = null as any;
utilities.lazyLoad(exports, ["LeafProfile"], () => require("./leafProfile"));

export { LeafSelectorArgs, LeafSelectorState } from "./leafSelector";
export type LeafSelector = import("./leafSelector").LeafSelector;
export const LeafSelector: typeof import("./leafSelector").LeafSelector = null as any;
utilities.lazyLoad(exports, ["LeafSelector"], () => require("./leafSelector"));

export { LldpInterfacePolicyArgs, LldpInterfacePolicyState } from "./lldpInterfacePolicy";
export type LldpInterfacePolicy = import("./lldpInterfacePolicy").LldpInterfacePolicy;
export const LldpInterfacePolicy: typeof import("./lldpInterfacePolicy").LldpInterfacePolicy = null as any;
utilities.lazyLoad(exports, ["LldpInterfacePolicy"], () => require("./lldpInterfacePolicy"));

export { LocalUserArgs, LocalUserState } from "./localUser";
export type LocalUser = import("./localUser").LocalUser;
export const LocalUser: typeof import("./localUser").LocalUser = null as any;
utilities.lazyLoad(exports, ["LocalUser"], () => require("./localUser"));

export { LogicalDeviceContextArgs, LogicalDeviceContextState } from "./logicalDeviceContext";
export type LogicalDeviceContext = import("./logicalDeviceContext").LogicalDeviceContext;
export const LogicalDeviceContext: typeof import("./logicalDeviceContext").LogicalDeviceContext = null as any;
utilities.lazyLoad(exports, ["LogicalDeviceContext"], () => require("./logicalDeviceContext"));

export { LogicalInterfaceContextArgs, LogicalInterfaceContextState } from "./logicalInterfaceContext";
export type LogicalInterfaceContext = import("./logicalInterfaceContext").LogicalInterfaceContext;
export const LogicalInterfaceContext: typeof import("./logicalInterfaceContext").LogicalInterfaceContext = null as any;
utilities.lazyLoad(exports, ["LogicalInterfaceContext"], () => require("./logicalInterfaceContext"));

export { LogicalInterfaceProfileArgs, LogicalInterfaceProfileState } from "./logicalInterfaceProfile";
export type LogicalInterfaceProfile = import("./logicalInterfaceProfile").LogicalInterfaceProfile;
export const LogicalInterfaceProfile: typeof import("./logicalInterfaceProfile").LogicalInterfaceProfile = null as any;
utilities.lazyLoad(exports, ["LogicalInterfaceProfile"], () => require("./logicalInterfaceProfile"));

export { LogicalNodeProfileArgs, LogicalNodeProfileState } from "./logicalNodeProfile";
export type LogicalNodeProfile = import("./logicalNodeProfile").LogicalNodeProfile;
export const LogicalNodeProfile: typeof import("./logicalNodeProfile").LogicalNodeProfile = null as any;
utilities.lazyLoad(exports, ["LogicalNodeProfile"], () => require("./logicalNodeProfile"));

export { LogicalNodeToFabricNodeArgs, LogicalNodeToFabricNodeState } from "./logicalNodeToFabricNode";
export type LogicalNodeToFabricNode = import("./logicalNodeToFabricNode").LogicalNodeToFabricNode;
export const LogicalNodeToFabricNode: typeof import("./logicalNodeToFabricNode").LogicalNodeToFabricNode = null as any;
utilities.lazyLoad(exports, ["LogicalNodeToFabricNode"], () => require("./logicalNodeToFabricNode"));

export { LoginDomainArgs, LoginDomainState } from "./loginDomain";
export type LoginDomain = import("./loginDomain").LoginDomain;
export const LoginDomain: typeof import("./loginDomain").LoginDomain = null as any;
utilities.lazyLoad(exports, ["LoginDomain"], () => require("./loginDomain"));

export { LoginDomainProviderArgs, LoginDomainProviderState } from "./loginDomainProvider";
export type LoginDomainProvider = import("./loginDomainProvider").LoginDomainProvider;
export const LoginDomainProvider: typeof import("./loginDomainProvider").LoginDomainProvider = null as any;
utilities.lazyLoad(exports, ["LoginDomainProvider"], () => require("./loginDomainProvider"));

export { MaintenanceGroupNodeArgs, MaintenanceGroupNodeState } from "./maintenanceGroupNode";
export type MaintenanceGroupNode = import("./maintenanceGroupNode").MaintenanceGroupNode;
export const MaintenanceGroupNode: typeof import("./maintenanceGroupNode").MaintenanceGroupNode = null as any;
utilities.lazyLoad(exports, ["MaintenanceGroupNode"], () => require("./maintenanceGroupNode"));

export { MaintenancePolicyArgs, MaintenancePolicyState } from "./maintenancePolicy";
export type MaintenancePolicy = import("./maintenancePolicy").MaintenancePolicy;
export const MaintenancePolicy: typeof import("./maintenancePolicy").MaintenancePolicy = null as any;
utilities.lazyLoad(exports, ["MaintenancePolicy"], () => require("./maintenancePolicy"));

export { ManagedNodeConnectivityGroupArgs, ManagedNodeConnectivityGroupState } from "./managedNodeConnectivityGroup";
export type ManagedNodeConnectivityGroup = import("./managedNodeConnectivityGroup").ManagedNodeConnectivityGroup;
export const ManagedNodeConnectivityGroup: typeof import("./managedNodeConnectivityGroup").ManagedNodeConnectivityGroup = null as any;
utilities.lazyLoad(exports, ["ManagedNodeConnectivityGroup"], () => require("./managedNodeConnectivityGroup"));

export { MatchCommunityTermsArgs, MatchCommunityTermsState } from "./matchCommunityTerms";
export type MatchCommunityTerms = import("./matchCommunityTerms").MatchCommunityTerms;
export const MatchCommunityTerms: typeof import("./matchCommunityTerms").MatchCommunityTerms = null as any;
utilities.lazyLoad(exports, ["MatchCommunityTerms"], () => require("./matchCommunityTerms"));

export { MatchRegexCommunityTermsArgs, MatchRegexCommunityTermsState } from "./matchRegexCommunityTerms";
export type MatchRegexCommunityTerms = import("./matchRegexCommunityTerms").MatchRegexCommunityTerms;
export const MatchRegexCommunityTerms: typeof import("./matchRegexCommunityTerms").MatchRegexCommunityTerms = null as any;
utilities.lazyLoad(exports, ["MatchRegexCommunityTerms"], () => require("./matchRegexCommunityTerms"));

export { MatchRouteDestinationRuleArgs, MatchRouteDestinationRuleState } from "./matchRouteDestinationRule";
export type MatchRouteDestinationRule = import("./matchRouteDestinationRule").MatchRouteDestinationRule;
export const MatchRouteDestinationRule: typeof import("./matchRouteDestinationRule").MatchRouteDestinationRule = null as any;
utilities.lazyLoad(exports, ["MatchRouteDestinationRule"], () => require("./matchRouteDestinationRule"));

export { MatchRuleArgs, MatchRuleState } from "./matchRule";
export type MatchRule = import("./matchRule").MatchRule;
export const MatchRule: typeof import("./matchRule").MatchRule = null as any;
utilities.lazyLoad(exports, ["MatchRule"], () => require("./matchRule"));

export { McpInstancePolicyArgs, McpInstancePolicyState } from "./mcpInstancePolicy";
export type McpInstancePolicy = import("./mcpInstancePolicy").McpInstancePolicy;
export const McpInstancePolicy: typeof import("./mcpInstancePolicy").McpInstancePolicy = null as any;
utilities.lazyLoad(exports, ["McpInstancePolicy"], () => require("./mcpInstancePolicy"));

export { MgmtPreferenceArgs, MgmtPreferenceState } from "./mgmtPreference";
export type MgmtPreference = import("./mgmtPreference").MgmtPreference;
export const MgmtPreference: typeof import("./mgmtPreference").MgmtPreference = null as any;
utilities.lazyLoad(exports, ["MgmtPreference"], () => require("./mgmtPreference"));

export { MgmtZoneArgs, MgmtZoneState } from "./mgmtZone";
export type MgmtZone = import("./mgmtZone").MgmtZone;
export const MgmtZone: typeof import("./mgmtZone").MgmtZone = null as any;
utilities.lazyLoad(exports, ["MgmtZone"], () => require("./mgmtZone"));

export { MiscablingProtocolInterfacePolicyArgs, MiscablingProtocolInterfacePolicyState } from "./miscablingProtocolInterfacePolicy";
export type MiscablingProtocolInterfacePolicy = import("./miscablingProtocolInterfacePolicy").MiscablingProtocolInterfacePolicy;
export const MiscablingProtocolInterfacePolicy: typeof import("./miscablingProtocolInterfacePolicy").MiscablingProtocolInterfacePolicy = null as any;
utilities.lazyLoad(exports, ["MiscablingProtocolInterfacePolicy"], () => require("./miscablingProtocolInterfacePolicy"));

export { MonitoringPolicyArgs, MonitoringPolicyState } from "./monitoringPolicy";
export type MonitoringPolicy = import("./monitoringPolicy").MonitoringPolicy;
export const MonitoringPolicy: typeof import("./monitoringPolicy").MonitoringPolicy = null as any;
utilities.lazyLoad(exports, ["MonitoringPolicy"], () => require("./monitoringPolicy"));

export { MulticastPoolArgs, MulticastPoolState } from "./multicastPool";
export type MulticastPool = import("./multicastPool").MulticastPool;
export const MulticastPool: typeof import("./multicastPool").MulticastPool = null as any;
utilities.lazyLoad(exports, ["MulticastPool"], () => require("./multicastPool"));

export { MulticastPoolBlockArgs, MulticastPoolBlockState } from "./multicastPoolBlock";
export type MulticastPoolBlock = import("./multicastPoolBlock").MulticastPoolBlock;
export const MulticastPoolBlock: typeof import("./multicastPoolBlock").MulticastPoolBlock = null as any;
utilities.lazyLoad(exports, ["MulticastPoolBlock"], () => require("./multicastPoolBlock"));

export { NetflowMonitorPolicyArgs, NetflowMonitorPolicyState } from "./netflowMonitorPolicy";
export type NetflowMonitorPolicy = import("./netflowMonitorPolicy").NetflowMonitorPolicy;
export const NetflowMonitorPolicy: typeof import("./netflowMonitorPolicy").NetflowMonitorPolicy = null as any;
utilities.lazyLoad(exports, ["NetflowMonitorPolicy"], () => require("./netflowMonitorPolicy"));

export { NetflowRecordPolicyArgs, NetflowRecordPolicyState } from "./netflowRecordPolicy";
export type NetflowRecordPolicy = import("./netflowRecordPolicy").NetflowRecordPolicy;
export const NetflowRecordPolicy: typeof import("./netflowRecordPolicy").NetflowRecordPolicy = null as any;
utilities.lazyLoad(exports, ["NetflowRecordPolicy"], () => require("./netflowRecordPolicy"));

export { NodeBlockArgs, NodeBlockState } from "./nodeBlock";
export type NodeBlock = import("./nodeBlock").NodeBlock;
export const NodeBlock: typeof import("./nodeBlock").NodeBlock = null as any;
utilities.lazyLoad(exports, ["NodeBlock"], () => require("./nodeBlock"));

export { NodeBlockFirmwareArgs, NodeBlockFirmwareState } from "./nodeBlockFirmware";
export type NodeBlockFirmware = import("./nodeBlockFirmware").NodeBlockFirmware;
export const NodeBlockFirmware: typeof import("./nodeBlockFirmware").NodeBlockFirmware = null as any;
utilities.lazyLoad(exports, ["NodeBlockFirmware"], () => require("./nodeBlockFirmware"));

export { NodeMgmtEpgArgs, NodeMgmtEpgState } from "./nodeMgmtEpg";
export type NodeMgmtEpg = import("./nodeMgmtEpg").NodeMgmtEpg;
export const NodeMgmtEpg: typeof import("./nodeMgmtEpg").NodeMgmtEpg = null as any;
utilities.lazyLoad(exports, ["NodeMgmtEpg"], () => require("./nodeMgmtEpg"));

export { OspfInterfacePolicyArgs, OspfInterfacePolicyState } from "./ospfInterfacePolicy";
export type OspfInterfacePolicy = import("./ospfInterfacePolicy").OspfInterfacePolicy;
export const OspfInterfacePolicy: typeof import("./ospfInterfacePolicy").OspfInterfacePolicy = null as any;
utilities.lazyLoad(exports, ["OspfInterfacePolicy"], () => require("./ospfInterfacePolicy"));

export { OspfRouteSummarizationArgs, OspfRouteSummarizationState } from "./ospfRouteSummarization";
export type OspfRouteSummarization = import("./ospfRouteSummarization").OspfRouteSummarization;
export const OspfRouteSummarization: typeof import("./ospfRouteSummarization").OspfRouteSummarization = null as any;
utilities.lazyLoad(exports, ["OspfRouteSummarization"], () => require("./ospfRouteSummarization"));

export { OspfTimersArgs, OspfTimersState } from "./ospfTimers";
export type OspfTimers = import("./ospfTimers").OspfTimers;
export const OspfTimers: typeof import("./ospfTimers").OspfTimers = null as any;
utilities.lazyLoad(exports, ["OspfTimers"], () => require("./ospfTimers"));

export { OutOfBandContractArgs, OutOfBandContractState } from "./outOfBandContract";
export type OutOfBandContract = import("./outOfBandContract").OutOfBandContract;
export const OutOfBandContract: typeof import("./outOfBandContract").OutOfBandContract = null as any;
utilities.lazyLoad(exports, ["OutOfBandContract"], () => require("./outOfBandContract"));

export { PbrL1L2DestinationArgs, PbrL1L2DestinationState } from "./pbrL1L2Destination";
export type PbrL1L2Destination = import("./pbrL1L2Destination").PbrL1L2Destination;
export const PbrL1L2Destination: typeof import("./pbrL1L2Destination").PbrL1L2Destination = null as any;
utilities.lazyLoad(exports, ["PbrL1L2Destination"], () => require("./pbrL1L2Destination"));

export { PhysicalDomainArgs, PhysicalDomainState } from "./physicalDomain";
export type PhysicalDomain = import("./physicalDomain").PhysicalDomain;
export const PhysicalDomain: typeof import("./physicalDomain").PhysicalDomain = null as any;
utilities.lazyLoad(exports, ["PhysicalDomain"], () => require("./physicalDomain"));

export { PimInterfacePolicyArgs, PimInterfacePolicyState } from "./pimInterfacePolicy";
export type PimInterfacePolicy = import("./pimInterfacePolicy").PimInterfacePolicy;
export const PimInterfacePolicy: typeof import("./pimInterfacePolicy").PimInterfacePolicy = null as any;
utilities.lazyLoad(exports, ["PimInterfacePolicy"], () => require("./pimInterfacePolicy"));

export { PimRouteMapEntryArgs, PimRouteMapEntryState } from "./pimRouteMapEntry";
export type PimRouteMapEntry = import("./pimRouteMapEntry").PimRouteMapEntry;
export const PimRouteMapEntry: typeof import("./pimRouteMapEntry").PimRouteMapEntry = null as any;
utilities.lazyLoad(exports, ["PimRouteMapEntry"], () => require("./pimRouteMapEntry"));

export { PimRouteMapPolicyArgs, PimRouteMapPolicyState } from "./pimRouteMapPolicy";
export type PimRouteMapPolicy = import("./pimRouteMapPolicy").PimRouteMapPolicy;
export const PimRouteMapPolicy: typeof import("./pimRouteMapPolicy").PimRouteMapPolicy = null as any;
utilities.lazyLoad(exports, ["PimRouteMapPolicy"], () => require("./pimRouteMapPolicy"));

export { PodMaintenanceGroupArgs, PodMaintenanceGroupState } from "./podMaintenanceGroup";
export type PodMaintenanceGroup = import("./podMaintenanceGroup").PodMaintenanceGroup;
export const PodMaintenanceGroup: typeof import("./podMaintenanceGroup").PodMaintenanceGroup = null as any;
utilities.lazyLoad(exports, ["PodMaintenanceGroup"], () => require("./podMaintenanceGroup"));

export { PortSecurityPolicyArgs, PortSecurityPolicyState } from "./portSecurityPolicy";
export type PortSecurityPolicy = import("./portSecurityPolicy").PortSecurityPolicy;
export const PortSecurityPolicy: typeof import("./portSecurityPolicy").PortSecurityPolicy = null as any;
utilities.lazyLoad(exports, ["PortSecurityPolicy"], () => require("./portSecurityPolicy"));

export { PortTrackingArgs, PortTrackingState } from "./portTracking";
export type PortTracking = import("./portTracking").PortTracking;
export const PortTracking: typeof import("./portTracking").PortTracking = null as any;
utilities.lazyLoad(exports, ["PortTracking"], () => require("./portTracking"));

export { PowerSupplyRedundancyPolicyArgs, PowerSupplyRedundancyPolicyState } from "./powerSupplyRedundancyPolicy";
export type PowerSupplyRedundancyPolicy = import("./powerSupplyRedundancyPolicy").PowerSupplyRedundancyPolicy;
export const PowerSupplyRedundancyPolicy: typeof import("./powerSupplyRedundancyPolicy").PowerSupplyRedundancyPolicy = null as any;
utilities.lazyLoad(exports, ["PowerSupplyRedundancyPolicy"], () => require("./powerSupplyRedundancyPolicy"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { QosInstancePolicyArgs, QosInstancePolicyState } from "./qosInstancePolicy";
export type QosInstancePolicy = import("./qosInstancePolicy").QosInstancePolicy;
export const QosInstancePolicy: typeof import("./qosInstancePolicy").QosInstancePolicy = null as any;
utilities.lazyLoad(exports, ["QosInstancePolicy"], () => require("./qosInstancePolicy"));

export { RadiusProviderArgs, RadiusProviderState } from "./radiusProvider";
export type RadiusProvider = import("./radiusProvider").RadiusProvider;
export const RadiusProvider: typeof import("./radiusProvider").RadiusProvider = null as any;
utilities.lazyLoad(exports, ["RadiusProvider"], () => require("./radiusProvider"));

export { RadiusProviderGroupArgs, RadiusProviderGroupState } from "./radiusProviderGroup";
export type RadiusProviderGroup = import("./radiusProviderGroup").RadiusProviderGroup;
export const RadiusProviderGroup: typeof import("./radiusProviderGroup").RadiusProviderGroup = null as any;
utilities.lazyLoad(exports, ["RadiusProviderGroup"], () => require("./radiusProviderGroup"));

export { RangesArgs, RangesState } from "./ranges";
export type Ranges = import("./ranges").Ranges;
export const Ranges: typeof import("./ranges").Ranges = null as any;
utilities.lazyLoad(exports, ["Ranges"], () => require("./ranges"));

export { RecurringWindowArgs, RecurringWindowState } from "./recurringWindow";
export type RecurringWindow = import("./recurringWindow").RecurringWindow;
export const RecurringWindow: typeof import("./recurringWindow").RecurringWindow = null as any;
utilities.lazyLoad(exports, ["RecurringWindow"], () => require("./recurringWindow"));

export { RelationToConsumedOutOfBandContractArgs, RelationToConsumedOutOfBandContractState } from "./relationToConsumedOutOfBandContract";
export type RelationToConsumedOutOfBandContract = import("./relationToConsumedOutOfBandContract").RelationToConsumedOutOfBandContract;
export const RelationToConsumedOutOfBandContract: typeof import("./relationToConsumedOutOfBandContract").RelationToConsumedOutOfBandContract = null as any;
utilities.lazyLoad(exports, ["RelationToConsumedOutOfBandContract"], () => require("./relationToConsumedOutOfBandContract"));

export { RelationToFallbackRouteGroupArgs, RelationToFallbackRouteGroupState } from "./relationToFallbackRouteGroup";
export type RelationToFallbackRouteGroup = import("./relationToFallbackRouteGroup").RelationToFallbackRouteGroup;
export const RelationToFallbackRouteGroup: typeof import("./relationToFallbackRouteGroup").RelationToFallbackRouteGroup = null as any;
utilities.lazyLoad(exports, ["RelationToFallbackRouteGroup"], () => require("./relationToFallbackRouteGroup"));

export { RelationToNetflowExporterArgs, RelationToNetflowExporterState } from "./relationToNetflowExporter";
export type RelationToNetflowExporter = import("./relationToNetflowExporter").RelationToNetflowExporter;
export const RelationToNetflowExporter: typeof import("./relationToNetflowExporter").RelationToNetflowExporter = null as any;
utilities.lazyLoad(exports, ["RelationToNetflowExporter"], () => require("./relationToNetflowExporter"));

export { RestArgs, RestState } from "./rest";
export type Rest = import("./rest").Rest;
export const Rest: typeof import("./rest").Rest = null as any;
utilities.lazyLoad(exports, ["Rest"], () => require("./rest"));

export { RestManagedArgs, RestManagedState } from "./restManaged";
export type RestManaged = import("./restManaged").RestManaged;
export const RestManaged: typeof import("./restManaged").RestManaged = null as any;
utilities.lazyLoad(exports, ["RestManaged"], () => require("./restManaged"));

export { RouteControlContextArgs, RouteControlContextState } from "./routeControlContext";
export type RouteControlContext = import("./routeControlContext").RouteControlContext;
export const RouteControlContext: typeof import("./routeControlContext").RouteControlContext = null as any;
utilities.lazyLoad(exports, ["RouteControlContext"], () => require("./routeControlContext"));

export { RouteControlProfileArgs, RouteControlProfileState } from "./routeControlProfile";
export type RouteControlProfile = import("./routeControlProfile").RouteControlProfile;
export const RouteControlProfile: typeof import("./routeControlProfile").RouteControlProfile = null as any;
utilities.lazyLoad(exports, ["RouteControlProfile"], () => require("./routeControlProfile"));

export { RsaProviderArgs, RsaProviderState } from "./rsaProvider";
export type RsaProvider = import("./rsaProvider").RsaProvider;
export const RsaProvider: typeof import("./rsaProvider").RsaProvider = null as any;
utilities.lazyLoad(exports, ["RsaProvider"], () => require("./rsaProvider"));

export { SamlProviderArgs, SamlProviderState } from "./samlProvider";
export type SamlProvider = import("./samlProvider").SamlProvider;
export const SamlProvider: typeof import("./samlProvider").SamlProvider = null as any;
utilities.lazyLoad(exports, ["SamlProvider"], () => require("./samlProvider"));

export { SamlProviderGroupArgs, SamlProviderGroupState } from "./samlProviderGroup";
export type SamlProviderGroup = import("./samlProviderGroup").SamlProviderGroup;
export const SamlProviderGroup: typeof import("./samlProviderGroup").SamlProviderGroup = null as any;
utilities.lazyLoad(exports, ["SamlProviderGroup"], () => require("./samlProviderGroup"));

export { ServiceRedirectBackupPolicyArgs, ServiceRedirectBackupPolicyState } from "./serviceRedirectBackupPolicy";
export type ServiceRedirectBackupPolicy = import("./serviceRedirectBackupPolicy").ServiceRedirectBackupPolicy;
export const ServiceRedirectBackupPolicy: typeof import("./serviceRedirectBackupPolicy").ServiceRedirectBackupPolicy = null as any;
utilities.lazyLoad(exports, ["ServiceRedirectBackupPolicy"], () => require("./serviceRedirectBackupPolicy"));

export { ServiceRedirectPolicyArgs, ServiceRedirectPolicyState } from "./serviceRedirectPolicy";
export type ServiceRedirectPolicy = import("./serviceRedirectPolicy").ServiceRedirectPolicy;
export const ServiceRedirectPolicy: typeof import("./serviceRedirectPolicy").ServiceRedirectPolicy = null as any;
utilities.lazyLoad(exports, ["ServiceRedirectPolicy"], () => require("./serviceRedirectPolicy"));

export { SnmpCommunityArgs, SnmpCommunityState } from "./snmpCommunity";
export type SnmpCommunity = import("./snmpCommunity").SnmpCommunity;
export const SnmpCommunity: typeof import("./snmpCommunity").SnmpCommunity = null as any;
utilities.lazyLoad(exports, ["SnmpCommunity"], () => require("./snmpCommunity"));

export { SnmpUserArgs, SnmpUserState } from "./snmpUser";
export type SnmpUser = import("./snmpUser").SnmpUser;
export const SnmpUser: typeof import("./snmpUser").SnmpUser = null as any;
utilities.lazyLoad(exports, ["SnmpUser"], () => require("./snmpUser"));

export { SpanDestinationGroupArgs, SpanDestinationGroupState } from "./spanDestinationGroup";
export type SpanDestinationGroup = import("./spanDestinationGroup").SpanDestinationGroup;
export const SpanDestinationGroup: typeof import("./spanDestinationGroup").SpanDestinationGroup = null as any;
utilities.lazyLoad(exports, ["SpanDestinationGroup"], () => require("./spanDestinationGroup"));

export { SpanSourceGroupArgs, SpanSourceGroupState } from "./spanSourceGroup";
export type SpanSourceGroup = import("./spanSourceGroup").SpanSourceGroup;
export const SpanSourceGroup: typeof import("./spanSourceGroup").SpanSourceGroup = null as any;
utilities.lazyLoad(exports, ["SpanSourceGroup"], () => require("./spanSourceGroup"));

export { SpanSourcedestinationGroupMatchLabelArgs, SpanSourcedestinationGroupMatchLabelState } from "./spanSourcedestinationGroupMatchLabel";
export type SpanSourcedestinationGroupMatchLabel = import("./spanSourcedestinationGroupMatchLabel").SpanSourcedestinationGroupMatchLabel;
export const SpanSourcedestinationGroupMatchLabel: typeof import("./spanSourcedestinationGroupMatchLabel").SpanSourcedestinationGroupMatchLabel = null as any;
utilities.lazyLoad(exports, ["SpanSourcedestinationGroupMatchLabel"], () => require("./spanSourcedestinationGroupMatchLabel"));

export { SpanningTreeInterfacePolicyArgs, SpanningTreeInterfacePolicyState } from "./spanningTreeInterfacePolicy";
export type SpanningTreeInterfacePolicy = import("./spanningTreeInterfacePolicy").SpanningTreeInterfacePolicy;
export const SpanningTreeInterfacePolicy: typeof import("./spanningTreeInterfacePolicy").SpanningTreeInterfacePolicy = null as any;
utilities.lazyLoad(exports, ["SpanningTreeInterfacePolicy"], () => require("./spanningTreeInterfacePolicy"));

export { SpineAccessPortSelectorArgs, SpineAccessPortSelectorState } from "./spineAccessPortSelector";
export type SpineAccessPortSelector = import("./spineAccessPortSelector").SpineAccessPortSelector;
export const SpineAccessPortSelector: typeof import("./spineAccessPortSelector").SpineAccessPortSelector = null as any;
utilities.lazyLoad(exports, ["SpineAccessPortSelector"], () => require("./spineAccessPortSelector"));

export { SpineInterfaceProfileArgs, SpineInterfaceProfileState } from "./spineInterfaceProfile";
export type SpineInterfaceProfile = import("./spineInterfaceProfile").SpineInterfaceProfile;
export const SpineInterfaceProfile: typeof import("./spineInterfaceProfile").SpineInterfaceProfile = null as any;
utilities.lazyLoad(exports, ["SpineInterfaceProfile"], () => require("./spineInterfaceProfile"));

export { SpineInterfaceProfileSelectorArgs, SpineInterfaceProfileSelectorState } from "./spineInterfaceProfileSelector";
export type SpineInterfaceProfileSelector = import("./spineInterfaceProfileSelector").SpineInterfaceProfileSelector;
export const SpineInterfaceProfileSelector: typeof import("./spineInterfaceProfileSelector").SpineInterfaceProfileSelector = null as any;
utilities.lazyLoad(exports, ["SpineInterfaceProfileSelector"], () => require("./spineInterfaceProfileSelector"));

export { SpinePortPolicyGroupArgs, SpinePortPolicyGroupState } from "./spinePortPolicyGroup";
export type SpinePortPolicyGroup = import("./spinePortPolicyGroup").SpinePortPolicyGroup;
export const SpinePortPolicyGroup: typeof import("./spinePortPolicyGroup").SpinePortPolicyGroup = null as any;
utilities.lazyLoad(exports, ["SpinePortPolicyGroup"], () => require("./spinePortPolicyGroup"));

export { SpinePortSelectorArgs, SpinePortSelectorState } from "./spinePortSelector";
export type SpinePortSelector = import("./spinePortSelector").SpinePortSelector;
export const SpinePortSelector: typeof import("./spinePortSelector").SpinePortSelector = null as any;
utilities.lazyLoad(exports, ["SpinePortSelector"], () => require("./spinePortSelector"));

export { SpineProfileArgs, SpineProfileState } from "./spineProfile";
export type SpineProfile = import("./spineProfile").SpineProfile;
export const SpineProfile: typeof import("./spineProfile").SpineProfile = null as any;
utilities.lazyLoad(exports, ["SpineProfile"], () => require("./spineProfile"));

export { SpineSwitchAssociationArgs, SpineSwitchAssociationState } from "./spineSwitchAssociation";
export type SpineSwitchAssociation = import("./spineSwitchAssociation").SpineSwitchAssociation;
export const SpineSwitchAssociation: typeof import("./spineSwitchAssociation").SpineSwitchAssociation = null as any;
utilities.lazyLoad(exports, ["SpineSwitchAssociation"], () => require("./spineSwitchAssociation"));

export { SpineSwitchPolicyGroupArgs, SpineSwitchPolicyGroupState } from "./spineSwitchPolicyGroup";
export type SpineSwitchPolicyGroup = import("./spineSwitchPolicyGroup").SpineSwitchPolicyGroup;
export const SpineSwitchPolicyGroup: typeof import("./spineSwitchPolicyGroup").SpineSwitchPolicyGroup = null as any;
utilities.lazyLoad(exports, ["SpineSwitchPolicyGroup"], () => require("./spineSwitchPolicyGroup"));

export { StaticNodeMgmtAddressArgs, StaticNodeMgmtAddressState } from "./staticNodeMgmtAddress";
export type StaticNodeMgmtAddress = import("./staticNodeMgmtAddress").StaticNodeMgmtAddress;
export const StaticNodeMgmtAddress: typeof import("./staticNodeMgmtAddress").StaticNodeMgmtAddress = null as any;
utilities.lazyLoad(exports, ["StaticNodeMgmtAddress"], () => require("./staticNodeMgmtAddress"));

export { SubnetArgs, SubnetState } from "./subnet";
export type Subnet = import("./subnet").Subnet;
export const Subnet: typeof import("./subnet").Subnet = null as any;
utilities.lazyLoad(exports, ["Subnet"], () => require("./subnet"));

export { TabooContractArgs, TabooContractState } from "./tabooContract";
export type TabooContract = import("./tabooContract").TabooContract;
export const TabooContract: typeof import("./tabooContract").TabooContract = null as any;
utilities.lazyLoad(exports, ["TabooContract"], () => require("./tabooContract"));

export { TacacsAccountingArgs, TacacsAccountingState } from "./tacacsAccounting";
export type TacacsAccounting = import("./tacacsAccounting").TacacsAccounting;
export const TacacsAccounting: typeof import("./tacacsAccounting").TacacsAccounting = null as any;
utilities.lazyLoad(exports, ["TacacsAccounting"], () => require("./tacacsAccounting"));

export { TacacsAccountingDestinationArgs, TacacsAccountingDestinationState } from "./tacacsAccountingDestination";
export type TacacsAccountingDestination = import("./tacacsAccountingDestination").TacacsAccountingDestination;
export const TacacsAccountingDestination: typeof import("./tacacsAccountingDestination").TacacsAccountingDestination = null as any;
utilities.lazyLoad(exports, ["TacacsAccountingDestination"], () => require("./tacacsAccountingDestination"));

export { TacacsProviderArgs, TacacsProviderState } from "./tacacsProvider";
export type TacacsProvider = import("./tacacsProvider").TacacsProvider;
export const TacacsProvider: typeof import("./tacacsProvider").TacacsProvider = null as any;
utilities.lazyLoad(exports, ["TacacsProvider"], () => require("./tacacsProvider"));

export { TacacsProviderGroupArgs, TacacsProviderGroupState } from "./tacacsProviderGroup";
export type TacacsProviderGroup = import("./tacacsProviderGroup").TacacsProviderGroup;
export const TacacsProviderGroup: typeof import("./tacacsProviderGroup").TacacsProviderGroup = null as any;
utilities.lazyLoad(exports, ["TacacsProviderGroup"], () => require("./tacacsProviderGroup"));

export { TacacsSourceArgs, TacacsSourceState } from "./tacacsSource";
export type TacacsSource = import("./tacacsSource").TacacsSource;
export const TacacsSource: typeof import("./tacacsSource").TacacsSource = null as any;
utilities.lazyLoad(exports, ["TacacsSource"], () => require("./tacacsSource"));

export { TagArgs, TagState } from "./tag";
export type Tag = import("./tag").Tag;
export const Tag: typeof import("./tag").Tag = null as any;
utilities.lazyLoad(exports, ["Tag"], () => require("./tag"));

export { TenantArgs, TenantState } from "./tenant";
export type Tenant = import("./tenant").Tenant;
export const Tenant: typeof import("./tenant").Tenant = null as any;
utilities.lazyLoad(exports, ["Tenant"], () => require("./tenant"));

export { TenantToCloudAccountArgs, TenantToCloudAccountState } from "./tenantToCloudAccount";
export type TenantToCloudAccount = import("./tenantToCloudAccount").TenantToCloudAccount;
export const TenantToCloudAccount: typeof import("./tenantToCloudAccount").TenantToCloudAccount = null as any;
utilities.lazyLoad(exports, ["TenantToCloudAccount"], () => require("./tenantToCloudAccount"));

export { TriggerSchedulerArgs, TriggerSchedulerState } from "./triggerScheduler";
export type TriggerScheduler = import("./triggerScheduler").TriggerScheduler;
export const TriggerScheduler: typeof import("./triggerScheduler").TriggerScheduler = null as any;
utilities.lazyLoad(exports, ["TriggerScheduler"], () => require("./triggerScheduler"));

export { UserSecurityDomainArgs, UserSecurityDomainState } from "./userSecurityDomain";
export type UserSecurityDomain = import("./userSecurityDomain").UserSecurityDomain;
export const UserSecurityDomain: typeof import("./userSecurityDomain").UserSecurityDomain = null as any;
utilities.lazyLoad(exports, ["UserSecurityDomain"], () => require("./userSecurityDomain"));

export { UserSecurityDomainRoleArgs, UserSecurityDomainRoleState } from "./userSecurityDomainRole";
export type UserSecurityDomainRole = import("./userSecurityDomainRole").UserSecurityDomainRole;
export const UserSecurityDomainRole: typeof import("./userSecurityDomainRole").UserSecurityDomainRole = null as any;
utilities.lazyLoad(exports, ["UserSecurityDomainRole"], () => require("./userSecurityDomainRole"));

export { VlanEncapsulationforVxlanTrafficArgs, VlanEncapsulationforVxlanTrafficState } from "./vlanEncapsulationforVxlanTraffic";
export type VlanEncapsulationforVxlanTraffic = import("./vlanEncapsulationforVxlanTraffic").VlanEncapsulationforVxlanTraffic;
export const VlanEncapsulationforVxlanTraffic: typeof import("./vlanEncapsulationforVxlanTraffic").VlanEncapsulationforVxlanTraffic = null as any;
utilities.lazyLoad(exports, ["VlanEncapsulationforVxlanTraffic"], () => require("./vlanEncapsulationforVxlanTraffic"));

export { VlanPoolArgs, VlanPoolState } from "./vlanPool";
export type VlanPool = import("./vlanPool").VlanPool;
export const VlanPool: typeof import("./vlanPool").VlanPool = null as any;
utilities.lazyLoad(exports, ["VlanPool"], () => require("./vlanPool"));

export { VmmControllerArgs, VmmControllerState } from "./vmmController";
export type VmmController = import("./vmmController").VmmController;
export const VmmController: typeof import("./vmmController").VmmController = null as any;
utilities.lazyLoad(exports, ["VmmController"], () => require("./vmmController"));

export { VmmCredentialArgs, VmmCredentialState } from "./vmmCredential";
export type VmmCredential = import("./vmmCredential").VmmCredential;
export const VmmCredential: typeof import("./vmmCredential").VmmCredential = null as any;
utilities.lazyLoad(exports, ["VmmCredential"], () => require("./vmmCredential"));

export { VmmDomainArgs, VmmDomainState } from "./vmmDomain";
export type VmmDomain = import("./vmmDomain").VmmDomain;
export const VmmDomain: typeof import("./vmmDomain").VmmDomain = null as any;
utilities.lazyLoad(exports, ["VmmDomain"], () => require("./vmmDomain"));

export { VpcDomainPolicyArgs, VpcDomainPolicyState } from "./vpcDomainPolicy";
export type VpcDomainPolicy = import("./vpcDomainPolicy").VpcDomainPolicy;
export const VpcDomainPolicy: typeof import("./vpcDomainPolicy").VpcDomainPolicy = null as any;
utilities.lazyLoad(exports, ["VpcDomainPolicy"], () => require("./vpcDomainPolicy"));

export { VpcExplicitProtectionGroupArgs, VpcExplicitProtectionGroupState } from "./vpcExplicitProtectionGroup";
export type VpcExplicitProtectionGroup = import("./vpcExplicitProtectionGroup").VpcExplicitProtectionGroup;
export const VpcExplicitProtectionGroup: typeof import("./vpcExplicitProtectionGroup").VpcExplicitProtectionGroup = null as any;
utilities.lazyLoad(exports, ["VpcExplicitProtectionGroup"], () => require("./vpcExplicitProtectionGroup"));

export { VrfArgs, VrfState } from "./vrf";
export type Vrf = import("./vrf").Vrf;
export const Vrf: typeof import("./vrf").Vrf = null as any;
utilities.lazyLoad(exports, ["Vrf"], () => require("./vrf"));

export { VrfFallbackRouteGroupArgs, VrfFallbackRouteGroupState } from "./vrfFallbackRouteGroup";
export type VrfFallbackRouteGroup = import("./vrfFallbackRouteGroup").VrfFallbackRouteGroup;
export const VrfFallbackRouteGroup: typeof import("./vrfFallbackRouteGroup").VrfFallbackRouteGroup = null as any;
utilities.lazyLoad(exports, ["VrfFallbackRouteGroup"], () => require("./vrfFallbackRouteGroup"));

export { VrfFallbackRouteGroupMemberArgs, VrfFallbackRouteGroupMemberState } from "./vrfFallbackRouteGroupMember";
export type VrfFallbackRouteGroupMember = import("./vrfFallbackRouteGroupMember").VrfFallbackRouteGroupMember;
export const VrfFallbackRouteGroupMember: typeof import("./vrfFallbackRouteGroupMember").VrfFallbackRouteGroupMember = null as any;
utilities.lazyLoad(exports, ["VrfFallbackRouteGroupMember"], () => require("./vrfFallbackRouteGroupMember"));

export { VrfLeakEpgBdSubnetArgs, VrfLeakEpgBdSubnetState } from "./vrfLeakEpgBdSubnet";
export type VrfLeakEpgBdSubnet = import("./vrfLeakEpgBdSubnet").VrfLeakEpgBdSubnet;
export const VrfLeakEpgBdSubnet: typeof import("./vrfLeakEpgBdSubnet").VrfLeakEpgBdSubnet = null as any;
utilities.lazyLoad(exports, ["VrfLeakEpgBdSubnet"], () => require("./vrfLeakEpgBdSubnet"));

export { VrfSnmpContextArgs, VrfSnmpContextState } from "./vrfSnmpContext";
export type VrfSnmpContext = import("./vrfSnmpContext").VrfSnmpContext;
export const VrfSnmpContext: typeof import("./vrfSnmpContext").VrfSnmpContext = null as any;
utilities.lazyLoad(exports, ["VrfSnmpContext"], () => require("./vrfSnmpContext"));

export { VrfSnmpContextCommunityArgs, VrfSnmpContextCommunityState } from "./vrfSnmpContextCommunity";
export type VrfSnmpContextCommunity = import("./vrfSnmpContextCommunity").VrfSnmpContextCommunity;
export const VrfSnmpContextCommunity: typeof import("./vrfSnmpContextCommunity").VrfSnmpContextCommunity = null as any;
utilities.lazyLoad(exports, ["VrfSnmpContextCommunity"], () => require("./vrfSnmpContextCommunity"));

export { VrfToBgpAddressFamilyContextArgs, VrfToBgpAddressFamilyContextState } from "./vrfToBgpAddressFamilyContext";
export type VrfToBgpAddressFamilyContext = import("./vrfToBgpAddressFamilyContext").VrfToBgpAddressFamilyContext;
export const VrfToBgpAddressFamilyContext: typeof import("./vrfToBgpAddressFamilyContext").VrfToBgpAddressFamilyContext = null as any;
utilities.lazyLoad(exports, ["VrfToBgpAddressFamilyContext"], () => require("./vrfToBgpAddressFamilyContext"));

export { VsanPoolArgs, VsanPoolState } from "./vsanPool";
export type VsanPool = import("./vsanPool").VsanPool;
export const VsanPool: typeof import("./vsanPool").VsanPool = null as any;
utilities.lazyLoad(exports, ["VsanPool"], () => require("./vsanPool"));

export { VswitchPolicyArgs, VswitchPolicyState } from "./vswitchPolicy";
export type VswitchPolicy = import("./vswitchPolicy").VswitchPolicy;
export const VswitchPolicy: typeof import("./vswitchPolicy").VswitchPolicy = null as any;
utilities.lazyLoad(exports, ["VswitchPolicy"], () => require("./vswitchPolicy"));

export { VxlanPoolArgs, VxlanPoolState } from "./vxlanPool";
export type VxlanPool = import("./vxlanPool").VxlanPool;
export const VxlanPool: typeof import("./vxlanPool").VxlanPool = null as any;
utilities.lazyLoad(exports, ["VxlanPool"], () => require("./vxlanPool"));

export { X509CertificateArgs, X509CertificateState } from "./x509certificate";
export type X509Certificate = import("./x509certificate").X509Certificate;
export const X509Certificate: typeof import("./x509certificate").X509Certificate = null as any;
utilities.lazyLoad(exports, ["X509Certificate"], () => require("./x509certificate"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aci:index/aaaDomain:AaaDomain":
                return new AaaDomain(name, <any>undefined, { urn })
            case "aci:index/aaaDomainRelationship:AaaDomainRelationship":
                return new AaaDomainRelationship(name, <any>undefined, { urn })
            case "aci:index/aaepToDomain:AaepToDomain":
                return new AaepToDomain(name, <any>undefined, { urn })
            case "aci:index/accessGeneric:AccessGeneric":
                return new AccessGeneric(name, <any>undefined, { urn })
            case "aci:index/accessGroup:AccessGroup":
                return new AccessGroup(name, <any>undefined, { urn })
            case "aci:index/accessPortBlock:AccessPortBlock":
                return new AccessPortBlock(name, <any>undefined, { urn })
            case "aci:index/accessPortSelector:AccessPortSelector":
                return new AccessPortSelector(name, <any>undefined, { urn })
            case "aci:index/accessSubPortBlock:AccessSubPortBlock":
                return new AccessSubPortBlock(name, <any>undefined, { urn })
            case "aci:index/accessSwitchPolicyGroup:AccessSwitchPolicyGroup":
                return new AccessSwitchPolicyGroup(name, <any>undefined, { urn })
            case "aci:index/actionRuleAdditionalCommunities:ActionRuleAdditionalCommunities":
                return new ActionRuleAdditionalCommunities(name, <any>undefined, { urn })
            case "aci:index/actionRuleProfile:ActionRuleProfile":
                return new ActionRuleProfile(name, <any>undefined, { urn })
            case "aci:index/annotation:Annotation":
                return new Annotation(name, <any>undefined, { urn })
            case "aci:index/any:Any":
                return new Any(name, <any>undefined, { urn })
            case "aci:index/applicationEpg:ApplicationEpg":
                return new ApplicationEpg(name, <any>undefined, { urn })
            case "aci:index/applicationProfile:ApplicationProfile":
                return new ApplicationProfile(name, <any>undefined, { urn })
            case "aci:index/attachableAccessEntityProfile:AttachableAccessEntityProfile":
                return new AttachableAccessEntityProfile(name, <any>undefined, { urn })
            case "aci:index/authenticationProperties:AuthenticationProperties":
                return new AuthenticationProperties(name, <any>undefined, { urn })
            case "aci:index/bdDhcpLabel:BdDhcpLabel":
                return new BdDhcpLabel(name, <any>undefined, { urn })
            case "aci:index/bfdInterfacePolicy:BfdInterfacePolicy":
                return new BfdInterfacePolicy(name, <any>undefined, { urn })
            case "aci:index/bfdMultihopInterfacePolicy:BfdMultihopInterfacePolicy":
                return new BfdMultihopInterfacePolicy(name, <any>undefined, { urn })
            case "aci:index/bfdMultihopInterfaceProfile:BfdMultihopInterfaceProfile":
                return new BfdMultihopInterfaceProfile(name, <any>undefined, { urn })
            case "aci:index/bfdMultihopNodePolicy:BfdMultihopNodePolicy":
                return new BfdMultihopNodePolicy(name, <any>undefined, { urn })
            case "aci:index/bgpAddressFamilyContext:BgpAddressFamilyContext":
                return new BgpAddressFamilyContext(name, <any>undefined, { urn })
            case "aci:index/bgpBestPathPolicy:BgpBestPathPolicy":
                return new BgpBestPathPolicy(name, <any>undefined, { urn })
            case "aci:index/bgpPeerConnectivityProfile:BgpPeerConnectivityProfile":
                return new BgpPeerConnectivityProfile(name, <any>undefined, { urn })
            case "aci:index/bgpPeerPrefix:BgpPeerPrefix":
                return new BgpPeerPrefix(name, <any>undefined, { urn })
            case "aci:index/bgpRouteControlProfile:BgpRouteControlProfile":
                return new BgpRouteControlProfile(name, <any>undefined, { urn })
            case "aci:index/bgpRouteSummarization:BgpRouteSummarization":
                return new BgpRouteSummarization(name, <any>undefined, { urn })
            case "aci:index/bgpTimers:BgpTimers":
                return new BgpTimers(name, <any>undefined, { urn })
            case "aci:index/bridgeDomain:BridgeDomain":
                return new BridgeDomain(name, <any>undefined, { urn })
            case "aci:index/bulkEpgToStaticPath:BulkEpgToStaticPath":
                return new BulkEpgToStaticPath(name, <any>undefined, { urn })
            case "aci:index/cdpInterfacePolicy:CdpInterfacePolicy":
                return new CdpInterfacePolicy(name, <any>undefined, { urn })
            case "aci:index/cloudAccount:CloudAccount":
                return new CloudAccount(name, <any>undefined, { urn })
            case "aci:index/cloudAd:CloudAd":
                return new CloudAd(name, <any>undefined, { urn })
            case "aci:index/cloudApplicationcontainer:CloudApplicationcontainer":
                return new CloudApplicationcontainer(name, <any>undefined, { urn })
            case "aci:index/cloudAwsProvider:CloudAwsProvider":
                return new CloudAwsProvider(name, <any>undefined, { urn })
            case "aci:index/cloudCidrPool:CloudCidrPool":
                return new CloudCidrPool(name, <any>undefined, { urn })
            case "aci:index/cloudContextProfile:CloudContextProfile":
                return new CloudContextProfile(name, <any>undefined, { urn })
            case "aci:index/cloudCredentials:CloudCredentials":
                return new CloudCredentials(name, <any>undefined, { urn })
            case "aci:index/cloudDomainProfile:CloudDomainProfile":
                return new CloudDomainProfile(name, <any>undefined, { urn })
            case "aci:index/cloudEndpointSelector:CloudEndpointSelector":
                return new CloudEndpointSelector(name, <any>undefined, { urn })
            case "aci:index/cloudEndpointSelectorforExternalEpgs:CloudEndpointSelectorforExternalEpgs":
                return new CloudEndpointSelectorforExternalEpgs(name, <any>undefined, { urn })
            case "aci:index/cloudEpg:CloudEpg":
                return new CloudEpg(name, <any>undefined, { urn })
            case "aci:index/cloudExternalEpg:CloudExternalEpg":
                return new CloudExternalEpg(name, <any>undefined, { urn })
            case "aci:index/cloudExternalNetwork:CloudExternalNetwork":
                return new CloudExternalNetwork(name, <any>undefined, { urn })
            case "aci:index/cloudExternalNetworkVpnNetwork:CloudExternalNetworkVpnNetwork":
                return new CloudExternalNetworkVpnNetwork(name, <any>undefined, { urn })
            case "aci:index/cloudIpsecTunnelSubnetPool:CloudIpsecTunnelSubnetPool":
                return new CloudIpsecTunnelSubnetPool(name, <any>undefined, { urn })
            case "aci:index/cloudL4L7NativeLoadBalancer:CloudL4L7NativeLoadBalancer":
                return new CloudL4L7NativeLoadBalancer(name, <any>undefined, { urn })
            case "aci:index/cloudL4L7ThirdPartyDevice:CloudL4L7ThirdPartyDevice":
                return new CloudL4L7ThirdPartyDevice(name, <any>undefined, { urn })
            case "aci:index/cloudPrivateLinkLabel:CloudPrivateLinkLabel":
                return new CloudPrivateLinkLabel(name, <any>undefined, { urn })
            case "aci:index/cloudServiceEndpointSelector:CloudServiceEndpointSelector":
                return new CloudServiceEndpointSelector(name, <any>undefined, { urn })
            case "aci:index/cloudServiceEpg:CloudServiceEpg":
                return new CloudServiceEpg(name, <any>undefined, { urn })
            case "aci:index/cloudSubnet:CloudSubnet":
                return new CloudSubnet(name, <any>undefined, { urn })
            case "aci:index/cloudTemplateRegionDetail:CloudTemplateRegionDetail":
                return new CloudTemplateRegionDetail(name, <any>undefined, { urn })
            case "aci:index/cloudVpnGateway:CloudVpnGateway":
                return new CloudVpnGateway(name, <any>undefined, { urn })
            case "aci:index/cloudVrfLeakRoutes:CloudVrfLeakRoutes":
                return new CloudVrfLeakRoutes(name, <any>undefined, { urn })
            case "aci:index/concreteDevice:ConcreteDevice":
                return new ConcreteDevice(name, <any>undefined, { urn })
            case "aci:index/concreteInterface:ConcreteInterface":
                return new ConcreteInterface(name, <any>undefined, { urn })
            case "aci:index/configurationExportPolicy:ConfigurationExportPolicy":
                return new ConfigurationExportPolicy(name, <any>undefined, { urn })
            case "aci:index/configurationImportPolicy:ConfigurationImportPolicy":
                return new ConfigurationImportPolicy(name, <any>undefined, { urn })
            case "aci:index/connection:Connection":
                return new Connection(name, <any>undefined, { urn })
            case "aci:index/consoleAuthentication:ConsoleAuthentication":
                return new ConsoleAuthentication(name, <any>undefined, { urn })
            case "aci:index/contract:Contract":
                return new Contract(name, <any>undefined, { urn })
            case "aci:index/contractSubject:ContractSubject":
                return new ContractSubject(name, <any>undefined, { urn })
            case "aci:index/contractSubjectFilter:ContractSubjectFilter":
                return new ContractSubjectFilter(name, <any>undefined, { urn })
            case "aci:index/contractSubjectOneWayFilter:ContractSubjectOneWayFilter":
                return new ContractSubjectOneWayFilter(name, <any>undefined, { urn })
            case "aci:index/coopPolicy:CoopPolicy":
                return new CoopPolicy(name, <any>undefined, { urn })
            case "aci:index/defaultAuthentication:DefaultAuthentication":
                return new DefaultAuthentication(name, <any>undefined, { urn })
            case "aci:index/destinationOfRedirectedTraffic:DestinationOfRedirectedTraffic":
                return new DestinationOfRedirectedTraffic(name, <any>undefined, { urn })
            case "aci:index/dhcpOptionPolicy:DhcpOptionPolicy":
                return new DhcpOptionPolicy(name, <any>undefined, { urn })
            case "aci:index/dhcpRelayPolicy:DhcpRelayPolicy":
                return new DhcpRelayPolicy(name, <any>undefined, { urn })
            case "aci:index/duoProviderGroup:DuoProviderGroup":
                return new DuoProviderGroup(name, <any>undefined, { urn })
            case "aci:index/encryptionKey:EncryptionKey":
                return new EncryptionKey(name, <any>undefined, { urn })
            case "aci:index/endPointRetentionPolicy:EndPointRetentionPolicy":
                return new EndPointRetentionPolicy(name, <any>undefined, { urn })
            case "aci:index/endpointControls:EndpointControls":
                return new EndpointControls(name, <any>undefined, { urn })
            case "aci:index/endpointIpAgingProfile:EndpointIpAgingProfile":
                return new EndpointIpAgingProfile(name, <any>undefined, { urn })
            case "aci:index/endpointLoopProtection:EndpointLoopProtection":
                return new EndpointLoopProtection(name, <any>undefined, { urn })
            case "aci:index/endpointSecurityGroup:EndpointSecurityGroup":
                return new EndpointSecurityGroup(name, <any>undefined, { urn })
            case "aci:index/endpointSecurityGroupEpgSelector:EndpointSecurityGroupEpgSelector":
                return new EndpointSecurityGroupEpgSelector(name, <any>undefined, { urn })
            case "aci:index/endpointSecurityGroupSelector:EndpointSecurityGroupSelector":
                return new EndpointSecurityGroupSelector(name, <any>undefined, { urn })
            case "aci:index/endpointSecurityGroupTagSelector:EndpointSecurityGroupTagSelector":
                return new EndpointSecurityGroupTagSelector(name, <any>undefined, { urn })
            case "aci:index/endpointTagIp:EndpointTagIp":
                return new EndpointTagIp(name, <any>undefined, { urn })
            case "aci:index/endpointTagMac:EndpointTagMac":
                return new EndpointTagMac(name, <any>undefined, { urn })
            case "aci:index/epgToContract:EpgToContract":
                return new EpgToContract(name, <any>undefined, { urn })
            case "aci:index/epgToContractInterface:EpgToContractInterface":
                return new EpgToContractInterface(name, <any>undefined, { urn })
            case "aci:index/epgToDomain:EpgToDomain":
                return new EpgToDomain(name, <any>undefined, { urn })
            case "aci:index/epgToStaticPath:EpgToStaticPath":
                return new EpgToStaticPath(name, <any>undefined, { urn })
            case "aci:index/epgsUsingFunction:EpgsUsingFunction":
                return new EpgsUsingFunction(name, <any>undefined, { urn })
            case "aci:index/errorDisableRecovery:ErrorDisableRecovery":
                return new ErrorDisableRecovery(name, <any>undefined, { urn })
            case "aci:index/externalManagementNetworkInstanceProfile:ExternalManagementNetworkInstanceProfile":
                return new ExternalManagementNetworkInstanceProfile(name, <any>undefined, { urn })
            case "aci:index/externalManagementNetworkSubnet:ExternalManagementNetworkSubnet":
                return new ExternalManagementNetworkSubnet(name, <any>undefined, { urn })
            case "aci:index/externalNetworkInstanceProfile:ExternalNetworkInstanceProfile":
                return new ExternalNetworkInstanceProfile(name, <any>undefined, { urn })
            case "aci:index/fabricIfPol:FabricIfPol":
                return new FabricIfPol(name, <any>undefined, { urn })
            case "aci:index/fabricNodeControl:FabricNodeControl":
                return new FabricNodeControl(name, <any>undefined, { urn })
            case "aci:index/fabricNodeMember:FabricNodeMember":
                return new FabricNodeMember(name, <any>undefined, { urn })
            case "aci:index/fabricWideSettings:FabricWideSettings":
                return new FabricWideSettings(name, <any>undefined, { urn })
            case "aci:index/fcDomain:FcDomain":
                return new FcDomain(name, <any>undefined, { urn })
            case "aci:index/fexBundleGroup:FexBundleGroup":
                return new FexBundleGroup(name, <any>undefined, { urn })
            case "aci:index/fexProfile:FexProfile":
                return new FexProfile(name, <any>undefined, { urn })
            case "aci:index/fileRemotePath:FileRemotePath":
                return new FileRemotePath(name, <any>undefined, { urn })
            case "aci:index/filter:Filter":
                return new Filter(name, <any>undefined, { urn })
            case "aci:index/filterEntry:FilterEntry":
                return new FilterEntry(name, <any>undefined, { urn })
            case "aci:index/firmwareDownloadTask:FirmwareDownloadTask":
                return new FirmwareDownloadTask(name, <any>undefined, { urn })
            case "aci:index/firmwareGroup:FirmwareGroup":
                return new FirmwareGroup(name, <any>undefined, { urn })
            case "aci:index/firmwarePolicy:FirmwarePolicy":
                return new FirmwarePolicy(name, <any>undefined, { urn })
            case "aci:index/functionNode:FunctionNode":
                return new FunctionNode(name, <any>undefined, { urn })
            case "aci:index/globalSecurity:GlobalSecurity":
                return new GlobalSecurity(name, <any>undefined, { urn })
            case "aci:index/hsrpGroupPolicy:HsrpGroupPolicy":
                return new HsrpGroupPolicy(name, <any>undefined, { urn })
            case "aci:index/hsrpInterfacePolicy:HsrpInterfacePolicy":
                return new HsrpInterfacePolicy(name, <any>undefined, { urn })
            case "aci:index/igmpInterfacePolicy:IgmpInterfacePolicy":
                return new IgmpInterfacePolicy(name, <any>undefined, { urn })
            case "aci:index/importedContract:ImportedContract":
                return new ImportedContract(name, <any>undefined, { urn })
            case "aci:index/interfaceBlacklist:InterfaceBlacklist":
                return new InterfaceBlacklist(name, <any>undefined, { urn })
            case "aci:index/interfaceConfig:InterfaceConfig":
                return new InterfaceConfig(name, <any>undefined, { urn })
            case "aci:index/interfaceFcPolicy:InterfaceFcPolicy":
                return new InterfaceFcPolicy(name, <any>undefined, { urn })
            case "aci:index/ipSlaMonitoringPolicy:IpSlaMonitoringPolicy":
                return new IpSlaMonitoringPolicy(name, <any>undefined, { urn })
            case "aci:index/isisDomainPolicy:IsisDomainPolicy":
                return new IsisDomainPolicy(name, <any>undefined, { urn })
            case "aci:index/l2Domain:L2Domain":
                return new L2Domain(name, <any>undefined, { urn })
            case "aci:index/l2InterfacePolicy:L2InterfacePolicy":
                return new L2InterfacePolicy(name, <any>undefined, { urn })
            case "aci:index/l2Outside:L2Outside":
                return new L2Outside(name, <any>undefined, { urn })
            case "aci:index/l2outExtepg:L2outExtepg":
                return new L2outExtepg(name, <any>undefined, { urn })
            case "aci:index/l3DomainProfile:L3DomainProfile":
                return new L3DomainProfile(name, <any>undefined, { urn })
            case "aci:index/l3ExtSubnet:L3ExtSubnet":
                return new L3ExtSubnet(name, <any>undefined, { urn })
            case "aci:index/l3InterfacePolicy:L3InterfacePolicy":
                return new L3InterfacePolicy(name, <any>undefined, { urn })
            case "aci:index/l3Outside:L3Outside":
                return new L3Outside(name, <any>undefined, { urn })
            case "aci:index/l3outBfdInterfaceProfile:L3outBfdInterfaceProfile":
                return new L3outBfdInterfaceProfile(name, <any>undefined, { urn })
            case "aci:index/l3outBgpExternalPolicy:L3outBgpExternalPolicy":
                return new L3outBgpExternalPolicy(name, <any>undefined, { urn })
            case "aci:index/l3outBgpProtocolProfile:L3outBgpProtocolProfile":
                return new L3outBgpProtocolProfile(name, <any>undefined, { urn })
            case "aci:index/l3outConsumerLabel:L3outConsumerLabel":
                return new L3outConsumerLabel(name, <any>undefined, { urn })
            case "aci:index/l3outFloatingSvi:L3outFloatingSvi":
                return new L3outFloatingSvi(name, <any>undefined, { urn })
            case "aci:index/l3outHsrpInterfaceGroup:L3outHsrpInterfaceGroup":
                return new L3outHsrpInterfaceGroup(name, <any>undefined, { urn })
            case "aci:index/l3outHsrpInterfaceProfile:L3outHsrpInterfaceProfile":
                return new L3outHsrpInterfaceProfile(name, <any>undefined, { urn })
            case "aci:index/l3outHsrpSecondaryVip:L3outHsrpSecondaryVip":
                return new L3outHsrpSecondaryVip(name, <any>undefined, { urn })
            case "aci:index/l3outLoopbackInterfaceProfile:L3outLoopbackInterfaceProfile":
                return new L3outLoopbackInterfaceProfile(name, <any>undefined, { urn })
            case "aci:index/l3outNodeSidProfile:L3outNodeSidProfile":
                return new L3outNodeSidProfile(name, <any>undefined, { urn })
            case "aci:index/l3outOspfExternalPolicy:L3outOspfExternalPolicy":
                return new L3outOspfExternalPolicy(name, <any>undefined, { urn })
            case "aci:index/l3outOspfInterfaceProfile:L3outOspfInterfaceProfile":
                return new L3outOspfInterfaceProfile(name, <any>undefined, { urn })
            case "aci:index/l3outPathAttachment:L3outPathAttachment":
                return new L3outPathAttachment(name, <any>undefined, { urn })
            case "aci:index/l3outPathAttachmentSecondaryIp:L3outPathAttachmentSecondaryIp":
                return new L3outPathAttachmentSecondaryIp(name, <any>undefined, { urn })
            case "aci:index/l3outProviderLabel:L3outProviderLabel":
                return new L3outProviderLabel(name, <any>undefined, { urn })
            case "aci:index/l3outRedistributePolicy:L3outRedistributePolicy":
                return new L3outRedistributePolicy(name, <any>undefined, { urn })
            case "aci:index/l3outRouteTagPolicy:L3outRouteTagPolicy":
                return new L3outRouteTagPolicy(name, <any>undefined, { urn })
            case "aci:index/l3outStaticRoute:L3outStaticRoute":
                return new L3outStaticRoute(name, <any>undefined, { urn })
            case "aci:index/l3outStaticRouteNextHop:L3outStaticRouteNextHop":
                return new L3outStaticRouteNextHop(name, <any>undefined, { urn })
            case "aci:index/l3outVpcMember:L3outVpcMember":
                return new L3outVpcMember(name, <any>undefined, { urn })
            case "aci:index/l4L7Device:L4L7Device":
                return new L4L7Device(name, <any>undefined, { urn })
            case "aci:index/l4L7LogicalInterface:L4L7LogicalInterface":
                return new L4L7LogicalInterface(name, <any>undefined, { urn })
            case "aci:index/l4L7RedirectHealthGroup:L4L7RedirectHealthGroup":
                return new L4L7RedirectHealthGroup(name, <any>undefined, { urn })
            case "aci:index/l4L7ServiceGraphTemplate:L4L7ServiceGraphTemplate":
                return new L4L7ServiceGraphTemplate(name, <any>undefined, { urn })
            case "aci:index/lacpMemberPolicy:LacpMemberPolicy":
                return new LacpMemberPolicy(name, <any>undefined, { urn })
            case "aci:index/lacpPolicy:LacpPolicy":
                return new LacpPolicy(name, <any>undefined, { urn })
            case "aci:index/ldapGroupMap:LdapGroupMap":
                return new LdapGroupMap(name, <any>undefined, { urn })
            case "aci:index/ldapGroupMapRule:LdapGroupMapRule":
                return new LdapGroupMapRule(name, <any>undefined, { urn })
            case "aci:index/ldapGroupMapRuleToGroupMap:LdapGroupMapRuleToGroupMap":
                return new LdapGroupMapRuleToGroupMap(name, <any>undefined, { urn })
            case "aci:index/ldapProvider:LdapProvider":
                return new LdapProvider(name, <any>undefined, { urn })
            case "aci:index/leafAccessBundlePolicyGroup:LeafAccessBundlePolicyGroup":
                return new LeafAccessBundlePolicyGroup(name, <any>undefined, { urn })
            case "aci:index/leafAccessBundlePolicySubGroup:LeafAccessBundlePolicySubGroup":
                return new LeafAccessBundlePolicySubGroup(name, <any>undefined, { urn })
            case "aci:index/leafAccessPortPolicyGroup:LeafAccessPortPolicyGroup":
                return new LeafAccessPortPolicyGroup(name, <any>undefined, { urn })
            case "aci:index/leafBreakoutPortGroup:LeafBreakoutPortGroup":
                return new LeafBreakoutPortGroup(name, <any>undefined, { urn })
            case "aci:index/leafInterfaceProfile:LeafInterfaceProfile":
                return new LeafInterfaceProfile(name, <any>undefined, { urn })
            case "aci:index/leafProfile:LeafProfile":
                return new LeafProfile(name, <any>undefined, { urn })
            case "aci:index/leafSelector:LeafSelector":
                return new LeafSelector(name, <any>undefined, { urn })
            case "aci:index/lldpInterfacePolicy:LldpInterfacePolicy":
                return new LldpInterfacePolicy(name, <any>undefined, { urn })
            case "aci:index/localUser:LocalUser":
                return new LocalUser(name, <any>undefined, { urn })
            case "aci:index/logicalDeviceContext:LogicalDeviceContext":
                return new LogicalDeviceContext(name, <any>undefined, { urn })
            case "aci:index/logicalInterfaceContext:LogicalInterfaceContext":
                return new LogicalInterfaceContext(name, <any>undefined, { urn })
            case "aci:index/logicalInterfaceProfile:LogicalInterfaceProfile":
                return new LogicalInterfaceProfile(name, <any>undefined, { urn })
            case "aci:index/logicalNodeProfile:LogicalNodeProfile":
                return new LogicalNodeProfile(name, <any>undefined, { urn })
            case "aci:index/logicalNodeToFabricNode:LogicalNodeToFabricNode":
                return new LogicalNodeToFabricNode(name, <any>undefined, { urn })
            case "aci:index/loginDomain:LoginDomain":
                return new LoginDomain(name, <any>undefined, { urn })
            case "aci:index/loginDomainProvider:LoginDomainProvider":
                return new LoginDomainProvider(name, <any>undefined, { urn })
            case "aci:index/maintenanceGroupNode:MaintenanceGroupNode":
                return new MaintenanceGroupNode(name, <any>undefined, { urn })
            case "aci:index/maintenancePolicy:MaintenancePolicy":
                return new MaintenancePolicy(name, <any>undefined, { urn })
            case "aci:index/managedNodeConnectivityGroup:ManagedNodeConnectivityGroup":
                return new ManagedNodeConnectivityGroup(name, <any>undefined, { urn })
            case "aci:index/matchCommunityTerms:MatchCommunityTerms":
                return new MatchCommunityTerms(name, <any>undefined, { urn })
            case "aci:index/matchRegexCommunityTerms:MatchRegexCommunityTerms":
                return new MatchRegexCommunityTerms(name, <any>undefined, { urn })
            case "aci:index/matchRouteDestinationRule:MatchRouteDestinationRule":
                return new MatchRouteDestinationRule(name, <any>undefined, { urn })
            case "aci:index/matchRule:MatchRule":
                return new MatchRule(name, <any>undefined, { urn })
            case "aci:index/mcpInstancePolicy:McpInstancePolicy":
                return new McpInstancePolicy(name, <any>undefined, { urn })
            case "aci:index/mgmtPreference:MgmtPreference":
                return new MgmtPreference(name, <any>undefined, { urn })
            case "aci:index/mgmtZone:MgmtZone":
                return new MgmtZone(name, <any>undefined, { urn })
            case "aci:index/miscablingProtocolInterfacePolicy:MiscablingProtocolInterfacePolicy":
                return new MiscablingProtocolInterfacePolicy(name, <any>undefined, { urn })
            case "aci:index/monitoringPolicy:MonitoringPolicy":
                return new MonitoringPolicy(name, <any>undefined, { urn })
            case "aci:index/multicastPool:MulticastPool":
                return new MulticastPool(name, <any>undefined, { urn })
            case "aci:index/multicastPoolBlock:MulticastPoolBlock":
                return new MulticastPoolBlock(name, <any>undefined, { urn })
            case "aci:index/netflowMonitorPolicy:NetflowMonitorPolicy":
                return new NetflowMonitorPolicy(name, <any>undefined, { urn })
            case "aci:index/netflowRecordPolicy:NetflowRecordPolicy":
                return new NetflowRecordPolicy(name, <any>undefined, { urn })
            case "aci:index/nodeBlock:NodeBlock":
                return new NodeBlock(name, <any>undefined, { urn })
            case "aci:index/nodeBlockFirmware:NodeBlockFirmware":
                return new NodeBlockFirmware(name, <any>undefined, { urn })
            case "aci:index/nodeMgmtEpg:NodeMgmtEpg":
                return new NodeMgmtEpg(name, <any>undefined, { urn })
            case "aci:index/ospfInterfacePolicy:OspfInterfacePolicy":
                return new OspfInterfacePolicy(name, <any>undefined, { urn })
            case "aci:index/ospfRouteSummarization:OspfRouteSummarization":
                return new OspfRouteSummarization(name, <any>undefined, { urn })
            case "aci:index/ospfTimers:OspfTimers":
                return new OspfTimers(name, <any>undefined, { urn })
            case "aci:index/outOfBandContract:OutOfBandContract":
                return new OutOfBandContract(name, <any>undefined, { urn })
            case "aci:index/pbrL1L2Destination:PbrL1L2Destination":
                return new PbrL1L2Destination(name, <any>undefined, { urn })
            case "aci:index/physicalDomain:PhysicalDomain":
                return new PhysicalDomain(name, <any>undefined, { urn })
            case "aci:index/pimInterfacePolicy:PimInterfacePolicy":
                return new PimInterfacePolicy(name, <any>undefined, { urn })
            case "aci:index/pimRouteMapEntry:PimRouteMapEntry":
                return new PimRouteMapEntry(name, <any>undefined, { urn })
            case "aci:index/pimRouteMapPolicy:PimRouteMapPolicy":
                return new PimRouteMapPolicy(name, <any>undefined, { urn })
            case "aci:index/podMaintenanceGroup:PodMaintenanceGroup":
                return new PodMaintenanceGroup(name, <any>undefined, { urn })
            case "aci:index/portSecurityPolicy:PortSecurityPolicy":
                return new PortSecurityPolicy(name, <any>undefined, { urn })
            case "aci:index/portTracking:PortTracking":
                return new PortTracking(name, <any>undefined, { urn })
            case "aci:index/powerSupplyRedundancyPolicy:PowerSupplyRedundancyPolicy":
                return new PowerSupplyRedundancyPolicy(name, <any>undefined, { urn })
            case "aci:index/qosInstancePolicy:QosInstancePolicy":
                return new QosInstancePolicy(name, <any>undefined, { urn })
            case "aci:index/radiusProvider:RadiusProvider":
                return new RadiusProvider(name, <any>undefined, { urn })
            case "aci:index/radiusProviderGroup:RadiusProviderGroup":
                return new RadiusProviderGroup(name, <any>undefined, { urn })
            case "aci:index/ranges:Ranges":
                return new Ranges(name, <any>undefined, { urn })
            case "aci:index/recurringWindow:RecurringWindow":
                return new RecurringWindow(name, <any>undefined, { urn })
            case "aci:index/relationToConsumedOutOfBandContract:RelationToConsumedOutOfBandContract":
                return new RelationToConsumedOutOfBandContract(name, <any>undefined, { urn })
            case "aci:index/relationToFallbackRouteGroup:RelationToFallbackRouteGroup":
                return new RelationToFallbackRouteGroup(name, <any>undefined, { urn })
            case "aci:index/relationToNetflowExporter:RelationToNetflowExporter":
                return new RelationToNetflowExporter(name, <any>undefined, { urn })
            case "aci:index/rest:Rest":
                return new Rest(name, <any>undefined, { urn })
            case "aci:index/restManaged:RestManaged":
                return new RestManaged(name, <any>undefined, { urn })
            case "aci:index/routeControlContext:RouteControlContext":
                return new RouteControlContext(name, <any>undefined, { urn })
            case "aci:index/routeControlProfile:RouteControlProfile":
                return new RouteControlProfile(name, <any>undefined, { urn })
            case "aci:index/rsaProvider:RsaProvider":
                return new RsaProvider(name, <any>undefined, { urn })
            case "aci:index/samlProvider:SamlProvider":
                return new SamlProvider(name, <any>undefined, { urn })
            case "aci:index/samlProviderGroup:SamlProviderGroup":
                return new SamlProviderGroup(name, <any>undefined, { urn })
            case "aci:index/serviceRedirectBackupPolicy:ServiceRedirectBackupPolicy":
                return new ServiceRedirectBackupPolicy(name, <any>undefined, { urn })
            case "aci:index/serviceRedirectPolicy:ServiceRedirectPolicy":
                return new ServiceRedirectPolicy(name, <any>undefined, { urn })
            case "aci:index/snmpCommunity:SnmpCommunity":
                return new SnmpCommunity(name, <any>undefined, { urn })
            case "aci:index/snmpUser:SnmpUser":
                return new SnmpUser(name, <any>undefined, { urn })
            case "aci:index/spanDestinationGroup:SpanDestinationGroup":
                return new SpanDestinationGroup(name, <any>undefined, { urn })
            case "aci:index/spanSourceGroup:SpanSourceGroup":
                return new SpanSourceGroup(name, <any>undefined, { urn })
            case "aci:index/spanSourcedestinationGroupMatchLabel:SpanSourcedestinationGroupMatchLabel":
                return new SpanSourcedestinationGroupMatchLabel(name, <any>undefined, { urn })
            case "aci:index/spanningTreeInterfacePolicy:SpanningTreeInterfacePolicy":
                return new SpanningTreeInterfacePolicy(name, <any>undefined, { urn })
            case "aci:index/spineAccessPortSelector:SpineAccessPortSelector":
                return new SpineAccessPortSelector(name, <any>undefined, { urn })
            case "aci:index/spineInterfaceProfile:SpineInterfaceProfile":
                return new SpineInterfaceProfile(name, <any>undefined, { urn })
            case "aci:index/spineInterfaceProfileSelector:SpineInterfaceProfileSelector":
                return new SpineInterfaceProfileSelector(name, <any>undefined, { urn })
            case "aci:index/spinePortPolicyGroup:SpinePortPolicyGroup":
                return new SpinePortPolicyGroup(name, <any>undefined, { urn })
            case "aci:index/spinePortSelector:SpinePortSelector":
                return new SpinePortSelector(name, <any>undefined, { urn })
            case "aci:index/spineProfile:SpineProfile":
                return new SpineProfile(name, <any>undefined, { urn })
            case "aci:index/spineSwitchAssociation:SpineSwitchAssociation":
                return new SpineSwitchAssociation(name, <any>undefined, { urn })
            case "aci:index/spineSwitchPolicyGroup:SpineSwitchPolicyGroup":
                return new SpineSwitchPolicyGroup(name, <any>undefined, { urn })
            case "aci:index/staticNodeMgmtAddress:StaticNodeMgmtAddress":
                return new StaticNodeMgmtAddress(name, <any>undefined, { urn })
            case "aci:index/subnet:Subnet":
                return new Subnet(name, <any>undefined, { urn })
            case "aci:index/tabooContract:TabooContract":
                return new TabooContract(name, <any>undefined, { urn })
            case "aci:index/tacacsAccounting:TacacsAccounting":
                return new TacacsAccounting(name, <any>undefined, { urn })
            case "aci:index/tacacsAccountingDestination:TacacsAccountingDestination":
                return new TacacsAccountingDestination(name, <any>undefined, { urn })
            case "aci:index/tacacsProvider:TacacsProvider":
                return new TacacsProvider(name, <any>undefined, { urn })
            case "aci:index/tacacsProviderGroup:TacacsProviderGroup":
                return new TacacsProviderGroup(name, <any>undefined, { urn })
            case "aci:index/tacacsSource:TacacsSource":
                return new TacacsSource(name, <any>undefined, { urn })
            case "aci:index/tag:Tag":
                return new Tag(name, <any>undefined, { urn })
            case "aci:index/tenant:Tenant":
                return new Tenant(name, <any>undefined, { urn })
            case "aci:index/tenantToCloudAccount:TenantToCloudAccount":
                return new TenantToCloudAccount(name, <any>undefined, { urn })
            case "aci:index/triggerScheduler:TriggerScheduler":
                return new TriggerScheduler(name, <any>undefined, { urn })
            case "aci:index/userSecurityDomain:UserSecurityDomain":
                return new UserSecurityDomain(name, <any>undefined, { urn })
            case "aci:index/userSecurityDomainRole:UserSecurityDomainRole":
                return new UserSecurityDomainRole(name, <any>undefined, { urn })
            case "aci:index/vlanEncapsulationforVxlanTraffic:VlanEncapsulationforVxlanTraffic":
                return new VlanEncapsulationforVxlanTraffic(name, <any>undefined, { urn })
            case "aci:index/vlanPool:VlanPool":
                return new VlanPool(name, <any>undefined, { urn })
            case "aci:index/vmmController:VmmController":
                return new VmmController(name, <any>undefined, { urn })
            case "aci:index/vmmCredential:VmmCredential":
                return new VmmCredential(name, <any>undefined, { urn })
            case "aci:index/vmmDomain:VmmDomain":
                return new VmmDomain(name, <any>undefined, { urn })
            case "aci:index/vpcDomainPolicy:VpcDomainPolicy":
                return new VpcDomainPolicy(name, <any>undefined, { urn })
            case "aci:index/vpcExplicitProtectionGroup:VpcExplicitProtectionGroup":
                return new VpcExplicitProtectionGroup(name, <any>undefined, { urn })
            case "aci:index/vrf:Vrf":
                return new Vrf(name, <any>undefined, { urn })
            case "aci:index/vrfFallbackRouteGroup:VrfFallbackRouteGroup":
                return new VrfFallbackRouteGroup(name, <any>undefined, { urn })
            case "aci:index/vrfFallbackRouteGroupMember:VrfFallbackRouteGroupMember":
                return new VrfFallbackRouteGroupMember(name, <any>undefined, { urn })
            case "aci:index/vrfLeakEpgBdSubnet:VrfLeakEpgBdSubnet":
                return new VrfLeakEpgBdSubnet(name, <any>undefined, { urn })
            case "aci:index/vrfSnmpContext:VrfSnmpContext":
                return new VrfSnmpContext(name, <any>undefined, { urn })
            case "aci:index/vrfSnmpContextCommunity:VrfSnmpContextCommunity":
                return new VrfSnmpContextCommunity(name, <any>undefined, { urn })
            case "aci:index/vrfToBgpAddressFamilyContext:VrfToBgpAddressFamilyContext":
                return new VrfToBgpAddressFamilyContext(name, <any>undefined, { urn })
            case "aci:index/vsanPool:VsanPool":
                return new VsanPool(name, <any>undefined, { urn })
            case "aci:index/vswitchPolicy:VswitchPolicy":
                return new VswitchPolicy(name, <any>undefined, { urn })
            case "aci:index/vxlanPool:VxlanPool":
                return new VxlanPool(name, <any>undefined, { urn })
            case "aci:index/x509Certificate:X509Certificate":
                return new X509Certificate(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aci", "index/aaaDomain", _module)
pulumi.runtime.registerResourceModule("aci", "index/aaaDomainRelationship", _module)
pulumi.runtime.registerResourceModule("aci", "index/aaepToDomain", _module)
pulumi.runtime.registerResourceModule("aci", "index/accessGeneric", _module)
pulumi.runtime.registerResourceModule("aci", "index/accessGroup", _module)
pulumi.runtime.registerResourceModule("aci", "index/accessPortBlock", _module)
pulumi.runtime.registerResourceModule("aci", "index/accessPortSelector", _module)
pulumi.runtime.registerResourceModule("aci", "index/accessSubPortBlock", _module)
pulumi.runtime.registerResourceModule("aci", "index/accessSwitchPolicyGroup", _module)
pulumi.runtime.registerResourceModule("aci", "index/actionRuleAdditionalCommunities", _module)
pulumi.runtime.registerResourceModule("aci", "index/actionRuleProfile", _module)
pulumi.runtime.registerResourceModule("aci", "index/annotation", _module)
pulumi.runtime.registerResourceModule("aci", "index/any", _module)
pulumi.runtime.registerResourceModule("aci", "index/applicationEpg", _module)
pulumi.runtime.registerResourceModule("aci", "index/applicationProfile", _module)
pulumi.runtime.registerResourceModule("aci", "index/attachableAccessEntityProfile", _module)
pulumi.runtime.registerResourceModule("aci", "index/authenticationProperties", _module)
pulumi.runtime.registerResourceModule("aci", "index/bdDhcpLabel", _module)
pulumi.runtime.registerResourceModule("aci", "index/bfdInterfacePolicy", _module)
pulumi.runtime.registerResourceModule("aci", "index/bfdMultihopInterfacePolicy", _module)
pulumi.runtime.registerResourceModule("aci", "index/bfdMultihopInterfaceProfile", _module)
pulumi.runtime.registerResourceModule("aci", "index/bfdMultihopNodePolicy", _module)
pulumi.runtime.registerResourceModule("aci", "index/bgpAddressFamilyContext", _module)
pulumi.runtime.registerResourceModule("aci", "index/bgpBestPathPolicy", _module)
pulumi.runtime.registerResourceModule("aci", "index/bgpPeerConnectivityProfile", _module)
pulumi.runtime.registerResourceModule("aci", "index/bgpPeerPrefix", _module)
pulumi.runtime.registerResourceModule("aci", "index/bgpRouteControlProfile", _module)
pulumi.runtime.registerResourceModule("aci", "index/bgpRouteSummarization", _module)
pulumi.runtime.registerResourceModule("aci", "index/bgpTimers", _module)
pulumi.runtime.registerResourceModule("aci", "index/bridgeDomain", _module)
pulumi.runtime.registerResourceModule("aci", "index/bulkEpgToStaticPath", _module)
pulumi.runtime.registerResourceModule("aci", "index/cdpInterfacePolicy", _module)
pulumi.runtime.registerResourceModule("aci", "index/cloudAccount", _module)
pulumi.runtime.registerResourceModule("aci", "index/cloudAd", _module)
pulumi.runtime.registerResourceModule("aci", "index/cloudApplicationcontainer", _module)
pulumi.runtime.registerResourceModule("aci", "index/cloudAwsProvider", _module)
pulumi.runtime.registerResourceModule("aci", "index/cloudCidrPool", _module)
pulumi.runtime.registerResourceModule("aci", "index/cloudContextProfile", _module)
pulumi.runtime.registerResourceModule("aci", "index/cloudCredentials", _module)
pulumi.runtime.registerResourceModule("aci", "index/cloudDomainProfile", _module)
pulumi.runtime.registerResourceModule("aci", "index/cloudEndpointSelector", _module)
pulumi.runtime.registerResourceModule("aci", "index/cloudEndpointSelectorforExternalEpgs", _module)
pulumi.runtime.registerResourceModule("aci", "index/cloudEpg", _module)
pulumi.runtime.registerResourceModule("aci", "index/cloudExternalEpg", _module)
pulumi.runtime.registerResourceModule("aci", "index/cloudExternalNetwork", _module)
pulumi.runtime.registerResourceModule("aci", "index/cloudExternalNetworkVpnNetwork", _module)
pulumi.runtime.registerResourceModule("aci", "index/cloudIpsecTunnelSubnetPool", _module)
pulumi.runtime.registerResourceModule("aci", "index/cloudL4L7NativeLoadBalancer", _module)
pulumi.runtime.registerResourceModule("aci", "index/cloudL4L7ThirdPartyDevice", _module)
pulumi.runtime.registerResourceModule("aci", "index/cloudPrivateLinkLabel", _module)
pulumi.runtime.registerResourceModule("aci", "index/cloudServiceEndpointSelector", _module)
pulumi.runtime.registerResourceModule("aci", "index/cloudServiceEpg", _module)
pulumi.runtime.registerResourceModule("aci", "index/cloudSubnet", _module)
pulumi.runtime.registerResourceModule("aci", "index/cloudTemplateRegionDetail", _module)
pulumi.runtime.registerResourceModule("aci", "index/cloudVpnGateway", _module)
pulumi.runtime.registerResourceModule("aci", "index/cloudVrfLeakRoutes", _module)
pulumi.runtime.registerResourceModule("aci", "index/concreteDevice", _module)
pulumi.runtime.registerResourceModule("aci", "index/concreteInterface", _module)
pulumi.runtime.registerResourceModule("aci", "index/configurationExportPolicy", _module)
pulumi.runtime.registerResourceModule("aci", "index/configurationImportPolicy", _module)
pulumi.runtime.registerResourceModule("aci", "index/connection", _module)
pulumi.runtime.registerResourceModule("aci", "index/consoleAuthentication", _module)
pulumi.runtime.registerResourceModule("aci", "index/contract", _module)
pulumi.runtime.registerResourceModule("aci", "index/contractSubject", _module)
pulumi.runtime.registerResourceModule("aci", "index/contractSubjectFilter", _module)
pulumi.runtime.registerResourceModule("aci", "index/contractSubjectOneWayFilter", _module)
pulumi.runtime.registerResourceModule("aci", "index/coopPolicy", _module)
pulumi.runtime.registerResourceModule("aci", "index/defaultAuthentication", _module)
pulumi.runtime.registerResourceModule("aci", "index/destinationOfRedirectedTraffic", _module)
pulumi.runtime.registerResourceModule("aci", "index/dhcpOptionPolicy", _module)
pulumi.runtime.registerResourceModule("aci", "index/dhcpRelayPolicy", _module)
pulumi.runtime.registerResourceModule("aci", "index/duoProviderGroup", _module)
pulumi.runtime.registerResourceModule("aci", "index/encryptionKey", _module)
pulumi.runtime.registerResourceModule("aci", "index/endPointRetentionPolicy", _module)
pulumi.runtime.registerResourceModule("aci", "index/endpointControls", _module)
pulumi.runtime.registerResourceModule("aci", "index/endpointIpAgingProfile", _module)
pulumi.runtime.registerResourceModule("aci", "index/endpointLoopProtection", _module)
pulumi.runtime.registerResourceModule("aci", "index/endpointSecurityGroup", _module)
pulumi.runtime.registerResourceModule("aci", "index/endpointSecurityGroupEpgSelector", _module)
pulumi.runtime.registerResourceModule("aci", "index/endpointSecurityGroupSelector", _module)
pulumi.runtime.registerResourceModule("aci", "index/endpointSecurityGroupTagSelector", _module)
pulumi.runtime.registerResourceModule("aci", "index/endpointTagIp", _module)
pulumi.runtime.registerResourceModule("aci", "index/endpointTagMac", _module)
pulumi.runtime.registerResourceModule("aci", "index/epgToContract", _module)
pulumi.runtime.registerResourceModule("aci", "index/epgToContractInterface", _module)
pulumi.runtime.registerResourceModule("aci", "index/epgToDomain", _module)
pulumi.runtime.registerResourceModule("aci", "index/epgToStaticPath", _module)
pulumi.runtime.registerResourceModule("aci", "index/epgsUsingFunction", _module)
pulumi.runtime.registerResourceModule("aci", "index/errorDisableRecovery", _module)
pulumi.runtime.registerResourceModule("aci", "index/externalManagementNetworkInstanceProfile", _module)
pulumi.runtime.registerResourceModule("aci", "index/externalManagementNetworkSubnet", _module)
pulumi.runtime.registerResourceModule("aci", "index/externalNetworkInstanceProfile", _module)
pulumi.runtime.registerResourceModule("aci", "index/fabricIfPol", _module)
pulumi.runtime.registerResourceModule("aci", "index/fabricNodeControl", _module)
pulumi.runtime.registerResourceModule("aci", "index/fabricNodeMember", _module)
pulumi.runtime.registerResourceModule("aci", "index/fabricWideSettings", _module)
pulumi.runtime.registerResourceModule("aci", "index/fcDomain", _module)
pulumi.runtime.registerResourceModule("aci", "index/fexBundleGroup", _module)
pulumi.runtime.registerResourceModule("aci", "index/fexProfile", _module)
pulumi.runtime.registerResourceModule("aci", "index/fileRemotePath", _module)
pulumi.runtime.registerResourceModule("aci", "index/filter", _module)
pulumi.runtime.registerResourceModule("aci", "index/filterEntry", _module)
pulumi.runtime.registerResourceModule("aci", "index/firmwareDownloadTask", _module)
pulumi.runtime.registerResourceModule("aci", "index/firmwareGroup", _module)
pulumi.runtime.registerResourceModule("aci", "index/firmwarePolicy", _module)
pulumi.runtime.registerResourceModule("aci", "index/functionNode", _module)
pulumi.runtime.registerResourceModule("aci", "index/globalSecurity", _module)
pulumi.runtime.registerResourceModule("aci", "index/hsrpGroupPolicy", _module)
pulumi.runtime.registerResourceModule("aci", "index/hsrpInterfacePolicy", _module)
pulumi.runtime.registerResourceModule("aci", "index/igmpInterfacePolicy", _module)
pulumi.runtime.registerResourceModule("aci", "index/importedContract", _module)
pulumi.runtime.registerResourceModule("aci", "index/interfaceBlacklist", _module)
pulumi.runtime.registerResourceModule("aci", "index/interfaceConfig", _module)
pulumi.runtime.registerResourceModule("aci", "index/interfaceFcPolicy", _module)
pulumi.runtime.registerResourceModule("aci", "index/ipSlaMonitoringPolicy", _module)
pulumi.runtime.registerResourceModule("aci", "index/isisDomainPolicy", _module)
pulumi.runtime.registerResourceModule("aci", "index/l2Domain", _module)
pulumi.runtime.registerResourceModule("aci", "index/l2InterfacePolicy", _module)
pulumi.runtime.registerResourceModule("aci", "index/l2Outside", _module)
pulumi.runtime.registerResourceModule("aci", "index/l2outExtepg", _module)
pulumi.runtime.registerResourceModule("aci", "index/l3DomainProfile", _module)
pulumi.runtime.registerResourceModule("aci", "index/l3ExtSubnet", _module)
pulumi.runtime.registerResourceModule("aci", "index/l3InterfacePolicy", _module)
pulumi.runtime.registerResourceModule("aci", "index/l3Outside", _module)
pulumi.runtime.registerResourceModule("aci", "index/l3outBfdInterfaceProfile", _module)
pulumi.runtime.registerResourceModule("aci", "index/l3outBgpExternalPolicy", _module)
pulumi.runtime.registerResourceModule("aci", "index/l3outBgpProtocolProfile", _module)
pulumi.runtime.registerResourceModule("aci", "index/l3outConsumerLabel", _module)
pulumi.runtime.registerResourceModule("aci", "index/l3outFloatingSvi", _module)
pulumi.runtime.registerResourceModule("aci", "index/l3outHsrpInterfaceGroup", _module)
pulumi.runtime.registerResourceModule("aci", "index/l3outHsrpInterfaceProfile", _module)
pulumi.runtime.registerResourceModule("aci", "index/l3outHsrpSecondaryVip", _module)
pulumi.runtime.registerResourceModule("aci", "index/l3outLoopbackInterfaceProfile", _module)
pulumi.runtime.registerResourceModule("aci", "index/l3outNodeSidProfile", _module)
pulumi.runtime.registerResourceModule("aci", "index/l3outOspfExternalPolicy", _module)
pulumi.runtime.registerResourceModule("aci", "index/l3outOspfInterfaceProfile", _module)
pulumi.runtime.registerResourceModule("aci", "index/l3outPathAttachment", _module)
pulumi.runtime.registerResourceModule("aci", "index/l3outPathAttachmentSecondaryIp", _module)
pulumi.runtime.registerResourceModule("aci", "index/l3outProviderLabel", _module)
pulumi.runtime.registerResourceModule("aci", "index/l3outRedistributePolicy", _module)
pulumi.runtime.registerResourceModule("aci", "index/l3outRouteTagPolicy", _module)
pulumi.runtime.registerResourceModule("aci", "index/l3outStaticRoute", _module)
pulumi.runtime.registerResourceModule("aci", "index/l3outStaticRouteNextHop", _module)
pulumi.runtime.registerResourceModule("aci", "index/l3outVpcMember", _module)
pulumi.runtime.registerResourceModule("aci", "index/l4L7Device", _module)
pulumi.runtime.registerResourceModule("aci", "index/l4L7LogicalInterface", _module)
pulumi.runtime.registerResourceModule("aci", "index/l4L7RedirectHealthGroup", _module)
pulumi.runtime.registerResourceModule("aci", "index/l4L7ServiceGraphTemplate", _module)
pulumi.runtime.registerResourceModule("aci", "index/lacpMemberPolicy", _module)
pulumi.runtime.registerResourceModule("aci", "index/lacpPolicy", _module)
pulumi.runtime.registerResourceModule("aci", "index/ldapGroupMap", _module)
pulumi.runtime.registerResourceModule("aci", "index/ldapGroupMapRule", _module)
pulumi.runtime.registerResourceModule("aci", "index/ldapGroupMapRuleToGroupMap", _module)
pulumi.runtime.registerResourceModule("aci", "index/ldapProvider", _module)
pulumi.runtime.registerResourceModule("aci", "index/leafAccessBundlePolicyGroup", _module)
pulumi.runtime.registerResourceModule("aci", "index/leafAccessBundlePolicySubGroup", _module)
pulumi.runtime.registerResourceModule("aci", "index/leafAccessPortPolicyGroup", _module)
pulumi.runtime.registerResourceModule("aci", "index/leafBreakoutPortGroup", _module)
pulumi.runtime.registerResourceModule("aci", "index/leafInterfaceProfile", _module)
pulumi.runtime.registerResourceModule("aci", "index/leafProfile", _module)
pulumi.runtime.registerResourceModule("aci", "index/leafSelector", _module)
pulumi.runtime.registerResourceModule("aci", "index/lldpInterfacePolicy", _module)
pulumi.runtime.registerResourceModule("aci", "index/localUser", _module)
pulumi.runtime.registerResourceModule("aci", "index/logicalDeviceContext", _module)
pulumi.runtime.registerResourceModule("aci", "index/logicalInterfaceContext", _module)
pulumi.runtime.registerResourceModule("aci", "index/logicalInterfaceProfile", _module)
pulumi.runtime.registerResourceModule("aci", "index/logicalNodeProfile", _module)
pulumi.runtime.registerResourceModule("aci", "index/logicalNodeToFabricNode", _module)
pulumi.runtime.registerResourceModule("aci", "index/loginDomain", _module)
pulumi.runtime.registerResourceModule("aci", "index/loginDomainProvider", _module)
pulumi.runtime.registerResourceModule("aci", "index/maintenanceGroupNode", _module)
pulumi.runtime.registerResourceModule("aci", "index/maintenancePolicy", _module)
pulumi.runtime.registerResourceModule("aci", "index/managedNodeConnectivityGroup", _module)
pulumi.runtime.registerResourceModule("aci", "index/matchCommunityTerms", _module)
pulumi.runtime.registerResourceModule("aci", "index/matchRegexCommunityTerms", _module)
pulumi.runtime.registerResourceModule("aci", "index/matchRouteDestinationRule", _module)
pulumi.runtime.registerResourceModule("aci", "index/matchRule", _module)
pulumi.runtime.registerResourceModule("aci", "index/mcpInstancePolicy", _module)
pulumi.runtime.registerResourceModule("aci", "index/mgmtPreference", _module)
pulumi.runtime.registerResourceModule("aci", "index/mgmtZone", _module)
pulumi.runtime.registerResourceModule("aci", "index/miscablingProtocolInterfacePolicy", _module)
pulumi.runtime.registerResourceModule("aci", "index/monitoringPolicy", _module)
pulumi.runtime.registerResourceModule("aci", "index/multicastPool", _module)
pulumi.runtime.registerResourceModule("aci", "index/multicastPoolBlock", _module)
pulumi.runtime.registerResourceModule("aci", "index/netflowMonitorPolicy", _module)
pulumi.runtime.registerResourceModule("aci", "index/netflowRecordPolicy", _module)
pulumi.runtime.registerResourceModule("aci", "index/nodeBlock", _module)
pulumi.runtime.registerResourceModule("aci", "index/nodeBlockFirmware", _module)
pulumi.runtime.registerResourceModule("aci", "index/nodeMgmtEpg", _module)
pulumi.runtime.registerResourceModule("aci", "index/ospfInterfacePolicy", _module)
pulumi.runtime.registerResourceModule("aci", "index/ospfRouteSummarization", _module)
pulumi.runtime.registerResourceModule("aci", "index/ospfTimers", _module)
pulumi.runtime.registerResourceModule("aci", "index/outOfBandContract", _module)
pulumi.runtime.registerResourceModule("aci", "index/pbrL1L2Destination", _module)
pulumi.runtime.registerResourceModule("aci", "index/physicalDomain", _module)
pulumi.runtime.registerResourceModule("aci", "index/pimInterfacePolicy", _module)
pulumi.runtime.registerResourceModule("aci", "index/pimRouteMapEntry", _module)
pulumi.runtime.registerResourceModule("aci", "index/pimRouteMapPolicy", _module)
pulumi.runtime.registerResourceModule("aci", "index/podMaintenanceGroup", _module)
pulumi.runtime.registerResourceModule("aci", "index/portSecurityPolicy", _module)
pulumi.runtime.registerResourceModule("aci", "index/portTracking", _module)
pulumi.runtime.registerResourceModule("aci", "index/powerSupplyRedundancyPolicy", _module)
pulumi.runtime.registerResourceModule("aci", "index/qosInstancePolicy", _module)
pulumi.runtime.registerResourceModule("aci", "index/radiusProvider", _module)
pulumi.runtime.registerResourceModule("aci", "index/radiusProviderGroup", _module)
pulumi.runtime.registerResourceModule("aci", "index/ranges", _module)
pulumi.runtime.registerResourceModule("aci", "index/recurringWindow", _module)
pulumi.runtime.registerResourceModule("aci", "index/relationToConsumedOutOfBandContract", _module)
pulumi.runtime.registerResourceModule("aci", "index/relationToFallbackRouteGroup", _module)
pulumi.runtime.registerResourceModule("aci", "index/relationToNetflowExporter", _module)
pulumi.runtime.registerResourceModule("aci", "index/rest", _module)
pulumi.runtime.registerResourceModule("aci", "index/restManaged", _module)
pulumi.runtime.registerResourceModule("aci", "index/routeControlContext", _module)
pulumi.runtime.registerResourceModule("aci", "index/routeControlProfile", _module)
pulumi.runtime.registerResourceModule("aci", "index/rsaProvider", _module)
pulumi.runtime.registerResourceModule("aci", "index/samlProvider", _module)
pulumi.runtime.registerResourceModule("aci", "index/samlProviderGroup", _module)
pulumi.runtime.registerResourceModule("aci", "index/serviceRedirectBackupPolicy", _module)
pulumi.runtime.registerResourceModule("aci", "index/serviceRedirectPolicy", _module)
pulumi.runtime.registerResourceModule("aci", "index/snmpCommunity", _module)
pulumi.runtime.registerResourceModule("aci", "index/snmpUser", _module)
pulumi.runtime.registerResourceModule("aci", "index/spanDestinationGroup", _module)
pulumi.runtime.registerResourceModule("aci", "index/spanSourceGroup", _module)
pulumi.runtime.registerResourceModule("aci", "index/spanSourcedestinationGroupMatchLabel", _module)
pulumi.runtime.registerResourceModule("aci", "index/spanningTreeInterfacePolicy", _module)
pulumi.runtime.registerResourceModule("aci", "index/spineAccessPortSelector", _module)
pulumi.runtime.registerResourceModule("aci", "index/spineInterfaceProfile", _module)
pulumi.runtime.registerResourceModule("aci", "index/spineInterfaceProfileSelector", _module)
pulumi.runtime.registerResourceModule("aci", "index/spinePortPolicyGroup", _module)
pulumi.runtime.registerResourceModule("aci", "index/spinePortSelector", _module)
pulumi.runtime.registerResourceModule("aci", "index/spineProfile", _module)
pulumi.runtime.registerResourceModule("aci", "index/spineSwitchAssociation", _module)
pulumi.runtime.registerResourceModule("aci", "index/spineSwitchPolicyGroup", _module)
pulumi.runtime.registerResourceModule("aci", "index/staticNodeMgmtAddress", _module)
pulumi.runtime.registerResourceModule("aci", "index/subnet", _module)
pulumi.runtime.registerResourceModule("aci", "index/tabooContract", _module)
pulumi.runtime.registerResourceModule("aci", "index/tacacsAccounting", _module)
pulumi.runtime.registerResourceModule("aci", "index/tacacsAccountingDestination", _module)
pulumi.runtime.registerResourceModule("aci", "index/tacacsProvider", _module)
pulumi.runtime.registerResourceModule("aci", "index/tacacsProviderGroup", _module)
pulumi.runtime.registerResourceModule("aci", "index/tacacsSource", _module)
pulumi.runtime.registerResourceModule("aci", "index/tag", _module)
pulumi.runtime.registerResourceModule("aci", "index/tenant", _module)
pulumi.runtime.registerResourceModule("aci", "index/tenantToCloudAccount", _module)
pulumi.runtime.registerResourceModule("aci", "index/triggerScheduler", _module)
pulumi.runtime.registerResourceModule("aci", "index/userSecurityDomain", _module)
pulumi.runtime.registerResourceModule("aci", "index/userSecurityDomainRole", _module)
pulumi.runtime.registerResourceModule("aci", "index/vlanEncapsulationforVxlanTraffic", _module)
pulumi.runtime.registerResourceModule("aci", "index/vlanPool", _module)
pulumi.runtime.registerResourceModule("aci", "index/vmmController", _module)
pulumi.runtime.registerResourceModule("aci", "index/vmmCredential", _module)
pulumi.runtime.registerResourceModule("aci", "index/vmmDomain", _module)
pulumi.runtime.registerResourceModule("aci", "index/vpcDomainPolicy", _module)
pulumi.runtime.registerResourceModule("aci", "index/vpcExplicitProtectionGroup", _module)
pulumi.runtime.registerResourceModule("aci", "index/vrf", _module)
pulumi.runtime.registerResourceModule("aci", "index/vrfFallbackRouteGroup", _module)
pulumi.runtime.registerResourceModule("aci", "index/vrfFallbackRouteGroupMember", _module)
pulumi.runtime.registerResourceModule("aci", "index/vrfLeakEpgBdSubnet", _module)
pulumi.runtime.registerResourceModule("aci", "index/vrfSnmpContext", _module)
pulumi.runtime.registerResourceModule("aci", "index/vrfSnmpContextCommunity", _module)
pulumi.runtime.registerResourceModule("aci", "index/vrfToBgpAddressFamilyContext", _module)
pulumi.runtime.registerResourceModule("aci", "index/vsanPool", _module)
pulumi.runtime.registerResourceModule("aci", "index/vswitchPolicy", _module)
pulumi.runtime.registerResourceModule("aci", "index/vxlanPool", _module)
pulumi.runtime.registerResourceModule("aci", "index/x509Certificate", _module)
pulumi.runtime.registerResourcePackage("aci", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:aci") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
