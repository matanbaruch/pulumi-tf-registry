// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class McpInstancePolicy extends pulumi.CustomResource {
    /**
     * Get an existing McpInstancePolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: McpInstancePolicyState, opts?: pulumi.CustomResourceOptions): McpInstancePolicy {
        return new McpInstancePolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aci:index/mcpInstancePolicy:McpInstancePolicy';

    /**
     * Returns true if the given object is an instance of McpInstancePolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is McpInstancePolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === McpInstancePolicy.__pulumiType;
    }

    public readonly adminSt!: pulumi.Output<string>;
    public readonly annotation!: pulumi.Output<string>;
    public readonly ctrls!: pulumi.Output<string[]>;
    public readonly description!: pulumi.Output<string>;
    public readonly initDelayTime!: pulumi.Output<string>;
    public readonly key!: pulumi.Output<string>;
    public readonly loopDetectMult!: pulumi.Output<string>;
    public readonly loopProtectAct!: pulumi.Output<string>;
    public readonly nameAlias!: pulumi.Output<string>;
    public readonly txFreq!: pulumi.Output<string>;
    public readonly txFreqMsec!: pulumi.Output<string>;

    /**
     * Create a McpInstancePolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: McpInstancePolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: McpInstancePolicyArgs | McpInstancePolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as McpInstancePolicyState | undefined;
            resourceInputs["adminSt"] = state ? state.adminSt : undefined;
            resourceInputs["annotation"] = state ? state.annotation : undefined;
            resourceInputs["ctrls"] = state ? state.ctrls : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["initDelayTime"] = state ? state.initDelayTime : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["loopDetectMult"] = state ? state.loopDetectMult : undefined;
            resourceInputs["loopProtectAct"] = state ? state.loopProtectAct : undefined;
            resourceInputs["nameAlias"] = state ? state.nameAlias : undefined;
            resourceInputs["txFreq"] = state ? state.txFreq : undefined;
            resourceInputs["txFreqMsec"] = state ? state.txFreqMsec : undefined;
        } else {
            const args = argsOrState as McpInstancePolicyArgs | undefined;
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            resourceInputs["adminSt"] = args ? args.adminSt : undefined;
            resourceInputs["annotation"] = args ? args.annotation : undefined;
            resourceInputs["ctrls"] = args ? args.ctrls : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["initDelayTime"] = args ? args.initDelayTime : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["loopDetectMult"] = args ? args.loopDetectMult : undefined;
            resourceInputs["loopProtectAct"] = args ? args.loopProtectAct : undefined;
            resourceInputs["nameAlias"] = args ? args.nameAlias : undefined;
            resourceInputs["txFreq"] = args ? args.txFreq : undefined;
            resourceInputs["txFreqMsec"] = args ? args.txFreqMsec : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(McpInstancePolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering McpInstancePolicy resources.
 */
export interface McpInstancePolicyState {
    adminSt?: pulumi.Input<string>;
    annotation?: pulumi.Input<string>;
    ctrls?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    initDelayTime?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    loopDetectMult?: pulumi.Input<string>;
    loopProtectAct?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    txFreq?: pulumi.Input<string>;
    txFreqMsec?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a McpInstancePolicy resource.
 */
export interface McpInstancePolicyArgs {
    adminSt?: pulumi.Input<string>;
    annotation?: pulumi.Input<string>;
    ctrls?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    initDelayTime?: pulumi.Input<string>;
    key: pulumi.Input<string>;
    loopDetectMult?: pulumi.Input<string>;
    loopProtectAct?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    txFreq?: pulumi.Input<string>;
    txFreqMsec?: pulumi.Input<string>;
}
