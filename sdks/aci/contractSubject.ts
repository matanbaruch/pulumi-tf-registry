// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ContractSubject extends pulumi.CustomResource {
    /**
     * Get an existing ContractSubject resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContractSubjectState, opts?: pulumi.CustomResourceOptions): ContractSubject {
        return new ContractSubject(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aci:index/contractSubject:ContractSubject';

    /**
     * Returns true if the given object is an instance of ContractSubject.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContractSubject {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContractSubject.__pulumiType;
    }

    public readonly annotation!: pulumi.Output<string>;
    public readonly applyBothDirections!: pulumi.Output<string | undefined>;
    public readonly consMatchT!: pulumi.Output<string>;
    /**
     * Set InTerm attributes
     */
    public readonly consumerToProvider!: pulumi.Output<outputs.ContractSubjectConsumerToProvider | undefined>;
    public readonly contractDn!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly nameAlias!: pulumi.Output<string>;
    public readonly prio!: pulumi.Output<string>;
    public readonly provMatchT!: pulumi.Output<string>;
    /**
     * Set OutTerm attributes
     */
    public readonly providerToConsumer!: pulumi.Output<outputs.ContractSubjectProviderToConsumer | undefined>;
    public readonly relationVzRsSdwanPol!: pulumi.Output<string>;
    public readonly relationVzRsSubjFiltAtts!: pulumi.Output<string[] | undefined>;
    public readonly relationVzRsSubjGraphAtt!: pulumi.Output<string>;
    public readonly revFltPorts!: pulumi.Output<string>;
    public readonly targetDscp!: pulumi.Output<string>;

    /**
     * Create a ContractSubject resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContractSubjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContractSubjectArgs | ContractSubjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContractSubjectState | undefined;
            resourceInputs["annotation"] = state ? state.annotation : undefined;
            resourceInputs["applyBothDirections"] = state ? state.applyBothDirections : undefined;
            resourceInputs["consMatchT"] = state ? state.consMatchT : undefined;
            resourceInputs["consumerToProvider"] = state ? state.consumerToProvider : undefined;
            resourceInputs["contractDn"] = state ? state.contractDn : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nameAlias"] = state ? state.nameAlias : undefined;
            resourceInputs["prio"] = state ? state.prio : undefined;
            resourceInputs["provMatchT"] = state ? state.provMatchT : undefined;
            resourceInputs["providerToConsumer"] = state ? state.providerToConsumer : undefined;
            resourceInputs["relationVzRsSdwanPol"] = state ? state.relationVzRsSdwanPol : undefined;
            resourceInputs["relationVzRsSubjFiltAtts"] = state ? state.relationVzRsSubjFiltAtts : undefined;
            resourceInputs["relationVzRsSubjGraphAtt"] = state ? state.relationVzRsSubjGraphAtt : undefined;
            resourceInputs["revFltPorts"] = state ? state.revFltPorts : undefined;
            resourceInputs["targetDscp"] = state ? state.targetDscp : undefined;
        } else {
            const args = argsOrState as ContractSubjectArgs | undefined;
            if ((!args || args.contractDn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'contractDn'");
            }
            resourceInputs["annotation"] = args ? args.annotation : undefined;
            resourceInputs["applyBothDirections"] = args ? args.applyBothDirections : undefined;
            resourceInputs["consMatchT"] = args ? args.consMatchT : undefined;
            resourceInputs["consumerToProvider"] = args ? args.consumerToProvider : undefined;
            resourceInputs["contractDn"] = args ? args.contractDn : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nameAlias"] = args ? args.nameAlias : undefined;
            resourceInputs["prio"] = args ? args.prio : undefined;
            resourceInputs["provMatchT"] = args ? args.provMatchT : undefined;
            resourceInputs["providerToConsumer"] = args ? args.providerToConsumer : undefined;
            resourceInputs["relationVzRsSdwanPol"] = args ? args.relationVzRsSdwanPol : undefined;
            resourceInputs["relationVzRsSubjFiltAtts"] = args ? args.relationVzRsSubjFiltAtts : undefined;
            resourceInputs["relationVzRsSubjGraphAtt"] = args ? args.relationVzRsSubjGraphAtt : undefined;
            resourceInputs["revFltPorts"] = args ? args.revFltPorts : undefined;
            resourceInputs["targetDscp"] = args ? args.targetDscp : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ContractSubject.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ContractSubject resources.
 */
export interface ContractSubjectState {
    annotation?: pulumi.Input<string>;
    applyBothDirections?: pulumi.Input<string>;
    consMatchT?: pulumi.Input<string>;
    /**
     * Set InTerm attributes
     */
    consumerToProvider?: pulumi.Input<inputs.ContractSubjectConsumerToProvider>;
    contractDn?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    prio?: pulumi.Input<string>;
    provMatchT?: pulumi.Input<string>;
    /**
     * Set OutTerm attributes
     */
    providerToConsumer?: pulumi.Input<inputs.ContractSubjectProviderToConsumer>;
    relationVzRsSdwanPol?: pulumi.Input<string>;
    relationVzRsSubjFiltAtts?: pulumi.Input<pulumi.Input<string>[]>;
    relationVzRsSubjGraphAtt?: pulumi.Input<string>;
    revFltPorts?: pulumi.Input<string>;
    targetDscp?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ContractSubject resource.
 */
export interface ContractSubjectArgs {
    annotation?: pulumi.Input<string>;
    applyBothDirections?: pulumi.Input<string>;
    consMatchT?: pulumi.Input<string>;
    /**
     * Set InTerm attributes
     */
    consumerToProvider?: pulumi.Input<inputs.ContractSubjectConsumerToProvider>;
    contractDn: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    prio?: pulumi.Input<string>;
    provMatchT?: pulumi.Input<string>;
    /**
     * Set OutTerm attributes
     */
    providerToConsumer?: pulumi.Input<inputs.ContractSubjectProviderToConsumer>;
    relationVzRsSdwanPol?: pulumi.Input<string>;
    relationVzRsSubjFiltAtts?: pulumi.Input<pulumi.Input<string>[]>;
    relationVzRsSubjGraphAtt?: pulumi.Input<string>;
    revFltPorts?: pulumi.Input<string>;
    targetDscp?: pulumi.Input<string>;
}
