// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class L3outPathAttachment extends pulumi.CustomResource {
    /**
     * Get an existing L3outPathAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: L3outPathAttachmentState, opts?: pulumi.CustomResourceOptions): L3outPathAttachment {
        return new L3outPathAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aci:index/l3outPathAttachment:L3outPathAttachment';

    /**
     * Returns true if the given object is an instance of L3outPathAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is L3outPathAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === L3outPathAttachment.__pulumiType;
    }

    public readonly addr!: pulumi.Output<string>;
    public readonly annotation!: pulumi.Output<string>;
    public readonly autostate!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly encap!: pulumi.Output<string>;
    public readonly encapScope!: pulumi.Output<string>;
    public readonly ifInstT!: pulumi.Output<string>;
    public readonly ipv6Dad!: pulumi.Output<string>;
    public readonly llAddr!: pulumi.Output<string>;
    public readonly logicalInterfaceProfileDn!: pulumi.Output<string>;
    public readonly mac!: pulumi.Output<string>;
    public readonly mode!: pulumi.Output<string>;
    public readonly mtu!: pulumi.Output<string>;
    public readonly targetDn!: pulumi.Output<string>;
    public readonly targetDscp!: pulumi.Output<string>;

    /**
     * Create a L3outPathAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: L3outPathAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: L3outPathAttachmentArgs | L3outPathAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as L3outPathAttachmentState | undefined;
            resourceInputs["addr"] = state ? state.addr : undefined;
            resourceInputs["annotation"] = state ? state.annotation : undefined;
            resourceInputs["autostate"] = state ? state.autostate : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["encap"] = state ? state.encap : undefined;
            resourceInputs["encapScope"] = state ? state.encapScope : undefined;
            resourceInputs["ifInstT"] = state ? state.ifInstT : undefined;
            resourceInputs["ipv6Dad"] = state ? state.ipv6Dad : undefined;
            resourceInputs["llAddr"] = state ? state.llAddr : undefined;
            resourceInputs["logicalInterfaceProfileDn"] = state ? state.logicalInterfaceProfileDn : undefined;
            resourceInputs["mac"] = state ? state.mac : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["mtu"] = state ? state.mtu : undefined;
            resourceInputs["targetDn"] = state ? state.targetDn : undefined;
            resourceInputs["targetDscp"] = state ? state.targetDscp : undefined;
        } else {
            const args = argsOrState as L3outPathAttachmentArgs | undefined;
            if ((!args || args.ifInstT === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ifInstT'");
            }
            if ((!args || args.logicalInterfaceProfileDn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logicalInterfaceProfileDn'");
            }
            if ((!args || args.targetDn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetDn'");
            }
            resourceInputs["addr"] = args ? args.addr : undefined;
            resourceInputs["annotation"] = args ? args.annotation : undefined;
            resourceInputs["autostate"] = args ? args.autostate : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["encap"] = args ? args.encap : undefined;
            resourceInputs["encapScope"] = args ? args.encapScope : undefined;
            resourceInputs["ifInstT"] = args ? args.ifInstT : undefined;
            resourceInputs["ipv6Dad"] = args ? args.ipv6Dad : undefined;
            resourceInputs["llAddr"] = args ? args.llAddr : undefined;
            resourceInputs["logicalInterfaceProfileDn"] = args ? args.logicalInterfaceProfileDn : undefined;
            resourceInputs["mac"] = args ? args.mac : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["mtu"] = args ? args.mtu : undefined;
            resourceInputs["targetDn"] = args ? args.targetDn : undefined;
            resourceInputs["targetDscp"] = args ? args.targetDscp : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(L3outPathAttachment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering L3outPathAttachment resources.
 */
export interface L3outPathAttachmentState {
    addr?: pulumi.Input<string>;
    annotation?: pulumi.Input<string>;
    autostate?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    encap?: pulumi.Input<string>;
    encapScope?: pulumi.Input<string>;
    ifInstT?: pulumi.Input<string>;
    ipv6Dad?: pulumi.Input<string>;
    llAddr?: pulumi.Input<string>;
    logicalInterfaceProfileDn?: pulumi.Input<string>;
    mac?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    mtu?: pulumi.Input<string>;
    targetDn?: pulumi.Input<string>;
    targetDscp?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a L3outPathAttachment resource.
 */
export interface L3outPathAttachmentArgs {
    addr?: pulumi.Input<string>;
    annotation?: pulumi.Input<string>;
    autostate?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    encap?: pulumi.Input<string>;
    encapScope?: pulumi.Input<string>;
    ifInstT: pulumi.Input<string>;
    ipv6Dad?: pulumi.Input<string>;
    llAddr?: pulumi.Input<string>;
    logicalInterfaceProfileDn: pulumi.Input<string>;
    mac?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    mtu?: pulumi.Input<string>;
    targetDn: pulumi.Input<string>;
    targetDscp?: pulumi.Input<string>;
}
