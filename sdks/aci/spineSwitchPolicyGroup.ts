// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SpineSwitchPolicyGroup extends pulumi.CustomResource {
    /**
     * Get an existing SpineSwitchPolicyGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SpineSwitchPolicyGroupState, opts?: pulumi.CustomResourceOptions): SpineSwitchPolicyGroup {
        return new SpineSwitchPolicyGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aci:index/spineSwitchPolicyGroup:SpineSwitchPolicyGroup';

    /**
     * Returns true if the given object is an instance of SpineSwitchPolicyGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SpineSwitchPolicyGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SpineSwitchPolicyGroup.__pulumiType;
    }

    public readonly annotation!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly nameAlias!: pulumi.Output<string>;
    /**
     * Create relation to iacl:SpineProfile
     */
    public readonly relationInfraRsIaclSpineProfile!: pulumi.Output<string | undefined>;
    /**
     * Create relation to bfd:Ipv4InstPol
     */
    public readonly relationInfraRsSpineBfdIpv4InstPol!: pulumi.Output<string | undefined>;
    /**
     * Create relation to bfd:Ipv6InstPol
     */
    public readonly relationInfraRsSpineBfdIpv6InstPol!: pulumi.Output<string | undefined>;
    /**
     * Create relation to copp:SpineProfile
     */
    public readonly relationInfraRsSpineCoppProfile!: pulumi.Output<string | undefined>;
    /**
     * Create relation to cdp:IfPol
     */
    public readonly relationInfraRsSpinePGrpToCdpIfPol!: pulumi.Output<string | undefined>;
    /**
     * Create relation to lldp:IfPol
     */
    public readonly relationInfraRsSpinePGrpToLldpIfPol!: pulumi.Output<string | undefined>;

    /**
     * Create a SpineSwitchPolicyGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SpineSwitchPolicyGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SpineSwitchPolicyGroupArgs | SpineSwitchPolicyGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SpineSwitchPolicyGroupState | undefined;
            resourceInputs["annotation"] = state ? state.annotation : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nameAlias"] = state ? state.nameAlias : undefined;
            resourceInputs["relationInfraRsIaclSpineProfile"] = state ? state.relationInfraRsIaclSpineProfile : undefined;
            resourceInputs["relationInfraRsSpineBfdIpv4InstPol"] = state ? state.relationInfraRsSpineBfdIpv4InstPol : undefined;
            resourceInputs["relationInfraRsSpineBfdIpv6InstPol"] = state ? state.relationInfraRsSpineBfdIpv6InstPol : undefined;
            resourceInputs["relationInfraRsSpineCoppProfile"] = state ? state.relationInfraRsSpineCoppProfile : undefined;
            resourceInputs["relationInfraRsSpinePGrpToCdpIfPol"] = state ? state.relationInfraRsSpinePGrpToCdpIfPol : undefined;
            resourceInputs["relationInfraRsSpinePGrpToLldpIfPol"] = state ? state.relationInfraRsSpinePGrpToLldpIfPol : undefined;
        } else {
            const args = argsOrState as SpineSwitchPolicyGroupArgs | undefined;
            resourceInputs["annotation"] = args ? args.annotation : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nameAlias"] = args ? args.nameAlias : undefined;
            resourceInputs["relationInfraRsIaclSpineProfile"] = args ? args.relationInfraRsIaclSpineProfile : undefined;
            resourceInputs["relationInfraRsSpineBfdIpv4InstPol"] = args ? args.relationInfraRsSpineBfdIpv4InstPol : undefined;
            resourceInputs["relationInfraRsSpineBfdIpv6InstPol"] = args ? args.relationInfraRsSpineBfdIpv6InstPol : undefined;
            resourceInputs["relationInfraRsSpineCoppProfile"] = args ? args.relationInfraRsSpineCoppProfile : undefined;
            resourceInputs["relationInfraRsSpinePGrpToCdpIfPol"] = args ? args.relationInfraRsSpinePGrpToCdpIfPol : undefined;
            resourceInputs["relationInfraRsSpinePGrpToLldpIfPol"] = args ? args.relationInfraRsSpinePGrpToLldpIfPol : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SpineSwitchPolicyGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SpineSwitchPolicyGroup resources.
 */
export interface SpineSwitchPolicyGroupState {
    annotation?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    /**
     * Create relation to iacl:SpineProfile
     */
    relationInfraRsIaclSpineProfile?: pulumi.Input<string>;
    /**
     * Create relation to bfd:Ipv4InstPol
     */
    relationInfraRsSpineBfdIpv4InstPol?: pulumi.Input<string>;
    /**
     * Create relation to bfd:Ipv6InstPol
     */
    relationInfraRsSpineBfdIpv6InstPol?: pulumi.Input<string>;
    /**
     * Create relation to copp:SpineProfile
     */
    relationInfraRsSpineCoppProfile?: pulumi.Input<string>;
    /**
     * Create relation to cdp:IfPol
     */
    relationInfraRsSpinePGrpToCdpIfPol?: pulumi.Input<string>;
    /**
     * Create relation to lldp:IfPol
     */
    relationInfraRsSpinePGrpToLldpIfPol?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SpineSwitchPolicyGroup resource.
 */
export interface SpineSwitchPolicyGroupArgs {
    annotation?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    /**
     * Create relation to iacl:SpineProfile
     */
    relationInfraRsIaclSpineProfile?: pulumi.Input<string>;
    /**
     * Create relation to bfd:Ipv4InstPol
     */
    relationInfraRsSpineBfdIpv4InstPol?: pulumi.Input<string>;
    /**
     * Create relation to bfd:Ipv6InstPol
     */
    relationInfraRsSpineBfdIpv6InstPol?: pulumi.Input<string>;
    /**
     * Create relation to copp:SpineProfile
     */
    relationInfraRsSpineCoppProfile?: pulumi.Input<string>;
    /**
     * Create relation to cdp:IfPol
     */
    relationInfraRsSpinePGrpToCdpIfPol?: pulumi.Input<string>;
    /**
     * Create relation to lldp:IfPol
     */
    relationInfraRsSpinePGrpToLldpIfPol?: pulumi.Input<string>;
}
