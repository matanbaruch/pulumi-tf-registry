// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class FabricNodeMember extends pulumi.CustomResource {
    /**
     * Get an existing FabricNodeMember resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FabricNodeMemberState, opts?: pulumi.CustomResourceOptions): FabricNodeMember {
        return new FabricNodeMember(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aci:index/fabricNodeMember:FabricNodeMember';

    /**
     * Returns true if the given object is an instance of FabricNodeMember.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FabricNodeMember {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FabricNodeMember.__pulumiType;
    }

    public readonly annotation!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly extPoolId!: pulumi.Output<string>;
    public readonly fabricId!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly nameAlias!: pulumi.Output<string>;
    public readonly nodeId!: pulumi.Output<string>;
    public readonly nodeType!: pulumi.Output<string>;
    public readonly podId!: pulumi.Output<string>;
    public readonly role!: pulumi.Output<string>;
    public readonly serial!: pulumi.Output<string>;

    /**
     * Create a FabricNodeMember resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FabricNodeMemberArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FabricNodeMemberArgs | FabricNodeMemberState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FabricNodeMemberState | undefined;
            resourceInputs["annotation"] = state ? state.annotation : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["extPoolId"] = state ? state.extPoolId : undefined;
            resourceInputs["fabricId"] = state ? state.fabricId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nameAlias"] = state ? state.nameAlias : undefined;
            resourceInputs["nodeId"] = state ? state.nodeId : undefined;
            resourceInputs["nodeType"] = state ? state.nodeType : undefined;
            resourceInputs["podId"] = state ? state.podId : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["serial"] = state ? state.serial : undefined;
        } else {
            const args = argsOrState as FabricNodeMemberArgs | undefined;
            if ((!args || args.serial === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serial'");
            }
            resourceInputs["annotation"] = args ? args.annotation : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["extPoolId"] = args ? args.extPoolId : undefined;
            resourceInputs["fabricId"] = args ? args.fabricId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nameAlias"] = args ? args.nameAlias : undefined;
            resourceInputs["nodeId"] = args ? args.nodeId : undefined;
            resourceInputs["nodeType"] = args ? args.nodeType : undefined;
            resourceInputs["podId"] = args ? args.podId : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["serial"] = args ? args.serial : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FabricNodeMember.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FabricNodeMember resources.
 */
export interface FabricNodeMemberState {
    annotation?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    extPoolId?: pulumi.Input<string>;
    fabricId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    nodeId?: pulumi.Input<string>;
    nodeType?: pulumi.Input<string>;
    podId?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    serial?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FabricNodeMember resource.
 */
export interface FabricNodeMemberArgs {
    annotation?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    extPoolId?: pulumi.Input<string>;
    fabricId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    nodeId?: pulumi.Input<string>;
    nodeType?: pulumi.Input<string>;
    podId?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    serial: pulumi.Input<string>;
}
