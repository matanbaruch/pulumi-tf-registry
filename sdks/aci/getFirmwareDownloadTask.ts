// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getFirmwareDownloadTask(args: GetFirmwareDownloadTaskArgs, opts?: pulumi.InvokeOptions): Promise<GetFirmwareDownloadTaskResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aci:index/getFirmwareDownloadTask:getFirmwareDownloadTask", {
        "annotation": args.annotation,
        "authPass": args.authPass,
        "authType": args.authType,
        "description": args.description,
        "dnldTaskFlip": args.dnldTaskFlip,
        "id": args.id,
        "identityPrivateKeyContents": args.identityPrivateKeyContents,
        "identityPrivateKeyPassphrase": args.identityPrivateKeyPassphrase,
        "identityPublicKeyContents": args.identityPublicKeyContents,
        "loadCatalogIfExistsAndNewer": args.loadCatalogIfExistsAndNewer,
        "name": args.name,
        "nameAlias": args.nameAlias,
        "password": args.password,
        "pollingInterval": args.pollingInterval,
        "proto": args.proto,
        "url": args.url,
        "user": args.user,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getFirmwareDownloadTask.
 */
export interface GetFirmwareDownloadTaskArgs {
    annotation?: string;
    authPass?: string;
    authType?: string;
    description?: string;
    dnldTaskFlip?: string;
    id?: string;
    identityPrivateKeyContents?: string;
    identityPrivateKeyPassphrase?: string;
    identityPublicKeyContents?: string;
    loadCatalogIfExistsAndNewer?: string;
    name: string;
    nameAlias?: string;
    password?: string;
    pollingInterval?: string;
    proto?: string;
    url?: string;
    user?: string;
}

/**
 * A collection of values returned by getFirmwareDownloadTask.
 */
export interface GetFirmwareDownloadTaskResult {
    readonly annotation: string;
    readonly authPass: string;
    readonly authType: string;
    readonly description: string;
    readonly dnldTaskFlip: string;
    readonly id: string;
    readonly identityPrivateKeyContents: string;
    readonly identityPrivateKeyPassphrase: string;
    readonly identityPublicKeyContents: string;
    readonly loadCatalogIfExistsAndNewer: string;
    readonly name: string;
    readonly nameAlias: string;
    readonly password: string;
    readonly pollingInterval: string;
    readonly proto: string;
    readonly url: string;
    readonly user: string;
}
export function getFirmwareDownloadTaskOutput(args: GetFirmwareDownloadTaskOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFirmwareDownloadTaskResult> {
    return pulumi.output(args).apply((a: any) => getFirmwareDownloadTask(a, opts))
}

/**
 * A collection of arguments for invoking getFirmwareDownloadTask.
 */
export interface GetFirmwareDownloadTaskOutputArgs {
    annotation?: pulumi.Input<string>;
    authPass?: pulumi.Input<string>;
    authType?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dnldTaskFlip?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    identityPrivateKeyContents?: pulumi.Input<string>;
    identityPrivateKeyPassphrase?: pulumi.Input<string>;
    identityPublicKeyContents?: pulumi.Input<string>;
    loadCatalogIfExistsAndNewer?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    pollingInterval?: pulumi.Input<string>;
    proto?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
    user?: pulumi.Input<string>;
}
