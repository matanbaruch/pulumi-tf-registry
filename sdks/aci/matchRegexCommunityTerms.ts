// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class MatchRegexCommunityTerms extends pulumi.CustomResource {
    /**
     * Get an existing MatchRegexCommunityTerms resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MatchRegexCommunityTermsState, opts?: pulumi.CustomResourceOptions): MatchRegexCommunityTerms {
        return new MatchRegexCommunityTerms(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aci:index/matchRegexCommunityTerms:MatchRegexCommunityTerms';

    /**
     * Returns true if the given object is an instance of MatchRegexCommunityTerms.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MatchRegexCommunityTerms {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MatchRegexCommunityTerms.__pulumiType;
    }

    public readonly annotation!: pulumi.Output<string>;
    public readonly communityType!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly matchRuleDn!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly nameAlias!: pulumi.Output<string>;
    public readonly regex!: pulumi.Output<string>;

    /**
     * Create a MatchRegexCommunityTerms resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MatchRegexCommunityTermsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MatchRegexCommunityTermsArgs | MatchRegexCommunityTermsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MatchRegexCommunityTermsState | undefined;
            resourceInputs["annotation"] = state ? state.annotation : undefined;
            resourceInputs["communityType"] = state ? state.communityType : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["matchRuleDn"] = state ? state.matchRuleDn : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nameAlias"] = state ? state.nameAlias : undefined;
            resourceInputs["regex"] = state ? state.regex : undefined;
        } else {
            const args = argsOrState as MatchRegexCommunityTermsArgs | undefined;
            if ((!args || args.communityType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'communityType'");
            }
            if ((!args || args.matchRuleDn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'matchRuleDn'");
            }
            resourceInputs["annotation"] = args ? args.annotation : undefined;
            resourceInputs["communityType"] = args ? args.communityType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["matchRuleDn"] = args ? args.matchRuleDn : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nameAlias"] = args ? args.nameAlias : undefined;
            resourceInputs["regex"] = args ? args.regex : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MatchRegexCommunityTerms.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MatchRegexCommunityTerms resources.
 */
export interface MatchRegexCommunityTermsState {
    annotation?: pulumi.Input<string>;
    communityType?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    matchRuleDn?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    regex?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MatchRegexCommunityTerms resource.
 */
export interface MatchRegexCommunityTermsArgs {
    annotation?: pulumi.Input<string>;
    communityType: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    matchRuleDn: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    regex?: pulumi.Input<string>;
}
