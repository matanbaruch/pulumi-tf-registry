// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getSpineInterfaceProfileSelector(args: GetSpineInterfaceProfileSelectorArgs, opts?: pulumi.InvokeOptions): Promise<GetSpineInterfaceProfileSelectorResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aci:index/getSpineInterfaceProfileSelector:getSpineInterfaceProfileSelector", {
        "annotation": args.annotation,
        "id": args.id,
        "spineProfileDn": args.spineProfileDn,
        "tdn": args.tdn,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSpineInterfaceProfileSelector.
 */
export interface GetSpineInterfaceProfileSelectorArgs {
    annotation?: string;
    id?: string;
    spineProfileDn: string;
    tdn: string;
}

/**
 * A collection of values returned by getSpineInterfaceProfileSelector.
 */
export interface GetSpineInterfaceProfileSelectorResult {
    readonly annotation: string;
    readonly id: string;
    readonly spineProfileDn: string;
    readonly tdn: string;
}
export function getSpineInterfaceProfileSelectorOutput(args: GetSpineInterfaceProfileSelectorOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSpineInterfaceProfileSelectorResult> {
    return pulumi.output(args).apply((a: any) => getSpineInterfaceProfileSelector(a, opts))
}

/**
 * A collection of arguments for invoking getSpineInterfaceProfileSelector.
 */
export interface GetSpineInterfaceProfileSelectorOutputArgs {
    annotation?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    spineProfileDn: pulumi.Input<string>;
    tdn: pulumi.Input<string>;
}
