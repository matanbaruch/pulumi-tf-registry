// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class OspfTimers extends pulumi.CustomResource {
    /**
     * Get an existing OspfTimers resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OspfTimersState, opts?: pulumi.CustomResourceOptions): OspfTimers {
        return new OspfTimers(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aci:index/ospfTimers:OspfTimers';

    /**
     * Returns true if the given object is an instance of OspfTimers.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OspfTimers {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OspfTimers.__pulumiType;
    }

    public readonly annotation!: pulumi.Output<string>;
    public readonly bwRef!: pulumi.Output<string>;
    public readonly ctrls!: pulumi.Output<string[] | undefined>;
    public readonly description!: pulumi.Output<string>;
    public readonly dist!: pulumi.Output<string>;
    public readonly grCtrl!: pulumi.Output<string | undefined>;
    public readonly lsaArrivalIntvl!: pulumi.Output<string>;
    public readonly lsaGpPacingIntvl!: pulumi.Output<string>;
    public readonly lsaHoldIntvl!: pulumi.Output<string>;
    public readonly lsaMaxIntvl!: pulumi.Output<string>;
    public readonly lsaStartIntvl!: pulumi.Output<string>;
    public readonly maxEcmp!: pulumi.Output<string>;
    public readonly maxLsaAction!: pulumi.Output<string>;
    public readonly maxLsaNum!: pulumi.Output<string>;
    public readonly maxLsaResetIntvl!: pulumi.Output<string>;
    public readonly maxLsaSleepCnt!: pulumi.Output<string>;
    public readonly maxLsaSleepIntvl!: pulumi.Output<string>;
    public readonly maxLsaThresh!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly nameAlias!: pulumi.Output<string>;
    public readonly spfHoldIntvl!: pulumi.Output<string>;
    public readonly spfInitIntvl!: pulumi.Output<string>;
    public readonly spfMaxIntvl!: pulumi.Output<string>;
    public readonly tenantDn!: pulumi.Output<string>;

    /**
     * Create a OspfTimers resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OspfTimersArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OspfTimersArgs | OspfTimersState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OspfTimersState | undefined;
            resourceInputs["annotation"] = state ? state.annotation : undefined;
            resourceInputs["bwRef"] = state ? state.bwRef : undefined;
            resourceInputs["ctrls"] = state ? state.ctrls : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dist"] = state ? state.dist : undefined;
            resourceInputs["grCtrl"] = state ? state.grCtrl : undefined;
            resourceInputs["lsaArrivalIntvl"] = state ? state.lsaArrivalIntvl : undefined;
            resourceInputs["lsaGpPacingIntvl"] = state ? state.lsaGpPacingIntvl : undefined;
            resourceInputs["lsaHoldIntvl"] = state ? state.lsaHoldIntvl : undefined;
            resourceInputs["lsaMaxIntvl"] = state ? state.lsaMaxIntvl : undefined;
            resourceInputs["lsaStartIntvl"] = state ? state.lsaStartIntvl : undefined;
            resourceInputs["maxEcmp"] = state ? state.maxEcmp : undefined;
            resourceInputs["maxLsaAction"] = state ? state.maxLsaAction : undefined;
            resourceInputs["maxLsaNum"] = state ? state.maxLsaNum : undefined;
            resourceInputs["maxLsaResetIntvl"] = state ? state.maxLsaResetIntvl : undefined;
            resourceInputs["maxLsaSleepCnt"] = state ? state.maxLsaSleepCnt : undefined;
            resourceInputs["maxLsaSleepIntvl"] = state ? state.maxLsaSleepIntvl : undefined;
            resourceInputs["maxLsaThresh"] = state ? state.maxLsaThresh : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nameAlias"] = state ? state.nameAlias : undefined;
            resourceInputs["spfHoldIntvl"] = state ? state.spfHoldIntvl : undefined;
            resourceInputs["spfInitIntvl"] = state ? state.spfInitIntvl : undefined;
            resourceInputs["spfMaxIntvl"] = state ? state.spfMaxIntvl : undefined;
            resourceInputs["tenantDn"] = state ? state.tenantDn : undefined;
        } else {
            const args = argsOrState as OspfTimersArgs | undefined;
            if ((!args || args.tenantDn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantDn'");
            }
            resourceInputs["annotation"] = args ? args.annotation : undefined;
            resourceInputs["bwRef"] = args ? args.bwRef : undefined;
            resourceInputs["ctrls"] = args ? args.ctrls : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dist"] = args ? args.dist : undefined;
            resourceInputs["grCtrl"] = args ? args.grCtrl : undefined;
            resourceInputs["lsaArrivalIntvl"] = args ? args.lsaArrivalIntvl : undefined;
            resourceInputs["lsaGpPacingIntvl"] = args ? args.lsaGpPacingIntvl : undefined;
            resourceInputs["lsaHoldIntvl"] = args ? args.lsaHoldIntvl : undefined;
            resourceInputs["lsaMaxIntvl"] = args ? args.lsaMaxIntvl : undefined;
            resourceInputs["lsaStartIntvl"] = args ? args.lsaStartIntvl : undefined;
            resourceInputs["maxEcmp"] = args ? args.maxEcmp : undefined;
            resourceInputs["maxLsaAction"] = args ? args.maxLsaAction : undefined;
            resourceInputs["maxLsaNum"] = args ? args.maxLsaNum : undefined;
            resourceInputs["maxLsaResetIntvl"] = args ? args.maxLsaResetIntvl : undefined;
            resourceInputs["maxLsaSleepCnt"] = args ? args.maxLsaSleepCnt : undefined;
            resourceInputs["maxLsaSleepIntvl"] = args ? args.maxLsaSleepIntvl : undefined;
            resourceInputs["maxLsaThresh"] = args ? args.maxLsaThresh : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nameAlias"] = args ? args.nameAlias : undefined;
            resourceInputs["spfHoldIntvl"] = args ? args.spfHoldIntvl : undefined;
            resourceInputs["spfInitIntvl"] = args ? args.spfInitIntvl : undefined;
            resourceInputs["spfMaxIntvl"] = args ? args.spfMaxIntvl : undefined;
            resourceInputs["tenantDn"] = args ? args.tenantDn : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OspfTimers.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OspfTimers resources.
 */
export interface OspfTimersState {
    annotation?: pulumi.Input<string>;
    bwRef?: pulumi.Input<string>;
    ctrls?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    dist?: pulumi.Input<string>;
    grCtrl?: pulumi.Input<string>;
    lsaArrivalIntvl?: pulumi.Input<string>;
    lsaGpPacingIntvl?: pulumi.Input<string>;
    lsaHoldIntvl?: pulumi.Input<string>;
    lsaMaxIntvl?: pulumi.Input<string>;
    lsaStartIntvl?: pulumi.Input<string>;
    maxEcmp?: pulumi.Input<string>;
    maxLsaAction?: pulumi.Input<string>;
    maxLsaNum?: pulumi.Input<string>;
    maxLsaResetIntvl?: pulumi.Input<string>;
    maxLsaSleepCnt?: pulumi.Input<string>;
    maxLsaSleepIntvl?: pulumi.Input<string>;
    maxLsaThresh?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    spfHoldIntvl?: pulumi.Input<string>;
    spfInitIntvl?: pulumi.Input<string>;
    spfMaxIntvl?: pulumi.Input<string>;
    tenantDn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OspfTimers resource.
 */
export interface OspfTimersArgs {
    annotation?: pulumi.Input<string>;
    bwRef?: pulumi.Input<string>;
    ctrls?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    dist?: pulumi.Input<string>;
    grCtrl?: pulumi.Input<string>;
    lsaArrivalIntvl?: pulumi.Input<string>;
    lsaGpPacingIntvl?: pulumi.Input<string>;
    lsaHoldIntvl?: pulumi.Input<string>;
    lsaMaxIntvl?: pulumi.Input<string>;
    lsaStartIntvl?: pulumi.Input<string>;
    maxEcmp?: pulumi.Input<string>;
    maxLsaAction?: pulumi.Input<string>;
    maxLsaNum?: pulumi.Input<string>;
    maxLsaResetIntvl?: pulumi.Input<string>;
    maxLsaSleepCnt?: pulumi.Input<string>;
    maxLsaSleepIntvl?: pulumi.Input<string>;
    maxLsaThresh?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    spfHoldIntvl?: pulumi.Input<string>;
    spfInitIntvl?: pulumi.Input<string>;
    spfMaxIntvl?: pulumi.Input<string>;
    tenantDn: pulumi.Input<string>;
}
