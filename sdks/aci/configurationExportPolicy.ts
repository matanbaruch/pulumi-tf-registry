// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ConfigurationExportPolicy extends pulumi.CustomResource {
    /**
     * Get an existing ConfigurationExportPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConfigurationExportPolicyState, opts?: pulumi.CustomResourceOptions): ConfigurationExportPolicy {
        return new ConfigurationExportPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aci:index/configurationExportPolicy:ConfigurationExportPolicy';

    /**
     * Returns true if the given object is an instance of ConfigurationExportPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConfigurationExportPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConfigurationExportPolicy.__pulumiType;
    }

    public readonly adminSt!: pulumi.Output<string>;
    public readonly annotation!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly format!: pulumi.Output<string>;
    public readonly includeSecureFields!: pulumi.Output<string>;
    public readonly maxSnapshotCount!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly nameAlias!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly relationConfigRsExportDestination!: pulumi.Output<string | undefined>;
    public readonly relationConfigRsExportScheduler!: pulumi.Output<string | undefined>;
    public readonly relationConfigRsRemotePath!: pulumi.Output<string | undefined>;
    public readonly relationTrigRsTriggerable!: pulumi.Output<string | undefined>;
    public readonly snapshot!: pulumi.Output<string>;
    public readonly targetDn!: pulumi.Output<string>;

    /**
     * Create a ConfigurationExportPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ConfigurationExportPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConfigurationExportPolicyArgs | ConfigurationExportPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConfigurationExportPolicyState | undefined;
            resourceInputs["adminSt"] = state ? state.adminSt : undefined;
            resourceInputs["annotation"] = state ? state.annotation : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["format"] = state ? state.format : undefined;
            resourceInputs["includeSecureFields"] = state ? state.includeSecureFields : undefined;
            resourceInputs["maxSnapshotCount"] = state ? state.maxSnapshotCount : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nameAlias"] = state ? state.nameAlias : undefined;
            resourceInputs["relationConfigRsExportDestination"] = state ? state.relationConfigRsExportDestination : undefined;
            resourceInputs["relationConfigRsExportScheduler"] = state ? state.relationConfigRsExportScheduler : undefined;
            resourceInputs["relationConfigRsRemotePath"] = state ? state.relationConfigRsRemotePath : undefined;
            resourceInputs["relationTrigRsTriggerable"] = state ? state.relationTrigRsTriggerable : undefined;
            resourceInputs["snapshot"] = state ? state.snapshot : undefined;
            resourceInputs["targetDn"] = state ? state.targetDn : undefined;
        } else {
            const args = argsOrState as ConfigurationExportPolicyArgs | undefined;
            resourceInputs["adminSt"] = args ? args.adminSt : undefined;
            resourceInputs["annotation"] = args ? args.annotation : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["format"] = args ? args.format : undefined;
            resourceInputs["includeSecureFields"] = args ? args.includeSecureFields : undefined;
            resourceInputs["maxSnapshotCount"] = args ? args.maxSnapshotCount : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nameAlias"] = args ? args.nameAlias : undefined;
            resourceInputs["relationConfigRsExportDestination"] = args ? args.relationConfigRsExportDestination : undefined;
            resourceInputs["relationConfigRsExportScheduler"] = args ? args.relationConfigRsExportScheduler : undefined;
            resourceInputs["relationConfigRsRemotePath"] = args ? args.relationConfigRsRemotePath : undefined;
            resourceInputs["relationTrigRsTriggerable"] = args ? args.relationTrigRsTriggerable : undefined;
            resourceInputs["snapshot"] = args ? args.snapshot : undefined;
            resourceInputs["targetDn"] = args ? args.targetDn : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConfigurationExportPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ConfigurationExportPolicy resources.
 */
export interface ConfigurationExportPolicyState {
    adminSt?: pulumi.Input<string>;
    annotation?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    includeSecureFields?: pulumi.Input<string>;
    maxSnapshotCount?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    relationConfigRsExportDestination?: pulumi.Input<string>;
    relationConfigRsExportScheduler?: pulumi.Input<string>;
    relationConfigRsRemotePath?: pulumi.Input<string>;
    relationTrigRsTriggerable?: pulumi.Input<string>;
    snapshot?: pulumi.Input<string>;
    targetDn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ConfigurationExportPolicy resource.
 */
export interface ConfigurationExportPolicyArgs {
    adminSt?: pulumi.Input<string>;
    annotation?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    includeSecureFields?: pulumi.Input<string>;
    maxSnapshotCount?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    relationConfigRsExportDestination?: pulumi.Input<string>;
    relationConfigRsExportScheduler?: pulumi.Input<string>;
    relationConfigRsRemotePath?: pulumi.Input<string>;
    relationTrigRsTriggerable?: pulumi.Input<string>;
    snapshot?: pulumi.Input<string>;
    targetDn?: pulumi.Input<string>;
}
