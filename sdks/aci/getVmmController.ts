// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getVmmController(args: GetVmmControllerArgs, opts?: pulumi.InvokeOptions): Promise<GetVmmControllerResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aci:index/getVmmController:getVmmController", {
        "annotation": args.annotation,
        "description": args.description,
        "dvsVersion": args.dvsVersion,
        "hostOrIp": args.hostOrIp,
        "id": args.id,
        "inventoryTrigSt": args.inventoryTrigSt,
        "mode": args.mode,
        "msftConfigErrMsg": args.msftConfigErrMsg,
        "msftConfigIssues": args.msftConfigIssues,
        "n1kvStatsMode": args.n1kvStatsMode,
        "name": args.name,
        "nameAlias": args.nameAlias,
        "port": args.port,
        "rootContName": args.rootContName,
        "scope": args.scope,
        "seqNum": args.seqNum,
        "statsMode": args.statsMode,
        "vmmDomainDn": args.vmmDomainDn,
        "vxlanDeplPref": args.vxlanDeplPref,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVmmController.
 */
export interface GetVmmControllerArgs {
    annotation?: string;
    description?: string;
    dvsVersion?: string;
    hostOrIp?: string;
    id?: string;
    inventoryTrigSt?: string;
    mode?: string;
    msftConfigErrMsg?: string;
    msftConfigIssues?: string[];
    n1kvStatsMode?: string;
    name: string;
    nameAlias?: string;
    port?: string;
    rootContName?: string;
    scope?: string;
    seqNum?: string;
    statsMode?: string;
    vmmDomainDn: string;
    vxlanDeplPref?: string;
}

/**
 * A collection of values returned by getVmmController.
 */
export interface GetVmmControllerResult {
    readonly annotation: string;
    readonly description: string;
    readonly dvsVersion: string;
    readonly hostOrIp: string;
    readonly id: string;
    readonly inventoryTrigSt: string;
    readonly mode: string;
    readonly msftConfigErrMsg: string;
    readonly msftConfigIssues: string[];
    readonly n1kvStatsMode: string;
    readonly name: string;
    readonly nameAlias: string;
    readonly port: string;
    readonly rootContName: string;
    readonly scope: string;
    readonly seqNum: string;
    readonly statsMode: string;
    readonly vmmDomainDn: string;
    readonly vxlanDeplPref: string;
}
export function getVmmControllerOutput(args: GetVmmControllerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVmmControllerResult> {
    return pulumi.output(args).apply((a: any) => getVmmController(a, opts))
}

/**
 * A collection of arguments for invoking getVmmController.
 */
export interface GetVmmControllerOutputArgs {
    annotation?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dvsVersion?: pulumi.Input<string>;
    hostOrIp?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    inventoryTrigSt?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    msftConfigErrMsg?: pulumi.Input<string>;
    msftConfigIssues?: pulumi.Input<pulumi.Input<string>[]>;
    n1kvStatsMode?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    rootContName?: pulumi.Input<string>;
    scope?: pulumi.Input<string>;
    seqNum?: pulumi.Input<string>;
    statsMode?: pulumi.Input<string>;
    vmmDomainDn: pulumi.Input<string>;
    vxlanDeplPref?: pulumi.Input<string>;
}
