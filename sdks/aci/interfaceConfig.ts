// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class InterfaceConfig extends pulumi.CustomResource {
    /**
     * Get an existing InterfaceConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InterfaceConfigState, opts?: pulumi.CustomResourceOptions): InterfaceConfig {
        return new InterfaceConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aci:index/interfaceConfig:InterfaceConfig';

    /**
     * Returns true if the given object is an instance of InterfaceConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InterfaceConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InterfaceConfig.__pulumiType;
    }

    public readonly adminState!: pulumi.Output<string>;
    public readonly annotation!: pulumi.Output<string>;
    public readonly breakout!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string>;
    public readonly interface!: pulumi.Output<string>;
    public readonly nameAlias!: pulumi.Output<string>;
    public readonly node!: pulumi.Output<number>;
    public /*out*/ readonly operationalAssociatedGroup!: pulumi.Output<string>;
    public /*out*/ readonly operationalAssociatedSubGroup!: pulumi.Output<string>;
    public readonly pcMember!: pulumi.Output<string | undefined>;
    public /*out*/ readonly pcPortDn!: pulumi.Output<string>;
    public readonly policyGroup!: pulumi.Output<string | undefined>;
    public /*out*/ readonly portDn!: pulumi.Output<string>;
    public readonly portType!: pulumi.Output<string | undefined>;
    public readonly role!: pulumi.Output<string>;

    /**
     * Create a InterfaceConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InterfaceConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InterfaceConfigArgs | InterfaceConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InterfaceConfigState | undefined;
            resourceInputs["adminState"] = state ? state.adminState : undefined;
            resourceInputs["annotation"] = state ? state.annotation : undefined;
            resourceInputs["breakout"] = state ? state.breakout : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["interface"] = state ? state.interface : undefined;
            resourceInputs["nameAlias"] = state ? state.nameAlias : undefined;
            resourceInputs["node"] = state ? state.node : undefined;
            resourceInputs["operationalAssociatedGroup"] = state ? state.operationalAssociatedGroup : undefined;
            resourceInputs["operationalAssociatedSubGroup"] = state ? state.operationalAssociatedSubGroup : undefined;
            resourceInputs["pcMember"] = state ? state.pcMember : undefined;
            resourceInputs["pcPortDn"] = state ? state.pcPortDn : undefined;
            resourceInputs["policyGroup"] = state ? state.policyGroup : undefined;
            resourceInputs["portDn"] = state ? state.portDn : undefined;
            resourceInputs["portType"] = state ? state.portType : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
        } else {
            const args = argsOrState as InterfaceConfigArgs | undefined;
            if ((!args || args.interface === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interface'");
            }
            if ((!args || args.node === undefined) && !opts.urn) {
                throw new Error("Missing required property 'node'");
            }
            resourceInputs["adminState"] = args ? args.adminState : undefined;
            resourceInputs["annotation"] = args ? args.annotation : undefined;
            resourceInputs["breakout"] = args ? args.breakout : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["interface"] = args ? args.interface : undefined;
            resourceInputs["nameAlias"] = args ? args.nameAlias : undefined;
            resourceInputs["node"] = args ? args.node : undefined;
            resourceInputs["pcMember"] = args ? args.pcMember : undefined;
            resourceInputs["policyGroup"] = args ? args.policyGroup : undefined;
            resourceInputs["portType"] = args ? args.portType : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["operationalAssociatedGroup"] = undefined /*out*/;
            resourceInputs["operationalAssociatedSubGroup"] = undefined /*out*/;
            resourceInputs["pcPortDn"] = undefined /*out*/;
            resourceInputs["portDn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InterfaceConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering InterfaceConfig resources.
 */
export interface InterfaceConfigState {
    adminState?: pulumi.Input<string>;
    annotation?: pulumi.Input<string>;
    breakout?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    interface?: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    node?: pulumi.Input<number>;
    operationalAssociatedGroup?: pulumi.Input<string>;
    operationalAssociatedSubGroup?: pulumi.Input<string>;
    pcMember?: pulumi.Input<string>;
    pcPortDn?: pulumi.Input<string>;
    policyGroup?: pulumi.Input<string>;
    portDn?: pulumi.Input<string>;
    portType?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InterfaceConfig resource.
 */
export interface InterfaceConfigArgs {
    adminState?: pulumi.Input<string>;
    annotation?: pulumi.Input<string>;
    breakout?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    interface: pulumi.Input<string>;
    nameAlias?: pulumi.Input<string>;
    node: pulumi.Input<number>;
    pcMember?: pulumi.Input<string>;
    policyGroup?: pulumi.Input<string>;
    portType?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
}
