// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Credential extends pulumi.CustomResource {
    /**
     * Get an existing Credential resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CredentialState, opts?: pulumi.CustomResourceOptions): Credential {
        return new Credential(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'venafi-token:index/credential:Credential';

    /**
     * Returns true if the given object is an instance of Credential.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Credential {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Credential.__pulumiType;
    }

    /**
     * Access token used for authorization to TLSPDC
     */
    public /*out*/ readonly accessToken!: pulumi.Output<string>;
    /**
     * Application that will be using the token
     */
    public readonly clientId!: pulumi.Output<string>;
    /**
     * Expiration date of the access token
     */
    public readonly expiration!: pulumi.Output<number>;
    /**
     * base64-encoded PKCS#12 keystore containing a vcert certificate, private key, and chain certificates to authenticate to
     * TLSPDC
     */
    public readonly p12CertFilename!: pulumi.Output<string>;
    /**
     * Password for the PKCS#12 keystore declared in p12_cert
     */
    public readonly p12CertPassword!: pulumi.Output<string>;
    /**
     * Password to authenticate to TLSPDC and request a new token
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * Token used to request a new token pair (access/refresh token) from a TLSPDC instance
     */
    public readonly refreshToken!: pulumi.Output<string>;
    /**
     * number of days before expiration where a token refresh should be done
     */
    public readonly refreshWindow!: pulumi.Output<number>;
    /**
     * Use to specify a base64-encoded, PEM-formatted file that contains certificates to be trust anchors for all
     * communications with the Venafi TLSPDC instance
     */
    public readonly trustBundle!: pulumi.Output<string>;
    /**
     * The Venafi TLSPDC URL. Example: https://tpp.venafi.example/vedsdk
     */
    public readonly url!: pulumi.Output<string>;
    /**
     * Username to authenticate to TLSPDC and request a new token
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a Credential resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CredentialArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CredentialArgs | CredentialState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CredentialState | undefined;
            resourceInputs["accessToken"] = state ? state.accessToken : undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["expiration"] = state ? state.expiration : undefined;
            resourceInputs["p12CertFilename"] = state ? state.p12CertFilename : undefined;
            resourceInputs["p12CertPassword"] = state ? state.p12CertPassword : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["refreshToken"] = state ? state.refreshToken : undefined;
            resourceInputs["refreshWindow"] = state ? state.refreshWindow : undefined;
            resourceInputs["trustBundle"] = state ? state.trustBundle : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as CredentialArgs | undefined;
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["expiration"] = args ? args.expiration : undefined;
            resourceInputs["p12CertFilename"] = args ? args.p12CertFilename : undefined;
            resourceInputs["p12CertPassword"] = args?.p12CertPassword ? pulumi.secret(args.p12CertPassword) : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["refreshToken"] = args?.refreshToken ? pulumi.secret(args.refreshToken) : undefined;
            resourceInputs["refreshWindow"] = args ? args.refreshWindow : undefined;
            resourceInputs["trustBundle"] = args ? args.trustBundle : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["accessToken"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["accessToken", "p12CertPassword", "password", "refreshToken"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Credential.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Credential resources.
 */
export interface CredentialState {
    /**
     * Access token used for authorization to TLSPDC
     */
    accessToken?: pulumi.Input<string>;
    /**
     * Application that will be using the token
     */
    clientId?: pulumi.Input<string>;
    /**
     * Expiration date of the access token
     */
    expiration?: pulumi.Input<number>;
    /**
     * base64-encoded PKCS#12 keystore containing a vcert certificate, private key, and chain certificates to authenticate to
     * TLSPDC
     */
    p12CertFilename?: pulumi.Input<string>;
    /**
     * Password for the PKCS#12 keystore declared in p12_cert
     */
    p12CertPassword?: pulumi.Input<string>;
    /**
     * Password to authenticate to TLSPDC and request a new token
     */
    password?: pulumi.Input<string>;
    /**
     * Token used to request a new token pair (access/refresh token) from a TLSPDC instance
     */
    refreshToken?: pulumi.Input<string>;
    /**
     * number of days before expiration where a token refresh should be done
     */
    refreshWindow?: pulumi.Input<number>;
    /**
     * Use to specify a base64-encoded, PEM-formatted file that contains certificates to be trust anchors for all
     * communications with the Venafi TLSPDC instance
     */
    trustBundle?: pulumi.Input<string>;
    /**
     * The Venafi TLSPDC URL. Example: https://tpp.venafi.example/vedsdk
     */
    url?: pulumi.Input<string>;
    /**
     * Username to authenticate to TLSPDC and request a new token
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Credential resource.
 */
export interface CredentialArgs {
    /**
     * Application that will be using the token
     */
    clientId?: pulumi.Input<string>;
    /**
     * Expiration date of the access token
     */
    expiration?: pulumi.Input<number>;
    /**
     * base64-encoded PKCS#12 keystore containing a vcert certificate, private key, and chain certificates to authenticate to
     * TLSPDC
     */
    p12CertFilename?: pulumi.Input<string>;
    /**
     * Password for the PKCS#12 keystore declared in p12_cert
     */
    p12CertPassword?: pulumi.Input<string>;
    /**
     * Password to authenticate to TLSPDC and request a new token
     */
    password?: pulumi.Input<string>;
    /**
     * Token used to request a new token pair (access/refresh token) from a TLSPDC instance
     */
    refreshToken?: pulumi.Input<string>;
    /**
     * number of days before expiration where a token refresh should be done
     */
    refreshWindow?: pulumi.Input<number>;
    /**
     * Use to specify a base64-encoded, PEM-formatted file that contains certificates to be trust anchors for all
     * communications with the Venafi TLSPDC instance
     */
    trustBundle?: pulumi.Input<string>;
    /**
     * The Venafi TLSPDC URL. Example: https://tpp.venafi.example/vedsdk
     */
    url?: pulumi.Input<string>;
    /**
     * Username to authenticate to TLSPDC and request a new token
     */
    username?: pulumi.Input<string>;
}
