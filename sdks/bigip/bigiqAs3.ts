// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class BigiqAs3 extends pulumi.CustomResource {
    /**
     * Get an existing BigiqAs3 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BigiqAs3State, opts?: pulumi.CustomResourceOptions): BigiqAs3 {
        return new BigiqAs3(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bigip:index/bigiqAs3:BigiqAs3';

    /**
     * Returns true if the given object is an instance of BigiqAs3.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BigiqAs3 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BigiqAs3.__pulumiType;
    }

    /**
     * AS3 json
     */
    public readonly as3Json!: pulumi.Output<string>;
    /**
     * The registration key pool to use
     */
    public readonly bigiqAddress!: pulumi.Output<string>;
    /**
     * Login reference for token authentication (see BIG-IQ REST docs for details)
     */
    public readonly bigiqLoginRef!: pulumi.Output<string | undefined>;
    /**
     * The registration key pool to use
     */
    public readonly bigiqPassword!: pulumi.Output<string>;
    /**
     * The registration key pool to use
     */
    public readonly bigiqPort!: pulumi.Output<string | undefined>;
    /**
     * Enable to use an external authentication source (LDAP, TACACS, etc)
     */
    public readonly bigiqTokenAuth!: pulumi.Output<boolean | undefined>;
    /**
     * The registration key pool to use
     */
    public readonly bigiqUser!: pulumi.Output<string>;
    /**
     * Set True if you want to ignore metadata update
     */
    public readonly ignoreMetadata!: pulumi.Output<boolean | undefined>;
    /**
     * Name of Tenant
     */
    public readonly tenantList!: pulumi.Output<string>;

    /**
     * Create a BigiqAs3 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BigiqAs3Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BigiqAs3Args | BigiqAs3State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BigiqAs3State | undefined;
            resourceInputs["as3Json"] = state ? state.as3Json : undefined;
            resourceInputs["bigiqAddress"] = state ? state.bigiqAddress : undefined;
            resourceInputs["bigiqLoginRef"] = state ? state.bigiqLoginRef : undefined;
            resourceInputs["bigiqPassword"] = state ? state.bigiqPassword : undefined;
            resourceInputs["bigiqPort"] = state ? state.bigiqPort : undefined;
            resourceInputs["bigiqTokenAuth"] = state ? state.bigiqTokenAuth : undefined;
            resourceInputs["bigiqUser"] = state ? state.bigiqUser : undefined;
            resourceInputs["ignoreMetadata"] = state ? state.ignoreMetadata : undefined;
            resourceInputs["tenantList"] = state ? state.tenantList : undefined;
        } else {
            const args = argsOrState as BigiqAs3Args | undefined;
            if ((!args || args.as3Json === undefined) && !opts.urn) {
                throw new Error("Missing required property 'as3Json'");
            }
            if ((!args || args.bigiqAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bigiqAddress'");
            }
            if ((!args || args.bigiqPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bigiqPassword'");
            }
            if ((!args || args.bigiqUser === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bigiqUser'");
            }
            resourceInputs["as3Json"] = args ? args.as3Json : undefined;
            resourceInputs["bigiqAddress"] = args ? args.bigiqAddress : undefined;
            resourceInputs["bigiqLoginRef"] = args?.bigiqLoginRef ? pulumi.secret(args.bigiqLoginRef) : undefined;
            resourceInputs["bigiqPassword"] = args?.bigiqPassword ? pulumi.secret(args.bigiqPassword) : undefined;
            resourceInputs["bigiqPort"] = args?.bigiqPort ? pulumi.secret(args.bigiqPort) : undefined;
            resourceInputs["bigiqTokenAuth"] = args?.bigiqTokenAuth ? pulumi.secret(args.bigiqTokenAuth) : undefined;
            resourceInputs["bigiqUser"] = args?.bigiqUser ? pulumi.secret(args.bigiqUser) : undefined;
            resourceInputs["ignoreMetadata"] = args ? args.ignoreMetadata : undefined;
            resourceInputs["tenantList"] = args ? args.tenantList : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["bigiqLoginRef", "bigiqPassword", "bigiqPort", "bigiqTokenAuth", "bigiqUser"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(BigiqAs3.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BigiqAs3 resources.
 */
export interface BigiqAs3State {
    /**
     * AS3 json
     */
    as3Json?: pulumi.Input<string>;
    /**
     * The registration key pool to use
     */
    bigiqAddress?: pulumi.Input<string>;
    /**
     * Login reference for token authentication (see BIG-IQ REST docs for details)
     */
    bigiqLoginRef?: pulumi.Input<string>;
    /**
     * The registration key pool to use
     */
    bigiqPassword?: pulumi.Input<string>;
    /**
     * The registration key pool to use
     */
    bigiqPort?: pulumi.Input<string>;
    /**
     * Enable to use an external authentication source (LDAP, TACACS, etc)
     */
    bigiqTokenAuth?: pulumi.Input<boolean>;
    /**
     * The registration key pool to use
     */
    bigiqUser?: pulumi.Input<string>;
    /**
     * Set True if you want to ignore metadata update
     */
    ignoreMetadata?: pulumi.Input<boolean>;
    /**
     * Name of Tenant
     */
    tenantList?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BigiqAs3 resource.
 */
export interface BigiqAs3Args {
    /**
     * AS3 json
     */
    as3Json: pulumi.Input<string>;
    /**
     * The registration key pool to use
     */
    bigiqAddress: pulumi.Input<string>;
    /**
     * Login reference for token authentication (see BIG-IQ REST docs for details)
     */
    bigiqLoginRef?: pulumi.Input<string>;
    /**
     * The registration key pool to use
     */
    bigiqPassword: pulumi.Input<string>;
    /**
     * The registration key pool to use
     */
    bigiqPort?: pulumi.Input<string>;
    /**
     * Enable to use an external authentication source (LDAP, TACACS, etc)
     */
    bigiqTokenAuth?: pulumi.Input<boolean>;
    /**
     * The registration key pool to use
     */
    bigiqUser: pulumi.Input<string>;
    /**
     * Set True if you want to ignore metadata update
     */
    ignoreMetadata?: pulumi.Input<boolean>;
    /**
     * Name of Tenant
     */
    tenantList?: pulumi.Input<string>;
}
