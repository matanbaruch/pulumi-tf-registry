// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LtmProfileTcp extends pulumi.CustomResource {
    /**
     * Get an existing LtmProfileTcp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LtmProfileTcpState, opts?: pulumi.CustomResourceOptions): LtmProfileTcp {
        return new LtmProfileTcp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bigip:index/ltmProfileTcp:LtmProfileTcp';

    /**
     * Returns true if the given object is an instance of LtmProfileTcp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LtmProfileTcp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LtmProfileTcp.__pulumiType;
    }

    /**
     * Number of seconds (default 5) connection will remain in LAST-ACK state before exiting. Value -1 means indefinite,
     * limited by maximum retransmission timeout
     */
    public readonly closeWaitTimeout!: pulumi.Output<number>;
    /**
     * Specifies the algorithm to use to share network resources among competing users to reduce congestion. The default is
     * High Speed.
     */
    public readonly congestionControl!: pulumi.Output<string | undefined>;
    /**
     * Use the parent tcp profile
     */
    public readonly defaultsFrom!: pulumi.Output<string>;
    /**
     * If enabled, ADC will defer allocating resources to a connection until some payload data has arrived from the client
     * (default false). This may help minimize the impact of certain DoS attacks but adds undesirable latency under normal
     * conditions. Note: ‘deferredAccept’ is incompatible with server-speaks-first application protocols,Default : disabled
     */
    public readonly deferredAccept!: pulumi.Output<string>;
    /**
     * Specifies, when checked (enabled), that the system can send fewer than one ACK (acknowledgment) segment per data segment
     * received. By default, this setting is enabled
     */
    public readonly delayedAcks!: pulumi.Output<string | undefined>;
    /**
     * Enabling this setting allows TCP to assume a packet is lost after fewer than the standard number of duplicate ACKs, if
     * there is no way to send new data and generate more duplicate ACKs
     */
    public readonly earlyRetransmit!: pulumi.Output<string | undefined>;
    /**
     * If enabled (default), the system can use the TCP Fast Open protocol extension to reduce latency by sending payload data
     * with initial SYN
     */
    public readonly fastOpen!: pulumi.Output<string>;
    /**
     * Number of seconds (default 300) connection will remain in LAST-ACK state before closing. Value -1 means indefinite,
     * limited by maximum retransmission timeout
     */
    public readonly finwait2timeout!: pulumi.Output<number>;
    /**
     * Number of seconds (default 5) connection will remain in FIN-WAIT-1 or closing state before exiting. Value -1 means
     * indefinite, limited by maximum retransmission timeout
     */
    public readonly finwaitTimeout!: pulumi.Output<number>;
    /**
     * Number of seconds (default 300; may not be 0) connection may remain idle before it becomes eligible for deletion. Value
     * -1 (not recommended) means infinite
     */
    public readonly idleTimeout!: pulumi.Output<number>;
    /**
     * Specifies the initial congestion window size for connections to this destination. Actual window size is this value
     * multiplied by the MSS (Maximum Segment Size) for the same connection. The default is 10. Valid values range from 0 to 64
     */
    public readonly initialCongestionWindowsize!: pulumi.Output<number | undefined>;
    /**
     * Number of seconds (default 1800) between keep-alive probes
     */
    public readonly keepaliveInterval!: pulumi.Output<number>;
    /**
     * Specifies whether the system applies Nagle's algorithm to reduce the number of short segments on the network.If you
     * select Auto, the system determines whether to use Nagle's algorithm based on network conditions. By default, this
     * setting is disabled.
     */
    public readonly nagle!: pulumi.Output<string | undefined>;
    /**
     * Name of the TCP Profile
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * name of partition
     */
    public readonly partition!: pulumi.Output<string | undefined>;
    /**
     * Specifies the proxy buffer level, in bytes, at which the receive window is closed.
     */
    public readonly proxybufferHigh!: pulumi.Output<number | undefined>;
    /**
     * Specifies the maximum advertised RECEIVE window size. This value represents the maximum number of bytes to which the
     * RECEIVE window can scale. The default is 65535 bytes
     */
    public readonly receiveWindowsize!: pulumi.Output<number | undefined>;
    /**
     * Specifies the SEND window size. The default is 131072 bytes
     */
    public readonly sendBuffersize!: pulumi.Output<number | undefined>;
    /**
     * Enabling this setting allows TCP to send a probe segment to trigger fast recovery instead of recovering a loss via a
     * retransmission timeout,By default, this setting is enabled
     */
    public readonly taillossProbe!: pulumi.Output<string | undefined>;
    /**
     * Using this setting enabled, the system can recycle a wait-state connection immediately upon receipt of a new connection
     * request instead of having to wait until the connection times out of the wait state. By default, this setting is enabled
     */
    public readonly timewaitRecycle!: pulumi.Output<string | undefined>;
    /**
     * Specifies, when checked (enabled), that the system can actually communicate with the server before establishing a client
     * connection. To determine this, the system sends the server a SYN packet before responding to the client's SYN with a
     * SYN-ACK. When unchecked, the system accepts the client connection before selecting a server to talk to. By default, this
     * setting is disabled
     */
    public readonly verifiedAccept!: pulumi.Output<string | undefined>;
    /**
     * Specifies the timeout in milliseconds for terminating a connection with an effective zero length TCP transmit window
     */
    public readonly zerowindowTimeout!: pulumi.Output<number | undefined>;

    /**
     * Create a LtmProfileTcp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: LtmProfileTcpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LtmProfileTcpArgs | LtmProfileTcpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LtmProfileTcpState | undefined;
            resourceInputs["closeWaitTimeout"] = state ? state.closeWaitTimeout : undefined;
            resourceInputs["congestionControl"] = state ? state.congestionControl : undefined;
            resourceInputs["defaultsFrom"] = state ? state.defaultsFrom : undefined;
            resourceInputs["deferredAccept"] = state ? state.deferredAccept : undefined;
            resourceInputs["delayedAcks"] = state ? state.delayedAcks : undefined;
            resourceInputs["earlyRetransmit"] = state ? state.earlyRetransmit : undefined;
            resourceInputs["fastOpen"] = state ? state.fastOpen : undefined;
            resourceInputs["finwait2timeout"] = state ? state.finwait2timeout : undefined;
            resourceInputs["finwaitTimeout"] = state ? state.finwaitTimeout : undefined;
            resourceInputs["idleTimeout"] = state ? state.idleTimeout : undefined;
            resourceInputs["initialCongestionWindowsize"] = state ? state.initialCongestionWindowsize : undefined;
            resourceInputs["keepaliveInterval"] = state ? state.keepaliveInterval : undefined;
            resourceInputs["nagle"] = state ? state.nagle : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["partition"] = state ? state.partition : undefined;
            resourceInputs["proxybufferHigh"] = state ? state.proxybufferHigh : undefined;
            resourceInputs["receiveWindowsize"] = state ? state.receiveWindowsize : undefined;
            resourceInputs["sendBuffersize"] = state ? state.sendBuffersize : undefined;
            resourceInputs["taillossProbe"] = state ? state.taillossProbe : undefined;
            resourceInputs["timewaitRecycle"] = state ? state.timewaitRecycle : undefined;
            resourceInputs["verifiedAccept"] = state ? state.verifiedAccept : undefined;
            resourceInputs["zerowindowTimeout"] = state ? state.zerowindowTimeout : undefined;
        } else {
            const args = argsOrState as LtmProfileTcpArgs | undefined;
            resourceInputs["closeWaitTimeout"] = args ? args.closeWaitTimeout : undefined;
            resourceInputs["congestionControl"] = args ? args.congestionControl : undefined;
            resourceInputs["defaultsFrom"] = args ? args.defaultsFrom : undefined;
            resourceInputs["deferredAccept"] = args ? args.deferredAccept : undefined;
            resourceInputs["delayedAcks"] = args ? args.delayedAcks : undefined;
            resourceInputs["earlyRetransmit"] = args ? args.earlyRetransmit : undefined;
            resourceInputs["fastOpen"] = args ? args.fastOpen : undefined;
            resourceInputs["finwait2timeout"] = args ? args.finwait2timeout : undefined;
            resourceInputs["finwaitTimeout"] = args ? args.finwaitTimeout : undefined;
            resourceInputs["idleTimeout"] = args ? args.idleTimeout : undefined;
            resourceInputs["initialCongestionWindowsize"] = args ? args.initialCongestionWindowsize : undefined;
            resourceInputs["keepaliveInterval"] = args ? args.keepaliveInterval : undefined;
            resourceInputs["nagle"] = args ? args.nagle : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["partition"] = args ? args.partition : undefined;
            resourceInputs["proxybufferHigh"] = args ? args.proxybufferHigh : undefined;
            resourceInputs["receiveWindowsize"] = args ? args.receiveWindowsize : undefined;
            resourceInputs["sendBuffersize"] = args ? args.sendBuffersize : undefined;
            resourceInputs["taillossProbe"] = args ? args.taillossProbe : undefined;
            resourceInputs["timewaitRecycle"] = args ? args.timewaitRecycle : undefined;
            resourceInputs["verifiedAccept"] = args ? args.verifiedAccept : undefined;
            resourceInputs["zerowindowTimeout"] = args ? args.zerowindowTimeout : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LtmProfileTcp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LtmProfileTcp resources.
 */
export interface LtmProfileTcpState {
    /**
     * Number of seconds (default 5) connection will remain in LAST-ACK state before exiting. Value -1 means indefinite,
     * limited by maximum retransmission timeout
     */
    closeWaitTimeout?: pulumi.Input<number>;
    /**
     * Specifies the algorithm to use to share network resources among competing users to reduce congestion. The default is
     * High Speed.
     */
    congestionControl?: pulumi.Input<string>;
    /**
     * Use the parent tcp profile
     */
    defaultsFrom?: pulumi.Input<string>;
    /**
     * If enabled, ADC will defer allocating resources to a connection until some payload data has arrived from the client
     * (default false). This may help minimize the impact of certain DoS attacks but adds undesirable latency under normal
     * conditions. Note: ‘deferredAccept’ is incompatible with server-speaks-first application protocols,Default : disabled
     */
    deferredAccept?: pulumi.Input<string>;
    /**
     * Specifies, when checked (enabled), that the system can send fewer than one ACK (acknowledgment) segment per data segment
     * received. By default, this setting is enabled
     */
    delayedAcks?: pulumi.Input<string>;
    /**
     * Enabling this setting allows TCP to assume a packet is lost after fewer than the standard number of duplicate ACKs, if
     * there is no way to send new data and generate more duplicate ACKs
     */
    earlyRetransmit?: pulumi.Input<string>;
    /**
     * If enabled (default), the system can use the TCP Fast Open protocol extension to reduce latency by sending payload data
     * with initial SYN
     */
    fastOpen?: pulumi.Input<string>;
    /**
     * Number of seconds (default 300) connection will remain in LAST-ACK state before closing. Value -1 means indefinite,
     * limited by maximum retransmission timeout
     */
    finwait2timeout?: pulumi.Input<number>;
    /**
     * Number of seconds (default 5) connection will remain in FIN-WAIT-1 or closing state before exiting. Value -1 means
     * indefinite, limited by maximum retransmission timeout
     */
    finwaitTimeout?: pulumi.Input<number>;
    /**
     * Number of seconds (default 300; may not be 0) connection may remain idle before it becomes eligible for deletion. Value
     * -1 (not recommended) means infinite
     */
    idleTimeout?: pulumi.Input<number>;
    /**
     * Specifies the initial congestion window size for connections to this destination. Actual window size is this value
     * multiplied by the MSS (Maximum Segment Size) for the same connection. The default is 10. Valid values range from 0 to 64
     */
    initialCongestionWindowsize?: pulumi.Input<number>;
    /**
     * Number of seconds (default 1800) between keep-alive probes
     */
    keepaliveInterval?: pulumi.Input<number>;
    /**
     * Specifies whether the system applies Nagle's algorithm to reduce the number of short segments on the network.If you
     * select Auto, the system determines whether to use Nagle's algorithm based on network conditions. By default, this
     * setting is disabled.
     */
    nagle?: pulumi.Input<string>;
    /**
     * Name of the TCP Profile
     */
    name?: pulumi.Input<string>;
    /**
     * name of partition
     */
    partition?: pulumi.Input<string>;
    /**
     * Specifies the proxy buffer level, in bytes, at which the receive window is closed.
     */
    proxybufferHigh?: pulumi.Input<number>;
    /**
     * Specifies the maximum advertised RECEIVE window size. This value represents the maximum number of bytes to which the
     * RECEIVE window can scale. The default is 65535 bytes
     */
    receiveWindowsize?: pulumi.Input<number>;
    /**
     * Specifies the SEND window size. The default is 131072 bytes
     */
    sendBuffersize?: pulumi.Input<number>;
    /**
     * Enabling this setting allows TCP to send a probe segment to trigger fast recovery instead of recovering a loss via a
     * retransmission timeout,By default, this setting is enabled
     */
    taillossProbe?: pulumi.Input<string>;
    /**
     * Using this setting enabled, the system can recycle a wait-state connection immediately upon receipt of a new connection
     * request instead of having to wait until the connection times out of the wait state. By default, this setting is enabled
     */
    timewaitRecycle?: pulumi.Input<string>;
    /**
     * Specifies, when checked (enabled), that the system can actually communicate with the server before establishing a client
     * connection. To determine this, the system sends the server a SYN packet before responding to the client's SYN with a
     * SYN-ACK. When unchecked, the system accepts the client connection before selecting a server to talk to. By default, this
     * setting is disabled
     */
    verifiedAccept?: pulumi.Input<string>;
    /**
     * Specifies the timeout in milliseconds for terminating a connection with an effective zero length TCP transmit window
     */
    zerowindowTimeout?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a LtmProfileTcp resource.
 */
export interface LtmProfileTcpArgs {
    /**
     * Number of seconds (default 5) connection will remain in LAST-ACK state before exiting. Value -1 means indefinite,
     * limited by maximum retransmission timeout
     */
    closeWaitTimeout?: pulumi.Input<number>;
    /**
     * Specifies the algorithm to use to share network resources among competing users to reduce congestion. The default is
     * High Speed.
     */
    congestionControl?: pulumi.Input<string>;
    /**
     * Use the parent tcp profile
     */
    defaultsFrom?: pulumi.Input<string>;
    /**
     * If enabled, ADC will defer allocating resources to a connection until some payload data has arrived from the client
     * (default false). This may help minimize the impact of certain DoS attacks but adds undesirable latency under normal
     * conditions. Note: ‘deferredAccept’ is incompatible with server-speaks-first application protocols,Default : disabled
     */
    deferredAccept?: pulumi.Input<string>;
    /**
     * Specifies, when checked (enabled), that the system can send fewer than one ACK (acknowledgment) segment per data segment
     * received. By default, this setting is enabled
     */
    delayedAcks?: pulumi.Input<string>;
    /**
     * Enabling this setting allows TCP to assume a packet is lost after fewer than the standard number of duplicate ACKs, if
     * there is no way to send new data and generate more duplicate ACKs
     */
    earlyRetransmit?: pulumi.Input<string>;
    /**
     * If enabled (default), the system can use the TCP Fast Open protocol extension to reduce latency by sending payload data
     * with initial SYN
     */
    fastOpen?: pulumi.Input<string>;
    /**
     * Number of seconds (default 300) connection will remain in LAST-ACK state before closing. Value -1 means indefinite,
     * limited by maximum retransmission timeout
     */
    finwait2timeout?: pulumi.Input<number>;
    /**
     * Number of seconds (default 5) connection will remain in FIN-WAIT-1 or closing state before exiting. Value -1 means
     * indefinite, limited by maximum retransmission timeout
     */
    finwaitTimeout?: pulumi.Input<number>;
    /**
     * Number of seconds (default 300; may not be 0) connection may remain idle before it becomes eligible for deletion. Value
     * -1 (not recommended) means infinite
     */
    idleTimeout?: pulumi.Input<number>;
    /**
     * Specifies the initial congestion window size for connections to this destination. Actual window size is this value
     * multiplied by the MSS (Maximum Segment Size) for the same connection. The default is 10. Valid values range from 0 to 64
     */
    initialCongestionWindowsize?: pulumi.Input<number>;
    /**
     * Number of seconds (default 1800) between keep-alive probes
     */
    keepaliveInterval?: pulumi.Input<number>;
    /**
     * Specifies whether the system applies Nagle's algorithm to reduce the number of short segments on the network.If you
     * select Auto, the system determines whether to use Nagle's algorithm based on network conditions. By default, this
     * setting is disabled.
     */
    nagle?: pulumi.Input<string>;
    /**
     * Name of the TCP Profile
     */
    name?: pulumi.Input<string>;
    /**
     * name of partition
     */
    partition?: pulumi.Input<string>;
    /**
     * Specifies the proxy buffer level, in bytes, at which the receive window is closed.
     */
    proxybufferHigh?: pulumi.Input<number>;
    /**
     * Specifies the maximum advertised RECEIVE window size. This value represents the maximum number of bytes to which the
     * RECEIVE window can scale. The default is 65535 bytes
     */
    receiveWindowsize?: pulumi.Input<number>;
    /**
     * Specifies the SEND window size. The default is 131072 bytes
     */
    sendBuffersize?: pulumi.Input<number>;
    /**
     * Enabling this setting allows TCP to send a probe segment to trigger fast recovery instead of recovering a loss via a
     * retransmission timeout,By default, this setting is enabled
     */
    taillossProbe?: pulumi.Input<string>;
    /**
     * Using this setting enabled, the system can recycle a wait-state connection immediately upon receipt of a new connection
     * request instead of having to wait until the connection times out of the wait state. By default, this setting is enabled
     */
    timewaitRecycle?: pulumi.Input<string>;
    /**
     * Specifies, when checked (enabled), that the system can actually communicate with the server before establishing a client
     * connection. To determine this, the system sends the server a SYN packet before responding to the client's SYN with a
     * SYN-ACK. When unchecked, the system accepts the client connection before selecting a server to talk to. By default, this
     * setting is disabled
     */
    verifiedAccept?: pulumi.Input<string>;
    /**
     * Specifies the timeout in milliseconds for terminating a connection with an effective zero length TCP transmit window
     */
    zerowindowTimeout?: pulumi.Input<number>;
}
