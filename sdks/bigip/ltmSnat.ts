// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LtmSnat extends pulumi.CustomResource {
    /**
     * Get an existing LtmSnat resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LtmSnatState, opts?: pulumi.CustomResourceOptions): LtmSnat {
        return new LtmSnat(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bigip:index/ltmSnat:LtmSnat';

    /**
     * Returns true if the given object is an instance of LtmSnat.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LtmSnat {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LtmSnat.__pulumiType;
    }

    /**
     * Specifies whether to automatically map last hop for pools or not. The default is to use next level's defaul
     */
    public readonly autolasthop!: pulumi.Output<string>;
    /**
     * Fullpath
     */
    public readonly fullPath!: pulumi.Output<string | undefined>;
    /**
     * Enables or disables mirroring of SNAT connections.
     */
    public readonly mirror!: pulumi.Output<string>;
    /**
     * Name of the SNAT
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies, for each SNAT that you create, the origin addresses that are to be members of that SNAT. Specify origin
     * addresses by their IP addresses and service ports
     */
    public readonly origins!: pulumi.Output<outputs.LtmSnatOrigin[]>;
    /**
     * Partition or path to which the SNAT belongs
     */
    public readonly partition!: pulumi.Output<string | undefined>;
    /**
     * Specifies an existing SNAT pool to which you want to map the client IP address. When you select SNAT Pool, you also
     * select an existing SNAT pool from the associated list.
     */
    public readonly snatpool!: pulumi.Output<string | undefined>;
    /**
     * Specifies how the SNAT object handles the client's source port. The default is Preserve.
     */
    public readonly sourceport!: pulumi.Output<string | undefined>;
    /**
     * Specifies a particular IP address that you want the SNAT to use as a translation address. When you select IP Address,
     * you also type the IP address in the associated text box
     */
    public readonly translation!: pulumi.Output<string | undefined>;
    /**
     * Specifies the VLANs or tunnels for which the SNAT is enabled or disabled. The default is All
     */
    public readonly vlans!: pulumi.Output<string[] | undefined>;
    /**
     * Disables the SNAT on all VLANs.
     */
    public readonly vlansdisabled!: pulumi.Output<boolean | undefined>;

    /**
     * Create a LtmSnat resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LtmSnatArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LtmSnatArgs | LtmSnatState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LtmSnatState | undefined;
            resourceInputs["autolasthop"] = state ? state.autolasthop : undefined;
            resourceInputs["fullPath"] = state ? state.fullPath : undefined;
            resourceInputs["mirror"] = state ? state.mirror : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["origins"] = state ? state.origins : undefined;
            resourceInputs["partition"] = state ? state.partition : undefined;
            resourceInputs["snatpool"] = state ? state.snatpool : undefined;
            resourceInputs["sourceport"] = state ? state.sourceport : undefined;
            resourceInputs["translation"] = state ? state.translation : undefined;
            resourceInputs["vlans"] = state ? state.vlans : undefined;
            resourceInputs["vlansdisabled"] = state ? state.vlansdisabled : undefined;
        } else {
            const args = argsOrState as LtmSnatArgs | undefined;
            if ((!args || args.origins === undefined) && !opts.urn) {
                throw new Error("Missing required property 'origins'");
            }
            resourceInputs["autolasthop"] = args ? args.autolasthop : undefined;
            resourceInputs["fullPath"] = args ? args.fullPath : undefined;
            resourceInputs["mirror"] = args ? args.mirror : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["origins"] = args ? args.origins : undefined;
            resourceInputs["partition"] = args ? args.partition : undefined;
            resourceInputs["snatpool"] = args ? args.snatpool : undefined;
            resourceInputs["sourceport"] = args ? args.sourceport : undefined;
            resourceInputs["translation"] = args ? args.translation : undefined;
            resourceInputs["vlans"] = args ? args.vlans : undefined;
            resourceInputs["vlansdisabled"] = args ? args.vlansdisabled : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LtmSnat.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LtmSnat resources.
 */
export interface LtmSnatState {
    /**
     * Specifies whether to automatically map last hop for pools or not. The default is to use next level's defaul
     */
    autolasthop?: pulumi.Input<string>;
    /**
     * Fullpath
     */
    fullPath?: pulumi.Input<string>;
    /**
     * Enables or disables mirroring of SNAT connections.
     */
    mirror?: pulumi.Input<string>;
    /**
     * Name of the SNAT
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies, for each SNAT that you create, the origin addresses that are to be members of that SNAT. Specify origin
     * addresses by their IP addresses and service ports
     */
    origins?: pulumi.Input<pulumi.Input<inputs.LtmSnatOrigin>[]>;
    /**
     * Partition or path to which the SNAT belongs
     */
    partition?: pulumi.Input<string>;
    /**
     * Specifies an existing SNAT pool to which you want to map the client IP address. When you select SNAT Pool, you also
     * select an existing SNAT pool from the associated list.
     */
    snatpool?: pulumi.Input<string>;
    /**
     * Specifies how the SNAT object handles the client's source port. The default is Preserve.
     */
    sourceport?: pulumi.Input<string>;
    /**
     * Specifies a particular IP address that you want the SNAT to use as a translation address. When you select IP Address,
     * you also type the IP address in the associated text box
     */
    translation?: pulumi.Input<string>;
    /**
     * Specifies the VLANs or tunnels for which the SNAT is enabled or disabled. The default is All
     */
    vlans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Disables the SNAT on all VLANs.
     */
    vlansdisabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a LtmSnat resource.
 */
export interface LtmSnatArgs {
    /**
     * Specifies whether to automatically map last hop for pools or not. The default is to use next level's defaul
     */
    autolasthop?: pulumi.Input<string>;
    /**
     * Fullpath
     */
    fullPath?: pulumi.Input<string>;
    /**
     * Enables or disables mirroring of SNAT connections.
     */
    mirror?: pulumi.Input<string>;
    /**
     * Name of the SNAT
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies, for each SNAT that you create, the origin addresses that are to be members of that SNAT. Specify origin
     * addresses by their IP addresses and service ports
     */
    origins: pulumi.Input<pulumi.Input<inputs.LtmSnatOrigin>[]>;
    /**
     * Partition or path to which the SNAT belongs
     */
    partition?: pulumi.Input<string>;
    /**
     * Specifies an existing SNAT pool to which you want to map the client IP address. When you select SNAT Pool, you also
     * select an existing SNAT pool from the associated list.
     */
    snatpool?: pulumi.Input<string>;
    /**
     * Specifies how the SNAT object handles the client's source port. The default is Preserve.
     */
    sourceport?: pulumi.Input<string>;
    /**
     * Specifies a particular IP address that you want the SNAT to use as a translation address. When you select IP Address,
     * you also type the IP address in the associated text box
     */
    translation?: pulumi.Input<string>;
    /**
     * Specifies the VLANs or tunnels for which the SNAT is enabled or disabled. The default is All
     */
    vlans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Disables the SNAT on all VLANs.
     */
    vlansdisabled?: pulumi.Input<boolean>;
}
