// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LtmPoolAttachment extends pulumi.CustomResource {
    /**
     * Get an existing LtmPoolAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LtmPoolAttachmentState, opts?: pulumi.CustomResourceOptions): LtmPoolAttachment {
        return new LtmPoolAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bigip:index/ltmPoolAttachment:LtmPoolAttachment';

    /**
     * Returns true if the given object is an instance of LtmPoolAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LtmPoolAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LtmPoolAttachment.__pulumiType;
    }

    /**
     * Specifies a maximum established connection limit for a pool member or node. When the current connections count reaches
     * this number, the system does not send additional connections to that pool member or node. The default is 0, meaning that
     * there is no limit to the number of connections. When used with the weighted least connections load balancing methods,
     * the system uses connection limits to determine the proportional load of each pool member or node. This must be a value
     * other than 0 when specified for the weighted least connections load balancing methods
     */
    public readonly connectionLimit!: pulumi.Output<number>;
    /**
     * Specifies the maximum number of connections-per-second allowed for a pool member. When the number of
     * connections-per-second reaches the limit for a given pool member, the system drops (UDP) or resets (TCP) additional
     * connection requests. This helps detect Denial of Service attacks, where connection requests flood a pool member. Setting
     * this to 0 turns off connection limits. The default is 0.
     */
    public readonly connectionRateLimit!: pulumi.Output<string>;
    /**
     * Sets the dynamic ratio number for the node. Used for dynamic ratio load balancing.
     */
    public readonly dynamicRatio!: pulumi.Output<number>;
    /**
     * Specifies whether the node should scale to the IP address set returned by DNS.
     */
    public readonly fqdnAutopopulate!: pulumi.Output<string | undefined>;
    /**
     * Specifies the health monitors that the system uses to monitor this pool member,value can be `none` (or) `default` (or)
     * list of monitors joined with and ( ex: `/Common/test_monitor_pa_tc1 and /Common/gateway_icmp`)
     */
    public readonly monitor!: pulumi.Output<string>;
    /**
     * Poolmember to add/remove to/from the pool. Format node_address:port. e.g 1.1.1.1:80
     */
    public readonly node!: pulumi.Output<string>;
    /**
     * Name of the pool to be attached with pool members
     */
    public readonly pool!: pulumi.Output<string>;
    /**
     * Specifies a number representing the priority group for the pool member. The default is 0, meaning that the member has no
     * priority. To specify a priority, you must activate priority group usage when you create a new pool or when adding or
     * removing pool members. When activated, the system load balances traffic according to the priority group number assigned
     * to the pool member. The higher the number, the higher the priority, so a member with a priority of 3 has higher priority
     * than a member with a priority of 1.
     */
    public readonly priorityGroup!: pulumi.Output<number>;
    /**
     * Specifies the ratio weight to assign to the pool member. Valid values range from 1 through 65535. The default is 1,
     * which means that each pool member has an equal ratio proportion.
     */
    public readonly ratio!: pulumi.Output<number>;
    /**
     * Specifies the state the pool member should be in, value can be `enabled` (or) `disabled` (or) forced_offline
     */
    public readonly state!: pulumi.Output<string | undefined>;

    /**
     * Create a LtmPoolAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LtmPoolAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LtmPoolAttachmentArgs | LtmPoolAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LtmPoolAttachmentState | undefined;
            resourceInputs["connectionLimit"] = state ? state.connectionLimit : undefined;
            resourceInputs["connectionRateLimit"] = state ? state.connectionRateLimit : undefined;
            resourceInputs["dynamicRatio"] = state ? state.dynamicRatio : undefined;
            resourceInputs["fqdnAutopopulate"] = state ? state.fqdnAutopopulate : undefined;
            resourceInputs["monitor"] = state ? state.monitor : undefined;
            resourceInputs["node"] = state ? state.node : undefined;
            resourceInputs["pool"] = state ? state.pool : undefined;
            resourceInputs["priorityGroup"] = state ? state.priorityGroup : undefined;
            resourceInputs["ratio"] = state ? state.ratio : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
        } else {
            const args = argsOrState as LtmPoolAttachmentArgs | undefined;
            if ((!args || args.node === undefined) && !opts.urn) {
                throw new Error("Missing required property 'node'");
            }
            if ((!args || args.pool === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pool'");
            }
            resourceInputs["connectionLimit"] = args ? args.connectionLimit : undefined;
            resourceInputs["connectionRateLimit"] = args ? args.connectionRateLimit : undefined;
            resourceInputs["dynamicRatio"] = args ? args.dynamicRatio : undefined;
            resourceInputs["fqdnAutopopulate"] = args ? args.fqdnAutopopulate : undefined;
            resourceInputs["monitor"] = args ? args.monitor : undefined;
            resourceInputs["node"] = args ? args.node : undefined;
            resourceInputs["pool"] = args ? args.pool : undefined;
            resourceInputs["priorityGroup"] = args ? args.priorityGroup : undefined;
            resourceInputs["ratio"] = args ? args.ratio : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LtmPoolAttachment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LtmPoolAttachment resources.
 */
export interface LtmPoolAttachmentState {
    /**
     * Specifies a maximum established connection limit for a pool member or node. When the current connections count reaches
     * this number, the system does not send additional connections to that pool member or node. The default is 0, meaning that
     * there is no limit to the number of connections. When used with the weighted least connections load balancing methods,
     * the system uses connection limits to determine the proportional load of each pool member or node. This must be a value
     * other than 0 when specified for the weighted least connections load balancing methods
     */
    connectionLimit?: pulumi.Input<number>;
    /**
     * Specifies the maximum number of connections-per-second allowed for a pool member. When the number of
     * connections-per-second reaches the limit for a given pool member, the system drops (UDP) or resets (TCP) additional
     * connection requests. This helps detect Denial of Service attacks, where connection requests flood a pool member. Setting
     * this to 0 turns off connection limits. The default is 0.
     */
    connectionRateLimit?: pulumi.Input<string>;
    /**
     * Sets the dynamic ratio number for the node. Used for dynamic ratio load balancing.
     */
    dynamicRatio?: pulumi.Input<number>;
    /**
     * Specifies whether the node should scale to the IP address set returned by DNS.
     */
    fqdnAutopopulate?: pulumi.Input<string>;
    /**
     * Specifies the health monitors that the system uses to monitor this pool member,value can be `none` (or) `default` (or)
     * list of monitors joined with and ( ex: `/Common/test_monitor_pa_tc1 and /Common/gateway_icmp`)
     */
    monitor?: pulumi.Input<string>;
    /**
     * Poolmember to add/remove to/from the pool. Format node_address:port. e.g 1.1.1.1:80
     */
    node?: pulumi.Input<string>;
    /**
     * Name of the pool to be attached with pool members
     */
    pool?: pulumi.Input<string>;
    /**
     * Specifies a number representing the priority group for the pool member. The default is 0, meaning that the member has no
     * priority. To specify a priority, you must activate priority group usage when you create a new pool or when adding or
     * removing pool members. When activated, the system load balances traffic according to the priority group number assigned
     * to the pool member. The higher the number, the higher the priority, so a member with a priority of 3 has higher priority
     * than a member with a priority of 1.
     */
    priorityGroup?: pulumi.Input<number>;
    /**
     * Specifies the ratio weight to assign to the pool member. Valid values range from 1 through 65535. The default is 1,
     * which means that each pool member has an equal ratio proportion.
     */
    ratio?: pulumi.Input<number>;
    /**
     * Specifies the state the pool member should be in, value can be `enabled` (or) `disabled` (or) forced_offline
     */
    state?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LtmPoolAttachment resource.
 */
export interface LtmPoolAttachmentArgs {
    /**
     * Specifies a maximum established connection limit for a pool member or node. When the current connections count reaches
     * this number, the system does not send additional connections to that pool member or node. The default is 0, meaning that
     * there is no limit to the number of connections. When used with the weighted least connections load balancing methods,
     * the system uses connection limits to determine the proportional load of each pool member or node. This must be a value
     * other than 0 when specified for the weighted least connections load balancing methods
     */
    connectionLimit?: pulumi.Input<number>;
    /**
     * Specifies the maximum number of connections-per-second allowed for a pool member. When the number of
     * connections-per-second reaches the limit for a given pool member, the system drops (UDP) or resets (TCP) additional
     * connection requests. This helps detect Denial of Service attacks, where connection requests flood a pool member. Setting
     * this to 0 turns off connection limits. The default is 0.
     */
    connectionRateLimit?: pulumi.Input<string>;
    /**
     * Sets the dynamic ratio number for the node. Used for dynamic ratio load balancing.
     */
    dynamicRatio?: pulumi.Input<number>;
    /**
     * Specifies whether the node should scale to the IP address set returned by DNS.
     */
    fqdnAutopopulate?: pulumi.Input<string>;
    /**
     * Specifies the health monitors that the system uses to monitor this pool member,value can be `none` (or) `default` (or)
     * list of monitors joined with and ( ex: `/Common/test_monitor_pa_tc1 and /Common/gateway_icmp`)
     */
    monitor?: pulumi.Input<string>;
    /**
     * Poolmember to add/remove to/from the pool. Format node_address:port. e.g 1.1.1.1:80
     */
    node: pulumi.Input<string>;
    /**
     * Name of the pool to be attached with pool members
     */
    pool: pulumi.Input<string>;
    /**
     * Specifies a number representing the priority group for the pool member. The default is 0, meaning that the member has no
     * priority. To specify a priority, you must activate priority group usage when you create a new pool or when adding or
     * removing pool members. When activated, the system load balances traffic according to the priority group number assigned
     * to the pool member. The higher the number, the higher the priority, so a member with a priority of 3 has higher priority
     * than a member with a priority of 1.
     */
    priorityGroup?: pulumi.Input<number>;
    /**
     * Specifies the ratio weight to assign to the pool member. Valid values range from 1 through 65535. The default is 1,
     * which means that each pool member has an equal ratio proportion.
     */
    ratio?: pulumi.Input<number>;
    /**
     * Specifies the state the pool member should be in, value can be `enabled` (or) `disabled` (or) forced_offline
     */
    state?: pulumi.Input<string>;
}
