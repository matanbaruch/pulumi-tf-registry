// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class NetSelfip extends pulumi.CustomResource {
    /**
     * Get an existing NetSelfip resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetSelfipState, opts?: pulumi.CustomResourceOptions): NetSelfip {
        return new NetSelfip(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bigip:index/netSelfip:NetSelfip';

    /**
     * Returns true if the given object is an instance of NetSelfip.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetSelfip {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetSelfip.__pulumiType;
    }

    /**
     * SelfIP IP address
     */
    public readonly ip!: pulumi.Output<string>;
    /**
     * Name of the SelfIP
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * port lockdown
     */
    public readonly portLockdowns!: pulumi.Output<string[] | undefined>;
    /**
     * Name of the traffic group, defaults to traffic-group-local-only if not specified
     */
    public readonly trafficGroup!: pulumi.Output<string | undefined>;
    /**
     * Name of the vlan
     */
    public readonly vlan!: pulumi.Output<string>;

    /**
     * Create a NetSelfip resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetSelfipArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetSelfipArgs | NetSelfipState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetSelfipState | undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["portLockdowns"] = state ? state.portLockdowns : undefined;
            resourceInputs["trafficGroup"] = state ? state.trafficGroup : undefined;
            resourceInputs["vlan"] = state ? state.vlan : undefined;
        } else {
            const args = argsOrState as NetSelfipArgs | undefined;
            if ((!args || args.ip === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ip'");
            }
            if ((!args || args.vlan === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vlan'");
            }
            resourceInputs["ip"] = args ? args.ip : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["portLockdowns"] = args ? args.portLockdowns : undefined;
            resourceInputs["trafficGroup"] = args ? args.trafficGroup : undefined;
            resourceInputs["vlan"] = args ? args.vlan : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetSelfip.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetSelfip resources.
 */
export interface NetSelfipState {
    /**
     * SelfIP IP address
     */
    ip?: pulumi.Input<string>;
    /**
     * Name of the SelfIP
     */
    name?: pulumi.Input<string>;
    /**
     * port lockdown
     */
    portLockdowns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the traffic group, defaults to traffic-group-local-only if not specified
     */
    trafficGroup?: pulumi.Input<string>;
    /**
     * Name of the vlan
     */
    vlan?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetSelfip resource.
 */
export interface NetSelfipArgs {
    /**
     * SelfIP IP address
     */
    ip: pulumi.Input<string>;
    /**
     * Name of the SelfIP
     */
    name?: pulumi.Input<string>;
    /**
     * port lockdown
     */
    portLockdowns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the traffic group, defaults to traffic-group-local-only if not specified
     */
    trafficGroup?: pulumi.Input<string>;
    /**
     * Name of the vlan
     */
    vlan: pulumi.Input<string>;
}
