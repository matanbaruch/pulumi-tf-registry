// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LtmProfileRewrite extends pulumi.CustomResource {
    /**
     * Get an existing LtmProfileRewrite resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LtmProfileRewriteState, opts?: pulumi.CustomResourceOptions): LtmProfileRewrite {
        return new LtmProfileRewrite(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bigip:index/ltmProfileRewrite:LtmProfileRewrite';

    /**
     * Returns true if the given object is an instance of LtmProfileRewrite.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LtmProfileRewrite {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LtmProfileRewrite.__pulumiType;
    }

    /**
     * Specifies a list of URIs to bypass inside a web page when the page is accessed using Portal Access.
     */
    public readonly bypassLists!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies a CA against which to verify signed Java applets signatures.
     */
    public readonly caFile!: pulumi.Output<string>;
    /**
     * Specifies the type of client caching.
     */
    public readonly cacheType!: pulumi.Output<string | undefined>;
    public readonly cookieRules!: pulumi.Output<outputs.LtmProfileRewriteCookieRule[] | undefined>;
    /**
     * Specifies a CRL against which to verify signed Java applets signature certificates.
     */
    public readonly crlFile!: pulumi.Output<string | undefined>;
    /**
     * Inherit defaults from parent profile.
     */
    public readonly defaultsFrom!: pulumi.Output<string | undefined>;
    /**
     * Name of the rewrite profile.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly requests!: pulumi.Output<outputs.LtmProfileRewriteRequest[] | undefined>;
    public readonly responses!: pulumi.Output<outputs.LtmProfileRewriteResponse[] | undefined>;
    /**
     * Specifies a list of URIs to rewrite inside a web page when the page is accessed using Portal Access.
     */
    public readonly rewriteLists!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies the type of rewrite operations.
     */
    public readonly rewriteMode!: pulumi.Output<string>;
    /**
     * Specifies a certificate to use for re-signing of signed Java applets after patching.
     */
    public readonly signingCert!: pulumi.Output<string>;
    /**
     * Specifies a private key for re-signing of signed Java applets after patching.
     */
    public readonly signingKey!: pulumi.Output<string>;
    /**
     * Specifies a pass phrase to use for encrypting the private signing key.
     */
    public readonly signingKeyPassword!: pulumi.Output<string>;
    /**
     * Specifies a private key for re-signing of signed Java applets after patching.
     */
    public readonly splitTunneling!: pulumi.Output<string>;

    /**
     * Create a LtmProfileRewrite resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LtmProfileRewriteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LtmProfileRewriteArgs | LtmProfileRewriteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LtmProfileRewriteState | undefined;
            resourceInputs["bypassLists"] = state ? state.bypassLists : undefined;
            resourceInputs["caFile"] = state ? state.caFile : undefined;
            resourceInputs["cacheType"] = state ? state.cacheType : undefined;
            resourceInputs["cookieRules"] = state ? state.cookieRules : undefined;
            resourceInputs["crlFile"] = state ? state.crlFile : undefined;
            resourceInputs["defaultsFrom"] = state ? state.defaultsFrom : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["requests"] = state ? state.requests : undefined;
            resourceInputs["responses"] = state ? state.responses : undefined;
            resourceInputs["rewriteLists"] = state ? state.rewriteLists : undefined;
            resourceInputs["rewriteMode"] = state ? state.rewriteMode : undefined;
            resourceInputs["signingCert"] = state ? state.signingCert : undefined;
            resourceInputs["signingKey"] = state ? state.signingKey : undefined;
            resourceInputs["signingKeyPassword"] = state ? state.signingKeyPassword : undefined;
            resourceInputs["splitTunneling"] = state ? state.splitTunneling : undefined;
        } else {
            const args = argsOrState as LtmProfileRewriteArgs | undefined;
            if ((!args || args.rewriteMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rewriteMode'");
            }
            resourceInputs["bypassLists"] = args ? args.bypassLists : undefined;
            resourceInputs["caFile"] = args ? args.caFile : undefined;
            resourceInputs["cacheType"] = args ? args.cacheType : undefined;
            resourceInputs["cookieRules"] = args ? args.cookieRules : undefined;
            resourceInputs["crlFile"] = args ? args.crlFile : undefined;
            resourceInputs["defaultsFrom"] = args ? args.defaultsFrom : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["requests"] = args ? args.requests : undefined;
            resourceInputs["responses"] = args ? args.responses : undefined;
            resourceInputs["rewriteLists"] = args ? args.rewriteLists : undefined;
            resourceInputs["rewriteMode"] = args ? args.rewriteMode : undefined;
            resourceInputs["signingCert"] = args ? args.signingCert : undefined;
            resourceInputs["signingKey"] = args ? args.signingKey : undefined;
            resourceInputs["signingKeyPassword"] = args?.signingKeyPassword ? pulumi.secret(args.signingKeyPassword) : undefined;
            resourceInputs["splitTunneling"] = args ? args.splitTunneling : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["signingKeyPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(LtmProfileRewrite.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LtmProfileRewrite resources.
 */
export interface LtmProfileRewriteState {
    /**
     * Specifies a list of URIs to bypass inside a web page when the page is accessed using Portal Access.
     */
    bypassLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a CA against which to verify signed Java applets signatures.
     */
    caFile?: pulumi.Input<string>;
    /**
     * Specifies the type of client caching.
     */
    cacheType?: pulumi.Input<string>;
    cookieRules?: pulumi.Input<pulumi.Input<inputs.LtmProfileRewriteCookieRule>[]>;
    /**
     * Specifies a CRL against which to verify signed Java applets signature certificates.
     */
    crlFile?: pulumi.Input<string>;
    /**
     * Inherit defaults from parent profile.
     */
    defaultsFrom?: pulumi.Input<string>;
    /**
     * Name of the rewrite profile.
     */
    name?: pulumi.Input<string>;
    requests?: pulumi.Input<pulumi.Input<inputs.LtmProfileRewriteRequest>[]>;
    responses?: pulumi.Input<pulumi.Input<inputs.LtmProfileRewriteResponse>[]>;
    /**
     * Specifies a list of URIs to rewrite inside a web page when the page is accessed using Portal Access.
     */
    rewriteLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the type of rewrite operations.
     */
    rewriteMode?: pulumi.Input<string>;
    /**
     * Specifies a certificate to use for re-signing of signed Java applets after patching.
     */
    signingCert?: pulumi.Input<string>;
    /**
     * Specifies a private key for re-signing of signed Java applets after patching.
     */
    signingKey?: pulumi.Input<string>;
    /**
     * Specifies a pass phrase to use for encrypting the private signing key.
     */
    signingKeyPassword?: pulumi.Input<string>;
    /**
     * Specifies a private key for re-signing of signed Java applets after patching.
     */
    splitTunneling?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LtmProfileRewrite resource.
 */
export interface LtmProfileRewriteArgs {
    /**
     * Specifies a list of URIs to bypass inside a web page when the page is accessed using Portal Access.
     */
    bypassLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a CA against which to verify signed Java applets signatures.
     */
    caFile?: pulumi.Input<string>;
    /**
     * Specifies the type of client caching.
     */
    cacheType?: pulumi.Input<string>;
    cookieRules?: pulumi.Input<pulumi.Input<inputs.LtmProfileRewriteCookieRule>[]>;
    /**
     * Specifies a CRL against which to verify signed Java applets signature certificates.
     */
    crlFile?: pulumi.Input<string>;
    /**
     * Inherit defaults from parent profile.
     */
    defaultsFrom?: pulumi.Input<string>;
    /**
     * Name of the rewrite profile.
     */
    name?: pulumi.Input<string>;
    requests?: pulumi.Input<pulumi.Input<inputs.LtmProfileRewriteRequest>[]>;
    responses?: pulumi.Input<pulumi.Input<inputs.LtmProfileRewriteResponse>[]>;
    /**
     * Specifies a list of URIs to rewrite inside a web page when the page is accessed using Portal Access.
     */
    rewriteLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the type of rewrite operations.
     */
    rewriteMode: pulumi.Input<string>;
    /**
     * Specifies a certificate to use for re-signing of signed Java applets after patching.
     */
    signingCert?: pulumi.Input<string>;
    /**
     * Specifies a private key for re-signing of signed Java applets after patching.
     */
    signingKey?: pulumi.Input<string>;
    /**
     * Specifies a pass phrase to use for encrypting the private signing key.
     */
    signingKeyPassword?: pulumi.Input<string>;
    /**
     * Specifies a private key for re-signing of signed Java applets after patching.
     */
    splitTunneling?: pulumi.Input<string>;
}
