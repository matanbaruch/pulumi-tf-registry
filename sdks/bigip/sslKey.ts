// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SslKey extends pulumi.CustomResource {
    /**
     * Get an existing SslKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SslKeyState, opts?: pulumi.CustomResourceOptions): SslKey {
        return new SslKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bigip:index/sslKey:SslKey';

    /**
     * Returns true if the given object is an instance of SslKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SslKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SslKey.__pulumiType;
    }

    /**
     * Content of SSL certificate key present on local Disk
     */
    public readonly content!: pulumi.Output<string>;
    /**
     * Full Path Name of ssl key
     */
    public readonly fullPath!: pulumi.Output<string>;
    /**
     * Name of SSL Certificate key with .key extension
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Partition of ssl certificate key
     */
    public readonly partition!: pulumi.Output<string | undefined>;
    /**
     * Passphrase on key.
     */
    public readonly passphrase!: pulumi.Output<string | undefined>;

    /**
     * Create a SslKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SslKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SslKeyArgs | SslKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SslKeyState | undefined;
            resourceInputs["content"] = state ? state.content : undefined;
            resourceInputs["fullPath"] = state ? state.fullPath : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["partition"] = state ? state.partition : undefined;
            resourceInputs["passphrase"] = state ? state.passphrase : undefined;
        } else {
            const args = argsOrState as SslKeyArgs | undefined;
            if ((!args || args.content === undefined) && !opts.urn) {
                throw new Error("Missing required property 'content'");
            }
            resourceInputs["content"] = args?.content ? pulumi.secret(args.content) : undefined;
            resourceInputs["fullPath"] = args ? args.fullPath : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["partition"] = args ? args.partition : undefined;
            resourceInputs["passphrase"] = args?.passphrase ? pulumi.secret(args.passphrase) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["content", "passphrase"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SslKey.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SslKey resources.
 */
export interface SslKeyState {
    /**
     * Content of SSL certificate key present on local Disk
     */
    content?: pulumi.Input<string>;
    /**
     * Full Path Name of ssl key
     */
    fullPath?: pulumi.Input<string>;
    /**
     * Name of SSL Certificate key with .key extension
     */
    name?: pulumi.Input<string>;
    /**
     * Partition of ssl certificate key
     */
    partition?: pulumi.Input<string>;
    /**
     * Passphrase on key.
     */
    passphrase?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SslKey resource.
 */
export interface SslKeyArgs {
    /**
     * Content of SSL certificate key present on local Disk
     */
    content: pulumi.Input<string>;
    /**
     * Full Path Name of ssl key
     */
    fullPath?: pulumi.Input<string>;
    /**
     * Name of SSL Certificate key with .key extension
     */
    name?: pulumi.Input<string>;
    /**
     * Partition of ssl certificate key
     */
    partition?: pulumi.Input<string>;
    /**
     * Passphrase on key.
     */
    passphrase?: pulumi.Input<string>;
}
