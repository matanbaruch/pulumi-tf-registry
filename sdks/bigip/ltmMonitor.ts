// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LtmMonitor extends pulumi.CustomResource {
    /**
     * Get an existing LtmMonitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LtmMonitorState, opts?: pulumi.CustomResourceOptions): LtmMonitor {
        return new LtmMonitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bigip:index/ltmMonitor:LtmMonitor';

    /**
     * Returns true if the given object is an instance of LtmMonitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LtmMonitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LtmMonitor.__pulumiType;
    }

    /**
     * Specifies whether adaptive response time monitoring is enabled for this monitor. The default is Disabled
     */
    public readonly adaptive!: pulumi.Output<string>;
    /**
     * Specifies the absolute number of milliseconds that may not be exceeded by a monitor probe, regardless of Allowed
     * Divergence
     */
    public readonly adaptiveLimit!: pulumi.Output<number>;
    /**
     * Specifies the location in the LDAP tree from which the monitor starts the health check
     */
    public readonly base!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether the system will query the LDAP servers pointed to by any referrals in the query results.
     */
    public readonly chaseReferrals!: pulumi.Output<string>;
    /**
     * Specifies, when enabled, that the SSL options setting (in OpenSSL) is set to ALL. The default value is enabled.
     */
    public readonly compatibility!: pulumi.Output<string | undefined>;
    /**
     * Custom parent monitor to inherit from.
     */
    public readonly customParent!: pulumi.Output<string | undefined>;
    /**
     * the database in which your user is created
     */
    public readonly database!: pulumi.Output<string | undefined>;
    /**
     * Alias for the destination
     */
    public readonly destination!: pulumi.Output<string>;
    /**
     * Specifies the full path and file name of the file that the system attempts to download. The health check is successful
     * if the system can download the file.
     */
    public readonly filename!: pulumi.Output<string | undefined>;
    /**
     * Specifies an LDAP key for which the monitor searches
     */
    public readonly filter!: pulumi.Output<string | undefined>;
    /**
     * Specifies, in seconds, the frequency at which the system issues the monitor check when either the resource is down or
     * the status of the resource is unknown. The default is 5
     */
    public readonly interval!: pulumi.Output<number>;
    /**
     * Displays the differentiated services code point (DSCP).The default is 0 (zero)
     */
    public readonly ipDscp!: pulumi.Output<number>;
    /**
     * Specifies whether the target must include attributes in its response to be considered up. The options are no (Specifies
     * that the system performs only a one-level search (based on the Filter setting), and does not require that the target
     * returns any attributes.) and yes (Specifies that the system performs a sub-tree search, and if the target returns no
     * attributes, the target is considered down.)
     */
    public readonly mandatoryAttributes!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether the system automatically changes the status of a resource to Enabled at the next successful monitor
     * check
     */
    public readonly manualResume!: pulumi.Output<string>;
    /**
     * Specifies the data transfer process (DTP) mode. The default value is passive.
     */
    public readonly mode!: pulumi.Output<string>;
    /**
     * Name of the monitor
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Existing monitor to inherit from. Must be one of /Common/http, /Common/https, /Common/icmp, /Common/gateway_icmp or
     * /Common/tcp_half_open or /Common/smtp.
     */
    public readonly parent!: pulumi.Output<string>;
    /**
     * Specifies the password if the monitored target requires authentication
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Specifies the regular expression representing the text string that the monitor looks for in the returned resource.
     */
    public readonly receive!: pulumi.Output<string | undefined>;
    /**
     * The system marks the node or pool member disabled when its response matches Receive Disable String but not Receive
     * String.
     */
    public readonly receiveDisable!: pulumi.Output<string | undefined>;
    /**
     * Instructs the system to mark the target resource down when the test is successful.
     */
    public readonly reverse!: pulumi.Output<string>;
    /**
     * Specifies the secure communications protocol that the monitor uses to communicate with the target. The options are none
     * (Specifies that the system does not use a security protocol for communications with the target.), ssl (Specifies that
     * the system uses the SSL protocol for communications with the target.), and tls (Specifies that the system uses the TLS
     * protocol for communications with the target.)
     */
    public readonly security!: pulumi.Output<string | undefined>;
    /**
     * Specifies the text string that the monitor sends to the target object.
     */
    public readonly send!: pulumi.Output<string>;
    /**
     * the ssl profile
     */
    public readonly sslProfile!: pulumi.Output<string | undefined>;
    /**
     * Specifies the number of seconds to wait after a resource first responds correctly to the monitor before setting the
     * resource to up.
     */
    public readonly timeUntilUp!: pulumi.Output<number>;
    /**
     * Specifies the number of seconds the target has in which to respond to the monitor request. The default is 16 seconds
     */
    public readonly timeout!: pulumi.Output<number>;
    /**
     * Specifies whether the monitor operates in transparent mode.
     */
    public readonly transparent!: pulumi.Output<string>;
    /**
     * Specifies the interval for the system to use to perform the health check when a resource is up. The default is 0
     * (Disabled)
     */
    public readonly upInterval!: pulumi.Output<number>;
    /**
     * Specifies the user name if the monitored target requires authentication
     */
    public readonly username!: pulumi.Output<string | undefined>;

    /**
     * Create a LtmMonitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LtmMonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LtmMonitorArgs | LtmMonitorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LtmMonitorState | undefined;
            resourceInputs["adaptive"] = state ? state.adaptive : undefined;
            resourceInputs["adaptiveLimit"] = state ? state.adaptiveLimit : undefined;
            resourceInputs["base"] = state ? state.base : undefined;
            resourceInputs["chaseReferrals"] = state ? state.chaseReferrals : undefined;
            resourceInputs["compatibility"] = state ? state.compatibility : undefined;
            resourceInputs["customParent"] = state ? state.customParent : undefined;
            resourceInputs["database"] = state ? state.database : undefined;
            resourceInputs["destination"] = state ? state.destination : undefined;
            resourceInputs["filename"] = state ? state.filename : undefined;
            resourceInputs["filter"] = state ? state.filter : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["ipDscp"] = state ? state.ipDscp : undefined;
            resourceInputs["mandatoryAttributes"] = state ? state.mandatoryAttributes : undefined;
            resourceInputs["manualResume"] = state ? state.manualResume : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parent"] = state ? state.parent : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["receive"] = state ? state.receive : undefined;
            resourceInputs["receiveDisable"] = state ? state.receiveDisable : undefined;
            resourceInputs["reverse"] = state ? state.reverse : undefined;
            resourceInputs["security"] = state ? state.security : undefined;
            resourceInputs["send"] = state ? state.send : undefined;
            resourceInputs["sslProfile"] = state ? state.sslProfile : undefined;
            resourceInputs["timeUntilUp"] = state ? state.timeUntilUp : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["transparent"] = state ? state.transparent : undefined;
            resourceInputs["upInterval"] = state ? state.upInterval : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as LtmMonitorArgs | undefined;
            if ((!args || args.parent === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parent'");
            }
            resourceInputs["adaptive"] = args ? args.adaptive : undefined;
            resourceInputs["adaptiveLimit"] = args ? args.adaptiveLimit : undefined;
            resourceInputs["base"] = args ? args.base : undefined;
            resourceInputs["chaseReferrals"] = args ? args.chaseReferrals : undefined;
            resourceInputs["compatibility"] = args ? args.compatibility : undefined;
            resourceInputs["customParent"] = args ? args.customParent : undefined;
            resourceInputs["database"] = args ? args.database : undefined;
            resourceInputs["destination"] = args ? args.destination : undefined;
            resourceInputs["filename"] = args ? args.filename : undefined;
            resourceInputs["filter"] = args ? args.filter : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["ipDscp"] = args ? args.ipDscp : undefined;
            resourceInputs["mandatoryAttributes"] = args ? args.mandatoryAttributes : undefined;
            resourceInputs["manualResume"] = args ? args.manualResume : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parent"] = args ? args.parent : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["receive"] = args ? args.receive : undefined;
            resourceInputs["receiveDisable"] = args ? args.receiveDisable : undefined;
            resourceInputs["reverse"] = args ? args.reverse : undefined;
            resourceInputs["security"] = args ? args.security : undefined;
            resourceInputs["send"] = args ? args.send : undefined;
            resourceInputs["sslProfile"] = args ? args.sslProfile : undefined;
            resourceInputs["timeUntilUp"] = args ? args.timeUntilUp : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["transparent"] = args ? args.transparent : undefined;
            resourceInputs["upInterval"] = args ? args.upInterval : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(LtmMonitor.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LtmMonitor resources.
 */
export interface LtmMonitorState {
    /**
     * Specifies whether adaptive response time monitoring is enabled for this monitor. The default is Disabled
     */
    adaptive?: pulumi.Input<string>;
    /**
     * Specifies the absolute number of milliseconds that may not be exceeded by a monitor probe, regardless of Allowed
     * Divergence
     */
    adaptiveLimit?: pulumi.Input<number>;
    /**
     * Specifies the location in the LDAP tree from which the monitor starts the health check
     */
    base?: pulumi.Input<string>;
    /**
     * Specifies whether the system will query the LDAP servers pointed to by any referrals in the query results.
     */
    chaseReferrals?: pulumi.Input<string>;
    /**
     * Specifies, when enabled, that the SSL options setting (in OpenSSL) is set to ALL. The default value is enabled.
     */
    compatibility?: pulumi.Input<string>;
    /**
     * Custom parent monitor to inherit from.
     */
    customParent?: pulumi.Input<string>;
    /**
     * the database in which your user is created
     */
    database?: pulumi.Input<string>;
    /**
     * Alias for the destination
     */
    destination?: pulumi.Input<string>;
    /**
     * Specifies the full path and file name of the file that the system attempts to download. The health check is successful
     * if the system can download the file.
     */
    filename?: pulumi.Input<string>;
    /**
     * Specifies an LDAP key for which the monitor searches
     */
    filter?: pulumi.Input<string>;
    /**
     * Specifies, in seconds, the frequency at which the system issues the monitor check when either the resource is down or
     * the status of the resource is unknown. The default is 5
     */
    interval?: pulumi.Input<number>;
    /**
     * Displays the differentiated services code point (DSCP).The default is 0 (zero)
     */
    ipDscp?: pulumi.Input<number>;
    /**
     * Specifies whether the target must include attributes in its response to be considered up. The options are no (Specifies
     * that the system performs only a one-level search (based on the Filter setting), and does not require that the target
     * returns any attributes.) and yes (Specifies that the system performs a sub-tree search, and if the target returns no
     * attributes, the target is considered down.)
     */
    mandatoryAttributes?: pulumi.Input<string>;
    /**
     * Specifies whether the system automatically changes the status of a resource to Enabled at the next successful monitor
     * check
     */
    manualResume?: pulumi.Input<string>;
    /**
     * Specifies the data transfer process (DTP) mode. The default value is passive.
     */
    mode?: pulumi.Input<string>;
    /**
     * Name of the monitor
     */
    name?: pulumi.Input<string>;
    /**
     * Existing monitor to inherit from. Must be one of /Common/http, /Common/https, /Common/icmp, /Common/gateway_icmp or
     * /Common/tcp_half_open or /Common/smtp.
     */
    parent?: pulumi.Input<string>;
    /**
     * Specifies the password if the monitored target requires authentication
     */
    password?: pulumi.Input<string>;
    /**
     * Specifies the regular expression representing the text string that the monitor looks for in the returned resource.
     */
    receive?: pulumi.Input<string>;
    /**
     * The system marks the node or pool member disabled when its response matches Receive Disable String but not Receive
     * String.
     */
    receiveDisable?: pulumi.Input<string>;
    /**
     * Instructs the system to mark the target resource down when the test is successful.
     */
    reverse?: pulumi.Input<string>;
    /**
     * Specifies the secure communications protocol that the monitor uses to communicate with the target. The options are none
     * (Specifies that the system does not use a security protocol for communications with the target.), ssl (Specifies that
     * the system uses the SSL protocol for communications with the target.), and tls (Specifies that the system uses the TLS
     * protocol for communications with the target.)
     */
    security?: pulumi.Input<string>;
    /**
     * Specifies the text string that the monitor sends to the target object.
     */
    send?: pulumi.Input<string>;
    /**
     * the ssl profile
     */
    sslProfile?: pulumi.Input<string>;
    /**
     * Specifies the number of seconds to wait after a resource first responds correctly to the monitor before setting the
     * resource to up.
     */
    timeUntilUp?: pulumi.Input<number>;
    /**
     * Specifies the number of seconds the target has in which to respond to the monitor request. The default is 16 seconds
     */
    timeout?: pulumi.Input<number>;
    /**
     * Specifies whether the monitor operates in transparent mode.
     */
    transparent?: pulumi.Input<string>;
    /**
     * Specifies the interval for the system to use to perform the health check when a resource is up. The default is 0
     * (Disabled)
     */
    upInterval?: pulumi.Input<number>;
    /**
     * Specifies the user name if the monitored target requires authentication
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LtmMonitor resource.
 */
export interface LtmMonitorArgs {
    /**
     * Specifies whether adaptive response time monitoring is enabled for this monitor. The default is Disabled
     */
    adaptive?: pulumi.Input<string>;
    /**
     * Specifies the absolute number of milliseconds that may not be exceeded by a monitor probe, regardless of Allowed
     * Divergence
     */
    adaptiveLimit?: pulumi.Input<number>;
    /**
     * Specifies the location in the LDAP tree from which the monitor starts the health check
     */
    base?: pulumi.Input<string>;
    /**
     * Specifies whether the system will query the LDAP servers pointed to by any referrals in the query results.
     */
    chaseReferrals?: pulumi.Input<string>;
    /**
     * Specifies, when enabled, that the SSL options setting (in OpenSSL) is set to ALL. The default value is enabled.
     */
    compatibility?: pulumi.Input<string>;
    /**
     * Custom parent monitor to inherit from.
     */
    customParent?: pulumi.Input<string>;
    /**
     * the database in which your user is created
     */
    database?: pulumi.Input<string>;
    /**
     * Alias for the destination
     */
    destination?: pulumi.Input<string>;
    /**
     * Specifies the full path and file name of the file that the system attempts to download. The health check is successful
     * if the system can download the file.
     */
    filename?: pulumi.Input<string>;
    /**
     * Specifies an LDAP key for which the monitor searches
     */
    filter?: pulumi.Input<string>;
    /**
     * Specifies, in seconds, the frequency at which the system issues the monitor check when either the resource is down or
     * the status of the resource is unknown. The default is 5
     */
    interval?: pulumi.Input<number>;
    /**
     * Displays the differentiated services code point (DSCP).The default is 0 (zero)
     */
    ipDscp?: pulumi.Input<number>;
    /**
     * Specifies whether the target must include attributes in its response to be considered up. The options are no (Specifies
     * that the system performs only a one-level search (based on the Filter setting), and does not require that the target
     * returns any attributes.) and yes (Specifies that the system performs a sub-tree search, and if the target returns no
     * attributes, the target is considered down.)
     */
    mandatoryAttributes?: pulumi.Input<string>;
    /**
     * Specifies whether the system automatically changes the status of a resource to Enabled at the next successful monitor
     * check
     */
    manualResume?: pulumi.Input<string>;
    /**
     * Specifies the data transfer process (DTP) mode. The default value is passive.
     */
    mode?: pulumi.Input<string>;
    /**
     * Name of the monitor
     */
    name?: pulumi.Input<string>;
    /**
     * Existing monitor to inherit from. Must be one of /Common/http, /Common/https, /Common/icmp, /Common/gateway_icmp or
     * /Common/tcp_half_open or /Common/smtp.
     */
    parent: pulumi.Input<string>;
    /**
     * Specifies the password if the monitored target requires authentication
     */
    password?: pulumi.Input<string>;
    /**
     * Specifies the regular expression representing the text string that the monitor looks for in the returned resource.
     */
    receive?: pulumi.Input<string>;
    /**
     * The system marks the node or pool member disabled when its response matches Receive Disable String but not Receive
     * String.
     */
    receiveDisable?: pulumi.Input<string>;
    /**
     * Instructs the system to mark the target resource down when the test is successful.
     */
    reverse?: pulumi.Input<string>;
    /**
     * Specifies the secure communications protocol that the monitor uses to communicate with the target. The options are none
     * (Specifies that the system does not use a security protocol for communications with the target.), ssl (Specifies that
     * the system uses the SSL protocol for communications with the target.), and tls (Specifies that the system uses the TLS
     * protocol for communications with the target.)
     */
    security?: pulumi.Input<string>;
    /**
     * Specifies the text string that the monitor sends to the target object.
     */
    send?: pulumi.Input<string>;
    /**
     * the ssl profile
     */
    sslProfile?: pulumi.Input<string>;
    /**
     * Specifies the number of seconds to wait after a resource first responds correctly to the monitor before setting the
     * resource to up.
     */
    timeUntilUp?: pulumi.Input<number>;
    /**
     * Specifies the number of seconds the target has in which to respond to the monitor request. The default is 16 seconds
     */
    timeout?: pulumi.Input<number>;
    /**
     * Specifies whether the monitor operates in transparent mode.
     */
    transparent?: pulumi.Input<string>;
    /**
     * Specifies the interval for the system to use to perform the health check when a resource is up. The default is 0
     * (Disabled)
     */
    upInterval?: pulumi.Input<number>;
    /**
     * Specifies the user name if the monitored target requires authentication
     */
    username?: pulumi.Input<string>;
}
