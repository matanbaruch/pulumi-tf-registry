// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LtmVirtualServer extends pulumi.CustomResource {
    /**
     * Get an existing LtmVirtualServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LtmVirtualServerState, opts?: pulumi.CustomResourceOptions): LtmVirtualServer {
        return new LtmVirtualServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bigip:index/ltmVirtualServer:LtmVirtualServer';

    /**
     * Returns true if the given object is an instance of LtmVirtualServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LtmVirtualServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LtmVirtualServer.__pulumiType;
    }

    public readonly clientProfiles!: pulumi.Output<string[] | undefined>;
    public readonly defaultPersistenceProfile!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Specifies destination IP address information to which the virtual server sends traffic
     */
    public readonly destination!: pulumi.Output<string | undefined>;
    /**
     * Fallback persistence profile
     */
    public readonly fallbackPersistenceProfile!: pulumi.Output<string>;
    /**
     * Applies the specified AFM policy to the virtual in an enforcing way,when creating a new virtual, if this parameter is
     * not specified, the enforced is disabled.this should be in full path ex: `/Common/afm-test-policy`
     */
    public readonly firewallEnforcedPolicy!: pulumi.Output<string>;
    /**
     * Specifies a network protocol name you want the system to use to direct traffic on this virtual server. The default is
     * TCP. The Protocol setting is not available when you select Performance (HTTP) as the Type.
     */
    public readonly ipProtocol!: pulumi.Output<string | undefined>;
    public readonly irules!: pulumi.Output<string[] | undefined>;
    /**
     * subnet mask
     */
    public readonly mask!: pulumi.Output<string>;
    /**
     * Name of the virtual server
     */
    public readonly name!: pulumi.Output<string>;
    public readonly perFlowRequestAccessPolicy!: pulumi.Output<string>;
    public readonly persistenceProfiles!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies the policies for the virtual server
     */
    public readonly policies!: pulumi.Output<string[] | undefined>;
    /**
     * Default pool for this virtual server
     */
    public readonly pool!: pulumi.Output<string | undefined>;
    /**
     * Listen port for the virtual server
     */
    public readonly port!: pulumi.Output<number>;
    public readonly profiles!: pulumi.Output<string[]>;
    public readonly securityLogProfiles!: pulumi.Output<string[] | undefined>;
    public readonly serverProfiles!: pulumi.Output<string[] | undefined>;
    /**
     * Name of the snatpool to use. Requires source_address_translation to be set to 'snat'.
     */
    public readonly snatpool!: pulumi.Output<string>;
    /**
     * Source IP and mask for the virtual server
     */
    public readonly source!: pulumi.Output<string>;
    /**
     * none, automap, snat
     */
    public readonly sourceAddressTranslation!: pulumi.Output<string>;
    public readonly sourcePort!: pulumi.Output<string>;
    /**
     * Specifies whether the virtual server and its resources are available for load balancing. The default is Enabled
     */
    public readonly state!: pulumi.Output<string | undefined>;
    /**
     * Specifies destination traffic matching information to which the virtual server sends traffic
     */
    public readonly trafficmatchingCriteria!: pulumi.Output<string>;
    /**
     * Specifies, when checked (enabled), that the system translates the address of the virtual server. When cleared
     * (disabled), specifies that the system uses the address without translation. This option is useful when the system is
     * load balancing devices that have the same IP address. The default is enabled
     */
    public readonly translateAddress!: pulumi.Output<string | undefined>;
    /**
     * Specifies, when checked (enabled), that the system translates the port of the virtual server. When cleared (disabled),
     * specifies that the system uses the port without translation. Turning off port translation for a virtual server is useful
     * if you want to use the virtual server to load balance connections to any service. The default is enabled.
     */
    public readonly translatePort!: pulumi.Output<string | undefined>;
    public readonly vlans!: pulumi.Output<string[] | undefined>;
    /**
     * Enables the virtual server on the VLANs specified by the VLANs option. By default it is set to false
     */
    public readonly vlansEnabled!: pulumi.Output<boolean | undefined>;

    /**
     * Create a LtmVirtualServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: LtmVirtualServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LtmVirtualServerArgs | LtmVirtualServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LtmVirtualServerState | undefined;
            resourceInputs["clientProfiles"] = state ? state.clientProfiles : undefined;
            resourceInputs["defaultPersistenceProfile"] = state ? state.defaultPersistenceProfile : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destination"] = state ? state.destination : undefined;
            resourceInputs["fallbackPersistenceProfile"] = state ? state.fallbackPersistenceProfile : undefined;
            resourceInputs["firewallEnforcedPolicy"] = state ? state.firewallEnforcedPolicy : undefined;
            resourceInputs["ipProtocol"] = state ? state.ipProtocol : undefined;
            resourceInputs["irules"] = state ? state.irules : undefined;
            resourceInputs["mask"] = state ? state.mask : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["perFlowRequestAccessPolicy"] = state ? state.perFlowRequestAccessPolicy : undefined;
            resourceInputs["persistenceProfiles"] = state ? state.persistenceProfiles : undefined;
            resourceInputs["policies"] = state ? state.policies : undefined;
            resourceInputs["pool"] = state ? state.pool : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["profiles"] = state ? state.profiles : undefined;
            resourceInputs["securityLogProfiles"] = state ? state.securityLogProfiles : undefined;
            resourceInputs["serverProfiles"] = state ? state.serverProfiles : undefined;
            resourceInputs["snatpool"] = state ? state.snatpool : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["sourceAddressTranslation"] = state ? state.sourceAddressTranslation : undefined;
            resourceInputs["sourcePort"] = state ? state.sourcePort : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["trafficmatchingCriteria"] = state ? state.trafficmatchingCriteria : undefined;
            resourceInputs["translateAddress"] = state ? state.translateAddress : undefined;
            resourceInputs["translatePort"] = state ? state.translatePort : undefined;
            resourceInputs["vlans"] = state ? state.vlans : undefined;
            resourceInputs["vlansEnabled"] = state ? state.vlansEnabled : undefined;
        } else {
            const args = argsOrState as LtmVirtualServerArgs | undefined;
            resourceInputs["clientProfiles"] = args ? args.clientProfiles : undefined;
            resourceInputs["defaultPersistenceProfile"] = args ? args.defaultPersistenceProfile : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destination"] = args ? args.destination : undefined;
            resourceInputs["fallbackPersistenceProfile"] = args ? args.fallbackPersistenceProfile : undefined;
            resourceInputs["firewallEnforcedPolicy"] = args ? args.firewallEnforcedPolicy : undefined;
            resourceInputs["ipProtocol"] = args ? args.ipProtocol : undefined;
            resourceInputs["irules"] = args ? args.irules : undefined;
            resourceInputs["mask"] = args ? args.mask : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["perFlowRequestAccessPolicy"] = args ? args.perFlowRequestAccessPolicy : undefined;
            resourceInputs["persistenceProfiles"] = args ? args.persistenceProfiles : undefined;
            resourceInputs["policies"] = args ? args.policies : undefined;
            resourceInputs["pool"] = args ? args.pool : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["profiles"] = args ? args.profiles : undefined;
            resourceInputs["securityLogProfiles"] = args ? args.securityLogProfiles : undefined;
            resourceInputs["serverProfiles"] = args ? args.serverProfiles : undefined;
            resourceInputs["snatpool"] = args ? args.snatpool : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["sourceAddressTranslation"] = args ? args.sourceAddressTranslation : undefined;
            resourceInputs["sourcePort"] = args ? args.sourcePort : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["trafficmatchingCriteria"] = args ? args.trafficmatchingCriteria : undefined;
            resourceInputs["translateAddress"] = args ? args.translateAddress : undefined;
            resourceInputs["translatePort"] = args ? args.translatePort : undefined;
            resourceInputs["vlans"] = args ? args.vlans : undefined;
            resourceInputs["vlansEnabled"] = args ? args.vlansEnabled : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LtmVirtualServer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LtmVirtualServer resources.
 */
export interface LtmVirtualServerState {
    clientProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    defaultPersistenceProfile?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    /**
     * Specifies destination IP address information to which the virtual server sends traffic
     */
    destination?: pulumi.Input<string>;
    /**
     * Fallback persistence profile
     */
    fallbackPersistenceProfile?: pulumi.Input<string>;
    /**
     * Applies the specified AFM policy to the virtual in an enforcing way,when creating a new virtual, if this parameter is
     * not specified, the enforced is disabled.this should be in full path ex: `/Common/afm-test-policy`
     */
    firewallEnforcedPolicy?: pulumi.Input<string>;
    /**
     * Specifies a network protocol name you want the system to use to direct traffic on this virtual server. The default is
     * TCP. The Protocol setting is not available when you select Performance (HTTP) as the Type.
     */
    ipProtocol?: pulumi.Input<string>;
    irules?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * subnet mask
     */
    mask?: pulumi.Input<string>;
    /**
     * Name of the virtual server
     */
    name?: pulumi.Input<string>;
    perFlowRequestAccessPolicy?: pulumi.Input<string>;
    persistenceProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the policies for the virtual server
     */
    policies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Default pool for this virtual server
     */
    pool?: pulumi.Input<string>;
    /**
     * Listen port for the virtual server
     */
    port?: pulumi.Input<number>;
    profiles?: pulumi.Input<pulumi.Input<string>[]>;
    securityLogProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    serverProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the snatpool to use. Requires source_address_translation to be set to 'snat'.
     */
    snatpool?: pulumi.Input<string>;
    /**
     * Source IP and mask for the virtual server
     */
    source?: pulumi.Input<string>;
    /**
     * none, automap, snat
     */
    sourceAddressTranslation?: pulumi.Input<string>;
    sourcePort?: pulumi.Input<string>;
    /**
     * Specifies whether the virtual server and its resources are available for load balancing. The default is Enabled
     */
    state?: pulumi.Input<string>;
    /**
     * Specifies destination traffic matching information to which the virtual server sends traffic
     */
    trafficmatchingCriteria?: pulumi.Input<string>;
    /**
     * Specifies, when checked (enabled), that the system translates the address of the virtual server. When cleared
     * (disabled), specifies that the system uses the address without translation. This option is useful when the system is
     * load balancing devices that have the same IP address. The default is enabled
     */
    translateAddress?: pulumi.Input<string>;
    /**
     * Specifies, when checked (enabled), that the system translates the port of the virtual server. When cleared (disabled),
     * specifies that the system uses the port without translation. Turning off port translation for a virtual server is useful
     * if you want to use the virtual server to load balance connections to any service. The default is enabled.
     */
    translatePort?: pulumi.Input<string>;
    vlans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enables the virtual server on the VLANs specified by the VLANs option. By default it is set to false
     */
    vlansEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a LtmVirtualServer resource.
 */
export interface LtmVirtualServerArgs {
    clientProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    defaultPersistenceProfile?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    /**
     * Specifies destination IP address information to which the virtual server sends traffic
     */
    destination?: pulumi.Input<string>;
    /**
     * Fallback persistence profile
     */
    fallbackPersistenceProfile?: pulumi.Input<string>;
    /**
     * Applies the specified AFM policy to the virtual in an enforcing way,when creating a new virtual, if this parameter is
     * not specified, the enforced is disabled.this should be in full path ex: `/Common/afm-test-policy`
     */
    firewallEnforcedPolicy?: pulumi.Input<string>;
    /**
     * Specifies a network protocol name you want the system to use to direct traffic on this virtual server. The default is
     * TCP. The Protocol setting is not available when you select Performance (HTTP) as the Type.
     */
    ipProtocol?: pulumi.Input<string>;
    irules?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * subnet mask
     */
    mask?: pulumi.Input<string>;
    /**
     * Name of the virtual server
     */
    name?: pulumi.Input<string>;
    perFlowRequestAccessPolicy?: pulumi.Input<string>;
    persistenceProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the policies for the virtual server
     */
    policies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Default pool for this virtual server
     */
    pool?: pulumi.Input<string>;
    /**
     * Listen port for the virtual server
     */
    port?: pulumi.Input<number>;
    profiles?: pulumi.Input<pulumi.Input<string>[]>;
    securityLogProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    serverProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the snatpool to use. Requires source_address_translation to be set to 'snat'.
     */
    snatpool?: pulumi.Input<string>;
    /**
     * Source IP and mask for the virtual server
     */
    source?: pulumi.Input<string>;
    /**
     * none, automap, snat
     */
    sourceAddressTranslation?: pulumi.Input<string>;
    sourcePort?: pulumi.Input<string>;
    /**
     * Specifies whether the virtual server and its resources are available for load balancing. The default is Enabled
     */
    state?: pulumi.Input<string>;
    /**
     * Specifies destination traffic matching information to which the virtual server sends traffic
     */
    trafficmatchingCriteria?: pulumi.Input<string>;
    /**
     * Specifies, when checked (enabled), that the system translates the address of the virtual server. When cleared
     * (disabled), specifies that the system uses the address without translation. This option is useful when the system is
     * load balancing devices that have the same IP address. The default is enabled
     */
    translateAddress?: pulumi.Input<string>;
    /**
     * Specifies, when checked (enabled), that the system translates the port of the virtual server. When cleared (disabled),
     * specifies that the system uses the port without translation. Turning off port translation for a virtual server is useful
     * if you want to use the virtual server to load balance connections to any service. The default is enabled.
     */
    translatePort?: pulumi.Input<string>;
    vlans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enables the virtual server on the VLANs specified by the VLANs option. By default it is set to false
     */
    vlansEnabled?: pulumi.Input<boolean>;
}
