// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LtmCipherGroup extends pulumi.CustomResource {
    /**
     * Get an existing LtmCipherGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LtmCipherGroupState, opts?: pulumi.CustomResourceOptions): LtmCipherGroup {
        return new LtmCipherGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bigip:index/ltmCipherGroup:LtmCipherGroup';

    /**
     * Returns true if the given object is an instance of LtmCipherGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LtmCipherGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LtmCipherGroup.__pulumiType;
    }

    /**
     * Specifies the configuration of the allowed groups of ciphers. You can select a cipher rule from the Available Cipher
     * Rules list
     */
    public readonly allows!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies descriptive text that identifies the cipher rule
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Name of the cipher group,name should be in pattern ``partition` + `cipher group name``
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Controls the order of the Cipher String list in the Cipher Audit section. Options are Default, Speed, Strength, FIPS,
     * and Hardware. The rules are processed in the order listed
     */
    public readonly ordering!: pulumi.Output<string | undefined>;
    /**
     * Specifies the configuration of the restrict groups of ciphers. You can select a cipher rule from the Available Cipher
     * Rules list
     */
    public readonly requires!: pulumi.Output<string[] | undefined>;

    /**
     * Create a LtmCipherGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: LtmCipherGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LtmCipherGroupArgs | LtmCipherGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LtmCipherGroupState | undefined;
            resourceInputs["allows"] = state ? state.allows : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ordering"] = state ? state.ordering : undefined;
            resourceInputs["requires"] = state ? state.requires : undefined;
        } else {
            const args = argsOrState as LtmCipherGroupArgs | undefined;
            resourceInputs["allows"] = args ? args.allows : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ordering"] = args ? args.ordering : undefined;
            resourceInputs["requires"] = args ? args.requires : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LtmCipherGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LtmCipherGroup resources.
 */
export interface LtmCipherGroupState {
    /**
     * Specifies the configuration of the allowed groups of ciphers. You can select a cipher rule from the Available Cipher
     * Rules list
     */
    allows?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies descriptive text that identifies the cipher rule
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the cipher group,name should be in pattern ``partition` + `cipher group name``
     */
    name?: pulumi.Input<string>;
    /**
     * Controls the order of the Cipher String list in the Cipher Audit section. Options are Default, Speed, Strength, FIPS,
     * and Hardware. The rules are processed in the order listed
     */
    ordering?: pulumi.Input<string>;
    /**
     * Specifies the configuration of the restrict groups of ciphers. You can select a cipher rule from the Available Cipher
     * Rules list
     */
    requires?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a LtmCipherGroup resource.
 */
export interface LtmCipherGroupArgs {
    /**
     * Specifies the configuration of the allowed groups of ciphers. You can select a cipher rule from the Available Cipher
     * Rules list
     */
    allows?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies descriptive text that identifies the cipher rule
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the cipher group,name should be in pattern ``partition` + `cipher group name``
     */
    name?: pulumi.Input<string>;
    /**
     * Controls the order of the Cipher String list in the Cipher Audit section. Options are Default, Speed, Strength, FIPS,
     * and Hardware. The rules are processed in the order listed
     */
    ordering?: pulumi.Input<string>;
    /**
     * Specifies the configuration of the restrict groups of ciphers. You can select a cipher rule from the Available Cipher
     * Rules list
     */
    requires?: pulumi.Input<pulumi.Input<string>[]>;
}
