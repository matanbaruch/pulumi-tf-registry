// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class WafPolicy extends pulumi.CustomResource {
    /**
     * Get an existing WafPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WafPolicyState, opts?: pulumi.CustomResourceOptions): WafPolicy {
        return new WafPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bigip:index/wafPolicy:WafPolicy';

    /**
     * Returns true if the given object is an instance of WafPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WafPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WafPolicy.__pulumiType;
    }

    /**
     * The character encoding for the web application. The character encoding determines how the policy processes the character
     * sets. The default is Auto detect
     */
    public readonly applicationLanguage!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether the security policy treats microservice URLs, file types, URLs, and parameters as case sensitive or
     * not. When this setting is enabled, the system stores these security policy elements in lowercase in the security policy
     * configuration
     */
    public readonly caseInsensitive!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the description of the policy.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Passive Mode allows the policy to be associated with a Performance L4 Virtual Server (using a FastL4 profile). With
     * FastL4, traffic is analyzed but is not modified in any way.
     */
    public readonly enablePassivemode!: pulumi.Output<boolean | undefined>;
    /**
     * How the system processes a request that triggers a security policy violation
     */
    public readonly enforcementMode!: pulumi.Output<string | undefined>;
    /**
     * file_types settings for policy
     */
    public readonly fileTypes!: pulumi.Output<outputs.WafPolicyFileType[] | undefined>;
    /**
     * graphql_profile settings for policy
     */
    public readonly graphqlProfiles!: pulumi.Output<outputs.WafPolicyGraphqlProfile[] | undefined>;
    /**
     * specify the list of host name that is used to access the application
     */
    public readonly hostNames!: pulumi.Output<outputs.WafPolicyHostName[] | undefined>;
    /**
     * An IP address exception is an IP address that you want the system to treat in a specific way for a security policy. For
     * example, you can specify IP addresses from which the system should always trust traffic, IP addresses for which you do
     * not want the system to generate learning suggestions for the traffic, and IP addresses for which you want to exclude
     * information from the logs
     */
    public readonly ipExceptions!: pulumi.Output<outputs.WafPolicyIpException[] | undefined>;
    /**
     * the modifications section includes actions that modify the declarative policy as it is defined in the adjustments
     * section. The modifications section is updated manually, with the changes generally driven by the learning suggestions
     * provided by the BIG-IP.
     */
    public readonly modifications!: pulumi.Output<string[] | undefined>;
    /**
     * The unique user-given name of the policy. Policy names cannot contain spaces or special characters. Allowed characters
     * are a-z, A-Z, 0-9, dot, dash (-), colon (:) and underscore (_)
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * This section defines the Link for open api files on the policy.
     */
    public readonly openApiFiles!: pulumi.Output<string[] | undefined>;
    /**
     * This section defines parameters that the security policy permits in requests.
     */
    public readonly parameters!: pulumi.Output<string[] | undefined>;
    /**
     * Partition of WAF policy
     */
    public readonly partition!: pulumi.Output<string | undefined>;
    /**
     * policy-builder settings for policy
     */
    public readonly policyBuilders!: pulumi.Output<outputs.WafPolicyPolicyBuilder[] | undefined>;
    /**
     * The payload of the WAF Policy to be EXPORTED from BIGIP to OUTPUT
     */
    public /*out*/ readonly policyExportJson!: pulumi.Output<string>;
    public readonly policyId!: pulumi.Output<string>;
    /**
     * The payload of the WAF Policy to be used for IMPORT on to BIGIP
     */
    public readonly policyImportJson!: pulumi.Output<string | undefined>;
    /**
     * When creating a security policy, you can determine whether a security policy differentiates between HTTP and HTTPS URLs.
     * If enabled, the security policy differentiates between HTTP and HTTPS URLs. If disabled, the security policy configures
     * URLs without specifying a specific protocol. This is useful for applications that behave the same for HTTP and HTTPS,
     * and it keeps the security policy from including the same URL twice.
     */
    public readonly protocolIndependent!: pulumi.Output<boolean | undefined>;
    /**
     * The server technology is a server-side application, framework, web server or operating system type that is configured in
     * the policy in order to adapt the policy to the checks needed for the respective technology.
     */
    public readonly serverTechnologies!: pulumi.Output<string[] | undefined>;
    /**
     * Defines behavior when signatures found within a signature-set are detected in a request. Settings are culmulative, so if
     * a signature is found in any set with block enabled, that signature will have block enabled.
     */
    public readonly signatureSets!: pulumi.Output<string[] | undefined>;
    /**
     * This section defines the properties of a signature on the policy.
     */
    public readonly signatures!: pulumi.Output<string[] | undefined>;
    /**
     * bulk signature setting
     */
    public readonly signaturesSettings!: pulumi.Output<outputs.WafPolicySignaturesSetting[] | undefined>;
    /**
     * Specifies the Link of the template used for the policy creation.
     */
    public readonly templateLink!: pulumi.Output<string | undefined>;
    /**
     * Specifies the name of the template used for the policy creation.
     */
    public readonly templateName!: pulumi.Output<string>;
    /**
     * The type of policy you want to create. The default policy type is Security.
     */
    public readonly type!: pulumi.Output<string | undefined>;
    /**
     * In a security policy, you can manually specify the HTTP URLs that are allowed (or disallowed) in traffic to the web
     * application being protected. If you are using automatic policy building (and the policy includes learning URLs), the
     * system can determine which URLs to add, based on legitimate traffic.
     */
    public readonly urls!: pulumi.Output<string[] | undefined>;

    /**
     * Create a WafPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WafPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WafPolicyArgs | WafPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WafPolicyState | undefined;
            resourceInputs["applicationLanguage"] = state ? state.applicationLanguage : undefined;
            resourceInputs["caseInsensitive"] = state ? state.caseInsensitive : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enablePassivemode"] = state ? state.enablePassivemode : undefined;
            resourceInputs["enforcementMode"] = state ? state.enforcementMode : undefined;
            resourceInputs["fileTypes"] = state ? state.fileTypes : undefined;
            resourceInputs["graphqlProfiles"] = state ? state.graphqlProfiles : undefined;
            resourceInputs["hostNames"] = state ? state.hostNames : undefined;
            resourceInputs["ipExceptions"] = state ? state.ipExceptions : undefined;
            resourceInputs["modifications"] = state ? state.modifications : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["openApiFiles"] = state ? state.openApiFiles : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["partition"] = state ? state.partition : undefined;
            resourceInputs["policyBuilders"] = state ? state.policyBuilders : undefined;
            resourceInputs["policyExportJson"] = state ? state.policyExportJson : undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
            resourceInputs["policyImportJson"] = state ? state.policyImportJson : undefined;
            resourceInputs["protocolIndependent"] = state ? state.protocolIndependent : undefined;
            resourceInputs["serverTechnologies"] = state ? state.serverTechnologies : undefined;
            resourceInputs["signatureSets"] = state ? state.signatureSets : undefined;
            resourceInputs["signatures"] = state ? state.signatures : undefined;
            resourceInputs["signaturesSettings"] = state ? state.signaturesSettings : undefined;
            resourceInputs["templateLink"] = state ? state.templateLink : undefined;
            resourceInputs["templateName"] = state ? state.templateName : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["urls"] = state ? state.urls : undefined;
        } else {
            const args = argsOrState as WafPolicyArgs | undefined;
            if ((!args || args.templateName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'templateName'");
            }
            resourceInputs["applicationLanguage"] = args ? args.applicationLanguage : undefined;
            resourceInputs["caseInsensitive"] = args ? args.caseInsensitive : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enablePassivemode"] = args ? args.enablePassivemode : undefined;
            resourceInputs["enforcementMode"] = args ? args.enforcementMode : undefined;
            resourceInputs["fileTypes"] = args ? args.fileTypes : undefined;
            resourceInputs["graphqlProfiles"] = args ? args.graphqlProfiles : undefined;
            resourceInputs["hostNames"] = args ? args.hostNames : undefined;
            resourceInputs["ipExceptions"] = args ? args.ipExceptions : undefined;
            resourceInputs["modifications"] = args ? args.modifications : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["openApiFiles"] = args ? args.openApiFiles : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["partition"] = args ? args.partition : undefined;
            resourceInputs["policyBuilders"] = args ? args.policyBuilders : undefined;
            resourceInputs["policyId"] = args ? args.policyId : undefined;
            resourceInputs["policyImportJson"] = args ? args.policyImportJson : undefined;
            resourceInputs["protocolIndependent"] = args ? args.protocolIndependent : undefined;
            resourceInputs["serverTechnologies"] = args ? args.serverTechnologies : undefined;
            resourceInputs["signatureSets"] = args ? args.signatureSets : undefined;
            resourceInputs["signatures"] = args ? args.signatures : undefined;
            resourceInputs["signaturesSettings"] = args ? args.signaturesSettings : undefined;
            resourceInputs["templateLink"] = args ? args.templateLink : undefined;
            resourceInputs["templateName"] = args ? args.templateName : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["urls"] = args ? args.urls : undefined;
            resourceInputs["policyExportJson"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WafPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WafPolicy resources.
 */
export interface WafPolicyState {
    /**
     * The character encoding for the web application. The character encoding determines how the policy processes the character
     * sets. The default is Auto detect
     */
    applicationLanguage?: pulumi.Input<string>;
    /**
     * Specifies whether the security policy treats microservice URLs, file types, URLs, and parameters as case sensitive or
     * not. When this setting is enabled, the system stores these security policy elements in lowercase in the security policy
     * configuration
     */
    caseInsensitive?: pulumi.Input<boolean>;
    /**
     * Specifies the description of the policy.
     */
    description?: pulumi.Input<string>;
    /**
     * Passive Mode allows the policy to be associated with a Performance L4 Virtual Server (using a FastL4 profile). With
     * FastL4, traffic is analyzed but is not modified in any way.
     */
    enablePassivemode?: pulumi.Input<boolean>;
    /**
     * How the system processes a request that triggers a security policy violation
     */
    enforcementMode?: pulumi.Input<string>;
    /**
     * file_types settings for policy
     */
    fileTypes?: pulumi.Input<pulumi.Input<inputs.WafPolicyFileType>[]>;
    /**
     * graphql_profile settings for policy
     */
    graphqlProfiles?: pulumi.Input<pulumi.Input<inputs.WafPolicyGraphqlProfile>[]>;
    /**
     * specify the list of host name that is used to access the application
     */
    hostNames?: pulumi.Input<pulumi.Input<inputs.WafPolicyHostName>[]>;
    /**
     * An IP address exception is an IP address that you want the system to treat in a specific way for a security policy. For
     * example, you can specify IP addresses from which the system should always trust traffic, IP addresses for which you do
     * not want the system to generate learning suggestions for the traffic, and IP addresses for which you want to exclude
     * information from the logs
     */
    ipExceptions?: pulumi.Input<pulumi.Input<inputs.WafPolicyIpException>[]>;
    /**
     * the modifications section includes actions that modify the declarative policy as it is defined in the adjustments
     * section. The modifications section is updated manually, with the changes generally driven by the learning suggestions
     * provided by the BIG-IP.
     */
    modifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The unique user-given name of the policy. Policy names cannot contain spaces or special characters. Allowed characters
     * are a-z, A-Z, 0-9, dot, dash (-), colon (:) and underscore (_)
     */
    name?: pulumi.Input<string>;
    /**
     * This section defines the Link for open api files on the policy.
     */
    openApiFiles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This section defines parameters that the security policy permits in requests.
     */
    parameters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Partition of WAF policy
     */
    partition?: pulumi.Input<string>;
    /**
     * policy-builder settings for policy
     */
    policyBuilders?: pulumi.Input<pulumi.Input<inputs.WafPolicyPolicyBuilder>[]>;
    /**
     * The payload of the WAF Policy to be EXPORTED from BIGIP to OUTPUT
     */
    policyExportJson?: pulumi.Input<string>;
    policyId?: pulumi.Input<string>;
    /**
     * The payload of the WAF Policy to be used for IMPORT on to BIGIP
     */
    policyImportJson?: pulumi.Input<string>;
    /**
     * When creating a security policy, you can determine whether a security policy differentiates between HTTP and HTTPS URLs.
     * If enabled, the security policy differentiates between HTTP and HTTPS URLs. If disabled, the security policy configures
     * URLs without specifying a specific protocol. This is useful for applications that behave the same for HTTP and HTTPS,
     * and it keeps the security policy from including the same URL twice.
     */
    protocolIndependent?: pulumi.Input<boolean>;
    /**
     * The server technology is a server-side application, framework, web server or operating system type that is configured in
     * the policy in order to adapt the policy to the checks needed for the respective technology.
     */
    serverTechnologies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Defines behavior when signatures found within a signature-set are detected in a request. Settings are culmulative, so if
     * a signature is found in any set with block enabled, that signature will have block enabled.
     */
    signatureSets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This section defines the properties of a signature on the policy.
     */
    signatures?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * bulk signature setting
     */
    signaturesSettings?: pulumi.Input<pulumi.Input<inputs.WafPolicySignaturesSetting>[]>;
    /**
     * Specifies the Link of the template used for the policy creation.
     */
    templateLink?: pulumi.Input<string>;
    /**
     * Specifies the name of the template used for the policy creation.
     */
    templateName?: pulumi.Input<string>;
    /**
     * The type of policy you want to create. The default policy type is Security.
     */
    type?: pulumi.Input<string>;
    /**
     * In a security policy, you can manually specify the HTTP URLs that are allowed (or disallowed) in traffic to the web
     * application being protected. If you are using automatic policy building (and the policy includes learning URLs), the
     * system can determine which URLs to add, based on legitimate traffic.
     */
    urls?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a WafPolicy resource.
 */
export interface WafPolicyArgs {
    /**
     * The character encoding for the web application. The character encoding determines how the policy processes the character
     * sets. The default is Auto detect
     */
    applicationLanguage?: pulumi.Input<string>;
    /**
     * Specifies whether the security policy treats microservice URLs, file types, URLs, and parameters as case sensitive or
     * not. When this setting is enabled, the system stores these security policy elements in lowercase in the security policy
     * configuration
     */
    caseInsensitive?: pulumi.Input<boolean>;
    /**
     * Specifies the description of the policy.
     */
    description?: pulumi.Input<string>;
    /**
     * Passive Mode allows the policy to be associated with a Performance L4 Virtual Server (using a FastL4 profile). With
     * FastL4, traffic is analyzed but is not modified in any way.
     */
    enablePassivemode?: pulumi.Input<boolean>;
    /**
     * How the system processes a request that triggers a security policy violation
     */
    enforcementMode?: pulumi.Input<string>;
    /**
     * file_types settings for policy
     */
    fileTypes?: pulumi.Input<pulumi.Input<inputs.WafPolicyFileType>[]>;
    /**
     * graphql_profile settings for policy
     */
    graphqlProfiles?: pulumi.Input<pulumi.Input<inputs.WafPolicyGraphqlProfile>[]>;
    /**
     * specify the list of host name that is used to access the application
     */
    hostNames?: pulumi.Input<pulumi.Input<inputs.WafPolicyHostName>[]>;
    /**
     * An IP address exception is an IP address that you want the system to treat in a specific way for a security policy. For
     * example, you can specify IP addresses from which the system should always trust traffic, IP addresses for which you do
     * not want the system to generate learning suggestions for the traffic, and IP addresses for which you want to exclude
     * information from the logs
     */
    ipExceptions?: pulumi.Input<pulumi.Input<inputs.WafPolicyIpException>[]>;
    /**
     * the modifications section includes actions that modify the declarative policy as it is defined in the adjustments
     * section. The modifications section is updated manually, with the changes generally driven by the learning suggestions
     * provided by the BIG-IP.
     */
    modifications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The unique user-given name of the policy. Policy names cannot contain spaces or special characters. Allowed characters
     * are a-z, A-Z, 0-9, dot, dash (-), colon (:) and underscore (_)
     */
    name?: pulumi.Input<string>;
    /**
     * This section defines the Link for open api files on the policy.
     */
    openApiFiles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This section defines parameters that the security policy permits in requests.
     */
    parameters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Partition of WAF policy
     */
    partition?: pulumi.Input<string>;
    /**
     * policy-builder settings for policy
     */
    policyBuilders?: pulumi.Input<pulumi.Input<inputs.WafPolicyPolicyBuilder>[]>;
    policyId?: pulumi.Input<string>;
    /**
     * The payload of the WAF Policy to be used for IMPORT on to BIGIP
     */
    policyImportJson?: pulumi.Input<string>;
    /**
     * When creating a security policy, you can determine whether a security policy differentiates between HTTP and HTTPS URLs.
     * If enabled, the security policy differentiates between HTTP and HTTPS URLs. If disabled, the security policy configures
     * URLs without specifying a specific protocol. This is useful for applications that behave the same for HTTP and HTTPS,
     * and it keeps the security policy from including the same URL twice.
     */
    protocolIndependent?: pulumi.Input<boolean>;
    /**
     * The server technology is a server-side application, framework, web server or operating system type that is configured in
     * the policy in order to adapt the policy to the checks needed for the respective technology.
     */
    serverTechnologies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Defines behavior when signatures found within a signature-set are detected in a request. Settings are culmulative, so if
     * a signature is found in any set with block enabled, that signature will have block enabled.
     */
    signatureSets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This section defines the properties of a signature on the policy.
     */
    signatures?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * bulk signature setting
     */
    signaturesSettings?: pulumi.Input<pulumi.Input<inputs.WafPolicySignaturesSetting>[]>;
    /**
     * Specifies the Link of the template used for the policy creation.
     */
    templateLink?: pulumi.Input<string>;
    /**
     * Specifies the name of the template used for the policy creation.
     */
    templateName: pulumi.Input<string>;
    /**
     * The type of policy you want to create. The default policy type is Security.
     */
    type?: pulumi.Input<string>;
    /**
     * In a security policy, you can manually specify the HTTP URLs that are allowed (or disallowed) in traffic to the web
     * application being protected. If you are using automatic policy building (and the policy includes learning URLs), the
     * system can determine which URLs to add, based on legitimate traffic.
     */
    urls?: pulumi.Input<pulumi.Input<string>[]>;
}
