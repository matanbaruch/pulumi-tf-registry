// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LtmProfileServerSsl extends pulumi.CustomResource {
    /**
     * Get an existing LtmProfileServerSsl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LtmProfileServerSslState, opts?: pulumi.CustomResourceOptions): LtmProfileServerSsl {
        return new LtmProfileServerSsl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bigip:index/ltmProfileServerSsl:LtmProfileServerSsl';

    /**
     * Returns true if the given object is an instance of LtmProfileServerSsl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LtmProfileServerSsl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LtmProfileServerSsl.__pulumiType;
    }

    /**
     * Alert time out
     */
    public readonly alertTimeout!: pulumi.Output<string>;
    /**
     * Server authentication once / always (default is once).
     */
    public readonly authenticate!: pulumi.Output<string>;
    /**
     * Client certificate chain traversal depth. Default 9.
     */
    public readonly authenticateDepth!: pulumi.Output<number>;
    /**
     * CA Certificate. Default none.
     */
    public readonly c3dCaCert!: pulumi.Output<string | undefined>;
    /**
     * CA Key. Default none.
     */
    public readonly c3dCaKey!: pulumi.Output<string | undefined>;
    /**
     * CA Passphrase. Default
     */
    public readonly c3dCaPassphrase!: pulumi.Output<string>;
    /**
     * Certificate Extensions List. Default
     */
    public readonly c3dCertExtensionCustomOids!: pulumi.Output<string[] | undefined>;
    /**
     * Certificate Extensions Includes. Default Extensions List
     */
    public readonly c3dCertExtensionIncludes!: pulumi.Output<string[] | undefined>;
    /**
     * Certificate Lifespan. Default
     */
    public readonly c3dCertLifespan!: pulumi.Output<number>;
    /**
     * CA Passphrase. Default enabled
     */
    public readonly c3dCertificateExtensions!: pulumi.Output<string>;
    /**
     * Client certificate file path. Default None.
     */
    public readonly caFile!: pulumi.Output<string>;
    /**
     * Cache size (sessions).
     */
    public readonly cacheSize!: pulumi.Output<number>;
    /**
     * Cache time out
     */
    public readonly cacheTimeout!: pulumi.Output<number>;
    /**
     * Name of the server certificate.
     */
    public readonly cert!: pulumi.Output<string | undefined>;
    /**
     * Server certificate chain name.
     */
    public readonly chain!: pulumi.Output<string | undefined>;
    /**
     * Cipher group for the ssl server profile
     */
    public readonly cipherGroup!: pulumi.Output<string | undefined>;
    /**
     * BigIP Cipher string.
     */
    public readonly ciphers!: pulumi.Output<string>;
    /**
     * Profile name that this profile defaults from.
     */
    public readonly defaultsFrom!: pulumi.Output<string | undefined>;
    /**
     * Response if the cert is expired (drop / ignore).
     */
    public readonly expireCertResponseControl!: pulumi.Output<string>;
    /**
     * full path of the profile
     */
    public readonly fullPath!: pulumi.Output<string>;
    /**
     * generation
     */
    public readonly generation!: pulumi.Output<number>;
    /**
     * Generic alerts enabled / disabled.
     */
    public readonly genericAlert!: pulumi.Output<string>;
    /**
     * Handshake time out (seconds)
     */
    public readonly handshakeTimeout!: pulumi.Output<string>;
    /**
     * Name of the Server SSL profile key
     */
    public readonly key!: pulumi.Output<string | undefined>;
    /**
     * ModSSL Methods enabled / disabled. Default is disabled.
     */
    public readonly modSslMethods!: pulumi.Output<string>;
    /**
     * ModSSL Methods enabled / disabled. Default is disabled.
     */
    public readonly mode!: pulumi.Output<string>;
    /**
     * Name of the Ssl Profile
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * name of partition
     */
    public readonly partition!: pulumi.Output<string>;
    /**
     * Client Certificate Constrained Delegation CA passphrase
     */
    public readonly passphrase!: pulumi.Output<string>;
    /**
     * Peer Cert Mode
     */
    public readonly peerCertMode!: pulumi.Output<string>;
    /**
     * Proxy CA Cert
     */
    public readonly proxyCaCert!: pulumi.Output<string>;
    /**
     * Proxy CA Key
     */
    public readonly proxyCaKey!: pulumi.Output<string>;
    /**
     * Proxy SSL enabled / disabled. Default is disabled.
     */
    public readonly proxySsl!: pulumi.Output<string>;
    /**
     * Renogotiate Period (seconds)
     */
    public readonly renegotiatePeriod!: pulumi.Output<string>;
    /**
     * Renogotiate Size
     */
    public readonly renegotiateSize!: pulumi.Output<string>;
    /**
     * Renegotiation (enabled / disabled)
     */
    public readonly renegotiation!: pulumi.Output<string>;
    /**
     * Retain certificate.
     */
    public readonly retainCertificate!: pulumi.Output<string>;
    /**
     * Secure reneogotiaton (request / require / require-strict).
     */
    public readonly secureRenegotiation!: pulumi.Output<string>;
    /**
     * Server name
     */
    public readonly serverName!: pulumi.Output<string>;
    /**
     * Session Mirroring (enabled / disabled)
     */
    public readonly sessionMirroring!: pulumi.Output<string>;
    /**
     * Session Ticket (enabled / disabled)
     */
    public readonly sessionTicket!: pulumi.Output<string>;
    /**
     * SNI Default (true / false)
     */
    public readonly sniDefault!: pulumi.Output<string>;
    /**
     * SNI Require (true / false)
     */
    public readonly sniRequire!: pulumi.Output<string>;
    /**
     * Client Certificate Constrained Delegation. Default disabled
     */
    public readonly sslC3d!: pulumi.Output<string | undefined>;
    /**
     * SSL forward Proxy (enabled / disabled)
     */
    public readonly sslForwardProxy!: pulumi.Output<string>;
    /**
     * SSL forward Proxy Bypass (enabled / disabled)
     */
    public readonly sslForwardProxyBypass!: pulumi.Output<string>;
    /**
     * SSL sign hash (any, sha1, sha256, sha384)
     */
    public readonly sslSignHash!: pulumi.Output<string>;
    /**
     * Strict Resume (enabled / disabled)
     */
    public readonly strictResume!: pulumi.Output<string>;
    public readonly tmOptions!: pulumi.Output<string[]>;
    /**
     * Unclean Shutdown (enabled / disabled)
     */
    public readonly uncleanShutdown!: pulumi.Output<string>;
    /**
     * Unclean Shutdown (drop / ignore)
     */
    public readonly untrustedCertResponseControl!: pulumi.Output<string>;

    /**
     * Create a LtmProfileServerSsl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: LtmProfileServerSslArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LtmProfileServerSslArgs | LtmProfileServerSslState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LtmProfileServerSslState | undefined;
            resourceInputs["alertTimeout"] = state ? state.alertTimeout : undefined;
            resourceInputs["authenticate"] = state ? state.authenticate : undefined;
            resourceInputs["authenticateDepth"] = state ? state.authenticateDepth : undefined;
            resourceInputs["c3dCaCert"] = state ? state.c3dCaCert : undefined;
            resourceInputs["c3dCaKey"] = state ? state.c3dCaKey : undefined;
            resourceInputs["c3dCaPassphrase"] = state ? state.c3dCaPassphrase : undefined;
            resourceInputs["c3dCertExtensionCustomOids"] = state ? state.c3dCertExtensionCustomOids : undefined;
            resourceInputs["c3dCertExtensionIncludes"] = state ? state.c3dCertExtensionIncludes : undefined;
            resourceInputs["c3dCertLifespan"] = state ? state.c3dCertLifespan : undefined;
            resourceInputs["c3dCertificateExtensions"] = state ? state.c3dCertificateExtensions : undefined;
            resourceInputs["caFile"] = state ? state.caFile : undefined;
            resourceInputs["cacheSize"] = state ? state.cacheSize : undefined;
            resourceInputs["cacheTimeout"] = state ? state.cacheTimeout : undefined;
            resourceInputs["cert"] = state ? state.cert : undefined;
            resourceInputs["chain"] = state ? state.chain : undefined;
            resourceInputs["cipherGroup"] = state ? state.cipherGroup : undefined;
            resourceInputs["ciphers"] = state ? state.ciphers : undefined;
            resourceInputs["defaultsFrom"] = state ? state.defaultsFrom : undefined;
            resourceInputs["expireCertResponseControl"] = state ? state.expireCertResponseControl : undefined;
            resourceInputs["fullPath"] = state ? state.fullPath : undefined;
            resourceInputs["generation"] = state ? state.generation : undefined;
            resourceInputs["genericAlert"] = state ? state.genericAlert : undefined;
            resourceInputs["handshakeTimeout"] = state ? state.handshakeTimeout : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["modSslMethods"] = state ? state.modSslMethods : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["partition"] = state ? state.partition : undefined;
            resourceInputs["passphrase"] = state ? state.passphrase : undefined;
            resourceInputs["peerCertMode"] = state ? state.peerCertMode : undefined;
            resourceInputs["proxyCaCert"] = state ? state.proxyCaCert : undefined;
            resourceInputs["proxyCaKey"] = state ? state.proxyCaKey : undefined;
            resourceInputs["proxySsl"] = state ? state.proxySsl : undefined;
            resourceInputs["renegotiatePeriod"] = state ? state.renegotiatePeriod : undefined;
            resourceInputs["renegotiateSize"] = state ? state.renegotiateSize : undefined;
            resourceInputs["renegotiation"] = state ? state.renegotiation : undefined;
            resourceInputs["retainCertificate"] = state ? state.retainCertificate : undefined;
            resourceInputs["secureRenegotiation"] = state ? state.secureRenegotiation : undefined;
            resourceInputs["serverName"] = state ? state.serverName : undefined;
            resourceInputs["sessionMirroring"] = state ? state.sessionMirroring : undefined;
            resourceInputs["sessionTicket"] = state ? state.sessionTicket : undefined;
            resourceInputs["sniDefault"] = state ? state.sniDefault : undefined;
            resourceInputs["sniRequire"] = state ? state.sniRequire : undefined;
            resourceInputs["sslC3d"] = state ? state.sslC3d : undefined;
            resourceInputs["sslForwardProxy"] = state ? state.sslForwardProxy : undefined;
            resourceInputs["sslForwardProxyBypass"] = state ? state.sslForwardProxyBypass : undefined;
            resourceInputs["sslSignHash"] = state ? state.sslSignHash : undefined;
            resourceInputs["strictResume"] = state ? state.strictResume : undefined;
            resourceInputs["tmOptions"] = state ? state.tmOptions : undefined;
            resourceInputs["uncleanShutdown"] = state ? state.uncleanShutdown : undefined;
            resourceInputs["untrustedCertResponseControl"] = state ? state.untrustedCertResponseControl : undefined;
        } else {
            const args = argsOrState as LtmProfileServerSslArgs | undefined;
            resourceInputs["alertTimeout"] = args ? args.alertTimeout : undefined;
            resourceInputs["authenticate"] = args ? args.authenticate : undefined;
            resourceInputs["authenticateDepth"] = args ? args.authenticateDepth : undefined;
            resourceInputs["c3dCaCert"] = args ? args.c3dCaCert : undefined;
            resourceInputs["c3dCaKey"] = args ? args.c3dCaKey : undefined;
            resourceInputs["c3dCaPassphrase"] = args ? args.c3dCaPassphrase : undefined;
            resourceInputs["c3dCertExtensionCustomOids"] = args ? args.c3dCertExtensionCustomOids : undefined;
            resourceInputs["c3dCertExtensionIncludes"] = args ? args.c3dCertExtensionIncludes : undefined;
            resourceInputs["c3dCertLifespan"] = args ? args.c3dCertLifespan : undefined;
            resourceInputs["c3dCertificateExtensions"] = args ? args.c3dCertificateExtensions : undefined;
            resourceInputs["caFile"] = args ? args.caFile : undefined;
            resourceInputs["cacheSize"] = args ? args.cacheSize : undefined;
            resourceInputs["cacheTimeout"] = args ? args.cacheTimeout : undefined;
            resourceInputs["cert"] = args ? args.cert : undefined;
            resourceInputs["chain"] = args ? args.chain : undefined;
            resourceInputs["cipherGroup"] = args ? args.cipherGroup : undefined;
            resourceInputs["ciphers"] = args ? args.ciphers : undefined;
            resourceInputs["defaultsFrom"] = args ? args.defaultsFrom : undefined;
            resourceInputs["expireCertResponseControl"] = args ? args.expireCertResponseControl : undefined;
            resourceInputs["fullPath"] = args ? args.fullPath : undefined;
            resourceInputs["generation"] = args ? args.generation : undefined;
            resourceInputs["genericAlert"] = args ? args.genericAlert : undefined;
            resourceInputs["handshakeTimeout"] = args ? args.handshakeTimeout : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["modSslMethods"] = args ? args.modSslMethods : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["partition"] = args ? args.partition : undefined;
            resourceInputs["passphrase"] = args?.passphrase ? pulumi.secret(args.passphrase) : undefined;
            resourceInputs["peerCertMode"] = args ? args.peerCertMode : undefined;
            resourceInputs["proxyCaCert"] = args ? args.proxyCaCert : undefined;
            resourceInputs["proxyCaKey"] = args ? args.proxyCaKey : undefined;
            resourceInputs["proxySsl"] = args ? args.proxySsl : undefined;
            resourceInputs["renegotiatePeriod"] = args ? args.renegotiatePeriod : undefined;
            resourceInputs["renegotiateSize"] = args ? args.renegotiateSize : undefined;
            resourceInputs["renegotiation"] = args ? args.renegotiation : undefined;
            resourceInputs["retainCertificate"] = args ? args.retainCertificate : undefined;
            resourceInputs["secureRenegotiation"] = args ? args.secureRenegotiation : undefined;
            resourceInputs["serverName"] = args ? args.serverName : undefined;
            resourceInputs["sessionMirroring"] = args ? args.sessionMirroring : undefined;
            resourceInputs["sessionTicket"] = args ? args.sessionTicket : undefined;
            resourceInputs["sniDefault"] = args ? args.sniDefault : undefined;
            resourceInputs["sniRequire"] = args ? args.sniRequire : undefined;
            resourceInputs["sslC3d"] = args ? args.sslC3d : undefined;
            resourceInputs["sslForwardProxy"] = args ? args.sslForwardProxy : undefined;
            resourceInputs["sslForwardProxyBypass"] = args ? args.sslForwardProxyBypass : undefined;
            resourceInputs["sslSignHash"] = args ? args.sslSignHash : undefined;
            resourceInputs["strictResume"] = args ? args.strictResume : undefined;
            resourceInputs["tmOptions"] = args ? args.tmOptions : undefined;
            resourceInputs["uncleanShutdown"] = args ? args.uncleanShutdown : undefined;
            resourceInputs["untrustedCertResponseControl"] = args ? args.untrustedCertResponseControl : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["passphrase"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(LtmProfileServerSsl.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LtmProfileServerSsl resources.
 */
export interface LtmProfileServerSslState {
    /**
     * Alert time out
     */
    alertTimeout?: pulumi.Input<string>;
    /**
     * Server authentication once / always (default is once).
     */
    authenticate?: pulumi.Input<string>;
    /**
     * Client certificate chain traversal depth. Default 9.
     */
    authenticateDepth?: pulumi.Input<number>;
    /**
     * CA Certificate. Default none.
     */
    c3dCaCert?: pulumi.Input<string>;
    /**
     * CA Key. Default none.
     */
    c3dCaKey?: pulumi.Input<string>;
    /**
     * CA Passphrase. Default
     */
    c3dCaPassphrase?: pulumi.Input<string>;
    /**
     * Certificate Extensions List. Default
     */
    c3dCertExtensionCustomOids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Certificate Extensions Includes. Default Extensions List
     */
    c3dCertExtensionIncludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Certificate Lifespan. Default
     */
    c3dCertLifespan?: pulumi.Input<number>;
    /**
     * CA Passphrase. Default enabled
     */
    c3dCertificateExtensions?: pulumi.Input<string>;
    /**
     * Client certificate file path. Default None.
     */
    caFile?: pulumi.Input<string>;
    /**
     * Cache size (sessions).
     */
    cacheSize?: pulumi.Input<number>;
    /**
     * Cache time out
     */
    cacheTimeout?: pulumi.Input<number>;
    /**
     * Name of the server certificate.
     */
    cert?: pulumi.Input<string>;
    /**
     * Server certificate chain name.
     */
    chain?: pulumi.Input<string>;
    /**
     * Cipher group for the ssl server profile
     */
    cipherGroup?: pulumi.Input<string>;
    /**
     * BigIP Cipher string.
     */
    ciphers?: pulumi.Input<string>;
    /**
     * Profile name that this profile defaults from.
     */
    defaultsFrom?: pulumi.Input<string>;
    /**
     * Response if the cert is expired (drop / ignore).
     */
    expireCertResponseControl?: pulumi.Input<string>;
    /**
     * full path of the profile
     */
    fullPath?: pulumi.Input<string>;
    /**
     * generation
     */
    generation?: pulumi.Input<number>;
    /**
     * Generic alerts enabled / disabled.
     */
    genericAlert?: pulumi.Input<string>;
    /**
     * Handshake time out (seconds)
     */
    handshakeTimeout?: pulumi.Input<string>;
    /**
     * Name of the Server SSL profile key
     */
    key?: pulumi.Input<string>;
    /**
     * ModSSL Methods enabled / disabled. Default is disabled.
     */
    modSslMethods?: pulumi.Input<string>;
    /**
     * ModSSL Methods enabled / disabled. Default is disabled.
     */
    mode?: pulumi.Input<string>;
    /**
     * Name of the Ssl Profile
     */
    name?: pulumi.Input<string>;
    /**
     * name of partition
     */
    partition?: pulumi.Input<string>;
    /**
     * Client Certificate Constrained Delegation CA passphrase
     */
    passphrase?: pulumi.Input<string>;
    /**
     * Peer Cert Mode
     */
    peerCertMode?: pulumi.Input<string>;
    /**
     * Proxy CA Cert
     */
    proxyCaCert?: pulumi.Input<string>;
    /**
     * Proxy CA Key
     */
    proxyCaKey?: pulumi.Input<string>;
    /**
     * Proxy SSL enabled / disabled. Default is disabled.
     */
    proxySsl?: pulumi.Input<string>;
    /**
     * Renogotiate Period (seconds)
     */
    renegotiatePeriod?: pulumi.Input<string>;
    /**
     * Renogotiate Size
     */
    renegotiateSize?: pulumi.Input<string>;
    /**
     * Renegotiation (enabled / disabled)
     */
    renegotiation?: pulumi.Input<string>;
    /**
     * Retain certificate.
     */
    retainCertificate?: pulumi.Input<string>;
    /**
     * Secure reneogotiaton (request / require / require-strict).
     */
    secureRenegotiation?: pulumi.Input<string>;
    /**
     * Server name
     */
    serverName?: pulumi.Input<string>;
    /**
     * Session Mirroring (enabled / disabled)
     */
    sessionMirroring?: pulumi.Input<string>;
    /**
     * Session Ticket (enabled / disabled)
     */
    sessionTicket?: pulumi.Input<string>;
    /**
     * SNI Default (true / false)
     */
    sniDefault?: pulumi.Input<string>;
    /**
     * SNI Require (true / false)
     */
    sniRequire?: pulumi.Input<string>;
    /**
     * Client Certificate Constrained Delegation. Default disabled
     */
    sslC3d?: pulumi.Input<string>;
    /**
     * SSL forward Proxy (enabled / disabled)
     */
    sslForwardProxy?: pulumi.Input<string>;
    /**
     * SSL forward Proxy Bypass (enabled / disabled)
     */
    sslForwardProxyBypass?: pulumi.Input<string>;
    /**
     * SSL sign hash (any, sha1, sha256, sha384)
     */
    sslSignHash?: pulumi.Input<string>;
    /**
     * Strict Resume (enabled / disabled)
     */
    strictResume?: pulumi.Input<string>;
    tmOptions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unclean Shutdown (enabled / disabled)
     */
    uncleanShutdown?: pulumi.Input<string>;
    /**
     * Unclean Shutdown (drop / ignore)
     */
    untrustedCertResponseControl?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LtmProfileServerSsl resource.
 */
export interface LtmProfileServerSslArgs {
    /**
     * Alert time out
     */
    alertTimeout?: pulumi.Input<string>;
    /**
     * Server authentication once / always (default is once).
     */
    authenticate?: pulumi.Input<string>;
    /**
     * Client certificate chain traversal depth. Default 9.
     */
    authenticateDepth?: pulumi.Input<number>;
    /**
     * CA Certificate. Default none.
     */
    c3dCaCert?: pulumi.Input<string>;
    /**
     * CA Key. Default none.
     */
    c3dCaKey?: pulumi.Input<string>;
    /**
     * CA Passphrase. Default
     */
    c3dCaPassphrase?: pulumi.Input<string>;
    /**
     * Certificate Extensions List. Default
     */
    c3dCertExtensionCustomOids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Certificate Extensions Includes. Default Extensions List
     */
    c3dCertExtensionIncludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Certificate Lifespan. Default
     */
    c3dCertLifespan?: pulumi.Input<number>;
    /**
     * CA Passphrase. Default enabled
     */
    c3dCertificateExtensions?: pulumi.Input<string>;
    /**
     * Client certificate file path. Default None.
     */
    caFile?: pulumi.Input<string>;
    /**
     * Cache size (sessions).
     */
    cacheSize?: pulumi.Input<number>;
    /**
     * Cache time out
     */
    cacheTimeout?: pulumi.Input<number>;
    /**
     * Name of the server certificate.
     */
    cert?: pulumi.Input<string>;
    /**
     * Server certificate chain name.
     */
    chain?: pulumi.Input<string>;
    /**
     * Cipher group for the ssl server profile
     */
    cipherGroup?: pulumi.Input<string>;
    /**
     * BigIP Cipher string.
     */
    ciphers?: pulumi.Input<string>;
    /**
     * Profile name that this profile defaults from.
     */
    defaultsFrom?: pulumi.Input<string>;
    /**
     * Response if the cert is expired (drop / ignore).
     */
    expireCertResponseControl?: pulumi.Input<string>;
    /**
     * full path of the profile
     */
    fullPath?: pulumi.Input<string>;
    /**
     * generation
     */
    generation?: pulumi.Input<number>;
    /**
     * Generic alerts enabled / disabled.
     */
    genericAlert?: pulumi.Input<string>;
    /**
     * Handshake time out (seconds)
     */
    handshakeTimeout?: pulumi.Input<string>;
    /**
     * Name of the Server SSL profile key
     */
    key?: pulumi.Input<string>;
    /**
     * ModSSL Methods enabled / disabled. Default is disabled.
     */
    modSslMethods?: pulumi.Input<string>;
    /**
     * ModSSL Methods enabled / disabled. Default is disabled.
     */
    mode?: pulumi.Input<string>;
    /**
     * Name of the Ssl Profile
     */
    name?: pulumi.Input<string>;
    /**
     * name of partition
     */
    partition?: pulumi.Input<string>;
    /**
     * Client Certificate Constrained Delegation CA passphrase
     */
    passphrase?: pulumi.Input<string>;
    /**
     * Peer Cert Mode
     */
    peerCertMode?: pulumi.Input<string>;
    /**
     * Proxy CA Cert
     */
    proxyCaCert?: pulumi.Input<string>;
    /**
     * Proxy CA Key
     */
    proxyCaKey?: pulumi.Input<string>;
    /**
     * Proxy SSL enabled / disabled. Default is disabled.
     */
    proxySsl?: pulumi.Input<string>;
    /**
     * Renogotiate Period (seconds)
     */
    renegotiatePeriod?: pulumi.Input<string>;
    /**
     * Renogotiate Size
     */
    renegotiateSize?: pulumi.Input<string>;
    /**
     * Renegotiation (enabled / disabled)
     */
    renegotiation?: pulumi.Input<string>;
    /**
     * Retain certificate.
     */
    retainCertificate?: pulumi.Input<string>;
    /**
     * Secure reneogotiaton (request / require / require-strict).
     */
    secureRenegotiation?: pulumi.Input<string>;
    /**
     * Server name
     */
    serverName?: pulumi.Input<string>;
    /**
     * Session Mirroring (enabled / disabled)
     */
    sessionMirroring?: pulumi.Input<string>;
    /**
     * Session Ticket (enabled / disabled)
     */
    sessionTicket?: pulumi.Input<string>;
    /**
     * SNI Default (true / false)
     */
    sniDefault?: pulumi.Input<string>;
    /**
     * SNI Require (true / false)
     */
    sniRequire?: pulumi.Input<string>;
    /**
     * Client Certificate Constrained Delegation. Default disabled
     */
    sslC3d?: pulumi.Input<string>;
    /**
     * SSL forward Proxy (enabled / disabled)
     */
    sslForwardProxy?: pulumi.Input<string>;
    /**
     * SSL forward Proxy Bypass (enabled / disabled)
     */
    sslForwardProxyBypass?: pulumi.Input<string>;
    /**
     * SSL sign hash (any, sha1, sha256, sha384)
     */
    sslSignHash?: pulumi.Input<string>;
    /**
     * Strict Resume (enabled / disabled)
     */
    strictResume?: pulumi.Input<string>;
    tmOptions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unclean Shutdown (enabled / disabled)
     */
    uncleanShutdown?: pulumi.Input<string>;
    /**
     * Unclean Shutdown (drop / ignore)
     */
    untrustedCertResponseControl?: pulumi.Input<string>;
}
