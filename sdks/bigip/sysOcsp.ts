// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SysOcsp extends pulumi.CustomResource {
    /**
     * Get an existing SysOcsp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SysOcspState, opts?: pulumi.CustomResourceOptions): SysOcsp {
        return new SysOcsp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bigip:index/sysOcsp:SysOcsp';

    /**
     * Returns true if the given object is an instance of SysOcsp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SysOcsp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SysOcsp.__pulumiType;
    }

    /**
     * Specifies the lifetime of an error response in the cache, in seconds. This value must be greater than connection_timeout
     */
    public readonly cacheErrorTimeout!: pulumi.Output<number | undefined>;
    /**
     * Specifies the lifetime of the OCSP response in the cache, in seconds
     */
    public readonly cacheTimeout!: pulumi.Output<string | undefined>;
    /**
     * Specifies the tolerable absolute difference in the clocks of the responder and the BIG-IP system, in seconds
     */
    public readonly clockSkew!: pulumi.Output<number | undefined>;
    /**
     * Specifies the maximum number of connections per second allowed for the OCSP certificate validator
     */
    public readonly concurrentConnectionsLimit!: pulumi.Output<number | undefined>;
    /**
     * Specifies the time interval that the BIG-IP system waits for before ending the connection to the OCSP responder, in
     * seconds
     */
    public readonly connectionTimeout!: pulumi.Output<number | undefined>;
    /**
     * Specifies the internal DNS resolver the BIG-IP system uses to fetch the OCSP response. It should be of the pattern
     * '/partition/resolver-name'
     */
    public readonly dnsResolver!: pulumi.Output<string | undefined>;
    /**
     * Specifies the name of the OCSP responder. It should be of the pattern '/partition/name'
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies a passphrase used to sign an OCSP request
     */
    public readonly passphrase!: pulumi.Output<string | undefined>;
    /**
     * Specifies the proxy server pool the BIG-IP system uses to fetch the OCSP response. It should be of the pattern
     * '/partition/pool-name'
     */
    public readonly proxyServerPool!: pulumi.Output<string | undefined>;
    /**
     * Specifies the URL of the OCSP responder
     */
    public readonly responderUrl!: pulumi.Output<string | undefined>;
    /**
     * Specifies the route domain for the OCSP responder
     */
    public readonly routeDomain!: pulumi.Output<string | undefined>;
    /**
     * Specifies the hash algorithm used to sign an OCSP request
     */
    public readonly signHash!: pulumi.Output<string | undefined>;
    /**
     * Specifies a certificate used to sign an OCSP request. It should be of the pattern '/partition/cert-name'
     */
    public readonly signerCert!: pulumi.Output<string | undefined>;
    /**
     * Specifies a key used to sign an OCSP request. It should be of the pattern '/partition/key-name'
     */
    public readonly signerKey!: pulumi.Output<string | undefined>;
    /**
     * Specifies the maximum allowed lag time that the BIG-IP system accepts for the 'thisUpdate' time in the OCSP response, in
     * seconds
     */
    public readonly statusAge!: pulumi.Output<number | undefined>;
    /**
     * Specifies whether the responder's certificate is checked for an OCSP signing extension
     */
    public readonly strictRespCertCheck!: pulumi.Output<string | undefined>;
    /**
     * Specifies the certificates used for validating the OCSP response
     */
    public readonly trustedResponders!: pulumi.Output<string | undefined>;

    /**
     * Create a SysOcsp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SysOcspArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SysOcspArgs | SysOcspState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SysOcspState | undefined;
            resourceInputs["cacheErrorTimeout"] = state ? state.cacheErrorTimeout : undefined;
            resourceInputs["cacheTimeout"] = state ? state.cacheTimeout : undefined;
            resourceInputs["clockSkew"] = state ? state.clockSkew : undefined;
            resourceInputs["concurrentConnectionsLimit"] = state ? state.concurrentConnectionsLimit : undefined;
            resourceInputs["connectionTimeout"] = state ? state.connectionTimeout : undefined;
            resourceInputs["dnsResolver"] = state ? state.dnsResolver : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["passphrase"] = state ? state.passphrase : undefined;
            resourceInputs["proxyServerPool"] = state ? state.proxyServerPool : undefined;
            resourceInputs["responderUrl"] = state ? state.responderUrl : undefined;
            resourceInputs["routeDomain"] = state ? state.routeDomain : undefined;
            resourceInputs["signHash"] = state ? state.signHash : undefined;
            resourceInputs["signerCert"] = state ? state.signerCert : undefined;
            resourceInputs["signerKey"] = state ? state.signerKey : undefined;
            resourceInputs["statusAge"] = state ? state.statusAge : undefined;
            resourceInputs["strictRespCertCheck"] = state ? state.strictRespCertCheck : undefined;
            resourceInputs["trustedResponders"] = state ? state.trustedResponders : undefined;
        } else {
            const args = argsOrState as SysOcspArgs | undefined;
            resourceInputs["cacheErrorTimeout"] = args ? args.cacheErrorTimeout : undefined;
            resourceInputs["cacheTimeout"] = args ? args.cacheTimeout : undefined;
            resourceInputs["clockSkew"] = args ? args.clockSkew : undefined;
            resourceInputs["concurrentConnectionsLimit"] = args ? args.concurrentConnectionsLimit : undefined;
            resourceInputs["connectionTimeout"] = args ? args.connectionTimeout : undefined;
            resourceInputs["dnsResolver"] = args ? args.dnsResolver : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["passphrase"] = args?.passphrase ? pulumi.secret(args.passphrase) : undefined;
            resourceInputs["proxyServerPool"] = args ? args.proxyServerPool : undefined;
            resourceInputs["responderUrl"] = args ? args.responderUrl : undefined;
            resourceInputs["routeDomain"] = args ? args.routeDomain : undefined;
            resourceInputs["signHash"] = args ? args.signHash : undefined;
            resourceInputs["signerCert"] = args ? args.signerCert : undefined;
            resourceInputs["signerKey"] = args ? args.signerKey : undefined;
            resourceInputs["statusAge"] = args ? args.statusAge : undefined;
            resourceInputs["strictRespCertCheck"] = args ? args.strictRespCertCheck : undefined;
            resourceInputs["trustedResponders"] = args ? args.trustedResponders : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["passphrase"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SysOcsp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SysOcsp resources.
 */
export interface SysOcspState {
    /**
     * Specifies the lifetime of an error response in the cache, in seconds. This value must be greater than connection_timeout
     */
    cacheErrorTimeout?: pulumi.Input<number>;
    /**
     * Specifies the lifetime of the OCSP response in the cache, in seconds
     */
    cacheTimeout?: pulumi.Input<string>;
    /**
     * Specifies the tolerable absolute difference in the clocks of the responder and the BIG-IP system, in seconds
     */
    clockSkew?: pulumi.Input<number>;
    /**
     * Specifies the maximum number of connections per second allowed for the OCSP certificate validator
     */
    concurrentConnectionsLimit?: pulumi.Input<number>;
    /**
     * Specifies the time interval that the BIG-IP system waits for before ending the connection to the OCSP responder, in
     * seconds
     */
    connectionTimeout?: pulumi.Input<number>;
    /**
     * Specifies the internal DNS resolver the BIG-IP system uses to fetch the OCSP response. It should be of the pattern
     * '/partition/resolver-name'
     */
    dnsResolver?: pulumi.Input<string>;
    /**
     * Specifies the name of the OCSP responder. It should be of the pattern '/partition/name'
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies a passphrase used to sign an OCSP request
     */
    passphrase?: pulumi.Input<string>;
    /**
     * Specifies the proxy server pool the BIG-IP system uses to fetch the OCSP response. It should be of the pattern
     * '/partition/pool-name'
     */
    proxyServerPool?: pulumi.Input<string>;
    /**
     * Specifies the URL of the OCSP responder
     */
    responderUrl?: pulumi.Input<string>;
    /**
     * Specifies the route domain for the OCSP responder
     */
    routeDomain?: pulumi.Input<string>;
    /**
     * Specifies the hash algorithm used to sign an OCSP request
     */
    signHash?: pulumi.Input<string>;
    /**
     * Specifies a certificate used to sign an OCSP request. It should be of the pattern '/partition/cert-name'
     */
    signerCert?: pulumi.Input<string>;
    /**
     * Specifies a key used to sign an OCSP request. It should be of the pattern '/partition/key-name'
     */
    signerKey?: pulumi.Input<string>;
    /**
     * Specifies the maximum allowed lag time that the BIG-IP system accepts for the 'thisUpdate' time in the OCSP response, in
     * seconds
     */
    statusAge?: pulumi.Input<number>;
    /**
     * Specifies whether the responder's certificate is checked for an OCSP signing extension
     */
    strictRespCertCheck?: pulumi.Input<string>;
    /**
     * Specifies the certificates used for validating the OCSP response
     */
    trustedResponders?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SysOcsp resource.
 */
export interface SysOcspArgs {
    /**
     * Specifies the lifetime of an error response in the cache, in seconds. This value must be greater than connection_timeout
     */
    cacheErrorTimeout?: pulumi.Input<number>;
    /**
     * Specifies the lifetime of the OCSP response in the cache, in seconds
     */
    cacheTimeout?: pulumi.Input<string>;
    /**
     * Specifies the tolerable absolute difference in the clocks of the responder and the BIG-IP system, in seconds
     */
    clockSkew?: pulumi.Input<number>;
    /**
     * Specifies the maximum number of connections per second allowed for the OCSP certificate validator
     */
    concurrentConnectionsLimit?: pulumi.Input<number>;
    /**
     * Specifies the time interval that the BIG-IP system waits for before ending the connection to the OCSP responder, in
     * seconds
     */
    connectionTimeout?: pulumi.Input<number>;
    /**
     * Specifies the internal DNS resolver the BIG-IP system uses to fetch the OCSP response. It should be of the pattern
     * '/partition/resolver-name'
     */
    dnsResolver?: pulumi.Input<string>;
    /**
     * Specifies the name of the OCSP responder. It should be of the pattern '/partition/name'
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies a passphrase used to sign an OCSP request
     */
    passphrase?: pulumi.Input<string>;
    /**
     * Specifies the proxy server pool the BIG-IP system uses to fetch the OCSP response. It should be of the pattern
     * '/partition/pool-name'
     */
    proxyServerPool?: pulumi.Input<string>;
    /**
     * Specifies the URL of the OCSP responder
     */
    responderUrl?: pulumi.Input<string>;
    /**
     * Specifies the route domain for the OCSP responder
     */
    routeDomain?: pulumi.Input<string>;
    /**
     * Specifies the hash algorithm used to sign an OCSP request
     */
    signHash?: pulumi.Input<string>;
    /**
     * Specifies a certificate used to sign an OCSP request. It should be of the pattern '/partition/cert-name'
     */
    signerCert?: pulumi.Input<string>;
    /**
     * Specifies a key used to sign an OCSP request. It should be of the pattern '/partition/key-name'
     */
    signerKey?: pulumi.Input<string>;
    /**
     * Specifies the maximum allowed lag time that the BIG-IP system accepts for the 'thisUpdate' time in the OCSP response, in
     * seconds
     */
    statusAge?: pulumi.Input<number>;
    /**
     * Specifies whether the responder's certificate is checked for an OCSP signing extension
     */
    strictRespCertCheck?: pulumi.Input<string>;
    /**
     * Specifies the certificates used for validating the OCSP response
     */
    trustedResponders?: pulumi.Input<string>;
}
