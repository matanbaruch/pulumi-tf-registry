// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SysIapp extends pulumi.CustomResource {
    /**
     * Get an existing SysIapp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SysIappState, opts?: pulumi.CustomResourceOptions): SysIapp {
        return new SysIapp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bigip:index/sysIapp:SysIapp';

    /**
     * Returns true if the given object is an instance of SysIapp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SysIapp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SysIapp.__pulumiType;
    }

    /**
     * Address of the Iapp which needs to be Iappensed
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * BIG-IP password
     */
    public readonly devicegroup!: pulumi.Output<string>;
    /**
     * BIG-IP password
     */
    public readonly executeAction!: pulumi.Output<string>;
    /**
     * BIG-IP password
     */
    public readonly inheritedDevicegroup!: pulumi.Output<string | undefined>;
    /**
     * BIG-IP password
     */
    public readonly inheritedTrafficGroup!: pulumi.Output<string | undefined>;
    /**
     * Address of the Iapp which needs to be Iappensed
     */
    public readonly jsonfile!: pulumi.Output<string>;
    public readonly lists!: pulumi.Output<outputs.SysIappList[] | undefined>;
    public readonly metadatas!: pulumi.Output<outputs.SysIappMetadata[] | undefined>;
    /**
     * Address of the Iapp which needs to be Iappensed
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Address of the Iapp which needs to be Iappensed
     */
    public readonly partition!: pulumi.Output<string | undefined>;
    /**
     * BIG-IP password
     */
    public readonly strictUpdates!: pulumi.Output<string | undefined>;
    public readonly tables!: pulumi.Output<outputs.SysIappTable[] | undefined>;
    /**
     * BIG-IP password
     */
    public readonly template!: pulumi.Output<string | undefined>;
    /**
     * BIG-IP password
     */
    public readonly templateModified!: pulumi.Output<string | undefined>;
    /**
     * BIG-IP password
     */
    public readonly templatePrerequisiteErrors!: pulumi.Output<string | undefined>;
    /**
     * BIG-IP password
     */
    public readonly trafficGroup!: pulumi.Output<string | undefined>;
    public readonly variables!: pulumi.Output<outputs.SysIappVariable[] | undefined>;

    /**
     * Create a SysIapp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SysIappArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SysIappArgs | SysIappState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SysIappState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["devicegroup"] = state ? state.devicegroup : undefined;
            resourceInputs["executeAction"] = state ? state.executeAction : undefined;
            resourceInputs["inheritedDevicegroup"] = state ? state.inheritedDevicegroup : undefined;
            resourceInputs["inheritedTrafficGroup"] = state ? state.inheritedTrafficGroup : undefined;
            resourceInputs["jsonfile"] = state ? state.jsonfile : undefined;
            resourceInputs["lists"] = state ? state.lists : undefined;
            resourceInputs["metadatas"] = state ? state.metadatas : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["partition"] = state ? state.partition : undefined;
            resourceInputs["strictUpdates"] = state ? state.strictUpdates : undefined;
            resourceInputs["tables"] = state ? state.tables : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["templateModified"] = state ? state.templateModified : undefined;
            resourceInputs["templatePrerequisiteErrors"] = state ? state.templatePrerequisiteErrors : undefined;
            resourceInputs["trafficGroup"] = state ? state.trafficGroup : undefined;
            resourceInputs["variables"] = state ? state.variables : undefined;
        } else {
            const args = argsOrState as SysIappArgs | undefined;
            if ((!args || args.jsonfile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'jsonfile'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["devicegroup"] = args ? args.devicegroup : undefined;
            resourceInputs["executeAction"] = args ? args.executeAction : undefined;
            resourceInputs["inheritedDevicegroup"] = args ? args.inheritedDevicegroup : undefined;
            resourceInputs["inheritedTrafficGroup"] = args ? args.inheritedTrafficGroup : undefined;
            resourceInputs["jsonfile"] = args ? args.jsonfile : undefined;
            resourceInputs["lists"] = args ? args.lists : undefined;
            resourceInputs["metadatas"] = args ? args.metadatas : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["partition"] = args ? args.partition : undefined;
            resourceInputs["strictUpdates"] = args ? args.strictUpdates : undefined;
            resourceInputs["tables"] = args ? args.tables : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["templateModified"] = args ? args.templateModified : undefined;
            resourceInputs["templatePrerequisiteErrors"] = args ? args.templatePrerequisiteErrors : undefined;
            resourceInputs["trafficGroup"] = args ? args.trafficGroup : undefined;
            resourceInputs["variables"] = args ? args.variables : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SysIapp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SysIapp resources.
 */
export interface SysIappState {
    /**
     * Address of the Iapp which needs to be Iappensed
     */
    description?: pulumi.Input<string>;
    /**
     * BIG-IP password
     */
    devicegroup?: pulumi.Input<string>;
    /**
     * BIG-IP password
     */
    executeAction?: pulumi.Input<string>;
    /**
     * BIG-IP password
     */
    inheritedDevicegroup?: pulumi.Input<string>;
    /**
     * BIG-IP password
     */
    inheritedTrafficGroup?: pulumi.Input<string>;
    /**
     * Address of the Iapp which needs to be Iappensed
     */
    jsonfile?: pulumi.Input<string>;
    lists?: pulumi.Input<pulumi.Input<inputs.SysIappList>[]>;
    metadatas?: pulumi.Input<pulumi.Input<inputs.SysIappMetadata>[]>;
    /**
     * Address of the Iapp which needs to be Iappensed
     */
    name?: pulumi.Input<string>;
    /**
     * Address of the Iapp which needs to be Iappensed
     */
    partition?: pulumi.Input<string>;
    /**
     * BIG-IP password
     */
    strictUpdates?: pulumi.Input<string>;
    tables?: pulumi.Input<pulumi.Input<inputs.SysIappTable>[]>;
    /**
     * BIG-IP password
     */
    template?: pulumi.Input<string>;
    /**
     * BIG-IP password
     */
    templateModified?: pulumi.Input<string>;
    /**
     * BIG-IP password
     */
    templatePrerequisiteErrors?: pulumi.Input<string>;
    /**
     * BIG-IP password
     */
    trafficGroup?: pulumi.Input<string>;
    variables?: pulumi.Input<pulumi.Input<inputs.SysIappVariable>[]>;
}

/**
 * The set of arguments for constructing a SysIapp resource.
 */
export interface SysIappArgs {
    /**
     * Address of the Iapp which needs to be Iappensed
     */
    description?: pulumi.Input<string>;
    /**
     * BIG-IP password
     */
    devicegroup?: pulumi.Input<string>;
    /**
     * BIG-IP password
     */
    executeAction?: pulumi.Input<string>;
    /**
     * BIG-IP password
     */
    inheritedDevicegroup?: pulumi.Input<string>;
    /**
     * BIG-IP password
     */
    inheritedTrafficGroup?: pulumi.Input<string>;
    /**
     * Address of the Iapp which needs to be Iappensed
     */
    jsonfile: pulumi.Input<string>;
    lists?: pulumi.Input<pulumi.Input<inputs.SysIappList>[]>;
    metadatas?: pulumi.Input<pulumi.Input<inputs.SysIappMetadata>[]>;
    /**
     * Address of the Iapp which needs to be Iappensed
     */
    name?: pulumi.Input<string>;
    /**
     * Address of the Iapp which needs to be Iappensed
     */
    partition?: pulumi.Input<string>;
    /**
     * BIG-IP password
     */
    strictUpdates?: pulumi.Input<string>;
    tables?: pulumi.Input<pulumi.Input<inputs.SysIappTable>[]>;
    /**
     * BIG-IP password
     */
    template?: pulumi.Input<string>;
    /**
     * BIG-IP password
     */
    templateModified?: pulumi.Input<string>;
    /**
     * BIG-IP password
     */
    templatePrerequisiteErrors?: pulumi.Input<string>;
    /**
     * BIG-IP password
     */
    trafficGroup?: pulumi.Input<string>;
    variables?: pulumi.Input<pulumi.Input<inputs.SysIappVariable>[]>;
}
