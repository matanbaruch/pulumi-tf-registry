// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LtmProfileHttp2 extends pulumi.CustomResource {
    /**
     * Get an existing LtmProfileHttp2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LtmProfileHttp2State, opts?: pulumi.CustomResourceOptions): LtmProfileHttp2 {
        return new LtmProfileHttp2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bigip:index/ltmProfileHttp2:LtmProfileHttp2';

    /**
     * Returns true if the given object is an instance of LtmProfileHttp2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LtmProfileHttp2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LtmProfileHttp2.__pulumiType;
    }

    /**
     * Specifies whether to enable all HTTP/2 modes, or only enable the Selected Modes listed in the Enabled column
     */
    public readonly activationModes!: pulumi.Output<string[]>;
    /**
     * Specifies the number of outstanding concurrent requests that are allowed on a single HTTP/2 connection. The default is
     * 10
     */
    public readonly concurrentStreamsPerConnection!: pulumi.Output<number>;
    /**
     * Specifies the number of seconds that an HTTP/2 connection is idly left open before being shut down. The default is 300
     * seconds
     */
    public readonly connectionIdleTimeout!: pulumi.Output<number>;
    /**
     * Name of Parent Http2 profile
     */
    public readonly defaultsFrom!: pulumi.Output<string>;
    /**
     * Enable or disable enforcement of TLS requirements,Default:enabled
     */
    public readonly enforceTlsRequirements!: pulumi.Output<string>;
    /**
     * The size of the data frames, in bytes, that the HTTP/2 protocol sends to the client. Default: 2048
     */
    public readonly frameSize!: pulumi.Output<number>;
    /**
     * The size of the header table, in KB, for the HTTP headers that the HTTP/2 protocol compresses to save bandwidth.Default:
     * 4096
     */
    public readonly headerTableSize!: pulumi.Output<number>;
    /**
     * Enable to include content-length in HTTP/2 headers,Default : disabled
     */
    public readonly includeContentLength!: pulumi.Output<string>;
    /**
     * Specifies whether an HTTP header indicating the use of HTTP/2 should be inserted into the request that goes to the
     * server. The default value is Disabled
     */
    public readonly insertHeader!: pulumi.Output<string>;
    /**
     * Specifies the name of the HTTP header controlled by Insert Header. The default X-HTTP2.
     */
    public readonly insertHeaderName!: pulumi.Output<string>;
    /**
     * Name of the Http2 Profile
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The flow-control size for upload streams, in KB. Default: 32
     */
    public readonly receiveWindow!: pulumi.Output<number>;
    /**
     * The total size of combined data frames, in bytes, that the HTTP/2 protocol sends in a single write function. Default:
     * 16384
     */
    public readonly writeSize!: pulumi.Output<number>;

    /**
     * Create a LtmProfileHttp2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: LtmProfileHttp2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LtmProfileHttp2Args | LtmProfileHttp2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LtmProfileHttp2State | undefined;
            resourceInputs["activationModes"] = state ? state.activationModes : undefined;
            resourceInputs["concurrentStreamsPerConnection"] = state ? state.concurrentStreamsPerConnection : undefined;
            resourceInputs["connectionIdleTimeout"] = state ? state.connectionIdleTimeout : undefined;
            resourceInputs["defaultsFrom"] = state ? state.defaultsFrom : undefined;
            resourceInputs["enforceTlsRequirements"] = state ? state.enforceTlsRequirements : undefined;
            resourceInputs["frameSize"] = state ? state.frameSize : undefined;
            resourceInputs["headerTableSize"] = state ? state.headerTableSize : undefined;
            resourceInputs["includeContentLength"] = state ? state.includeContentLength : undefined;
            resourceInputs["insertHeader"] = state ? state.insertHeader : undefined;
            resourceInputs["insertHeaderName"] = state ? state.insertHeaderName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["receiveWindow"] = state ? state.receiveWindow : undefined;
            resourceInputs["writeSize"] = state ? state.writeSize : undefined;
        } else {
            const args = argsOrState as LtmProfileHttp2Args | undefined;
            resourceInputs["activationModes"] = args ? args.activationModes : undefined;
            resourceInputs["concurrentStreamsPerConnection"] = args ? args.concurrentStreamsPerConnection : undefined;
            resourceInputs["connectionIdleTimeout"] = args ? args.connectionIdleTimeout : undefined;
            resourceInputs["defaultsFrom"] = args ? args.defaultsFrom : undefined;
            resourceInputs["enforceTlsRequirements"] = args ? args.enforceTlsRequirements : undefined;
            resourceInputs["frameSize"] = args ? args.frameSize : undefined;
            resourceInputs["headerTableSize"] = args ? args.headerTableSize : undefined;
            resourceInputs["includeContentLength"] = args ? args.includeContentLength : undefined;
            resourceInputs["insertHeader"] = args ? args.insertHeader : undefined;
            resourceInputs["insertHeaderName"] = args ? args.insertHeaderName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["receiveWindow"] = args ? args.receiveWindow : undefined;
            resourceInputs["writeSize"] = args ? args.writeSize : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LtmProfileHttp2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LtmProfileHttp2 resources.
 */
export interface LtmProfileHttp2State {
    /**
     * Specifies whether to enable all HTTP/2 modes, or only enable the Selected Modes listed in the Enabled column
     */
    activationModes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the number of outstanding concurrent requests that are allowed on a single HTTP/2 connection. The default is
     * 10
     */
    concurrentStreamsPerConnection?: pulumi.Input<number>;
    /**
     * Specifies the number of seconds that an HTTP/2 connection is idly left open before being shut down. The default is 300
     * seconds
     */
    connectionIdleTimeout?: pulumi.Input<number>;
    /**
     * Name of Parent Http2 profile
     */
    defaultsFrom?: pulumi.Input<string>;
    /**
     * Enable or disable enforcement of TLS requirements,Default:enabled
     */
    enforceTlsRequirements?: pulumi.Input<string>;
    /**
     * The size of the data frames, in bytes, that the HTTP/2 protocol sends to the client. Default: 2048
     */
    frameSize?: pulumi.Input<number>;
    /**
     * The size of the header table, in KB, for the HTTP headers that the HTTP/2 protocol compresses to save bandwidth.Default:
     * 4096
     */
    headerTableSize?: pulumi.Input<number>;
    /**
     * Enable to include content-length in HTTP/2 headers,Default : disabled
     */
    includeContentLength?: pulumi.Input<string>;
    /**
     * Specifies whether an HTTP header indicating the use of HTTP/2 should be inserted into the request that goes to the
     * server. The default value is Disabled
     */
    insertHeader?: pulumi.Input<string>;
    /**
     * Specifies the name of the HTTP header controlled by Insert Header. The default X-HTTP2.
     */
    insertHeaderName?: pulumi.Input<string>;
    /**
     * Name of the Http2 Profile
     */
    name?: pulumi.Input<string>;
    /**
     * The flow-control size for upload streams, in KB. Default: 32
     */
    receiveWindow?: pulumi.Input<number>;
    /**
     * The total size of combined data frames, in bytes, that the HTTP/2 protocol sends in a single write function. Default:
     * 16384
     */
    writeSize?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a LtmProfileHttp2 resource.
 */
export interface LtmProfileHttp2Args {
    /**
     * Specifies whether to enable all HTTP/2 modes, or only enable the Selected Modes listed in the Enabled column
     */
    activationModes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the number of outstanding concurrent requests that are allowed on a single HTTP/2 connection. The default is
     * 10
     */
    concurrentStreamsPerConnection?: pulumi.Input<number>;
    /**
     * Specifies the number of seconds that an HTTP/2 connection is idly left open before being shut down. The default is 300
     * seconds
     */
    connectionIdleTimeout?: pulumi.Input<number>;
    /**
     * Name of Parent Http2 profile
     */
    defaultsFrom?: pulumi.Input<string>;
    /**
     * Enable or disable enforcement of TLS requirements,Default:enabled
     */
    enforceTlsRequirements?: pulumi.Input<string>;
    /**
     * The size of the data frames, in bytes, that the HTTP/2 protocol sends to the client. Default: 2048
     */
    frameSize?: pulumi.Input<number>;
    /**
     * The size of the header table, in KB, for the HTTP headers that the HTTP/2 protocol compresses to save bandwidth.Default:
     * 4096
     */
    headerTableSize?: pulumi.Input<number>;
    /**
     * Enable to include content-length in HTTP/2 headers,Default : disabled
     */
    includeContentLength?: pulumi.Input<string>;
    /**
     * Specifies whether an HTTP header indicating the use of HTTP/2 should be inserted into the request that goes to the
     * server. The default value is Disabled
     */
    insertHeader?: pulumi.Input<string>;
    /**
     * Specifies the name of the HTTP header controlled by Insert Header. The default X-HTTP2.
     */
    insertHeaderName?: pulumi.Input<string>;
    /**
     * Name of the Http2 Profile
     */
    name?: pulumi.Input<string>;
    /**
     * The flow-control size for upload streams, in KB. Default: 32
     */
    receiveWindow?: pulumi.Input<number>;
    /**
     * The total size of combined data frames, in bytes, that the HTTP/2 protocol sends in a single write function. Default:
     * 16384
     */
    writeSize?: pulumi.Input<number>;
}
