// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LtmCipherRule extends pulumi.CustomResource {
    /**
     * Get an existing LtmCipherRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LtmCipherRuleState, opts?: pulumi.CustomResourceOptions): LtmCipherRule {
        return new LtmCipherRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bigip:index/ltmCipherRule:LtmCipherRule';

    /**
     * Returns true if the given object is an instance of LtmCipherRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LtmCipherRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LtmCipherRule.__pulumiType;
    }

    /**
     * Specifies one or more Cipher Suites used.Note: For SM2, type the following cipher suite string: ECC-SM4-SM3.
     */
    public readonly cipher!: pulumi.Output<string>;
    /**
     * Specifies descriptive text that identifies the cipher rule
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Specifies the DH Groups Elliptic Curve Diffie-Hellman key exchange algorithms, separated by colons (:).Note: You can
     * also type a special keyword, DEFAULT, which represents the recommended set of named groups
     */
    public readonly dhGroups!: pulumi.Output<string>;
    /**
     * Name of the cipher rule,name should be in pattern ``partition` + `cipher rule name``
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the Signature Algorithms, separated by colons (:), that you want to include in the cipher rule. You can also
     * type a special keyword, DEFAULT, which represents the recommended set of signature algorithms
     */
    public readonly signatureAlgorithms!: pulumi.Output<string>;

    /**
     * Create a LtmCipherRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LtmCipherRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LtmCipherRuleArgs | LtmCipherRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LtmCipherRuleState | undefined;
            resourceInputs["cipher"] = state ? state.cipher : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dhGroups"] = state ? state.dhGroups : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["signatureAlgorithms"] = state ? state.signatureAlgorithms : undefined;
        } else {
            const args = argsOrState as LtmCipherRuleArgs | undefined;
            if ((!args || args.cipher === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cipher'");
            }
            resourceInputs["cipher"] = args ? args.cipher : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dhGroups"] = args ? args.dhGroups : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["signatureAlgorithms"] = args ? args.signatureAlgorithms : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LtmCipherRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LtmCipherRule resources.
 */
export interface LtmCipherRuleState {
    /**
     * Specifies one or more Cipher Suites used.Note: For SM2, type the following cipher suite string: ECC-SM4-SM3.
     */
    cipher?: pulumi.Input<string>;
    /**
     * Specifies descriptive text that identifies the cipher rule
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the DH Groups Elliptic Curve Diffie-Hellman key exchange algorithms, separated by colons (:).Note: You can
     * also type a special keyword, DEFAULT, which represents the recommended set of named groups
     */
    dhGroups?: pulumi.Input<string>;
    /**
     * Name of the cipher rule,name should be in pattern ``partition` + `cipher rule name``
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the Signature Algorithms, separated by colons (:), that you want to include in the cipher rule. You can also
     * type a special keyword, DEFAULT, which represents the recommended set of signature algorithms
     */
    signatureAlgorithms?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LtmCipherRule resource.
 */
export interface LtmCipherRuleArgs {
    /**
     * Specifies one or more Cipher Suites used.Note: For SM2, type the following cipher suite string: ECC-SM4-SM3.
     */
    cipher: pulumi.Input<string>;
    /**
     * Specifies descriptive text that identifies the cipher rule
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the DH Groups Elliptic Curve Diffie-Hellman key exchange algorithms, separated by colons (:).Note: You can
     * also type a special keyword, DEFAULT, which represents the recommended set of named groups
     */
    dhGroups?: pulumi.Input<string>;
    /**
     * Name of the cipher rule,name should be in pattern ``partition` + `cipher rule name``
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the Signature Algorithms, separated by colons (:), that you want to include in the cipher rule. You can also
     * type a special keyword, DEFAULT, which represents the recommended set of signature algorithms
     */
    signatureAlgorithms?: pulumi.Input<string>;
}
