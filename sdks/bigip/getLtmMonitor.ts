// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getLtmMonitor(args: GetLtmMonitorArgs, opts?: pulumi.InvokeOptions): Promise<GetLtmMonitorResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("bigip:index/getLtmMonitor:getLtmMonitor", {
        "id": args.id,
        "name": args.name,
        "partition": args.partition,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLtmMonitor.
 */
export interface GetLtmMonitorArgs {
    id?: string;
    name: string;
    partition: string;
}

/**
 * A collection of values returned by getLtmMonitor.
 */
export interface GetLtmMonitorResult {
    readonly adaptive: string;
    readonly adaptiveLimit: number;
    readonly base: string;
    readonly chaseReferrals: string;
    readonly database: string;
    readonly defaultsFrom: string;
    readonly destination: string;
    readonly filename: string;
    readonly filter: string;
    readonly id: string;
    readonly interval: number;
    readonly ipDscp: number;
    readonly mandatoryAttributes: string;
    readonly manualResume: string;
    readonly mode: string;
    readonly name: string;
    readonly partition: string;
    readonly receiveDisable: string;
    readonly reverse: string;
    readonly security: string;
    readonly timeUntilUp: number;
    readonly timeout: number;
    readonly transparent: string;
    readonly username: string;
}
export function getLtmMonitorOutput(args: GetLtmMonitorOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLtmMonitorResult> {
    return pulumi.output(args).apply((a: any) => getLtmMonitor(a, opts))
}

/**
 * A collection of arguments for invoking getLtmMonitor.
 */
export interface GetLtmMonitorOutputArgs {
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    partition: pulumi.Input<string>;
}
