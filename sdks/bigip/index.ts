// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { As3Args, As3State } from "./as3";
export type As3 = import("./as3").As3;
export const As3: typeof import("./as3").As3 = null as any;
utilities.lazyLoad(exports, ["As3"], () => require("./as3"));

export { BigiqAs3Args, BigiqAs3State } from "./bigiqAs3";
export type BigiqAs3 = import("./bigiqAs3").BigiqAs3;
export const BigiqAs3: typeof import("./bigiqAs3").BigiqAs3 = null as any;
utilities.lazyLoad(exports, ["BigiqAs3"], () => require("./bigiqAs3"));

export { CmDeviceArgs, CmDeviceState } from "./cmDevice";
export type CmDevice = import("./cmDevice").CmDevice;
export const CmDevice: typeof import("./cmDevice").CmDevice = null as any;
utilities.lazyLoad(exports, ["CmDevice"], () => require("./cmDevice"));

export { CmDevicegroupArgs, CmDevicegroupState } from "./cmDevicegroup";
export type CmDevicegroup = import("./cmDevicegroup").CmDevicegroup;
export const CmDevicegroup: typeof import("./cmDevicegroup").CmDevicegroup = null as any;
utilities.lazyLoad(exports, ["CmDevicegroup"], () => require("./cmDevicegroup"));

export { CommandArgs, CommandState } from "./command";
export type Command = import("./command").Command;
export const Command: typeof import("./command").Command = null as any;
utilities.lazyLoad(exports, ["Command"], () => require("./command"));

export { CommonLicenseManageBigiqArgs, CommonLicenseManageBigiqState } from "./commonLicenseManageBigiq";
export type CommonLicenseManageBigiq = import("./commonLicenseManageBigiq").CommonLicenseManageBigiq;
export const CommonLicenseManageBigiq: typeof import("./commonLicenseManageBigiq").CommonLicenseManageBigiq = null as any;
utilities.lazyLoad(exports, ["CommonLicenseManageBigiq"], () => require("./commonLicenseManageBigiq"));

export { DoArgs, DoState } from "./do";
export type Do = import("./do").Do;
export const Do: typeof import("./do").Do = null as any;
utilities.lazyLoad(exports, ["Do"], () => require("./do"));

export { EventServiceDiscoveryArgs, EventServiceDiscoveryState } from "./eventServiceDiscovery";
export type EventServiceDiscovery = import("./eventServiceDiscovery").EventServiceDiscovery;
export const EventServiceDiscovery: typeof import("./eventServiceDiscovery").EventServiceDiscovery = null as any;
utilities.lazyLoad(exports, ["EventServiceDiscovery"], () => require("./eventServiceDiscovery"));

export { FastApplicationArgs, FastApplicationState } from "./fastApplication";
export type FastApplication = import("./fastApplication").FastApplication;
export const FastApplication: typeof import("./fastApplication").FastApplication = null as any;
utilities.lazyLoad(exports, ["FastApplication"], () => require("./fastApplication"));

export { FastHttpAppArgs, FastHttpAppState } from "./fastHttpApp";
export type FastHttpApp = import("./fastHttpApp").FastHttpApp;
export const FastHttpApp: typeof import("./fastHttpApp").FastHttpApp = null as any;
utilities.lazyLoad(exports, ["FastHttpApp"], () => require("./fastHttpApp"));

export { FastHttpsAppArgs, FastHttpsAppState } from "./fastHttpsApp";
export type FastHttpsApp = import("./fastHttpsApp").FastHttpsApp;
export const FastHttpsApp: typeof import("./fastHttpsApp").FastHttpsApp = null as any;
utilities.lazyLoad(exports, ["FastHttpsApp"], () => require("./fastHttpsApp"));

export { FastTcpAppArgs, FastTcpAppState } from "./fastTcpApp";
export type FastTcpApp = import("./fastTcpApp").FastTcpApp;
export const FastTcpApp: typeof import("./fastTcpApp").FastTcpApp = null as any;
utilities.lazyLoad(exports, ["FastTcpApp"], () => require("./fastTcpApp"));

export { FastTemplateArgs, FastTemplateState } from "./fastTemplate";
export type FastTemplate = import("./fastTemplate").FastTemplate;
export const FastTemplate: typeof import("./fastTemplate").FastTemplate = null as any;
utilities.lazyLoad(exports, ["FastTemplate"], () => require("./fastTemplate"));

export { FastUdpAppArgs, FastUdpAppState } from "./fastUdpApp";
export type FastUdpApp = import("./fastUdpApp").FastUdpApp;
export const FastUdpApp: typeof import("./fastUdpApp").FastUdpApp = null as any;
utilities.lazyLoad(exports, ["FastUdpApp"], () => require("./fastUdpApp"));

export { GetFastAwsServiceDiscoveryArgs, GetFastAwsServiceDiscoveryResult, GetFastAwsServiceDiscoveryOutputArgs } from "./getFastAwsServiceDiscovery";
export const getFastAwsServiceDiscovery: typeof import("./getFastAwsServiceDiscovery").getFastAwsServiceDiscovery = null as any;
export const getFastAwsServiceDiscoveryOutput: typeof import("./getFastAwsServiceDiscovery").getFastAwsServiceDiscoveryOutput = null as any;
utilities.lazyLoad(exports, ["getFastAwsServiceDiscovery","getFastAwsServiceDiscoveryOutput"], () => require("./getFastAwsServiceDiscovery"));

export { GetFastAzureServiceDiscoveryArgs, GetFastAzureServiceDiscoveryResult, GetFastAzureServiceDiscoveryOutputArgs } from "./getFastAzureServiceDiscovery";
export const getFastAzureServiceDiscovery: typeof import("./getFastAzureServiceDiscovery").getFastAzureServiceDiscovery = null as any;
export const getFastAzureServiceDiscoveryOutput: typeof import("./getFastAzureServiceDiscovery").getFastAzureServiceDiscoveryOutput = null as any;
utilities.lazyLoad(exports, ["getFastAzureServiceDiscovery","getFastAzureServiceDiscoveryOutput"], () => require("./getFastAzureServiceDiscovery"));

export { GetFastConsulServiceDiscoveryArgs, GetFastConsulServiceDiscoveryResult, GetFastConsulServiceDiscoveryOutputArgs } from "./getFastConsulServiceDiscovery";
export const getFastConsulServiceDiscovery: typeof import("./getFastConsulServiceDiscovery").getFastConsulServiceDiscovery = null as any;
export const getFastConsulServiceDiscoveryOutput: typeof import("./getFastConsulServiceDiscovery").getFastConsulServiceDiscoveryOutput = null as any;
utilities.lazyLoad(exports, ["getFastConsulServiceDiscovery","getFastConsulServiceDiscoveryOutput"], () => require("./getFastConsulServiceDiscovery"));

export { GetFastGceServiceDiscoveryArgs, GetFastGceServiceDiscoveryResult, GetFastGceServiceDiscoveryOutputArgs } from "./getFastGceServiceDiscovery";
export const getFastGceServiceDiscovery: typeof import("./getFastGceServiceDiscovery").getFastGceServiceDiscovery = null as any;
export const getFastGceServiceDiscoveryOutput: typeof import("./getFastGceServiceDiscovery").getFastGceServiceDiscoveryOutput = null as any;
utilities.lazyLoad(exports, ["getFastGceServiceDiscovery","getFastGceServiceDiscoveryOutput"], () => require("./getFastGceServiceDiscovery"));

export { GetLtmDatagroupArgs, GetLtmDatagroupResult, GetLtmDatagroupOutputArgs } from "./getLtmDatagroup";
export const getLtmDatagroup: typeof import("./getLtmDatagroup").getLtmDatagroup = null as any;
export const getLtmDatagroupOutput: typeof import("./getLtmDatagroup").getLtmDatagroupOutput = null as any;
utilities.lazyLoad(exports, ["getLtmDatagroup","getLtmDatagroupOutput"], () => require("./getLtmDatagroup"));

export { GetLtmIruleArgs, GetLtmIruleResult, GetLtmIruleOutputArgs } from "./getLtmIrule";
export const getLtmIrule: typeof import("./getLtmIrule").getLtmIrule = null as any;
export const getLtmIruleOutput: typeof import("./getLtmIrule").getLtmIruleOutput = null as any;
utilities.lazyLoad(exports, ["getLtmIrule","getLtmIruleOutput"], () => require("./getLtmIrule"));

export { GetLtmMonitorArgs, GetLtmMonitorResult, GetLtmMonitorOutputArgs } from "./getLtmMonitor";
export const getLtmMonitor: typeof import("./getLtmMonitor").getLtmMonitor = null as any;
export const getLtmMonitorOutput: typeof import("./getLtmMonitor").getLtmMonitorOutput = null as any;
utilities.lazyLoad(exports, ["getLtmMonitor","getLtmMonitorOutput"], () => require("./getLtmMonitor"));

export { GetLtmNodeArgs, GetLtmNodeResult, GetLtmNodeOutputArgs } from "./getLtmNode";
export const getLtmNode: typeof import("./getLtmNode").getLtmNode = null as any;
export const getLtmNodeOutput: typeof import("./getLtmNode").getLtmNodeOutput = null as any;
utilities.lazyLoad(exports, ["getLtmNode","getLtmNodeOutput"], () => require("./getLtmNode"));

export { GetLtmPolicyArgs, GetLtmPolicyResult, GetLtmPolicyOutputArgs } from "./getLtmPolicy";
export const getLtmPolicy: typeof import("./getLtmPolicy").getLtmPolicy = null as any;
export const getLtmPolicyOutput: typeof import("./getLtmPolicy").getLtmPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getLtmPolicy","getLtmPolicyOutput"], () => require("./getLtmPolicy"));

export { GetLtmPoolArgs, GetLtmPoolResult, GetLtmPoolOutputArgs } from "./getLtmPool";
export const getLtmPool: typeof import("./getLtmPool").getLtmPool = null as any;
export const getLtmPoolOutput: typeof import("./getLtmPool").getLtmPoolOutput = null as any;
utilities.lazyLoad(exports, ["getLtmPool","getLtmPoolOutput"], () => require("./getLtmPool"));

export { GetSslCertificateArgs, GetSslCertificateResult, GetSslCertificateOutputArgs } from "./getSslCertificate";
export const getSslCertificate: typeof import("./getSslCertificate").getSslCertificate = null as any;
export const getSslCertificateOutput: typeof import("./getSslCertificate").getSslCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getSslCertificate","getSslCertificateOutput"], () => require("./getSslCertificate"));

export { GetVwanConfigArgs, GetVwanConfigResult, GetVwanConfigOutputArgs } from "./getVwanConfig";
export const getVwanConfig: typeof import("./getVwanConfig").getVwanConfig = null as any;
export const getVwanConfigOutput: typeof import("./getVwanConfig").getVwanConfigOutput = null as any;
utilities.lazyLoad(exports, ["getVwanConfig","getVwanConfigOutput"], () => require("./getVwanConfig"));

export { GetWafEntityParameterArgs, GetWafEntityParameterResult, GetWafEntityParameterOutputArgs } from "./getWafEntityParameter";
export const getWafEntityParameter: typeof import("./getWafEntityParameter").getWafEntityParameter = null as any;
export const getWafEntityParameterOutput: typeof import("./getWafEntityParameter").getWafEntityParameterOutput = null as any;
utilities.lazyLoad(exports, ["getWafEntityParameter","getWafEntityParameterOutput"], () => require("./getWafEntityParameter"));

export { GetWafEntityUrlArgs, GetWafEntityUrlResult, GetWafEntityUrlOutputArgs } from "./getWafEntityUrl";
export const getWafEntityUrl: typeof import("./getWafEntityUrl").getWafEntityUrl = null as any;
export const getWafEntityUrlOutput: typeof import("./getWafEntityUrl").getWafEntityUrlOutput = null as any;
utilities.lazyLoad(exports, ["getWafEntityUrl","getWafEntityUrlOutput"], () => require("./getWafEntityUrl"));

export { GetWafPbSuggestionsArgs, GetWafPbSuggestionsResult, GetWafPbSuggestionsOutputArgs } from "./getWafPbSuggestions";
export const getWafPbSuggestions: typeof import("./getWafPbSuggestions").getWafPbSuggestions = null as any;
export const getWafPbSuggestionsOutput: typeof import("./getWafPbSuggestions").getWafPbSuggestionsOutput = null as any;
utilities.lazyLoad(exports, ["getWafPbSuggestions","getWafPbSuggestionsOutput"], () => require("./getWafPbSuggestions"));

export { GetWafPolicyArgs, GetWafPolicyResult, GetWafPolicyOutputArgs } from "./getWafPolicy";
export const getWafPolicy: typeof import("./getWafPolicy").getWafPolicy = null as any;
export const getWafPolicyOutput: typeof import("./getWafPolicy").getWafPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getWafPolicy","getWafPolicyOutput"], () => require("./getWafPolicy"));

export { GetWafSignaturesArgs, GetWafSignaturesResult, GetWafSignaturesOutputArgs } from "./getWafSignatures";
export const getWafSignatures: typeof import("./getWafSignatures").getWafSignatures = null as any;
export const getWafSignaturesOutput: typeof import("./getWafSignatures").getWafSignaturesOutput = null as any;
utilities.lazyLoad(exports, ["getWafSignatures","getWafSignaturesOutput"], () => require("./getWafSignatures"));

export { IpsecPolicyArgs, IpsecPolicyState } from "./ipsecPolicy";
export type IpsecPolicy = import("./ipsecPolicy").IpsecPolicy;
export const IpsecPolicy: typeof import("./ipsecPolicy").IpsecPolicy = null as any;
utilities.lazyLoad(exports, ["IpsecPolicy"], () => require("./ipsecPolicy"));

export { IpsecProfileArgs, IpsecProfileState } from "./ipsecProfile";
export type IpsecProfile = import("./ipsecProfile").IpsecProfile;
export const IpsecProfile: typeof import("./ipsecProfile").IpsecProfile = null as any;
utilities.lazyLoad(exports, ["IpsecProfile"], () => require("./ipsecProfile"));

export { LtmCipherGroupArgs, LtmCipherGroupState } from "./ltmCipherGroup";
export type LtmCipherGroup = import("./ltmCipherGroup").LtmCipherGroup;
export const LtmCipherGroup: typeof import("./ltmCipherGroup").LtmCipherGroup = null as any;
utilities.lazyLoad(exports, ["LtmCipherGroup"], () => require("./ltmCipherGroup"));

export { LtmCipherRuleArgs, LtmCipherRuleState } from "./ltmCipherRule";
export type LtmCipherRule = import("./ltmCipherRule").LtmCipherRule;
export const LtmCipherRule: typeof import("./ltmCipherRule").LtmCipherRule = null as any;
utilities.lazyLoad(exports, ["LtmCipherRule"], () => require("./ltmCipherRule"));

export { LtmDatagroupArgs, LtmDatagroupState } from "./ltmDatagroup";
export type LtmDatagroup = import("./ltmDatagroup").LtmDatagroup;
export const LtmDatagroup: typeof import("./ltmDatagroup").LtmDatagroup = null as any;
utilities.lazyLoad(exports, ["LtmDatagroup"], () => require("./ltmDatagroup"));

export { LtmIruleArgs, LtmIruleState } from "./ltmIrule";
export type LtmIrule = import("./ltmIrule").LtmIrule;
export const LtmIrule: typeof import("./ltmIrule").LtmIrule = null as any;
utilities.lazyLoad(exports, ["LtmIrule"], () => require("./ltmIrule"));

export { LtmMonitorArgs, LtmMonitorState } from "./ltmMonitor";
export type LtmMonitor = import("./ltmMonitor").LtmMonitor;
export const LtmMonitor: typeof import("./ltmMonitor").LtmMonitor = null as any;
utilities.lazyLoad(exports, ["LtmMonitor"], () => require("./ltmMonitor"));

export { LtmNodeArgs, LtmNodeState } from "./ltmNode";
export type LtmNode = import("./ltmNode").LtmNode;
export const LtmNode: typeof import("./ltmNode").LtmNode = null as any;
utilities.lazyLoad(exports, ["LtmNode"], () => require("./ltmNode"));

export { LtmPersistenceProfileCookieArgs, LtmPersistenceProfileCookieState } from "./ltmPersistenceProfileCookie";
export type LtmPersistenceProfileCookie = import("./ltmPersistenceProfileCookie").LtmPersistenceProfileCookie;
export const LtmPersistenceProfileCookie: typeof import("./ltmPersistenceProfileCookie").LtmPersistenceProfileCookie = null as any;
utilities.lazyLoad(exports, ["LtmPersistenceProfileCookie"], () => require("./ltmPersistenceProfileCookie"));

export { LtmPersistenceProfileDstaddrArgs, LtmPersistenceProfileDstaddrState } from "./ltmPersistenceProfileDstaddr";
export type LtmPersistenceProfileDstaddr = import("./ltmPersistenceProfileDstaddr").LtmPersistenceProfileDstaddr;
export const LtmPersistenceProfileDstaddr: typeof import("./ltmPersistenceProfileDstaddr").LtmPersistenceProfileDstaddr = null as any;
utilities.lazyLoad(exports, ["LtmPersistenceProfileDstaddr"], () => require("./ltmPersistenceProfileDstaddr"));

export { LtmPersistenceProfileSrcaddrArgs, LtmPersistenceProfileSrcaddrState } from "./ltmPersistenceProfileSrcaddr";
export type LtmPersistenceProfileSrcaddr = import("./ltmPersistenceProfileSrcaddr").LtmPersistenceProfileSrcaddr;
export const LtmPersistenceProfileSrcaddr: typeof import("./ltmPersistenceProfileSrcaddr").LtmPersistenceProfileSrcaddr = null as any;
utilities.lazyLoad(exports, ["LtmPersistenceProfileSrcaddr"], () => require("./ltmPersistenceProfileSrcaddr"));

export { LtmPersistenceProfileSslArgs, LtmPersistenceProfileSslState } from "./ltmPersistenceProfileSsl";
export type LtmPersistenceProfileSsl = import("./ltmPersistenceProfileSsl").LtmPersistenceProfileSsl;
export const LtmPersistenceProfileSsl: typeof import("./ltmPersistenceProfileSsl").LtmPersistenceProfileSsl = null as any;
utilities.lazyLoad(exports, ["LtmPersistenceProfileSsl"], () => require("./ltmPersistenceProfileSsl"));

export { LtmPolicyArgs, LtmPolicyState } from "./ltmPolicy";
export type LtmPolicy = import("./ltmPolicy").LtmPolicy;
export const LtmPolicy: typeof import("./ltmPolicy").LtmPolicy = null as any;
utilities.lazyLoad(exports, ["LtmPolicy"], () => require("./ltmPolicy"));

export { LtmPoolArgs, LtmPoolState } from "./ltmPool";
export type LtmPool = import("./ltmPool").LtmPool;
export const LtmPool: typeof import("./ltmPool").LtmPool = null as any;
utilities.lazyLoad(exports, ["LtmPool"], () => require("./ltmPool"));

export { LtmPoolAttachmentArgs, LtmPoolAttachmentState } from "./ltmPoolAttachment";
export type LtmPoolAttachment = import("./ltmPoolAttachment").LtmPoolAttachment;
export const LtmPoolAttachment: typeof import("./ltmPoolAttachment").LtmPoolAttachment = null as any;
utilities.lazyLoad(exports, ["LtmPoolAttachment"], () => require("./ltmPoolAttachment"));

export { LtmProfileBotDefenseArgs, LtmProfileBotDefenseState } from "./ltmProfileBotDefense";
export type LtmProfileBotDefense = import("./ltmProfileBotDefense").LtmProfileBotDefense;
export const LtmProfileBotDefense: typeof import("./ltmProfileBotDefense").LtmProfileBotDefense = null as any;
utilities.lazyLoad(exports, ["LtmProfileBotDefense"], () => require("./ltmProfileBotDefense"));

export { LtmProfileClientSslArgs, LtmProfileClientSslState } from "./ltmProfileClientSsl";
export type LtmProfileClientSsl = import("./ltmProfileClientSsl").LtmProfileClientSsl;
export const LtmProfileClientSsl: typeof import("./ltmProfileClientSsl").LtmProfileClientSsl = null as any;
utilities.lazyLoad(exports, ["LtmProfileClientSsl"], () => require("./ltmProfileClientSsl"));

export { LtmProfileFasthttpArgs, LtmProfileFasthttpState } from "./ltmProfileFasthttp";
export type LtmProfileFasthttp = import("./ltmProfileFasthttp").LtmProfileFasthttp;
export const LtmProfileFasthttp: typeof import("./ltmProfileFasthttp").LtmProfileFasthttp = null as any;
utilities.lazyLoad(exports, ["LtmProfileFasthttp"], () => require("./ltmProfileFasthttp"));

export { LtmProfileFastl4Args, LtmProfileFastl4State } from "./ltmProfileFastl4";
export type LtmProfileFastl4 = import("./ltmProfileFastl4").LtmProfileFastl4;
export const LtmProfileFastl4: typeof import("./ltmProfileFastl4").LtmProfileFastl4 = null as any;
utilities.lazyLoad(exports, ["LtmProfileFastl4"], () => require("./ltmProfileFastl4"));

export { LtmProfileFtpArgs, LtmProfileFtpState } from "./ltmProfileFtp";
export type LtmProfileFtp = import("./ltmProfileFtp").LtmProfileFtp;
export const LtmProfileFtp: typeof import("./ltmProfileFtp").LtmProfileFtp = null as any;
utilities.lazyLoad(exports, ["LtmProfileFtp"], () => require("./ltmProfileFtp"));

export { LtmProfileHttpArgs, LtmProfileHttpState } from "./ltmProfileHttp";
export type LtmProfileHttp = import("./ltmProfileHttp").LtmProfileHttp;
export const LtmProfileHttp: typeof import("./ltmProfileHttp").LtmProfileHttp = null as any;
utilities.lazyLoad(exports, ["LtmProfileHttp"], () => require("./ltmProfileHttp"));

export { LtmProfileHttp2Args, LtmProfileHttp2State } from "./ltmProfileHttp2";
export type LtmProfileHttp2 = import("./ltmProfileHttp2").LtmProfileHttp2;
export const LtmProfileHttp2: typeof import("./ltmProfileHttp2").LtmProfileHttp2 = null as any;
utilities.lazyLoad(exports, ["LtmProfileHttp2"], () => require("./ltmProfileHttp2"));

export { LtmProfileHttpcompressArgs, LtmProfileHttpcompressState } from "./ltmProfileHttpcompress";
export type LtmProfileHttpcompress = import("./ltmProfileHttpcompress").LtmProfileHttpcompress;
export const LtmProfileHttpcompress: typeof import("./ltmProfileHttpcompress").LtmProfileHttpcompress = null as any;
utilities.lazyLoad(exports, ["LtmProfileHttpcompress"], () => require("./ltmProfileHttpcompress"));

export { LtmProfileOneconnectArgs, LtmProfileOneconnectState } from "./ltmProfileOneconnect";
export type LtmProfileOneconnect = import("./ltmProfileOneconnect").LtmProfileOneconnect;
export const LtmProfileOneconnect: typeof import("./ltmProfileOneconnect").LtmProfileOneconnect = null as any;
utilities.lazyLoad(exports, ["LtmProfileOneconnect"], () => require("./ltmProfileOneconnect"));

export { LtmProfileRewriteArgs, LtmProfileRewriteState } from "./ltmProfileRewrite";
export type LtmProfileRewrite = import("./ltmProfileRewrite").LtmProfileRewrite;
export const LtmProfileRewrite: typeof import("./ltmProfileRewrite").LtmProfileRewrite = null as any;
utilities.lazyLoad(exports, ["LtmProfileRewrite"], () => require("./ltmProfileRewrite"));

export { LtmProfileRewriteUriRulesArgs, LtmProfileRewriteUriRulesState } from "./ltmProfileRewriteUriRules";
export type LtmProfileRewriteUriRules = import("./ltmProfileRewriteUriRules").LtmProfileRewriteUriRules;
export const LtmProfileRewriteUriRules: typeof import("./ltmProfileRewriteUriRules").LtmProfileRewriteUriRules = null as any;
utilities.lazyLoad(exports, ["LtmProfileRewriteUriRules"], () => require("./ltmProfileRewriteUriRules"));

export { LtmProfileServerSslArgs, LtmProfileServerSslState } from "./ltmProfileServerSsl";
export type LtmProfileServerSsl = import("./ltmProfileServerSsl").LtmProfileServerSsl;
export const LtmProfileServerSsl: typeof import("./ltmProfileServerSsl").LtmProfileServerSsl = null as any;
utilities.lazyLoad(exports, ["LtmProfileServerSsl"], () => require("./ltmProfileServerSsl"));

export { LtmProfileTcpArgs, LtmProfileTcpState } from "./ltmProfileTcp";
export type LtmProfileTcp = import("./ltmProfileTcp").LtmProfileTcp;
export const LtmProfileTcp: typeof import("./ltmProfileTcp").LtmProfileTcp = null as any;
utilities.lazyLoad(exports, ["LtmProfileTcp"], () => require("./ltmProfileTcp"));

export { LtmProfileWebAccelerationArgs, LtmProfileWebAccelerationState } from "./ltmProfileWebAcceleration";
export type LtmProfileWebAcceleration = import("./ltmProfileWebAcceleration").LtmProfileWebAcceleration;
export const LtmProfileWebAcceleration: typeof import("./ltmProfileWebAcceleration").LtmProfileWebAcceleration = null as any;
utilities.lazyLoad(exports, ["LtmProfileWebAcceleration"], () => require("./ltmProfileWebAcceleration"));

export { LtmRequestLogProfileArgs, LtmRequestLogProfileState } from "./ltmRequestLogProfile";
export type LtmRequestLogProfile = import("./ltmRequestLogProfile").LtmRequestLogProfile;
export const LtmRequestLogProfile: typeof import("./ltmRequestLogProfile").LtmRequestLogProfile = null as any;
utilities.lazyLoad(exports, ["LtmRequestLogProfile"], () => require("./ltmRequestLogProfile"));

export { LtmSnatArgs, LtmSnatState } from "./ltmSnat";
export type LtmSnat = import("./ltmSnat").LtmSnat;
export const LtmSnat: typeof import("./ltmSnat").LtmSnat = null as any;
utilities.lazyLoad(exports, ["LtmSnat"], () => require("./ltmSnat"));

export { LtmSnatpoolArgs, LtmSnatpoolState } from "./ltmSnatpool";
export type LtmSnatpool = import("./ltmSnatpool").LtmSnatpool;
export const LtmSnatpool: typeof import("./ltmSnatpool").LtmSnatpool = null as any;
utilities.lazyLoad(exports, ["LtmSnatpool"], () => require("./ltmSnatpool"));

export { LtmVirtualAddressArgs, LtmVirtualAddressState } from "./ltmVirtualAddress";
export type LtmVirtualAddress = import("./ltmVirtualAddress").LtmVirtualAddress;
export const LtmVirtualAddress: typeof import("./ltmVirtualAddress").LtmVirtualAddress = null as any;
utilities.lazyLoad(exports, ["LtmVirtualAddress"], () => require("./ltmVirtualAddress"));

export { LtmVirtualServerArgs, LtmVirtualServerState } from "./ltmVirtualServer";
export type LtmVirtualServer = import("./ltmVirtualServer").LtmVirtualServer;
export const LtmVirtualServer: typeof import("./ltmVirtualServer").LtmVirtualServer = null as any;
utilities.lazyLoad(exports, ["LtmVirtualServer"], () => require("./ltmVirtualServer"));

export { NetIkePeerArgs, NetIkePeerState } from "./netIkePeer";
export type NetIkePeer = import("./netIkePeer").NetIkePeer;
export const NetIkePeer: typeof import("./netIkePeer").NetIkePeer = null as any;
utilities.lazyLoad(exports, ["NetIkePeer"], () => require("./netIkePeer"));

export { NetRouteArgs, NetRouteState } from "./netRoute";
export type NetRoute = import("./netRoute").NetRoute;
export const NetRoute: typeof import("./netRoute").NetRoute = null as any;
utilities.lazyLoad(exports, ["NetRoute"], () => require("./netRoute"));

export { NetSelfipArgs, NetSelfipState } from "./netSelfip";
export type NetSelfip = import("./netSelfip").NetSelfip;
export const NetSelfip: typeof import("./netSelfip").NetSelfip = null as any;
utilities.lazyLoad(exports, ["NetSelfip"], () => require("./netSelfip"));

export { NetTunnelArgs, NetTunnelState } from "./netTunnel";
export type NetTunnel = import("./netTunnel").NetTunnel;
export const NetTunnel: typeof import("./netTunnel").NetTunnel = null as any;
utilities.lazyLoad(exports, ["NetTunnel"], () => require("./netTunnel"));

export { NetVlanArgs, NetVlanState } from "./netVlan";
export type NetVlan = import("./netVlan").NetVlan;
export const NetVlan: typeof import("./netVlan").NetVlan = null as any;
utilities.lazyLoad(exports, ["NetVlan"], () => require("./netVlan"));

export { PartitionArgs, PartitionState } from "./partition";
export type Partition = import("./partition").Partition;
export const Partition: typeof import("./partition").Partition = null as any;
utilities.lazyLoad(exports, ["Partition"], () => require("./partition"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SslCertificateArgs, SslCertificateState } from "./sslCertificate";
export type SslCertificate = import("./sslCertificate").SslCertificate;
export const SslCertificate: typeof import("./sslCertificate").SslCertificate = null as any;
utilities.lazyLoad(exports, ["SslCertificate"], () => require("./sslCertificate"));

export { SslKeyArgs, SslKeyState } from "./sslKey";
export type SslKey = import("./sslKey").SslKey;
export const SslKey: typeof import("./sslKey").SslKey = null as any;
utilities.lazyLoad(exports, ["SslKey"], () => require("./sslKey"));

export { SslKeyCertArgs, SslKeyCertState } from "./sslKeyCert";
export type SslKeyCert = import("./sslKeyCert").SslKeyCert;
export const SslKeyCert: typeof import("./sslKeyCert").SslKeyCert = null as any;
utilities.lazyLoad(exports, ["SslKeyCert"], () => require("./sslKeyCert"));

export { SysBigiplicenseArgs, SysBigiplicenseState } from "./sysBigiplicense";
export type SysBigiplicense = import("./sysBigiplicense").SysBigiplicense;
export const SysBigiplicense: typeof import("./sysBigiplicense").SysBigiplicense = null as any;
utilities.lazyLoad(exports, ["SysBigiplicense"], () => require("./sysBigiplicense"));

export { SysDnsArgs, SysDnsState } from "./sysDns";
export type SysDns = import("./sysDns").SysDns;
export const SysDns: typeof import("./sysDns").SysDns = null as any;
utilities.lazyLoad(exports, ["SysDns"], () => require("./sysDns"));

export { SysIappArgs, SysIappState } from "./sysIapp";
export type SysIapp = import("./sysIapp").SysIapp;
export const SysIapp: typeof import("./sysIapp").SysIapp = null as any;
utilities.lazyLoad(exports, ["SysIapp"], () => require("./sysIapp"));

export { SysNtpArgs, SysNtpState } from "./sysNtp";
export type SysNtp = import("./sysNtp").SysNtp;
export const SysNtp: typeof import("./sysNtp").SysNtp = null as any;
utilities.lazyLoad(exports, ["SysNtp"], () => require("./sysNtp"));

export { SysOcspArgs, SysOcspState } from "./sysOcsp";
export type SysOcsp = import("./sysOcsp").SysOcsp;
export const SysOcsp: typeof import("./sysOcsp").SysOcsp = null as any;
utilities.lazyLoad(exports, ["SysOcsp"], () => require("./sysOcsp"));

export { SysProvisionArgs, SysProvisionState } from "./sysProvision";
export type SysProvision = import("./sysProvision").SysProvision;
export const SysProvision: typeof import("./sysProvision").SysProvision = null as any;
utilities.lazyLoad(exports, ["SysProvision"], () => require("./sysProvision"));

export { SysSnmpArgs, SysSnmpState } from "./sysSnmp";
export type SysSnmp = import("./sysSnmp").SysSnmp;
export const SysSnmp: typeof import("./sysSnmp").SysSnmp = null as any;
utilities.lazyLoad(exports, ["SysSnmp"], () => require("./sysSnmp"));

export { SysSnmpTrapsArgs, SysSnmpTrapsState } from "./sysSnmpTraps";
export type SysSnmpTraps = import("./sysSnmpTraps").SysSnmpTraps;
export const SysSnmpTraps: typeof import("./sysSnmpTraps").SysSnmpTraps = null as any;
utilities.lazyLoad(exports, ["SysSnmpTraps"], () => require("./sysSnmpTraps"));

export { TrafficSelectorArgs, TrafficSelectorState } from "./trafficSelector";
export type TrafficSelector = import("./trafficSelector").TrafficSelector;
export const TrafficSelector: typeof import("./trafficSelector").TrafficSelector = null as any;
utilities.lazyLoad(exports, ["TrafficSelector"], () => require("./trafficSelector"));

export { VcmpGuestArgs, VcmpGuestState } from "./vcmpGuest";
export type VcmpGuest = import("./vcmpGuest").VcmpGuest;
export const VcmpGuest: typeof import("./vcmpGuest").VcmpGuest = null as any;
utilities.lazyLoad(exports, ["VcmpGuest"], () => require("./vcmpGuest"));

export { WafPolicyArgs, WafPolicyState } from "./wafPolicy";
export type WafPolicy = import("./wafPolicy").WafPolicy;
export const WafPolicy: typeof import("./wafPolicy").WafPolicy = null as any;
utilities.lazyLoad(exports, ["WafPolicy"], () => require("./wafPolicy"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "bigip:index/as3:As3":
                return new As3(name, <any>undefined, { urn })
            case "bigip:index/bigiqAs3:BigiqAs3":
                return new BigiqAs3(name, <any>undefined, { urn })
            case "bigip:index/cmDevice:CmDevice":
                return new CmDevice(name, <any>undefined, { urn })
            case "bigip:index/cmDevicegroup:CmDevicegroup":
                return new CmDevicegroup(name, <any>undefined, { urn })
            case "bigip:index/command:Command":
                return new Command(name, <any>undefined, { urn })
            case "bigip:index/commonLicenseManageBigiq:CommonLicenseManageBigiq":
                return new CommonLicenseManageBigiq(name, <any>undefined, { urn })
            case "bigip:index/do:Do":
                return new Do(name, <any>undefined, { urn })
            case "bigip:index/eventServiceDiscovery:EventServiceDiscovery":
                return new EventServiceDiscovery(name, <any>undefined, { urn })
            case "bigip:index/fastApplication:FastApplication":
                return new FastApplication(name, <any>undefined, { urn })
            case "bigip:index/fastHttpApp:FastHttpApp":
                return new FastHttpApp(name, <any>undefined, { urn })
            case "bigip:index/fastHttpsApp:FastHttpsApp":
                return new FastHttpsApp(name, <any>undefined, { urn })
            case "bigip:index/fastTcpApp:FastTcpApp":
                return new FastTcpApp(name, <any>undefined, { urn })
            case "bigip:index/fastTemplate:FastTemplate":
                return new FastTemplate(name, <any>undefined, { urn })
            case "bigip:index/fastUdpApp:FastUdpApp":
                return new FastUdpApp(name, <any>undefined, { urn })
            case "bigip:index/ipsecPolicy:IpsecPolicy":
                return new IpsecPolicy(name, <any>undefined, { urn })
            case "bigip:index/ipsecProfile:IpsecProfile":
                return new IpsecProfile(name, <any>undefined, { urn })
            case "bigip:index/ltmCipherGroup:LtmCipherGroup":
                return new LtmCipherGroup(name, <any>undefined, { urn })
            case "bigip:index/ltmCipherRule:LtmCipherRule":
                return new LtmCipherRule(name, <any>undefined, { urn })
            case "bigip:index/ltmDatagroup:LtmDatagroup":
                return new LtmDatagroup(name, <any>undefined, { urn })
            case "bigip:index/ltmIrule:LtmIrule":
                return new LtmIrule(name, <any>undefined, { urn })
            case "bigip:index/ltmMonitor:LtmMonitor":
                return new LtmMonitor(name, <any>undefined, { urn })
            case "bigip:index/ltmNode:LtmNode":
                return new LtmNode(name, <any>undefined, { urn })
            case "bigip:index/ltmPersistenceProfileCookie:LtmPersistenceProfileCookie":
                return new LtmPersistenceProfileCookie(name, <any>undefined, { urn })
            case "bigip:index/ltmPersistenceProfileDstaddr:LtmPersistenceProfileDstaddr":
                return new LtmPersistenceProfileDstaddr(name, <any>undefined, { urn })
            case "bigip:index/ltmPersistenceProfileSrcaddr:LtmPersistenceProfileSrcaddr":
                return new LtmPersistenceProfileSrcaddr(name, <any>undefined, { urn })
            case "bigip:index/ltmPersistenceProfileSsl:LtmPersistenceProfileSsl":
                return new LtmPersistenceProfileSsl(name, <any>undefined, { urn })
            case "bigip:index/ltmPolicy:LtmPolicy":
                return new LtmPolicy(name, <any>undefined, { urn })
            case "bigip:index/ltmPool:LtmPool":
                return new LtmPool(name, <any>undefined, { urn })
            case "bigip:index/ltmPoolAttachment:LtmPoolAttachment":
                return new LtmPoolAttachment(name, <any>undefined, { urn })
            case "bigip:index/ltmProfileBotDefense:LtmProfileBotDefense":
                return new LtmProfileBotDefense(name, <any>undefined, { urn })
            case "bigip:index/ltmProfileClientSsl:LtmProfileClientSsl":
                return new LtmProfileClientSsl(name, <any>undefined, { urn })
            case "bigip:index/ltmProfileFasthttp:LtmProfileFasthttp":
                return new LtmProfileFasthttp(name, <any>undefined, { urn })
            case "bigip:index/ltmProfileFastl4:LtmProfileFastl4":
                return new LtmProfileFastl4(name, <any>undefined, { urn })
            case "bigip:index/ltmProfileFtp:LtmProfileFtp":
                return new LtmProfileFtp(name, <any>undefined, { urn })
            case "bigip:index/ltmProfileHttp2:LtmProfileHttp2":
                return new LtmProfileHttp2(name, <any>undefined, { urn })
            case "bigip:index/ltmProfileHttp:LtmProfileHttp":
                return new LtmProfileHttp(name, <any>undefined, { urn })
            case "bigip:index/ltmProfileHttpcompress:LtmProfileHttpcompress":
                return new LtmProfileHttpcompress(name, <any>undefined, { urn })
            case "bigip:index/ltmProfileOneconnect:LtmProfileOneconnect":
                return new LtmProfileOneconnect(name, <any>undefined, { urn })
            case "bigip:index/ltmProfileRewrite:LtmProfileRewrite":
                return new LtmProfileRewrite(name, <any>undefined, { urn })
            case "bigip:index/ltmProfileRewriteUriRules:LtmProfileRewriteUriRules":
                return new LtmProfileRewriteUriRules(name, <any>undefined, { urn })
            case "bigip:index/ltmProfileServerSsl:LtmProfileServerSsl":
                return new LtmProfileServerSsl(name, <any>undefined, { urn })
            case "bigip:index/ltmProfileTcp:LtmProfileTcp":
                return new LtmProfileTcp(name, <any>undefined, { urn })
            case "bigip:index/ltmProfileWebAcceleration:LtmProfileWebAcceleration":
                return new LtmProfileWebAcceleration(name, <any>undefined, { urn })
            case "bigip:index/ltmRequestLogProfile:LtmRequestLogProfile":
                return new LtmRequestLogProfile(name, <any>undefined, { urn })
            case "bigip:index/ltmSnat:LtmSnat":
                return new LtmSnat(name, <any>undefined, { urn })
            case "bigip:index/ltmSnatpool:LtmSnatpool":
                return new LtmSnatpool(name, <any>undefined, { urn })
            case "bigip:index/ltmVirtualAddress:LtmVirtualAddress":
                return new LtmVirtualAddress(name, <any>undefined, { urn })
            case "bigip:index/ltmVirtualServer:LtmVirtualServer":
                return new LtmVirtualServer(name, <any>undefined, { urn })
            case "bigip:index/netIkePeer:NetIkePeer":
                return new NetIkePeer(name, <any>undefined, { urn })
            case "bigip:index/netRoute:NetRoute":
                return new NetRoute(name, <any>undefined, { urn })
            case "bigip:index/netSelfip:NetSelfip":
                return new NetSelfip(name, <any>undefined, { urn })
            case "bigip:index/netTunnel:NetTunnel":
                return new NetTunnel(name, <any>undefined, { urn })
            case "bigip:index/netVlan:NetVlan":
                return new NetVlan(name, <any>undefined, { urn })
            case "bigip:index/partition:Partition":
                return new Partition(name, <any>undefined, { urn })
            case "bigip:index/sslCertificate:SslCertificate":
                return new SslCertificate(name, <any>undefined, { urn })
            case "bigip:index/sslKey:SslKey":
                return new SslKey(name, <any>undefined, { urn })
            case "bigip:index/sslKeyCert:SslKeyCert":
                return new SslKeyCert(name, <any>undefined, { urn })
            case "bigip:index/sysBigiplicense:SysBigiplicense":
                return new SysBigiplicense(name, <any>undefined, { urn })
            case "bigip:index/sysDns:SysDns":
                return new SysDns(name, <any>undefined, { urn })
            case "bigip:index/sysIapp:SysIapp":
                return new SysIapp(name, <any>undefined, { urn })
            case "bigip:index/sysNtp:SysNtp":
                return new SysNtp(name, <any>undefined, { urn })
            case "bigip:index/sysOcsp:SysOcsp":
                return new SysOcsp(name, <any>undefined, { urn })
            case "bigip:index/sysProvision:SysProvision":
                return new SysProvision(name, <any>undefined, { urn })
            case "bigip:index/sysSnmp:SysSnmp":
                return new SysSnmp(name, <any>undefined, { urn })
            case "bigip:index/sysSnmpTraps:SysSnmpTraps":
                return new SysSnmpTraps(name, <any>undefined, { urn })
            case "bigip:index/trafficSelector:TrafficSelector":
                return new TrafficSelector(name, <any>undefined, { urn })
            case "bigip:index/vcmpGuest:VcmpGuest":
                return new VcmpGuest(name, <any>undefined, { urn })
            case "bigip:index/wafPolicy:WafPolicy":
                return new WafPolicy(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("bigip", "index/as3", _module)
pulumi.runtime.registerResourceModule("bigip", "index/bigiqAs3", _module)
pulumi.runtime.registerResourceModule("bigip", "index/cmDevice", _module)
pulumi.runtime.registerResourceModule("bigip", "index/cmDevicegroup", _module)
pulumi.runtime.registerResourceModule("bigip", "index/command", _module)
pulumi.runtime.registerResourceModule("bigip", "index/commonLicenseManageBigiq", _module)
pulumi.runtime.registerResourceModule("bigip", "index/do", _module)
pulumi.runtime.registerResourceModule("bigip", "index/eventServiceDiscovery", _module)
pulumi.runtime.registerResourceModule("bigip", "index/fastApplication", _module)
pulumi.runtime.registerResourceModule("bigip", "index/fastHttpApp", _module)
pulumi.runtime.registerResourceModule("bigip", "index/fastHttpsApp", _module)
pulumi.runtime.registerResourceModule("bigip", "index/fastTcpApp", _module)
pulumi.runtime.registerResourceModule("bigip", "index/fastTemplate", _module)
pulumi.runtime.registerResourceModule("bigip", "index/fastUdpApp", _module)
pulumi.runtime.registerResourceModule("bigip", "index/ipsecPolicy", _module)
pulumi.runtime.registerResourceModule("bigip", "index/ipsecProfile", _module)
pulumi.runtime.registerResourceModule("bigip", "index/ltmCipherGroup", _module)
pulumi.runtime.registerResourceModule("bigip", "index/ltmCipherRule", _module)
pulumi.runtime.registerResourceModule("bigip", "index/ltmDatagroup", _module)
pulumi.runtime.registerResourceModule("bigip", "index/ltmIrule", _module)
pulumi.runtime.registerResourceModule("bigip", "index/ltmMonitor", _module)
pulumi.runtime.registerResourceModule("bigip", "index/ltmNode", _module)
pulumi.runtime.registerResourceModule("bigip", "index/ltmPersistenceProfileCookie", _module)
pulumi.runtime.registerResourceModule("bigip", "index/ltmPersistenceProfileDstaddr", _module)
pulumi.runtime.registerResourceModule("bigip", "index/ltmPersistenceProfileSrcaddr", _module)
pulumi.runtime.registerResourceModule("bigip", "index/ltmPersistenceProfileSsl", _module)
pulumi.runtime.registerResourceModule("bigip", "index/ltmPolicy", _module)
pulumi.runtime.registerResourceModule("bigip", "index/ltmPool", _module)
pulumi.runtime.registerResourceModule("bigip", "index/ltmPoolAttachment", _module)
pulumi.runtime.registerResourceModule("bigip", "index/ltmProfileBotDefense", _module)
pulumi.runtime.registerResourceModule("bigip", "index/ltmProfileClientSsl", _module)
pulumi.runtime.registerResourceModule("bigip", "index/ltmProfileFasthttp", _module)
pulumi.runtime.registerResourceModule("bigip", "index/ltmProfileFastl4", _module)
pulumi.runtime.registerResourceModule("bigip", "index/ltmProfileFtp", _module)
pulumi.runtime.registerResourceModule("bigip", "index/ltmProfileHttp", _module)
pulumi.runtime.registerResourceModule("bigip", "index/ltmProfileHttp2", _module)
pulumi.runtime.registerResourceModule("bigip", "index/ltmProfileHttpcompress", _module)
pulumi.runtime.registerResourceModule("bigip", "index/ltmProfileOneconnect", _module)
pulumi.runtime.registerResourceModule("bigip", "index/ltmProfileRewrite", _module)
pulumi.runtime.registerResourceModule("bigip", "index/ltmProfileRewriteUriRules", _module)
pulumi.runtime.registerResourceModule("bigip", "index/ltmProfileServerSsl", _module)
pulumi.runtime.registerResourceModule("bigip", "index/ltmProfileTcp", _module)
pulumi.runtime.registerResourceModule("bigip", "index/ltmProfileWebAcceleration", _module)
pulumi.runtime.registerResourceModule("bigip", "index/ltmRequestLogProfile", _module)
pulumi.runtime.registerResourceModule("bigip", "index/ltmSnat", _module)
pulumi.runtime.registerResourceModule("bigip", "index/ltmSnatpool", _module)
pulumi.runtime.registerResourceModule("bigip", "index/ltmVirtualAddress", _module)
pulumi.runtime.registerResourceModule("bigip", "index/ltmVirtualServer", _module)
pulumi.runtime.registerResourceModule("bigip", "index/netIkePeer", _module)
pulumi.runtime.registerResourceModule("bigip", "index/netRoute", _module)
pulumi.runtime.registerResourceModule("bigip", "index/netSelfip", _module)
pulumi.runtime.registerResourceModule("bigip", "index/netTunnel", _module)
pulumi.runtime.registerResourceModule("bigip", "index/netVlan", _module)
pulumi.runtime.registerResourceModule("bigip", "index/partition", _module)
pulumi.runtime.registerResourceModule("bigip", "index/sslCertificate", _module)
pulumi.runtime.registerResourceModule("bigip", "index/sslKey", _module)
pulumi.runtime.registerResourceModule("bigip", "index/sslKeyCert", _module)
pulumi.runtime.registerResourceModule("bigip", "index/sysBigiplicense", _module)
pulumi.runtime.registerResourceModule("bigip", "index/sysDns", _module)
pulumi.runtime.registerResourceModule("bigip", "index/sysIapp", _module)
pulumi.runtime.registerResourceModule("bigip", "index/sysNtp", _module)
pulumi.runtime.registerResourceModule("bigip", "index/sysOcsp", _module)
pulumi.runtime.registerResourceModule("bigip", "index/sysProvision", _module)
pulumi.runtime.registerResourceModule("bigip", "index/sysSnmp", _module)
pulumi.runtime.registerResourceModule("bigip", "index/sysSnmpTraps", _module)
pulumi.runtime.registerResourceModule("bigip", "index/trafficSelector", _module)
pulumi.runtime.registerResourceModule("bigip", "index/vcmpGuest", _module)
pulumi.runtime.registerResourceModule("bigip", "index/wafPolicy", _module)
pulumi.runtime.registerResourcePackage("bigip", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:bigip") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
