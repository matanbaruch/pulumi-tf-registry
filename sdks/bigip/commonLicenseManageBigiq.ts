// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CommonLicenseManageBigiq extends pulumi.CustomResource {
    /**
     * Get an existing CommonLicenseManageBigiq resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CommonLicenseManageBigiqState, opts?: pulumi.CustomResourceOptions): CommonLicenseManageBigiq {
        return new CommonLicenseManageBigiq(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bigip:index/commonLicenseManageBigiq:CommonLicenseManageBigiq';

    /**
     * Returns true if the given object is an instance of CommonLicenseManageBigiq.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CommonLicenseManageBigiq {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CommonLicenseManageBigiq.__pulumiType;
    }

    /**
     * Whether the specified device is a managed/un-managed/un-reachable device
     */
    public readonly assignmentType!: pulumi.Output<string>;
    /**
     * The registration key pool to use
     */
    public readonly bigiqAddress!: pulumi.Output<string>;
    /**
     * Login reference for token authentication (see BIG-IQ REST docs for details)
     */
    public readonly bigiqLoginRef!: pulumi.Output<string | undefined>;
    /**
     * The registration key pool to use
     */
    public readonly bigiqPassword!: pulumi.Output<string>;
    /**
     * The registration key pool to use
     */
    public readonly bigiqPort!: pulumi.Output<string | undefined>;
    /**
     * Enable to use an external authentication source (LDAP, TACACS, etc)
     */
    public readonly bigiqTokenAuth!: pulumi.Output<boolean | undefined>;
    /**
     * The registration key pool to use
     */
    public readonly bigiqUser!: pulumi.Output<string>;
    /**
     * Status of Licence Assignment
     */
    public readonly deviceLicenseStatus!: pulumi.Output<string>;
    /**
     * Aws/Azure
     */
    public readonly hypervisor!: pulumi.Output<string | undefined>;
    /**
     * The registration key that you want to assign from the pool
     */
    public readonly key!: pulumi.Output<string | undefined>;
    /**
     * The registration key pool to use
     */
    public readonly licensePoolname!: pulumi.Output<string>;
    /**
     * Sets the rate at which this license usage is billed
     */
    public readonly macAddress!: pulumi.Output<string | undefined>;
    /**
     * Sets the rate at which this license usage is billed
     */
    public readonly skukeyword1!: pulumi.Output<string | undefined>;
    /**
     * Sets the rate at which this license usage is billed
     */
    public readonly skukeyword2!: pulumi.Output<string | undefined>;
    /**
     * optional description for the assignment in this field
     */
    public readonly tenant!: pulumi.Output<string | undefined>;
    /**
     * Sets the rate at which this license usage is billed
     */
    public readonly unitOfMeasure!: pulumi.Output<string | undefined>;

    /**
     * Create a CommonLicenseManageBigiq resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CommonLicenseManageBigiqArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CommonLicenseManageBigiqArgs | CommonLicenseManageBigiqState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CommonLicenseManageBigiqState | undefined;
            resourceInputs["assignmentType"] = state ? state.assignmentType : undefined;
            resourceInputs["bigiqAddress"] = state ? state.bigiqAddress : undefined;
            resourceInputs["bigiqLoginRef"] = state ? state.bigiqLoginRef : undefined;
            resourceInputs["bigiqPassword"] = state ? state.bigiqPassword : undefined;
            resourceInputs["bigiqPort"] = state ? state.bigiqPort : undefined;
            resourceInputs["bigiqTokenAuth"] = state ? state.bigiqTokenAuth : undefined;
            resourceInputs["bigiqUser"] = state ? state.bigiqUser : undefined;
            resourceInputs["deviceLicenseStatus"] = state ? state.deviceLicenseStatus : undefined;
            resourceInputs["hypervisor"] = state ? state.hypervisor : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["licensePoolname"] = state ? state.licensePoolname : undefined;
            resourceInputs["macAddress"] = state ? state.macAddress : undefined;
            resourceInputs["skukeyword1"] = state ? state.skukeyword1 : undefined;
            resourceInputs["skukeyword2"] = state ? state.skukeyword2 : undefined;
            resourceInputs["tenant"] = state ? state.tenant : undefined;
            resourceInputs["unitOfMeasure"] = state ? state.unitOfMeasure : undefined;
        } else {
            const args = argsOrState as CommonLicenseManageBigiqArgs | undefined;
            if ((!args || args.assignmentType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'assignmentType'");
            }
            if ((!args || args.bigiqAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bigiqAddress'");
            }
            if ((!args || args.bigiqPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bigiqPassword'");
            }
            if ((!args || args.bigiqUser === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bigiqUser'");
            }
            if ((!args || args.licensePoolname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'licensePoolname'");
            }
            resourceInputs["assignmentType"] = args ? args.assignmentType : undefined;
            resourceInputs["bigiqAddress"] = args ? args.bigiqAddress : undefined;
            resourceInputs["bigiqLoginRef"] = args?.bigiqLoginRef ? pulumi.secret(args.bigiqLoginRef) : undefined;
            resourceInputs["bigiqPassword"] = args?.bigiqPassword ? pulumi.secret(args.bigiqPassword) : undefined;
            resourceInputs["bigiqPort"] = args?.bigiqPort ? pulumi.secret(args.bigiqPort) : undefined;
            resourceInputs["bigiqTokenAuth"] = args?.bigiqTokenAuth ? pulumi.secret(args.bigiqTokenAuth) : undefined;
            resourceInputs["bigiqUser"] = args?.bigiqUser ? pulumi.secret(args.bigiqUser) : undefined;
            resourceInputs["deviceLicenseStatus"] = args ? args.deviceLicenseStatus : undefined;
            resourceInputs["hypervisor"] = args ? args.hypervisor : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["licensePoolname"] = args ? args.licensePoolname : undefined;
            resourceInputs["macAddress"] = args ? args.macAddress : undefined;
            resourceInputs["skukeyword1"] = args ? args.skukeyword1 : undefined;
            resourceInputs["skukeyword2"] = args ? args.skukeyword2 : undefined;
            resourceInputs["tenant"] = args ? args.tenant : undefined;
            resourceInputs["unitOfMeasure"] = args ? args.unitOfMeasure : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["bigiqLoginRef", "bigiqPassword", "bigiqPort", "bigiqTokenAuth", "bigiqUser"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(CommonLicenseManageBigiq.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CommonLicenseManageBigiq resources.
 */
export interface CommonLicenseManageBigiqState {
    /**
     * Whether the specified device is a managed/un-managed/un-reachable device
     */
    assignmentType?: pulumi.Input<string>;
    /**
     * The registration key pool to use
     */
    bigiqAddress?: pulumi.Input<string>;
    /**
     * Login reference for token authentication (see BIG-IQ REST docs for details)
     */
    bigiqLoginRef?: pulumi.Input<string>;
    /**
     * The registration key pool to use
     */
    bigiqPassword?: pulumi.Input<string>;
    /**
     * The registration key pool to use
     */
    bigiqPort?: pulumi.Input<string>;
    /**
     * Enable to use an external authentication source (LDAP, TACACS, etc)
     */
    bigiqTokenAuth?: pulumi.Input<boolean>;
    /**
     * The registration key pool to use
     */
    bigiqUser?: pulumi.Input<string>;
    /**
     * Status of Licence Assignment
     */
    deviceLicenseStatus?: pulumi.Input<string>;
    /**
     * Aws/Azure
     */
    hypervisor?: pulumi.Input<string>;
    /**
     * The registration key that you want to assign from the pool
     */
    key?: pulumi.Input<string>;
    /**
     * The registration key pool to use
     */
    licensePoolname?: pulumi.Input<string>;
    /**
     * Sets the rate at which this license usage is billed
     */
    macAddress?: pulumi.Input<string>;
    /**
     * Sets the rate at which this license usage is billed
     */
    skukeyword1?: pulumi.Input<string>;
    /**
     * Sets the rate at which this license usage is billed
     */
    skukeyword2?: pulumi.Input<string>;
    /**
     * optional description for the assignment in this field
     */
    tenant?: pulumi.Input<string>;
    /**
     * Sets the rate at which this license usage is billed
     */
    unitOfMeasure?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CommonLicenseManageBigiq resource.
 */
export interface CommonLicenseManageBigiqArgs {
    /**
     * Whether the specified device is a managed/un-managed/un-reachable device
     */
    assignmentType: pulumi.Input<string>;
    /**
     * The registration key pool to use
     */
    bigiqAddress: pulumi.Input<string>;
    /**
     * Login reference for token authentication (see BIG-IQ REST docs for details)
     */
    bigiqLoginRef?: pulumi.Input<string>;
    /**
     * The registration key pool to use
     */
    bigiqPassword: pulumi.Input<string>;
    /**
     * The registration key pool to use
     */
    bigiqPort?: pulumi.Input<string>;
    /**
     * Enable to use an external authentication source (LDAP, TACACS, etc)
     */
    bigiqTokenAuth?: pulumi.Input<boolean>;
    /**
     * The registration key pool to use
     */
    bigiqUser: pulumi.Input<string>;
    /**
     * Status of Licence Assignment
     */
    deviceLicenseStatus?: pulumi.Input<string>;
    /**
     * Aws/Azure
     */
    hypervisor?: pulumi.Input<string>;
    /**
     * The registration key that you want to assign from the pool
     */
    key?: pulumi.Input<string>;
    /**
     * The registration key pool to use
     */
    licensePoolname: pulumi.Input<string>;
    /**
     * Sets the rate at which this license usage is billed
     */
    macAddress?: pulumi.Input<string>;
    /**
     * Sets the rate at which this license usage is billed
     */
    skukeyword1?: pulumi.Input<string>;
    /**
     * Sets the rate at which this license usage is billed
     */
    skukeyword2?: pulumi.Input<string>;
    /**
     * optional description for the assignment in this field
     */
    tenant?: pulumi.Input<string>;
    /**
     * Sets the rate at which this license usage is billed
     */
    unitOfMeasure?: pulumi.Input<string>;
}
