// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class As3 extends pulumi.CustomResource {
    /**
     * Get an existing As3 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: As3State, opts?: pulumi.CustomResourceOptions): As3 {
        return new As3(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bigip:index/as3:As3';

    /**
     * Returns true if the given object is an instance of As3.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is As3 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === As3.__pulumiType;
    }

    /**
     * Application deployed through AS3 Declaration
     */
    public readonly applicationList!: pulumi.Output<string>;
    /**
     * AS3 json
     */
    public readonly as3Json!: pulumi.Output<string | undefined>;
    /**
     * Set True if you want to ignore metadata update
     */
    public readonly ignoreMetadata!: pulumi.Output<boolean | undefined>;
    /**
     * Will define Perapp mode enabled on BIG-IP or not
     */
    public /*out*/ readonly perAppMode!: pulumi.Output<boolean>;
    /**
     * ID of AS3 post declaration async task
     */
    public readonly taskId!: pulumi.Output<string>;
    /**
     * Name of Tenant
     */
    public readonly tenantFilter!: pulumi.Output<string>;
    /**
     * Name of Tenant
     */
    public readonly tenantList!: pulumi.Output<string>;
    /**
     * Name of Tenant. This name is used only in the case of Per-Application Deployment. If it is not provided, then a random
     * name would be generated.
     */
    public readonly tenantName!: pulumi.Output<string>;

    /**
     * Create a As3 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: As3Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: As3Args | As3State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as As3State | undefined;
            resourceInputs["applicationList"] = state ? state.applicationList : undefined;
            resourceInputs["as3Json"] = state ? state.as3Json : undefined;
            resourceInputs["ignoreMetadata"] = state ? state.ignoreMetadata : undefined;
            resourceInputs["perAppMode"] = state ? state.perAppMode : undefined;
            resourceInputs["taskId"] = state ? state.taskId : undefined;
            resourceInputs["tenantFilter"] = state ? state.tenantFilter : undefined;
            resourceInputs["tenantList"] = state ? state.tenantList : undefined;
            resourceInputs["tenantName"] = state ? state.tenantName : undefined;
        } else {
            const args = argsOrState as As3Args | undefined;
            resourceInputs["applicationList"] = args ? args.applicationList : undefined;
            resourceInputs["as3Json"] = args ? args.as3Json : undefined;
            resourceInputs["ignoreMetadata"] = args ? args.ignoreMetadata : undefined;
            resourceInputs["taskId"] = args ? args.taskId : undefined;
            resourceInputs["tenantFilter"] = args ? args.tenantFilter : undefined;
            resourceInputs["tenantList"] = args ? args.tenantList : undefined;
            resourceInputs["tenantName"] = args ? args.tenantName : undefined;
            resourceInputs["perAppMode"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(As3.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering As3 resources.
 */
export interface As3State {
    /**
     * Application deployed through AS3 Declaration
     */
    applicationList?: pulumi.Input<string>;
    /**
     * AS3 json
     */
    as3Json?: pulumi.Input<string>;
    /**
     * Set True if you want to ignore metadata update
     */
    ignoreMetadata?: pulumi.Input<boolean>;
    /**
     * Will define Perapp mode enabled on BIG-IP or not
     */
    perAppMode?: pulumi.Input<boolean>;
    /**
     * ID of AS3 post declaration async task
     */
    taskId?: pulumi.Input<string>;
    /**
     * Name of Tenant
     */
    tenantFilter?: pulumi.Input<string>;
    /**
     * Name of Tenant
     */
    tenantList?: pulumi.Input<string>;
    /**
     * Name of Tenant. This name is used only in the case of Per-Application Deployment. If it is not provided, then a random
     * name would be generated.
     */
    tenantName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a As3 resource.
 */
export interface As3Args {
    /**
     * Application deployed through AS3 Declaration
     */
    applicationList?: pulumi.Input<string>;
    /**
     * AS3 json
     */
    as3Json?: pulumi.Input<string>;
    /**
     * Set True if you want to ignore metadata update
     */
    ignoreMetadata?: pulumi.Input<boolean>;
    /**
     * ID of AS3 post declaration async task
     */
    taskId?: pulumi.Input<string>;
    /**
     * Name of Tenant
     */
    tenantFilter?: pulumi.Input<string>;
    /**
     * Name of Tenant
     */
    tenantList?: pulumi.Input<string>;
    /**
     * Name of Tenant. This name is used only in the case of Per-Application Deployment. If it is not provided, then a random
     * name would be generated.
     */
    tenantName?: pulumi.Input<string>;
}
