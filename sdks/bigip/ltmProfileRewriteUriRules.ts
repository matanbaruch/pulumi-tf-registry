// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LtmProfileRewriteUriRules extends pulumi.CustomResource {
    /**
     * Get an existing LtmProfileRewriteUriRules resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LtmProfileRewriteUriRulesState, opts?: pulumi.CustomResourceOptions): LtmProfileRewriteUriRules {
        return new LtmProfileRewriteUriRules(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bigip:index/ltmProfileRewriteUriRules:LtmProfileRewriteUriRules';

    /**
     * Returns true if the given object is an instance of LtmProfileRewriteUriRules.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LtmProfileRewriteUriRules {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LtmProfileRewriteUriRules.__pulumiType;
    }

    public readonly clients!: pulumi.Output<outputs.LtmProfileRewriteUriRulesClient[]>;
    /**
     * Name of the rewrite profile.
     */
    public readonly profileName!: pulumi.Output<string>;
    /**
     * Specifies the name of the uri rule.
     */
    public readonly ruleName!: pulumi.Output<string>;
    /**
     * Specifies the type of the uri rule.
     */
    public readonly ruleType!: pulumi.Output<string | undefined>;
    public readonly servers!: pulumi.Output<outputs.LtmProfileRewriteUriRulesServer[]>;

    /**
     * Create a LtmProfileRewriteUriRules resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LtmProfileRewriteUriRulesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LtmProfileRewriteUriRulesArgs | LtmProfileRewriteUriRulesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LtmProfileRewriteUriRulesState | undefined;
            resourceInputs["clients"] = state ? state.clients : undefined;
            resourceInputs["profileName"] = state ? state.profileName : undefined;
            resourceInputs["ruleName"] = state ? state.ruleName : undefined;
            resourceInputs["ruleType"] = state ? state.ruleType : undefined;
            resourceInputs["servers"] = state ? state.servers : undefined;
        } else {
            const args = argsOrState as LtmProfileRewriteUriRulesArgs | undefined;
            if ((!args || args.clients === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clients'");
            }
            if ((!args || args.profileName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'profileName'");
            }
            if ((!args || args.ruleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleName'");
            }
            if ((!args || args.servers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'servers'");
            }
            resourceInputs["clients"] = args ? args.clients : undefined;
            resourceInputs["profileName"] = args ? args.profileName : undefined;
            resourceInputs["ruleName"] = args ? args.ruleName : undefined;
            resourceInputs["ruleType"] = args ? args.ruleType : undefined;
            resourceInputs["servers"] = args ? args.servers : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LtmProfileRewriteUriRules.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LtmProfileRewriteUriRules resources.
 */
export interface LtmProfileRewriteUriRulesState {
    clients?: pulumi.Input<pulumi.Input<inputs.LtmProfileRewriteUriRulesClient>[]>;
    /**
     * Name of the rewrite profile.
     */
    profileName?: pulumi.Input<string>;
    /**
     * Specifies the name of the uri rule.
     */
    ruleName?: pulumi.Input<string>;
    /**
     * Specifies the type of the uri rule.
     */
    ruleType?: pulumi.Input<string>;
    servers?: pulumi.Input<pulumi.Input<inputs.LtmProfileRewriteUriRulesServer>[]>;
}

/**
 * The set of arguments for constructing a LtmProfileRewriteUriRules resource.
 */
export interface LtmProfileRewriteUriRulesArgs {
    clients: pulumi.Input<pulumi.Input<inputs.LtmProfileRewriteUriRulesClient>[]>;
    /**
     * Name of the rewrite profile.
     */
    profileName: pulumi.Input<string>;
    /**
     * Specifies the name of the uri rule.
     */
    ruleName: pulumi.Input<string>;
    /**
     * Specifies the type of the uri rule.
     */
    ruleType?: pulumi.Input<string>;
    servers: pulumi.Input<pulumi.Input<inputs.LtmProfileRewriteUriRulesServer>[]>;
}
