// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VcmpGuest extends pulumi.CustomResource {
    /**
     * Get an existing VcmpGuest resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VcmpGuestState, opts?: pulumi.CustomResourceOptions): VcmpGuest {
        return new VcmpGuest(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bigip:index/vcmpGuest:VcmpGuest';

    /**
     * Returns true if the given object is an instance of VcmpGuest.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VcmpGuest {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VcmpGuest.__pulumiType;
    }

    /**
     * Contains those slots to which the guest is allowed to be assigned.
     */
    public readonly allowedSlots!: pulumi.Output<number[]>;
    /**
     * The number of cores the system allocates to the guest.
     */
    public readonly coresPerSlot!: pulumi.Output<number>;
    /**
     * Indicates if virtual disk associated with vCMP guest should be removed during remove operation.
     */
    public readonly deleteVirtualDisk!: pulumi.Output<boolean | undefined>;
    /**
     * Resource name including prepended partition path.
     */
    public /*out*/ readonly fullPath!: pulumi.Output<string>;
    /**
     * The hotfix ISO image file which is applied on top of the base image.
     */
    public readonly initialHotfix!: pulumi.Output<string>;
    /**
     * The base software release ISO image file for installing the TMOS hypervisor instance.
     */
    public readonly initialImage!: pulumi.Output<string>;
    /**
     * The IP address and subnet or subnet mask you use to access the guest when you want to manage a module running within the
     * guest.
     */
    public readonly mgmtAddress!: pulumi.Output<string>;
    /**
     * The method by which the management address is used in the vCMP guest.
     */
    public readonly mgmtNetwork!: pulumi.Output<string>;
    /**
     * The gateway address for the mgmt_address.
     */
    public readonly mgmtRoute!: pulumi.Output<string>;
    /**
     * The minimum number of slots the guest must be assigned to in order to deploy.
     */
    public readonly minNumberOfSlots!: pulumi.Output<number>;
    /**
     * Name of the vCMP guest instance.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The number of slots for the system to use when creating the guest.
     */
    public readonly numberOfSlots!: pulumi.Output<number>;
    /**
     * The state of the vCMP guest on the system.
     */
    public readonly state!: pulumi.Output<string>;
    /**
     * Virtual disk associated with vCMP guest.
     */
    public /*out*/ readonly virtualDisk!: pulumi.Output<string>;
    /**
     * VLANs the guest uses to communicate with other guests, the host, and with the external network.
     */
    public readonly vlans!: pulumi.Output<string[]>;

    /**
     * Create a VcmpGuest resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VcmpGuestArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VcmpGuestArgs | VcmpGuestState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VcmpGuestState | undefined;
            resourceInputs["allowedSlots"] = state ? state.allowedSlots : undefined;
            resourceInputs["coresPerSlot"] = state ? state.coresPerSlot : undefined;
            resourceInputs["deleteVirtualDisk"] = state ? state.deleteVirtualDisk : undefined;
            resourceInputs["fullPath"] = state ? state.fullPath : undefined;
            resourceInputs["initialHotfix"] = state ? state.initialHotfix : undefined;
            resourceInputs["initialImage"] = state ? state.initialImage : undefined;
            resourceInputs["mgmtAddress"] = state ? state.mgmtAddress : undefined;
            resourceInputs["mgmtNetwork"] = state ? state.mgmtNetwork : undefined;
            resourceInputs["mgmtRoute"] = state ? state.mgmtRoute : undefined;
            resourceInputs["minNumberOfSlots"] = state ? state.minNumberOfSlots : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numberOfSlots"] = state ? state.numberOfSlots : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["virtualDisk"] = state ? state.virtualDisk : undefined;
            resourceInputs["vlans"] = state ? state.vlans : undefined;
        } else {
            const args = argsOrState as VcmpGuestArgs | undefined;
            resourceInputs["allowedSlots"] = args ? args.allowedSlots : undefined;
            resourceInputs["coresPerSlot"] = args ? args.coresPerSlot : undefined;
            resourceInputs["deleteVirtualDisk"] = args ? args.deleteVirtualDisk : undefined;
            resourceInputs["initialHotfix"] = args ? args.initialHotfix : undefined;
            resourceInputs["initialImage"] = args ? args.initialImage : undefined;
            resourceInputs["mgmtAddress"] = args ? args.mgmtAddress : undefined;
            resourceInputs["mgmtNetwork"] = args ? args.mgmtNetwork : undefined;
            resourceInputs["mgmtRoute"] = args ? args.mgmtRoute : undefined;
            resourceInputs["minNumberOfSlots"] = args ? args.minNumberOfSlots : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["numberOfSlots"] = args ? args.numberOfSlots : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["vlans"] = args ? args.vlans : undefined;
            resourceInputs["fullPath"] = undefined /*out*/;
            resourceInputs["virtualDisk"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VcmpGuest.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VcmpGuest resources.
 */
export interface VcmpGuestState {
    /**
     * Contains those slots to which the guest is allowed to be assigned.
     */
    allowedSlots?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The number of cores the system allocates to the guest.
     */
    coresPerSlot?: pulumi.Input<number>;
    /**
     * Indicates if virtual disk associated with vCMP guest should be removed during remove operation.
     */
    deleteVirtualDisk?: pulumi.Input<boolean>;
    /**
     * Resource name including prepended partition path.
     */
    fullPath?: pulumi.Input<string>;
    /**
     * The hotfix ISO image file which is applied on top of the base image.
     */
    initialHotfix?: pulumi.Input<string>;
    /**
     * The base software release ISO image file for installing the TMOS hypervisor instance.
     */
    initialImage?: pulumi.Input<string>;
    /**
     * The IP address and subnet or subnet mask you use to access the guest when you want to manage a module running within the
     * guest.
     */
    mgmtAddress?: pulumi.Input<string>;
    /**
     * The method by which the management address is used in the vCMP guest.
     */
    mgmtNetwork?: pulumi.Input<string>;
    /**
     * The gateway address for the mgmt_address.
     */
    mgmtRoute?: pulumi.Input<string>;
    /**
     * The minimum number of slots the guest must be assigned to in order to deploy.
     */
    minNumberOfSlots?: pulumi.Input<number>;
    /**
     * Name of the vCMP guest instance.
     */
    name?: pulumi.Input<string>;
    /**
     * The number of slots for the system to use when creating the guest.
     */
    numberOfSlots?: pulumi.Input<number>;
    /**
     * The state of the vCMP guest on the system.
     */
    state?: pulumi.Input<string>;
    /**
     * Virtual disk associated with vCMP guest.
     */
    virtualDisk?: pulumi.Input<string>;
    /**
     * VLANs the guest uses to communicate with other guests, the host, and with the external network.
     */
    vlans?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a VcmpGuest resource.
 */
export interface VcmpGuestArgs {
    /**
     * Contains those slots to which the guest is allowed to be assigned.
     */
    allowedSlots?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The number of cores the system allocates to the guest.
     */
    coresPerSlot?: pulumi.Input<number>;
    /**
     * Indicates if virtual disk associated with vCMP guest should be removed during remove operation.
     */
    deleteVirtualDisk?: pulumi.Input<boolean>;
    /**
     * The hotfix ISO image file which is applied on top of the base image.
     */
    initialHotfix?: pulumi.Input<string>;
    /**
     * The base software release ISO image file for installing the TMOS hypervisor instance.
     */
    initialImage?: pulumi.Input<string>;
    /**
     * The IP address and subnet or subnet mask you use to access the guest when you want to manage a module running within the
     * guest.
     */
    mgmtAddress?: pulumi.Input<string>;
    /**
     * The method by which the management address is used in the vCMP guest.
     */
    mgmtNetwork?: pulumi.Input<string>;
    /**
     * The gateway address for the mgmt_address.
     */
    mgmtRoute?: pulumi.Input<string>;
    /**
     * The minimum number of slots the guest must be assigned to in order to deploy.
     */
    minNumberOfSlots?: pulumi.Input<number>;
    /**
     * Name of the vCMP guest instance.
     */
    name?: pulumi.Input<string>;
    /**
     * The number of slots for the system to use when creating the guest.
     */
    numberOfSlots?: pulumi.Input<number>;
    /**
     * The state of the vCMP guest on the system.
     */
    state?: pulumi.Input<string>;
    /**
     * VLANs the guest uses to communicate with other guests, the host, and with the external network.
     */
    vlans?: pulumi.Input<pulumi.Input<string>[]>;
}
