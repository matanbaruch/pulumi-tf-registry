// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LtmPersistenceProfileCookie extends pulumi.CustomResource {
    /**
     * Get an existing LtmPersistenceProfileCookie resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LtmPersistenceProfileCookieState, opts?: pulumi.CustomResourceOptions): LtmPersistenceProfileCookie {
        return new LtmPersistenceProfileCookie(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bigip:index/ltmPersistenceProfileCookie:LtmPersistenceProfileCookie';

    /**
     * Returns true if the given object is an instance of LtmPersistenceProfileCookie.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LtmPersistenceProfileCookie {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LtmPersistenceProfileCookie.__pulumiType;
    }

    /**
     * To enable _ disable always sending cookies
     */
    public readonly alwaysSend!: pulumi.Output<string>;
    public readonly appService!: pulumi.Output<string>;
    /**
     * To required, preferred, or disabled policy for cookie encryption
     */
    public readonly cookieEncryption!: pulumi.Output<string>;
    /**
     * Passphrase for encrypted cookies
     */
    public readonly cookieEncryptionPassphrase!: pulumi.Output<string>;
    /**
     * Name of the cookie to track persistence
     */
    public readonly cookieName!: pulumi.Output<string>;
    /**
     * Inherit defaults from parent profile
     */
    public readonly defaultsFrom!: pulumi.Output<string>;
    /**
     * Expiration TTL for cookie specified in D:H:M:S or in seconds
     */
    public readonly expiration!: pulumi.Output<string>;
    /**
     * Length of hash to apply to cookie
     */
    public readonly hashLength!: pulumi.Output<number>;
    /**
     * Number of characters to skip in the cookie for the hash
     */
    public readonly hashOffset!: pulumi.Output<number>;
    /**
     * To enable _ disable sending only over http
     */
    public readonly httponly!: pulumi.Output<string>;
    /**
     * To enable _ disable match across pools with given persistence record
     */
    public readonly matchAcrossPools!: pulumi.Output<string>;
    /**
     * To enable _ disable match across services with given persistence record
     */
    public readonly matchAcrossServices!: pulumi.Output<string>;
    /**
     * To enable _ disable match across virtual servers with given persistence record
     */
    public readonly matchAcrossVirtuals!: pulumi.Output<string>;
    /**
     * Specifies the type of cookie processing that the system uses
     */
    public readonly method!: pulumi.Output<string>;
    /**
     * To enable _ disable
     */
    public readonly mirror!: pulumi.Output<string>;
    /**
     * Name of the persistence profile
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * To enable _ disable that pool member connection limits are overridden for persisted clients. Per-virtual connection
     * limits remain hard limits and are not overridden.
     */
    public readonly overrideConnLimit!: pulumi.Output<string>;
    /**
     * Timeout for persistence of the session
     */
    public readonly timeout!: pulumi.Output<number>;

    /**
     * Create a LtmPersistenceProfileCookie resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LtmPersistenceProfileCookieArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LtmPersistenceProfileCookieArgs | LtmPersistenceProfileCookieState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LtmPersistenceProfileCookieState | undefined;
            resourceInputs["alwaysSend"] = state ? state.alwaysSend : undefined;
            resourceInputs["appService"] = state ? state.appService : undefined;
            resourceInputs["cookieEncryption"] = state ? state.cookieEncryption : undefined;
            resourceInputs["cookieEncryptionPassphrase"] = state ? state.cookieEncryptionPassphrase : undefined;
            resourceInputs["cookieName"] = state ? state.cookieName : undefined;
            resourceInputs["defaultsFrom"] = state ? state.defaultsFrom : undefined;
            resourceInputs["expiration"] = state ? state.expiration : undefined;
            resourceInputs["hashLength"] = state ? state.hashLength : undefined;
            resourceInputs["hashOffset"] = state ? state.hashOffset : undefined;
            resourceInputs["httponly"] = state ? state.httponly : undefined;
            resourceInputs["matchAcrossPools"] = state ? state.matchAcrossPools : undefined;
            resourceInputs["matchAcrossServices"] = state ? state.matchAcrossServices : undefined;
            resourceInputs["matchAcrossVirtuals"] = state ? state.matchAcrossVirtuals : undefined;
            resourceInputs["method"] = state ? state.method : undefined;
            resourceInputs["mirror"] = state ? state.mirror : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["overrideConnLimit"] = state ? state.overrideConnLimit : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
        } else {
            const args = argsOrState as LtmPersistenceProfileCookieArgs | undefined;
            if ((!args || args.defaultsFrom === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultsFrom'");
            }
            resourceInputs["alwaysSend"] = args ? args.alwaysSend : undefined;
            resourceInputs["appService"] = args ? args.appService : undefined;
            resourceInputs["cookieEncryption"] = args ? args.cookieEncryption : undefined;
            resourceInputs["cookieEncryptionPassphrase"] = args ? args.cookieEncryptionPassphrase : undefined;
            resourceInputs["cookieName"] = args ? args.cookieName : undefined;
            resourceInputs["defaultsFrom"] = args ? args.defaultsFrom : undefined;
            resourceInputs["expiration"] = args ? args.expiration : undefined;
            resourceInputs["hashLength"] = args ? args.hashLength : undefined;
            resourceInputs["hashOffset"] = args ? args.hashOffset : undefined;
            resourceInputs["httponly"] = args ? args.httponly : undefined;
            resourceInputs["matchAcrossPools"] = args ? args.matchAcrossPools : undefined;
            resourceInputs["matchAcrossServices"] = args ? args.matchAcrossServices : undefined;
            resourceInputs["matchAcrossVirtuals"] = args ? args.matchAcrossVirtuals : undefined;
            resourceInputs["method"] = args ? args.method : undefined;
            resourceInputs["mirror"] = args ? args.mirror : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["overrideConnLimit"] = args ? args.overrideConnLimit : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LtmPersistenceProfileCookie.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LtmPersistenceProfileCookie resources.
 */
export interface LtmPersistenceProfileCookieState {
    /**
     * To enable _ disable always sending cookies
     */
    alwaysSend?: pulumi.Input<string>;
    appService?: pulumi.Input<string>;
    /**
     * To required, preferred, or disabled policy for cookie encryption
     */
    cookieEncryption?: pulumi.Input<string>;
    /**
     * Passphrase for encrypted cookies
     */
    cookieEncryptionPassphrase?: pulumi.Input<string>;
    /**
     * Name of the cookie to track persistence
     */
    cookieName?: pulumi.Input<string>;
    /**
     * Inherit defaults from parent profile
     */
    defaultsFrom?: pulumi.Input<string>;
    /**
     * Expiration TTL for cookie specified in D:H:M:S or in seconds
     */
    expiration?: pulumi.Input<string>;
    /**
     * Length of hash to apply to cookie
     */
    hashLength?: pulumi.Input<number>;
    /**
     * Number of characters to skip in the cookie for the hash
     */
    hashOffset?: pulumi.Input<number>;
    /**
     * To enable _ disable sending only over http
     */
    httponly?: pulumi.Input<string>;
    /**
     * To enable _ disable match across pools with given persistence record
     */
    matchAcrossPools?: pulumi.Input<string>;
    /**
     * To enable _ disable match across services with given persistence record
     */
    matchAcrossServices?: pulumi.Input<string>;
    /**
     * To enable _ disable match across virtual servers with given persistence record
     */
    matchAcrossVirtuals?: pulumi.Input<string>;
    /**
     * Specifies the type of cookie processing that the system uses
     */
    method?: pulumi.Input<string>;
    /**
     * To enable _ disable
     */
    mirror?: pulumi.Input<string>;
    /**
     * Name of the persistence profile
     */
    name?: pulumi.Input<string>;
    /**
     * To enable _ disable that pool member connection limits are overridden for persisted clients. Per-virtual connection
     * limits remain hard limits and are not overridden.
     */
    overrideConnLimit?: pulumi.Input<string>;
    /**
     * Timeout for persistence of the session
     */
    timeout?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a LtmPersistenceProfileCookie resource.
 */
export interface LtmPersistenceProfileCookieArgs {
    /**
     * To enable _ disable always sending cookies
     */
    alwaysSend?: pulumi.Input<string>;
    appService?: pulumi.Input<string>;
    /**
     * To required, preferred, or disabled policy for cookie encryption
     */
    cookieEncryption?: pulumi.Input<string>;
    /**
     * Passphrase for encrypted cookies
     */
    cookieEncryptionPassphrase?: pulumi.Input<string>;
    /**
     * Name of the cookie to track persistence
     */
    cookieName?: pulumi.Input<string>;
    /**
     * Inherit defaults from parent profile
     */
    defaultsFrom: pulumi.Input<string>;
    /**
     * Expiration TTL for cookie specified in D:H:M:S or in seconds
     */
    expiration?: pulumi.Input<string>;
    /**
     * Length of hash to apply to cookie
     */
    hashLength?: pulumi.Input<number>;
    /**
     * Number of characters to skip in the cookie for the hash
     */
    hashOffset?: pulumi.Input<number>;
    /**
     * To enable _ disable sending only over http
     */
    httponly?: pulumi.Input<string>;
    /**
     * To enable _ disable match across pools with given persistence record
     */
    matchAcrossPools?: pulumi.Input<string>;
    /**
     * To enable _ disable match across services with given persistence record
     */
    matchAcrossServices?: pulumi.Input<string>;
    /**
     * To enable _ disable match across virtual servers with given persistence record
     */
    matchAcrossVirtuals?: pulumi.Input<string>;
    /**
     * Specifies the type of cookie processing that the system uses
     */
    method?: pulumi.Input<string>;
    /**
     * To enable _ disable
     */
    mirror?: pulumi.Input<string>;
    /**
     * Name of the persistence profile
     */
    name?: pulumi.Input<string>;
    /**
     * To enable _ disable that pool member connection limits are overridden for persisted clients. Per-virtual connection
     * limits remain hard limits and are not overridden.
     */
    overrideConnLimit?: pulumi.Input<string>;
    /**
     * Timeout for persistence of the session
     */
    timeout?: pulumi.Input<number>;
}
