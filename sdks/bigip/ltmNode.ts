// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LtmNode extends pulumi.CustomResource {
    /**
     * Get an existing LtmNode resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LtmNodeState, opts?: pulumi.CustomResourceOptions): LtmNode {
        return new LtmNode(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bigip:index/ltmNode:LtmNode';

    /**
     * Returns true if the given object is an instance of LtmNode.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LtmNode {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LtmNode.__pulumiType;
    }

    /**
     * Address of the node
     */
    public readonly address!: pulumi.Output<string>;
    /**
     * Specifies the maximum number of connections allowed for the node or node address.
     */
    public readonly connectionLimit!: pulumi.Output<number>;
    /**
     * User defined description of the node.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Sets the dynamic ratio number for the node. Used for dynamic ratio load balancing.
     */
    public readonly dynamicRatio!: pulumi.Output<number>;
    public readonly fqdn!: pulumi.Output<outputs.LtmNodeFqdn | undefined>;
    /**
     * Specifies the name of the monitor or monitor rule that you want to associate with the node.
     */
    public readonly monitor!: pulumi.Output<string | undefined>;
    /**
     * Name of the node
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the maximum number of connections per second allowed for a node or node address. The default value is
     * 'disabled'.
     */
    public readonly rateLimit!: pulumi.Output<string>;
    /**
     * Sets the ratio number for the node.
     */
    public readonly ratio!: pulumi.Output<number>;
    /**
     * Enables or disables the node for new sessions. The default value is user-enabled.
     */
    public readonly session!: pulumi.Output<string>;
    /**
     * Marks the node up or down. The default value is user-up.
     */
    public readonly state!: pulumi.Output<string>;

    /**
     * Create a LtmNode resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LtmNodeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LtmNodeArgs | LtmNodeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LtmNodeState | undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["connectionLimit"] = state ? state.connectionLimit : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dynamicRatio"] = state ? state.dynamicRatio : undefined;
            resourceInputs["fqdn"] = state ? state.fqdn : undefined;
            resourceInputs["monitor"] = state ? state.monitor : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["rateLimit"] = state ? state.rateLimit : undefined;
            resourceInputs["ratio"] = state ? state.ratio : undefined;
            resourceInputs["session"] = state ? state.session : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
        } else {
            const args = argsOrState as LtmNodeArgs | undefined;
            if ((!args || args.address === undefined) && !opts.urn) {
                throw new Error("Missing required property 'address'");
            }
            resourceInputs["address"] = args ? args.address : undefined;
            resourceInputs["connectionLimit"] = args ? args.connectionLimit : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dynamicRatio"] = args ? args.dynamicRatio : undefined;
            resourceInputs["fqdn"] = args ? args.fqdn : undefined;
            resourceInputs["monitor"] = args ? args.monitor : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["rateLimit"] = args ? args.rateLimit : undefined;
            resourceInputs["ratio"] = args ? args.ratio : undefined;
            resourceInputs["session"] = args ? args.session : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LtmNode.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LtmNode resources.
 */
export interface LtmNodeState {
    /**
     * Address of the node
     */
    address?: pulumi.Input<string>;
    /**
     * Specifies the maximum number of connections allowed for the node or node address.
     */
    connectionLimit?: pulumi.Input<number>;
    /**
     * User defined description of the node.
     */
    description?: pulumi.Input<string>;
    /**
     * Sets the dynamic ratio number for the node. Used for dynamic ratio load balancing.
     */
    dynamicRatio?: pulumi.Input<number>;
    fqdn?: pulumi.Input<inputs.LtmNodeFqdn>;
    /**
     * Specifies the name of the monitor or monitor rule that you want to associate with the node.
     */
    monitor?: pulumi.Input<string>;
    /**
     * Name of the node
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the maximum number of connections per second allowed for a node or node address. The default value is
     * 'disabled'.
     */
    rateLimit?: pulumi.Input<string>;
    /**
     * Sets the ratio number for the node.
     */
    ratio?: pulumi.Input<number>;
    /**
     * Enables or disables the node for new sessions. The default value is user-enabled.
     */
    session?: pulumi.Input<string>;
    /**
     * Marks the node up or down. The default value is user-up.
     */
    state?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LtmNode resource.
 */
export interface LtmNodeArgs {
    /**
     * Address of the node
     */
    address: pulumi.Input<string>;
    /**
     * Specifies the maximum number of connections allowed for the node or node address.
     */
    connectionLimit?: pulumi.Input<number>;
    /**
     * User defined description of the node.
     */
    description?: pulumi.Input<string>;
    /**
     * Sets the dynamic ratio number for the node. Used for dynamic ratio load balancing.
     */
    dynamicRatio?: pulumi.Input<number>;
    fqdn?: pulumi.Input<inputs.LtmNodeFqdn>;
    /**
     * Specifies the name of the monitor or monitor rule that you want to associate with the node.
     */
    monitor?: pulumi.Input<string>;
    /**
     * Name of the node
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the maximum number of connections per second allowed for a node or node address. The default value is
     * 'disabled'.
     */
    rateLimit?: pulumi.Input<string>;
    /**
     * Sets the ratio number for the node.
     */
    ratio?: pulumi.Input<number>;
    /**
     * Enables or disables the node for new sessions. The default value is user-enabled.
     */
    session?: pulumi.Input<string>;
    /**
     * Marks the node up or down. The default value is user-up.
     */
    state?: pulumi.Input<string>;
}
