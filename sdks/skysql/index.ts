// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AllowListArgs, AllowListState } from "./allowList";
export type AllowList = import("./allowList").AllowList;
export const AllowList: typeof import("./allowList").AllowList = null as any;
utilities.lazyLoad(exports, ["AllowList"], () => require("./allowList"));

export { AutonomousArgs, AutonomousState } from "./autonomous";
export type Autonomous = import("./autonomous").Autonomous;
export const Autonomous: typeof import("./autonomous").Autonomous = null as any;
utilities.lazyLoad(exports, ["Autonomous"], () => require("./autonomous"));

export { GetAvailabilityZonesArgs, GetAvailabilityZonesResult, GetAvailabilityZonesOutputArgs } from "./getAvailabilityZones";
export const getAvailabilityZones: typeof import("./getAvailabilityZones").getAvailabilityZones = null as any;
export const getAvailabilityZonesOutput: typeof import("./getAvailabilityZones").getAvailabilityZonesOutput = null as any;
utilities.lazyLoad(exports, ["getAvailabilityZones","getAvailabilityZonesOutput"], () => require("./getAvailabilityZones"));

export { GetCredentialsArgs, GetCredentialsResult, GetCredentialsOutputArgs } from "./getCredentials";
export const getCredentials: typeof import("./getCredentials").getCredentials = null as any;
export const getCredentialsOutput: typeof import("./getCredentials").getCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getCredentials","getCredentialsOutput"], () => require("./getCredentials"));

export { GetProjectsResult } from "./getProjects";
export const getProjects: typeof import("./getProjects").getProjects = null as any;
export const getProjectsOutput: typeof import("./getProjects").getProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getProjects","getProjectsOutput"], () => require("./getProjects"));

export { GetServiceArgs, GetServiceResult, GetServiceOutputArgs } from "./getService";
export const getService: typeof import("./getService").getService = null as any;
export const getServiceOutput: typeof import("./getService").getServiceOutput = null as any;
utilities.lazyLoad(exports, ["getService","getServiceOutput"], () => require("./getService"));

export { GetVersionsArgs, GetVersionsResult, GetVersionsOutputArgs } from "./getVersions";
export const getVersions: typeof import("./getVersions").getVersions = null as any;
export const getVersionsOutput: typeof import("./getVersions").getVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getVersions","getVersionsOutput"], () => require("./getVersions"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ServiceArgs, ServiceState } from "./service";
export type Service = import("./service").Service;
export const Service: typeof import("./service").Service = null as any;
utilities.lazyLoad(exports, ["Service"], () => require("./service"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "skysql:index/allowList:AllowList":
                return new AllowList(name, <any>undefined, { urn })
            case "skysql:index/autonomous:Autonomous":
                return new Autonomous(name, <any>undefined, { urn })
            case "skysql:index/service:Service":
                return new Service(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("skysql", "index/allowList", _module)
pulumi.runtime.registerResourceModule("skysql", "index/autonomous", _module)
pulumi.runtime.registerResourceModule("skysql", "index/service", _module)
pulumi.runtime.registerResourcePackage("skysql", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:skysql") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
