// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Autonomous extends pulumi.CustomResource {
    /**
     * Get an existing Autonomous resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AutonomousState, opts?: pulumi.CustomResourceOptions): Autonomous {
        return new Autonomous(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'skysql:index/autonomous:Autonomous';

    /**
     * Returns true if the given object is an instance of Autonomous.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Autonomous {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Autonomous.__pulumiType;
    }

    public readonly autoScaleDisk!: pulumi.Output<outputs.AutonomousAutoScaleDisk | undefined>;
    public readonly autoScaleNodesHorizontal!: pulumi.Output<outputs.AutonomousAutoScaleNodesHorizontal | undefined>;
    public readonly autoScaleNodesVertical!: pulumi.Output<outputs.AutonomousAutoScaleNodesVertical | undefined>;
    /**
     * Service ID
     */
    public readonly serviceId!: pulumi.Output<string>;
    /**
     * The name of the service to manage the autonomous features for.
     */
    public readonly serviceName!: pulumi.Output<string>;

    /**
     * Create a Autonomous resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AutonomousArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AutonomousArgs | AutonomousState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AutonomousState | undefined;
            resourceInputs["autoScaleDisk"] = state ? state.autoScaleDisk : undefined;
            resourceInputs["autoScaleNodesHorizontal"] = state ? state.autoScaleNodesHorizontal : undefined;
            resourceInputs["autoScaleNodesVertical"] = state ? state.autoScaleNodesVertical : undefined;
            resourceInputs["serviceId"] = state ? state.serviceId : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
        } else {
            const args = argsOrState as AutonomousArgs | undefined;
            if ((!args || args.serviceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceId'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            resourceInputs["autoScaleDisk"] = args ? args.autoScaleDisk : undefined;
            resourceInputs["autoScaleNodesHorizontal"] = args ? args.autoScaleNodesHorizontal : undefined;
            resourceInputs["autoScaleNodesVertical"] = args ? args.autoScaleNodesVertical : undefined;
            resourceInputs["serviceId"] = args ? args.serviceId : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Autonomous.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Autonomous resources.
 */
export interface AutonomousState {
    autoScaleDisk?: pulumi.Input<inputs.AutonomousAutoScaleDisk>;
    autoScaleNodesHorizontal?: pulumi.Input<inputs.AutonomousAutoScaleNodesHorizontal>;
    autoScaleNodesVertical?: pulumi.Input<inputs.AutonomousAutoScaleNodesVertical>;
    /**
     * Service ID
     */
    serviceId?: pulumi.Input<string>;
    /**
     * The name of the service to manage the autonomous features for.
     */
    serviceName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Autonomous resource.
 */
export interface AutonomousArgs {
    autoScaleDisk?: pulumi.Input<inputs.AutonomousAutoScaleDisk>;
    autoScaleNodesHorizontal?: pulumi.Input<inputs.AutonomousAutoScaleNodesHorizontal>;
    autoScaleNodesVertical?: pulumi.Input<inputs.AutonomousAutoScaleNodesVertical>;
    /**
     * Service ID
     */
    serviceId: pulumi.Input<string>;
    /**
     * The name of the service to manage the autonomous features for.
     */
    serviceName: pulumi.Input<string>;
}
