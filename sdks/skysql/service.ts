// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Service extends pulumi.CustomResource {
    /**
     * Get an existing Service resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceState, opts?: pulumi.CustomResourceOptions): Service {
        return new Service(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'skysql:index/service:Service';

    /**
     * Returns true if the given object is an instance of Service.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Service {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Service.__pulumiType;
    }

    /**
     * The list of IP addresses with comments to allow access to the service
     */
    public readonly allowLists!: pulumi.Output<outputs.ServiceAllowList[]>;
    /**
     * The architecture of the service. Valid values are: amd64 or arm64
     */
    public readonly architecture!: pulumi.Output<string>;
    /**
     * The availability zone of the service
     */
    public readonly availabilityZone!: pulumi.Output<string>;
    /**
     * The cloud provider to create the service in. Valid values are: aws or gcp
     */
    public readonly cloudProvider!: pulumi.Output<string>;
    /**
     * Whether to enable deletion protection. Valid values are: true or false. Default is true
     */
    public readonly deletionProtection!: pulumi.Output<boolean>;
    /**
     * The list of cloud accounts (aws account ids or gcp projects) that are allowed to access the service
     */
    public readonly endpointAllowedAccounts!: pulumi.Output<string[]>;
    /**
     * The endpoint mechanism to use. Valid values are: privateconnect or nlb
     */
    public readonly endpointMechanism!: pulumi.Output<string>;
    /**
     * The endpoint service name of the service, when mechanism is a privateconnect.
     */
    public /*out*/ readonly endpointService!: pulumi.Output<string>;
    /**
     * The fully qualified domain name of the service. The FQDN is only available when the service is in the ready state
     */
    public /*out*/ readonly fqdn!: pulumi.Output<string>;
    /**
     * Whether the service is active
     */
    public readonly isActive!: pulumi.Output<boolean>;
    /**
     * The number of MaxScale nodes
     */
    public readonly maxscaleNodes!: pulumi.Output<number | undefined>;
    /**
     * The size of the MaxScale nodes. Valid values are: sky-2x4, sky-2x8 etc
     */
    public readonly maxscaleSize!: pulumi.Output<string | undefined>;
    /**
     * The name of the service
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The number of nodes
     */
    public readonly nodes!: pulumi.Output<number>;
    /**
     * Whether to enable NoSQL. Valid values are: true or false
     */
    public readonly nosqlEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The primary host of the service
     */
    public readonly primaryHost!: pulumi.Output<string | undefined>;
    /**
     * The ID of the project to create the service in
     */
    public readonly projectId!: pulumi.Output<string | undefined>;
    /**
     * The region to create the service in. Value should be valid for a specific cloud provider
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Whether to enable global replication. Valid values are: true or false. Works for xpand-direct topology only
     */
    public readonly replicationEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The type of service to create. Valid values are: analytical or transactional
     */
    public readonly serviceType!: pulumi.Output<string>;
    /**
     * The size of the service. Valid values are: sky-2x4, sky-2x8 etc
     */
    public readonly size!: pulumi.Output<string>;
    /**
     * Whether to enable SSL. Valid values are: true or false
     */
    public readonly sslEnabled!: pulumi.Output<boolean>;
    /**
     * The storage size in GB. Valid values are: 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 2000, 3000, 4000, 5000,
     * 6000, 7000, 8000, 9000, 10000
     */
    public readonly storage!: pulumi.Output<number>;
    public readonly timeouts!: pulumi.Output<outputs.ServiceTimeouts | undefined>;
    /**
     * The topology of the service. Valid values are: es-single, es-replica, xpand, csdw and sa
     */
    public readonly topology!: pulumi.Output<string>;
    /**
     * The software version
     */
    public readonly version!: pulumi.Output<string>;
    /**
     * The volume IOPS. This is only applicable for AWS
     */
    public readonly volumeIops!: pulumi.Output<number | undefined>;
    /**
     * The volume Throughput. This is only applicable for AWS
     */
    public readonly volumeThroughput!: pulumi.Output<number | undefined>;
    /**
     * The volume type. Valid values are: gp3 and io1. This is only applicable for AWS
     */
    public readonly volumeType!: pulumi.Output<string>;
    /**
     * Whether to wait for the service to be created. Valid values are: true or false
     */
    public readonly waitForCreation!: pulumi.Output<boolean>;
    /**
     * Whether to wait for the service to be deleted. Valid values are: true or false
     */
    public readonly waitForDeletion!: pulumi.Output<boolean>;
    /**
     * Whether to wait for the service to be updated. Valid values are: true or false
     */
    public readonly waitForUpdate!: pulumi.Output<boolean>;

    /**
     * Create a Service resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceArgs | ServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceState | undefined;
            resourceInputs["allowLists"] = state ? state.allowLists : undefined;
            resourceInputs["architecture"] = state ? state.architecture : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["cloudProvider"] = state ? state.cloudProvider : undefined;
            resourceInputs["deletionProtection"] = state ? state.deletionProtection : undefined;
            resourceInputs["endpointAllowedAccounts"] = state ? state.endpointAllowedAccounts : undefined;
            resourceInputs["endpointMechanism"] = state ? state.endpointMechanism : undefined;
            resourceInputs["endpointService"] = state ? state.endpointService : undefined;
            resourceInputs["fqdn"] = state ? state.fqdn : undefined;
            resourceInputs["isActive"] = state ? state.isActive : undefined;
            resourceInputs["maxscaleNodes"] = state ? state.maxscaleNodes : undefined;
            resourceInputs["maxscaleSize"] = state ? state.maxscaleSize : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodes"] = state ? state.nodes : undefined;
            resourceInputs["nosqlEnabled"] = state ? state.nosqlEnabled : undefined;
            resourceInputs["primaryHost"] = state ? state.primaryHost : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["replicationEnabled"] = state ? state.replicationEnabled : undefined;
            resourceInputs["serviceType"] = state ? state.serviceType : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["sslEnabled"] = state ? state.sslEnabled : undefined;
            resourceInputs["storage"] = state ? state.storage : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["topology"] = state ? state.topology : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["volumeIops"] = state ? state.volumeIops : undefined;
            resourceInputs["volumeThroughput"] = state ? state.volumeThroughput : undefined;
            resourceInputs["volumeType"] = state ? state.volumeType : undefined;
            resourceInputs["waitForCreation"] = state ? state.waitForCreation : undefined;
            resourceInputs["waitForDeletion"] = state ? state.waitForDeletion : undefined;
            resourceInputs["waitForUpdate"] = state ? state.waitForUpdate : undefined;
        } else {
            const args = argsOrState as ServiceArgs | undefined;
            if ((!args || args.cloudProvider === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudProvider'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.serviceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceType'");
            }
            if ((!args || args.topology === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topology'");
            }
            resourceInputs["allowLists"] = args ? args.allowLists : undefined;
            resourceInputs["architecture"] = args ? args.architecture : undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["cloudProvider"] = args ? args.cloudProvider : undefined;
            resourceInputs["deletionProtection"] = args ? args.deletionProtection : undefined;
            resourceInputs["endpointAllowedAccounts"] = args ? args.endpointAllowedAccounts : undefined;
            resourceInputs["endpointMechanism"] = args ? args.endpointMechanism : undefined;
            resourceInputs["isActive"] = args ? args.isActive : undefined;
            resourceInputs["maxscaleNodes"] = args ? args.maxscaleNodes : undefined;
            resourceInputs["maxscaleSize"] = args ? args.maxscaleSize : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodes"] = args ? args.nodes : undefined;
            resourceInputs["nosqlEnabled"] = args ? args.nosqlEnabled : undefined;
            resourceInputs["primaryHost"] = args ? args.primaryHost : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["replicationEnabled"] = args ? args.replicationEnabled : undefined;
            resourceInputs["serviceType"] = args ? args.serviceType : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["sslEnabled"] = args ? args.sslEnabled : undefined;
            resourceInputs["storage"] = args ? args.storage : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["topology"] = args ? args.topology : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["volumeIops"] = args ? args.volumeIops : undefined;
            resourceInputs["volumeThroughput"] = args ? args.volumeThroughput : undefined;
            resourceInputs["volumeType"] = args ? args.volumeType : undefined;
            resourceInputs["waitForCreation"] = args ? args.waitForCreation : undefined;
            resourceInputs["waitForDeletion"] = args ? args.waitForDeletion : undefined;
            resourceInputs["waitForUpdate"] = args ? args.waitForUpdate : undefined;
            resourceInputs["endpointService"] = undefined /*out*/;
            resourceInputs["fqdn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Service.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Service resources.
 */
export interface ServiceState {
    /**
     * The list of IP addresses with comments to allow access to the service
     */
    allowLists?: pulumi.Input<pulumi.Input<inputs.ServiceAllowList>[]>;
    /**
     * The architecture of the service. Valid values are: amd64 or arm64
     */
    architecture?: pulumi.Input<string>;
    /**
     * The availability zone of the service
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * The cloud provider to create the service in. Valid values are: aws or gcp
     */
    cloudProvider?: pulumi.Input<string>;
    /**
     * Whether to enable deletion protection. Valid values are: true or false. Default is true
     */
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * The list of cloud accounts (aws account ids or gcp projects) that are allowed to access the service
     */
    endpointAllowedAccounts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The endpoint mechanism to use. Valid values are: privateconnect or nlb
     */
    endpointMechanism?: pulumi.Input<string>;
    /**
     * The endpoint service name of the service, when mechanism is a privateconnect.
     */
    endpointService?: pulumi.Input<string>;
    /**
     * The fully qualified domain name of the service. The FQDN is only available when the service is in the ready state
     */
    fqdn?: pulumi.Input<string>;
    /**
     * Whether the service is active
     */
    isActive?: pulumi.Input<boolean>;
    /**
     * The number of MaxScale nodes
     */
    maxscaleNodes?: pulumi.Input<number>;
    /**
     * The size of the MaxScale nodes. Valid values are: sky-2x4, sky-2x8 etc
     */
    maxscaleSize?: pulumi.Input<string>;
    /**
     * The name of the service
     */
    name?: pulumi.Input<string>;
    /**
     * The number of nodes
     */
    nodes?: pulumi.Input<number>;
    /**
     * Whether to enable NoSQL. Valid values are: true or false
     */
    nosqlEnabled?: pulumi.Input<boolean>;
    /**
     * The primary host of the service
     */
    primaryHost?: pulumi.Input<string>;
    /**
     * The ID of the project to create the service in
     */
    projectId?: pulumi.Input<string>;
    /**
     * The region to create the service in. Value should be valid for a specific cloud provider
     */
    region?: pulumi.Input<string>;
    /**
     * Whether to enable global replication. Valid values are: true or false. Works for xpand-direct topology only
     */
    replicationEnabled?: pulumi.Input<boolean>;
    /**
     * The type of service to create. Valid values are: analytical or transactional
     */
    serviceType?: pulumi.Input<string>;
    /**
     * The size of the service. Valid values are: sky-2x4, sky-2x8 etc
     */
    size?: pulumi.Input<string>;
    /**
     * Whether to enable SSL. Valid values are: true or false
     */
    sslEnabled?: pulumi.Input<boolean>;
    /**
     * The storage size in GB. Valid values are: 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 2000, 3000, 4000, 5000,
     * 6000, 7000, 8000, 9000, 10000
     */
    storage?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.ServiceTimeouts>;
    /**
     * The topology of the service. Valid values are: es-single, es-replica, xpand, csdw and sa
     */
    topology?: pulumi.Input<string>;
    /**
     * The software version
     */
    version?: pulumi.Input<string>;
    /**
     * The volume IOPS. This is only applicable for AWS
     */
    volumeIops?: pulumi.Input<number>;
    /**
     * The volume Throughput. This is only applicable for AWS
     */
    volumeThroughput?: pulumi.Input<number>;
    /**
     * The volume type. Valid values are: gp3 and io1. This is only applicable for AWS
     */
    volumeType?: pulumi.Input<string>;
    /**
     * Whether to wait for the service to be created. Valid values are: true or false
     */
    waitForCreation?: pulumi.Input<boolean>;
    /**
     * Whether to wait for the service to be deleted. Valid values are: true or false
     */
    waitForDeletion?: pulumi.Input<boolean>;
    /**
     * Whether to wait for the service to be updated. Valid values are: true or false
     */
    waitForUpdate?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Service resource.
 */
export interface ServiceArgs {
    /**
     * The list of IP addresses with comments to allow access to the service
     */
    allowLists?: pulumi.Input<pulumi.Input<inputs.ServiceAllowList>[]>;
    /**
     * The architecture of the service. Valid values are: amd64 or arm64
     */
    architecture?: pulumi.Input<string>;
    /**
     * The availability zone of the service
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * The cloud provider to create the service in. Valid values are: aws or gcp
     */
    cloudProvider: pulumi.Input<string>;
    /**
     * Whether to enable deletion protection. Valid values are: true or false. Default is true
     */
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * The list of cloud accounts (aws account ids or gcp projects) that are allowed to access the service
     */
    endpointAllowedAccounts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The endpoint mechanism to use. Valid values are: privateconnect or nlb
     */
    endpointMechanism?: pulumi.Input<string>;
    /**
     * Whether the service is active
     */
    isActive?: pulumi.Input<boolean>;
    /**
     * The number of MaxScale nodes
     */
    maxscaleNodes?: pulumi.Input<number>;
    /**
     * The size of the MaxScale nodes. Valid values are: sky-2x4, sky-2x8 etc
     */
    maxscaleSize?: pulumi.Input<string>;
    /**
     * The name of the service
     */
    name?: pulumi.Input<string>;
    /**
     * The number of nodes
     */
    nodes?: pulumi.Input<number>;
    /**
     * Whether to enable NoSQL. Valid values are: true or false
     */
    nosqlEnabled?: pulumi.Input<boolean>;
    /**
     * The primary host of the service
     */
    primaryHost?: pulumi.Input<string>;
    /**
     * The ID of the project to create the service in
     */
    projectId?: pulumi.Input<string>;
    /**
     * The region to create the service in. Value should be valid for a specific cloud provider
     */
    region: pulumi.Input<string>;
    /**
     * Whether to enable global replication. Valid values are: true or false. Works for xpand-direct topology only
     */
    replicationEnabled?: pulumi.Input<boolean>;
    /**
     * The type of service to create. Valid values are: analytical or transactional
     */
    serviceType: pulumi.Input<string>;
    /**
     * The size of the service. Valid values are: sky-2x4, sky-2x8 etc
     */
    size?: pulumi.Input<string>;
    /**
     * Whether to enable SSL. Valid values are: true or false
     */
    sslEnabled?: pulumi.Input<boolean>;
    /**
     * The storage size in GB. Valid values are: 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 2000, 3000, 4000, 5000,
     * 6000, 7000, 8000, 9000, 10000
     */
    storage?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.ServiceTimeouts>;
    /**
     * The topology of the service. Valid values are: es-single, es-replica, xpand, csdw and sa
     */
    topology: pulumi.Input<string>;
    /**
     * The software version
     */
    version?: pulumi.Input<string>;
    /**
     * The volume IOPS. This is only applicable for AWS
     */
    volumeIops?: pulumi.Input<number>;
    /**
     * The volume Throughput. This is only applicable for AWS
     */
    volumeThroughput?: pulumi.Input<number>;
    /**
     * The volume type. Valid values are: gp3 and io1. This is only applicable for AWS
     */
    volumeType?: pulumi.Input<string>;
    /**
     * Whether to wait for the service to be created. Valid values are: true or false
     */
    waitForCreation?: pulumi.Input<boolean>;
    /**
     * Whether to wait for the service to be deleted. Valid values are: true or false
     */
    waitForDeletion?: pulumi.Input<boolean>;
    /**
     * Whether to wait for the service to be updated. Valid values are: true or false
     */
    waitForUpdate?: pulumi.Input<boolean>;
}
