// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Group extends pulumi.CustomResource {
    /**
     * Get an existing Group resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GroupState, opts?: pulumi.CustomResourceOptions): Group {
        return new Group(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azuredevops:index/group:Group';

    /**
     * Returns true if the given object is an instance of Group.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Group {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Group.__pulumiType;
    }

    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly descriptor!: pulumi.Output<string>;
    public readonly displayName!: pulumi.Output<string>;
    public /*out*/ readonly domain!: pulumi.Output<string>;
    public /*out*/ readonly groupId!: pulumi.Output<string>;
    public readonly mail!: pulumi.Output<string>;
    public readonly members!: pulumi.Output<string[]>;
    public /*out*/ readonly origin!: pulumi.Output<string>;
    public readonly originId!: pulumi.Output<string>;
    public /*out*/ readonly principalName!: pulumi.Output<string>;
    public readonly scope!: pulumi.Output<string | undefined>;
    public /*out*/ readonly subjectKind!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.GroupTimeouts | undefined>;
    public /*out*/ readonly url!: pulumi.Output<string>;

    /**
     * Create a Group resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: GroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GroupArgs | GroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GroupState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["descriptor"] = state ? state.descriptor : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["mail"] = state ? state.mail : undefined;
            resourceInputs["members"] = state ? state.members : undefined;
            resourceInputs["origin"] = state ? state.origin : undefined;
            resourceInputs["originId"] = state ? state.originId : undefined;
            resourceInputs["principalName"] = state ? state.principalName : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["subjectKind"] = state ? state.subjectKind : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as GroupArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["mail"] = args ? args.mail : undefined;
            resourceInputs["members"] = args ? args.members : undefined;
            resourceInputs["originId"] = args ? args.originId : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["descriptor"] = undefined /*out*/;
            resourceInputs["domain"] = undefined /*out*/;
            resourceInputs["groupId"] = undefined /*out*/;
            resourceInputs["origin"] = undefined /*out*/;
            resourceInputs["principalName"] = undefined /*out*/;
            resourceInputs["subjectKind"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Group.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Group resources.
 */
export interface GroupState {
    description?: pulumi.Input<string>;
    descriptor?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    groupId?: pulumi.Input<string>;
    mail?: pulumi.Input<string>;
    members?: pulumi.Input<pulumi.Input<string>[]>;
    origin?: pulumi.Input<string>;
    originId?: pulumi.Input<string>;
    principalName?: pulumi.Input<string>;
    scope?: pulumi.Input<string>;
    subjectKind?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GroupTimeouts>;
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Group resource.
 */
export interface GroupArgs {
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    mail?: pulumi.Input<string>;
    members?: pulumi.Input<pulumi.Input<string>[]>;
    originId?: pulumi.Input<string>;
    scope?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GroupTimeouts>;
}
