// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GroupEntitlement extends pulumi.CustomResource {
    /**
     * Get an existing GroupEntitlement resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GroupEntitlementState, opts?: pulumi.CustomResourceOptions): GroupEntitlement {
        return new GroupEntitlement(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azuredevops:index/groupEntitlement:GroupEntitlement';

    /**
     * Returns true if the given object is an instance of GroupEntitlement.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GroupEntitlement {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GroupEntitlement.__pulumiType;
    }

    public readonly accountLicenseType!: pulumi.Output<string | undefined>;
    public /*out*/ readonly descriptor!: pulumi.Output<string>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly licensingSource!: pulumi.Output<string | undefined>;
    public readonly origin!: pulumi.Output<string>;
    public readonly originId!: pulumi.Output<string>;
    public /*out*/ readonly principalName!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.GroupEntitlementTimeouts | undefined>;

    /**
     * Create a GroupEntitlement resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: GroupEntitlementArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GroupEntitlementArgs | GroupEntitlementState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GroupEntitlementState | undefined;
            resourceInputs["accountLicenseType"] = state ? state.accountLicenseType : undefined;
            resourceInputs["descriptor"] = state ? state.descriptor : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["licensingSource"] = state ? state.licensingSource : undefined;
            resourceInputs["origin"] = state ? state.origin : undefined;
            resourceInputs["originId"] = state ? state.originId : undefined;
            resourceInputs["principalName"] = state ? state.principalName : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as GroupEntitlementArgs | undefined;
            resourceInputs["accountLicenseType"] = args ? args.accountLicenseType : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["licensingSource"] = args ? args.licensingSource : undefined;
            resourceInputs["origin"] = args ? args.origin : undefined;
            resourceInputs["originId"] = args ? args.originId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["descriptor"] = undefined /*out*/;
            resourceInputs["principalName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GroupEntitlement.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GroupEntitlement resources.
 */
export interface GroupEntitlementState {
    accountLicenseType?: pulumi.Input<string>;
    descriptor?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    licensingSource?: pulumi.Input<string>;
    origin?: pulumi.Input<string>;
    originId?: pulumi.Input<string>;
    principalName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GroupEntitlementTimeouts>;
}

/**
 * The set of arguments for constructing a GroupEntitlement resource.
 */
export interface GroupEntitlementArgs {
    accountLicenseType?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    licensingSource?: pulumi.Input<string>;
    origin?: pulumi.Input<string>;
    originId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GroupEntitlementTimeouts>;
}
