// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ServiceendpointAzurerm extends pulumi.CustomResource {
    /**
     * Get an existing ServiceendpointAzurerm resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceendpointAzurermState, opts?: pulumi.CustomResourceOptions): ServiceendpointAzurerm {
        return new ServiceendpointAzurerm(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azuredevops:index/serviceendpointAzurerm:ServiceendpointAzurerm';

    /**
     * Returns true if the given object is an instance of ServiceendpointAzurerm.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceendpointAzurerm {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceendpointAzurerm.__pulumiType;
    }

    public readonly authorization!: pulumi.Output<{[key: string]: string}>;
    /**
     * The Azure managementGroup Id which should be used.
     */
    public readonly azurermManagementGroupId!: pulumi.Output<string | undefined>;
    /**
     * The Azure managementGroup name which should be used.
     */
    public readonly azurermManagementGroupName!: pulumi.Output<string | undefined>;
    /**
     * The service principal tenant id which should be used.
     */
    public readonly azurermSpnTenantid!: pulumi.Output<string>;
    /**
     * The Azure subscription Id which should be used.
     */
    public readonly azurermSubscriptionId!: pulumi.Output<string | undefined>;
    /**
     * The Azure subscription name which should be used.
     */
    public readonly azurermSubscriptionName!: pulumi.Output<string | undefined>;
    public readonly credentials!: pulumi.Output<outputs.ServiceendpointAzurermCredentials | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Environment (Azure Cloud type)
     */
    public readonly environment!: pulumi.Output<string | undefined>;
    public readonly features!: pulumi.Output<outputs.ServiceendpointAzurermFeatures | undefined>;
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Scope Resource Group
     */
    public readonly resourceGroup!: pulumi.Output<string | undefined>;
    /**
     * The AzureRM Service Endpoint Authentication Scheme, this can be 'WorkloadIdentityFederation', 'ManagedServiceIdentity'
     * or 'ServicePrincipal'.
     */
    public readonly serviceEndpointAuthenticationScheme!: pulumi.Output<string | undefined>;
    public readonly serviceEndpointName!: pulumi.Output<string>;
    public /*out*/ readonly servicePrincipalId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ServiceendpointAzurermTimeouts | undefined>;
    /**
     * The issuer of the workload identity federation service principal.
     */
    public /*out*/ readonly workloadIdentityFederationIssuer!: pulumi.Output<string>;
    /**
     * The subject of the workload identity federation service principal.
     */
    public /*out*/ readonly workloadIdentityFederationSubject!: pulumi.Output<string>;

    /**
     * Create a ServiceendpointAzurerm resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceendpointAzurermArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceendpointAzurermArgs | ServiceendpointAzurermState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceendpointAzurermState | undefined;
            resourceInputs["authorization"] = state ? state.authorization : undefined;
            resourceInputs["azurermManagementGroupId"] = state ? state.azurermManagementGroupId : undefined;
            resourceInputs["azurermManagementGroupName"] = state ? state.azurermManagementGroupName : undefined;
            resourceInputs["azurermSpnTenantid"] = state ? state.azurermSpnTenantid : undefined;
            resourceInputs["azurermSubscriptionId"] = state ? state.azurermSubscriptionId : undefined;
            resourceInputs["azurermSubscriptionName"] = state ? state.azurermSubscriptionName : undefined;
            resourceInputs["credentials"] = state ? state.credentials : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["features"] = state ? state.features : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["resourceGroup"] = state ? state.resourceGroup : undefined;
            resourceInputs["serviceEndpointAuthenticationScheme"] = state ? state.serviceEndpointAuthenticationScheme : undefined;
            resourceInputs["serviceEndpointName"] = state ? state.serviceEndpointName : undefined;
            resourceInputs["servicePrincipalId"] = state ? state.servicePrincipalId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["workloadIdentityFederationIssuer"] = state ? state.workloadIdentityFederationIssuer : undefined;
            resourceInputs["workloadIdentityFederationSubject"] = state ? state.workloadIdentityFederationSubject : undefined;
        } else {
            const args = argsOrState as ServiceendpointAzurermArgs | undefined;
            if ((!args || args.azurermSpnTenantid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'azurermSpnTenantid'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.serviceEndpointName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceEndpointName'");
            }
            resourceInputs["authorization"] = args ? args.authorization : undefined;
            resourceInputs["azurermManagementGroupId"] = args ? args.azurermManagementGroupId : undefined;
            resourceInputs["azurermManagementGroupName"] = args ? args.azurermManagementGroupName : undefined;
            resourceInputs["azurermSpnTenantid"] = args ? args.azurermSpnTenantid : undefined;
            resourceInputs["azurermSubscriptionId"] = args ? args.azurermSubscriptionId : undefined;
            resourceInputs["azurermSubscriptionName"] = args ? args.azurermSubscriptionName : undefined;
            resourceInputs["credentials"] = args ? args.credentials : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["features"] = args ? args.features : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["resourceGroup"] = args ? args.resourceGroup : undefined;
            resourceInputs["serviceEndpointAuthenticationScheme"] = args ? args.serviceEndpointAuthenticationScheme : undefined;
            resourceInputs["serviceEndpointName"] = args ? args.serviceEndpointName : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["servicePrincipalId"] = undefined /*out*/;
            resourceInputs["workloadIdentityFederationIssuer"] = undefined /*out*/;
            resourceInputs["workloadIdentityFederationSubject"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceendpointAzurerm.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ServiceendpointAzurerm resources.
 */
export interface ServiceendpointAzurermState {
    authorization?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The Azure managementGroup Id which should be used.
     */
    azurermManagementGroupId?: pulumi.Input<string>;
    /**
     * The Azure managementGroup name which should be used.
     */
    azurermManagementGroupName?: pulumi.Input<string>;
    /**
     * The service principal tenant id which should be used.
     */
    azurermSpnTenantid?: pulumi.Input<string>;
    /**
     * The Azure subscription Id which should be used.
     */
    azurermSubscriptionId?: pulumi.Input<string>;
    /**
     * The Azure subscription name which should be used.
     */
    azurermSubscriptionName?: pulumi.Input<string>;
    credentials?: pulumi.Input<inputs.ServiceendpointAzurermCredentials>;
    description?: pulumi.Input<string>;
    /**
     * Environment (Azure Cloud type)
     */
    environment?: pulumi.Input<string>;
    features?: pulumi.Input<inputs.ServiceendpointAzurermFeatures>;
    projectId?: pulumi.Input<string>;
    /**
     * Scope Resource Group
     */
    resourceGroup?: pulumi.Input<string>;
    /**
     * The AzureRM Service Endpoint Authentication Scheme, this can be 'WorkloadIdentityFederation', 'ManagedServiceIdentity'
     * or 'ServicePrincipal'.
     */
    serviceEndpointAuthenticationScheme?: pulumi.Input<string>;
    serviceEndpointName?: pulumi.Input<string>;
    servicePrincipalId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ServiceendpointAzurermTimeouts>;
    /**
     * The issuer of the workload identity federation service principal.
     */
    workloadIdentityFederationIssuer?: pulumi.Input<string>;
    /**
     * The subject of the workload identity federation service principal.
     */
    workloadIdentityFederationSubject?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceendpointAzurerm resource.
 */
export interface ServiceendpointAzurermArgs {
    authorization?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The Azure managementGroup Id which should be used.
     */
    azurermManagementGroupId?: pulumi.Input<string>;
    /**
     * The Azure managementGroup name which should be used.
     */
    azurermManagementGroupName?: pulumi.Input<string>;
    /**
     * The service principal tenant id which should be used.
     */
    azurermSpnTenantid: pulumi.Input<string>;
    /**
     * The Azure subscription Id which should be used.
     */
    azurermSubscriptionId?: pulumi.Input<string>;
    /**
     * The Azure subscription name which should be used.
     */
    azurermSubscriptionName?: pulumi.Input<string>;
    credentials?: pulumi.Input<inputs.ServiceendpointAzurermCredentials>;
    description?: pulumi.Input<string>;
    /**
     * Environment (Azure Cloud type)
     */
    environment?: pulumi.Input<string>;
    features?: pulumi.Input<inputs.ServiceendpointAzurermFeatures>;
    projectId: pulumi.Input<string>;
    /**
     * Scope Resource Group
     */
    resourceGroup?: pulumi.Input<string>;
    /**
     * The AzureRM Service Endpoint Authentication Scheme, this can be 'WorkloadIdentityFederation', 'ManagedServiceIdentity'
     * or 'ServicePrincipal'.
     */
    serviceEndpointAuthenticationScheme?: pulumi.Input<string>;
    serviceEndpointName: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ServiceendpointAzurermTimeouts>;
}
