// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GitRepository extends pulumi.CustomResource {
    /**
     * Get an existing GitRepository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GitRepositoryState, opts?: pulumi.CustomResourceOptions): GitRepository {
        return new GitRepository(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azuredevops:index/gitRepository:GitRepository';

    /**
     * Returns true if the given object is an instance of GitRepository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GitRepository {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GitRepository.__pulumiType;
    }

    public readonly defaultBranch!: pulumi.Output<string>;
    public /*out*/ readonly disabled!: pulumi.Output<boolean>;
    public readonly initialization!: pulumi.Output<outputs.GitRepositoryInitialization>;
    public /*out*/ readonly isFork!: pulumi.Output<boolean>;
    public readonly name!: pulumi.Output<string>;
    public readonly parentRepositoryId!: pulumi.Output<string | undefined>;
    public readonly projectId!: pulumi.Output<string>;
    public /*out*/ readonly remoteUrl!: pulumi.Output<string>;
    public /*out*/ readonly size!: pulumi.Output<number>;
    public /*out*/ readonly sshUrl!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.GitRepositoryTimeouts | undefined>;
    public /*out*/ readonly url!: pulumi.Output<string>;
    public /*out*/ readonly webUrl!: pulumi.Output<string>;

    /**
     * Create a GitRepository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GitRepositoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GitRepositoryArgs | GitRepositoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GitRepositoryState | undefined;
            resourceInputs["defaultBranch"] = state ? state.defaultBranch : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["initialization"] = state ? state.initialization : undefined;
            resourceInputs["isFork"] = state ? state.isFork : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parentRepositoryId"] = state ? state.parentRepositoryId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["remoteUrl"] = state ? state.remoteUrl : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["sshUrl"] = state ? state.sshUrl : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["webUrl"] = state ? state.webUrl : undefined;
        } else {
            const args = argsOrState as GitRepositoryArgs | undefined;
            if ((!args || args.initialization === undefined) && !opts.urn) {
                throw new Error("Missing required property 'initialization'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["defaultBranch"] = args ? args.defaultBranch : undefined;
            resourceInputs["initialization"] = args ? args.initialization : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parentRepositoryId"] = args ? args.parentRepositoryId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["disabled"] = undefined /*out*/;
            resourceInputs["isFork"] = undefined /*out*/;
            resourceInputs["remoteUrl"] = undefined /*out*/;
            resourceInputs["size"] = undefined /*out*/;
            resourceInputs["sshUrl"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
            resourceInputs["webUrl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GitRepository.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GitRepository resources.
 */
export interface GitRepositoryState {
    defaultBranch?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    initialization?: pulumi.Input<inputs.GitRepositoryInitialization>;
    isFork?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    parentRepositoryId?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    remoteUrl?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    sshUrl?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GitRepositoryTimeouts>;
    url?: pulumi.Input<string>;
    webUrl?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GitRepository resource.
 */
export interface GitRepositoryArgs {
    defaultBranch?: pulumi.Input<string>;
    initialization: pulumi.Input<inputs.GitRepositoryInitialization>;
    name?: pulumi.Input<string>;
    parentRepositoryId?: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GitRepositoryTimeouts>;
}
