// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CheckRequiredTemplate extends pulumi.CustomResource {
    /**
     * Get an existing CheckRequiredTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CheckRequiredTemplateState, opts?: pulumi.CustomResourceOptions): CheckRequiredTemplate {
        return new CheckRequiredTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azuredevops:index/checkRequiredTemplate:CheckRequiredTemplate';

    /**
     * Returns true if the given object is an instance of CheckRequiredTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CheckRequiredTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CheckRequiredTemplate.__pulumiType;
    }

    public readonly projectId!: pulumi.Output<string>;
    public readonly requiredTemplates!: pulumi.Output<outputs.CheckRequiredTemplateRequiredTemplate[]>;
    public readonly targetResourceId!: pulumi.Output<string>;
    public readonly targetResourceType!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.CheckRequiredTemplateTimeouts | undefined>;
    public /*out*/ readonly version!: pulumi.Output<number>;

    /**
     * Create a CheckRequiredTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CheckRequiredTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CheckRequiredTemplateArgs | CheckRequiredTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CheckRequiredTemplateState | undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["requiredTemplates"] = state ? state.requiredTemplates : undefined;
            resourceInputs["targetResourceId"] = state ? state.targetResourceId : undefined;
            resourceInputs["targetResourceType"] = state ? state.targetResourceType : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as CheckRequiredTemplateArgs | undefined;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.requiredTemplates === undefined) && !opts.urn) {
                throw new Error("Missing required property 'requiredTemplates'");
            }
            if ((!args || args.targetResourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetResourceId'");
            }
            if ((!args || args.targetResourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetResourceType'");
            }
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["requiredTemplates"] = args ? args.requiredTemplates : undefined;
            resourceInputs["targetResourceId"] = args ? args.targetResourceId : undefined;
            resourceInputs["targetResourceType"] = args ? args.targetResourceType : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CheckRequiredTemplate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CheckRequiredTemplate resources.
 */
export interface CheckRequiredTemplateState {
    projectId?: pulumi.Input<string>;
    requiredTemplates?: pulumi.Input<pulumi.Input<inputs.CheckRequiredTemplateRequiredTemplate>[]>;
    targetResourceId?: pulumi.Input<string>;
    targetResourceType?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CheckRequiredTemplateTimeouts>;
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a CheckRequiredTemplate resource.
 */
export interface CheckRequiredTemplateArgs {
    projectId: pulumi.Input<string>;
    requiredTemplates: pulumi.Input<pulumi.Input<inputs.CheckRequiredTemplateRequiredTemplate>[]>;
    targetResourceId: pulumi.Input<string>;
    targetResourceType: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CheckRequiredTemplateTimeouts>;
}
