// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Workitem extends pulumi.CustomResource {
    /**
     * Get an existing Workitem resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkitemState, opts?: pulumi.CustomResourceOptions): Workitem {
        return new Workitem(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azuredevops:index/workitem:Workitem';

    /**
     * Returns true if the given object is an instance of Workitem.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Workitem {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Workitem.__pulumiType;
    }

    public readonly areaPath!: pulumi.Output<string>;
    public readonly customFields!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly iterationPath!: pulumi.Output<string>;
    public readonly projectId!: pulumi.Output<string>;
    public readonly state!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.WorkitemTimeouts | undefined>;
    public readonly title!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Workitem resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WorkitemArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WorkitemArgs | WorkitemState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WorkitemState | undefined;
            resourceInputs["areaPath"] = state ? state.areaPath : undefined;
            resourceInputs["customFields"] = state ? state.customFields : undefined;
            resourceInputs["iterationPath"] = state ? state.iterationPath : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as WorkitemArgs | undefined;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["areaPath"] = args ? args.areaPath : undefined;
            resourceInputs["customFields"] = args ? args.customFields : undefined;
            resourceInputs["iterationPath"] = args ? args.iterationPath : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Workitem.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Workitem resources.
 */
export interface WorkitemState {
    areaPath?: pulumi.Input<string>;
    customFields?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    iterationPath?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.WorkitemTimeouts>;
    title?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Workitem resource.
 */
export interface WorkitemArgs {
    areaPath?: pulumi.Input<string>;
    customFields?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    iterationPath?: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.WorkitemTimeouts>;
    title: pulumi.Input<string>;
    type: pulumi.Input<string>;
}
