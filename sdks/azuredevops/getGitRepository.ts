// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getGitRepository(args: GetGitRepositoryArgs, opts?: pulumi.InvokeOptions): Promise<GetGitRepositoryResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azuredevops:index/getGitRepository:getGitRepository", {
        "id": args.id,
        "name": args.name,
        "projectId": args.projectId,
        "timeouts": args.timeouts,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getGitRepository.
 */
export interface GetGitRepositoryArgs {
    id?: string;
    name: string;
    projectId: string;
    timeouts?: inputs.GetGitRepositoryTimeouts;
}

/**
 * A collection of values returned by getGitRepository.
 */
export interface GetGitRepositoryResult {
    readonly defaultBranch: string;
    readonly disabled: boolean;
    readonly id: string;
    readonly isFork: boolean;
    readonly name: string;
    readonly projectId: string;
    readonly remoteUrl: string;
    readonly size: number;
    readonly sshUrl: string;
    readonly timeouts?: outputs.GetGitRepositoryTimeouts;
    readonly url: string;
    readonly webUrl: string;
}
export function getGitRepositoryOutput(args: GetGitRepositoryOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGitRepositoryResult> {
    return pulumi.output(args).apply((a: any) => getGitRepository(a, opts))
}

/**
 * A collection of arguments for invoking getGitRepository.
 */
export interface GetGitRepositoryOutputArgs {
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GetGitRepositoryTimeoutsArgs>;
}
