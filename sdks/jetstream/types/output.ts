// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface StreamMirror {
    /**
     * Streams replicated from other accounts
     */
    external?: outputs.StreamMirrorExternal;
    /**
     * Only copy messages matching a specific subject, not usable for mirrors
     */
    filterSubject?: string;
    /**
     * The name of the source Stream
     */
    name: string;
    /**
     * The sequence to start mirroring from
     */
    startSeq?: number;
    /**
     * The time stamp in the source stream to start from, in RFC3339 format
     */
    startTime?: string;
    /**
     * The subject filtering sources and associated destination transforms
     */
    subjectTransforms?: outputs.StreamMirrorSubjectTransform[];
}

export interface StreamMirrorExternal {
    /**
     * The subject prefix for the remote API
     */
    api?: string;
    /**
     * The subject prefix where messages will be delivered to
     */
    deliver?: string;
}

export interface StreamMirrorSubjectTransform {
    /**
     * The subject transform destination
     */
    destination: string;
    /**
     * The subject transform source
     */
    source: string;
}

export interface StreamSource {
    /**
     * Streams replicated from other accounts
     */
    external?: outputs.StreamSourceExternal;
    /**
     * Only copy messages matching a specific subject, not usable for mirrors
     */
    filterSubject?: string;
    /**
     * The name of the source Stream
     */
    name: string;
    /**
     * The sequence to start mirroring from
     */
    startSeq?: number;
    /**
     * The time stamp in the source stream to start from, in RFC3339 format
     */
    startTime?: string;
    /**
     * The subject filtering sources and associated destination transforms
     */
    subjectTransforms?: outputs.StreamSourceSubjectTransform[];
}

export interface StreamSourceExternal {
    /**
     * The subject prefix for the remote API
     */
    api?: string;
    /**
     * The subject prefix where messages will be delivered to
     */
    deliver?: string;
}

export interface StreamSourceSubjectTransform {
    /**
     * The subject transform destination
     */
    destination: string;
    /**
     * The subject transform source
     */
    source: string;
}

export interface StreamSubjectTransform {
    /**
     * The subject transform destination
     */
    destination: string;
    /**
     * The subject transform source
     */
    source: string;
}

export namespace config {
    export interface Tls {
        /**
         * Path to the server root CA file (in PEM format). Needed when the NATS server has TLS enabled with an unknown root CA
         */
        caFile?: string;
        /**
         * The root CA (file) content, in PEM format. Needed when the NATS server has TLS enabled with an unknown root CA
         */
        caFileData?: string;
        /**
         * Path to client cert file (in PEM format). Needed when NATS server is configured to verify client certificate
         */
        certFile?: string;
        /**
         * The cert file content (in PEM format). Needed when NATS server is configured to verify client certificate
         */
        certFileData?: string;
        /**
         * Path to client key file (in PEM format). Needed when NATS server is configured to verify client certificate
         */
        keyFile?: string;
        /**
         * The key file content (in PEM format). Needed when NATS server is configured to verify client certificate
         */
        keyFileData?: string;
    }

}
