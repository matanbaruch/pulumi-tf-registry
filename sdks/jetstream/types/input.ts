// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ProviderTls {
    /**
     * Path to the server root CA file (in PEM format). Needed when the NATS server has TLS enabled with an unknown root CA
     */
    caFile?: pulumi.Input<string>;
    /**
     * The root CA (file) content, in PEM format. Needed when the NATS server has TLS enabled with an unknown root CA
     */
    caFileData?: pulumi.Input<string>;
    /**
     * Path to client cert file (in PEM format). Needed when NATS server is configured to verify client certificate
     */
    certFile?: pulumi.Input<string>;
    /**
     * The cert file content (in PEM format). Needed when NATS server is configured to verify client certificate
     */
    certFileData?: pulumi.Input<string>;
    /**
     * Path to client key file (in PEM format). Needed when NATS server is configured to verify client certificate
     */
    keyFile?: pulumi.Input<string>;
    /**
     * The key file content (in PEM format). Needed when NATS server is configured to verify client certificate
     */
    keyFileData?: pulumi.Input<string>;
}

export interface StreamMirror {
    /**
     * Streams replicated from other accounts
     */
    external?: pulumi.Input<inputs.StreamMirrorExternal>;
    /**
     * Only copy messages matching a specific subject, not usable for mirrors
     */
    filterSubject?: pulumi.Input<string>;
    /**
     * The name of the source Stream
     */
    name: pulumi.Input<string>;
    /**
     * The sequence to start mirroring from
     */
    startSeq?: pulumi.Input<number>;
    /**
     * The time stamp in the source stream to start from, in RFC3339 format
     */
    startTime?: pulumi.Input<string>;
    /**
     * The subject filtering sources and associated destination transforms
     */
    subjectTransforms?: pulumi.Input<pulumi.Input<inputs.StreamMirrorSubjectTransform>[]>;
}

export interface StreamMirrorExternal {
    /**
     * The subject prefix for the remote API
     */
    api?: pulumi.Input<string>;
    /**
     * The subject prefix where messages will be delivered to
     */
    deliver?: pulumi.Input<string>;
}

export interface StreamMirrorSubjectTransform {
    /**
     * The subject transform destination
     */
    destination: pulumi.Input<string>;
    /**
     * The subject transform source
     */
    source: pulumi.Input<string>;
}

export interface StreamSource {
    /**
     * Streams replicated from other accounts
     */
    external?: pulumi.Input<inputs.StreamSourceExternal>;
    /**
     * Only copy messages matching a specific subject, not usable for mirrors
     */
    filterSubject?: pulumi.Input<string>;
    /**
     * The name of the source Stream
     */
    name: pulumi.Input<string>;
    /**
     * The sequence to start mirroring from
     */
    startSeq?: pulumi.Input<number>;
    /**
     * The time stamp in the source stream to start from, in RFC3339 format
     */
    startTime?: pulumi.Input<string>;
    /**
     * The subject filtering sources and associated destination transforms
     */
    subjectTransforms?: pulumi.Input<pulumi.Input<inputs.StreamSourceSubjectTransform>[]>;
}

export interface StreamSourceExternal {
    /**
     * The subject prefix for the remote API
     */
    api?: pulumi.Input<string>;
    /**
     * The subject prefix where messages will be delivered to
     */
    deliver?: pulumi.Input<string>;
}

export interface StreamSourceSubjectTransform {
    /**
     * The subject transform destination
     */
    destination: pulumi.Input<string>;
    /**
     * The subject transform source
     */
    source: pulumi.Input<string>;
}

export interface StreamSubjectTransform {
    /**
     * The subject transform destination
     */
    destination: pulumi.Input<string>;
    /**
     * The subject transform source
     */
    source: pulumi.Input<string>;
}
export namespace config {
}
