// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class KvBucket extends pulumi.CustomResource {
    /**
     * Get an existing KvBucket resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KvBucketState, opts?: pulumi.CustomResourceOptions): KvBucket {
        return new KvBucket(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'jetstream:index/kvBucket:KvBucket';

    /**
     * Returns true if the given object is an instance of KvBucket.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KvBucket {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KvBucket.__pulumiType;
    }

    /**
     * Contains additional information about this bucket
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * How many historical values to keep
     */
    public readonly history!: pulumi.Output<number | undefined>;
    /**
     * Maximum size of the entire bucket
     */
    public readonly maxBucketSize!: pulumi.Output<number | undefined>;
    /**
     * Maximum size of any value
     */
    public readonly maxValueSize!: pulumi.Output<number | undefined>;
    /**
     * The name of the Bucket
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Place the bucket in a specific cluster, influenced by placement_tags
     */
    public readonly placementCluster!: pulumi.Output<string | undefined>;
    /**
     * Place the stream only on servers with these tags
     */
    public readonly placementTags!: pulumi.Output<string[] | undefined>;
    /**
     * Number of cluster replicas to store
     */
    public readonly replicas!: pulumi.Output<number | undefined>;
    /**
     * How many seconds a value will be kept in the bucket
     */
    public readonly ttl!: pulumi.Output<number | undefined>;

    /**
     * Create a KvBucket resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: KvBucketArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KvBucketArgs | KvBucketState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KvBucketState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["history"] = state ? state.history : undefined;
            resourceInputs["maxBucketSize"] = state ? state.maxBucketSize : undefined;
            resourceInputs["maxValueSize"] = state ? state.maxValueSize : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["placementCluster"] = state ? state.placementCluster : undefined;
            resourceInputs["placementTags"] = state ? state.placementTags : undefined;
            resourceInputs["replicas"] = state ? state.replicas : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
        } else {
            const args = argsOrState as KvBucketArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["history"] = args ? args.history : undefined;
            resourceInputs["maxBucketSize"] = args ? args.maxBucketSize : undefined;
            resourceInputs["maxValueSize"] = args ? args.maxValueSize : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["placementCluster"] = args ? args.placementCluster : undefined;
            resourceInputs["placementTags"] = args ? args.placementTags : undefined;
            resourceInputs["replicas"] = args ? args.replicas : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KvBucket.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KvBucket resources.
 */
export interface KvBucketState {
    /**
     * Contains additional information about this bucket
     */
    description?: pulumi.Input<string>;
    /**
     * How many historical values to keep
     */
    history?: pulumi.Input<number>;
    /**
     * Maximum size of the entire bucket
     */
    maxBucketSize?: pulumi.Input<number>;
    /**
     * Maximum size of any value
     */
    maxValueSize?: pulumi.Input<number>;
    /**
     * The name of the Bucket
     */
    name?: pulumi.Input<string>;
    /**
     * Place the bucket in a specific cluster, influenced by placement_tags
     */
    placementCluster?: pulumi.Input<string>;
    /**
     * Place the stream only on servers with these tags
     */
    placementTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Number of cluster replicas to store
     */
    replicas?: pulumi.Input<number>;
    /**
     * How many seconds a value will be kept in the bucket
     */
    ttl?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a KvBucket resource.
 */
export interface KvBucketArgs {
    /**
     * Contains additional information about this bucket
     */
    description?: pulumi.Input<string>;
    /**
     * How many historical values to keep
     */
    history?: pulumi.Input<number>;
    /**
     * Maximum size of the entire bucket
     */
    maxBucketSize?: pulumi.Input<number>;
    /**
     * Maximum size of any value
     */
    maxValueSize?: pulumi.Input<number>;
    /**
     * The name of the Bucket
     */
    name?: pulumi.Input<string>;
    /**
     * Place the bucket in a specific cluster, influenced by placement_tags
     */
    placementCluster?: pulumi.Input<string>;
    /**
     * Place the stream only on servers with these tags
     */
    placementTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Number of cluster replicas to store
     */
    replicas?: pulumi.Input<number>;
    /**
     * How many seconds a value will be kept in the bucket
     */
    ttl?: pulumi.Input<number>;
}
