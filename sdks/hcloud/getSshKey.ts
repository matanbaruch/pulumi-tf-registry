// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getSshKey(args?: GetSshKeyArgs, opts?: pulumi.InvokeOptions): Promise<GetSshKeyResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("hcloud:index/getSshKey:getSshKey", {
        "fingerprint": args.fingerprint,
        "id": args.id,
        "labels": args.labels,
        "name": args.name,
        "publicKey": args.publicKey,
        "selector": args.selector,
        "withSelector": args.withSelector,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSshKey.
 */
export interface GetSshKeyArgs {
    fingerprint?: string;
    id?: number;
    labels?: {[key: string]: string};
    name?: string;
    publicKey?: string;
    /**
     * @deprecated Deprecated
     */
    selector?: string;
    withSelector?: string;
}

/**
 * A collection of values returned by getSshKey.
 */
export interface GetSshKeyResult {
    readonly fingerprint: string;
    readonly id: number;
    readonly labels: {[key: string]: string};
    readonly name: string;
    readonly publicKey: string;
    /**
     * @deprecated Deprecated
     */
    readonly selector?: string;
    readonly withSelector?: string;
}
export function getSshKeyOutput(args?: GetSshKeyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSshKeyResult> {
    return pulumi.output(args).apply((a: any) => getSshKey(a, opts))
}

/**
 * A collection of arguments for invoking getSshKey.
 */
export interface GetSshKeyOutputArgs {
    fingerprint?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    publicKey?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    selector?: pulumi.Input<string>;
    withSelector?: pulumi.Input<string>;
}
