// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVolumes(args?: GetVolumesArgs, opts?: pulumi.InvokeOptions): Promise<GetVolumesResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("hcloud:index/getVolumes:getVolumes", {
        "id": args.id,
        "withSelector": args.withSelector,
        "withStatuses": args.withStatuses,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVolumes.
 */
export interface GetVolumesArgs {
    id?: string;
    withSelector?: string;
    withStatuses?: string[];
}

/**
 * A collection of values returned by getVolumes.
 */
export interface GetVolumesResult {
    readonly id: string;
    readonly volumes: outputs.GetVolumesVolume[];
    readonly withSelector?: string;
    readonly withStatuses?: string[];
}
export function getVolumesOutput(args?: GetVolumesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVolumesResult> {
    return pulumi.output(args).apply((a: any) => getVolumes(a, opts))
}

/**
 * A collection of arguments for invoking getVolumes.
 */
export interface GetVolumesOutputArgs {
    id?: pulumi.Input<string>;
    withSelector?: pulumi.Input<string>;
    withStatuses?: pulumi.Input<pulumi.Input<string>[]>;
}
