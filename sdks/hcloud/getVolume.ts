// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getVolume(args?: GetVolumeArgs, opts?: pulumi.InvokeOptions): Promise<GetVolumeResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("hcloud:index/getVolume:getVolume", {
        "id": args.id,
        "location": args.location,
        "name": args.name,
        "selector": args.selector,
        "serverId": args.serverId,
        "withSelector": args.withSelector,
        "withStatuses": args.withStatuses,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVolume.
 */
export interface GetVolumeArgs {
    id?: number;
    location?: string;
    name?: string;
    /**
     * @deprecated Deprecated
     */
    selector?: string;
    serverId?: number;
    withSelector?: string;
    withStatuses?: string[];
}

/**
 * A collection of values returned by getVolume.
 */
export interface GetVolumeResult {
    readonly deleteProtection: boolean;
    readonly id: number;
    readonly labels: {[key: string]: string};
    readonly linuxDevice: string;
    readonly location?: string;
    readonly name: string;
    /**
     * @deprecated Deprecated
     */
    readonly selector?: string;
    readonly serverId?: number;
    readonly size: number;
    readonly withSelector?: string;
    readonly withStatuses?: string[];
}
export function getVolumeOutput(args?: GetVolumeOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVolumeResult> {
    return pulumi.output(args).apply((a: any) => getVolume(a, opts))
}

/**
 * A collection of arguments for invoking getVolume.
 */
export interface GetVolumeOutputArgs {
    id?: pulumi.Input<number>;
    location?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    selector?: pulumi.Input<string>;
    serverId?: pulumi.Input<number>;
    withSelector?: pulumi.Input<string>;
    withStatuses?: pulumi.Input<pulumi.Input<string>[]>;
}
