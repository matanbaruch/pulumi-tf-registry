// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Rdns extends pulumi.CustomResource {
    /**
     * Get an existing Rdns resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RdnsState, opts?: pulumi.CustomResourceOptions): Rdns {
        return new Rdns(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'hcloud:index/rdns:Rdns';

    /**
     * Returns true if the given object is an instance of Rdns.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Rdns {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Rdns.__pulumiType;
    }

    public readonly dnsPtr!: pulumi.Output<string>;
    public readonly floatingIpId!: pulumi.Output<number | undefined>;
    public readonly ipAddress!: pulumi.Output<string>;
    public readonly loadBalancerId!: pulumi.Output<number | undefined>;
    public readonly primaryIpId!: pulumi.Output<number | undefined>;
    public readonly serverId!: pulumi.Output<number | undefined>;

    /**
     * Create a Rdns resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RdnsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RdnsArgs | RdnsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RdnsState | undefined;
            resourceInputs["dnsPtr"] = state ? state.dnsPtr : undefined;
            resourceInputs["floatingIpId"] = state ? state.floatingIpId : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["loadBalancerId"] = state ? state.loadBalancerId : undefined;
            resourceInputs["primaryIpId"] = state ? state.primaryIpId : undefined;
            resourceInputs["serverId"] = state ? state.serverId : undefined;
        } else {
            const args = argsOrState as RdnsArgs | undefined;
            if ((!args || args.dnsPtr === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dnsPtr'");
            }
            if ((!args || args.ipAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipAddress'");
            }
            resourceInputs["dnsPtr"] = args ? args.dnsPtr : undefined;
            resourceInputs["floatingIpId"] = args ? args.floatingIpId : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["loadBalancerId"] = args ? args.loadBalancerId : undefined;
            resourceInputs["primaryIpId"] = args ? args.primaryIpId : undefined;
            resourceInputs["serverId"] = args ? args.serverId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Rdns.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Rdns resources.
 */
export interface RdnsState {
    dnsPtr?: pulumi.Input<string>;
    floatingIpId?: pulumi.Input<number>;
    ipAddress?: pulumi.Input<string>;
    loadBalancerId?: pulumi.Input<number>;
    primaryIpId?: pulumi.Input<number>;
    serverId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Rdns resource.
 */
export interface RdnsArgs {
    dnsPtr: pulumi.Input<string>;
    floatingIpId?: pulumi.Input<number>;
    ipAddress: pulumi.Input<string>;
    loadBalancerId?: pulumi.Input<number>;
    primaryIpId?: pulumi.Input<number>;
    serverId?: pulumi.Input<number>;
}
