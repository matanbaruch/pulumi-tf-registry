// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface FirewallApplyTo {
    labelSelector: string;
    server: number;
}

export interface FirewallRule {
    description?: string;
    destinationIps?: string[];
    direction: string;
    port?: string;
    protocol: string;
    sourceIps?: string[];
}

export interface GetCertificatesCertificate {
    certificate: string;
    created: string;
    domainNames: string[];
    fingerprint: string;
    id: number;
    labels: {[key: string]: string};
    name: string;
    notValidAfter: string;
    notValidBefore: string;
    type: string;
}

export interface GetDatacentersDatacenter {
    availableServerTypeIds: number[];
    description: string;
    id: number;
    location: {[key: string]: string};
    name: string;
    supportedServerTypeIds: number[];
}

export interface GetFirewallApplyTo {
    labelSelector: string;
    server: number;
}

export interface GetFirewallRule {
    description?: string;
    destinationIps?: string[];
    direction: string;
    port?: string;
    protocol?: string;
    sourceIps?: string[];
}

export interface GetFirewallsFirewall {
    applyTos: outputs.GetFirewallsFirewallApplyTo[];
    id: number;
    labels: {[key: string]: string};
    name: string;
    rules: outputs.GetFirewallsFirewallRule[];
}

export interface GetFirewallsFirewallApplyTo {
    labelSelector: string;
    server: number;
}

export interface GetFirewallsFirewallRule {
    description: string;
    destinationIps: string[];
    direction: string;
    port: string;
    protocol: string;
    sourceIps: string[];
}

export interface GetFloatingIpsFloatingIp {
    deleteProtection: boolean;
    description: string;
    homeLocation: string;
    id: number;
    ipAddress: string;
    ipNetwork: string;
    labels: {[key: string]: string};
    name: string;
    serverId: number;
    type: string;
}

export interface GetImagesImage {
    architecture: string;
    created: string;
    deprecated: string;
    description: string;
    id: number;
    labels: {[key: string]: string};
    name: string;
    osFlavor: string;
    osVersion: string;
    rapidDeploy: boolean;
    selector: string;
    type: string;
}

export interface GetLoadBalancerAlgorithm {
    type: string;
}

export interface GetLoadBalancerService {
    destinationPort: number;
    healthChecks: outputs.GetLoadBalancerServiceHealthCheck[];
    https: outputs.GetLoadBalancerServiceHttp[];
    listenPort: number;
    protocol: string;
    proxyprotocol: boolean;
}

export interface GetLoadBalancerServiceHealthCheck {
    https: outputs.GetLoadBalancerServiceHealthCheckHttp[];
    interval: number;
    port: number;
    protocol: string;
    retries: number;
    timeout: number;
}

export interface GetLoadBalancerServiceHealthCheckHttp {
    domain: string;
    path: string;
    response: string;
    statusCodes: number[];
    tls: boolean;
}

export interface GetLoadBalancerServiceHttp {
    certificates: string[];
    cookieLifetime: number;
    cookieName: string;
    redirectHttp: boolean;
    stickySessions: boolean;
}

export interface GetLoadBalancerTarget {
    labelSelector: string;
    serverId: number;
    type: string;
}

export interface GetLoadBalancersLoadBalancer {
    algorithms: outputs.GetLoadBalancersLoadBalancerAlgorithm[];
    deleteProtection: boolean;
    id: number;
    ipv4: string;
    ipv6: string;
    labels: {[key: string]: string};
    loadBalancerType: string;
    location: string;
    name: string;
    networkId: number;
    networkIp: string;
    networkZone: string;
    services: outputs.GetLoadBalancersLoadBalancerService[];
    targets: outputs.GetLoadBalancersLoadBalancerTarget[];
}

export interface GetLoadBalancersLoadBalancerAlgorithm {
    type: string;
}

export interface GetLoadBalancersLoadBalancerService {
    destinationPort: number;
    healthChecks: outputs.GetLoadBalancersLoadBalancerServiceHealthCheck[];
    https: outputs.GetLoadBalancersLoadBalancerServiceHttp[];
    listenPort: number;
    protocol: string;
    proxyprotocol: boolean;
}

export interface GetLoadBalancersLoadBalancerServiceHealthCheck {
    https: outputs.GetLoadBalancersLoadBalancerServiceHealthCheckHttp[];
    interval: number;
    port: number;
    protocol: string;
    retries: number;
    timeout: number;
}

export interface GetLoadBalancersLoadBalancerServiceHealthCheckHttp {
    domain: string;
    path: string;
    response: string;
    statusCodes: number[];
    tls: boolean;
}

export interface GetLoadBalancersLoadBalancerServiceHttp {
    certificates: string[];
    cookieLifetime: number;
    cookieName: string;
    redirectHttp: boolean;
    stickySessions: boolean;
}

export interface GetLoadBalancersLoadBalancerTarget {
    labelSelector: string;
    serverId: number;
    type: string;
}

export interface GetLocationsLocation {
    city: string;
    country: string;
    description: string;
    id: number;
    latitude: number;
    longitude: number;
    name: string;
    networkZone: string;
}

export interface GetNetworksNetwork {
    deleteProtection: boolean;
    exposeRoutesToVswitch: boolean;
    id: number;
    ipRange: string;
    labels: {[key: string]: string};
    name: string;
}

export interface GetPlacementGroupsPlacementGroup {
    id: number;
    labels: {[key: string]: string};
    name: string;
    servers: number[];
    type: string;
}

export interface GetPrimaryIpsPrimaryIp {
    assigneeId: number;
    assigneeType: string;
    autoDelete: boolean;
    datacenter: string;
    deleteProtection: boolean;
    id: number;
    ipAddress: string;
    ipNetwork: string;
    labels: {[key: string]: string};
    name: string;
    type: string;
}

export interface GetServerTypesServerType {
    architecture: string;
    cores: number;
    cpuType: string;
    deprecationAnnounced: string;
    description: string;
    disk: number;
    id: number;
    includedTraffic: number;
    isDeprecated: boolean;
    memory: number;
    name: string;
    storageType: string;
    unavailableAfter: string;
}

export interface GetServersServer {
    backupWindow: string;
    backups: boolean;
    datacenter: string;
    deleteProtection: boolean;
    firewallIds: number[];
    id: number;
    image: string;
    ipv4Address: string;
    ipv6Address: string;
    ipv6Network: string;
    iso: string;
    labels: {[key: string]: string};
    location: string;
    name: string;
    placementGroupId: number;
    primaryDiskSize: number;
    rebuildProtection: boolean;
    rescue: string;
    serverType: string;
    status: string;
}

export interface GetSshKeysSshKey {
    /**
     * Fingerprint of the SSH key.
     */
    fingerprint: string;
    /**
     * ID of the SSH key.
     */
    id: number;
    /**
     * User-defined [labels](https://docs.hetzner.cloud/#labels) (key-value pairs) for the resource.
     */
    labels: {[key: string]: string};
    /**
     * Name of the SSH key.
     */
    name: string;
    /**
     * Public key of the SSH key pair.
     */
    publicKey: string;
}

export interface GetVolumesVolume {
    deleteProtection: boolean;
    id: number;
    labels: {[key: string]: string};
    linuxDevice: string;
    location: string;
    name: string;
    serverId: number;
    size: number;
}

export interface LoadBalancerAlgorithm {
    type: string;
}

export interface LoadBalancerServiceHealthCheck {
    http?: outputs.LoadBalancerServiceHealthCheckHttp;
    interval: number;
    port: number;
    protocol: string;
    retries: number;
    timeout: number;
}

export interface LoadBalancerServiceHealthCheckHttp {
    domain?: string;
    path?: string;
    response?: string;
    statusCodes?: string[];
    tls?: boolean;
}

export interface LoadBalancerServiceHttp {
    certificates: number[];
    cookieLifetime: number;
    cookieName: string;
    redirectHttp: boolean;
    stickySessions: boolean;
}

export interface LoadBalancerTarget {
    serverId?: number;
    type: string;
    /**
     * @deprecated Deprecated
     */
    usePrivateIp?: boolean;
}

export interface ServerNetwork {
    aliasIps: string[];
    ip: string;
    macAddress: string;
    networkId: number;
}

export interface ServerPublicNet {
    ipv4: number;
    ipv4Enabled?: boolean;
    ipv6: number;
    ipv6Enabled?: boolean;
}

export interface ServerTimeouts {
    create?: string;
}

export interface SnapshotTimeouts {
    create?: string;
}

