// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getLoadBalancer(args?: GetLoadBalancerArgs, opts?: pulumi.InvokeOptions): Promise<GetLoadBalancerResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("hcloud:index/getLoadBalancer:getLoadBalancer", {
        "id": args.id,
        "name": args.name,
        "withSelector": args.withSelector,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLoadBalancer.
 */
export interface GetLoadBalancerArgs {
    id?: number;
    name?: string;
    withSelector?: string;
}

/**
 * A collection of values returned by getLoadBalancer.
 */
export interface GetLoadBalancerResult {
    readonly algorithms: outputs.GetLoadBalancerAlgorithm[];
    readonly deleteProtection: boolean;
    readonly id: number;
    readonly ipv4: string;
    readonly ipv6: string;
    readonly labels: {[key: string]: string};
    readonly loadBalancerType: string;
    readonly location: string;
    readonly name?: string;
    readonly networkId: number;
    readonly networkIp: string;
    readonly networkZone: string;
    readonly services: outputs.GetLoadBalancerService[];
    readonly targets: outputs.GetLoadBalancerTarget[];
    readonly withSelector?: string;
}
export function getLoadBalancerOutput(args?: GetLoadBalancerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLoadBalancerResult> {
    return pulumi.output(args).apply((a: any) => getLoadBalancer(a, opts))
}

/**
 * A collection of arguments for invoking getLoadBalancer.
 */
export interface GetLoadBalancerOutputArgs {
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    withSelector?: pulumi.Input<string>;
}
