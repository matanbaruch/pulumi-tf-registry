// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LoadBalancerTarget extends pulumi.CustomResource {
    /**
     * Get an existing LoadBalancerTarget resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadBalancerTargetState, opts?: pulumi.CustomResourceOptions): LoadBalancerTarget {
        return new LoadBalancerTarget(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'hcloud:index/loadBalancerTarget:LoadBalancerTarget';

    /**
     * Returns true if the given object is an instance of LoadBalancerTarget.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LoadBalancerTarget {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoadBalancerTarget.__pulumiType;
    }

    public readonly ip!: pulumi.Output<string | undefined>;
    public readonly labelSelector!: pulumi.Output<string | undefined>;
    public readonly loadBalancerId!: pulumi.Output<number>;
    public readonly serverId!: pulumi.Output<number | undefined>;
    public readonly type!: pulumi.Output<string>;
    public readonly usePrivateIp!: pulumi.Output<boolean>;

    /**
     * Create a LoadBalancerTarget resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadBalancerTargetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoadBalancerTargetArgs | LoadBalancerTargetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoadBalancerTargetState | undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["labelSelector"] = state ? state.labelSelector : undefined;
            resourceInputs["loadBalancerId"] = state ? state.loadBalancerId : undefined;
            resourceInputs["serverId"] = state ? state.serverId : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["usePrivateIp"] = state ? state.usePrivateIp : undefined;
        } else {
            const args = argsOrState as LoadBalancerTargetArgs | undefined;
            if ((!args || args.loadBalancerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loadBalancerId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["ip"] = args ? args.ip : undefined;
            resourceInputs["labelSelector"] = args ? args.labelSelector : undefined;
            resourceInputs["loadBalancerId"] = args ? args.loadBalancerId : undefined;
            resourceInputs["serverId"] = args ? args.serverId : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["usePrivateIp"] = args ? args.usePrivateIp : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LoadBalancerTarget.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LoadBalancerTarget resources.
 */
export interface LoadBalancerTargetState {
    ip?: pulumi.Input<string>;
    labelSelector?: pulumi.Input<string>;
    loadBalancerId?: pulumi.Input<number>;
    serverId?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
    usePrivateIp?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a LoadBalancerTarget resource.
 */
export interface LoadBalancerTargetArgs {
    ip?: pulumi.Input<string>;
    labelSelector?: pulumi.Input<string>;
    loadBalancerId: pulumi.Input<number>;
    serverId?: pulumi.Input<number>;
    type: pulumi.Input<string>;
    usePrivateIp?: pulumi.Input<boolean>;
}
