// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DatacenterRack extends pulumi.CustomResource {
    /**
     * Get an existing DatacenterRack resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatacenterRackState, opts?: pulumi.CustomResourceOptions): DatacenterRack {
        return new DatacenterRack(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'apstra:index/datacenterRack:DatacenterRack';

    /**
     * Returns true if the given object is an instance of DatacenterRack.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatacenterRack {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatacenterRack.__pulumiType;
    }

    /**
     * Apstra ID of the Blueprint where the Rack should be created.
     */
    public readonly blueprintId!: pulumi.Output<string>;
    /**
     * Name of the Rack.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Graph node ID of Pod (3-stage topology) where the new rack should be created. Required only in Pod-Based (5-stage)
     * Blueprints.
     */
    public readonly podId!: pulumi.Output<string | undefined>;
    /**
     * Because this resource only manages the Rack, names of Systems and other embedded elements with names derived from the
     * Rack name are not within this resource's control. When `true` during initial Rack creation, those elements will be
     * renamed to match the `name` attribute. Subsequent changes to the `name` attribute will not affect those elements. It's a
     * create-time operation only.
     */
    public readonly rackElementsNameOneShot!: pulumi.Output<boolean | undefined>;
    /**
     * ID of the Global Catalog Rack Type design object to use as a template for this Rack.
     */
    public readonly rackTypeId!: pulumi.Output<string>;
    /**
     * Because this resource only manages the Rack, names of Systems defined within the Rack are not within this resource's
     * control. When `system_name_one_shot` is `true` during initial Rack creation, Systems within the Rack will be renamed to
     * match the rack's `name`. Subsequent modifications to the `name` attribute will not affect the names of those systems.
     * It's a create-time one-shot operation.
     *
     * @deprecated Deprecated
     */
    public readonly systemNameOneShot!: pulumi.Output<boolean | undefined>;

    /**
     * Create a DatacenterRack resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatacenterRackArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatacenterRackArgs | DatacenterRackState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatacenterRackState | undefined;
            resourceInputs["blueprintId"] = state ? state.blueprintId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["podId"] = state ? state.podId : undefined;
            resourceInputs["rackElementsNameOneShot"] = state ? state.rackElementsNameOneShot : undefined;
            resourceInputs["rackTypeId"] = state ? state.rackTypeId : undefined;
            resourceInputs["systemNameOneShot"] = state ? state.systemNameOneShot : undefined;
        } else {
            const args = argsOrState as DatacenterRackArgs | undefined;
            if ((!args || args.blueprintId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'blueprintId'");
            }
            if ((!args || args.rackTypeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rackTypeId'");
            }
            resourceInputs["blueprintId"] = args ? args.blueprintId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["podId"] = args ? args.podId : undefined;
            resourceInputs["rackElementsNameOneShot"] = args ? args.rackElementsNameOneShot : undefined;
            resourceInputs["rackTypeId"] = args ? args.rackTypeId : undefined;
            resourceInputs["systemNameOneShot"] = args ? args.systemNameOneShot : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatacenterRack.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatacenterRack resources.
 */
export interface DatacenterRackState {
    /**
     * Apstra ID of the Blueprint where the Rack should be created.
     */
    blueprintId?: pulumi.Input<string>;
    /**
     * Name of the Rack.
     */
    name?: pulumi.Input<string>;
    /**
     * Graph node ID of Pod (3-stage topology) where the new rack should be created. Required only in Pod-Based (5-stage)
     * Blueprints.
     */
    podId?: pulumi.Input<string>;
    /**
     * Because this resource only manages the Rack, names of Systems and other embedded elements with names derived from the
     * Rack name are not within this resource's control. When `true` during initial Rack creation, those elements will be
     * renamed to match the `name` attribute. Subsequent changes to the `name` attribute will not affect those elements. It's a
     * create-time operation only.
     */
    rackElementsNameOneShot?: pulumi.Input<boolean>;
    /**
     * ID of the Global Catalog Rack Type design object to use as a template for this Rack.
     */
    rackTypeId?: pulumi.Input<string>;
    /**
     * Because this resource only manages the Rack, names of Systems defined within the Rack are not within this resource's
     * control. When `system_name_one_shot` is `true` during initial Rack creation, Systems within the Rack will be renamed to
     * match the rack's `name`. Subsequent modifications to the `name` attribute will not affect the names of those systems.
     * It's a create-time one-shot operation.
     *
     * @deprecated Deprecated
     */
    systemNameOneShot?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a DatacenterRack resource.
 */
export interface DatacenterRackArgs {
    /**
     * Apstra ID of the Blueprint where the Rack should be created.
     */
    blueprintId: pulumi.Input<string>;
    /**
     * Name of the Rack.
     */
    name?: pulumi.Input<string>;
    /**
     * Graph node ID of Pod (3-stage topology) where the new rack should be created. Required only in Pod-Based (5-stage)
     * Blueprints.
     */
    podId?: pulumi.Input<string>;
    /**
     * Because this resource only manages the Rack, names of Systems and other embedded elements with names derived from the
     * Rack name are not within this resource's control. When `true` during initial Rack creation, those elements will be
     * renamed to match the `name` attribute. Subsequent changes to the `name` attribute will not affect those elements. It's a
     * create-time operation only.
     */
    rackElementsNameOneShot?: pulumi.Input<boolean>;
    /**
     * ID of the Global Catalog Rack Type design object to use as a template for this Rack.
     */
    rackTypeId: pulumi.Input<string>;
    /**
     * Because this resource only manages the Rack, names of Systems defined within the Rack are not within this resource's
     * control. When `system_name_one_shot` is `true` during initial Rack creation, Systems within the Rack will be renamed to
     * match the rack's `name`. Subsequent modifications to the `name` attribute will not affect the names of those systems.
     * It's a create-time one-shot operation.
     *
     * @deprecated Deprecated
     */
    systemNameOneShot?: pulumi.Input<boolean>;
}
