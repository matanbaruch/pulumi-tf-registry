// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class FreeformAllocationGroup extends pulumi.CustomResource {
    /**
     * Get an existing FreeformAllocationGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FreeformAllocationGroupState, opts?: pulumi.CustomResourceOptions): FreeformAllocationGroup {
        return new FreeformAllocationGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'apstra:index/freeformAllocationGroup:FreeformAllocationGroup';

    /**
     * Returns true if the given object is an instance of FreeformAllocationGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FreeformAllocationGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FreeformAllocationGroup.__pulumiType;
    }

    /**
     * Apstra Blueprint ID.
     */
    public readonly blueprintId!: pulumi.Output<string>;
    /**
     * Freeform Allocation Group name as shown in the Web UI.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * IDs of Resource Pools assigned to the allocation group
     */
    public readonly poolIds!: pulumi.Output<string[]>;
    /**
     * type of the Allocation Group, must be one of : - `asn` - `integer` - `ipv4` - `ipv6` - `vlan` - `vni`
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a FreeformAllocationGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FreeformAllocationGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FreeformAllocationGroupArgs | FreeformAllocationGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FreeformAllocationGroupState | undefined;
            resourceInputs["blueprintId"] = state ? state.blueprintId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["poolIds"] = state ? state.poolIds : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as FreeformAllocationGroupArgs | undefined;
            if ((!args || args.blueprintId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'blueprintId'");
            }
            if ((!args || args.poolIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'poolIds'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["blueprintId"] = args ? args.blueprintId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["poolIds"] = args ? args.poolIds : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FreeformAllocationGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FreeformAllocationGroup resources.
 */
export interface FreeformAllocationGroupState {
    /**
     * Apstra Blueprint ID.
     */
    blueprintId?: pulumi.Input<string>;
    /**
     * Freeform Allocation Group name as shown in the Web UI.
     */
    name?: pulumi.Input<string>;
    /**
     * IDs of Resource Pools assigned to the allocation group
     */
    poolIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * type of the Allocation Group, must be one of : - `asn` - `integer` - `ipv4` - `ipv6` - `vlan` - `vni`
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FreeformAllocationGroup resource.
 */
export interface FreeformAllocationGroupArgs {
    /**
     * Apstra Blueprint ID.
     */
    blueprintId: pulumi.Input<string>;
    /**
     * Freeform Allocation Group name as shown in the Web UI.
     */
    name?: pulumi.Input<string>;
    /**
     * IDs of Resource Pools assigned to the allocation group
     */
    poolIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * type of the Allocation Group, must be one of : - `asn` - `integer` - `ipv4` - `ipv6` - `vlan` - `vni`
     */
    type: pulumi.Input<string>;
}
