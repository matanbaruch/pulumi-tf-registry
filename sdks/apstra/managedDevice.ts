// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ManagedDevice extends pulumi.CustomResource {
    /**
     * Get an existing ManagedDevice resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagedDeviceState, opts?: pulumi.CustomResourceOptions): ManagedDevice {
        return new ManagedDevice(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'apstra:index/managedDevice:ManagedDevice';

    /**
     * Returns true if the given object is an instance of ManagedDevice.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagedDevice {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagedDevice.__pulumiType;
    }

    /**
     * Apstra ID for the Managed Device Agent.
     */
    public /*out*/ readonly agentId!: pulumi.Output<string>;
    /**
     * ID of the Agent Profile used when instantiating the Agent. An Agent Profile isrequired to specify the login credentials
     * and platform type.
     */
    public readonly agentProfileId!: pulumi.Output<string>;
    /**
     * Key which uniquely identifies a System asset. Possibly a MAC address or serial number.
     */
    public readonly deviceKey!: pulumi.Output<string | undefined>;
    /**
     * Management IP address of the system.
     */
    public readonly managementIp!: pulumi.Output<string>;
    /**
     * Indicates that an *offbox* agent should be created (required for Junos devices, default: `true`)
     */
    public readonly offBox!: pulumi.Output<boolean>;
    /**
     * Apstra ID for the System onboarded by the Managed Device Agent.
     */
    public /*out*/ readonly systemId!: pulumi.Output<string>;

    /**
     * Create a ManagedDevice resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagedDeviceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagedDeviceArgs | ManagedDeviceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagedDeviceState | undefined;
            resourceInputs["agentId"] = state ? state.agentId : undefined;
            resourceInputs["agentProfileId"] = state ? state.agentProfileId : undefined;
            resourceInputs["deviceKey"] = state ? state.deviceKey : undefined;
            resourceInputs["managementIp"] = state ? state.managementIp : undefined;
            resourceInputs["offBox"] = state ? state.offBox : undefined;
            resourceInputs["systemId"] = state ? state.systemId : undefined;
        } else {
            const args = argsOrState as ManagedDeviceArgs | undefined;
            if ((!args || args.agentProfileId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'agentProfileId'");
            }
            if ((!args || args.managementIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managementIp'");
            }
            resourceInputs["agentProfileId"] = args ? args.agentProfileId : undefined;
            resourceInputs["deviceKey"] = args ? args.deviceKey : undefined;
            resourceInputs["managementIp"] = args ? args.managementIp : undefined;
            resourceInputs["offBox"] = args ? args.offBox : undefined;
            resourceInputs["agentId"] = undefined /*out*/;
            resourceInputs["systemId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ManagedDevice.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ManagedDevice resources.
 */
export interface ManagedDeviceState {
    /**
     * Apstra ID for the Managed Device Agent.
     */
    agentId?: pulumi.Input<string>;
    /**
     * ID of the Agent Profile used when instantiating the Agent. An Agent Profile isrequired to specify the login credentials
     * and platform type.
     */
    agentProfileId?: pulumi.Input<string>;
    /**
     * Key which uniquely identifies a System asset. Possibly a MAC address or serial number.
     */
    deviceKey?: pulumi.Input<string>;
    /**
     * Management IP address of the system.
     */
    managementIp?: pulumi.Input<string>;
    /**
     * Indicates that an *offbox* agent should be created (required for Junos devices, default: `true`)
     */
    offBox?: pulumi.Input<boolean>;
    /**
     * Apstra ID for the System onboarded by the Managed Device Agent.
     */
    systemId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ManagedDevice resource.
 */
export interface ManagedDeviceArgs {
    /**
     * ID of the Agent Profile used when instantiating the Agent. An Agent Profile isrequired to specify the login credentials
     * and platform type.
     */
    agentProfileId: pulumi.Input<string>;
    /**
     * Key which uniquely identifies a System asset. Possibly a MAC address or serial number.
     */
    deviceKey?: pulumi.Input<string>;
    /**
     * Management IP address of the system.
     */
    managementIp: pulumi.Input<string>;
    /**
     * Indicates that an *offbox* agent should be created (required for Junos devices, default: `true`)
     */
    offBox?: pulumi.Input<boolean>;
}
