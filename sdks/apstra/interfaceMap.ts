// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class InterfaceMap extends pulumi.CustomResource {
    /**
     * Get an existing InterfaceMap resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InterfaceMapState, opts?: pulumi.CustomResourceOptions): InterfaceMap {
        return new InterfaceMap(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'apstra:index/interfaceMap:InterfaceMap';

    /**
     * Returns true if the given object is an instance of InterfaceMap.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InterfaceMap {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InterfaceMap.__pulumiType;
    }

    /**
     * ID of Device Profile to be mapped.
     */
    public readonly deviceProfileId!: pulumi.Output<string>;
    /**
     * Set of interface mapping info.
     */
    public readonly interfaces!: pulumi.Output<outputs.InterfaceMapInterface[]>;
    /**
     * ID of Logical Device to be mapped.
     */
    public readonly logicalDeviceId!: pulumi.Output<string>;
    /**
     * Interface Map name as displayed in the web UI
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Set of of interface mapping info detailing unused interfaces.
     */
    public /*out*/ readonly unusedInterfaces!: pulumi.Output<outputs.InterfaceMapUnusedInterface[]>;

    /**
     * Create a InterfaceMap resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InterfaceMapArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InterfaceMapArgs | InterfaceMapState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InterfaceMapState | undefined;
            resourceInputs["deviceProfileId"] = state ? state.deviceProfileId : undefined;
            resourceInputs["interfaces"] = state ? state.interfaces : undefined;
            resourceInputs["logicalDeviceId"] = state ? state.logicalDeviceId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["unusedInterfaces"] = state ? state.unusedInterfaces : undefined;
        } else {
            const args = argsOrState as InterfaceMapArgs | undefined;
            if ((!args || args.deviceProfileId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deviceProfileId'");
            }
            if ((!args || args.interfaces === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interfaces'");
            }
            if ((!args || args.logicalDeviceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logicalDeviceId'");
            }
            resourceInputs["deviceProfileId"] = args ? args.deviceProfileId : undefined;
            resourceInputs["interfaces"] = args ? args.interfaces : undefined;
            resourceInputs["logicalDeviceId"] = args ? args.logicalDeviceId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["unusedInterfaces"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InterfaceMap.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering InterfaceMap resources.
 */
export interface InterfaceMapState {
    /**
     * ID of Device Profile to be mapped.
     */
    deviceProfileId?: pulumi.Input<string>;
    /**
     * Set of interface mapping info.
     */
    interfaces?: pulumi.Input<pulumi.Input<inputs.InterfaceMapInterface>[]>;
    /**
     * ID of Logical Device to be mapped.
     */
    logicalDeviceId?: pulumi.Input<string>;
    /**
     * Interface Map name as displayed in the web UI
     */
    name?: pulumi.Input<string>;
    /**
     * Set of of interface mapping info detailing unused interfaces.
     */
    unusedInterfaces?: pulumi.Input<pulumi.Input<inputs.InterfaceMapUnusedInterface>[]>;
}

/**
 * The set of arguments for constructing a InterfaceMap resource.
 */
export interface InterfaceMapArgs {
    /**
     * ID of Device Profile to be mapped.
     */
    deviceProfileId: pulumi.Input<string>;
    /**
     * Set of interface mapping info.
     */
    interfaces: pulumi.Input<pulumi.Input<inputs.InterfaceMapInterface>[]>;
    /**
     * ID of Logical Device to be mapped.
     */
    logicalDeviceId: pulumi.Input<string>;
    /**
     * Interface Map name as displayed in the web UI
     */
    name?: pulumi.Input<string>;
}
