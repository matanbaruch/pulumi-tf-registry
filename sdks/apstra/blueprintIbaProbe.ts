// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class BlueprintIbaProbe extends pulumi.CustomResource {
    /**
     * Get an existing BlueprintIbaProbe resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BlueprintIbaProbeState, opts?: pulumi.CustomResourceOptions): BlueprintIbaProbe {
        return new BlueprintIbaProbe(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'apstra:index/blueprintIbaProbe:BlueprintIbaProbe';

    /**
     * Returns true if the given object is an instance of BlueprintIbaProbe.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BlueprintIbaProbe {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BlueprintIbaProbe.__pulumiType;
    }

    /**
     * Apstra Blueprint ID. Used to identify the Blueprint that the IBA Probe belongs to.
     */
    public readonly blueprintId!: pulumi.Output<string>;
    /**
     * Description of the IBA Probe
     */
    public /*out*/ readonly description!: pulumi.Output<string>;
    /**
     * IBA Probe Name.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Id of predefined IBA Probe
     */
    public readonly predefinedProbeId!: pulumi.Output<string | undefined>;
    /**
     * Configuration elements for the IBA Probe
     */
    public readonly probeConfig!: pulumi.Output<string | undefined>;
    /**
     * Define the probe as json. If this is present, there can be no predefined probe.
     */
    public readonly probeJson!: pulumi.Output<string | undefined>;
    /**
     * Set of names of stages in the IBA Probe
     */
    public /*out*/ readonly stages!: pulumi.Output<string[]>;

    /**
     * Create a BlueprintIbaProbe resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BlueprintIbaProbeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BlueprintIbaProbeArgs | BlueprintIbaProbeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BlueprintIbaProbeState | undefined;
            resourceInputs["blueprintId"] = state ? state.blueprintId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["predefinedProbeId"] = state ? state.predefinedProbeId : undefined;
            resourceInputs["probeConfig"] = state ? state.probeConfig : undefined;
            resourceInputs["probeJson"] = state ? state.probeJson : undefined;
            resourceInputs["stages"] = state ? state.stages : undefined;
        } else {
            const args = argsOrState as BlueprintIbaProbeArgs | undefined;
            if ((!args || args.blueprintId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'blueprintId'");
            }
            resourceInputs["blueprintId"] = args ? args.blueprintId : undefined;
            resourceInputs["predefinedProbeId"] = args ? args.predefinedProbeId : undefined;
            resourceInputs["probeConfig"] = args ? args.probeConfig : undefined;
            resourceInputs["probeJson"] = args ? args.probeJson : undefined;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["stages"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BlueprintIbaProbe.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BlueprintIbaProbe resources.
 */
export interface BlueprintIbaProbeState {
    /**
     * Apstra Blueprint ID. Used to identify the Blueprint that the IBA Probe belongs to.
     */
    blueprintId?: pulumi.Input<string>;
    /**
     * Description of the IBA Probe
     */
    description?: pulumi.Input<string>;
    /**
     * IBA Probe Name.
     */
    name?: pulumi.Input<string>;
    /**
     * Id of predefined IBA Probe
     */
    predefinedProbeId?: pulumi.Input<string>;
    /**
     * Configuration elements for the IBA Probe
     */
    probeConfig?: pulumi.Input<string>;
    /**
     * Define the probe as json. If this is present, there can be no predefined probe.
     */
    probeJson?: pulumi.Input<string>;
    /**
     * Set of names of stages in the IBA Probe
     */
    stages?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a BlueprintIbaProbe resource.
 */
export interface BlueprintIbaProbeArgs {
    /**
     * Apstra Blueprint ID. Used to identify the Blueprint that the IBA Probe belongs to.
     */
    blueprintId: pulumi.Input<string>;
    /**
     * Id of predefined IBA Probe
     */
    predefinedProbeId?: pulumi.Input<string>;
    /**
     * Configuration elements for the IBA Probe
     */
    probeConfig?: pulumi.Input<string>;
    /**
     * Define the probe as json. If this is present, there can be no predefined probe.
     */
    probeJson?: pulumi.Input<string>;
}
