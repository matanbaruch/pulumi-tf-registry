// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getRackType(args?: GetRackTypeArgs, opts?: pulumi.InvokeOptions): Promise<GetRackTypeResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("apstra:index/getRackType:getRackType", {
        "id": args.id,
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getRackType.
 */
export interface GetRackTypeArgs {
    id?: string;
    name?: string;
}

/**
 * A collection of values returned by getRackType.
 */
export interface GetRackTypeResult {
    readonly accessSwitches: {[key: string]: outputs.GetRackTypeAccessSwitches};
    readonly description: string;
    readonly fabricConnectivityDesign: string;
    readonly genericSystems: {[key: string]: outputs.GetRackTypeGenericSystems};
    readonly id: string;
    readonly leafSwitches: {[key: string]: outputs.GetRackTypeLeafSwitches};
    readonly name: string;
}
export function getRackTypeOutput(args?: GetRackTypeOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRackTypeResult> {
    return pulumi.output(args).apply((a: any) => getRackType(a, opts))
}

/**
 * A collection of arguments for invoking getRackType.
 */
export interface GetRackTypeOutputArgs {
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}
