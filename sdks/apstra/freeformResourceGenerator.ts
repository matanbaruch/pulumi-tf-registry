// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class FreeformResourceGenerator extends pulumi.CustomResource {
    /**
     * Get an existing FreeformResourceGenerator resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FreeformResourceGeneratorState, opts?: pulumi.CustomResourceOptions): FreeformResourceGenerator {
        return new FreeformResourceGenerator(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'apstra:index/freeformResourceGenerator:FreeformResourceGenerator';

    /**
     * Returns true if the given object is an instance of FreeformResourceGenerator.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FreeformResourceGenerator {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FreeformResourceGenerator.__pulumiType;
    }

    /**
     * Selects the Allocation Group, parent Resource, or Local Resource Pool from which to source generated Resources. In the
     * case of a Local Resource Pool, this value must be the name (label) of the pool. Allocation Groups and parent Resources
     * are specified by ID.
     */
    public readonly allocatedFrom!: pulumi.Output<string>;
    /**
     * Apstra Blueprint ID.
     */
    public readonly blueprintId!: pulumi.Output<string>;
    /**
     * ID of the group where Resources are generated.
     */
    public readonly containerId!: pulumi.Output<string>;
    /**
     * Freeform Resource Generator name as shown in the Web UI.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Scope is a graph query which selects target nodes for which Resources should be generated. Example: `node('system',
     * name='target', label=aeq('*prod*'))`
     */
    public readonly scope!: pulumi.Output<string>;
    /**
     * Length of the subnet for the generated Resources. Only applicable when `type` is `ipv4` or `ipv6`
     */
    public readonly subnetPrefixLen!: pulumi.Output<number | undefined>;
    /**
     * type of the Resource Generator, must be one of : - `asn` - `host_ipv4` - `host_ipv6` - `integer` - `ipv4` - `ipv6` -
     * `vlan` - `vni`
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a FreeformResourceGenerator resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FreeformResourceGeneratorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FreeformResourceGeneratorArgs | FreeformResourceGeneratorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FreeformResourceGeneratorState | undefined;
            resourceInputs["allocatedFrom"] = state ? state.allocatedFrom : undefined;
            resourceInputs["blueprintId"] = state ? state.blueprintId : undefined;
            resourceInputs["containerId"] = state ? state.containerId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["subnetPrefixLen"] = state ? state.subnetPrefixLen : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as FreeformResourceGeneratorArgs | undefined;
            if ((!args || args.allocatedFrom === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allocatedFrom'");
            }
            if ((!args || args.blueprintId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'blueprintId'");
            }
            if ((!args || args.containerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containerId'");
            }
            if ((!args || args.scope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scope'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["allocatedFrom"] = args ? args.allocatedFrom : undefined;
            resourceInputs["blueprintId"] = args ? args.blueprintId : undefined;
            resourceInputs["containerId"] = args ? args.containerId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["subnetPrefixLen"] = args ? args.subnetPrefixLen : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FreeformResourceGenerator.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FreeformResourceGenerator resources.
 */
export interface FreeformResourceGeneratorState {
    /**
     * Selects the Allocation Group, parent Resource, or Local Resource Pool from which to source generated Resources. In the
     * case of a Local Resource Pool, this value must be the name (label) of the pool. Allocation Groups and parent Resources
     * are specified by ID.
     */
    allocatedFrom?: pulumi.Input<string>;
    /**
     * Apstra Blueprint ID.
     */
    blueprintId?: pulumi.Input<string>;
    /**
     * ID of the group where Resources are generated.
     */
    containerId?: pulumi.Input<string>;
    /**
     * Freeform Resource Generator name as shown in the Web UI.
     */
    name?: pulumi.Input<string>;
    /**
     * Scope is a graph query which selects target nodes for which Resources should be generated. Example: `node('system',
     * name='target', label=aeq('*prod*'))`
     */
    scope?: pulumi.Input<string>;
    /**
     * Length of the subnet for the generated Resources. Only applicable when `type` is `ipv4` or `ipv6`
     */
    subnetPrefixLen?: pulumi.Input<number>;
    /**
     * type of the Resource Generator, must be one of : - `asn` - `host_ipv4` - `host_ipv6` - `integer` - `ipv4` - `ipv6` -
     * `vlan` - `vni`
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FreeformResourceGenerator resource.
 */
export interface FreeformResourceGeneratorArgs {
    /**
     * Selects the Allocation Group, parent Resource, or Local Resource Pool from which to source generated Resources. In the
     * case of a Local Resource Pool, this value must be the name (label) of the pool. Allocation Groups and parent Resources
     * are specified by ID.
     */
    allocatedFrom: pulumi.Input<string>;
    /**
     * Apstra Blueprint ID.
     */
    blueprintId: pulumi.Input<string>;
    /**
     * ID of the group where Resources are generated.
     */
    containerId: pulumi.Input<string>;
    /**
     * Freeform Resource Generator name as shown in the Web UI.
     */
    name?: pulumi.Input<string>;
    /**
     * Scope is a graph query which selects target nodes for which Resources should be generated. Example: `node('system',
     * name='target', label=aeq('*prod*'))`
     */
    scope: pulumi.Input<string>;
    /**
     * Length of the subnet for the generated Resources. Only applicable when `type` is `ipv4` or `ipv6`
     */
    subnetPrefixLen?: pulumi.Input<number>;
    /**
     * type of the Resource Generator, must be one of : - `asn` - `host_ipv4` - `host_ipv6` - `integer` - `ipv4` - `ipv6` -
     * `vlan` - `vni`
     */
    type: pulumi.Input<string>;
}
