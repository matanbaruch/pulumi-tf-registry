// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class FreeformResource extends pulumi.CustomResource {
    /**
     * Get an existing FreeformResource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FreeformResourceState, opts?: pulumi.CustomResourceOptions): FreeformResource {
        return new FreeformResource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'apstra:index/freeformResource:FreeformResource';

    /**
     * Returns true if the given object is an instance of FreeformResource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FreeformResource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FreeformResource.__pulumiType;
    }

    /**
     * ID of the node to be used as a source for this resource. This could be an ID of resource allocation group or another
     * resource (in case of IP or Host IP allocations). This also can be empty. In that case it is required that value for this
     * resource is provided by the user.
     */
    public readonly allocatedFrom!: pulumi.Output<string | undefined>;
    /**
     * Set of node IDs to which the resource is assigned
     */
    public readonly assignedTos!: pulumi.Output<string[] | undefined>;
    /**
     * Apstra Blueprint ID.
     */
    public readonly blueprintId!: pulumi.Output<string>;
    /**
     * ID of the Generator that created Resource Allocation Group. Always `null` because groups created via resource
     * declaration were not generated.
     */
    public /*out*/ readonly generatorId!: pulumi.Output<string>;
    /**
     * Group the Resource belongs to.
     */
    public readonly groupId!: pulumi.Output<string>;
    /**
     * Value used by integer type resources (`asn`, `integer`, `vlan`, `vni`). Also used by IP prefix resources (`ipv4` and
     * `ipv6`) to indicate the required prefix size for automatic allocations from another object or a resource pool.
     */
    public readonly integerValue!: pulumi.Output<number>;
    /**
     * Value used by resources with type `ipv4` or `host_ipv4`. Must be CIDR notation.
     */
    public readonly ipv4Value!: pulumi.Output<string>;
    /**
     * Value used by resources with type `ipv6` or `host_ipv6`. Must be CIDR notation.
     */
    public readonly ipv6Value!: pulumi.Output<string>;
    /**
     * Freeform Resource name as shown in the Web UI.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * type of the Resource, must be one of : - `asn` - `host_ipv4` - `host_ipv6` - `integer` - `ipv4` - `ipv6` - `vlan` -
     * `vni`
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a FreeformResource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FreeformResourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FreeformResourceArgs | FreeformResourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FreeformResourceState | undefined;
            resourceInputs["allocatedFrom"] = state ? state.allocatedFrom : undefined;
            resourceInputs["assignedTos"] = state ? state.assignedTos : undefined;
            resourceInputs["blueprintId"] = state ? state.blueprintId : undefined;
            resourceInputs["generatorId"] = state ? state.generatorId : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["integerValue"] = state ? state.integerValue : undefined;
            resourceInputs["ipv4Value"] = state ? state.ipv4Value : undefined;
            resourceInputs["ipv6Value"] = state ? state.ipv6Value : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as FreeformResourceArgs | undefined;
            if ((!args || args.blueprintId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'blueprintId'");
            }
            if ((!args || args.groupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["allocatedFrom"] = args ? args.allocatedFrom : undefined;
            resourceInputs["assignedTos"] = args ? args.assignedTos : undefined;
            resourceInputs["blueprintId"] = args ? args.blueprintId : undefined;
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["integerValue"] = args ? args.integerValue : undefined;
            resourceInputs["ipv4Value"] = args ? args.ipv4Value : undefined;
            resourceInputs["ipv6Value"] = args ? args.ipv6Value : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["generatorId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FreeformResource.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FreeformResource resources.
 */
export interface FreeformResourceState {
    /**
     * ID of the node to be used as a source for this resource. This could be an ID of resource allocation group or another
     * resource (in case of IP or Host IP allocations). This also can be empty. In that case it is required that value for this
     * resource is provided by the user.
     */
    allocatedFrom?: pulumi.Input<string>;
    /**
     * Set of node IDs to which the resource is assigned
     */
    assignedTos?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Apstra Blueprint ID.
     */
    blueprintId?: pulumi.Input<string>;
    /**
     * ID of the Generator that created Resource Allocation Group. Always `null` because groups created via resource
     * declaration were not generated.
     */
    generatorId?: pulumi.Input<string>;
    /**
     * Group the Resource belongs to.
     */
    groupId?: pulumi.Input<string>;
    /**
     * Value used by integer type resources (`asn`, `integer`, `vlan`, `vni`). Also used by IP prefix resources (`ipv4` and
     * `ipv6`) to indicate the required prefix size for automatic allocations from another object or a resource pool.
     */
    integerValue?: pulumi.Input<number>;
    /**
     * Value used by resources with type `ipv4` or `host_ipv4`. Must be CIDR notation.
     */
    ipv4Value?: pulumi.Input<string>;
    /**
     * Value used by resources with type `ipv6` or `host_ipv6`. Must be CIDR notation.
     */
    ipv6Value?: pulumi.Input<string>;
    /**
     * Freeform Resource name as shown in the Web UI.
     */
    name?: pulumi.Input<string>;
    /**
     * type of the Resource, must be one of : - `asn` - `host_ipv4` - `host_ipv6` - `integer` - `ipv4` - `ipv6` - `vlan` -
     * `vni`
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FreeformResource resource.
 */
export interface FreeformResourceArgs {
    /**
     * ID of the node to be used as a source for this resource. This could be an ID of resource allocation group or another
     * resource (in case of IP or Host IP allocations). This also can be empty. In that case it is required that value for this
     * resource is provided by the user.
     */
    allocatedFrom?: pulumi.Input<string>;
    /**
     * Set of node IDs to which the resource is assigned
     */
    assignedTos?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Apstra Blueprint ID.
     */
    blueprintId: pulumi.Input<string>;
    /**
     * Group the Resource belongs to.
     */
    groupId: pulumi.Input<string>;
    /**
     * Value used by integer type resources (`asn`, `integer`, `vlan`, `vni`). Also used by IP prefix resources (`ipv4` and
     * `ipv6`) to indicate the required prefix size for automatic allocations from another object or a resource pool.
     */
    integerValue?: pulumi.Input<number>;
    /**
     * Value used by resources with type `ipv4` or `host_ipv4`. Must be CIDR notation.
     */
    ipv4Value?: pulumi.Input<string>;
    /**
     * Value used by resources with type `ipv6` or `host_ipv6`. Must be CIDR notation.
     */
    ipv6Value?: pulumi.Input<string>;
    /**
     * Freeform Resource name as shown in the Web UI.
     */
    name?: pulumi.Input<string>;
    /**
     * type of the Resource, must be one of : - `asn` - `host_ipv4` - `host_ipv6` - `integer` - `ipv4` - `ipv6` - `vlan` -
     * `vni`
     */
    type: pulumi.Input<string>;
}
