// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatacenterGenericSystem extends pulumi.CustomResource {
    /**
     * Get an existing DatacenterGenericSystem resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatacenterGenericSystemState, opts?: pulumi.CustomResourceOptions): DatacenterGenericSystem {
        return new DatacenterGenericSystem(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'apstra:index/datacenterGenericSystem:DatacenterGenericSystem';

    /**
     * Returns true if the given object is an instance of DatacenterGenericSystem.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatacenterGenericSystem {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatacenterGenericSystem.__pulumiType;
    }

    public readonly asn!: pulumi.Output<number | undefined>;
    /**
     * Apstra Blueprint ID.
     */
    public readonly blueprintId!: pulumi.Output<string>;
    /**
     * When `true`, Connectivity Templates associated with this Generic System will be automatically cleared in a variety of
     * circumstances where they would ordinarily block Generic System changes, including: - Deletion of the Generic System -
     * Deletion of a Generic System Link or LAG interface - Orphaning a LAG interface by reassigning all of its member links to
     * new roles by changing their `group_label` attribute
     */
    public readonly clearCtsOnDestroy!: pulumi.Output<boolean | undefined>;
    /**
     * Set the Apstra Deploy Mode for this Generic System. Default: `deploy`
     */
    public readonly deployMode!: pulumi.Output<string>;
    /**
     * Set `true` to create an External Generic System
     */
    public readonly external!: pulumi.Output<boolean>;
    /**
     * System hostname.
     */
    public readonly hostname!: pulumi.Output<string>;
    /**
     * Generic System link details. Note that tagging Links requires Apstra 4.1.2 or newer.
     */
    public readonly links!: pulumi.Output<outputs.DatacenterGenericSystemLink[]>;
    /**
     * IPv4 address of loopback interface in CIDR notation
     */
    public readonly loopbackIpv4!: pulumi.Output<string | undefined>;
    /**
     * IPv6 address of loopback interface in CIDR notation
     */
    public readonly loopbackIpv6!: pulumi.Output<string | undefined>;
    /**
     * Name displayed in the Apstra web UI.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Omit this attribute to allow any available port-channel to be used. In Apstra version 4.1.2 and earlier, all port
     * channel min/max constraints had to be unique per blueprint. Port channel ranges could not overlap. This requirement has
     * been relaxed, and now they need only be unique per system.
     */
    public readonly portChannelIdMax!: pulumi.Output<number>;
    /**
     * Omit this attribute to allow any available port-channel to be used. In Apstra version 4.1.2 and earlier, all port
     * channel min/max constraints had to be unique per blueprint. Port channel ranges could not overlap. This requirement has
     * been relaxed, and now they need only be unique per system.
     */
    public readonly portChannelIdMin!: pulumi.Output<number>;
    /**
     * Tag labels to be applied to this Generic System. If a Tag doesn't exist in the Blueprint it will be created
     * automatically.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;

    /**
     * Create a DatacenterGenericSystem resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatacenterGenericSystemArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatacenterGenericSystemArgs | DatacenterGenericSystemState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatacenterGenericSystemState | undefined;
            resourceInputs["asn"] = state ? state.asn : undefined;
            resourceInputs["blueprintId"] = state ? state.blueprintId : undefined;
            resourceInputs["clearCtsOnDestroy"] = state ? state.clearCtsOnDestroy : undefined;
            resourceInputs["deployMode"] = state ? state.deployMode : undefined;
            resourceInputs["external"] = state ? state.external : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["links"] = state ? state.links : undefined;
            resourceInputs["loopbackIpv4"] = state ? state.loopbackIpv4 : undefined;
            resourceInputs["loopbackIpv6"] = state ? state.loopbackIpv6 : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["portChannelIdMax"] = state ? state.portChannelIdMax : undefined;
            resourceInputs["portChannelIdMin"] = state ? state.portChannelIdMin : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as DatacenterGenericSystemArgs | undefined;
            if ((!args || args.blueprintId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'blueprintId'");
            }
            if ((!args || args.links === undefined) && !opts.urn) {
                throw new Error("Missing required property 'links'");
            }
            resourceInputs["asn"] = args ? args.asn : undefined;
            resourceInputs["blueprintId"] = args ? args.blueprintId : undefined;
            resourceInputs["clearCtsOnDestroy"] = args ? args.clearCtsOnDestroy : undefined;
            resourceInputs["deployMode"] = args ? args.deployMode : undefined;
            resourceInputs["external"] = args ? args.external : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["links"] = args ? args.links : undefined;
            resourceInputs["loopbackIpv4"] = args ? args.loopbackIpv4 : undefined;
            resourceInputs["loopbackIpv6"] = args ? args.loopbackIpv6 : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["portChannelIdMax"] = args ? args.portChannelIdMax : undefined;
            resourceInputs["portChannelIdMin"] = args ? args.portChannelIdMin : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatacenterGenericSystem.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatacenterGenericSystem resources.
 */
export interface DatacenterGenericSystemState {
    asn?: pulumi.Input<number>;
    /**
     * Apstra Blueprint ID.
     */
    blueprintId?: pulumi.Input<string>;
    /**
     * When `true`, Connectivity Templates associated with this Generic System will be automatically cleared in a variety of
     * circumstances where they would ordinarily block Generic System changes, including: - Deletion of the Generic System -
     * Deletion of a Generic System Link or LAG interface - Orphaning a LAG interface by reassigning all of its member links to
     * new roles by changing their `group_label` attribute
     */
    clearCtsOnDestroy?: pulumi.Input<boolean>;
    /**
     * Set the Apstra Deploy Mode for this Generic System. Default: `deploy`
     */
    deployMode?: pulumi.Input<string>;
    /**
     * Set `true` to create an External Generic System
     */
    external?: pulumi.Input<boolean>;
    /**
     * System hostname.
     */
    hostname?: pulumi.Input<string>;
    /**
     * Generic System link details. Note that tagging Links requires Apstra 4.1.2 or newer.
     */
    links?: pulumi.Input<pulumi.Input<inputs.DatacenterGenericSystemLink>[]>;
    /**
     * IPv4 address of loopback interface in CIDR notation
     */
    loopbackIpv4?: pulumi.Input<string>;
    /**
     * IPv6 address of loopback interface in CIDR notation
     */
    loopbackIpv6?: pulumi.Input<string>;
    /**
     * Name displayed in the Apstra web UI.
     */
    name?: pulumi.Input<string>;
    /**
     * Omit this attribute to allow any available port-channel to be used. In Apstra version 4.1.2 and earlier, all port
     * channel min/max constraints had to be unique per blueprint. Port channel ranges could not overlap. This requirement has
     * been relaxed, and now they need only be unique per system.
     */
    portChannelIdMax?: pulumi.Input<number>;
    /**
     * Omit this attribute to allow any available port-channel to be used. In Apstra version 4.1.2 and earlier, all port
     * channel min/max constraints had to be unique per blueprint. Port channel ranges could not overlap. This requirement has
     * been relaxed, and now they need only be unique per system.
     */
    portChannelIdMin?: pulumi.Input<number>;
    /**
     * Tag labels to be applied to this Generic System. If a Tag doesn't exist in the Blueprint it will be created
     * automatically.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a DatacenterGenericSystem resource.
 */
export interface DatacenterGenericSystemArgs {
    asn?: pulumi.Input<number>;
    /**
     * Apstra Blueprint ID.
     */
    blueprintId: pulumi.Input<string>;
    /**
     * When `true`, Connectivity Templates associated with this Generic System will be automatically cleared in a variety of
     * circumstances where they would ordinarily block Generic System changes, including: - Deletion of the Generic System -
     * Deletion of a Generic System Link or LAG interface - Orphaning a LAG interface by reassigning all of its member links to
     * new roles by changing their `group_label` attribute
     */
    clearCtsOnDestroy?: pulumi.Input<boolean>;
    /**
     * Set the Apstra Deploy Mode for this Generic System. Default: `deploy`
     */
    deployMode?: pulumi.Input<string>;
    /**
     * Set `true` to create an External Generic System
     */
    external?: pulumi.Input<boolean>;
    /**
     * System hostname.
     */
    hostname?: pulumi.Input<string>;
    /**
     * Generic System link details. Note that tagging Links requires Apstra 4.1.2 or newer.
     */
    links: pulumi.Input<pulumi.Input<inputs.DatacenterGenericSystemLink>[]>;
    /**
     * IPv4 address of loopback interface in CIDR notation
     */
    loopbackIpv4?: pulumi.Input<string>;
    /**
     * IPv6 address of loopback interface in CIDR notation
     */
    loopbackIpv6?: pulumi.Input<string>;
    /**
     * Name displayed in the Apstra web UI.
     */
    name?: pulumi.Input<string>;
    /**
     * Omit this attribute to allow any available port-channel to be used. In Apstra version 4.1.2 and earlier, all port
     * channel min/max constraints had to be unique per blueprint. Port channel ranges could not overlap. This requirement has
     * been relaxed, and now they need only be unique per system.
     */
    portChannelIdMax?: pulumi.Input<number>;
    /**
     * Omit this attribute to allow any available port-channel to be used. In Apstra version 4.1.2 and earlier, all port
     * channel min/max constraints had to be unique per blueprint. Port channel ranges could not overlap. This requirement has
     * been relaxed, and now they need only be unique per system.
     */
    portChannelIdMin?: pulumi.Input<number>;
    /**
     * Tag labels to be applied to this Generic System. If a Tag doesn't exist in the Blueprint it will be created
     * automatically.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
