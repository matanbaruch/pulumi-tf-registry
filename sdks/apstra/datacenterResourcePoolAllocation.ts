// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DatacenterResourcePoolAllocation extends pulumi.CustomResource {
    /**
     * Get an existing DatacenterResourcePoolAllocation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatacenterResourcePoolAllocationState, opts?: pulumi.CustomResourceOptions): DatacenterResourcePoolAllocation {
        return new DatacenterResourcePoolAllocation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'apstra:index/datacenterResourcePoolAllocation:DatacenterResourcePoolAllocation';

    /**
     * Returns true if the given object is an instance of DatacenterResourcePoolAllocation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatacenterResourcePoolAllocation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatacenterResourcePoolAllocation.__pulumiType;
    }

    /**
     * Apstra ID of the Blueprint to which the Resource Pool should be allocated.
     */
    public readonly blueprintId!: pulumi.Output<string>;
    /**
     * Apstra IDs of the Resource Pools to be allocated to the given Blueprint role.
     */
    public readonly poolIds!: pulumi.Output<string[]>;
    /**
     * Fabric Role (Apstra Resource Group Name) must be one of: - access_asns - access_l3_peer_link_link_ips -
     * access_loopback_ips - evpn_l3_vnis - generic_asns - generic_loopback_ips - generic_loopback_ips_ipv6 - leaf_asns -
     * leaf_l3_peer_links - leaf_l3_peer_links_ipv6 - leaf_leaf_link_ips - leaf_loopback_ips - leaf_loopback_ips_ipv6 -
     * mlag_domain_svi_subnets - mlag_domain_svi_subnets_ipv6 - spine_asns - spine_leaf_link_ips - spine_leaf_link_ips_ipv6 -
     * spine_loopback_ips - spine_loopback_ips_ipv6 - spine_superspine_link_ips - spine_superspine_link_ips_ipv6 -
     * superspine_asns - superspine_loopback_ips - superspine_loopback_ips_ipv6 - to_generic_link_ips -
     * to_generic_link_ips_ipv6 - virtual_network_svi_subnets - virtual_network_svi_subnets_ipv6 - vni_virtual_network_ids -
     * vtep_ips
     */
    public readonly role!: pulumi.Output<string>;
    /**
     * Used to allocate a Resource Pool to a `role` associated with specific Routing Zone within a Blueprint, rather than to a
     * fabric-wide `role`. `leaf_loopback_ips` and `virtual_network_svi_subnets` are examples of roles which can be allocaated
     * to a specific Routing Zone. When omitted, the specified Resource Pools are allocated to a fabric-wide `role`.
     */
    public readonly routingZoneId!: pulumi.Output<string | undefined>;

    /**
     * Create a DatacenterResourcePoolAllocation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatacenterResourcePoolAllocationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatacenterResourcePoolAllocationArgs | DatacenterResourcePoolAllocationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatacenterResourcePoolAllocationState | undefined;
            resourceInputs["blueprintId"] = state ? state.blueprintId : undefined;
            resourceInputs["poolIds"] = state ? state.poolIds : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["routingZoneId"] = state ? state.routingZoneId : undefined;
        } else {
            const args = argsOrState as DatacenterResourcePoolAllocationArgs | undefined;
            if ((!args || args.blueprintId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'blueprintId'");
            }
            if ((!args || args.poolIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'poolIds'");
            }
            if ((!args || args.role === undefined) && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            resourceInputs["blueprintId"] = args ? args.blueprintId : undefined;
            resourceInputs["poolIds"] = args ? args.poolIds : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["routingZoneId"] = args ? args.routingZoneId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatacenterResourcePoolAllocation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatacenterResourcePoolAllocation resources.
 */
export interface DatacenterResourcePoolAllocationState {
    /**
     * Apstra ID of the Blueprint to which the Resource Pool should be allocated.
     */
    blueprintId?: pulumi.Input<string>;
    /**
     * Apstra IDs of the Resource Pools to be allocated to the given Blueprint role.
     */
    poolIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Fabric Role (Apstra Resource Group Name) must be one of: - access_asns - access_l3_peer_link_link_ips -
     * access_loopback_ips - evpn_l3_vnis - generic_asns - generic_loopback_ips - generic_loopback_ips_ipv6 - leaf_asns -
     * leaf_l3_peer_links - leaf_l3_peer_links_ipv6 - leaf_leaf_link_ips - leaf_loopback_ips - leaf_loopback_ips_ipv6 -
     * mlag_domain_svi_subnets - mlag_domain_svi_subnets_ipv6 - spine_asns - spine_leaf_link_ips - spine_leaf_link_ips_ipv6 -
     * spine_loopback_ips - spine_loopback_ips_ipv6 - spine_superspine_link_ips - spine_superspine_link_ips_ipv6 -
     * superspine_asns - superspine_loopback_ips - superspine_loopback_ips_ipv6 - to_generic_link_ips -
     * to_generic_link_ips_ipv6 - virtual_network_svi_subnets - virtual_network_svi_subnets_ipv6 - vni_virtual_network_ids -
     * vtep_ips
     */
    role?: pulumi.Input<string>;
    /**
     * Used to allocate a Resource Pool to a `role` associated with specific Routing Zone within a Blueprint, rather than to a
     * fabric-wide `role`. `leaf_loopback_ips` and `virtual_network_svi_subnets` are examples of roles which can be allocaated
     * to a specific Routing Zone. When omitted, the specified Resource Pools are allocated to a fabric-wide `role`.
     */
    routingZoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DatacenterResourcePoolAllocation resource.
 */
export interface DatacenterResourcePoolAllocationArgs {
    /**
     * Apstra ID of the Blueprint to which the Resource Pool should be allocated.
     */
    blueprintId: pulumi.Input<string>;
    /**
     * Apstra IDs of the Resource Pools to be allocated to the given Blueprint role.
     */
    poolIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Fabric Role (Apstra Resource Group Name) must be one of: - access_asns - access_l3_peer_link_link_ips -
     * access_loopback_ips - evpn_l3_vnis - generic_asns - generic_loopback_ips - generic_loopback_ips_ipv6 - leaf_asns -
     * leaf_l3_peer_links - leaf_l3_peer_links_ipv6 - leaf_leaf_link_ips - leaf_loopback_ips - leaf_loopback_ips_ipv6 -
     * mlag_domain_svi_subnets - mlag_domain_svi_subnets_ipv6 - spine_asns - spine_leaf_link_ips - spine_leaf_link_ips_ipv6 -
     * spine_loopback_ips - spine_loopback_ips_ipv6 - spine_superspine_link_ips - spine_superspine_link_ips_ipv6 -
     * superspine_asns - superspine_loopback_ips - superspine_loopback_ips_ipv6 - to_generic_link_ips -
     * to_generic_link_ips_ipv6 - virtual_network_svi_subnets - virtual_network_svi_subnets_ipv6 - vni_virtual_network_ids -
     * vtep_ips
     */
    role: pulumi.Input<string>;
    /**
     * Used to allocate a Resource Pool to a `role` associated with specific Routing Zone within a Blueprint, rather than to a
     * fabric-wide `role`. `leaf_loopback_ips` and `virtual_network_svi_subnets` are examples of roles which can be allocaated
     * to a specific Routing Zone. When omitted, the specified Resource Pools are allocated to a fabric-wide `role`.
     */
    routingZoneId?: pulumi.Input<string>;
}
