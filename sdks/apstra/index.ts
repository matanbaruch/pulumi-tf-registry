// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AgentProfileArgs, AgentProfileState } from "./agentProfile";
export type AgentProfile = import("./agentProfile").AgentProfile;
export const AgentProfile: typeof import("./agentProfile").AgentProfile = null as any;
utilities.lazyLoad(exports, ["AgentProfile"], () => require("./agentProfile"));

export { AsnPoolArgs, AsnPoolState } from "./asnPool";
export type AsnPool = import("./asnPool").AsnPool;
export const AsnPool: typeof import("./asnPool").AsnPool = null as any;
utilities.lazyLoad(exports, ["AsnPool"], () => require("./asnPool"));

export { BlueprintDeploymentArgs, BlueprintDeploymentState } from "./blueprintDeployment";
export type BlueprintDeployment = import("./blueprintDeployment").BlueprintDeployment;
export const BlueprintDeployment: typeof import("./blueprintDeployment").BlueprintDeployment = null as any;
utilities.lazyLoad(exports, ["BlueprintDeployment"], () => require("./blueprintDeployment"));

export { BlueprintIbaDashboardArgs, BlueprintIbaDashboardState } from "./blueprintIbaDashboard";
export type BlueprintIbaDashboard = import("./blueprintIbaDashboard").BlueprintIbaDashboard;
export const BlueprintIbaDashboard: typeof import("./blueprintIbaDashboard").BlueprintIbaDashboard = null as any;
utilities.lazyLoad(exports, ["BlueprintIbaDashboard"], () => require("./blueprintIbaDashboard"));

export { BlueprintIbaProbeArgs, BlueprintIbaProbeState } from "./blueprintIbaProbe";
export type BlueprintIbaProbe = import("./blueprintIbaProbe").BlueprintIbaProbe;
export const BlueprintIbaProbe: typeof import("./blueprintIbaProbe").BlueprintIbaProbe = null as any;
utilities.lazyLoad(exports, ["BlueprintIbaProbe"], () => require("./blueprintIbaProbe"));

export { BlueprintIbaWidgetArgs, BlueprintIbaWidgetState } from "./blueprintIbaWidget";
export type BlueprintIbaWidget = import("./blueprintIbaWidget").BlueprintIbaWidget;
export const BlueprintIbaWidget: typeof import("./blueprintIbaWidget").BlueprintIbaWidget = null as any;
utilities.lazyLoad(exports, ["BlueprintIbaWidget"], () => require("./blueprintIbaWidget"));

export { ConfigletArgs, ConfigletState } from "./configlet";
export type Configlet = import("./configlet").Configlet;
export const Configlet: typeof import("./configlet").Configlet = null as any;
utilities.lazyLoad(exports, ["Configlet"], () => require("./configlet"));

export { DatacenterBlueprintArgs, DatacenterBlueprintState } from "./datacenterBlueprint";
export type DatacenterBlueprint = import("./datacenterBlueprint").DatacenterBlueprint;
export const DatacenterBlueprint: typeof import("./datacenterBlueprint").DatacenterBlueprint = null as any;
utilities.lazyLoad(exports, ["DatacenterBlueprint"], () => require("./datacenterBlueprint"));

export { DatacenterConfigletArgs, DatacenterConfigletState } from "./datacenterConfiglet";
export type DatacenterConfiglet = import("./datacenterConfiglet").DatacenterConfiglet;
export const DatacenterConfiglet: typeof import("./datacenterConfiglet").DatacenterConfiglet = null as any;
utilities.lazyLoad(exports, ["DatacenterConfiglet"], () => require("./datacenterConfiglet"));

export { DatacenterConnectivityTemplateArgs, DatacenterConnectivityTemplateState } from "./datacenterConnectivityTemplate";
export type DatacenterConnectivityTemplate = import("./datacenterConnectivityTemplate").DatacenterConnectivityTemplate;
export const DatacenterConnectivityTemplate: typeof import("./datacenterConnectivityTemplate").DatacenterConnectivityTemplate = null as any;
utilities.lazyLoad(exports, ["DatacenterConnectivityTemplate"], () => require("./datacenterConnectivityTemplate"));

export { DatacenterConnectivityTemplateAssignmentArgs, DatacenterConnectivityTemplateAssignmentState } from "./datacenterConnectivityTemplateAssignment";
export type DatacenterConnectivityTemplateAssignment = import("./datacenterConnectivityTemplateAssignment").DatacenterConnectivityTemplateAssignment;
export const DatacenterConnectivityTemplateAssignment: typeof import("./datacenterConnectivityTemplateAssignment").DatacenterConnectivityTemplateAssignment = null as any;
utilities.lazyLoad(exports, ["DatacenterConnectivityTemplateAssignment"], () => require("./datacenterConnectivityTemplateAssignment"));

export { DatacenterConnectivityTemplateAssignmentsArgs, DatacenterConnectivityTemplateAssignmentsState } from "./datacenterConnectivityTemplateAssignments";
export type DatacenterConnectivityTemplateAssignments = import("./datacenterConnectivityTemplateAssignments").DatacenterConnectivityTemplateAssignments;
export const DatacenterConnectivityTemplateAssignments: typeof import("./datacenterConnectivityTemplateAssignments").DatacenterConnectivityTemplateAssignments = null as any;
utilities.lazyLoad(exports, ["DatacenterConnectivityTemplateAssignments"], () => require("./datacenterConnectivityTemplateAssignments"));

export { DatacenterConnectivityTemplateInterfaceArgs, DatacenterConnectivityTemplateInterfaceState } from "./datacenterConnectivityTemplateInterface";
export type DatacenterConnectivityTemplateInterface = import("./datacenterConnectivityTemplateInterface").DatacenterConnectivityTemplateInterface;
export const DatacenterConnectivityTemplateInterface: typeof import("./datacenterConnectivityTemplateInterface").DatacenterConnectivityTemplateInterface = null as any;
utilities.lazyLoad(exports, ["DatacenterConnectivityTemplateInterface"], () => require("./datacenterConnectivityTemplateInterface"));

export { DatacenterConnectivityTemplateLoopbackArgs, DatacenterConnectivityTemplateLoopbackState } from "./datacenterConnectivityTemplateLoopback";
export type DatacenterConnectivityTemplateLoopback = import("./datacenterConnectivityTemplateLoopback").DatacenterConnectivityTemplateLoopback;
export const DatacenterConnectivityTemplateLoopback: typeof import("./datacenterConnectivityTemplateLoopback").DatacenterConnectivityTemplateLoopback = null as any;
utilities.lazyLoad(exports, ["DatacenterConnectivityTemplateLoopback"], () => require("./datacenterConnectivityTemplateLoopback"));

export { DatacenterConnectivityTemplateSviArgs, DatacenterConnectivityTemplateSviState } from "./datacenterConnectivityTemplateSvi";
export type DatacenterConnectivityTemplateSvi = import("./datacenterConnectivityTemplateSvi").DatacenterConnectivityTemplateSvi;
export const DatacenterConnectivityTemplateSvi: typeof import("./datacenterConnectivityTemplateSvi").DatacenterConnectivityTemplateSvi = null as any;
utilities.lazyLoad(exports, ["DatacenterConnectivityTemplateSvi"], () => require("./datacenterConnectivityTemplateSvi"));

export { DatacenterConnectivityTemplateSystemArgs, DatacenterConnectivityTemplateSystemState } from "./datacenterConnectivityTemplateSystem";
export type DatacenterConnectivityTemplateSystem = import("./datacenterConnectivityTemplateSystem").DatacenterConnectivityTemplateSystem;
export const DatacenterConnectivityTemplateSystem: typeof import("./datacenterConnectivityTemplateSystem").DatacenterConnectivityTemplateSystem = null as any;
utilities.lazyLoad(exports, ["DatacenterConnectivityTemplateSystem"], () => require("./datacenterConnectivityTemplateSystem"));

export { DatacenterConnectivityTemplatesAssignmentArgs, DatacenterConnectivityTemplatesAssignmentState } from "./datacenterConnectivityTemplatesAssignment";
export type DatacenterConnectivityTemplatesAssignment = import("./datacenterConnectivityTemplatesAssignment").DatacenterConnectivityTemplatesAssignment;
export const DatacenterConnectivityTemplatesAssignment: typeof import("./datacenterConnectivityTemplatesAssignment").DatacenterConnectivityTemplatesAssignment = null as any;
utilities.lazyLoad(exports, ["DatacenterConnectivityTemplatesAssignment"], () => require("./datacenterConnectivityTemplatesAssignment"));

export { DatacenterDeviceAllocationArgs, DatacenterDeviceAllocationState } from "./datacenterDeviceAllocation";
export type DatacenterDeviceAllocation = import("./datacenterDeviceAllocation").DatacenterDeviceAllocation;
export const DatacenterDeviceAllocation: typeof import("./datacenterDeviceAllocation").DatacenterDeviceAllocation = null as any;
utilities.lazyLoad(exports, ["DatacenterDeviceAllocation"], () => require("./datacenterDeviceAllocation"));

export { DatacenterExternalGatewayArgs, DatacenterExternalGatewayState } from "./datacenterExternalGateway";
export type DatacenterExternalGateway = import("./datacenterExternalGateway").DatacenterExternalGateway;
export const DatacenterExternalGateway: typeof import("./datacenterExternalGateway").DatacenterExternalGateway = null as any;
utilities.lazyLoad(exports, ["DatacenterExternalGateway"], () => require("./datacenterExternalGateway"));

export { DatacenterGenericSystemArgs, DatacenterGenericSystemState } from "./datacenterGenericSystem";
export type DatacenterGenericSystem = import("./datacenterGenericSystem").DatacenterGenericSystem;
export const DatacenterGenericSystem: typeof import("./datacenterGenericSystem").DatacenterGenericSystem = null as any;
utilities.lazyLoad(exports, ["DatacenterGenericSystem"], () => require("./datacenterGenericSystem"));

export { DatacenterIpLinkAddressingArgs, DatacenterIpLinkAddressingState } from "./datacenterIpLinkAddressing";
export type DatacenterIpLinkAddressing = import("./datacenterIpLinkAddressing").DatacenterIpLinkAddressing;
export const DatacenterIpLinkAddressing: typeof import("./datacenterIpLinkAddressing").DatacenterIpLinkAddressing = null as any;
utilities.lazyLoad(exports, ["DatacenterIpLinkAddressing"], () => require("./datacenterIpLinkAddressing"));

export { DatacenterPropertySetArgs, DatacenterPropertySetState } from "./datacenterPropertySet";
export type DatacenterPropertySet = import("./datacenterPropertySet").DatacenterPropertySet;
export const DatacenterPropertySet: typeof import("./datacenterPropertySet").DatacenterPropertySet = null as any;
utilities.lazyLoad(exports, ["DatacenterPropertySet"], () => require("./datacenterPropertySet"));

export { DatacenterRackArgs, DatacenterRackState } from "./datacenterRack";
export type DatacenterRack = import("./datacenterRack").DatacenterRack;
export const DatacenterRack: typeof import("./datacenterRack").DatacenterRack = null as any;
utilities.lazyLoad(exports, ["DatacenterRack"], () => require("./datacenterRack"));

export { DatacenterResourcePoolAllocationArgs, DatacenterResourcePoolAllocationState } from "./datacenterResourcePoolAllocation";
export type DatacenterResourcePoolAllocation = import("./datacenterResourcePoolAllocation").DatacenterResourcePoolAllocation;
export const DatacenterResourcePoolAllocation: typeof import("./datacenterResourcePoolAllocation").DatacenterResourcePoolAllocation = null as any;
utilities.lazyLoad(exports, ["DatacenterResourcePoolAllocation"], () => require("./datacenterResourcePoolAllocation"));

export { DatacenterRoutingPolicyArgs, DatacenterRoutingPolicyState } from "./datacenterRoutingPolicy";
export type DatacenterRoutingPolicy = import("./datacenterRoutingPolicy").DatacenterRoutingPolicy;
export const DatacenterRoutingPolicy: typeof import("./datacenterRoutingPolicy").DatacenterRoutingPolicy = null as any;
utilities.lazyLoad(exports, ["DatacenterRoutingPolicy"], () => require("./datacenterRoutingPolicy"));

export { DatacenterRoutingZoneArgs, DatacenterRoutingZoneState } from "./datacenterRoutingZone";
export type DatacenterRoutingZone = import("./datacenterRoutingZone").DatacenterRoutingZone;
export const DatacenterRoutingZone: typeof import("./datacenterRoutingZone").DatacenterRoutingZone = null as any;
utilities.lazyLoad(exports, ["DatacenterRoutingZone"], () => require("./datacenterRoutingZone"));

export { DatacenterSecurityPolicyArgs, DatacenterSecurityPolicyState } from "./datacenterSecurityPolicy";
export type DatacenterSecurityPolicy = import("./datacenterSecurityPolicy").DatacenterSecurityPolicy;
export const DatacenterSecurityPolicy: typeof import("./datacenterSecurityPolicy").DatacenterSecurityPolicy = null as any;
utilities.lazyLoad(exports, ["DatacenterSecurityPolicy"], () => require("./datacenterSecurityPolicy"));

export { DatacenterVirtualNetworkArgs, DatacenterVirtualNetworkState } from "./datacenterVirtualNetwork";
export type DatacenterVirtualNetwork = import("./datacenterVirtualNetwork").DatacenterVirtualNetwork;
export const DatacenterVirtualNetwork: typeof import("./datacenterVirtualNetwork").DatacenterVirtualNetwork = null as any;
utilities.lazyLoad(exports, ["DatacenterVirtualNetwork"], () => require("./datacenterVirtualNetwork"));

export { FreeformAllocationGroupArgs, FreeformAllocationGroupState } from "./freeformAllocationGroup";
export type FreeformAllocationGroup = import("./freeformAllocationGroup").FreeformAllocationGroup;
export const FreeformAllocationGroup: typeof import("./freeformAllocationGroup").FreeformAllocationGroup = null as any;
utilities.lazyLoad(exports, ["FreeformAllocationGroup"], () => require("./freeformAllocationGroup"));

export { FreeformBlueprintArgs, FreeformBlueprintState } from "./freeformBlueprint";
export type FreeformBlueprint = import("./freeformBlueprint").FreeformBlueprint;
export const FreeformBlueprint: typeof import("./freeformBlueprint").FreeformBlueprint = null as any;
utilities.lazyLoad(exports, ["FreeformBlueprint"], () => require("./freeformBlueprint"));

export { FreeformConfigTemplateArgs, FreeformConfigTemplateState } from "./freeformConfigTemplate";
export type FreeformConfigTemplate = import("./freeformConfigTemplate").FreeformConfigTemplate;
export const FreeformConfigTemplate: typeof import("./freeformConfigTemplate").FreeformConfigTemplate = null as any;
utilities.lazyLoad(exports, ["FreeformConfigTemplate"], () => require("./freeformConfigTemplate"));

export { FreeformDeviceProfileArgs, FreeformDeviceProfileState } from "./freeformDeviceProfile";
export type FreeformDeviceProfile = import("./freeformDeviceProfile").FreeformDeviceProfile;
export const FreeformDeviceProfile: typeof import("./freeformDeviceProfile").FreeformDeviceProfile = null as any;
utilities.lazyLoad(exports, ["FreeformDeviceProfile"], () => require("./freeformDeviceProfile"));

export { FreeformLinkArgs, FreeformLinkState } from "./freeformLink";
export type FreeformLink = import("./freeformLink").FreeformLink;
export const FreeformLink: typeof import("./freeformLink").FreeformLink = null as any;
utilities.lazyLoad(exports, ["FreeformLink"], () => require("./freeformLink"));

export { FreeformPropertySetArgs, FreeformPropertySetState } from "./freeformPropertySet";
export type FreeformPropertySet = import("./freeformPropertySet").FreeformPropertySet;
export const FreeformPropertySet: typeof import("./freeformPropertySet").FreeformPropertySet = null as any;
utilities.lazyLoad(exports, ["FreeformPropertySet"], () => require("./freeformPropertySet"));

export { FreeformResourceArgs, FreeformResourceState } from "./freeformResource";
export type FreeformResource = import("./freeformResource").FreeformResource;
export const FreeformResource: typeof import("./freeformResource").FreeformResource = null as any;
utilities.lazyLoad(exports, ["FreeformResource"], () => require("./freeformResource"));

export { FreeformResourceGeneratorArgs, FreeformResourceGeneratorState } from "./freeformResourceGenerator";
export type FreeformResourceGenerator = import("./freeformResourceGenerator").FreeformResourceGenerator;
export const FreeformResourceGenerator: typeof import("./freeformResourceGenerator").FreeformResourceGenerator = null as any;
utilities.lazyLoad(exports, ["FreeformResourceGenerator"], () => require("./freeformResourceGenerator"));

export { FreeformResourceGroupArgs, FreeformResourceGroupState } from "./freeformResourceGroup";
export type FreeformResourceGroup = import("./freeformResourceGroup").FreeformResourceGroup;
export const FreeformResourceGroup: typeof import("./freeformResourceGroup").FreeformResourceGroup = null as any;
utilities.lazyLoad(exports, ["FreeformResourceGroup"], () => require("./freeformResourceGroup"));

export { FreeformResourceGroupGeneratorArgs, FreeformResourceGroupGeneratorState } from "./freeformResourceGroupGenerator";
export type FreeformResourceGroupGenerator = import("./freeformResourceGroupGenerator").FreeformResourceGroupGenerator;
export const FreeformResourceGroupGenerator: typeof import("./freeformResourceGroupGenerator").FreeformResourceGroupGenerator = null as any;
utilities.lazyLoad(exports, ["FreeformResourceGroupGenerator"], () => require("./freeformResourceGroupGenerator"));

export { FreeformSystemArgs, FreeformSystemState } from "./freeformSystem";
export type FreeformSystem = import("./freeformSystem").FreeformSystem;
export const FreeformSystem: typeof import("./freeformSystem").FreeformSystem = null as any;
utilities.lazyLoad(exports, ["FreeformSystem"], () => require("./freeformSystem"));

export { GetAgentArgs, GetAgentResult, GetAgentOutputArgs } from "./getAgent";
export const getAgent: typeof import("./getAgent").getAgent = null as any;
export const getAgentOutput: typeof import("./getAgent").getAgentOutput = null as any;
utilities.lazyLoad(exports, ["getAgent","getAgentOutput"], () => require("./getAgent"));

export { GetAgentProfileArgs, GetAgentProfileResult, GetAgentProfileOutputArgs } from "./getAgentProfile";
export const getAgentProfile: typeof import("./getAgentProfile").getAgentProfile = null as any;
export const getAgentProfileOutput: typeof import("./getAgentProfile").getAgentProfileOutput = null as any;
utilities.lazyLoad(exports, ["getAgentProfile","getAgentProfileOutput"], () => require("./getAgentProfile"));

export { GetAgentProfilesArgs, GetAgentProfilesResult, GetAgentProfilesOutputArgs } from "./getAgentProfiles";
export const getAgentProfiles: typeof import("./getAgentProfiles").getAgentProfiles = null as any;
export const getAgentProfilesOutput: typeof import("./getAgentProfiles").getAgentProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getAgentProfiles","getAgentProfilesOutput"], () => require("./getAgentProfiles"));

export { GetAgentsArgs, GetAgentsResult, GetAgentsOutputArgs } from "./getAgents";
export const getAgents: typeof import("./getAgents").getAgents = null as any;
export const getAgentsOutput: typeof import("./getAgents").getAgentsOutput = null as any;
utilities.lazyLoad(exports, ["getAgents","getAgentsOutput"], () => require("./getAgents"));

export { GetAnomaliesArgs, GetAnomaliesResult, GetAnomaliesOutputArgs } from "./getAnomalies";
export const getAnomalies: typeof import("./getAnomalies").getAnomalies = null as any;
export const getAnomaliesOutput: typeof import("./getAnomalies").getAnomaliesOutput = null as any;
utilities.lazyLoad(exports, ["getAnomalies","getAnomaliesOutput"], () => require("./getAnomalies"));

export { GetAsnPoolArgs, GetAsnPoolResult, GetAsnPoolOutputArgs } from "./getAsnPool";
export const getAsnPool: typeof import("./getAsnPool").getAsnPool = null as any;
export const getAsnPoolOutput: typeof import("./getAsnPool").getAsnPoolOutput = null as any;
utilities.lazyLoad(exports, ["getAsnPool","getAsnPoolOutput"], () => require("./getAsnPool"));

export { GetAsnPoolsResult } from "./getAsnPools";
export const getAsnPools: typeof import("./getAsnPools").getAsnPools = null as any;
export const getAsnPoolsOutput: typeof import("./getAsnPools").getAsnPoolsOutput = null as any;
utilities.lazyLoad(exports, ["getAsnPools","getAsnPoolsOutput"], () => require("./getAsnPools"));

export { GetBlueprintDeploymentArgs, GetBlueprintDeploymentResult, GetBlueprintDeploymentOutputArgs } from "./getBlueprintDeployment";
export const getBlueprintDeployment: typeof import("./getBlueprintDeployment").getBlueprintDeployment = null as any;
export const getBlueprintDeploymentOutput: typeof import("./getBlueprintDeployment").getBlueprintDeploymentOutput = null as any;
utilities.lazyLoad(exports, ["getBlueprintDeployment","getBlueprintDeploymentOutput"], () => require("./getBlueprintDeployment"));

export { GetBlueprintIbaDashboardArgs, GetBlueprintIbaDashboardResult, GetBlueprintIbaDashboardOutputArgs } from "./getBlueprintIbaDashboard";
export const getBlueprintIbaDashboard: typeof import("./getBlueprintIbaDashboard").getBlueprintIbaDashboard = null as any;
export const getBlueprintIbaDashboardOutput: typeof import("./getBlueprintIbaDashboard").getBlueprintIbaDashboardOutput = null as any;
utilities.lazyLoad(exports, ["getBlueprintIbaDashboard","getBlueprintIbaDashboardOutput"], () => require("./getBlueprintIbaDashboard"));

export { GetBlueprintIbaDashboardsArgs, GetBlueprintIbaDashboardsResult, GetBlueprintIbaDashboardsOutputArgs } from "./getBlueprintIbaDashboards";
export const getBlueprintIbaDashboards: typeof import("./getBlueprintIbaDashboards").getBlueprintIbaDashboards = null as any;
export const getBlueprintIbaDashboardsOutput: typeof import("./getBlueprintIbaDashboards").getBlueprintIbaDashboardsOutput = null as any;
utilities.lazyLoad(exports, ["getBlueprintIbaDashboards","getBlueprintIbaDashboardsOutput"], () => require("./getBlueprintIbaDashboards"));

export { GetBlueprintIbaPredefinedProbeArgs, GetBlueprintIbaPredefinedProbeResult, GetBlueprintIbaPredefinedProbeOutputArgs } from "./getBlueprintIbaPredefinedProbe";
export const getBlueprintIbaPredefinedProbe: typeof import("./getBlueprintIbaPredefinedProbe").getBlueprintIbaPredefinedProbe = null as any;
export const getBlueprintIbaPredefinedProbeOutput: typeof import("./getBlueprintIbaPredefinedProbe").getBlueprintIbaPredefinedProbeOutput = null as any;
utilities.lazyLoad(exports, ["getBlueprintIbaPredefinedProbe","getBlueprintIbaPredefinedProbeOutput"], () => require("./getBlueprintIbaPredefinedProbe"));

export { GetBlueprintIbaWidgetArgs, GetBlueprintIbaWidgetResult, GetBlueprintIbaWidgetOutputArgs } from "./getBlueprintIbaWidget";
export const getBlueprintIbaWidget: typeof import("./getBlueprintIbaWidget").getBlueprintIbaWidget = null as any;
export const getBlueprintIbaWidgetOutput: typeof import("./getBlueprintIbaWidget").getBlueprintIbaWidgetOutput = null as any;
utilities.lazyLoad(exports, ["getBlueprintIbaWidget","getBlueprintIbaWidgetOutput"], () => require("./getBlueprintIbaWidget"));

export { GetBlueprintIbaWidgetsArgs, GetBlueprintIbaWidgetsResult, GetBlueprintIbaWidgetsOutputArgs } from "./getBlueprintIbaWidgets";
export const getBlueprintIbaWidgets: typeof import("./getBlueprintIbaWidgets").getBlueprintIbaWidgets = null as any;
export const getBlueprintIbaWidgetsOutput: typeof import("./getBlueprintIbaWidgets").getBlueprintIbaWidgetsOutput = null as any;
utilities.lazyLoad(exports, ["getBlueprintIbaWidgets","getBlueprintIbaWidgetsOutput"], () => require("./getBlueprintIbaWidgets"));

export { GetBlueprintQueryArgs, GetBlueprintQueryResult, GetBlueprintQueryOutputArgs } from "./getBlueprintQuery";
export const getBlueprintQuery: typeof import("./getBlueprintQuery").getBlueprintQuery = null as any;
export const getBlueprintQueryOutput: typeof import("./getBlueprintQuery").getBlueprintQueryOutput = null as any;
utilities.lazyLoad(exports, ["getBlueprintQuery","getBlueprintQueryOutput"], () => require("./getBlueprintQuery"));

export { GetBlueprintsArgs, GetBlueprintsResult, GetBlueprintsOutputArgs } from "./getBlueprints";
export const getBlueprints: typeof import("./getBlueprints").getBlueprints = null as any;
export const getBlueprintsOutput: typeof import("./getBlueprints").getBlueprintsOutput = null as any;
utilities.lazyLoad(exports, ["getBlueprints","getBlueprintsOutput"], () => require("./getBlueprints"));

export { GetConfigletArgs, GetConfigletResult, GetConfigletOutputArgs } from "./getConfiglet";
export const getConfiglet: typeof import("./getConfiglet").getConfiglet = null as any;
export const getConfigletOutput: typeof import("./getConfiglet").getConfigletOutput = null as any;
utilities.lazyLoad(exports, ["getConfiglet","getConfigletOutput"], () => require("./getConfiglet"));

export { GetConfigletsArgs, GetConfigletsResult, GetConfigletsOutputArgs } from "./getConfiglets";
export const getConfiglets: typeof import("./getConfiglets").getConfiglets = null as any;
export const getConfigletsOutput: typeof import("./getConfiglets").getConfigletsOutput = null as any;
utilities.lazyLoad(exports, ["getConfiglets","getConfigletsOutput"], () => require("./getConfiglets"));

export { GetDatacenterBlueprintArgs, GetDatacenterBlueprintResult, GetDatacenterBlueprintOutputArgs } from "./getDatacenterBlueprint";
export const getDatacenterBlueprint: typeof import("./getDatacenterBlueprint").getDatacenterBlueprint = null as any;
export const getDatacenterBlueprintOutput: typeof import("./getDatacenterBlueprint").getDatacenterBlueprintOutput = null as any;
utilities.lazyLoad(exports, ["getDatacenterBlueprint","getDatacenterBlueprintOutput"], () => require("./getDatacenterBlueprint"));

export { GetDatacenterConfigletArgs, GetDatacenterConfigletResult, GetDatacenterConfigletOutputArgs } from "./getDatacenterConfiglet";
export const getDatacenterConfiglet: typeof import("./getDatacenterConfiglet").getDatacenterConfiglet = null as any;
export const getDatacenterConfigletOutput: typeof import("./getDatacenterConfiglet").getDatacenterConfigletOutput = null as any;
utilities.lazyLoad(exports, ["getDatacenterConfiglet","getDatacenterConfigletOutput"], () => require("./getDatacenterConfiglet"));

export { GetDatacenterConfigletsArgs, GetDatacenterConfigletsResult, GetDatacenterConfigletsOutputArgs } from "./getDatacenterConfiglets";
export const getDatacenterConfiglets: typeof import("./getDatacenterConfiglets").getDatacenterConfiglets = null as any;
export const getDatacenterConfigletsOutput: typeof import("./getDatacenterConfiglets").getDatacenterConfigletsOutput = null as any;
utilities.lazyLoad(exports, ["getDatacenterConfiglets","getDatacenterConfigletsOutput"], () => require("./getDatacenterConfiglets"));

export { GetDatacenterCtBgpPeeringGenericSystemArgs, GetDatacenterCtBgpPeeringGenericSystemResult, GetDatacenterCtBgpPeeringGenericSystemOutputArgs } from "./getDatacenterCtBgpPeeringGenericSystem";
export const getDatacenterCtBgpPeeringGenericSystem: typeof import("./getDatacenterCtBgpPeeringGenericSystem").getDatacenterCtBgpPeeringGenericSystem = null as any;
export const getDatacenterCtBgpPeeringGenericSystemOutput: typeof import("./getDatacenterCtBgpPeeringGenericSystem").getDatacenterCtBgpPeeringGenericSystemOutput = null as any;
utilities.lazyLoad(exports, ["getDatacenterCtBgpPeeringGenericSystem","getDatacenterCtBgpPeeringGenericSystemOutput"], () => require("./getDatacenterCtBgpPeeringGenericSystem"));

export { GetDatacenterCtBgpPeeringIpEndpointArgs, GetDatacenterCtBgpPeeringIpEndpointResult, GetDatacenterCtBgpPeeringIpEndpointOutputArgs } from "./getDatacenterCtBgpPeeringIpEndpoint";
export const getDatacenterCtBgpPeeringIpEndpoint: typeof import("./getDatacenterCtBgpPeeringIpEndpoint").getDatacenterCtBgpPeeringIpEndpoint = null as any;
export const getDatacenterCtBgpPeeringIpEndpointOutput: typeof import("./getDatacenterCtBgpPeeringIpEndpoint").getDatacenterCtBgpPeeringIpEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getDatacenterCtBgpPeeringIpEndpoint","getDatacenterCtBgpPeeringIpEndpointOutput"], () => require("./getDatacenterCtBgpPeeringIpEndpoint"));

export { GetDatacenterCtCustomStaticRouteArgs, GetDatacenterCtCustomStaticRouteResult, GetDatacenterCtCustomStaticRouteOutputArgs } from "./getDatacenterCtCustomStaticRoute";
export const getDatacenterCtCustomStaticRoute: typeof import("./getDatacenterCtCustomStaticRoute").getDatacenterCtCustomStaticRoute = null as any;
export const getDatacenterCtCustomStaticRouteOutput: typeof import("./getDatacenterCtCustomStaticRoute").getDatacenterCtCustomStaticRouteOutput = null as any;
utilities.lazyLoad(exports, ["getDatacenterCtCustomStaticRoute","getDatacenterCtCustomStaticRouteOutput"], () => require("./getDatacenterCtCustomStaticRoute"));

export { GetDatacenterCtDynamicBgpPeeringArgs, GetDatacenterCtDynamicBgpPeeringResult, GetDatacenterCtDynamicBgpPeeringOutputArgs } from "./getDatacenterCtDynamicBgpPeering";
export const getDatacenterCtDynamicBgpPeering: typeof import("./getDatacenterCtDynamicBgpPeering").getDatacenterCtDynamicBgpPeering = null as any;
export const getDatacenterCtDynamicBgpPeeringOutput: typeof import("./getDatacenterCtDynamicBgpPeering").getDatacenterCtDynamicBgpPeeringOutput = null as any;
utilities.lazyLoad(exports, ["getDatacenterCtDynamicBgpPeering","getDatacenterCtDynamicBgpPeeringOutput"], () => require("./getDatacenterCtDynamicBgpPeering"));

export { GetDatacenterCtIpLinkArgs, GetDatacenterCtIpLinkResult, GetDatacenterCtIpLinkOutputArgs } from "./getDatacenterCtIpLink";
export const getDatacenterCtIpLink: typeof import("./getDatacenterCtIpLink").getDatacenterCtIpLink = null as any;
export const getDatacenterCtIpLinkOutput: typeof import("./getDatacenterCtIpLink").getDatacenterCtIpLinkOutput = null as any;
utilities.lazyLoad(exports, ["getDatacenterCtIpLink","getDatacenterCtIpLinkOutput"], () => require("./getDatacenterCtIpLink"));

export { GetDatacenterCtRoutingPolicyArgs, GetDatacenterCtRoutingPolicyResult, GetDatacenterCtRoutingPolicyOutputArgs } from "./getDatacenterCtRoutingPolicy";
export const getDatacenterCtRoutingPolicy: typeof import("./getDatacenterCtRoutingPolicy").getDatacenterCtRoutingPolicy = null as any;
export const getDatacenterCtRoutingPolicyOutput: typeof import("./getDatacenterCtRoutingPolicy").getDatacenterCtRoutingPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDatacenterCtRoutingPolicy","getDatacenterCtRoutingPolicyOutput"], () => require("./getDatacenterCtRoutingPolicy"));

export { GetDatacenterCtRoutingZoneConstraintArgs, GetDatacenterCtRoutingZoneConstraintResult, GetDatacenterCtRoutingZoneConstraintOutputArgs } from "./getDatacenterCtRoutingZoneConstraint";
export const getDatacenterCtRoutingZoneConstraint: typeof import("./getDatacenterCtRoutingZoneConstraint").getDatacenterCtRoutingZoneConstraint = null as any;
export const getDatacenterCtRoutingZoneConstraintOutput: typeof import("./getDatacenterCtRoutingZoneConstraint").getDatacenterCtRoutingZoneConstraintOutput = null as any;
utilities.lazyLoad(exports, ["getDatacenterCtRoutingZoneConstraint","getDatacenterCtRoutingZoneConstraintOutput"], () => require("./getDatacenterCtRoutingZoneConstraint"));

export { GetDatacenterCtStaticRouteArgs, GetDatacenterCtStaticRouteResult, GetDatacenterCtStaticRouteOutputArgs } from "./getDatacenterCtStaticRoute";
export const getDatacenterCtStaticRoute: typeof import("./getDatacenterCtStaticRoute").getDatacenterCtStaticRoute = null as any;
export const getDatacenterCtStaticRouteOutput: typeof import("./getDatacenterCtStaticRoute").getDatacenterCtStaticRouteOutput = null as any;
utilities.lazyLoad(exports, ["getDatacenterCtStaticRoute","getDatacenterCtStaticRouteOutput"], () => require("./getDatacenterCtStaticRoute"));

export { GetDatacenterCtVirtualNetworkMultipleArgs, GetDatacenterCtVirtualNetworkMultipleResult, GetDatacenterCtVirtualNetworkMultipleOutputArgs } from "./getDatacenterCtVirtualNetworkMultiple";
export const getDatacenterCtVirtualNetworkMultiple: typeof import("./getDatacenterCtVirtualNetworkMultiple").getDatacenterCtVirtualNetworkMultiple = null as any;
export const getDatacenterCtVirtualNetworkMultipleOutput: typeof import("./getDatacenterCtVirtualNetworkMultiple").getDatacenterCtVirtualNetworkMultipleOutput = null as any;
utilities.lazyLoad(exports, ["getDatacenterCtVirtualNetworkMultiple","getDatacenterCtVirtualNetworkMultipleOutput"], () => require("./getDatacenterCtVirtualNetworkMultiple"));

export { GetDatacenterCtVirtualNetworkSingleArgs, GetDatacenterCtVirtualNetworkSingleResult, GetDatacenterCtVirtualNetworkSingleOutputArgs } from "./getDatacenterCtVirtualNetworkSingle";
export const getDatacenterCtVirtualNetworkSingle: typeof import("./getDatacenterCtVirtualNetworkSingle").getDatacenterCtVirtualNetworkSingle = null as any;
export const getDatacenterCtVirtualNetworkSingleOutput: typeof import("./getDatacenterCtVirtualNetworkSingle").getDatacenterCtVirtualNetworkSingleOutput = null as any;
utilities.lazyLoad(exports, ["getDatacenterCtVirtualNetworkSingle","getDatacenterCtVirtualNetworkSingleOutput"], () => require("./getDatacenterCtVirtualNetworkSingle"));

export { GetDatacenterExternalGatewayArgs, GetDatacenterExternalGatewayResult, GetDatacenterExternalGatewayOutputArgs } from "./getDatacenterExternalGateway";
export const getDatacenterExternalGateway: typeof import("./getDatacenterExternalGateway").getDatacenterExternalGateway = null as any;
export const getDatacenterExternalGatewayOutput: typeof import("./getDatacenterExternalGateway").getDatacenterExternalGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getDatacenterExternalGateway","getDatacenterExternalGatewayOutput"], () => require("./getDatacenterExternalGateway"));

export { GetDatacenterExternalGatewaysArgs, GetDatacenterExternalGatewaysResult, GetDatacenterExternalGatewaysOutputArgs } from "./getDatacenterExternalGateways";
export const getDatacenterExternalGateways: typeof import("./getDatacenterExternalGateways").getDatacenterExternalGateways = null as any;
export const getDatacenterExternalGatewaysOutput: typeof import("./getDatacenterExternalGateways").getDatacenterExternalGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getDatacenterExternalGateways","getDatacenterExternalGatewaysOutput"], () => require("./getDatacenterExternalGateways"));

export { GetDatacenterInterfacesByLinkTagArgs, GetDatacenterInterfacesByLinkTagResult, GetDatacenterInterfacesByLinkTagOutputArgs } from "./getDatacenterInterfacesByLinkTag";
export const getDatacenterInterfacesByLinkTag: typeof import("./getDatacenterInterfacesByLinkTag").getDatacenterInterfacesByLinkTag = null as any;
export const getDatacenterInterfacesByLinkTagOutput: typeof import("./getDatacenterInterfacesByLinkTag").getDatacenterInterfacesByLinkTagOutput = null as any;
utilities.lazyLoad(exports, ["getDatacenterInterfacesByLinkTag","getDatacenterInterfacesByLinkTagOutput"], () => require("./getDatacenterInterfacesByLinkTag"));

export { GetDatacenterInterfacesBySystemArgs, GetDatacenterInterfacesBySystemResult, GetDatacenterInterfacesBySystemOutputArgs } from "./getDatacenterInterfacesBySystem";
export const getDatacenterInterfacesBySystem: typeof import("./getDatacenterInterfacesBySystem").getDatacenterInterfacesBySystem = null as any;
export const getDatacenterInterfacesBySystemOutput: typeof import("./getDatacenterInterfacesBySystem").getDatacenterInterfacesBySystemOutput = null as any;
utilities.lazyLoad(exports, ["getDatacenterInterfacesBySystem","getDatacenterInterfacesBySystemOutput"], () => require("./getDatacenterInterfacesBySystem"));

export { GetDatacenterPropertySetArgs, GetDatacenterPropertySetResult, GetDatacenterPropertySetOutputArgs } from "./getDatacenterPropertySet";
export const getDatacenterPropertySet: typeof import("./getDatacenterPropertySet").getDatacenterPropertySet = null as any;
export const getDatacenterPropertySetOutput: typeof import("./getDatacenterPropertySet").getDatacenterPropertySetOutput = null as any;
utilities.lazyLoad(exports, ["getDatacenterPropertySet","getDatacenterPropertySetOutput"], () => require("./getDatacenterPropertySet"));

export { GetDatacenterPropertySetsArgs, GetDatacenterPropertySetsResult, GetDatacenterPropertySetsOutputArgs } from "./getDatacenterPropertySets";
export const getDatacenterPropertySets: typeof import("./getDatacenterPropertySets").getDatacenterPropertySets = null as any;
export const getDatacenterPropertySetsOutput: typeof import("./getDatacenterPropertySets").getDatacenterPropertySetsOutput = null as any;
utilities.lazyLoad(exports, ["getDatacenterPropertySets","getDatacenterPropertySetsOutput"], () => require("./getDatacenterPropertySets"));

export { GetDatacenterRoutingPoliciesArgs, GetDatacenterRoutingPoliciesResult, GetDatacenterRoutingPoliciesOutputArgs } from "./getDatacenterRoutingPolicies";
export const getDatacenterRoutingPolicies: typeof import("./getDatacenterRoutingPolicies").getDatacenterRoutingPolicies = null as any;
export const getDatacenterRoutingPoliciesOutput: typeof import("./getDatacenterRoutingPolicies").getDatacenterRoutingPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getDatacenterRoutingPolicies","getDatacenterRoutingPoliciesOutput"], () => require("./getDatacenterRoutingPolicies"));

export { GetDatacenterRoutingPolicyArgs, GetDatacenterRoutingPolicyResult, GetDatacenterRoutingPolicyOutputArgs } from "./getDatacenterRoutingPolicy";
export const getDatacenterRoutingPolicy: typeof import("./getDatacenterRoutingPolicy").getDatacenterRoutingPolicy = null as any;
export const getDatacenterRoutingPolicyOutput: typeof import("./getDatacenterRoutingPolicy").getDatacenterRoutingPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDatacenterRoutingPolicy","getDatacenterRoutingPolicyOutput"], () => require("./getDatacenterRoutingPolicy"));

export { GetDatacenterRoutingZoneArgs, GetDatacenterRoutingZoneResult, GetDatacenterRoutingZoneOutputArgs } from "./getDatacenterRoutingZone";
export const getDatacenterRoutingZone: typeof import("./getDatacenterRoutingZone").getDatacenterRoutingZone = null as any;
export const getDatacenterRoutingZoneOutput: typeof import("./getDatacenterRoutingZone").getDatacenterRoutingZoneOutput = null as any;
utilities.lazyLoad(exports, ["getDatacenterRoutingZone","getDatacenterRoutingZoneOutput"], () => require("./getDatacenterRoutingZone"));

export { GetDatacenterRoutingZonesArgs, GetDatacenterRoutingZonesResult, GetDatacenterRoutingZonesOutputArgs } from "./getDatacenterRoutingZones";
export const getDatacenterRoutingZones: typeof import("./getDatacenterRoutingZones").getDatacenterRoutingZones = null as any;
export const getDatacenterRoutingZonesOutput: typeof import("./getDatacenterRoutingZones").getDatacenterRoutingZonesOutput = null as any;
utilities.lazyLoad(exports, ["getDatacenterRoutingZones","getDatacenterRoutingZonesOutput"], () => require("./getDatacenterRoutingZones"));

export { GetDatacenterSecurityPoliciesArgs, GetDatacenterSecurityPoliciesResult, GetDatacenterSecurityPoliciesOutputArgs } from "./getDatacenterSecurityPolicies";
export const getDatacenterSecurityPolicies: typeof import("./getDatacenterSecurityPolicies").getDatacenterSecurityPolicies = null as any;
export const getDatacenterSecurityPoliciesOutput: typeof import("./getDatacenterSecurityPolicies").getDatacenterSecurityPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getDatacenterSecurityPolicies","getDatacenterSecurityPoliciesOutput"], () => require("./getDatacenterSecurityPolicies"));

export { GetDatacenterSecurityPolicyArgs, GetDatacenterSecurityPolicyResult, GetDatacenterSecurityPolicyOutputArgs } from "./getDatacenterSecurityPolicy";
export const getDatacenterSecurityPolicy: typeof import("./getDatacenterSecurityPolicy").getDatacenterSecurityPolicy = null as any;
export const getDatacenterSecurityPolicyOutput: typeof import("./getDatacenterSecurityPolicy").getDatacenterSecurityPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDatacenterSecurityPolicy","getDatacenterSecurityPolicyOutput"], () => require("./getDatacenterSecurityPolicy"));

export { GetDatacenterSvisMapArgs, GetDatacenterSvisMapResult, GetDatacenterSvisMapOutputArgs } from "./getDatacenterSvisMap";
export const getDatacenterSvisMap: typeof import("./getDatacenterSvisMap").getDatacenterSvisMap = null as any;
export const getDatacenterSvisMapOutput: typeof import("./getDatacenterSvisMap").getDatacenterSvisMapOutput = null as any;
utilities.lazyLoad(exports, ["getDatacenterSvisMap","getDatacenterSvisMapOutput"], () => require("./getDatacenterSvisMap"));

export { GetDatacenterSystemArgs, GetDatacenterSystemResult, GetDatacenterSystemOutputArgs } from "./getDatacenterSystem";
export const getDatacenterSystem: typeof import("./getDatacenterSystem").getDatacenterSystem = null as any;
export const getDatacenterSystemOutput: typeof import("./getDatacenterSystem").getDatacenterSystemOutput = null as any;
utilities.lazyLoad(exports, ["getDatacenterSystem","getDatacenterSystemOutput"], () => require("./getDatacenterSystem"));

export { GetDatacenterSystemsArgs, GetDatacenterSystemsResult, GetDatacenterSystemsOutputArgs } from "./getDatacenterSystems";
export const getDatacenterSystems: typeof import("./getDatacenterSystems").getDatacenterSystems = null as any;
export const getDatacenterSystemsOutput: typeof import("./getDatacenterSystems").getDatacenterSystemsOutput = null as any;
utilities.lazyLoad(exports, ["getDatacenterSystems","getDatacenterSystemsOutput"], () => require("./getDatacenterSystems"));

export { GetDatacenterVirtualNetworkArgs, GetDatacenterVirtualNetworkResult, GetDatacenterVirtualNetworkOutputArgs } from "./getDatacenterVirtualNetwork";
export const getDatacenterVirtualNetwork: typeof import("./getDatacenterVirtualNetwork").getDatacenterVirtualNetwork = null as any;
export const getDatacenterVirtualNetworkOutput: typeof import("./getDatacenterVirtualNetwork").getDatacenterVirtualNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getDatacenterVirtualNetwork","getDatacenterVirtualNetworkOutput"], () => require("./getDatacenterVirtualNetwork"));

export { GetDatacenterVirtualNetworkBindingConstructorArgs, GetDatacenterVirtualNetworkBindingConstructorResult, GetDatacenterVirtualNetworkBindingConstructorOutputArgs } from "./getDatacenterVirtualNetworkBindingConstructor";
export const getDatacenterVirtualNetworkBindingConstructor: typeof import("./getDatacenterVirtualNetworkBindingConstructor").getDatacenterVirtualNetworkBindingConstructor = null as any;
export const getDatacenterVirtualNetworkBindingConstructorOutput: typeof import("./getDatacenterVirtualNetworkBindingConstructor").getDatacenterVirtualNetworkBindingConstructorOutput = null as any;
utilities.lazyLoad(exports, ["getDatacenterVirtualNetworkBindingConstructor","getDatacenterVirtualNetworkBindingConstructorOutput"], () => require("./getDatacenterVirtualNetworkBindingConstructor"));

export { GetDatacenterVirtualNetworksArgs, GetDatacenterVirtualNetworksResult, GetDatacenterVirtualNetworksOutputArgs } from "./getDatacenterVirtualNetworks";
export const getDatacenterVirtualNetworks: typeof import("./getDatacenterVirtualNetworks").getDatacenterVirtualNetworks = null as any;
export const getDatacenterVirtualNetworksOutput: typeof import("./getDatacenterVirtualNetworks").getDatacenterVirtualNetworksOutput = null as any;
utilities.lazyLoad(exports, ["getDatacenterVirtualNetworks","getDatacenterVirtualNetworksOutput"], () => require("./getDatacenterVirtualNetworks"));

export { GetDeviceConfigArgs, GetDeviceConfigResult, GetDeviceConfigOutputArgs } from "./getDeviceConfig";
export const getDeviceConfig: typeof import("./getDeviceConfig").getDeviceConfig = null as any;
export const getDeviceConfigOutput: typeof import("./getDeviceConfig").getDeviceConfigOutput = null as any;
utilities.lazyLoad(exports, ["getDeviceConfig","getDeviceConfigOutput"], () => require("./getDeviceConfig"));

export { GetFreeformAllocationGroupArgs, GetFreeformAllocationGroupResult, GetFreeformAllocationGroupOutputArgs } from "./getFreeformAllocationGroup";
export const getFreeformAllocationGroup: typeof import("./getFreeformAllocationGroup").getFreeformAllocationGroup = null as any;
export const getFreeformAllocationGroupOutput: typeof import("./getFreeformAllocationGroup").getFreeformAllocationGroupOutput = null as any;
utilities.lazyLoad(exports, ["getFreeformAllocationGroup","getFreeformAllocationGroupOutput"], () => require("./getFreeformAllocationGroup"));

export { GetFreeformBlueprintArgs, GetFreeformBlueprintResult, GetFreeformBlueprintOutputArgs } from "./getFreeformBlueprint";
export const getFreeformBlueprint: typeof import("./getFreeformBlueprint").getFreeformBlueprint = null as any;
export const getFreeformBlueprintOutput: typeof import("./getFreeformBlueprint").getFreeformBlueprintOutput = null as any;
utilities.lazyLoad(exports, ["getFreeformBlueprint","getFreeformBlueprintOutput"], () => require("./getFreeformBlueprint"));

export { GetFreeformConfigTemplateArgs, GetFreeformConfigTemplateResult, GetFreeformConfigTemplateOutputArgs } from "./getFreeformConfigTemplate";
export const getFreeformConfigTemplate: typeof import("./getFreeformConfigTemplate").getFreeformConfigTemplate = null as any;
export const getFreeformConfigTemplateOutput: typeof import("./getFreeformConfigTemplate").getFreeformConfigTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getFreeformConfigTemplate","getFreeformConfigTemplateOutput"], () => require("./getFreeformConfigTemplate"));

export { GetFreeformLinkArgs, GetFreeformLinkResult, GetFreeformLinkOutputArgs } from "./getFreeformLink";
export const getFreeformLink: typeof import("./getFreeformLink").getFreeformLink = null as any;
export const getFreeformLinkOutput: typeof import("./getFreeformLink").getFreeformLinkOutput = null as any;
utilities.lazyLoad(exports, ["getFreeformLink","getFreeformLinkOutput"], () => require("./getFreeformLink"));

export { GetFreeformPropertySetArgs, GetFreeformPropertySetResult, GetFreeformPropertySetOutputArgs } from "./getFreeformPropertySet";
export const getFreeformPropertySet: typeof import("./getFreeformPropertySet").getFreeformPropertySet = null as any;
export const getFreeformPropertySetOutput: typeof import("./getFreeformPropertySet").getFreeformPropertySetOutput = null as any;
utilities.lazyLoad(exports, ["getFreeformPropertySet","getFreeformPropertySetOutput"], () => require("./getFreeformPropertySet"));

export { GetFreeformResourceArgs, GetFreeformResourceResult, GetFreeformResourceOutputArgs } from "./getFreeformResource";
export const getFreeformResource: typeof import("./getFreeformResource").getFreeformResource = null as any;
export const getFreeformResourceOutput: typeof import("./getFreeformResource").getFreeformResourceOutput = null as any;
utilities.lazyLoad(exports, ["getFreeformResource","getFreeformResourceOutput"], () => require("./getFreeformResource"));

export { GetFreeformResourceGeneratorArgs, GetFreeformResourceGeneratorResult, GetFreeformResourceGeneratorOutputArgs } from "./getFreeformResourceGenerator";
export const getFreeformResourceGenerator: typeof import("./getFreeformResourceGenerator").getFreeformResourceGenerator = null as any;
export const getFreeformResourceGeneratorOutput: typeof import("./getFreeformResourceGenerator").getFreeformResourceGeneratorOutput = null as any;
utilities.lazyLoad(exports, ["getFreeformResourceGenerator","getFreeformResourceGeneratorOutput"], () => require("./getFreeformResourceGenerator"));

export { GetFreeformResourceGroupArgs, GetFreeformResourceGroupResult, GetFreeformResourceGroupOutputArgs } from "./getFreeformResourceGroup";
export const getFreeformResourceGroup: typeof import("./getFreeformResourceGroup").getFreeformResourceGroup = null as any;
export const getFreeformResourceGroupOutput: typeof import("./getFreeformResourceGroup").getFreeformResourceGroupOutput = null as any;
utilities.lazyLoad(exports, ["getFreeformResourceGroup","getFreeformResourceGroupOutput"], () => require("./getFreeformResourceGroup"));

export { GetFreeformResourceGroupGeneratorArgs, GetFreeformResourceGroupGeneratorResult, GetFreeformResourceGroupGeneratorOutputArgs } from "./getFreeformResourceGroupGenerator";
export const getFreeformResourceGroupGenerator: typeof import("./getFreeformResourceGroupGenerator").getFreeformResourceGroupGenerator = null as any;
export const getFreeformResourceGroupGeneratorOutput: typeof import("./getFreeformResourceGroupGenerator").getFreeformResourceGroupGeneratorOutput = null as any;
utilities.lazyLoad(exports, ["getFreeformResourceGroupGenerator","getFreeformResourceGroupGeneratorOutput"], () => require("./getFreeformResourceGroupGenerator"));

export { GetFreeformSystemArgs, GetFreeformSystemResult, GetFreeformSystemOutputArgs } from "./getFreeformSystem";
export const getFreeformSystem: typeof import("./getFreeformSystem").getFreeformSystem = null as any;
export const getFreeformSystemOutput: typeof import("./getFreeformSystem").getFreeformSystemOutput = null as any;
utilities.lazyLoad(exports, ["getFreeformSystem","getFreeformSystemOutput"], () => require("./getFreeformSystem"));

export { GetIntegerPoolArgs, GetIntegerPoolResult, GetIntegerPoolOutputArgs } from "./getIntegerPool";
export const getIntegerPool: typeof import("./getIntegerPool").getIntegerPool = null as any;
export const getIntegerPoolOutput: typeof import("./getIntegerPool").getIntegerPoolOutput = null as any;
utilities.lazyLoad(exports, ["getIntegerPool","getIntegerPoolOutput"], () => require("./getIntegerPool"));

export { GetIntegerPoolsResult } from "./getIntegerPools";
export const getIntegerPools: typeof import("./getIntegerPools").getIntegerPools = null as any;
export const getIntegerPoolsOutput: typeof import("./getIntegerPools").getIntegerPoolsOutput = null as any;
utilities.lazyLoad(exports, ["getIntegerPools","getIntegerPoolsOutput"], () => require("./getIntegerPools"));

export { GetInterfaceMapArgs, GetInterfaceMapResult, GetInterfaceMapOutputArgs } from "./getInterfaceMap";
export const getInterfaceMap: typeof import("./getInterfaceMap").getInterfaceMap = null as any;
export const getInterfaceMapOutput: typeof import("./getInterfaceMap").getInterfaceMapOutput = null as any;
utilities.lazyLoad(exports, ["getInterfaceMap","getInterfaceMapOutput"], () => require("./getInterfaceMap"));

export { GetInterfaceMapsArgs, GetInterfaceMapsResult, GetInterfaceMapsOutputArgs } from "./getInterfaceMaps";
export const getInterfaceMaps: typeof import("./getInterfaceMaps").getInterfaceMaps = null as any;
export const getInterfaceMapsOutput: typeof import("./getInterfaceMaps").getInterfaceMapsOutput = null as any;
utilities.lazyLoad(exports, ["getInterfaceMaps","getInterfaceMapsOutput"], () => require("./getInterfaceMaps"));

export { GetIpv4PoolArgs, GetIpv4PoolResult, GetIpv4PoolOutputArgs } from "./getIpv4Pool";
export const getIpv4Pool: typeof import("./getIpv4Pool").getIpv4Pool = null as any;
export const getIpv4PoolOutput: typeof import("./getIpv4Pool").getIpv4PoolOutput = null as any;
utilities.lazyLoad(exports, ["getIpv4Pool","getIpv4PoolOutput"], () => require("./getIpv4Pool"));

export { GetIpv4PoolsResult } from "./getIpv4Pools";
export const getIpv4Pools: typeof import("./getIpv4Pools").getIpv4Pools = null as any;
export const getIpv4PoolsOutput: typeof import("./getIpv4Pools").getIpv4PoolsOutput = null as any;
utilities.lazyLoad(exports, ["getIpv4Pools","getIpv4PoolsOutput"], () => require("./getIpv4Pools"));

export { GetIpv6PoolArgs, GetIpv6PoolResult, GetIpv6PoolOutputArgs } from "./getIpv6Pool";
export const getIpv6Pool: typeof import("./getIpv6Pool").getIpv6Pool = null as any;
export const getIpv6PoolOutput: typeof import("./getIpv6Pool").getIpv6PoolOutput = null as any;
utilities.lazyLoad(exports, ["getIpv6Pool","getIpv6PoolOutput"], () => require("./getIpv6Pool"));

export { GetIpv6PoolsResult } from "./getIpv6Pools";
export const getIpv6Pools: typeof import("./getIpv6Pools").getIpv6Pools = null as any;
export const getIpv6PoolsOutput: typeof import("./getIpv6Pools").getIpv6PoolsOutput = null as any;
utilities.lazyLoad(exports, ["getIpv6Pools","getIpv6PoolsOutput"], () => require("./getIpv6Pools"));

export { GetLogicalDeviceArgs, GetLogicalDeviceResult, GetLogicalDeviceOutputArgs } from "./getLogicalDevice";
export const getLogicalDevice: typeof import("./getLogicalDevice").getLogicalDevice = null as any;
export const getLogicalDeviceOutput: typeof import("./getLogicalDevice").getLogicalDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getLogicalDevice","getLogicalDeviceOutput"], () => require("./getLogicalDevice"));

export { GetPropertySetArgs, GetPropertySetResult, GetPropertySetOutputArgs } from "./getPropertySet";
export const getPropertySet: typeof import("./getPropertySet").getPropertySet = null as any;
export const getPropertySetOutput: typeof import("./getPropertySet").getPropertySetOutput = null as any;
utilities.lazyLoad(exports, ["getPropertySet","getPropertySetOutput"], () => require("./getPropertySet"));

export { GetPropertySetsResult } from "./getPropertySets";
export const getPropertySets: typeof import("./getPropertySets").getPropertySets = null as any;
export const getPropertySetsOutput: typeof import("./getPropertySets").getPropertySetsOutput = null as any;
utilities.lazyLoad(exports, ["getPropertySets","getPropertySetsOutput"], () => require("./getPropertySets"));

export { GetRackTypeArgs, GetRackTypeResult, GetRackTypeOutputArgs } from "./getRackType";
export const getRackType: typeof import("./getRackType").getRackType = null as any;
export const getRackTypeOutput: typeof import("./getRackType").getRackTypeOutput = null as any;
utilities.lazyLoad(exports, ["getRackType","getRackTypeOutput"], () => require("./getRackType"));

export { GetRackTypesResult } from "./getRackTypes";
export const getRackTypes: typeof import("./getRackTypes").getRackTypes = null as any;
export const getRackTypesOutput: typeof import("./getRackTypes").getRackTypesOutput = null as any;
utilities.lazyLoad(exports, ["getRackTypes","getRackTypesOutput"], () => require("./getRackTypes"));

export { GetTagArgs, GetTagResult, GetTagOutputArgs } from "./getTag";
export const getTag: typeof import("./getTag").getTag = null as any;
export const getTagOutput: typeof import("./getTag").getTagOutput = null as any;
utilities.lazyLoad(exports, ["getTag","getTagOutput"], () => require("./getTag"));

export { GetTelemetryServiceRegistryEntriesArgs, GetTelemetryServiceRegistryEntriesResult, GetTelemetryServiceRegistryEntriesOutputArgs } from "./getTelemetryServiceRegistryEntries";
export const getTelemetryServiceRegistryEntries: typeof import("./getTelemetryServiceRegistryEntries").getTelemetryServiceRegistryEntries = null as any;
export const getTelemetryServiceRegistryEntriesOutput: typeof import("./getTelemetryServiceRegistryEntries").getTelemetryServiceRegistryEntriesOutput = null as any;
utilities.lazyLoad(exports, ["getTelemetryServiceRegistryEntries","getTelemetryServiceRegistryEntriesOutput"], () => require("./getTelemetryServiceRegistryEntries"));

export { GetTelemetryServiceRegistryEntryArgs, GetTelemetryServiceRegistryEntryResult, GetTelemetryServiceRegistryEntryOutputArgs } from "./getTelemetryServiceRegistryEntry";
export const getTelemetryServiceRegistryEntry: typeof import("./getTelemetryServiceRegistryEntry").getTelemetryServiceRegistryEntry = null as any;
export const getTelemetryServiceRegistryEntryOutput: typeof import("./getTelemetryServiceRegistryEntry").getTelemetryServiceRegistryEntryOutput = null as any;
utilities.lazyLoad(exports, ["getTelemetryServiceRegistryEntry","getTelemetryServiceRegistryEntryOutput"], () => require("./getTelemetryServiceRegistryEntry"));

export { GetTemplateCollapsedArgs, GetTemplateCollapsedResult, GetTemplateCollapsedOutputArgs } from "./getTemplateCollapsed";
export const getTemplateCollapsed: typeof import("./getTemplateCollapsed").getTemplateCollapsed = null as any;
export const getTemplateCollapsedOutput: typeof import("./getTemplateCollapsed").getTemplateCollapsedOutput = null as any;
utilities.lazyLoad(exports, ["getTemplateCollapsed","getTemplateCollapsedOutput"], () => require("./getTemplateCollapsed"));

export { GetTemplatePodBasedArgs, GetTemplatePodBasedResult, GetTemplatePodBasedOutputArgs } from "./getTemplatePodBased";
export const getTemplatePodBased: typeof import("./getTemplatePodBased").getTemplatePodBased = null as any;
export const getTemplatePodBasedOutput: typeof import("./getTemplatePodBased").getTemplatePodBasedOutput = null as any;
utilities.lazyLoad(exports, ["getTemplatePodBased","getTemplatePodBasedOutput"], () => require("./getTemplatePodBased"));

export { GetTemplateRackBasedArgs, GetTemplateRackBasedResult, GetTemplateRackBasedOutputArgs } from "./getTemplateRackBased";
export const getTemplateRackBased: typeof import("./getTemplateRackBased").getTemplateRackBased = null as any;
export const getTemplateRackBasedOutput: typeof import("./getTemplateRackBased").getTemplateRackBasedOutput = null as any;
utilities.lazyLoad(exports, ["getTemplateRackBased","getTemplateRackBasedOutput"], () => require("./getTemplateRackBased"));

export { GetTemplatesArgs, GetTemplatesResult, GetTemplatesOutputArgs } from "./getTemplates";
export const getTemplates: typeof import("./getTemplates").getTemplates = null as any;
export const getTemplatesOutput: typeof import("./getTemplates").getTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getTemplates","getTemplatesOutput"], () => require("./getTemplates"));

export { GetVniPoolArgs, GetVniPoolResult, GetVniPoolOutputArgs } from "./getVniPool";
export const getVniPool: typeof import("./getVniPool").getVniPool = null as any;
export const getVniPoolOutput: typeof import("./getVniPool").getVniPoolOutput = null as any;
utilities.lazyLoad(exports, ["getVniPool","getVniPoolOutput"], () => require("./getVniPool"));

export { GetVniPoolsResult } from "./getVniPools";
export const getVniPools: typeof import("./getVniPools").getVniPools = null as any;
export const getVniPoolsOutput: typeof import("./getVniPools").getVniPoolsOutput = null as any;
utilities.lazyLoad(exports, ["getVniPools","getVniPoolsOutput"], () => require("./getVniPools"));

export { IntegerPoolArgs, IntegerPoolState } from "./integerPool";
export type IntegerPool = import("./integerPool").IntegerPool;
export const IntegerPool: typeof import("./integerPool").IntegerPool = null as any;
utilities.lazyLoad(exports, ["IntegerPool"], () => require("./integerPool"));

export { InterfaceMapArgs, InterfaceMapState } from "./interfaceMap";
export type InterfaceMap = import("./interfaceMap").InterfaceMap;
export const InterfaceMap: typeof import("./interfaceMap").InterfaceMap = null as any;
utilities.lazyLoad(exports, ["InterfaceMap"], () => require("./interfaceMap"));

export { Ipv4PoolArgs, Ipv4PoolState } from "./ipv4Pool";
export type Ipv4Pool = import("./ipv4Pool").Ipv4Pool;
export const Ipv4Pool: typeof import("./ipv4Pool").Ipv4Pool = null as any;
utilities.lazyLoad(exports, ["Ipv4Pool"], () => require("./ipv4Pool"));

export { Ipv6PoolArgs, Ipv6PoolState } from "./ipv6Pool";
export type Ipv6Pool = import("./ipv6Pool").Ipv6Pool;
export const Ipv6Pool: typeof import("./ipv6Pool").Ipv6Pool = null as any;
utilities.lazyLoad(exports, ["Ipv6Pool"], () => require("./ipv6Pool"));

export { LogicalDeviceArgs, LogicalDeviceState } from "./logicalDevice";
export type LogicalDevice = import("./logicalDevice").LogicalDevice;
export const LogicalDevice: typeof import("./logicalDevice").LogicalDevice = null as any;
utilities.lazyLoad(exports, ["LogicalDevice"], () => require("./logicalDevice"));

export { ManagedDeviceArgs, ManagedDeviceState } from "./managedDevice";
export type ManagedDevice = import("./managedDevice").ManagedDevice;
export const ManagedDevice: typeof import("./managedDevice").ManagedDevice = null as any;
utilities.lazyLoad(exports, ["ManagedDevice"], () => require("./managedDevice"));

export { ManagedDeviceAckArgs, ManagedDeviceAckState } from "./managedDeviceAck";
export type ManagedDeviceAck = import("./managedDeviceAck").ManagedDeviceAck;
export const ManagedDeviceAck: typeof import("./managedDeviceAck").ManagedDeviceAck = null as any;
utilities.lazyLoad(exports, ["ManagedDeviceAck"], () => require("./managedDeviceAck"));

export { ModularDeviceProfileArgs, ModularDeviceProfileState } from "./modularDeviceProfile";
export type ModularDeviceProfile = import("./modularDeviceProfile").ModularDeviceProfile;
export const ModularDeviceProfile: typeof import("./modularDeviceProfile").ModularDeviceProfile = null as any;
utilities.lazyLoad(exports, ["ModularDeviceProfile"], () => require("./modularDeviceProfile"));

export { PropertySetArgs, PropertySetState } from "./propertySet";
export type PropertySet = import("./propertySet").PropertySet;
export const PropertySet: typeof import("./propertySet").PropertySet = null as any;
utilities.lazyLoad(exports, ["PropertySet"], () => require("./propertySet"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RackTypeArgs, RackTypeState } from "./rackType";
export type RackType = import("./rackType").RackType;
export const RackType: typeof import("./rackType").RackType = null as any;
utilities.lazyLoad(exports, ["RackType"], () => require("./rackType"));

export { TagArgs, TagState } from "./tag";
export type Tag = import("./tag").Tag;
export const Tag: typeof import("./tag").Tag = null as any;
utilities.lazyLoad(exports, ["Tag"], () => require("./tag"));

export { TelemetryServiceRegistryEntryArgs, TelemetryServiceRegistryEntryState } from "./telemetryServiceRegistryEntry";
export type TelemetryServiceRegistryEntry = import("./telemetryServiceRegistryEntry").TelemetryServiceRegistryEntry;
export const TelemetryServiceRegistryEntry: typeof import("./telemetryServiceRegistryEntry").TelemetryServiceRegistryEntry = null as any;
utilities.lazyLoad(exports, ["TelemetryServiceRegistryEntry"], () => require("./telemetryServiceRegistryEntry"));

export { TemplateCollapsedArgs, TemplateCollapsedState } from "./templateCollapsed";
export type TemplateCollapsed = import("./templateCollapsed").TemplateCollapsed;
export const TemplateCollapsed: typeof import("./templateCollapsed").TemplateCollapsed = null as any;
utilities.lazyLoad(exports, ["TemplateCollapsed"], () => require("./templateCollapsed"));

export { TemplatePodBasedArgs, TemplatePodBasedState } from "./templatePodBased";
export type TemplatePodBased = import("./templatePodBased").TemplatePodBased;
export const TemplatePodBased: typeof import("./templatePodBased").TemplatePodBased = null as any;
utilities.lazyLoad(exports, ["TemplatePodBased"], () => require("./templatePodBased"));

export { TemplateRackBasedArgs, TemplateRackBasedState } from "./templateRackBased";
export type TemplateRackBased = import("./templateRackBased").TemplateRackBased;
export const TemplateRackBased: typeof import("./templateRackBased").TemplateRackBased = null as any;
utilities.lazyLoad(exports, ["TemplateRackBased"], () => require("./templateRackBased"));

export { VniPoolArgs, VniPoolState } from "./vniPool";
export type VniPool = import("./vniPool").VniPool;
export const VniPool: typeof import("./vniPool").VniPool = null as any;
utilities.lazyLoad(exports, ["VniPool"], () => require("./vniPool"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "apstra:index/agentProfile:AgentProfile":
                return new AgentProfile(name, <any>undefined, { urn })
            case "apstra:index/asnPool:AsnPool":
                return new AsnPool(name, <any>undefined, { urn })
            case "apstra:index/blueprintDeployment:BlueprintDeployment":
                return new BlueprintDeployment(name, <any>undefined, { urn })
            case "apstra:index/blueprintIbaDashboard:BlueprintIbaDashboard":
                return new BlueprintIbaDashboard(name, <any>undefined, { urn })
            case "apstra:index/blueprintIbaProbe:BlueprintIbaProbe":
                return new BlueprintIbaProbe(name, <any>undefined, { urn })
            case "apstra:index/blueprintIbaWidget:BlueprintIbaWidget":
                return new BlueprintIbaWidget(name, <any>undefined, { urn })
            case "apstra:index/configlet:Configlet":
                return new Configlet(name, <any>undefined, { urn })
            case "apstra:index/datacenterBlueprint:DatacenterBlueprint":
                return new DatacenterBlueprint(name, <any>undefined, { urn })
            case "apstra:index/datacenterConfiglet:DatacenterConfiglet":
                return new DatacenterConfiglet(name, <any>undefined, { urn })
            case "apstra:index/datacenterConnectivityTemplate:DatacenterConnectivityTemplate":
                return new DatacenterConnectivityTemplate(name, <any>undefined, { urn })
            case "apstra:index/datacenterConnectivityTemplateAssignment:DatacenterConnectivityTemplateAssignment":
                return new DatacenterConnectivityTemplateAssignment(name, <any>undefined, { urn })
            case "apstra:index/datacenterConnectivityTemplateAssignments:DatacenterConnectivityTemplateAssignments":
                return new DatacenterConnectivityTemplateAssignments(name, <any>undefined, { urn })
            case "apstra:index/datacenterConnectivityTemplateInterface:DatacenterConnectivityTemplateInterface":
                return new DatacenterConnectivityTemplateInterface(name, <any>undefined, { urn })
            case "apstra:index/datacenterConnectivityTemplateLoopback:DatacenterConnectivityTemplateLoopback":
                return new DatacenterConnectivityTemplateLoopback(name, <any>undefined, { urn })
            case "apstra:index/datacenterConnectivityTemplateSvi:DatacenterConnectivityTemplateSvi":
                return new DatacenterConnectivityTemplateSvi(name, <any>undefined, { urn })
            case "apstra:index/datacenterConnectivityTemplateSystem:DatacenterConnectivityTemplateSystem":
                return new DatacenterConnectivityTemplateSystem(name, <any>undefined, { urn })
            case "apstra:index/datacenterConnectivityTemplatesAssignment:DatacenterConnectivityTemplatesAssignment":
                return new DatacenterConnectivityTemplatesAssignment(name, <any>undefined, { urn })
            case "apstra:index/datacenterDeviceAllocation:DatacenterDeviceAllocation":
                return new DatacenterDeviceAllocation(name, <any>undefined, { urn })
            case "apstra:index/datacenterExternalGateway:DatacenterExternalGateway":
                return new DatacenterExternalGateway(name, <any>undefined, { urn })
            case "apstra:index/datacenterGenericSystem:DatacenterGenericSystem":
                return new DatacenterGenericSystem(name, <any>undefined, { urn })
            case "apstra:index/datacenterIpLinkAddressing:DatacenterIpLinkAddressing":
                return new DatacenterIpLinkAddressing(name, <any>undefined, { urn })
            case "apstra:index/datacenterPropertySet:DatacenterPropertySet":
                return new DatacenterPropertySet(name, <any>undefined, { urn })
            case "apstra:index/datacenterRack:DatacenterRack":
                return new DatacenterRack(name, <any>undefined, { urn })
            case "apstra:index/datacenterResourcePoolAllocation:DatacenterResourcePoolAllocation":
                return new DatacenterResourcePoolAllocation(name, <any>undefined, { urn })
            case "apstra:index/datacenterRoutingPolicy:DatacenterRoutingPolicy":
                return new DatacenterRoutingPolicy(name, <any>undefined, { urn })
            case "apstra:index/datacenterRoutingZone:DatacenterRoutingZone":
                return new DatacenterRoutingZone(name, <any>undefined, { urn })
            case "apstra:index/datacenterSecurityPolicy:DatacenterSecurityPolicy":
                return new DatacenterSecurityPolicy(name, <any>undefined, { urn })
            case "apstra:index/datacenterVirtualNetwork:DatacenterVirtualNetwork":
                return new DatacenterVirtualNetwork(name, <any>undefined, { urn })
            case "apstra:index/freeformAllocationGroup:FreeformAllocationGroup":
                return new FreeformAllocationGroup(name, <any>undefined, { urn })
            case "apstra:index/freeformBlueprint:FreeformBlueprint":
                return new FreeformBlueprint(name, <any>undefined, { urn })
            case "apstra:index/freeformConfigTemplate:FreeformConfigTemplate":
                return new FreeformConfigTemplate(name, <any>undefined, { urn })
            case "apstra:index/freeformDeviceProfile:FreeformDeviceProfile":
                return new FreeformDeviceProfile(name, <any>undefined, { urn })
            case "apstra:index/freeformLink:FreeformLink":
                return new FreeformLink(name, <any>undefined, { urn })
            case "apstra:index/freeformPropertySet:FreeformPropertySet":
                return new FreeformPropertySet(name, <any>undefined, { urn })
            case "apstra:index/freeformResource:FreeformResource":
                return new FreeformResource(name, <any>undefined, { urn })
            case "apstra:index/freeformResourceGenerator:FreeformResourceGenerator":
                return new FreeformResourceGenerator(name, <any>undefined, { urn })
            case "apstra:index/freeformResourceGroup:FreeformResourceGroup":
                return new FreeformResourceGroup(name, <any>undefined, { urn })
            case "apstra:index/freeformResourceGroupGenerator:FreeformResourceGroupGenerator":
                return new FreeformResourceGroupGenerator(name, <any>undefined, { urn })
            case "apstra:index/freeformSystem:FreeformSystem":
                return new FreeformSystem(name, <any>undefined, { urn })
            case "apstra:index/integerPool:IntegerPool":
                return new IntegerPool(name, <any>undefined, { urn })
            case "apstra:index/interfaceMap:InterfaceMap":
                return new InterfaceMap(name, <any>undefined, { urn })
            case "apstra:index/ipv4Pool:Ipv4Pool":
                return new Ipv4Pool(name, <any>undefined, { urn })
            case "apstra:index/ipv6Pool:Ipv6Pool":
                return new Ipv6Pool(name, <any>undefined, { urn })
            case "apstra:index/logicalDevice:LogicalDevice":
                return new LogicalDevice(name, <any>undefined, { urn })
            case "apstra:index/managedDevice:ManagedDevice":
                return new ManagedDevice(name, <any>undefined, { urn })
            case "apstra:index/managedDeviceAck:ManagedDeviceAck":
                return new ManagedDeviceAck(name, <any>undefined, { urn })
            case "apstra:index/modularDeviceProfile:ModularDeviceProfile":
                return new ModularDeviceProfile(name, <any>undefined, { urn })
            case "apstra:index/propertySet:PropertySet":
                return new PropertySet(name, <any>undefined, { urn })
            case "apstra:index/rackType:RackType":
                return new RackType(name, <any>undefined, { urn })
            case "apstra:index/tag:Tag":
                return new Tag(name, <any>undefined, { urn })
            case "apstra:index/telemetryServiceRegistryEntry:TelemetryServiceRegistryEntry":
                return new TelemetryServiceRegistryEntry(name, <any>undefined, { urn })
            case "apstra:index/templateCollapsed:TemplateCollapsed":
                return new TemplateCollapsed(name, <any>undefined, { urn })
            case "apstra:index/templatePodBased:TemplatePodBased":
                return new TemplatePodBased(name, <any>undefined, { urn })
            case "apstra:index/templateRackBased:TemplateRackBased":
                return new TemplateRackBased(name, <any>undefined, { urn })
            case "apstra:index/vniPool:VniPool":
                return new VniPool(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("apstra", "index/agentProfile", _module)
pulumi.runtime.registerResourceModule("apstra", "index/asnPool", _module)
pulumi.runtime.registerResourceModule("apstra", "index/blueprintDeployment", _module)
pulumi.runtime.registerResourceModule("apstra", "index/blueprintIbaDashboard", _module)
pulumi.runtime.registerResourceModule("apstra", "index/blueprintIbaProbe", _module)
pulumi.runtime.registerResourceModule("apstra", "index/blueprintIbaWidget", _module)
pulumi.runtime.registerResourceModule("apstra", "index/configlet", _module)
pulumi.runtime.registerResourceModule("apstra", "index/datacenterBlueprint", _module)
pulumi.runtime.registerResourceModule("apstra", "index/datacenterConfiglet", _module)
pulumi.runtime.registerResourceModule("apstra", "index/datacenterConnectivityTemplate", _module)
pulumi.runtime.registerResourceModule("apstra", "index/datacenterConnectivityTemplateAssignment", _module)
pulumi.runtime.registerResourceModule("apstra", "index/datacenterConnectivityTemplateAssignments", _module)
pulumi.runtime.registerResourceModule("apstra", "index/datacenterConnectivityTemplateInterface", _module)
pulumi.runtime.registerResourceModule("apstra", "index/datacenterConnectivityTemplateLoopback", _module)
pulumi.runtime.registerResourceModule("apstra", "index/datacenterConnectivityTemplateSvi", _module)
pulumi.runtime.registerResourceModule("apstra", "index/datacenterConnectivityTemplateSystem", _module)
pulumi.runtime.registerResourceModule("apstra", "index/datacenterConnectivityTemplatesAssignment", _module)
pulumi.runtime.registerResourceModule("apstra", "index/datacenterDeviceAllocation", _module)
pulumi.runtime.registerResourceModule("apstra", "index/datacenterExternalGateway", _module)
pulumi.runtime.registerResourceModule("apstra", "index/datacenterGenericSystem", _module)
pulumi.runtime.registerResourceModule("apstra", "index/datacenterIpLinkAddressing", _module)
pulumi.runtime.registerResourceModule("apstra", "index/datacenterPropertySet", _module)
pulumi.runtime.registerResourceModule("apstra", "index/datacenterRack", _module)
pulumi.runtime.registerResourceModule("apstra", "index/datacenterResourcePoolAllocation", _module)
pulumi.runtime.registerResourceModule("apstra", "index/datacenterRoutingPolicy", _module)
pulumi.runtime.registerResourceModule("apstra", "index/datacenterRoutingZone", _module)
pulumi.runtime.registerResourceModule("apstra", "index/datacenterSecurityPolicy", _module)
pulumi.runtime.registerResourceModule("apstra", "index/datacenterVirtualNetwork", _module)
pulumi.runtime.registerResourceModule("apstra", "index/freeformAllocationGroup", _module)
pulumi.runtime.registerResourceModule("apstra", "index/freeformBlueprint", _module)
pulumi.runtime.registerResourceModule("apstra", "index/freeformConfigTemplate", _module)
pulumi.runtime.registerResourceModule("apstra", "index/freeformDeviceProfile", _module)
pulumi.runtime.registerResourceModule("apstra", "index/freeformLink", _module)
pulumi.runtime.registerResourceModule("apstra", "index/freeformPropertySet", _module)
pulumi.runtime.registerResourceModule("apstra", "index/freeformResource", _module)
pulumi.runtime.registerResourceModule("apstra", "index/freeformResourceGenerator", _module)
pulumi.runtime.registerResourceModule("apstra", "index/freeformResourceGroup", _module)
pulumi.runtime.registerResourceModule("apstra", "index/freeformResourceGroupGenerator", _module)
pulumi.runtime.registerResourceModule("apstra", "index/freeformSystem", _module)
pulumi.runtime.registerResourceModule("apstra", "index/integerPool", _module)
pulumi.runtime.registerResourceModule("apstra", "index/interfaceMap", _module)
pulumi.runtime.registerResourceModule("apstra", "index/ipv4Pool", _module)
pulumi.runtime.registerResourceModule("apstra", "index/ipv6Pool", _module)
pulumi.runtime.registerResourceModule("apstra", "index/logicalDevice", _module)
pulumi.runtime.registerResourceModule("apstra", "index/managedDevice", _module)
pulumi.runtime.registerResourceModule("apstra", "index/managedDeviceAck", _module)
pulumi.runtime.registerResourceModule("apstra", "index/modularDeviceProfile", _module)
pulumi.runtime.registerResourceModule("apstra", "index/propertySet", _module)
pulumi.runtime.registerResourceModule("apstra", "index/rackType", _module)
pulumi.runtime.registerResourceModule("apstra", "index/tag", _module)
pulumi.runtime.registerResourceModule("apstra", "index/telemetryServiceRegistryEntry", _module)
pulumi.runtime.registerResourceModule("apstra", "index/templateCollapsed", _module)
pulumi.runtime.registerResourceModule("apstra", "index/templatePodBased", _module)
pulumi.runtime.registerResourceModule("apstra", "index/templateRackBased", _module)
pulumi.runtime.registerResourceModule("apstra", "index/vniPool", _module)
pulumi.runtime.registerResourcePackage("apstra", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:apstra") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
