// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Ipv6Pool extends pulumi.CustomResource {
    /**
     * Get an existing Ipv6Pool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Ipv6PoolState, opts?: pulumi.CustomResourceOptions): Ipv6Pool {
        return new Ipv6Pool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'apstra:index/ipv6Pool:Ipv6Pool';

    /**
     * Returns true if the given object is an instance of Ipv6Pool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ipv6Pool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ipv6Pool.__pulumiType;
    }

    /**
     * Pool name displayed in the Apstra web UI
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Status of the IPv6 pool. Note that this element is probably better read from a `data` source because it will be more
     * up-to-date.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Detailed info about individual IPv6 CIDR allocations within the IPv6 Pool.
     */
    public readonly subnets!: pulumi.Output<outputs.Ipv6PoolSubnet[]>;
    /**
     * Total number of addresses in the IPv6 pool.
     */
    public /*out*/ readonly total!: pulumi.Output<number>;
    /**
     * Count of used addresses in the IPv6 pool. Note that this element is probably better read from a `data` source because it
     * will be more up-to-date.
     */
    public /*out*/ readonly used!: pulumi.Output<number>;
    /**
     * Percent of used addresses in the IPv6 pool. Note that this element is probably better read from a `data` source because
     * it will be more up-to-date.
     */
    public /*out*/ readonly usedPercentage!: pulumi.Output<number>;

    /**
     * Create a Ipv6Pool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Ipv6PoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Ipv6PoolArgs | Ipv6PoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Ipv6PoolState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subnets"] = state ? state.subnets : undefined;
            resourceInputs["total"] = state ? state.total : undefined;
            resourceInputs["used"] = state ? state.used : undefined;
            resourceInputs["usedPercentage"] = state ? state.usedPercentage : undefined;
        } else {
            const args = argsOrState as Ipv6PoolArgs | undefined;
            if ((!args || args.subnets === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnets'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["subnets"] = args ? args.subnets : undefined;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["total"] = undefined /*out*/;
            resourceInputs["used"] = undefined /*out*/;
            resourceInputs["usedPercentage"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ipv6Pool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ipv6Pool resources.
 */
export interface Ipv6PoolState {
    /**
     * Pool name displayed in the Apstra web UI
     */
    name?: pulumi.Input<string>;
    /**
     * Status of the IPv6 pool. Note that this element is probably better read from a `data` source because it will be more
     * up-to-date.
     */
    status?: pulumi.Input<string>;
    /**
     * Detailed info about individual IPv6 CIDR allocations within the IPv6 Pool.
     */
    subnets?: pulumi.Input<pulumi.Input<inputs.Ipv6PoolSubnet>[]>;
    /**
     * Total number of addresses in the IPv6 pool.
     */
    total?: pulumi.Input<number>;
    /**
     * Count of used addresses in the IPv6 pool. Note that this element is probably better read from a `data` source because it
     * will be more up-to-date.
     */
    used?: pulumi.Input<number>;
    /**
     * Percent of used addresses in the IPv6 pool. Note that this element is probably better read from a `data` source because
     * it will be more up-to-date.
     */
    usedPercentage?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Ipv6Pool resource.
 */
export interface Ipv6PoolArgs {
    /**
     * Pool name displayed in the Apstra web UI
     */
    name?: pulumi.Input<string>;
    /**
     * Detailed info about individual IPv6 CIDR allocations within the IPv6 Pool.
     */
    subnets: pulumi.Input<pulumi.Input<inputs.Ipv6PoolSubnet>[]>;
}
