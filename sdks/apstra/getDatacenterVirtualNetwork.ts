// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDatacenterVirtualNetwork(args: GetDatacenterVirtualNetworkArgs, opts?: pulumi.InvokeOptions): Promise<GetDatacenterVirtualNetworkResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("apstra:index/getDatacenterVirtualNetwork:getDatacenterVirtualNetwork", {
        "blueprintId": args.blueprintId,
        "id": args.id,
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDatacenterVirtualNetwork.
 */
export interface GetDatacenterVirtualNetworkArgs {
    blueprintId: string;
    id?: string;
    name?: string;
}

/**
 * A collection of values returned by getDatacenterVirtualNetwork.
 */
export interface GetDatacenterVirtualNetworkResult {
    readonly bindings: {[key: string]: outputs.GetDatacenterVirtualNetworkBindings};
    readonly blueprintId: string;
    readonly dhcpServiceEnabled: boolean;
    readonly exportRouteTargets: string[];
    readonly hadPriorVniConfig: boolean;
    readonly id: string;
    readonly importRouteTargets: string[];
    readonly ipv4ConnectivityEnabled: boolean;
    readonly ipv4Subnet: string;
    readonly ipv4VirtualGateway: string;
    readonly ipv4VirtualGatewayEnabled: boolean;
    readonly ipv6ConnectivityEnabled: boolean;
    readonly ipv6Subnet: string;
    readonly ipv6VirtualGateway: string;
    readonly ipv6VirtualGatewayEnabled: boolean;
    readonly l3Mtu: number;
    readonly name?: string;
    readonly reserveVlan: boolean;
    readonly routingZoneId: string;
    readonly type: string;
    readonly vni: number;
}
export function getDatacenterVirtualNetworkOutput(args: GetDatacenterVirtualNetworkOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDatacenterVirtualNetworkResult> {
    return pulumi.output(args).apply((a: any) => getDatacenterVirtualNetwork(a, opts))
}

/**
 * A collection of arguments for invoking getDatacenterVirtualNetwork.
 */
export interface GetDatacenterVirtualNetworkOutputArgs {
    blueprintId: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}
