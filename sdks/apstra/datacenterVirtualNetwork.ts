// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatacenterVirtualNetwork extends pulumi.CustomResource {
    /**
     * Get an existing DatacenterVirtualNetwork resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatacenterVirtualNetworkState, opts?: pulumi.CustomResourceOptions): DatacenterVirtualNetwork {
        return new DatacenterVirtualNetwork(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'apstra:index/datacenterVirtualNetwork:DatacenterVirtualNetwork';

    /**
     * Returns true if the given object is an instance of DatacenterVirtualNetwork.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatacenterVirtualNetwork {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatacenterVirtualNetwork.__pulumiType;
    }

    /**
     * Bindings make a Virtual Network available on Leaf Switches and Access Switches. At least one binding entry is required.
     * The value is a map keyed by graph db node IDs of *either* Leaf Switches (non-redundant Leaf Switches) or Leaf Switch
     * redundancy groups (redundant Leaf Switches). Practitioners are encouraged to consider using the
     * `apstra.getDatacenterVirtualNetworkBindingConstructor` data source to populate this map.
     */
    public readonly bindings!: pulumi.Output<{[key: string]: outputs.DatacenterVirtualNetworkBindings}>;
    /**
     * Blueprint ID
     */
    public readonly blueprintId!: pulumi.Output<string>;
    /**
     * Enables a DHCP relay agent.
     */
    public readonly dhcpServiceEnabled!: pulumi.Output<boolean>;
    /**
     * Export RTs for this Virtual Network.
     */
    public readonly exportRouteTargets!: pulumi.Output<string[] | undefined>;
    /**
     * Used to trigger plan modification when `vni` has been removed from the configuration.
     */
    public /*out*/ readonly hadPriorVniConfig!: pulumi.Output<boolean>;
    /**
     * Import RTs for this Virtual Network.
     */
    public readonly importRouteTargets!: pulumi.Output<string[] | undefined>;
    /**
     * Enables IPv4 within the Virtual Network. Default: true
     */
    public readonly ipv4ConnectivityEnabled!: pulumi.Output<boolean>;
    /**
     * IPv4 subnet associated with the Virtual Network. When not specified, a prefix from within the IPv4 Resource Pool
     * assigned to the `virtual_network_svi_subnets` role will be automatically assigned by Apstra.
     */
    public readonly ipv4Subnet!: pulumi.Output<string>;
    /**
     * Specifies the IPv4 virtual gateway address within the Virtual Network. The configured value must be a valid IPv4 host
     * address configured value within range specified by `ipv4_subnet`
     */
    public readonly ipv4VirtualGateway!: pulumi.Output<string>;
    /**
     * Controls and indicates whether the IPv4 gateway within the Virtual Network is enabled. Requires
     * `ipv4_connectivity_enabled` to be `true`
     */
    public readonly ipv4VirtualGatewayEnabled!: pulumi.Output<boolean>;
    /**
     * Enables IPv6 within the Virtual Network. Default: false
     */
    public readonly ipv6ConnectivityEnabled!: pulumi.Output<boolean>;
    /**
     * IPv6 subnet associated with the Virtual Network. When not specified, a prefix from within the IPv6 Resource Pool
     * assigned to the `virtual_network_svi_subnets_ipv6` role will be automatically assigned by Apstra.
     */
    public readonly ipv6Subnet!: pulumi.Output<string>;
    /**
     * Specifies the IPv6 virtual gateway address within the Virtual Network. The configured value must be a valid IPv6 host
     * address configured value within range specified by `ipv6_subnet`
     */
    public readonly ipv6VirtualGateway!: pulumi.Output<string>;
    /**
     * Controls and indicates whether the IPv6 gateway within the Virtual Network is enabled. Requires
     * `ipv6_connectivity_enabled` to be `true`
     */
    public readonly ipv6VirtualGatewayEnabled!: pulumi.Output<boolean>;
    /**
     * L3 MTU used by the L3 switch interfaces participating in the Virtual Network. Must be an even number between 1280 and
     * 9216. Requires Apstra 4.2.0 or later.
     */
    public readonly l3Mtu!: pulumi.Output<number>;
    /**
     * Virtual Network Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * For use only with `vxlan` type Virtual networks when all `bindings` use the same VLAN ID. This option reserves the VLAN
     * fabric-wide, even on switches to which the Virtual Network has not yet been deployed. The only accepted values is
     * `true`.
     */
    public readonly reserveVlan!: pulumi.Output<boolean>;
    /**
     * Routing Zone ID (required when `type == vxlan`
     */
    public readonly routingZoneId!: pulumi.Output<string>;
    /**
     * Virtual Network Type
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * EVPN Virtual Network ID to be associated with this Virtual Network. When omitted, Apstra chooses a VNI from the Resource
     * Pool allocated to role `vni_virtual_network_ids`.
     */
    public readonly vni!: pulumi.Output<number>;

    /**
     * Create a DatacenterVirtualNetwork resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatacenterVirtualNetworkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatacenterVirtualNetworkArgs | DatacenterVirtualNetworkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatacenterVirtualNetworkState | undefined;
            resourceInputs["bindings"] = state ? state.bindings : undefined;
            resourceInputs["blueprintId"] = state ? state.blueprintId : undefined;
            resourceInputs["dhcpServiceEnabled"] = state ? state.dhcpServiceEnabled : undefined;
            resourceInputs["exportRouteTargets"] = state ? state.exportRouteTargets : undefined;
            resourceInputs["hadPriorVniConfig"] = state ? state.hadPriorVniConfig : undefined;
            resourceInputs["importRouteTargets"] = state ? state.importRouteTargets : undefined;
            resourceInputs["ipv4ConnectivityEnabled"] = state ? state.ipv4ConnectivityEnabled : undefined;
            resourceInputs["ipv4Subnet"] = state ? state.ipv4Subnet : undefined;
            resourceInputs["ipv4VirtualGateway"] = state ? state.ipv4VirtualGateway : undefined;
            resourceInputs["ipv4VirtualGatewayEnabled"] = state ? state.ipv4VirtualGatewayEnabled : undefined;
            resourceInputs["ipv6ConnectivityEnabled"] = state ? state.ipv6ConnectivityEnabled : undefined;
            resourceInputs["ipv6Subnet"] = state ? state.ipv6Subnet : undefined;
            resourceInputs["ipv6VirtualGateway"] = state ? state.ipv6VirtualGateway : undefined;
            resourceInputs["ipv6VirtualGatewayEnabled"] = state ? state.ipv6VirtualGatewayEnabled : undefined;
            resourceInputs["l3Mtu"] = state ? state.l3Mtu : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["reserveVlan"] = state ? state.reserveVlan : undefined;
            resourceInputs["routingZoneId"] = state ? state.routingZoneId : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vni"] = state ? state.vni : undefined;
        } else {
            const args = argsOrState as DatacenterVirtualNetworkArgs | undefined;
            if ((!args || args.bindings === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bindings'");
            }
            if ((!args || args.blueprintId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'blueprintId'");
            }
            resourceInputs["bindings"] = args ? args.bindings : undefined;
            resourceInputs["blueprintId"] = args ? args.blueprintId : undefined;
            resourceInputs["dhcpServiceEnabled"] = args ? args.dhcpServiceEnabled : undefined;
            resourceInputs["exportRouteTargets"] = args ? args.exportRouteTargets : undefined;
            resourceInputs["importRouteTargets"] = args ? args.importRouteTargets : undefined;
            resourceInputs["ipv4ConnectivityEnabled"] = args ? args.ipv4ConnectivityEnabled : undefined;
            resourceInputs["ipv4Subnet"] = args ? args.ipv4Subnet : undefined;
            resourceInputs["ipv4VirtualGateway"] = args ? args.ipv4VirtualGateway : undefined;
            resourceInputs["ipv4VirtualGatewayEnabled"] = args ? args.ipv4VirtualGatewayEnabled : undefined;
            resourceInputs["ipv6ConnectivityEnabled"] = args ? args.ipv6ConnectivityEnabled : undefined;
            resourceInputs["ipv6Subnet"] = args ? args.ipv6Subnet : undefined;
            resourceInputs["ipv6VirtualGateway"] = args ? args.ipv6VirtualGateway : undefined;
            resourceInputs["ipv6VirtualGatewayEnabled"] = args ? args.ipv6VirtualGatewayEnabled : undefined;
            resourceInputs["l3Mtu"] = args ? args.l3Mtu : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["reserveVlan"] = args ? args.reserveVlan : undefined;
            resourceInputs["routingZoneId"] = args ? args.routingZoneId : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["vni"] = args ? args.vni : undefined;
            resourceInputs["hadPriorVniConfig"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatacenterVirtualNetwork.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatacenterVirtualNetwork resources.
 */
export interface DatacenterVirtualNetworkState {
    /**
     * Bindings make a Virtual Network available on Leaf Switches and Access Switches. At least one binding entry is required.
     * The value is a map keyed by graph db node IDs of *either* Leaf Switches (non-redundant Leaf Switches) or Leaf Switch
     * redundancy groups (redundant Leaf Switches). Practitioners are encouraged to consider using the
     * `apstra.getDatacenterVirtualNetworkBindingConstructor` data source to populate this map.
     */
    bindings?: pulumi.Input<{[key: string]: pulumi.Input<inputs.DatacenterVirtualNetworkBindings>}>;
    /**
     * Blueprint ID
     */
    blueprintId?: pulumi.Input<string>;
    /**
     * Enables a DHCP relay agent.
     */
    dhcpServiceEnabled?: pulumi.Input<boolean>;
    /**
     * Export RTs for this Virtual Network.
     */
    exportRouteTargets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Used to trigger plan modification when `vni` has been removed from the configuration.
     */
    hadPriorVniConfig?: pulumi.Input<boolean>;
    /**
     * Import RTs for this Virtual Network.
     */
    importRouteTargets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enables IPv4 within the Virtual Network. Default: true
     */
    ipv4ConnectivityEnabled?: pulumi.Input<boolean>;
    /**
     * IPv4 subnet associated with the Virtual Network. When not specified, a prefix from within the IPv4 Resource Pool
     * assigned to the `virtual_network_svi_subnets` role will be automatically assigned by Apstra.
     */
    ipv4Subnet?: pulumi.Input<string>;
    /**
     * Specifies the IPv4 virtual gateway address within the Virtual Network. The configured value must be a valid IPv4 host
     * address configured value within range specified by `ipv4_subnet`
     */
    ipv4VirtualGateway?: pulumi.Input<string>;
    /**
     * Controls and indicates whether the IPv4 gateway within the Virtual Network is enabled. Requires
     * `ipv4_connectivity_enabled` to be `true`
     */
    ipv4VirtualGatewayEnabled?: pulumi.Input<boolean>;
    /**
     * Enables IPv6 within the Virtual Network. Default: false
     */
    ipv6ConnectivityEnabled?: pulumi.Input<boolean>;
    /**
     * IPv6 subnet associated with the Virtual Network. When not specified, a prefix from within the IPv6 Resource Pool
     * assigned to the `virtual_network_svi_subnets_ipv6` role will be automatically assigned by Apstra.
     */
    ipv6Subnet?: pulumi.Input<string>;
    /**
     * Specifies the IPv6 virtual gateway address within the Virtual Network. The configured value must be a valid IPv6 host
     * address configured value within range specified by `ipv6_subnet`
     */
    ipv6VirtualGateway?: pulumi.Input<string>;
    /**
     * Controls and indicates whether the IPv6 gateway within the Virtual Network is enabled. Requires
     * `ipv6_connectivity_enabled` to be `true`
     */
    ipv6VirtualGatewayEnabled?: pulumi.Input<boolean>;
    /**
     * L3 MTU used by the L3 switch interfaces participating in the Virtual Network. Must be an even number between 1280 and
     * 9216. Requires Apstra 4.2.0 or later.
     */
    l3Mtu?: pulumi.Input<number>;
    /**
     * Virtual Network Name
     */
    name?: pulumi.Input<string>;
    /**
     * For use only with `vxlan` type Virtual networks when all `bindings` use the same VLAN ID. This option reserves the VLAN
     * fabric-wide, even on switches to which the Virtual Network has not yet been deployed. The only accepted values is
     * `true`.
     */
    reserveVlan?: pulumi.Input<boolean>;
    /**
     * Routing Zone ID (required when `type == vxlan`
     */
    routingZoneId?: pulumi.Input<string>;
    /**
     * Virtual Network Type
     */
    type?: pulumi.Input<string>;
    /**
     * EVPN Virtual Network ID to be associated with this Virtual Network. When omitted, Apstra chooses a VNI from the Resource
     * Pool allocated to role `vni_virtual_network_ids`.
     */
    vni?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a DatacenterVirtualNetwork resource.
 */
export interface DatacenterVirtualNetworkArgs {
    /**
     * Bindings make a Virtual Network available on Leaf Switches and Access Switches. At least one binding entry is required.
     * The value is a map keyed by graph db node IDs of *either* Leaf Switches (non-redundant Leaf Switches) or Leaf Switch
     * redundancy groups (redundant Leaf Switches). Practitioners are encouraged to consider using the
     * `apstra.getDatacenterVirtualNetworkBindingConstructor` data source to populate this map.
     */
    bindings: pulumi.Input<{[key: string]: pulumi.Input<inputs.DatacenterVirtualNetworkBindings>}>;
    /**
     * Blueprint ID
     */
    blueprintId: pulumi.Input<string>;
    /**
     * Enables a DHCP relay agent.
     */
    dhcpServiceEnabled?: pulumi.Input<boolean>;
    /**
     * Export RTs for this Virtual Network.
     */
    exportRouteTargets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Import RTs for this Virtual Network.
     */
    importRouteTargets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enables IPv4 within the Virtual Network. Default: true
     */
    ipv4ConnectivityEnabled?: pulumi.Input<boolean>;
    /**
     * IPv4 subnet associated with the Virtual Network. When not specified, a prefix from within the IPv4 Resource Pool
     * assigned to the `virtual_network_svi_subnets` role will be automatically assigned by Apstra.
     */
    ipv4Subnet?: pulumi.Input<string>;
    /**
     * Specifies the IPv4 virtual gateway address within the Virtual Network. The configured value must be a valid IPv4 host
     * address configured value within range specified by `ipv4_subnet`
     */
    ipv4VirtualGateway?: pulumi.Input<string>;
    /**
     * Controls and indicates whether the IPv4 gateway within the Virtual Network is enabled. Requires
     * `ipv4_connectivity_enabled` to be `true`
     */
    ipv4VirtualGatewayEnabled?: pulumi.Input<boolean>;
    /**
     * Enables IPv6 within the Virtual Network. Default: false
     */
    ipv6ConnectivityEnabled?: pulumi.Input<boolean>;
    /**
     * IPv6 subnet associated with the Virtual Network. When not specified, a prefix from within the IPv6 Resource Pool
     * assigned to the `virtual_network_svi_subnets_ipv6` role will be automatically assigned by Apstra.
     */
    ipv6Subnet?: pulumi.Input<string>;
    /**
     * Specifies the IPv6 virtual gateway address within the Virtual Network. The configured value must be a valid IPv6 host
     * address configured value within range specified by `ipv6_subnet`
     */
    ipv6VirtualGateway?: pulumi.Input<string>;
    /**
     * Controls and indicates whether the IPv6 gateway within the Virtual Network is enabled. Requires
     * `ipv6_connectivity_enabled` to be `true`
     */
    ipv6VirtualGatewayEnabled?: pulumi.Input<boolean>;
    /**
     * L3 MTU used by the L3 switch interfaces participating in the Virtual Network. Must be an even number between 1280 and
     * 9216. Requires Apstra 4.2.0 or later.
     */
    l3Mtu?: pulumi.Input<number>;
    /**
     * Virtual Network Name
     */
    name?: pulumi.Input<string>;
    /**
     * For use only with `vxlan` type Virtual networks when all `bindings` use the same VLAN ID. This option reserves the VLAN
     * fabric-wide, even on switches to which the Virtual Network has not yet been deployed. The only accepted values is
     * `true`.
     */
    reserveVlan?: pulumi.Input<boolean>;
    /**
     * Routing Zone ID (required when `type == vxlan`
     */
    routingZoneId?: pulumi.Input<string>;
    /**
     * Virtual Network Type
     */
    type?: pulumi.Input<string>;
    /**
     * EVPN Virtual Network ID to be associated with this Virtual Network. When omitted, Apstra chooses a VNI from the Resource
     * Pool allocated to role `vni_virtual_network_ids`.
     */
    vni?: pulumi.Input<number>;
}
