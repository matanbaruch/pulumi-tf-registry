// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class TemplateCollapsed extends pulumi.CustomResource {
    /**
     * Get an existing TemplateCollapsed resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TemplateCollapsedState, opts?: pulumi.CustomResourceOptions): TemplateCollapsed {
        return new TemplateCollapsed(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'apstra:index/templateCollapsed:TemplateCollapsed';

    /**
     * Returns true if the given object is an instance of TemplateCollapsed.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TemplateCollapsed {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TemplateCollapsed.__pulumiType;
    }

    /**
     * mesh_link_count integer
     */
    public readonly meshLinkCount!: pulumi.Output<number>;
    /**
     * mesh_link_speed details
     */
    public readonly meshLinkSpeed!: pulumi.Output<string>;
    /**
     * Apstra name of the Collapsed Template.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * rack type layer details
     */
    public /*out*/ readonly rackType!: pulumi.Output<outputs.TemplateCollapsedRackType>;
    /**
     * rack type id
     */
    public readonly rackTypeId!: pulumi.Output<string>;

    /**
     * Create a TemplateCollapsed resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TemplateCollapsedArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TemplateCollapsedArgs | TemplateCollapsedState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TemplateCollapsedState | undefined;
            resourceInputs["meshLinkCount"] = state ? state.meshLinkCount : undefined;
            resourceInputs["meshLinkSpeed"] = state ? state.meshLinkSpeed : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["rackType"] = state ? state.rackType : undefined;
            resourceInputs["rackTypeId"] = state ? state.rackTypeId : undefined;
        } else {
            const args = argsOrState as TemplateCollapsedArgs | undefined;
            if ((!args || args.meshLinkCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'meshLinkCount'");
            }
            if ((!args || args.meshLinkSpeed === undefined) && !opts.urn) {
                throw new Error("Missing required property 'meshLinkSpeed'");
            }
            if ((!args || args.rackTypeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rackTypeId'");
            }
            resourceInputs["meshLinkCount"] = args ? args.meshLinkCount : undefined;
            resourceInputs["meshLinkSpeed"] = args ? args.meshLinkSpeed : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["rackTypeId"] = args ? args.rackTypeId : undefined;
            resourceInputs["rackType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TemplateCollapsed.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering TemplateCollapsed resources.
 */
export interface TemplateCollapsedState {
    /**
     * mesh_link_count integer
     */
    meshLinkCount?: pulumi.Input<number>;
    /**
     * mesh_link_speed details
     */
    meshLinkSpeed?: pulumi.Input<string>;
    /**
     * Apstra name of the Collapsed Template.
     */
    name?: pulumi.Input<string>;
    /**
     * rack type layer details
     */
    rackType?: pulumi.Input<inputs.TemplateCollapsedRackType>;
    /**
     * rack type id
     */
    rackTypeId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TemplateCollapsed resource.
 */
export interface TemplateCollapsedArgs {
    /**
     * mesh_link_count integer
     */
    meshLinkCount: pulumi.Input<number>;
    /**
     * mesh_link_speed details
     */
    meshLinkSpeed: pulumi.Input<string>;
    /**
     * Apstra name of the Collapsed Template.
     */
    name?: pulumi.Input<string>;
    /**
     * rack type id
     */
    rackTypeId: pulumi.Input<string>;
}
