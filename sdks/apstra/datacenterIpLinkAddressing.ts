// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DatacenterIpLinkAddressing extends pulumi.CustomResource {
    /**
     * Get an existing DatacenterIpLinkAddressing resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatacenterIpLinkAddressingState, opts?: pulumi.CustomResourceOptions): DatacenterIpLinkAddressing {
        return new DatacenterIpLinkAddressing(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'apstra:index/datacenterIpLinkAddressing:DatacenterIpLinkAddressing';

    /**
     * Returns true if the given object is an instance of DatacenterIpLinkAddressing.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatacenterIpLinkAddressing {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatacenterIpLinkAddressing.__pulumiType;
    }

    /**
     * Apstra Blueprint ID.
     */
    public readonly blueprintId!: pulumi.Output<string>;
    /**
     * Apstra graph node ID of the node to which `generic` IP information will be associated.
     */
    public /*out*/ readonly genericInterfaceId!: pulumi.Output<string>;
    /**
     * IPv4 address in CIDR notation.
     */
    public readonly genericIpv4Address!: pulumi.Output<string | undefined>;
    /**
     * Allowed values: [`none`,`numbered`]
     */
    public readonly genericIpv4AddressType!: pulumi.Output<string>;
    /**
     * IPv6 address in CIDR notation.
     */
    public readonly genericIpv6Address!: pulumi.Output<string | undefined>;
    /**
     * Allowed values: [`link_local`,`none`,`numbered`]
     */
    public readonly genericIpv6AddressType!: pulumi.Output<string>;
    /**
     * Apstra graph node ID of the logical Link created by assigning a Connectivity Template with an IP Link primitive to a
     * switch port. Note that CT assignment will create a logical link for each IP Link primitive. This resource is concerned
     * with a single logical link. CTs which include multiple IP Link primitives may require multiple instances of this
     * resource.
     */
    public readonly linkId!: pulumi.Output<string>;
    /**
     * Apstra graph node ID of the node to which `switch` IP information will be associated.
     */
    public /*out*/ readonly switchInterfaceId!: pulumi.Output<string>;
    /**
     * IPv4 address in CIDR notation.
     */
    public readonly switchIpv4Address!: pulumi.Output<string | undefined>;
    /**
     * Allowed values: [`none`,`numbered`]
     */
    public readonly switchIpv4AddressType!: pulumi.Output<string>;
    /**
     * IPv6 address in CIDR notation.
     */
    public readonly switchIpv6Address!: pulumi.Output<string | undefined>;
    /**
     * Allowed values: [`link_local`,`none`,`numbered`]
     */
    public readonly switchIpv6AddressType!: pulumi.Output<string>;

    /**
     * Create a DatacenterIpLinkAddressing resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatacenterIpLinkAddressingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatacenterIpLinkAddressingArgs | DatacenterIpLinkAddressingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatacenterIpLinkAddressingState | undefined;
            resourceInputs["blueprintId"] = state ? state.blueprintId : undefined;
            resourceInputs["genericInterfaceId"] = state ? state.genericInterfaceId : undefined;
            resourceInputs["genericIpv4Address"] = state ? state.genericIpv4Address : undefined;
            resourceInputs["genericIpv4AddressType"] = state ? state.genericIpv4AddressType : undefined;
            resourceInputs["genericIpv6Address"] = state ? state.genericIpv6Address : undefined;
            resourceInputs["genericIpv6AddressType"] = state ? state.genericIpv6AddressType : undefined;
            resourceInputs["linkId"] = state ? state.linkId : undefined;
            resourceInputs["switchInterfaceId"] = state ? state.switchInterfaceId : undefined;
            resourceInputs["switchIpv4Address"] = state ? state.switchIpv4Address : undefined;
            resourceInputs["switchIpv4AddressType"] = state ? state.switchIpv4AddressType : undefined;
            resourceInputs["switchIpv6Address"] = state ? state.switchIpv6Address : undefined;
            resourceInputs["switchIpv6AddressType"] = state ? state.switchIpv6AddressType : undefined;
        } else {
            const args = argsOrState as DatacenterIpLinkAddressingArgs | undefined;
            if ((!args || args.blueprintId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'blueprintId'");
            }
            if ((!args || args.linkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'linkId'");
            }
            resourceInputs["blueprintId"] = args ? args.blueprintId : undefined;
            resourceInputs["genericIpv4Address"] = args ? args.genericIpv4Address : undefined;
            resourceInputs["genericIpv4AddressType"] = args ? args.genericIpv4AddressType : undefined;
            resourceInputs["genericIpv6Address"] = args ? args.genericIpv6Address : undefined;
            resourceInputs["genericIpv6AddressType"] = args ? args.genericIpv6AddressType : undefined;
            resourceInputs["linkId"] = args ? args.linkId : undefined;
            resourceInputs["switchIpv4Address"] = args ? args.switchIpv4Address : undefined;
            resourceInputs["switchIpv4AddressType"] = args ? args.switchIpv4AddressType : undefined;
            resourceInputs["switchIpv6Address"] = args ? args.switchIpv6Address : undefined;
            resourceInputs["switchIpv6AddressType"] = args ? args.switchIpv6AddressType : undefined;
            resourceInputs["genericInterfaceId"] = undefined /*out*/;
            resourceInputs["switchInterfaceId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatacenterIpLinkAddressing.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatacenterIpLinkAddressing resources.
 */
export interface DatacenterIpLinkAddressingState {
    /**
     * Apstra Blueprint ID.
     */
    blueprintId?: pulumi.Input<string>;
    /**
     * Apstra graph node ID of the node to which `generic` IP information will be associated.
     */
    genericInterfaceId?: pulumi.Input<string>;
    /**
     * IPv4 address in CIDR notation.
     */
    genericIpv4Address?: pulumi.Input<string>;
    /**
     * Allowed values: [`none`,`numbered`]
     */
    genericIpv4AddressType?: pulumi.Input<string>;
    /**
     * IPv6 address in CIDR notation.
     */
    genericIpv6Address?: pulumi.Input<string>;
    /**
     * Allowed values: [`link_local`,`none`,`numbered`]
     */
    genericIpv6AddressType?: pulumi.Input<string>;
    /**
     * Apstra graph node ID of the logical Link created by assigning a Connectivity Template with an IP Link primitive to a
     * switch port. Note that CT assignment will create a logical link for each IP Link primitive. This resource is concerned
     * with a single logical link. CTs which include multiple IP Link primitives may require multiple instances of this
     * resource.
     */
    linkId?: pulumi.Input<string>;
    /**
     * Apstra graph node ID of the node to which `switch` IP information will be associated.
     */
    switchInterfaceId?: pulumi.Input<string>;
    /**
     * IPv4 address in CIDR notation.
     */
    switchIpv4Address?: pulumi.Input<string>;
    /**
     * Allowed values: [`none`,`numbered`]
     */
    switchIpv4AddressType?: pulumi.Input<string>;
    /**
     * IPv6 address in CIDR notation.
     */
    switchIpv6Address?: pulumi.Input<string>;
    /**
     * Allowed values: [`link_local`,`none`,`numbered`]
     */
    switchIpv6AddressType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DatacenterIpLinkAddressing resource.
 */
export interface DatacenterIpLinkAddressingArgs {
    /**
     * Apstra Blueprint ID.
     */
    blueprintId: pulumi.Input<string>;
    /**
     * IPv4 address in CIDR notation.
     */
    genericIpv4Address?: pulumi.Input<string>;
    /**
     * Allowed values: [`none`,`numbered`]
     */
    genericIpv4AddressType?: pulumi.Input<string>;
    /**
     * IPv6 address in CIDR notation.
     */
    genericIpv6Address?: pulumi.Input<string>;
    /**
     * Allowed values: [`link_local`,`none`,`numbered`]
     */
    genericIpv6AddressType?: pulumi.Input<string>;
    /**
     * Apstra graph node ID of the logical Link created by assigning a Connectivity Template with an IP Link primitive to a
     * switch port. Note that CT assignment will create a logical link for each IP Link primitive. This resource is concerned
     * with a single logical link. CTs which include multiple IP Link primitives may require multiple instances of this
     * resource.
     */
    linkId: pulumi.Input<string>;
    /**
     * IPv4 address in CIDR notation.
     */
    switchIpv4Address?: pulumi.Input<string>;
    /**
     * Allowed values: [`none`,`numbered`]
     */
    switchIpv4AddressType?: pulumi.Input<string>;
    /**
     * IPv6 address in CIDR notation.
     */
    switchIpv6Address?: pulumi.Input<string>;
    /**
     * Allowed values: [`link_local`,`none`,`numbered`]
     */
    switchIpv6AddressType?: pulumi.Input<string>;
}
