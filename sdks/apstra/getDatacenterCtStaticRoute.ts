// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getDatacenterCtStaticRoute(args: GetDatacenterCtStaticRouteArgs, opts?: pulumi.InvokeOptions): Promise<GetDatacenterCtStaticRouteResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("apstra:index/getDatacenterCtStaticRoute:getDatacenterCtStaticRoute", {
        "name": args.name,
        "network": args.network,
        "shareIpEndpoint": args.shareIpEndpoint,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDatacenterCtStaticRoute.
 */
export interface GetDatacenterCtStaticRouteArgs {
    name?: string;
    network: string;
    shareIpEndpoint?: boolean;
}

/**
 * A collection of values returned by getDatacenterCtStaticRoute.
 */
export interface GetDatacenterCtStaticRouteResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly name?: string;
    readonly network: string;
    readonly primitive: string;
    readonly shareIpEndpoint?: boolean;
}
export function getDatacenterCtStaticRouteOutput(args: GetDatacenterCtStaticRouteOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDatacenterCtStaticRouteResult> {
    return pulumi.output(args).apply((a: any) => getDatacenterCtStaticRoute(a, opts))
}

/**
 * A collection of arguments for invoking getDatacenterCtStaticRoute.
 */
export interface GetDatacenterCtStaticRouteOutputArgs {
    name?: pulumi.Input<string>;
    network: pulumi.Input<string>;
    shareIpEndpoint?: pulumi.Input<boolean>;
}
