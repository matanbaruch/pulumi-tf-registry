// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getDatacenterCtRoutingZoneConstraint(args: GetDatacenterCtRoutingZoneConstraintArgs, opts?: pulumi.InvokeOptions): Promise<GetDatacenterCtRoutingZoneConstraintResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("apstra:index/getDatacenterCtRoutingZoneConstraint:getDatacenterCtRoutingZoneConstraint", {
        "name": args.name,
        "routingZoneConstraintId": args.routingZoneConstraintId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDatacenterCtRoutingZoneConstraint.
 */
export interface GetDatacenterCtRoutingZoneConstraintArgs {
    name?: string;
    routingZoneConstraintId: string;
}

/**
 * A collection of values returned by getDatacenterCtRoutingZoneConstraint.
 */
export interface GetDatacenterCtRoutingZoneConstraintResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly name?: string;
    readonly primitive: string;
    readonly routingZoneConstraintId: string;
}
export function getDatacenterCtRoutingZoneConstraintOutput(args: GetDatacenterCtRoutingZoneConstraintOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDatacenterCtRoutingZoneConstraintResult> {
    return pulumi.output(args).apply((a: any) => getDatacenterCtRoutingZoneConstraint(a, opts))
}

/**
 * A collection of arguments for invoking getDatacenterCtRoutingZoneConstraint.
 */
export interface GetDatacenterCtRoutingZoneConstraintOutputArgs {
    name?: pulumi.Input<string>;
    routingZoneConstraintId: pulumi.Input<string>;
}
