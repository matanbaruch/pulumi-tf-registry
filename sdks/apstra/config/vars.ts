// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

declare var exports: any;
const __config = new pulumi.Config("apstra");

/**
 * Timeout in seconds for completing API transactions with the Apstra server. Omit for default value of 10 seconds. Value
 * of 0 results in infinite timeout.
 */
export declare const apiTimeout: number | undefined;
Object.defineProperty(exports, "apiTimeout", {
    get() {
        return __config.getObject<number>("apiTimeout");
    },
    enumerable: true,
});

export declare const blueprintMutexEnabled: boolean | undefined;
Object.defineProperty(exports, "blueprintMutexEnabled", {
    get() {
        return __config.getObject<boolean>("blueprintMutexEnabled");
    },
    enumerable: true,
});

export declare const blueprintMutexMessage: string | undefined;
Object.defineProperty(exports, "blueprintMutexMessage", {
    get() {
        return __config.get("blueprintMutexMessage");
    },
    enumerable: true,
});

export declare const envVarPrefix: string | undefined;
Object.defineProperty(exports, "envVarPrefix", {
    get() {
        return __config.get("envVarPrefix");
    },
    enumerable: true,
});

/**
 * Enable *experimental* features. In this release that means: - Set the `experimental` flag in the underlying Apstra SDK
 * client object. Doing so permits connections to Apstra instances not supported by the SDK.
 */
export declare const experimental: boolean | undefined;
Object.defineProperty(exports, "experimental", {
    get() {
        return __config.getObject<boolean>("experimental");
    },
    enumerable: true,
});

/**
 * Set 'true' to disable TLS certificate validation.
 */
export declare const tlsValidationDisabled: boolean | undefined;
Object.defineProperty(exports, "tlsValidationDisabled", {
    get() {
        return __config.getObject<boolean>("tlsValidationDisabled");
    },
    enumerable: true,
});

/**
 * URL of the apstra server, e.g. `https://apstra.example.com` It is possible to include Apstra API credentials in the URL
 * using [standard syntax](https://datatracker.ietf.org/doc/html/rfc1738#section-3.1). Care should be taken to ensure that
 * these credentials aren't accidentally committed to version control, etc... The preferred approach is to pass the
 * credentials as environment variables `APSTRA_USER` and `APSTRA_PASS`. If `url` is omitted, environment variable
 * `APSTRA_URL` can be used to in its place. When the username or password are embedded in the URL string, any special
 * characters must be URL-encoded. For example, `pass^word` would become `pass%5eword`.
 */
export declare const url: string | undefined;
Object.defineProperty(exports, "url", {
    get() {
        return __config.get("url");
    },
    enumerable: true,
});

