// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DatacenterConnectivityTemplateAssignments extends pulumi.CustomResource {
    /**
     * Get an existing DatacenterConnectivityTemplateAssignments resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatacenterConnectivityTemplateAssignmentsState, opts?: pulumi.CustomResourceOptions): DatacenterConnectivityTemplateAssignments {
        return new DatacenterConnectivityTemplateAssignments(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'apstra:index/datacenterConnectivityTemplateAssignments:DatacenterConnectivityTemplateAssignments';

    /**
     * Returns true if the given object is an instance of DatacenterConnectivityTemplateAssignments.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatacenterConnectivityTemplateAssignments {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatacenterConnectivityTemplateAssignments.__pulumiType;
    }

    /**
     * Set of Apstra node IDs of the Interfaces or Systems where the Connectivity Template should be applied.
     */
    public readonly applicationPointIds!: pulumi.Output<string[]>;
    /**
     * Apstra Blueprint ID.
     */
    public readonly blueprintId!: pulumi.Output<string>;
    /**
     * Connectivity Template ID which should be applied to the Application Points.
     */
    public readonly connectivityTemplateId!: pulumi.Output<string>;
    /**
     * When `true`, the read-only `ip_link_ids` attribute will be populated. Default behavior skips retrieving `ip_link_ids` to
     * improve performance in scenarios where this information is not needed.
     */
    public readonly fetchIpLinkIds!: pulumi.Output<boolean | undefined>;
    /**
     * New Logical Links are created when Connectivity Templates containing *IP Link* primitives are attached to a switch
     * interface. These logical links may or may not be VLAN-tagged. This attribute is a two-dimensional map. The outer map is
     * keyed by Application Point ID. The inner map is keyed by VLAN number. Untagged Logical Links are represented in the
     * inner map by key `0`. **Note:** requires `fetch_iplink_ids = true`
     */
    public /*out*/ readonly ipLinkIds!: pulumi.Output<{[key: string]: {[key: string]: string}}>;

    /**
     * Create a DatacenterConnectivityTemplateAssignments resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatacenterConnectivityTemplateAssignmentsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatacenterConnectivityTemplateAssignmentsArgs | DatacenterConnectivityTemplateAssignmentsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatacenterConnectivityTemplateAssignmentsState | undefined;
            resourceInputs["applicationPointIds"] = state ? state.applicationPointIds : undefined;
            resourceInputs["blueprintId"] = state ? state.blueprintId : undefined;
            resourceInputs["connectivityTemplateId"] = state ? state.connectivityTemplateId : undefined;
            resourceInputs["fetchIpLinkIds"] = state ? state.fetchIpLinkIds : undefined;
            resourceInputs["ipLinkIds"] = state ? state.ipLinkIds : undefined;
        } else {
            const args = argsOrState as DatacenterConnectivityTemplateAssignmentsArgs | undefined;
            if ((!args || args.applicationPointIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationPointIds'");
            }
            if ((!args || args.blueprintId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'blueprintId'");
            }
            if ((!args || args.connectivityTemplateId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectivityTemplateId'");
            }
            resourceInputs["applicationPointIds"] = args ? args.applicationPointIds : undefined;
            resourceInputs["blueprintId"] = args ? args.blueprintId : undefined;
            resourceInputs["connectivityTemplateId"] = args ? args.connectivityTemplateId : undefined;
            resourceInputs["fetchIpLinkIds"] = args ? args.fetchIpLinkIds : undefined;
            resourceInputs["ipLinkIds"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatacenterConnectivityTemplateAssignments.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatacenterConnectivityTemplateAssignments resources.
 */
export interface DatacenterConnectivityTemplateAssignmentsState {
    /**
     * Set of Apstra node IDs of the Interfaces or Systems where the Connectivity Template should be applied.
     */
    applicationPointIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Apstra Blueprint ID.
     */
    blueprintId?: pulumi.Input<string>;
    /**
     * Connectivity Template ID which should be applied to the Application Points.
     */
    connectivityTemplateId?: pulumi.Input<string>;
    /**
     * When `true`, the read-only `ip_link_ids` attribute will be populated. Default behavior skips retrieving `ip_link_ids` to
     * improve performance in scenarios where this information is not needed.
     */
    fetchIpLinkIds?: pulumi.Input<boolean>;
    /**
     * New Logical Links are created when Connectivity Templates containing *IP Link* primitives are attached to a switch
     * interface. These logical links may or may not be VLAN-tagged. This attribute is a two-dimensional map. The outer map is
     * keyed by Application Point ID. The inner map is keyed by VLAN number. Untagged Logical Links are represented in the
     * inner map by key `0`. **Note:** requires `fetch_iplink_ids = true`
     */
    ipLinkIds?: pulumi.Input<{[key: string]: pulumi.Input<{[key: string]: pulumi.Input<string>}>}>;
}

/**
 * The set of arguments for constructing a DatacenterConnectivityTemplateAssignments resource.
 */
export interface DatacenterConnectivityTemplateAssignmentsArgs {
    /**
     * Set of Apstra node IDs of the Interfaces or Systems where the Connectivity Template should be applied.
     */
    applicationPointIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Apstra Blueprint ID.
     */
    blueprintId: pulumi.Input<string>;
    /**
     * Connectivity Template ID which should be applied to the Application Points.
     */
    connectivityTemplateId: pulumi.Input<string>;
    /**
     * When `true`, the read-only `ip_link_ids` attribute will be populated. Default behavior skips retrieving `ip_link_ids` to
     * improve performance in scenarios where this information is not needed.
     */
    fetchIpLinkIds?: pulumi.Input<boolean>;
}
