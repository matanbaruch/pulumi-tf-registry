// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The provider type for the apstra package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
export class Provider extends pulumi.ProviderResource {
    /** @internal */
    public static readonly __pulumiType = 'apstra';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === "pulumi:providers:" + Provider.__pulumiType;
    }

    public readonly blueprintMutexMessage!: pulumi.Output<string | undefined>;
    public readonly envVarPrefix!: pulumi.Output<string | undefined>;
    /**
     * URL of the apstra server, e.g. `https://apstra.example.com` It is possible to include Apstra API credentials in the URL
     * using [standard syntax](https://datatracker.ietf.org/doc/html/rfc1738#section-3.1). Care should be taken to ensure that
     * these credentials aren't accidentally committed to version control, etc... The preferred approach is to pass the
     * credentials as environment variables `APSTRA_USER` and `APSTRA_PASS`. If `url` is omitted, environment variable
     * `APSTRA_URL` can be used to in its place. When the username or password are embedded in the URL string, any special
     * characters must be URL-encoded. For example, `pass^word` would become `pass%5eword`.
     */
    public readonly url!: pulumi.Output<string | undefined>;

    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        {
            resourceInputs["apiTimeout"] = pulumi.output(args ? args.apiTimeout : undefined).apply(JSON.stringify);
            resourceInputs["blueprintMutexEnabled"] = pulumi.output(args ? args.blueprintMutexEnabled : undefined).apply(JSON.stringify);
            resourceInputs["blueprintMutexMessage"] = args ? args.blueprintMutexMessage : undefined;
            resourceInputs["envVarPrefix"] = args ? args.envVarPrefix : undefined;
            resourceInputs["experimental"] = pulumi.output(args ? args.experimental : undefined).apply(JSON.stringify);
            resourceInputs["tlsValidationDisabled"] = pulumi.output(args ? args.tlsValidationDisabled : undefined).apply(JSON.stringify);
            resourceInputs["url"] = args ? args.url : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Provider.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    /**
     * Timeout in seconds for completing API transactions with the Apstra server. Omit for default value of 10 seconds. Value
     * of 0 results in infinite timeout.
     */
    apiTimeout?: pulumi.Input<number>;
    blueprintMutexEnabled?: pulumi.Input<boolean>;
    blueprintMutexMessage?: pulumi.Input<string>;
    envVarPrefix?: pulumi.Input<string>;
    /**
     * Enable *experimental* features. In this release that means: - Set the `experimental` flag in the underlying Apstra SDK
     * client object. Doing so permits connections to Apstra instances not supported by the SDK.
     */
    experimental?: pulumi.Input<boolean>;
    /**
     * Set 'true' to disable TLS certificate validation.
     */
    tlsValidationDisabled?: pulumi.Input<boolean>;
    /**
     * URL of the apstra server, e.g. `https://apstra.example.com` It is possible to include Apstra API credentials in the URL
     * using [standard syntax](https://datatracker.ietf.org/doc/html/rfc1738#section-3.1). Care should be taken to ensure that
     * these credentials aren't accidentally committed to version control, etc... The preferred approach is to pass the
     * credentials as environment variables `APSTRA_USER` and `APSTRA_PASS`. If `url` is omitted, environment variable
     * `APSTRA_URL` can be used to in its place. When the username or password are embedded in the URL string, any special
     * characters must be URL-encoded. For example, `pass^word` would become `pass%5eword`.
     */
    url?: pulumi.Input<string>;
}
