// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatacenterDeviceAllocation extends pulumi.CustomResource {
    /**
     * Get an existing DatacenterDeviceAllocation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatacenterDeviceAllocationState, opts?: pulumi.CustomResourceOptions): DatacenterDeviceAllocation {
        return new DatacenterDeviceAllocation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'apstra:index/datacenterDeviceAllocation:DatacenterDeviceAllocation';

    /**
     * Returns true if the given object is an instance of DatacenterDeviceAllocation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatacenterDeviceAllocation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatacenterDeviceAllocation.__pulumiType;
    }

    /**
     * Apstra Blueprint ID.
     */
    public readonly blueprintId!: pulumi.Output<string>;
    /**
     * Set the [deploy
     * mode](https://www.juniper.net/documentation/us/en/software/apstra4.1/apstra-user-guide/topics/topic-map/datacenter-deploy-mode-set.html)
     * of the associated fabric node.
     *
     * @deprecated Deprecated
     */
    public readonly deployMode!: pulumi.Output<string>;
    /**
     * Unique ID for a Managed Device, generally the serial number, used to assign a Managed Device to a fabric role.
     */
    public readonly deviceKey!: pulumi.Output<string | undefined>;
    /**
     * Device Profiles specify attributes of specific hardware models.
     */
    public /*out*/ readonly deviceProfileNodeId!: pulumi.Output<string>;
    /**
     * Interface Maps link a Logical Device (fabric design element) to a Device Profile (description of a specific hardware
     * model). The value of this field must be the graph node ID (bootstrapped from Global Catalog ID) of an Interface Map. A
     * value is required when `device_key` is omitted, or when `device_key` is supplied, but does not provide enough
     * information to automatically select an Interface Map. The ID is used only at resource creation (in the initial `apply`
     * operation) and for replacement when the configuration is modified. Apstra flexible fabric expansion operations should
     * not trigger state churn due to the current Interface Map ID being inconsistent with the configured value.
     */
    public readonly initialInterfaceMapId!: pulumi.Output<string>;
    public /*out*/ readonly interfaceMapName!: pulumi.Output<string>;
    /**
     * Graph node ID of the fabric node to which we're allocating an Interface Map (and possibly a Managed Device.)
     */
    public /*out*/ readonly nodeId!: pulumi.Output<string>;
    /**
     * Graph node label which identifies the system at the time this resource is initially created. Strings like 'spine1' and
     * 'rack_002_leaf_1' are appropriate here.
     */
    public readonly nodeName!: pulumi.Output<string>;
    public readonly systemAttributes!: pulumi.Output<outputs.DatacenterDeviceAllocationSystemAttributes>;

    /**
     * Create a DatacenterDeviceAllocation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatacenterDeviceAllocationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatacenterDeviceAllocationArgs | DatacenterDeviceAllocationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatacenterDeviceAllocationState | undefined;
            resourceInputs["blueprintId"] = state ? state.blueprintId : undefined;
            resourceInputs["deployMode"] = state ? state.deployMode : undefined;
            resourceInputs["deviceKey"] = state ? state.deviceKey : undefined;
            resourceInputs["deviceProfileNodeId"] = state ? state.deviceProfileNodeId : undefined;
            resourceInputs["initialInterfaceMapId"] = state ? state.initialInterfaceMapId : undefined;
            resourceInputs["interfaceMapName"] = state ? state.interfaceMapName : undefined;
            resourceInputs["nodeId"] = state ? state.nodeId : undefined;
            resourceInputs["nodeName"] = state ? state.nodeName : undefined;
            resourceInputs["systemAttributes"] = state ? state.systemAttributes : undefined;
        } else {
            const args = argsOrState as DatacenterDeviceAllocationArgs | undefined;
            if ((!args || args.blueprintId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'blueprintId'");
            }
            if ((!args || args.nodeName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeName'");
            }
            resourceInputs["blueprintId"] = args ? args.blueprintId : undefined;
            resourceInputs["deployMode"] = args ? args.deployMode : undefined;
            resourceInputs["deviceKey"] = args ? args.deviceKey : undefined;
            resourceInputs["initialInterfaceMapId"] = args ? args.initialInterfaceMapId : undefined;
            resourceInputs["nodeName"] = args ? args.nodeName : undefined;
            resourceInputs["systemAttributes"] = args ? args.systemAttributes : undefined;
            resourceInputs["deviceProfileNodeId"] = undefined /*out*/;
            resourceInputs["interfaceMapName"] = undefined /*out*/;
            resourceInputs["nodeId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatacenterDeviceAllocation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatacenterDeviceAllocation resources.
 */
export interface DatacenterDeviceAllocationState {
    /**
     * Apstra Blueprint ID.
     */
    blueprintId?: pulumi.Input<string>;
    /**
     * Set the [deploy
     * mode](https://www.juniper.net/documentation/us/en/software/apstra4.1/apstra-user-guide/topics/topic-map/datacenter-deploy-mode-set.html)
     * of the associated fabric node.
     *
     * @deprecated Deprecated
     */
    deployMode?: pulumi.Input<string>;
    /**
     * Unique ID for a Managed Device, generally the serial number, used to assign a Managed Device to a fabric role.
     */
    deviceKey?: pulumi.Input<string>;
    /**
     * Device Profiles specify attributes of specific hardware models.
     */
    deviceProfileNodeId?: pulumi.Input<string>;
    /**
     * Interface Maps link a Logical Device (fabric design element) to a Device Profile (description of a specific hardware
     * model). The value of this field must be the graph node ID (bootstrapped from Global Catalog ID) of an Interface Map. A
     * value is required when `device_key` is omitted, or when `device_key` is supplied, but does not provide enough
     * information to automatically select an Interface Map. The ID is used only at resource creation (in the initial `apply`
     * operation) and for replacement when the configuration is modified. Apstra flexible fabric expansion operations should
     * not trigger state churn due to the current Interface Map ID being inconsistent with the configured value.
     */
    initialInterfaceMapId?: pulumi.Input<string>;
    interfaceMapName?: pulumi.Input<string>;
    /**
     * Graph node ID of the fabric node to which we're allocating an Interface Map (and possibly a Managed Device.)
     */
    nodeId?: pulumi.Input<string>;
    /**
     * Graph node label which identifies the system at the time this resource is initially created. Strings like 'spine1' and
     * 'rack_002_leaf_1' are appropriate here.
     */
    nodeName?: pulumi.Input<string>;
    systemAttributes?: pulumi.Input<inputs.DatacenterDeviceAllocationSystemAttributes>;
}

/**
 * The set of arguments for constructing a DatacenterDeviceAllocation resource.
 */
export interface DatacenterDeviceAllocationArgs {
    /**
     * Apstra Blueprint ID.
     */
    blueprintId: pulumi.Input<string>;
    /**
     * Set the [deploy
     * mode](https://www.juniper.net/documentation/us/en/software/apstra4.1/apstra-user-guide/topics/topic-map/datacenter-deploy-mode-set.html)
     * of the associated fabric node.
     *
     * @deprecated Deprecated
     */
    deployMode?: pulumi.Input<string>;
    /**
     * Unique ID for a Managed Device, generally the serial number, used to assign a Managed Device to a fabric role.
     */
    deviceKey?: pulumi.Input<string>;
    /**
     * Interface Maps link a Logical Device (fabric design element) to a Device Profile (description of a specific hardware
     * model). The value of this field must be the graph node ID (bootstrapped from Global Catalog ID) of an Interface Map. A
     * value is required when `device_key` is omitted, or when `device_key` is supplied, but does not provide enough
     * information to automatically select an Interface Map. The ID is used only at resource creation (in the initial `apply`
     * operation) and for replacement when the configuration is modified. Apstra flexible fabric expansion operations should
     * not trigger state churn due to the current Interface Map ID being inconsistent with the configured value.
     */
    initialInterfaceMapId?: pulumi.Input<string>;
    /**
     * Graph node label which identifies the system at the time this resource is initially created. Strings like 'spine1' and
     * 'rack_002_leaf_1' are appropriate here.
     */
    nodeName: pulumi.Input<string>;
    systemAttributes?: pulumi.Input<inputs.DatacenterDeviceAllocationSystemAttributes>;
}
