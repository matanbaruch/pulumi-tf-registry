// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatacenterConfiglet extends pulumi.CustomResource {
    /**
     * Get an existing DatacenterConfiglet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatacenterConfigletState, opts?: pulumi.CustomResourceOptions): DatacenterConfiglet {
        return new DatacenterConfiglet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'apstra:index/datacenterConfiglet:DatacenterConfiglet';

    /**
     * Returns true if the given object is an instance of DatacenterConfiglet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatacenterConfiglet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatacenterConfiglet.__pulumiType;
    }

    /**
     * Apstra Blueprint ID. Used to identify the Blueprint that the Configlet belongs to.
     */
    public readonly blueprintId!: pulumi.Output<string>;
    /**
     * Id of the catalog configlet to be imported. This is an alternative to specifying the `generators` attribute
     */
    public readonly catalogConfigletId!: pulumi.Output<string | undefined>;
    /**
     * Condition determines where the Configlet is applied.
     */
    public readonly condition!: pulumi.Output<string>;
    /**
     * Ordered list of Generators. This is an alternative to specifying the `catalog_configlet_id` attribute
     */
    public readonly generators!: pulumi.Output<outputs.DatacenterConfigletGenerator[]>;
    /**
     * Configlet name. When omitted, the name found in the catalog configlet will be used. Required when the `generators`
     * attribute is specified.
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a DatacenterConfiglet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatacenterConfigletArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatacenterConfigletArgs | DatacenterConfigletState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatacenterConfigletState | undefined;
            resourceInputs["blueprintId"] = state ? state.blueprintId : undefined;
            resourceInputs["catalogConfigletId"] = state ? state.catalogConfigletId : undefined;
            resourceInputs["condition"] = state ? state.condition : undefined;
            resourceInputs["generators"] = state ? state.generators : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as DatacenterConfigletArgs | undefined;
            if ((!args || args.blueprintId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'blueprintId'");
            }
            if ((!args || args.condition === undefined) && !opts.urn) {
                throw new Error("Missing required property 'condition'");
            }
            resourceInputs["blueprintId"] = args ? args.blueprintId : undefined;
            resourceInputs["catalogConfigletId"] = args ? args.catalogConfigletId : undefined;
            resourceInputs["condition"] = args ? args.condition : undefined;
            resourceInputs["generators"] = args ? args.generators : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatacenterConfiglet.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatacenterConfiglet resources.
 */
export interface DatacenterConfigletState {
    /**
     * Apstra Blueprint ID. Used to identify the Blueprint that the Configlet belongs to.
     */
    blueprintId?: pulumi.Input<string>;
    /**
     * Id of the catalog configlet to be imported. This is an alternative to specifying the `generators` attribute
     */
    catalogConfigletId?: pulumi.Input<string>;
    /**
     * Condition determines where the Configlet is applied.
     */
    condition?: pulumi.Input<string>;
    /**
     * Ordered list of Generators. This is an alternative to specifying the `catalog_configlet_id` attribute
     */
    generators?: pulumi.Input<pulumi.Input<inputs.DatacenterConfigletGenerator>[]>;
    /**
     * Configlet name. When omitted, the name found in the catalog configlet will be used. Required when the `generators`
     * attribute is specified.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DatacenterConfiglet resource.
 */
export interface DatacenterConfigletArgs {
    /**
     * Apstra Blueprint ID. Used to identify the Blueprint that the Configlet belongs to.
     */
    blueprintId: pulumi.Input<string>;
    /**
     * Id of the catalog configlet to be imported. This is an alternative to specifying the `generators` attribute
     */
    catalogConfigletId?: pulumi.Input<string>;
    /**
     * Condition determines where the Configlet is applied.
     */
    condition: pulumi.Input<string>;
    /**
     * Ordered list of Generators. This is an alternative to specifying the `catalog_configlet_id` attribute
     */
    generators?: pulumi.Input<pulumi.Input<inputs.DatacenterConfigletGenerator>[]>;
    /**
     * Configlet name. When omitted, the name found in the catalog configlet will be used. Required when the `generators`
     * attribute is specified.
     */
    name?: pulumi.Input<string>;
}
