// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getDatacenterCtVirtualNetworkSingle(args: GetDatacenterCtVirtualNetworkSingleArgs, opts?: pulumi.InvokeOptions): Promise<GetDatacenterCtVirtualNetworkSingleResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("apstra:index/getDatacenterCtVirtualNetworkSingle:getDatacenterCtVirtualNetworkSingle", {
        "childPrimitives": args.childPrimitives,
        "name": args.name,
        "tagged": args.tagged,
        "vnId": args.vnId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDatacenterCtVirtualNetworkSingle.
 */
export interface GetDatacenterCtVirtualNetworkSingleArgs {
    childPrimitives?: string[];
    name?: string;
    tagged?: boolean;
    vnId: string;
}

/**
 * A collection of values returned by getDatacenterCtVirtualNetworkSingle.
 */
export interface GetDatacenterCtVirtualNetworkSingleResult {
    readonly childPrimitives?: string[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly name?: string;
    readonly primitive: string;
    readonly tagged?: boolean;
    readonly vnId: string;
}
export function getDatacenterCtVirtualNetworkSingleOutput(args: GetDatacenterCtVirtualNetworkSingleOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDatacenterCtVirtualNetworkSingleResult> {
    return pulumi.output(args).apply((a: any) => getDatacenterCtVirtualNetworkSingle(a, opts))
}

/**
 * A collection of arguments for invoking getDatacenterCtVirtualNetworkSingle.
 */
export interface GetDatacenterCtVirtualNetworkSingleOutputArgs {
    childPrimitives?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    tagged?: pulumi.Input<boolean>;
    vnId: pulumi.Input<string>;
}
