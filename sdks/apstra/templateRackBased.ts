// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class TemplateRackBased extends pulumi.CustomResource {
    /**
     * Get an existing TemplateRackBased resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TemplateRackBasedState, opts?: pulumi.CustomResourceOptions): TemplateRackBased {
        return new TemplateRackBased(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'apstra:index/templateRackBased:TemplateRackBased';

    /**
     * Returns true if the given object is an instance of TemplateRackBased.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TemplateRackBased {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TemplateRackBased.__pulumiType;
    }

    /**
     * "unique" is for 3-stage designs; "single" is for 5-stage designs.
     */
    public readonly asnAllocationScheme!: pulumi.Output<string>;
    /**
     * Fabric addressing scheme for Spine/Leaf links. Required for Apstra <= 4.1.0, not supported by Apstra >= 4.1.1.
     */
    public readonly fabricLinkAddressing!: pulumi.Output<string>;
    /**
     * Apstra name of the Rack Based Template.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Defines the inter-rack virtual network overlay protocol in the fabric. ["evpn","static"]
     */
    public readonly overlayControlProtocol!: pulumi.Output<string>;
    /**
     * Map of Rack Type info (count + details) keyed by Rack Type ID.
     */
    public readonly rackInfos!: pulumi.Output<{[key: string]: outputs.TemplateRackBasedRackInfos}>;
    /**
     * Spine layer details
     */
    public readonly spine!: pulumi.Output<outputs.TemplateRackBasedSpine>;

    /**
     * Create a TemplateRackBased resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TemplateRackBasedArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TemplateRackBasedArgs | TemplateRackBasedState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TemplateRackBasedState | undefined;
            resourceInputs["asnAllocationScheme"] = state ? state.asnAllocationScheme : undefined;
            resourceInputs["fabricLinkAddressing"] = state ? state.fabricLinkAddressing : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["overlayControlProtocol"] = state ? state.overlayControlProtocol : undefined;
            resourceInputs["rackInfos"] = state ? state.rackInfos : undefined;
            resourceInputs["spine"] = state ? state.spine : undefined;
        } else {
            const args = argsOrState as TemplateRackBasedArgs | undefined;
            if ((!args || args.asnAllocationScheme === undefined) && !opts.urn) {
                throw new Error("Missing required property 'asnAllocationScheme'");
            }
            if ((!args || args.overlayControlProtocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'overlayControlProtocol'");
            }
            if ((!args || args.rackInfos === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rackInfos'");
            }
            if ((!args || args.spine === undefined) && !opts.urn) {
                throw new Error("Missing required property 'spine'");
            }
            resourceInputs["asnAllocationScheme"] = args ? args.asnAllocationScheme : undefined;
            resourceInputs["fabricLinkAddressing"] = args ? args.fabricLinkAddressing : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["overlayControlProtocol"] = args ? args.overlayControlProtocol : undefined;
            resourceInputs["rackInfos"] = args ? args.rackInfos : undefined;
            resourceInputs["spine"] = args ? args.spine : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TemplateRackBased.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering TemplateRackBased resources.
 */
export interface TemplateRackBasedState {
    /**
     * "unique" is for 3-stage designs; "single" is for 5-stage designs.
     */
    asnAllocationScheme?: pulumi.Input<string>;
    /**
     * Fabric addressing scheme for Spine/Leaf links. Required for Apstra <= 4.1.0, not supported by Apstra >= 4.1.1.
     */
    fabricLinkAddressing?: pulumi.Input<string>;
    /**
     * Apstra name of the Rack Based Template.
     */
    name?: pulumi.Input<string>;
    /**
     * Defines the inter-rack virtual network overlay protocol in the fabric. ["evpn","static"]
     */
    overlayControlProtocol?: pulumi.Input<string>;
    /**
     * Map of Rack Type info (count + details) keyed by Rack Type ID.
     */
    rackInfos?: pulumi.Input<{[key: string]: pulumi.Input<inputs.TemplateRackBasedRackInfos>}>;
    /**
     * Spine layer details
     */
    spine?: pulumi.Input<inputs.TemplateRackBasedSpine>;
}

/**
 * The set of arguments for constructing a TemplateRackBased resource.
 */
export interface TemplateRackBasedArgs {
    /**
     * "unique" is for 3-stage designs; "single" is for 5-stage designs.
     */
    asnAllocationScheme: pulumi.Input<string>;
    /**
     * Fabric addressing scheme for Spine/Leaf links. Required for Apstra <= 4.1.0, not supported by Apstra >= 4.1.1.
     */
    fabricLinkAddressing?: pulumi.Input<string>;
    /**
     * Apstra name of the Rack Based Template.
     */
    name?: pulumi.Input<string>;
    /**
     * Defines the inter-rack virtual network overlay protocol in the fabric. ["evpn","static"]
     */
    overlayControlProtocol: pulumi.Input<string>;
    /**
     * Map of Rack Type info (count + details) keyed by Rack Type ID.
     */
    rackInfos: pulumi.Input<{[key: string]: pulumi.Input<inputs.TemplateRackBasedRackInfos>}>;
    /**
     * Spine layer details
     */
    spine: pulumi.Input<inputs.TemplateRackBasedSpine>;
}
