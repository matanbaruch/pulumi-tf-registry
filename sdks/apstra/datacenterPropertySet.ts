// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DatacenterPropertySet extends pulumi.CustomResource {
    /**
     * Get an existing DatacenterPropertySet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatacenterPropertySetState, opts?: pulumi.CustomResourceOptions): DatacenterPropertySet {
        return new DatacenterPropertySet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'apstra:index/datacenterPropertySet:DatacenterPropertySet';

    /**
     * Returns true if the given object is an instance of DatacenterPropertySet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatacenterPropertySet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatacenterPropertySet.__pulumiType;
    }

    /**
     * Apstra Blueprint ID. Used to identify the Blueprint that the Property Set is imported into.
     */
    public readonly blueprintId!: pulumi.Output<string>;
    /**
     * A map of values in the Property Set in JSON format.
     */
    public /*out*/ readonly data!: pulumi.Output<string>;
    /**
     * Subset of Keys to import, at least one Key is required.
     */
    public readonly keys!: pulumi.Output<string[] | undefined>;
    /**
     * Property Set name as shown in the Web UI.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Stale as reported in the Web UI.
     */
    public /*out*/ readonly stale!: pulumi.Output<boolean>;
    /**
     * This attribute is used to trigger re-import of the Property Set from the Global Catalog. It is for internal use by the
     * provider, and should not be set by the user.
     */
    public readonly syncRequired!: pulumi.Output<boolean>;
    /**
     * When `true`, the Property Set will be re-imported whenever it is found to be out of sync with the source Property Set in
     * the Global Catalog. This attribute cannot be combined with the `keys` attribute, because importing a subset of Keys
     * guarantees the Property Set will never be in sync with the Global Catalog.
     */
    public readonly syncWithCatalog!: pulumi.Output<boolean | undefined>;

    /**
     * Create a DatacenterPropertySet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatacenterPropertySetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatacenterPropertySetArgs | DatacenterPropertySetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatacenterPropertySetState | undefined;
            resourceInputs["blueprintId"] = state ? state.blueprintId : undefined;
            resourceInputs["data"] = state ? state.data : undefined;
            resourceInputs["keys"] = state ? state.keys : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["stale"] = state ? state.stale : undefined;
            resourceInputs["syncRequired"] = state ? state.syncRequired : undefined;
            resourceInputs["syncWithCatalog"] = state ? state.syncWithCatalog : undefined;
        } else {
            const args = argsOrState as DatacenterPropertySetArgs | undefined;
            if ((!args || args.blueprintId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'blueprintId'");
            }
            resourceInputs["blueprintId"] = args ? args.blueprintId : undefined;
            resourceInputs["keys"] = args ? args.keys : undefined;
            resourceInputs["syncRequired"] = args ? args.syncRequired : undefined;
            resourceInputs["syncWithCatalog"] = args ? args.syncWithCatalog : undefined;
            resourceInputs["data"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["stale"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatacenterPropertySet.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatacenterPropertySet resources.
 */
export interface DatacenterPropertySetState {
    /**
     * Apstra Blueprint ID. Used to identify the Blueprint that the Property Set is imported into.
     */
    blueprintId?: pulumi.Input<string>;
    /**
     * A map of values in the Property Set in JSON format.
     */
    data?: pulumi.Input<string>;
    /**
     * Subset of Keys to import, at least one Key is required.
     */
    keys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Property Set name as shown in the Web UI.
     */
    name?: pulumi.Input<string>;
    /**
     * Stale as reported in the Web UI.
     */
    stale?: pulumi.Input<boolean>;
    /**
     * This attribute is used to trigger re-import of the Property Set from the Global Catalog. It is for internal use by the
     * provider, and should not be set by the user.
     */
    syncRequired?: pulumi.Input<boolean>;
    /**
     * When `true`, the Property Set will be re-imported whenever it is found to be out of sync with the source Property Set in
     * the Global Catalog. This attribute cannot be combined with the `keys` attribute, because importing a subset of Keys
     * guarantees the Property Set will never be in sync with the Global Catalog.
     */
    syncWithCatalog?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a DatacenterPropertySet resource.
 */
export interface DatacenterPropertySetArgs {
    /**
     * Apstra Blueprint ID. Used to identify the Blueprint that the Property Set is imported into.
     */
    blueprintId: pulumi.Input<string>;
    /**
     * Subset of Keys to import, at least one Key is required.
     */
    keys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This attribute is used to trigger re-import of the Property Set from the Global Catalog. It is for internal use by the
     * provider, and should not be set by the user.
     */
    syncRequired?: pulumi.Input<boolean>;
    /**
     * When `true`, the Property Set will be re-imported whenever it is found to be out of sync with the source Property Set in
     * the Global Catalog. This attribute cannot be combined with the `keys` attribute, because importing a subset of Keys
     * guarantees the Property Set will never be in sync with the Global Catalog.
     */
    syncWithCatalog?: pulumi.Input<boolean>;
}
