// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DatacenterRoutingZone extends pulumi.CustomResource {
    /**
     * Get an existing DatacenterRoutingZone resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatacenterRoutingZoneState, opts?: pulumi.CustomResourceOptions): DatacenterRoutingZone {
        return new DatacenterRoutingZone(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'apstra:index/datacenterRoutingZone:DatacenterRoutingZone';

    /**
     * Returns true if the given object is an instance of DatacenterRoutingZone.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatacenterRoutingZone {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatacenterRoutingZone.__pulumiType;
    }

    /**
     * Apstra Blueprint ID.
     */
    public readonly blueprintId!: pulumi.Output<string>;
    /**
     * Set of DHCP server IPv4 or IPv6 addresses of DHCP servers.
     */
    public readonly dhcpServers!: pulumi.Output<string[] | undefined>;
    /**
     * Used to export routes from the EVPN VRF.
     */
    public readonly exportRouteTargets!: pulumi.Output<string[] | undefined>;
    /**
     * Used to trigger plan modification when `vlan_id` has been removed from the configuration, this attribute can be ignored.
     */
    public /*out*/ readonly hadPriorVlanIdConfig!: pulumi.Output<boolean>;
    /**
     * Used to trigger plan modification when `vni` has been removed from the configuration, this attribute can be ignored.
     */
    public /*out*/ readonly hadPriorVniConfig!: pulumi.Output<boolean>;
    /**
     * Used to import routes into the EVPN VRF.
     */
    public readonly importRouteTargets!: pulumi.Output<string[] | undefined>;
    /**
     * Symmetric IRB Routing for EVPN on Junos devices makes use of an L3 VNI for inter-subnet routing which is embedded into
     * EVPN Type2-routes to support better scaling for networks with large amounts of VLANs. Applicable only to Apstra 4.2.0+.
     * When omitted, Routing Zones in Apstra 4.2.0 and later will be configured with mode `asymmetric`.
     */
    public readonly junosEvpnIrbMode!: pulumi.Output<string>;
    /**
     * Name displayed in the Apstra web UI.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Non-EVPN blueprints must use the default policy, so this field must be null. Set this attribute in an EVPN blueprint to
     * use a non-default policy.
     */
    public readonly routingPolicyId!: pulumi.Output<string>;
    /**
     * Used for VLAN tagged Layer 3 links on external connections. Leave this field blank to have it automatically assigned
     * from a static pool in the range of 2-4094, or enter a specific value.
     */
    public readonly vlanId!: pulumi.Output<number>;
    /**
     * VxLAN VNI associated with the routing zone. Leave this field blank to have it automatically assigned from an allocated
     * resource pool, or enter a specific value.
     */
    public readonly vni!: pulumi.Output<number>;
    /**
     * VRF name. Copied from the `name` field on initial create.
     */
    public /*out*/ readonly vrfName!: pulumi.Output<string>;

    /**
     * Create a DatacenterRoutingZone resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatacenterRoutingZoneArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatacenterRoutingZoneArgs | DatacenterRoutingZoneState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatacenterRoutingZoneState | undefined;
            resourceInputs["blueprintId"] = state ? state.blueprintId : undefined;
            resourceInputs["dhcpServers"] = state ? state.dhcpServers : undefined;
            resourceInputs["exportRouteTargets"] = state ? state.exportRouteTargets : undefined;
            resourceInputs["hadPriorVlanIdConfig"] = state ? state.hadPriorVlanIdConfig : undefined;
            resourceInputs["hadPriorVniConfig"] = state ? state.hadPriorVniConfig : undefined;
            resourceInputs["importRouteTargets"] = state ? state.importRouteTargets : undefined;
            resourceInputs["junosEvpnIrbMode"] = state ? state.junosEvpnIrbMode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["routingPolicyId"] = state ? state.routingPolicyId : undefined;
            resourceInputs["vlanId"] = state ? state.vlanId : undefined;
            resourceInputs["vni"] = state ? state.vni : undefined;
            resourceInputs["vrfName"] = state ? state.vrfName : undefined;
        } else {
            const args = argsOrState as DatacenterRoutingZoneArgs | undefined;
            if ((!args || args.blueprintId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'blueprintId'");
            }
            resourceInputs["blueprintId"] = args ? args.blueprintId : undefined;
            resourceInputs["dhcpServers"] = args ? args.dhcpServers : undefined;
            resourceInputs["exportRouteTargets"] = args ? args.exportRouteTargets : undefined;
            resourceInputs["importRouteTargets"] = args ? args.importRouteTargets : undefined;
            resourceInputs["junosEvpnIrbMode"] = args ? args.junosEvpnIrbMode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["routingPolicyId"] = args ? args.routingPolicyId : undefined;
            resourceInputs["vlanId"] = args ? args.vlanId : undefined;
            resourceInputs["vni"] = args ? args.vni : undefined;
            resourceInputs["hadPriorVlanIdConfig"] = undefined /*out*/;
            resourceInputs["hadPriorVniConfig"] = undefined /*out*/;
            resourceInputs["vrfName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatacenterRoutingZone.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatacenterRoutingZone resources.
 */
export interface DatacenterRoutingZoneState {
    /**
     * Apstra Blueprint ID.
     */
    blueprintId?: pulumi.Input<string>;
    /**
     * Set of DHCP server IPv4 or IPv6 addresses of DHCP servers.
     */
    dhcpServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Used to export routes from the EVPN VRF.
     */
    exportRouteTargets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Used to trigger plan modification when `vlan_id` has been removed from the configuration, this attribute can be ignored.
     */
    hadPriorVlanIdConfig?: pulumi.Input<boolean>;
    /**
     * Used to trigger plan modification when `vni` has been removed from the configuration, this attribute can be ignored.
     */
    hadPriorVniConfig?: pulumi.Input<boolean>;
    /**
     * Used to import routes into the EVPN VRF.
     */
    importRouteTargets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Symmetric IRB Routing for EVPN on Junos devices makes use of an L3 VNI for inter-subnet routing which is embedded into
     * EVPN Type2-routes to support better scaling for networks with large amounts of VLANs. Applicable only to Apstra 4.2.0+.
     * When omitted, Routing Zones in Apstra 4.2.0 and later will be configured with mode `asymmetric`.
     */
    junosEvpnIrbMode?: pulumi.Input<string>;
    /**
     * Name displayed in the Apstra web UI.
     */
    name?: pulumi.Input<string>;
    /**
     * Non-EVPN blueprints must use the default policy, so this field must be null. Set this attribute in an EVPN blueprint to
     * use a non-default policy.
     */
    routingPolicyId?: pulumi.Input<string>;
    /**
     * Used for VLAN tagged Layer 3 links on external connections. Leave this field blank to have it automatically assigned
     * from a static pool in the range of 2-4094, or enter a specific value.
     */
    vlanId?: pulumi.Input<number>;
    /**
     * VxLAN VNI associated with the routing zone. Leave this field blank to have it automatically assigned from an allocated
     * resource pool, or enter a specific value.
     */
    vni?: pulumi.Input<number>;
    /**
     * VRF name. Copied from the `name` field on initial create.
     */
    vrfName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DatacenterRoutingZone resource.
 */
export interface DatacenterRoutingZoneArgs {
    /**
     * Apstra Blueprint ID.
     */
    blueprintId: pulumi.Input<string>;
    /**
     * Set of DHCP server IPv4 or IPv6 addresses of DHCP servers.
     */
    dhcpServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Used to export routes from the EVPN VRF.
     */
    exportRouteTargets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Used to import routes into the EVPN VRF.
     */
    importRouteTargets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Symmetric IRB Routing for EVPN on Junos devices makes use of an L3 VNI for inter-subnet routing which is embedded into
     * EVPN Type2-routes to support better scaling for networks with large amounts of VLANs. Applicable only to Apstra 4.2.0+.
     * When omitted, Routing Zones in Apstra 4.2.0 and later will be configured with mode `asymmetric`.
     */
    junosEvpnIrbMode?: pulumi.Input<string>;
    /**
     * Name displayed in the Apstra web UI.
     */
    name?: pulumi.Input<string>;
    /**
     * Non-EVPN blueprints must use the default policy, so this field must be null. Set this attribute in an EVPN blueprint to
     * use a non-default policy.
     */
    routingPolicyId?: pulumi.Input<string>;
    /**
     * Used for VLAN tagged Layer 3 links on external connections. Leave this field blank to have it automatically assigned
     * from a static pool in the range of 2-4094, or enter a specific value.
     */
    vlanId?: pulumi.Input<number>;
    /**
     * VxLAN VNI associated with the routing zone. Leave this field blank to have it automatically assigned from an allocated
     * resource pool, or enter a specific value.
     */
    vni?: pulumi.Input<number>;
}
