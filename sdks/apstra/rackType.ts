// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RackType extends pulumi.CustomResource {
    /**
     * Get an existing RackType resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RackTypeState, opts?: pulumi.CustomResourceOptions): RackType {
        return new RackType(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'apstra:index/rackType:RackType';

    /**
     * Returns true if the given object is an instance of RackType.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RackType {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RackType.__pulumiType;
    }

    /**
     * Access Switches are optional, link to Leaf Switches in the same rack
     */
    public readonly accessSwitches!: pulumi.Output<{[key: string]: outputs.RackTypeAccessSwitches} | undefined>;
    /**
     * Rack Type description, displayed in the Apstra web UI.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Must be one of 'l3clos', 'l3collapsed'.
     */
    public readonly fabricConnectivityDesign!: pulumi.Output<string>;
    /**
     * Generic Systems are optional rack elements notmanaged by Apstra: Servers, routers, firewalls, etc...
     */
    public readonly genericSystems!: pulumi.Output<{[key: string]: outputs.RackTypeGenericSystems} | undefined>;
    /**
     * Each Rack Type is required to have at least one Leaf Switch.
     */
    public readonly leafSwitches!: pulumi.Output<{[key: string]: outputs.RackTypeLeafSwitches}>;
    /**
     * Rack Type name, displayed in the Apstra web UI.
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a RackType resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RackTypeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RackTypeArgs | RackTypeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RackTypeState | undefined;
            resourceInputs["accessSwitches"] = state ? state.accessSwitches : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["fabricConnectivityDesign"] = state ? state.fabricConnectivityDesign : undefined;
            resourceInputs["genericSystems"] = state ? state.genericSystems : undefined;
            resourceInputs["leafSwitches"] = state ? state.leafSwitches : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as RackTypeArgs | undefined;
            if ((!args || args.fabricConnectivityDesign === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fabricConnectivityDesign'");
            }
            if ((!args || args.leafSwitches === undefined) && !opts.urn) {
                throw new Error("Missing required property 'leafSwitches'");
            }
            resourceInputs["accessSwitches"] = args ? args.accessSwitches : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["fabricConnectivityDesign"] = args ? args.fabricConnectivityDesign : undefined;
            resourceInputs["genericSystems"] = args ? args.genericSystems : undefined;
            resourceInputs["leafSwitches"] = args ? args.leafSwitches : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RackType.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RackType resources.
 */
export interface RackTypeState {
    /**
     * Access Switches are optional, link to Leaf Switches in the same rack
     */
    accessSwitches?: pulumi.Input<{[key: string]: pulumi.Input<inputs.RackTypeAccessSwitches>}>;
    /**
     * Rack Type description, displayed in the Apstra web UI.
     */
    description?: pulumi.Input<string>;
    /**
     * Must be one of 'l3clos', 'l3collapsed'.
     */
    fabricConnectivityDesign?: pulumi.Input<string>;
    /**
     * Generic Systems are optional rack elements notmanaged by Apstra: Servers, routers, firewalls, etc...
     */
    genericSystems?: pulumi.Input<{[key: string]: pulumi.Input<inputs.RackTypeGenericSystems>}>;
    /**
     * Each Rack Type is required to have at least one Leaf Switch.
     */
    leafSwitches?: pulumi.Input<{[key: string]: pulumi.Input<inputs.RackTypeLeafSwitches>}>;
    /**
     * Rack Type name, displayed in the Apstra web UI.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RackType resource.
 */
export interface RackTypeArgs {
    /**
     * Access Switches are optional, link to Leaf Switches in the same rack
     */
    accessSwitches?: pulumi.Input<{[key: string]: pulumi.Input<inputs.RackTypeAccessSwitches>}>;
    /**
     * Rack Type description, displayed in the Apstra web UI.
     */
    description?: pulumi.Input<string>;
    /**
     * Must be one of 'l3clos', 'l3collapsed'.
     */
    fabricConnectivityDesign: pulumi.Input<string>;
    /**
     * Generic Systems are optional rack elements notmanaged by Apstra: Servers, routers, firewalls, etc...
     */
    genericSystems?: pulumi.Input<{[key: string]: pulumi.Input<inputs.RackTypeGenericSystems>}>;
    /**
     * Each Rack Type is required to have at least one Leaf Switch.
     */
    leafSwitches: pulumi.Input<{[key: string]: pulumi.Input<inputs.RackTypeLeafSwitches>}>;
    /**
     * Rack Type name, displayed in the Apstra web UI.
     */
    name?: pulumi.Input<string>;
}
