// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OnCallSchedule extends pulumi.CustomResource {
    /**
     * Get an existing OnCallSchedule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OnCallScheduleState, opts?: pulumi.CustomResourceOptions): OnCallSchedule {
        return new OnCallSchedule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'firehydrant:index/onCallSchedule:OnCallSchedule';

    /**
     * Returns true if the given object is an instance of OnCallSchedule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OnCallSchedule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OnCallSchedule.__pulumiType;
    }

    public readonly color!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly memberIds!: pulumi.Output<string[] | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly members!: pulumi.Output<string[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly restrictions!: pulumi.Output<outputs.OnCallScheduleRestriction[] | undefined>;
    public readonly startTime!: pulumi.Output<string | undefined>;
    public readonly strategy!: pulumi.Output<outputs.OnCallScheduleStrategy>;
    public readonly teamId!: pulumi.Output<string>;
    public readonly timeZone!: pulumi.Output<string>;

    /**
     * Create a OnCallSchedule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OnCallScheduleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OnCallScheduleArgs | OnCallScheduleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OnCallScheduleState | undefined;
            resourceInputs["color"] = state ? state.color : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["memberIds"] = state ? state.memberIds : undefined;
            resourceInputs["members"] = state ? state.members : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["restrictions"] = state ? state.restrictions : undefined;
            resourceInputs["startTime"] = state ? state.startTime : undefined;
            resourceInputs["strategy"] = state ? state.strategy : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
            resourceInputs["timeZone"] = state ? state.timeZone : undefined;
        } else {
            const args = argsOrState as OnCallScheduleArgs | undefined;
            if ((!args || args.strategy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'strategy'");
            }
            if ((!args || args.teamId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'teamId'");
            }
            if ((!args || args.timeZone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timeZone'");
            }
            resourceInputs["color"] = args ? args.color : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["memberIds"] = args ? args.memberIds : undefined;
            resourceInputs["members"] = args ? args.members : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["restrictions"] = args ? args.restrictions : undefined;
            resourceInputs["startTime"] = args ? args.startTime : undefined;
            resourceInputs["strategy"] = args ? args.strategy : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
            resourceInputs["timeZone"] = args ? args.timeZone : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OnCallSchedule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OnCallSchedule resources.
 */
export interface OnCallScheduleState {
    color?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    memberIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * @deprecated Deprecated
     */
    members?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    restrictions?: pulumi.Input<pulumi.Input<inputs.OnCallScheduleRestriction>[]>;
    startTime?: pulumi.Input<string>;
    strategy?: pulumi.Input<inputs.OnCallScheduleStrategy>;
    teamId?: pulumi.Input<string>;
    timeZone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OnCallSchedule resource.
 */
export interface OnCallScheduleArgs {
    color?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    memberIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * @deprecated Deprecated
     */
    members?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    restrictions?: pulumi.Input<pulumi.Input<inputs.OnCallScheduleRestriction>[]>;
    startTime?: pulumi.Input<string>;
    strategy: pulumi.Input<inputs.OnCallScheduleStrategy>;
    teamId: pulumi.Input<string>;
    timeZone: pulumi.Input<string>;
}
