// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Service extends pulumi.CustomResource {
    /**
     * Get an existing Service resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceState, opts?: pulumi.CustomResourceOptions): Service {
        return new Service(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'firehydrant:index/service:Service';

    /**
     * Returns true if the given object is an instance of Service.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Service {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Service.__pulumiType;
    }

    public readonly alertOnAdd!: pulumi.Output<boolean | undefined>;
    public readonly autoAddRespondingTeam!: pulumi.Output<boolean | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly externalResources!: pulumi.Output<outputs.ServiceExternalResource[] | undefined>;
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly links!: pulumi.Output<outputs.ServiceLink[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly ownerId!: pulumi.Output<string | undefined>;
    public readonly serviceTier!: pulumi.Output<number | undefined>;
    public readonly teamIds!: pulumi.Output<string[] | undefined>;

    /**
     * Create a Service resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceArgs | ServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceState | undefined;
            resourceInputs["alertOnAdd"] = state ? state.alertOnAdd : undefined;
            resourceInputs["autoAddRespondingTeam"] = state ? state.autoAddRespondingTeam : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["externalResources"] = state ? state.externalResources : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["links"] = state ? state.links : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ownerId"] = state ? state.ownerId : undefined;
            resourceInputs["serviceTier"] = state ? state.serviceTier : undefined;
            resourceInputs["teamIds"] = state ? state.teamIds : undefined;
        } else {
            const args = argsOrState as ServiceArgs | undefined;
            resourceInputs["alertOnAdd"] = args ? args.alertOnAdd : undefined;
            resourceInputs["autoAddRespondingTeam"] = args ? args.autoAddRespondingTeam : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["externalResources"] = args ? args.externalResources : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["links"] = args ? args.links : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ownerId"] = args ? args.ownerId : undefined;
            resourceInputs["serviceTier"] = args ? args.serviceTier : undefined;
            resourceInputs["teamIds"] = args ? args.teamIds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Service.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Service resources.
 */
export interface ServiceState {
    alertOnAdd?: pulumi.Input<boolean>;
    autoAddRespondingTeam?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    externalResources?: pulumi.Input<pulumi.Input<inputs.ServiceExternalResource>[]>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    links?: pulumi.Input<pulumi.Input<inputs.ServiceLink>[]>;
    name?: pulumi.Input<string>;
    ownerId?: pulumi.Input<string>;
    serviceTier?: pulumi.Input<number>;
    teamIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Service resource.
 */
export interface ServiceArgs {
    alertOnAdd?: pulumi.Input<boolean>;
    autoAddRespondingTeam?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    externalResources?: pulumi.Input<pulumi.Input<inputs.ServiceExternalResource>[]>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    links?: pulumi.Input<pulumi.Input<inputs.ServiceLink>[]>;
    name?: pulumi.Input<string>;
    ownerId?: pulumi.Input<string>;
    serviceTier?: pulumi.Input<number>;
    teamIds?: pulumi.Input<pulumi.Input<string>[]>;
}
