// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Bios extends pulumi.CustomResource {
    /**
     * Get an existing Bios resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BiosState, opts?: pulumi.CustomResourceOptions): Bios {
        return new Bios(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'redfish:index/bios:Bios';

    /**
     * Returns true if the given object is an instance of Bios.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Bios {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Bios.__pulumiType;
    }

    /**
     * The Bios attribute map.
     */
    public readonly attributes!: pulumi.Output<{[key: string]: string}>;
    /**
     * bios_job_timeout is the time in seconds that the provider waits for the bios update job to becompleted before timing
     * out.
     */
    public readonly biosJobTimeout!: pulumi.Output<number>;
    /**
     * List of server BMCs and their respective user credentials
     */
    public readonly redfishServers!: pulumi.Output<outputs.BiosRedfishServer[] | undefined>;
    /**
     * reset_timeout is the time in seconds that the provider waits for the server to be reset before timing out.
     */
    public readonly resetTimeout!: pulumi.Output<number>;
    /**
     * Reset type to apply on the computer system after the BIOS settings are applied. Applicable values are 'ForceRestart',
     * 'GracefulRestart', and 'PowerCycle'.Default = "GracefulRestart".
     */
    public readonly resetType!: pulumi.Output<string>;
    /**
     * The time when the BIOS settings can be applied. Applicable value is 'OnReset' only. In upcoming releases other apply
     * time values will be supported. Default is "OnReset".
     */
    public readonly settingsApplyTime!: pulumi.Output<string>;
    /**
     * System ID of the system
     */
    public readonly systemId!: pulumi.Output<string>;

    /**
     * Create a Bios resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: BiosArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BiosArgs | BiosState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BiosState | undefined;
            resourceInputs["attributes"] = state ? state.attributes : undefined;
            resourceInputs["biosJobTimeout"] = state ? state.biosJobTimeout : undefined;
            resourceInputs["redfishServers"] = state ? state.redfishServers : undefined;
            resourceInputs["resetTimeout"] = state ? state.resetTimeout : undefined;
            resourceInputs["resetType"] = state ? state.resetType : undefined;
            resourceInputs["settingsApplyTime"] = state ? state.settingsApplyTime : undefined;
            resourceInputs["systemId"] = state ? state.systemId : undefined;
        } else {
            const args = argsOrState as BiosArgs | undefined;
            resourceInputs["attributes"] = args ? args.attributes : undefined;
            resourceInputs["biosJobTimeout"] = args ? args.biosJobTimeout : undefined;
            resourceInputs["redfishServers"] = args ? args.redfishServers : undefined;
            resourceInputs["resetTimeout"] = args ? args.resetTimeout : undefined;
            resourceInputs["resetType"] = args ? args.resetType : undefined;
            resourceInputs["settingsApplyTime"] = args ? args.settingsApplyTime : undefined;
            resourceInputs["systemId"] = args ? args.systemId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Bios.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Bios resources.
 */
export interface BiosState {
    /**
     * The Bios attribute map.
     */
    attributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * bios_job_timeout is the time in seconds that the provider waits for the bios update job to becompleted before timing
     * out.
     */
    biosJobTimeout?: pulumi.Input<number>;
    /**
     * List of server BMCs and their respective user credentials
     */
    redfishServers?: pulumi.Input<pulumi.Input<inputs.BiosRedfishServer>[]>;
    /**
     * reset_timeout is the time in seconds that the provider waits for the server to be reset before timing out.
     */
    resetTimeout?: pulumi.Input<number>;
    /**
     * Reset type to apply on the computer system after the BIOS settings are applied. Applicable values are 'ForceRestart',
     * 'GracefulRestart', and 'PowerCycle'.Default = "GracefulRestart".
     */
    resetType?: pulumi.Input<string>;
    /**
     * The time when the BIOS settings can be applied. Applicable value is 'OnReset' only. In upcoming releases other apply
     * time values will be supported. Default is "OnReset".
     */
    settingsApplyTime?: pulumi.Input<string>;
    /**
     * System ID of the system
     */
    systemId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Bios resource.
 */
export interface BiosArgs {
    /**
     * The Bios attribute map.
     */
    attributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * bios_job_timeout is the time in seconds that the provider waits for the bios update job to becompleted before timing
     * out.
     */
    biosJobTimeout?: pulumi.Input<number>;
    /**
     * List of server BMCs and their respective user credentials
     */
    redfishServers?: pulumi.Input<pulumi.Input<inputs.BiosRedfishServer>[]>;
    /**
     * reset_timeout is the time in seconds that the provider waits for the server to be reset before timing out.
     */
    resetTimeout?: pulumi.Input<number>;
    /**
     * Reset type to apply on the computer system after the BIOS settings are applied. Applicable values are 'ForceRestart',
     * 'GracefulRestart', and 'PowerCycle'.Default = "GracefulRestart".
     */
    resetType?: pulumi.Input<string>;
    /**
     * The time when the BIOS settings can be applied. Applicable value is 'OnReset' only. In upcoming releases other apply
     * time values will be supported. Default is "OnReset".
     */
    settingsApplyTime?: pulumi.Input<string>;
    /**
     * System ID of the system
     */
    systemId?: pulumi.Input<string>;
}
