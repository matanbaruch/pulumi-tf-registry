// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetworkAdapter extends pulumi.CustomResource {
    /**
     * Get an existing NetworkAdapter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkAdapterState, opts?: pulumi.CustomResourceOptions): NetworkAdapter {
        return new NetworkAdapter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'redfish:index/networkAdapter:NetworkAdapter';

    /**
     * Returns true if the given object is an instance of NetworkAdapter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkAdapter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkAdapter.__pulumiType;
    }

    /**
     * Apply time of the `network_attributes` and `oem_network_attributes`. (Update Supported)Accepted values: `Immediate`,
     * `OnReset`, `AtMaintenanceWindowStart`, `InMaintenanceWindowOnReset`. Immediate: allows the user to immediately reboot
     * the host and apply the changes. This is only applicable for `oem_network_attributes`.OnReset: allows the user to apply
     * the changes on the next reboot of the host server.AtMaintenanceWindowStart: allows the user to apply at the start of a
     * maintenance window as specified in `maintenance_window`.InMaintenanceWindowOnReset: allows to apply after a manual reset
     * but within the maintenance window as specified in `maintenance_window`.
     */
    public readonly applyTime!: pulumi.Output<string>;
    /**
     * `job_timeout` is the time in seconds that the provider waits for the resource update job to becompleted before timing
     * out. (Update Supported) Default value is 1200 seconds.`job_timeout` is applicable only when `apply_time` is `Immediate`
     * or `OnReset`.
     */
    public readonly jobTimeout!: pulumi.Output<number>;
    /**
     * This option allows you to schedule the maintenance window. (Update Supported)This is required when `apply_time` is
     * `AtMaintenanceWindowStart` or `InMaintenanceWindowOnReset` .
     */
    public readonly maintenanceWindow!: pulumi.Output<outputs.NetworkAdapterMaintenanceWindow | undefined>;
    /**
     * ID of the network adapter
     */
    public readonly networkAdapterId!: pulumi.Output<string>;
    /**
     * Dictionary of network attributes and value for network device function. (Update Supported)To check allowed attributes
     * please either use the datasource for dell nic attributes: data.redfish_network or query
     * /redfish/v1/Systems/System.Embedded.1/NetworkAdapters/{NetworkAdapterID}/NetworkDeviceFunctions/{NetworkDeviceFunctionID}/Settings.
     * Note: `oem_network_attributes` is mutually exclusive with `network_attributes`. Please update one of network_attributes
     * or oem_network_attributes at a time.NOTE: Updating network_attributes property may result with an error stating the
     * property is Read-only. This may occur if Patch method is performed to change the property to the state that the property
     * is already in or because there is dependency of attribute values. For example, if CHAP is disabled, MutualChap becomes a
     * Read-only attribute.
     */
    public readonly networkAttributes!: pulumi.Output<outputs.NetworkAdapterNetworkAttributes>;
    /**
     * ID of the network device function
     */
    public readonly networkDeviceFunctionId!: pulumi.Output<string>;
    /**
     * oem_network_attributes to configure dell network attributes and clear pending action. (Update Supported) Note:
     * `oem_network_attributes` is mutually exclusive with `network_attributes`. Please update one of network_attributes or
     * oem_network_attributes at a time.
     */
    public readonly oemNetworkAttributes!: pulumi.Output<outputs.NetworkAdapterOemNetworkAttributes>;
    /**
     * List of server BMCs and their respective user credentials
     */
    public readonly redfishServers!: pulumi.Output<outputs.NetworkAdapterRedfishServer[] | undefined>;
    /**
     * Reset Timeout. Default value is 120 seconds. (Update Supported)
     */
    public readonly resetTimeout!: pulumi.Output<number>;
    /**
     * Reset Type. (Update Supported) Accepted values: `ForceRestart`, `GracefulRestart`, `PowerCycle`. Default value is
     * `ForceRestart`.
     */
    public readonly resetType!: pulumi.Output<string>;
    /**
     * ID of the system resource. If the value for system ID is not provided, the resource picks the first system available
     * from the iDRAC.
     */
    public readonly systemId!: pulumi.Output<string>;

    /**
     * Create a NetworkAdapter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkAdapterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkAdapterArgs | NetworkAdapterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkAdapterState | undefined;
            resourceInputs["applyTime"] = state ? state.applyTime : undefined;
            resourceInputs["jobTimeout"] = state ? state.jobTimeout : undefined;
            resourceInputs["maintenanceWindow"] = state ? state.maintenanceWindow : undefined;
            resourceInputs["networkAdapterId"] = state ? state.networkAdapterId : undefined;
            resourceInputs["networkAttributes"] = state ? state.networkAttributes : undefined;
            resourceInputs["networkDeviceFunctionId"] = state ? state.networkDeviceFunctionId : undefined;
            resourceInputs["oemNetworkAttributes"] = state ? state.oemNetworkAttributes : undefined;
            resourceInputs["redfishServers"] = state ? state.redfishServers : undefined;
            resourceInputs["resetTimeout"] = state ? state.resetTimeout : undefined;
            resourceInputs["resetType"] = state ? state.resetType : undefined;
            resourceInputs["systemId"] = state ? state.systemId : undefined;
        } else {
            const args = argsOrState as NetworkAdapterArgs | undefined;
            if ((!args || args.applyTime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applyTime'");
            }
            if ((!args || args.networkAdapterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkAdapterId'");
            }
            if ((!args || args.networkDeviceFunctionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkDeviceFunctionId'");
            }
            resourceInputs["applyTime"] = args ? args.applyTime : undefined;
            resourceInputs["jobTimeout"] = args ? args.jobTimeout : undefined;
            resourceInputs["maintenanceWindow"] = args ? args.maintenanceWindow : undefined;
            resourceInputs["networkAdapterId"] = args ? args.networkAdapterId : undefined;
            resourceInputs["networkAttributes"] = args ? args.networkAttributes : undefined;
            resourceInputs["networkDeviceFunctionId"] = args ? args.networkDeviceFunctionId : undefined;
            resourceInputs["oemNetworkAttributes"] = args ? args.oemNetworkAttributes : undefined;
            resourceInputs["redfishServers"] = args ? args.redfishServers : undefined;
            resourceInputs["resetTimeout"] = args ? args.resetTimeout : undefined;
            resourceInputs["resetType"] = args ? args.resetType : undefined;
            resourceInputs["systemId"] = args ? args.systemId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkAdapter.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetworkAdapter resources.
 */
export interface NetworkAdapterState {
    /**
     * Apply time of the `network_attributes` and `oem_network_attributes`. (Update Supported)Accepted values: `Immediate`,
     * `OnReset`, `AtMaintenanceWindowStart`, `InMaintenanceWindowOnReset`. Immediate: allows the user to immediately reboot
     * the host and apply the changes. This is only applicable for `oem_network_attributes`.OnReset: allows the user to apply
     * the changes on the next reboot of the host server.AtMaintenanceWindowStart: allows the user to apply at the start of a
     * maintenance window as specified in `maintenance_window`.InMaintenanceWindowOnReset: allows to apply after a manual reset
     * but within the maintenance window as specified in `maintenance_window`.
     */
    applyTime?: pulumi.Input<string>;
    /**
     * `job_timeout` is the time in seconds that the provider waits for the resource update job to becompleted before timing
     * out. (Update Supported) Default value is 1200 seconds.`job_timeout` is applicable only when `apply_time` is `Immediate`
     * or `OnReset`.
     */
    jobTimeout?: pulumi.Input<number>;
    /**
     * This option allows you to schedule the maintenance window. (Update Supported)This is required when `apply_time` is
     * `AtMaintenanceWindowStart` or `InMaintenanceWindowOnReset` .
     */
    maintenanceWindow?: pulumi.Input<inputs.NetworkAdapterMaintenanceWindow>;
    /**
     * ID of the network adapter
     */
    networkAdapterId?: pulumi.Input<string>;
    /**
     * Dictionary of network attributes and value for network device function. (Update Supported)To check allowed attributes
     * please either use the datasource for dell nic attributes: data.redfish_network or query
     * /redfish/v1/Systems/System.Embedded.1/NetworkAdapters/{NetworkAdapterID}/NetworkDeviceFunctions/{NetworkDeviceFunctionID}/Settings.
     * Note: `oem_network_attributes` is mutually exclusive with `network_attributes`. Please update one of network_attributes
     * or oem_network_attributes at a time.NOTE: Updating network_attributes property may result with an error stating the
     * property is Read-only. This may occur if Patch method is performed to change the property to the state that the property
     * is already in or because there is dependency of attribute values. For example, if CHAP is disabled, MutualChap becomes a
     * Read-only attribute.
     */
    networkAttributes?: pulumi.Input<inputs.NetworkAdapterNetworkAttributes>;
    /**
     * ID of the network device function
     */
    networkDeviceFunctionId?: pulumi.Input<string>;
    /**
     * oem_network_attributes to configure dell network attributes and clear pending action. (Update Supported) Note:
     * `oem_network_attributes` is mutually exclusive with `network_attributes`. Please update one of network_attributes or
     * oem_network_attributes at a time.
     */
    oemNetworkAttributes?: pulumi.Input<inputs.NetworkAdapterOemNetworkAttributes>;
    /**
     * List of server BMCs and their respective user credentials
     */
    redfishServers?: pulumi.Input<pulumi.Input<inputs.NetworkAdapterRedfishServer>[]>;
    /**
     * Reset Timeout. Default value is 120 seconds. (Update Supported)
     */
    resetTimeout?: pulumi.Input<number>;
    /**
     * Reset Type. (Update Supported) Accepted values: `ForceRestart`, `GracefulRestart`, `PowerCycle`. Default value is
     * `ForceRestart`.
     */
    resetType?: pulumi.Input<string>;
    /**
     * ID of the system resource. If the value for system ID is not provided, the resource picks the first system available
     * from the iDRAC.
     */
    systemId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkAdapter resource.
 */
export interface NetworkAdapterArgs {
    /**
     * Apply time of the `network_attributes` and `oem_network_attributes`. (Update Supported)Accepted values: `Immediate`,
     * `OnReset`, `AtMaintenanceWindowStart`, `InMaintenanceWindowOnReset`. Immediate: allows the user to immediately reboot
     * the host and apply the changes. This is only applicable for `oem_network_attributes`.OnReset: allows the user to apply
     * the changes on the next reboot of the host server.AtMaintenanceWindowStart: allows the user to apply at the start of a
     * maintenance window as specified in `maintenance_window`.InMaintenanceWindowOnReset: allows to apply after a manual reset
     * but within the maintenance window as specified in `maintenance_window`.
     */
    applyTime: pulumi.Input<string>;
    /**
     * `job_timeout` is the time in seconds that the provider waits for the resource update job to becompleted before timing
     * out. (Update Supported) Default value is 1200 seconds.`job_timeout` is applicable only when `apply_time` is `Immediate`
     * or `OnReset`.
     */
    jobTimeout?: pulumi.Input<number>;
    /**
     * This option allows you to schedule the maintenance window. (Update Supported)This is required when `apply_time` is
     * `AtMaintenanceWindowStart` or `InMaintenanceWindowOnReset` .
     */
    maintenanceWindow?: pulumi.Input<inputs.NetworkAdapterMaintenanceWindow>;
    /**
     * ID of the network adapter
     */
    networkAdapterId: pulumi.Input<string>;
    /**
     * Dictionary of network attributes and value for network device function. (Update Supported)To check allowed attributes
     * please either use the datasource for dell nic attributes: data.redfish_network or query
     * /redfish/v1/Systems/System.Embedded.1/NetworkAdapters/{NetworkAdapterID}/NetworkDeviceFunctions/{NetworkDeviceFunctionID}/Settings.
     * Note: `oem_network_attributes` is mutually exclusive with `network_attributes`. Please update one of network_attributes
     * or oem_network_attributes at a time.NOTE: Updating network_attributes property may result with an error stating the
     * property is Read-only. This may occur if Patch method is performed to change the property to the state that the property
     * is already in or because there is dependency of attribute values. For example, if CHAP is disabled, MutualChap becomes a
     * Read-only attribute.
     */
    networkAttributes?: pulumi.Input<inputs.NetworkAdapterNetworkAttributes>;
    /**
     * ID of the network device function
     */
    networkDeviceFunctionId: pulumi.Input<string>;
    /**
     * oem_network_attributes to configure dell network attributes and clear pending action. (Update Supported) Note:
     * `oem_network_attributes` is mutually exclusive with `network_attributes`. Please update one of network_attributes or
     * oem_network_attributes at a time.
     */
    oemNetworkAttributes?: pulumi.Input<inputs.NetworkAdapterOemNetworkAttributes>;
    /**
     * List of server BMCs and their respective user credentials
     */
    redfishServers?: pulumi.Input<pulumi.Input<inputs.NetworkAdapterRedfishServer>[]>;
    /**
     * Reset Timeout. Default value is 120 seconds. (Update Supported)
     */
    resetTimeout?: pulumi.Input<number>;
    /**
     * Reset Type. (Update Supported) Accepted values: `ForceRestart`, `GracefulRestart`, `PowerCycle`. Default value is
     * `ForceRestart`.
     */
    resetType?: pulumi.Input<string>;
    /**
     * ID of the system resource. If the value for system ID is not provided, the resource picks the first system available
     * from the iDRAC.
     */
    systemId?: pulumi.Input<string>;
}
