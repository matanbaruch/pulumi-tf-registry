// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IdracServerConfigurationProfileExport extends pulumi.CustomResource {
    /**
     * Get an existing IdracServerConfigurationProfileExport resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IdracServerConfigurationProfileExportState, opts?: pulumi.CustomResourceOptions): IdracServerConfigurationProfileExport {
        return new IdracServerConfigurationProfileExport(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'redfish:index/idracServerConfigurationProfileExport:IdracServerConfigurationProfileExport';

    /**
     * Returns true if the given object is an instance of IdracServerConfigurationProfileExport.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IdracServerConfigurationProfileExport {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IdracServerConfigurationProfileExport.__pulumiType;
    }

    /**
     * Specify the output file format.
     */
    public readonly exportFormat!: pulumi.Output<string>;
    /**
     * Specify the type of Server Configuration Profile (SCP) to be exported.
     */
    public readonly exportUse!: pulumi.Output<string>;
    /**
     * File Content
     */
    public /*out*/ readonly fileContent!: pulumi.Output<string>;
    /**
     * Include In Export
     */
    public readonly includeInExports!: pulumi.Output<string[]>;
    /**
     * List of server BMCs and their respective user credentials
     */
    public readonly redfishServers!: pulumi.Output<outputs.IdracServerConfigurationProfileExportRedfishServer[] | undefined>;
    /**
     * Share Parameters
     */
    public readonly shareParameters!: pulumi.Output<outputs.IdracServerConfigurationProfileExportShareParameters>;

    /**
     * Create a IdracServerConfigurationProfileExport resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IdracServerConfigurationProfileExportArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IdracServerConfigurationProfileExportArgs | IdracServerConfigurationProfileExportState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IdracServerConfigurationProfileExportState | undefined;
            resourceInputs["exportFormat"] = state ? state.exportFormat : undefined;
            resourceInputs["exportUse"] = state ? state.exportUse : undefined;
            resourceInputs["fileContent"] = state ? state.fileContent : undefined;
            resourceInputs["includeInExports"] = state ? state.includeInExports : undefined;
            resourceInputs["redfishServers"] = state ? state.redfishServers : undefined;
            resourceInputs["shareParameters"] = state ? state.shareParameters : undefined;
        } else {
            const args = argsOrState as IdracServerConfigurationProfileExportArgs | undefined;
            if ((!args || args.shareParameters === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shareParameters'");
            }
            resourceInputs["exportFormat"] = args ? args.exportFormat : undefined;
            resourceInputs["exportUse"] = args ? args.exportUse : undefined;
            resourceInputs["includeInExports"] = args ? args.includeInExports : undefined;
            resourceInputs["redfishServers"] = args ? args.redfishServers : undefined;
            resourceInputs["shareParameters"] = args ? args.shareParameters : undefined;
            resourceInputs["fileContent"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IdracServerConfigurationProfileExport.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IdracServerConfigurationProfileExport resources.
 */
export interface IdracServerConfigurationProfileExportState {
    /**
     * Specify the output file format.
     */
    exportFormat?: pulumi.Input<string>;
    /**
     * Specify the type of Server Configuration Profile (SCP) to be exported.
     */
    exportUse?: pulumi.Input<string>;
    /**
     * File Content
     */
    fileContent?: pulumi.Input<string>;
    /**
     * Include In Export
     */
    includeInExports?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of server BMCs and their respective user credentials
     */
    redfishServers?: pulumi.Input<pulumi.Input<inputs.IdracServerConfigurationProfileExportRedfishServer>[]>;
    /**
     * Share Parameters
     */
    shareParameters?: pulumi.Input<inputs.IdracServerConfigurationProfileExportShareParameters>;
}

/**
 * The set of arguments for constructing a IdracServerConfigurationProfileExport resource.
 */
export interface IdracServerConfigurationProfileExportArgs {
    /**
     * Specify the output file format.
     */
    exportFormat?: pulumi.Input<string>;
    /**
     * Specify the type of Server Configuration Profile (SCP) to be exported.
     */
    exportUse?: pulumi.Input<string>;
    /**
     * Include In Export
     */
    includeInExports?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of server BMCs and their respective user credentials
     */
    redfishServers?: pulumi.Input<pulumi.Input<inputs.IdracServerConfigurationProfileExportRedfishServer>[]>;
    /**
     * Share Parameters
     */
    shareParameters: pulumi.Input<inputs.IdracServerConfigurationProfileExportShareParameters>;
}
