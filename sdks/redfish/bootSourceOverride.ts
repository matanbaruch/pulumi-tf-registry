// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BootSourceOverride extends pulumi.CustomResource {
    /**
     * Get an existing BootSourceOverride resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BootSourceOverrideState, opts?: pulumi.CustomResourceOptions): BootSourceOverride {
        return new BootSourceOverride(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'redfish:index/bootSourceOverride:BootSourceOverride';

    /**
     * Returns true if the given object is an instance of BootSourceOverride.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BootSourceOverride {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BootSourceOverride.__pulumiType;
    }

    /**
     * Time in seconds that the provider waits for the BootSource override job to be completed before timing out.
     */
    public readonly bootSourceJobTimeout!: pulumi.Output<number>;
    /**
     * The state of the Boot Source Override feature.
     */
    public readonly bootSourceOverrideEnabled!: pulumi.Output<string | undefined>;
    /**
     * The BIOS boot mode to be used when boot source is booted from.
     */
    public readonly bootSourceOverrideMode!: pulumi.Output<string | undefined>;
    /**
     * The boot source override target device to use during the next boot instead of the normal boot device.
     */
    public readonly bootSourceOverrideTarget!: pulumi.Output<string | undefined>;
    /**
     * List of server BMCs and their respective user credentials
     */
    public readonly redfishServers!: pulumi.Output<outputs.BootSourceOverrideRedfishServer[] | undefined>;
    /**
     * Time in seconds that the provider waits for the server to be reset before timing out.
     */
    public readonly resetTimeout!: pulumi.Output<number>;
    /**
     * Reset type allows to choose the type of restart to apply when firmware upgrade is scheduled. Possible values are:
     * "ForceRestart", "GracefulRestart" or "PowerCycle"
     */
    public readonly resetType!: pulumi.Output<string>;
    /**
     * System ID of the system
     */
    public readonly systemId!: pulumi.Output<string>;
    /**
     * The UEFI device path of the device from which to boot when boot_source_override_target is UefiTarget
     */
    public readonly uefiTargetBootSourceOverride!: pulumi.Output<string | undefined>;

    /**
     * Create a BootSourceOverride resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BootSourceOverrideArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BootSourceOverrideArgs | BootSourceOverrideState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BootSourceOverrideState | undefined;
            resourceInputs["bootSourceJobTimeout"] = state ? state.bootSourceJobTimeout : undefined;
            resourceInputs["bootSourceOverrideEnabled"] = state ? state.bootSourceOverrideEnabled : undefined;
            resourceInputs["bootSourceOverrideMode"] = state ? state.bootSourceOverrideMode : undefined;
            resourceInputs["bootSourceOverrideTarget"] = state ? state.bootSourceOverrideTarget : undefined;
            resourceInputs["redfishServers"] = state ? state.redfishServers : undefined;
            resourceInputs["resetTimeout"] = state ? state.resetTimeout : undefined;
            resourceInputs["resetType"] = state ? state.resetType : undefined;
            resourceInputs["systemId"] = state ? state.systemId : undefined;
            resourceInputs["uefiTargetBootSourceOverride"] = state ? state.uefiTargetBootSourceOverride : undefined;
        } else {
            const args = argsOrState as BootSourceOverrideArgs | undefined;
            if ((!args || args.resetType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resetType'");
            }
            resourceInputs["bootSourceJobTimeout"] = args ? args.bootSourceJobTimeout : undefined;
            resourceInputs["bootSourceOverrideEnabled"] = args ? args.bootSourceOverrideEnabled : undefined;
            resourceInputs["bootSourceOverrideMode"] = args ? args.bootSourceOverrideMode : undefined;
            resourceInputs["bootSourceOverrideTarget"] = args ? args.bootSourceOverrideTarget : undefined;
            resourceInputs["redfishServers"] = args ? args.redfishServers : undefined;
            resourceInputs["resetTimeout"] = args ? args.resetTimeout : undefined;
            resourceInputs["resetType"] = args ? args.resetType : undefined;
            resourceInputs["systemId"] = args ? args.systemId : undefined;
            resourceInputs["uefiTargetBootSourceOverride"] = args ? args.uefiTargetBootSourceOverride : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BootSourceOverride.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BootSourceOverride resources.
 */
export interface BootSourceOverrideState {
    /**
     * Time in seconds that the provider waits for the BootSource override job to be completed before timing out.
     */
    bootSourceJobTimeout?: pulumi.Input<number>;
    /**
     * The state of the Boot Source Override feature.
     */
    bootSourceOverrideEnabled?: pulumi.Input<string>;
    /**
     * The BIOS boot mode to be used when boot source is booted from.
     */
    bootSourceOverrideMode?: pulumi.Input<string>;
    /**
     * The boot source override target device to use during the next boot instead of the normal boot device.
     */
    bootSourceOverrideTarget?: pulumi.Input<string>;
    /**
     * List of server BMCs and their respective user credentials
     */
    redfishServers?: pulumi.Input<pulumi.Input<inputs.BootSourceOverrideRedfishServer>[]>;
    /**
     * Time in seconds that the provider waits for the server to be reset before timing out.
     */
    resetTimeout?: pulumi.Input<number>;
    /**
     * Reset type allows to choose the type of restart to apply when firmware upgrade is scheduled. Possible values are:
     * "ForceRestart", "GracefulRestart" or "PowerCycle"
     */
    resetType?: pulumi.Input<string>;
    /**
     * System ID of the system
     */
    systemId?: pulumi.Input<string>;
    /**
     * The UEFI device path of the device from which to boot when boot_source_override_target is UefiTarget
     */
    uefiTargetBootSourceOverride?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BootSourceOverride resource.
 */
export interface BootSourceOverrideArgs {
    /**
     * Time in seconds that the provider waits for the BootSource override job to be completed before timing out.
     */
    bootSourceJobTimeout?: pulumi.Input<number>;
    /**
     * The state of the Boot Source Override feature.
     */
    bootSourceOverrideEnabled?: pulumi.Input<string>;
    /**
     * The BIOS boot mode to be used when boot source is booted from.
     */
    bootSourceOverrideMode?: pulumi.Input<string>;
    /**
     * The boot source override target device to use during the next boot instead of the normal boot device.
     */
    bootSourceOverrideTarget?: pulumi.Input<string>;
    /**
     * List of server BMCs and their respective user credentials
     */
    redfishServers?: pulumi.Input<pulumi.Input<inputs.BootSourceOverrideRedfishServer>[]>;
    /**
     * Time in seconds that the provider waits for the server to be reset before timing out.
     */
    resetTimeout?: pulumi.Input<number>;
    /**
     * Reset type allows to choose the type of restart to apply when firmware upgrade is scheduled. Possible values are:
     * "ForceRestart", "GracefulRestart" or "PowerCycle"
     */
    resetType: pulumi.Input<string>;
    /**
     * System ID of the system
     */
    systemId?: pulumi.Input<string>;
    /**
     * The UEFI device path of the device from which to boot when boot_source_override_target is UefiTarget
     */
    uefiTargetBootSourceOverride?: pulumi.Input<string>;
}
