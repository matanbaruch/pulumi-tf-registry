// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BootOrder extends pulumi.CustomResource {
    /**
     * Get an existing BootOrder resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BootOrderState, opts?: pulumi.CustomResourceOptions): BootOrder {
        return new BootOrder(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'redfish:index/bootOrder:BootOrder';

    /**
     * Returns true if the given object is an instance of BootOrder.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BootOrder {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BootOrder.__pulumiType;
    }

    /**
     * Options to enable or disable the boot device.
     */
    public readonly bootOptions!: pulumi.Output<outputs.BootOrderBootOption[]>;
    /**
     * Time in seconds that the provider waits for the BootSource override job to be completed before timing out.
     */
    public readonly bootOrderJobTimeout!: pulumi.Output<number>;
    /**
     * sets the boot devices in the required boot order sequences.
     */
    public readonly bootOrders!: pulumi.Output<string[]>;
    /**
     * List of server BMCs and their respective user credentials
     */
    public readonly redfishServers!: pulumi.Output<outputs.BootOrderRedfishServer[] | undefined>;
    /**
     * Time in seconds that the provider waits for the server to be reset before timing out.
     */
    public readonly resetTimeout!: pulumi.Output<number>;
    /**
     * Reset type allows to choose the type of restart to apply when firmware upgrade is scheduled. Possible values are:
     * "ForceRestart", "GracefulRestart" or "PowerCycle"
     */
    public readonly resetType!: pulumi.Output<string>;
    /**
     * System ID of the system
     */
    public readonly systemId!: pulumi.Output<string>;

    /**
     * Create a BootOrder resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BootOrderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BootOrderArgs | BootOrderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BootOrderState | undefined;
            resourceInputs["bootOptions"] = state ? state.bootOptions : undefined;
            resourceInputs["bootOrderJobTimeout"] = state ? state.bootOrderJobTimeout : undefined;
            resourceInputs["bootOrders"] = state ? state.bootOrders : undefined;
            resourceInputs["redfishServers"] = state ? state.redfishServers : undefined;
            resourceInputs["resetTimeout"] = state ? state.resetTimeout : undefined;
            resourceInputs["resetType"] = state ? state.resetType : undefined;
            resourceInputs["systemId"] = state ? state.systemId : undefined;
        } else {
            const args = argsOrState as BootOrderArgs | undefined;
            if ((!args || args.resetType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resetType'");
            }
            resourceInputs["bootOptions"] = args ? args.bootOptions : undefined;
            resourceInputs["bootOrderJobTimeout"] = args ? args.bootOrderJobTimeout : undefined;
            resourceInputs["bootOrders"] = args ? args.bootOrders : undefined;
            resourceInputs["redfishServers"] = args ? args.redfishServers : undefined;
            resourceInputs["resetTimeout"] = args ? args.resetTimeout : undefined;
            resourceInputs["resetType"] = args ? args.resetType : undefined;
            resourceInputs["systemId"] = args ? args.systemId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BootOrder.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BootOrder resources.
 */
export interface BootOrderState {
    /**
     * Options to enable or disable the boot device.
     */
    bootOptions?: pulumi.Input<pulumi.Input<inputs.BootOrderBootOption>[]>;
    /**
     * Time in seconds that the provider waits for the BootSource override job to be completed before timing out.
     */
    bootOrderJobTimeout?: pulumi.Input<number>;
    /**
     * sets the boot devices in the required boot order sequences.
     */
    bootOrders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of server BMCs and their respective user credentials
     */
    redfishServers?: pulumi.Input<pulumi.Input<inputs.BootOrderRedfishServer>[]>;
    /**
     * Time in seconds that the provider waits for the server to be reset before timing out.
     */
    resetTimeout?: pulumi.Input<number>;
    /**
     * Reset type allows to choose the type of restart to apply when firmware upgrade is scheduled. Possible values are:
     * "ForceRestart", "GracefulRestart" or "PowerCycle"
     */
    resetType?: pulumi.Input<string>;
    /**
     * System ID of the system
     */
    systemId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BootOrder resource.
 */
export interface BootOrderArgs {
    /**
     * Options to enable or disable the boot device.
     */
    bootOptions?: pulumi.Input<pulumi.Input<inputs.BootOrderBootOption>[]>;
    /**
     * Time in seconds that the provider waits for the BootSource override job to be completed before timing out.
     */
    bootOrderJobTimeout?: pulumi.Input<number>;
    /**
     * sets the boot devices in the required boot order sequences.
     */
    bootOrders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of server BMCs and their respective user credentials
     */
    redfishServers?: pulumi.Input<pulumi.Input<inputs.BootOrderRedfishServer>[]>;
    /**
     * Time in seconds that the provider waits for the server to be reset before timing out.
     */
    resetTimeout?: pulumi.Input<number>;
    /**
     * Reset type allows to choose the type of restart to apply when firmware upgrade is scheduled. Possible values are:
     * "ForceRestart", "GracefulRestart" or "PowerCycle"
     */
    resetType: pulumi.Input<string>;
    /**
     * System ID of the system
     */
    systemId?: pulumi.Input<string>;
}
