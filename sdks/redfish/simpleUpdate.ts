// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SimpleUpdate extends pulumi.CustomResource {
    /**
     * Get an existing SimpleUpdate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SimpleUpdateState, opts?: pulumi.CustomResourceOptions): SimpleUpdate {
        return new SimpleUpdate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'redfish:index/simpleUpdate:SimpleUpdate';

    /**
     * Returns true if the given object is an instance of SimpleUpdate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SimpleUpdate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SimpleUpdate.__pulumiType;
    }

    /**
     * List of server BMCs and their respective user credentials
     */
    public readonly redfishServers!: pulumi.Output<outputs.SimpleUpdateRedfishServer[] | undefined>;
    /**
     * Time in seconds that the provider waits for the server to be reset before timing out.
     */
    public readonly resetTimeout!: pulumi.Output<number>;
    /**
     * Reset type allows to choose the type of restart to apply when firmware upgrade is scheduled. Possible values are:
     * "ForceRestart", "GracefulRestart" or "PowerCycle"
     */
    public readonly resetType!: pulumi.Output<string>;
    /**
     * Time in seconds that the provider waits for the simple update job to be completed before timing out.
     */
    public readonly simpleUpdateJobTimeout!: pulumi.Output<number>;
    /**
     * Software ID from the firmware package uploaded
     */
    public /*out*/ readonly softwareId!: pulumi.Output<string>;
    /**
     * System ID of the system
     */
    public readonly systemId!: pulumi.Output<string>;
    /**
     * Target firmware image used for firmware update on the redfish instance. Make sure you place your firmware packages in
     * the same folder as the module and set it as follows: "${path.module}/BIOS_FXC54_WN64_1.15.0.EXE"
     */
    public readonly targetFirmwareImage!: pulumi.Output<string>;
    /**
     * The network protocol that the Update Service uses to retrieve the software image file located at the URI provided in
     * ImageURI, if the URI does not contain a scheme. Accepted values: CIFS, FTP, SFTP, HTTP, HTTPS, NSF, SCP, TFTP, OEM, NFS.
     * Currently only HTTP, HTTPS and NFS are supported with local file path or HTTP(s)/NFS link.
     */
    public readonly transferProtocol!: pulumi.Output<string>;
    /**
     * Software version from the firmware package uploaded
     */
    public /*out*/ readonly version!: pulumi.Output<string>;

    /**
     * Create a SimpleUpdate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SimpleUpdateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SimpleUpdateArgs | SimpleUpdateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SimpleUpdateState | undefined;
            resourceInputs["redfishServers"] = state ? state.redfishServers : undefined;
            resourceInputs["resetTimeout"] = state ? state.resetTimeout : undefined;
            resourceInputs["resetType"] = state ? state.resetType : undefined;
            resourceInputs["simpleUpdateJobTimeout"] = state ? state.simpleUpdateJobTimeout : undefined;
            resourceInputs["softwareId"] = state ? state.softwareId : undefined;
            resourceInputs["systemId"] = state ? state.systemId : undefined;
            resourceInputs["targetFirmwareImage"] = state ? state.targetFirmwareImage : undefined;
            resourceInputs["transferProtocol"] = state ? state.transferProtocol : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as SimpleUpdateArgs | undefined;
            if ((!args || args.resetType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resetType'");
            }
            if ((!args || args.targetFirmwareImage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetFirmwareImage'");
            }
            if ((!args || args.transferProtocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'transferProtocol'");
            }
            resourceInputs["redfishServers"] = args ? args.redfishServers : undefined;
            resourceInputs["resetTimeout"] = args ? args.resetTimeout : undefined;
            resourceInputs["resetType"] = args ? args.resetType : undefined;
            resourceInputs["simpleUpdateJobTimeout"] = args ? args.simpleUpdateJobTimeout : undefined;
            resourceInputs["systemId"] = args ? args.systemId : undefined;
            resourceInputs["targetFirmwareImage"] = args ? args.targetFirmwareImage : undefined;
            resourceInputs["transferProtocol"] = args ? args.transferProtocol : undefined;
            resourceInputs["softwareId"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SimpleUpdate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SimpleUpdate resources.
 */
export interface SimpleUpdateState {
    /**
     * List of server BMCs and their respective user credentials
     */
    redfishServers?: pulumi.Input<pulumi.Input<inputs.SimpleUpdateRedfishServer>[]>;
    /**
     * Time in seconds that the provider waits for the server to be reset before timing out.
     */
    resetTimeout?: pulumi.Input<number>;
    /**
     * Reset type allows to choose the type of restart to apply when firmware upgrade is scheduled. Possible values are:
     * "ForceRestart", "GracefulRestart" or "PowerCycle"
     */
    resetType?: pulumi.Input<string>;
    /**
     * Time in seconds that the provider waits for the simple update job to be completed before timing out.
     */
    simpleUpdateJobTimeout?: pulumi.Input<number>;
    /**
     * Software ID from the firmware package uploaded
     */
    softwareId?: pulumi.Input<string>;
    /**
     * System ID of the system
     */
    systemId?: pulumi.Input<string>;
    /**
     * Target firmware image used for firmware update on the redfish instance. Make sure you place your firmware packages in
     * the same folder as the module and set it as follows: "${path.module}/BIOS_FXC54_WN64_1.15.0.EXE"
     */
    targetFirmwareImage?: pulumi.Input<string>;
    /**
     * The network protocol that the Update Service uses to retrieve the software image file located at the URI provided in
     * ImageURI, if the URI does not contain a scheme. Accepted values: CIFS, FTP, SFTP, HTTP, HTTPS, NSF, SCP, TFTP, OEM, NFS.
     * Currently only HTTP, HTTPS and NFS are supported with local file path or HTTP(s)/NFS link.
     */
    transferProtocol?: pulumi.Input<string>;
    /**
     * Software version from the firmware package uploaded
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SimpleUpdate resource.
 */
export interface SimpleUpdateArgs {
    /**
     * List of server BMCs and their respective user credentials
     */
    redfishServers?: pulumi.Input<pulumi.Input<inputs.SimpleUpdateRedfishServer>[]>;
    /**
     * Time in seconds that the provider waits for the server to be reset before timing out.
     */
    resetTimeout?: pulumi.Input<number>;
    /**
     * Reset type allows to choose the type of restart to apply when firmware upgrade is scheduled. Possible values are:
     * "ForceRestart", "GracefulRestart" or "PowerCycle"
     */
    resetType: pulumi.Input<string>;
    /**
     * Time in seconds that the provider waits for the simple update job to be completed before timing out.
     */
    simpleUpdateJobTimeout?: pulumi.Input<number>;
    /**
     * System ID of the system
     */
    systemId?: pulumi.Input<string>;
    /**
     * Target firmware image used for firmware update on the redfish instance. Make sure you place your firmware packages in
     * the same folder as the module and set it as follows: "${path.module}/BIOS_FXC54_WN64_1.15.0.EXE"
     */
    targetFirmwareImage: pulumi.Input<string>;
    /**
     * The network protocol that the Update Service uses to retrieve the software image file located at the URI provided in
     * ImageURI, if the URI does not contain a scheme. Accepted values: CIFS, FTP, SFTP, HTTP, HTTPS, NSF, SCP, TFTP, OEM, NFS.
     * Currently only HTTP, HTTPS and NFS are supported with local file path or HTTP(s)/NFS link.
     */
    transferProtocol: pulumi.Input<string>;
}
