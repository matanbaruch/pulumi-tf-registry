// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Power extends pulumi.CustomResource {
    /**
     * Get an existing Power resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PowerState, opts?: pulumi.CustomResourceOptions): Power {
        return new Power(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'redfish:index/power:Power';

    /**
     * Returns true if the given object is an instance of Power.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Power {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Power.__pulumiType;
    }

    /**
     * The frequency with which to check the server's power state in seconds
     */
    public readonly checkInterval!: pulumi.Output<number>;
    /**
     * Desired power setting. Applicable values are
     * 'On','ForceOn','ForceOff','ForceRestart','GracefulRestart','GracefulShutdown','PowerCycle', 'PushPowerButton', 'Nmi'
     */
    public readonly desiredPowerAction!: pulumi.Output<string>;
    /**
     * The maximum amount of time to wait for the server to enter the correct power state beforegiving up in seconds
     */
    public readonly maximumWaitTime!: pulumi.Output<number>;
    /**
     * Desired power setting. Applicable values
     * 'On','ForceOn','ForceOff','ForceRestart','GracefulRestart','GracefulShutdown','PowerCycle', 'PushPowerButton', 'Nmi'.
     */
    public /*out*/ readonly powerState!: pulumi.Output<string>;
    /**
     * List of server BMCs and their respective user credentials
     */
    public readonly redfishServers!: pulumi.Output<outputs.PowerRedfishServer[] | undefined>;
    /**
     * System ID of the system
     */
    public readonly systemId!: pulumi.Output<string>;

    /**
     * Create a Power resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PowerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PowerArgs | PowerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PowerState | undefined;
            resourceInputs["checkInterval"] = state ? state.checkInterval : undefined;
            resourceInputs["desiredPowerAction"] = state ? state.desiredPowerAction : undefined;
            resourceInputs["maximumWaitTime"] = state ? state.maximumWaitTime : undefined;
            resourceInputs["powerState"] = state ? state.powerState : undefined;
            resourceInputs["redfishServers"] = state ? state.redfishServers : undefined;
            resourceInputs["systemId"] = state ? state.systemId : undefined;
        } else {
            const args = argsOrState as PowerArgs | undefined;
            if ((!args || args.desiredPowerAction === undefined) && !opts.urn) {
                throw new Error("Missing required property 'desiredPowerAction'");
            }
            resourceInputs["checkInterval"] = args ? args.checkInterval : undefined;
            resourceInputs["desiredPowerAction"] = args ? args.desiredPowerAction : undefined;
            resourceInputs["maximumWaitTime"] = args ? args.maximumWaitTime : undefined;
            resourceInputs["redfishServers"] = args ? args.redfishServers : undefined;
            resourceInputs["systemId"] = args ? args.systemId : undefined;
            resourceInputs["powerState"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Power.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Power resources.
 */
export interface PowerState {
    /**
     * The frequency with which to check the server's power state in seconds
     */
    checkInterval?: pulumi.Input<number>;
    /**
     * Desired power setting. Applicable values are
     * 'On','ForceOn','ForceOff','ForceRestart','GracefulRestart','GracefulShutdown','PowerCycle', 'PushPowerButton', 'Nmi'
     */
    desiredPowerAction?: pulumi.Input<string>;
    /**
     * The maximum amount of time to wait for the server to enter the correct power state beforegiving up in seconds
     */
    maximumWaitTime?: pulumi.Input<number>;
    /**
     * Desired power setting. Applicable values
     * 'On','ForceOn','ForceOff','ForceRestart','GracefulRestart','GracefulShutdown','PowerCycle', 'PushPowerButton', 'Nmi'.
     */
    powerState?: pulumi.Input<string>;
    /**
     * List of server BMCs and their respective user credentials
     */
    redfishServers?: pulumi.Input<pulumi.Input<inputs.PowerRedfishServer>[]>;
    /**
     * System ID of the system
     */
    systemId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Power resource.
 */
export interface PowerArgs {
    /**
     * The frequency with which to check the server's power state in seconds
     */
    checkInterval?: pulumi.Input<number>;
    /**
     * Desired power setting. Applicable values are
     * 'On','ForceOn','ForceOff','ForceRestart','GracefulRestart','GracefulShutdown','PowerCycle', 'PushPowerButton', 'Nmi'
     */
    desiredPowerAction: pulumi.Input<string>;
    /**
     * The maximum amount of time to wait for the server to enter the correct power state beforegiving up in seconds
     */
    maximumWaitTime?: pulumi.Input<number>;
    /**
     * List of server BMCs and their respective user credentials
     */
    redfishServers?: pulumi.Input<pulumi.Input<inputs.PowerRedfishServer>[]>;
    /**
     * System ID of the system
     */
    systemId?: pulumi.Input<string>;
}
