// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface BiosRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: pulumi.Input<string>;
    /**
     * User password for login
     */
    password?: pulumi.Input<string>;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: pulumi.Input<boolean>;
    /**
     * User name for login
     */
    user?: pulumi.Input<string>;
}

export interface BootOrderBootOption {
    /**
     * Enable or disable the boot device.
     */
    bootOptionEnabled: pulumi.Input<boolean>;
    /**
     * FQDD of the boot device.
     */
    bootOptionReference?: pulumi.Input<string>;
}

export interface BootOrderRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: pulumi.Input<string>;
    /**
     * User password for login
     */
    password?: pulumi.Input<string>;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: pulumi.Input<boolean>;
    /**
     * User name for login
     */
    user?: pulumi.Input<string>;
}

export interface BootSourceOverrideRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: pulumi.Input<string>;
    /**
     * User password for login
     */
    password?: pulumi.Input<string>;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: pulumi.Input<boolean>;
    /**
     * User name for login
     */
    user?: pulumi.Input<string>;
}

export interface CertificateRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: pulumi.Input<string>;
    /**
     * User password for login
     */
    password?: pulumi.Input<string>;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: pulumi.Input<boolean>;
    /**
     * User name for login
     */
    user?: pulumi.Input<string>;
}

export interface DellIdracAttributesRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: pulumi.Input<string>;
    /**
     * User password for login
     */
    password?: pulumi.Input<string>;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: pulumi.Input<boolean>;
    /**
     * User name for login
     */
    user?: pulumi.Input<string>;
}

export interface DellLcAttributesRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: pulumi.Input<string>;
    /**
     * User password for login
     */
    password?: pulumi.Input<string>;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: pulumi.Input<boolean>;
    /**
     * User name for login
     */
    user?: pulumi.Input<string>;
}

export interface DellSystemAttributesRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: pulumi.Input<string>;
    /**
     * User password for login
     */
    password?: pulumi.Input<string>;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: pulumi.Input<boolean>;
    /**
     * User name for login
     */
    user?: pulumi.Input<string>;
}

export interface GetBiosRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: string;
    /**
     * User password for login
     */
    password?: string;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: boolean;
    /**
     * User name for login
     */
    user?: string;
}

export interface GetBiosRedfishServerArgs {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: pulumi.Input<string>;
    /**
     * User password for login
     */
    password?: pulumi.Input<string>;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: pulumi.Input<boolean>;
    /**
     * User name for login
     */
    user?: pulumi.Input<string>;
}

export interface GetDellIdracAttributesRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: string;
    /**
     * User password for login
     */
    password?: string;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: boolean;
    /**
     * User name for login
     */
    user?: string;
}

export interface GetDellIdracAttributesRedfishServerArgs {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: pulumi.Input<string>;
    /**
     * User password for login
     */
    password?: pulumi.Input<string>;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: pulumi.Input<boolean>;
    /**
     * User name for login
     */
    user?: pulumi.Input<string>;
}

export interface GetFirmwareInventoryRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: string;
    /**
     * User password for login
     */
    password?: string;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: boolean;
    /**
     * User name for login
     */
    user?: string;
}

export interface GetFirmwareInventoryRedfishServerArgs {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: pulumi.Input<string>;
    /**
     * User password for login
     */
    password?: pulumi.Input<string>;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: pulumi.Input<boolean>;
    /**
     * User name for login
     */
    user?: pulumi.Input<string>;
}

export interface GetNetworkNicFilter {
    /**
     * Filter for systems, nework adapters, network ports and network device functions
     */
    systems?: inputs.GetNetworkNicFilterSystem[];
}

export interface GetNetworkNicFilterArgs {
    /**
     * Filter for systems, nework adapters, network ports and network device functions
     */
    systems?: pulumi.Input<pulumi.Input<inputs.GetNetworkNicFilterSystemArgs>[]>;
}

export interface GetNetworkNicFilterSystem {
    /**
     * Filter for nework adapters, network ports and network device functions
     */
    networkAdapters?: inputs.GetNetworkNicFilterSystemNetworkAdapter[];
    /**
     * Filter for systems
     */
    systemId: string;
}

export interface GetNetworkNicFilterSystemArgs {
    /**
     * Filter for nework adapters, network ports and network device functions
     */
    networkAdapters?: pulumi.Input<pulumi.Input<inputs.GetNetworkNicFilterSystemNetworkAdapterArgs>[]>;
    /**
     * Filter for systems
     */
    systemId: pulumi.Input<string>;
}

export interface GetNetworkNicFilterSystemNetworkAdapter {
    /**
     * Filter for network adapters
     */
    networkAdapterId: string;
    /**
     * Filter for network device functions
     */
    networkDeviceFunctionIds?: string[];
    /**
     * Filter for network ports
     */
    networkPortIds?: string[];
}

export interface GetNetworkNicFilterSystemNetworkAdapterArgs {
    /**
     * Filter for network adapters
     */
    networkAdapterId: pulumi.Input<string>;
    /**
     * Filter for network device functions
     */
    networkDeviceFunctionIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Filter for network ports
     */
    networkPortIds?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetNetworkRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: string;
    /**
     * User password for login
     */
    password?: string;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: boolean;
    /**
     * User name for login
     */
    user?: string;
}

export interface GetNetworkRedfishServerArgs {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: pulumi.Input<string>;
    /**
     * User password for login
     */
    password?: pulumi.Input<string>;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: pulumi.Input<boolean>;
    /**
     * User name for login
     */
    user?: pulumi.Input<string>;
}

export interface GetStorageRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: string;
    /**
     * User password for login
     */
    password?: string;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: boolean;
    /**
     * User name for login
     */
    user?: string;
}

export interface GetStorageRedfishServerArgs {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: pulumi.Input<string>;
    /**
     * User password for login
     */
    password?: pulumi.Input<string>;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: pulumi.Input<boolean>;
    /**
     * User name for login
     */
    user?: pulumi.Input<string>;
}

export interface GetSystemBootRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: string;
    /**
     * User password for login
     */
    password?: string;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: boolean;
    /**
     * User name for login
     */
    user?: string;
}

export interface GetSystemBootRedfishServerArgs {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: pulumi.Input<string>;
    /**
     * User password for login
     */
    password?: pulumi.Input<string>;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: pulumi.Input<boolean>;
    /**
     * User name for login
     */
    user?: pulumi.Input<string>;
}

export interface GetVirtualMediaRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: string;
    /**
     * User password for login
     */
    password?: string;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: boolean;
    /**
     * User name for login
     */
    user?: string;
}

export interface GetVirtualMediaRedfishServerArgs {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: pulumi.Input<string>;
    /**
     * User password for login
     */
    password?: pulumi.Input<string>;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: pulumi.Input<boolean>;
    /**
     * User name for login
     */
    user?: pulumi.Input<string>;
}

export interface IdracFirmwareUpdateRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: pulumi.Input<string>;
    /**
     * User password for login
     */
    password?: pulumi.Input<string>;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: pulumi.Input<boolean>;
    /**
     * User name for login
     */
    user?: pulumi.Input<string>;
}

export interface IdracFirmwareUpdateUpdateList {
    /**
     * Criticality of the package update.
     */
    criticality?: pulumi.Input<string>;
    /**
     * Current version of the package.
     */
    currentPackageVersion?: pulumi.Input<string>;
    /**
     * Display name of the package.
     */
    displayName?: pulumi.Input<string>;
    /**
     * ID of the job if it's triggered.
     */
    jobId?: pulumi.Input<string>;
    /**
     * Message from the job if it's triggered.
     */
    jobMessage?: pulumi.Input<string>;
    /**
     * Status of the job if it's triggered.
     */
    jobStatus?: pulumi.Input<string>;
    /**
     * Name of the package to be updated.
     */
    packageName?: pulumi.Input<string>;
    /**
     * Reboot type of the package update.
     */
    rebootType?: pulumi.Input<string>;
    /**
     * Target version of the package.
     */
    targetPackageVersion?: pulumi.Input<string>;
}

export interface IdracServerConfigurationProfileExportRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: pulumi.Input<string>;
    /**
     * User password for login
     */
    password?: pulumi.Input<string>;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: pulumi.Input<boolean>;
    /**
     * User name for login
     */
    user?: pulumi.Input<string>;
}

export interface IdracServerConfigurationProfileExportShareParameters {
    /**
     * File Name - The name of the server configuration profile file to export.
     */
    filename: pulumi.Input<string>;
    /**
     * Ignore Certificate Warning
     */
    ignoreCertificateWarning?: pulumi.Input<boolean>;
    /**
     * IPAddress - The IP address of the target export server.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * Password - The password for the share server user account. This password is required if the share type is set to "CIFS". It is required only if the share type is set to "CIFS". It is not required if the share type is set to "NFS".
     */
    password?: pulumi.Input<string>;
    /**
     * Port Number - The port number used to communicate with the share server. The default value is 80.
     */
    portNumber?: pulumi.Input<number>;
    /**
     * The password for the proxy server. This is required if the proxy_support parameter is set to `true`. It is used for authenticating the proxy server credentials.
     */
    proxyPassword?: pulumi.Input<string>;
    /**
     * The port number used by the proxy server. 
     * 			This parameter is optional. 
     * 			If not provided, the default port number (80) is used for the communication with the proxy server.
     */
    proxyPort?: pulumi.Input<number>;
    /**
     * The IP address or hostname of the proxy server.
     * 			 This is the server that acts as a bridge between the iDRAC and the Server Configuration Profile share server. 
     * 			 It is used to communicate with the Server Configuration Profile share server 
     * 			 in order to export the Server Configuration Profile. If the Server Configuration Profile share server
     * 			  is not accessible from the iDRAC directly, then a proxy server must be used in order to establish the connection. 
     * 			  This parameter is optional. 
     * 			  If it is not provided, the Server Configuration Profile export operation
     * 			   will attempt to connect to the Server Configuration Profile share server directly.
     */
    proxyServer?: pulumi.Input<string>;
    /**
     * Proxy Support - Specifies whether or not to use a proxy server for the export operation. If `true`, export operation will use a proxy server for communication with the export server. If `false`, export operation will not use a proxy server for communication with the export server. Default value is `false`.
     */
    proxySupport?: pulumi.Input<boolean>;
    /**
     * The type of proxy server to be used. The default is "HTTP". If set to "SOCKS4", a SOCKS4 proxy server must be specified. If set to "HTTP", an HTTP proxy server must be specified. If not specified, the Server Configuration Profile export operation will attempt to connect to the Server Configuration Profile share server directly.
     */
    proxyType?: pulumi.Input<string>;
    /**
     * The username to be used when connecting to the proxy server.
     */
    proxyUsername?: pulumi.Input<string>;
    /**
     * Share Name - The name of the directory or share on the server 
     * 			that contains the Server Configuration Profile file to export.
     */
    shareName?: pulumi.Input<string>;
    /**
     * Share Type - The type of share being used to export the Server Configuration Profile file.
     */
    shareType: pulumi.Input<string>;
    /**
     * Filter configuration by target
     */
    targets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Username - The username to use when authenticating with the server
     * 			 that contains the Server Configuration Profile file being exported.
     */
    username?: pulumi.Input<string>;
}

export interface IdracServerConfigurationProfileImportRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: pulumi.Input<string>;
    /**
     * User password for login
     */
    password?: pulumi.Input<string>;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: pulumi.Input<boolean>;
    /**
     * User name for login
     */
    user?: pulumi.Input<string>;
}

export interface IdracServerConfigurationProfileImportShareParameters {
    /**
     * File Name - The name of the server configuration profile file to import. This is the name of the file that was previously exported using the Server Configuration Profile Export operation. This file is typically in the xml/json format
     */
    filename: pulumi.Input<string>;
    /**
     * Ignore Certificate Warning
     */
    ignoreCertificateWarning?: pulumi.Input<boolean>;
    /**
     * IPAddress - The IP address of the target export server.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * Password - The password for the share server user account. This password is required if the share type is set to "CIFS". It is required only if the share type is set to "CIFS". It is not required if the share type is set to "NFS".
     */
    password?: pulumi.Input<string>;
    /**
     * Port Number - The port number used to communicate with the share server. The default value is 80.
     */
    portNumber?: pulumi.Input<number>;
    /**
     * The password for the proxy server. This is required if the proxy_support parameter is set to `true`. It is used for authenticating the proxy server credentials.
     */
    proxyPassword?: pulumi.Input<string>;
    /**
     * The port number used by the proxy server. 
     * 			This parameter is optional. 
     * 			If not provided, the default port number (80) is used for the communication with the proxy server.
     */
    proxyPort?: pulumi.Input<number>;
    /**
     * The IP address or hostname of the proxy server.
     * 			 This is the server that acts as a bridge between the iDRAC and the Server Configuration Profile share server. 
     * 			 It is used to communicate with the Server Configuration Profile share server 
     * 			 in order to import the Server Configuration Profile. If the Server Configuration Profile share server
     * 			  is not accessible from the iDRAC directly, then a proxy server must be used in order to establish the connection. 
     * 			  This parameter is optional. 
     * 			  If it is not provided, the Server Configuration Profile import operation
     * 			   will attempt to connect to the Server Configuration Profile share server directly.
     */
    proxyServer?: pulumi.Input<string>;
    /**
     * Proxy Support - Specifies whether or not to use a proxy server for the import operation. If `true`, import operation will use a proxy server for communication with the export server. If `false`, import operation will not use a proxy server for communication with the export server. Default value is `false`.
     */
    proxySupport?: pulumi.Input<boolean>;
    /**
     * The type of proxy server to be used. The default is "HTTP". If set to "SOCKS4", a SOCKS4 proxy server must be specified. If set to "HTTP", an HTTP proxy server must be specified. If not specified, the Server Configuration Profile import operation will attempt to connect to the Server Configuration Profile share server directly.
     */
    proxyType?: pulumi.Input<string>;
    /**
     * The username to be used when connecting to the proxy server.
     */
    proxyUsername?: pulumi.Input<string>;
    /**
     * Share Name - The name of the directory or share on the server 
     * 			that contains the Server Configuration Profile file to import.
     */
    shareName?: pulumi.Input<string>;
    /**
     * Share Type - The type of share being used to import the Server Configuration Profile file.
     */
    shareType: pulumi.Input<string>;
    /**
     * Filter configuration by target
     */
    targets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Username - The username to use when authenticating with the server
     * 			 that contains the Server Configuration Profile file being imported.
     */
    username?: pulumi.Input<string>;
}

export interface ManagerResetRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: pulumi.Input<string>;
    /**
     * User password for login
     */
    password?: pulumi.Input<string>;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: pulumi.Input<boolean>;
    /**
     * User name for login
     */
    user?: pulumi.Input<string>;
}

export interface NetworkAdapterMaintenanceWindow {
    /**
     * The duration in seconds for the maintenance window. (Update Supported)
     */
    duration: pulumi.Input<number>;
    /**
     * The start time for the maintenance window to be scheduled. (Update Supported)The format is YYYY-MM-DDThh:mm:ss<offset>. <offset> is the time offset from UTC that the current timezone set in iDRAC in the format: +05:30 for IST.
     */
    startTime: pulumi.Input<string>;
}

export interface NetworkAdapterNetworkAttributes {
    /**
     * A reference to assignable physical network ports to this function
     */
    assignablePhysicalNetworkPorts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A reference to assignable physical ports to this function
     */
    assignablePhysicalPorts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * description of the network device function
     */
    description?: pulumi.Input<string>;
    /**
     * This type describes Ethernet capabilities, status, and configuration for a network device function.  (Update Supported)
     */
    ethernet?: pulumi.Input<inputs.NetworkAdapterNetworkAttributesEthernet>;
    /**
     * This type describes Fibre Channel capabilities, status, and configuration for a network device function. (Update Supported)
     */
    fibreChannel?: pulumi.Input<inputs.NetworkAdapterNetworkAttributesFibreChannel>;
    /**
     * ID of the network device function
     */
    id?: pulumi.Input<string>;
    /**
     * The iSCSI boot capabilities, status, and configuration for a network device function. (Update Supported)
     */
    iscsiBoot?: pulumi.Input<inputs.NetworkAdapterNetworkAttributesIscsiBoot>;
    /**
     * The number of virtual functions that are available for this network device function
     */
    maxVirtualFunctions?: pulumi.Input<number>;
    /**
     * name of the network device function
     */
    name?: pulumi.Input<string>;
    /**
     * An array of capabilities for this network device function
     */
    netDevFuncCapabilities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The configured capability of this network device function. (Update Supported)Accepted values: `Disabled`, `Ethernet`, `FibreChannel`, `iSCSI`, `FibreChannelOverEthernet`, `InfiniBand`.
     */
    netDevFuncType?: pulumi.Input<string>;
    /**
     * OData ID for the network device function
     */
    odataId?: pulumi.Input<string>;
    /**
     * A reference to a physical port assignment to this function
     */
    physicalPortAssignment?: pulumi.Input<string>;
    /**
     * status of the network device function
     */
    status?: pulumi.Input<inputs.NetworkAdapterNetworkAttributesStatus>;
}

export interface NetworkAdapterNetworkAttributesEthernet {
    /**
     * The currently configured MAC address. (Update Supported)
     */
    macAddress?: pulumi.Input<string>;
    /**
     * The maximum transmission unit (MTU) configured for this network device function. (Update Supported)
     */
    mtuSize?: pulumi.Input<number>;
    /**
     * The permanent MAC address assigned to this function
     */
    permanentMacAddress?: pulumi.Input<string>;
    /**
     * The attributes of a VLAN. (Update Supported)
     */
    vlan?: pulumi.Input<inputs.NetworkAdapterNetworkAttributesEthernetVlan>;
}

export interface NetworkAdapterNetworkAttributesEthernetVlan {
    /**
     * An indication of whether the VLAN is enabled. (Update Supported)
     */
    vlanEnabled?: pulumi.Input<boolean>;
    /**
     * The vlan id of the network device function. (Update Supported)
     */
    vlanId?: pulumi.Input<number>;
}

export interface NetworkAdapterNetworkAttributesFibreChannel {
    /**
     * An indication of whether the FCoE Initialization Protocol (FIP) populates the FCoE VLAN ID. (Update Supported)
     */
    allowFipVlanDiscovery?: pulumi.Input<boolean>;
    /**
     * A Fibre Channel boot target configured for a network device function. (Update Supported)
     */
    bootTargets?: pulumi.Input<pulumi.Input<inputs.NetworkAdapterNetworkAttributesFibreChannelBootTarget>[]>;
    /**
     * The active FCoE VLAN ID
     */
    fcoeActiveVlanId?: pulumi.Input<number>;
    /**
     * The locally configured FCoE VLAN ID. (Update Supported)
     */
    fcoeLocalVlanId?: pulumi.Input<number>;
    /**
     * The Fibre Channel ID that the switch assigns for this interface
     */
    fibreChannelId?: pulumi.Input<string>;
    /**
     * The permanent World Wide Node Name (WWNN) address assigned to this function
     */
    permanentWwnn?: pulumi.Input<string>;
    /**
     * The permanent World Wide Port Name (WWPN) address assigned to this function
     */
    permanentWwpn?: pulumi.Input<string>;
    /**
     * The configuration source of the World Wide Names (WWN) for this World Wide Node Name (WWNN) and World Wide Port Name (WWPN) connection. (Update Supported). Accepted values: `ConfiguredLocally`, `ProvidedByFabric`.
     */
    wwnSource?: pulumi.Input<string>;
    /**
     * The currently configured World Wide Node Name (WWNN) address of this function. (Update Supported)
     */
    wwnn?: pulumi.Input<string>;
    /**
     * The currently configured World Wide Port Name (WWPN) address of this function. (Update Supported)
     */
    wwpn?: pulumi.Input<string>;
}

export interface NetworkAdapterNetworkAttributesFibreChannelBootTarget {
    /**
     * The relative priority for this entry in the boot targets array. (Update Supported)
     */
    bootPriority?: pulumi.Input<number>;
    /**
     * The logical unit number (LUN) ID from which to boot on the device to which the corresponding WWPN refers. (Update Supported)
     */
    lunId?: pulumi.Input<string>;
    /**
     * The World Wide Port Name (WWPN) from which to boot. (Update Supported)
     */
    wwpn?: pulumi.Input<string>;
}

export interface NetworkAdapterNetworkAttributesIscsiBoot {
    /**
     * The iSCSI boot authentication method for this network device function. (Update Supported)Accepted values: `None`, `CHAP`, `MutualCHAP`.
     */
    authenticationMethod?: pulumi.Input<string>;
    /**
     * The shared secret for CHAP authentication. (Update Supported)
     */
    chapSecret?: pulumi.Input<string>;
    /**
     * The user name for CHAP authentication. (Update Supported)
     */
    chapUsername?: pulumi.Input<string>;
    /**
     * The IPv6 or IPv4 iSCSI boot default gateway. (Update Supported)
     */
    initiatorDefaultGateway?: pulumi.Input<string>;
    /**
     * The IPv6 or IPv4 address of the iSCSI initiator. (Update Supported)
     */
    initiatorIpAddress?: pulumi.Input<string>;
    /**
     * The iSCSI initiator name. (Update Supported)
     */
    initiatorName?: pulumi.Input<string>;
    /**
     * The IPv6 or IPv4 netmask of the iSCSI boot initiator. (Update Supported)
     */
    initiatorNetmask?: pulumi.Input<string>;
    /**
     * The type of IP address being populated in the iSCSIBoot IP address fields. (Update Supported) Accepted values: `IPv4`, `IPv6`.
     */
    ipAddressType?: pulumi.Input<string>;
    /**
     * An indication of whether the iSCSI boot initiator uses DHCP to obtain the initiator name, IP address, and netmask. (Update Supported)
     */
    ipMaskDnsViaDhcp?: pulumi.Input<boolean>;
    /**
     * The CHAP secret for two-way CHAP authentication. (Update Supported)
     */
    mutualChapSecret?: pulumi.Input<string>;
    /**
     * The CHAP user name for two-way CHAP authentication. (Update Supported)
     */
    mutualChapUsername?: pulumi.Input<string>;
    /**
     * The IPv6 or IPv4 address of the primary DNS server for the iSCSI boot initiator. (Update Supported)
     */
    primaryDns?: pulumi.Input<string>;
    /**
     * The logical unit number (LUN) for the primary iSCSI boot target. (Update Supported)
     */
    primaryLun?: pulumi.Input<number>;
    /**
     * The IPv4 or IPv6 address for the primary iSCSI boot target. (Update Supported)
     */
    primaryTargetIpAddress?: pulumi.Input<string>;
    /**
     * The name of the iSCSI primary boot target. (Update Supported)
     */
    primaryTargetName?: pulumi.Input<string>;
    /**
     * The TCP port for the primary iSCSI boot target. (Update Supported)
     */
    primaryTargetTcpPort?: pulumi.Input<number>;
    /**
     * An indication of whether the primary VLAN is enabled. (Update Supported)
     */
    primaryVlanEnable?: pulumi.Input<boolean>;
    /**
     * The 802.1q VLAN ID to use for iSCSI boot from the primary target. (Update Supported)
     */
    primaryVlanId?: pulumi.Input<number>;
    /**
     * An indication of whether IPv6 router advertisement is enabled for the iSCSI boot target. (Update Supported)
     */
    routerAdvertisementEnabled?: pulumi.Input<boolean>;
    /**
     * The IPv6 or IPv4 address of the secondary DNS server for the iSCSI boot initiator. (Update Supported)
     */
    secondaryDns?: pulumi.Input<string>;
    /**
     * The logical unit number (LUN) for the secondary iSCSI boot target. (Update Supported)
     */
    secondaryLun?: pulumi.Input<number>;
    /**
     * The IPv4 or IPv6 address for the secondary iSCSI boot target. (Update Supported)
     */
    secondaryTargetIpAddress?: pulumi.Input<string>;
    /**
     * The name of the iSCSI secondary boot target. (Update Supported)
     */
    secondaryTargetName?: pulumi.Input<string>;
    /**
     * The TCP port for the secondary iSCSI boot target. (Update Supported)
     */
    secondaryTargetTcpPort?: pulumi.Input<number>;
    /**
     * An indication of whether the secondary VLAN is enabled. (Update Supported)
     */
    secondaryVlanEnable?: pulumi.Input<boolean>;
    /**
     * The 802.1q VLAN ID to use for iSCSI boot from the secondary target. (Update Supported)
     */
    secondaryVlanId?: pulumi.Input<number>;
    /**
     * An indication of whether the iSCSI boot target name, LUN, IP address, and netmask should be obtained from DHCP. (Update Supported)
     */
    targetInfoViaDhcp?: pulumi.Input<boolean>;
}

export interface NetworkAdapterNetworkAttributesStatus {
    /**
     * health
     */
    health?: pulumi.Input<string>;
    /**
     * health rollup
     */
    healthRollup?: pulumi.Input<string>;
    /**
     * state of the storage controller
     */
    state?: pulumi.Input<string>;
}

export interface NetworkAdapterOemNetworkAttributes {
    /**
     * registry of the network_attributes
     */
    attributeRegistry?: pulumi.Input<string>;
    /**
     * dell network attributes. (Update Supported) To check allowed attributes please either use the datasource for dell network attributes: data.redfish_network or query /redfish/v1/Chassis/System.Embedded.1/NetworkAdapters/NIC.Integrated.1/NetworkDeviceFunctions/NIC.Integrated.1-3-1/Oem/Dell/DellNetworkAttributes/NIC.Integrated.1-3-1 to get attributes for NIC. To get allowed values for those attributes, check /redfish/v1/Registries/NetworkAttributesRegistry_{network_device_function_id}/NetworkAttributesRegistry_{network_device_function_id}.json from a Redfish Instance
     */
    attributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * This parameter allows you to clear all the pending OEM network attributes changes. (Update Supported)`false`: does not perform any operation. `true`:  discards any pending changes to network attributes, or if a job is in scheduled state, removes the job. `apply_time` value will be ignored and will not have any impact for `clear_pending` operation.
     */
    clearPending?: pulumi.Input<boolean>;
    /**
     * description of network_attributes
     */
    description?: pulumi.Input<string>;
    /**
     * ID of the network_attributes
     */
    id?: pulumi.Input<string>;
    /**
     * name of the network_attributes
     */
    name?: pulumi.Input<string>;
    /**
     * OData ID for the network_attributes
     */
    odataId?: pulumi.Input<string>;
}

export interface NetworkAdapterRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: pulumi.Input<string>;
    /**
     * User password for login
     */
    password?: pulumi.Input<string>;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: pulumi.Input<boolean>;
    /**
     * User name for login
     */
    user?: pulumi.Input<string>;
}

export interface PowerRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: pulumi.Input<string>;
    /**
     * User password for login
     */
    password?: pulumi.Input<string>;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: pulumi.Input<boolean>;
    /**
     * User name for login
     */
    user?: pulumi.Input<string>;
}

export interface SimpleUpdateRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: pulumi.Input<string>;
    /**
     * User password for login
     */
    password?: pulumi.Input<string>;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: pulumi.Input<boolean>;
    /**
     * User name for login
     */
    user?: pulumi.Input<string>;
}

export interface StorageVolumeRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: pulumi.Input<string>;
    /**
     * User password for login
     */
    password?: pulumi.Input<string>;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: pulumi.Input<boolean>;
    /**
     * User name for login
     */
    user?: pulumi.Input<string>;
}

export interface UserAccountRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: pulumi.Input<string>;
    /**
     * User password for login
     */
    password?: pulumi.Input<string>;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: pulumi.Input<boolean>;
    /**
     * User name for login
     */
    user?: pulumi.Input<string>;
}

export interface VirtualMediaRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: pulumi.Input<string>;
    /**
     * User password for login
     */
    password?: pulumi.Input<string>;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: pulumi.Input<boolean>;
    /**
     * User name for login
     */
    user?: pulumi.Input<string>;
}
