// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface BiosRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: string;
    /**
     * User password for login
     */
    password?: string;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: boolean;
    /**
     * User name for login
     */
    user?: string;
}

export interface BootOrderBootOption {
    /**
     * Enable or disable the boot device.
     */
    bootOptionEnabled: boolean;
    /**
     * FQDD of the boot device.
     */
    bootOptionReference: string;
}

export interface BootOrderRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: string;
    /**
     * User password for login
     */
    password?: string;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: boolean;
    /**
     * User name for login
     */
    user?: string;
}

export interface BootSourceOverrideRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: string;
    /**
     * User password for login
     */
    password?: string;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: boolean;
    /**
     * User name for login
     */
    user?: string;
}

export interface CertificateRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: string;
    /**
     * User password for login
     */
    password?: string;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: boolean;
    /**
     * User name for login
     */
    user?: string;
}

export interface DellIdracAttributesRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: string;
    /**
     * User password for login
     */
    password?: string;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: boolean;
    /**
     * User name for login
     */
    user?: string;
}

export interface DellLcAttributesRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: string;
    /**
     * User password for login
     */
    password?: string;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: boolean;
    /**
     * User name for login
     */
    user?: string;
}

export interface DellSystemAttributesRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: string;
    /**
     * User password for login
     */
    password?: string;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: boolean;
    /**
     * User name for login
     */
    user?: string;
}

export interface GetBiosBootOption {
    /**
     * Enable or disable the boot device.
     */
    bootOptionEnabled: boolean;
    /**
     * FQDD of the boot device.
     */
    bootOptionReference: string;
    /**
     * Display name of the boot option
     */
    displayName: string;
    /**
     * ID of the boot option
     */
    id: string;
    /**
     * Name of the boot option
     */
    name: string;
    /**
     * Device path of the boot option
     */
    uefiDevicePath: string;
}

export interface GetBiosRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: string;
    /**
     * User password for login
     */
    password?: string;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: boolean;
    /**
     * User name for login
     */
    user?: string;
}

export interface GetDellIdracAttributesRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: string;
    /**
     * User password for login
     */
    password?: string;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: boolean;
    /**
     * User name for login
     */
    user?: string;
}

export interface GetFirmwareInventoryInventory {
    /**
     * entity id of the firmware inventory
     */
    entityId: string;
    /**
     * entity name of the firmware inventory
     */
    entityName: string;
    /**
     * firmware inventory version
     */
    version: string;
}

export interface GetFirmwareInventoryRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: string;
    /**
     * User password for login
     */
    password?: string;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: boolean;
    /**
     * User name for login
     */
    user?: string;
}

export interface GetNetworkNetworkInterface {
    /**
     * Description of the NIC data-source
     */
    description: string;
    /**
     * ID of the NIC data-source
     */
    id: string;
    /**
     * Name of the NIC data-source
     */
    name: string;
    /**
     * Network adapter fetched
     */
    networkAdapter: outputs.GetNetworkNetworkInterfaceNetworkAdapter;
    /**
     * List of network device functions fetched
     */
    networkDeviceFunctions: outputs.GetNetworkNetworkInterfaceNetworkDeviceFunction[];
    /**
     * List of network ports fetched
     */
    networkPorts: outputs.GetNetworkNetworkInterfaceNetworkPort[];
    /**
     * OData ID for the NIC instance
     */
    odataId: string;
    /**
     * The status and health of a resource and its children
     */
    status: outputs.GetNetworkNetworkInterfaceStatus;
}

export interface GetNetworkNetworkInterfaceNetworkAdapter {
    /**
     * A network controller ASIC that makes up part of a network adapter
     */
    controllers: outputs.GetNetworkNetworkInterfaceNetworkAdapterController[];
    /**
     * Description of the network adapter
     */
    description: string;
    /**
     * ID of the network adapter
     */
    id: string;
    /**
     * The manufacturer or OEM of this network adapter
     */
    manufacturer: string;
    /**
     * The model string for this network adapter
     */
    model: string;
    /**
     * Name of the network adapter
     */
    name: string;
    /**
     * OData ID for the network adapter
     */
    odataId: string;
    /**
     * Part number for this network adapter
     */
    partNumber: string;
    /**
     * The serial number for this network adapter
     */
    serialNumber: string;
    /**
     * The status and health of a resource and its children
     */
    status: outputs.GetNetworkNetworkInterfaceNetworkAdapterStatus;
}

export interface GetNetworkNetworkInterfaceNetworkAdapterController {
    /**
     * The capabilities of this controller
     */
    controllerCapabilities: outputs.GetNetworkNetworkInterfaceNetworkAdapterControllerControllerCapabilities;
    /**
     * The version of the user-facing firmware package
     */
    firmwarePackageVersion: string;
}

export interface GetNetworkNetworkInterfaceNetworkAdapterControllerControllerCapabilities {
    /**
     * Data center bridging (DCB) for capabilities of a controller
     */
    dataCenterBridging: outputs.GetNetworkNetworkInterfaceNetworkAdapterControllerControllerCapabilitiesDataCenterBridging;
    /**
     * NIC Partitioning capability, status, and configuration for a controller
     */
    npar: outputs.GetNetworkNetworkInterfaceNetworkAdapterControllerControllerCapabilitiesNpar;
    /**
     * N_Port ID Virtualization (NPIV) capabilities for a controller
     */
    npiv: outputs.GetNetworkNetworkInterfaceNetworkAdapterControllerControllerCapabilitiesNpiv;
    /**
     * A Virtualization offload capability of a controller
     */
    virtualizationOffload: outputs.GetNetworkNetworkInterfaceNetworkAdapterControllerControllerCapabilitiesVirtualizationOffload;
}

export interface GetNetworkNetworkInterfaceNetworkAdapterControllerControllerCapabilitiesDataCenterBridging {
    /**
     * An indication of whether this controller is capable of data center bridging (DCB)
     */
    capable: boolean;
}

export interface GetNetworkNetworkInterfaceNetworkAdapterControllerControllerCapabilitiesNpar {
    /**
     * An indication of whether the controller supports NIC function partitioning
     */
    nparCapable: boolean;
    /**
     * An indication of whether NIC function partitioning is active on this controller.
     */
    nparEnabled: boolean;
}

export interface GetNetworkNetworkInterfaceNetworkAdapterControllerControllerCapabilitiesNpiv {
    /**
     * The maximum number of N_Port ID Virtualization (NPIV) logins allowed simultaneously from all ports on this controller
     */
    maxDeviceLogins: number;
    /**
     * The maximum number of N_Port ID Virtualization (NPIV) logins allowed per physical port on this controller
     */
    maxPortLogins: number;
}

export interface GetNetworkNetworkInterfaceNetworkAdapterControllerControllerCapabilitiesVirtualizationOffload {
    /**
     * Single-root input/output virtualization (SR-IOV) capabilities
     */
    sriov: outputs.GetNetworkNetworkInterfaceNetworkAdapterControllerControllerCapabilitiesVirtualizationOffloadSriov;
    /**
     * A virtual function of a controller
     */
    virtualFunction: outputs.GetNetworkNetworkInterfaceNetworkAdapterControllerControllerCapabilitiesVirtualizationOffloadVirtualFunction;
}

export interface GetNetworkNetworkInterfaceNetworkAdapterControllerControllerCapabilitiesVirtualizationOffloadSriov {
    /**
     * An indication of whether this controller supports single root input/output virtualization (SR-IOV)in Virtual Ethernet Port Aggregator (VEPA) mode
     */
    sriovVepaCapable: boolean;
}

export interface GetNetworkNetworkInterfaceNetworkAdapterControllerControllerCapabilitiesVirtualizationOffloadVirtualFunction {
    /**
     * The maximum number of virtual functions supported by this controller
     */
    deviceMaxCount: number;
    /**
     * The minimum number of virtual functions that can be allocated or moved between physical functions for this controller
     */
    minAssignmentGroupSize: number;
    /**
     * The maximum number of virtual functions supported per network port for this controller
     */
    networkPortMaxCount: number;
}

export interface GetNetworkNetworkInterfaceNetworkAdapterStatus {
    /**
     * health
     */
    health: string;
    /**
     * health rollup
     */
    healthRollup: string;
    /**
     * state of the storage controller
     */
    state: string;
}

export interface GetNetworkNetworkInterfaceNetworkDeviceFunction {
    /**
     * A reference to assignable physical network ports to this function
     */
    assignablePhysicalNetworkPorts: string[];
    /**
     * A reference to assignable physical ports to this function
     */
    assignablePhysicalPorts: string[];
    /**
     * description of the network device function
     */
    description: string;
    /**
     * This type describes Ethernet capabilities, status, and configuration for a network device function
     */
    ethernet: outputs.GetNetworkNetworkInterfaceNetworkDeviceFunctionEthernet;
    /**
     * This type describes Fibre Channel capabilities, status, and configuration for a network device function
     */
    fibreChannel: outputs.GetNetworkNetworkInterfaceNetworkDeviceFunctionFibreChannel;
    /**
     * ID of the network device function
     */
    id: string;
    /**
     * The iSCSI boot capabilities, status, and configuration for a network device function
     */
    iscsiBoot: outputs.GetNetworkNetworkInterfaceNetworkDeviceFunctionIscsiBoot;
    /**
     * The number of virtual functions that are available for this network device function
     */
    maxVirtualFunctions: number;
    /**
     * name of the network device function
     */
    name: string;
    /**
     * An array of capabilities for this network device function
     */
    netDevFuncCapabilities: string[];
    /**
     * The configured capability of this network device function
     */
    netDevFuncType: string;
    /**
     * OData ID for the network device function
     */
    odataId: string;
    /**
     * The OEM extension for this network network function
     */
    oem: outputs.GetNetworkNetworkInterfaceNetworkDeviceFunctionOem;
    /**
     * A reference to a physical port assignment to this function
     */
    physicalPortAssignment: string;
    /**
     * status of the network device function
     */
    status: outputs.GetNetworkNetworkInterfaceNetworkDeviceFunctionStatus;
}

export interface GetNetworkNetworkInterfaceNetworkDeviceFunctionEthernet {
    /**
     * The currently configured MAC address
     */
    macAddress: string;
    /**
     * The maximum transmission unit (MTU) configured for this network device function
     */
    mtuSize: number;
    /**
     * The permanent MAC address assigned to this function
     */
    permanentMacAddress: string;
    /**
     * The attributes of a VLAN
     */
    vlan: outputs.GetNetworkNetworkInterfaceNetworkDeviceFunctionEthernetVlan;
}

export interface GetNetworkNetworkInterfaceNetworkDeviceFunctionEthernetVlan {
    /**
     * An indication of whether the VLAN is enabled
     */
    vlanEnabled: boolean;
    /**
     * The vlan id of the network device function
     */
    vlanId: number;
}

export interface GetNetworkNetworkInterfaceNetworkDeviceFunctionFibreChannel {
    /**
     * An indication of whether the FCoE Initialization Protocol (FIP) populates the FCoE VLAN ID
     */
    allowFipVlanDiscovery: boolean;
    /**
     * A Fibre Channel boot target configured for a network device function
     */
    bootTargets: outputs.GetNetworkNetworkInterfaceNetworkDeviceFunctionFibreChannelBootTarget[];
    /**
     * The active FCoE VLAN ID
     */
    fcoeActiveVlanId: number;
    /**
     * The locally configured FCoE VLAN ID
     */
    fcoeLocalVlanId: number;
    /**
     * The Fibre Channel ID that the switch assigns for this interface
     */
    fibreChannelId: string;
    /**
     * The permanent World Wide Node Name (WWNN) address assigned to this function
     */
    permanentWwnn: string;
    /**
     * The permanent World Wide Port Name (WWPN) address assigned to this function
     */
    permanentWwpn: string;
    /**
     * The configuration source of the World Wide Names (WWN) for this World Wide Node Name (WWNN) and World Wide Port Name (WWPN) connection
     */
    wwnSource: string;
    /**
     * The currently configured World Wide Node Name (WWNN) address of this function
     */
    wwnn: string;
    /**
     * The currently configured World Wide Port Name (WWPN) address of this function
     */
    wwpn: string;
}

export interface GetNetworkNetworkInterfaceNetworkDeviceFunctionFibreChannelBootTarget {
    /**
     * The relative priority for this entry in the boot targets array
     */
    bootPriority: number;
    /**
     * The logical unit number (LUN) ID from which to boot on the device to which the corresponding WWPN refers
     */
    lunId: string;
    /**
     * The World Wide Port Name (WWPN) from which to boot
     */
    wwpn: string;
}

export interface GetNetworkNetworkInterfaceNetworkDeviceFunctionIscsiBoot {
    /**
     * The iSCSI boot authentication method for this network device function
     */
    authenticationMethod: string;
    /**
     * The shared secret for CHAP authentication
     */
    chapSecret: string;
    /**
     * The user name for CHAP authentication
     */
    chapUsername: string;
    /**
     * The IPv6 or IPv4 iSCSI boot default gateway
     */
    initiatorDefaultGateway: string;
    /**
     * The IPv6 or IPv4 address of the iSCSI initiator
     */
    initiatorIpAddress: string;
    /**
     * The iSCSI initiator name
     */
    initiatorName: string;
    /**
     * The IPv6 or IPv4 netmask of the iSCSI boot initiator
     */
    initiatorNetmask: string;
    /**
     * The type of IP address being populated in the iSCSIBoot IP address fields
     */
    ipAddressType: string;
    /**
     * An indication of whether the iSCSI boot initiator uses DHCP to obtain the initiator name, IP address, and netmask
     */
    ipMaskDnsViaDhcp: boolean;
    /**
     * The CHAP secret for two-way CHAP authentication
     */
    mutualChapSecret: string;
    /**
     * The CHAP user name for two-way CHAP authentication
     */
    mutualChapUsername: string;
    /**
     * The IPv6 or IPv4 address of the primary DNS server for the iSCSI boot initiator
     */
    primaryDns: string;
    /**
     * The logical unit number (LUN) for the primary iSCSI boot target
     */
    primaryLun: number;
    /**
     * The IPv4 or IPv6 address for the primary iSCSI boot target
     */
    primaryTargetIpAddress: string;
    /**
     * The name of the iSCSI primary boot target
     */
    primaryTargetName: string;
    /**
     * The TCP port for the primary iSCSI boot target
     */
    primaryTargetTcpPort: number;
    /**
     * An indication of whether the primary VLAN is enabled
     */
    primaryVlanEnable: boolean;
    /**
     * The 802.1q VLAN ID to use for iSCSI boot from the primary target
     */
    primaryVlanId: number;
    /**
     * An indication of whether IPv6 router advertisement is enabled for the iSCSI boot target
     */
    routerAdvertisementEnabled: boolean;
    /**
     * The IPv6 or IPv4 address of the secondary DNS server for the iSCSI boot initiator
     */
    secondaryDns: string;
    /**
     * The logical unit number (LUN) for the secondary iSCSI boot target
     */
    secondaryLun: number;
    /**
     * The IPv4 or IPv6 address for the secondary iSCSI boot target
     */
    secondaryTargetIpAddress: string;
    /**
     * The name of the iSCSI secondary boot target
     */
    secondaryTargetName: string;
    /**
     * The TCP port for the secondary iSCSI boot target
     */
    secondaryTargetTcpPort: number;
    /**
     * An indication of whether the secondary VLAN is enabled
     */
    secondaryVlanEnable: boolean;
    /**
     * The 802.1q VLAN ID to use for iSCSI boot from the secondary target
     */
    secondaryVlanId: number;
    /**
     * An indication of whether the iSCSI boot target name, LUN, IP address, and netmask should be obtained from DHCP
     */
    targetInfoViaDhcp: boolean;
}

export interface GetNetworkNetworkInterfaceNetworkDeviceFunctionOem {
    /**
     * The OEM extension of Dell FC for this network device function
     */
    dellFc: outputs.GetNetworkNetworkInterfaceNetworkDeviceFunctionOemDellFc;
    /**
     * The OEM extension of Dell FC capabilities for this network device function
     */
    dellFcPortCapabilities: outputs.GetNetworkNetworkInterfaceNetworkDeviceFunctionOemDellFcPortCapabilities;
    /**
     * The OEM extension of Dell FC port metrics for this network device function
     */
    dellFcPortMetrics: outputs.GetNetworkNetworkInterfaceNetworkDeviceFunctionOemDellFcPortMetrics;
    /**
     * The OEM extension of Dell NIC for this network device function
     */
    dellNic: outputs.GetNetworkNetworkInterfaceNetworkDeviceFunctionOemDellNic;
    /**
     * The OEM extension of Dell NIC capabilities for this network device function
     */
    dellNicCapabilities: outputs.GetNetworkNetworkInterfaceNetworkDeviceFunctionOemDellNicCapabilities;
    /**
     * The OEM extension of Dell NIC port metrics for this network device function
     */
    dellNicPortMetrics: outputs.GetNetworkNetworkInterfaceNetworkDeviceFunctionOemDellNicPortMetrics;
}

export interface GetNetworkNetworkInterfaceNetworkDeviceFunctionOemDellFc {
    /**
     * This property represents the bus number of the PCI device
     */
    bus: number;
    /**
     * This property represents the cable length of Small Form Factor pluggable(SFP) Transceiver for the DellFC. Note: This property will be deprecated in Poweredge systems with model YX5X and iDRAC firmware version 4.20.20.20 or later
     */
    cableLengthMetres: number;
    /**
     * This property represents the chip type
     */
    chipType: string;
    /**
     * This property represents the device number of the PCI device
     */
    device: number;
    /**
     * A string that contains the friendly Fully Qualified Device Description - a property that describes the device and its location
     */
    deviceDescription: string;
    /**
     * This property represents FC HBA device name
     */
    deviceName: string;
    /**
     * This property represents the EFI version on the device
     */
    efiVersion: string;
    /**
     * This property represents the Fabric Login Retry Count
     */
    fabricLoginRetryCount: number;
    /**
     * This property represents the Fabric Login Timeout in milliseconds
     */
    fabricLoginTimeout: number;
    /**
     * This property represents the firmware version
     */
    familyVersion: string;
    /**
     * This property represents the FCOS OS Driver version for the DellFC
     */
    fcOsDriverVersion: string;
    /**
     * This property represents the FC Tape state
     */
    fcTapeEnable: string;
    /**
     * This property represents the FCOE OS Driver version
     */
    fcoeOsDriverVersion: string;
    /**
     * This property represents the frame payload size
     */
    framePayloadSize: string;
    /**
     * This property represents the function number of the PCI device
     */
    function: number;
    /**
     * This property represents the Hard Zone Address
     */
    hardZoneAddress: number;
    /**
     * This property represents the Hard Zone state
     */
    hardZoneEnable: string;
    /**
     * ID of DellFC
     */
    id: string;
    /**
     * This property represents the type of Small Form Factor pluggable(SFP) Transceiver for the DellFC. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions
     */
    identifierType: string;
    /**
     * This property represents the ISCSI OS Driver version
     */
    iscsiOsDriverVersion: string;
    /**
     * This property represents the LAN Driver version
     */
    lanDriverVersion: string;
    /**
     * This property represents the Link Down Timeout in milliseconds
     */
    linkDownTimeout: number;
    /**
     * This property represents the Loop Reset Delay in seconds
     */
    loopResetDelay: number;
    /**
     * Name of DellFC
     */
    name: string;
    /**
     * OData ID of DellFC for the network device function
     */
    odataId: string;
    /**
     * The part number assigned by the organization that is responsible for producing or manufacturing the FC device
     */
    partNumber: string;
    /**
     * This property represents the Port Down Retry Count
     */
    portDownRetryCount: number;
    /**
     * This property represents the Port Down Timeout in milliseconds
     */
    portDownTimeout: number;
    /**
     * This property represents the Port Login Retry Count
     */
    portLoginRetryCount: number;
    /**
     * This property represents the Port Login Timeout in milliseconds
     */
    portLoginTimeout: number;
    /**
     * This property represents the Product Name
     */
    productName: string;
    /**
     * This property represents the RDMA OS Driver version
     */
    rdmaOsDriverVersion: string;
    /**
     * This property represents the revision number of the Small Form Factor pluggable(SFP) Transceiver.Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions
     */
    revision: string;
    /**
     * This property represents the Second FC Target LUN
     */
    secondFcTargetLun: number;
    /**
     * This property represents the Second FC Target World-Wide Port Name
     */
    secondFcTargetWwpn: string;
    /**
     * A manufacturer-allocated number used to identify the FC device
     */
    serialNumber: string;
    /**
     * The part number assigned by the organization that is responsible for producing or manufacturing the Small Form Factor pluggable(SFP) Transceivers. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions
     */
    transceiverPartNumber: string;
    /**
     * A manufacturer-allocated number used to identify the Small Form Factor pluggable(SFP) TransceiverNote: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions
     */
    transceiverSerialNumber: string;
    /**
     * This property represents the vendor name of Small Form Factor pluggable(SFP) Transceiver for the DellFC. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions
     */
    transceiverVendorName: string;
    /**
     * This property represents the Vendor Name
     */
    vendorName: string;
}

export interface GetNetworkNetworkInterfaceNetworkDeviceFunctionOemDellFcPortCapabilities {
    /**
     * This property represents the maximum number of exchanges
     */
    fcMaxNumberExchanges: number;
    /**
     * This property represents the maximum number of outstanding commands across all connections
     */
    fcMaxNumberOutStandingCommands: number;
    /**
     * The property provides details of the FC's feature licensing support
     */
    featureLicensingSupport: string;
    /**
     * The property provides detail of the FC's port's flex addressing support
     */
    flexAddressingSupport: string;
    /**
     * ID of the DellFCCapabilities
     */
    id: string;
    /**
     * Name of the DellFCCapabilities
     */
    name: string;
    /**
     * OData ID of DellFCCapabilities for the network device function
     */
    odataId: string;
    /**
     * The property provides details of the FC's on-chip thermal sensor support
     */
    onChipThermalSensor: string;
    /**
     * This property specifies if the card supports persistence policy
     */
    persistencePolicySupport: string;
    /**
     * The property provides details of the FC's port's UEFI support
     */
    uefiSupport: string;
}

export interface GetNetworkNetworkInterfaceNetworkDeviceFunctionOemDellFcPortMetrics {
    /**
     * This property represents invalid CRCs
     */
    fcInvalidCrcs: number;
    /**
     * This property represents link failures
     */
    fcLinkFailures: number;
    /**
     * This property represents loss of signals
     */
    fcLossOfSignals: number;
    /**
     * This property represents the KB count received
     */
    fcRxKbCount: number;
    /**
     * This property represents the FC sequences received
     */
    fcRxSequences: number;
    /**
     * This property represents the total FC frames received
     */
    fcRxTotalFrames: number;
    /**
     * This property represents the KB count transmitted
     */
    fcTxKbCount: number;
    /**
     * This property represents the FC sequences transmitted
     */
    fcTxSequences: number;
    /**
     * This property represents the total FC frames transmitted
     */
    fcTxTotalFrames: number;
    /**
     * ID of the DellFCPortMetrics
     */
    id: string;
    /**
     * Name of the DellFCPortMetrics
     */
    name: string;
    /**
     * OData ID of DellFCPortMetrics for the network device function
     */
    odataId: string;
    /**
     * This property indicates the OS driver states for the DellFCPortMetrics
     */
    osDriverState: string;
    /**
     * This property represents port status for the DellFCPortMetrics
     */
    portStatus: string;
    /**
     * Indicates the RX input power value of Small Form Factor pluggable(SFP) Transceiver for the DellFCPortMetrics. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions
     */
    rxInputPowerMw: number;
    /**
     * Indicates the status of Rx Input Power value limits for the DellFCPortMetrics. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions
     */
    rxInputPowerStatus: string;
    /**
     * Indicates the temperature value of Small Form Factor pluggable(SFP) Transceiver for the DellFCPortMetrics. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions
     */
    temperatureCelsius: number;
    /**
     * Indicates the status of Temperature value limits for the DellFCPortMetrics. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions
     */
    temperatureStatus: string;
    /**
     * Indicates the TX Bias current value of Small Form Factor pluggable(SFP) Transceiver for the DellFCPortMetrics. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions
     */
    txBiasCurrentMw: number;
    /**
     * Indicates the status of Tx Bias Current value limits for the DellFCPortMetrics. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions
     */
    txBiasCurrentStatus: string;
    /**
     * Indicates the TX output power value of Small Form Factor pluggable(SFP) Transceiver for the DellFCPortMetrics. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions
     */
    txOutputPowerMw: number;
    /**
     * Indicates the status of Tx Output Power value limits for the DellFCPortMetrics. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions
     */
    txOutputPowerStatus: string;
    /**
     * Indicates the status of voltage value limits for the DellFCPortMetrics. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions
     */
    voltageStatus: string;
    /**
     * Indicates the voltage value of Small Form Factor pluggable(SFP) Transceiver for the DellFCPortMetrics. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions
     */
    voltageValueVolts: number;
}

export interface GetNetworkNetworkInterfaceNetworkDeviceFunctionOemDellNic {
    /**
     * The bus number where this PCI device resides
     */
    busNumber: number;
    /**
     * This property represents the cable length of Small Form Factor pluggable(SFP) Transceiver for the DellNIC. Note: This property will be deprecated in Poweredge systems with model YX5X and iDRAC firmware version 4.20.20.20 or later
     */
    cableLengthMetres: number;
    /**
     * This property represents the firmware version of Controller BIOS
     */
    controllerBiosVersion: string;
    /**
     * This property represents the data-bus width of the NIC PCI device
     */
    dataBusWidth: string;
    /**
     * A string that contains the friendly Fully Qualified Device Description (FQDD), which is a property that describes the device and its location
     */
    deviceDescription: string;
    /**
     * This property represents the firmware version of EFI
     */
    efiVersion: string;
    /**
     * Represents family version of firmware
     */
    familyVersion: string;
    /**
     * This property represents the FCOS OS Driver version for the DellNIC
     */
    fcOsDriverVersion: string;
    /**
     * This property indicates if Fibre Channel over Ethernet (FCoE) personality is enabled or disabled on current partition in a Converged Network Adaptor device
     */
    fcoeOffloadMode: string;
    /**
     * A string that contains the Fully Qualified Device Description (FQDD) for the DellNIC
     */
    fqdd: string;
    /**
     * ID of DellNIC
     */
    id: string;
    /**
     * This property represents the type of Small Form Factor pluggable(SFP) Transceiver for the DellNIC. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions
     */
    identifierType: string;
    /**
     * A unique identifier for the instance
     */
    instanceId: string;
    /**
     * This property indicates if Internet Small Computer System Interface (iSCSI) personality is enabled or disabled on current partition in a Converged Network Adaptor device
     */
    iscsiOffloadMode: string;
    /**
     * This property represents the time when System Inventory Collection On Reboot (CSIOR) was last performed or the object was last updated on iDRAC. The value is represented in the format yyyymmddHHMMSS
     */
    lastSystemInventoryTime: string;
    /**
     * This property represents the time when the data was last updated. The value is represented in the format yyyymmddHHMMSS
     */
    lastUpdateTime: string;
    /**
     * This property indicates whether the Link is full-duplex or half-duplex
     */
    linkDuplex: string;
    /**
     * The property shall represent the drive media type
     */
    mediaType: string;
    /**
     * name of DellNIC
     */
    name: string;
    /**
     * Represents if network interface card personality is enabled or disabled on current partition in a Converged Network Adaptor device
     */
    nicMode: string;
    /**
     * OData ID of DellNIC for the network device function
     */
    odataId: string;
    /**
     * The part number assigned by the organization that is responsible for producing or manufacturing the NIC device
     */
    partNumber: string;
    /**
     * This property contains a value assigned by the device manufacturer used to identify the type of device
     */
    pciDeviceId: string;
    /**
     * Represents PCI sub device ID
     */
    pciSubDeviceId: string;
    /**
     * This property represents the subsystem vendor ID. ID information is reported from a PCIDevice through protocol-specific requests
     */
    pciSubVendorId: string;
    /**
     * This property represents the register that contains a value assigned by the PCI SIG used to identify the manufacturer of the device
     */
    pciVendorId: string;
    /**
     * PermanentFCOEMACAddress defines the network address that is hardcoded into a port for FCoE
     */
    permanentFcoeEmacAddress: string;
    /**
     * PermanentAddress defines the network address that is hardcoded into a port for iSCSI. This 'hardcoded' address can be changed using a firmware upgrade or a software configuration. When this change is made, the field should be updated at the same time. PermanentAddress should be left blank if no 'hardcoded' address exists for the NetworkAdapter.
     */
    permanentIscsiEmacAddress: string;
    /**
     * A string containing the product name
     */
    productName: string;
    /**
     * Supported Protocol Types
     */
    protocol: string;
    /**
     * This property represents the revision number of the Small Form Factor pluggable(SFP) Transceiver. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions
     */
    revision: string;
    /**
     * A manufacturer-allocated number used to identify the NIC device
     */
    serialNumber: string;
    /**
     * This property represents the represents the slot length of the NIC PCI device
     */
    slotLength: string;
    /**
     * This property indicates the slot type of the NIC PCI device
     */
    slotType: string;
    /**
     * This property represents the SNAPI state
     */
    snapiState: string;
    /**
     * This property represents the SNAPI support
     */
    snapiSupport: string;
    /**
     * The part number assigned by the organization that is responsible for producing or SFP Transceivers(manufacturing the Small Form Factor pluggable). Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions
     */
    transceiverPartNumber: string;
    /**
     * A manufacturer-allocated number used to identify the Small Form Factor pluggable(SFP) TransceiverNote: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions
     */
    transceiverSerialNumber: string;
    /**
     * This property represents the vendor name of Small Form Factor pluggable(SFP) Transceiver for the DellNIC.Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions
     */
    transceiverVendorName: string;
    /**
     * This property represents the vendor name
     */
    vendorName: string;
    /**
     * This property represents the VPI support
     */
    vpiSupport: string;
}

export interface GetNetworkNetworkInterfaceNetworkDeviceFunctionOemDellNicCapabilities {
    /**
     * This property represents Bridge Port Extension (BPE) for the ports of the NIC
     */
    bpeSupport: string;
    /**
     * This property represents congestion notification support for a NIC port
     */
    congestionNotification: string;
    /**
     * This property represents DCB Exchange protocol support for a NIC port
     */
    dcbExchangeProtocol: string;
    /**
     * This property represents Enhanced Transmission Selection support for a NIC port
     */
    ets: string;
    /**
     * This property represents EVB Edge Virtual Bridging) mode support for the ports of the NIC. Possible values are 0 Unknown, 2 Supported, 3 Not Supported
     */
    evbModesSupport: string;
    /**
     * The property shall represent FCoE boot support for a NIC port
     */
    fcoeBootSupport: string;
    /**
     * This property represents the maximum number of I/Os per connection supported by the NIC
     */
    fcoeMaxIosPerSession: number;
    /**
     * This property represents the maximum number of NPIV per port supported by the DellNICCapabilities
     */
    fcoeMaxNpivPerPort: number;
    /**
     * This property represents the maximum number of exchanges for the NIC
     */
    fcoeMaxNumberExchanges: number;
    /**
     * This property represents the maximum logins per port for the NIC
     */
    fcoeMaxNumberLogins: number;
    /**
     * This property represents the maximum number of FCoE targets supported by the NIC
     */
    fcoeMaxNumberOfFcTargets: number;
    /**
     * This property represents the maximum number of outstanding commands supported across all connections for the NIC
     */
    fcoeMaxNumberOutstandingCommands: number;
    /**
     * The property shall represent FCoE offload support for the NIC
     */
    fcoeOffloadSupport: string;
    /**
     * This property represents feature licensing support for the NIC
     */
    featureLicensingSupport: string;
    /**
     * The property shall represent flex adddressing support for a NIC port
     */
    flexAddressingSupport: string;
    /**
     * ID of DellNICCapabilities
     */
    id: string;
    /**
     * This property represents IPSec offload support for a NIC port
     */
    ipsecOffloadSupport: string;
    /**
     * The property shall represent iSCSI boot support for a NIC port
     */
    iscsiBootSupport: string;
    /**
     * The property shall represent iSCSI offload support for a NIC port
     */
    iscsiOffloadSupport: string;
    /**
     * This property represents secure MAC support for a NIC port
     */
    macSecSupport: string;
    /**
     * Name of DellNICCapabilities
     */
    name: string;
    /**
     * This property represents partitioning support for the NIC
     */
    nicPartitioningSupport: string;
    /**
     * This property represents network management passthrough support for a NIC port
     */
    nwManagementPassThrough: string;
    /**
     * OData ID of DellNICCapabilities for the network device function
     */
    odataId: string;
    /**
     * This property represents on-chip thermal sensor support for the NIC
     */
    onChipThermalSensor: string;
    /**
     * This property represents open-flow support for a NIC port
     */
    openFlowSupport: string;
    /**
     * This property represents OS-inband to BMC-out-of-band management passthrough support for a NIC port
     */
    osBmcManagementPassThrough: string;
    /**
     * This property represents Wake-On-LAN support for a NIC partition
     */
    partitionWolSupport: string;
    /**
     * This property specifies whether the card supports persistence policy
     */
    persistencePolicySupport: string;
    /**
     * This property represents priority flow-control support for a NIC port
     */
    priorityFlowControl: string;
    /**
     * The property shall represent PXE boot support for a NIC port
     */
    pxeBootSupport: string;
    /**
     * This property represents RDMA support for a NIC port
     */
    rdmaSupport: string;
    /**
     * This property represents remote PHY support for a NIC port
     */
    remotePhy: string;
    /**
     * This property represents TCP Chimney support for a NIC port
     */
    tcpChimneySupport: string;
    /**
     * This property represents the support of TCP Offload Engine for a NIC port
     */
    tcpOffloadEngineSupport: string;
    /**
     * This property represents UEFI support for a NIC port
     */
    uefiSupport: string;
    /**
     * This property provides details about the VEB (Virtual Ethernet Bridging) - single channel support for the ports of the NIC
     */
    veb: string;
    /**
     * This property provides details about the Virtual Ethernet Bridging and Virtual Ethernet Port Aggregator (VEB-VEPA) multichannel support for the ports of the NIC
     */
    vebVepaMultiChannel: string;
    /**
     * This property provides details about the VEB-VEPA (Virtual Ethernet Bridging and Virtual Ethernet Port Aggregator) - single channel support for the ports of the NIC
     */
    vebVepaSingleChannel: string;
    /**
     * This property represents virtual link-control support for a NIC partition
     */
    virtualLinkControl: string;
}

export interface GetNetworkNetworkInterfaceNetworkDeviceFunctionOemDellNicPortMetrics {
    /**
     * Indicates the total number of discarded packets
     */
    discardedPkts: number;
    /**
     * Indicates the number of FC frames with CRC errors
     */
    fcCrcErrorCount: number;
    /**
     * Indicates the number of FCoE/FIP login failures
     */
    fcoeLinkFailures: number;
    /**
     * Indicates the number of good (FCS valid) packets received with the active FCoE MAC address of the partition
     */
    fcoePktRxCount: number;
    /**
     * Indicates the number of good (FCS valid) packets transmitted that passed L2 filtering by a specific MAC address
     */
    fcoePktTxCount: number;
    /**
     * Indicates the number of receive packets with FCS errors
     */
    fcoeRxPktDroppedCount: number;
    /**
     * A string that contains the Fully Qualified Device Description (FQDD) for the DellNICPortMetrics
     */
    fqdd: string;
    /**
     * ID of DellNICPortMetrics
     */
    id: string;
    /**
     * Indicates the Lan FCS receive Errors
     */
    lanFcsRxErrors: number;
    /**
     * Indicates the total number of Lan Unicast Packets Received
     */
    lanUnicastPktRxCount: number;
    /**
     * Indicates the total number of Lan Unicast Packets Transmitted
     */
    lanUnicastPktTxCount: number;
    /**
     * Name of DellNICPortMetrics
     */
    name: string;
    /**
     * OData ID of DellNICPortMetrics for the network device function
     */
    odataId: string;
    /**
     * Indicates operating system driver states
     */
    osDriverState: string;
    /**
     * Indicates whether the partition link is up or down for the DellFCPortMetrics
     */
    partitionLinkStatus: string;
    /**
     * Indicates operating system driver states of the partitions for the DellFCPortMetrics
     */
    partitionOsDriverState: string;
    /**
     * Indicates the total number of RDMA bytes received
     */
    rdmaRxTotalBytes: number;
    /**
     * Indicates the total number of RDMA packets received
     */
    rdmaRxTotalPackets: number;
    /**
     * Indicates the total number of RDMA Protection errors
     */
    rdmaTotalProtectionErrors: number;
    /**
     * Indicates the total number of RDMA Protocol errors
     */
    rdmaTotalProtocolErrors: number;
    /**
     * Indicates the total number of RDMA bytes transmitted
     */
    rdmaTxTotalBytes: number;
    /**
     * Indicates the total number of RDMA packets transmitted
     */
    rdmaTxTotalPackets: number;
    /**
     * Indicates the total number of RDMA ReadRequest packets transmitted
     */
    rdmaTxTotalReadReqPkts: number;
    /**
     * Indicates the total number of RDMA Send packets transmitted
     */
    rdmaTxTotalSendPkts: number;
    /**
     * Indicates the total number of RDMA Write packets transmitted
     */
    rdmaTxTotalWritePkts: number;
    /**
     * Indicates the total number of good broadcast packets received
     */
    rxBroadcast: number;
    /**
     * Indicates the total number of bytes received, including host and remote management pass through traffic. Remote management passthrough received traffic is applicable to LOMs only
     */
    rxBytes: number;
    /**
     * Indicates the total number of packets received with alignment errors
     */
    rxErrorPktAlignmentErrors: number;
    /**
     * Indicates the total number of packets received with FCS errors
     */
    rxErrorPktFcsErrors: number;
    /**
     * Indicates the total number of false carrier errors received from PHY
     */
    rxFalseCarrierDetection: number;
    /**
     * Indicates the RX input power value of Small Form Factor pluggable(SFP) Transceiver for the DellNICPortMetrics. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions
     */
    rxInputPowerMw: number;
    /**
     * Indicates the status of Rx Input Power value limits for the DellFCPortMetrics
     */
    rxInputPowerStatus: string;
    /**
     * Indicates the total number of frames that are too long
     */
    rxJabberPkt: number;
    /**
     * Indicates the total number of good multicast packets received
     */
    rxMutlicastPackets: number;
    /**
     * Indicates the flow control frames from the network to pause transmission
     */
    rxPauseXoffFrames: number;
    /**
     * Indicates the flow control frames from the network to resume transmission
     */
    rxPauseXonFrames: number;
    /**
     * Indicates the total number of frames that are too short (< 64 bytes)
     */
    rxRuntPkt: number;
    /**
     * Indicates the total number of good unicast packets received
     */
    rxUnicastPackets: number;
    /**
     * Indicates the measurement time for the first NIC statistics. The property is used with the StatisticTime property to calculate the duration over which the NIC statistics are gathered
     */
    startStatisticTime: string;
    /**
     * Indicates the most recent measurement time for NIC statistics. The property is used with the StatisticStartTime property to calculate the duration over which the NIC statistics are gathered
     */
    statisticTime: string;
    /**
     * Indicates the temperature value of Small Form Factor pluggable(SFP) Transceiver for the DellNICPortMetrics. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions
     */
    temperatureCelsius: number;
    /**
     * Indicates the status of Temperature value limits for the DellNICPortMetrics.
     */
    temperatureStatus: string;
    /**
     * Indicates the TX Bias current value of Small Form Factor pluggable(SFP) Transceiver for the DellNICPortMetrics. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions
     */
    txBiasCurrentMa: number;
    /**
     * Indicates the status of Tx Bias Current value limits for the DellNICPortMetrics. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions
     */
    txBiasCurrentStatus: string;
    /**
     * Indicates the total number of good broadcast packets transmitted
     */
    txBroadcast: number;
    /**
     * Indicates the total number of bytes transmitted, including host and remote management passthrough traffic. Remote management passthrough transmitted traffic is applicable to LOMs only
     */
    txBytes: number;
    /**
     * Indicates the number of times a single transmitted packet encountered more than 15 collisions
     */
    txErrorPktExcessiveCollision: number;
    /**
     * Indicates the number of collisions that occurred after one slot time (defined by IEEE 802.3)
     */
    txErrorPktLateCollision: number;
    /**
     * Indicates the number of times that a transmitted packet encountered 2-15 collisions
     */
    txErrorPktMultipleCollision: number;
    /**
     * Indicates the number of times that a successfully transmitted packet encountered a single collision
     */
    txErrorPktSingleCollision: number;
    /**
     * Indicates the total number of good multicast packets transmitted
     */
    txMutlicastPackets: number;
    /**
     * Indicates the TX output power value of Small Form Factor pluggable(SFP) Transceiver for the DellNICPortMetrics. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions
     */
    txOutputPowerMw: number;
    /**
     * Indicates the status of Tx Output Power value limits for the DellNICPortMetrics.. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions
     */
    txOutputPowerStatus: string;
    /**
     * Indicates the number of XOFF packets transmitted to the network
     */
    txPauseXoffFrames: number;
    /**
     * Indicates the number of XON packets transmitted to the network
     */
    txPauseXonFrames: number;
    /**
     * Indicates the total number of good unicast packets transmitted for the DellFCPortMetrics
     */
    txUnicastPackets: number;
    /**
     * Indicates the status of voltage value limits for the DellNICPortMetrics. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions
     */
    voltageStatus: string;
    /**
     * Indicates the voltage value of Small Form Factor pluggable(SFP) Transceiver for the DellNICPortMetrics. Note: This property is deprecated and not supported in iDRAC firmware version 4.40.00.00 or later versions
     */
    voltageValueVolts: number;
}

export interface GetNetworkNetworkInterfaceNetworkDeviceFunctionStatus {
    /**
     * health
     */
    health: string;
    /**
     * health rollup
     */
    healthRollup: string;
    /**
     * state of the storage controller
     */
    state: string;
}

export interface GetNetworkNetworkInterfaceNetworkPort {
    /**
     * Network port active link technology
     */
    activeLinkTechnology: string;
    /**
     * An array of configured MAC or WWN network addresses that are associated with this network port, including the programmed address of the lowest numbered network device function, the configured but not active address, if applicable, the address for hardware port teaming, or other network addresses
     */
    associatedNetworkAddresses: string[];
    /**
     * Network port current link speed
     */
    currentLinkSpeedMbps: number;
    /**
     * description of the network port
     */
    description: string;
    /**
     * An indication of whether IEEE 802.3az Energy-Efficient Ethernet (EEE) is enabled for this network port
     */
    eeeEnabled: boolean;
    /**
     * The locally configured 802.3x flow control setting for this network port
     */
    flowControlConfiguration: string;
    /**
     * The 802.3x flow control behavior negotiated with the link partner for this network port (Ethernet-only)
     */
    flowControlStatus: string;
    /**
     * ID of the network port
     */
    id: string;
    /**
     * The status of the link between this port and its link partner
     */
    linkStatus: string;
    /**
     * name of the network port
     */
    name: string;
    /**
     * A maximum bandwidth allocation percentage for a network device functions associated a port
     */
    netDevFuncMaxBwAllocs: outputs.GetNetworkNetworkInterfaceNetworkPortNetDevFuncMaxBwAlloc[];
    /**
     * A minimum bandwidth allocation percentage for a network device functions associated a port
     */
    netDevFuncMinBwAllocs: outputs.GetNetworkNetworkInterfaceNetworkPortNetDevFuncMinBwAlloc[];
    /**
     * OData ID for the network port
     */
    odataId: string;
    /**
     * The OEM extension for this network port
     */
    oem: outputs.GetNetworkNetworkInterfaceNetworkPortOem;
    /**
     * The physical port number label for this port
     */
    physicalPortNumber: string;
    /**
     * status of the network port
     */
    status: outputs.GetNetworkNetworkInterfaceNetworkPortStatus;
    /**
     * The set of Ethernet capabilities that this port supports.
     */
    supportedEthernetCapabilities: string[];
    /**
     * The link capabilities of an associated port
     */
    supportedLinkCapabilities: outputs.GetNetworkNetworkInterfaceNetworkPortSupportedLinkCapability[];
    /**
     * The vendor Identification for this port
     */
    vendorId: string;
    /**
     * An indication of whether Wake on LAN (WoL) is enabled for this network port
     */
    wakeOnLanEnabled: boolean;
}

export interface GetNetworkNetworkInterfaceNetworkPortNetDevFuncMaxBwAlloc {
    /**
     * The maximum bandwidth allocation percentage allocated to the corresponding network device function instance
     */
    maxBwAllocPercent: number;
    /**
     * List of network device functions for NetDevFuncMaxBWAlloc associated with this port
     */
    networkDeviceFunction: string;
}

export interface GetNetworkNetworkInterfaceNetworkPortNetDevFuncMinBwAlloc {
    /**
     * The minimum bandwidth allocation percentage allocated to the corresponding network device function instance
     */
    minBwAllocPercent: number;
    /**
     * List of network device functions for NetDevFuncMinBWAlloc associated with this port
     */
    networkDeviceFunction: string;
}

export interface GetNetworkNetworkInterfaceNetworkPortOem {
    /**
     * Dell Network Transceiver
     */
    dellNetworkTransceiver: outputs.GetNetworkNetworkInterfaceNetworkPortOemDellNetworkTransceiver;
}

export interface GetNetworkNetworkInterfaceNetworkPortOemDellNetworkTransceiver {
    /**
     * A string that contains the friendly Fully Qualified Device Description (FQDD), which is a property that describes the device and its location
     */
    deviceDescription: string;
    /**
     * A string that contains the Fully Qualified Device Description (FQDD) for the DellNetworkTransceiver
     */
    fqdd: string;
    /**
     * The unique identifier for this resource within the collection of similar resources
     */
    id: string;
    /**
     * This property represents the type of Small Form Factor pluggable(SFP) Transceiver for the DellNetworkTransceiver
     */
    identifierType: string;
    /**
     * This property represents the interface type of Small Form Factor pluggable(SFP) Transceiver
     */
    interfaceType: string;
    /**
     * The name of the resource or array member
     */
    name: string;
    /**
     * The unique identifier for a resource
     */
    odataId: string;
    /**
     * The part number assigned by the organization that is responsible for producing or SFP(manufacturing the Small Form Factor pluggable) Transceivers
     */
    partNumber: string;
    /**
     * This property represents the revision number of the Small Form Factor pluggable(SFP) Transceiver
     */
    revision: string;
    /**
     * A manufacturer-allocated number used to identify the Small Form Factor pluggable(SFP) Transceiver
     */
    serialNumber: string;
    /**
     * This property represents the vendor name of Small Form Factor pluggable(SFP) Transceiver for the object.
     */
    vendorName: string;
}

export interface GetNetworkNetworkInterfaceNetworkPortStatus {
    /**
     * health
     */
    health: string;
    /**
     * health rollup
     */
    healthRollup: string;
    /**
     * state of the storage controller
     */
    state: string;
}

export interface GetNetworkNetworkInterfaceNetworkPortSupportedLinkCapability {
    /**
     * An indication of whether the port is capable of autonegotiating speed
     */
    autoSpeedNegotiation: boolean;
    /**
     * The link network technology capabilities of this port
     */
    linkNetworkTechnology: string;
    /**
     * The speed of the link in Mbit/s when this link network technology is active
     */
    linkSpeedMbps: number;
}

export interface GetNetworkNetworkInterfaceStatus {
    /**
     * health
     */
    health: string;
    /**
     * health rollup
     */
    healthRollup: string;
    /**
     * state of the storage controller
     */
    state: string;
}

export interface GetNetworkNicFilter {
    /**
     * Filter for systems, nework adapters, network ports and network device functions
     */
    systems?: outputs.GetNetworkNicFilterSystem[];
}

export interface GetNetworkNicFilterSystem {
    /**
     * Filter for nework adapters, network ports and network device functions
     */
    networkAdapters?: outputs.GetNetworkNicFilterSystemNetworkAdapter[];
    /**
     * Filter for systems
     */
    systemId: string;
}

export interface GetNetworkNicFilterSystemNetworkAdapter {
    /**
     * Filter for network adapters
     */
    networkAdapterId: string;
    /**
     * Filter for network device functions
     */
    networkDeviceFunctionIds?: string[];
    /**
     * Filter for network ports
     */
    networkPortIds?: string[];
}

export interface GetNetworkRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: string;
    /**
     * User password for login
     */
    password?: string;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: boolean;
    /**
     * User name for login
     */
    user?: string;
}

export interface GetStorageRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: string;
    /**
     * User password for login
     */
    password?: string;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: boolean;
    /**
     * User name for login
     */
    user?: string;
}

export interface GetStorageStorage {
    /**
     * description of the storage
     */
    description: string;
    /**
     * IDs of drives on the storage
     */
    driveIds: string[];
    /**
     * Names of drives on the storage. They are in same order as in `drive_ids`, ie. `drives[i]` will be the name of the drive whose ID is given by `drive_ids[i].`
     */
    drives: string[];
    /**
     * name of the storage
     */
    name: string;
    /**
     * oem attributes of storage controller
     */
    oem: outputs.GetStorageStorageOem;
    /**
     * status of the storage
     */
    status: outputs.GetStorageStorageStatus;
    /**
     * storage controller id
     */
    storageControllerId: string;
    /**
     * storage controllers list
     */
    storageControllers: outputs.GetStorageStorageStorageController[];
}

export interface GetStorageStorageOem {
    /**
     * dell attributes
     */
    dell: outputs.GetStorageStorageOemDell;
}

export interface GetStorageStorageOemDell {
    /**
     * dell controller
     */
    dellController: outputs.GetStorageStorageOemDellDellController;
    /**
     * dell controller battery
     */
    dellControllerBattery: outputs.GetStorageStorageOemDellDellControllerBattery;
}

export interface GetStorageStorageOemDellDellController {
    /**
     * alarm state
     */
    alarmState: string;
    /**
     * auto config behavior
     */
    autoConfigBehavior: string;
    /**
     * boot virtual disk fqdd
     */
    bootVirtualDiskFqdd: string;
    /**
     * cache size in mb
     */
    cacheSizeInMb: number;
    /**
     * cachecade capability
     */
    cachecadeCapability: string;
    /**
     * connector count
     */
    connectorCount: number;
    /**
     * description of the controller
     */
    controllerDescription: string;
    /**
     * controller firmware version
     */
    controllerFirmwareVersion: string;
    /**
     * id of controller
     */
    controllerId: string;
    /**
     * controller name
     */
    controllerName: string;
    /**
     * current controller mode
     */
    currentControllerMode: string;
    /**
     * device
     */
    device: string;
    /**
     * device card data bus width
     */
    deviceCardDataBusWidth: string;
    /**
     * device card slot length
     */
    deviceCardSlotLength: string;
    /**
     * device card slot type
     */
    deviceCardSlotType: string;
    /**
     * driver version
     */
    driverVersion: string;
    /**
     * encryption capability
     */
    encryptionCapability: string;
    /**
     * encryption mode
     */
    encryptionMode: string;
    /**
     * key id
     */
    keyId: string;
    /**
     * last system inventory time
     */
    lastSystemInventoryTime: string;
    /**
     * last update time
     */
    lastUpdateTime: string;
    /**
     * max available pci link speed
     */
    maxAvailablePciLinkSpeed: string;
    /**
     * max possible pci link speed
     */
    maxPossiblePciLinkSpeed: string;
    /**
     * patrol read state
     */
    patrolReadState: string;
    /**
     * pci slot
     */
    pciSlot: string;
    /**
     * persistent hotspare
     */
    persistentHotspare: string;
    /**
     * realtime capability
     */
    realtimeCapability: string;
    /**
     * rollup status
     */
    rollupStatus: string;
    /**
     * sas address
     */
    sasAddress: string;
    /**
     * security status
     */
    securityStatus: string;
    /**
     * shared slot assignment allowed
     */
    sharedSlotAssignmentAllowed: string;
    /**
     * sliced vd capability
     */
    slicedVdCapability: string;
    /**
     * support controller boot mode
     */
    supportControllerBootMode: string;
    /**
     * support enhanced auto foreign import
     */
    supportEnhancedAutoForeignImport: string;
    /**
     * support raid 10 uneven spans
     */
    supportRaid10UnevenSpans: string;
    /**
     * supports lk mto sekm transition
     */
    supportsLkMtoSekmTransition: string;
    /**
     * t 10 pi capability
     */
    t10PiCapability: string;
}

export interface GetStorageStorageOemDellDellControllerBattery {
    /**
     * description of the controller battery
     */
    controllerBatteryDescription: string;
    /**
     * id of controller battery
     */
    controllerBatteryId: string;
    /**
     * controller battery name
     */
    controllerBatteryName: string;
    /**
     * fqdd
     */
    fqdd: string;
    /**
     * primary_status
     */
    primaryStatus: string;
    /**
     * raid state
     */
    raidState: string;
}

export interface GetStorageStorageStatus {
    /**
     * health
     */
    health: string;
    /**
     * health rollup
     */
    healthRollup: string;
    /**
     * state of the storage controller
     */
    state: string;
}

export interface GetStorageStorageStorageController {
    /**
     * cache summary
     */
    cacheSummary: outputs.GetStorageStorageStorageControllerCacheSummary;
    /**
     * firmware version
     */
    firmwareVersion: string;
    /**
     * manufacturer
     */
    manufacturer: string;
    /**
     * member id of storage controller
     */
    memberId: string;
    /**
     * model
     */
    model: string;
    /**
     * name of the storage controller
     */
    name: string;
    /**
     * speed gbps
     */
    speedGbps: number;
    /**
     * status of the storage controller
     */
    status: outputs.GetStorageStorageStorageControllerStatus;
    /**
     * supported controller protocols
     */
    supportedControllerProtocols: string[];
    /**
     * supported device protocols
     */
    supportedDeviceProtocols: string[];
    /**
     * supported raid types
     */
    supportedRaidTypes: string[];
}

export interface GetStorageStorageStorageControllerCacheSummary {
    totalCacheSizeMiB: number;
}

export interface GetStorageStorageStorageControllerStatus {
    /**
     * health
     */
    health: string;
    /**
     * health rollup
     */
    healthRollup: string;
    /**
     * state of the storage controller
     */
    state: string;
}

export interface GetSystemBootRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: string;
    /**
     * User password for login
     */
    password?: string;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: boolean;
    /**
     * User name for login
     */
    user?: string;
}

export interface GetVirtualMediaRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: string;
    /**
     * User password for login
     */
    password?: string;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: boolean;
    /**
     * User name for login
     */
    user?: string;
}

export interface GetVirtualMediaVirtualMedia {
    /**
     * Id of the virtual media resource
     */
    id: string;
    /**
     * OData ID for the Virtual Media resource
     */
    odataId: string;
}

export interface IdracFirmwareUpdateRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: string;
    /**
     * User password for login
     */
    password?: string;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: boolean;
    /**
     * User name for login
     */
    user?: string;
}

export interface IdracFirmwareUpdateUpdateList {
    /**
     * Criticality of the package update.
     */
    criticality: string;
    /**
     * Current version of the package.
     */
    currentPackageVersion: string;
    /**
     * Display name of the package.
     */
    displayName: string;
    /**
     * ID of the job if it's triggered.
     */
    jobId: string;
    /**
     * Message from the job if it's triggered.
     */
    jobMessage: string;
    /**
     * Status of the job if it's triggered.
     */
    jobStatus: string;
    /**
     * Name of the package to be updated.
     */
    packageName: string;
    /**
     * Reboot type of the package update.
     */
    rebootType: string;
    /**
     * Target version of the package.
     */
    targetPackageVersion: string;
}

export interface IdracServerConfigurationProfileExportRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: string;
    /**
     * User password for login
     */
    password?: string;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: boolean;
    /**
     * User name for login
     */
    user?: string;
}

export interface IdracServerConfigurationProfileExportShareParameters {
    /**
     * File Name - The name of the server configuration profile file to export.
     */
    filename: string;
    /**
     * Ignore Certificate Warning
     */
    ignoreCertificateWarning: boolean;
    /**
     * IPAddress - The IP address of the target export server.
     */
    ipAddress?: string;
    /**
     * Password - The password for the share server user account. This password is required if the share type is set to "CIFS". It is required only if the share type is set to "CIFS". It is not required if the share type is set to "NFS".
     */
    password?: string;
    /**
     * Port Number - The port number used to communicate with the share server. The default value is 80.
     */
    portNumber: number;
    /**
     * The password for the proxy server. This is required if the proxy_support parameter is set to `true`. It is used for authenticating the proxy server credentials.
     */
    proxyPassword?: string;
    /**
     * The port number used by the proxy server. 
     * 			This parameter is optional. 
     * 			If not provided, the default port number (80) is used for the communication with the proxy server.
     */
    proxyPort: number;
    /**
     * The IP address or hostname of the proxy server.
     * 			 This is the server that acts as a bridge between the iDRAC and the Server Configuration Profile share server. 
     * 			 It is used to communicate with the Server Configuration Profile share server 
     * 			 in order to export the Server Configuration Profile. If the Server Configuration Profile share server
     * 			  is not accessible from the iDRAC directly, then a proxy server must be used in order to establish the connection. 
     * 			  This parameter is optional. 
     * 			  If it is not provided, the Server Configuration Profile export operation
     * 			   will attempt to connect to the Server Configuration Profile share server directly.
     */
    proxyServer?: string;
    /**
     * Proxy Support - Specifies whether or not to use a proxy server for the export operation. If `true`, export operation will use a proxy server for communication with the export server. If `false`, export operation will not use a proxy server for communication with the export server. Default value is `false`.
     */
    proxySupport: boolean;
    /**
     * The type of proxy server to be used. The default is "HTTP". If set to "SOCKS4", a SOCKS4 proxy server must be specified. If set to "HTTP", an HTTP proxy server must be specified. If not specified, the Server Configuration Profile export operation will attempt to connect to the Server Configuration Profile share server directly.
     */
    proxyType: string;
    /**
     * The username to be used when connecting to the proxy server.
     */
    proxyUsername?: string;
    /**
     * Share Name - The name of the directory or share on the server 
     * 			that contains the Server Configuration Profile file to export.
     */
    shareName?: string;
    /**
     * Share Type - The type of share being used to export the Server Configuration Profile file.
     */
    shareType: string;
    /**
     * Filter configuration by target
     */
    targets: string[];
    /**
     * Username - The username to use when authenticating with the server
     * 			 that contains the Server Configuration Profile file being exported.
     */
    username?: string;
}

export interface IdracServerConfigurationProfileImportRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: string;
    /**
     * User password for login
     */
    password?: string;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: boolean;
    /**
     * User name for login
     */
    user?: string;
}

export interface IdracServerConfigurationProfileImportShareParameters {
    /**
     * File Name - The name of the server configuration profile file to import. This is the name of the file that was previously exported using the Server Configuration Profile Export operation. This file is typically in the xml/json format
     */
    filename: string;
    /**
     * Ignore Certificate Warning
     */
    ignoreCertificateWarning: boolean;
    /**
     * IPAddress - The IP address of the target export server.
     */
    ipAddress?: string;
    /**
     * Password - The password for the share server user account. This password is required if the share type is set to "CIFS". It is required only if the share type is set to "CIFS". It is not required if the share type is set to "NFS".
     */
    password?: string;
    /**
     * Port Number - The port number used to communicate with the share server. The default value is 80.
     */
    portNumber: number;
    /**
     * The password for the proxy server. This is required if the proxy_support parameter is set to `true`. It is used for authenticating the proxy server credentials.
     */
    proxyPassword?: string;
    /**
     * The port number used by the proxy server. 
     * 			This parameter is optional. 
     * 			If not provided, the default port number (80) is used for the communication with the proxy server.
     */
    proxyPort: number;
    /**
     * The IP address or hostname of the proxy server.
     * 			 This is the server that acts as a bridge between the iDRAC and the Server Configuration Profile share server. 
     * 			 It is used to communicate with the Server Configuration Profile share server 
     * 			 in order to import the Server Configuration Profile. If the Server Configuration Profile share server
     * 			  is not accessible from the iDRAC directly, then a proxy server must be used in order to establish the connection. 
     * 			  This parameter is optional. 
     * 			  If it is not provided, the Server Configuration Profile import operation
     * 			   will attempt to connect to the Server Configuration Profile share server directly.
     */
    proxyServer?: string;
    /**
     * Proxy Support - Specifies whether or not to use a proxy server for the import operation. If `true`, import operation will use a proxy server for communication with the export server. If `false`, import operation will not use a proxy server for communication with the export server. Default value is `false`.
     */
    proxySupport: boolean;
    /**
     * The type of proxy server to be used. The default is "HTTP". If set to "SOCKS4", a SOCKS4 proxy server must be specified. If set to "HTTP", an HTTP proxy server must be specified. If not specified, the Server Configuration Profile import operation will attempt to connect to the Server Configuration Profile share server directly.
     */
    proxyType: string;
    /**
     * The username to be used when connecting to the proxy server.
     */
    proxyUsername?: string;
    /**
     * Share Name - The name of the directory or share on the server 
     * 			that contains the Server Configuration Profile file to import.
     */
    shareName?: string;
    /**
     * Share Type - The type of share being used to import the Server Configuration Profile file.
     */
    shareType: string;
    /**
     * Filter configuration by target
     */
    targets: string[];
    /**
     * Username - The username to use when authenticating with the server
     * 			 that contains the Server Configuration Profile file being imported.
     */
    username?: string;
}

export interface ManagerResetRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: string;
    /**
     * User password for login
     */
    password?: string;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: boolean;
    /**
     * User name for login
     */
    user?: string;
}

export interface NetworkAdapterMaintenanceWindow {
    /**
     * The duration in seconds for the maintenance window. (Update Supported)
     */
    duration: number;
    /**
     * The start time for the maintenance window to be scheduled. (Update Supported)The format is YYYY-MM-DDThh:mm:ss<offset>. <offset> is the time offset from UTC that the current timezone set in iDRAC in the format: +05:30 for IST.
     */
    startTime: string;
}

export interface NetworkAdapterNetworkAttributes {
    /**
     * A reference to assignable physical network ports to this function
     */
    assignablePhysicalNetworkPorts: string[];
    /**
     * A reference to assignable physical ports to this function
     */
    assignablePhysicalPorts: string[];
    /**
     * description of the network device function
     */
    description: string;
    /**
     * This type describes Ethernet capabilities, status, and configuration for a network device function.  (Update Supported)
     */
    ethernet: outputs.NetworkAdapterNetworkAttributesEthernet;
    /**
     * This type describes Fibre Channel capabilities, status, and configuration for a network device function. (Update Supported)
     */
    fibreChannel: outputs.NetworkAdapterNetworkAttributesFibreChannel;
    /**
     * ID of the network device function
     */
    id: string;
    /**
     * The iSCSI boot capabilities, status, and configuration for a network device function. (Update Supported)
     */
    iscsiBoot: outputs.NetworkAdapterNetworkAttributesIscsiBoot;
    /**
     * The number of virtual functions that are available for this network device function
     */
    maxVirtualFunctions: number;
    /**
     * name of the network device function
     */
    name: string;
    /**
     * An array of capabilities for this network device function
     */
    netDevFuncCapabilities: string[];
    /**
     * The configured capability of this network device function. (Update Supported)Accepted values: `Disabled`, `Ethernet`, `FibreChannel`, `iSCSI`, `FibreChannelOverEthernet`, `InfiniBand`.
     */
    netDevFuncType: string;
    /**
     * OData ID for the network device function
     */
    odataId: string;
    /**
     * A reference to a physical port assignment to this function
     */
    physicalPortAssignment: string;
    /**
     * status of the network device function
     */
    status: outputs.NetworkAdapterNetworkAttributesStatus;
}

export interface NetworkAdapterNetworkAttributesEthernet {
    /**
     * The currently configured MAC address. (Update Supported)
     */
    macAddress: string;
    /**
     * The maximum transmission unit (MTU) configured for this network device function. (Update Supported)
     */
    mtuSize: number;
    /**
     * The permanent MAC address assigned to this function
     */
    permanentMacAddress: string;
    /**
     * The attributes of a VLAN. (Update Supported)
     */
    vlan: outputs.NetworkAdapterNetworkAttributesEthernetVlan;
}

export interface NetworkAdapterNetworkAttributesEthernetVlan {
    /**
     * An indication of whether the VLAN is enabled. (Update Supported)
     */
    vlanEnabled: boolean;
    /**
     * The vlan id of the network device function. (Update Supported)
     */
    vlanId: number;
}

export interface NetworkAdapterNetworkAttributesFibreChannel {
    /**
     * An indication of whether the FCoE Initialization Protocol (FIP) populates the FCoE VLAN ID. (Update Supported)
     */
    allowFipVlanDiscovery: boolean;
    /**
     * A Fibre Channel boot target configured for a network device function. (Update Supported)
     */
    bootTargets: outputs.NetworkAdapterNetworkAttributesFibreChannelBootTarget[];
    /**
     * The active FCoE VLAN ID
     */
    fcoeActiveVlanId: number;
    /**
     * The locally configured FCoE VLAN ID. (Update Supported)
     */
    fcoeLocalVlanId: number;
    /**
     * The Fibre Channel ID that the switch assigns for this interface
     */
    fibreChannelId: string;
    /**
     * The permanent World Wide Node Name (WWNN) address assigned to this function
     */
    permanentWwnn: string;
    /**
     * The permanent World Wide Port Name (WWPN) address assigned to this function
     */
    permanentWwpn: string;
    /**
     * The configuration source of the World Wide Names (WWN) for this World Wide Node Name (WWNN) and World Wide Port Name (WWPN) connection. (Update Supported). Accepted values: `ConfiguredLocally`, `ProvidedByFabric`.
     */
    wwnSource: string;
    /**
     * The currently configured World Wide Node Name (WWNN) address of this function. (Update Supported)
     */
    wwnn: string;
    /**
     * The currently configured World Wide Port Name (WWPN) address of this function. (Update Supported)
     */
    wwpn: string;
}

export interface NetworkAdapterNetworkAttributesFibreChannelBootTarget {
    /**
     * The relative priority for this entry in the boot targets array. (Update Supported)
     */
    bootPriority: number;
    /**
     * The logical unit number (LUN) ID from which to boot on the device to which the corresponding WWPN refers. (Update Supported)
     */
    lunId: string;
    /**
     * The World Wide Port Name (WWPN) from which to boot. (Update Supported)
     */
    wwpn: string;
}

export interface NetworkAdapterNetworkAttributesIscsiBoot {
    /**
     * The iSCSI boot authentication method for this network device function. (Update Supported)Accepted values: `None`, `CHAP`, `MutualCHAP`.
     */
    authenticationMethod: string;
    /**
     * The shared secret for CHAP authentication. (Update Supported)
     */
    chapSecret: string;
    /**
     * The user name for CHAP authentication. (Update Supported)
     */
    chapUsername: string;
    /**
     * The IPv6 or IPv4 iSCSI boot default gateway. (Update Supported)
     */
    initiatorDefaultGateway: string;
    /**
     * The IPv6 or IPv4 address of the iSCSI initiator. (Update Supported)
     */
    initiatorIpAddress: string;
    /**
     * The iSCSI initiator name. (Update Supported)
     */
    initiatorName: string;
    /**
     * The IPv6 or IPv4 netmask of the iSCSI boot initiator. (Update Supported)
     */
    initiatorNetmask: string;
    /**
     * The type of IP address being populated in the iSCSIBoot IP address fields. (Update Supported) Accepted values: `IPv4`, `IPv6`.
     */
    ipAddressType: string;
    /**
     * An indication of whether the iSCSI boot initiator uses DHCP to obtain the initiator name, IP address, and netmask. (Update Supported)
     */
    ipMaskDnsViaDhcp: boolean;
    /**
     * The CHAP secret for two-way CHAP authentication. (Update Supported)
     */
    mutualChapSecret: string;
    /**
     * The CHAP user name for two-way CHAP authentication. (Update Supported)
     */
    mutualChapUsername: string;
    /**
     * The IPv6 or IPv4 address of the primary DNS server for the iSCSI boot initiator. (Update Supported)
     */
    primaryDns: string;
    /**
     * The logical unit number (LUN) for the primary iSCSI boot target. (Update Supported)
     */
    primaryLun: number;
    /**
     * The IPv4 or IPv6 address for the primary iSCSI boot target. (Update Supported)
     */
    primaryTargetIpAddress: string;
    /**
     * The name of the iSCSI primary boot target. (Update Supported)
     */
    primaryTargetName: string;
    /**
     * The TCP port for the primary iSCSI boot target. (Update Supported)
     */
    primaryTargetTcpPort: number;
    /**
     * An indication of whether the primary VLAN is enabled. (Update Supported)
     */
    primaryVlanEnable: boolean;
    /**
     * The 802.1q VLAN ID to use for iSCSI boot from the primary target. (Update Supported)
     */
    primaryVlanId: number;
    /**
     * An indication of whether IPv6 router advertisement is enabled for the iSCSI boot target. (Update Supported)
     */
    routerAdvertisementEnabled: boolean;
    /**
     * The IPv6 or IPv4 address of the secondary DNS server for the iSCSI boot initiator. (Update Supported)
     */
    secondaryDns: string;
    /**
     * The logical unit number (LUN) for the secondary iSCSI boot target. (Update Supported)
     */
    secondaryLun: number;
    /**
     * The IPv4 or IPv6 address for the secondary iSCSI boot target. (Update Supported)
     */
    secondaryTargetIpAddress: string;
    /**
     * The name of the iSCSI secondary boot target. (Update Supported)
     */
    secondaryTargetName: string;
    /**
     * The TCP port for the secondary iSCSI boot target. (Update Supported)
     */
    secondaryTargetTcpPort: number;
    /**
     * An indication of whether the secondary VLAN is enabled. (Update Supported)
     */
    secondaryVlanEnable: boolean;
    /**
     * The 802.1q VLAN ID to use for iSCSI boot from the secondary target. (Update Supported)
     */
    secondaryVlanId: number;
    /**
     * An indication of whether the iSCSI boot target name, LUN, IP address, and netmask should be obtained from DHCP. (Update Supported)
     */
    targetInfoViaDhcp: boolean;
}

export interface NetworkAdapterNetworkAttributesStatus {
    /**
     * health
     */
    health: string;
    /**
     * health rollup
     */
    healthRollup: string;
    /**
     * state of the storage controller
     */
    state: string;
}

export interface NetworkAdapterOemNetworkAttributes {
    /**
     * registry of the network_attributes
     */
    attributeRegistry: string;
    /**
     * dell network attributes. (Update Supported) To check allowed attributes please either use the datasource for dell network attributes: data.redfish_network or query /redfish/v1/Chassis/System.Embedded.1/NetworkAdapters/NIC.Integrated.1/NetworkDeviceFunctions/NIC.Integrated.1-3-1/Oem/Dell/DellNetworkAttributes/NIC.Integrated.1-3-1 to get attributes for NIC. To get allowed values for those attributes, check /redfish/v1/Registries/NetworkAttributesRegistry_{network_device_function_id}/NetworkAttributesRegistry_{network_device_function_id}.json from a Redfish Instance
     */
    attributes: {[key: string]: string};
    /**
     * This parameter allows you to clear all the pending OEM network attributes changes. (Update Supported)`false`: does not perform any operation. `true`:  discards any pending changes to network attributes, or if a job is in scheduled state, removes the job. `apply_time` value will be ignored and will not have any impact for `clear_pending` operation.
     */
    clearPending?: boolean;
    /**
     * description of network_attributes
     */
    description: string;
    /**
     * ID of the network_attributes
     */
    id: string;
    /**
     * name of the network_attributes
     */
    name: string;
    /**
     * OData ID for the network_attributes
     */
    odataId: string;
}

export interface NetworkAdapterRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: string;
    /**
     * User password for login
     */
    password?: string;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: boolean;
    /**
     * User name for login
     */
    user?: string;
}

export interface PowerRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: string;
    /**
     * User password for login
     */
    password?: string;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: boolean;
    /**
     * User name for login
     */
    user?: string;
}

export interface SimpleUpdateRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: string;
    /**
     * User password for login
     */
    password?: string;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: boolean;
    /**
     * User name for login
     */
    user?: string;
}

export interface StorageVolumeRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: string;
    /**
     * User password for login
     */
    password?: string;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: boolean;
    /**
     * User name for login
     */
    user?: string;
}

export interface UserAccountRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: string;
    /**
     * User password for login
     */
    password?: string;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: boolean;
    /**
     * User name for login
     */
    user?: string;
}

export interface VirtualMediaRedfishServer {
    /**
     * Server BMC IP address or hostname
     */
    endpoint: string;
    /**
     * User password for login
     */
    password?: string;
    /**
     * This field indicates whether the SSL/TLS certificate must be verified or not
     */
    sslInsecure?: boolean;
    /**
     * User name for login
     */
    user?: string;
}

