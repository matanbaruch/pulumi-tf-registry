// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IdracFirmwareUpdate extends pulumi.CustomResource {
    /**
     * Get an existing IdracFirmwareUpdate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IdracFirmwareUpdateState, opts?: pulumi.CustomResourceOptions): IdracFirmwareUpdate {
        return new IdracFirmwareUpdate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'redfish:index/idracFirmwareUpdate:IdracFirmwareUpdate';

    /**
     * Returns true if the given object is an instance of IdracFirmwareUpdate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IdracFirmwareUpdate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IdracFirmwareUpdate.__pulumiType;
    }

    /**
     * If ApplyUpdate is set to true, the updatable packages from Catalog XML are staged. If it is set to False, no updates are
     * applied but the list of updatable packages can be seen in the UpdateList.Default is true.
     */
    public readonly applyUpdate!: pulumi.Output<boolean>;
    /**
     * Name of the catalog file on the repository. Default is Catalog.xml.
     */
    public readonly catalogFileName!: pulumi.Output<string>;
    /**
     * Specifies if certificate warning should be ignored when HTTPS is used. If ignore_cert_warning is On,warnings are
     * ignored. Default is On.
     */
    public readonly ignoreCertWarning!: pulumi.Output<string>;
    /**
     * IP address for the remote share.
     */
    public readonly ipAddress!: pulumi.Output<string>;
    /**
     * The local directory where the share should be mounted.
     */
    public readonly mountPoint!: pulumi.Output<string | undefined>;
    /**
     * The password for the proxy server.
     */
    public readonly proxyPassword!: pulumi.Output<string | undefined>;
    /**
     * The Port for the proxy server.Default is set to 80.
     */
    public readonly proxyPort!: pulumi.Output<number>;
    /**
     * The IP address of the proxy server.This IP will not be validated. The download job will be created even forinvalid
     * proxy_server.Please check the results of the job for error details.This is required when proxy_support is
     * ParametersProxy.
     */
    public readonly proxyServer!: pulumi.Output<string | undefined>;
    /**
     * Specifies if a proxy should be used. Default is Off. This option is only used for HTTP, HTTPS, and FTP shares.
     */
    public readonly proxySupport!: pulumi.Output<string>;
    /**
     * The proxy type of the proxy server. Default is (HTTP).
     */
    public readonly proxyType!: pulumi.Output<string>;
    /**
     * The user name for the proxy server.
     */
    public readonly proxyUsername!: pulumi.Output<string | undefined>;
    /**
     * This property indicates if a reboot should be performed. True indicates that the system (host) is rebooted duringthe
     * update process. False indicates that the updates take effect after the system is rebooted the next time.Default is true.
     */
    public readonly rebootNeeded!: pulumi.Output<boolean>;
    /**
     * List of server BMCs and their respective user credentials
     */
    public readonly redfishServers!: pulumi.Output<outputs.IdracFirmwareUpdateRedfishServer[] | undefined>;
    /**
     * Name of the CIFS share or full path to the NFS share. Optional for HTTP/HTTPS share (if supported)this may be treated as
     * the path of the directory containing the file.
     */
    public readonly shareName!: pulumi.Output<string | undefined>;
    /**
     * Network share user password. This option is mandatory for CIFS Network Share.
     */
    public readonly sharePassword!: pulumi.Output<string | undefined>;
    /**
     * Type of the Network Share.
     */
    public readonly shareType!: pulumi.Output<string>;
    /**
     * Network share user in the format 'user@domain' or 'domain\user' if user is part of a domain else 'user'.This option is
     * mandatory for CIFS Network Share.
     */
    public readonly shareUser!: pulumi.Output<string | undefined>;
    /**
     * System ID of the system
     */
    public readonly systemId!: pulumi.Output<string>;
    /**
     * List of properties of the update list.
     */
    public /*out*/ readonly updateLists!: pulumi.Output<outputs.IdracFirmwareUpdateUpdateList[]>;

    /**
     * Create a IdracFirmwareUpdate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IdracFirmwareUpdateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IdracFirmwareUpdateArgs | IdracFirmwareUpdateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IdracFirmwareUpdateState | undefined;
            resourceInputs["applyUpdate"] = state ? state.applyUpdate : undefined;
            resourceInputs["catalogFileName"] = state ? state.catalogFileName : undefined;
            resourceInputs["ignoreCertWarning"] = state ? state.ignoreCertWarning : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["mountPoint"] = state ? state.mountPoint : undefined;
            resourceInputs["proxyPassword"] = state ? state.proxyPassword : undefined;
            resourceInputs["proxyPort"] = state ? state.proxyPort : undefined;
            resourceInputs["proxyServer"] = state ? state.proxyServer : undefined;
            resourceInputs["proxySupport"] = state ? state.proxySupport : undefined;
            resourceInputs["proxyType"] = state ? state.proxyType : undefined;
            resourceInputs["proxyUsername"] = state ? state.proxyUsername : undefined;
            resourceInputs["rebootNeeded"] = state ? state.rebootNeeded : undefined;
            resourceInputs["redfishServers"] = state ? state.redfishServers : undefined;
            resourceInputs["shareName"] = state ? state.shareName : undefined;
            resourceInputs["sharePassword"] = state ? state.sharePassword : undefined;
            resourceInputs["shareType"] = state ? state.shareType : undefined;
            resourceInputs["shareUser"] = state ? state.shareUser : undefined;
            resourceInputs["systemId"] = state ? state.systemId : undefined;
            resourceInputs["updateLists"] = state ? state.updateLists : undefined;
        } else {
            const args = argsOrState as IdracFirmwareUpdateArgs | undefined;
            if ((!args || args.ipAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipAddress'");
            }
            if ((!args || args.shareType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shareType'");
            }
            resourceInputs["applyUpdate"] = args ? args.applyUpdate : undefined;
            resourceInputs["catalogFileName"] = args ? args.catalogFileName : undefined;
            resourceInputs["ignoreCertWarning"] = args ? args.ignoreCertWarning : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["mountPoint"] = args ? args.mountPoint : undefined;
            resourceInputs["proxyPassword"] = args ? args.proxyPassword : undefined;
            resourceInputs["proxyPort"] = args ? args.proxyPort : undefined;
            resourceInputs["proxyServer"] = args ? args.proxyServer : undefined;
            resourceInputs["proxySupport"] = args ? args.proxySupport : undefined;
            resourceInputs["proxyType"] = args ? args.proxyType : undefined;
            resourceInputs["proxyUsername"] = args ? args.proxyUsername : undefined;
            resourceInputs["rebootNeeded"] = args ? args.rebootNeeded : undefined;
            resourceInputs["redfishServers"] = args ? args.redfishServers : undefined;
            resourceInputs["shareName"] = args ? args.shareName : undefined;
            resourceInputs["sharePassword"] = args ? args.sharePassword : undefined;
            resourceInputs["shareType"] = args ? args.shareType : undefined;
            resourceInputs["shareUser"] = args ? args.shareUser : undefined;
            resourceInputs["systemId"] = args ? args.systemId : undefined;
            resourceInputs["updateLists"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IdracFirmwareUpdate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IdracFirmwareUpdate resources.
 */
export interface IdracFirmwareUpdateState {
    /**
     * If ApplyUpdate is set to true, the updatable packages from Catalog XML are staged. If it is set to False, no updates are
     * applied but the list of updatable packages can be seen in the UpdateList.Default is true.
     */
    applyUpdate?: pulumi.Input<boolean>;
    /**
     * Name of the catalog file on the repository. Default is Catalog.xml.
     */
    catalogFileName?: pulumi.Input<string>;
    /**
     * Specifies if certificate warning should be ignored when HTTPS is used. If ignore_cert_warning is On,warnings are
     * ignored. Default is On.
     */
    ignoreCertWarning?: pulumi.Input<string>;
    /**
     * IP address for the remote share.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * The local directory where the share should be mounted.
     */
    mountPoint?: pulumi.Input<string>;
    /**
     * The password for the proxy server.
     */
    proxyPassword?: pulumi.Input<string>;
    /**
     * The Port for the proxy server.Default is set to 80.
     */
    proxyPort?: pulumi.Input<number>;
    /**
     * The IP address of the proxy server.This IP will not be validated. The download job will be created even forinvalid
     * proxy_server.Please check the results of the job for error details.This is required when proxy_support is
     * ParametersProxy.
     */
    proxyServer?: pulumi.Input<string>;
    /**
     * Specifies if a proxy should be used. Default is Off. This option is only used for HTTP, HTTPS, and FTP shares.
     */
    proxySupport?: pulumi.Input<string>;
    /**
     * The proxy type of the proxy server. Default is (HTTP).
     */
    proxyType?: pulumi.Input<string>;
    /**
     * The user name for the proxy server.
     */
    proxyUsername?: pulumi.Input<string>;
    /**
     * This property indicates if a reboot should be performed. True indicates that the system (host) is rebooted duringthe
     * update process. False indicates that the updates take effect after the system is rebooted the next time.Default is true.
     */
    rebootNeeded?: pulumi.Input<boolean>;
    /**
     * List of server BMCs and their respective user credentials
     */
    redfishServers?: pulumi.Input<pulumi.Input<inputs.IdracFirmwareUpdateRedfishServer>[]>;
    /**
     * Name of the CIFS share or full path to the NFS share. Optional for HTTP/HTTPS share (if supported)this may be treated as
     * the path of the directory containing the file.
     */
    shareName?: pulumi.Input<string>;
    /**
     * Network share user password. This option is mandatory for CIFS Network Share.
     */
    sharePassword?: pulumi.Input<string>;
    /**
     * Type of the Network Share.
     */
    shareType?: pulumi.Input<string>;
    /**
     * Network share user in the format 'user@domain' or 'domain\user' if user is part of a domain else 'user'.This option is
     * mandatory for CIFS Network Share.
     */
    shareUser?: pulumi.Input<string>;
    /**
     * System ID of the system
     */
    systemId?: pulumi.Input<string>;
    /**
     * List of properties of the update list.
     */
    updateLists?: pulumi.Input<pulumi.Input<inputs.IdracFirmwareUpdateUpdateList>[]>;
}

/**
 * The set of arguments for constructing a IdracFirmwareUpdate resource.
 */
export interface IdracFirmwareUpdateArgs {
    /**
     * If ApplyUpdate is set to true, the updatable packages from Catalog XML are staged. If it is set to False, no updates are
     * applied but the list of updatable packages can be seen in the UpdateList.Default is true.
     */
    applyUpdate?: pulumi.Input<boolean>;
    /**
     * Name of the catalog file on the repository. Default is Catalog.xml.
     */
    catalogFileName?: pulumi.Input<string>;
    /**
     * Specifies if certificate warning should be ignored when HTTPS is used. If ignore_cert_warning is On,warnings are
     * ignored. Default is On.
     */
    ignoreCertWarning?: pulumi.Input<string>;
    /**
     * IP address for the remote share.
     */
    ipAddress: pulumi.Input<string>;
    /**
     * The local directory where the share should be mounted.
     */
    mountPoint?: pulumi.Input<string>;
    /**
     * The password for the proxy server.
     */
    proxyPassword?: pulumi.Input<string>;
    /**
     * The Port for the proxy server.Default is set to 80.
     */
    proxyPort?: pulumi.Input<number>;
    /**
     * The IP address of the proxy server.This IP will not be validated. The download job will be created even forinvalid
     * proxy_server.Please check the results of the job for error details.This is required when proxy_support is
     * ParametersProxy.
     */
    proxyServer?: pulumi.Input<string>;
    /**
     * Specifies if a proxy should be used. Default is Off. This option is only used for HTTP, HTTPS, and FTP shares.
     */
    proxySupport?: pulumi.Input<string>;
    /**
     * The proxy type of the proxy server. Default is (HTTP).
     */
    proxyType?: pulumi.Input<string>;
    /**
     * The user name for the proxy server.
     */
    proxyUsername?: pulumi.Input<string>;
    /**
     * This property indicates if a reboot should be performed. True indicates that the system (host) is rebooted duringthe
     * update process. False indicates that the updates take effect after the system is rebooted the next time.Default is true.
     */
    rebootNeeded?: pulumi.Input<boolean>;
    /**
     * List of server BMCs and their respective user credentials
     */
    redfishServers?: pulumi.Input<pulumi.Input<inputs.IdracFirmwareUpdateRedfishServer>[]>;
    /**
     * Name of the CIFS share or full path to the NFS share. Optional for HTTP/HTTPS share (if supported)this may be treated as
     * the path of the directory containing the file.
     */
    shareName?: pulumi.Input<string>;
    /**
     * Network share user password. This option is mandatory for CIFS Network Share.
     */
    sharePassword?: pulumi.Input<string>;
    /**
     * Type of the Network Share.
     */
    shareType: pulumi.Input<string>;
    /**
     * Network share user in the format 'user@domain' or 'domain\user' if user is part of a domain else 'user'.This option is
     * mandatory for CIFS Network Share.
     */
    shareUser?: pulumi.Input<string>;
    /**
     * System ID of the system
     */
    systemId?: pulumi.Input<string>;
}
