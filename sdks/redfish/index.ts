// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { BiosArgs, BiosState } from "./bios";
export type Bios = import("./bios").Bios;
export const Bios: typeof import("./bios").Bios = null as any;
utilities.lazyLoad(exports, ["Bios"], () => require("./bios"));

export { BootOrderArgs, BootOrderState } from "./bootOrder";
export type BootOrder = import("./bootOrder").BootOrder;
export const BootOrder: typeof import("./bootOrder").BootOrder = null as any;
utilities.lazyLoad(exports, ["BootOrder"], () => require("./bootOrder"));

export { BootSourceOverrideArgs, BootSourceOverrideState } from "./bootSourceOverride";
export type BootSourceOverride = import("./bootSourceOverride").BootSourceOverride;
export const BootSourceOverride: typeof import("./bootSourceOverride").BootSourceOverride = null as any;
utilities.lazyLoad(exports, ["BootSourceOverride"], () => require("./bootSourceOverride"));

export { CertificateArgs, CertificateState } from "./certificate";
export type Certificate = import("./certificate").Certificate;
export const Certificate: typeof import("./certificate").Certificate = null as any;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));

export { DellIdracAttributesArgs, DellIdracAttributesState } from "./dellIdracAttributes";
export type DellIdracAttributes = import("./dellIdracAttributes").DellIdracAttributes;
export const DellIdracAttributes: typeof import("./dellIdracAttributes").DellIdracAttributes = null as any;
utilities.lazyLoad(exports, ["DellIdracAttributes"], () => require("./dellIdracAttributes"));

export { DellLcAttributesArgs, DellLcAttributesState } from "./dellLcAttributes";
export type DellLcAttributes = import("./dellLcAttributes").DellLcAttributes;
export const DellLcAttributes: typeof import("./dellLcAttributes").DellLcAttributes = null as any;
utilities.lazyLoad(exports, ["DellLcAttributes"], () => require("./dellLcAttributes"));

export { DellSystemAttributesArgs, DellSystemAttributesState } from "./dellSystemAttributes";
export type DellSystemAttributes = import("./dellSystemAttributes").DellSystemAttributes;
export const DellSystemAttributes: typeof import("./dellSystemAttributes").DellSystemAttributes = null as any;
utilities.lazyLoad(exports, ["DellSystemAttributes"], () => require("./dellSystemAttributes"));

export { GetBiosArgs, GetBiosResult, GetBiosOutputArgs } from "./getBios";
export const getBios: typeof import("./getBios").getBios = null as any;
export const getBiosOutput: typeof import("./getBios").getBiosOutput = null as any;
utilities.lazyLoad(exports, ["getBios","getBiosOutput"], () => require("./getBios"));

export { GetDellIdracAttributesArgs, GetDellIdracAttributesResult, GetDellIdracAttributesOutputArgs } from "./getDellIdracAttributes";
export const getDellIdracAttributes: typeof import("./getDellIdracAttributes").getDellIdracAttributes = null as any;
export const getDellIdracAttributesOutput: typeof import("./getDellIdracAttributes").getDellIdracAttributesOutput = null as any;
utilities.lazyLoad(exports, ["getDellIdracAttributes","getDellIdracAttributesOutput"], () => require("./getDellIdracAttributes"));

export { GetFirmwareInventoryArgs, GetFirmwareInventoryResult, GetFirmwareInventoryOutputArgs } from "./getFirmwareInventory";
export const getFirmwareInventory: typeof import("./getFirmwareInventory").getFirmwareInventory = null as any;
export const getFirmwareInventoryOutput: typeof import("./getFirmwareInventory").getFirmwareInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getFirmwareInventory","getFirmwareInventoryOutput"], () => require("./getFirmwareInventory"));

export { GetNetworkArgs, GetNetworkResult, GetNetworkOutputArgs } from "./getNetwork";
export const getNetwork: typeof import("./getNetwork").getNetwork = null as any;
export const getNetworkOutput: typeof import("./getNetwork").getNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getNetwork","getNetworkOutput"], () => require("./getNetwork"));

export { GetStorageArgs, GetStorageResult, GetStorageOutputArgs } from "./getStorage";
export const getStorage: typeof import("./getStorage").getStorage = null as any;
export const getStorageOutput: typeof import("./getStorage").getStorageOutput = null as any;
utilities.lazyLoad(exports, ["getStorage","getStorageOutput"], () => require("./getStorage"));

export { GetSystemBootArgs, GetSystemBootResult, GetSystemBootOutputArgs } from "./getSystemBoot";
export const getSystemBoot: typeof import("./getSystemBoot").getSystemBoot = null as any;
export const getSystemBootOutput: typeof import("./getSystemBoot").getSystemBootOutput = null as any;
utilities.lazyLoad(exports, ["getSystemBoot","getSystemBootOutput"], () => require("./getSystemBoot"));

export { GetVirtualMediaArgs, GetVirtualMediaResult, GetVirtualMediaOutputArgs } from "./getVirtualMedia";
export const getVirtualMedia: typeof import("./getVirtualMedia").getVirtualMedia = null as any;
export const getVirtualMediaOutput: typeof import("./getVirtualMedia").getVirtualMediaOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualMedia","getVirtualMediaOutput"], () => require("./getVirtualMedia"));

export { IdracFirmwareUpdateArgs, IdracFirmwareUpdateState } from "./idracFirmwareUpdate";
export type IdracFirmwareUpdate = import("./idracFirmwareUpdate").IdracFirmwareUpdate;
export const IdracFirmwareUpdate: typeof import("./idracFirmwareUpdate").IdracFirmwareUpdate = null as any;
utilities.lazyLoad(exports, ["IdracFirmwareUpdate"], () => require("./idracFirmwareUpdate"));

export { IdracServerConfigurationProfileExportArgs, IdracServerConfigurationProfileExportState } from "./idracServerConfigurationProfileExport";
export type IdracServerConfigurationProfileExport = import("./idracServerConfigurationProfileExport").IdracServerConfigurationProfileExport;
export const IdracServerConfigurationProfileExport: typeof import("./idracServerConfigurationProfileExport").IdracServerConfigurationProfileExport = null as any;
utilities.lazyLoad(exports, ["IdracServerConfigurationProfileExport"], () => require("./idracServerConfigurationProfileExport"));

export { IdracServerConfigurationProfileImportArgs, IdracServerConfigurationProfileImportState } from "./idracServerConfigurationProfileImport";
export type IdracServerConfigurationProfileImport = import("./idracServerConfigurationProfileImport").IdracServerConfigurationProfileImport;
export const IdracServerConfigurationProfileImport: typeof import("./idracServerConfigurationProfileImport").IdracServerConfigurationProfileImport = null as any;
utilities.lazyLoad(exports, ["IdracServerConfigurationProfileImport"], () => require("./idracServerConfigurationProfileImport"));

export { ManagerResetArgs, ManagerResetState } from "./managerReset";
export type ManagerReset = import("./managerReset").ManagerReset;
export const ManagerReset: typeof import("./managerReset").ManagerReset = null as any;
utilities.lazyLoad(exports, ["ManagerReset"], () => require("./managerReset"));

export { NetworkAdapterArgs, NetworkAdapterState } from "./networkAdapter";
export type NetworkAdapter = import("./networkAdapter").NetworkAdapter;
export const NetworkAdapter: typeof import("./networkAdapter").NetworkAdapter = null as any;
utilities.lazyLoad(exports, ["NetworkAdapter"], () => require("./networkAdapter"));

export { PowerArgs, PowerState } from "./power";
export type Power = import("./power").Power;
export const Power: typeof import("./power").Power = null as any;
utilities.lazyLoad(exports, ["Power"], () => require("./power"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SimpleUpdateArgs, SimpleUpdateState } from "./simpleUpdate";
export type SimpleUpdate = import("./simpleUpdate").SimpleUpdate;
export const SimpleUpdate: typeof import("./simpleUpdate").SimpleUpdate = null as any;
utilities.lazyLoad(exports, ["SimpleUpdate"], () => require("./simpleUpdate"));

export { StorageVolumeArgs, StorageVolumeState } from "./storageVolume";
export type StorageVolume = import("./storageVolume").StorageVolume;
export const StorageVolume: typeof import("./storageVolume").StorageVolume = null as any;
utilities.lazyLoad(exports, ["StorageVolume"], () => require("./storageVolume"));

export { UserAccountArgs, UserAccountState } from "./userAccount";
export type UserAccount = import("./userAccount").UserAccount;
export const UserAccount: typeof import("./userAccount").UserAccount = null as any;
utilities.lazyLoad(exports, ["UserAccount"], () => require("./userAccount"));

export { UserAccountPasswordArgs, UserAccountPasswordState } from "./userAccountPassword";
export type UserAccountPassword = import("./userAccountPassword").UserAccountPassword;
export const UserAccountPassword: typeof import("./userAccountPassword").UserAccountPassword = null as any;
utilities.lazyLoad(exports, ["UserAccountPassword"], () => require("./userAccountPassword"));

export { VirtualMediaArgs, VirtualMediaState } from "./virtualMedia";
export type VirtualMedia = import("./virtualMedia").VirtualMedia;
export const VirtualMedia: typeof import("./virtualMedia").VirtualMedia = null as any;
utilities.lazyLoad(exports, ["VirtualMedia"], () => require("./virtualMedia"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "redfish:index/bios:Bios":
                return new Bios(name, <any>undefined, { urn })
            case "redfish:index/bootOrder:BootOrder":
                return new BootOrder(name, <any>undefined, { urn })
            case "redfish:index/bootSourceOverride:BootSourceOverride":
                return new BootSourceOverride(name, <any>undefined, { urn })
            case "redfish:index/certificate:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "redfish:index/dellIdracAttributes:DellIdracAttributes":
                return new DellIdracAttributes(name, <any>undefined, { urn })
            case "redfish:index/dellLcAttributes:DellLcAttributes":
                return new DellLcAttributes(name, <any>undefined, { urn })
            case "redfish:index/dellSystemAttributes:DellSystemAttributes":
                return new DellSystemAttributes(name, <any>undefined, { urn })
            case "redfish:index/idracFirmwareUpdate:IdracFirmwareUpdate":
                return new IdracFirmwareUpdate(name, <any>undefined, { urn })
            case "redfish:index/idracServerConfigurationProfileExport:IdracServerConfigurationProfileExport":
                return new IdracServerConfigurationProfileExport(name, <any>undefined, { urn })
            case "redfish:index/idracServerConfigurationProfileImport:IdracServerConfigurationProfileImport":
                return new IdracServerConfigurationProfileImport(name, <any>undefined, { urn })
            case "redfish:index/managerReset:ManagerReset":
                return new ManagerReset(name, <any>undefined, { urn })
            case "redfish:index/networkAdapter:NetworkAdapter":
                return new NetworkAdapter(name, <any>undefined, { urn })
            case "redfish:index/power:Power":
                return new Power(name, <any>undefined, { urn })
            case "redfish:index/simpleUpdate:SimpleUpdate":
                return new SimpleUpdate(name, <any>undefined, { urn })
            case "redfish:index/storageVolume:StorageVolume":
                return new StorageVolume(name, <any>undefined, { urn })
            case "redfish:index/userAccount:UserAccount":
                return new UserAccount(name, <any>undefined, { urn })
            case "redfish:index/userAccountPassword:UserAccountPassword":
                return new UserAccountPassword(name, <any>undefined, { urn })
            case "redfish:index/virtualMedia:VirtualMedia":
                return new VirtualMedia(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("redfish", "index/bios", _module)
pulumi.runtime.registerResourceModule("redfish", "index/bootOrder", _module)
pulumi.runtime.registerResourceModule("redfish", "index/bootSourceOverride", _module)
pulumi.runtime.registerResourceModule("redfish", "index/certificate", _module)
pulumi.runtime.registerResourceModule("redfish", "index/dellIdracAttributes", _module)
pulumi.runtime.registerResourceModule("redfish", "index/dellLcAttributes", _module)
pulumi.runtime.registerResourceModule("redfish", "index/dellSystemAttributes", _module)
pulumi.runtime.registerResourceModule("redfish", "index/idracFirmwareUpdate", _module)
pulumi.runtime.registerResourceModule("redfish", "index/idracServerConfigurationProfileExport", _module)
pulumi.runtime.registerResourceModule("redfish", "index/idracServerConfigurationProfileImport", _module)
pulumi.runtime.registerResourceModule("redfish", "index/managerReset", _module)
pulumi.runtime.registerResourceModule("redfish", "index/networkAdapter", _module)
pulumi.runtime.registerResourceModule("redfish", "index/power", _module)
pulumi.runtime.registerResourceModule("redfish", "index/simpleUpdate", _module)
pulumi.runtime.registerResourceModule("redfish", "index/storageVolume", _module)
pulumi.runtime.registerResourceModule("redfish", "index/userAccount", _module)
pulumi.runtime.registerResourceModule("redfish", "index/userAccountPassword", _module)
pulumi.runtime.registerResourceModule("redfish", "index/virtualMedia", _module)
pulumi.runtime.registerResourcePackage("redfish", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:redfish") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
