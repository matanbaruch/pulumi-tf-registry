// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class StorageVolume extends pulumi.CustomResource {
    /**
     * Get an existing StorageVolume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StorageVolumeState, opts?: pulumi.CustomResourceOptions): StorageVolume {
        return new StorageVolume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'redfish:index/storageVolume:StorageVolume';

    /**
     * Returns true if the given object is an instance of StorageVolume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StorageVolume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StorageVolume.__pulumiType;
    }

    /**
     * Capacity Bytes
     */
    public readonly capacityBytes!: pulumi.Output<number | undefined>;
    /**
     * Disk Cache Policy
     */
    public readonly diskCachePolicy!: pulumi.Output<string>;
    /**
     * Drives
     */
    public readonly drives!: pulumi.Output<string[]>;
    /**
     * Encrypt the virtual disk, default is false. This flag is only supported on firmware levels 6 and above
     */
    public readonly encrypted!: pulumi.Output<boolean>;
    /**
     * Optimum Io Size Bytes
     */
    public readonly optimumIoSizeBytes!: pulumi.Output<number | undefined>;
    /**
     * Raid Type, Defaults to RAID0
     */
    public readonly raidType!: pulumi.Output<string>;
    /**
     * Read Cache Policy
     */
    public readonly readCachePolicy!: pulumi.Output<string>;
    /**
     * List of server BMCs and their respective user credentials
     */
    public readonly redfishServers!: pulumi.Output<outputs.StorageVolumeRedfishServer[] | undefined>;
    /**
     * Reset Timeout
     */
    public readonly resetTimeout!: pulumi.Output<number>;
    /**
     * Reset Type
     */
    public readonly resetType!: pulumi.Output<string>;
    /**
     * Settings Apply Time
     */
    public readonly settingsApplyTime!: pulumi.Output<string>;
    /**
     * Storage Controller ID
     */
    public readonly storageControllerId!: pulumi.Output<string>;
    /**
     * System ID of the system
     */
    public readonly systemId!: pulumi.Output<string>;
    /**
     * Volume Job Timeout
     */
    public readonly volumeJobTimeout!: pulumi.Output<number>;
    /**
     * Volume Name
     */
    public readonly volumeName!: pulumi.Output<string>;
    /**
     * Volume Type
     *
     * @deprecated Deprecated
     */
    public readonly volumeType!: pulumi.Output<string | undefined>;
    /**
     * Write Cache Policy
     */
    public readonly writeCachePolicy!: pulumi.Output<string>;

    /**
     * Create a StorageVolume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StorageVolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StorageVolumeArgs | StorageVolumeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StorageVolumeState | undefined;
            resourceInputs["capacityBytes"] = state ? state.capacityBytes : undefined;
            resourceInputs["diskCachePolicy"] = state ? state.diskCachePolicy : undefined;
            resourceInputs["drives"] = state ? state.drives : undefined;
            resourceInputs["encrypted"] = state ? state.encrypted : undefined;
            resourceInputs["optimumIoSizeBytes"] = state ? state.optimumIoSizeBytes : undefined;
            resourceInputs["raidType"] = state ? state.raidType : undefined;
            resourceInputs["readCachePolicy"] = state ? state.readCachePolicy : undefined;
            resourceInputs["redfishServers"] = state ? state.redfishServers : undefined;
            resourceInputs["resetTimeout"] = state ? state.resetTimeout : undefined;
            resourceInputs["resetType"] = state ? state.resetType : undefined;
            resourceInputs["settingsApplyTime"] = state ? state.settingsApplyTime : undefined;
            resourceInputs["storageControllerId"] = state ? state.storageControllerId : undefined;
            resourceInputs["systemId"] = state ? state.systemId : undefined;
            resourceInputs["volumeJobTimeout"] = state ? state.volumeJobTimeout : undefined;
            resourceInputs["volumeName"] = state ? state.volumeName : undefined;
            resourceInputs["volumeType"] = state ? state.volumeType : undefined;
            resourceInputs["writeCachePolicy"] = state ? state.writeCachePolicy : undefined;
        } else {
            const args = argsOrState as StorageVolumeArgs | undefined;
            if ((!args || args.drives === undefined) && !opts.urn) {
                throw new Error("Missing required property 'drives'");
            }
            if ((!args || args.storageControllerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageControllerId'");
            }
            if ((!args || args.volumeName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volumeName'");
            }
            resourceInputs["capacityBytes"] = args ? args.capacityBytes : undefined;
            resourceInputs["diskCachePolicy"] = args ? args.diskCachePolicy : undefined;
            resourceInputs["drives"] = args ? args.drives : undefined;
            resourceInputs["encrypted"] = args ? args.encrypted : undefined;
            resourceInputs["optimumIoSizeBytes"] = args ? args.optimumIoSizeBytes : undefined;
            resourceInputs["raidType"] = args ? args.raidType : undefined;
            resourceInputs["readCachePolicy"] = args ? args.readCachePolicy : undefined;
            resourceInputs["redfishServers"] = args ? args.redfishServers : undefined;
            resourceInputs["resetTimeout"] = args ? args.resetTimeout : undefined;
            resourceInputs["resetType"] = args ? args.resetType : undefined;
            resourceInputs["settingsApplyTime"] = args ? args.settingsApplyTime : undefined;
            resourceInputs["storageControllerId"] = args ? args.storageControllerId : undefined;
            resourceInputs["systemId"] = args ? args.systemId : undefined;
            resourceInputs["volumeJobTimeout"] = args ? args.volumeJobTimeout : undefined;
            resourceInputs["volumeName"] = args ? args.volumeName : undefined;
            resourceInputs["volumeType"] = args ? args.volumeType : undefined;
            resourceInputs["writeCachePolicy"] = args ? args.writeCachePolicy : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StorageVolume.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StorageVolume resources.
 */
export interface StorageVolumeState {
    /**
     * Capacity Bytes
     */
    capacityBytes?: pulumi.Input<number>;
    /**
     * Disk Cache Policy
     */
    diskCachePolicy?: pulumi.Input<string>;
    /**
     * Drives
     */
    drives?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Encrypt the virtual disk, default is false. This flag is only supported on firmware levels 6 and above
     */
    encrypted?: pulumi.Input<boolean>;
    /**
     * Optimum Io Size Bytes
     */
    optimumIoSizeBytes?: pulumi.Input<number>;
    /**
     * Raid Type, Defaults to RAID0
     */
    raidType?: pulumi.Input<string>;
    /**
     * Read Cache Policy
     */
    readCachePolicy?: pulumi.Input<string>;
    /**
     * List of server BMCs and their respective user credentials
     */
    redfishServers?: pulumi.Input<pulumi.Input<inputs.StorageVolumeRedfishServer>[]>;
    /**
     * Reset Timeout
     */
    resetTimeout?: pulumi.Input<number>;
    /**
     * Reset Type
     */
    resetType?: pulumi.Input<string>;
    /**
     * Settings Apply Time
     */
    settingsApplyTime?: pulumi.Input<string>;
    /**
     * Storage Controller ID
     */
    storageControllerId?: pulumi.Input<string>;
    /**
     * System ID of the system
     */
    systemId?: pulumi.Input<string>;
    /**
     * Volume Job Timeout
     */
    volumeJobTimeout?: pulumi.Input<number>;
    /**
     * Volume Name
     */
    volumeName?: pulumi.Input<string>;
    /**
     * Volume Type
     *
     * @deprecated Deprecated
     */
    volumeType?: pulumi.Input<string>;
    /**
     * Write Cache Policy
     */
    writeCachePolicy?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StorageVolume resource.
 */
export interface StorageVolumeArgs {
    /**
     * Capacity Bytes
     */
    capacityBytes?: pulumi.Input<number>;
    /**
     * Disk Cache Policy
     */
    diskCachePolicy?: pulumi.Input<string>;
    /**
     * Drives
     */
    drives: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Encrypt the virtual disk, default is false. This flag is only supported on firmware levels 6 and above
     */
    encrypted?: pulumi.Input<boolean>;
    /**
     * Optimum Io Size Bytes
     */
    optimumIoSizeBytes?: pulumi.Input<number>;
    /**
     * Raid Type, Defaults to RAID0
     */
    raidType?: pulumi.Input<string>;
    /**
     * Read Cache Policy
     */
    readCachePolicy?: pulumi.Input<string>;
    /**
     * List of server BMCs and their respective user credentials
     */
    redfishServers?: pulumi.Input<pulumi.Input<inputs.StorageVolumeRedfishServer>[]>;
    /**
     * Reset Timeout
     */
    resetTimeout?: pulumi.Input<number>;
    /**
     * Reset Type
     */
    resetType?: pulumi.Input<string>;
    /**
     * Settings Apply Time
     */
    settingsApplyTime?: pulumi.Input<string>;
    /**
     * Storage Controller ID
     */
    storageControllerId: pulumi.Input<string>;
    /**
     * System ID of the system
     */
    systemId?: pulumi.Input<string>;
    /**
     * Volume Job Timeout
     */
    volumeJobTimeout?: pulumi.Input<number>;
    /**
     * Volume Name
     */
    volumeName: pulumi.Input<string>;
    /**
     * Volume Type
     *
     * @deprecated Deprecated
     */
    volumeType?: pulumi.Input<string>;
    /**
     * Write Cache Policy
     */
    writeCachePolicy?: pulumi.Input<string>;
}
