// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Certificate extends pulumi.CustomResource {
    /**
     * Get an existing Certificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CertificateState, opts?: pulumi.CustomResourceOptions): Certificate {
        return new Certificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'redfish:index/certificate:Certificate';

    /**
     * Returns true if the given object is an instance of Certificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Certificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Certificate.__pulumiType;
    }

    /**
     * Type of the certificate to be imported.
     */
    public readonly certificateType!: pulumi.Output<string>;
    /**
     * A passphrase for certificate file. Note: This is optional parameter for CSC certificate, and not required for Server and
     * CA certificates.
     */
    public readonly passphrase!: pulumi.Output<string | undefined>;
    /**
     * List of server BMCs and their respective user credentials
     */
    public readonly redfishServers!: pulumi.Output<outputs.CertificateRedfishServer[] | undefined>;
    /**
     * SSLCertificate File require content of certificate supported certificate type: "CustomCertificate" - The certificate
     * must be converted pkcs#12 format to encoded in Base64 and entire Base64 Content is required. The passphrase that was
     * used to convert the certificate to pkcs#12 format must also be provided in "passphrase" attribute. "Server" -
     * Certificate Content is required. Note - The certificate should be signed with hashing algorithm equivalent to sha256.
     */
    public readonly sslCertificateContent!: pulumi.Output<string>;

    /**
     * Create a Certificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CertificateArgs | CertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CertificateState | undefined;
            resourceInputs["certificateType"] = state ? state.certificateType : undefined;
            resourceInputs["passphrase"] = state ? state.passphrase : undefined;
            resourceInputs["redfishServers"] = state ? state.redfishServers : undefined;
            resourceInputs["sslCertificateContent"] = state ? state.sslCertificateContent : undefined;
        } else {
            const args = argsOrState as CertificateArgs | undefined;
            if ((!args || args.certificateType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateType'");
            }
            if ((!args || args.sslCertificateContent === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sslCertificateContent'");
            }
            resourceInputs["certificateType"] = args ? args.certificateType : undefined;
            resourceInputs["passphrase"] = args ? args.passphrase : undefined;
            resourceInputs["redfishServers"] = args ? args.redfishServers : undefined;
            resourceInputs["sslCertificateContent"] = args ? args.sslCertificateContent : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Certificate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Certificate resources.
 */
export interface CertificateState {
    /**
     * Type of the certificate to be imported.
     */
    certificateType?: pulumi.Input<string>;
    /**
     * A passphrase for certificate file. Note: This is optional parameter for CSC certificate, and not required for Server and
     * CA certificates.
     */
    passphrase?: pulumi.Input<string>;
    /**
     * List of server BMCs and their respective user credentials
     */
    redfishServers?: pulumi.Input<pulumi.Input<inputs.CertificateRedfishServer>[]>;
    /**
     * SSLCertificate File require content of certificate supported certificate type: "CustomCertificate" - The certificate
     * must be converted pkcs#12 format to encoded in Base64 and entire Base64 Content is required. The passphrase that was
     * used to convert the certificate to pkcs#12 format must also be provided in "passphrase" attribute. "Server" -
     * Certificate Content is required. Note - The certificate should be signed with hashing algorithm equivalent to sha256.
     */
    sslCertificateContent?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Certificate resource.
 */
export interface CertificateArgs {
    /**
     * Type of the certificate to be imported.
     */
    certificateType: pulumi.Input<string>;
    /**
     * A passphrase for certificate file. Note: This is optional parameter for CSC certificate, and not required for Server and
     * CA certificates.
     */
    passphrase?: pulumi.Input<string>;
    /**
     * List of server BMCs and their respective user credentials
     */
    redfishServers?: pulumi.Input<pulumi.Input<inputs.CertificateRedfishServer>[]>;
    /**
     * SSLCertificate File require content of certificate supported certificate type: "CustomCertificate" - The certificate
     * must be converted pkcs#12 format to encoded in Base64 and entire Base64 Content is required. The passphrase that was
     * used to convert the certificate to pkcs#12 format must also be provided in "passphrase" attribute. "Server" -
     * Certificate Content is required. Note - The certificate should be signed with hashing algorithm equivalent to sha256.
     */
    sslCertificateContent: pulumi.Input<string>;
}
