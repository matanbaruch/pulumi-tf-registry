// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getServer(args: GetServerArgs, opts?: pulumi.InvokeOptions): Promise<GetServerResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("netactuate:index/getServer:getServer", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getServer.
 */
export interface GetServerArgs {
    id: number;
}

/**
 * A collection of values returned by getServer.
 */
export interface GetServerResult {
    readonly bgpPeers: outputs.GetServerBgpPeer[];
    readonly hostname: string;
    readonly id: number;
    readonly image: string;
    readonly imageId: number;
    readonly ipV4: string;
    readonly ipV6: string;
    readonly locationId: number;
    readonly package: string;
    readonly planId: number;
    readonly publicIpv4: string;
    readonly publicIpv6: string;
    readonly state: string;
    readonly status: string;
}
export function getServerOutput(args: GetServerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServerResult> {
    return pulumi.output(args).apply((a: any) => getServer(a, opts))
}

/**
 * A collection of arguments for invoking getServer.
 */
export interface GetServerOutputArgs {
    id: pulumi.Input<number>;
}
