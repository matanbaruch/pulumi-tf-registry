// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Server extends pulumi.CustomResource {
    /**
     * Get an existing Server resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerState, opts?: pulumi.CustomResourceOptions): Server {
        return new Server(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netactuate:index/server:Server';

    /**
     * Returns true if the given object is an instance of Server.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Server {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Server.__pulumiType;
    }

    public readonly cloudConfig!: pulumi.Output<string | undefined>;
    public readonly hostname!: pulumi.Output<string>;
    public readonly image!: pulumi.Output<string | undefined>;
    public readonly imageId!: pulumi.Output<number | undefined>;
    public readonly location!: pulumi.Output<string | undefined>;
    public readonly locationId!: pulumi.Output<number>;
    public readonly packageBilling!: pulumi.Output<string | undefined>;
    public readonly packageBillingContractId!: pulumi.Output<string | undefined>;
    public readonly packageBillingOptIn!: pulumi.Output<string | undefined>;
    /**
     * Additional JSON formatted parameters to be passed to the server creation and management API
     */
    public readonly params!: pulumi.Output<string | undefined>;
    public readonly password!: pulumi.Output<string | undefined>;
    public readonly plan!: pulumi.Output<string>;
    public /*out*/ readonly primaryIpv4!: pulumi.Output<string>;
    public /*out*/ readonly primaryIpv6!: pulumi.Output<string>;
    public readonly sshKey!: pulumi.Output<string | undefined>;
    public readonly sshKeyId!: pulumi.Output<number | undefined>;
    public readonly userData!: pulumi.Output<string | undefined>;
    public readonly userDataBase64!: pulumi.Output<string | undefined>;

    /**
     * Create a Server resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerArgs | ServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerState | undefined;
            resourceInputs["cloudConfig"] = state ? state.cloudConfig : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["image"] = state ? state.image : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["locationId"] = state ? state.locationId : undefined;
            resourceInputs["packageBilling"] = state ? state.packageBilling : undefined;
            resourceInputs["packageBillingContractId"] = state ? state.packageBillingContractId : undefined;
            resourceInputs["packageBillingOptIn"] = state ? state.packageBillingOptIn : undefined;
            resourceInputs["params"] = state ? state.params : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["plan"] = state ? state.plan : undefined;
            resourceInputs["primaryIpv4"] = state ? state.primaryIpv4 : undefined;
            resourceInputs["primaryIpv6"] = state ? state.primaryIpv6 : undefined;
            resourceInputs["sshKey"] = state ? state.sshKey : undefined;
            resourceInputs["sshKeyId"] = state ? state.sshKeyId : undefined;
            resourceInputs["userData"] = state ? state.userData : undefined;
            resourceInputs["userDataBase64"] = state ? state.userDataBase64 : undefined;
        } else {
            const args = argsOrState as ServerArgs | undefined;
            if ((!args || args.hostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostname'");
            }
            if ((!args || args.plan === undefined) && !opts.urn) {
                throw new Error("Missing required property 'plan'");
            }
            resourceInputs["cloudConfig"] = args ? args.cloudConfig : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["image"] = args ? args.image : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["locationId"] = args ? args.locationId : undefined;
            resourceInputs["packageBilling"] = args ? args.packageBilling : undefined;
            resourceInputs["packageBillingContractId"] = args ? args.packageBillingContractId : undefined;
            resourceInputs["packageBillingOptIn"] = args ? args.packageBillingOptIn : undefined;
            resourceInputs["params"] = args ? args.params : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["sshKey"] = args ? args.sshKey : undefined;
            resourceInputs["sshKeyId"] = args ? args.sshKeyId : undefined;
            resourceInputs["userData"] = args ? args.userData : undefined;
            resourceInputs["userDataBase64"] = args ? args.userDataBase64 : undefined;
            resourceInputs["primaryIpv4"] = undefined /*out*/;
            resourceInputs["primaryIpv6"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Server.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Server resources.
 */
export interface ServerState {
    cloudConfig?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
    imageId?: pulumi.Input<number>;
    location?: pulumi.Input<string>;
    locationId?: pulumi.Input<number>;
    packageBilling?: pulumi.Input<string>;
    packageBillingContractId?: pulumi.Input<string>;
    packageBillingOptIn?: pulumi.Input<string>;
    /**
     * Additional JSON formatted parameters to be passed to the server creation and management API
     */
    params?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    plan?: pulumi.Input<string>;
    primaryIpv4?: pulumi.Input<string>;
    primaryIpv6?: pulumi.Input<string>;
    sshKey?: pulumi.Input<string>;
    sshKeyId?: pulumi.Input<number>;
    userData?: pulumi.Input<string>;
    userDataBase64?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Server resource.
 */
export interface ServerArgs {
    cloudConfig?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    image?: pulumi.Input<string>;
    imageId?: pulumi.Input<number>;
    location?: pulumi.Input<string>;
    locationId?: pulumi.Input<number>;
    packageBilling?: pulumi.Input<string>;
    packageBillingContractId?: pulumi.Input<string>;
    packageBillingOptIn?: pulumi.Input<string>;
    /**
     * Additional JSON formatted parameters to be passed to the server creation and management API
     */
    params?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    plan: pulumi.Input<string>;
    sshKey?: pulumi.Input<string>;
    sshKeyId?: pulumi.Input<number>;
    userData?: pulumi.Input<string>;
    userDataBase64?: pulumi.Input<string>;
}
