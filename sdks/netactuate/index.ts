// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { BgpSessionsArgs, BgpSessionsState } from "./bgpSessions";
export type BgpSessions = import("./bgpSessions").BgpSessions;
export const BgpSessions: typeof import("./bgpSessions").BgpSessions = null as any;
utilities.lazyLoad(exports, ["BgpSessions"], () => require("./bgpSessions"));

export { GetBgpSessionsArgs, GetBgpSessionsResult, GetBgpSessionsOutputArgs } from "./getBgpSessions";
export const getBgpSessions: typeof import("./getBgpSessions").getBgpSessions = null as any;
export const getBgpSessionsOutput: typeof import("./getBgpSessions").getBgpSessionsOutput = null as any;
utilities.lazyLoad(exports, ["getBgpSessions","getBgpSessionsOutput"], () => require("./getBgpSessions"));

export { GetServerArgs, GetServerResult, GetServerOutputArgs } from "./getServer";
export const getServer: typeof import("./getServer").getServer = null as any;
export const getServerOutput: typeof import("./getServer").getServerOutput = null as any;
utilities.lazyLoad(exports, ["getServer","getServerOutput"], () => require("./getServer"));

export { GetSshkeyArgs, GetSshkeyResult, GetSshkeyOutputArgs } from "./getSshkey";
export const getSshkey: typeof import("./getSshkey").getSshkey = null as any;
export const getSshkeyOutput: typeof import("./getSshkey").getSshkeyOutput = null as any;
utilities.lazyLoad(exports, ["getSshkey","getSshkeyOutput"], () => require("./getSshkey"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ServerArgs, ServerState } from "./server";
export type Server = import("./server").Server;
export const Server: typeof import("./server").Server = null as any;
utilities.lazyLoad(exports, ["Server"], () => require("./server"));

export { SshkeyArgs, SshkeyState } from "./sshkey";
export type Sshkey = import("./sshkey").Sshkey;
export const Sshkey: typeof import("./sshkey").Sshkey = null as any;
utilities.lazyLoad(exports, ["Sshkey"], () => require("./sshkey"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "netactuate:index/bgpSessions:BgpSessions":
                return new BgpSessions(name, <any>undefined, { urn })
            case "netactuate:index/server:Server":
                return new Server(name, <any>undefined, { urn })
            case "netactuate:index/sshkey:Sshkey":
                return new Sshkey(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("netactuate", "index/bgpSessions", _module)
pulumi.runtime.registerResourceModule("netactuate", "index/server", _module)
pulumi.runtime.registerResourceModule("netactuate", "index/sshkey", _module)
pulumi.runtime.registerResourcePackage("netactuate", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:netactuate") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
