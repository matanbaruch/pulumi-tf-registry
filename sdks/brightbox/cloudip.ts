// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Cloudip extends pulumi.CustomResource {
    /**
     * Get an existing Cloudip resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudipState, opts?: pulumi.CustomResourceOptions): Cloudip {
        return new Cloudip(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'brightbox:index/cloudip:Cloudip';

    /**
     * Returns true if the given object is an instance of Cloudip.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cloudip {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cloudip.__pulumiType;
    }

    /**
     * Full Domain name entry for the Cloud IP
     */
    public /*out*/ readonly fqdn!: pulumi.Output<string>;
    /**
     * No lock on Cloud IPs
     *
     * @deprecated Deprecated
     */
    public /*out*/ readonly locked!: pulumi.Output<string>;
    /**
     * Type of Cloud IP required (nat/route)
     */
    public readonly mode!: pulumi.Output<string | undefined>;
    /**
     * Name assigned to the Cloud IP
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Array of Port Translators
     */
    public readonly portTranslators!: pulumi.Output<outputs.CloudipPortTranslator[] | undefined>;
    /**
     * Old alias of the IPv4 address
     *
     * @deprecated Deprecated
     */
    public /*out*/ readonly publicIp!: pulumi.Output<string>;
    /**
     * IPv4 address
     */
    public /*out*/ readonly publicIpv4!: pulumi.Output<string>;
    /**
     * IPv6 address
     */
    public /*out*/ readonly publicIpv6!: pulumi.Output<string>;
    /**
     * Reverse DNS entry for the Cloud IP
     */
    public readonly reverseDns!: pulumi.Output<string>;
    /**
     * Current state of the Cloud IP
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The object this Cloud IP maps to
     */
    public readonly target!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.CloudipTimeouts | undefined>;

    /**
     * Create a Cloudip resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CloudipArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudipArgs | CloudipState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudipState | undefined;
            resourceInputs["fqdn"] = state ? state.fqdn : undefined;
            resourceInputs["locked"] = state ? state.locked : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["portTranslators"] = state ? state.portTranslators : undefined;
            resourceInputs["publicIp"] = state ? state.publicIp : undefined;
            resourceInputs["publicIpv4"] = state ? state.publicIpv4 : undefined;
            resourceInputs["publicIpv6"] = state ? state.publicIpv6 : undefined;
            resourceInputs["reverseDns"] = state ? state.reverseDns : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["target"] = state ? state.target : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as CloudipArgs | undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["portTranslators"] = args ? args.portTranslators : undefined;
            resourceInputs["reverseDns"] = args ? args.reverseDns : undefined;
            resourceInputs["target"] = args ? args.target : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["fqdn"] = undefined /*out*/;
            resourceInputs["locked"] = undefined /*out*/;
            resourceInputs["publicIp"] = undefined /*out*/;
            resourceInputs["publicIpv4"] = undefined /*out*/;
            resourceInputs["publicIpv6"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cloudip.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Cloudip resources.
 */
export interface CloudipState {
    /**
     * Full Domain name entry for the Cloud IP
     */
    fqdn?: pulumi.Input<string>;
    /**
     * No lock on Cloud IPs
     *
     * @deprecated Deprecated
     */
    locked?: pulumi.Input<string>;
    /**
     * Type of Cloud IP required (nat/route)
     */
    mode?: pulumi.Input<string>;
    /**
     * Name assigned to the Cloud IP
     */
    name?: pulumi.Input<string>;
    /**
     * Array of Port Translators
     */
    portTranslators?: pulumi.Input<pulumi.Input<inputs.CloudipPortTranslator>[]>;
    /**
     * Old alias of the IPv4 address
     *
     * @deprecated Deprecated
     */
    publicIp?: pulumi.Input<string>;
    /**
     * IPv4 address
     */
    publicIpv4?: pulumi.Input<string>;
    /**
     * IPv6 address
     */
    publicIpv6?: pulumi.Input<string>;
    /**
     * Reverse DNS entry for the Cloud IP
     */
    reverseDns?: pulumi.Input<string>;
    /**
     * Current state of the Cloud IP
     */
    status?: pulumi.Input<string>;
    /**
     * The object this Cloud IP maps to
     */
    target?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CloudipTimeouts>;
}

/**
 * The set of arguments for constructing a Cloudip resource.
 */
export interface CloudipArgs {
    /**
     * Type of Cloud IP required (nat/route)
     */
    mode?: pulumi.Input<string>;
    /**
     * Name assigned to the Cloud IP
     */
    name?: pulumi.Input<string>;
    /**
     * Array of Port Translators
     */
    portTranslators?: pulumi.Input<pulumi.Input<inputs.CloudipPortTranslator>[]>;
    /**
     * Reverse DNS entry for the Cloud IP
     */
    reverseDns?: pulumi.Input<string>;
    /**
     * The object this Cloud IP maps to
     */
    target?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CloudipTimeouts>;
}
