// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Volume extends pulumi.CustomResource {
    /**
     * Get an existing Volume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VolumeState, opts?: pulumi.CustomResourceOptions): Volume {
        return new Volume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'brightbox:index/volume:Volume';

    /**
     * Returns true if the given object is an instance of Volume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Volume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Volume.__pulumiType;
    }

    /**
     * Verbose Description of this volume
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Is true if the volume is encrypted
     */
    public readonly encrypted!: pulumi.Output<boolean>;
    /**
     * Label given to the filesystem on the volume
     */
    public readonly filesystemLabel!: pulumi.Output<string | undefined>;
    /**
     * Format of the filesystem on the volume
     */
    public readonly filesystemType!: pulumi.Output<string | undefined>;
    /**
     * Image used to create the volume
     */
    public readonly image!: pulumi.Output<string>;
    /**
     * Is true if the image is set as locked and cannot be deleted
     */
    public readonly locked!: pulumi.Output<boolean | undefined>;
    /**
     * Human Readable Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Volume Serial Number
     */
    public readonly serial!: pulumi.Output<string>;
    /**
     * ID of the server this volume is to be mapped to
     */
    public readonly server!: pulumi.Output<string | undefined>;
    /**
     * Disk size in megabytes
     */
    public readonly size!: pulumi.Output<number>;
    /**
     * ID of the source volume for this image
     */
    public readonly source!: pulumi.Output<string>;
    /**
     * Source type for this image (image, volume or raw)
     */
    public /*out*/ readonly sourceType!: pulumi.Output<string>;
    /**
     * Current state of volume
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Storage type for this volume (local or network)
     */
    public /*out*/ readonly storageType!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.VolumeTimeouts | undefined>;

    /**
     * Create a Volume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VolumeArgs | VolumeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VolumeState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["encrypted"] = state ? state.encrypted : undefined;
            resourceInputs["filesystemLabel"] = state ? state.filesystemLabel : undefined;
            resourceInputs["filesystemType"] = state ? state.filesystemType : undefined;
            resourceInputs["image"] = state ? state.image : undefined;
            resourceInputs["locked"] = state ? state.locked : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["serial"] = state ? state.serial : undefined;
            resourceInputs["server"] = state ? state.server : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["sourceType"] = state ? state.sourceType : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["storageType"] = state ? state.storageType : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as VolumeArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["encrypted"] = args ? args.encrypted : undefined;
            resourceInputs["filesystemLabel"] = args ? args.filesystemLabel : undefined;
            resourceInputs["filesystemType"] = args ? args.filesystemType : undefined;
            resourceInputs["image"] = args ? args.image : undefined;
            resourceInputs["locked"] = args ? args.locked : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["serial"] = args ? args.serial : undefined;
            resourceInputs["server"] = args ? args.server : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["sourceType"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["storageType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Volume.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Volume resources.
 */
export interface VolumeState {
    /**
     * Verbose Description of this volume
     */
    description?: pulumi.Input<string>;
    /**
     * Is true if the volume is encrypted
     */
    encrypted?: pulumi.Input<boolean>;
    /**
     * Label given to the filesystem on the volume
     */
    filesystemLabel?: pulumi.Input<string>;
    /**
     * Format of the filesystem on the volume
     */
    filesystemType?: pulumi.Input<string>;
    /**
     * Image used to create the volume
     */
    image?: pulumi.Input<string>;
    /**
     * Is true if the image is set as locked and cannot be deleted
     */
    locked?: pulumi.Input<boolean>;
    /**
     * Human Readable Name
     */
    name?: pulumi.Input<string>;
    /**
     * Volume Serial Number
     */
    serial?: pulumi.Input<string>;
    /**
     * ID of the server this volume is to be mapped to
     */
    server?: pulumi.Input<string>;
    /**
     * Disk size in megabytes
     */
    size?: pulumi.Input<number>;
    /**
     * ID of the source volume for this image
     */
    source?: pulumi.Input<string>;
    /**
     * Source type for this image (image, volume or raw)
     */
    sourceType?: pulumi.Input<string>;
    /**
     * Current state of volume
     */
    status?: pulumi.Input<string>;
    /**
     * Storage type for this volume (local or network)
     */
    storageType?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VolumeTimeouts>;
}

/**
 * The set of arguments for constructing a Volume resource.
 */
export interface VolumeArgs {
    /**
     * Verbose Description of this volume
     */
    description?: pulumi.Input<string>;
    /**
     * Is true if the volume is encrypted
     */
    encrypted?: pulumi.Input<boolean>;
    /**
     * Label given to the filesystem on the volume
     */
    filesystemLabel?: pulumi.Input<string>;
    /**
     * Format of the filesystem on the volume
     */
    filesystemType?: pulumi.Input<string>;
    /**
     * Image used to create the volume
     */
    image?: pulumi.Input<string>;
    /**
     * Is true if the image is set as locked and cannot be deleted
     */
    locked?: pulumi.Input<boolean>;
    /**
     * Human Readable Name
     */
    name?: pulumi.Input<string>;
    /**
     * Volume Serial Number
     */
    serial?: pulumi.Input<string>;
    /**
     * ID of the server this volume is to be mapped to
     */
    server?: pulumi.Input<string>;
    /**
     * Disk size in megabytes
     */
    size?: pulumi.Input<number>;
    /**
     * ID of the source volume for this image
     */
    source?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VolumeTimeouts>;
}
