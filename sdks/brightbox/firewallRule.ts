// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FirewallRule extends pulumi.CustomResource {
    /**
     * Get an existing FirewallRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirewallRuleState, opts?: pulumi.CustomResourceOptions): FirewallRule {
        return new FirewallRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'brightbox:index/firewallRule:FirewallRule';

    /**
     * Returns true if the given object is an instance of FirewallRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirewallRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirewallRule.__pulumiType;
    }

    /**
     * User editable label
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Subnet, ServerGroup or ServerID
     */
    public readonly destination!: pulumi.Output<string | undefined>;
    /**
     * single port, multiple ports or range separated by '-' or ':'; upto 255 characters example - '80', '80,443,21' or
     * '3000-3999'
     */
    public readonly destinationPort!: pulumi.Output<string | undefined>;
    /**
     * The firewall policy this rule is linked to
     */
    public readonly firewallPolicy!: pulumi.Output<string>;
    /**
     * ICMP type name. 'echo-request', 'echo-reply'
     */
    public readonly icmpTypeName!: pulumi.Output<string | undefined>;
    /**
     * Protocol Number, or one of tcp, udp, icmp
     */
    public readonly protocol!: pulumi.Output<string | undefined>;
    /**
     * Subnet, ServerGroup or ServerID
     */
    public readonly source!: pulumi.Output<string | undefined>;
    /**
     * single port, multiple ports or range separated by '-' or ':'; upto 255 characters example - '80', '80,443,21' or
     * '3000-3999'
     */
    public readonly sourcePort!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.FirewallRuleTimeouts | undefined>;

    /**
     * Create a FirewallRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FirewallRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirewallRuleArgs | FirewallRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirewallRuleState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destination"] = state ? state.destination : undefined;
            resourceInputs["destinationPort"] = state ? state.destinationPort : undefined;
            resourceInputs["firewallPolicy"] = state ? state.firewallPolicy : undefined;
            resourceInputs["icmpTypeName"] = state ? state.icmpTypeName : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["sourcePort"] = state ? state.sourcePort : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as FirewallRuleArgs | undefined;
            if ((!args || args.firewallPolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'firewallPolicy'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destination"] = args ? args.destination : undefined;
            resourceInputs["destinationPort"] = args ? args.destinationPort : undefined;
            resourceInputs["firewallPolicy"] = args ? args.firewallPolicy : undefined;
            resourceInputs["icmpTypeName"] = args ? args.icmpTypeName : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["sourcePort"] = args ? args.sourcePort : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FirewallRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FirewallRule resources.
 */
export interface FirewallRuleState {
    /**
     * User editable label
     */
    description?: pulumi.Input<string>;
    /**
     * Subnet, ServerGroup or ServerID
     */
    destination?: pulumi.Input<string>;
    /**
     * single port, multiple ports or range separated by '-' or ':'; upto 255 characters example - '80', '80,443,21' or
     * '3000-3999'
     */
    destinationPort?: pulumi.Input<string>;
    /**
     * The firewall policy this rule is linked to
     */
    firewallPolicy?: pulumi.Input<string>;
    /**
     * ICMP type name. 'echo-request', 'echo-reply'
     */
    icmpTypeName?: pulumi.Input<string>;
    /**
     * Protocol Number, or one of tcp, udp, icmp
     */
    protocol?: pulumi.Input<string>;
    /**
     * Subnet, ServerGroup or ServerID
     */
    source?: pulumi.Input<string>;
    /**
     * single port, multiple ports or range separated by '-' or ':'; upto 255 characters example - '80', '80,443,21' or
     * '3000-3999'
     */
    sourcePort?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.FirewallRuleTimeouts>;
}

/**
 * The set of arguments for constructing a FirewallRule resource.
 */
export interface FirewallRuleArgs {
    /**
     * User editable label
     */
    description?: pulumi.Input<string>;
    /**
     * Subnet, ServerGroup or ServerID
     */
    destination?: pulumi.Input<string>;
    /**
     * single port, multiple ports or range separated by '-' or ':'; upto 255 characters example - '80', '80,443,21' or
     * '3000-3999'
     */
    destinationPort?: pulumi.Input<string>;
    /**
     * The firewall policy this rule is linked to
     */
    firewallPolicy: pulumi.Input<string>;
    /**
     * ICMP type name. 'echo-request', 'echo-reply'
     */
    icmpTypeName?: pulumi.Input<string>;
    /**
     * Protocol Number, or one of tcp, udp, icmp
     */
    protocol?: pulumi.Input<string>;
    /**
     * Subnet, ServerGroup or ServerID
     */
    source?: pulumi.Input<string>;
    /**
     * single port, multiple ports or range separated by '-' or ':'; upto 255 characters example - '80', '80,443,21' or
     * '3000-3999'
     */
    sourcePort?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.FirewallRuleTimeouts>;
}
