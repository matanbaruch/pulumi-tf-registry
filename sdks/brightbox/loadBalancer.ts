// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LoadBalancer extends pulumi.CustomResource {
    /**
     * Get an existing LoadBalancer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadBalancerState, opts?: pulumi.CustomResourceOptions): LoadBalancer {
        return new LoadBalancer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'brightbox:index/loadBalancer:LoadBalancer';

    /**
     * Returns true if the given object is an instance of LoadBalancer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LoadBalancer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoadBalancer.__pulumiType;
    }

    /**
     * Buffer size in bytes
     *
     * @deprecated Deprecated
     */
    public readonly bufferSize!: pulumi.Output<number>;
    /**
     * A X509 SSL certificate in PEM format
     */
    public readonly certificatePem!: pulumi.Output<string | undefined>;
    /**
     * RSA private key used to sign the certificate in PEM format
     */
    public readonly certificatePrivateKey!: pulumi.Output<string | undefined>;
    /**
     * Array of domain names to attempt to register with ACME
     */
    public readonly domains!: pulumi.Output<string[] | undefined>;
    /**
     * Healthcheck options
     */
    public readonly healthcheck!: pulumi.Output<outputs.LoadBalancerHealthcheck>;
    /**
     * Redirect any requests on port 80 automatically to port 443
     */
    public readonly httpsRedirect!: pulumi.Output<boolean | undefined>;
    /**
     * Array of listeners
     */
    public readonly listeners!: pulumi.Output<outputs.LoadBalancerListener[]>;
    /**
     * Is true if resource has been set as locked and can not be deleted
     */
    public readonly locked!: pulumi.Output<boolean | undefined>;
    /**
     * Editable user label
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * IDs of servers connected to this load balancer
     */
    public readonly nodes!: pulumi.Output<string[]>;
    /**
     * Method of load balancing. Supports `least-connections`, `round-robin` or `source-address`)
     */
    public readonly policy!: pulumi.Output<string>;
    /**
     * The minimum TLS/SSL version for the load balancer to accept. Supports `TLSv1.0`, `TLSv1.1`, `TLSv1.2`, `TLSv1.3` and
     * `SSLv3`
     */
    public readonly sslMinimumVersion!: pulumi.Output<string>;
    /**
     * Allow SSLv3 to be used
     *
     * @deprecated Deprecated
     */
    public readonly sslv3!: pulumi.Output<boolean | undefined>;
    /**
     * Current state of the load balancer
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.LoadBalancerTimeouts | undefined>;

    /**
     * Create a LoadBalancer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadBalancerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoadBalancerArgs | LoadBalancerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoadBalancerState | undefined;
            resourceInputs["bufferSize"] = state ? state.bufferSize : undefined;
            resourceInputs["certificatePem"] = state ? state.certificatePem : undefined;
            resourceInputs["certificatePrivateKey"] = state ? state.certificatePrivateKey : undefined;
            resourceInputs["domains"] = state ? state.domains : undefined;
            resourceInputs["healthcheck"] = state ? state.healthcheck : undefined;
            resourceInputs["httpsRedirect"] = state ? state.httpsRedirect : undefined;
            resourceInputs["listeners"] = state ? state.listeners : undefined;
            resourceInputs["locked"] = state ? state.locked : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodes"] = state ? state.nodes : undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
            resourceInputs["sslMinimumVersion"] = state ? state.sslMinimumVersion : undefined;
            resourceInputs["sslv3"] = state ? state.sslv3 : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as LoadBalancerArgs | undefined;
            if ((!args || args.healthcheck === undefined) && !opts.urn) {
                throw new Error("Missing required property 'healthcheck'");
            }
            if ((!args || args.listeners === undefined) && !opts.urn) {
                throw new Error("Missing required property 'listeners'");
            }
            resourceInputs["bufferSize"] = args ? args.bufferSize : undefined;
            resourceInputs["certificatePem"] = args ? args.certificatePem : undefined;
            resourceInputs["certificatePrivateKey"] = args ? args.certificatePrivateKey : undefined;
            resourceInputs["domains"] = args ? args.domains : undefined;
            resourceInputs["healthcheck"] = args ? args.healthcheck : undefined;
            resourceInputs["httpsRedirect"] = args ? args.httpsRedirect : undefined;
            resourceInputs["listeners"] = args ? args.listeners : undefined;
            resourceInputs["locked"] = args ? args.locked : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodes"] = args ? args.nodes : undefined;
            resourceInputs["policy"] = args ? args.policy : undefined;
            resourceInputs["sslMinimumVersion"] = args ? args.sslMinimumVersion : undefined;
            resourceInputs["sslv3"] = args ? args.sslv3 : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LoadBalancer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LoadBalancer resources.
 */
export interface LoadBalancerState {
    /**
     * Buffer size in bytes
     *
     * @deprecated Deprecated
     */
    bufferSize?: pulumi.Input<number>;
    /**
     * A X509 SSL certificate in PEM format
     */
    certificatePem?: pulumi.Input<string>;
    /**
     * RSA private key used to sign the certificate in PEM format
     */
    certificatePrivateKey?: pulumi.Input<string>;
    /**
     * Array of domain names to attempt to register with ACME
     */
    domains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Healthcheck options
     */
    healthcheck?: pulumi.Input<inputs.LoadBalancerHealthcheck>;
    /**
     * Redirect any requests on port 80 automatically to port 443
     */
    httpsRedirect?: pulumi.Input<boolean>;
    /**
     * Array of listeners
     */
    listeners?: pulumi.Input<pulumi.Input<inputs.LoadBalancerListener>[]>;
    /**
     * Is true if resource has been set as locked and can not be deleted
     */
    locked?: pulumi.Input<boolean>;
    /**
     * Editable user label
     */
    name?: pulumi.Input<string>;
    /**
     * IDs of servers connected to this load balancer
     */
    nodes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Method of load balancing. Supports `least-connections`, `round-robin` or `source-address`)
     */
    policy?: pulumi.Input<string>;
    /**
     * The minimum TLS/SSL version for the load balancer to accept. Supports `TLSv1.0`, `TLSv1.1`, `TLSv1.2`, `TLSv1.3` and
     * `SSLv3`
     */
    sslMinimumVersion?: pulumi.Input<string>;
    /**
     * Allow SSLv3 to be used
     *
     * @deprecated Deprecated
     */
    sslv3?: pulumi.Input<boolean>;
    /**
     * Current state of the load balancer
     */
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LoadBalancerTimeouts>;
}

/**
 * The set of arguments for constructing a LoadBalancer resource.
 */
export interface LoadBalancerArgs {
    /**
     * Buffer size in bytes
     *
     * @deprecated Deprecated
     */
    bufferSize?: pulumi.Input<number>;
    /**
     * A X509 SSL certificate in PEM format
     */
    certificatePem?: pulumi.Input<string>;
    /**
     * RSA private key used to sign the certificate in PEM format
     */
    certificatePrivateKey?: pulumi.Input<string>;
    /**
     * Array of domain names to attempt to register with ACME
     */
    domains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Healthcheck options
     */
    healthcheck: pulumi.Input<inputs.LoadBalancerHealthcheck>;
    /**
     * Redirect any requests on port 80 automatically to port 443
     */
    httpsRedirect?: pulumi.Input<boolean>;
    /**
     * Array of listeners
     */
    listeners: pulumi.Input<pulumi.Input<inputs.LoadBalancerListener>[]>;
    /**
     * Is true if resource has been set as locked and can not be deleted
     */
    locked?: pulumi.Input<boolean>;
    /**
     * Editable user label
     */
    name?: pulumi.Input<string>;
    /**
     * IDs of servers connected to this load balancer
     */
    nodes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Method of load balancing. Supports `least-connections`, `round-robin` or `source-address`)
     */
    policy?: pulumi.Input<string>;
    /**
     * The minimum TLS/SSL version for the load balancer to accept. Supports `TLSv1.0`, `TLSv1.1`, `TLSv1.2`, `TLSv1.3` and
     * `SSLv3`
     */
    sslMinimumVersion?: pulumi.Input<string>;
    /**
     * Allow SSLv3 to be used
     *
     * @deprecated Deprecated
     */
    sslv3?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.LoadBalancerTimeouts>;
}
