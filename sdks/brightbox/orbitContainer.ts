// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OrbitContainer extends pulumi.CustomResource {
    /**
     * Get an existing OrbitContainer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrbitContainerState, opts?: pulumi.CustomResourceOptions): OrbitContainer {
        return new OrbitContainer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'brightbox:index/orbitContainer:OrbitContainer';

    /**
     * Returns true if the given object is an instance of OrbitContainer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrbitContainer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrbitContainer.__pulumiType;
    }

    /**
     * Number of bytes used by the container
     */
    public /*out*/ readonly bytesUsed!: pulumi.Output<number>;
    /**
     * Who can read the container
     */
    public readonly containerReads!: pulumi.Output<string[] | undefined>;
    /**
     * Container sync key
     */
    public readonly containerSyncKey!: pulumi.Output<string | undefined>;
    /**
     * Container to sync to
     */
    public readonly containerSyncTo!: pulumi.Output<string | undefined>;
    /**
     * Who can write to the container
     */
    public readonly containerWrites!: pulumi.Output<string[] | undefined>;
    /**
     * The time the container was created
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * History location
     */
    public readonly historyLocation!: pulumi.Output<string | undefined>;
    /**
     * Set of key/value metadata associated with the container
     */
    public readonly metadata!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Name of the Container
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Number of objects in the container
     */
    public /*out*/ readonly objectCount!: pulumi.Output<number>;
    /**
     * Any storage policy in place
     */
    public /*out*/ readonly storagePolicy!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.OrbitContainerTimeouts | undefined>;
    /**
     * Versions Location
     */
    public readonly versionsLocation!: pulumi.Output<string | undefined>;

    /**
     * Create a OrbitContainer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: OrbitContainerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrbitContainerArgs | OrbitContainerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrbitContainerState | undefined;
            resourceInputs["bytesUsed"] = state ? state.bytesUsed : undefined;
            resourceInputs["containerReads"] = state ? state.containerReads : undefined;
            resourceInputs["containerSyncKey"] = state ? state.containerSyncKey : undefined;
            resourceInputs["containerSyncTo"] = state ? state.containerSyncTo : undefined;
            resourceInputs["containerWrites"] = state ? state.containerWrites : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["historyLocation"] = state ? state.historyLocation : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["objectCount"] = state ? state.objectCount : undefined;
            resourceInputs["storagePolicy"] = state ? state.storagePolicy : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["versionsLocation"] = state ? state.versionsLocation : undefined;
        } else {
            const args = argsOrState as OrbitContainerArgs | undefined;
            resourceInputs["containerReads"] = args ? args.containerReads : undefined;
            resourceInputs["containerSyncKey"] = args ? args.containerSyncKey : undefined;
            resourceInputs["containerSyncTo"] = args ? args.containerSyncTo : undefined;
            resourceInputs["containerWrites"] = args ? args.containerWrites : undefined;
            resourceInputs["historyLocation"] = args ? args.historyLocation : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["versionsLocation"] = args ? args.versionsLocation : undefined;
            resourceInputs["bytesUsed"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["objectCount"] = undefined /*out*/;
            resourceInputs["storagePolicy"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OrbitContainer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OrbitContainer resources.
 */
export interface OrbitContainerState {
    /**
     * Number of bytes used by the container
     */
    bytesUsed?: pulumi.Input<number>;
    /**
     * Who can read the container
     */
    containerReads?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Container sync key
     */
    containerSyncKey?: pulumi.Input<string>;
    /**
     * Container to sync to
     */
    containerSyncTo?: pulumi.Input<string>;
    /**
     * Who can write to the container
     */
    containerWrites?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The time the container was created
     */
    createdAt?: pulumi.Input<string>;
    /**
     * History location
     */
    historyLocation?: pulumi.Input<string>;
    /**
     * Set of key/value metadata associated with the container
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the Container
     */
    name?: pulumi.Input<string>;
    /**
     * Number of objects in the container
     */
    objectCount?: pulumi.Input<number>;
    /**
     * Any storage policy in place
     */
    storagePolicy?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.OrbitContainerTimeouts>;
    /**
     * Versions Location
     */
    versionsLocation?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OrbitContainer resource.
 */
export interface OrbitContainerArgs {
    /**
     * Who can read the container
     */
    containerReads?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Container sync key
     */
    containerSyncKey?: pulumi.Input<string>;
    /**
     * Container to sync to
     */
    containerSyncTo?: pulumi.Input<string>;
    /**
     * Who can write to the container
     */
    containerWrites?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * History location
     */
    historyLocation?: pulumi.Input<string>;
    /**
     * Set of key/value metadata associated with the container
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the Container
     */
    name?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.OrbitContainerTimeouts>;
    /**
     * Versions Location
     */
    versionsLocation?: pulumi.Input<string>;
}
