// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Server extends pulumi.CustomResource {
    /**
     * Get an existing Server resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerState, opts?: pulumi.CustomResourceOptions): Server {
        return new Server(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'brightbox:index/server:Server';

    /**
     * Returns true if the given object is an instance of Server.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Server {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Server.__pulumiType;
    }

    /**
     * List of volumes to attach to server
     */
    public /*out*/ readonly dataVolumes!: pulumi.Output<string[]>;
    /**
     * Is true if the server has been built with an encrypted disk
     */
    public readonly diskEncrypted!: pulumi.Output<boolean>;
    /**
     * Disk size in megabytes for server types with variable block storage
     */
    public readonly diskSize!: pulumi.Output<number>;
    /**
     * Fully qualified domain name
     */
    public /*out*/ readonly fqdn!: pulumi.Output<string>;
    /**
     * Short hostname
     */
    public /*out*/ readonly hostname!: pulumi.Output<string>;
    /**
     * Image used to create the server
     */
    public readonly image!: pulumi.Output<string>;
    /**
     * Network Interface connected to this server
     */
    public /*out*/ readonly interface!: pulumi.Output<string>;
    /**
     * Public IPv4 address of the interface
     */
    public /*out*/ readonly ipv4Address!: pulumi.Output<string>;
    /**
     * Private IPv4 address of the interface
     */
    public /*out*/ readonly ipv4AddressPrivate!: pulumi.Output<string>;
    /**
     * Public IPv6 address of the interface
     */
    public /*out*/ readonly ipv6Address!: pulumi.Output<string>;
    /**
     * Public IPv6 FQDN
     */
    public /*out*/ readonly ipv6Hostname!: pulumi.Output<string>;
    /**
     * Is true if resource has been set as locked and cannot be deleted
     */
    public readonly locked!: pulumi.Output<boolean | undefined>;
    /**
     * Editable user label
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Public IPv4 FQDN
     */
    public /*out*/ readonly publicHostname!: pulumi.Output<string>;
    /**
     * List of server groups to add server to
     */
    public readonly serverGroups!: pulumi.Output<string[]>;
    /**
     * Keep this number of scheduled snapshots. Keep all if unset
     */
    public readonly snapshotsRetention!: pulumi.Output<string>;
    /**
     * Crontab pattern for scheduled snapshots. Must be at least hourly
     */
    public readonly snapshotsSchedule!: pulumi.Output<string>;
    /**
     * time in UTC when next approximate scheduled snapshot will be run
     */
    public /*out*/ readonly snapshotsScheduleNextAt!: pulumi.Output<string>;
    /**
     * Current state of server
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ServerTimeouts | undefined>;
    /**
     * Server type of the server
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Data made available to Cloud Init
     */
    public readonly userData!: pulumi.Output<string | undefined>;
    /**
     * Base64 encoded data made available to Cloud Init
     */
    public readonly userDataBase64!: pulumi.Output<string | undefined>;
    /**
     * Username to use when logging into a server
     */
    public /*out*/ readonly username!: pulumi.Output<string>;
    /**
     * Volume used to boot the server
     */
    public readonly volume!: pulumi.Output<string>;
    /**
     * Zone where server is located
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a Server resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerArgs | ServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerState | undefined;
            resourceInputs["dataVolumes"] = state ? state.dataVolumes : undefined;
            resourceInputs["diskEncrypted"] = state ? state.diskEncrypted : undefined;
            resourceInputs["diskSize"] = state ? state.diskSize : undefined;
            resourceInputs["fqdn"] = state ? state.fqdn : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["image"] = state ? state.image : undefined;
            resourceInputs["interface"] = state ? state.interface : undefined;
            resourceInputs["ipv4Address"] = state ? state.ipv4Address : undefined;
            resourceInputs["ipv4AddressPrivate"] = state ? state.ipv4AddressPrivate : undefined;
            resourceInputs["ipv6Address"] = state ? state.ipv6Address : undefined;
            resourceInputs["ipv6Hostname"] = state ? state.ipv6Hostname : undefined;
            resourceInputs["locked"] = state ? state.locked : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["publicHostname"] = state ? state.publicHostname : undefined;
            resourceInputs["serverGroups"] = state ? state.serverGroups : undefined;
            resourceInputs["snapshotsRetention"] = state ? state.snapshotsRetention : undefined;
            resourceInputs["snapshotsSchedule"] = state ? state.snapshotsSchedule : undefined;
            resourceInputs["snapshotsScheduleNextAt"] = state ? state.snapshotsScheduleNextAt : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["userData"] = state ? state.userData : undefined;
            resourceInputs["userDataBase64"] = state ? state.userDataBase64 : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["volume"] = state ? state.volume : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as ServerArgs | undefined;
            resourceInputs["diskEncrypted"] = args ? args.diskEncrypted : undefined;
            resourceInputs["diskSize"] = args ? args.diskSize : undefined;
            resourceInputs["image"] = args ? args.image : undefined;
            resourceInputs["locked"] = args ? args.locked : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["serverGroups"] = args ? args.serverGroups : undefined;
            resourceInputs["snapshotsRetention"] = args ? args.snapshotsRetention : undefined;
            resourceInputs["snapshotsSchedule"] = args ? args.snapshotsSchedule : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["userData"] = args ? args.userData : undefined;
            resourceInputs["userDataBase64"] = args ? args.userDataBase64 : undefined;
            resourceInputs["volume"] = args ? args.volume : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["dataVolumes"] = undefined /*out*/;
            resourceInputs["fqdn"] = undefined /*out*/;
            resourceInputs["hostname"] = undefined /*out*/;
            resourceInputs["interface"] = undefined /*out*/;
            resourceInputs["ipv4Address"] = undefined /*out*/;
            resourceInputs["ipv4AddressPrivate"] = undefined /*out*/;
            resourceInputs["ipv6Address"] = undefined /*out*/;
            resourceInputs["ipv6Hostname"] = undefined /*out*/;
            resourceInputs["publicHostname"] = undefined /*out*/;
            resourceInputs["snapshotsScheduleNextAt"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["username"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Server.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Server resources.
 */
export interface ServerState {
    /**
     * List of volumes to attach to server
     */
    dataVolumes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Is true if the server has been built with an encrypted disk
     */
    diskEncrypted?: pulumi.Input<boolean>;
    /**
     * Disk size in megabytes for server types with variable block storage
     */
    diskSize?: pulumi.Input<number>;
    /**
     * Fully qualified domain name
     */
    fqdn?: pulumi.Input<string>;
    /**
     * Short hostname
     */
    hostname?: pulumi.Input<string>;
    /**
     * Image used to create the server
     */
    image?: pulumi.Input<string>;
    /**
     * Network Interface connected to this server
     */
    interface?: pulumi.Input<string>;
    /**
     * Public IPv4 address of the interface
     */
    ipv4Address?: pulumi.Input<string>;
    /**
     * Private IPv4 address of the interface
     */
    ipv4AddressPrivate?: pulumi.Input<string>;
    /**
     * Public IPv6 address of the interface
     */
    ipv6Address?: pulumi.Input<string>;
    /**
     * Public IPv6 FQDN
     */
    ipv6Hostname?: pulumi.Input<string>;
    /**
     * Is true if resource has been set as locked and cannot be deleted
     */
    locked?: pulumi.Input<boolean>;
    /**
     * Editable user label
     */
    name?: pulumi.Input<string>;
    /**
     * Public IPv4 FQDN
     */
    publicHostname?: pulumi.Input<string>;
    /**
     * List of server groups to add server to
     */
    serverGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Keep this number of scheduled snapshots. Keep all if unset
     */
    snapshotsRetention?: pulumi.Input<string>;
    /**
     * Crontab pattern for scheduled snapshots. Must be at least hourly
     */
    snapshotsSchedule?: pulumi.Input<string>;
    /**
     * time in UTC when next approximate scheduled snapshot will be run
     */
    snapshotsScheduleNextAt?: pulumi.Input<string>;
    /**
     * Current state of server
     */
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ServerTimeouts>;
    /**
     * Server type of the server
     */
    type?: pulumi.Input<string>;
    /**
     * Data made available to Cloud Init
     */
    userData?: pulumi.Input<string>;
    /**
     * Base64 encoded data made available to Cloud Init
     */
    userDataBase64?: pulumi.Input<string>;
    /**
     * Username to use when logging into a server
     */
    username?: pulumi.Input<string>;
    /**
     * Volume used to boot the server
     */
    volume?: pulumi.Input<string>;
    /**
     * Zone where server is located
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Server resource.
 */
export interface ServerArgs {
    /**
     * Is true if the server has been built with an encrypted disk
     */
    diskEncrypted?: pulumi.Input<boolean>;
    /**
     * Disk size in megabytes for server types with variable block storage
     */
    diskSize?: pulumi.Input<number>;
    /**
     * Image used to create the server
     */
    image?: pulumi.Input<string>;
    /**
     * Is true if resource has been set as locked and cannot be deleted
     */
    locked?: pulumi.Input<boolean>;
    /**
     * Editable user label
     */
    name?: pulumi.Input<string>;
    /**
     * List of server groups to add server to
     */
    serverGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Keep this number of scheduled snapshots. Keep all if unset
     */
    snapshotsRetention?: pulumi.Input<string>;
    /**
     * Crontab pattern for scheduled snapshots. Must be at least hourly
     */
    snapshotsSchedule?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ServerTimeouts>;
    /**
     * Server type of the server
     */
    type?: pulumi.Input<string>;
    /**
     * Data made available to Cloud Init
     */
    userData?: pulumi.Input<string>;
    /**
     * Base64 encoded data made available to Cloud Init
     */
    userDataBase64?: pulumi.Input<string>;
    /**
     * Volume used to boot the server
     */
    volume?: pulumi.Input<string>;
    /**
     * Zone where server is located
     */
    zone?: pulumi.Input<string>;
}
