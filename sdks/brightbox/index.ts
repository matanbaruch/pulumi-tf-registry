// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ApiClientArgs, ApiClientState } from "./apiClient";
export type ApiClient = import("./apiClient").ApiClient;
export const ApiClient: typeof import("./apiClient").ApiClient = null as any;
utilities.lazyLoad(exports, ["ApiClient"], () => require("./apiClient"));

export { CloudipArgs, CloudipState } from "./cloudip";
export type Cloudip = import("./cloudip").Cloudip;
export const Cloudip: typeof import("./cloudip").Cloudip = null as any;
utilities.lazyLoad(exports, ["Cloudip"], () => require("./cloudip"));

export { ConfigMapArgs, ConfigMapState } from "./configMap";
export type ConfigMap = import("./configMap").ConfigMap;
export const ConfigMap: typeof import("./configMap").ConfigMap = null as any;
utilities.lazyLoad(exports, ["ConfigMap"], () => require("./configMap"));

export { DatabaseServerArgs, DatabaseServerState } from "./databaseServer";
export type DatabaseServer = import("./databaseServer").DatabaseServer;
export const DatabaseServer: typeof import("./databaseServer").DatabaseServer = null as any;
utilities.lazyLoad(exports, ["DatabaseServer"], () => require("./databaseServer"));

export { FirewallPolicyArgs, FirewallPolicyState } from "./firewallPolicy";
export type FirewallPolicy = import("./firewallPolicy").FirewallPolicy;
export const FirewallPolicy: typeof import("./firewallPolicy").FirewallPolicy = null as any;
utilities.lazyLoad(exports, ["FirewallPolicy"], () => require("./firewallPolicy"));

export { FirewallRuleArgs, FirewallRuleState } from "./firewallRule";
export type FirewallRule = import("./firewallRule").FirewallRule;
export const FirewallRule: typeof import("./firewallRule").FirewallRule = null as any;
utilities.lazyLoad(exports, ["FirewallRule"], () => require("./firewallRule"));

export { GetDatabaseSnapshotArgs, GetDatabaseSnapshotResult, GetDatabaseSnapshotOutputArgs } from "./getDatabaseSnapshot";
export const getDatabaseSnapshot: typeof import("./getDatabaseSnapshot").getDatabaseSnapshot = null as any;
export const getDatabaseSnapshotOutput: typeof import("./getDatabaseSnapshot").getDatabaseSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseSnapshot","getDatabaseSnapshotOutput"], () => require("./getDatabaseSnapshot"));

export { GetDatabaseTypeArgs, GetDatabaseTypeResult, GetDatabaseTypeOutputArgs } from "./getDatabaseType";
export const getDatabaseType: typeof import("./getDatabaseType").getDatabaseType = null as any;
export const getDatabaseTypeOutput: typeof import("./getDatabaseType").getDatabaseTypeOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseType","getDatabaseTypeOutput"], () => require("./getDatabaseType"));

export { GetImageArgs, GetImageResult, GetImageOutputArgs } from "./getImage";
export const getImage: typeof import("./getImage").getImage = null as any;
export const getImageOutput: typeof import("./getImage").getImageOutput = null as any;
utilities.lazyLoad(exports, ["getImage","getImageOutput"], () => require("./getImage"));

export { GetServerGroupArgs, GetServerGroupResult, GetServerGroupOutputArgs } from "./getServerGroup";
export const getServerGroup: typeof import("./getServerGroup").getServerGroup = null as any;
export const getServerGroupOutput: typeof import("./getServerGroup").getServerGroupOutput = null as any;
utilities.lazyLoad(exports, ["getServerGroup","getServerGroupOutput"], () => require("./getServerGroup"));

export { GetServerTypeArgs, GetServerTypeResult, GetServerTypeOutputArgs } from "./getServerType";
export const getServerType: typeof import("./getServerType").getServerType = null as any;
export const getServerTypeOutput: typeof import("./getServerType").getServerTypeOutput = null as any;
utilities.lazyLoad(exports, ["getServerType","getServerTypeOutput"], () => require("./getServerType"));

export { LoadBalancerArgs, LoadBalancerState } from "./loadBalancer";
export type LoadBalancer = import("./loadBalancer").LoadBalancer;
export const LoadBalancer: typeof import("./loadBalancer").LoadBalancer = null as any;
utilities.lazyLoad(exports, ["LoadBalancer"], () => require("./loadBalancer"));

export { OrbitContainerArgs, OrbitContainerState } from "./orbitContainer";
export type OrbitContainer = import("./orbitContainer").OrbitContainer;
export const OrbitContainer: typeof import("./orbitContainer").OrbitContainer = null as any;
utilities.lazyLoad(exports, ["OrbitContainer"], () => require("./orbitContainer"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ServerArgs, ServerState } from "./server";
export type Server = import("./server").Server;
export const Server: typeof import("./server").Server = null as any;
utilities.lazyLoad(exports, ["Server"], () => require("./server"));

export { ServerGroupArgs, ServerGroupState } from "./serverGroup";
export type ServerGroup = import("./serverGroup").ServerGroup;
export const ServerGroup: typeof import("./serverGroup").ServerGroup = null as any;
utilities.lazyLoad(exports, ["ServerGroup"], () => require("./serverGroup"));

export { ServerGroupMembershipArgs, ServerGroupMembershipState } from "./serverGroupMembership";
export type ServerGroupMembership = import("./serverGroupMembership").ServerGroupMembership;
export const ServerGroupMembership: typeof import("./serverGroupMembership").ServerGroupMembership = null as any;
utilities.lazyLoad(exports, ["ServerGroupMembership"], () => require("./serverGroupMembership"));

export { VolumeArgs, VolumeState } from "./volume";
export type Volume = import("./volume").Volume;
export const Volume: typeof import("./volume").Volume = null as any;
utilities.lazyLoad(exports, ["Volume"], () => require("./volume"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "brightbox:index/apiClient:ApiClient":
                return new ApiClient(name, <any>undefined, { urn })
            case "brightbox:index/cloudip:Cloudip":
                return new Cloudip(name, <any>undefined, { urn })
            case "brightbox:index/configMap:ConfigMap":
                return new ConfigMap(name, <any>undefined, { urn })
            case "brightbox:index/databaseServer:DatabaseServer":
                return new DatabaseServer(name, <any>undefined, { urn })
            case "brightbox:index/firewallPolicy:FirewallPolicy":
                return new FirewallPolicy(name, <any>undefined, { urn })
            case "brightbox:index/firewallRule:FirewallRule":
                return new FirewallRule(name, <any>undefined, { urn })
            case "brightbox:index/loadBalancer:LoadBalancer":
                return new LoadBalancer(name, <any>undefined, { urn })
            case "brightbox:index/orbitContainer:OrbitContainer":
                return new OrbitContainer(name, <any>undefined, { urn })
            case "brightbox:index/server:Server":
                return new Server(name, <any>undefined, { urn })
            case "brightbox:index/serverGroup:ServerGroup":
                return new ServerGroup(name, <any>undefined, { urn })
            case "brightbox:index/serverGroupMembership:ServerGroupMembership":
                return new ServerGroupMembership(name, <any>undefined, { urn })
            case "brightbox:index/volume:Volume":
                return new Volume(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("brightbox", "index/apiClient", _module)
pulumi.runtime.registerResourceModule("brightbox", "index/cloudip", _module)
pulumi.runtime.registerResourceModule("brightbox", "index/configMap", _module)
pulumi.runtime.registerResourceModule("brightbox", "index/databaseServer", _module)
pulumi.runtime.registerResourceModule("brightbox", "index/firewallPolicy", _module)
pulumi.runtime.registerResourceModule("brightbox", "index/firewallRule", _module)
pulumi.runtime.registerResourceModule("brightbox", "index/loadBalancer", _module)
pulumi.runtime.registerResourceModule("brightbox", "index/orbitContainer", _module)
pulumi.runtime.registerResourceModule("brightbox", "index/server", _module)
pulumi.runtime.registerResourceModule("brightbox", "index/serverGroup", _module)
pulumi.runtime.registerResourceModule("brightbox", "index/serverGroupMembership", _module)
pulumi.runtime.registerResourceModule("brightbox", "index/volume", _module)
pulumi.runtime.registerResourcePackage("brightbox", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:brightbox") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
