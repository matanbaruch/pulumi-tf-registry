// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatabaseServer extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseServerState, opts?: pulumi.CustomResourceOptions): DatabaseServer {
        return new DatabaseServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'brightbox:index/databaseServer:DatabaseServer';

    /**
     * Returns true if the given object is an instance of DatabaseServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseServer.__pulumiType;
    }

    /**
     * Initial password required to login, only available at creation or following a password reset request
     */
    public /*out*/ readonly adminPassword!: pulumi.Output<string>;
    /**
     * Initial username required to login
     */
    public /*out*/ readonly adminUsername!: pulumi.Output<string>;
    /**
     * An array of resources allowed to access the database. Accepted values include `any`, `IPv4 address`, `server
     * identifier`, `server group identifier`
     */
    public readonly allowAccesses!: pulumi.Output<string[]>;
    /**
     * The DBMS engine of the Database Server
     */
    public readonly databaseEngine!: pulumi.Output<string>;
    /**
     * ID of the database type to use
     */
    public readonly databaseType!: pulumi.Output<string>;
    /**
     * The version of the given engine in use
     */
    public readonly databaseVersion!: pulumi.Output<string>;
    /**
     * Editable user label
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Initial password required to login, only available at creation or following a password reset request
     */
    public readonly locked!: pulumi.Output<boolean | undefined>;
    /**
     * Number representing 24hr time start of maintenance window hour for x:00-x:59 (0-23)
     */
    public readonly maintenanceHour!: pulumi.Output<number>;
    /**
     * Numerical index of weekday (0 is Sunday, 1 is Monday...) to set when automatic updates may be performed
     */
    public readonly maintenanceWeekday!: pulumi.Output<number>;
    /**
     * Editable user label
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Identifier for an SQL snapshot to use as the basis of the new instance. Creates and restores the database from the
     * snapshot
     */
    public readonly snapshot!: pulumi.Output<string | undefined>;
    /**
     * Keep this number of scheduled snapshots. Keep all if unset
     */
    public readonly snapshotsRetention!: pulumi.Output<string | undefined>;
    /**
     * Crontab pattern for scheduled snapshots. Must be at least hourly
     */
    public readonly snapshotsSchedule!: pulumi.Output<string | undefined>;
    /**
     * time in UTC when next approximate scheduled snapshot will be run
     */
    public /*out*/ readonly snapshotsScheduleNextAt!: pulumi.Output<string>;
    /**
     * State the database server is in
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DatabaseServerTimeouts | undefined>;
    /**
     * ID of the zone the database server is in
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a DatabaseServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseServerArgs | DatabaseServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseServerState | undefined;
            resourceInputs["adminPassword"] = state ? state.adminPassword : undefined;
            resourceInputs["adminUsername"] = state ? state.adminUsername : undefined;
            resourceInputs["allowAccesses"] = state ? state.allowAccesses : undefined;
            resourceInputs["databaseEngine"] = state ? state.databaseEngine : undefined;
            resourceInputs["databaseType"] = state ? state.databaseType : undefined;
            resourceInputs["databaseVersion"] = state ? state.databaseVersion : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["locked"] = state ? state.locked : undefined;
            resourceInputs["maintenanceHour"] = state ? state.maintenanceHour : undefined;
            resourceInputs["maintenanceWeekday"] = state ? state.maintenanceWeekday : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["snapshot"] = state ? state.snapshot : undefined;
            resourceInputs["snapshotsRetention"] = state ? state.snapshotsRetention : undefined;
            resourceInputs["snapshotsSchedule"] = state ? state.snapshotsSchedule : undefined;
            resourceInputs["snapshotsScheduleNextAt"] = state ? state.snapshotsScheduleNextAt : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as DatabaseServerArgs | undefined;
            if ((!args || args.allowAccesses === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allowAccesses'");
            }
            resourceInputs["allowAccesses"] = args ? args.allowAccesses : undefined;
            resourceInputs["databaseEngine"] = args ? args.databaseEngine : undefined;
            resourceInputs["databaseType"] = args ? args.databaseType : undefined;
            resourceInputs["databaseVersion"] = args ? args.databaseVersion : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["locked"] = args ? args.locked : undefined;
            resourceInputs["maintenanceHour"] = args ? args.maintenanceHour : undefined;
            resourceInputs["maintenanceWeekday"] = args ? args.maintenanceWeekday : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["snapshot"] = args ? args.snapshot : undefined;
            resourceInputs["snapshotsRetention"] = args ? args.snapshotsRetention : undefined;
            resourceInputs["snapshotsSchedule"] = args ? args.snapshotsSchedule : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["adminPassword"] = undefined /*out*/;
            resourceInputs["adminUsername"] = undefined /*out*/;
            resourceInputs["snapshotsScheduleNextAt"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["adminPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DatabaseServer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatabaseServer resources.
 */
export interface DatabaseServerState {
    /**
     * Initial password required to login, only available at creation or following a password reset request
     */
    adminPassword?: pulumi.Input<string>;
    /**
     * Initial username required to login
     */
    adminUsername?: pulumi.Input<string>;
    /**
     * An array of resources allowed to access the database. Accepted values include `any`, `IPv4 address`, `server
     * identifier`, `server group identifier`
     */
    allowAccesses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The DBMS engine of the Database Server
     */
    databaseEngine?: pulumi.Input<string>;
    /**
     * ID of the database type to use
     */
    databaseType?: pulumi.Input<string>;
    /**
     * The version of the given engine in use
     */
    databaseVersion?: pulumi.Input<string>;
    /**
     * Editable user label
     */
    description?: pulumi.Input<string>;
    /**
     * Initial password required to login, only available at creation or following a password reset request
     */
    locked?: pulumi.Input<boolean>;
    /**
     * Number representing 24hr time start of maintenance window hour for x:00-x:59 (0-23)
     */
    maintenanceHour?: pulumi.Input<number>;
    /**
     * Numerical index of weekday (0 is Sunday, 1 is Monday...) to set when automatic updates may be performed
     */
    maintenanceWeekday?: pulumi.Input<number>;
    /**
     * Editable user label
     */
    name?: pulumi.Input<string>;
    /**
     * Identifier for an SQL snapshot to use as the basis of the new instance. Creates and restores the database from the
     * snapshot
     */
    snapshot?: pulumi.Input<string>;
    /**
     * Keep this number of scheduled snapshots. Keep all if unset
     */
    snapshotsRetention?: pulumi.Input<string>;
    /**
     * Crontab pattern for scheduled snapshots. Must be at least hourly
     */
    snapshotsSchedule?: pulumi.Input<string>;
    /**
     * time in UTC when next approximate scheduled snapshot will be run
     */
    snapshotsScheduleNextAt?: pulumi.Input<string>;
    /**
     * State the database server is in
     */
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabaseServerTimeouts>;
    /**
     * ID of the zone the database server is in
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DatabaseServer resource.
 */
export interface DatabaseServerArgs {
    /**
     * An array of resources allowed to access the database. Accepted values include `any`, `IPv4 address`, `server
     * identifier`, `server group identifier`
     */
    allowAccesses: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The DBMS engine of the Database Server
     */
    databaseEngine?: pulumi.Input<string>;
    /**
     * ID of the database type to use
     */
    databaseType?: pulumi.Input<string>;
    /**
     * The version of the given engine in use
     */
    databaseVersion?: pulumi.Input<string>;
    /**
     * Editable user label
     */
    description?: pulumi.Input<string>;
    /**
     * Initial password required to login, only available at creation or following a password reset request
     */
    locked?: pulumi.Input<boolean>;
    /**
     * Number representing 24hr time start of maintenance window hour for x:00-x:59 (0-23)
     */
    maintenanceHour?: pulumi.Input<number>;
    /**
     * Numerical index of weekday (0 is Sunday, 1 is Monday...) to set when automatic updates may be performed
     */
    maintenanceWeekday?: pulumi.Input<number>;
    /**
     * Editable user label
     */
    name?: pulumi.Input<string>;
    /**
     * Identifier for an SQL snapshot to use as the basis of the new instance. Creates and restores the database from the
     * snapshot
     */
    snapshot?: pulumi.Input<string>;
    /**
     * Keep this number of scheduled snapshots. Keep all if unset
     */
    snapshotsRetention?: pulumi.Input<string>;
    /**
     * Crontab pattern for scheduled snapshots. Must be at least hourly
     */
    snapshotsSchedule?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatabaseServerTimeouts>;
    /**
     * ID of the zone the database server is in
     */
    zone?: pulumi.Input<string>;
}
