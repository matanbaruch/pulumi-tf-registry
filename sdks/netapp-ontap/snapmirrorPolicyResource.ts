// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SnapmirrorPolicyResource extends pulumi.CustomResource {
    /**
     * Get an existing SnapmirrorPolicyResource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnapmirrorPolicyResourceState, opts?: pulumi.CustomResourceOptions): SnapmirrorPolicyResource {
        return new SnapmirrorPolicyResource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netapp-ontap:index/snapmirrorPolicyResource:SnapmirrorPolicyResource';

    /**
     * Returns true if the given object is an instance of SnapmirrorPolicyResource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SnapmirrorPolicyResource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SnapmirrorPolicyResource.__pulumiType;
    }

    /**
     * Comment associated with the policy.
     */
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * Specifies that all the source Snapshot copies (including the one created by SnapMirror before the transfer begins)
     * should be copied to the destination on a transfer.
     */
    public readonly copyAllSourceSnapshots!: pulumi.Output<boolean>;
    /**
     * Specifies that the latest source Snapshot copy (created by SnapMirror before the transfer begins) should be copied to
     * the destination on a transfer. 'Retention' properties cannot be specified along with this property. This is applicable
     * only to async policies. Property can only be set to 'true'.
     */
    public readonly copyLatestSourceSnapshot!: pulumi.Output<boolean>;
    /**
     * Specifies that all the source Snapshot copies (including the one created by SnapMirror before the transfer begins)
     * should be copied to the destination on a transfer.
     */
    public readonly createSnapshotOnSource!: pulumi.Output<boolean>;
    /**
     * Connection profile name
     */
    public readonly cxProfileName!: pulumi.Output<string>;
    /**
     * Specifies which configuration of the source SVM is replicated to the destination SVM.
     */
    public readonly identityPreservation!: pulumi.Output<string | undefined>;
    /**
     * SnapmirrorPolicy name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies whether network compression is enabled for transfers
     */
    public readonly networkCompressionEnabled!: pulumi.Output<boolean>;
    /**
     * Rules for Snapshot copy retention.
     */
    public readonly retentions!: pulumi.Output<outputs.SnapmirrorPolicyResourceRetention[] | undefined>;
    /**
     * SnapmirrorPolicy svm name
     */
    public readonly svmName!: pulumi.Output<string>;
    /**
     * SnapmirrorPolicy sync type. [sync, strict_sync, automated_failover]
     */
    public readonly syncType!: pulumi.Output<string | undefined>;
    /**
     * The schedule used to update asynchronous relationships
     */
    public readonly transferScheduleName!: pulumi.Output<string | undefined>;
    /**
     * SnapmirrorPolicy type. [async, sync, continuous]
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a SnapmirrorPolicyResource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SnapmirrorPolicyResourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnapmirrorPolicyResourceArgs | SnapmirrorPolicyResourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnapmirrorPolicyResourceState | undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["copyAllSourceSnapshots"] = state ? state.copyAllSourceSnapshots : undefined;
            resourceInputs["copyLatestSourceSnapshot"] = state ? state.copyLatestSourceSnapshot : undefined;
            resourceInputs["createSnapshotOnSource"] = state ? state.createSnapshotOnSource : undefined;
            resourceInputs["cxProfileName"] = state ? state.cxProfileName : undefined;
            resourceInputs["identityPreservation"] = state ? state.identityPreservation : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkCompressionEnabled"] = state ? state.networkCompressionEnabled : undefined;
            resourceInputs["retentions"] = state ? state.retentions : undefined;
            resourceInputs["svmName"] = state ? state.svmName : undefined;
            resourceInputs["syncType"] = state ? state.syncType : undefined;
            resourceInputs["transferScheduleName"] = state ? state.transferScheduleName : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as SnapmirrorPolicyResourceArgs | undefined;
            if ((!args || args.cxProfileName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cxProfileName'");
            }
            if ((!args || args.svmName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'svmName'");
            }
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["copyAllSourceSnapshots"] = args ? args.copyAllSourceSnapshots : undefined;
            resourceInputs["copyLatestSourceSnapshot"] = args ? args.copyLatestSourceSnapshot : undefined;
            resourceInputs["createSnapshotOnSource"] = args ? args.createSnapshotOnSource : undefined;
            resourceInputs["cxProfileName"] = args ? args.cxProfileName : undefined;
            resourceInputs["identityPreservation"] = args ? args.identityPreservation : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkCompressionEnabled"] = args ? args.networkCompressionEnabled : undefined;
            resourceInputs["retentions"] = args ? args.retentions : undefined;
            resourceInputs["svmName"] = args ? args.svmName : undefined;
            resourceInputs["syncType"] = args ? args.syncType : undefined;
            resourceInputs["transferScheduleName"] = args ? args.transferScheduleName : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SnapmirrorPolicyResource.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SnapmirrorPolicyResource resources.
 */
export interface SnapmirrorPolicyResourceState {
    /**
     * Comment associated with the policy.
     */
    comment?: pulumi.Input<string>;
    /**
     * Specifies that all the source Snapshot copies (including the one created by SnapMirror before the transfer begins)
     * should be copied to the destination on a transfer.
     */
    copyAllSourceSnapshots?: pulumi.Input<boolean>;
    /**
     * Specifies that the latest source Snapshot copy (created by SnapMirror before the transfer begins) should be copied to
     * the destination on a transfer. 'Retention' properties cannot be specified along with this property. This is applicable
     * only to async policies. Property can only be set to 'true'.
     */
    copyLatestSourceSnapshot?: pulumi.Input<boolean>;
    /**
     * Specifies that all the source Snapshot copies (including the one created by SnapMirror before the transfer begins)
     * should be copied to the destination on a transfer.
     */
    createSnapshotOnSource?: pulumi.Input<boolean>;
    /**
     * Connection profile name
     */
    cxProfileName?: pulumi.Input<string>;
    /**
     * Specifies which configuration of the source SVM is replicated to the destination SVM.
     */
    identityPreservation?: pulumi.Input<string>;
    /**
     * SnapmirrorPolicy name
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies whether network compression is enabled for transfers
     */
    networkCompressionEnabled?: pulumi.Input<boolean>;
    /**
     * Rules for Snapshot copy retention.
     */
    retentions?: pulumi.Input<pulumi.Input<inputs.SnapmirrorPolicyResourceRetention>[]>;
    /**
     * SnapmirrorPolicy svm name
     */
    svmName?: pulumi.Input<string>;
    /**
     * SnapmirrorPolicy sync type. [sync, strict_sync, automated_failover]
     */
    syncType?: pulumi.Input<string>;
    /**
     * The schedule used to update asynchronous relationships
     */
    transferScheduleName?: pulumi.Input<string>;
    /**
     * SnapmirrorPolicy type. [async, sync, continuous]
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SnapmirrorPolicyResource resource.
 */
export interface SnapmirrorPolicyResourceArgs {
    /**
     * Comment associated with the policy.
     */
    comment?: pulumi.Input<string>;
    /**
     * Specifies that all the source Snapshot copies (including the one created by SnapMirror before the transfer begins)
     * should be copied to the destination on a transfer.
     */
    copyAllSourceSnapshots?: pulumi.Input<boolean>;
    /**
     * Specifies that the latest source Snapshot copy (created by SnapMirror before the transfer begins) should be copied to
     * the destination on a transfer. 'Retention' properties cannot be specified along with this property. This is applicable
     * only to async policies. Property can only be set to 'true'.
     */
    copyLatestSourceSnapshot?: pulumi.Input<boolean>;
    /**
     * Specifies that all the source Snapshot copies (including the one created by SnapMirror before the transfer begins)
     * should be copied to the destination on a transfer.
     */
    createSnapshotOnSource?: pulumi.Input<boolean>;
    /**
     * Connection profile name
     */
    cxProfileName: pulumi.Input<string>;
    /**
     * Specifies which configuration of the source SVM is replicated to the destination SVM.
     */
    identityPreservation?: pulumi.Input<string>;
    /**
     * SnapmirrorPolicy name
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies whether network compression is enabled for transfers
     */
    networkCompressionEnabled?: pulumi.Input<boolean>;
    /**
     * Rules for Snapshot copy retention.
     */
    retentions?: pulumi.Input<pulumi.Input<inputs.SnapmirrorPolicyResourceRetention>[]>;
    /**
     * SnapmirrorPolicy svm name
     */
    svmName: pulumi.Input<string>;
    /**
     * SnapmirrorPolicy sync type. [sync, strict_sync, automated_failover]
     */
    syncType?: pulumi.Input<string>;
    /**
     * The schedule used to update asynchronous relationships
     */
    transferScheduleName?: pulumi.Input<string>;
    /**
     * SnapmirrorPolicy type. [async, sync, continuous]
     */
    type?: pulumi.Input<string>;
}
