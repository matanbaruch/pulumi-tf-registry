// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class StorageAggregateResource extends pulumi.CustomResource {
    /**
     * Get an existing StorageAggregateResource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StorageAggregateResourceState, opts?: pulumi.CustomResourceOptions): StorageAggregateResource {
        return new StorageAggregateResource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netapp-ontap:index/storageAggregateResource:StorageAggregateResource';

    /**
     * Returns true if the given object is an instance of StorageAggregateResource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StorageAggregateResource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StorageAggregateResource.__pulumiType;
    }

    /**
     * Connection profile name
     */
    public readonly cxProfileName!: pulumi.Output<string>;
    /**
     * Class of disk to use to build aggregate. capacity_flash is listed in swagger, but rejected as invalid by ONTAP.
     */
    public readonly diskClass!: pulumi.Output<string>;
    /**
     * Number of disks to place into the aggregate, including parity disks. The disks in this newly-created aggregate come from
     * the spare disk pool. The smallest disks in this pool join the aggregate first, unless the disk_size argument is
     * provided. Modifiable only if specified disk_count is larger than current disk_count. If the disk_count % raid_size == 1,
     * only disk_count/raid_size * raid_size will be added. If disk_count is 6, raid_type is raid4, raid_size 4, all 6 disks
     * will be added. If disk_count is 5, raid_type is raid4, raid_size 4, 5/4 * 4 = 4 will be added. 1 will not be added.
     */
    public readonly diskCount!: pulumi.Output<number>;
    /**
     * Disk size to use in 4K block size. Disks within 10 precent of specified size will be used.
     */
    public readonly diskSize!: pulumi.Output<number | undefined>;
    /**
     * Disk size to use in the specified unit. This is converted to bytes, assuming K=1024.
     */
    public readonly diskSizeUnit!: pulumi.Output<string | undefined>;
    /**
     * Whether to enable software encryption. This is equivalent to -encrypt-with-aggr-key when using the CLI.Requires a VE
     * license.
     */
    public readonly encryption!: pulumi.Output<boolean>;
    /**
     * Specifies that the new aggregate be mirrored (have two plexes). If set to true, then the indicated disks will be split
     * across the two plexes. By default, the new aggregate will not be mirrored.
     */
    public readonly isMirrored!: pulumi.Output<boolean>;
    /**
     * The name of the aggregate to manage
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Node for the aggregate to be created on. If no node specified, mgmt lif home will be used. If disk_count is present,
     * node name is required.
     */
    public readonly node!: pulumi.Output<string>;
    /**
     * Sets the maximum number of drives per raid group.
     */
    public readonly raidSize!: pulumi.Output<number>;
    public readonly raidType!: pulumi.Output<string>;
    /**
     * Type of snaplock for the aggregate being created.
     */
    public readonly snaplockType!: pulumi.Output<string>;
    /**
     * Whether the specified aggregate should be enabled or disabled.
     */
    public readonly state!: pulumi.Output<string>;

    /**
     * Create a StorageAggregateResource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StorageAggregateResourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StorageAggregateResourceArgs | StorageAggregateResourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StorageAggregateResourceState | undefined;
            resourceInputs["cxProfileName"] = state ? state.cxProfileName : undefined;
            resourceInputs["diskClass"] = state ? state.diskClass : undefined;
            resourceInputs["diskCount"] = state ? state.diskCount : undefined;
            resourceInputs["diskSize"] = state ? state.diskSize : undefined;
            resourceInputs["diskSizeUnit"] = state ? state.diskSizeUnit : undefined;
            resourceInputs["encryption"] = state ? state.encryption : undefined;
            resourceInputs["isMirrored"] = state ? state.isMirrored : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["node"] = state ? state.node : undefined;
            resourceInputs["raidSize"] = state ? state.raidSize : undefined;
            resourceInputs["raidType"] = state ? state.raidType : undefined;
            resourceInputs["snaplockType"] = state ? state.snaplockType : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
        } else {
            const args = argsOrState as StorageAggregateResourceArgs | undefined;
            if ((!args || args.cxProfileName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cxProfileName'");
            }
            if ((!args || args.diskCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'diskCount'");
            }
            if ((!args || args.node === undefined) && !opts.urn) {
                throw new Error("Missing required property 'node'");
            }
            resourceInputs["cxProfileName"] = args ? args.cxProfileName : undefined;
            resourceInputs["diskClass"] = args ? args.diskClass : undefined;
            resourceInputs["diskCount"] = args ? args.diskCount : undefined;
            resourceInputs["diskSize"] = args ? args.diskSize : undefined;
            resourceInputs["diskSizeUnit"] = args ? args.diskSizeUnit : undefined;
            resourceInputs["encryption"] = args ? args.encryption : undefined;
            resourceInputs["isMirrored"] = args ? args.isMirrored : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["node"] = args ? args.node : undefined;
            resourceInputs["raidSize"] = args ? args.raidSize : undefined;
            resourceInputs["raidType"] = args ? args.raidType : undefined;
            resourceInputs["snaplockType"] = args ? args.snaplockType : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StorageAggregateResource.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StorageAggregateResource resources.
 */
export interface StorageAggregateResourceState {
    /**
     * Connection profile name
     */
    cxProfileName?: pulumi.Input<string>;
    /**
     * Class of disk to use to build aggregate. capacity_flash is listed in swagger, but rejected as invalid by ONTAP.
     */
    diskClass?: pulumi.Input<string>;
    /**
     * Number of disks to place into the aggregate, including parity disks. The disks in this newly-created aggregate come from
     * the spare disk pool. The smallest disks in this pool join the aggregate first, unless the disk_size argument is
     * provided. Modifiable only if specified disk_count is larger than current disk_count. If the disk_count % raid_size == 1,
     * only disk_count/raid_size * raid_size will be added. If disk_count is 6, raid_type is raid4, raid_size 4, all 6 disks
     * will be added. If disk_count is 5, raid_type is raid4, raid_size 4, 5/4 * 4 = 4 will be added. 1 will not be added.
     */
    diskCount?: pulumi.Input<number>;
    /**
     * Disk size to use in 4K block size. Disks within 10 precent of specified size will be used.
     */
    diskSize?: pulumi.Input<number>;
    /**
     * Disk size to use in the specified unit. This is converted to bytes, assuming K=1024.
     */
    diskSizeUnit?: pulumi.Input<string>;
    /**
     * Whether to enable software encryption. This is equivalent to -encrypt-with-aggr-key when using the CLI.Requires a VE
     * license.
     */
    encryption?: pulumi.Input<boolean>;
    /**
     * Specifies that the new aggregate be mirrored (have two plexes). If set to true, then the indicated disks will be split
     * across the two plexes. By default, the new aggregate will not be mirrored.
     */
    isMirrored?: pulumi.Input<boolean>;
    /**
     * The name of the aggregate to manage
     */
    name?: pulumi.Input<string>;
    /**
     * Node for the aggregate to be created on. If no node specified, mgmt lif home will be used. If disk_count is present,
     * node name is required.
     */
    node?: pulumi.Input<string>;
    /**
     * Sets the maximum number of drives per raid group.
     */
    raidSize?: pulumi.Input<number>;
    raidType?: pulumi.Input<string>;
    /**
     * Type of snaplock for the aggregate being created.
     */
    snaplockType?: pulumi.Input<string>;
    /**
     * Whether the specified aggregate should be enabled or disabled.
     */
    state?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StorageAggregateResource resource.
 */
export interface StorageAggregateResourceArgs {
    /**
     * Connection profile name
     */
    cxProfileName: pulumi.Input<string>;
    /**
     * Class of disk to use to build aggregate. capacity_flash is listed in swagger, but rejected as invalid by ONTAP.
     */
    diskClass?: pulumi.Input<string>;
    /**
     * Number of disks to place into the aggregate, including parity disks. The disks in this newly-created aggregate come from
     * the spare disk pool. The smallest disks in this pool join the aggregate first, unless the disk_size argument is
     * provided. Modifiable only if specified disk_count is larger than current disk_count. If the disk_count % raid_size == 1,
     * only disk_count/raid_size * raid_size will be added. If disk_count is 6, raid_type is raid4, raid_size 4, all 6 disks
     * will be added. If disk_count is 5, raid_type is raid4, raid_size 4, 5/4 * 4 = 4 will be added. 1 will not be added.
     */
    diskCount: pulumi.Input<number>;
    /**
     * Disk size to use in 4K block size. Disks within 10 precent of specified size will be used.
     */
    diskSize?: pulumi.Input<number>;
    /**
     * Disk size to use in the specified unit. This is converted to bytes, assuming K=1024.
     */
    diskSizeUnit?: pulumi.Input<string>;
    /**
     * Whether to enable software encryption. This is equivalent to -encrypt-with-aggr-key when using the CLI.Requires a VE
     * license.
     */
    encryption?: pulumi.Input<boolean>;
    /**
     * Specifies that the new aggregate be mirrored (have two plexes). If set to true, then the indicated disks will be split
     * across the two plexes. By default, the new aggregate will not be mirrored.
     */
    isMirrored?: pulumi.Input<boolean>;
    /**
     * The name of the aggregate to manage
     */
    name?: pulumi.Input<string>;
    /**
     * Node for the aggregate to be created on. If no node specified, mgmt lif home will be used. If disk_count is present,
     * node name is required.
     */
    node: pulumi.Input<string>;
    /**
     * Sets the maximum number of drives per raid group.
     */
    raidSize?: pulumi.Input<number>;
    raidType?: pulumi.Input<string>;
    /**
     * Type of snaplock for the aggregate being created.
     */
    snaplockType?: pulumi.Input<string>;
    /**
     * Whether the specified aggregate should be enabled or disabled.
     */
    state?: pulumi.Input<string>;
}
