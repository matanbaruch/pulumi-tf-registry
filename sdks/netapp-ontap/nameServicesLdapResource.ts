// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class NameServicesLdapResource extends pulumi.CustomResource {
    /**
     * Get an existing NameServicesLdapResource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NameServicesLdapResourceState, opts?: pulumi.CustomResourceOptions): NameServicesLdapResource {
        return new NameServicesLdapResource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netapp-ontap:index/nameServicesLdapResource:NameServicesLdapResource';

    /**
     * Returns true if the given object is an instance of NameServicesLdapResource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NameServicesLdapResource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NameServicesLdapResource.__pulumiType;
    }

    /**
     * Specifies the name of the Active Directory domain used to discover LDAP servers for use by this client
     */
    public readonly adDomain!: pulumi.Output<string | undefined>;
    /**
     * Specifies the default base DN for all searches
     */
    public readonly baseDn!: pulumi.Output<string>;
    /**
     * Specifies the default search scope for LDAP queries
     */
    public readonly baseScope!: pulumi.Output<string>;
    /**
     * Specifies whether or not CIFS server's credentials are used to bind to the LDAP server (9.9)
     */
    public readonly bindAsCifsServer!: pulumi.Output<boolean>;
    /**
     * Specifies the user that binds to the LDAP servers
     */
    public readonly bindDn!: pulumi.Output<string | undefined>;
    /**
     * Specifies the bind password for the LDAP servers
     */
    public readonly bindPassword!: pulumi.Output<string | undefined>;
    /**
     * Connection profile name
     */
    public readonly cxProfileName!: pulumi.Output<string>;
    /**
     * Specifies whether or not LDAPS is enabled (9.9)
     */
    public readonly ldapsEnabled!: pulumi.Output<boolean>;
    /**
     * The minimum bind authentication level
     */
    public readonly minBindLevel!: pulumi.Output<string>;
    /**
     * The port used to connect to the LDAP Servers
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * This parameter specifies a list of LDAP servers preferred over discovered servers
     */
    public readonly preferredAdServers!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies the timeout for LDAP queries in seconds (9.9)
     */
    public readonly queryTimeout!: pulumi.Output<number>;
    /**
     * Specifies whether or not LDAP referral is enabled (9.9)
     */
    public readonly referralEnabled!: pulumi.Output<boolean>;
    /**
     * The name of the schema template used by the SVM
     */
    public readonly schema!: pulumi.Output<string>;
    /**
     * List of LDAP servers used for this client configuration
     */
    public readonly servers!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies the level of security to be used for LDAP communications
     */
    public readonly sessionSecurity!: pulumi.Output<string>;
    /**
     * Specifies whether or not to skip the validation of the LDAP configuration (9.9)
     */
    public readonly skipConfigValidation!: pulumi.Output<boolean | undefined>;
    /**
     * NameServicesLDAP svm name
     */
    public readonly svmName!: pulumi.Output<string>;
    /**
     * Specifies whether or not to use Start TLS over LDAP connections
     */
    public readonly useStartTls!: pulumi.Output<boolean>;

    /**
     * Create a NameServicesLdapResource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NameServicesLdapResourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NameServicesLdapResourceArgs | NameServicesLdapResourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NameServicesLdapResourceState | undefined;
            resourceInputs["adDomain"] = state ? state.adDomain : undefined;
            resourceInputs["baseDn"] = state ? state.baseDn : undefined;
            resourceInputs["baseScope"] = state ? state.baseScope : undefined;
            resourceInputs["bindAsCifsServer"] = state ? state.bindAsCifsServer : undefined;
            resourceInputs["bindDn"] = state ? state.bindDn : undefined;
            resourceInputs["bindPassword"] = state ? state.bindPassword : undefined;
            resourceInputs["cxProfileName"] = state ? state.cxProfileName : undefined;
            resourceInputs["ldapsEnabled"] = state ? state.ldapsEnabled : undefined;
            resourceInputs["minBindLevel"] = state ? state.minBindLevel : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["preferredAdServers"] = state ? state.preferredAdServers : undefined;
            resourceInputs["queryTimeout"] = state ? state.queryTimeout : undefined;
            resourceInputs["referralEnabled"] = state ? state.referralEnabled : undefined;
            resourceInputs["schema"] = state ? state.schema : undefined;
            resourceInputs["servers"] = state ? state.servers : undefined;
            resourceInputs["sessionSecurity"] = state ? state.sessionSecurity : undefined;
            resourceInputs["skipConfigValidation"] = state ? state.skipConfigValidation : undefined;
            resourceInputs["svmName"] = state ? state.svmName : undefined;
            resourceInputs["useStartTls"] = state ? state.useStartTls : undefined;
        } else {
            const args = argsOrState as NameServicesLdapResourceArgs | undefined;
            if ((!args || args.cxProfileName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cxProfileName'");
            }
            if ((!args || args.svmName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'svmName'");
            }
            resourceInputs["adDomain"] = args ? args.adDomain : undefined;
            resourceInputs["baseDn"] = args ? args.baseDn : undefined;
            resourceInputs["baseScope"] = args ? args.baseScope : undefined;
            resourceInputs["bindAsCifsServer"] = args ? args.bindAsCifsServer : undefined;
            resourceInputs["bindDn"] = args ? args.bindDn : undefined;
            resourceInputs["bindPassword"] = args?.bindPassword ? pulumi.secret(args.bindPassword) : undefined;
            resourceInputs["cxProfileName"] = args ? args.cxProfileName : undefined;
            resourceInputs["ldapsEnabled"] = args ? args.ldapsEnabled : undefined;
            resourceInputs["minBindLevel"] = args ? args.minBindLevel : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["preferredAdServers"] = args ? args.preferredAdServers : undefined;
            resourceInputs["queryTimeout"] = args ? args.queryTimeout : undefined;
            resourceInputs["referralEnabled"] = args ? args.referralEnabled : undefined;
            resourceInputs["schema"] = args ? args.schema : undefined;
            resourceInputs["servers"] = args ? args.servers : undefined;
            resourceInputs["sessionSecurity"] = args ? args.sessionSecurity : undefined;
            resourceInputs["skipConfigValidation"] = args ? args.skipConfigValidation : undefined;
            resourceInputs["svmName"] = args ? args.svmName : undefined;
            resourceInputs["useStartTls"] = args ? args.useStartTls : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["bindPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(NameServicesLdapResource.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NameServicesLdapResource resources.
 */
export interface NameServicesLdapResourceState {
    /**
     * Specifies the name of the Active Directory domain used to discover LDAP servers for use by this client
     */
    adDomain?: pulumi.Input<string>;
    /**
     * Specifies the default base DN for all searches
     */
    baseDn?: pulumi.Input<string>;
    /**
     * Specifies the default search scope for LDAP queries
     */
    baseScope?: pulumi.Input<string>;
    /**
     * Specifies whether or not CIFS server's credentials are used to bind to the LDAP server (9.9)
     */
    bindAsCifsServer?: pulumi.Input<boolean>;
    /**
     * Specifies the user that binds to the LDAP servers
     */
    bindDn?: pulumi.Input<string>;
    /**
     * Specifies the bind password for the LDAP servers
     */
    bindPassword?: pulumi.Input<string>;
    /**
     * Connection profile name
     */
    cxProfileName?: pulumi.Input<string>;
    /**
     * Specifies whether or not LDAPS is enabled (9.9)
     */
    ldapsEnabled?: pulumi.Input<boolean>;
    /**
     * The minimum bind authentication level
     */
    minBindLevel?: pulumi.Input<string>;
    /**
     * The port used to connect to the LDAP Servers
     */
    port?: pulumi.Input<number>;
    /**
     * This parameter specifies a list of LDAP servers preferred over discovered servers
     */
    preferredAdServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the timeout for LDAP queries in seconds (9.9)
     */
    queryTimeout?: pulumi.Input<number>;
    /**
     * Specifies whether or not LDAP referral is enabled (9.9)
     */
    referralEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the schema template used by the SVM
     */
    schema?: pulumi.Input<string>;
    /**
     * List of LDAP servers used for this client configuration
     */
    servers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the level of security to be used for LDAP communications
     */
    sessionSecurity?: pulumi.Input<string>;
    /**
     * Specifies whether or not to skip the validation of the LDAP configuration (9.9)
     */
    skipConfigValidation?: pulumi.Input<boolean>;
    /**
     * NameServicesLDAP svm name
     */
    svmName?: pulumi.Input<string>;
    /**
     * Specifies whether or not to use Start TLS over LDAP connections
     */
    useStartTls?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a NameServicesLdapResource resource.
 */
export interface NameServicesLdapResourceArgs {
    /**
     * Specifies the name of the Active Directory domain used to discover LDAP servers for use by this client
     */
    adDomain?: pulumi.Input<string>;
    /**
     * Specifies the default base DN for all searches
     */
    baseDn?: pulumi.Input<string>;
    /**
     * Specifies the default search scope for LDAP queries
     */
    baseScope?: pulumi.Input<string>;
    /**
     * Specifies whether or not CIFS server's credentials are used to bind to the LDAP server (9.9)
     */
    bindAsCifsServer?: pulumi.Input<boolean>;
    /**
     * Specifies the user that binds to the LDAP servers
     */
    bindDn?: pulumi.Input<string>;
    /**
     * Specifies the bind password for the LDAP servers
     */
    bindPassword?: pulumi.Input<string>;
    /**
     * Connection profile name
     */
    cxProfileName: pulumi.Input<string>;
    /**
     * Specifies whether or not LDAPS is enabled (9.9)
     */
    ldapsEnabled?: pulumi.Input<boolean>;
    /**
     * The minimum bind authentication level
     */
    minBindLevel?: pulumi.Input<string>;
    /**
     * The port used to connect to the LDAP Servers
     */
    port?: pulumi.Input<number>;
    /**
     * This parameter specifies a list of LDAP servers preferred over discovered servers
     */
    preferredAdServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the timeout for LDAP queries in seconds (9.9)
     */
    queryTimeout?: pulumi.Input<number>;
    /**
     * Specifies whether or not LDAP referral is enabled (9.9)
     */
    referralEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the schema template used by the SVM
     */
    schema?: pulumi.Input<string>;
    /**
     * List of LDAP servers used for this client configuration
     */
    servers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the level of security to be used for LDAP communications
     */
    sessionSecurity?: pulumi.Input<string>;
    /**
     * Specifies whether or not to skip the validation of the LDAP configuration (9.9)
     */
    skipConfigValidation?: pulumi.Input<boolean>;
    /**
     * NameServicesLDAP svm name
     */
    svmName: pulumi.Input<string>;
    /**
     * Specifies whether or not to use Start TLS over LDAP connections
     */
    useStartTls?: pulumi.Input<boolean>;
}
