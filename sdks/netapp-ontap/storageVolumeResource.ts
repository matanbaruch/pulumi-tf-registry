// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class StorageVolumeResource extends pulumi.CustomResource {
    /**
     * Get an existing StorageVolumeResource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StorageVolumeResourceState, opts?: pulumi.CustomResourceOptions): StorageVolumeResource {
        return new StorageVolumeResource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netapp-ontap:index/storageVolumeResource:StorageVolumeResource';

    /**
     * Returns true if the given object is an instance of StorageVolumeResource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StorageVolumeResource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StorageVolumeResource.__pulumiType;
    }

    /**
     * List of aggregates to place volume on
     */
    public readonly aggregates!: pulumi.Output<outputs.StorageVolumeResourceAggregate[]>;
    public readonly analytics!: pulumi.Output<outputs.StorageVolumeResourceAnalytics>;
    /**
     * Sets a comment associated with the volume
     */
    public readonly comment!: pulumi.Output<string>;
    /**
     * Connection profile name
     */
    public readonly cxProfileName!: pulumi.Output<string>;
    public readonly efficiency!: pulumi.Output<outputs.StorageVolumeResourceEfficiency>;
    /**
     * Whether or not to enable Volume Encryption
     */
    public readonly encryption!: pulumi.Output<boolean>;
    /**
     * Language to use for volume
     */
    public readonly language!: pulumi.Output<string>;
    /**
     * The name of the volume to manage
     */
    public readonly name!: pulumi.Output<string>;
    public readonly nas!: pulumi.Output<outputs.StorageVolumeResourceNas>;
    /**
     * Specifies a QoS policy group to be set on volume
     */
    public readonly qosPolicyGroup!: pulumi.Output<string>;
    public readonly snaplock!: pulumi.Output<outputs.StorageVolumeResourceSnaplock>;
    /**
     * The name of the snapshot policy
     */
    public readonly snapshotPolicy!: pulumi.Output<string>;
    public readonly space!: pulumi.Output<outputs.StorageVolumeResourceSpace>;
    /**
     * Space guarantee style for the volume
     */
    public readonly spaceGuarantee!: pulumi.Output<string>;
    /**
     * Whether the specified volume is online, or not
     */
    public readonly state!: pulumi.Output<string>;
    /**
     * Name of the svm to use
     */
    public readonly svmName!: pulumi.Output<string>;
    public readonly tiering!: pulumi.Output<outputs.StorageVolumeResourceTiering>;
    /**
     * The volume type, either read-write (RW) or data-protection (DP)
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a StorageVolumeResource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StorageVolumeResourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StorageVolumeResourceArgs | StorageVolumeResourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StorageVolumeResourceState | undefined;
            resourceInputs["aggregates"] = state ? state.aggregates : undefined;
            resourceInputs["analytics"] = state ? state.analytics : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["cxProfileName"] = state ? state.cxProfileName : undefined;
            resourceInputs["efficiency"] = state ? state.efficiency : undefined;
            resourceInputs["encryption"] = state ? state.encryption : undefined;
            resourceInputs["language"] = state ? state.language : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nas"] = state ? state.nas : undefined;
            resourceInputs["qosPolicyGroup"] = state ? state.qosPolicyGroup : undefined;
            resourceInputs["snaplock"] = state ? state.snaplock : undefined;
            resourceInputs["snapshotPolicy"] = state ? state.snapshotPolicy : undefined;
            resourceInputs["space"] = state ? state.space : undefined;
            resourceInputs["spaceGuarantee"] = state ? state.spaceGuarantee : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["svmName"] = state ? state.svmName : undefined;
            resourceInputs["tiering"] = state ? state.tiering : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as StorageVolumeResourceArgs | undefined;
            if ((!args || args.aggregates === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aggregates'");
            }
            if ((!args || args.cxProfileName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cxProfileName'");
            }
            if ((!args || args.space === undefined) && !opts.urn) {
                throw new Error("Missing required property 'space'");
            }
            if ((!args || args.svmName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'svmName'");
            }
            resourceInputs["aggregates"] = args ? args.aggregates : undefined;
            resourceInputs["analytics"] = args ? args.analytics : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["cxProfileName"] = args ? args.cxProfileName : undefined;
            resourceInputs["efficiency"] = args ? args.efficiency : undefined;
            resourceInputs["encryption"] = args ? args.encryption : undefined;
            resourceInputs["language"] = args ? args.language : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nas"] = args ? args.nas : undefined;
            resourceInputs["qosPolicyGroup"] = args ? args.qosPolicyGroup : undefined;
            resourceInputs["snaplock"] = args ? args.snaplock : undefined;
            resourceInputs["snapshotPolicy"] = args ? args.snapshotPolicy : undefined;
            resourceInputs["space"] = args ? args.space : undefined;
            resourceInputs["spaceGuarantee"] = args ? args.spaceGuarantee : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["svmName"] = args ? args.svmName : undefined;
            resourceInputs["tiering"] = args ? args.tiering : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StorageVolumeResource.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StorageVolumeResource resources.
 */
export interface StorageVolumeResourceState {
    /**
     * List of aggregates to place volume on
     */
    aggregates?: pulumi.Input<pulumi.Input<inputs.StorageVolumeResourceAggregate>[]>;
    analytics?: pulumi.Input<inputs.StorageVolumeResourceAnalytics>;
    /**
     * Sets a comment associated with the volume
     */
    comment?: pulumi.Input<string>;
    /**
     * Connection profile name
     */
    cxProfileName?: pulumi.Input<string>;
    efficiency?: pulumi.Input<inputs.StorageVolumeResourceEfficiency>;
    /**
     * Whether or not to enable Volume Encryption
     */
    encryption?: pulumi.Input<boolean>;
    /**
     * Language to use for volume
     */
    language?: pulumi.Input<string>;
    /**
     * The name of the volume to manage
     */
    name?: pulumi.Input<string>;
    nas?: pulumi.Input<inputs.StorageVolumeResourceNas>;
    /**
     * Specifies a QoS policy group to be set on volume
     */
    qosPolicyGroup?: pulumi.Input<string>;
    snaplock?: pulumi.Input<inputs.StorageVolumeResourceSnaplock>;
    /**
     * The name of the snapshot policy
     */
    snapshotPolicy?: pulumi.Input<string>;
    space?: pulumi.Input<inputs.StorageVolumeResourceSpace>;
    /**
     * Space guarantee style for the volume
     */
    spaceGuarantee?: pulumi.Input<string>;
    /**
     * Whether the specified volume is online, or not
     */
    state?: pulumi.Input<string>;
    /**
     * Name of the svm to use
     */
    svmName?: pulumi.Input<string>;
    tiering?: pulumi.Input<inputs.StorageVolumeResourceTiering>;
    /**
     * The volume type, either read-write (RW) or data-protection (DP)
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StorageVolumeResource resource.
 */
export interface StorageVolumeResourceArgs {
    /**
     * List of aggregates to place volume on
     */
    aggregates: pulumi.Input<pulumi.Input<inputs.StorageVolumeResourceAggregate>[]>;
    analytics?: pulumi.Input<inputs.StorageVolumeResourceAnalytics>;
    /**
     * Sets a comment associated with the volume
     */
    comment?: pulumi.Input<string>;
    /**
     * Connection profile name
     */
    cxProfileName: pulumi.Input<string>;
    efficiency?: pulumi.Input<inputs.StorageVolumeResourceEfficiency>;
    /**
     * Whether or not to enable Volume Encryption
     */
    encryption?: pulumi.Input<boolean>;
    /**
     * Language to use for volume
     */
    language?: pulumi.Input<string>;
    /**
     * The name of the volume to manage
     */
    name?: pulumi.Input<string>;
    nas?: pulumi.Input<inputs.StorageVolumeResourceNas>;
    /**
     * Specifies a QoS policy group to be set on volume
     */
    qosPolicyGroup?: pulumi.Input<string>;
    snaplock?: pulumi.Input<inputs.StorageVolumeResourceSnaplock>;
    /**
     * The name of the snapshot policy
     */
    snapshotPolicy?: pulumi.Input<string>;
    space: pulumi.Input<inputs.StorageVolumeResourceSpace>;
    /**
     * Space guarantee style for the volume
     */
    spaceGuarantee?: pulumi.Input<string>;
    /**
     * Whether the specified volume is online, or not
     */
    state?: pulumi.Input<string>;
    /**
     * Name of the svm to use
     */
    svmName: pulumi.Input<string>;
    tiering?: pulumi.Input<inputs.StorageVolumeResourceTiering>;
    /**
     * The volume type, either read-write (RW) or data-protection (DP)
     */
    type?: pulumi.Input<string>;
}
