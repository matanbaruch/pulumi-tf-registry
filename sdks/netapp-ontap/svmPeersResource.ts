// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SvmPeersResource extends pulumi.CustomResource {
    /**
     * Get an existing SvmPeersResource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SvmPeersResourceState, opts?: pulumi.CustomResourceOptions): SvmPeersResource {
        return new SvmPeersResource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netapp-ontap:index/svmPeersResource:SvmPeersResource';

    /**
     * Returns true if the given object is an instance of SvmPeersResource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SvmPeersResource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SvmPeersResource.__pulumiType;
    }

    /**
     * SVMPeering applications
     */
    public readonly applications!: pulumi.Output<string[]>;
    /**
     * Connection profile name
     */
    public readonly cxProfileName!: pulumi.Output<string>;
    /**
     * Peer details for SVMPeer
     */
    public readonly peer!: pulumi.Output<outputs.SvmPeersResourcePeer>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * SVM details for SVMPeer
     */
    public readonly svm!: pulumi.Output<outputs.SvmPeersResourceSvm>;

    /**
     * Create a SvmPeersResource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SvmPeersResourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SvmPeersResourceArgs | SvmPeersResourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SvmPeersResourceState | undefined;
            resourceInputs["applications"] = state ? state.applications : undefined;
            resourceInputs["cxProfileName"] = state ? state.cxProfileName : undefined;
            resourceInputs["peer"] = state ? state.peer : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["svm"] = state ? state.svm : undefined;
        } else {
            const args = argsOrState as SvmPeersResourceArgs | undefined;
            if ((!args || args.applications === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applications'");
            }
            if ((!args || args.cxProfileName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cxProfileName'");
            }
            if ((!args || args.peer === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peer'");
            }
            if ((!args || args.svm === undefined) && !opts.urn) {
                throw new Error("Missing required property 'svm'");
            }
            resourceInputs["applications"] = args ? args.applications : undefined;
            resourceInputs["cxProfileName"] = args ? args.cxProfileName : undefined;
            resourceInputs["peer"] = args ? args.peer : undefined;
            resourceInputs["svm"] = args ? args.svm : undefined;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SvmPeersResource.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SvmPeersResource resources.
 */
export interface SvmPeersResourceState {
    /**
     * SVMPeering applications
     */
    applications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Connection profile name
     */
    cxProfileName?: pulumi.Input<string>;
    /**
     * Peer details for SVMPeer
     */
    peer?: pulumi.Input<inputs.SvmPeersResourcePeer>;
    state?: pulumi.Input<string>;
    /**
     * SVM details for SVMPeer
     */
    svm?: pulumi.Input<inputs.SvmPeersResourceSvm>;
}

/**
 * The set of arguments for constructing a SvmPeersResource resource.
 */
export interface SvmPeersResourceArgs {
    /**
     * SVMPeering applications
     */
    applications: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Connection profile name
     */
    cxProfileName: pulumi.Input<string>;
    /**
     * Peer details for SVMPeer
     */
    peer: pulumi.Input<inputs.SvmPeersResourcePeer>;
    /**
     * SVM details for SVMPeer
     */
    svm: pulumi.Input<inputs.SvmPeersResourceSvm>;
}
