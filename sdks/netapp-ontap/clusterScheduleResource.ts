// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ClusterScheduleResource extends pulumi.CustomResource {
    /**
     * Get an existing ClusterScheduleResource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterScheduleResourceState, opts?: pulumi.CustomResourceOptions): ClusterScheduleResource {
        return new ClusterScheduleResource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netapp-ontap:index/clusterScheduleResource:ClusterScheduleResource';

    /**
     * Returns true if the given object is an instance of ClusterScheduleResource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClusterScheduleResource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClusterScheduleResource.__pulumiType;
    }

    public readonly cron!: pulumi.Output<outputs.ClusterScheduleResourceCron | undefined>;
    /**
     * Connection profile name
     */
    public readonly cxProfileName!: pulumi.Output<string>;
    /**
     * Cluster schedule interval
     */
    public readonly interval!: pulumi.Output<string | undefined>;
    /**
     * The name of the cluster schedule
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a ClusterScheduleResource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterScheduleResourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterScheduleResourceArgs | ClusterScheduleResourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterScheduleResourceState | undefined;
            resourceInputs["cron"] = state ? state.cron : undefined;
            resourceInputs["cxProfileName"] = state ? state.cxProfileName : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as ClusterScheduleResourceArgs | undefined;
            if ((!args || args.cxProfileName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cxProfileName'");
            }
            resourceInputs["cron"] = args ? args.cron : undefined;
            resourceInputs["cxProfileName"] = args ? args.cxProfileName : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ClusterScheduleResource.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ClusterScheduleResource resources.
 */
export interface ClusterScheduleResourceState {
    cron?: pulumi.Input<inputs.ClusterScheduleResourceCron>;
    /**
     * Connection profile name
     */
    cxProfileName?: pulumi.Input<string>;
    /**
     * Cluster schedule interval
     */
    interval?: pulumi.Input<string>;
    /**
     * The name of the cluster schedule
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ClusterScheduleResource resource.
 */
export interface ClusterScheduleResourceArgs {
    cron?: pulumi.Input<inputs.ClusterScheduleResourceCron>;
    /**
     * Connection profile name
     */
    cxProfileName: pulumi.Input<string>;
    /**
     * Cluster schedule interval
     */
    interval?: pulumi.Input<string>;
    /**
     * The name of the cluster schedule
     */
    name?: pulumi.Input<string>;
}
