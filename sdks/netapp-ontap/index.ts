// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ClusterLicensingLicenseResourceArgs, ClusterLicensingLicenseResourceState } from "./clusterLicensingLicenseResource";
export type ClusterLicensingLicenseResource = import("./clusterLicensingLicenseResource").ClusterLicensingLicenseResource;
export const ClusterLicensingLicenseResource: typeof import("./clusterLicensingLicenseResource").ClusterLicensingLicenseResource = null as any;
utilities.lazyLoad(exports, ["ClusterLicensingLicenseResource"], () => require("./clusterLicensingLicenseResource"));

export { ClusterPeersResourceArgs, ClusterPeersResourceState } from "./clusterPeersResource";
export type ClusterPeersResource = import("./clusterPeersResource").ClusterPeersResource;
export const ClusterPeersResource: typeof import("./clusterPeersResource").ClusterPeersResource = null as any;
utilities.lazyLoad(exports, ["ClusterPeersResource"], () => require("./clusterPeersResource"));

export { ClusterResourceArgs, ClusterResourceState } from "./clusterResource";
export type ClusterResource = import("./clusterResource").ClusterResource;
export const ClusterResource: typeof import("./clusterResource").ClusterResource = null as any;
utilities.lazyLoad(exports, ["ClusterResource"], () => require("./clusterResource"));

export { ClusterScheduleResourceArgs, ClusterScheduleResourceState } from "./clusterScheduleResource";
export type ClusterScheduleResource = import("./clusterScheduleResource").ClusterScheduleResource;
export const ClusterScheduleResource: typeof import("./clusterScheduleResource").ClusterScheduleResource = null as any;
utilities.lazyLoad(exports, ["ClusterScheduleResource"], () => require("./clusterScheduleResource"));

export { ExampleArgs, ExampleState } from "./example";
export type Example = import("./example").Example;
export const Example: typeof import("./example").Example = null as any;
utilities.lazyLoad(exports, ["Example"], () => require("./example"));

export { GetClusterDataSourceArgs, GetClusterDataSourceResult, GetClusterDataSourceOutputArgs } from "./getClusterDataSource";
export const getClusterDataSource: typeof import("./getClusterDataSource").getClusterDataSource = null as any;
export const getClusterDataSourceOutput: typeof import("./getClusterDataSource").getClusterDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getClusterDataSource","getClusterDataSourceOutput"], () => require("./getClusterDataSource"));

export { GetClusterLicensingLicenseDataSourceArgs, GetClusterLicensingLicenseDataSourceResult, GetClusterLicensingLicenseDataSourceOutputArgs } from "./getClusterLicensingLicenseDataSource";
export const getClusterLicensingLicenseDataSource: typeof import("./getClusterLicensingLicenseDataSource").getClusterLicensingLicenseDataSource = null as any;
export const getClusterLicensingLicenseDataSourceOutput: typeof import("./getClusterLicensingLicenseDataSource").getClusterLicensingLicenseDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getClusterLicensingLicenseDataSource","getClusterLicensingLicenseDataSourceOutput"], () => require("./getClusterLicensingLicenseDataSource"));

export { GetClusterLicensingLicensesDataSourceArgs, GetClusterLicensingLicensesDataSourceResult, GetClusterLicensingLicensesDataSourceOutputArgs } from "./getClusterLicensingLicensesDataSource";
export const getClusterLicensingLicensesDataSource: typeof import("./getClusterLicensingLicensesDataSource").getClusterLicensingLicensesDataSource = null as any;
export const getClusterLicensingLicensesDataSourceOutput: typeof import("./getClusterLicensingLicensesDataSource").getClusterLicensingLicensesDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getClusterLicensingLicensesDataSource","getClusterLicensingLicensesDataSourceOutput"], () => require("./getClusterLicensingLicensesDataSource"));

export { GetClusterPeerDataSourceArgs, GetClusterPeerDataSourceResult, GetClusterPeerDataSourceOutputArgs } from "./getClusterPeerDataSource";
export const getClusterPeerDataSource: typeof import("./getClusterPeerDataSource").getClusterPeerDataSource = null as any;
export const getClusterPeerDataSourceOutput: typeof import("./getClusterPeerDataSource").getClusterPeerDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getClusterPeerDataSource","getClusterPeerDataSourceOutput"], () => require("./getClusterPeerDataSource"));

export { GetClusterPeersDataSourceArgs, GetClusterPeersDataSourceResult, GetClusterPeersDataSourceOutputArgs } from "./getClusterPeersDataSource";
export const getClusterPeersDataSource: typeof import("./getClusterPeersDataSource").getClusterPeersDataSource = null as any;
export const getClusterPeersDataSourceOutput: typeof import("./getClusterPeersDataSource").getClusterPeersDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getClusterPeersDataSource","getClusterPeersDataSourceOutput"], () => require("./getClusterPeersDataSource"));

export { GetClusterScheduleDataSourceArgs, GetClusterScheduleDataSourceResult, GetClusterScheduleDataSourceOutputArgs } from "./getClusterScheduleDataSource";
export const getClusterScheduleDataSource: typeof import("./getClusterScheduleDataSource").getClusterScheduleDataSource = null as any;
export const getClusterScheduleDataSourceOutput: typeof import("./getClusterScheduleDataSource").getClusterScheduleDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getClusterScheduleDataSource","getClusterScheduleDataSourceOutput"], () => require("./getClusterScheduleDataSource"));

export { GetClusterSchedulesDataSourceArgs, GetClusterSchedulesDataSourceResult, GetClusterSchedulesDataSourceOutputArgs } from "./getClusterSchedulesDataSource";
export const getClusterSchedulesDataSource: typeof import("./getClusterSchedulesDataSource").getClusterSchedulesDataSource = null as any;
export const getClusterSchedulesDataSourceOutput: typeof import("./getClusterSchedulesDataSource").getClusterSchedulesDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getClusterSchedulesDataSource","getClusterSchedulesDataSourceOutput"], () => require("./getClusterSchedulesDataSource"));

export { GetExampleArgs, GetExampleResult, GetExampleOutputArgs } from "./getExample";
export const getExample: typeof import("./getExample").getExample = null as any;
export const getExampleOutput: typeof import("./getExample").getExampleOutput = null as any;
utilities.lazyLoad(exports, ["getExample","getExampleOutput"], () => require("./getExample"));

export { GetNameServicesDnsDataSourceArgs, GetNameServicesDnsDataSourceResult, GetNameServicesDnsDataSourceOutputArgs } from "./getNameServicesDnsDataSource";
export const getNameServicesDnsDataSource: typeof import("./getNameServicesDnsDataSource").getNameServicesDnsDataSource = null as any;
export const getNameServicesDnsDataSourceOutput: typeof import("./getNameServicesDnsDataSource").getNameServicesDnsDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getNameServicesDnsDataSource","getNameServicesDnsDataSourceOutput"], () => require("./getNameServicesDnsDataSource"));

export { GetNameServicesDnssDataSourceArgs, GetNameServicesDnssDataSourceResult, GetNameServicesDnssDataSourceOutputArgs } from "./getNameServicesDnssDataSource";
export const getNameServicesDnssDataSource: typeof import("./getNameServicesDnssDataSource").getNameServicesDnssDataSource = null as any;
export const getNameServicesDnssDataSourceOutput: typeof import("./getNameServicesDnssDataSource").getNameServicesDnssDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getNameServicesDnssDataSource","getNameServicesDnssDataSourceOutput"], () => require("./getNameServicesDnssDataSource"));

export { GetNameServicesLdapDataSourceArgs, GetNameServicesLdapDataSourceResult, GetNameServicesLdapDataSourceOutputArgs } from "./getNameServicesLdapDataSource";
export const getNameServicesLdapDataSource: typeof import("./getNameServicesLdapDataSource").getNameServicesLdapDataSource = null as any;
export const getNameServicesLdapDataSourceOutput: typeof import("./getNameServicesLdapDataSource").getNameServicesLdapDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getNameServicesLdapDataSource","getNameServicesLdapDataSourceOutput"], () => require("./getNameServicesLdapDataSource"));

export { GetNameServicesLdapsDataSourceArgs, GetNameServicesLdapsDataSourceResult, GetNameServicesLdapsDataSourceOutputArgs } from "./getNameServicesLdapsDataSource";
export const getNameServicesLdapsDataSource: typeof import("./getNameServicesLdapsDataSource").getNameServicesLdapsDataSource = null as any;
export const getNameServicesLdapsDataSourceOutput: typeof import("./getNameServicesLdapsDataSource").getNameServicesLdapsDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getNameServicesLdapsDataSource","getNameServicesLdapsDataSourceOutput"], () => require("./getNameServicesLdapsDataSource"));

export { GetNetworkingIpInterfaceDataSourceArgs, GetNetworkingIpInterfaceDataSourceResult, GetNetworkingIpInterfaceDataSourceOutputArgs } from "./getNetworkingIpInterfaceDataSource";
export const getNetworkingIpInterfaceDataSource: typeof import("./getNetworkingIpInterfaceDataSource").getNetworkingIpInterfaceDataSource = null as any;
export const getNetworkingIpInterfaceDataSourceOutput: typeof import("./getNetworkingIpInterfaceDataSource").getNetworkingIpInterfaceDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkingIpInterfaceDataSource","getNetworkingIpInterfaceDataSourceOutput"], () => require("./getNetworkingIpInterfaceDataSource"));

export { GetNetworkingIpInterfacesDataSourceArgs, GetNetworkingIpInterfacesDataSourceResult, GetNetworkingIpInterfacesDataSourceOutputArgs } from "./getNetworkingIpInterfacesDataSource";
export const getNetworkingIpInterfacesDataSource: typeof import("./getNetworkingIpInterfacesDataSource").getNetworkingIpInterfacesDataSource = null as any;
export const getNetworkingIpInterfacesDataSourceOutput: typeof import("./getNetworkingIpInterfacesDataSource").getNetworkingIpInterfacesDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkingIpInterfacesDataSource","getNetworkingIpInterfacesDataSourceOutput"], () => require("./getNetworkingIpInterfacesDataSource"));

export { GetNetworkingIpRouteDataSourceArgs, GetNetworkingIpRouteDataSourceResult, GetNetworkingIpRouteDataSourceOutputArgs } from "./getNetworkingIpRouteDataSource";
export const getNetworkingIpRouteDataSource: typeof import("./getNetworkingIpRouteDataSource").getNetworkingIpRouteDataSource = null as any;
export const getNetworkingIpRouteDataSourceOutput: typeof import("./getNetworkingIpRouteDataSource").getNetworkingIpRouteDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkingIpRouteDataSource","getNetworkingIpRouteDataSourceOutput"], () => require("./getNetworkingIpRouteDataSource"));

export { GetNetworkingIpRoutesDataSourceArgs, GetNetworkingIpRoutesDataSourceResult, GetNetworkingIpRoutesDataSourceOutputArgs } from "./getNetworkingIpRoutesDataSource";
export const getNetworkingIpRoutesDataSource: typeof import("./getNetworkingIpRoutesDataSource").getNetworkingIpRoutesDataSource = null as any;
export const getNetworkingIpRoutesDataSourceOutput: typeof import("./getNetworkingIpRoutesDataSource").getNetworkingIpRoutesDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkingIpRoutesDataSource","getNetworkingIpRoutesDataSourceOutput"], () => require("./getNetworkingIpRoutesDataSource"));

export { GetProtocolsCifsLocalGroupDataSourceArgs, GetProtocolsCifsLocalGroupDataSourceResult, GetProtocolsCifsLocalGroupDataSourceOutputArgs } from "./getProtocolsCifsLocalGroupDataSource";
export const getProtocolsCifsLocalGroupDataSource: typeof import("./getProtocolsCifsLocalGroupDataSource").getProtocolsCifsLocalGroupDataSource = null as any;
export const getProtocolsCifsLocalGroupDataSourceOutput: typeof import("./getProtocolsCifsLocalGroupDataSource").getProtocolsCifsLocalGroupDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getProtocolsCifsLocalGroupDataSource","getProtocolsCifsLocalGroupDataSourceOutput"], () => require("./getProtocolsCifsLocalGroupDataSource"));

export { GetProtocolsCifsLocalGroupMemberDataSourceArgs, GetProtocolsCifsLocalGroupMemberDataSourceResult, GetProtocolsCifsLocalGroupMemberDataSourceOutputArgs } from "./getProtocolsCifsLocalGroupMemberDataSource";
export const getProtocolsCifsLocalGroupMemberDataSource: typeof import("./getProtocolsCifsLocalGroupMemberDataSource").getProtocolsCifsLocalGroupMemberDataSource = null as any;
export const getProtocolsCifsLocalGroupMemberDataSourceOutput: typeof import("./getProtocolsCifsLocalGroupMemberDataSource").getProtocolsCifsLocalGroupMemberDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getProtocolsCifsLocalGroupMemberDataSource","getProtocolsCifsLocalGroupMemberDataSourceOutput"], () => require("./getProtocolsCifsLocalGroupMemberDataSource"));

export { GetProtocolsCifsLocalGroupMembersDataSourceArgs, GetProtocolsCifsLocalGroupMembersDataSourceResult, GetProtocolsCifsLocalGroupMembersDataSourceOutputArgs } from "./getProtocolsCifsLocalGroupMembersDataSource";
export const getProtocolsCifsLocalGroupMembersDataSource: typeof import("./getProtocolsCifsLocalGroupMembersDataSource").getProtocolsCifsLocalGroupMembersDataSource = null as any;
export const getProtocolsCifsLocalGroupMembersDataSourceOutput: typeof import("./getProtocolsCifsLocalGroupMembersDataSource").getProtocolsCifsLocalGroupMembersDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getProtocolsCifsLocalGroupMembersDataSource","getProtocolsCifsLocalGroupMembersDataSourceOutput"], () => require("./getProtocolsCifsLocalGroupMembersDataSource"));

export { GetProtocolsCifsLocalGroupsDataSourceArgs, GetProtocolsCifsLocalGroupsDataSourceResult, GetProtocolsCifsLocalGroupsDataSourceOutputArgs } from "./getProtocolsCifsLocalGroupsDataSource";
export const getProtocolsCifsLocalGroupsDataSource: typeof import("./getProtocolsCifsLocalGroupsDataSource").getProtocolsCifsLocalGroupsDataSource = null as any;
export const getProtocolsCifsLocalGroupsDataSourceOutput: typeof import("./getProtocolsCifsLocalGroupsDataSource").getProtocolsCifsLocalGroupsDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getProtocolsCifsLocalGroupsDataSource","getProtocolsCifsLocalGroupsDataSourceOutput"], () => require("./getProtocolsCifsLocalGroupsDataSource"));

export { GetProtocolsCifsLocalUserDataSourceArgs, GetProtocolsCifsLocalUserDataSourceResult, GetProtocolsCifsLocalUserDataSourceOutputArgs } from "./getProtocolsCifsLocalUserDataSource";
export const getProtocolsCifsLocalUserDataSource: typeof import("./getProtocolsCifsLocalUserDataSource").getProtocolsCifsLocalUserDataSource = null as any;
export const getProtocolsCifsLocalUserDataSourceOutput: typeof import("./getProtocolsCifsLocalUserDataSource").getProtocolsCifsLocalUserDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getProtocolsCifsLocalUserDataSource","getProtocolsCifsLocalUserDataSourceOutput"], () => require("./getProtocolsCifsLocalUserDataSource"));

export { GetProtocolsCifsLocalUsersDataSourceArgs, GetProtocolsCifsLocalUsersDataSourceResult, GetProtocolsCifsLocalUsersDataSourceOutputArgs } from "./getProtocolsCifsLocalUsersDataSource";
export const getProtocolsCifsLocalUsersDataSource: typeof import("./getProtocolsCifsLocalUsersDataSource").getProtocolsCifsLocalUsersDataSource = null as any;
export const getProtocolsCifsLocalUsersDataSourceOutput: typeof import("./getProtocolsCifsLocalUsersDataSource").getProtocolsCifsLocalUsersDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getProtocolsCifsLocalUsersDataSource","getProtocolsCifsLocalUsersDataSourceOutput"], () => require("./getProtocolsCifsLocalUsersDataSource"));

export { GetProtocolsCifsServiceDataSourceArgs, GetProtocolsCifsServiceDataSourceResult, GetProtocolsCifsServiceDataSourceOutputArgs } from "./getProtocolsCifsServiceDataSource";
export const getProtocolsCifsServiceDataSource: typeof import("./getProtocolsCifsServiceDataSource").getProtocolsCifsServiceDataSource = null as any;
export const getProtocolsCifsServiceDataSourceOutput: typeof import("./getProtocolsCifsServiceDataSource").getProtocolsCifsServiceDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getProtocolsCifsServiceDataSource","getProtocolsCifsServiceDataSourceOutput"], () => require("./getProtocolsCifsServiceDataSource"));

export { GetProtocolsCifsServicesDataSourceArgs, GetProtocolsCifsServicesDataSourceResult, GetProtocolsCifsServicesDataSourceOutputArgs } from "./getProtocolsCifsServicesDataSource";
export const getProtocolsCifsServicesDataSource: typeof import("./getProtocolsCifsServicesDataSource").getProtocolsCifsServicesDataSource = null as any;
export const getProtocolsCifsServicesDataSourceOutput: typeof import("./getProtocolsCifsServicesDataSource").getProtocolsCifsServicesDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getProtocolsCifsServicesDataSource","getProtocolsCifsServicesDataSourceOutput"], () => require("./getProtocolsCifsServicesDataSource"));

export { GetProtocolsCifsShareDataSourceArgs, GetProtocolsCifsShareDataSourceResult, GetProtocolsCifsShareDataSourceOutputArgs } from "./getProtocolsCifsShareDataSource";
export const getProtocolsCifsShareDataSource: typeof import("./getProtocolsCifsShareDataSource").getProtocolsCifsShareDataSource = null as any;
export const getProtocolsCifsShareDataSourceOutput: typeof import("./getProtocolsCifsShareDataSource").getProtocolsCifsShareDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getProtocolsCifsShareDataSource","getProtocolsCifsShareDataSourceOutput"], () => require("./getProtocolsCifsShareDataSource"));

export { GetProtocolsCifsSharesDataSourceArgs, GetProtocolsCifsSharesDataSourceResult, GetProtocolsCifsSharesDataSourceOutputArgs } from "./getProtocolsCifsSharesDataSource";
export const getProtocolsCifsSharesDataSource: typeof import("./getProtocolsCifsSharesDataSource").getProtocolsCifsSharesDataSource = null as any;
export const getProtocolsCifsSharesDataSourceOutput: typeof import("./getProtocolsCifsSharesDataSource").getProtocolsCifsSharesDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getProtocolsCifsSharesDataSource","getProtocolsCifsSharesDataSourceOutput"], () => require("./getProtocolsCifsSharesDataSource"));

export { GetProtocolsCifsUserGroupPrivilegeDataSourceArgs, GetProtocolsCifsUserGroupPrivilegeDataSourceResult, GetProtocolsCifsUserGroupPrivilegeDataSourceOutputArgs } from "./getProtocolsCifsUserGroupPrivilegeDataSource";
export const getProtocolsCifsUserGroupPrivilegeDataSource: typeof import("./getProtocolsCifsUserGroupPrivilegeDataSource").getProtocolsCifsUserGroupPrivilegeDataSource = null as any;
export const getProtocolsCifsUserGroupPrivilegeDataSourceOutput: typeof import("./getProtocolsCifsUserGroupPrivilegeDataSource").getProtocolsCifsUserGroupPrivilegeDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getProtocolsCifsUserGroupPrivilegeDataSource","getProtocolsCifsUserGroupPrivilegeDataSourceOutput"], () => require("./getProtocolsCifsUserGroupPrivilegeDataSource"));

export { GetProtocolsCifsUserGroupPrivilegesDataSourceArgs, GetProtocolsCifsUserGroupPrivilegesDataSourceResult, GetProtocolsCifsUserGroupPrivilegesDataSourceOutputArgs } from "./getProtocolsCifsUserGroupPrivilegesDataSource";
export const getProtocolsCifsUserGroupPrivilegesDataSource: typeof import("./getProtocolsCifsUserGroupPrivilegesDataSource").getProtocolsCifsUserGroupPrivilegesDataSource = null as any;
export const getProtocolsCifsUserGroupPrivilegesDataSourceOutput: typeof import("./getProtocolsCifsUserGroupPrivilegesDataSource").getProtocolsCifsUserGroupPrivilegesDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getProtocolsCifsUserGroupPrivilegesDataSource","getProtocolsCifsUserGroupPrivilegesDataSourceOutput"], () => require("./getProtocolsCifsUserGroupPrivilegesDataSource"));

export { GetProtocolsNfsExportPoliciesDataSourceArgs, GetProtocolsNfsExportPoliciesDataSourceResult, GetProtocolsNfsExportPoliciesDataSourceOutputArgs } from "./getProtocolsNfsExportPoliciesDataSource";
export const getProtocolsNfsExportPoliciesDataSource: typeof import("./getProtocolsNfsExportPoliciesDataSource").getProtocolsNfsExportPoliciesDataSource = null as any;
export const getProtocolsNfsExportPoliciesDataSourceOutput: typeof import("./getProtocolsNfsExportPoliciesDataSource").getProtocolsNfsExportPoliciesDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getProtocolsNfsExportPoliciesDataSource","getProtocolsNfsExportPoliciesDataSourceOutput"], () => require("./getProtocolsNfsExportPoliciesDataSource"));

export { GetProtocolsNfsExportPolicyDataSourceArgs, GetProtocolsNfsExportPolicyDataSourceResult, GetProtocolsNfsExportPolicyDataSourceOutputArgs } from "./getProtocolsNfsExportPolicyDataSource";
export const getProtocolsNfsExportPolicyDataSource: typeof import("./getProtocolsNfsExportPolicyDataSource").getProtocolsNfsExportPolicyDataSource = null as any;
export const getProtocolsNfsExportPolicyDataSourceOutput: typeof import("./getProtocolsNfsExportPolicyDataSource").getProtocolsNfsExportPolicyDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getProtocolsNfsExportPolicyDataSource","getProtocolsNfsExportPolicyDataSourceOutput"], () => require("./getProtocolsNfsExportPolicyDataSource"));

export { GetProtocolsNfsExportPolicyRuleDataSourceArgs, GetProtocolsNfsExportPolicyRuleDataSourceResult, GetProtocolsNfsExportPolicyRuleDataSourceOutputArgs } from "./getProtocolsNfsExportPolicyRuleDataSource";
export const getProtocolsNfsExportPolicyRuleDataSource: typeof import("./getProtocolsNfsExportPolicyRuleDataSource").getProtocolsNfsExportPolicyRuleDataSource = null as any;
export const getProtocolsNfsExportPolicyRuleDataSourceOutput: typeof import("./getProtocolsNfsExportPolicyRuleDataSource").getProtocolsNfsExportPolicyRuleDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getProtocolsNfsExportPolicyRuleDataSource","getProtocolsNfsExportPolicyRuleDataSourceOutput"], () => require("./getProtocolsNfsExportPolicyRuleDataSource"));

export { GetProtocolsNfsExportPolicyRulesDataSourceArgs, GetProtocolsNfsExportPolicyRulesDataSourceResult, GetProtocolsNfsExportPolicyRulesDataSourceOutputArgs } from "./getProtocolsNfsExportPolicyRulesDataSource";
export const getProtocolsNfsExportPolicyRulesDataSource: typeof import("./getProtocolsNfsExportPolicyRulesDataSource").getProtocolsNfsExportPolicyRulesDataSource = null as any;
export const getProtocolsNfsExportPolicyRulesDataSourceOutput: typeof import("./getProtocolsNfsExportPolicyRulesDataSource").getProtocolsNfsExportPolicyRulesDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getProtocolsNfsExportPolicyRulesDataSource","getProtocolsNfsExportPolicyRulesDataSourceOutput"], () => require("./getProtocolsNfsExportPolicyRulesDataSource"));

export { GetProtocolsNfsServiceDataSourceArgs, GetProtocolsNfsServiceDataSourceResult, GetProtocolsNfsServiceDataSourceOutputArgs } from "./getProtocolsNfsServiceDataSource";
export const getProtocolsNfsServiceDataSource: typeof import("./getProtocolsNfsServiceDataSource").getProtocolsNfsServiceDataSource = null as any;
export const getProtocolsNfsServiceDataSourceOutput: typeof import("./getProtocolsNfsServiceDataSource").getProtocolsNfsServiceDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getProtocolsNfsServiceDataSource","getProtocolsNfsServiceDataSourceOutput"], () => require("./getProtocolsNfsServiceDataSource"));

export { GetProtocolsNfsServicesDataSourceArgs, GetProtocolsNfsServicesDataSourceResult, GetProtocolsNfsServicesDataSourceOutputArgs } from "./getProtocolsNfsServicesDataSource";
export const getProtocolsNfsServicesDataSource: typeof import("./getProtocolsNfsServicesDataSource").getProtocolsNfsServicesDataSource = null as any;
export const getProtocolsNfsServicesDataSourceOutput: typeof import("./getProtocolsNfsServicesDataSource").getProtocolsNfsServicesDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getProtocolsNfsServicesDataSource","getProtocolsNfsServicesDataSourceOutput"], () => require("./getProtocolsNfsServicesDataSource"));

export { GetProtocolsSanIgroupDataSourceArgs, GetProtocolsSanIgroupDataSourceResult, GetProtocolsSanIgroupDataSourceOutputArgs } from "./getProtocolsSanIgroupDataSource";
export const getProtocolsSanIgroupDataSource: typeof import("./getProtocolsSanIgroupDataSource").getProtocolsSanIgroupDataSource = null as any;
export const getProtocolsSanIgroupDataSourceOutput: typeof import("./getProtocolsSanIgroupDataSource").getProtocolsSanIgroupDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getProtocolsSanIgroupDataSource","getProtocolsSanIgroupDataSourceOutput"], () => require("./getProtocolsSanIgroupDataSource"));

export { GetProtocolsSanIgroupsDataSourceArgs, GetProtocolsSanIgroupsDataSourceResult, GetProtocolsSanIgroupsDataSourceOutputArgs } from "./getProtocolsSanIgroupsDataSource";
export const getProtocolsSanIgroupsDataSource: typeof import("./getProtocolsSanIgroupsDataSource").getProtocolsSanIgroupsDataSource = null as any;
export const getProtocolsSanIgroupsDataSourceOutput: typeof import("./getProtocolsSanIgroupsDataSource").getProtocolsSanIgroupsDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getProtocolsSanIgroupsDataSource","getProtocolsSanIgroupsDataSourceOutput"], () => require("./getProtocolsSanIgroupsDataSource"));

export { GetProtocolsSanLunMapDataSourceArgs, GetProtocolsSanLunMapDataSourceResult, GetProtocolsSanLunMapDataSourceOutputArgs } from "./getProtocolsSanLunMapDataSource";
export const getProtocolsSanLunMapDataSource: typeof import("./getProtocolsSanLunMapDataSource").getProtocolsSanLunMapDataSource = null as any;
export const getProtocolsSanLunMapDataSourceOutput: typeof import("./getProtocolsSanLunMapDataSource").getProtocolsSanLunMapDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getProtocolsSanLunMapDataSource","getProtocolsSanLunMapDataSourceOutput"], () => require("./getProtocolsSanLunMapDataSource"));

export { GetProtocolsSanLunMapsDataSourceArgs, GetProtocolsSanLunMapsDataSourceResult, GetProtocolsSanLunMapsDataSourceOutputArgs } from "./getProtocolsSanLunMapsDataSource";
export const getProtocolsSanLunMapsDataSource: typeof import("./getProtocolsSanLunMapsDataSource").getProtocolsSanLunMapsDataSource = null as any;
export const getProtocolsSanLunMapsDataSourceOutput: typeof import("./getProtocolsSanLunMapsDataSource").getProtocolsSanLunMapsDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getProtocolsSanLunMapsDataSource","getProtocolsSanLunMapsDataSourceOutput"], () => require("./getProtocolsSanLunMapsDataSource"));

export { GetSecurityAccountDataSourceArgs, GetSecurityAccountDataSourceResult, GetSecurityAccountDataSourceOutputArgs } from "./getSecurityAccountDataSource";
export const getSecurityAccountDataSource: typeof import("./getSecurityAccountDataSource").getSecurityAccountDataSource = null as any;
export const getSecurityAccountDataSourceOutput: typeof import("./getSecurityAccountDataSource").getSecurityAccountDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityAccountDataSource","getSecurityAccountDataSourceOutput"], () => require("./getSecurityAccountDataSource"));

export { GetSecurityAccountsDataSourceArgs, GetSecurityAccountsDataSourceResult, GetSecurityAccountsDataSourceOutputArgs } from "./getSecurityAccountsDataSource";
export const getSecurityAccountsDataSource: typeof import("./getSecurityAccountsDataSource").getSecurityAccountsDataSource = null as any;
export const getSecurityAccountsDataSourceOutput: typeof import("./getSecurityAccountsDataSource").getSecurityAccountsDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityAccountsDataSource","getSecurityAccountsDataSourceOutput"], () => require("./getSecurityAccountsDataSource"));

export { GetSnapmirrorDataSourceArgs, GetSnapmirrorDataSourceResult, GetSnapmirrorDataSourceOutputArgs } from "./getSnapmirrorDataSource";
export const getSnapmirrorDataSource: typeof import("./getSnapmirrorDataSource").getSnapmirrorDataSource = null as any;
export const getSnapmirrorDataSourceOutput: typeof import("./getSnapmirrorDataSource").getSnapmirrorDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getSnapmirrorDataSource","getSnapmirrorDataSourceOutput"], () => require("./getSnapmirrorDataSource"));

export { GetSnapmirrorPoliciesDataSourceArgs, GetSnapmirrorPoliciesDataSourceResult, GetSnapmirrorPoliciesDataSourceOutputArgs } from "./getSnapmirrorPoliciesDataSource";
export const getSnapmirrorPoliciesDataSource: typeof import("./getSnapmirrorPoliciesDataSource").getSnapmirrorPoliciesDataSource = null as any;
export const getSnapmirrorPoliciesDataSourceOutput: typeof import("./getSnapmirrorPoliciesDataSource").getSnapmirrorPoliciesDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getSnapmirrorPoliciesDataSource","getSnapmirrorPoliciesDataSourceOutput"], () => require("./getSnapmirrorPoliciesDataSource"));

export { GetSnapmirrorPolicyDataSourceArgs, GetSnapmirrorPolicyDataSourceResult, GetSnapmirrorPolicyDataSourceOutputArgs } from "./getSnapmirrorPolicyDataSource";
export const getSnapmirrorPolicyDataSource: typeof import("./getSnapmirrorPolicyDataSource").getSnapmirrorPolicyDataSource = null as any;
export const getSnapmirrorPolicyDataSourceOutput: typeof import("./getSnapmirrorPolicyDataSource").getSnapmirrorPolicyDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getSnapmirrorPolicyDataSource","getSnapmirrorPolicyDataSourceOutput"], () => require("./getSnapmirrorPolicyDataSource"));

export { GetSnapmirrorsDataSourceArgs, GetSnapmirrorsDataSourceResult, GetSnapmirrorsDataSourceOutputArgs } from "./getSnapmirrorsDataSource";
export const getSnapmirrorsDataSource: typeof import("./getSnapmirrorsDataSource").getSnapmirrorsDataSource = null as any;
export const getSnapmirrorsDataSourceOutput: typeof import("./getSnapmirrorsDataSource").getSnapmirrorsDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getSnapmirrorsDataSource","getSnapmirrorsDataSourceOutput"], () => require("./getSnapmirrorsDataSource"));

export { GetStorageAggregateDataSourceArgs, GetStorageAggregateDataSourceResult, GetStorageAggregateDataSourceOutputArgs } from "./getStorageAggregateDataSource";
export const getStorageAggregateDataSource: typeof import("./getStorageAggregateDataSource").getStorageAggregateDataSource = null as any;
export const getStorageAggregateDataSourceOutput: typeof import("./getStorageAggregateDataSource").getStorageAggregateDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getStorageAggregateDataSource","getStorageAggregateDataSourceOutput"], () => require("./getStorageAggregateDataSource"));

export { GetStorageAggregatesDataSourceArgs, GetStorageAggregatesDataSourceResult, GetStorageAggregatesDataSourceOutputArgs } from "./getStorageAggregatesDataSource";
export const getStorageAggregatesDataSource: typeof import("./getStorageAggregatesDataSource").getStorageAggregatesDataSource = null as any;
export const getStorageAggregatesDataSourceOutput: typeof import("./getStorageAggregatesDataSource").getStorageAggregatesDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getStorageAggregatesDataSource","getStorageAggregatesDataSourceOutput"], () => require("./getStorageAggregatesDataSource"));

export { GetStorageFlexcacheDataSourceArgs, GetStorageFlexcacheDataSourceResult, GetStorageFlexcacheDataSourceOutputArgs } from "./getStorageFlexcacheDataSource";
export const getStorageFlexcacheDataSource: typeof import("./getStorageFlexcacheDataSource").getStorageFlexcacheDataSource = null as any;
export const getStorageFlexcacheDataSourceOutput: typeof import("./getStorageFlexcacheDataSource").getStorageFlexcacheDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getStorageFlexcacheDataSource","getStorageFlexcacheDataSourceOutput"], () => require("./getStorageFlexcacheDataSource"));

export { GetStorageFlexcachesDataSourceArgs, GetStorageFlexcachesDataSourceResult, GetStorageFlexcachesDataSourceOutputArgs } from "./getStorageFlexcachesDataSource";
export const getStorageFlexcachesDataSource: typeof import("./getStorageFlexcachesDataSource").getStorageFlexcachesDataSource = null as any;
export const getStorageFlexcachesDataSourceOutput: typeof import("./getStorageFlexcachesDataSource").getStorageFlexcachesDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getStorageFlexcachesDataSource","getStorageFlexcachesDataSourceOutput"], () => require("./getStorageFlexcachesDataSource"));

export { GetStorageLunDataSourceArgs, GetStorageLunDataSourceResult, GetStorageLunDataSourceOutputArgs } from "./getStorageLunDataSource";
export const getStorageLunDataSource: typeof import("./getStorageLunDataSource").getStorageLunDataSource = null as any;
export const getStorageLunDataSourceOutput: typeof import("./getStorageLunDataSource").getStorageLunDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getStorageLunDataSource","getStorageLunDataSourceOutput"], () => require("./getStorageLunDataSource"));

export { GetStorageLunsDataSourceArgs, GetStorageLunsDataSourceResult, GetStorageLunsDataSourceOutputArgs } from "./getStorageLunsDataSource";
export const getStorageLunsDataSource: typeof import("./getStorageLunsDataSource").getStorageLunsDataSource = null as any;
export const getStorageLunsDataSourceOutput: typeof import("./getStorageLunsDataSource").getStorageLunsDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getStorageLunsDataSource","getStorageLunsDataSourceOutput"], () => require("./getStorageLunsDataSource"));

export { GetStorageSnapshotPoliciesDataSourceArgs, GetStorageSnapshotPoliciesDataSourceResult, GetStorageSnapshotPoliciesDataSourceOutputArgs } from "./getStorageSnapshotPoliciesDataSource";
export const getStorageSnapshotPoliciesDataSource: typeof import("./getStorageSnapshotPoliciesDataSource").getStorageSnapshotPoliciesDataSource = null as any;
export const getStorageSnapshotPoliciesDataSourceOutput: typeof import("./getStorageSnapshotPoliciesDataSource").getStorageSnapshotPoliciesDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getStorageSnapshotPoliciesDataSource","getStorageSnapshotPoliciesDataSourceOutput"], () => require("./getStorageSnapshotPoliciesDataSource"));

export { GetStorageSnapshotPolicyDataSourceArgs, GetStorageSnapshotPolicyDataSourceResult, GetStorageSnapshotPolicyDataSourceOutputArgs } from "./getStorageSnapshotPolicyDataSource";
export const getStorageSnapshotPolicyDataSource: typeof import("./getStorageSnapshotPolicyDataSource").getStorageSnapshotPolicyDataSource = null as any;
export const getStorageSnapshotPolicyDataSourceOutput: typeof import("./getStorageSnapshotPolicyDataSource").getStorageSnapshotPolicyDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getStorageSnapshotPolicyDataSource","getStorageSnapshotPolicyDataSourceOutput"], () => require("./getStorageSnapshotPolicyDataSource"));

export { GetStorageVolumeDataSourceArgs, GetStorageVolumeDataSourceResult, GetStorageVolumeDataSourceOutputArgs } from "./getStorageVolumeDataSource";
export const getStorageVolumeDataSource: typeof import("./getStorageVolumeDataSource").getStorageVolumeDataSource = null as any;
export const getStorageVolumeDataSourceOutput: typeof import("./getStorageVolumeDataSource").getStorageVolumeDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getStorageVolumeDataSource","getStorageVolumeDataSourceOutput"], () => require("./getStorageVolumeDataSource"));

export { GetStorageVolumeSnapshotDataSourceArgs, GetStorageVolumeSnapshotDataSourceResult, GetStorageVolumeSnapshotDataSourceOutputArgs } from "./getStorageVolumeSnapshotDataSource";
export const getStorageVolumeSnapshotDataSource: typeof import("./getStorageVolumeSnapshotDataSource").getStorageVolumeSnapshotDataSource = null as any;
export const getStorageVolumeSnapshotDataSourceOutput: typeof import("./getStorageVolumeSnapshotDataSource").getStorageVolumeSnapshotDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getStorageVolumeSnapshotDataSource","getStorageVolumeSnapshotDataSourceOutput"], () => require("./getStorageVolumeSnapshotDataSource"));

export { GetStorageVolumeSnapshotsDataSourceArgs, GetStorageVolumeSnapshotsDataSourceResult, GetStorageVolumeSnapshotsDataSourceOutputArgs } from "./getStorageVolumeSnapshotsDataSource";
export const getStorageVolumeSnapshotsDataSource: typeof import("./getStorageVolumeSnapshotsDataSource").getStorageVolumeSnapshotsDataSource = null as any;
export const getStorageVolumeSnapshotsDataSourceOutput: typeof import("./getStorageVolumeSnapshotsDataSource").getStorageVolumeSnapshotsDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getStorageVolumeSnapshotsDataSource","getStorageVolumeSnapshotsDataSourceOutput"], () => require("./getStorageVolumeSnapshotsDataSource"));

export { GetStorageVolumesDataSourceArgs, GetStorageVolumesDataSourceResult, GetStorageVolumesDataSourceOutputArgs } from "./getStorageVolumesDataSource";
export const getStorageVolumesDataSource: typeof import("./getStorageVolumesDataSource").getStorageVolumesDataSource = null as any;
export const getStorageVolumesDataSourceOutput: typeof import("./getStorageVolumesDataSource").getStorageVolumesDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getStorageVolumesDataSource","getStorageVolumesDataSourceOutput"], () => require("./getStorageVolumesDataSource"));

export { GetSvmDataSourceArgs, GetSvmDataSourceResult, GetSvmDataSourceOutputArgs } from "./getSvmDataSource";
export const getSvmDataSource: typeof import("./getSvmDataSource").getSvmDataSource = null as any;
export const getSvmDataSourceOutput: typeof import("./getSvmDataSource").getSvmDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getSvmDataSource","getSvmDataSourceOutput"], () => require("./getSvmDataSource"));

export { GetSvmPeerDataSourceArgs, GetSvmPeerDataSourceResult, GetSvmPeerDataSourceOutputArgs } from "./getSvmPeerDataSource";
export const getSvmPeerDataSource: typeof import("./getSvmPeerDataSource").getSvmPeerDataSource = null as any;
export const getSvmPeerDataSourceOutput: typeof import("./getSvmPeerDataSource").getSvmPeerDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getSvmPeerDataSource","getSvmPeerDataSourceOutput"], () => require("./getSvmPeerDataSource"));

export { GetSvmPeersDataSourceArgs, GetSvmPeersDataSourceResult, GetSvmPeersDataSourceOutputArgs } from "./getSvmPeersDataSource";
export const getSvmPeersDataSource: typeof import("./getSvmPeersDataSource").getSvmPeersDataSource = null as any;
export const getSvmPeersDataSourceOutput: typeof import("./getSvmPeersDataSource").getSvmPeersDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getSvmPeersDataSource","getSvmPeersDataSourceOutput"], () => require("./getSvmPeersDataSource"));

export { GetSvmsDataSourceArgs, GetSvmsDataSourceResult, GetSvmsDataSourceOutputArgs } from "./getSvmsDataSource";
export const getSvmsDataSource: typeof import("./getSvmsDataSource").getSvmsDataSource = null as any;
export const getSvmsDataSourceOutput: typeof import("./getSvmsDataSource").getSvmsDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getSvmsDataSource","getSvmsDataSourceOutput"], () => require("./getSvmsDataSource"));

export { NameServicesDnsResourceArgs, NameServicesDnsResourceState } from "./nameServicesDnsResource";
export type NameServicesDnsResource = import("./nameServicesDnsResource").NameServicesDnsResource;
export const NameServicesDnsResource: typeof import("./nameServicesDnsResource").NameServicesDnsResource = null as any;
utilities.lazyLoad(exports, ["NameServicesDnsResource"], () => require("./nameServicesDnsResource"));

export { NameServicesLdapResourceArgs, NameServicesLdapResourceState } from "./nameServicesLdapResource";
export type NameServicesLdapResource = import("./nameServicesLdapResource").NameServicesLdapResource;
export const NameServicesLdapResource: typeof import("./nameServicesLdapResource").NameServicesLdapResource = null as any;
utilities.lazyLoad(exports, ["NameServicesLdapResource"], () => require("./nameServicesLdapResource"));

export { NetworkingIpInterfaceResourceArgs, NetworkingIpInterfaceResourceState } from "./networkingIpInterfaceResource";
export type NetworkingIpInterfaceResource = import("./networkingIpInterfaceResource").NetworkingIpInterfaceResource;
export const NetworkingIpInterfaceResource: typeof import("./networkingIpInterfaceResource").NetworkingIpInterfaceResource = null as any;
utilities.lazyLoad(exports, ["NetworkingIpInterfaceResource"], () => require("./networkingIpInterfaceResource"));

export { NetworkingIpRouteResourceArgs, NetworkingIpRouteResourceState } from "./networkingIpRouteResource";
export type NetworkingIpRouteResource = import("./networkingIpRouteResource").NetworkingIpRouteResource;
export const NetworkingIpRouteResource: typeof import("./networkingIpRouteResource").NetworkingIpRouteResource = null as any;
utilities.lazyLoad(exports, ["NetworkingIpRouteResource"], () => require("./networkingIpRouteResource"));

export { ProtocolsCifsLocalGroupMemberResourceArgs, ProtocolsCifsLocalGroupMemberResourceState } from "./protocolsCifsLocalGroupMemberResource";
export type ProtocolsCifsLocalGroupMemberResource = import("./protocolsCifsLocalGroupMemberResource").ProtocolsCifsLocalGroupMemberResource;
export const ProtocolsCifsLocalGroupMemberResource: typeof import("./protocolsCifsLocalGroupMemberResource").ProtocolsCifsLocalGroupMemberResource = null as any;
utilities.lazyLoad(exports, ["ProtocolsCifsLocalGroupMemberResource"], () => require("./protocolsCifsLocalGroupMemberResource"));

export { ProtocolsCifsLocalGroupResourceArgs, ProtocolsCifsLocalGroupResourceState } from "./protocolsCifsLocalGroupResource";
export type ProtocolsCifsLocalGroupResource = import("./protocolsCifsLocalGroupResource").ProtocolsCifsLocalGroupResource;
export const ProtocolsCifsLocalGroupResource: typeof import("./protocolsCifsLocalGroupResource").ProtocolsCifsLocalGroupResource = null as any;
utilities.lazyLoad(exports, ["ProtocolsCifsLocalGroupResource"], () => require("./protocolsCifsLocalGroupResource"));

export { ProtocolsCifsLocalUserResourceArgs, ProtocolsCifsLocalUserResourceState } from "./protocolsCifsLocalUserResource";
export type ProtocolsCifsLocalUserResource = import("./protocolsCifsLocalUserResource").ProtocolsCifsLocalUserResource;
export const ProtocolsCifsLocalUserResource: typeof import("./protocolsCifsLocalUserResource").ProtocolsCifsLocalUserResource = null as any;
utilities.lazyLoad(exports, ["ProtocolsCifsLocalUserResource"], () => require("./protocolsCifsLocalUserResource"));

export { ProtocolsCifsServiceResourceArgs, ProtocolsCifsServiceResourceState } from "./protocolsCifsServiceResource";
export type ProtocolsCifsServiceResource = import("./protocolsCifsServiceResource").ProtocolsCifsServiceResource;
export const ProtocolsCifsServiceResource: typeof import("./protocolsCifsServiceResource").ProtocolsCifsServiceResource = null as any;
utilities.lazyLoad(exports, ["ProtocolsCifsServiceResource"], () => require("./protocolsCifsServiceResource"));

export { ProtocolsCifsShareResourceArgs, ProtocolsCifsShareResourceState } from "./protocolsCifsShareResource";
export type ProtocolsCifsShareResource = import("./protocolsCifsShareResource").ProtocolsCifsShareResource;
export const ProtocolsCifsShareResource: typeof import("./protocolsCifsShareResource").ProtocolsCifsShareResource = null as any;
utilities.lazyLoad(exports, ["ProtocolsCifsShareResource"], () => require("./protocolsCifsShareResource"));

export { ProtocolsCifsUserGroupPrivilegeResourceArgs, ProtocolsCifsUserGroupPrivilegeResourceState } from "./protocolsCifsUserGroupPrivilegeResource";
export type ProtocolsCifsUserGroupPrivilegeResource = import("./protocolsCifsUserGroupPrivilegeResource").ProtocolsCifsUserGroupPrivilegeResource;
export const ProtocolsCifsUserGroupPrivilegeResource: typeof import("./protocolsCifsUserGroupPrivilegeResource").ProtocolsCifsUserGroupPrivilegeResource = null as any;
utilities.lazyLoad(exports, ["ProtocolsCifsUserGroupPrivilegeResource"], () => require("./protocolsCifsUserGroupPrivilegeResource"));

export { ProtocolsNfsExportPolicyResourceArgs, ProtocolsNfsExportPolicyResourceState } from "./protocolsNfsExportPolicyResource";
export type ProtocolsNfsExportPolicyResource = import("./protocolsNfsExportPolicyResource").ProtocolsNfsExportPolicyResource;
export const ProtocolsNfsExportPolicyResource: typeof import("./protocolsNfsExportPolicyResource").ProtocolsNfsExportPolicyResource = null as any;
utilities.lazyLoad(exports, ["ProtocolsNfsExportPolicyResource"], () => require("./protocolsNfsExportPolicyResource"));

export { ProtocolsNfsExportPolicyRuleResourceArgs, ProtocolsNfsExportPolicyRuleResourceState } from "./protocolsNfsExportPolicyRuleResource";
export type ProtocolsNfsExportPolicyRuleResource = import("./protocolsNfsExportPolicyRuleResource").ProtocolsNfsExportPolicyRuleResource;
export const ProtocolsNfsExportPolicyRuleResource: typeof import("./protocolsNfsExportPolicyRuleResource").ProtocolsNfsExportPolicyRuleResource = null as any;
utilities.lazyLoad(exports, ["ProtocolsNfsExportPolicyRuleResource"], () => require("./protocolsNfsExportPolicyRuleResource"));

export { ProtocolsNfsServiceResourceArgs, ProtocolsNfsServiceResourceState } from "./protocolsNfsServiceResource";
export type ProtocolsNfsServiceResource = import("./protocolsNfsServiceResource").ProtocolsNfsServiceResource;
export const ProtocolsNfsServiceResource: typeof import("./protocolsNfsServiceResource").ProtocolsNfsServiceResource = null as any;
utilities.lazyLoad(exports, ["ProtocolsNfsServiceResource"], () => require("./protocolsNfsServiceResource"));

export { ProtocolsSanIgroupResourceArgs, ProtocolsSanIgroupResourceState } from "./protocolsSanIgroupResource";
export type ProtocolsSanIgroupResource = import("./protocolsSanIgroupResource").ProtocolsSanIgroupResource;
export const ProtocolsSanIgroupResource: typeof import("./protocolsSanIgroupResource").ProtocolsSanIgroupResource = null as any;
utilities.lazyLoad(exports, ["ProtocolsSanIgroupResource"], () => require("./protocolsSanIgroupResource"));

export { ProtocolsSanLunMapsResourceArgs, ProtocolsSanLunMapsResourceState } from "./protocolsSanLunMapsResource";
export type ProtocolsSanLunMapsResource = import("./protocolsSanLunMapsResource").ProtocolsSanLunMapsResource;
export const ProtocolsSanLunMapsResource: typeof import("./protocolsSanLunMapsResource").ProtocolsSanLunMapsResource = null as any;
utilities.lazyLoad(exports, ["ProtocolsSanLunMapsResource"], () => require("./protocolsSanLunMapsResource"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SecurityAccountResourceArgs, SecurityAccountResourceState } from "./securityAccountResource";
export type SecurityAccountResource = import("./securityAccountResource").SecurityAccountResource;
export const SecurityAccountResource: typeof import("./securityAccountResource").SecurityAccountResource = null as any;
utilities.lazyLoad(exports, ["SecurityAccountResource"], () => require("./securityAccountResource"));

export { SnapmirrorPolicyResourceArgs, SnapmirrorPolicyResourceState } from "./snapmirrorPolicyResource";
export type SnapmirrorPolicyResource = import("./snapmirrorPolicyResource").SnapmirrorPolicyResource;
export const SnapmirrorPolicyResource: typeof import("./snapmirrorPolicyResource").SnapmirrorPolicyResource = null as any;
utilities.lazyLoad(exports, ["SnapmirrorPolicyResource"], () => require("./snapmirrorPolicyResource"));

export { SnapmirrorResourceArgs, SnapmirrorResourceState } from "./snapmirrorResource";
export type SnapmirrorResource = import("./snapmirrorResource").SnapmirrorResource;
export const SnapmirrorResource: typeof import("./snapmirrorResource").SnapmirrorResource = null as any;
utilities.lazyLoad(exports, ["SnapmirrorResource"], () => require("./snapmirrorResource"));

export { StorageAggregateResourceArgs, StorageAggregateResourceState } from "./storageAggregateResource";
export type StorageAggregateResource = import("./storageAggregateResource").StorageAggregateResource;
export const StorageAggregateResource: typeof import("./storageAggregateResource").StorageAggregateResource = null as any;
utilities.lazyLoad(exports, ["StorageAggregateResource"], () => require("./storageAggregateResource"));

export { StorageFlexcacheResourceArgs, StorageFlexcacheResourceState } from "./storageFlexcacheResource";
export type StorageFlexcacheResource = import("./storageFlexcacheResource").StorageFlexcacheResource;
export const StorageFlexcacheResource: typeof import("./storageFlexcacheResource").StorageFlexcacheResource = null as any;
utilities.lazyLoad(exports, ["StorageFlexcacheResource"], () => require("./storageFlexcacheResource"));

export { StorageLunResourceArgs, StorageLunResourceState } from "./storageLunResource";
export type StorageLunResource = import("./storageLunResource").StorageLunResource;
export const StorageLunResource: typeof import("./storageLunResource").StorageLunResource = null as any;
utilities.lazyLoad(exports, ["StorageLunResource"], () => require("./storageLunResource"));

export { StorageSnapshotPolicyResourceArgs, StorageSnapshotPolicyResourceState } from "./storageSnapshotPolicyResource";
export type StorageSnapshotPolicyResource = import("./storageSnapshotPolicyResource").StorageSnapshotPolicyResource;
export const StorageSnapshotPolicyResource: typeof import("./storageSnapshotPolicyResource").StorageSnapshotPolicyResource = null as any;
utilities.lazyLoad(exports, ["StorageSnapshotPolicyResource"], () => require("./storageSnapshotPolicyResource"));

export { StorageVolumeResourceArgs, StorageVolumeResourceState } from "./storageVolumeResource";
export type StorageVolumeResource = import("./storageVolumeResource").StorageVolumeResource;
export const StorageVolumeResource: typeof import("./storageVolumeResource").StorageVolumeResource = null as any;
utilities.lazyLoad(exports, ["StorageVolumeResource"], () => require("./storageVolumeResource"));

export { StorageVolumeSnapshotResourceArgs, StorageVolumeSnapshotResourceState } from "./storageVolumeSnapshotResource";
export type StorageVolumeSnapshotResource = import("./storageVolumeSnapshotResource").StorageVolumeSnapshotResource;
export const StorageVolumeSnapshotResource: typeof import("./storageVolumeSnapshotResource").StorageVolumeSnapshotResource = null as any;
utilities.lazyLoad(exports, ["StorageVolumeSnapshotResource"], () => require("./storageVolumeSnapshotResource"));

export { SvmPeersResourceArgs, SvmPeersResourceState } from "./svmPeersResource";
export type SvmPeersResource = import("./svmPeersResource").SvmPeersResource;
export const SvmPeersResource: typeof import("./svmPeersResource").SvmPeersResource = null as any;
utilities.lazyLoad(exports, ["SvmPeersResource"], () => require("./svmPeersResource"));

export { SvmResourceArgs, SvmResourceState } from "./svmResource";
export type SvmResource = import("./svmResource").SvmResource;
export const SvmResource: typeof import("./svmResource").SvmResource = null as any;
utilities.lazyLoad(exports, ["SvmResource"], () => require("./svmResource"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "netapp-ontap:index/clusterLicensingLicenseResource:ClusterLicensingLicenseResource":
                return new ClusterLicensingLicenseResource(name, <any>undefined, { urn })
            case "netapp-ontap:index/clusterPeersResource:ClusterPeersResource":
                return new ClusterPeersResource(name, <any>undefined, { urn })
            case "netapp-ontap:index/clusterResource:ClusterResource":
                return new ClusterResource(name, <any>undefined, { urn })
            case "netapp-ontap:index/clusterScheduleResource:ClusterScheduleResource":
                return new ClusterScheduleResource(name, <any>undefined, { urn })
            case "netapp-ontap:index/example:Example":
                return new Example(name, <any>undefined, { urn })
            case "netapp-ontap:index/nameServicesDnsResource:NameServicesDnsResource":
                return new NameServicesDnsResource(name, <any>undefined, { urn })
            case "netapp-ontap:index/nameServicesLdapResource:NameServicesLdapResource":
                return new NameServicesLdapResource(name, <any>undefined, { urn })
            case "netapp-ontap:index/networkingIpInterfaceResource:NetworkingIpInterfaceResource":
                return new NetworkingIpInterfaceResource(name, <any>undefined, { urn })
            case "netapp-ontap:index/networkingIpRouteResource:NetworkingIpRouteResource":
                return new NetworkingIpRouteResource(name, <any>undefined, { urn })
            case "netapp-ontap:index/protocolsCifsLocalGroupMemberResource:ProtocolsCifsLocalGroupMemberResource":
                return new ProtocolsCifsLocalGroupMemberResource(name, <any>undefined, { urn })
            case "netapp-ontap:index/protocolsCifsLocalGroupResource:ProtocolsCifsLocalGroupResource":
                return new ProtocolsCifsLocalGroupResource(name, <any>undefined, { urn })
            case "netapp-ontap:index/protocolsCifsLocalUserResource:ProtocolsCifsLocalUserResource":
                return new ProtocolsCifsLocalUserResource(name, <any>undefined, { urn })
            case "netapp-ontap:index/protocolsCifsServiceResource:ProtocolsCifsServiceResource":
                return new ProtocolsCifsServiceResource(name, <any>undefined, { urn })
            case "netapp-ontap:index/protocolsCifsShareResource:ProtocolsCifsShareResource":
                return new ProtocolsCifsShareResource(name, <any>undefined, { urn })
            case "netapp-ontap:index/protocolsCifsUserGroupPrivilegeResource:ProtocolsCifsUserGroupPrivilegeResource":
                return new ProtocolsCifsUserGroupPrivilegeResource(name, <any>undefined, { urn })
            case "netapp-ontap:index/protocolsNfsExportPolicyResource:ProtocolsNfsExportPolicyResource":
                return new ProtocolsNfsExportPolicyResource(name, <any>undefined, { urn })
            case "netapp-ontap:index/protocolsNfsExportPolicyRuleResource:ProtocolsNfsExportPolicyRuleResource":
                return new ProtocolsNfsExportPolicyRuleResource(name, <any>undefined, { urn })
            case "netapp-ontap:index/protocolsNfsServiceResource:ProtocolsNfsServiceResource":
                return new ProtocolsNfsServiceResource(name, <any>undefined, { urn })
            case "netapp-ontap:index/protocolsSanIgroupResource:ProtocolsSanIgroupResource":
                return new ProtocolsSanIgroupResource(name, <any>undefined, { urn })
            case "netapp-ontap:index/protocolsSanLunMapsResource:ProtocolsSanLunMapsResource":
                return new ProtocolsSanLunMapsResource(name, <any>undefined, { urn })
            case "netapp-ontap:index/securityAccountResource:SecurityAccountResource":
                return new SecurityAccountResource(name, <any>undefined, { urn })
            case "netapp-ontap:index/snapmirrorPolicyResource:SnapmirrorPolicyResource":
                return new SnapmirrorPolicyResource(name, <any>undefined, { urn })
            case "netapp-ontap:index/snapmirrorResource:SnapmirrorResource":
                return new SnapmirrorResource(name, <any>undefined, { urn })
            case "netapp-ontap:index/storageAggregateResource:StorageAggregateResource":
                return new StorageAggregateResource(name, <any>undefined, { urn })
            case "netapp-ontap:index/storageFlexcacheResource:StorageFlexcacheResource":
                return new StorageFlexcacheResource(name, <any>undefined, { urn })
            case "netapp-ontap:index/storageLunResource:StorageLunResource":
                return new StorageLunResource(name, <any>undefined, { urn })
            case "netapp-ontap:index/storageSnapshotPolicyResource:StorageSnapshotPolicyResource":
                return new StorageSnapshotPolicyResource(name, <any>undefined, { urn })
            case "netapp-ontap:index/storageVolumeResource:StorageVolumeResource":
                return new StorageVolumeResource(name, <any>undefined, { urn })
            case "netapp-ontap:index/storageVolumeSnapshotResource:StorageVolumeSnapshotResource":
                return new StorageVolumeSnapshotResource(name, <any>undefined, { urn })
            case "netapp-ontap:index/svmPeersResource:SvmPeersResource":
                return new SvmPeersResource(name, <any>undefined, { urn })
            case "netapp-ontap:index/svmResource:SvmResource":
                return new SvmResource(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("netapp-ontap", "index/clusterLicensingLicenseResource", _module)
pulumi.runtime.registerResourceModule("netapp-ontap", "index/clusterPeersResource", _module)
pulumi.runtime.registerResourceModule("netapp-ontap", "index/clusterResource", _module)
pulumi.runtime.registerResourceModule("netapp-ontap", "index/clusterScheduleResource", _module)
pulumi.runtime.registerResourceModule("netapp-ontap", "index/example", _module)
pulumi.runtime.registerResourceModule("netapp-ontap", "index/nameServicesDnsResource", _module)
pulumi.runtime.registerResourceModule("netapp-ontap", "index/nameServicesLdapResource", _module)
pulumi.runtime.registerResourceModule("netapp-ontap", "index/networkingIpInterfaceResource", _module)
pulumi.runtime.registerResourceModule("netapp-ontap", "index/networkingIpRouteResource", _module)
pulumi.runtime.registerResourceModule("netapp-ontap", "index/protocolsCifsLocalGroupMemberResource", _module)
pulumi.runtime.registerResourceModule("netapp-ontap", "index/protocolsCifsLocalGroupResource", _module)
pulumi.runtime.registerResourceModule("netapp-ontap", "index/protocolsCifsLocalUserResource", _module)
pulumi.runtime.registerResourceModule("netapp-ontap", "index/protocolsCifsServiceResource", _module)
pulumi.runtime.registerResourceModule("netapp-ontap", "index/protocolsCifsShareResource", _module)
pulumi.runtime.registerResourceModule("netapp-ontap", "index/protocolsCifsUserGroupPrivilegeResource", _module)
pulumi.runtime.registerResourceModule("netapp-ontap", "index/protocolsNfsExportPolicyResource", _module)
pulumi.runtime.registerResourceModule("netapp-ontap", "index/protocolsNfsExportPolicyRuleResource", _module)
pulumi.runtime.registerResourceModule("netapp-ontap", "index/protocolsNfsServiceResource", _module)
pulumi.runtime.registerResourceModule("netapp-ontap", "index/protocolsSanIgroupResource", _module)
pulumi.runtime.registerResourceModule("netapp-ontap", "index/protocolsSanLunMapsResource", _module)
pulumi.runtime.registerResourceModule("netapp-ontap", "index/securityAccountResource", _module)
pulumi.runtime.registerResourceModule("netapp-ontap", "index/snapmirrorPolicyResource", _module)
pulumi.runtime.registerResourceModule("netapp-ontap", "index/snapmirrorResource", _module)
pulumi.runtime.registerResourceModule("netapp-ontap", "index/storageAggregateResource", _module)
pulumi.runtime.registerResourceModule("netapp-ontap", "index/storageFlexcacheResource", _module)
pulumi.runtime.registerResourceModule("netapp-ontap", "index/storageLunResource", _module)
pulumi.runtime.registerResourceModule("netapp-ontap", "index/storageSnapshotPolicyResource", _module)
pulumi.runtime.registerResourceModule("netapp-ontap", "index/storageVolumeResource", _module)
pulumi.runtime.registerResourceModule("netapp-ontap", "index/storageVolumeSnapshotResource", _module)
pulumi.runtime.registerResourceModule("netapp-ontap", "index/svmPeersResource", _module)
pulumi.runtime.registerResourceModule("netapp-ontap", "index/svmResource", _module)
pulumi.runtime.registerResourcePackage("netapp-ontap", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:netapp-ontap") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
