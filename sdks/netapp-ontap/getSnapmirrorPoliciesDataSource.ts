// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getSnapmirrorPoliciesDataSource(args: GetSnapmirrorPoliciesDataSourceArgs, opts?: pulumi.InvokeOptions): Promise<GetSnapmirrorPoliciesDataSourceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("netapp-ontap:index/getSnapmirrorPoliciesDataSource:getSnapmirrorPoliciesDataSource", {
        "cxProfileName": args.cxProfileName,
        "filter": args.filter,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSnapmirrorPoliciesDataSource.
 */
export interface GetSnapmirrorPoliciesDataSourceArgs {
    cxProfileName: string;
    filter?: inputs.GetSnapmirrorPoliciesDataSourceFilter;
}

/**
 * A collection of values returned by getSnapmirrorPoliciesDataSource.
 */
export interface GetSnapmirrorPoliciesDataSourceResult {
    readonly cxProfileName: string;
    readonly filter?: outputs.GetSnapmirrorPoliciesDataSourceFilter;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly snapmirrorPolicies: outputs.GetSnapmirrorPoliciesDataSourceSnapmirrorPolicy[];
}
export function getSnapmirrorPoliciesDataSourceOutput(args: GetSnapmirrorPoliciesDataSourceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSnapmirrorPoliciesDataSourceResult> {
    return pulumi.output(args).apply((a: any) => getSnapmirrorPoliciesDataSource(a, opts))
}

/**
 * A collection of arguments for invoking getSnapmirrorPoliciesDataSource.
 */
export interface GetSnapmirrorPoliciesDataSourceOutputArgs {
    cxProfileName: pulumi.Input<string>;
    filter?: pulumi.Input<inputs.GetSnapmirrorPoliciesDataSourceFilterArgs>;
}
