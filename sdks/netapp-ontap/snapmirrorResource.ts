// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SnapmirrorResource extends pulumi.CustomResource {
    /**
     * Get an existing SnapmirrorResource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnapmirrorResourceState, opts?: pulumi.CustomResourceOptions): SnapmirrorResource {
        return new SnapmirrorResource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netapp-ontap:index/snapmirrorResource:SnapmirrorResource';

    /**
     * Returns true if the given object is an instance of SnapmirrorResource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SnapmirrorResource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SnapmirrorResource.__pulumiType;
    }

    /**
     * Snapmirror provision destination
     */
    public readonly createDestination!: pulumi.Output<outputs.SnapmirrorResourceCreateDestination | undefined>;
    /**
     * Connection profile name
     */
    public readonly cxProfileName!: pulumi.Output<string>;
    /**
     * Snapmirror destination endpoint
     */
    public readonly destinationEndpoint!: pulumi.Output<outputs.SnapmirrorResourceDestinationEndpoint>;
    public readonly healthy!: pulumi.Output<boolean>;
    /**
     * initialize the relationship
     */
    public readonly initialize!: pulumi.Output<boolean>;
    /**
     * policy details
     */
    public readonly policy!: pulumi.Output<outputs.SnapmirrorResourcePolicy | undefined>;
    /**
     * Snapmirror source endpoint
     */
    public readonly sourceEndpoint!: pulumi.Output<outputs.SnapmirrorResourceSourceEndpoint>;
    public readonly state!: pulumi.Output<string>;

    /**
     * Create a SnapmirrorResource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SnapmirrorResourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnapmirrorResourceArgs | SnapmirrorResourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnapmirrorResourceState | undefined;
            resourceInputs["createDestination"] = state ? state.createDestination : undefined;
            resourceInputs["cxProfileName"] = state ? state.cxProfileName : undefined;
            resourceInputs["destinationEndpoint"] = state ? state.destinationEndpoint : undefined;
            resourceInputs["healthy"] = state ? state.healthy : undefined;
            resourceInputs["initialize"] = state ? state.initialize : undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
            resourceInputs["sourceEndpoint"] = state ? state.sourceEndpoint : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
        } else {
            const args = argsOrState as SnapmirrorResourceArgs | undefined;
            if ((!args || args.cxProfileName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cxProfileName'");
            }
            if ((!args || args.destinationEndpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationEndpoint'");
            }
            if ((!args || args.sourceEndpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceEndpoint'");
            }
            resourceInputs["createDestination"] = args ? args.createDestination : undefined;
            resourceInputs["cxProfileName"] = args ? args.cxProfileName : undefined;
            resourceInputs["destinationEndpoint"] = args ? args.destinationEndpoint : undefined;
            resourceInputs["healthy"] = args ? args.healthy : undefined;
            resourceInputs["initialize"] = args ? args.initialize : undefined;
            resourceInputs["policy"] = args ? args.policy : undefined;
            resourceInputs["sourceEndpoint"] = args ? args.sourceEndpoint : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SnapmirrorResource.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SnapmirrorResource resources.
 */
export interface SnapmirrorResourceState {
    /**
     * Snapmirror provision destination
     */
    createDestination?: pulumi.Input<inputs.SnapmirrorResourceCreateDestination>;
    /**
     * Connection profile name
     */
    cxProfileName?: pulumi.Input<string>;
    /**
     * Snapmirror destination endpoint
     */
    destinationEndpoint?: pulumi.Input<inputs.SnapmirrorResourceDestinationEndpoint>;
    healthy?: pulumi.Input<boolean>;
    /**
     * initialize the relationship
     */
    initialize?: pulumi.Input<boolean>;
    /**
     * policy details
     */
    policy?: pulumi.Input<inputs.SnapmirrorResourcePolicy>;
    /**
     * Snapmirror source endpoint
     */
    sourceEndpoint?: pulumi.Input<inputs.SnapmirrorResourceSourceEndpoint>;
    state?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SnapmirrorResource resource.
 */
export interface SnapmirrorResourceArgs {
    /**
     * Snapmirror provision destination
     */
    createDestination?: pulumi.Input<inputs.SnapmirrorResourceCreateDestination>;
    /**
     * Connection profile name
     */
    cxProfileName: pulumi.Input<string>;
    /**
     * Snapmirror destination endpoint
     */
    destinationEndpoint: pulumi.Input<inputs.SnapmirrorResourceDestinationEndpoint>;
    healthy?: pulumi.Input<boolean>;
    /**
     * initialize the relationship
     */
    initialize?: pulumi.Input<boolean>;
    /**
     * policy details
     */
    policy?: pulumi.Input<inputs.SnapmirrorResourcePolicy>;
    /**
     * Snapmirror source endpoint
     */
    sourceEndpoint: pulumi.Input<inputs.SnapmirrorResourceSourceEndpoint>;
    state?: pulumi.Input<string>;
}
