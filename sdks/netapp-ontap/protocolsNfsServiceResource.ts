// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ProtocolsNfsServiceResource extends pulumi.CustomResource {
    /**
     * Get an existing ProtocolsNfsServiceResource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProtocolsNfsServiceResourceState, opts?: pulumi.CustomResourceOptions): ProtocolsNfsServiceResource {
        return new ProtocolsNfsServiceResource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netapp-ontap:index/protocolsNfsServiceResource:ProtocolsNfsServiceResource';

    /**
     * Returns true if the given object is an instance of ProtocolsNfsServiceResource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProtocolsNfsServiceResource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProtocolsNfsServiceResource.__pulumiType;
    }

    /**
     * Connection profile name
     */
    public readonly cxProfileName!: pulumi.Output<string>;
    /**
     * NFS should be enabled or disabled
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Protocol
     */
    public readonly protocol!: pulumi.Output<outputs.ProtocolsNfsServiceResourceProtocol>;
    /**
     * Specific Root user options
     */
    public readonly root!: pulumi.Output<outputs.ProtocolsNfsServiceResourceRoot>;
    /**
     * NFS Security options
     */
    public readonly security!: pulumi.Output<outputs.ProtocolsNfsServiceResourceSecurity>;
    /**
     * Whether SVM allows showmount
     */
    public readonly showmountEnabled!: pulumi.Output<boolean>;
    /**
     * IPInterface svm name
     */
    public readonly svmName!: pulumi.Output<string>;
    public readonly transport!: pulumi.Output<outputs.ProtocolsNfsServiceResourceTransport>;
    /**
     * Whether Vstorage is enabled
     */
    public readonly vstorageEnabled!: pulumi.Output<boolean>;
    public readonly windows!: pulumi.Output<outputs.ProtocolsNfsServiceResourceWindows>;

    /**
     * Create a ProtocolsNfsServiceResource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProtocolsNfsServiceResourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProtocolsNfsServiceResourceArgs | ProtocolsNfsServiceResourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProtocolsNfsServiceResourceState | undefined;
            resourceInputs["cxProfileName"] = state ? state.cxProfileName : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["root"] = state ? state.root : undefined;
            resourceInputs["security"] = state ? state.security : undefined;
            resourceInputs["showmountEnabled"] = state ? state.showmountEnabled : undefined;
            resourceInputs["svmName"] = state ? state.svmName : undefined;
            resourceInputs["transport"] = state ? state.transport : undefined;
            resourceInputs["vstorageEnabled"] = state ? state.vstorageEnabled : undefined;
            resourceInputs["windows"] = state ? state.windows : undefined;
        } else {
            const args = argsOrState as ProtocolsNfsServiceResourceArgs | undefined;
            if ((!args || args.cxProfileName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cxProfileName'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if ((!args || args.svmName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'svmName'");
            }
            resourceInputs["cxProfileName"] = args ? args.cxProfileName : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["root"] = args ? args.root : undefined;
            resourceInputs["security"] = args ? args.security : undefined;
            resourceInputs["showmountEnabled"] = args ? args.showmountEnabled : undefined;
            resourceInputs["svmName"] = args ? args.svmName : undefined;
            resourceInputs["transport"] = args ? args.transport : undefined;
            resourceInputs["vstorageEnabled"] = args ? args.vstorageEnabled : undefined;
            resourceInputs["windows"] = args ? args.windows : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProtocolsNfsServiceResource.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ProtocolsNfsServiceResource resources.
 */
export interface ProtocolsNfsServiceResourceState {
    /**
     * Connection profile name
     */
    cxProfileName?: pulumi.Input<string>;
    /**
     * NFS should be enabled or disabled
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Protocol
     */
    protocol?: pulumi.Input<inputs.ProtocolsNfsServiceResourceProtocol>;
    /**
     * Specific Root user options
     */
    root?: pulumi.Input<inputs.ProtocolsNfsServiceResourceRoot>;
    /**
     * NFS Security options
     */
    security?: pulumi.Input<inputs.ProtocolsNfsServiceResourceSecurity>;
    /**
     * Whether SVM allows showmount
     */
    showmountEnabled?: pulumi.Input<boolean>;
    /**
     * IPInterface svm name
     */
    svmName?: pulumi.Input<string>;
    transport?: pulumi.Input<inputs.ProtocolsNfsServiceResourceTransport>;
    /**
     * Whether Vstorage is enabled
     */
    vstorageEnabled?: pulumi.Input<boolean>;
    windows?: pulumi.Input<inputs.ProtocolsNfsServiceResourceWindows>;
}

/**
 * The set of arguments for constructing a ProtocolsNfsServiceResource resource.
 */
export interface ProtocolsNfsServiceResourceArgs {
    /**
     * Connection profile name
     */
    cxProfileName: pulumi.Input<string>;
    /**
     * NFS should be enabled or disabled
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Protocol
     */
    protocol: pulumi.Input<inputs.ProtocolsNfsServiceResourceProtocol>;
    /**
     * Specific Root user options
     */
    root?: pulumi.Input<inputs.ProtocolsNfsServiceResourceRoot>;
    /**
     * NFS Security options
     */
    security?: pulumi.Input<inputs.ProtocolsNfsServiceResourceSecurity>;
    /**
     * Whether SVM allows showmount
     */
    showmountEnabled?: pulumi.Input<boolean>;
    /**
     * IPInterface svm name
     */
    svmName: pulumi.Input<string>;
    transport?: pulumi.Input<inputs.ProtocolsNfsServiceResourceTransport>;
    /**
     * Whether Vstorage is enabled
     */
    vstorageEnabled?: pulumi.Input<boolean>;
    windows?: pulumi.Input<inputs.ProtocolsNfsServiceResourceWindows>;
}
