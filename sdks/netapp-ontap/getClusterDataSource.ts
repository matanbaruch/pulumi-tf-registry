// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getClusterDataSource(args: GetClusterDataSourceArgs, opts?: pulumi.InvokeOptions): Promise<GetClusterDataSourceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("netapp-ontap:index/getClusterDataSource:getClusterDataSource", {
        "cxProfileName": args.cxProfileName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getClusterDataSource.
 */
export interface GetClusterDataSourceArgs {
    cxProfileName: string;
}

/**
 * A collection of values returned by getClusterDataSource.
 */
export interface GetClusterDataSourceResult {
    readonly certificate: outputs.GetClusterDataSourceCertificate;
    readonly contact: string;
    readonly cxProfileName: string;
    readonly dnsDomains: string[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly location: string;
    readonly managementInterfaces: outputs.GetClusterDataSourceManagementInterface[];
    readonly name: string;
    readonly nameServers: string[];
    readonly nodes: outputs.GetClusterDataSourceNode[];
    readonly ntpServers: string[];
    readonly timezone: outputs.GetClusterDataSourceTimezone;
    readonly version: outputs.GetClusterDataSourceVersion;
}
export function getClusterDataSourceOutput(args: GetClusterDataSourceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetClusterDataSourceResult> {
    return pulumi.output(args).apply((a: any) => getClusterDataSource(a, opts))
}

/**
 * A collection of arguments for invoking getClusterDataSource.
 */
export interface GetClusterDataSourceOutputArgs {
    cxProfileName: pulumi.Input<string>;
}
