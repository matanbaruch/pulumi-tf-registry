// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SvmResource extends pulumi.CustomResource {
    /**
     * Get an existing SvmResource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SvmResourceState, opts?: pulumi.CustomResourceOptions): SvmResource {
        return new SvmResource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netapp-ontap:index/svmResource:SvmResource';

    /**
     * Returns true if the given object is an instance of SvmResource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SvmResource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SvmResource.__pulumiType;
    }

    /**
     * List of Aggregates to be assigned use for svm
     */
    public readonly aggregates!: pulumi.Output<outputs.SvmResourceAggregate[]>;
    /**
     * Comment for svm to be created
     */
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * Connection profile name
     */
    public readonly cxProfileName!: pulumi.Output<string>;
    /**
     * The name of the ipspace to manage
     */
    public readonly ipspace!: pulumi.Output<string | undefined>;
    /**
     * Language to use for svm
     */
    public readonly language!: pulumi.Output<string | undefined>;
    /**
     * Maximum number of volumes that can be created on the svm. Expects an integer or unlimited
     */
    public readonly maxVolumes!: pulumi.Output<string | undefined>;
    /**
     * The name of the svm to manage
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of the snapshot policy to manage
     */
    public readonly snapshotPolicy!: pulumi.Output<string | undefined>;
    /**
     * The subtype for svm to be created
     */
    public readonly subtype!: pulumi.Output<string | undefined>;

    /**
     * Create a SvmResource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SvmResourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SvmResourceArgs | SvmResourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SvmResourceState | undefined;
            resourceInputs["aggregates"] = state ? state.aggregates : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["cxProfileName"] = state ? state.cxProfileName : undefined;
            resourceInputs["ipspace"] = state ? state.ipspace : undefined;
            resourceInputs["language"] = state ? state.language : undefined;
            resourceInputs["maxVolumes"] = state ? state.maxVolumes : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["snapshotPolicy"] = state ? state.snapshotPolicy : undefined;
            resourceInputs["subtype"] = state ? state.subtype : undefined;
        } else {
            const args = argsOrState as SvmResourceArgs | undefined;
            if ((!args || args.aggregates === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aggregates'");
            }
            if ((!args || args.cxProfileName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cxProfileName'");
            }
            resourceInputs["aggregates"] = args ? args.aggregates : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["cxProfileName"] = args ? args.cxProfileName : undefined;
            resourceInputs["ipspace"] = args ? args.ipspace : undefined;
            resourceInputs["language"] = args ? args.language : undefined;
            resourceInputs["maxVolumes"] = args ? args.maxVolumes : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["snapshotPolicy"] = args ? args.snapshotPolicy : undefined;
            resourceInputs["subtype"] = args ? args.subtype : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SvmResource.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SvmResource resources.
 */
export interface SvmResourceState {
    /**
     * List of Aggregates to be assigned use for svm
     */
    aggregates?: pulumi.Input<pulumi.Input<inputs.SvmResourceAggregate>[]>;
    /**
     * Comment for svm to be created
     */
    comment?: pulumi.Input<string>;
    /**
     * Connection profile name
     */
    cxProfileName?: pulumi.Input<string>;
    /**
     * The name of the ipspace to manage
     */
    ipspace?: pulumi.Input<string>;
    /**
     * Language to use for svm
     */
    language?: pulumi.Input<string>;
    /**
     * Maximum number of volumes that can be created on the svm. Expects an integer or unlimited
     */
    maxVolumes?: pulumi.Input<string>;
    /**
     * The name of the svm to manage
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the snapshot policy to manage
     */
    snapshotPolicy?: pulumi.Input<string>;
    /**
     * The subtype for svm to be created
     */
    subtype?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SvmResource resource.
 */
export interface SvmResourceArgs {
    /**
     * List of Aggregates to be assigned use for svm
     */
    aggregates: pulumi.Input<pulumi.Input<inputs.SvmResourceAggregate>[]>;
    /**
     * Comment for svm to be created
     */
    comment?: pulumi.Input<string>;
    /**
     * Connection profile name
     */
    cxProfileName: pulumi.Input<string>;
    /**
     * The name of the ipspace to manage
     */
    ipspace?: pulumi.Input<string>;
    /**
     * Language to use for svm
     */
    language?: pulumi.Input<string>;
    /**
     * Maximum number of volumes that can be created on the svm. Expects an integer or unlimited
     */
    maxVolumes?: pulumi.Input<string>;
    /**
     * The name of the svm to manage
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the snapshot policy to manage
     */
    snapshotPolicy?: pulumi.Input<string>;
    /**
     * The subtype for svm to be created
     */
    subtype?: pulumi.Input<string>;
}
