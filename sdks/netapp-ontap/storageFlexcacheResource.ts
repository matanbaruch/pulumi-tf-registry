// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class StorageFlexcacheResource extends pulumi.CustomResource {
    /**
     * Get an existing StorageFlexcacheResource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StorageFlexcacheResourceState, opts?: pulumi.CustomResourceOptions): StorageFlexcacheResource {
        return new StorageFlexcacheResource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netapp-ontap:index/storageFlexcacheResource:StorageFlexcacheResource';

    /**
     * Returns true if the given object is an instance of StorageFlexcacheResource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StorageFlexcacheResource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StorageFlexcacheResource.__pulumiType;
    }

    /**
     * Set of the aggregates to use
     */
    public readonly aggregates!: pulumi.Output<outputs.StorageFlexcacheResourceAggregate[]>;
    /**
     * The number of constituents per aggregate
     */
    public readonly constituentsPerAggregate!: pulumi.Output<number>;
    /**
     * Connection profile name
     */
    public readonly cxProfileName!: pulumi.Output<string>;
    /**
     * The state of the dr cache
     */
    public readonly drCache!: pulumi.Output<boolean>;
    /**
     * The state of the global file locking
     */
    public readonly globalFileLockingEnabled!: pulumi.Output<boolean>;
    /**
     * The guarantee of the volume
     */
    public readonly guarantee!: pulumi.Output<outputs.StorageFlexcacheResourceGuarantee>;
    /**
     * Name of the junction path. Path to mount the FlexCache volume
     */
    public readonly junctionPath!: pulumi.Output<string>;
    /**
     * The name of the flexcache volume to manage
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Set of the origin volumes
     */
    public readonly origins!: pulumi.Output<outputs.StorageFlexcacheResourceOrigin[]>;
    /**
     * The size of the flexcache volume
     */
    public readonly size!: pulumi.Output<number>;
    /**
     * The unit used to interpret the size parameter
     */
    public readonly sizeUnit!: pulumi.Output<string>;
    /**
     * Name of the svm to use
     */
    public readonly svmName!: pulumi.Output<string>;
    /**
     * The state of the use tiered aggregates
     */
    public readonly useTieredAggregate!: pulumi.Output<boolean>;

    /**
     * Create a StorageFlexcacheResource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StorageFlexcacheResourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StorageFlexcacheResourceArgs | StorageFlexcacheResourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StorageFlexcacheResourceState | undefined;
            resourceInputs["aggregates"] = state ? state.aggregates : undefined;
            resourceInputs["constituentsPerAggregate"] = state ? state.constituentsPerAggregate : undefined;
            resourceInputs["cxProfileName"] = state ? state.cxProfileName : undefined;
            resourceInputs["drCache"] = state ? state.drCache : undefined;
            resourceInputs["globalFileLockingEnabled"] = state ? state.globalFileLockingEnabled : undefined;
            resourceInputs["guarantee"] = state ? state.guarantee : undefined;
            resourceInputs["junctionPath"] = state ? state.junctionPath : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["origins"] = state ? state.origins : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["sizeUnit"] = state ? state.sizeUnit : undefined;
            resourceInputs["svmName"] = state ? state.svmName : undefined;
            resourceInputs["useTieredAggregate"] = state ? state.useTieredAggregate : undefined;
        } else {
            const args = argsOrState as StorageFlexcacheResourceArgs | undefined;
            if ((!args || args.cxProfileName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cxProfileName'");
            }
            if ((!args || args.origins === undefined) && !opts.urn) {
                throw new Error("Missing required property 'origins'");
            }
            if ((!args || args.svmName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'svmName'");
            }
            resourceInputs["aggregates"] = args ? args.aggregates : undefined;
            resourceInputs["constituentsPerAggregate"] = args ? args.constituentsPerAggregate : undefined;
            resourceInputs["cxProfileName"] = args ? args.cxProfileName : undefined;
            resourceInputs["drCache"] = args ? args.drCache : undefined;
            resourceInputs["globalFileLockingEnabled"] = args ? args.globalFileLockingEnabled : undefined;
            resourceInputs["guarantee"] = args ? args.guarantee : undefined;
            resourceInputs["junctionPath"] = args ? args.junctionPath : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["origins"] = args ? args.origins : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["sizeUnit"] = args ? args.sizeUnit : undefined;
            resourceInputs["svmName"] = args ? args.svmName : undefined;
            resourceInputs["useTieredAggregate"] = args ? args.useTieredAggregate : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StorageFlexcacheResource.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StorageFlexcacheResource resources.
 */
export interface StorageFlexcacheResourceState {
    /**
     * Set of the aggregates to use
     */
    aggregates?: pulumi.Input<pulumi.Input<inputs.StorageFlexcacheResourceAggregate>[]>;
    /**
     * The number of constituents per aggregate
     */
    constituentsPerAggregate?: pulumi.Input<number>;
    /**
     * Connection profile name
     */
    cxProfileName?: pulumi.Input<string>;
    /**
     * The state of the dr cache
     */
    drCache?: pulumi.Input<boolean>;
    /**
     * The state of the global file locking
     */
    globalFileLockingEnabled?: pulumi.Input<boolean>;
    /**
     * The guarantee of the volume
     */
    guarantee?: pulumi.Input<inputs.StorageFlexcacheResourceGuarantee>;
    /**
     * Name of the junction path. Path to mount the FlexCache volume
     */
    junctionPath?: pulumi.Input<string>;
    /**
     * The name of the flexcache volume to manage
     */
    name?: pulumi.Input<string>;
    /**
     * Set of the origin volumes
     */
    origins?: pulumi.Input<pulumi.Input<inputs.StorageFlexcacheResourceOrigin>[]>;
    /**
     * The size of the flexcache volume
     */
    size?: pulumi.Input<number>;
    /**
     * The unit used to interpret the size parameter
     */
    sizeUnit?: pulumi.Input<string>;
    /**
     * Name of the svm to use
     */
    svmName?: pulumi.Input<string>;
    /**
     * The state of the use tiered aggregates
     */
    useTieredAggregate?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a StorageFlexcacheResource resource.
 */
export interface StorageFlexcacheResourceArgs {
    /**
     * Set of the aggregates to use
     */
    aggregates?: pulumi.Input<pulumi.Input<inputs.StorageFlexcacheResourceAggregate>[]>;
    /**
     * The number of constituents per aggregate
     */
    constituentsPerAggregate?: pulumi.Input<number>;
    /**
     * Connection profile name
     */
    cxProfileName: pulumi.Input<string>;
    /**
     * The state of the dr cache
     */
    drCache?: pulumi.Input<boolean>;
    /**
     * The state of the global file locking
     */
    globalFileLockingEnabled?: pulumi.Input<boolean>;
    /**
     * The guarantee of the volume
     */
    guarantee?: pulumi.Input<inputs.StorageFlexcacheResourceGuarantee>;
    /**
     * Name of the junction path. Path to mount the FlexCache volume
     */
    junctionPath?: pulumi.Input<string>;
    /**
     * The name of the flexcache volume to manage
     */
    name?: pulumi.Input<string>;
    /**
     * Set of the origin volumes
     */
    origins: pulumi.Input<pulumi.Input<inputs.StorageFlexcacheResourceOrigin>[]>;
    /**
     * The size of the flexcache volume
     */
    size?: pulumi.Input<number>;
    /**
     * The unit used to interpret the size parameter
     */
    sizeUnit?: pulumi.Input<string>;
    /**
     * Name of the svm to use
     */
    svmName: pulumi.Input<string>;
    /**
     * The state of the use tiered aggregates
     */
    useTieredAggregate?: pulumi.Input<boolean>;
}
