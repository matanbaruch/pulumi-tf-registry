// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getClusterPeerDataSource(args: GetClusterPeerDataSourceArgs, opts?: pulumi.InvokeOptions): Promise<GetClusterPeerDataSourceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("netapp-ontap:index/getClusterPeerDataSource:getClusterPeerDataSource", {
        "cxProfileName": args.cxProfileName,
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getClusterPeerDataSource.
 */
export interface GetClusterPeerDataSourceArgs {
    cxProfileName: string;
    name: string;
}

/**
 * A collection of values returned by getClusterPeerDataSource.
 */
export interface GetClusterPeerDataSourceResult {
    readonly cxProfileName: string;
    readonly encryption: outputs.GetClusterPeerDataSourceEncryption;
    readonly id: string;
    readonly ipAddress: string;
    readonly ipspace: outputs.GetClusterPeerDataSourceIpspace;
    readonly name: string;
    readonly peerApplications: string[];
    readonly remote: outputs.GetClusterPeerDataSourceRemote;
    readonly status: outputs.GetClusterPeerDataSourceStatus;
}
export function getClusterPeerDataSourceOutput(args: GetClusterPeerDataSourceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetClusterPeerDataSourceResult> {
    return pulumi.output(args).apply((a: any) => getClusterPeerDataSource(a, opts))
}

/**
 * A collection of arguments for invoking getClusterPeerDataSource.
 */
export interface GetClusterPeerDataSourceOutputArgs {
    cxProfileName: pulumi.Input<string>;
    name: pulumi.Input<string>;
}
