// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Nat extends pulumi.CustomResource {
    /**
     * Get an existing Nat resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NatState, opts?: pulumi.CustomResourceOptions): Nat {
        return new Nat(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netris:index/nat:Nat';

    /**
     * Returns true if the given object is an instance of Nat.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Nat {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Nat.__pulumiType;
    }

    /**
     * Rule action. Possible values: `DNAT`, `SNAT`, `ACCEPT_SNAT`, `MASQUERADE`
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * Custom comment for NAT rule
     */
    public readonly comment!: pulumi.Output<string>;
    /**
     * The internal IP address to which external hosts will gain access as a result of a DNAT translation. Only when action ==
     * `DNAT`
     */
    public readonly dnattoip!: pulumi.Output<string>;
    /**
     * The internal port to which external port will gain access as a result of a DNAT translation. Only when action == `DNAT`.
     * Ignoring when `portgroupid` is set
     */
    public readonly dnattoport!: pulumi.Output<string>;
    /**
     * Match traffic destined to this subnet
     */
    public readonly dstaddress!: pulumi.Output<string>;
    /**
     * Match traffic destined to this port. Ignoring when protocol == `all` or `icmp`. Ignoring when `portgroupid` is set
     */
    public readonly dstport!: pulumi.Output<string>;
    /**
     * The unique name of NAT rule
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * ID of a Port Group. Port Group will apply the list of ports to Destination Port and DNAT to Port. Only when action ==
     * `DNAT` and protocol == `tcp` or `udp`
     */
    public readonly portgroupid!: pulumi.Output<number | undefined>;
    /**
     * Possible values: `all`, `tcp`, `udp`, `icmp`
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * The site ID where this rule belongs
     */
    public readonly siteid!: pulumi.Output<number>;
    /**
     * Replace the original address with the specified one. Only when action == `SNAT`
     */
    public readonly snattoip!: pulumi.Output<string>;
    /**
     * Replace the original address with the pool of ip addresses. Only when action == `SNAT`
     */
    public readonly snattopool!: pulumi.Output<string>;
    /**
     * Match traffic sourced from this subnet
     */
    public readonly srcaddress!: pulumi.Output<string>;
    /**
     * Match traffic sourced from this port. Ignoring when protocol == `all` or `icmp`
     */
    public readonly srcport!: pulumi.Output<string>;
    /**
     * Rule state. Valid value is `enabled` or `disabled`. Default value is `enabled`.
     */
    public readonly state!: pulumi.Output<string | undefined>;

    /**
     * Create a Nat resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NatArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NatArgs | NatState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NatState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["dnattoip"] = state ? state.dnattoip : undefined;
            resourceInputs["dnattoport"] = state ? state.dnattoport : undefined;
            resourceInputs["dstaddress"] = state ? state.dstaddress : undefined;
            resourceInputs["dstport"] = state ? state.dstport : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["portgroupid"] = state ? state.portgroupid : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["siteid"] = state ? state.siteid : undefined;
            resourceInputs["snattoip"] = state ? state.snattoip : undefined;
            resourceInputs["snattopool"] = state ? state.snattopool : undefined;
            resourceInputs["srcaddress"] = state ? state.srcaddress : undefined;
            resourceInputs["srcport"] = state ? state.srcport : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
        } else {
            const args = argsOrState as NatArgs | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.dstaddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dstaddress'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if ((!args || args.siteid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteid'");
            }
            if ((!args || args.srcaddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'srcaddress'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["dnattoip"] = args ? args.dnattoip : undefined;
            resourceInputs["dnattoport"] = args ? args.dnattoport : undefined;
            resourceInputs["dstaddress"] = args ? args.dstaddress : undefined;
            resourceInputs["dstport"] = args ? args.dstport : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["portgroupid"] = args ? args.portgroupid : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["siteid"] = args ? args.siteid : undefined;
            resourceInputs["snattoip"] = args ? args.snattoip : undefined;
            resourceInputs["snattopool"] = args ? args.snattopool : undefined;
            resourceInputs["srcaddress"] = args ? args.srcaddress : undefined;
            resourceInputs["srcport"] = args ? args.srcport : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Nat.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Nat resources.
 */
export interface NatState {
    /**
     * Rule action. Possible values: `DNAT`, `SNAT`, `ACCEPT_SNAT`, `MASQUERADE`
     */
    action?: pulumi.Input<string>;
    /**
     * Custom comment for NAT rule
     */
    comment?: pulumi.Input<string>;
    /**
     * The internal IP address to which external hosts will gain access as a result of a DNAT translation. Only when action ==
     * `DNAT`
     */
    dnattoip?: pulumi.Input<string>;
    /**
     * The internal port to which external port will gain access as a result of a DNAT translation. Only when action == `DNAT`.
     * Ignoring when `portgroupid` is set
     */
    dnattoport?: pulumi.Input<string>;
    /**
     * Match traffic destined to this subnet
     */
    dstaddress?: pulumi.Input<string>;
    /**
     * Match traffic destined to this port. Ignoring when protocol == `all` or `icmp`. Ignoring when `portgroupid` is set
     */
    dstport?: pulumi.Input<string>;
    /**
     * The unique name of NAT rule
     */
    name?: pulumi.Input<string>;
    /**
     * ID of a Port Group. Port Group will apply the list of ports to Destination Port and DNAT to Port. Only when action ==
     * `DNAT` and protocol == `tcp` or `udp`
     */
    portgroupid?: pulumi.Input<number>;
    /**
     * Possible values: `all`, `tcp`, `udp`, `icmp`
     */
    protocol?: pulumi.Input<string>;
    /**
     * The site ID where this rule belongs
     */
    siteid?: pulumi.Input<number>;
    /**
     * Replace the original address with the specified one. Only when action == `SNAT`
     */
    snattoip?: pulumi.Input<string>;
    /**
     * Replace the original address with the pool of ip addresses. Only when action == `SNAT`
     */
    snattopool?: pulumi.Input<string>;
    /**
     * Match traffic sourced from this subnet
     */
    srcaddress?: pulumi.Input<string>;
    /**
     * Match traffic sourced from this port. Ignoring when protocol == `all` or `icmp`
     */
    srcport?: pulumi.Input<string>;
    /**
     * Rule state. Valid value is `enabled` or `disabled`. Default value is `enabled`.
     */
    state?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Nat resource.
 */
export interface NatArgs {
    /**
     * Rule action. Possible values: `DNAT`, `SNAT`, `ACCEPT_SNAT`, `MASQUERADE`
     */
    action: pulumi.Input<string>;
    /**
     * Custom comment for NAT rule
     */
    comment?: pulumi.Input<string>;
    /**
     * The internal IP address to which external hosts will gain access as a result of a DNAT translation. Only when action ==
     * `DNAT`
     */
    dnattoip?: pulumi.Input<string>;
    /**
     * The internal port to which external port will gain access as a result of a DNAT translation. Only when action == `DNAT`.
     * Ignoring when `portgroupid` is set
     */
    dnattoport?: pulumi.Input<string>;
    /**
     * Match traffic destined to this subnet
     */
    dstaddress: pulumi.Input<string>;
    /**
     * Match traffic destined to this port. Ignoring when protocol == `all` or `icmp`. Ignoring when `portgroupid` is set
     */
    dstport?: pulumi.Input<string>;
    /**
     * The unique name of NAT rule
     */
    name?: pulumi.Input<string>;
    /**
     * ID of a Port Group. Port Group will apply the list of ports to Destination Port and DNAT to Port. Only when action ==
     * `DNAT` and protocol == `tcp` or `udp`
     */
    portgroupid?: pulumi.Input<number>;
    /**
     * Possible values: `all`, `tcp`, `udp`, `icmp`
     */
    protocol: pulumi.Input<string>;
    /**
     * The site ID where this rule belongs
     */
    siteid: pulumi.Input<number>;
    /**
     * Replace the original address with the specified one. Only when action == `SNAT`
     */
    snattoip?: pulumi.Input<string>;
    /**
     * Replace the original address with the pool of ip addresses. Only when action == `SNAT`
     */
    snattopool?: pulumi.Input<string>;
    /**
     * Match traffic sourced from this subnet
     */
    srcaddress: pulumi.Input<string>;
    /**
     * Match traffic sourced from this port. Ignoring when protocol == `all` or `icmp`
     */
    srcport?: pulumi.Input<string>;
    /**
     * Rule state. Valid value is `enabled` or `disabled`. Default value is `enabled`.
     */
    state?: pulumi.Input<string>;
}
