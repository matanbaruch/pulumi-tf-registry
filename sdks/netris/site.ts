// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Site extends pulumi.CustomResource {
    /**
     * Get an existing Site resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SiteState, opts?: pulumi.CustomResourceOptions): Site {
        return new Site(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netris:index/site:Site';

    /**
     * Returns true if the given object is an instance of Site.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Site {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Site.__pulumiType;
    }

    /**
     * Possible values: `permit` or `deny`. Deny - Layer-3 packet forwarding is denied by default. ACLs are required to permit
     * necessary traffic flows. Deny ACLs will be applied before Permit ACLs. Permit - Layer-3 packet forwarding is allowed by
     * default. ACLs are required to deny unwanted traffic flows. Permit ACLs will be applied before Deny ACLs.
     */
    public readonly acldefaultpolicy!: pulumi.Output<string>;
    /**
     * The name of the site
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Site public ASN that should be used for external bgp peer configuration
     */
    public readonly publicasn!: pulumi.Output<number>;
    /**
     * ASN for ROH (Routing on the Host) compute instances, should be unique within the scope of a site, can be same for
     * different sites
     */
    public readonly rohasn!: pulumi.Output<number>;
    /**
     * ROH Routing profile defines set of routing prefixes to be advertised to ROH instances. Possible values: `default`,
     * `default_agg`, `full`. Default route only - Will advertise 0.0.0.0/0 + loopback address of physically connected switch.
     * Default + Aggregate - Will add prefixes of defined subnets + `Default` profile. Full - Will advertise all prefixes
     * available in the routing table of the connected switch
     */
    public readonly rohroutingprofile!: pulumi.Output<string>;
    /**
     * Site to site VPN mode. Site mesh available values are: `disabled`, `hub`, `spoke`, `dspoke`
     */
    public readonly sitemesh!: pulumi.Output<string>;
    /**
     * Possible values: `equinix_metal`, `phoenixnap_bmc`, `dot1q_trunk`, `netris`.
     */
    public readonly switchfabric!: pulumi.Output<string | undefined>;
    public readonly switchfabricproviders!: pulumi.Output<outputs.SiteSwitchfabricprovider[] | undefined>;
    /**
     * VLAN range.
     */
    public readonly vlanrange!: pulumi.Output<string>;
    /**
     * The range of VLAN IDs for automatic VLAN assignment. If not specified it will be the same value as vlanrange.
     */
    public readonly vlanrangeautoassign!: pulumi.Output<string>;
    /**
     * ASN for ROH (Routing on the Host) virtual compute instances, should be unique within the scope of a site, can be same
     * for different sites
     */
    public readonly vmasn!: pulumi.Output<number>;

    /**
     * Create a Site resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SiteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SiteArgs | SiteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SiteState | undefined;
            resourceInputs["acldefaultpolicy"] = state ? state.acldefaultpolicy : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["publicasn"] = state ? state.publicasn : undefined;
            resourceInputs["rohasn"] = state ? state.rohasn : undefined;
            resourceInputs["rohroutingprofile"] = state ? state.rohroutingprofile : undefined;
            resourceInputs["sitemesh"] = state ? state.sitemesh : undefined;
            resourceInputs["switchfabric"] = state ? state.switchfabric : undefined;
            resourceInputs["switchfabricproviders"] = state ? state.switchfabricproviders : undefined;
            resourceInputs["vlanrange"] = state ? state.vlanrange : undefined;
            resourceInputs["vlanrangeautoassign"] = state ? state.vlanrangeautoassign : undefined;
            resourceInputs["vmasn"] = state ? state.vmasn : undefined;
        } else {
            const args = argsOrState as SiteArgs | undefined;
            if ((!args || args.acldefaultpolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'acldefaultpolicy'");
            }
            if ((!args || args.publicasn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'publicasn'");
            }
            if ((!args || args.rohasn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rohasn'");
            }
            if ((!args || args.rohroutingprofile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rohroutingprofile'");
            }
            if ((!args || args.sitemesh === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sitemesh'");
            }
            if ((!args || args.vmasn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vmasn'");
            }
            resourceInputs["acldefaultpolicy"] = args ? args.acldefaultpolicy : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["publicasn"] = args ? args.publicasn : undefined;
            resourceInputs["rohasn"] = args ? args.rohasn : undefined;
            resourceInputs["rohroutingprofile"] = args ? args.rohroutingprofile : undefined;
            resourceInputs["sitemesh"] = args ? args.sitemesh : undefined;
            resourceInputs["switchfabric"] = args ? args.switchfabric : undefined;
            resourceInputs["switchfabricproviders"] = args ? args.switchfabricproviders : undefined;
            resourceInputs["vlanrange"] = args ? args.vlanrange : undefined;
            resourceInputs["vlanrangeautoassign"] = args ? args.vlanrangeautoassign : undefined;
            resourceInputs["vmasn"] = args ? args.vmasn : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Site.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Site resources.
 */
export interface SiteState {
    /**
     * Possible values: `permit` or `deny`. Deny - Layer-3 packet forwarding is denied by default. ACLs are required to permit
     * necessary traffic flows. Deny ACLs will be applied before Permit ACLs. Permit - Layer-3 packet forwarding is allowed by
     * default. ACLs are required to deny unwanted traffic flows. Permit ACLs will be applied before Deny ACLs.
     */
    acldefaultpolicy?: pulumi.Input<string>;
    /**
     * The name of the site
     */
    name?: pulumi.Input<string>;
    /**
     * Site public ASN that should be used for external bgp peer configuration
     */
    publicasn?: pulumi.Input<number>;
    /**
     * ASN for ROH (Routing on the Host) compute instances, should be unique within the scope of a site, can be same for
     * different sites
     */
    rohasn?: pulumi.Input<number>;
    /**
     * ROH Routing profile defines set of routing prefixes to be advertised to ROH instances. Possible values: `default`,
     * `default_agg`, `full`. Default route only - Will advertise 0.0.0.0/0 + loopback address of physically connected switch.
     * Default + Aggregate - Will add prefixes of defined subnets + `Default` profile. Full - Will advertise all prefixes
     * available in the routing table of the connected switch
     */
    rohroutingprofile?: pulumi.Input<string>;
    /**
     * Site to site VPN mode. Site mesh available values are: `disabled`, `hub`, `spoke`, `dspoke`
     */
    sitemesh?: pulumi.Input<string>;
    /**
     * Possible values: `equinix_metal`, `phoenixnap_bmc`, `dot1q_trunk`, `netris`.
     */
    switchfabric?: pulumi.Input<string>;
    switchfabricproviders?: pulumi.Input<pulumi.Input<inputs.SiteSwitchfabricprovider>[]>;
    /**
     * VLAN range.
     */
    vlanrange?: pulumi.Input<string>;
    /**
     * The range of VLAN IDs for automatic VLAN assignment. If not specified it will be the same value as vlanrange.
     */
    vlanrangeautoassign?: pulumi.Input<string>;
    /**
     * ASN for ROH (Routing on the Host) virtual compute instances, should be unique within the scope of a site, can be same
     * for different sites
     */
    vmasn?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Site resource.
 */
export interface SiteArgs {
    /**
     * Possible values: `permit` or `deny`. Deny - Layer-3 packet forwarding is denied by default. ACLs are required to permit
     * necessary traffic flows. Deny ACLs will be applied before Permit ACLs. Permit - Layer-3 packet forwarding is allowed by
     * default. ACLs are required to deny unwanted traffic flows. Permit ACLs will be applied before Deny ACLs.
     */
    acldefaultpolicy: pulumi.Input<string>;
    /**
     * The name of the site
     */
    name?: pulumi.Input<string>;
    /**
     * Site public ASN that should be used for external bgp peer configuration
     */
    publicasn: pulumi.Input<number>;
    /**
     * ASN for ROH (Routing on the Host) compute instances, should be unique within the scope of a site, can be same for
     * different sites
     */
    rohasn: pulumi.Input<number>;
    /**
     * ROH Routing profile defines set of routing prefixes to be advertised to ROH instances. Possible values: `default`,
     * `default_agg`, `full`. Default route only - Will advertise 0.0.0.0/0 + loopback address of physically connected switch.
     * Default + Aggregate - Will add prefixes of defined subnets + `Default` profile. Full - Will advertise all prefixes
     * available in the routing table of the connected switch
     */
    rohroutingprofile: pulumi.Input<string>;
    /**
     * Site to site VPN mode. Site mesh available values are: `disabled`, `hub`, `spoke`, `dspoke`
     */
    sitemesh: pulumi.Input<string>;
    /**
     * Possible values: `equinix_metal`, `phoenixnap_bmc`, `dot1q_trunk`, `netris`.
     */
    switchfabric?: pulumi.Input<string>;
    switchfabricproviders?: pulumi.Input<pulumi.Input<inputs.SiteSwitchfabricprovider>[]>;
    /**
     * VLAN range.
     */
    vlanrange?: pulumi.Input<string>;
    /**
     * The range of VLAN IDs for automatic VLAN assignment. If not specified it will be the same value as vlanrange.
     */
    vlanrangeautoassign?: pulumi.Input<string>;
    /**
     * ASN for ROH (Routing on the Host) virtual compute instances, should be unique within the scope of a site, can be same
     * for different sites
     */
    vmasn: pulumi.Input<number>;
}
