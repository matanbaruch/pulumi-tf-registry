// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Subnet extends pulumi.CustomResource {
    /**
     * Get an existing Subnet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SubnetState, opts?: pulumi.CustomResourceOptions): Subnet {
        return new Subnet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netris:index/subnet:Subnet';

    /**
     * Returns true if the given object is an instance of Subnet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Subnet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Subnet.__pulumiType;
    }

    /**
     * Use when purpose is set to `management`.
     */
    public readonly defaultgateway!: pulumi.Output<string | undefined>;
    /**
     * Unique name for current subnet.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Unique prefix for subnet, must not overlap with other subnets.
     */
    public readonly prefix!: pulumi.Output<string>;
    /**
     * Describes which kind of service will be able to use this subnet. Possible values: `common`, `loopback`, `management`,
     * `load-balancer`, `nat`, `inactive`
     */
    public readonly purpose!: pulumi.Output<string>;
    /**
     * List of sites IDs where this subnet is available.
     */
    public readonly siteids!: pulumi.Output<number[] | undefined>;
    /**
     * ID of tenant. Users of this tenant will be permitted to manage the subnet.
     */
    public readonly tenantid!: pulumi.Output<number>;
    /**
     * ID of VPC. If not specified, the subnet will be created in the VPC marked as a default.
     */
    public readonly vpcid!: pulumi.Output<number | undefined>;

    /**
     * Create a Subnet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SubnetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SubnetArgs | SubnetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SubnetState | undefined;
            resourceInputs["defaultgateway"] = state ? state.defaultgateway : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["prefix"] = state ? state.prefix : undefined;
            resourceInputs["purpose"] = state ? state.purpose : undefined;
            resourceInputs["siteids"] = state ? state.siteids : undefined;
            resourceInputs["tenantid"] = state ? state.tenantid : undefined;
            resourceInputs["vpcid"] = state ? state.vpcid : undefined;
        } else {
            const args = argsOrState as SubnetArgs | undefined;
            if ((!args || args.prefix === undefined) && !opts.urn) {
                throw new Error("Missing required property 'prefix'");
            }
            if ((!args || args.purpose === undefined) && !opts.urn) {
                throw new Error("Missing required property 'purpose'");
            }
            if ((!args || args.tenantid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantid'");
            }
            resourceInputs["defaultgateway"] = args ? args.defaultgateway : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["prefix"] = args ? args.prefix : undefined;
            resourceInputs["purpose"] = args ? args.purpose : undefined;
            resourceInputs["siteids"] = args ? args.siteids : undefined;
            resourceInputs["tenantid"] = args ? args.tenantid : undefined;
            resourceInputs["vpcid"] = args ? args.vpcid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Subnet.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Subnet resources.
 */
export interface SubnetState {
    /**
     * Use when purpose is set to `management`.
     */
    defaultgateway?: pulumi.Input<string>;
    /**
     * Unique name for current subnet.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique prefix for subnet, must not overlap with other subnets.
     */
    prefix?: pulumi.Input<string>;
    /**
     * Describes which kind of service will be able to use this subnet. Possible values: `common`, `loopback`, `management`,
     * `load-balancer`, `nat`, `inactive`
     */
    purpose?: pulumi.Input<string>;
    /**
     * List of sites IDs where this subnet is available.
     */
    siteids?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * ID of tenant. Users of this tenant will be permitted to manage the subnet.
     */
    tenantid?: pulumi.Input<number>;
    /**
     * ID of VPC. If not specified, the subnet will be created in the VPC marked as a default.
     */
    vpcid?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Subnet resource.
 */
export interface SubnetArgs {
    /**
     * Use when purpose is set to `management`.
     */
    defaultgateway?: pulumi.Input<string>;
    /**
     * Unique name for current subnet.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique prefix for subnet, must not overlap with other subnets.
     */
    prefix: pulumi.Input<string>;
    /**
     * Describes which kind of service will be able to use this subnet. Possible values: `common`, `loopback`, `management`,
     * `load-balancer`, `nat`, `inactive`
     */
    purpose: pulumi.Input<string>;
    /**
     * List of sites IDs where this subnet is available.
     */
    siteids?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * ID of tenant. Users of this tenant will be permitted to manage the subnet.
     */
    tenantid: pulumi.Input<number>;
    /**
     * ID of VPC. If not specified, the subnet will be created in the VPC marked as a default.
     */
    vpcid?: pulumi.Input<number>;
}
